/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 */

group "widgetruntime.GadgetApplication.UiWindowListener";

include "adjunct/quick/windows/DesktopGadget.h";
include "adjunct/quick_toolkit/selftest/src/OpMockWindowCommander.h";
include "adjunct/widgetruntime/GadgetApplication.h";
include "modules/gadgets/OpGadgetManager.h";

require init; 
require WIDGET_RUNTIME_SUPPORT;

global
{
	struct Fixture
	{
		OP_STATUS Init(const OpStringC& gadget_path)
		{
			RETURN_IF_ERROR(g_gadget_manager->CreateGadget(
						&m_commander.m_gadget, gadget_path, URL_GADGET_INSTALL_CONTENT));
			m_gadget_holder.reset(m_commander.m_gadget);

			OpUiWindowListener::CreateUiWindowArgs args;
			args.type = OpUiWindowListener::WINDOWTYPE_WIDGET;

			OpAutoPtr<OpUiWindowListener> listener(
					m_app.CreateUiWindowListener());
			RETURN_IF_ERROR(listener->CreateUiWindow(&m_commander, args));

			return OpStatus::OK;
		}

		~Fixture()
		{
			if (OpStatus::IsSuccess(g_gadget_manager->DestroyGadget(
						m_gadget_holder.get())))
			{
				m_gadget_holder.release();
			}
		}

		OpAutoPtr<OpGadget> m_gadget_holder;
		OpMockWindowCommander m_commander;
		GadgetApplication m_app;
	};
}


test("Don't pretend we can handle non-gadget windows")
{
	GadgetApplication app;

	OpUiWindowListener::CreateUiWindowArgs args;
	OpAutoPtr<OpUiWindowListener> listener(app.CreateUiWindowListener());

	args.type = OpUiWindowListener::WINDOWTYPE_REGULAR;
	verify_status(OpStatus::ERR, listener->CreateUiWindow(NULL, args));

	args.type = OpUiWindowListener::WINDOWTYPE_EXTENSION;
	verify_status(OpStatus::ERR, listener->CreateUiWindow(NULL, args));
}

test("Window created is of correct type")
		file uni gadget_path "data/textField.wgt";
{
	Fixture fixture;
	verify_success(fixture.Init(gadget_path));
	DesktopWindow* gadget_window = fixture.m_app.GetActiveDesktopWindow(FALSE);

	verify(gadget_window != NULL);	
	verify(gadget_window->GetType() == OpTypedObject::WINDOW_TYPE_GADGET);
}

test("Window created is associated with OpWindowCommander")
		require success "Window created is of correct type";
		file uni gadget_path "data/textField.wgt";
{
	Fixture fixture;
	verify_success(fixture.Init(gadget_path));
	DesktopWindow* gadget_window = fixture.m_app.GetActiveDesktopWindow(FALSE);

	verify(gadget_window->GetWindowCommander() == &fixture.m_commander);

	// The association can only be set up once DesktopWindow::Init() creates
	// the OpWindow.  But DesktopWindow::Init() messes with
	// ClassicApplication, so we currently don't call it for gadgets in this
	// test suite.
//	verify(gadget_window->GetOpWindow() == fixture.m_commander.GetOpWindow());
}

test("Window created is associated with OpGadget")
		require success "Window created is of correct type";
		file uni gadget_path "data/textField.wgt";
{
	Fixture fixture;
	verify_success(fixture.Init(gadget_path));
	DesktopGadget* gadget_window = static_cast<DesktopGadget*>(
			fixture.m_app.GetActiveDesktopWindow(FALSE));

	verify(gadget_window->GetOpGadget() == fixture.m_commander.GetGadget());
}
