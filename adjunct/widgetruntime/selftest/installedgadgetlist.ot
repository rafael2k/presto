/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Wojciech Dzierzanowski (wdzierzanowski)
 */

group "widgetruntime.installedgadgetlist";

require init;
require WIDGET_RUNTIME_SUPPORT;

include "adjunct/widgetruntime/InstalledGadgetList.h";
include "adjunct/widgetruntime/pi/PlatformGadgetList.h";


global
{
	class TestGadgetSource : public PlatformGadgetList
	{
	public:
		TestGadgetSource() : m_dirty(TRUE)  {}

		virtual BOOL HasChangedSince(time_t last_update_time) const
			{ return m_dirty; }

		virtual OP_STATUS GetAll(
				OpAutoVector<GadgetInstallerContext>& gadget_contexts,
				BOOL list_globally_installed_gadgets = FALSE) const
		{
			gadget_contexts.DeleteAll();
			for (UINT32 i = 0; i < m_gadget_contexts.GetCount(); ++i)
			{
				OpAutoPtr<GadgetInstallerContext> context(
						OP_NEW(GadgetInstallerContext,
								(*m_gadget_contexts.Get(i))));
				RETURN_OOM_IF_NULL(context.get());
				RETURN_IF_ERROR(gadget_contexts.Add(context.get()));
				context.release();
			}
			m_dirty = FALSE;
			return OpStatus::OK;
		}

		OP_STATUS Add(const OpStringC& display_name)
		{
			OpAutoPtr<GadgetInstallerContext> context(
					OP_NEW(GadgetInstallerContext, ()));
			RETURN_OOM_IF_NULL(context.get());
			RETURN_IF_ERROR(context->m_display_name.Set(display_name));
			RETURN_IF_ERROR(m_gadget_contexts.Add(context.get()));
			context.release();
			m_dirty = TRUE;
			return OpStatus::OK;
		}

		void Remove(const OpStringC& display_name)
		{
			for (UINT32 i = 0; i < m_gadget_contexts.GetCount(); ++i)
			{
				if (display_name == m_gadget_contexts.Get(i)->m_display_name)
				{
					m_gadget_contexts.Delete(i);
					break;
				}
			}
			m_dirty = TRUE;
		}

	private:
		mutable BOOL m_dirty;
		OpAutoVector<GadgetInstallerContext> m_gadget_contexts;
	};
}


test("(Re)initializing InstalledGadgetList") leakcheck;
{
	TestGadgetSource* source = OP_NEW(TestGadgetSource, ());
	verify_not_oom(source);

	InstalledGadgetList list;

	verify_success(list.Init(source));
	
	source = OP_NEW(TestGadgetSource, ());
	verify_not_oom(source);
	verify_success(list.Init(source));
}

test("Checking if gadget list contains a gadget")
{
	const uni_char* names[] = {
		UNI_L("name0"),
		UNI_L("name1"),
		UNI_L("name2"),
	};

	TestGadgetSource* source = OP_NEW(TestGadgetSource, ());
	verify_not_oom(source);

	InstalledGadgetList list;
	verify_success(list.Init(source));
	
	for (size_t i = 0; i < ARRAY_SIZE(names); ++i)
	{
		for (size_t j = i; j < ARRAY_SIZE(names); ++j)
		{
			verify(!list.Contains(names[j]));
		}
		verify_success(source->Add(names[i]));
		for (size_t j = 0; j <= i; ++j)
		{
			verify(list.Contains(names[j]));
		}
	}
	
	for (size_t i = 0; i < ARRAY_SIZE(names); ++i)
	{
		for (size_t j = i; j < ARRAY_SIZE(names); ++j)
		{
			verify(list.Contains(names[j]));
		}
		source->Remove(names[i]);
		for (size_t j = 0; j <= i; ++j)
		{
			verify(!list.Contains(names[j]));
		}
	}
}
