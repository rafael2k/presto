/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 */

group "widgetruntime.gadgetstartup";

include "adjunct/widgetruntime/GadgetStartup.h";
include "adjunct/widgetruntime/selftest/src/ST_CmdLineUtils.h";

/**
 * Tests for utilities used during gadget startup.
 *
 * @author Blazej Kazmierczak (bkazmierczak@opera.com)
 * @author Tomasz Kupczyk (tkupczyk@opera.com)
 */

global
{
	const char* gadget_config_args[] = {"", "-widget", "/some/path/bla/config.xml"};
	const char* gadget_archive_args[] = {"", "-widget", "/some/path/widget.wgt"};
	const char* bad_path_args[] = {"", "-widget", "/some/trash/here"};
	const char* empty_path_args[] = {"", "-widget", ""};
	const char* no_path_args[] = {"", "-widget"};
}

exit
{
	ST_CmdLineUtils::ClearArguments();
}


test("No parameter to -widget is an error")
{
	verify_status(OpStatus::ERR, ST_CmdLineUtils::SetArguments(no_path_args, 2));
}

test("Checking if browser startup was requested")
{
	verify_success(ST_CmdLineUtils::ClearArguments());
	verify(GadgetStartup::IsBrowserStartupRequested());

	verify_success(ST_CmdLineUtils::SetArguments(gadget_config_args));
	verify(!GadgetStartup::IsBrowserStartupRequested());

	verify_success(ST_CmdLineUtils::SetArguments(gadget_archive_args));
	verify(!GadgetStartup::IsBrowserStartupRequested());

	verify_success(ST_CmdLineUtils::SetArguments(bad_path_args));
	verify(!GadgetStartup::IsBrowserStartupRequested());

	verify_success(ST_CmdLineUtils::SetArguments(empty_path_args));
	verify(!GadgetStartup::IsBrowserStartupRequested());
}

test("Checking if gadget startup was requested")
{
	verify_success(ST_CmdLineUtils::ClearArguments());
	verify(!GadgetStartup::IsGadgetStartupRequested());

	verify_success(ST_CmdLineUtils::SetArguments(gadget_config_args));
	verify(GadgetStartup::IsGadgetStartupRequested());

	verify_success(ST_CmdLineUtils::SetArguments(gadget_archive_args));
	verify(!GadgetStartup::IsGadgetStartupRequested());

	verify_success(ST_CmdLineUtils::SetArguments(bad_path_args));
	verify(!GadgetStartup::IsGadgetStartupRequested());

	verify_success(ST_CmdLineUtils::SetArguments(empty_path_args));
	verify(!GadgetStartup::IsGadgetStartupRequested());

	verify_status(OpStatus::ERR, ST_CmdLineUtils::SetArguments(no_path_args, 2));
	verify(!GadgetStartup::IsGadgetStartupRequested());
}

test("Obtaining requested gadget file path")
{
	OpString path;

	verify_success(ST_CmdLineUtils::ClearArguments());
	verify_status(OpStatus::ERR,
			GadgetStartup::GetRequestedGadgetFilePath(path));

	const char* const* args[] =	{
			bad_path_args,
			empty_path_args,
			gadget_config_args,
			gadget_archive_args
	};
	for (size_t i = 0; i < ARRAY_SIZE(args); ++i)
	{
		verify_success(ST_CmdLineUtils::SetArguments(args[i]));
		verify_success(GadgetStartup::GetRequestedGadgetFilePath(path));
		verify_string(path, args[i][2]);
	}
}


table ValidWidgetParams(const char* /* gadget path */)
{
	{"textField.wgt"}
	{"custom-start-file.wgt"}
	{"TextField/config.xml"}
	{"custom-start-file/config.xml"}
}

test("Obtaining gadget profile name")
		file path_prefix	"data/";
{
	OpString profile_name;

	verify_success(ST_CmdLineUtils::ClearArguments());
	verify_status(OpStatus::ERR, GadgetStartup::GetProfileName(profile_name));

	verify_success(ST_CmdLineUtils::SetArguments(bad_path_args));
	verify_status(OpStatus::ERR, GadgetStartup::GetProfileName(profile_name));

	verify_success(ST_CmdLineUtils::SetArguments(empty_path_args));
	verify_status(OpStatus::ERR, GadgetStartup::GetProfileName(profile_name));

	verify_status(OpStatus::ERR, ST_CmdLineUtils::SetArguments(no_path_args, 2));
	verify_status(OpStatus::ERR, GadgetStartup::GetProfileName(profile_name));

	iterate (path_suffix) from ValidWidgetParams
	{
		OpString8 gadget_path;
		gadget_path.SetConcat(path_prefix, path_suffix);
		const char* args[] = {"", "-widget", gadget_path.CStr()};
		verify_success(ST_CmdLineUtils::SetArguments(args, ARRAY_SIZE(args)));
		if (OpStatus::IsError(GadgetStartup::GetProfileName(profile_name)))
		{
			OpString8 msg;
			msg.SetConcat("GetProfileName() failed for ", gadget_path);
			ST_failed(msg);
			break;
		}
	}
}
