/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Blazej Kazmierczak (bkazmierczak@opera.com)
 */
 
 
 group "desktop_util.forderrecurse";
 
 include "adjunct/desktop_util/file_utils/folder_recurse.h";
 
 global
 {
	 
	 int path_length(const uni_char* path_t)
	 {
		int temp_depth=0;
 		for (int i=0; path_t[i] != 0;i++)
				{
					if (PATHSEPCHAR == path_t[i])
						temp_depth++;
				}
		return temp_depth;
	 }
 
 }
 
 
 test("traverse directory test")
 file        testfile        "data/test_folder1";
 {
    OpString start_path;
	start_path.Set(testfile);
	
	FolderRecursor recursor1(1);
	verify(OpStatus::IsSuccess(recursor1.SetRootFolder(start_path)));
	int base_path_depth = path_length(start_path.CStr());
	
	int result_depth1 = 0;
	int result_depth2 = 0;
	int result_depth  = 0;
	
	OpFile* file = NULL;
	do
	{  
		file = NULL;
		verify(OpStatus::IsSuccess(recursor1.GetNextFile(file)));
		if (NULL != file)
		{
			OpAutoPtr<OpFile> file_holder(file);
			int temp_path_depth = path_length(file->GetFullPath());
			if (result_depth1 < temp_path_depth)
			{
				result_depth1 = temp_path_depth;
			}
		}
	}
	while (NULL != file);
	
	FolderRecursor recursor2(2);
	verify(OpStatus::IsSuccess(recursor2.SetRootFolder(start_path)));
	do
	{  
		file = NULL;
		verify(OpStatus::IsSuccess(recursor2.GetNextFile(file)));
		if (NULL != file)
		{
			OpAutoPtr<OpFile> file_holder(file);
			int temp_path_depth = path_length(file->GetFullPath());
			if (result_depth2 < temp_path_depth)
			{
				result_depth2 = temp_path_depth;
			}		
		}
	}
	while (NULL != file);
	
	// no limitation for depth
	FolderRecursor recursor;
	verify(OpStatus::IsSuccess(recursor.SetRootFolder(start_path)));
	do
	{  
		file = NULL;
		verify(OpStatus::IsSuccess(recursor.GetNextFile(file)));
		if (NULL != file)
		{
			OpAutoPtr<OpFile> file_holder(file);
			int temp_path_depth = path_length(file->GetFullPath());
			if (result_depth < temp_path_depth)
			{
				result_depth = temp_path_depth;
			}	
		}
	}
	while (NULL != file);

	
	verify(result_depth1 == base_path_depth + 2);	
	verify(result_depth2 == base_path_depth + 3);
	verify(result_depth  >= base_path_depth + 3);
 }
 