/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "desktop_util.opunique";

include "adjunct/desktop_util/algorithms/opunique.h";

global
{
	struct TrueOn
	{
		explicit TrueOn(unsigned max_count) : m_count(0), m_max_count(max_count) {}
		bool operator()(const OpStringC&) { return m_max_count == m_count++; }
		unsigned m_count;
		const unsigned m_max_count;
	};
}

test("Ensuring a unique name")
{
	OpString name;
	name.Set(UNI_L(""));
	const uni_char format[] = UNI_L(" (%d)");

	TrueOn true_on_0(0);
	for (OpUnique unique(name, format); !true_on_0(name); )
		verify_success(unique.Next());
	verify_string(name, UNI_L(""));

	TrueOn true_on_1(1);
	for (OpUnique unique(name, format); !true_on_1(name); )
		verify_success(unique.Next());
	verify_string(name, UNI_L(" (2)"));

	name.Empty();
	TrueOn true_on_2(2);
	for (OpUnique unique(name, format); !true_on_2(name); )
		verify_success(unique.Next());
	verify_string(name, UNI_L(" (3)"));

	name.Empty();
	TrueOn true_on_12(12);
	for (OpUnique unique(name, format); !true_on_12(name); )
		verify_success(unique.Next());
	verify_string(name, UNI_L(" (13)"));

	name.Set(UNI_L("foo"));
	TrueOn true_on_00(0);
	for (OpUnique unique(name, format); !true_on_00(name); )
		verify_success(unique.Next());
	verify_string(name, UNI_L("foo"));

	name.Set(UNI_L("foo"));
	TrueOn true_on_3(3);
	for (OpUnique unique(name, format); !true_on_3(name); )
		verify_success(unique.Next());
	verify_string(name, UNI_L("foo (4)"));
}
