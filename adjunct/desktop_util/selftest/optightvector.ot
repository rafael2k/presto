/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "desktop_util.optightvector";

include "adjunct/desktop_util/adt/optightvector.h";

global
{
	struct Struct
	{
		// No operator==().  OpTightVector<Struct>::Find() will not compile,
		// but it won't be instantiated if it's not used.
		Struct(unsigned i) : i(i) {}
		unsigned i;
	};

	struct StructEqualityComparable
	{
		StructEqualityComparable(unsigned i) : i(i) {}
		bool operator==(const StructEqualityComparable& other) const { return other.i == i; }
		unsigned i;
	};
}

test("Adding items")
{
	OpTightVector<unsigned> vector;
	OpTightVector<Struct> struct_vector;
	OpTightVector<StructEqualityComparable> struct_ec_vector;

	for (unsigned i = 0; i < 10; i++)
	{
		verify_success(vector.Add(i));
		verify_success(struct_vector.Add(i));
		verify_success(struct_ec_vector.Add(i));
	}

	verify(vector.GetCount() == 10);
	verify(struct_vector.GetCount() == 10);
	verify(struct_ec_vector.GetCount() == 10);
	for (unsigned i = 0; i < vector.GetCount(); i++)
	{
		verify(vector[i] == i);
		verify(struct_vector[i].i == i);
		verify(struct_ec_vector[i] == StructEqualityComparable(i));
	}
}

test("Removing items")
{
	OpTightVector<unsigned> vector;
	OpTightVector<Struct> struct_vector;
	OpTightVector<StructEqualityComparable> struct_ec_vector;

	for (unsigned i = 0; i < 10; i++)
	{
		verify_success(vector.Add(i));
		verify_success(struct_vector.Add(i));
		verify_success(struct_ec_vector.Add(i));
	}

	vector.Remove(5);
	struct_vector.Remove(5);
	struct_ec_vector.Remove(5);

	verify(vector.GetCount() == 9);
	verify(struct_vector.GetCount() == 9);
	verify(struct_ec_vector.GetCount() == 9);
	for (unsigned i = 0; i < 5; i++)
	{
		verify(vector[i] == i);
		verify(struct_vector[i].i == i);
		verify(struct_ec_vector[i] == StructEqualityComparable(i));
	}
	for (unsigned i = 5; i < vector.GetCount(); i++)
	{
		verify(vector[i] == i + 1);
		verify(struct_vector[i].i == i + 1);
		verify(struct_ec_vector[i] == StructEqualityComparable(i + 1));
	}
}

test("Inserting items")
{
	OpTightVector<unsigned> vector;
	OpTightVector<Struct> struct_vector;
	OpTightVector<StructEqualityComparable> struct_ec_vector;

	for (unsigned i = 0; i < 10; i++)
	{
		verify_success(vector.Add(i));
		verify_success(struct_vector.Add(i));
		verify_success(struct_ec_vector.Add(i));
	}

	vector.Insert(5, 4);
	struct_vector.Insert(5, 4);
	struct_ec_vector.Insert(5, 4);

	verify(vector.GetCount() == 11);
	verify(struct_vector.GetCount() == 11);
	verify(struct_ec_vector.GetCount() == 11);
	for (unsigned i = 0; i < 5; i++)
	{
		verify(vector[i] == i);
		verify(struct_vector[i].i == i);
		verify(struct_ec_vector[i] == StructEqualityComparable(i));
	}
	for (unsigned i = 5; i < vector.GetCount(); i++)
	{
		verify(vector[i] == i - 1);
		verify(struct_vector[i].i == i - 1);
		verify(struct_ec_vector[i] == StructEqualityComparable(i - 1));
	}
}

test("Finding items")
{
	OpTightVector<unsigned> vector;
	// OpTightVector<Struct>::Find() won't compile
	OpTightVector<StructEqualityComparable> struct_ec_vector;

	for (int i = 0; i < 10; i++)
	{
		verify(vector.Find(i) == -1);
		verify(struct_ec_vector.Find(StructEqualityComparable(i)) == -1);
	}

	for (unsigned i = 0; i < 10; i++)
	{
		verify_success(vector.Add(10 - i));
		verify_success(struct_ec_vector.Add(10 - i));
	}

	for (int i = 0; i < 10; i++)
	{
		verify(vector.Find(i + 1) == 10 - i - 1);
		verify(struct_ec_vector.Find(StructEqualityComparable(i + 1)) == 10 - i -1);
	}

	verify(vector.Find(0) == -1);
	verify(struct_ec_vector.Find(0) == -1);
	verify(vector.Find(11) == -1);
	verify(struct_ec_vector.Find(11) == -1);
}

test("Clear all items")
{
	OpTightVector<unsigned> vector;
	OpTightVector<Struct> struct_vector;
	OpTightVector<StructEqualityComparable> struct_ec_vector;

	for (unsigned i = 0; i < 10; i++)
	{
		verify_success(vector.Add(i));
		verify_success(struct_vector.Add(i));
		verify_success(struct_ec_vector.Add(i));
	}

	vector.Clear();
	struct_vector.Clear();
	struct_ec_vector.Clear();

	verify(vector.GetCount() == 0);
	verify(struct_vector.GetCount() == 0);
	verify(struct_ec_vector.GetCount() == 0);
}

test("Storing pointers")
{
	OpTightVector<unsigned*> vector;
	unsigned value[10];

	for (unsigned i = 0; i < 10; i++)
	{
		value[i] = i;
		verify_success(vector.Add(&value[i]));
	}

	verify(vector.GetCount() == 10);
	for (unsigned i = 0; i < vector.GetCount(); i++)
		verify(*vector[i] == i);
}

test("Resizing the vector")
{
	OpTightVector<int> vector;
	verify_success(vector.Resize(10));

	verify(vector.GetCount() == 10);

	for (unsigned i = 0; i < 10; i++)
		vector[i] = i;
	verify_success(vector.Resize(5));

	verify(vector.GetCount() == 5);

	for (int i = 0; i < 5; i++)
		verify(vector[i] == i);
}

test("Moving items forwards")
{
	OpTightVector<int> vector;
	verify_success(vector.Resize(5));
	for (unsigned i = 0; i < 5; i++)
		vector[i] = i;

	vector.Move(1, 2, 2);

	verify(vector[0] == 0);
	verify(vector[1] == 3);
	verify(vector[2] == 1);
	verify(vector[3] == 2);
	verify(vector[4] == 4);
}

test("Moving items backwards")
{
	OpTightVector<int> vector;
	verify_success(vector.Resize(5));
	for (unsigned i = 0; i < 5; i++)
		vector[i] = i;

	vector.Move(2, 1, 2);

	verify(vector[0] == 0);
	verify(vector[1] == 2);
	verify(vector[2] == 3);
	verify(vector[3] == 1);
	verify(vector[4] == 4);
}