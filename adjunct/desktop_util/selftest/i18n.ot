/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2012 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 */

group "desktop_util.i18n";

include "adjunct/desktop_util/string/i18n.h";
include "modules/locale/oplanguagemanager.h";
include "modules/util/excepts.h";

test("ordered formatting with uni_char* arguments")
{
	const uni_char* teststring = UNI_L("Let's %2 this %1.");

	OpString output;
	verify_success(I18n::Format(output, teststring, UNI_L("string"), UNI_L("format")));

	verify_string(output, UNI_L("Let's format this string."));
}

test("ordered formatting with OpStringC arguments")
{
	const uni_char* teststring = UNI_L("Let's %2 this %1.");

	OpString output;
	verify_success(I18n::Format(output, teststring, OpStringC(UNI_L("string")), OpStringC(UNI_L("format"))));

	verify_string(output, UNI_L("Let's format this string."));
}

test("ordered formatting with Str::LocaleString arguments")
{
	const uni_char* teststring = UNI_L("Here's a translated string: %1");
	OpString desired_output;
	verify_success(g_languageManager->GetString(Str::S_SELFTEST_TITLE, desired_output));
	verify_success(desired_output.Insert(0, UNI_L("Here's a translated string: ")));

	OpString output;
	verify_success(I18n::Format(output, teststring, Str::LocaleString(Str::S_SELFTEST_TITLE)));

	verify_string(output, desired_output);
}

test("ordered formatting with integer arguments")
{
	const uni_char* teststring = UNI_L("If you subtract %2 from %3 you get %1");

	OpString output;
	verify_success(I18n::Format(output, teststring, 1, 2, 3));

	verify_string(output, UNI_L("If you subtract 2 from 3 you get 1"));
}

test("ordered formatting with unsigned integer argument")
{
	const uni_char* teststring = UNI_L("%1 is a big number");

	OpString output;
	unsigned big_number = 4294967295;
	verify_success(I18n::Format(output, teststring, big_number));

	verify_string(output, UNI_L("4294967295 is a big number"));
}

test("ordered formatting with unsigned short argument compiles")
{
	const uni_char* teststring = UNI_L("%1 is a small number");

	OpString output;
	unsigned short number = 1;
	verify_success(I18n::Format(output, teststring, number));

	verify_string(output, UNI_L("1 is a small number"));
}

test("ordered formatting with mixed arguments")
{
	const uni_char* teststring = UNI_L("If you subtract %2 from %3 you get %1 in this %4");

	OpString output;
	verify_success(I18n::Format(output, teststring, 1, 2, OpStringC(UNI_L("3")), UNI_L("string")));

	verify_string(output, UNI_L("If you subtract 2 from 3 you get 1 in this string"));
}

test("ordered formatting with OpString arguments doesn't steal contents with copy constructor")
{
	OpString argument1, argument2;
	verify_success(argument1.Set(UNI_L("string")));
	verify_success(argument2.Set(UNI_L("format")));
	const uni_char* teststring = UNI_L("Let's %2 this %1.");

	OpString output;
	verify_success(I18n::Format(output, teststring, argument1, argument2));

	verify_string(output, UNI_L("Let's format this string."));
	verify_string(argument1, UNI_L("string"));
	verify_string(argument2, UNI_L("format"));
}

test("ordered formatting with a string that contains %")
{
	const uni_char* teststring = UNI_L("This string contains both %%1 and the actual first %1");

	OpString output;
	verify_success(I18n::Format(output, teststring, UNI_L("argument")));

	verify_string(output, UNI_L("This string contains both %1 and the actual first argument"));
}

test("ordered formatting with no arguments (from string input)")
{
	const uni_char* teststring = UNI_L("Test string %%");

	OpString output;
	verify_success(I18n::Format(output, teststring));

	verify_string(output, UNI_L("Test string %"));
}

test("ordered formatting with no arguments (from Str::LocaleString input)")
{
	OpString desired_output;
	verify_success(g_languageManager->GetString(Str::S_SELFTEST_TITLE, desired_output));

	OpString output;
	verify_success(I18n::Format(output, Str::S_SELFTEST_TITLE));

	verify_string(output, desired_output);
}

