/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "desktop_util.OpSortedVector";

include "adjunct/desktop_util/adt/opsortedvector.h";

test("Items inserted and removed using OpSortedVector::Insert and OpSortedVector::Remove")
{
	OpINTSortedVector vector;

	verify(!vector.Contains(3));
	verify(OpStatus::IsSuccess(vector.Insert(3)));
	verify(vector.Contains(3));

	vector.Remove(3);
	verify(!vector.Contains(3));
}

test("Items are sorted when retrieved with OpSortedVector::GetByIndex")
{
	OpINTSortedVector vector;
	verify(OpStatus::IsSuccess(vector.Insert(8)));
	verify(OpStatus::IsSuccess(vector.Insert(3)));
	verify(OpStatus::IsSuccess(vector.Insert(5)));

	verify(vector.GetCount() == 3);
	verify(vector.GetByIndex(0) == 3);
	verify(vector.GetByIndex(1) == 5);
	verify(vector.GetByIndex(2) == 8);
}

test("Items can be found with OpSortedVector::Find")
{
	OpINTSortedVector vector;
	verify(OpStatus::IsSuccess(vector.Insert(8)));
	verify(OpStatus::IsSuccess(vector.Insert(3)));
	verify(OpStatus::IsSuccess(vector.Insert(5)));

	verify(vector.Find(3) == 0);
	verify(vector.Find(5) == 1);
	verify(vector.Find(8) == 2);
}

test("Can find first index for same item using OpSortedVector::FindFirst")
{
	OpINTSortedVector vector;
	verify(OpStatus::IsSuccess(vector.Insert(8)));
	verify(OpStatus::IsSuccess(vector.Insert(8)));
	verify(OpStatus::IsSuccess(vector.Insert(5)));

	verify(vector.FindFirst(8) == 1);
}

test("Reports where to insert new items with OpSortedVector::FindInsertPosition")
{
	OpINTSortedVector vector;
	verify(OpStatus::IsSuccess(vector.Insert(8)));
	verify(OpStatus::IsSuccess(vector.Insert(3)));
	verify(OpStatus::IsSuccess(vector.Insert(5)));

	verify(vector.FindInsertPosition(4) == 1);
	verify(vector.FindInsertPosition(6) == 2);
}

test("Items can be removed using OpSortedVector::RemoveByIndex")
{
	OpINTSortedVector vector;
	verify(OpStatus::IsSuccess(vector.Insert(8)));
	verify(OpStatus::IsSuccess(vector.Insert(3)));
	verify(OpStatus::IsSuccess(vector.Insert(5)));

	verify(vector.GetByIndex(1) == 5);
	verify(vector.RemoveByIndex(1) == 5);

	verify(vector.GetByIndex(1) == 8);
}

test("Fitting items can be replaced using OpSortedVector::ReplaceByIndex")
{
	OpINTSortedVector vector;
	verify(OpStatus::IsSuccess(vector.Insert(8)));
	verify(OpStatus::IsSuccess(vector.Insert(3)));
	verify(OpStatus::IsSuccess(vector.Insert(5)));

	verify(OpStatus::IsSuccess(vector.ReplaceByIndex(0, 6)));

	verify(vector.GetByIndex(1) == 6);
}

test("Items can be cleared with OpSortedVector::Clear")
{
	OpINTSortedVector vector;
	verify(OpStatus::IsSuccess(vector.Insert(8)));
	verify(OpStatus::IsSuccess(vector.Insert(3)));
	verify(OpStatus::IsSuccess(vector.Insert(5)));

	vector.Clear();

	verify(vector.GetCount() == 0);
}

test("Items can be found using OpSortedVector::FindSimilar")
{
	int numbers[3] = {3, 5, 8};
	OpSortedVector<int> vector;
	for (unsigned i = 0; i < 3; i++)
		verify(OpStatus::IsSuccess(vector.Insert(&numbers[i])));

	int number_to_find = 5;
	verify(vector.FindSimilar(&number_to_find) == &numbers[1]);
}
