group "desktop_util.passwordstrength";

require init;

include "adjunct/desktop_util/passwordstrength/PasswordStrength.h";

table very_weak_passwords(const uni_char*, int, PasswordStrength::Level)
{
	{ UNI_L("111111111"), 5 , PasswordStrength::VERY_WEAK }	
	{ UNI_L("2222222"), 5 , PasswordStrength::VERY_WEAK }	
	{ UNI_L("aaaaaaaaaaa"), 5 , PasswordStrength::VERY_WEAK }	
	{ UNI_L("bbbbbbbbb"), 5 , PasswordStrength::VERY_WEAK }	
	{ UNI_L("_________"), 5 , PasswordStrength::VERY_WEAK }	
}

table too_short_passwords(const uni_char*, int, PasswordStrength::Level)
{
	{ UNI_L("1"), 2 , PasswordStrength::TOO_SHORT }	
	{ UNI_L("a"), 2 , PasswordStrength::TOO_SHORT }	
}

test("Check password strength")
{
	iterate (passwd, min_len, strength) from very_weak_passwords
	{
		verify(PasswordStrength::Check(passwd, min_len) == strength);
	}

	iterate (passwd, min_len, strength) from too_short_passwords
	{
		verify(PasswordStrength::Check(passwd, min_len) == strength);
	}
}

/**
 * Counting lower, upper, digit and special characters.
 */
table words1(const uni_char*, int, int, int, int)
{
	{ UNI_L(""), 0, 0, 0, 0 }
	{ UNI_L("a"), 1, 0, 0, 0 }
	{ UNI_L("A"), 0, 1, 0, 0 }
	{ UNI_L("1"), 0, 0, 1, 0 }
	{ UNI_L("_"), 0, 0, 0, 1 }
	{ UNI_L("aA1!"), 1, 1, 1, 1 }
	{ UNI_L("abAB12!&"), 2, 2, 2, 2 }
	{ UNI_L("kdf980()((*[]KLJdfj&*1"), 6, 3, 4, 9 }
}

test("Counting character types")
{
	int lower = 0, upper = 0, digit = 0, special = 0;
	iterate (word, exp_lower, exp_upper, exp_digit, exp_special) from words1
	{
		PasswordStrength::CharacterCount(word, lower, upper, digit, special);	
		verify(exp_lower == lower);
		verify(exp_upper == upper);
		verify(exp_digit == digit);
		verify(exp_special == special);
	}
}

/**
 * Counting unique lower, upper, digit and special characters.
 */
table words2(const uni_char*, int, int, int, int)
{
	{ UNI_L(""), 0, 0, 0, 0 }
	{ UNI_L("a"), 1, 0, 0, 0 }
	{ UNI_L("aa"), 1, 0, 0, 0 }
	{ UNI_L("A"), 0, 1, 0, 0 }
	{ UNI_L("AA"), 0, 1, 0, 0 }
	{ UNI_L("1"), 0, 0, 1, 0 }
	{ UNI_L("11"), 0, 0, 1, 0 }
	{ UNI_L("_"), 0, 0, 0, 1 }
	{ UNI_L("__"), 0, 0, 0, 1 }
	{ UNI_L("aA1@#2Bb"), 2, 2, 2, 2 }
}

test("Counting unique characters")
{
	int lower_unique, upper_unique, digit_unique, special_unique;
	iterate (word, exp_lower_unique, exp_upper_unique, exp_digit_unique, exp_special_unique) from words2
	{
		PasswordStrength::UniqueCharacterCount(word, lower_unique, upper_unique, digit_unique, special_unique);	
		verify(exp_lower_unique == lower_unique);
		verify(exp_upper_unique == upper_unique);
		verify(exp_digit_unique == digit_unique);
		verify(exp_special_unique == special_unique);
	}
}

/**
 * Counting continuous parts of lower, upper, digit and special characters.
 */
table words3(const uni_char*, int, int, int, int)
{
	{ UNI_L(""), 0, 0, 0, 0 }
	{ UNI_L("a"), 1, 0, 0, 0 }
	{ UNI_L("aa"), 1, 0, 0, 0 }
	{ UNI_L("A"), 0, 1, 0, 0 }
	{ UNI_L("AA"), 0, 1, 0, 0 }
	{ UNI_L("1"), 0, 0, 1, 0 }
	{ UNI_L("11"), 0, 0, 1, 0 }
	{ UNI_L("_"), 0, 0, 0, 1 }
	{ UNI_L("__"), 0, 0, 0, 1 }
	{ UNI_L("aA1@#2Bb"), 2, 2, 2, 1 }
}

test("Counting character types continuous parts")
{
	int lower_parts = 0, upper_parts = 0, digit_parts = 0, special_parts = 0;
	iterate (word, exp_lower_parts, exp_upper_parts, exp_digit_parts, exp_special_parts) from words3
	{
		PasswordStrength::CharacterClassesPartsCount(word, lower_parts, upper_parts, digit_parts, special_parts);	
		verify(exp_lower_parts == lower_parts);
		verify(exp_upper_parts == upper_parts);
		verify(exp_digit_parts == digit_parts);
		verify(exp_special_parts == special_parts);
	}
}
