/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Wojciech Dzierzanowski (wdzierzanowski)
 */

group "desktop_util.typedobjectcollection";
require init;

include "adjunct/desktop_util/adt/typedobjectcollection.h";

global
{
	const char* NAME1 = "name1";
	const char* NAME2 = "name2";
	const char* NAME3 = "name3";

	class TestObject : public TypedObject
	{
		IMPLEMENT_TYPEDOBJECT(TypedObject);
	};

	class AnotherObject : public TypedObject
	{
		IMPLEMENT_TYPEDOBJECT(TypedObject);
	};

	TestObject object1;
	TestObject object2;
	TestObject object3;
}

test("TypedObjectCollection lets you get after you put")
{
	TypedObjectCollection objects;

	verify_success(objects.Put(NAME1, &object1));
	verify(objects.Get(NAME1) == &object1);

	verify_success(objects.Put(NAME2, &object2));
	verify(objects.Get(NAME1) == &object1);
	verify(objects.Get(NAME2) == &object2);

	verify_success(objects.Put(NAME3, &object3));
	verify(objects.Get(NAME1) == &object1);
	verify(objects.Get(NAME2) == &object2);
	verify(objects.Get(NAME3) == &object3);
}

test("TypedObjectCollection doesn't let you get before you put")
{
	TypedObjectCollection objects;

	verify(objects.Get(NAME1) == NULL);
	verify(objects.Get(NAME2) == NULL);
	verify(objects.Get(NAME3) == NULL);

	verify_success(objects.Put(NAME1, &object1));
	verify(objects.Get(NAME1) == &object1);
	verify(objects.Get(NAME2) == NULL);
	verify(objects.Get(NAME3) == NULL);
}

test("TypedObjectCollection doesn't let you put a name twice")
{
	TypedObjectCollection objects;

	verify_success(objects.Put(NAME1, &object1));
	verify_status(OpStatus::ERR, objects.Put(NAME1, &object1));
	verify_status(OpStatus::ERR, objects.Put(NAME1, &object2));
	verify(objects.Get(NAME1) == &object1);

	verify_success(objects.Put(NAME2, &object2));
	verify_status(OpStatus::ERR, objects.Put(NAME2, &object1));
	verify_status(OpStatus::ERR, objects.Put(NAME2, &object2));
	verify(objects.Get(NAME2) == &object2);
}

test("TypedObjectCollection requires you to really provide a name")
{
	TypedObjectCollection objects;

	verify_status(OpStatus::ERR, objects.Put(NULL, &object1));
	verify_status(OpStatus::ERR, objects.Put("", &object1));

	verify_success(objects.Put(NAME1, &object1));

	verify(objects.Get(NULL) == NULL);
	verify(objects.Get("") == NULL);
}

test("OK to dispose of the string passed to Put()")
{
	TypedObjectCollection objects;
	{
		OpString8 name;
		name.Set(NAME1);
		verify_success(objects.Put(name.CStr(), &object1));
	}
	verify(objects.Get(NAME1) == &object1);
}

test("Both object name and type must match to successfully Get()")
{
	TypedObjectCollection objects;
	verify_success(objects.Put(NAME1, &object1));

	verify(objects.Get<TestObject>(NAME1) == &object1);
	verify(objects.Get<AnotherObject>(NAME1) == NULL);
}

test("Method Contains properly checks if widget exists")
{
	TypedObjectCollection objects;
    verify_success(objects.Put(NAME1, &object1));

	// We need "== true/false" at the end of the verify
	// statements below. If we do not add them selftest
	// parser will treat '>' characters as comparisons.
	verify(objects.Contains<TestObject>(NAME1) == true);
	verify(objects.Contains<AnotherObject>(NAME1) == false);
	verify(objects.Contains<TestObject>(NAME2) == false);
}

test("GetL LEAVEs when widget is not found")
    fails; // we want it to LEAVE
{
	TypedObjectCollection objects;
	verify_trap(objects.GetL<TestObject>(NAME1));
}
