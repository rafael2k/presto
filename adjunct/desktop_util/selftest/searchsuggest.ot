/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "desktop_util.searchsuggest";
require init;

include "adjunct/desktop_util/search/search_suggest.h";

language C++;

global
{
	OP_STATUS SetupPathString(OpString& str, const char* filename) 
	{
		RETURN_IF_ERROR(g_folder_manager->GetFolderPath(OPFILE_SELFTEST_DATA_FOLDER, str));
		RETURN_IF_ERROR(str.AppendFormat(UNI_L("data%s%s"), UNI_L(PATHSEP), filename));

		return OpStatus::OK;
	}

	class TestSearchSuggestListener : public SearchSuggest::Listener
	{
	public:
		virtual void OnQueryStarted() {}
		virtual void OnQueryComplete(const OpStringC& search_id, OpVector<SearchSuggestEntry>& entries) {}
		virtual void OnQueryError(const OpStringC& search_id, OP_STATUS error) {}
	};
	TestSearchSuggestListener listener;
}

test("Get search suggestions")
{
	SearchSuggest suggest(&listener);


}

