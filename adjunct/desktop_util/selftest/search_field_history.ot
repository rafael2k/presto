/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "desktop_util.search_field_history";
require init;

include "adjunct/desktop_util/search/search_field_history.h";
include "modules/util/excepts.h";
include "modules/util/opfile/opfile.h";

language C++;

global
{
	OP_STATUS SetupPathString(OpString& str, const char* filename) 
	{
		RETURN_IF_ERROR(g_folder_manager->GetFolderPath(OPFILE_SELFTEST_DATA_FOLDER, str));
		RETURN_IF_ERROR(str.AppendFormat(UNI_L("testfiles%s%s"), UNI_L(PATHSEP), filename));
		return OpStatus::OK;
	}
}
test("Test AddEntry()")
{
	OpSearchFieldHistory field_history;
	OpSearchFieldHistory::Iterator *iterator;

	verify(OpStatus::IsSuccess(field_history.AddEntry(UNI_L("7A8CADE6677811DDBA4B5E9D55D89593"), UNI_L("google search test 1"))));

	iterator = field_history.GetIterator();

	OpSearchFieldHistory::OpSearchFieldHistoryEntry *item = iterator->GetNext();

	verify(item && !uni_strcmp(item->GetID(), UNI_L("7A8CADE6677811DDBA4B5E9D55D89593")) && !uni_strcmp(item->GetSearchTerm(), UNI_L("google search test 1")));

	item = iterator->GetNext();
	verify(item == NULL);

	OP_DELETE(iterator);
}

test("Read search field history from xml file")
{
	OpSearchFieldHistory field_history;
	OpString filename;
	OpSearchFieldHistory::Iterator *iterator;

	verify(OpStatus::IsSuccess(SetupPathString(filename, "01_search_field_history.xml")));
	verify(OpStatus::IsSuccess(field_history.Init(filename.CStr())));

	iterator = field_history.GetIterator();

	/*
	<search_entry search_id="7A8CADE6677811DDBA4B5E9D55D89593" term="google search 1" />
	<search_entry search_id="7A8CADE6677811DDBA4B5E9D55D89593" term="google search 2" />
	<search_entry search_id="7A8CADE6677811DDBA4B5E9D55D89593" term="google search 3" />
	<search_entry search_id="FEAF2EF45FCC11DD8287529456D89593" term="ask search 1" />
	*/

	OpSearchFieldHistory::OpSearchFieldHistoryEntry *item = iterator->GetNext();

	verify(item && !uni_strcmp(item->GetID(), UNI_L("7A8CADE6677811DDBA4B5E9D55D89593")) && !uni_strcmp(item->GetSearchTerm(), UNI_L("google search 1")));

	item = iterator->GetNext();
	verify(item && !uni_strcmp(item->GetID(), UNI_L("7A8CADE6677811DDBA4B5E9D55D89593")) && !uni_strcmp(item->GetSearchTerm(), UNI_L("google search 2")));

	item = iterator->GetNext();
	verify(item && !uni_strcmp(item->GetID(), UNI_L("7A8CADE6677811DDBA4B5E9D55D89593")) && !uni_strcmp(item->GetSearchTerm(), UNI_L("google search 3")));

	item = iterator->GetNext();
	verify(item && !uni_strcmp(item->GetID(), UNI_L("FEAF2EF45FCC11DD8287529456D89593")) && !uni_strcmp(item->GetSearchTerm(), UNI_L("ask search 1")));

	item = iterator->GetNext();
	verify(item == NULL);

	OP_DELETE(iterator);
}

test("Iterate search history with filter")
{
	OpSearchFieldHistory field_history;
	OpString filename;
	OpSearchFieldHistory::Iterator *iterator;
	OpString filter;

	verify(OpStatus::IsSuccess(SetupPathString(filename, "01_search_field_history.xml")));
	verify(OpStatus::IsSuccess(field_history.Init(filename.CStr())));

	iterator = field_history.GetIterator();

	filter.Set(UNI_L("search 1"));

	iterator->SetFilter(filter);

	OpSearchFieldHistory::OpSearchFieldHistoryEntry *item = iterator->GetNext();

	verify(item && !uni_strcmp(item->GetID(), UNI_L("7A8CADE6677811DDBA4B5E9D55D89593")) && !uni_strcmp(item->GetSearchTerm(), UNI_L("google search 1")));

	item = iterator->GetNext();
	verify(item && !uni_strcmp(item->GetID(), UNI_L("FEAF2EF45FCC11DD8287529456D89593")) && !uni_strcmp(item->GetSearchTerm(), UNI_L("ask search 1")));

	item = iterator->GetNext();
	verify(item == NULL);

	OP_DELETE(iterator);
}

test("Write search field history to xml file")
{
	OpSearchFieldHistory::Iterator *iterator;
	OpSearchFieldHistory field_history;
	OpSearchFieldHistory field_history_2;
	OpString filename;
	OpFile file;

	verify(OpStatus::IsSuccess(SetupPathString(filename, "tmp_search_field_history.xml")));

	verify(OpStatus::IsSuccess(field_history.AddEntry(UNI_L("7A8CADE6677811DDBA4B5E9D55D89593"), UNI_L("google search test 1"))));
	verify(OpStatus::IsSuccess(field_history.AddEntry(UNI_L("7A8CADE6677811DDBA4B5E9D55D89593"), UNI_L("google search test 2"))));

	verify(OpStatus::IsSuccess(field_history.Write(filename.CStr())));

	verify(OpStatus::IsSuccess(field_history_2.Init(filename.CStr())));

	iterator = field_history_2.GetIterator();

	/*
	<search_entry search_id="7A8CADE6677811DDBA4B5E9D55D89593" term="google search 1" />
	<search_entry search_id="7A8CADE6677811DDBA4B5E9D55D89593" term="google search 2" />
	<search_entry search_id="7A8CADE6677811DDBA4B5E9D55D89593" term="google search 3" />
	<search_entry search_id="FEAF2EF45FCC11DD8287529456D89593" term="ask search 1" />
	*/

	// items are always added as a FILO queue so the last added will always be at the top, unless it replaces an existing item

	OpSearchFieldHistory::OpSearchFieldHistoryEntry *item = iterator->GetNext();

	verify(item && !uni_strcmp(item->GetID(), UNI_L("7A8CADE6677811DDBA4B5E9D55D89593")) && !uni_strcmp(item->GetSearchTerm(), UNI_L("google search test 2")));

	item = iterator->GetNext();
	verify(item && !uni_strcmp(item->GetID(), UNI_L("7A8CADE6677811DDBA4B5E9D55D89593")) && !uni_strcmp(item->GetSearchTerm(), UNI_L("google search test 1")));

	item = iterator->GetNext();
	verify(item == NULL);

	OP_DELETE(iterator);

	verify(OpStatus::IsSuccess(file.Construct(filename.CStr())));
	verify(OpStatus::IsSuccess(file.Delete()));
}

