/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "desktop_util.mailto";

include "adjunct/desktop_util/mail/mailto.h";

// tests inspired by http://people.mozilla.org/~ctalbert/test-protocol-links.html
// The attributes (to, cc, bcc, subject, body) are what you should get when parsing url
// rev_url is the URL you should get when converting the attributes back into a mailto url
table MailtoTests(const char*, const char*, const uni_char*, const uni_char*, const uni_char*, const uni_char*, const uni_char*)
{
	// Simple: just a To address
	{ /* url     */ "mailto:noone@opera.com",
	  /* rev_url */ "mailto:noone%40opera.com",
	  /* to      */ UNI_L("noone@opera.com"),
	  /* cc      */ 0,
	  /* bcc     */ 0,
	  /* subject */ 0,
	  /* body    */ 0
	},

	// CC, BCC, subject and body
	{ /* url     */ "mailto:noone@opera.com?cc=bob@opera.com&bcc=bcc@opera.com&subject=subject&body=hello%20world",
	  /* rev_url */ "mailto:noone%40opera.com?cc=bob%40opera.com&bcc=bcc%40opera.com&subject=subject&body=hello%20world",
	  /* to      */ UNI_L("noone@opera.com"),
	  /* cc      */ UNI_L("bob@opera.com"),
	  /* bcc     */ UNI_L("bcc@opera.com"),
	  /* subject */ UNI_L("subject"),
	  /* body    */ UNI_L("hello world")
	},

 	// Multiple To addresses
	{ /* url     */ "mailto:addr1@opera.com,addr2@foo.com",
	  /* rev+url */ "mailto:addr1%40opera.com%2Caddr2%40foo.com",
	  /* to      */ UNI_L("addr1@opera.com,addr2@foo.com"),
	  /* cc      */ 0,
	  /* bcc     */ 0,
	  /* subject */ 0,
	  /* body    */ 0
	},

	// Multi-line body
	{ /* url     */ "mailto:addr1@opera.com,addr2@foo.com?cc=addr3@foo.com&subject=foo&body=this%20is%20the%20first%20line%0D%0Athis%20is%20the%20second%0D%0Athis%20is%20the%20third",
	  /* rev_url */ "mailto:addr1%40opera.com%2Caddr2%40foo.com?cc=addr3%40foo.com&subject=foo&body=this%20is%20the%20first%20line%0D%0Athis%20is%20the%20second%0D%0Athis%20is%20the%20third",
	  /* to      */ UNI_L("addr1@opera.com,addr2@foo.com"),
	  /* cc      */ UNI_L("addr3@foo.com"),
	  /* bcc     */ 0,
	  /* subject */ UNI_L("foo"),
	  /* body    */ UNI_L("this is the first line\r\nthis is the second\r\nthis is the third")
	},

	// To addresses spread over two attributes
	{ /* url     */ "mailto:addr1@foo.com?to=addr2@foo.com&subject=hi%20world&body=more%20text%20here",
	  /* rev_url */ "mailto:addr1%40foo.com%2Caddr2%40foo.com?subject=hi%20world&body=more%20text%20here",
	  /* to      */ UNI_L("addr1@foo.com,addr2@foo.com"),
	  /* cc      */ 0,
	  /* bcc     */ 0,
	  /* subject */ UNI_L("hi world"),
	  /* body    */ UNI_L("more text here")
	},

	// Special characters & and ? inside subject and body
	{ /* url     */ "mailto:noone@opera.com?cc=bob@opera.com&subject=subject%20%26%20ampersands&body=hello%20world%3F",
	  /* rev_url */ "mailto:noone%40opera.com?cc=bob%40opera.com&subject=subject%20%26%20ampersands&body=hello%20world%3F",
	  /* to      */ UNI_L("noone@opera.com"),
	  /* cc      */ UNI_L("bob@opera.com"),
	  /* bcc     */ 0,
	  /* subject */ UNI_L("subject & ampersands"),
	  /* body    */ UNI_L("hello world?")
	},

	// UTF-8 in mailto
	{ /* url     */ "mailto:addr1@foo.com?cc=addr2@foo.com&subject=%20%E9%A6%99%20%E9%A6%99%20%E9%A6%99&body=crazy%20characters%20with%20every%E2%BC%ADthing%ED%8C%BDin%C5%92%20%E9%A3%82%20%20%E9%A6%99%20them%20and%20mixed%20up!",
	  /* rev_url */ "mailto:addr1%40foo.com?cc=addr2%40foo.com&subject=%20%E9%A6%99%20%E9%A6%99%20%E9%A6%99&body=crazy%20characters%20with%20every%E2%BC%ADthing%ED%8C%BDin%C5%92%20%E9%A3%82%20%20%E9%A6%99%20them%20and%20mixed%20up!",
	  /* to      */ UNI_L("addr1@foo.com"),
	  /* cc      */ UNI_L("addr2@foo.com"),
	  /* bcc     */ 0,
	  /* subject */ UNI_L("\x20\x9999\x20\x9999\x20\x9999"),
	  /* body    */ UNI_L("\x63\x72\x61\x7a\x79\x20\x63\x68\x61\x72\x61\x63\x74\x65\x72\x73\x20\x77\x69\x74\x68\x20\x65\x76\x65\x72\x79\x2f2d\x74\x68\x69\x6e\x67\xd33d\x69\x6e\x152\x20\x98c2\x20\x20\x9999\x20\x74\x68\x65\x6d\x20\x61\x6e\x64\x20\x6d\x69\x78\x65\x64\x20\x75\x70\x21")
	},

	// Test to make sure '#', '=' and '&' before first '?', extra '?' and extra '=' don't mess up parsing.
	{ /* url     */ "mailto:#1=2&3=4?subject=?#=&body=line1",
	  /* rev_url */ "mailto:%231%3D2%263%3D4?subject=%3F%23%3D&body=line1",
	  /* to      */ UNI_L("#1=2&3=4"),
	  /* cc      */ 0,
	  /* bcc     */ 0,
	  /* subject */ UNI_L("?#="),
	  /* body    */ UNI_L("line1")
	},

	// Test case-insensitivity
	{ /* url     */ "mailto:?tO=1&sUbJeCt=2&bOdY=3&cC=4&bCc=5",
	  /* rev_url */ "mailto:1?cc=4&bcc=5&subject=2&body=3",
	  /* to      */ UNI_L("1"),
	  /* cc      */ UNI_L("4"),
	  /* bcc     */ UNI_L("5"),
	  /* subject */ UNI_L("2"),
	  /* body    */ UNI_L("3")
	},

	// Test case-insensitivity and examples of unnecessary percent-encoding an hname
	{ /* url     */ "mailto:?%74%4F=1&%73%55%62%4A%65%43%74=2&%62%4F%64%59=3&%63%43=4&%62%43%63=5",
	  /* rev_url */ "mailto:1?cc=4&bcc=5&subject=2&body=3",
	  /* to      */ UNI_L("1"),
	  /* cc      */ UNI_L("4"),
	  /* bcc     */ UNI_L("5"),
	  /* subject */ UNI_L("2"),
	  /* body    */ UNI_L("3")
	},

	// Test that lowercase %HH still work.
	{ /* url     */ "mailto:%3y%?subject=%3y%&body=%3y%&cc=%3y%&bcc=%3y%",
	  /* rev_url */ "mailto:%253y%25?cc=%253y%25&bcc=%253y%25&subject=%253y%25&body=%253y%25",
	  /* to      */ UNI_L("%3y%"),
	  /* cc      */ UNI_L("%3y%"),
	  /* bcc     */ UNI_L("%3y%"),
	  /* subject */ UNI_L("%3y%"),
	  /* body    */ UNI_L("%3y%")
	},

	// Test to see if smart duplicate hname handling is supported (won't be supported if RFC2368 duplicate hname handling is supported)
	{ /* url     */ "mailto:1t?to=&to=&to=2t&to=3t&to=&to=&subject=1&subject=2&subject=&body=&body=&body=line1&body=&body=line3&body=&cc=&cc=&cc=1&cc=&cc=&cc=2&cc=3&bcc=&bcc=&bcc=1&bcc=2&bcc=&bcc=&bcc=3",
	  /* rev_url */ "mailto:1t%2C%202t%2C%203t?cc=1%2C%202%2C%203&bcc=1%2C%202%2C%203&body=line1%0D%0A%0D%0Aline3%0D%0A",
	  /* to      */ UNI_L("1t, 2t, 3t"),
	  /* cc      */ UNI_L("1, 2, 3"),
	  /* bcc     */ UNI_L("1, 2, 3"),
	  /* subject */ 0,
	  /* body    */ UNI_L("line1")
	},

	// Test to make sure that '+' is treated as '+'
	{ /* url     */ "mailto:+?subject=+&body=+&cc=+&bcc=+",
	  /* rev_url */ "mailto:%2B?cc=%2B&bcc=%2B&subject=%2B&body=%2B",
	  /* to      */ UNI_L("+"),
	  /* cc      */ UNI_L("+"),
	  /* bcc     */ UNI_L("+"),
	  /* subject */ UNI_L("+"),
	  /* body    */ UNI_L("+")
	},

	// Test that UTF-8 %HH sequence emit the chars they represent
	{ /* url     */ "mailto:%E2%88%9A?subject=%E2%88%9A&body=%E2%88%9A&cc=%E2%88%9A&bcc=%E2%88%9A",
	  /* rev_url */ "mailto:%E2%88%9A?cc=%E2%88%9A&bcc=%E2%88%9A&subject=%E2%88%9A&body=%E2%88%9A",
	  /* to      */ UNI_L("\xE2\x88\x9A"),
	  /* cc      */ UNI_L("\xE2\x88\x9A"),
	  /* bcc     */ UNI_L("\xE2\x88\x9A"),
	  /* subject */ UNI_L("\xE2\x88\x9A"),
	  /* body    */ UNI_L("\xE2\x88\x9A")
	}
}

subtest StringsEqual(const OpStringC& string1, const OpStringC& string2)
{
	if (string1.Compare(string2))
	{
		output("Failed: \"%s\" is not equal to \"%s\": ", string1.CStr() ? ST_down(string1.CStr()) : "", string2.CStr() ? ST_down(string2.CStr()) : "");
		return FALSE;
	}
	return TRUE;
}

subtest StringsEqual8(const OpStringC8& string1, const OpStringC8& string2)
{
	if (string1.Compare(string2))
	{
		output("\"%s\" is not equal to \"%s\": ", string1.CStr() ? string1.CStr() : "", string2.CStr() ? string2.CStr() : "");
		return FALSE;
	}
	return TRUE;
}

test("url to mailto parts")
{
	iterate(url_string, rev_url, to, cc, bcc, subject, body) from MailtoTests
	{
		MailTo mailto;

		verify(OpStatus::IsSuccess(mailto.Init(url_string)));

		verify(StringsEqual(mailto.GetTo(), to));
		verify(StringsEqual(mailto.GetCc(), cc));
		verify(StringsEqual(mailto.GetBcc(), bcc));
		verify(StringsEqual(mailto.GetSubject(), subject));
		verify(StringsEqual(mailto.GetBody(), body));
	}
}

test("mailto parts to url")
{
	iterate(url, rev_url, to, cc, bcc, subject, body) from MailtoTests
	{
		MailTo mailto;
		verify(OpStatus::IsSuccess(mailto.Init(to, cc, bcc, subject, body)));

		verify(StringsEqual8(mailto.GetRawMailTo(), rev_url));
	}
}
