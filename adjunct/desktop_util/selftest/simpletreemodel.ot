/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "desktop_util.SimpleTreeModel";

include "adjunct/desktop_util/treemodel/simpletreemodel.h";


test("Automatic ID")
{
	const int FIRST_AUTOMATIC_ID = 0x40000000;
	SimpleTreeModel model;

	/* Automatic IDs should be greater than 2^30.
	 */
	INT32 pos = model.AddItem(UNI_L("a"));
	INT32 firstid = model.GetItemByPosition(pos)->GetID();
	verify(firstid >= FIRST_AUTOMATIC_ID);

	/* Check that the first few added items does not generate
	 * duplicate IDs.
	 */
	const int USED_IDS_SIZE = 1100;
	INT32 used_ids[USED_IDS_SIZE];
	used_ids[0] = firstid;
	int used_ids_count = 1;

	INT32 id;
	for (int count = 0; count < 1000; count += 1)
	{
		pos = model.AddItem(UNI_L("a"));
		id = model.GetItemByPosition(pos)->GetID();
		verify(id > FIRST_AUTOMATIC_ID);
		for (int check = 0; check < used_ids_count; check += 1)
			verify(id != used_ids[check]);
		verify(used_ids_count < USED_IDS_SIZE);
		used_ids[used_ids_count] = id;
		used_ids_count += 1;
		/* MakeAutomaticIDBySearching can get very slow when there are
		 * many elements, so limit the testing of that one.
		 */
		if (count < 100)
		{
			/* Also verify that the slow version does not generate
			 * duplicates of existing IDs.
			 */
			id = model.MakeAutomaticIDBySearching();
			for (int check = 0; check < used_ids_count; check += 1)
				verify(id != used_ids[check]);
		};
	};

	/* ASSUMPTION: This test assumes that MakeAutomaticIDBySearching()
	 * will search for available IDs in the same order that
	 * MakeAutomaticID() usually returns them.  This is not required
	 * behaviour, so if the implementation changes, this test may fail
	 * incorrectly (and would then need to be modified or dropped).
	 *
	 * This checks that MakeAutomaticIDBySearching() will return an ID
	 * that is no longer in use.
	 */
	pos = 593;
	OpTreeModelItem * item = model.GetItemByPosition(pos);
	verify(item != 0);
	id = item->GetID();
	INT32 used_id_index = 0;
	while (used_id_index < used_ids_count && used_ids[used_id_index] != id)
		used_id_index += 1;
	verify(used_id_index < used_ids_count);
	verify(id == used_ids[used_id_index]);
	model.Delete(pos);
	used_ids_count -= 1;
	used_ids[used_id_index] = used_ids[used_ids_count];
	INT32 id2 = model.MakeAutomaticIDBySearching();
	verify(id2 >= FIRST_AUTOMATIC_ID);
	for (int check = 0; check < used_ids_count; check += 1)
		verify(id2 != used_ids[check]);
	/* ASSUMPTION: This test is the one that makes the assumption.
	 */
	verify(id2 == id);
}
