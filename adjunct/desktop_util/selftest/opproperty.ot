/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Wojciech Dzierzanowski (wdzierzanowski)
 */

group "desktop_util.opproperty";

include "adjunct/desktop_util/adt/opproperty.h";

global
{
	struct IntSubscriber
	{
		void OnChange(int value)  { m_value = value; }
		int m_value;
	};

	struct StringSubscriber
	{
		void OnChange(const OpStringC8& value)  { m_value.Set(value); }
		OpString8 m_value;
	};

	struct UnistringSubscriber
	{
		void OnChange(const OpStringC& value)  { m_value.Set(value); }
		OpString m_value;
	};

	struct IntvectorSubscriber
	{
		void OnChange(const OpINT32Vector& value)  { m_value.DuplicateOf(value); }
		OpINT32Vector m_value;
	};
}

test("What you set is what you get")
{
	OpProperty<int> int_prop;
	int_prop.Set(4);
	verify(int_prop.Get() == 4);

	OpProperty<OpString8> string_prop;
	OpString8 value;
	value.Set("what?");
	string_prop.Set(value);
	value.Wipe();
	verify(string_prop.Get() == OpStringC8("what?"));

	OpProperty<OpString> unistring_prop;
	OpString uni_value;
	uni_value.Set(UNI_L("what?"));
	unistring_prop.Set(uni_value);
	uni_value.Wipe();
	verify(unistring_prop.Get() == OpStringC(UNI_L("what?")));
}

test("What you set is what you get (intvector)")
{
	OpProperty<OpINT32Vector> intvector_prop;
	OpINT32Vector intvector_value;
	intvector_value.Add(12);
	intvector_value.Add(14);
	intvector_prop.Set(intvector_value);
	intvector_value.Clear();
	const OpINT32Vector& prop_value = intvector_prop.Get();
	verify(prop_value.GetCount() == 2);
	verify(prop_value.Get(0) == 12);
	verify(prop_value.Get(1) == 14);
}

test("Subscribers are notified of changes, ex-subscribers are not (int)")
{
	OpProperty<int> int_prop;
	int_prop.Set(4);

	IntSubscriber subscriber1;
	subscriber1.m_value = -1;
	verify_success(int_prop.Subscribe(
				MAKE_DELEGATE(subscriber1, &IntSubscriber::OnChange)));
	int_prop.Set(5);
	verify(subscriber1.m_value == 5);

	IntSubscriber subscriber2;
	subscriber2.m_value = -1;
	verify_success(int_prop.Subscribe(
				MAKE_DELEGATE(subscriber2, &IntSubscriber::OnChange)));
	int_prop.Set(6);
	verify(subscriber1.m_value == 6);
	verify(subscriber2.m_value == 6);

	int_prop.Unsubscribe(&subscriber1);
	int_prop.Set(7);
	verify(subscriber1.m_value == 6);
	verify(subscriber2.m_value == 7);

	int_prop.Unsubscribe(&subscriber2);
	int_prop.Set(8);
	verify(subscriber1.m_value == 6);
	verify(subscriber2.m_value == 7);
}

test("Subscribers are notified of changes (string)")
{
	OpProperty<OpString8> string_prop;
	string_prop.Set("foo");

	StringSubscriber subscriber1;
	verify_success(string_prop.Subscribe(
				MAKE_DELEGATE(subscriber1, &StringSubscriber::OnChange)));
	string_prop.Set("bar");
	verify(subscriber1.m_value == OpStringC8("bar"));

	OpProperty<OpString> unistring_prop;
	unistring_prop.Set(UNI_L("foo"));

	UnistringSubscriber subscriber2;
	verify_success(unistring_prop.Subscribe(
				MAKE_DELEGATE(subscriber2, &UnistringSubscriber::OnChange)));
	unistring_prop.Set(UNI_L("bar"));
	verify(subscriber2.m_value == OpStringC(UNI_L("bar")));
}

test("Subscribers are notified of changes (intvector)")
{
	OpProperty<OpINT32Vector> intvector_prop;

	IntvectorSubscriber subscriber;
	verify_success(intvector_prop.Subscribe(
				MAKE_DELEGATE(subscriber, &IntvectorSubscriber::OnChange)));

	OpINT32Vector intvector_value;
	intvector_value.Add(12);
	intvector_value.Add(14);
	intvector_prop.Set(intvector_value);

	verify(intvector_prop.Get().GetCount() == 2);
	verify(intvector_prop.Get().Get(0) == 12);
	verify(intvector_prop.Get().Get(1) == 14);
}

test("No value change => no notification (int)")
{
	OpProperty<int> int_prop;
	int_prop.Set(4);

	IntSubscriber subscriber;
	subscriber.m_value = -1;
	verify_success(int_prop.Subscribe(
				MAKE_DELEGATE(subscriber, &IntSubscriber::OnChange)));
	int_prop.Set(4);
	verify(subscriber.m_value == -1);
}

test("No value change => no notification (string)")
{
	OpProperty<OpString8> string_prop;
	string_prop.Set("foo");

	StringSubscriber subscriber1;
	verify_success(string_prop.Subscribe(
				MAKE_DELEGATE(subscriber1, &StringSubscriber::OnChange)));
	string_prop.Set("foo");
	verify(subscriber1.m_value.IsEmpty());

	OpProperty<OpString> unistring_prop;
	unistring_prop.Set(UNI_L("foo"));

	UnistringSubscriber subscriber2;
	verify_success(unistring_prop.Subscribe(
				MAKE_DELEGATE(subscriber2, &UnistringSubscriber::OnChange)));
	unistring_prop.Set(UNI_L("foo"));
	verify(subscriber2.m_value.IsEmpty());
}

test("No value change => no notification (intvector)")
{
	OpProperty<OpINT32Vector> intvector_prop;
	OpINT32Vector value;
	value.Add(12);
	intvector_prop.Set(value);

	IntvectorSubscriber subscriber;
	verify_success(intvector_prop.Subscribe(
				MAKE_DELEGATE(subscriber, &IntvectorSubscriber::OnChange)));

	OpINT32Vector same_value;
	same_value.Add(12);
	intvector_prop.Set(same_value);

	verify(subscriber.m_value.GetCount() == 0);
}
