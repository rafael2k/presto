/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Wojciech Dzierzanowski (wdzierzanowski)
 */

group "desktop_util.opfilteredproperty";

include "adjunct/desktop_util/adt/opfilteredproperty.h";

global
{
	struct Filters
	{
		void OneHeigher(int& value)
			{ value++; }
		void OneLower(int& value)
			{ value--; }
	};

	struct IntSubscriber
	{
		void OnChange(int value)  { m_value = value; m_notified = true; }
		int m_value;
		bool m_notified;
	};
}

test("The filter filters")
{
	Filters filters;

	OpFilteredProperty<int> prop(MAKE_DELEGATE(filters, &Filters::OneHeigher));
	verify_success(prop.Init());

	prop.Set(0);
	verify(prop.Get() == 1);

	prop.Set(12);
	verify(prop.Get() == 13);
}

test("Subscribers see filtered value")
{
	Filters filters;

	OpFilteredProperty<int> prop(MAKE_DELEGATE(filters, &Filters::OneHeigher));
	verify_success(prop.Init());
	prop.Set(0);

	IntSubscriber subscriber;
	verify_success(prop.Subscribe(
				MAKE_DELEGATE(subscriber, &IntSubscriber::OnChange)));

	prop.Set(12);
	verify(subscriber.m_value == 13);

	prop.Set(1);
	verify(subscriber.m_value == 2);
}

test("Subscribers are only notified if filtered value changes")
{
	Filters filters;

	OpFilteredProperty<int> prop(MAKE_DELEGATE(filters, &Filters::OneHeigher));
	verify_success(prop.Init());
	prop.Set(0);

	IntSubscriber subscriber;
	verify_success(prop.Subscribe(
				MAKE_DELEGATE(subscriber, &IntSubscriber::OnChange)));

	subscriber.m_notified = false;
	prop.Set(0);
	verify(!subscriber.m_notified);
	prop.Set(1);
	verify(subscriber.m_notified);
}

test("OpFilteredProperty is-a OpProperty")
{
	Filters filters;

	OpFilteredProperty<int> filtered_prop(
			MAKE_DELEGATE(filters, &Filters::OneHeigher));
	verify_success(filtered_prop.Init());

	OpProperty<int>& prop(filtered_prop);

	prop.Set(0);
	verify(prop.Get() == 1);

	prop.Set(12);
	verify(prop.Get() == 13);
}
