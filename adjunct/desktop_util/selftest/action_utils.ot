/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "desktop_util.action_utils";

include "adjunct/desktop_util/actions/action_utils.h";
include "adjunct/desktop_util/selftest/src/ST_menu_context.h";
include "adjunct/desktop_pi/desktop_menu_context.h";
include "modules/spellchecker/spellchecker_module.h";


table DocumentContextMenuTable(
							   const char* /*explanation*/,
   							   Window_Type /*window_type*/,
							   BOOL /*has_text_selection*/,
							   BOOL /*has_link*/,
							   BOOL /*is_in_document*/,
							   BOOL /*has_mailto_link*/,
							   BOOL /*has_image*/,
							   BOOL /*has_video*/, 
							   BOOL /*has_audio*/, 
							   BOOL /*has_SVG*/,
							   BOOL /*has_editable_text*/,
							   BOOL /*has_full_quality_image*/,
							   int /*dummy_spellcheck_id*/,
							   BOOL /*has_spellcheck_word*/,
							   BOOL /*can_disable_spellcheck*/,
							   const uni_char* /*expected_menu_name*/,
							   BOOL /*rect_changed*/
							  )
{
	{ "Default settings",
		WIN_TYPE_DOWNLOAD, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE, // WIN_TYPE_DOWNLOAD is default
		NULL, FALSE },
	{ "WIN_TYPE_JS_CONSOLE",
		WIN_TYPE_JS_CONSOLE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE, // don't see WIN_TYPE_JS_CONSOLE being used either
		NULL, FALSE },
	{ "WIN_TYPE_JS_CONSOLE with text selection",
		WIN_TYPE_JS_CONSOLE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Console Hotclick Popup Menu"), TRUE },
	{ "WIN_TYPE_INFO",
		WIN_TYPE_INFO, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE, // WIN_TYPE_INFO, set by WebPanel and OpImageWidget
		NULL, FALSE },
	{ "WIN_TYPE_INFO with text selection",
		WIN_TYPE_INFO, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Hotclick Popup Menu"), TRUE },
	{ "WIN_TYPE_INFO with link",
		WIN_TYPE_INFO, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Link Popup Menu"), FALSE },
	{ "WIN_TYPE_MAIL_COMPOSE",
		WIN_TYPE_MAIL_COMPOSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE, // WIN_TYPE_MAIL_COMPOSE, set on OpBrowserView's window inside RichTextEditor, ComposeMessageView, and ComposeDesktopWindow
		UNI_L("Mail Compose Popup Menu"), FALSE },
	{ "WIN_TYPE_MAIL_COMPOSE, spellcheck enabled",
		WIN_TYPE_MAIL_COMPOSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 3, FALSE, FALSE,
		UNI_L("Mail Compose Popup Menu Spellcheck Enabled"), FALSE },
	{ "WIN_TYPE_MAIL_COMPOSE, spellcheck enabled, has word",
		WIN_TYPE_MAIL_COMPOSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 3, TRUE, FALSE,
		UNI_L("Mail Compose Popup Menu Spellcheck Word"), FALSE },
	{ "is in document, has text selection, has link",
		WIN_TYPE_DOWNLOAD, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Link Selection Popup Menu"), FALSE },
	{ "has mailto link",
		WIN_TYPE_DOWNLOAD, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Mailto Link Popup Menu"), FALSE },
	{ "has mailto link, has image",
		WIN_TYPE_DOWNLOAD, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Mailto Link Image Popup Menu"), FALSE },
	{ "has link",
		WIN_TYPE_DOWNLOAD, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Link Popup Menu"), FALSE },
	{ "has link, has image",
		WIN_TYPE_DOWNLOAD, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, 0, FALSE, FALSE,
		UNI_L("Image Link Popup Menu"), FALSE },
	{ "has link, has image, turbo enabled",
		WIN_TYPE_DOWNLOAD, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Turbo Image Link Popup Menu"), FALSE },
	{ "has image",
		WIN_TYPE_DOWNLOAD, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, 0, FALSE, FALSE,
		UNI_L("Image Popup Menu"), FALSE },
	{ "has image, turbo enabled",
		WIN_TYPE_DOWNLOAD, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Turbo Image Popup Menu"), FALSE },
	{ "has video",
		WIN_TYPE_DOWNLOAD, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Video Popup Menu"), FALSE },
	{ "has audio",
		WIN_TYPE_DOWNLOAD, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Audio Popup Menu"), FALSE },
	{ "has SVG",
		WIN_TYPE_DOWNLOAD, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("SVG Popup Menu"), TRUE },
	{ "has editable text",
		WIN_TYPE_DOWNLOAD, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, 0, FALSE, FALSE,
		UNI_L("Edit Form Popup Menu"), FALSE },
	{ "has editable text, spellcheck enabled",
		WIN_TYPE_DOWNLOAD, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, 3, FALSE, FALSE,
		UNI_L("Edit Form Popup Menu Spellcheck Enabled"), FALSE },
	{ "has editable text, spellcheck enabled, has word",
		WIN_TYPE_DOWNLOAD, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, 3, TRUE, FALSE,
		UNI_L("Edit Form Popup Menu Spellcheck Word"), FALSE },
	{ "in document, WIN_TYPE_MAIL_VIEW",
		WIN_TYPE_MAIL_VIEW, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Mail Body Popup Menu"), FALSE },
	{ "in document, WIN_TYPE_NEWSFEED_VIEW",
		WIN_TYPE_NEWSFEED_VIEW, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Mail Body Popup Menu"), FALSE },
	{ "in document, WIN_TYPE_IM_VIEW",
		WIN_TYPE_IM_VIEW, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Chat Popup Menu"), FALSE },
	{ "in document",
		WIN_TYPE_DOWNLOAD, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Document Popup Menu"), FALSE },
	{ "in document, spellcheck enabled",
		WIN_TYPE_DOWNLOAD, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 3, FALSE, FALSE,
		UNI_L("Document Popup Menu Spellcheck Disabled"), FALSE },
	{ "in document, spellcheck enabled, can disable spellcheck",
		WIN_TYPE_DOWNLOAD, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 3, FALSE, TRUE,
		UNI_L("Document Popup Menu Spellcheck Enabled"), FALSE },
	{ "has text selection (not editable text) - DSK-278714",
		WIN_TYPE_DOWNLOAD, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 0, FALSE, FALSE,
		UNI_L("Hotclick Popup Menu"), TRUE },
	{ "has text selection (editable text) - DSK-278714",
		WIN_TYPE_DOWNLOAD, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, 0, FALSE, FALSE,
		UNI_L("Edit Form Popup Menu"), FALSE }
}


test ("ResolveContextMenu (OpDocumentContext)")
{
	iterate (explanation,
		window_type, has_text_selection, has_link, is_in_document, has_mailto_link, has_image, has_video, has_audio, has_SVG, has_editable_text, has_full_quality_image,
		dummy_spellcheck_id, has_spellcheck_word, can_disable_spellcheck,
		expected_menu_name, rect_changed) from DocumentContextMenuTable
	{
		output("\ntesting: %s ... ", explanation);

		// INIT
		OpPoint point(7, 7); // stub values
		OpPoint unchanged_point(point);

		OpRect rect(1, 1, 1, 1); // stub values
		OpRect unchanged_rect(rect);

		const uni_char* menu_name = NULL;

		ST_OpDocumentContext document_context;
		document_context.SetHasTextSelection(has_text_selection);
		document_context.SetHasLink(has_link);
		document_context.SetIsInDocument(is_in_document);
		document_context.SetHasMailtoLink(has_mailto_link);
		document_context.SetHasImage(has_image);
#if defined(MEDIA_SUPPORT) && defined(DOC_CAP_MEDIA_CONTEXT_MENU)
		document_context.SetHasVideo(has_video);
		document_context.SetHasAudio(has_audio);
#endif // defined(MEDIA_SUPPORT) && defined(DOC_CAP_MEDIA_CONTEXT_MENU)
#ifdef SVG_SUPPORT
		document_context.SetHasSVG(has_SVG);
#endif // SVG_SUPPORT
		document_context.SetHasEditableText(has_editable_text);
		document_context.SetHasFullQualityImage(has_full_quality_image);

#ifdef INTERNAL_SPELLCHECK_SUPPORT
		if (dummy_spellcheck_id != 0)
		{
			document_context.SetSpellSessionID(dummy_spellcheck_id);
		}
#endif // INTERNAL_SPELLCHECK_SUPPORT

		DesktopMenuContext menu_context;
		verify(OpStatus::IsSuccess(menu_context.Init(NULL, &document_context)));

		// CALL
		ST_ContextMenuResolver resolver(has_spellcheck_word, can_disable_spellcheck);
		resolver.ResolveContextMenu(point, &menu_context, menu_name, rect, window_type);

		// VERIFY
		if (expected_menu_name == NULL)
		{
			verify(menu_name == NULL);
		}
		else
		{
			verify(menu_name != NULL);
			verify(uni_strcmp(menu_name, expected_menu_name) == 0);
		}

		verify(point.Equals(unchanged_point));
		if (!rect_changed)
		{
			verify(rect.Equals(unchanged_rect));
		}
		else
		{
			verify (rect.TopLeft().Equals(point));
			verify (rect.width == unchanged_rect.width);
			verify (rect.height == unchanged_rect.height);
		}
	}
}

test ("ResolveContextMenu (URLInformation)")
{
	// INIT
	OpPoint point(7, 7); // stub values
	OpPoint unchanged_point(point);

	OpRect rect(1, 1, 1, 1); // stub values
	OpRect unchanged_rect(rect);

	const uni_char* menu_name = NULL;

	ST_StubURLInformation url_info;
	DesktopMenuContext menu_context;
	menu_context.Init(&url_info);


	// CALL
	ST_ContextMenuResolver resolver;
	resolver.ResolveContextMenu(point, &menu_context, menu_name, rect, WIN_TYPE_DOWNLOAD);


	// VERIFY
	verify(menu_name != NULL);
	verify(uni_strcmp(menu_name, UNI_L("Transfers Item Popup Menu")) == 0);

	verify(point.Equals(unchanged_point));
	verify(rect.Equals(unchanged_rect));
}


table WidgetContextMenuTable(
							 const char* /*explanation*/,
							 INT32 /*widget_type*/,		// really of type OpTypedObject::Type
							 BOOL /*is_form_element*/,
							 BOOL /*is_enabled*/,
							 BOOL /*is_read_only*/,
							 BOOL /*has_text_selection*/,
							 int /*dummy_spellcheck_id*/,
							 BOOL /*has_spellcheck_word*/,
							 const uni_char* /*expected_menu_name*/
							)
{
	{ "Default settings",
		OpTypedObject::WIDGET_TYPE, FALSE, FALSE, FALSE, FALSE, 0, FALSE,
		NULL },
	{ "form element",
		OpTypedObject::WIDGET_TYPE, TRUE, FALSE, FALSE, FALSE, 0, FALSE,
		UNI_L("Edit Form Popup Menu") },
	{ "form element, spellcheck enabled",
		OpTypedObject::WIDGET_TYPE, TRUE, FALSE, FALSE, FALSE, 3, FALSE,
		UNI_L("Edit Form Popup Menu Spellcheck Enabled") },
	{ "form element, spellcheck enabled, has word",
		OpTypedObject::WIDGET_TYPE, TRUE, FALSE, FALSE, FALSE, 3, TRUE,
		UNI_L("Edit Form Popup Menu Spellcheck Word") },
	{ "WIDGET_TYPE_FILECHOOSER_EDIT, is enabled",
		OpTypedObject::WIDGET_TYPE_FILECHOOSER_EDIT, FALSE, TRUE, FALSE, FALSE, 0, FALSE,
		UNI_L("Edit Filechooser Popup Menu") },
	{ "is enabled, read-only",
		OpTypedObject::WIDGET_TYPE, FALSE, TRUE, TRUE, FALSE, 0, FALSE,
		UNI_L("Readonly Edit Widget Popup Menu") },
	{ "is enabled",
		OpTypedObject::WIDGET_TYPE, FALSE, TRUE, FALSE, FALSE, 0, FALSE,
		UNI_L("Edit Widget Popup Menu") },
	{ "is enabled, spellcheck enabled",
		OpTypedObject::WIDGET_TYPE, FALSE, TRUE, FALSE, FALSE, 3, FALSE,
		UNI_L("Edit Widget Popup Menu Spellcheck Enabled") },
	{ "is enabled, spellcheck enabled, has word",
		OpTypedObject::WIDGET_TYPE, FALSE, TRUE, FALSE, FALSE, 3, TRUE,
		UNI_L("Edit Widget Popup Menu Spellcheck Word") }
}

test ("ResolveContextMenu (DesktopMenuContext::WidgetContext)")
{
	iterate (explanation,
		widget_type, is_form_element_, is_enabled_, is_read_only_, has_text_selection_, dummy_spellcheck_id, has_spellcheck_word,
		expected_menu_name) from WidgetContextMenuTable
	{
		output("\ntesting: %s ... ", explanation);

		// INIT
		OpPoint point(7, 7); // stub values
		OpPoint unchanged_point(point);

		OpRect rect(1, 1, 1, 1); // stub values
		OpRect unchanged_rect(rect);

		const uni_char* menu_name = NULL;

		DesktopMenuContext menu_context;
		menu_context.m_widget_context.m_widget_type = widget_type;
		menu_context.m_widget_context.m_packed.is_initialized = TRUE;
		menu_context.m_widget_context.m_packed.is_form_element = is_form_element_;
		menu_context.m_widget_context.m_packed.is_enabled = is_enabled_;
		menu_context.m_widget_context.m_packed.is_read_only = is_read_only_;
		menu_context.m_widget_context.m_packed.has_text_selection = has_text_selection_;

#ifdef INTERNAL_SPELLCHECK_SUPPORT
		if (dummy_spellcheck_id != 0)
		{
			menu_context.m_widget_context.m_spell_session_id = dummy_spellcheck_id;
		}
#endif // INTERNAL_SPELLCHECK_SUPPORT

		// CALL
		ST_ContextMenuResolver resolver(has_spellcheck_word, FALSE);
		resolver.ResolveContextMenu(point, &menu_context, menu_name, rect, WIN_TYPE_DOWNLOAD);

		// VERIFY
		if (expected_menu_name == NULL)
		{
			verify(menu_name == NULL);
		}
		else
		{
			verify(menu_name != NULL);
			verify(uni_strcmp(menu_name, expected_menu_name) == 0);
		}

		verify(point.Equals(unchanged_point));
		verify(rect.Equals(unchanged_rect));
	}
}
