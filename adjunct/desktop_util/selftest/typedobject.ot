/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "desktop_util.typedobject";

include "adjunct/desktop_util/adt/typedobject.h";

global
{
	class Type1 : public TypedObject
	{
		IMPLEMENT_TYPEDOBJECT(TypedObject);
	};

	class Type2 : public TypedObject
	{
		IMPLEMENT_TYPEDOBJECT(TypedObject);
	};

	class Type3 : public Type2
	{
		IMPLEMENT_TYPEDOBJECT(Type2);
	};
};


test("Same types get same type id")
{
	Type1 a;
	Type1 b;

	verify(a.IsOfType(&b));
}

test("Different types get different type id")
{
	Type1 type1;
	Type2 type2;

	verify(!type1.IsOfType(&type2));
}

test("Subclasses can be compared")
{
	Type2 type2;
	Type3 type3;

	verify(type3.IsOfType(&type2));
	verify(!type2.IsOfType(&type3));
}

test("Downcast item to correct type")
{
	Type1 item;
	TypedObject* item_ptr = &item;

	Type1* downcast_item = item_ptr->GetTypedObject<Type1>();

	verify(downcast_item && downcast_item == &item);

	downcast_item = TypedObject::GetTypedObject<Type1>(item_ptr);
	verify(downcast_item && downcast_item == &item);
}

test("Downcast item to incorrect type")
{
	Type1 item;
	TypedObject* item_ptr = &item;

	Type2* downcast_item = item_ptr->GetTypedObject<Type2>();

	verify(!downcast_item);

	downcast_item = TypedObject::GetTypedObject<Type2>(item_ptr);
	verify(!downcast_item);
}

test("Downcast item to derived type")
{
	Type3 item;
	TypedObject* item_ptr = &item;

	Type2* downcast_item = item_ptr->GetTypedObject<Type2>();

	verify(downcast_item && downcast_item == &item);

	downcast_item = TypedObject::GetTypedObject<Type2>(item_ptr);
	verify(downcast_item && downcast_item == &item);
}

test("Downcast null item")
{
	TypedObject* item_ptr = 0;
	Type1* downcast_item = TypedObject::GetTypedObject<Type1>(item_ptr);
	verify(!downcast_item);
}
