/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Wojciech Dzierzanowski (wdzierzanowski)
 */

group "desktop_util.opdelegatenotifer";

include "adjunct/desktop_util/adt/opdelegatenotifier.h";

global
{
	class Notifier : public OpDelegateNotifier<int>
	{
	public:
		using OpDelegateNotifier<int>::NotifyAll;
	};

	struct Subscriber
	{
		void OnChange(int value)  { m_value = value; ++m_count; }
		void SomeOtherMethod(int value)  { m_value2 = value; }
		int m_value;
		int m_value2;
		int m_count;
	};
}

test("NotifyAll() notifies all")
{
	Notifier notifier;
	Subscriber subscriber1; subscriber1.m_value = -1;
	Subscriber subscriber2; subscriber2.m_value = -1;
	Subscriber subscriber3; subscriber3.m_value = -1;

	verify_success(notifier.Subscribe(
				MAKE_DELEGATE(subscriber1, &Subscriber::OnChange)));
	verify_success(notifier.Subscribe(
				MAKE_DELEGATE(subscriber2, &Subscriber::OnChange)));
	verify_success(notifier.Subscribe(
				MAKE_DELEGATE(subscriber3, &Subscriber::OnChange)));

	notifier.NotifyAll(17);
	verify(subscriber1.m_value == 17);
	verify(subscriber2.m_value == 17);
	verify(subscriber3.m_value == 17);
}

test("One subscriber but two functions are two different subscriptions")
{
	Notifier notifier;
	Subscriber subscriber;
	subscriber.m_value = -1;
	subscriber.m_value2 = -1;

	verify_success(notifier.Subscribe(
				MAKE_DELEGATE(subscriber, &Subscriber::OnChange)));
	notifier.NotifyAll(5);
	verify(subscriber.m_value == 5);
	verify(subscriber.m_value2 == -1);

	verify_success(notifier.Subscribe(
				MAKE_DELEGATE(subscriber, &Subscriber::SomeOtherMethod)));
	notifier.NotifyAll(12);
	verify(subscriber.m_value == 12);
	verify(subscriber.m_value2 == 12);
}

test("You get as many notifications as many times you've subscribed")
{
	Notifier notifier;
	Subscriber subscriber;

	subscriber.m_count = 0;
	verify_success(notifier.Subscribe(
				MAKE_DELEGATE(subscriber, &Subscriber::OnChange)));
	notifier.NotifyAll(0);
	verify(subscriber.m_count == 1);

	subscriber.m_count = 0;
	verify_success(notifier.Subscribe(
				MAKE_DELEGATE(subscriber, &Subscriber::OnChange)));
	verify_success(notifier.Subscribe(
				MAKE_DELEGATE(subscriber, &Subscriber::OnChange)));
	notifier.NotifyAll(0);
	verify(subscriber.m_count == 3);

	subscriber.m_count = 0;
	notifier.Unsubscribe(&subscriber);
	notifier.NotifyAll(0);
	verify(subscriber.m_count == 0);
}
