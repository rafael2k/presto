/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick_toolkit.quickstacklayout";
require init;

include "adjunct/quick_toolkit/widgets/QuickGrid/QuickStackLayout.h";
include "adjunct/quick_toolkit/widgets/NullWidget.h";
include "adjunct/quick_toolkit/selftest/src/ST_TestWidget.h";
include "modules/widgets/OpWidget.h";

global
{
	struct CellLocation
	{
		CellLocation() : col(-1), row(-1), cell(0) {}
		void Set(int p_col, int p_row, GridCell* p_cell) { col = p_col; row = p_row; cell = p_cell; }

		int col;
		int row;
		GridCell* cell;
	};

	class MockStackLayout : public QuickStackLayout
	{
	public:
		MockStackLayout() : QuickStackLayout(VERTICAL) {}

		// Override GenericGrid
		void EvaluateCells() { GetMinimumWidth(); /* forces lazy evaluation */ }
	};

	class MockWidget : public ST_TestWidget
	{
	public:
		void CallContentsChanged() { if (GetContainer()) GetContainer()->OnContentsChanged(); }
	};

	class MockContainer : public QuickWidgetContainer
	{
	public:
		MockContainer() : m_called_contents_changed(FALSE) {}

		virtual void OnContentsChanged() { m_called_contents_changed = TRUE; }

		BOOL m_called_contents_changed;
	};

	class MockOpWidget : public OpWidget {};
};


test("empty stack")
{
	QuickStackLayout stack(QuickStackLayout::VERTICAL);

	verify(stack.GetMinimumWidth() == 0);
	verify(stack.GetPreferredWidth() == 0);
	verify(stack.GetMinimumHeight() == 0);
	verify(stack.GetPreferredHeight() == 0);
	verify(stack.GetMargins().left == 0);
	verify(stack.GetMargins().right == 0);
	verify(stack.GetMargins().top == 0);
	verify(stack.GetMargins().bottom == 0);
}


test("add widget")
{
	ST_TestWidget* widget = OP_NEW(ST_TestWidget, ());

	QuickStackLayout stack(QuickStackLayout::VERTICAL);
	verify_success(stack.InsertWidget(widget));

	verify(stack.GetMinimumWidth() == ST_TestWidget::MinimumWidth);
	verify(stack.GetPreferredWidth() == ST_TestWidget::PreferredWidth);
	verify(stack.GetMinimumHeight() == ST_TestWidget::MinimumHeight);
	verify(stack.GetPreferredHeight() == ST_TestWidget::PreferredHeight);
	verify(stack.GetMargins().left == ST_TestWidget::Margin);
	verify(stack.GetMargins().right == ST_TestWidget::Margin);
	verify(stack.GetMargins().top == ST_TestWidget::Margin);
	verify(stack.GetMargins().bottom == ST_TestWidget::Margin);
}

  
test("add two widgets horizontal")
{
	QuickStackLayout stack(QuickStackLayout::HORIZONTAL);

	for (unsigned i = 0; i < 2; i++)
	{
		ST_TestWidget* widget = OP_NEW(ST_TestWidget, ());
		stack.InsertWidget(widget);
	}

	verify(stack.GetMinimumWidth() == ST_TestWidget::MinimumWidth * 2 + ST_TestWidget::Margin);
	verify(stack.GetPreferredWidth() == ST_TestWidget::PreferredWidth * 2 + ST_TestWidget::Margin);
	verify(stack.GetMinimumHeight() == ST_TestWidget::MinimumHeight);
	verify(stack.GetPreferredHeight() == ST_TestWidget::PreferredHeight);
	verify(stack.GetMargins().left == ST_TestWidget::Margin);
	verify(stack.GetMargins().right == ST_TestWidget::Margin);
	verify(stack.GetMargins().top == ST_TestWidget::Margin);
	verify(stack.GetMargins().bottom == ST_TestWidget::Margin);
}

test("add two widgets vertical")
{
	QuickStackLayout stack(QuickStackLayout::VERTICAL);

	for (unsigned i = 0; i < 2; i++)
	{
		ST_TestWidget* widget = OP_NEW(ST_TestWidget, ());
		stack.InsertWidget(widget);
	}

	verify(stack.GetMinimumWidth() == ST_TestWidget::MinimumWidth);
	verify(stack.GetPreferredWidth() == ST_TestWidget::PreferredWidth);
	verify(stack.GetMinimumHeight() == ST_TestWidget::MinimumHeight * 2 + ST_TestWidget::Margin);
	verify(stack.GetPreferredHeight() == ST_TestWidget::PreferredHeight * 2 + ST_TestWidget::Margin);
	verify(stack.GetMargins().left == ST_TestWidget::Margin);
	verify(stack.GetMargins().right == ST_TestWidget::Margin);
	verify(stack.GetMargins().top == ST_TestWidget::Margin);
	verify(stack.GetMargins().bottom == ST_TestWidget::Margin);
}

test("Layout should be called on the child widget")
{
	ST_TestWidget* widget = OP_NEW(ST_TestWidget, ());

	QuickStackLayout stack(QuickStackLayout::VERTICAL);
	stack.InsertWidget(widget);

	OpRect rect(2, 4, ST_TestWidget::MinimumWidth + 5, ST_TestWidget::MinimumHeight + 10);
	verify(OpStatus::IsSuccess(stack.Layout(rect)));
	verify(rect.Equals(widget->m_layout_rect));
}

test("Should call OnContentsChanged() on container when adding cells")
{
	MockContainer container;
	MockStackLayout stack;
	stack.SetContainer(&container);

	NullWidget* widget = OP_NEW(NullWidget, ());
	stack.InsertWidget(widget);

	verify(container.m_called_contents_changed);
}

test("Propagate OnContentsChanged() to container")
{
	MockContainer container;
	MockStackLayout stack;
	stack.SetContainer(&container);

	stack.OnContentsChanged();

	verify(container.m_called_contents_changed);
}

test("Widgets are in container structure")
{
	MockContainer container;
	MockStackLayout stack;
	stack.SetContainer(&container);

	MockWidget* widget = OP_NEW(MockWidget, ());
	verify_success(stack.InsertWidget(widget));

	container.m_called_contents_changed = FALSE;
	widget->CallContentsChanged();

	verify(container.m_called_contents_changed);
}

test("propagate parent opwidget")
{
	MockStackLayout stack;
	MockOpWidget dummy;
	stack.SetParentOpWidget(&dummy);

	MockWidget* widget = OP_NEW(MockWidget, ());
	stack.InsertWidget(widget);
	stack.EvaluateCells();

	verify(widget->m_parent_op_widget == &dummy);
}
