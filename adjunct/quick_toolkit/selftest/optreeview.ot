/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Wojciech Dzierzanowski (wdzierzanowski) / Arjan van Leeuwen (arjanl)
 */

group "quick_toolkit.optreeview.optreeview";

include "adjunct/desktop_util/treemodel/simpletreemodel.h";
include "adjunct/quick_toolkit/widgets/OpTreeView/OpTreeView.h";

global
{
	typedef AutoTreeModel<char> TestModel;

	SimpleTreeModelItem* CreateItem(OpTreeModel& model, const OpStringC& name,
			const OpStringC& assoc_text = NULL, BOOL open = TRUE)
	{
		static INT32 item_id = 1;
		SimpleTreeModelItem* item = OP_NEW(SimpleTreeModelItem,
				(&model, NULL, item_id, OpTypedObject::UNKNOWN_TYPE));
		item_id += 1;
		item->SetItemData(0, name.CStr());
		item->SetInitiallyOpen(open);
		if (assoc_text.HasContent())
		{
			item->SetAssociatedText(assoc_text);
		}
		return item;
	}

	class DummySorter : public OpTreeModel::SortListener
	{
		virtual INT32 OnCompareItems(OpTreeModel* tree_model, OpTreeModelItem* item0, OpTreeModelItem* item1)
		{
			return item0->GetID() - item1->GetID();
		}
	};
}

// This is the complete tree:
//
// 		line no.|	item name
//		--------+------------
//			0	|	item0
//			1	|	item1
//			2	|	item1
//			3	|	item2
//			4	|	\--item3
//			5	|	   item3

test("Lines are mapped to items correctly: initial model state")
{
	TestModel model;

	model.AddItem(UNI_L("item0"));
	model.GetItemByIndex(model.AddItem(UNI_L("item2")))
			->SetInitiallyOpen(TRUE);
	model.GetItemByIndex(model.AddItem(UNI_L("item1")))
			->SetAssociatedText(UNI_L("for item1"));
	model.GetItemByIndex(model.AddItem(UNI_L("item3"), NULL, 0, 1))
			->SetAssociatedText(UNI_L("for item3"));

	OpTreeView* view = NULL;
	OpTreeView::Construct(&view);
	OpAutoPtr<OpTreeView> view_holder(view);
	view->SetTreeModel(&model, 0);

	verify(view->GetItemByLine(0) == 0);
	verify(view->GetItemByLine(1) == 1);
	verify(view->GetItemByLine(2) == 1);
	verify(view->GetItemByLine(3) == 2);
	verify(view->GetItemByLine(4) == 3);
	verify(view->GetItemByLine(5) == 3);
	verify(view->GetItemByLine(6) == -1);
}

test("Lines are mapped to items correctly: adding items")
{
	TestModel model;

	OpTreeView* view = NULL;
	OpTreeView::Construct(&view);
	OpAutoPtr<OpTreeView> view_holder(view);
	view->SetTreeModel(&model, 0);

	model.AddItem(UNI_L("item0"));
	model.AddLast(CreateItem(model, UNI_L("item2")));
	model.AddLast(CreateItem(model, UNI_L("item1"), UNI_L("for item1")));
	model.AddLast(CreateItem(model, UNI_L("item3"), UNI_L("for item3")), 1);

	verify(view->GetItemByLine(0) == 0);
	verify(view->GetItemByLine(1) == 1);
	verify(view->GetItemByLine(2) == 1);
	verify(view->GetItemByLine(3) == 2);
	verify(view->GetItemByLine(4) == 3);
	verify(view->GetItemByLine(5) == 3);
	verify(view->GetItemByLine(6) == -1);
	/* Since we have broken the SimpleTreeModel API by explicitly
	 * adding items using the base class, we need to clean up
	 * ourselves here to silence an assert.
	 */
	model.DeleteAll();
}

test("Lines are mapped to items correctly: adding item under closed parent")
{
	TestModel model;

	OpTreeView* view = NULL;
	OpTreeView::Construct(&view);
	OpAutoPtr<OpTreeView> view_holder(view);
	view->SetTreeModel(&model, 0);

	model.AddItem(UNI_L("item0"));
	model.AddLast(CreateItem(model, UNI_L("item2"), NULL, FALSE));
	model.AddLast(CreateItem(model, UNI_L("item1"), UNI_L("for item1")));
	model.AddLast(CreateItem(model, UNI_L("item3"), UNI_L("for item3")), 1);

	verify(view->GetItemByLine(0) == 0);
	verify(view->GetItemByLine(1) == 1);
	verify(view->GetItemByLine(2) == 1);
	verify(view->GetItemByLine(3) == 2);
	verify(view->GetItemByLine(4) == -1);

	view->OpenAllItems(TRUE);

	verify(view->GetItemByLine(0) == 0);
	verify(view->GetItemByLine(1) == 1);
	verify(view->GetItemByLine(2) == 1);
	verify(view->GetItemByLine(3) == 2);
	verify(view->GetItemByLine(4) == 3);
	verify(view->GetItemByLine(5) == 3);
	verify(view->GetItemByLine(6) == -1);
	/* Since we have broken the SimpleTreeModel API by explicitly
	 * adding items using the base class, we need to clean up
	 * ourselves here to silence an assert.
	 */
	model.DeleteAll();
}

test("Selected item is correctly maintained when sorting of items changes")
{
	TestModel model;

	OpTreeView* view = NULL;
	OpTreeView::Construct(&view);
	OpAutoPtr<OpTreeView> view_holder(view);
	view->SetTreeModel(&model, 0);
	view->Sort(0, TRUE);

	model.AddItem(UNI_L("item0"), 0, 0, -1, 0, 0);
	model.AddItem(UNI_L("item1"), 0, 0, -1, 0, 1);

	view->SetSelectedItem(1);
	verify(view->GetSelectedItemPos() == 1);

	model.SetItemData(0, 0, UNI_L("item2"));

	verify(view->GetSelectedItemPos() == 0);
}
