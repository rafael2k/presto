/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Wojciech Dzierzanowski (wdzierzanowski)
 */

group "quick_toolkit.desktoptogglebutton";
require init;

include "adjunct/quick_toolkit/selftest/src/ST_TestController.h";
include "adjunct/quick_toolkit/widgets/DesktopToggleButton.h";
include "adjunct/quick_toolkit/widgets/QuickWidgetDecls.h";

global
{
	class Controller : public ST_TestController
	{
	public:
		Controller() : m_last_action(OpInputAction::ACTION_GO) {}

		virtual BOOL CanHandleAction(OpInputAction* action) { return TRUE; }

		virtual OP_STATUS HandleAction(OpInputAction* action)
		{
			m_last_action = action->GetAction();
			return ST_TestController::HandleAction(action);
		}

		OpInputAction::Action m_last_action;
	};
}

table Actions(OpInputAction::Action, const uni_char*)
{
	{OpInputAction::ACTION_OK,		UNI_L("Ok")},
	{OpInputAction::ACTION_CANCEL,	UNI_L("Cancel")},
	{OpInputAction::ACTION_APPLY,	UNI_L("Apply")},
}

test("Action rotation")
{
	QuickToggleButton* button = OP_NEW(QuickToggleButton, ());
	verify_not_oom(button);
	OpAutoPtr<QuickToggleButton> button_holder(button);
	verify_success(button->Init());

	Controller controller;
	verify_success(controller.Show(button_holder.release()));

	iterate (action, text) from Actions
	{
		verify_success(button->GetOpWidget()->AddToggleState(
					OP_NEW(OpInputAction, (action)), text));
	}

	iterate (action, text) from Actions
	{
		verify_string(button->GetOpWidget()->string.Get(), text);
		button->GetOpWidget()->Click();
		verify(controller.m_last_action == action);
	}
	iterate (action, text) from Actions
	{
		verify_string(button->GetOpWidget()->string.Get(), text);
		button->GetOpWidget()->Click();
		verify(controller.m_last_action == action);
	}
}
