/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick_toolkit.quickdynamicgrid";
require init;

include "adjunct/quick_toolkit/widgets/QuickGrid/QuickDynamicGrid.h";
include "adjunct/quick_toolkit/selftest/src/ST_TestWidget.h";
include "modules/widgets/OpWidget.h";

global
{
	class MockOpWidget : public OpWidget
	{
	};
};

test("OpWidget structure is built for test data")
{
	MockOpWidget parent;
	QuickDynamicGrid grid;
	verify_success(grid.Init(QuickDynamicGrid::FORCE_TESTABLE));
	grid.SetParentOpWidget(&parent);

	verify_success(grid.AddRow());
	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(widget1));
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(widget2));

	OpWidget* gridwidget = parent.GetFirstChild();
	verify(gridwidget);
	verify(gridwidget->GetType() == OpTypedObject::WIDGET_TYPE_DYNAMIC_GRID_LAYOUT);
	OpWidget* rowwidget = gridwidget->GetFirstChild();
	verify(rowwidget);
	verify(rowwidget->GetType() == OpTypedObject::WIDGET_TYPE_DYNAMIC_GRID_ITEM);

	verify(widget1->m_parent_op_widget == rowwidget);
	verify(widget2->m_parent_op_widget == rowwidget);
}

test("OpWidget structure correct after removing row")
	require success "OpWidget structure is built for test data";
{
	MockOpWidget parent;
	QuickDynamicGrid grid;
	verify_success(grid.Init(QuickDynamicGrid::FORCE_TESTABLE));
	grid.SetParentOpWidget(&parent);

	verify_success(grid.AddRow());
	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(widget1));
	verify_success(grid.AddRow());
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(widget2));

	OpWidget* gridwidget = parent.GetFirstChild();
	verify(gridwidget);
	verify(gridwidget->GetFirstChild() != gridwidget->GetLastChild());
	verify(gridwidget->GetFirstChild() == widget1->m_parent_op_widget);
	verify(gridwidget->GetLastChild() == widget2->m_parent_op_widget);

	grid.RemoveRow(0);

	verify(gridwidget->GetFirstChild());
	verify(gridwidget->GetFirstChild() == gridwidget->GetLastChild());
	verify(gridwidget->GetFirstChild() == widget2->m_parent_op_widget);
}

test("row widgets get names")
	require success "OpWidget structure correct after removing row";
{
	MockOpWidget parent;
	QuickDynamicGrid grid;
	verify_success(grid.Init(QuickDynamicGrid::FORCE_TESTABLE));
	grid.SetParentOpWidget(&parent);

	verify_success(grid.AddRow());
	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(widget1));
	verify_success(grid.AddRow());
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(widget2));

	OpWidget* gridwidget = parent.GetFirstChild();
	verify(gridwidget);
	verify(gridwidget->GetFirstChild() != gridwidget->GetLastChild());
	verify_string(gridwidget->GetFirstChild()->GetName().CStr(), "GridItem0");
	verify_string(gridwidget->GetLastChild()->GetName().CStr(), "GridItem1");

	grid.RemoveRow(0);

	verify_string(gridwidget->GetFirstChild()->GetName().CStr(), "GridItem0");
}

test("row widgets are correctly layouted")
	require success "OpWidget structure is built for test data";
{
	MockOpWidget parent;
	QuickDynamicGrid grid;
	verify_success(grid.Init(QuickDynamicGrid::FORCE_TESTABLE));
	grid.SetParentOpWidget(&parent);

	verify_success(grid.AddRow());
	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(widget1));
	verify_success(grid.AddRow());
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(widget2));

	const OpRect rect(0, 50, grid.GetMinimumWidth(), grid.GetMinimumHeight());
	verify_success(grid.Layout(rect));

	OpWidget* gridwidget = parent.GetFirstChild();
	verify(gridwidget && gridwidget->GetRect().Equals(rect));

	OpWidget* rowwidget1 = gridwidget->GetFirstChild();
	verify(rowwidget1);
	OpRect rowrect1 = rowwidget1->GetRect();
	verify(rowrect1.x == 0);
	verify(rowrect1.y == 0);
	verify(unsigned(rowrect1.width) == ST_TestWidget::MinimumWidth);
	verify(unsigned(rowrect1.height) == ST_TestWidget::MinimumHeight);

	OpWidget* rowwidget2 = rowwidget1->GetNextSibling();
	verify(rowwidget2);
	OpRect rowrect2 = rowwidget2->GetRect();
	verify(rowrect2.x == 0);
	verify(rowrect2.y == ST_TestWidget::MinimumHeight + ST_TestWidget::Margin);
	verify(unsigned(rowrect2.width) == ST_TestWidget::MinimumWidth);
	verify(unsigned(rowrect2.height) == ST_TestWidget::MinimumHeight);
}

