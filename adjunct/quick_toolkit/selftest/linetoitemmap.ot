/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 * @author Alexander Remen (alexr)
 */

group "quick_toolkit.LineToItemMap";

include "adjunct/quick_toolkit/widgets/OpTreeView/LineToItemMap.h";

test("Items are added and removed using LineToItemMap::AddItem and LineToItemMap::Remove")
{
	LineToItemMap vector;

	verify(vector.Find(3)==-1);
	verify(OpStatus::IsSuccess(vector.AddItem(3)));
	verify(vector.Find(3)==0);

	vector.RemoveItems(3, 3);
	verify(vector.Find(3)==-1);
}

test("Items are sorted and the values increased when added with LineToItemMap::AddItem")
{
	LineToItemMap vector;
	verify(OpStatus::IsSuccess(vector.AddItem(8, 2)));
	verify(OpStatus::IsSuccess(vector.AddItem(3, 3)));
	verify(OpStatus::IsSuccess(vector.AddItem(5, 1)));

	verify(vector.GetCount() == 6);
	verify(vector.GetByIndex(0) == 3);
	verify(vector.GetByIndex(1) == 3);
	verify(vector.GetByIndex(2) == 3);
	verify(vector.GetByIndex(3) == 5);
	verify(vector.GetByIndex(4) == 10);
	verify(vector.GetByIndex(5) == 10);
	verify(vector.GetByIndex(6) == -1);
}

test("RemoveLines and RemoveItems decrease values as intended")
	require success "Items are sorted and the values increased when added with LineToItemMap::AddItem";
{
	LineToItemMap vector;
	verify(OpStatus::IsSuccess(vector.AddItem(8, 2)));
	verify(OpStatus::IsSuccess(vector.AddItem(3, 3)));
	verify(OpStatus::IsSuccess(vector.AddItem(5, 1)));

	vector.RemoveItems(3, 3);

	verify(vector.GetCount() == 3);
	verify(vector.GetByIndex(0) == 4);
	verify(vector.GetByIndex(1) == 9);
	verify(vector.GetByIndex(2) == 9);

	vector.RemoveLines(4);

	verify(vector.GetCount() == 2);
	verify(vector.GetByIndex(0) == 9);
	verify(vector.GetByIndex(1) == 9);
}

test("Items can be found with LineToItemMap::Find")
{
	LineToItemMap vector;
	verify(OpStatus::IsSuccess(vector.AddItem(0)));
	verify(OpStatus::IsSuccess(vector.AddItem(8)));
	verify(OpStatus::IsSuccess(vector.AddItem(3)));
	verify(OpStatus::IsSuccess(vector.AddItem(5)));
	verify(OpStatus::IsSuccess(vector.AddItem(16)));
	verify(OpStatus::IsSuccess(vector.AddItem(12)));
	verify(OpStatus::IsSuccess(vector.AddItem(11)));

	verify(vector.Find(0) == 0);
	verify(vector.Find(3) == 1);
	verify(vector.Find(5) == 2);
	verify(vector.Find(10) == 3);
	verify(vector.Find(11) == 4);
	verify(vector.Find(13) == 5);
	verify(vector.Find(18) == 6);

	verify(vector.Find(8) == -1);
}

test("LineToItemMap::Find returns first line of an item (DSK-299046)")
{
	LineToItemMap vector;
	verify(OpStatus::IsSuccess(vector.AddItem(0)));
	verify(OpStatus::IsSuccess(vector.AddItem(1,2)));
	verify(OpStatus::IsSuccess(vector.AddItem(2,2)));
	vector.RemoveLines(1);

	verify(vector.Find(2) == 1);
}

test("Items can be over several lines with LineToItemMap::InsertLines")
{
	LineToItemMap vector;
	verify(OpStatus::IsSuccess(vector.InsertLines(3,3)));
	verify(OpStatus::IsSuccess(vector.InsertLines(8,2)));
	verify(OpStatus::IsSuccess(vector.InsertLines(5,3)));

	verify(vector.GetCount() == 8);
	verify(vector.GetByIndex(0) == 3);
	verify(vector.GetByIndex(1) == 3);
	verify(vector.GetByIndex(2) == 3);
	verify(vector.GetByIndex(3) == 5);
	verify(vector.GetByIndex(4) == 5);
	verify(vector.GetByIndex(5) == 5);
	verify(vector.GetByIndex(6) == 8);
	verify(vector.GetByIndex(7) == 8);
}

test("RemoveLines can remove items with several lines")
	require success "Items can be over several lines with LineToItemMap::InsertLines";
{
	LineToItemMap vector;
	verify(OpStatus::IsSuccess(vector.InsertLines(3,3)));
	verify(OpStatus::IsSuccess(vector.InsertLines(8,2)));

	vector.RemoveLines(3);

	verify(vector.GetCount() == 2);
	verify(vector.GetByIndex(0) == 8);
	verify(vector.GetByIndex(1) == 8);
}

test("RemoveItems can remove items with several lines")
	require success "Items can be over several lines with LineToItemMap::InsertLines";
{
	LineToItemMap vector;
	verify(OpStatus::IsSuccess(vector.InsertLines(3,3)));
	verify(OpStatus::IsSuccess(vector.InsertLines(8,2)));

	vector.RemoveItems(3, 3);

	verify(vector.GetCount() == 2);
	verify(vector.GetByIndex(0) == 7);
	verify(vector.GetByIndex(1) == 7);
}

test("RemoveItems affects values even if the item isn't in the list")
	require success "Items can be over several lines with LineToItemMap::InsertLines";
{
	LineToItemMap vector;
	verify(OpStatus::IsSuccess(vector.InsertLines(3,1)));
	verify(OpStatus::IsSuccess(vector.InsertLines(8,1)));

	vector.RemoveItems(4, 4);

	verify(vector.GetCount() == 2);
	verify(vector.GetByIndex(0) == 3);
	verify(vector.GetByIndex(1) == 7);
}

test("Items can be cleared with LineToItemMap::Clear")
{
	LineToItemMap vector;
	verify(OpStatus::IsSuccess(vector.AddItem(8)));
	verify(OpStatus::IsSuccess(vector.AddItem(3)));
	verify(OpStatus::IsSuccess(vector.AddItem(5)));

	vector.Clear();

	verify(vector.GetCount() == 0);
}

test("Values can be added twice with AddItem")
{
	LineToItemMap vector;
	verify(OpStatus::IsSuccess(vector.AddItem(8)));
	verify(OpStatus::IsSuccess(vector.AddItem(8)));

	verify(vector.GetCount() == 2);
	verify(vector.GetByIndex(0) == 8);
	verify(vector.GetByIndex(1) == 9);
}

test("Items chain is added LineToItemMap::BeginInsertion, LineToItemMap::InsertItem and LineToItemMap::EndInsertion")
{
	LineToItemMap vector;
	verify(OpStatus::IsSuccess(vector.InsertLines(2,3)));
	verify(OpStatus::IsSuccess(vector.InsertLines(8,2)));
	
	vector.BeginInsertion();
	verify(OpStatus::IsSuccess(vector.InsertItem(3,1)));
	verify(OpStatus::IsSuccess(vector.InsertItem(4,2)));
	verify(OpStatus::IsSuccess(vector.InsertItem(6,4)));
	verify(OpStatus::IsSuccess(vector.InsertItem(7,1)));
	vector.EndInsertion();

	verify(vector.GetCount() == 13);
	verify(vector.GetByIndex(2) == 2);
	verify(vector.GetByIndex(3) == 3);
	verify(vector.GetByIndex(5) == 4);
	verify(vector.GetByIndex(6) == 6);
	verify(vector.GetByIndex(9) == 6);
	verify(vector.GetByIndex(10) == 7);
	verify(vector.GetByIndex(12) == 8);
	
	verify(vector.Find(5) == -1);
}
