/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2012 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Wojciech Dzierzanowski (wdzierzanowski)
 */

group "quick_toolkit.quickbinderprefs";
require init;

include "adjunct/desktop_util/adt/typedobjectcollection.h";
include "adjunct/desktop_util/prefs/PrefsCollectionDesktopUI.h";
include "adjunct/quick/widgets/DesktopFileChooserEdit.h";
include "adjunct/quick_toolkit/bindings/DefaultQuickBinder.h";
include "adjunct/quick_toolkit/widgets/QuickCheckBox.h";
include "adjunct/quick_toolkit/widgets/QuickDropDown.h";
include "adjunct/quick_toolkit/widgets/QuickEdit.h";
include "adjunct/quick_toolkit/widgets/QuickNumberEdit.h";
include "adjunct/quick_toolkit/widgets/QuickRadioButton.h";
include "modules/widgets/OpButtonGroup.h";

global
{
	#define INT_PREF PrefsCollectionUI::UpgradeCount
	#define STRING_PREF PrefsCollectionUI::UserEmail
	#define FILE_PREF PrefsCollectionFiles::GadgetListFile

	int old_int_pref;
	OpString old_string_pref;
	OpString old_file_pref;

	struct Widgets : public TypedObjectCollection
	{
		Widgets() : m_radio_group(NULL)
		{
			m_check_box.Init();
			for (size_t i = 0; i < ARRAY_SIZE(m_radio_buttons); ++i)
			{
				m_radio_buttons[i].Init();
				m_radio_buttons[i].GetOpWidget()->RegisterToButtonGroup(&m_radio_group);
			}
			m_number_edit.Init();
			m_edit.Init();
			m_drop_down.Init();
			m_drop_down.GetOpWidget()->SetEditableText();
			m_drop_down.GetOpWidget()->edit->SetOnChangeOnEnter(FALSE);
			m_chooser.Init();

			Put("check_box", &m_check_box);
			Put("radio_button0", &m_radio_buttons[0]);
			Put("radio_button1", &m_radio_buttons[1]);
			Put("radio_button2", &m_radio_buttons[2]);
			Put("number_edit", &m_number_edit);
			Put("edit", &m_edit);
			Put("drop_down", &m_drop_down);
			Put("chooser", &m_chooser);
		}

		QuickCheckBox m_check_box;
		OpButtonGroup m_radio_group;
		QuickRadioButton m_radio_buttons[3];
		QuickNumberEdit m_number_edit;
		QuickEdit m_edit;
		QuickDropDown m_drop_down;
		QuickDesktopFileChooserEdit m_chooser;
	};

	int GetSelection(QuickDropDown& drop_down)
	{
		const INT32 index  = drop_down.GetOpWidget()->GetSelectedItem();
		return drop_down.GetOpWidget()->GetItemUserData(index);
	}
}

setup
{
	old_int_pref = g_pcui->GetIntegerPref(INT_PREF);
	old_string_pref.Set(g_pcui->GetStringPref(STRING_PREF));
	old_file_pref.Set(g_pcfiles->GetFile(FILE_PREF)->GetFullPath());
}

exit
{
	TRAPD(result, g_pcui->WriteIntegerL(INT_PREF, old_int_pref));
	TRAP(result, g_pcui->WriteStringL(STRING_PREF, old_string_pref));

	OpFile old_file;
	old_file.Construct(old_file_pref);
	TRAP(result, g_pcfiles->WriteFilePrefL(FILE_PREF, &old_file));
}


subtest IsStateBound(const OpStringC8& widget_name, const Widgets& widgets, OpWidget& widget)
{
	for (int checked_value = 0; checked_value != 1; checked_value = 1)
		for (int initial_pref = 0; initial_pref != 1; initial_pref = 1)
		{
			DefaultQuickBinder binder;
			binder.SetWidgetCollection(&widgets);

			TRAPD(result, g_pcui->WriteIntegerL(INT_PREF, initial_pref));
			verify_success(binder.Connect(widget_name.CStr(), *g_pcui, INT_PREF,
						checked_value, !checked_value));

			verify(widget.GetValue() == !g_pcui->GetIntegerPref(INT_PREF));

			widget.SetValue(1);
			verify(g_pcui->GetIntegerPref(INT_PREF) == checked_value);
			widget.SetValue(0);
			verify(g_pcui->GetIntegerPref(INT_PREF) == !checked_value);
		}
}

test("Check box state can be bound to an integer preference")
{
	Widgets widgets;
	verify(IsStateBound("check_box", widgets, *widgets.m_check_box.GetOpWidget()));
}

test("Radio button state can be bound to an integer preference")
{
	Widgets widgets;
	verify(IsStateBound("radio_button0", widgets, *widgets.m_radio_buttons[0].GetOpWidget()));
}

test("Radio buttons in a group can be bound to one integer preference")
{
	for (int initial_pref = 0; initial_pref <= 2; ++initial_pref)
	{
		Widgets widgets;

		DefaultQuickBinder binder;
		binder.SetWidgetCollection(&widgets);

		TRAPD(result, g_pcui->WriteIntegerL(INT_PREF, initial_pref));
		verify_success(binder.Connect("radio_button0", *g_pcui, INT_PREF, 0));
		verify_success(binder.Connect("radio_button1", *g_pcui, INT_PREF, 1));
		verify_success(binder.Connect("radio_button2", *g_pcui, INT_PREF, 2));

		for (size_t i = 0; i < ARRAY_SIZE(widgets.m_radio_buttons); ++i)
			verify((g_pcui->GetIntegerPref(INT_PREF) == int(i))
					== (widgets.m_radio_buttons[i].GetOpWidget()->GetValue() != 0));

		for (size_t i = 0; i < ARRAY_SIZE(widgets.m_radio_buttons); ++i)
		{
			widgets.m_radio_buttons[i].GetOpWidget()->SetValue(1);
			verify(g_pcui->GetIntegerPref(INT_PREF) == int(i));
		}
	}
}

test("Number edit value can be bound to an integer preference")
{
	Widgets widgets;
	DefaultQuickBinder binder;
	binder.SetWidgetCollection(&widgets);
	verify_success(binder.Connect("number_edit", *g_pcui, INT_PREF));

	int edit_value = -1;
	verify_success(widgets.m_number_edit.GetOpWidget()->GetIntValue(edit_value));
	verify(edit_value == g_pcui->GetIntegerPref(INT_PREF));

	widgets.m_number_edit.GetOpWidget()->SetText(UNI_L("3333"));
	verify(g_pcui->GetIntegerPref(INT_PREF) == 3333);

	widgets.m_number_edit.GetOpWidget()->SetText(UNI_L("4444"));
	verify(g_pcui->GetIntegerPref(INT_PREF) == 4444);
}

subtest IsTextBound(const OpStringC8& widget_name, const Widgets& widgets, OpWidget& widget)
{
	DefaultQuickBinder binder;
	binder.SetWidgetCollection(&widgets);
	verify_success(binder.Connect(widget_name.CStr(), *g_pcui, STRING_PREF));

	OpString widget_text;
	verify_success(widget.GetText(widget_text));
	verify_string(widget_text, g_pcui->GetStringPref(STRING_PREF));

	verify_success(widget.SetText(UNI_L("bumble")));
	verify_string(g_pcui->GetStringPref(STRING_PREF), UNI_L("bumble"));
	verify_success(widget.SetText(UNI_L("bee")));
	verify_string(g_pcui->GetStringPref(STRING_PREF), UNI_L("bee"));
}

test("Edit text can be bound to a string preference")
{
	Widgets widgets;
	verify(IsTextBound("edit", widgets, *widgets.m_edit.GetOpWidget()));
}

test("Drop down text can be bound to a string preference")
{
	Widgets widgets;
	verify(IsTextBound("drop_down", widgets, *widgets.m_drop_down.GetOpWidget()));
}

test("Drop down selection can be bound to an integer preference")
{
	Widgets widgets;
	DefaultQuickBinder binder;
	binder.SetWidgetCollection(&widgets);

	verify_success(widgets.m_drop_down.AddItem(UNI_L("drop"), -1, NULL, 0));
	verify_success(widgets.m_drop_down.AddItem(UNI_L("me"), -1, NULL, 10));
	verify_success(widgets.m_drop_down.AddItem(UNI_L("down"), -1, NULL, 20));
	TRAPD(result, g_pcui->WriteIntegerL(INT_PREF, 10));

	verify_success(binder.Connect("drop_down", *g_pcui, INT_PREF));

	verify(GetSelection(widgets.m_drop_down) == g_pcui->GetIntegerPref(INT_PREF));

	widgets.m_drop_down.GetOpWidget()->SelectItemAndInvoke(0, TRUE);
	verify(g_pcui->GetIntegerPref(INT_PREF) == 0);

	widgets.m_drop_down.GetOpWidget()->SelectItemAndInvoke(2, TRUE);
	verify(g_pcui->GetIntegerPref(INT_PREF) == 20);

	widgets.m_drop_down.GetOpWidget()->SelectItemAndInvoke(-1, TRUE);
	verify(g_pcui->GetIntegerPref(INT_PREF) == 20);
}

test("File chooser text can be bound to a file preference")
{
	Widgets widgets;
	DefaultQuickBinder binder;
	binder.SetWidgetCollection(&widgets);

	OpFile file;
	file.Construct(UNI_L("/path/to/file"));
	TRAPD(result, g_pcfiles->WriteFilePrefL(FILE_PREF, &file));

	verify_success(binder.Connect("chooser", FILE_PREF));

	OpString widget_text;
	verify_success(widgets.m_chooser.GetText(widget_text));
	verify_string(widget_text, g_pcfiles->GetFile(FILE_PREF)->GetFullPath());

	verify_success(widgets.m_chooser.SetText(UNI_L("/path")));
	verify_string(g_pcfiles->GetFile(FILE_PREF)->GetFullPath(), UNI_L("/path"));
}
