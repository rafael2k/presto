/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick_toolkit.optreeview.treeviewmodel";

include "adjunct/quick_toolkit/widgets/OpTreeView/TreeViewModel.h";
include "adjunct/quick_toolkit/widgets/OpTreeView/TreeViewModelItem.h";
include "adjunct/desktop_util/treemodel/simpletreemodel.h";

global
{
	class DummySorter : public OpTreeModel::SortListener
	{
		virtual INT32 OnCompareItems(OpTreeModel* tree_model, OpTreeModelItem* item0, OpTreeModelItem* item1)
		{
			return item0->GetID() - item1->GetID();
		}
	};
};

test("Resorting does not remove children")
{
	SimpleTreeModel simplemodel;

	SimpleTreeModelItem* parent = simplemodel.GetItemByIndex(simplemodel.AddItem(UNI_L("parent"), 0, 0, -1, 0, 1));
	SimpleTreeModelItem* child = simplemodel.GetItemByIndex(simplemodel.AddItem(UNI_L("child"), 0, 1, 0, 0, 2));

	TreeViewModel model;
	DummySorter sorter;
	model.SetSortListener(&sorter);
	model.SetModel(&simplemodel);

	verify(model.GetIndexByModelItem(parent) == 0);
	verify(model.GetIndexByModelItem(child) == 1);

	model.ResortItem(0);

	verify(model.GetIndexByModelItem(parent) == 0);
	verify(model.GetIndexByModelItem(child) == 1);
}

test("Resorting removes correct items")
{
	SimpleTreeModel simplemodel;

	SimpleTreeModelItem* item1 = simplemodel.GetItemByIndex(simplemodel.AddItem(UNI_L("item1"), 0, 1, -1, 0, 2));
	SimpleTreeModelItem* item0 = simplemodel.GetItemByIndex(simplemodel.AddItem(UNI_L("item0"), 0, 0, -1, 0, 1));

	TreeViewModel model;
	model.SetModel(&simplemodel);

	verify(model.GetIndexByModelItem(item1) == 0);
	verify(model.GetIndexByModelItem(item0) == 1);

	DummySorter sorter;
	model.SetSortListener(&sorter);

	model.ResortItem(1);

	verify(model.GetIndexByModelItem(item1) == 1);
	verify(model.GetIndexByModelItem(item0) == 0);
}

test("Resorting to last element works")
{
	SimpleTreeModel simplemodel;

	SimpleTreeModelItem* parent = simplemodel.GetItemByIndex(simplemodel.AddItem(UNI_L("parent"), 0, 1, -1, 0, 2));
	SimpleTreeModelItem* child = simplemodel.GetItemByIndex(simplemodel.AddItem(UNI_L("child"), 0, 2, 0, 0, 3));
	SimpleTreeModelItem* other = simplemodel.GetItemByIndex(simplemodel.AddItem(UNI_L("other"), 0, 0, -1, 0, 1));

	TreeViewModel model;
	model.SetModel(&simplemodel);

	verify(model.GetIndexByModelItem(parent) == 0);
	verify(model.GetIndexByModelItem(child) == 1);
	verify(model.GetIndexByModelItem(other) == 2);

	DummySorter sorter;
	model.SetSortListener(&sorter);

	model.ResortItem(0);

	verify(model.GetIndexByModelItem(other) == 0);
	verify(model.GetIndexByModelItem(parent) == 1);
	verify(model.GetIndexByModelItem(child) == 2);
}
