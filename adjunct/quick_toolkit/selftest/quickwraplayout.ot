/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.  It may not be distributed
 * under any circumstances.
 *
 * @author Alexander Remen (alexr@opera.com)
 */
 
group "quick_toolkit.quickwraplayout";
 
include "adjunct/quick_toolkit/widgets/QuickWrapLayout.h";
include "adjunct/quick_toolkit/selftest/src/ST_TestWidget.h";
 
global
{
	class RelativeWidget : public ST_TestWidget
	{
	public:
		virtual BOOL HeightDependsOnWidth() { return TRUE; }
		virtual unsigned GetDefaultMinimumHeight(unsigned width) { return width + 50; }
		virtual unsigned GetDefaultPreferredHeight(unsigned width) { return width + 250; }
	};
}

test("Width determined by combining widget widths")
{
	QuickWrapLayout layout;
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	verify(layout.GetNominalWidth() == ST_TestWidget::Margin + ST_TestWidget::NominalWidth * 2);
}

test("Height depends on width")
{
	QuickWrapLayout layout;
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	verify(layout.HeightDependsOnWidth() == TRUE);

	verify(layout.GetNominalHeight(ST_TestWidget::NominalWidth) == ST_TestWidget::Margin + ST_TestWidget::NominalHeight * 2);
	verify(layout.GetNominalHeight(ST_TestWidget::Margin + ST_TestWidget::NominalWidth * 2) == ST_TestWidget::NominalHeight);
}

test("Height with one widget per row")
{
	QuickWrapLayout layout;
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	const unsigned width = ST_TestWidget::NominalWidth;

	verify(layout.GetNominalHeight(width) == ST_TestWidget::NominalHeight * 2 + ST_TestWidget::Margin);

	layout.GetWidget(0)->Hide();
	verify(layout.GetNominalHeight(width) == ST_TestWidget::NominalHeight);
}

test("Height with one widget per row and constrained row count")
{
	QuickWrapLayout layout;
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	const unsigned width = ST_TestWidget::NominalWidth;

	verify(layout.GetNominalHeight(width) == ST_TestWidget::NominalHeight * 3 + ST_TestWidget::Margin * 2);

	layout.SetMaxVisibleLines(2);
	verify(layout.GetNominalHeight(width) == ST_TestWidget::NominalHeight * 2 + ST_TestWidget::Margin);

	layout.SetMaxVisibleLines(1);
	verify(layout.GetNominalHeight(width) == ST_TestWidget::NominalHeight);

	layout.SetMaxVisibleLines(0);
	verify(layout.GetNominalHeight(width) == ST_TestWidget::NominalHeight * 3 + ST_TestWidget::Margin * 2);
}

test("Height with two widgets per row")
{
	QuickWrapLayout layout;
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	unsigned width = ST_TestWidget::NominalWidth * 2 + ST_TestWidget::Margin;

	verify(layout.GetNominalHeight(width) == ST_TestWidget::NominalHeight);
	verify(layout.GetPreferredHeight(width) == ST_TestWidget::PreferredHeight);
}

test("Row as high as the highest widget in row")
{
	QuickWrapLayout layout;
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	layout.GetWidget(0)->SetMinimumHeight(ST_TestWidget::MinimumHeight + 5);
	layout.GetWidget(1)->SetMinimumHeight(ST_TestWidget::MinimumHeight + 10);
	layout.GetWidget(2)->SetMinimumHeight(ST_TestWidget::MinimumHeight + 15);

	verify(layout.GetMinimumHeight(ST_TestWidget::NominalWidth) == ST_TestWidget::MinimumHeight * 3 + ST_TestWidget::Margin * 2 + 30);
	verify(layout.GetMinimumHeight(ST_TestWidget::NominalWidth * 2 + ST_TestWidget::Margin) == ST_TestWidget::MinimumHeight * 2 + ST_TestWidget::Margin + 25);
	verify(layout.GetMinimumHeight(ST_TestWidget::NominalWidth * 3 + ST_TestWidget::Margin * 2) == ST_TestWidget::MinimumHeight + 15);

	layout.GetWidget(1)->Hide();
	verify(layout.GetMinimumHeight(ST_TestWidget::NominalWidth) == ST_TestWidget::MinimumHeight * 2 + ST_TestWidget::Margin + 20);

	layout.GetWidget(1)->Show();
	layout.GetWidget(2)->Hide();
	verify(layout.GetMinimumHeight(ST_TestWidget::NominalWidth) == ST_TestWidget::MinimumHeight * 2 + ST_TestWidget::Margin + 15);
}

test("Height with relative height widgets")
{
	QuickWrapLayout layout;
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(layout.InsertWidget(OP_NEW(RelativeWidget, ())));

	unsigned nominal_width = layout.GetNominalWidth();
	verify(nominal_width == ST_TestWidget::NominalWidth * 2 + ST_TestWidget::Margin);
	verify(layout.GetMinimumHeight() == ST_TestWidget::MinimumHeight);
	verify(layout.GetMinimumHeight(nominal_width + 4) == ST_TestWidget::NominalWidth + 2 + 50);
}

test("Sizes with no widgets")
{
	QuickWrapLayout layout;
	verify(layout.GetNominalWidth() == 0);
	verify(layout.GetNominalHeight() == 0);
	verify(layout.GetNominalHeight(12) == 0);
}

test("Sizes with greedy widgets")
{
	QuickWrapLayout layout;
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(layout.InsertWidget(OP_NEW(RelativeWidget, ())));

	layout.GetWidget(1)->SetPreferredWidth(WidgetSizes::Fill);

	verify(layout.GetMinimumWidth() == ST_TestWidget::MinimumWidth);
	verify(layout.GetNominalWidth() == ST_TestWidget::NominalWidth * 2 + ST_TestWidget::Margin);
	verify(layout.GetPreferredWidth() == WidgetSizes::Fill);

	verify(layout.GetMinimumHeight() == ST_TestWidget::MinimumHeight);
	verify(layout.GetNominalHeight() == ST_TestWidget::NominalHeight);
	verify(layout.GetPreferredHeight() == ST_TestWidget::PreferredHeight);

	unsigned width = ST_TestWidget::PreferredWidth * 2 + ST_TestWidget::Margin + 4;
	verify(layout.GetPreferredHeight(width) == ST_TestWidget::PreferredWidth + 4 + 250);
}

test("Empty layout")
{
	QuickWrapLayout layout;

	const OpRect rect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight);
	verify_success(layout.Layout(rect));

	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	layout.GetWidget(0)->Hide();
	verify_success(layout.Layout(rect));
}

test("Layout with one widget per row")
{
	QuickWrapLayout layout;
	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(layout.InsertWidget(widget1));
	verify_success(layout.InsertWidget(widget2));

	const OpRect rect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight * 2 + ST_TestWidget::Margin);
	verify_success(layout.Layout(rect));

	verify(widget1->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight)));
	verify(widget2->m_layout_rect.Equals(OpRect(0, ST_TestWidget::NominalHeight + ST_TestWidget::Margin, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight)));

	widget1->Hide();
	verify_success(layout.Layout(rect));
	verify(widget2->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight)));
}

test("Layout with one widget per row and constrained row count")
{
	OpWidget* parent = OP_NEW(OpWidget, ());

	QuickWrapLayout layout;
	layout.SetParentOpWidget(parent);
	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(layout.InsertWidget(widget1));
	verify_success(layout.InsertWidget(widget2));

	const OpRect rect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight * 2 + ST_TestWidget::Margin);
	verify_success(layout.Layout(rect));

	verify(widget1->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight)));
	verify(widget2->m_layout_rect.Equals(OpRect(0, ST_TestWidget::NominalHeight + ST_TestWidget::Margin, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight)));
	verify(widget1->m_parent_op_widget == parent);
	verify(widget2->m_parent_op_widget == parent);
	verify(!layout.HasHiddenItems());

	layout.SetMaxVisibleLines(1);
	verify_success(layout.Layout(rect));
	verify(widget1->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight)));
	verify(widget1->m_parent_op_widget == parent);
	verify(widget2->m_parent_op_widget == NULL);
	verify(layout.HasHiddenItems());
}
finally
{
	if (parent != NULL)
		parent->Delete();
}

test("Layout with two widgets per row")
{
	QuickWrapLayout layout;
	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(layout.InsertWidget(widget1));
	verify_success(layout.InsertWidget(widget2));

	const OpRect rect(0, 0, ST_TestWidget::NominalWidth * 2 + ST_TestWidget::Margin, ST_TestWidget::NominalHeight);
	verify_success(layout.Layout(rect));

	verify(widget1->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight)));
	verify(widget2->m_layout_rect.Equals(OpRect(ST_TestWidget::NominalWidth + ST_TestWidget::Margin, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight)));

	widget2->Hide();
	verify_success(layout.Layout(rect));
	// Layout rect has room for the one widget's preferred width, so the widget
	// gets it.
	verify(widget1->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::PreferredWidth, ST_TestWidget::NominalHeight)));
}

test("Layout with three widgets per row, middle widget hidden")
{
	QuickWrapLayout layout;
	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	ST_TestWidget* widget3 = OP_NEW(ST_TestWidget, ());
	verify_success(layout.InsertWidget(widget1));
	verify_success(layout.InsertWidget(widget2));
	verify_success(layout.InsertWidget(widget3));
	widget2->Hide();

	const OpRect rect(0, 0, ST_TestWidget::NominalWidth * 2 + ST_TestWidget::Margin, ST_TestWidget::NominalHeight);
	verify_success(layout.Layout(rect));

	verify(widget1->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight)));
	verify(widget3->m_layout_rect.Equals(OpRect(ST_TestWidget::NominalWidth + ST_TestWidget::Margin, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight)));
}

test("Layout with room for one and a half widget per row")
{
	QuickWrapLayout layout;
	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(layout.InsertWidget(widget1));
	verify_success(layout.InsertWidget(widget2));

	const OpRect rect(0, 0, ST_TestWidget::NominalWidth * 1.5, ST_TestWidget::NominalHeight * 2 + ST_TestWidget::Margin);
	verify_success(layout.Layout(rect));

	// It's one widget per row, and a row has room for more than what is the
	// one widget's nominal width, so the widget gets all the width there is.
	verify(widget1->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::NominalWidth * 1.5, ST_TestWidget::NominalHeight)));
	verify(widget2->m_layout_rect.Equals(OpRect(0, ST_TestWidget::NominalHeight + ST_TestWidget::Margin, ST_TestWidget::NominalWidth * 1.5, ST_TestWidget::NominalHeight)));
}

test("Layout with one widget per row, different widget sizes")
{
	QuickWrapLayout layout;
	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(layout.InsertWidget(widget1));
	verify_success(layout.InsertWidget(widget2));

	widget1->SetNominalWidth(ST_TestWidget::MinimumWidth);
	widget1->SetNominalHeight(ST_TestWidget::MinimumHeight);

	widget2->SetPreferredWidth(ST_TestWidget::NominalWidth);
	widget2->SetPreferredHeight(ST_TestWidget::NominalHeight);

	const OpRect rect(0, 0, ST_TestWidget::NominalWidth, layout.GetNominalHeight(ST_TestWidget::NominalWidth));
	verify_success(layout.Layout(rect));

	verify(widget1->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::MinimumHeight)));
	verify(widget2->m_layout_rect.Equals(OpRect(0, ST_TestWidget::MinimumHeight + ST_TestWidget::Margin, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight)));

	widget1->Hide();
	verify_success(layout.Layout(rect));
	verify(widget2->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight)));
}

test("Layout with two widgets per row, different widget sizes")
{
	QuickWrapLayout layout;
	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(layout.InsertWidget(widget1));
	verify_success(layout.InsertWidget(widget2));

	widget1->SetNominalWidth(ST_TestWidget::MinimumWidth);
	widget1->SetNominalHeight(ST_TestWidget::MinimumHeight);

	widget2->SetPreferredWidth(ST_TestWidget::NominalWidth);
	widget2->SetPreferredHeight(ST_TestWidget::NominalHeight);

	const unsigned width = ST_TestWidget::MinimumWidth + ST_TestWidget::Margin + ST_TestWidget::NominalWidth;
	const OpRect rect(0, 0, width, layout.GetNominalHeight(width));
	verify_success(layout.Layout(rect));

	const OpRect rect1(0, 0, (width - ST_TestWidget::Margin) / 2, ST_TestWidget::NominalHeight);
	verify(widget1->m_layout_rect.Equals(rect1));
	verify(widget2->m_layout_rect.Equals(OpRect(rect1.Right() + ST_TestWidget::Margin, 0, rect1.width, ST_TestWidget::NominalHeight)));

	widget1->Hide();
	verify_success(layout.Layout(rect));
	verify(widget2->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight)));
}
