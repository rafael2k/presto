/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick_toolkit.quickflowlayout";

include "modules/scope/scope_module.h";
include "modules/scope/src/scope_manager.h";
include "adjunct/quick_toolkit/widgets/QuickFlowLayout.h";
include "adjunct/quick_toolkit/selftest/src/ST_TestWidget.h";
include "adjunct/desktop_scope/src/scope_desktop_window_manager.h";

global
{
	class MockOpWidget : public OpWidget
	{
	};
}

test("Sizes with no widgets")
{
	QuickFlowLayout layout;
	verify(layout.GetMinimumWidth() == 0);
	verify(layout.GetMinimumHeight() == 0);
	verify(layout.GetPreferredWidth() == 0);
	verify(layout.GetPreferredHeight() == 0);

	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	layout.GetWidget(0)->Hide();
	verify(layout.GetMinimumWidth() == 0);
	verify(layout.GetMinimumHeight() == 0);
	verify(layout.GetPreferredWidth() == 0);
	verify(layout.GetPreferredHeight() == 0);
}

test("Width determined by widest widget")
{
	QuickFlowLayout layout;
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	layout.GetWidget(0)->SetMinimumWidth(ST_TestWidget::MinimumWidth / 2);
	verify(layout.GetMinimumWidth() == ST_TestWidget::MinimumWidth);
	verify(layout.GetPreferredWidth() == ST_TestWidget::PreferredWidth * 2 + ST_TestWidget::Margin);

	layout.GetWidget(1)->Hide();
	verify(layout.GetMinimumWidth() == ST_TestWidget::MinimumWidth / 2);
};

test("Height with one widget per row")
{
	QuickFlowLayout layout;
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	unsigned width = ST_TestWidget::MinimumWidth;

	verify(layout.GetMinimumHeight(width) == ST_TestWidget::MinimumHeight * 2 + ST_TestWidget::Margin);
	verify(layout.GetPreferredHeight(width) == ST_TestWidget::PreferredHeight * 2 + ST_TestWidget::Margin);

	layout.GetWidget(0)->Hide();
	verify(layout.GetMinimumHeight(width) == ST_TestWidget::MinimumHeight);
	verify(layout.GetPreferredHeight(width) == ST_TestWidget::PreferredHeight);
}

test("Height with two widgets per row")
{
	QuickFlowLayout layout;
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	unsigned width = ST_TestWidget::MinimumWidth * 2 + ST_TestWidget::Margin;

	verify(layout.GetMinimumHeight(width) == ST_TestWidget::MinimumHeight);
	verify(layout.GetPreferredHeight(width) == ST_TestWidget::PreferredHeight);
}

test("Empty layout")
{
	QuickFlowLayout layout;

	const OpRect rect(0, 0, ST_TestWidget::MinimumWidth, ST_TestWidget::MinimumHeight);
	verify_success(layout.Layout(rect));

	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	layout.GetWidget(0)->Hide();
	verify_success(layout.Layout(rect));
}

test("Layout with one widget per row")
{
	QuickFlowLayout layout;
	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(layout.InsertWidget(widget1));
	verify_success(layout.InsertWidget(widget2));

	const OpRect rect(0, 0, ST_TestWidget::MinimumWidth, ST_TestWidget::MinimumHeight * 2 + ST_TestWidget::Margin);
	verify_success(layout.Layout(rect));

	verify(widget1->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::MinimumWidth, ST_TestWidget::MinimumHeight)));

	verify(widget2->m_layout_rect.Equals(OpRect(0, ST_TestWidget::MinimumHeight + ST_TestWidget::Margin, ST_TestWidget::MinimumWidth, ST_TestWidget::MinimumHeight)));

	widget1->Hide();
	verify_success(layout.Layout(rect));
	verify(widget2->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::MinimumWidth, ST_TestWidget::MinimumHeight * 2 + ST_TestWidget::Margin)));
}

test("Layout with two widgets per row")
{
	QuickFlowLayout layout;
	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(layout.InsertWidget(widget1));
	verify_success(layout.InsertWidget(widget2));

	OpRect rect(0, 0, ST_TestWidget::MinimumWidth * 2 + ST_TestWidget::Margin, ST_TestWidget::MinimumHeight);
	verify_success(layout.Layout(rect));

	verify(widget1->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::MinimumWidth, ST_TestWidget::MinimumHeight)));

	verify(widget2->m_layout_rect.Equals(OpRect(ST_TestWidget::MinimumWidth + ST_TestWidget::Margin, 0, ST_TestWidget::MinimumWidth, ST_TestWidget::MinimumHeight)));

	widget1->Hide();
	verify_success(layout.Layout(rect));
	verify(widget2->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::MinimumWidth * 2 + ST_TestWidget::Margin, ST_TestWidget::MinimumHeight)));
}

test("Layout with room for one and a half widget per row")
{
	QuickFlowLayout layout;
	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(layout.InsertWidget(widget1));
	verify_success(layout.InsertWidget(widget2));

	OpRect rect(0, 0, ST_TestWidget::MinimumWidth * 1.5, ST_TestWidget::MinimumHeight * 2 + ST_TestWidget::Margin);
	verify_success(layout.Layout(rect));

	verify(widget1->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::MinimumWidth * 1.5, ST_TestWidget::MinimumHeight)));

	verify(widget2->m_layout_rect.Equals(OpRect(0, ST_TestWidget::MinimumHeight + ST_TestWidget::Margin, ST_TestWidget::MinimumWidth * 1.5, ST_TestWidget::MinimumHeight)));
}

test("Setting minimum break affects widths")
{
	QuickFlowLayout layout;

	layout.SetMinBreak(2);
	for (int i = 0; i < 4; i++)
		verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	verify(layout.GetMinimumWidth() == ST_TestWidget::MinimumWidth * 2 + ST_TestWidget::Margin);
	verify(layout.GetNominalWidth() == ST_TestWidget::NominalWidth * 2 + ST_TestWidget::Margin);
	verify(layout.GetPreferredWidth() == ST_TestWidget::PreferredWidth * 4 + ST_TestWidget::Margin * 3);
}

test("Setting maximum break affects widths")
{
	QuickFlowLayout layout;

	layout.SetMaxBreak(2);
	for (int i = 0; i < 4; i++)
		verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	verify(layout.GetMinimumWidth() == ST_TestWidget::MinimumWidth);
	verify(layout.GetNominalWidth() == ST_TestWidget::NominalWidth * 2 + ST_TestWidget::Margin);
	verify(layout.GetPreferredWidth() == ST_TestWidget::PreferredWidth * 2 + ST_TestWidget::Margin);
}

test("Setting minimum break respects number of elements when calculating width")
{
	QuickFlowLayout layout;

	layout.SetMinBreak(3);
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	verify(layout.GetMinimumWidth() == ST_TestWidget::MinimumWidth * 2 + ST_TestWidget::Margin);
	verify(layout.GetNominalWidth() == ST_TestWidget::NominalWidth * 2 + ST_TestWidget::Margin);
	verify(layout.GetPreferredWidth() == ST_TestWidget::PreferredWidth * 2 + ST_TestWidget::Margin);
}

test("Setting maximum break respects number of elements when calculating width")
{
	QuickFlowLayout layout;

	layout.SetMaxBreak(3);
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	verify(layout.GetMinimumWidth() == ST_TestWidget::MinimumWidth);
	verify(layout.GetNominalWidth() == ST_TestWidget::NominalWidth * 2 + ST_TestWidget::Margin);
	verify(layout.GetPreferredWidth() == ST_TestWidget::PreferredWidth * 2 + ST_TestWidget::Margin);
}

test("Setting maximum break affects height when contents fit in width")
{
	QuickFlowLayout layout;

	layout.SetMaxBreak(2);
	for (int i = 0; i < 3; i++)
		verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	const unsigned width = ST_TestWidget::MinimumWidth * 3 + ST_TestWidget::Margin * 2;
	verify(layout.GetMinimumHeight(width) == 2 * ST_TestWidget::MinimumHeight + ST_TestWidget::Margin);
	verify(layout.GetPreferredHeight(width) == 2 * ST_TestWidget::PreferredHeight + ST_TestWidget::Margin);

	layout.GetWidget(1)->Hide();
	verify(layout.GetMinimumHeight(width) == ST_TestWidget::MinimumHeight);
	verify(layout.GetPreferredHeight(width) == ST_TestWidget::PreferredHeight);

	layout.GetWidget(1)->Show();
	verify(layout.GetMinimumHeight(width) == 2 * ST_TestWidget::MinimumHeight + ST_TestWidget::Margin);
	verify(layout.GetPreferredHeight(width) == 2 * ST_TestWidget::PreferredHeight + ST_TestWidget::Margin);
}

test("Minimum break affects layout")
{
	QuickFlowLayout layout;
	
	layout.SetMinBreak(2);
	const size_t NumWidgets = 4;
	ST_TestWidget* widgets[NumWidgets];

	for (size_t i = 0; i < NumWidgets; i++)
	{
		widgets[i] = OP_NEW(ST_TestWidget, ());
		verify_success(layout.InsertWidget(widgets[i]));
	}

	const unsigned width = ST_TestWidget::MinimumWidth;
	verify_success(layout.Layout(OpRect(0, 0, width, layout.GetMinimumHeight(width))));

	const unsigned widgetwidth = ST_TestWidget::MinimumWidth;
	const unsigned widgetheight = ST_TestWidget::MinimumHeight;
	verify(widgets[0]->m_layout_rect.Equals(OpRect(0, 0, widgetwidth, widgetheight)));

	verify(widgets[1]->m_layout_rect.Equals(OpRect(widgetwidth + ST_TestWidget::Margin, 0, widgetwidth, widgetheight)));
	verify(widgets[2]->m_layout_rect.Equals(OpRect(0, widgetheight + ST_TestWidget::Margin, widgetwidth, widgetheight)));
	verify(widgets[3]->m_layout_rect.Equals(OpRect(widgetwidth + ST_TestWidget::Margin, widgetheight + ST_TestWidget::Margin, widgetwidth, widgetheight)));
}

test("Maximum break affects layout")
{
	QuickFlowLayout layout;
	
	layout.SetMaxBreak(2);
	const size_t NumWidgets = 4;
	ST_TestWidget* widgets[NumWidgets];

	for (size_t i = 0; i < NumWidgets; i++)
	{
		widgets[i] = OP_NEW(ST_TestWidget, ());
		verify_success(layout.InsertWidget(widgets[i]));
	}

	const unsigned width = ST_TestWidget::MinimumWidth * 3 + ST_TestWidget::Margin * 2;
	verify_success(layout.Layout(OpRect(0, 0, width, layout.GetMinimumHeight(width))));

	const unsigned widgetwidth = (width - ST_TestWidget::Margin) / 2;
	const unsigned widgetheight = ST_TestWidget::MinimumHeight;
	verify(widgets[0]->m_layout_rect.Equals(OpRect(0, 0, widgetwidth, widgetheight)));
	
	verify(widgets[1]->m_layout_rect.Equals(OpRect(widgetwidth + ST_TestWidget::Margin, 0, widgetwidth, widgetheight)));
	verify(widgets[2]->m_layout_rect.Equals(OpRect(0, widgetheight + ST_TestWidget::Margin, widgetwidth, widgetheight)));
	verify(widgets[3]->m_layout_rect.Equals(OpRect(widgetwidth + ST_TestWidget::Margin, widgetheight + ST_TestWidget::Margin, widgetwidth, widgetheight)));
}

test("Can fit to width")
{
	QuickFlowLayout layout;

	for (int i = 0; i < 3; i++)
		verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	layout.FitToWidth(ST_TestWidget::PreferredWidth);
	verify(layout.GetPreferredWidth() == ST_TestWidget::PreferredWidth);

	layout.FitToWidth(ST_TestWidget::PreferredWidth * 1.2);
	verify(layout.GetPreferredWidth() == ST_TestWidget::PreferredWidth);

	layout.FitToWidth(ST_TestWidget::PreferredWidth * 2 + ST_TestWidget::Margin);
	verify(layout.GetPreferredWidth() == ST_TestWidget::PreferredWidth * 2 + ST_TestWidget::Margin);

	layout.FitToWidth(ST_TestWidget::PreferredWidth * 2.8);
	verify(layout.GetPreferredWidth() == ST_TestWidget::PreferredWidth * 2 + ST_TestWidget::Margin);
}

test("Can fit to width when empty")
{
	QuickFlowLayout layout;

	layout.FitToWidth(ST_TestWidget::PreferredWidth);
	verify(layout.GetPreferredWidth() == 0);
	verify(layout.GetPreferredHeight() == 0);
}

test("Fit to rect chooses maximum sizes when possible")
{
    QuickFlowLayout layout;
    OpRect rect;
    
    for (int i = 0; i < 4; i++)
    {
        verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
    }
    QuickWidget* test_widget = layout.GetWidget(0);

    // Check if when there is a lot of space maximum sizes are used
    // This test also checks if algorithm fit-to-rect sets fixed sizes for widgets
    rect.width = 2 * ST_TestWidget::PreferredWidth + ST_TestWidget::Margin;
    rect.height = 2 * ST_TestWidget::PreferredHeight + ST_TestWidget::Margin;
    layout.FitToRect(rect);
    verify(test_widget->GetPreferredWidth() == test_widget->GetMinimumWidth());
    verify(test_widget->GetPreferredHeight() == test_widget->GetMinimumHeight());
    verify(test_widget->GetPreferredWidth() == ST_TestWidget::PreferredWidth);
    verify(test_widget->GetPreferredHeight() == ST_TestWidget::PreferredHeight);
}

test("Fit to rect respects hard break")
{
    QuickFlowLayout layout;
    OpRect rect;
    
    for (int i = 0; i < 4; i++)
    {
        verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
    }

    QuickWidget* test_widget = layout.GetWidget(0);
 
    // Check if hard break is respected.
    // This test also checks if when there isn't enough space for widgets minimum sizes are used.

    // Set rect's dimensions large enough to fit all widgets (if there would be no break)
    // to make sure that hard break is respected. We must also assure that two cells will
    // not fit rect vertically and that rect's height is bigger then cell's minimum height 
    rect.width = 4 * ST_TestWidget::PreferredWidth + 3 * ST_TestWidget::Margin;
    rect.height = 2 * ST_TestWidget::MinimumHeight - 1;
    layout.SetHardBreak(2);
    layout.FitToRect(rect);
    verify(test_widget->GetPreferredWidth() == ST_TestWidget::MinimumWidth);
    verify(test_widget->GetPreferredHeight() == ST_TestWidget::MinimumHeight);
}

test("Fit to rect chooses maximum possible width")
{
    QuickFlowLayout layout;
    OpRect rect;
    
    for (int i = 0; i < 4; i++)
    {
        verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
    }

    QuickWidget* test_widget = layout.GetWidget(0);
 
    // Check if algorithm choose maximum possible width for the cells
    // This test also checks if when we have to fitting dimensions
    // the one with bigger width is choosen
    rect.width = (ST_TestWidget::PreferredWidth + ST_TestWidget::MinimumWidth) * 0.5;
    rect.height = 4 * ST_TestWidget::PreferredHeight + 3 * ST_TestWidget::Margin;
    layout.FitToRect(rect);
    verify(test_widget->GetPreferredWidth() == (unsigned)rect.width);
}

test("Fit to rect does not exceed the rect when there is no need")
{
    QuickFlowLayout layout;
    OpRect rect;
    
    for (int i = 0; i < 4; i++)
    {
        verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
    }

    QuickWidget* test_widget = layout.GetWidget(0);
 
    // Check if all widgets fit the rect when there is enough space for them
    rect.width = 2 * ST_TestWidget::MinimumWidth + ST_TestWidget::Margin;
    rect.height = 2 * ST_TestWidget::MinimumHeight + ST_TestWidget::Margin;
    layout.FitToRect(rect);
    verify(2 * test_widget->GetPreferredWidth() + ST_TestWidget::Margin <= (unsigned)rect.width);
    verify(2 * test_widget->GetPreferredHeight() + ST_TestWidget::Margin <= (unsigned)rect.height);
}

test("Fit to rect respects fixed paddings")
{
    QuickFlowLayout layout;
    OpRect rect;
    
    for (int i = 0; i < 4; i++)
    {
        verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));
    }

    QuickWidget* test_widget = layout.GetWidget(0);
 
    // Check if algorithm fit-to-rect respects fixed paddings
    rect.width = 4 * (ST_TestWidget::PreferredWidth + ST_TestWidget::FixedPadding) + 3 * ST_TestWidget::Margin;
    rect.height = ST_TestWidget::PreferredHeight + ST_TestWidget::FixedPadding;
    layout.SetFixedPadding(ST_TestWidget::FixedPadding, ST_TestWidget::FixedPadding);
    layout.FitToRect(rect);
    verify(test_widget->GetPreferredWidth() == ST_TestWidget::PreferredWidth + ST_TestWidget::FixedPadding);
    verify(test_widget->GetPreferredHeight() == ST_TestWidget::PreferredHeight + ST_TestWidget::FixedPadding);
}

test("Can fit to rect when empty")
{
    QuickFlowLayout layout;
	layout.FitToRect(OpRect(0, 0, 12, 12));

	verify(layout.GetPreferredWidth() == 0);
	verify(layout.GetPreferredHeight() == 0);
}

test("Hard break ignored as it should be when empty")
{
    QuickFlowLayout layout;
	layout.SetHardBreak(5);
	layout.FitToRect(OpRect(0, 0, 12, 12));

	verify(layout.GetPreferredWidth() == 0);
	verify(layout.GetPreferredHeight() == 0);
}

test("Can keep ratio")
{
	QuickFlowLayout layout;

	layout.SetMaxBreak(2);
	layout.KeepRatio(true);

	for (size_t i = 0; i < 4; i++)
		verify_success(layout.InsertWidget(OP_NEW(ST_TestWidget, ())));

	const unsigned width = layout.GetNominalWidth() + 50 * 2;
	const unsigned cell_height = (ST_TestWidget::NominalHeight * (ST_TestWidget::NominalWidth + 50)) / ST_TestWidget::NominalWidth;

	verify(layout.GetNominalHeight(width) == cell_height * 2 + ST_TestWidget::Margin);
}

test("Find widget in layout")
{
	QuickFlowLayout layout;

	QuickWidget* widgets[3] = {NULL};
	for (int i = 0; i < 3; i++)
	{
		widgets[i] = OP_NEW(ST_TestWidget, ());
		verify_success(layout.InsertWidget(widgets[i]));
	}

	for (int i = 0; i < 3; i++)
		verify(layout.FindWidget(widgets[i]) == i);
}

test("Builds flow-layout for test environment")
{
	MockOpWidget parent;
	QuickFlowLayout flow_layout;
	verify_success(flow_layout.Init(QuickFlowLayout::FORCE_TESTABLE));
	flow_layout.SetParentOpWidget(&parent);

	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	verify_success(flow_layout.InsertWidget(widget1));

	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(flow_layout.InsertWidget(widget2));

	OpWidget* flow_layout_widget = parent.GetFirstChild();
	verify(flow_layout_widget);
	verify(flow_layout_widget->GetType() == OpTypedObject::WIDGET_TYPE_FLOW_LAYOUT);

	OpWidget* cell_widget_1 = flow_layout_widget->GetFirstChild();
	verify(cell_widget_1);
	verify(cell_widget_1->GetType() == OpTypedObject::WIDGET_TYPE_FLOW_LAYOUT_ITEM);
	verify(widget1->m_parent_op_widget == cell_widget_1);

	OpWidget* cell_widget_2 = cell_widget_1->GetNextSibling();
	verify(cell_widget_2);
	verify(cell_widget_2->GetType() == OpTypedObject::WIDGET_TYPE_FLOW_LAYOUT_ITEM);
	verify(widget2->m_parent_op_widget == cell_widget_2);
}

test("Removes test widget from flow-layout")
	require success "Builds flow-layout for test environment";
{
	MockOpWidget parent;
	QuickFlowLayout flow_layout;
	verify_success(flow_layout.Init(QuickFlowLayout::FORCE_TESTABLE));
	flow_layout.SetParentOpWidget(&parent);

	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	verify_success(flow_layout.InsertWidget(widget1));

	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(flow_layout.InsertWidget(widget2));

	OpWidget* flow_layout_widget = parent.GetFirstChild();
	OpWidget* cell_widget_1 = flow_layout_widget->GetFirstChild();
	OpWidget* cell_widget_2 = cell_widget_1->GetNextSibling();

	flow_layout.RemoveWidget(0);

	verify(flow_layout_widget->GetFirstChild() == cell_widget_2);
	verify(!cell_widget_2->GetPreviousSibling());
	verify(!cell_widget_2->GetNextSibling());
}

test("Removes all test widgets from flow-layout")
	require success "Builds flow-layout for test environment";
{
	MockOpWidget parent;
	QuickFlowLayout flow_layout;
	verify_success(flow_layout.Init(QuickFlowLayout::FORCE_TESTABLE));
	flow_layout.SetParentOpWidget(&parent);

	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	verify_success(flow_layout.InsertWidget(widget1));

	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(flow_layout.InsertWidget(widget2));

	flow_layout.RemoveAllWidgets();

	verify(parent.GetFirstChild()->GetFirstChild() == NULL);
}
