/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick_toolkit.gridlayouter";
require init;

include "adjunct/desktop_util/rtl/uidirection.h";
include "adjunct/quick_toolkit/widgets/QuickGrid/GridLayouter.h";
include "adjunct/quick_toolkit/widgets/QuickWidget.h";

test("one cell, fixed size")
{
	GridLayouter layouter;
	OpRect grid_rect(0, 0, 40, 40);

	verify_success(layouter.SetColumnCount(1));
	verify_success(layouter.SetRowCount(1));
	layouter.SetColumnSizes(0, 20, 20, 0);
	layouter.SetRowSizes(0, 20, 20, 0);
	layouter.SetGridLayoutRect(grid_rect);

	OpRect cell_rect = layouter.GetLayoutRectForCell(0, 0, 1, 1);

	verify(grid_rect.Contains(cell_rect));
	verify(cell_rect.width == 20);
	verify(cell_rect.height == 20);
}

test("one cell, dynamic size")
{
	GridLayouter layouter;
	OpRect grid_rect(0, 0, 40, 40);

	verify_success(layouter.SetColumnCount(1));
	verify_success(layouter.SetRowCount(1));
	layouter.SetColumnSizes(0, 20, 60, 0);
	layouter.SetRowSizes(0, 20, 60, 0);
	layouter.SetGridLayoutRect(grid_rect);

	OpRect cell_rect = layouter.GetLayoutRectForCell(0, 0, 1, 1);

	verify(grid_rect.Contains(cell_rect));
	verify(cell_rect.width == 40);
	verify(cell_rect.height == 40);
}

test("one cell, greedy size")
{
	GridLayouter layouter;
	OpRect grid_rect(0, 0, 40, 40);

	verify_success(layouter.SetColumnCount(1));
	verify_success(layouter.SetRowCount(1));
	layouter.SetColumnSizes(0, 0, WidgetSizes::Infinity, 0);
	layouter.SetRowSizes(0, 0, WidgetSizes::Infinity, 0);
	layouter.SetGridLayoutRect(grid_rect);

	OpRect cell_rect = layouter.GetLayoutRectForCell(0, 0, 1, 1);

	verify(grid_rect.Contains(cell_rect));
	verify(cell_rect.width == 40);
	verify(cell_rect.height == 40);
}

test("one cell, fill size")
{
	GridLayouter layouter;
	OpRect grid_rect(0, 0, 40, 40);

	verify_success(layouter.SetColumnCount(1));
	verify_success(layouter.SetRowCount(1));
	layouter.SetColumnSizes(0, 0, WidgetSizes::Fill, 0);
	layouter.SetRowSizes(0, 0, WidgetSizes::Fill, 0);
	layouter.SetGridLayoutRect(grid_rect);

	OpRect cell_rect = layouter.GetLayoutRectForCell(0, 0, 1, 1);

	verify(grid_rect.Contains(cell_rect));
	verify(cell_rect.width == 40);
	verify(cell_rect.height == 40);
}

test("one cell, greedy size, with colspan")
{
	GridLayouter layouter;
	OpRect grid_rect(0, 0, 40, 40);

	verify_success(layouter.SetColumnCount(2));
	verify_success(layouter.SetRowCount(1));
	layouter.SetColumnSizes(0, 0, WidgetSizes::Infinity, 0);
	layouter.SetColumnSizes(1, 10, 10, 0);
	layouter.SetRowSizes(0, 0, WidgetSizes::Infinity, 0);
	layouter.SetGridLayoutRect(grid_rect);

	OpRect cell_rect = layouter.GetLayoutRectForCell(0, 0, 2, 1);

	verify(grid_rect.Contains(cell_rect));
	verify(cell_rect.width == 40);
	verify(cell_rect.height == 40);
}

test("two cells, dynamic")
{
	GridLayouter layouter;
	OpRect grid_rect(0, 0, 100, 20);

	verify_success(layouter.SetColumnCount(2));
	verify_success(layouter.SetRowCount(1));
	layouter.SetColumnSizes(0, 21, 60, 0);
	layouter.SetColumnSizes(1, 20, 40, 0);
	layouter.SetRowSizes(0, 0, 20, 0);
	layouter.SetGridLayoutRect(grid_rect);

	OpRect cell_rect_0 = layouter.GetLayoutRectForCell(0, 0, 1, 1);

	verify(grid_rect.Contains(cell_rect_0));

	OpRect cell_rect_1 = layouter.GetLayoutRectForCell(1, 0, 1, 1);

	verify(grid_rect.Contains(cell_rect_1));

	verify(cell_rect_0.width + cell_rect_1.width == 100);
}

test("two cells, one dynamic, one fill")
{
	GridLayouter layouter;
	OpRect grid_rect(0, 0, 100, 20);

	verify_success(layouter.SetColumnCount(2));
	verify_success(layouter.SetRowCount(1));
	layouter.SetColumnSizes(0, 10, 90, 0);
	layouter.SetColumnSizes(1, 0, WidgetSizes::Fill, 0);
	layouter.SetRowSizes(0, 0, 20, 0);
	layouter.SetGridLayoutRect(grid_rect);

	OpRect cell_rect_0 = layouter.GetLayoutRectForCell(0, 0, 1, 1);
	OpRect cell_rect_1 = layouter.GetLayoutRectForCell(1, 0, 1, 1);

	verify(cell_rect_0.Equals(OpRect(0,  0, 90, 20)));
	verify(cell_rect_1.Equals(OpRect(90, 0, 10, 20)));
	verify(grid_rect.Contains(cell_rect_1));
}

test("cells with margins")
{
	GridLayouter layouter;
	OpRect grid_rect(0, 0, 100, 50);

	verify_success(layouter.SetColumnCount(2));
	verify_success(layouter.SetRowCount(2));
	layouter.SetColumnSizes(0, 45, 45, 10);
	layouter.SetColumnSizes(1, 45, 45, 0);
	layouter.SetRowSizes(0, 22, 22, 6);
	layouter.SetRowSizes(1, 22, 22, 0);
	layouter.SetGridLayoutRect(grid_rect);

	OpRect cell_rect = layouter.GetLayoutRectForCell(0, 0, 1, 1);
	verify(cell_rect.Equals(OpRect(0, 0, 45, 22)));

	cell_rect = layouter.GetLayoutRectForCell(1, 0, 1, 1);
	verify(cell_rect.Equals(OpRect(55, 0, 45, 22)));

	cell_rect = layouter.GetLayoutRectForCell(0, 1, 1, 1);
	verify(cell_rect.Equals(OpRect(0, 28, 45, 22)));

	cell_rect = layouter.GetLayoutRectForCell(1, 1, 1, 1);
	verify(cell_rect.Equals(OpRect(55, 28, 45, 22)));

	// colspan and rowspan
	cell_rect = layouter.GetLayoutRectForCell(0, 0, 2, 1);
	verify(cell_rect.Equals(OpRect(0, 0, 100, 22)));

	cell_rect = layouter.GetLayoutRectForCell(0, 0, 1, 2);
	verify(cell_rect.Equals(OpRect(0, 0, 45, 50)));
}

test("spanning cells with margins")
{
	GridLayouter layouter;
	OpRect grid_rect(0, 0, 100, 50);

	verify_success(layouter.SetColumnCount(2));
	verify_success(layouter.SetRowCount(2));
	layouter.SetColumnSizes(0, 45, 45, 10);
	layouter.SetColumnSizes(1, 45, 45, 0);
	layouter.SetRowSizes(0, 22, 22, 6);
	layouter.SetRowSizes(1, 22, 22, 0);

	layouter.SetGridLayoutRect(grid_rect);

	OpRect cell_rect = layouter.GetLayoutRectForCell(0, 0, 1, 1);
	verify(cell_rect.Equals(OpRect(0, 0, 45, 22)));

	cell_rect = layouter.GetLayoutRectForCell(1, 0, 1, 1);
	verify(cell_rect.Equals(OpRect(55, 0, 45, 22)));

	cell_rect = layouter.GetLayoutRectForCell(0, 1, 1, 1);
	verify(cell_rect.Equals(OpRect(0, 28, 45, 22)));

	cell_rect = layouter.GetLayoutRectForCell(1, 1, 1, 1);
	verify(cell_rect.Equals(OpRect(55, 28, 45, 22)));
}

test("layout in smaller than minimum size shrinks elements proportional to their minimum size")
{
	GridLayouter layouter;

	verify_success(layouter.SetColumnCount(2));
	layouter.SetColumnSizes(0, 300, 300, 0);
	layouter.SetColumnSizes(1, 100, 100, 0);

	verify_success(layouter.SetRowCount(1));
	layouter.SetRowSizes(0, 100, 100, 0);

	layouter.SetGridLayoutRect(OpRect(0, 0, 200, 100));

	OpRect layout_rect_first = layouter.GetLayoutRectForCell(0, 0, 1, 1);
	verify(layout_rect_first.Equals(OpRect(0, 0, 150, 100)));

	OpRect layout_rect_second = layouter.GetLayoutRectForCell(1, 0, 1, 1);
	verify(layout_rect_second.Equals(OpRect(150, 0, 50, 100)));
}

test("column width check: two cells, one dynamic, one fill")
{
	GridLayouter layouter;
	OpRect grid_rect(0, 0, 100, 20);

	verify_success(layouter.SetColumnCount(2));
	layouter.SetColumnSizes(0, 10, 90, 0);
	layouter.SetColumnSizes(1, 0, WidgetSizes::Fill, 0);
	layouter.SetGridLayoutWidth(100);

	verify(layouter.GetColumnWidth(0) == 90);
	verify(layouter.GetColumnWidth(1) == 10);
}

test("right to left direction - one row without any spanning with fixed sized widgets")
{
	UiDirection::Override override(UiDirection::RTL);

	GridLayouter layouter;
	OpRect grid_rect(0, 0, 70, 20);
	
	verify_success(layouter.SetRowCount(1));
	verify_success(layouter.SetColumnCount(3));
	layouter.SetGridLayoutRect(grid_rect);
	// the values below are given for normal direction, i.e left to right	
	layouter.SetRowSizes(0, 20, 20, 0);	
	layouter.SetColumnSizes(0, 22, 22, 4);
	layouter.SetColumnSizes(1, 44, 44, 0); // the last margin is always 0 from GenericGrid
	
	OpRect cell_rect = layouter.GetLayoutRectForCell(0,0,1,1);
	verify(cell_rect.width == 22);
	verify(cell_rect.x != 0);
	
	cell_rect = layouter.GetLayoutRectForCell(1,0,1,1);
	verify(cell_rect.width == 44);
	verify(cell_rect.x == 0);
}

test("pass a preferred size smaller than the minimum size")
{
	GridLayouter layouter;
	OpRect grid_rect(0, 0, 100, 20);

	verify_success(layouter.SetColumnCount(2));
	verify_success(layouter.SetRowCount(1));
	layouter.SetColumnSizes(0, 30, 10, 0);
	layouter.SetColumnSizes(1, 0, WidgetSizes::Infinity, 0);
	layouter.SetRowSizes(0, 20, 20, 0);
	layouter.SetGridLayoutRect(grid_rect);

	OpRect cell_rect = layouter.GetLayoutRectForCell(0, 0, 1, 1);
	verify(cell_rect.Equals(OpRect(0, 0, 30, 20)));

	cell_rect = layouter.GetLayoutRectForCell(1, 0, 1, 1);
	verify(cell_rect.Equals(OpRect(30, 0, 70, 20)));
}
