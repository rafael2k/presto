/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick_toolkit.quickwindow";
require init;

include "adjunct/quick_toolkit/contexts/UiContext.h";
include "adjunct/quick_toolkit/widgets/QuickWindow.h";
include "adjunct/quick_toolkit/widgets/QuickWidget.h";
include "adjunct/quick_toolkit/widgets/NullWidget.h";
include "adjunct/quick_toolkit/windows/DesktopWindow.h";
include "adjunct/desktop_util/selftest_utils/ST_Timer.h";
include "modules/widgets/OpWidget.h";
include "modules/widgets/WidgetContainer.h";

global
{
	#define MIN_SIZE 664
	#define VERIFY_SUCCESS(x) do { if (OpStatus::IsError(x)) ST_failed(#x); } while(0)

	class PassOnPaintOpWidget : public OpWidget
	{
	public:
		virtual void OnPaint(OpWidgetPainter* widget_painter, const OpRect &paint_rect) { ST_passed(); }
	};

	template<class T>
	class OpWidgetWrapper : public QuickWidget
	{
	public:
		OpWidgetWrapper() : m_op_widget(OP_NEW(T, ())) {}
		virtual unsigned GetDefaultMinimumWidth() { return MIN_SIZE; }
		virtual unsigned GetDefaultMinimumHeight(unsigned width) { return MIN_SIZE; }
		virtual unsigned GetDefaultNominalWidth() { return MIN_SIZE; }
		virtual unsigned GetDefaultNominalHeight(unsigned width) { return MIN_SIZE; }
		virtual unsigned GetDefaultPreferredWidth() { return MIN_SIZE; }
		virtual unsigned GetDefaultPreferredHeight(unsigned width) { return MIN_SIZE; }
		virtual void GetDefaultMargins(WidgetSizes::Margins& margins) {}
		virtual void SetParentOpWidget(class OpWidget* parent) { parent->AddChild(m_op_widget); }
		virtual BOOL HeightDependsOnWidth() { return FALSE; }
		virtual OP_STATUS Layout(const OpRect& rect) { m_op_widget->SetRect(rect); return OpStatus::OK; }
		virtual void Show() {}
		virtual void Hide() {}
		virtual BOOL IsVisible() { return FALSE; }
		virtual void SetEnabled(BOOL enabled) { }
		virtual TypeId GetType() const { return GetTypeId(this); }

	private:
		OpWidget* m_op_widget;
	};

	class MockWidget : public NullWidget
	{
	public:
		MockWidget() : m_pass_on_layout(FALSE) {}
		virtual OP_STATUS Layout(const OpRect& rect) { if (m_pass_on_layout) ST_passed(); return OpStatus::OK; }
		QuickWidgetContainer* GetContainer() const { return NullWidget::GetContainer(); }

		BOOL m_pass_on_layout;
	};

	class WindowSizeVerifierWidget
			: public NullWidget, public DesktopWindowListener
	{
	public:
		explicit WindowSizeVerifierWidget(DesktopWindow& window) : m_window(&window)
			{ window.AddListener(this); }
		virtual ~WindowSizeVerifierWidget()
			{ m_window->RemoveListener(this); }

		virtual void OnDesktopWindowResized(DesktopWindow* desktop_window,
				INT32 width, INT32 height)
		{
			unsigned exp_width = GetMinimumWidth() + GetHorizontalPadding();
			unsigned exp_height = GetMinimumHeight() + GetVerticalPadding();
			if (unsigned(width) == exp_width && unsigned(height) == exp_height)
				ST_passed();
		}
	private:
		OpWidget* GetRoot()
			{ return m_window->GetWidgetContainer()->GetRoot(); }
		unsigned GetHorizontalPadding()
			{ return GetRoot()->GetPaddingLeft() + GetRoot()->GetPaddingRight(); }
		unsigned GetVerticalPadding()
			{ return GetRoot()->GetPaddingTop() + GetRoot()->GetPaddingBottom(); }

		DesktopWindow* m_window;
	};

	class OnUiClosingVerifierContext : public UiContext
	{
	public:
		virtual void OnUiClosing()  { ST_passed(); }
	};

	void NewWindow()
	{
		window.reset(OP_NEW(QuickWindow, (OpWindow::STYLE_MODELESS_DIALOG, OpTypedObject::DIALOG_TYPE)));
		VERIFY_SUCCESS(window->Init());
	}

	ST_Timer test_timer;
	OpAutoPtr<QuickWindow> window;
	OnUiClosingVerifierContext context;
	QuickWidget* content;
}

test("show a window") async;
{
	NewWindow();

	QuickWidget* widget_pass_on_paint = OP_NEW(OpWidgetWrapper<PassOnPaintOpWidget>, ());
	window->SetContent(widget_pass_on_paint);

	window->Show();
	test_timer.FailAfter(5000);
}
test("show a window cleanup")
{
	window.reset();
	test_timer.Stop();
}

test("async layout when receiving OnContentsChanged()") async;
{
	NewWindow();

	MockWidget* widget = OP_NEW(MockWidget, ());
	window->SetContent(widget);

	VERIFY_SUCCESS(window->Show());

	window->OnContentsChanged();

	widget->m_pass_on_layout = TRUE;
	test_timer.FailAfter(5000);
}
test("async layout when receiving OnContentsChanged() cleanup")
{
	window.reset();
	test_timer.Stop();
}

test("window resizes itself on minimum content width increase setup") async;
{
	NewWindow();
	window->Show();

	content = OP_NEW(WindowSizeVerifierWidget, (*window->GetDesktopWindow()));
	content->SetMinimumWidth(200);
	content->SetMinimumHeight(100);
	window->SetContent(content);

	test_timer.PassAfter(200);
}
test("window resizes itself on minimum content width increase") async;
{
	test_timer.FailAfter(2000);
	content->SetMinimumWidth(400);
}
test("window resizes itself on minimum content width increase cleanup")
{
	window.reset();
	test_timer.Stop();
}

test("window resizes itself on minimum content height decrease setup") async;
{
	NewWindow();
	window->Show();

	content = OP_NEW(WindowSizeVerifierWidget, (*window->GetDesktopWindow()));
	content->SetMinimumWidth(100);
	content->SetMinimumHeight(400);
	window->SetContent(content);

	test_timer.PassAfter(200);
}
test("window resizes itself on minimum content height decrease") async;
{
	test_timer.FailAfter(2000);
	content->SetMinimumHeight(200);
}
test("window resizes itself on minimum content height decrease cleanup")
{
	window.reset();
	test_timer.Stop();
}

test("set container on content")
{
	QuickWindow window;
	verify(OpStatus::IsSuccess(window.Init()));

	MockWidget* widget = OP_NEW(MockWidget, ());
	window.SetContent(widget);

	verify(widget->GetContainer() == &window);
}

test("window tells its context that it's closing") async;
{
	NewWindow();
	window->SetContext(&context);
	window->Show();

	test_timer.FailAfter(2000);
	window->GetDesktopWindow()->Close();
}
test("window tells its context that it's closing cleanup")
{
	window.reset();
	test_timer.Stop();
}
