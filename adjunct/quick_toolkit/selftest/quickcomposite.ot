/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Wojciech Dzierzanowski (wdzierzanowski)
 */

group "quick_toolkit.quickcomposite";
require init;

include "adjunct/quick_toolkit/selftest/src/ST_TestController.h";
include "adjunct/quick_toolkit/widgets/QuickButton.h";
include "adjunct/quick_toolkit/widgets/QuickComposite.h";
include "adjunct/quick_toolkit/windows/DesktopWindow.h";
include "modules/widgets/WidgetContainer.h";

global
{
	OpAutoPtr<ST_TestController> controller;
}

test("QuickComposite is hovered iff itself or any of its descendants is hovered")
{
	controller.reset(OP_NEW(ST_TestController, ()));

	QuickComposite* composite = OP_NEW(QuickComposite, ());
	composite->Init();
	composite->SetSkin("Pagebar Button Skin");

	QuickButton* button = OP_NEW(QuickButton, ());
	button->Init();
	button->SetText(UNI_L("pampam"));
	// Make it unfocusable.  Focus affects the skin state of OpComposite, too.
	button->GetOpWidget()->SetTabStop(FALSE);
	composite->SetContent(button);

	verify_success(controller->Show(composite));

	const OpRect outer_rect = composite->GetOpWidget()->GetRect(TRUE);
	const OpRect inner_rect = button->GetOpWidget()->GetRect(TRUE);

	const OpWidgetImage* image = composite->GetOpWidget()->GetBorderSkin();
	OpWidget* root = controller->m_window->GetDesktopWindow()->GetWidgetContainer()->GetRoot();

	verify((image->GetState() & SKINSTATE_HOVER) == 0);

	// Hover over the skin element.
	root->GenerateOnMouseMove(OpPoint(
				(outer_rect.x + inner_rect.x) / 2,
				(outer_rect.y + inner_rect.y) / 2));
	verify((image->GetState() & SKINSTATE_HOVER) != 0);

	// Hover over the button inside.
	root->GenerateOnMouseMove(OpPoint(
				inner_rect.x + inner_rect.width / 2,
				inner_rect.y + inner_rect.height / 2));
	verify((image->GetState() & SKINSTATE_HOVER) != 0);

	// Hover over the skin element again.
	root->GenerateOnMouseMove(OpPoint(
				(outer_rect.x + inner_rect.x) / 2,
				(outer_rect.y + inner_rect.y) / 2));
	verify((image->GetState() & SKINSTATE_HOVER) != 0);

	// Leave the skin element.
	root->GenerateOnMouseMove(OpPoint(
				outer_rect.x + outer_rect.width * 2,
				outer_rect.y + outer_rect.height * 2));
	verify((image->GetState() & SKINSTATE_HOVER) == 0);
}

test("Hover skin state handling")
		manual("Is the widget surrounding the button hovered even when hovering over the button?");
		require success "QuickComposite is hovered iff itself or any of its descendants is hovered";
{
	// Reuse the previous test dialog.
}
