/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick_toolkit.uicontext";
require init;

include "adjunct/quick_toolkit/contexts/UiContext.h";

global
{
	#define HANDLED 1

	typedef UiContext IndifferentContext;

	class DisabledContext : public UiContext
	{
	public:
		virtual BOOL CanHandleAction(OpInputAction* action) { return TRUE; }
		virtual BOOL DisablesAction(OpInputAction* action) { return TRUE; }
		virtual OP_STATUS HandleAction(OpInputAction* action) { return OpStatus::OK; }
	};

	class EnabledContext : public UiContext
	{
	public:
		virtual BOOL CanHandleAction(OpInputAction* action)
			{ return action->GetAction() == OpInputAction::ACTION_OK; }

		virtual OP_STATUS HandleAction(OpInputAction* action)
		{
			if (action->GetAction() == OpInputAction::ACTION_OK)
				action->SetActionData(HANDLED);
			return OpStatus::OK;
		}
	};

	class PassOnDestroyContext : public UiContext
	{
	public:
		PassOnDestroyContext() : should_be_destroyed(FALSE) {}

		virtual ~PassOnDestroyContext() 
		{
			if (should_be_destroyed)
				ST_passed(); 
			else
				ST_failed("Destroyed before asking for destruction");
		}

		void CloseContext()
		{
			should_be_destroyed = TRUE;
			UiContext::OnUiClosing();
		}

	private:
		BOOL should_be_destroyed;
	};

	DisabledContext parent;
};

test("check action enabled")
{
	OpInputAction ok_action(OpInputAction::ACTION_OK);
	ok_action.SetEnabled(FALSE);
	OpInputAction enabled_checker(&ok_action, OpInputAction::ACTION_GET_ACTION_STATE);

	IndifferentContext indifferent_context;
	verify(!indifferent_context.OnInputAction(&enabled_checker));
	verify(!(ok_action.GetActionState() & OpInputAction::STATE_ENABLED));

	DisabledContext disabled_context;
	verify(disabled_context.OnInputAction(&enabled_checker));
	verify(!(ok_action.GetActionState() & OpInputAction::STATE_ENABLED));

	EnabledContext enabled_context;
	verify(enabled_context.OnInputAction(&enabled_checker));
	verify(ok_action.GetActionState() & OpInputAction::STATE_ENABLED);
}

test("check handle action")
{
	EnabledContext enabled_context;
	OpInputAction ok_action(OpInputAction::ACTION_OK);
	verify(ok_action.GetActionData() != HANDLED);

	verify(enabled_context.OnInputAction(&ok_action));

	verify(ok_action.GetActionData() == HANDLED);
}

test("closing a context") async;
{
	PassOnDestroyContext* child = OP_NEW(PassOnDestroyContext, ());
	parent.AddChildContext(child);

	child->CloseContext();
}
