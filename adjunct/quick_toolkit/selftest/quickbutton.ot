/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick_toolkit.quickbutton";
require init;

include "adjunct/quick_toolkit/widgets/QuickButton.h";
include "modules/widgets/OpWidget.h";
include "modules/pi/OpBitmap.h";

global
{
	const uni_char* short_text = UNI_L("Text");
	const uni_char* long_text = UNI_L("Text Text Text Text!");

	#define TEST_WIDGET_SIZE 100

	class TestQuickWidget : public QuickWidget
	{
	public:
		virtual BOOL HeightDependsOnWidth() { return FALSE; }
		virtual OP_STATUS Layout(const OpRect& rect) { return OpStatus::OK; }
		virtual void SetParentOpWidget(class OpWidget* parent) {}
		virtual void Show() {}
		virtual void Hide() {}
		virtual BOOL IsVisible() { return FALSE; }
		virtual void SetEnabled(BOOL enabled) { }
		virtual TypeId GetType() const { return GetTypeId(this); }
	protected:
		virtual unsigned GetDefaultMinimumWidth() { return TEST_WIDGET_SIZE; }
		virtual unsigned GetDefaultMinimumHeight(unsigned width) { return TEST_WIDGET_SIZE; }
		virtual unsigned GetDefaultNominalWidth() { return TEST_WIDGET_SIZE; }
		virtual unsigned GetDefaultNominalHeight(unsigned width) { return TEST_WIDGET_SIZE; }
		virtual unsigned GetDefaultPreferredWidth() { return TEST_WIDGET_SIZE; }
		virtual unsigned GetDefaultPreferredHeight(unsigned width) { return TEST_WIDGET_SIZE; }
		virtual void GetDefaultMargins(WidgetSizes::Margins& margins) {}
	};
};

test("Initial size is fixed")
{
	QuickButton button;
	verify(InitButtonWithText(button, short_text));

	verify(button.GetMinimumWidth() == button.GetPreferredWidth());
	verify(button.GetMinimumWidth() > 0);
	verify(button.GetMinimumHeight() == button.GetPreferredHeight());
	verify(button.GetMinimumHeight() > 0);
}

subtest InitButtonWithText(QuickButton& button, const OpStringC& text)
{
	verify_success(button.Init());
	verify_success(button.SetText(text.CStr()));
}

test("Size adapts to text")
{
	QuickButton short_button;
	verify(InitButtonWithText(short_button, short_text));

	QuickButton long_button;
	verify(InitButtonWithText(long_button, long_text));

	verify(short_button.GetMinimumWidth() < long_button.GetMinimumWidth());
}

test("Size adapts to image")
{
	QuickButton probe;
	probe.Init();
	const UINT32 min_size = max(probe.GetMinimumWidth(), probe.GetMinimumHeight());

	Image small_image;
	QuickButton small_button;
	verify(InitButtonWithImage(small_button, small_image, min_size + 5));

	Image big_image;
	QuickButton big_button;
	verify(InitButtonWithImage(big_button, big_image, min_size + 12));
	
	verify(small_button.GetMinimumWidth() < big_button.GetMinimumWidth());
	verify(small_button.GetMinimumHeight() < big_button.GetMinimumHeight());
}

subtest InitButtonWithImage(QuickButton& button, Image& image, UINT32 size)
{
	OpBitmap* bitmap = NULL;
	OpBitmap::Create(&bitmap, size, size);
	image = imgManager->GetImage(bitmap);

	verify_success(button.Init());
	verify_success(button.SetImage(image));
}

test("Size adapts to widget")
{
	QuickButton button;
	verify_success(button.Init());
	verify_success(button.SetContent(OP_NEW(TestQuickWidget, ())));

	verify(button.GetMinimumWidth() >= TEST_WIDGET_SIZE);
	verify(button.GetMinimumHeight() >= TEST_WIDGET_SIZE);
}

test("Layout is propagated")
{
	QuickButton button;
	verify(InitButtonWithText(button, short_text));

	QuickOpWidgetWrapper<OpWidget> root_widget;
	verify_success(root_widget.Init());

	button.SetParentOpWidget(root_widget.GetOpWidget());
	verify(root_widget.GetOpWidget()->GetFirstChild());

	OpRect rect(0, 0, 20, 20);
	verify_success(button.Layout(rect));

	verify(root_widget.GetOpWidget()->GetFirstChild()->GetRect().Equals(rect));
}
