/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick_toolkit.opbuttonstrip";
require init;

include "adjunct/quick_toolkit/widgets/OpButtonStrip.h";
include "modules/widgets/OpButton.h";

global
{
	#define BUTTON_WIDTH 100
	#define BUTTON_HEIGHT 23
	#define STRIP_WIDTH 500
};

table Buttons(int /* id */, OpInputAction::Action /* action */, const uni_char* /* text */, bool /* enabled */, bool /* visible */, bool /* default */, const char* /* default */)
{
	{ 0, OpInputAction::ACTION_OK,			UNI_L("Yes"),	true,	true,	true,   "button_OK" },
	{ 1, OpInputAction::ACTION_CANCEL,		UNI_L("Cancel"),true,	true,	false,  "button_Cancel" },
	{ 2, OpInputAction::ACTION_CANCEL,		UNI_L("No"),	true,	true,	false,  "button_Cancel" },
	{ 3, OpInputAction::ACTION_SHOW_HELP,	UNI_L("Help"),	false,	false,	false,  "button_Help" }
}

test("Properties passed on to buttons")
{
	OpButtonStrip strip(FALSE);
	SetupButtonStrip(strip);

	OpWidget* child = strip.GetFirstChild();
	iterate(id, action, text, enabled, visible, default, name) from Buttons
	{
		while (child && child->GetType() != OpTypedObject::WIDGET_TYPE_BUTTON)
			child = child->GetNextSibling();

		verify(child && child->GetType() == OpTypedObject::WIDGET_TYPE_BUTTON);
		OpButton* button = static_cast<OpButton*>(child);

		verify(button->GetAction());
		verify(button->GetAction()->GetAction() == action);

		OpString button_text;
		verify_success(button->GetText(button_text));
		verify_string(button_text, text);

		// the actions are never disabled so the buttons are supposed to be enabled
		verify((button->IsEnabled() ? true : false) == true);
		verify((button->IsVisible() ? true : false) == visible);
		verify((button->HasDefaultLook() ? true : false) == default);

		child = child->GetNextSibling();
	}
}

subtest SetupButtonStrip(OpButtonStrip& strip)
{
	verify_success(strip.SetButtonCount(4));
	strip.SetButtonSize(BUTTON_WIDTH, BUTTON_HEIGHT);
	strip.SetButtonMargins(0, 0, 0, 0);
	strip.SetButtonPadding(SKIN_DEFAULT_PADDING, SKIN_DEFAULT_PADDING, SKIN_DEFAULT_PADDING, SKIN_DEFAULT_PADDING);
	strip.SetRect(OpRect(0, 0, STRIP_WIDTH, BUTTON_HEIGHT + SKIN_DEFAULT_PADDING * 2));

	iterate(id, action, text, enabled, visible, default, name) from Buttons
	{
		verify_success(strip.SetButtonInfo(id, OP_NEW(OpInputAction, (action)), text, enabled, visible, name));
		if (default)
			strip.SetDefaultButton(id);
	}
}

test("Calculate button sizes")
{
	OpButtonStrip strip(FALSE);
	SetupButtonStrip(strip);

	int width = strip.CalculatePositions();

	verify(width == BUTTON_WIDTH * 4 + SKIN_DEFAULT_PADDING * 8);
}

test("Place buttons")
{
	OpButtonStrip strip(FALSE);
	SetupButtonStrip(strip);

	strip.CalculatePositions();
	strip.PlaceButtons();

	int pos = STRIP_WIDTH - (BUTTON_WIDTH + SKIN_DEFAULT_PADDING);
	for (OpWidget* child = strip.GetLastChild(); child; child = child->GetPreviousSibling())
	{
		while (child && child->GetType() != OpTypedObject::WIDGET_TYPE_BUTTON)
			child = child->GetPreviousSibling();
		if (!child)
			break;

		OpButton* button = static_cast<OpButton*>(child);

		OpRect rect = button->GetRect();
	
		verify(rect.x == pos);
		verify(rect.y == SKIN_DEFAULT_PADDING);
		verify(rect.width == BUTTON_WIDTH);
		verify(rect.height == BUTTON_HEIGHT);
	
		pos -= BUTTON_WIDTH + SKIN_DEFAULT_PADDING * 2;
	}
}

test("Place buttons reverse")
{
	OpButtonStrip strip(TRUE);
	verify(SetupButtonStrip(strip));

	strip.CalculatePositions();
	strip.PlaceButtons();

	int pos = STRIP_WIDTH - (BUTTON_WIDTH + SKIN_DEFAULT_PADDING);
	for (OpWidget* child = strip.GetFirstChild(); child; child = child->GetNextSibling())
	{
		while (child && child->GetType() != OpTypedObject::WIDGET_TYPE_BUTTON)
			child = child->GetNextSibling();
		if (!child)
			break;

		verify(child && child->GetType() == OpTypedObject::WIDGET_TYPE_BUTTON);
		OpButton* button = static_cast<OpButton*>(child);

		OpRect rect = button->GetRect();
	
		verify(rect.x == pos);
		verify(rect.y == SKIN_DEFAULT_PADDING);
		verify(rect.width == BUTTON_WIDTH);
		verify(rect.height == BUTTON_HEIGHT);
	
		pos -= BUTTON_WIDTH + SKIN_DEFAULT_PADDING * 2;
	}
}
