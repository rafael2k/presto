/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Wojciech Dzierzanowski (wdzierzanowski)
 */

group "quick_toolkit.quickbinder";
require init;

include "adjunct/desktop_util/adt/opproperty.h";
include "adjunct/desktop_util/adt/typedobjectcollection.h";
include "adjunct/quick/widgets/DesktopFileChooserEdit.h";
include "adjunct/quick_toolkit/bindings/DefaultQuickBinder.h";
include "adjunct/quick_toolkit/selftest/src/ST_TestController.h";
include "adjunct/quick_toolkit/widgets/QuickButton.h";
include "adjunct/quick_toolkit/widgets/QuickCheckBox.h";
include "adjunct/quick_toolkit/widgets/QuickDropDown.h";
include "adjunct/quick_toolkit/widgets/QuickEdit.h";
include "adjunct/quick_toolkit/widgets/QuickGrid/QuickGrid.h";
include "adjunct/quick_toolkit/widgets/QuickGrid/QuickStackLayout.h";
include "adjunct/quick_toolkit/widgets/QuickGroupBox.h";
include "adjunct/quick_toolkit/widgets/QuickLabel.h";
include "adjunct/quick_toolkit/widgets/QuickNumberEdit.h";
include "adjunct/quick_toolkit/widgets/QuickRadioButton.h";
include "adjunct/quick_toolkit/widgets/QuickWidgetDecls.h";

global
{
	struct Model
	{
		OpProperty<bool> m_bool;
		OpProperty<OpString> m_string;
		OpProperty<INT32> m_int;
		OpProperty<UINT32> m_uint;
	};

	class Widgets : public TypedObjectCollection
	{
	public:
		Widgets()
		{
			m_label.Init();
			m_edit.Init();
			m_number_edit.Init();

			m_drop_down.Init();
			// This simplifies testing:
			m_drop_down.GetOpWidget()->SetEditableText();
			m_drop_down.GetOpWidget()->edit->SetOnChangeOnEnter(FALSE);

			m_button.Init();
			m_check_box.Init();
			m_radio_button.Init();
			m_group_box.Init();
			m_file_chooser.Init();

			Put("label", &m_label);
			Put("edit", &m_edit);
			Put("number_edit", &m_number_edit);
			Put("drop_down", &m_drop_down);
			Put("button", &m_button);
			Put("check_box", &m_check_box);
			Put("radio_button", &m_radio_button);
			Put("group_box", &m_group_box);
			Put("file_chooser", &m_file_chooser);
		}

		OpWidget* GetOpWidget(TypedObject* widget) const
		{
			if (widget == &m_label)
				return m_label.GetOpWidget();
			else if (widget == &m_edit)
				return m_edit.GetOpWidget();
			else if (widget == &m_number_edit)
				return m_number_edit.GetOpWidget();
			else if (widget == &m_drop_down)
				return m_drop_down.GetOpWidget();
			else if (widget == &m_button)
				return m_button.GetOpWidget();
			else if (widget == &m_check_box)
				return m_check_box.GetOpWidget();
			else if (widget == &m_radio_button)
				return m_radio_button.GetOpWidget();
			else if (widget == &m_file_chooser)
				return m_file_chooser.GetOpWidget();
			return NULL;
		}

		OP_STATUS GetWidgetText(const OpStringC8& widget_name, OpString& text) const
		{
			TypedObject* widget = Get(widget_name);
			if (!widget)
				return OpStatus::ERR;

			if (widget == &m_check_box)
				return m_check_box.GetText(text);
			else if (widget == &m_radio_button)
				return m_radio_button.GetText(text);
			else if (widget == &m_group_box)
				return m_group_box.GetText(text);

			return GetOpWidget(widget)->GetText(text);
		}

		void SetWidgetText(const OpStringC8& widget_name, const OpStringC& text)
		{
			TypedObject* widget = Get(widget_name);
			if (widget == &m_edit)
				m_edit.SetText(text);
			else if (widget == &m_drop_down)
				m_drop_down.SetText(text);
		}

	private:
		QuickLabel m_label;
		QuickEdit m_edit;
		QuickNumberEdit m_number_edit;
		QuickDropDown m_drop_down;
		QuickButton m_button;
		QuickCheckBox m_check_box;
		QuickRadioButton m_radio_button;
		QuickGroupBox m_group_box;
		QuickDesktopFileChooserEdit m_file_chooser;
	};

	class Controller : public ST_TestController
	{
	public:
		Controller()
		{
			m_binder.SetWidgetCollection(&m_widgets);

			m_model.m_string.Subscribe(MAKE_DELEGATE(*this, &Controller::YouTypedSomething));
			m_model.m_bool.Subscribe(MAKE_DELEGATE(*this, &Controller::Not));
		}

		Model m_model;
		TypedObjectCollection m_widgets;

		OpProperty<bool> m_you_typed_something;
		void YouTypedSomething(const OpStringC& typed) { m_you_typed_something.Set(typed.HasContent() != FALSE); }

		OpProperty<bool> m_not_bool;
		void Not(bool b) { m_not_bool.Set(!b); }

		DefaultQuickBinder m_binder;
	};

	// This needs to outlive an async testcase.
	OpAutoPtr<Controller> g_controller;
}


subtest WidgetTextEquals(Widgets& widgets, const OpStringC8& widget_name, const OpStringC& text)
{
	OpString widget_text;
	verify_success(widgets.GetWidgetText(widget_name, widget_text));
	verify_string(text, widget_text);
}


subtest IsTextBound(const OpStringC8& widget_name, Widgets& widgets)
{
	Model model;
	model.m_string.Set(UNI_L("foo"));

	DefaultQuickBinder binder;
	binder.SetWidgetCollection(&widgets);
	verify_success(binder.Connect(widget_name, model.m_string));

	verify(WidgetTextEquals(widgets, widget_name, model.m_string.Get()));

	model.m_string.Set(UNI_L("bar"));
	verify(WidgetTextEquals(widgets, widget_name, model.m_string.Get()));

	model.m_string.Set(UNI_L("baz"));
	verify(WidgetTextEquals(widgets, widget_name, model.m_string.Get()));

	if (widgets.Get(widget_name)->IsOfType<QuickEdit>()
			|| widgets.Get(widget_name)->IsOfType<QuickDropDown>()
			|| widgets.Get(widget_name)->IsOfType<QuickDesktopFileChooserEdit>())
	{
		widgets.SetWidgetText(widget_name, UNI_L("foo"));
		verify(WidgetTextEquals(widgets, widget_name, model.m_string.Get()));

		widgets.SetWidgetText(widget_name, UNI_L("bar"));
		verify(WidgetTextEquals(widgets, widget_name, model.m_string.Get()));
	}
}

subtest IsStateBound(const OpStringC8& widget_name, const Widgets& widgets)
{
	Model model;
	model.m_bool.Set(true);

	DefaultQuickBinder binder;
	binder.SetWidgetCollection(&widgets);
	verify_success(binder.Connect(widget_name, model.m_bool));

	OpWidget* op_widget = widgets.GetOpWidget(widgets.Get(widget_name));

	verify(model.m_bool.Get() == (op_widget->GetValue() == TRUE));

	model.m_bool.Set(true);
	verify(model.m_bool.Get() == (op_widget->GetValue() == TRUE));
	model.m_bool.Set(false);
	verify(model.m_bool.Get() == (op_widget->GetValue() == TRUE));

	op_widget->SetValue(true);
	verify(model.m_bool.Get() == (op_widget->GetValue() == TRUE));
	op_widget->SetValue(false);
	verify(model.m_bool.Get() == (op_widget->GetValue() == TRUE));
}

test("Label text can be bound to a property")
{
	Widgets widgets;
	verify(IsTextBound("label", widgets));
}

test("Edit text can be bound to a property")
{
	Widgets widgets;
	verify(IsTextBound("edit", widgets));
}

test("Edit text can be bound to two things at once")
{
	Widgets widgets;

	OpProperty<OpString> a;
	a.Set(UNI_L("a"));
	OpProperty<OpString> b;
	b.Set(UNI_L("b"));

	DefaultQuickBinder binder;
	binder.SetWidgetCollection(&widgets);

	verify_success(binder.Connect("edit", a));
	verify_success(binder.Connect("edit", b));

	OpString widget_text;
	verify_success(widgets.GetWidgetText("edit", widget_text));
	verify_string(widget_text, UNI_L("b"));
	verify_string(b.Get(), UNI_L("b"));
	verify_string(a.Get(), UNI_L("b"));

	a.Set(UNI_L("a"));
	verify_success(widgets.GetWidgetText("edit", widget_text));
	verify_string(widget_text, UNI_L("a"));
	verify_string(b.Get(), UNI_L("a"));
	verify_string(a.Get(), UNI_L("a"));

	widgets.SetWidgetText("edit", UNI_L("b"));
	verify_string(b.Get(), UNI_L("b"));
	verify_string(a.Get(), UNI_L("b"));
}

subtest NumberEditValueEquals(const QuickNumberEdit& edit, UINT32 exp_value)
{
	int edit_value = -1;
	edit.GetOpWidget()->GetIntValue(edit_value);
	verify(UINT32(edit_value) == exp_value);
}

test("Number edit value can be bound to a property")
{
	Widgets widgets;
	QuickNumberEdit& edit = *widgets.Get<QuickNumberEdit>("number_edit");

	Model model;
	model.m_uint.Set(0);

	DefaultQuickBinder binder;
	binder.SetWidgetCollection(&widgets);
	verify_success(binder.Connect("number_edit", model.m_uint));
	verify(NumberEditValueEquals(edit, model.m_uint.Get()));

	model.m_uint.Set(1);
	verify(NumberEditValueEquals(edit, model.m_uint.Get()));
	model.m_uint.Set(12);
	verify(NumberEditValueEquals(edit, model.m_uint.Get()));

	edit.GetOpWidget()->SetText(UNI_L("3"));
	verify(NumberEditValueEquals(edit, model.m_uint.Get()));
	edit.GetOpWidget()->SetText(UNI_L("33"));
	verify(NumberEditValueEquals(edit, model.m_uint.Get()));
}

test("Drop down text can be bound to a property")
{
	Widgets widgets;
	verify(IsTextBound("drop_down", widgets));
}

test("Drop down selection can be bound to a property")
{
	Widgets widgets;

	DesktopOpDropDown* drop_down =
			widgets.Get<QuickDropDown>("drop_down")->GetOpWidget();
	drop_down->AddItem(OpStringC(UNI_L("drop")), -1, NULL, 0);
	drop_down->AddItem(UNI_L("me"), -1, NULL, 1);
	drop_down->AddItem(UNI_L("down"), -1, NULL, 2);
	drop_down->SelectItem(-1, TRUE);

	Model model;
	model.m_int.Set(-1);

	DefaultQuickBinder binder;
	binder.SetWidgetCollection(&widgets);
	verify_success(binder.Connect("drop_down", model.m_int));
	verify(model.m_int.Get() == drop_down->GetSelectedItem());

	model.m_int.Set(0);
	verify(model.m_int.Get() == drop_down->GetSelectedItem());
	model.m_int.Set(2);
	verify(model.m_int.Get() == drop_down->GetSelectedItem());
	model.m_int.Set(-1);
	verify(model.m_int.Get() == drop_down->GetSelectedItem());

	drop_down->SelectItemAndInvoke(0, TRUE);
	verify(model.m_int.Get() == drop_down->GetSelectedItem());
	drop_down->SelectItemAndInvoke(1, TRUE);
	verify(model.m_int.Get() == drop_down->GetSelectedItem());
	drop_down->SelectItemAndInvoke(-1, TRUE);
	verify(model.m_int.Get() == drop_down->GetSelectedItem());
}

test("Button text can be bound to a property")
{
	Widgets widgets;
	verify(IsTextBound("button", widgets));
}

test("Check box state can be bound to a property")
{
	Widgets widgets;
	verify(IsStateBound("check_box", widgets));
}

test("Check box text can be bound to a property")
{
	Widgets widgets;
	verify(IsTextBound("check_box", widgets));
}

test("Radio button state can be bound to a property")
{
	Widgets widgets;
	verify(IsStateBound("radio_button", widgets));
}

test("Radio button text can be bound to a property")
{
	Widgets widgets;
	verify(IsTextBound("radio_button", widgets));
}

test("Radio button with bound state still controls the state of its child")
{
	Widgets widgets;

	QuickLabel* label = OP_NEW(QuickLabel, ());
	label->Init();

	QuickRadioButton* radio_button =
			widgets.Get<QuickRadioButton>("radio_button");
	radio_button->SetChild(label);

	Model model;
	DefaultQuickBinder binder;
	binder.SetWidgetCollection(&widgets);
	binder.Connect("radio_button", model.m_bool);

	model.m_bool.Set(true);
	verify(label->GetOpWidget()->IsEnabled());
	model.m_bool.Set(false);
	verify(!label->GetOpWidget()->IsEnabled());
}

test("Group box text can be bound to a property")
{
	Widgets widgets;
	verify(IsTextBound("group_box", widgets));
}

test("File chooser text can be bound to a property")
{
	Widgets widgets;
	verify(IsTextBound("file_chooser", widgets));
}

test("'enabled' widget state can be bound to a property")
{
	Model model;
	model.m_bool.Set(true);

	Widgets widgets;

	DefaultQuickBinder binder;
	binder.SetWidgetCollection(&widgets);

	QuickEdit* edit = widgets.Get<QuickEdit>("edit");

	verify_success(binder.EnableIf("edit", model.m_bool));
	verify((edit->GetOpWidget()->IsEnabled() ? true : false) == model.m_bool.Get());
	model.m_bool.Set(false);
	verify((edit->GetOpWidget()->IsEnabled() ? true : false) == model.m_bool.Get());
	model.m_bool.Set(true);
	verify((edit->GetOpWidget()->IsEnabled() ? true : false) == model.m_bool.Get());
}

test("Text binding demo")
		manual "Is the non-editable text in sync with the editable text?";
{
	g_controller.reset(OP_NEW(Controller, ()));

	// This part normally automated via declarative UI.

	QuickEdit* edit = OP_NEW(QuickEdit, ());
	edit->Init();
	edit->GetOpWidget()->SetGhostText(UNI_L("Type here"));
	g_controller->m_widgets.Put("edit", edit);

	QuickLabel* label = OP_NEW(QuickLabel, ());
	label->Init();
	g_controller->m_widgets.Put("label", label);

	QuickButton* button = OP_NEW(QuickButton, ());
	button->Init();
	g_controller->m_widgets.Put("button", button);

	QuickCheckBox* cbox = OP_NEW(QuickCheckBox, ());
	cbox->Init();
	g_controller->m_widgets.Put("cbox", cbox);

	QuickRadioButton* rbutton = OP_NEW(QuickRadioButton, ());
	rbutton->Init();
	g_controller->m_widgets.Put("rbutton", rbutton);

	QuickStackLayout* stack = OP_NEW(QuickStackLayout,
				(QuickStackLayout::VERTICAL));
	stack->InsertWidget(edit);
	stack->InsertWidget(label);
	stack->InsertWidget(button);
	stack->InsertWidget(cbox);
	stack->InsertWidget(rbutton);
	QuickGrid* grid = OP_NEW(QuickGrid, ());
	grid->SetCenterVertically(FALSE);
	grid->AddRow();
	grid->InsertWidget(stack);

	// This part normally in a Controller::Init().

	g_controller->m_binder.Connect("edit", g_controller->m_model.m_string);
	g_controller->m_binder.Connect("label", g_controller->m_model.m_string);
	g_controller->m_binder.Connect("button", g_controller->m_model.m_string);
	g_controller->m_binder.Connect("cbox", g_controller->m_model.m_string);
	g_controller->m_binder.Connect("cbox", g_controller->m_you_typed_something);
	g_controller->m_binder.Connect("rbutton", g_controller->m_model.m_string);

	g_controller->Show(grid);
}

test("QuickSelectable state binding demo")
		manual "Is the check box state in sync with the top radio button state?";
{
	g_controller.reset(OP_NEW(Controller, ()));

	// This part normally automated via declarative UI.

	QuickCheckBox* cbox = OP_NEW(QuickCheckBox, ());
	cbox->Init();
	cbox->SetText(UNI_L("Click me"));
	g_controller->m_widgets.Put("cbox", cbox);

	QuickRadioButton* top_rbutton = OP_NEW(QuickRadioButton, ());
	top_rbutton->Init();
	top_rbutton->SetText(UNI_L("And me! And me!"));
	g_controller->m_widgets.Put("top_rbutton", top_rbutton);

	QuickLabel* label = OP_NEW(QuickLabel, ());
	label->Init();
	label->SetText(UNI_L("This label should change state together with its parent"));
	top_rbutton->SetChild(label);

	QuickRadioButton* bottom_rbutton = OP_NEW(QuickRadioButton, ());
	bottom_rbutton->Init();
	bottom_rbutton->SetText(
			UNI_L("I'm only here so you can deselect the button above me"));
	g_controller->m_widgets.Put("bottom_rbutton", bottom_rbutton);

	QuickGrid* grid = OP_NEW(QuickGrid, ());
	grid->SetCenterVertically(FALSE);
	grid->AddRow();
	grid->InsertWidget(cbox);
	QuickStackLayout* radio_group = OP_NEW(QuickStackLayout,
				(QuickStackLayout::VERTICAL));
	radio_group->InsertWidget(top_rbutton);
	radio_group->InsertWidget(bottom_rbutton);
	grid->InsertWidget(radio_group);

	// This part normally in a Controller::Init().

	g_controller->m_binder.Connect("cbox", g_controller->m_model.m_bool);
	g_controller->m_binder.Connect("top_rbutton", g_controller->m_model.m_bool);
	g_controller->m_binder.Connect("bottom_rbutton", g_controller->m_not_bool);

	g_controller->Show(grid);
}
