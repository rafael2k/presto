/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick_toolkit.quickwidget";
require init;

include "adjunct/quick_toolkit/widgets/QuickWidget.h";

global
{
	class TestWidget : public QuickWidget
	{
	public:
		virtual unsigned GetDefaultMinimumWidth() { return 20; }
		virtual unsigned GetDefaultMinimumHeight(unsigned width = WidgetSizes::UseDefault) { return 30; }
		virtual unsigned GetDefaultPreferredWidth() { return 40; }
		virtual unsigned GetDefaultPreferredHeight(unsigned width = WidgetSizes::UseDefault) { return 50; }
		virtual unsigned GetDefaultNominalWidth() { return 35; }
		virtual unsigned GetDefaultNominalHeight(unsigned width = WidgetSizes::UseDefault) { return 45; }
		virtual void GetDefaultMargins(WidgetSizes::Margins& margins) { margins = WidgetSizes::Margins(5); }
		virtual BOOL HeightDependsOnWidth() { return FALSE; }
		virtual OP_STATUS Layout(const OpRect& rect) { return OpStatus::OK; }
		virtual void SetParentOpWidget(class OpWidget* parent) {}
		virtual void Show() {}
		virtual void Hide() {}
		virtual BOOL IsVisible() { return FALSE; }
		virtual void SetEnabled(BOOL enabled) { }
		virtual TypeId GetType() const { return GetTypeId(this); }
	};
};

test("Default values")
{
	TestWidget widget;

	verify(widget.GetMinimumWidth() == widget.GetDefaultMinimumWidth());
	verify(widget.GetMinimumHeight() == widget.GetDefaultMinimumHeight());
	verify(widget.GetNominalWidth() == widget.GetDefaultNominalWidth());
	verify(widget.GetNominalHeight() == widget.GetDefaultNominalHeight());
	verify(widget.GetPreferredWidth() == widget.GetDefaultPreferredWidth());
	verify(widget.GetPreferredHeight() == widget.GetDefaultPreferredHeight());

	WidgetSizes::Margins margins;
	widget.GetDefaultMargins(margins);

	verify(widget.GetMargins().left == margins.left);
	verify(widget.GetMargins().top == margins.top);
	verify(widget.GetMargins().right == margins.right);
	verify(widget.GetMargins().bottom == margins.bottom);
}

test("Override minimum width")
{
	TestWidget widget;
	unsigned min_width = widget.GetPreferredWidth() + 100;

	widget.SetMinimumWidth(min_width);

	verify(widget.GetMinimumWidth() == min_width);
	verify(widget.GetPreferredWidth() >= min_width);
}

test("Override minimum height")
{
	TestWidget widget;
	unsigned min_height = widget.GetPreferredHeight() + 100;

	widget.SetMinimumHeight(min_height);

	verify(widget.GetMinimumHeight() == min_height);
	verify(widget.GetPreferredHeight() >= min_height);
}

test("Override nominal width")
{
	TestWidget widget;
	unsigned nom_width = widget.GetPreferredWidth() + 100;

	widget.SetNominalWidth(nom_width);

	verify(widget.GetNominalWidth() == nom_width);
	verify(widget.GetPreferredWidth() >= nom_width);
}

test("Override nominal height")
{
	TestWidget widget;
	unsigned nom_height = widget.GetPreferredHeight() + 100;

	widget.SetNominalHeight(nom_height);

	verify(widget.GetNominalHeight() == nom_height);
	verify(widget.GetPreferredHeight() >= nom_height);
}

test("Override preferred width")
{
	TestWidget widget;
	
	unsigned pref_width = widget.GetMinimumWidth() - 10;
	widget.SetPreferredWidth(pref_width);

	verify(widget.GetPreferredWidth() >= widget.GetMinimumWidth());

	pref_width = widget.GetPreferredWidth() + 100;
	widget.SetPreferredWidth(pref_width);

	verify(widget.GetPreferredWidth() == pref_width);
	verify(widget.GetPreferredWidth() >= widget.GetMinimumWidth());
}

test("Override preferred height")
{
	TestWidget widget;
	
	unsigned pref_height = widget.GetMinimumHeight() - 10;
	widget.SetPreferredHeight(pref_height);

	verify(widget.GetPreferredHeight() >= widget.GetMinimumHeight());

	pref_height = widget.GetPreferredHeight() + 100;
	widget.SetPreferredHeight(pref_height);

	verify(widget.GetPreferredHeight() == pref_height);
	verify(widget.GetPreferredHeight() >= widget.GetMinimumWidth());
}

test("Override margins")
{
	TestWidget widget;
	WidgetSizes::Margins margins(10);

	widget.SetMargins(margins);

	verify(widget.GetMargins().left == 10);
	verify(widget.GetMargins().right == 10);
	verify(widget.GetMargins().top == 10);
	verify(widget.GetMargins().bottom == 10);
}
