/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick_toolkit.gridcell";
require init;

include "adjunct/quick_toolkit/widgets/QuickGrid/GridCell.h";
include "adjunct/quick_toolkit/widgets/QuickGrid/QuickGrid.h";
include "adjunct/quick_toolkit/widgets/NullWidget.h";

global
{
	class MockGrid : public QuickGrid
	{
	public:
		MockGrid() : m_on_contents_changed(FALSE) {}
		virtual void OnContentsChanged() { m_on_contents_changed = TRUE; }

		BOOL m_on_contents_changed;
	};

	class MockWidget : public NullWidget
	{
	public:
		MockWidget() : m_parent_set(FALSE) {}
		virtual void SetParentOpWidget(OpWidget* parent) { m_parent_set = TRUE; }
		QuickWidgetContainer* GetContainer() const { return NullWidget::GetContainer(); }
		virtual void Show() {}
		virtual void Hide() {}
		void BroadcastContentsChanged() { QuickWidget::BroadcastContentsChanged(); }

		BOOL m_parent_set;
	};

	class InvisibleMockWidget : public MockWidget
	{
		virtual BOOL IsVisible() { return FALSE; }
	};
};

test("Set widget on cell")
{
	MockWidget *widget=OP_NEW(MockWidget,());
	GridCell cell;

	cell.SetContent(widget);

	verify(cell.GetContent() == widget);
};

test("Propage OnContentsChanged() to grid")
{
	MockGrid grid;
	GridCell cell;
	MockWidget* widget = OP_NEW(MockWidget,());
	cell.SetContent(widget);
	cell.SetContainer(&grid);

	widget->BroadcastContentsChanged();

	verify(grid.m_on_contents_changed);
}

test("Cell gets size from widget")
{
	MockWidget* widget = OP_NEW(MockWidget, ());
	widget->SetMinimumWidth(100);
	widget->SetMinimumHeight(110);
	widget->SetPreferredWidth(120);
	widget->SetPreferredHeight(130);
	widget->SetMargins(WidgetSizes::Margins(5));

	GridCell cell;
	cell.SetContent(widget);

	verify(cell.GetMinimumWidth() == 100);
	verify(cell.GetMinimumHeight() == 110);
	verify(cell.GetPreferredWidth() == 120);
	verify(cell.GetPreferredHeight() == 130);
	verify(cell.GetMargins().left == 5);
	verify(cell.GetMargins().right == 5);
	verify(cell.GetMargins().top == 5);
	verify(cell.GetMargins().bottom == 5);
}

test("Cell collapses when widget invisible")
{
	InvisibleMockWidget* widget = OP_NEW(InvisibleMockWidget, ());
	widget->SetMinimumWidth(100);
	widget->SetMinimumHeight(110);
	widget->SetPreferredWidth(120);
	widget->SetPreferredHeight(130);
	widget->SetMargins(WidgetSizes::Margins(5));

	GridCell cell;
	cell.SetContent(widget);

	verify(cell.GetMinimumWidth() == 0);
	verify(cell.GetMinimumHeight() == 0);
	verify(cell.GetPreferredWidth() == 0);
	verify(cell.GetPreferredHeight() == 0);
	verify(cell.GetMargins().left == 0);
	verify(cell.GetMargins().right == 0);
	verify(cell.GetMargins().top == 0);
	verify(cell.GetMargins().bottom == 0);
}
