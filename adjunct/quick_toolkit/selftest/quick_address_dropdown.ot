/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Patricia Aas (psmaas)
 */

group "quick_toolkit.quickaddressdropdown";

include "adjunct/quick_toolkit/widgets/QuickAddressDropDown.h";
include "adjunct/quick_toolkit/selftest/src/OpMockWindowCommander.h";

global
{
	class MockCursorListener : public OpTabCursor::Listener
	{
	public:

		MockCursorListener()
			: m_called_tab_info_changed(FALSE),
			  m_called_tab_changed(FALSE),
			  m_called_tab_loading(FALSE),
			  m_called_page_url_changed(FALSE)
		{}

		virtual void OnTabInfoChanged() { m_called_tab_info_changed = TRUE; }
		virtual void OnTabLoading() { m_called_tab_loading = TRUE; }
		virtual void OnTabChanged() { m_called_tab_changed = TRUE; }
		virtual void OnTabWindowChanging(DocumentDesktopWindow* old_target_window, DocumentDesktopWindow* new_target_window) {}
		virtual void OnTabClosing(DocumentDesktopWindow* desktop_window) {}
		virtual void OnTabURLChanged(DocumentDesktopWindow* document_window, const OpStringC & url) { m_called_page_url_changed = TRUE; }
		
		virtual void OnPageWindowChanging(OpWindowCommander* old_window_commander, OpWindowCommander* new_window_commander) {}
		virtual void OnPageClosing(OpWindowCommander* window_commander) {}
		virtual void OnPageURLChanged(OpWindowCommander* window_commander, const OpStringC & url) { m_called_page_url_changed = TRUE; }

		BOOL m_called_tab_info_changed;
		BOOL m_called_tab_changed;
		BOOL m_called_tab_loading;
		BOOL m_called_page_url_changed;
	};
};


test("Make a page cursor and add a listener to it")
{
	MockCursorListener listener;
	OpPageCursor cursor;
	verify(OpStatus::IsSuccess(cursor.AddListener(&listener)));
}

test("OnPageDocumentIconAdded should call OnTabChanged")
{
	// Make the cursor and listen to it
	MockCursorListener listener;
	OpPageCursor cursor;
	verify(OpStatus::IsSuccess(cursor.AddListener(&listener)));

	// Call and check
	OpMockWindowCommander mock_commander;
	cursor.OnPageDocumentIconAdded(&mock_commander);
	verify(listener.m_called_tab_changed);
}

test("OnPageStartLoading should call OnTabChanged")
{
	// Make the cursor and listen to it
	MockCursorListener listener;
	OpPageCursor cursor;
	verify(OpStatus::IsSuccess(cursor.AddListener(&listener)));

	// Call and check
	OpMockWindowCommander mock_commander;
	cursor.OnPageStartLoading(&mock_commander);
	verify(listener.m_called_tab_changed);
}

test("OnPageStartLoading should call OnTabLoading")
{
	// Make the cursor and listen to it
	MockCursorListener listener;
	OpPageCursor cursor;
	verify(OpStatus::IsSuccess(cursor.AddListener(&listener)));

	// Call and check
	OpMockWindowCommander mock_commander;
	cursor.OnPageStartLoading(&mock_commander);
	verify(listener.m_called_tab_loading);
}

test("OnPageTitleChanged should call OnTabChanged")
{
	// Make the cursor and listen to it
	MockCursorListener listener;
	OpPageCursor cursor;
	verify(OpStatus::IsSuccess(cursor.AddListener(&listener)));

	// Call and check
	OpMockWindowCommander mock_commander;
	cursor.OnPageTitleChanged(&mock_commander, NULL);
	verify(listener.m_called_tab_changed);
}

test("OnPageLoadingFinished should call OnTabInfoChanged")
{
	// Make the cursor and listen to it
	MockCursorListener listener;
	OpPageCursor cursor;
	verify(OpStatus::IsSuccess(cursor.AddListener(&listener)));

	// Call and check
	OpMockWindowCommander mock_commander;
	cursor.OnPageLoadingFinished(&mock_commander, OpLoadingListener::LOADING_SUCCESS, FALSE);
	verify(listener.m_called_tab_info_changed);
}

test("OnPageUrlChanged should call Listener::OnPageUrlChanged")
{
	// Make the cursor and listen to it
	MockCursorListener listener;
	OpPageCursor cursor;
	verify(OpStatus::IsSuccess(cursor.AddListener(&listener)));

	// Call and check
	OpMockWindowCommander mock_commander;
	cursor.OnPageUrlChanged(&mock_commander, NULL);
	verify(listener.m_called_page_url_changed);
}

test("OnPageSecurityModeChanged should call OnTabInfoChanged")
{
	// Make the cursor and listen to it
	MockCursorListener listener;
	OpPageCursor cursor;
	verify(OpStatus::IsSuccess(cursor.AddListener(&listener)));

	// Call and check
	OpMockWindowCommander mock_commander;
	cursor.OnPageSecurityModeChanged(&mock_commander, OpDocumentListener::NO_SECURITY, FALSE);
	verify(listener.m_called_tab_info_changed);
}

test("OnPageTrustRatingChanged should call OnTabInfoChanged") require TRUST_RATING;
{
	// Make the cursor and listen to it
	MockCursorListener listener;
	OpPageCursor cursor;
	verify(OpStatus::IsSuccess(cursor.AddListener(&listener)));

	// Call and check
	OpMockWindowCommander mock_commander;
	cursor.OnPageTrustRatingChanged(&mock_commander, Domain_Trusted);
	verify(listener.m_called_tab_info_changed);
}
