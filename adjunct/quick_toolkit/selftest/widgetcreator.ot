/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick_toolkit.widgetcreator";
require init;

include "adjunct/quick_toolkit/widgets/WidgetCreator.h";

global
{
	const uni_char* button_widget = UNI_L("Button, SI_OPEN_BUTTON_TEXT, OpenButton, 20, 30, 40, 23, Move right");

	class DummyParentWidget : public OpWidget
	{
	};
};

test("Creates correct button widget when requested")
{
	WidgetCreator creator;
	creator.SetWidgetData(button_widget);

	DummyParentWidget parent;
	creator.SetParent(&parent);

	OpWidget* widget = creator.CreateWidget();

	verify(widget);
	verify(widget->GetType() == OpTypedObject::WIDGET_TYPE_BUTTON);
	verify(widget->GetStringID() == Str::SI_OPEN_BUTTON_TEXT);
	verify(widget->GetName().Compare("OpenButton") == 0);
	verify(widget->GetRect().Equals(OpRect(20, 30, 40, 23)));
	verify(widget->GetXResizeEffect() == RESIZE_MOVE);
	verify(widget->GetYResizeEffect() == RESIZE_FIXED);
};

test("Creates correct checkbox widget when requested")
{
	const uni_char* checkbox_widget = UNI_L("Checkbox, DI_ID_OK, OkCheckbox, 10, 15, 20, 25, Size");
	WidgetCreator creator;
	creator.SetWidgetData(checkbox_widget);

	DummyParentWidget parent;
	creator.SetParent(&parent);

	OpWidget* widget = creator.CreateWidget();

	verify(widget);
	verify(widget->GetType() == OpTypedObject::WIDGET_TYPE_CHECKBOX);
	verify(widget->GetStringID() == Str::DI_ID_OK);
	verify(widget->GetName().Compare("OkCheckbox") == 0);
	verify(widget->GetRect().Equals(OpRect(10, 15, 20, 25)));
	verify(widget->GetXResizeEffect() == RESIZE_SIZE);
	verify(widget->GetYResizeEffect() == RESIZE_SIZE);
}

test("Check all widget types")
{
	
}

test("Assigns actions to widget")
{
	const uni_char* button_action = UNI_L("Open");

	WidgetCreator creator;
	creator.SetWidgetData(button_widget);
	creator.SetActionData(button_action);

	DummyParentWidget parent;
	creator.SetParent(&parent);

	OpWidget* widget = creator.CreateWidget();

	verify(widget);
	verify(widget->GetAction());
	verify(widget->GetAction()->GetAction() == OpInputAction::ACTION_OPEN);
};
