/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick_toolkit.quickscrollcontainer";

include "adjunct/quick_toolkit/widgets/QuickScrollContainer.h";
include "adjunct/quick_toolkit/selftest/src/ST_TestWidget.h";
include "modules/widgets/OpWidget.h";
include "modules/widgets/OpScrollbar.h";
include "modules/util/OpTypedObject.h";

include "adjunct/quick_toolkit/contexts/DialogContext.h";
include "adjunct/quick_toolkit/widgets/QuickButton.h";
include "adjunct/quick_toolkit/widgets/QuickDialog.h";

global
{
	class DummyOpWidget : public OpWidget {};

	NullDialogContext context;
};

test("Size of vertical scrollcontainer depends on contents")
{
	QuickScrollContainer container(QuickScrollContainer::VERTICAL, QuickScrollContainer::SCROLLBAR_NONE);
	ST_TestWidget* widget = OP_NEW(ST_TestWidget, ());

	verify_success(container.Init());
	container.SetContent(widget);

	verify(container.GetMinimumWidth() == ST_TestWidget::MinimumWidth);
	verify(container.GetPreferredWidth() == ST_TestWidget::PreferredWidth);
	verify(container.GetMinimumHeight() < ST_TestWidget::MinimumHeight);
	verify(container.GetPreferredHeight() == ST_TestWidget::PreferredHeight);
}

test("Size of horizontal scrollcontainer depends on contents")
{
	QuickScrollContainer container(QuickScrollContainer::HORIZONTAL, QuickScrollContainer::SCROLLBAR_NONE);
	ST_TestWidget* widget = OP_NEW(ST_TestWidget, ());

	verify_success(container.Init());
	container.SetContent(widget);

	verify(container.GetMinimumHeight() == ST_TestWidget::MinimumHeight);
	verify(container.GetPreferredHeight() == ST_TestWidget::PreferredHeight);
	verify(container.GetMinimumWidth() < ST_TestWidget::MinimumWidth);
	verify(container.GetPreferredWidth() == ST_TestWidget::PreferredWidth);
}

test("Width of vertical scrollbar gets added to content width")
{
	QuickScrollContainer container(QuickScrollContainer::VERTICAL, QuickScrollContainer::SCROLLBAR_ALWAYS);
	ST_TestWidget* widget = OP_NEW(ST_TestWidget, ());

	verify_success(container.Init());
	container.SetContent(widget);

	verify(container.GetMinimumWidth() > ST_TestWidget::MinimumWidth);
	verify(container.GetPreferredWidth() > ST_TestWidget::PreferredWidth);
	verify(container.GetMinimumHeight() < ST_TestWidget::MinimumHeight);
	verify(container.GetPreferredHeight() == ST_TestWidget::PreferredHeight);
}

test("Height of horizontal scrollbar gets added to content height")
{
	QuickScrollContainer container(QuickScrollContainer::HORIZONTAL, QuickScrollContainer::SCROLLBAR_ALWAYS);
	ST_TestWidget* widget = OP_NEW(ST_TestWidget, ());

	verify_success(container.Init());
	container.SetContent(widget);

	verify(container.GetMinimumHeight() > ST_TestWidget::MinimumHeight);
	verify(container.GetPreferredHeight() > ST_TestWidget::PreferredHeight);
	verify(container.GetMinimumWidth() < ST_TestWidget::MinimumWidth);
	verify(container.GetPreferredWidth() == ST_TestWidget::PreferredWidth);
}

test("Can layout child widgets")
{
	TestLayoutRects(QuickScrollContainer::VERTICAL, QuickScrollContainer::SCROLLBAR_NONE,
			OpRect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight / 2));
}

test("Content width can't go below 0")
{
	TestLayoutRects(QuickScrollContainer::VERTICAL, QuickScrollContainer::SCROLLBAR_ALWAYS,
			OpRect(0, 0, 0, ST_TestWidget::NominalHeight / 2));
}


test("Content height can't go below 0")
{
	TestLayoutRects(QuickScrollContainer::HORIZONTAL, QuickScrollContainer::SCROLLBAR_ALWAYS,
			OpRect(0, 0, ST_TestWidget::NominalWidth / 2, 0));
}
subtest TestLayoutRects(QuickScrollContainer::Orientation orientation,
		QuickScrollContainer::Scrollbar scrollbar_behavior, const OpRect& scrollrect)
{
	QuickScrollContainer container(orientation, scrollbar_behavior);
	ST_TestWidget* content = OP_NEW(ST_TestWidget, ());

	verify_success(container.Init());
	container.SetContent(content);

	OpWidget* dummy = OP_NEW(DummyOpWidget, ());
	container.SetParentOpWidget(dummy);

	OpRect fullrect = scrollrect;
	if (orientation == QuickScrollContainer::VERTICAL)
		fullrect.height = ST_TestWidget::NominalHeight;
	else
		fullrect.width = ST_TestWidget::NominalWidth;

	verify_success(container.Layout(scrollrect));

	OpWidget* scrollbox = dummy->GetFirstChild();
	verify(scrollbox && scrollbox->GetRect().Equals(scrollrect));

	OpWidget* canvas = scrollbox->GetFirstChild();
	verify(canvas && canvas->GetRect().Equals(fullrect));

	verify(content->m_layout_rect.Equals(fullrect));
}

test("Scroll To End")
{
	QuickScrollContainer container(QuickScrollContainer::VERTICAL, QuickScrollContainer::SCROLLBAR_NONE);
	ST_TestWidget* content = OP_NEW(ST_TestWidget, ());

	verify_success(container.Init());
	container.SetContent(content);

	OpWidget* dummy = OP_NEW(DummyOpWidget, ());
	container.SetParentOpWidget(dummy);

	OpRect scrollrect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight / 2);
	verify_success(container.Layout(scrollrect));

	OpWidget* scrollview = dummy->GetFirstChild();
	verify(scrollview);

	OpMouseEventProxy *canvas = (OpMouseEventProxy*)scrollview->GetFirstChild();
	verify(canvas && canvas->GetType() == OpTypedObject::WIDGET_TYPE_MOUSE_EVENT_PROXY);
	OpRect rect_canvas_old = canvas->GetRect();
	
	OpScrollbar* scrollbar = (OpScrollbar*)scrollview->GetLastChild();
	verify(scrollbar && scrollbar->GetType() == OpTypedObject::WIDGET_TYPE_SCROLLBAR);

	INT32 value_old = scrollbar->GetValue();
	container.ScrollToEnd();
	verify(scrollbar->GetValue() == ST_TestWidget::NominalHeight / 2);
	verify(value_old != scrollbar->GetValue());

	//This indicates that contents have been scrolled.
	verify(!rect_canvas_old.Equals(canvas->GetRect()));

	dummy->Delete();
}


test("Can move scroll view")
{
	QuickScrollContainer container(QuickScrollContainer::VERTICAL, QuickScrollContainer::SCROLLBAR_NONE);
	ST_TestWidget* content = OP_NEW(ST_TestWidget, ());

	verify_success(container.Init());
	container.SetContent(content);

	OpWidget* dummy = OP_NEW(DummyOpWidget, ());
	container.SetParentOpWidget(dummy);

	OpRect scrollrect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight / 2);

	verify_success(container.Layout(scrollrect));
	container.SetScroll(ST_TestWidget::NominalHeight / 2, TRUE);

	OpWidget* scrollbox = dummy->GetFirstChild();
	verify(scrollbox && scrollbox->GetRect().Equals(scrollrect));

	OpRect scrolledcanvas(0, -((int)(ST_TestWidget::NominalHeight / 2)), ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight);
	OpWidget* canvas = scrollbox->GetFirstChild();
	verify(canvas && canvas->GetRect().Equals(scrolledcanvas));

	OpRect fullrect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight);
	verify(content->m_layout_rect.Equals(fullrect));
	dummy->Delete();
}

test("Scrollbar visible when necessary in AUTO mode")
{
	QuickScrollContainer container(QuickScrollContainer::VERTICAL, QuickScrollContainer::SCROLLBAR_AUTO);
	ST_TestWidget* content = OP_NEW(ST_TestWidget, ());

	verify_success(container.Init());
	container.SetContent(content);

	OpWidget* dummy = OP_NEW(DummyOpWidget, ());
	container.SetParentOpWidget(dummy);

	OpRect scrollrect(0, 0, ST_TestWidget::NominalWidth, ST_TestWidget::NominalHeight);
	verify_success(container.Layout(scrollrect));

	OpWidget* scrollview = dummy->GetFirstChild();
	verify(scrollview);

	OpWidget* scrollbar = 0;
	for (OpWidget* child = scrollview->GetFirstChild(); child; child = child->GetNextSibling())
	{
		if (child->IsOfType(OpTypedObject::WIDGET_TYPE_SCROLLBAR))
			scrollbar = child;
	}
	verify(scrollbar && !scrollbar->IsVisible());

	scrollrect.height = ST_TestWidget::NominalHeight / 2;
	verify_success(container.Layout(scrollrect));

	verify(scrollbar && scrollbar->IsVisible());
}
