/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Cihat Imamoglu (cihati)
 */

group "quick_toolkit.quickpaginglayout";
require init;

include "adjunct/quick_toolkit/selftest/src/ST_TestWidget.h";
include "adjunct/quick_toolkit/widgets/QuickPagingLayout.h";
include "adjunct/quick_toolkit/widgets/NullWidget.h";
include "modules/widgets/OpWidget.h";

global
{
	struct TestContainer : public QuickWidgetContainer
	{
		virtual void OnContentsChanged() { m_contents_changed = true; }
		bool m_contents_changed;
	};

	struct TestWidget : public NullWidget
	{
		using NullWidget::BroadcastContentsChanged;
	};

	struct RelativeWidget : public ST_TestWidget
	{
		virtual BOOL HeightDependsOnWidth() { return TRUE; }
		virtual unsigned GetDefaultMinimumHeight(unsigned width) { return width + 50; }
	};
}

test("Empty layout")
{
	QuickPagingLayout layout;
	verify_success(layout.Layout(OpRect(0, 0, 123, 456)));
}

test("InsertPage() activates new page if there is no other")
{
	QuickPagingLayout layout;
	verify(layout.GetActivePage() == NULL);

	ST_TestWidget *widget1 = OP_NEW(ST_TestWidget, ());
	verify_success(layout.InsertPage(widget1));
	verify(layout.GetActivePage() == widget1);

	ST_TestWidget *widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(layout.InsertPage(widget2));
	verify(layout.GetActivePage() == widget1);
}

test("RemovePage() activates first page if removed page was active")
{
	QuickPagingLayout layout;
	verify(layout.GetActivePage() == NULL);

	ST_TestWidget *widget1 = OP_NEW(ST_TestWidget, ());
	verify_success(layout.InsertPage(widget1));
	ST_TestWidget *widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(layout.InsertPage(widget2));
	ST_TestWidget *widget3 = OP_NEW(ST_TestWidget, ());
	verify_success(layout.InsertPage(widget3));
	verify(layout.GetActivePage() == widget1);

	layout.RemovePage(widget1);
	verify(layout.GetActivePage() == widget2);

	layout.RemovePage(widget3);
	verify(layout.GetActivePage() == widget2);
}

test("GoToPage() shows active page and hides other pages")
{
	QuickPagingLayout paging_layout;
	OpWidget* parent = OP_NEW(OpWidget, ());
	paging_layout.SetParentOpWidget(parent);
	paging_layout.Show();

	ST_TestWidget *widget1 = OP_NEW(ST_TestWidget, ());
	verify_success(paging_layout.InsertPage(widget1));
	ST_TestWidget *widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(paging_layout.InsertPage(widget2));

	paging_layout.GoToPage(widget1);
	verify(widget1->m_parent_op_widget == parent);
	verify(!widget2->m_parent_op_widget);

	paging_layout.GoToPage(widget2);
	verify(widget2->m_parent_op_widget == parent);
	verify(!widget1->m_parent_op_widget);
}
finally
{
	parent->Delete();
}

test("QuickPagingLayout is transparent to page content change notifications")
{
	QuickPagingLayout paging_layout;

	TestWidget* widget1 = OP_NEW(TestWidget, ());
	verify_success(paging_layout.InsertPage(widget1));

	TestWidget* widget2 = OP_NEW(TestWidget, ());
	verify_success(paging_layout.InsertPage(widget2));

	TestContainer container;
	paging_layout.SetContainer(&container);

	container.m_contents_changed = false;
	widget1->BroadcastContentsChanged();
	verify(container.m_contents_changed);

	container.m_contents_changed = false;
	widget2->BroadcastContentsChanged();
	verify(container.m_contents_changed);
}

test("QuickPagingLayout respects height depends on width properties of contents")
{
	QuickPagingLayout paging_layout;

	RelativeWidget* widget = OP_NEW(RelativeWidget, ());
	verify_success(paging_layout.InsertPage(widget));

	verify(paging_layout.GetMinimumWidth() == ST_TestWidget::MinimumWidth);
	verify(paging_layout.GetMinimumHeight(ST_TestWidget::MinimumWidth) == ST_TestWidget::MinimumWidth + 50);
	verify(paging_layout.GetMinimumHeight(ST_TestWidget::NominalWidth) == ST_TestWidget::NominalWidth + 50);
}
