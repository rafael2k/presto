/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Patricia Aas (psmaas)
 */

group "quick_toolkit.page";
disabled; // doesn't work

include "adjunct/quick_toolkit/widgets/OpPage.h";
include "adjunct/quick_toolkit/widgets/OpPageListener.h";
include "adjunct/quick_toolkit/selftest/src/OpMockWindowCommander.h";

// TODO - Make tests for :
//	BOOL IsFullScreen();
//	void OnPopupMenu(const OpPoint& point, PopupMenuInfo* info);
//	virtual void OnMenuDispose(OpWindowCommander* commander);

global
{

	class MockOpPageListener : public OpPageListener
	{
	public:

		MockOpPageListener(OpPage* page) : m_called_on_page_popup(FALSE), m_page(page)
		{
			m_page->AddListener(this);
		}

		virtual BOOL OnPagePopup(OpWindowCommander* commander, OpDocumentContext& context)
		{
			m_called_on_page_popup = TRUE;
			return TRUE;
		}
	
 		virtual void OnPageHover(OpWindowCommander* commander, const uni_char* url, const uni_char* link_title, BOOL is_image) { }
 		virtual void OnPageNoHover(OpWindowCommander* commander) { }
	
#ifdef GADGET_SUPPORT
		virtual void OnPageGadgetInstall(OpWindowCommander* commander, URLInformation* url_info) { }
#endif // GADGET_SUPPORT

 		virtual void OnPageUrlChanged(OpWindowCommander* commander, const uni_char* url) { }
 		virtual void OnPageStartLoading(OpWindowCommander* commander) { }

		BOOL m_called_on_page_popup;
		OpPage* m_page;
	};

	OpAutoPtr<OpPage> page;
	OpAutoPtr<OpWindow> op_window;
	OpMockWindowCommander* mock_commander;
};

subtest MakePage()
{
	page.reset();
	mock_commander = new OpMockWindowCommander;
	page = new OpPage(mock_commander);
}

subtest MakeNewOpWindow()
{
	op_window.reset();

	OpWindow* window = NULL;
	verify(OpStatus::IsSuccess(OpWindow::Create(&window)));
	op_window = window;
}

test("Setting an OpWindow on a page should set it on the windowcommander")
{
	MakePage();
	MakeNewOpWindow();

	verify(mock_commander->m_op_window == NULL);
	verify(OpStatus::IsSuccess(page->SetOpWindow(op_window.get())));
	verify(mock_commander->m_op_window != NULL);
}

test("Setting an NULL OpWindow on a page should call OnUiWindowClosing()")
{
	MakePage();

	verify(mock_commander->m_op_window == NULL);
	verify(OpStatus::IsSuccess(page->SetOpWindow(NULL)));
	verify(mock_commander->m_op_window == NULL);
	verify(mock_commander->m_called_on_ui_window_closing);
}

test("The windowcommander set should be returned")
{
	MakePage();

	verify(page->GetWindowCommander());
	verify(page->GetWindowCommander() == mock_commander);
}

test("IsHighSecurity should ask the windowcommander")
{
	MakePage();

	verify(mock_commander->m_called_get_security_mode == FALSE);
	page->IsHighSecurity();
	verify(mock_commander->m_called_get_security_mode == TRUE);
}

test("GetSecurityMode should ask the windowcommander")
{
	MakePage();

	verify(mock_commander->m_called_get_security_mode == FALSE);
	page->GetSecurityMode();
	verify(mock_commander->m_called_get_security_mode == TRUE);
}

test("GetTitle give the title in the title variable")
{
	MakePage();

	GladysCore::ScalarVariable<const uni_char *> * title_variable = page->GetTitle();
	title_variable->SetValue(mock_commander->GetCurrentTitle());

	const uni_char* title = page->GetTitle()->GetValue();

	verify(title);
	verify(uni_strcmp(mock_commander->GetCurrentTitle(), title) == 0);
}

test("Calling OnPopupMenu should cause listener->OnPagePopup to be called")
{
	MakePage();
	MockOpPageListener listener(page.get());

	OpDocumentContext* ctx;
	if (OpStatus::IsSuccess(page->GetWindowCommander()->CreateDocumentContext(&ctx)))
	{
		page->OnPopupMenu(page->GetWindowCommander(), *ctx);
		OP_DELETE(ctx);
	}

	verify(listener.m_called_on_page_popup);
}
