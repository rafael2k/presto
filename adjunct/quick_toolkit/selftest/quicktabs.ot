/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Wojciech Dzierzanowski (wdzierzanowski)
 */

group "quick_toolkit.quicktabs";
require init;

include "adjunct/quick_toolkit/selftest/src/ST_TestController.h";
include "adjunct/quick_toolkit/widgets/QuickOpWidgetWrapper.h";
include "adjunct/quick_toolkit/widgets/QuickTabs.h";
include "adjunct/quick_toolkit/windows/DesktopWindow.h";
include "modules/inputmanager/inputcontext.h";
include "modules/inputmanager/inputmanager.h";
include "modules/widgets/OpWidget.h";
include "modules/widgets/WidgetContainer.h";

global
{
	class DummyDialogContext : public ST_TestController
	{
	public:
		virtual const char* GetInputContextName() { return "Dialog"; }
	};
}

test("Ctrl(+Shift)+Tab sent to dialog context cycles tabs")
{
	OpInputContext sibling_widget_context;

	QuickTabs* tabs = OP_NEW(QuickTabs, ());
	verify_not_oom(tabs);
	OpAutoPtr<QuickTabs> tabs_holder(tabs);
	verify_success(tabs->Init());

	DummyDialogContext dialog_context;
	verify_success(dialog_context.Show(tabs_holder.release()));

	OpWidget* root_widget = dialog_context.m_window->GetDesktopWindow()
			->GetWidgetContainer()->GetRoot();
	sibling_widget_context.SetParentInputContext(root_widget);

	const size_t TAB_COUNT = 3;
	QuickOpWidgetWrapperNoInit<OpWidget>* tab_widgets[TAB_COUNT] = {NULL};
	for (unsigned i = 0; i < TAB_COUNT; ++i)
	{
		OpWidget* widget = OP_NEW(OpWidget, ());
		verify_not_oom(widget);
		widget->SetTabStop(TRUE);
		tab_widgets[i] = QuickWrap(widget);
		verify_not_oom(tab_widgets[i]);
		verify_success(tabs->InsertTab(tab_widgets[i], NULL));
	}

	tabs->GoToTab(TAB_COUNT - 1);
	sibling_widget_context.SetFocus(FOCUS_REASON_OTHER);
	for (unsigned i = 0; i < TAB_COUNT; ++i)
	{
		verify(g_input_manager->InvokeAction(
					OpInputAction::ACTION_CYCLE_TO_NEXT_PAGE, 0, NULL,
					root_widget));
		verify(tabs->GetActiveTab() == tab_widgets[i]);
		verify(tab_widgets[i]->GetOpWidget()->IsFocused());
	}

	tabs->GoToTab(0);
	sibling_widget_context.SetFocus(FOCUS_REASON_OTHER);
	for (unsigned i = TAB_COUNT; i-- >= 1; )
	{
		verify(g_input_manager->InvokeAction(
					OpInputAction::ACTION_CYCLE_TO_PREVIOUS_PAGE, 0, NULL,
					root_widget));
		verify(tabs->GetActiveTab() == tab_widgets[i]);
		verify(tab_widgets[i]->GetOpWidget()->IsFocused());
	}
}
finally
{
	sibling_widget_context.SetParentInputContext(NULL);
}
