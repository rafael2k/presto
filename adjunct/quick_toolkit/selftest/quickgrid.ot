/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick_toolkit.quickgrid";
require init;

include "adjunct/quick_toolkit/widgets/QuickGrid/QuickGrid.h";
include "adjunct/quick_toolkit/widgets/QuickGrid/GridCellIterator.h";
include "adjunct/quick_toolkit/widgets/NullWidget.h";
include "adjunct/quick_toolkit/selftest/src/ST_TestWidget.h";
include "modules/widgets/OpWidget.h";

global
{
	class MockOpWidget : public OpWidget {};

	class MockContainer : public QuickWidgetContainer
	{
	public:
		MockContainer() : m_called_contents_changed(FALSE) {}
		virtual void OnContentsChanged() { m_called_contents_changed = TRUE; }

		BOOL m_called_contents_changed;
	};

	class RelativeWidget : public ST_TestWidget
	{
	public:
		virtual BOOL HeightDependsOnWidth() { return TRUE; }
		virtual unsigned GetDefaultMinimumHeight(unsigned width) { return width + 50; }
	};
};


test("empty grid")
{
	QuickGrid grid;

	verify(grid.GetMinimumWidth() == 0);
	verify(grid.GetPreferredWidth() == 0);
	verify(grid.GetMinimumHeight() == 0);
	verify(grid.GetPreferredHeight() == 0);
	verify(grid.GetMargins().left == 0);
	verify(grid.GetMargins().right == 0);
	verify(grid.GetMargins().top == 0);
	verify(grid.GetMargins().bottom == 0);
}


test("add widget")
{
	QuickGrid grid;
	verify_success(grid.AddRow());
	verify_success(grid.InsertWidget(OP_NEW(ST_TestWidget, ())));

	verify(grid.GetMinimumWidth() == ST_TestWidget::MinimumWidth);
	verify(grid.GetNominalWidth() == ST_TestWidget::NominalWidth);
	verify(grid.GetPreferredWidth() == ST_TestWidget::PreferredWidth);
	verify(grid.GetMinimumHeight() == ST_TestWidget::MinimumHeight);
	verify(grid.GetNominalHeight() == ST_TestWidget::NominalHeight);
	verify(grid.GetPreferredHeight() == ST_TestWidget::PreferredHeight);
	verify(grid.GetMargins().left == ST_TestWidget::Margin);
	verify(grid.GetMargins().right == ST_TestWidget::Margin);
	verify(grid.GetMargins().top == ST_TestWidget::Margin);
	verify(grid.GetMargins().bottom == ST_TestWidget::Margin);
}


test("add widget after checking sizes - check if size values aren't incorrectly cached")
	require success "add widget";
{
	QuickGrid grid;
	verify_success(grid.AddRow());
	verify_success(grid.InsertWidget(OP_NEW(ST_TestWidget, ())));

	verify(grid.GetMinimumWidth() == ST_TestWidget::MinimumWidth);
	verify(grid.GetNominalWidth() == ST_TestWidget::NominalWidth);
	verify(grid.GetPreferredWidth() == ST_TestWidget::PreferredWidth);

	verify_success(grid.InsertWidget(OP_NEW(ST_TestWidget, ())));

	verify(grid.GetMinimumWidth() == ST_TestWidget::MinimumWidth * 2 + ST_TestWidget::Margin);
	verify(grid.GetNominalWidth() == ST_TestWidget::NominalWidth * 2 + ST_TestWidget::Margin);
	verify(grid.GetPreferredWidth() == ST_TestWidget::PreferredWidth * 2 + ST_TestWidget::Margin);
}


test("colspan doesn't contribute to size")
	require success "add widget";
{
	QuickGrid grid;

	verify_success(grid.AddRow());
	verify_success(grid.InsertWidget(OP_NEW(ST_TestWidget, ()), 2));
	verify_success(grid.InsertWidget(OP_NEW(ST_TestWidget, ())));

	verify(grid.GetMinimumWidth() == ST_TestWidget::MinimumWidth + ST_TestWidget::Margin);
	verify(grid.GetNominalWidth() == ST_TestWidget::NominalWidth + ST_TestWidget::Margin);
	verify(grid.GetPreferredWidth() == ST_TestWidget::PreferredWidth + ST_TestWidget::Margin);
	verify(grid.GetMinimumHeight() == ST_TestWidget::MinimumHeight);
	verify(grid.GetNominalHeight() == ST_TestWidget::NominalHeight);
	verify(grid.GetPreferredHeight() == ST_TestWidget::PreferredHeight);
	verify(grid.GetMargins().left == ST_TestWidget::Margin);
	verify(grid.GetMargins().right == ST_TestWidget::Margin);
	verify(grid.GetMargins().top == ST_TestWidget::Margin);
	verify(grid.GetMargins().bottom == ST_TestWidget::Margin);
}


test("preferred width")
	disabled; // enable this test if you want to implement this feature
{
	QuickGrid grid;
	verify_success(grid.AddRow());
	verify_success(grid.InsertWidget(OP_NEW(ST_TestWidget, ())));

	// See QuickWidget demands
	verify(grid.GetPreferredWidth() >= grid.GetMinimumWidth());

	// Explicitly set preferred width of first column
	verify(OpStatus::IsSuccess(
		grid.SetColumnPreferredWidth(0, 5)));

	verify(grid.GetPreferredWidth() == 5);
	verify(grid.GetPreferredWidth() >= grid.GetMinimumWidth());
}


test("preferred height")
	disabled; // enable this test if you want to implement this feature
{
	QuickGrid grid;
	verify_success(grid.AddRow());
	verify_success(grid.InsertWidget(OP_NEW(ST_TestWidget, ())));

	// See QuickWidget demands
	verify(grid.GetPreferredHeight() >= grid.GetMinimumHeight());

	// Explicitly set preferred height of first row
	verify(OpStatus::IsSuccess(
		grid.SetRowPreferredHeight(0, 5)));

	verify(grid.GetPreferredHeight() == 5);
	verify(grid.GetPreferredHeight() >= grid.GetMinimumHeight());
}


test("propagate layout")
{
	QuickGrid grid;
	verify_success(grid.AddRow());
	ST_TestWidget* testwidget = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(testwidget));

	OpRect rect(0, 0, grid.GetMinimumWidth(), grid.GetMinimumHeight());
	verify_success(grid.Layout(rect));

	verify(testwidget->m_layout_rect.Equals(rect));
}


test("propagate parent opwidget")
{
	QuickGrid grid;
	MockOpWidget dummy;
	grid.SetParentOpWidget(&dummy);

	verify_success(grid.AddRow());
	ST_TestWidget* widget = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(widget));

	verify(widget->m_parent_op_widget == &dummy);
}


test("Should call OnContentsChanged() on container when adding cells")
{
	MockContainer container;
	QuickGrid grid;
	grid.SetContainer(&container);

	verify_success(grid.AddRow());
	verify_success(grid.InsertWidget(OP_NEW(ST_TestWidget, ())));

	verify(container.m_called_contents_changed);
}


subtest RelativeSizing(QuickGrid& grid)
{
	verify_success(grid.AddRow());

	verify_success(grid.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(grid.InsertWidget(OP_NEW(RelativeWidget, ())));

	unsigned min_width = grid.GetMinimumWidth();
	verify(min_width == ST_TestWidget::MinimumWidth * 2 + ST_TestWidget::Margin);
	verify(grid.GetMinimumHeight() == ST_TestWidget::MinimumHeight);
	verify(grid.GetMinimumHeight(min_width + 4) == ST_TestWidget::MinimumWidth + 2 + 50);
}

test("Widget with relative size changes sizing of grid")
{
	QuickGrid grid;
	RelativeSizing(grid);
}


test("Widget with relative size is correctly layouted")
{
	QuickGrid grid;
	
	verify_success(grid.AddRow());
	verify_success(grid.InsertWidget(OP_NEW(ST_TestWidget, ())));
	verify_success(grid.AddRow());
	RelativeWidget* widget = OP_NEW(RelativeWidget, ());
	verify_success(grid.InsertWidget(widget));

	unsigned min_width = grid.GetMinimumWidth();
	OpRect rect(0, 0, min_width + 4, grid.GetMinimumHeight(min_width + 4));

	verify_success(grid.Layout(rect));

	OpRect expected (0, ST_TestWidget::MinimumHeight + ST_TestWidget::Margin, min_width + 4, min_width + 4 + 50);
	verify(widget->m_layout_rect.Equals(expected));
}


test("Minimum size is used when layouting smaller than minimum size")
{
	QuickGrid grid;
	verify_success(grid.AddRow());
	ST_TestWidget* testwidget = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(testwidget));

	OpRect layout_rect(0, 0, ST_TestWidget::MinimumWidth - 1, ST_TestWidget::MinimumHeight - 1);
	verify_success(grid.Layout(layout_rect));

	verify(testwidget->m_layout_rect.width == (int)ST_TestWidget::MinimumWidth);
	verify(testwidget->m_layout_rect.height == (int)ST_TestWidget::MinimumHeight);
}

test("Removing a row in the grid")
{
	QuickGrid grid;
	QuickWidget* secondrow[3];

	// Create three rows of three cells
	for (int row = 0; row < 3; row++)
	{
		verify_success(grid.AddRow());
		for (int col = 0; col < 3; col++)
		{
			QuickWidget* widget = OP_NEW(ST_TestWidget, ());
			verify_success(grid.InsertWidget(widget));
			if (row == 1)
				secondrow[col] = widget;
		}
	}

	grid.RemoveRow(1);

	int count = 0;
	for (GridCellIterator it(grid); it; ++it)
	{
		for (int i = 0; i < 3; i++)
			verify(it.Get() != secondrow[i]);
		count++;
	}

	verify(count == 6);
}

test("Moving a row in the grid")
{
	// In this test 3rd row (which is also a last row in a gridlayout) 
	// will be moved to 1st position in the grid
	QuickGrid grid;
	QuickWidget* widgets[4][3] = {NULL};

	// Create three rows of three cells
	for (int row = 1; row < 4; row++)
	{
		verify_success(grid.AddRow());
		for (int col = 0; col < 3; col++)
		{
			QuickWidget* widget = OP_NEW(ST_TestWidget, ());
			verify_success(grid.InsertWidget(widget));
			widgets[row][col] = widget;
		}
	}

	// Move last row to first row
	verify_success(grid.MoveRow(2, 0));

	verify(grid.GetColumnCount() == 3);
	verify(grid.GetRowCount() == 3);

	op_memmove(widgets[0], widgets[3], sizeof(widgets[0]));
	GridCellIterator it(grid);
	for (int i = 0; i < 9; ++i, ++it)
	{
		verify(it.IsValid());
		verify(it.Get() == widgets[i / 3][i % 3]);
	}
}

test("vertically center widgets - or not")
{
	QuickGrid grid;
	verify_success(grid.AddRow());
	ST_TestWidget* widget = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(widget));
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	widget2->SetPreferredHeight(ST_TestWidget::PreferredHeight * 2);
	verify_success(grid.InsertWidget(widget2));

	OpRect layout(0, 0, ST_TestWidget::PreferredWidth, ST_TestWidget::PreferredHeight * 2);
	grid.SetCenterVertically(false);
	grid.Layout(layout);

	verify(widget->m_layout_rect.y == 0);

	grid.SetCenterVertically(true);
	grid.Layout(layout);

	verify(widget->m_layout_rect.y == ST_TestWidget::PreferredHeight / 2);
}

test("horizontally center widgets - or not")
{
	QuickGrid grid;

	// The first row dictates the column widths (both equal to
	// ST_TestWidget::PreferredWidth).
	verify_success(grid.AddRow());
	ST_TestWidget* col0_widget = OP_NEW(ST_TestWidget, ());
	col0_widget->SetMargins(WidgetSizes::Margins());
	verify_success(grid.InsertWidget(col0_widget));
	ST_TestWidget* col1_widget = OP_NEW(ST_TestWidget, ());
	col1_widget->SetMargins(WidgetSizes::Margins());
	verify_success(grid.InsertWidget(col1_widget));

	// The second row has the widgets under test.
	verify_success(grid.AddRow());
	ST_TestWidget* widget0 = OP_NEW(ST_TestWidget, ());
	widget0->SetMargins(WidgetSizes::Margins());
	verify_success(grid.InsertWidget(widget0));
	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	widget1->SetMargins(WidgetSizes::Margins());
	widget1->SetPreferredWidth(ST_TestWidget::PreferredWidth / 2);
	verify_success(grid.InsertWidget(widget1));

	OpRect layout(0, 0, ST_TestWidget::PreferredWidth * 2, ST_TestWidget::PreferredHeight);
	grid.SetCenterHorizontally(false);
	grid.Layout(layout);

	verify(widget0->m_layout_rect.x == 0);
	verify(unsigned(widget1->m_layout_rect.x) == ST_TestWidget::PreferredWidth);

	grid.SetCenterHorizontally(true);
	grid.Layout(layout);

	verify(widget0->m_layout_rect.x == 0);
	verify(unsigned(widget1->m_layout_rect.x)
			== widget0->m_layout_rect.x + widget0->m_layout_rect.width + ST_TestWidget::PreferredWidth / 4);
}

test("Horizontal margins of hidden widgets")
{
	QuickGrid grid;

	verify_success(grid.AddRow());

	ST_TestWidget* widgets[3];
	for (unsigned i = 0; i < ARRAY_SIZE(widgets); ++i)
	{
		widgets[i] = OP_NEW(ST_TestWidget, ());
		verify_success(grid.InsertWidget(widgets[i]));
	}

	verify(grid.GetMinimumWidth() == ST_TestWidget::MinimumWidth * 3 + ST_TestWidget::Margin * 2);
	widgets[1]->Hide();
	verify(grid.GetMinimumWidth() == ST_TestWidget::MinimumWidth * 2 + ST_TestWidget::Margin);
}

test("Vertical margins of hidden widgets")
{
	QuickGrid grid;

	ST_TestWidget* widgets[3];
	for (unsigned i = 0; i < ARRAY_SIZE(widgets); ++i)
	{
		verify_success(grid.AddRow());
		widgets[i] = OP_NEW(ST_TestWidget, ());
		verify_success(grid.InsertWidget(widgets[i]));
	}

	verify(grid.GetMinimumHeight() == ST_TestWidget::MinimumHeight * 3 + ST_TestWidget::Margin * 2);
	widgets[1]->Hide();
	verify(grid.GetMinimumHeight() == ST_TestWidget::MinimumHeight * 2 + ST_TestWidget::Margin);
}

test("Horizontal grid margins with hidden edge widgets")
{
	QuickGrid grid;

	verify_success(grid.AddRow());
	ST_TestWidget* widget = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(widget));
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(widget2));

	WidgetSizes::Margins margins2 = widget2->GetMargins();
	margins2.left = ST_TestWidget::Margin * 2;
	widget2->SetMargins(margins2);

	WidgetSizes::Margins grid_margins = grid.GetMargins();
	verify(grid_margins.left == ST_TestWidget::Margin);
	verify(grid_margins.right == ST_TestWidget::Margin);

	widget->Hide();
	grid_margins = grid.GetMargins();
	verify(grid_margins.left == ST_TestWidget::Margin * 2);
	verify(grid_margins.right == ST_TestWidget::Margin);
}

test("Vertical grid margins with hidden edge widgets")
{
	QuickGrid grid;

	verify_success(grid.AddRow());
	ST_TestWidget* widget = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(widget));

	verify_success(grid.AddRow());
	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(widget2));

	WidgetSizes::Margins margins2 = widget2->GetMargins();
	margins2.top = ST_TestWidget::Margin * 2;
	widget2->SetMargins(margins2);

	WidgetSizes::Margins grid_margins = grid.GetMargins();
	verify(grid_margins.top == ST_TestWidget::Margin);
	verify(grid_margins.bottom == ST_TestWidget::Margin);

	widget->Hide();
	grid_margins = grid.GetMargins();
	verify(grid_margins.top == ST_TestWidget::Margin * 2);
	verify(grid_margins.bottom == ST_TestWidget::Margin);
}

test("Uniform cells: width determined by widest widget")
{
	QuickGrid grid;
	grid.SetUniformCells(true);
	verify_success(grid.AddRow());

	verify_success(grid.InsertWidget(OP_NEW(ST_TestWidget, ())));

	verify(grid.GetMinimumWidth() == ST_TestWidget::MinimumWidth);
	verify(grid.GetNominalWidth() == ST_TestWidget::NominalWidth);
	verify(grid.GetPreferredWidth() == ST_TestWidget::PreferredWidth);

	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	widget2->SetPreferredWidth(ST_TestWidget::PreferredWidth + 1);
	verify_success(grid.InsertWidget(widget2));

	verify(grid.GetMinimumWidth() == ST_TestWidget::MinimumWidth * 2 + ST_TestWidget::Margin);
	verify(grid.GetNominalWidth() == ST_TestWidget::NominalWidth * 2 + ST_TestWidget::Margin);
	verify(grid.GetPreferredWidth() == (ST_TestWidget::PreferredWidth + 1) * 2 + ST_TestWidget::Margin);

	ST_TestWidget* widget3 = OP_NEW(ST_TestWidget, ());
	widget3->SetMinimumWidth(ST_TestWidget::MinimumWidth + 1);
	widget3->SetNominalWidth(ST_TestWidget::NominalWidth + 1);
	widget3->SetMargins(WidgetSizes::Margins(ST_TestWidget::Margin + 1));
	verify_success(grid.InsertWidget(widget3));

	verify(grid.GetMinimumWidth() == (ST_TestWidget::MinimumWidth + 1) * 3 + (ST_TestWidget::Margin + 1) * 2);
	verify(grid.GetNominalWidth() == (ST_TestWidget::NominalWidth + 1) * 3 + (ST_TestWidget::Margin + 1) * 2);
	verify(grid.GetPreferredWidth() == (ST_TestWidget::PreferredWidth + 1) * 3 + (ST_TestWidget::Margin + 1) * 2);
}

test("Uniform cells: height determined by highest widget")
{
	QuickGrid grid;
	grid.SetUniformCells(true);

	verify_success(grid.AddRow());
	verify_success(grid.InsertWidget(OP_NEW(ST_TestWidget, ())));

	verify(grid.GetMinimumHeight() == ST_TestWidget::MinimumHeight);
	verify(grid.GetNominalHeight() == ST_TestWidget::NominalHeight);
	verify(grid.GetPreferredHeight() == ST_TestWidget::PreferredHeight);

	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	widget2->SetPreferredHeight(ST_TestWidget::PreferredHeight + 1);
	verify_success(grid.AddRow());
	verify_success(grid.InsertWidget(widget2));

	verify(grid.GetMinimumHeight() == ST_TestWidget::MinimumHeight * 2 + ST_TestWidget::Margin);
	verify(grid.GetNominalHeight() == ST_TestWidget::NominalHeight * 2 + ST_TestWidget::Margin);
	verify(grid.GetPreferredHeight() == (ST_TestWidget::PreferredHeight + 1) * 2 + ST_TestWidget::Margin);

	ST_TestWidget* widget3 = OP_NEW(ST_TestWidget, ());
	widget3->SetMinimumHeight(ST_TestWidget::MinimumHeight + 1);
	widget3->SetNominalHeight(ST_TestWidget::NominalHeight + 1);
	widget3->SetMargins(WidgetSizes::Margins(ST_TestWidget::Margin + 1));
	verify_success(grid.AddRow());
	verify_success(grid.InsertWidget(widget3));

	verify(grid.GetMinimumHeight() == (ST_TestWidget::MinimumHeight + 1) * 3 + (ST_TestWidget::Margin + 1) * 2);
	verify(grid.GetNominalHeight() == (ST_TestWidget::NominalHeight + 1) * 3 + (ST_TestWidget::Margin + 1) * 2);
	verify(grid.GetPreferredHeight() == (ST_TestWidget::PreferredHeight + 1) * 3 + (ST_TestWidget::Margin + 1) * 2);
}

test("Uniform cells: widget with relative size changes sizing of grid")
{
	QuickGrid grid;
	grid.SetUniformCells(true);
	RelativeSizing(grid);
}

test("Uniform cells: basic layout works")
{
	QuickGrid grid;
	grid.SetUniformCells(true);
	verify_success(grid.AddRow());

	ST_TestWidget* widget1 = OP_NEW(ST_TestWidget, ());
	verify_success(grid.InsertWidget(widget1));

	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	widget2->SetPreferredWidth(ST_TestWidget::PreferredWidth + 1);
	verify_success(grid.InsertWidget(widget2));

	const unsigned exp_col_width = ST_TestWidget::PreferredWidth + 1;
	const unsigned exp_row_height = ST_TestWidget::PreferredHeight;

	const OpRect rect(0, 0, exp_col_width * 2 + ST_TestWidget::Margin, exp_row_height);
	verify_success(grid.Layout(rect));

	verify(widget1->m_layout_rect.Equals(OpRect(0, 0, ST_TestWidget::PreferredWidth, exp_row_height)));
	verify(widget2->m_layout_rect.Equals(OpRect(exp_col_width + ST_TestWidget::Margin, 0, exp_col_width, exp_row_height)));
}

test("Uniform cells: layout with relative widgets works")
{
	QuickGrid grid;
	grid.SetUniformCells(true);

	ST_TestWidget* widget1 = OP_NEW(RelativeWidget, ());
	verify_success(grid.AddRow());
	verify_success(grid.InsertWidget(widget1));

	ST_TestWidget* widget2 = OP_NEW(ST_TestWidget, ());
	verify_success(grid.AddRow());
	verify_success(grid.InsertWidget(widget2));

	const unsigned grid_width = grid.GetMinimumWidth() + 4;
	const OpRect rect(0, 0, grid_width, grid.GetMinimumHeight(grid_width));

	verify_success(grid.Layout(rect));

	const unsigned exp_col_width = grid_width;
	const unsigned exp_row_height = grid_width + 50;
	verify(widget1->m_layout_rect.Equals(OpRect(0, 0, exp_col_width, exp_row_height)));
	verify(widget2->m_layout_rect.Equals(OpRect(0, exp_row_height + ST_TestWidget::Margin, exp_col_width, exp_row_height)));
}
