/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */


group "autoupdate.aufileutils";
require init;
require defined AUTO_UPDATE_SUPPORT;
require defined AUTOUPDATE_PACKAGE_INSTALLATION;

include "modules/util/opfile/opfile.h";
include "adjunct/autoupdate/updater/pi/aufileutils.h";

language C++;

global
{
	OP_STATUS SetupPathString(OpString& str, const char* filename) 
	{
		RETURN_IF_ERROR(g_folder_manager->GetFolderPath(OPFILE_SELFTEST_DATA_FOLDER, str));
		RETURN_IF_ERROR(str.AppendFormat(UNI_L("adjunct%sautoupdate%sselftest%sdata%s"), UNI_L(PATHSEP), UNI_L(PATHSEP), UNI_L(PATHSEP), UNI_L(PATHSEP)));
		RETURN_IF_ERROR(str.Append(filename));
		
		return OpStatus::OK;
	}
}

test("GetUpgradeFolder")
{	
	AUFileUtils *au_file_util;
	uni_char	*temp_au_folder;
	
	au_file_util = AUFileUtils::Create();
	verify(au_file_util != NULL);

	verify(au_file_util->GetUpgradeFolder(&temp_au_folder) == AUFileUtils::OK);

	OpString folder;
	verify(OpStatus::IsSuccess(folder.Set(temp_au_folder)));

	verify(folder.HasContent());

	verify(folder.CStr()[folder.Length() - 1] == UNI_L(PATHSEPCHAR));
	
	delete [] temp_au_folder;
	delete au_file_util;
}

test("GetExePath")
{	
	AUFileUtils *au_file_util;
	uni_char	*temp_au_exepath;
	
	au_file_util = AUFileUtils::Create();
	verify(au_file_util != NULL);

	verify(au_file_util->GetExePath(&temp_au_exepath) == AUFileUtils::OK);
	
	delete [] temp_au_exepath;
	delete au_file_util;
}

test("IsUpdater")
{	
	AUFileUtils *au_file_util;
	char *update_name = NULL;

	au_file_util = AUFileUtils::Create();
	verify(au_file_util != NULL);

	BOOL is_updater;
	verify(au_file_util->IsUpdater(is_updater) == AUFileUtils::OK && is_updater == FALSE);

	delete [] update_name;
}

test("GetUpdateName")
{	
	AUFileUtils *au_file_util;
	uni_char *update_name; 

	au_file_util = AUFileUtils::Create();
	verify(au_file_util != NULL);

	verify(au_file_util->GetUpdateName(&update_name) == AUFileUtils::OK);

#if defined(_MACINTOSH_)
	verify(uni_strcmp(update_name, UNI_L("Update.app")) == 0);
#elif defined(MSWIN)
	verify(uni_strcmp(update_name, UNI_L("OperaUpgrader.exe")) == 0);
#else
	verify(0);
#endif
	delete [] update_name;
}

test("Exists")
{	
	AUFileUtils		*au_file_util;
	unsigned int	size = 0;
	OpString		path;

	au_file_util = AUFileUtils::Create();
	verify(au_file_util != NULL);

	verify(OpStatus::IsSuccess(SetupPathString(path, "size.txt")));
	
	verify(au_file_util->Exists(path.CStr(), size) == AUFileUtils::OK);
	
	OpFile opfile;
	OpFileLength len;
	verify(OpStatus::IsSuccess(opfile.Construct(path.CStr())));
	verify(OpStatus::IsSuccess(opfile.GetFileLength(len)));

	verify(len == (OpFileLength)size);
	
	delete au_file_util;
}

test("Read")
{	
	OpString path;
	verify(OpStatus::IsSuccess(SetupPathString(path, "read.txt")));

	AUFileUtils *au_file_util;

	au_file_util = AUFileUtils::Create();
	verify(au_file_util != NULL);

	char data[] = "Test data in file.";

	OpFile opfile;
	verify(OpStatus::IsSuccess(opfile.Construct(path.CStr())));
	verify(OpStatus::IsSuccess(opfile.Open(OPFILE_WRITE)));
	verify(OpStatus::IsSuccess(opfile.Write(data, sizeof(data))));
	verify(OpStatus::IsSuccess(opfile.Close()));

	char *buf = NULL;
	size_t buf_size = 0;
	verify(au_file_util->Read(path.CStr(), &buf, buf_size) == AUFileUtils::OK);

	verify(op_strncmp(buf, data, buf_size) == 0);

	verify(OpStatus::IsSuccess(opfile.Delete(FALSE)));

	delete [] buf;
	delete au_file_util;
}
