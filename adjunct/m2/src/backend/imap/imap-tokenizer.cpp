#line 2 "imap-tokenizer.cpp"

#line 4 "imap-tokenizer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE IMAP4restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via IMAP4restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void IMAP4restart (FILE *input_file ,yyscan_t yyscanner );
void IMAP4_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE IMAP4_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void IMAP4_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void IMAP4_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void IMAP4push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void IMAP4pop_buffer_state (yyscan_t yyscanner );

static void IMAP4ensure_buffer_stack (yyscan_t yyscanner );
static void IMAP4_load_buffer_state (yyscan_t yyscanner );
static void IMAP4_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER IMAP4_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE IMAP4_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE IMAP4_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE IMAP4_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *IMAP4alloc (yy_size_t ,yyscan_t yyscanner );
void *IMAP4realloc (void *,yy_size_t ,yyscan_t yyscanner );
void IMAP4free (void * ,yyscan_t yyscanner );

#define yy_new_buffer IMAP4_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        IMAP4ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            IMAP4_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        IMAP4ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            IMAP4_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 193
#define YY_END_OF_BUFFER 194
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1370] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  194,  192,  192,  191,  185,  192,
      192,    1,  184,  183,  185,  186,  192,   49,   49,   49,
       48,  185,  184,  183,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  186,  185,  185,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   47,   25,   24,   26,   26,   26,   50,   50,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
      185,   47,   71,  192,   71,   73,   71,   71,   71,   71,
       71,   71,  192,   71,  192,   71,   71,   71,   71,   71,
       92,  192,  192,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  192,  192,  157,  192,  192,  192,  192,  192,
      192,  192,  192,  185,  185,  185,  185,  185,  192,  153,
      152,  155,  192,  192,  192,  192,  192,  192,  192,  192,
      156,  192,  181,  192,  191,  148,  192,  151,  192,  190,
        3,  185,  185,  186,    0,  188,    0,    2,    1,  186,
      184,  183,  185,    0,  184,  183,  185,  185,  185,  185,

      185,  185,  185,  111,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   47,   25,   24,   26,   26,   50,   46,   46,
       46,   46,   43,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   71,    0,   72,    0,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   58,   57,   58,
       58,   58,   58,   58,   71,    0,   72,    0,   71,   71,
       71,   71,   71,   71,   71,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      185,  185,  185,  185,  185,  185,  185,  185,  185,    0,
        0,  158,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  185,  185,  185,  185,  185,  185,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  153,  152,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  181,  181,  148,    0,  150,    0,
        0,    0,  187,    0,  182,    0,  185,   96,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  182,   94,
       93,  185,  185,  185,  185,  185,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,    0,   72,    0,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   58,
       58,   58,   58,   58,   58,   71,   71,   71,   71,   71,
       71,   71,   71,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  185,  185,  185,  185,  185,  185,  185,
      185,  125,    0,    0,    0,  165,  169,  173,  163,  162,

      168,  167,  164,  166,  172,  171,  170,  185,  185,  185,
      185,  185,  185,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  125,    0,    0,
      149,    0,    0,    0,   95,  185,  185,  185,  185,  185,
      185,   97,   99,  185,  185,  185,  185,  185,  185,  185,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   22,   23,   23,   23,   46,   46,
       46,   46,   31,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   71,   71,   71,   71,   71,   60,   71,

       71,   71,   71,   58,   58,   58,   58,   58,   58,   71,
       71,   71,   71,   71,   60,   71,   71,   71,   71,   89,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  121,  185,  185,  185,  147,  185,  185,  146,    0,
        0,  159,  185,  185,  185,  185,  185,  185,  185,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  121,    0,    0,    0,
      147,    0,    0,  146,  154,    0,  189,  185,  185,  185,

      185,  107,  113,  185,  185,  185,  185,  185,  185,   98,
        4,   23,   23,   23,   23,   23,   23,   23,   23,   23,
        6,   23,   23,   23,   23,   23,   23,   46,   46,   46,
       46,   33,   46,   46,   46,   46,   46,   46,   46,   46,
       44,   59,   71,   71,   71,   67,   71,   71,   71,   71,
       70,   58,   58,   58,   58,   58,   55,   59,   71,   71,
       71,   67,   71,   71,   71,   71,   70,   91,   91,   91,
       91,   91,   91,   91,   85,   91,   91,   91,   83,   84,
       91,   91,   91,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  135,    0,    0,    0,    0,    0,    0,  132,

      185,  185,  185,  185,  185,  185,  185,  161,  160,  185,
      180,  185,  185,  185,  185,  185,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  135,    0,    0,    0,    0,
        0,    0,  132,    0,    0,    0,    0,    0,    0,    0,
        0,  185,  185,  103,  185,  101,  185,  104,  100,  102,
      185,   23,   23,   23,   12,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   16,   46,   46,   46,
       46,   46,   41,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   71,   65,   71,   71,   71,   71,   71,   69,
       58,   58,   56,   58,   58,   71,   65,   71,   71,   71,

       71,   71,   69,   91,   91,   91,   91,   91,   91,   80,
       91,   91,   91,   91,   82,   91,  136,  137,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  141,    0,    0,
        0,  185,    0,  185,  123,  185,  143,  185,  114,  117,
      185,  185,  175,  185,  185,  178,  136,  137,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  141,    0,    0,
        0,    0,  123,    0,  143,    0,  114,  117,    0,  185,
      110,  105,  185,  185,   23,   23,   23,   23,   18,   23,
       23,   23,   23,   23,   23,   23,   14,   23,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   42,   46,   46,

       38,   46,   71,   71,   68,   71,   63,   64,   58,   58,
       58,   51,   71,   71,   68,   71,   63,   64,   91,   91,
       81,   91,   91,   91,   76,   91,   91,   91,   91,    0,
        0,  128,    0,    0,  129,    0,    0,    0,  131,    0,
      133,  185,  186,  185,  185,  185,  185,  185,  185,  176,
      185,    0,    0,  128,    0,    0,  129,    0,    0,    0,
      131,    0,  133,    0,    0,    0,    0,    0,    0,  112,
      185,  185,  106,   23,   23,   23,   23,   23,   20,   11,
       23,   23,   23,   23,   23,   46,   46,   46,   46,   46,
       46,   34,   46,   46,   46,   37,   39,   62,   66,   71,

       58,   54,   53,   62,   66,   71,   88,   90,   87,   91,
       91,   91,   91,   86,   91,    0,    0,  139,  138,    0,
        0,  126,    0,  185,  186,  115,  185,  185,  185,  185,
      185,  185,  174,  185,    0,    0,  139,  138,    0,    0,
      126,    0,    0,    0,  115,    0,    0,    0,    0,    0,
      185,  109,   17,   23,   23,   23,   23,   23,    8,   23,
       10,   23,   46,   46,   46,   46,   40,   32,   46,   36,
       46,   71,   52,   71,   91,   91,   91,   75,   77,    0,
        0,  130,    0,    0,  185,  122,  185,  185,  185,  185,
      185,  185,  185,    0,    0,  130,    0,    0,    0,  122,

        0,    0,    0,    0,    0,  108,    5,   21,   23,   23,
       23,    9,   23,   46,   28,   27,   46,   46,   46,   71,
       71,   91,   91,   91,    0,    0,    0,    0,  185,  185,
      185,  185,  185,  185,  185,  185,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   23,   23,   23,   15,
       46,   46,   46,   45,   71,   71,   91,   91,   91,    0,
        0,    0,    0,  185,  185,  185,  185,  120,  119,  185,
      177,    0,    0,    0,    0,    0,    0,    0,    0,  120,
      119,   23,   23,   23,   46,   46,   46,   61,   61,   78,
       91,   74,    0,    0,    0,    0,  185,  185,  116,  185,

      185,    0,    0,    0,    0,    0,    0,  116,    0,   23,
       19,   23,   29,   46,   35,   91,  142,  127,    0,    0,
      124,  144,  118,  179,  142,  127,    0,    0,  124,  144,
      118,   23,    7,   46,   79,    0,    0,  185,    0,    0,
        0,   23,   46,    0,    0,  185,    0,    0,    0,   23,
       30,    0,    0,  185,    0,    0,    0,   13,    0,    0,
      145,    0,    0,  145,  140,  134,  140,  134,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    5,    7,    1,    5,    5,    1,
        8,    9,   10,    5,   11,   12,    5,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   16,    5,    5,   22,
       23,   24,    5,    5,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,    5,    5,    5,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,    5,   81,    5,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5
    } ;

static yyconst flex_int32_t yy_meta[82] =
    {   0,
        1,    2,    2,    3,    4,    1,    4,    1,    5,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    6,    4,    6,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        6,    1,    7,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    1,
        4
    } ;

static yyconst flex_int16_t yy_base[1408] =
    {   0,
        0,   80,    8,   19,  160,    0,  216,    0,  293,  373,
       26,  106,   21,   23,   29,   32,  453,  533,   76,  274,
      613,  693,  773,  853,  284,  364,  218,  222,  928,    0,
     1000,    0, 1047, 1096,  368,  464, 1168,    0,   46,   52,
     1242, 1322, 1400, 1456,  997, 4473,  973, 4473,   53,   52,
      943,   24,  639,  668,  330,   56,  121, 4473,  941, 4473,
     4473,   58,  719,  748,  439,  103,  410,  416,  251,  495,
      264,  540,  508,  351,  755,  303,  385,    0,  496,  767,
        0,  211,   62,  690,   84,  230,  275,  383,  286,  279,
      446,  934,  772,  828,    0,  926,    0,    0,    0,    0,

      279,  319,  330,  438,  483,  368,  353,  515,  530,  449,
      805,  917,  851,   97,  610, 4473,  855,  879,  499,  501,
      689,  798,  920,    0,   99,  601,  545,  532,  541,  557,
     4473, 1490, 1559,  744,  873,  614,  774,  874,  884,  694,
      860,  882, 1031, 1080, 1129,  601,  554,  611,  617,  695,
      756,  775,  775,  906,  918,  878,  947,  974, 1619, 1239,
     1254, 4473,  771,  842,  861,  886,  993,  925,  935,  936,
      880,  881, 4473,  879,  828,    0,  102, 4473,  955, 4473,
     4473,  812,   60,   61,  106, 4473,  257, 4473, 4473,    0,
     1286, 1337, 1052, 1264, 1378, 1426,  978, 1029, 1038, 1086,

     1162, 1079, 1100,  263, 1126, 1151, 1108, 1156, 1155,  380,
      810, 1236, 1174, 1261, 1333, 1258,    0,  995, 1000, 1046,
     1037, 1042, 1166, 1096, 1162, 1170, 1176, 1245, 1263, 1249,
     1281, 1270, 4473, 1346, 1435,    0,    0,    0,    0, 1275,
     1339, 1315, 1307, 1324, 1335, 1349, 1344, 1354, 1378, 1403,
     1404, 1390, 1401,  766,  259, 4473,  477, 1433, 1427, 1483,
     1553, 1438, 1452, 1429, 1473, 1453, 1434,  809, 4473, 1474,
     1546, 1402, 1479, 1480,    0,  504, 4473,  584, 1439, 1477,
     1482, 1491, 1543, 1491, 1501,    0, 1547, 1490, 1512, 1561,
     1552, 1546, 1568, 1555, 1597, 1553, 1561, 1625, 1627, 1648,

     1643, 1666, 1672, 1677, 1669, 1693, 1696, 1658,  873, 1698,
     1658, 1703, 1708, 1702, 1705, 1712, 1724, 1715, 1731, 1780,
     1789, 1798, 1600, 1707, 1714, 1718, 1709, 1784, 1779, 1707,
     1713, 1783, 1822, 1821, 1786, 1827, 1820, 1787, 1801, 1806,
     1797, 1810, 1797, 1807, 1807, 1796, 1825, 1831, 1835,  806,
     1836, 1886, 1895, 1860, 1844, 1866, 1848, 1856, 1866, 1868,
     1848, 1890, 1913,  813, 4473, 4473,    0,  698, 4473,  897,
     1893,  936, 4473, 1023, 1066,  795, 1018, 1120, 1932, 1934,
     1935, 1937, 1938, 1939, 1940, 1942, 1955, 1947, 1122, 4473,
     4473, 1948, 1962, 1959, 1963, 1967, 1898, 1916, 1923, 1929,

     1930, 1940, 1965, 1985, 1985, 1980, 1978, 1985, 1995, 1997,
     2022, 1999, 1997, 1990, 2006, 2009, 2007, 1997, 2009, 2007,
     2012, 1999, 2017, 2003, 2009, 2025, 2012, 1125, 4473, 1162,
     2023, 2028, 2050, 2027,  743, 2043, 2045, 2046,  273, 2076,
     2077, 2084, 2091, 2078, 2083, 2057, 2058, 2082, 2075, 2080,
     2081, 2082,  783, 2085, 2095, 2100, 2102, 2085, 2103, 2092,
     2090, 2119, 2097, 2112, 2115, 2121, 2116, 2127, 2157, 2159,
     2161, 2164, 2162, 2166, 2168, 2165, 2171, 2188, 2172, 2177,
     2220, 2194, 2201, 2202, 2206, 2234, 2239, 2245, 2235, 2194,
     2208, 1257, 2295, 2304, 2313, 4473, 4473, 4473, 4473, 4473,

     4473, 4473, 4473, 4473, 4473, 4473, 4473, 2331, 2297, 2295,
     2333, 2301, 2337, 2209, 2217, 2213, 2220, 2238, 2224, 2237,
     2315, 2299, 2312, 2305, 2318, 2298, 2321, 2309, 2312, 2304,
     2327, 2330, 2331, 2335, 2327,  722, 2333, 4473, 2394, 1383,
     4473, 1416, 2358,  728, 4473, 2375, 2393, 2392, 2394, 2399,
     2396, 1317, 1331, 2398, 2400, 2416, 2417, 2418, 2421, 2413,
     2361, 2381, 2394, 2407, 2409, 2408, 2414, 2446, 2446, 2449,
     2449, 2455,  708, 2439, 4473, 2453, 2459, 2456,  695, 2445,
     2446, 2454,    0,  700, 2449, 2456, 2452, 2447, 2464, 2454,
     2463, 2464, 2457, 2468, 2478, 2464, 2483, 2487, 2492, 2490,

     2493,  970,  663, 2524, 2530, 2538, 2539, 2533, 2540, 2515,
     2518, 2509, 2515, 2527, 2514, 2512, 2513,  694,    0, 2523,
     2529, 2535, 2535, 2542, 2533, 2538, 2539, 2537, 2547, 2533,
     2555, 2551, 2553, 2583, 2604, 2605, 2606, 2607, 2608, 2609,
     2611, 2614, 2610, 1591, 2624, 2621, 2627, 2617, 2674, 2675,
     1596, 2640, 2648, 2681, 2650, 1332, 2682, 2635, 1384, 2728,
     2737, 4473, 2732, 2685, 2755, 2725, 2760, 2761, 2764, 2574,
     2582, 2658, 2654, 2661, 2666, 2671, 2671, 2723,  697, 2723,
      617, 2725, 2741, 2746, 2739,  631, 2730, 2738, 2746, 2734,
     4473, 2748,  609, 4473, 4473, 2749, 4473, 2779, 2787, 2780,

     2790, 1604, 1730, 2783, 2806, 2775, 2803, 2823, 2825, 1732,
        0, 2769, 2795, 2792, 2803, 2805, 2805, 2796, 2809, 2801,
        0, 2813, 2822, 2826, 2810, 2826, 2827, 2843, 2843, 2830,
     2848, 2839, 2857, 2857, 2848, 2851, 2867, 2849, 2851, 2868,
        0,  570, 2860, 2856, 2879,  551, 2878, 2877, 2882,  548,
      511, 2910, 2893, 2907, 2915, 2918,  538,    0, 2883, 2894,
     2915,    0, 2912, 2904, 2905,    0,    0, 2920, 2914, 2904,
     2919, 2921, 2915, 2907,    0, 2929, 2930, 2925,    0,    0,
     2920, 2931, 2922, 1720, 2708, 2959, 2967, 2975, 2980, 2989,
     2988, 2972, 4473, 2992, 2990, 2996, 2997, 3003, 3007, 4473,

     3008, 3069, 3000, 3014, 3016, 3047, 3075, 4473, 4473, 3053,
     2192, 3031, 3054, 3034, 3059, 3076,  534,  470, 2966, 3031,
     3047,  454, 3047, 3065, 3072, 4473, 3072,  457,  465, 3063,
     3061, 3064, 4473, 3061,  417, 3069, 3067, 3072, 3072,  453,
     3087, 3115, 3116, 2302, 3131, 2784, 3132, 3088, 3095, 3142,
     3143, 3105, 3110, 3117,    0, 3111, 3130, 3115, 3132, 3133,
     3134, 3126, 3123, 3145, 3127, 3141,    0, 3133, 3137, 3141,
     3135, 3158,    0, 3169, 3166, 3175, 3184, 3183, 3175, 3176,
     3170, 3187, 3177,  414, 3172, 3193, 3195, 3183, 3199,  412,
     3211, 3220,  451, 3226, 3210, 3190,    0, 3188, 3205, 3229,

     3223, 3224,    0, 3227, 3218, 3222, 3237, 3234, 3241,    0,
     3241, 3241, 3242, 3243,    0, 3238, 4473, 4473, 3268, 3280,
     3269, 3273, 3270, 3271, 3274, 3285, 3297, 4473, 3275, 3298,
     3286, 3304,  398, 3350,  427, 3307, 3312, 3314, 3310, 3329,
     3311, 3340, 3313, 3326, 3339, 3324, 4473, 4473, 3307, 3334,
      390,  374, 3313,  382, 3340, 3350,  371, 4473,  379,  367,
      365, 3338,  348, 3341,  357, 3358, 4473,  353, 3343, 3382,
     3336, 3369, 3384, 3390, 3354, 3352, 3363, 3354,    0, 3367,
     3377, 3372, 3379, 3383, 3387, 3377,    0, 3395, 3402, 3397,
     3404, 3388, 3390, 3390,  351, 3395, 3412,    0,  295, 3398,

        0, 3401, 3416, 3409,  252, 3420,  217,  213, 3446, 3455,
     3457,  241, 3428, 3427,    0, 3433,    0,    0, 3440, 3448,
        0, 3450, 3443, 3449,    0, 3442, 3459, 3459, 3460, 3484,
     3492, 4473, 3402, 3485, 4473, 3490, 3488, 3487, 4473, 3497,
     4473, 3498, 3512, 3516, 3517, 3518, 3546, 3531, 3548, 3507,
     3551, 3509, 3531, 4473,  149,  147, 4473, 3528,  141,  144,
     4473, 3531, 4473, 3514, 3596, 3535, 3535, 3530, 3589, 4473,
     3578, 3571, 3573, 3539, 3544, 3554, 3572, 3567,    0,    0,
     3579, 3576, 3584, 3601, 3603, 3600, 3605, 3606,  125, 3611,
      131,    0, 3616, 3613, 3598,    0,    0,   77,   39, 3602,

     3636,   82,   76,    0,    0, 3604,    0,    0,    0, 3619,
     3615, 3616, 3609,    0, 3628, 3652, 3654, 4473, 4473, 3489,
     3657, 4473, 3668, 3675, 3697, 3676, 3686, 3677, 3679, 3690,
     3718, 3685, 3680, 3731, 3696, 3697, 4473, 4473,   72, 3704,
     4473, 3706, 3719, 3741, 4473, 3716, 3722, 3722, 3730, 3737,
     3738, 3764,    0, 3723, 3723, 3738, 3753, 3752,    0, 3754,
        0, 3741,   64, 3748, 3751, 3762,    0,    0, 3768,    0,
     3754, 3771,   64, 3770, 3758, 3766, 3764,    0,    0, 3801,
     3802, 4473, 3798, 3799, 3805,    0, 3784, 3818, 3821, 3817,
     3829, 3834, 3835, 3797, 3811, 4473, 3805, 3815, 3811, 4473,

     3827, 3832, 3835, 3811, 3818, 3841,    0,    0, 3830, 3837,
     3847,    0, 3843, 3856,    0,    0, 3869, 3863, 3871, 3872,
     3873, 3874, 3876, 3863, 3901, 3904, 3905, 3908, 3909, 3913,
     3911, 3912, 3915, 3935, 3932, 3933, 3877, 3902, 3909, 3905,
     3906, 3922, 3917, 3935, 3952, 3945, 3966, 3964, 3969,    0,
     3967, 3966, 3968,    0, 3974, 3971, 3962, 3959, 3960, 3992,
     3999, 4000, 4001, 4005, 4008, 4010, 4011, 4009, 4029, 4030,
     4031, 3987, 3979, 3981, 3999, 4000, 4021, 4027, 4028, 4473,
     4473, 4033, 4032, 4043,   54, 4039, 4049,   16,    0,    0,
     4050,    0, 4048, 4049, 4074, 4081, 4087, 4077, 4088, 4089,

     4091,   62,   55, 4046, 4065, 4067, 4055, 4473, 4057, 4061,
        0, 4064,    0, 4084,    0, 4076, 4473, 4473, 4123, 4107,
     4093, 4150, 4111, 4113, 4473, 4473, 4097, 4081, 4473,   39,
     4473, 4119,    0, 4111,    0, 4131, 4115, 4152, 4137, 4122,
     4130, 4123, 4141, 4165, 4166, 4169, 4142, 4151, 4143, 4156,
        0, 4183, 4168, 4187, 4171, 4176, 4166,    0, 4182, 4196,
     4189,   31,    1, 4473, 4473, 4473, 4473, 4473, 4473, 4260,
     4267, 4274, 4281, 4288, 4295, 4302, 4309, 4316, 4323, 4330,
     4335, 4342, 4347, 4352, 4356, 4360, 4366, 4372, 4376, 4379,
     4386, 4390, 4393, 4399, 4403, 4409,    1, 4416, 4423, 4430,

     4437, 4441, 4445, 4448, 4452, 4458, 4465
    } ;

static yyconst flex_int16_t yy_def[1408] =
    {   0,
     1370, 1370, 1371, 1371, 1369,    5,    5,    7, 1372, 1372,
     1373, 1373, 1374, 1374, 1375, 1375, 1376, 1376,    7,    7,
     1377, 1377, 1378, 1378,    7,    7,    7,    7,    7,   29,
     1373,   31,    7,    7,    7,    7, 1373,   37, 1379, 1379,
     1380, 1380, 1373, 1373, 1369, 1369, 1369, 1369, 1381, 1382,
     1369, 1383, 1381, 1381, 1381, 1384, 1369, 1369, 1369, 1369,
     1369, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1385, 1383, 1383,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1369, 1369, 1369, 1387, 1387, 1387, 1388, 1388, 1389,

     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1383, 1385, 1390, 1391, 1390, 1369, 1390, 1390, 1390, 1390,
     1390, 1390, 1392, 1393, 1394, 1393, 1393, 1393, 1393, 1393,
     1369, 1395, 1382, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1383, 1383, 1383, 1383, 1383, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1396, 1369, 1396, 1396, 1397, 1398, 1369, 1369, 1369,
     1369, 1381, 1383, 1384, 1399, 1369, 1369, 1369, 1369, 1385,
     1381, 1381, 1381, 1369, 1383, 1383, 1383, 1383, 1383, 1383,

     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1369, 1369, 1369, 1387, 1387, 1388, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1390, 1400, 1369, 1369, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1392, 1369, 1392,
     1392, 1392, 1392, 1392, 1393, 1394, 1369, 1369, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1399, 1399, 1399,

     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1383, 1383, 1383, 1383, 1383, 1383, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1396, 1369, 1369, 1397, 1401, 1369, 1369,
     1369, 1399, 1369, 1369, 1381, 1369, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1369,
     1369, 1383, 1383, 1383, 1383, 1383, 1386, 1386, 1386, 1386,

     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1400, 1369, 1369,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1392,
     1392, 1392, 1392, 1392, 1392, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1383, 1383, 1383,
     1383, 1383, 1383, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1401,
     1369, 1369, 1369, 1369, 1369, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1369, 1386, 1386, 1386, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1390, 1390, 1390, 1390, 1390, 1390, 1390,

     1390, 1390, 1402, 1392, 1392, 1392, 1392, 1392, 1392, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1403, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1369,
     1369, 1369, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1383, 1383, 1383,

     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1404,
     1402, 1392, 1392, 1392, 1392, 1392, 1392, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1405, 1403, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1369, 1399, 1399, 1399, 1399, 1399, 1399, 1369,

     1383, 1406, 1383, 1383, 1383, 1383, 1383, 1369, 1369, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1407, 1369, 1369, 1369, 1369, 1369,
     1369, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1404,
     1392, 1392, 1392, 1392, 1392, 1393, 1393, 1393, 1393, 1393,

     1393, 1393, 1405, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1369, 1369, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1369, 1399, 1399,
     1399, 1383, 1407, 1406, 1385, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1383,
     1383, 1383, 1383, 1383, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,

     1389, 1389, 1390, 1390, 1390, 1390, 1390, 1390, 1392, 1392,
     1392, 1392, 1393, 1393, 1393, 1393, 1393, 1393, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1399,
     1399, 1369, 1399, 1399, 1369, 1399, 1399, 1399, 1369, 1399,
     1369, 1383, 1385, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1383, 1383, 1383, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1390, 1390, 1390,

     1392, 1392, 1392, 1393, 1393, 1393, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1399, 1399, 1369, 1369, 1399,
     1399, 1369, 1399, 1383, 1385, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1383, 1383, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1390, 1392, 1393, 1395, 1395, 1395, 1395, 1395, 1399,
     1399, 1369, 1399, 1399, 1383, 1385, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1369, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1369, 1383, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1389, 1389, 1389, 1389, 1389, 1389, 1390,
     1393, 1395, 1395, 1395, 1399, 1399, 1399, 1399, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1386, 1386, 1386, 1386,
     1389, 1389, 1389, 1389, 1390, 1393, 1395, 1395, 1395, 1399,
     1399, 1399, 1399, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1386, 1386, 1386, 1389, 1389, 1389, 1390, 1393, 1395,
     1395, 1395, 1399, 1399, 1399, 1399, 1383, 1383, 1383, 1383,

     1383, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1386,
     1386, 1386, 1389, 1389, 1389, 1395, 1369, 1369, 1399, 1399,
     1383, 1383, 1383, 1383, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1386, 1386, 1389, 1395, 1399, 1399, 1383, 1369, 1369,
     1369, 1386, 1389, 1399, 1399, 1383, 1369, 1369, 1369, 1386,
     1389, 1399, 1399, 1383, 1369, 1369, 1369, 1386, 1399, 1399,
     1383, 1369, 1369, 1369, 1369, 1369, 1369, 1369,    0, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1369
    } ;

static yyconst flex_int16_t yy_nxt[4555] =
    {   0,
       46,   46,   47,   48,  367,   50, 1368,   46,   51,   52,
       59,   60,   53,   54,   54,   54,   54,   54,   54,   54,
       54,   59,   60,   96,   97,   96,   97,  189,   47,   48,
       46,   47,   99,   46,   47,   99, 1367,   55,   93,   94,
       94,   94,   94,   94,   94,   94,   94,  173,  174,  175,
     1341,   46,   56,  173,  174,  175,  181,  186,   61,  181,
     1326, 1369,  183, 1369,  181,  190,   55, 1325,  190,   61,
      190, 1313, 1369,   92, 1214,   92,  190, 1196,   92,   57,
       46,   46,   47,   48, 1369,   50,  220,   46,   51,   52,
     1369,  190,   53,   54,   54,   54,   54,   54,   54,   54,

       54,   62,  256,  187,  277,  184, 1369,  369,   47,   48,
      190,  373,  190,  111,   62,  220,  224,   55,   93,   94,
       94,   94,   94,   94,   94,   94,   94,  199,  112,  190,
       62,   46,   56,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  111,   62, 1168,  224,   55, 1166,  257, 1141,
      278, 1140, 1138,  370, 1137,  190,  199,  374,   92,   57,
       46,   46,   47,   48,   62,   50,   62,   46,   46,   62,
       62,   62,   63,   64,   64,   64,   64,   64,   64,   64,
       64,   62,   62,   62,   62,   65,   66,   62,   67,   68,
       62,   62,   69,   62,   62,   70,   71,   72,   73,   62,

       62,   74,   75,   62,   62,   76,   62,   77,   62,   62,
       62,   46,   78,   62,   65,   66,   62,   67,   68,   62,
       62,   69,   62,   62,   70,   71,   72,   73,   62,   62,
       74,   75,   62,   62,   76,   62,   77,   62,   62,   57,
       62,   79,   62,   62,   62,   62,  218,   62,   62, 1369,
      219,   62,   62,   80, 1369,  111,   62,   62,   62,  111,
       62,   62,  185,   62,  429,  190, 1369, 1369,  225,  190,
       79,   62,   62,   62,   62,  218,   62,   62,  204,  219,
       62,   62,   80,  603,  111,   62,   62,   62,  111,   62,
       62,  131,   62,   46,   46,   47,   48,  225,   46,   62,

       46,   46,  207,  190,  190, 1095, 1369,  204,  185,   62,
      430,  111,   62,  226,  229,  190,  190,   82,   83,   84,
      230,  111,   62,  240,   85,  190,  112,  215,   62,   86,
       87,  207,   88,  181,   89,  132,   90,   91,   62,  183,
      111,   62,  226,  229,   46,   92,   82,   83,   84,  230,
      111,   62,  240,   85, 1369,  190,  215,  241,   86,   87,
     1092,   88,  193,   89, 1069,   90,   91,  242, 1067, 1065,
     1063,  131,   46,   46,   46,   47,   48, 1062,   46,  212,
       46,   46,  184,  390, 1061, 1060,  241, 1057, 1369,   62,
     1055,  193,  247,   62,  248, 1054,  242,   82,   83,   84,

      155,  111,   62,  190,   85,  111,   62,  227,  212,   86,
       87,  228,   88, 1369,   89,  132,   90,   91,   62, 1369,
      216,  247,   62,  248,   46,   92,   82,   83,   84,  155,
      111,   62,  190,   85,  111,   62,  227,  190,   86,   87,
      228,   88, 1369,   89,  202,   90,   91,  200, 1043,  216,
      963,  203,   46,   46,   46,   47,   48,  201,   46, 1369,
       46,   46,  190,  197,  190,  243,  190,  968,  190,  963,
      958,  957,  952,  202,  244,  948,  200,  101,  231,  102,
      203,  103,  255,  232,  253,  104,  201,  198,  105,   62,
      106,  190,  197,  107,  243,  108,  155,  109, 1369, 1369,

      110,  111,   62,  244,   46,   92,  101,  231,  102,  277,
      103, 1369,  232,  253,  104,  245,  198,  105,   62,  106,
      197,  246,  107,  262,  108,  155,  109,  205,  255,  110,
      111,   62,   46,   46,   46,   47,   48,  206,   46,  947,
       46,   46,  211, 1369,  245,  263, 1369,  190,  190,  197,
      246,  190,  262,  190,  249,  278,  205,  101,  250,  102,
      190,  103,  251,  190,  208,  104,  206,  252,  105,  281,
      106,  211,  209,  107,  263,  108,  282,  109,  210,  283,
      110,  284,  325,  249,   46,   92,  101,  250,  102,  276,
      103,  251,  190,  208,  104,  285,  252,  105,  281,  106,

      190,  209,  107,  190,  108,  282,  109,  210,  283,  110,
      284,  325,   46,   46,   46,   47,   48, 1369,  114,  115,
      116,   46,  190,  840,  285,  117,  118,  118,  118,  118,
      118,  118,  118,  118,  279,  276,  833,  828,  280,  326,
      323,  327,  181,  258,  119,  324,  120,  259,  183,  203,
      121,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      122,  328,  190,  279,  123,   78,  190,  280,  326,  323,
      327,  181,  258,  119,  324,  120,  259,  183,  203,  121,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  122,
      328,  184,   57,   46,   46,   47,   48, 1369,  114,  115,

      116,   46,  826,  541,  766,  117,  118,  118,  118,  118,
      118,  118,  118,  118,  221,  190,  732,  728,  723,  329,
      184,  264, 1369,  317,  119,  222,  120,  265,  223,  697,
      121,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      122,  190,  693,  221,  123,   78,  190, 1369,  329,  542,
      264, 1369,  317,  119,  222,  120,  265,  223, 1369,  121,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  122,
     1369,  190,   57,   46,   46,   47,   48, 1369,  125,  126,
       46,   46,  311,  213,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  619,  330,  190,  190,  544,  214,  209,

      190,  331,  313,  332,  127,  210,  128,  190, 1369,  354,
      129,  311,  213,  391,  365,  181,  528, 1369,  190,  190,
      130,  183,  266,  330,  123,   92,  190,  214,  209,  365,
      331,  313,  332,  127,  210,  128,  267,  209,  354,  129,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  130,
      190,  266,   46,   46,   46,   47,   48,  190,  125,  126,
       46,   46,  190, 1369,  184,  267,  209,  260,  260,  260,
      260,  260,  260,  260,  260,  260, 1369, 1369,  373,  355,
      366, 1369,  365,  482,  127, 1369,  128, 1369,  318,  356,
      129,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      130,  363,  368,  190,  123,   92,  335,  190,  355, 1369,
      312,  314,  190,  127,  319,  128,  315,  318,  356,  129,
      233, 1369,  316,  357,  374,  190,  190,  237,  269,  130,
      190,  190,   46,  133,  190,  335,  190,  233,  333,  312,
      314,  186,  180,  319,  270,  315,  188,  271,  368,  272,
     1369,  316,  357,  134,  360,  334,  135,  136,  190,  137,
      138,  273,  274,  361,  139,  111,   62,  333,  362,  140,
      190,  141,  142,  270,  180,  336,  271, 1369,  272,  371,
      750, 1369,  134,  360,  334,  135,  136,  374,  137,  138,
      273,  274,  361,  139,  111,   62, 1369,  362,  140,  190,

      141,  142,   47,   48,  336,  377,  337, 1369,  371,  143,
      144,  338,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  545,  190,  397,  146,  358,  190,  147,  372,  148,
      190,  359, 1369,  149,  377,  337,  150,  151,  152,  398,
      338, 1369,  153,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  397,  146,  358,  181,  147,  378,  148, 1369,
      359,  183,  149, 1369, 1369,  150,  151,  152,  398,  181,
      190,  153,   62,  399,  372,  183,  400,  379,  154,  155,
      401,  190, 1369,  156,  111,   62,  378,  375,  157, 1369,
      190,  158,  321,  321,  321,  321,  321,  321,  321,  321,

      321,   62,  399, 1369,  184,  400,  379,  154,  155,  401,
      380, 1369,  156,  111,   62, 1369,  375,  157,  184, 1369,
      158,   62,  383, 1369,  384, 1369,  404,  154,  155, 1369,
      256,  190,  156,  111,   62,  387, 1369,  157,  190,  380,
      158,  322,  322,  322,  322,  322,  322,  322,  322,  322,
       62,  383,  190,  384, 1369,  404,  154,  155, 1369, 1369,
      190,  156,  111,   62,  387, 1369,  157,  428,  385,  158,
       47,   48,  190,  159,  190, 1369,  430, 1369,  190, 1369,
      160,  161,  161,  161,  161,  161,  161,  161,  161,  405,
      389,  162,  388,  163,  381,  386,  164,  385,  393,  165,

      166,  382,  402,  190,  167,  403,  406,  190,  190,  168,
     1369,  169,  170,  428,  190, 1369, 1369,  407,  405,  389,
      171,  388,  163,  381,  386,  164,  190,  393,  165,  166,
      382,  402, 1369,  167,  403,  406, 1369, 1369,  168, 1369,
      169,  170,   46,   46,   47,   48,  407,  177, 1369,  178,
       46,  352,  352,  352,  352,  352,  352,  352,  352,  352,
     1369, 1369,  392,   46, 1369,   46,  353,  353,  353,  353,
      353,  353,  353,  353,  353, 1369,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  394,  408,  409,  190,  181,
      396,  392,   46,   46,   46,  183, 1369,  410,  191,  191,

      191,  191,  191,  191,  191,  191,  191, 1369,  411,  190,
      190, 1369,  412,  190,  394,  408,  409, 1369,  413,  396,
     1369,   46,   46,   46,   47,   48,  410,  177, 1369,  178,
       46, 1369, 1369, 1369, 1369, 1369, 1369,  411,  184,  416,
      181,  412,  417,   46,  376,   46,  183,  413,  418,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  234,  234,
      234,  234,  234,  234,  234,  234,  234, 1369,  416,  190,
      395,  417,   46,   46,   46,  414,  415,  418,  419,  420,
      421, 1369,  422,  190,  190,  190, 1369, 1369,  369,  184,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  395,

     1369,   46,   47,   48,  414,  415,  423,  419,  420,  421,
     1369,  422,   93,   94,   94,   94,   94,   94,   94,   94,
       94,  540, 1369, 1369, 1369, 1369, 1369,  424,  179, 1369,
      190,  425,  426,  427,  542,  423,  190,  443,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  424,  179,   47,   48,
      425,  426,  427,  439,  435,  432,  443,  540,   93,   94,
       94,   94,   94,   94,   94,   94,   94,  431,  190,  190,
      433,  190, 1369,  446,  179,  190,  190, 1369, 1369,  434,
      190,  438,  439,  435,  432,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  190,  190,  431,  444,  445,  433,
      436,  440,  446,  179,  287,  447,  437,  288,  434,  289,
      438,  290,  291,  292,  448,  190,  293,  294,  449,  452,
      453,  456,  295,  296,  297,  190,  444,  445, 1369,  436,
      440, 1369, 1369,  287,  447,  437,  288,  457,  289, 1369,
      290,  291,  292,  448, 1369,  293,  294,  449,  452,  453,
      456,  295,  296,  297,  186,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  441, 1369,  457, 1369,  298,  299,
      450, 1369,  454,  300,  301,  458,  451,  442,  455,  459,
      460,  302,  461,  462,  466,  303,  793,  304,  467,  305,

      306,  800,  307,  441,  308,  190,  309, 1369,  310,  450,
      187,  454,  300,  301,  458,  451,  442,  455,  459,  460,
      302,  461,  462,  466,  303,  463,  304,  467,  305,  306,
      373,  307,  373,  308, 1369,  309,  464,  310,  339,  340,
      465,  496,  374,  341,  342, 1369, 1369,  374,  373, 1369,
      468,  343,  469,  373,  463,  344,  190,  345, 1369,  346,
      347, 1369,  348,  373,  349,  464,  350,  473,  351,  465,
      496,  373,  341,  342,  373,  474,  374,  373,  374,  468,
      343,  469,  373,  470,  344,  484,  345,  471,  346,  347,
      481,  348,  472,  349,  374,  350,  473,  351,  373,  374,

      476,  373,  475,  373,  474, 1369, 1369,  477, 1369,  374,
      190, 1369,  470,  478,  484, 1369,  471,  374, 1369,  481,
      374,  472,  479,  374,  480,  917, 1369, 1369,  374,  476,
      483,  475,  486, 1369, 1369, 1369,  477,  497, 1369,  489,
      498,  488,  478,  499,  374,  487,  500,  374,  485,  374,
      490,  479,  505,  480,  190,  190,  506,  190,  492,  483,
      190,  486,  491, 1369,  190, 1369,  497,  190,  489,  498,
      488,  374,  499, 1369,  487,  500,  190,  485, 1369,  490,
     1369,  505,  190,  190,  190,  506, 1369,  492, 1369, 1369,
     1369,  491,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  501,
      503,  502,  507, 1369, 1369, 1369,  514,  504,  510,  513,
     1369,  515,  516,  521,  519,  522,  517,  523,  190,  190,
      524,  518,  520, 1369, 1369, 1369,  509,  512,  501,  503,
      502,  507,  508,  511,  525,  514,  504,  510,  513,  526,
      515,  516,  521,  519,  522,  517,  523,  527,  529,  524,
      518,  520,  190,  190,  190,  509,  512, 1369, 1369,  190,
     1369,  508,  511,  525, 1369, 1369, 1369,  530,  526,  531,
      532,  533,  534,  535,  536,  537,  527,  529,  352,  352,

      352,  352,  352,  352,  352,  352,  352,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  530,  538,  531,  532,
      533,  534,  535,  536,  537,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  543, 1369, 1369, 1369, 1369,  561,
     1369, 1369, 1369, 1369,  562, 1369,  538, 1369, 1369,  563,
     1369, 1369, 1369,  564, 1369, 1369,  546, 1369, 1369,  547,
     1369, 1369, 1369,  543,  550, 1369, 1369,  553,  561,  551,
     1369, 1369,  565,  562, 1369,  555,  556,  548,  563,  566,
     1369,  549,  564,  552,  190,  546,  190,  190,  547,  190,
      190,  190,  190,  550,  190,  559,  553,  554,  551,  190,

      190,  565,  558,  557,  555,  556,  548,  190,  566,  560,
      549,  190,  552,  567,  190,  190,  568,  569,  570,  190,
      571,  572,  573,  574,  559,  575,  554,  578,  579,  580,
     1369,  558,  557,  581,  582,  583,  584,  585,  560,  586,
      587,  588,  567,  589,  590,  568,  569,  570,  591,  571,
      572,  573,  574,  592,  593, 1369,  578,  579,  580,  576,
      594,  599,  581,  582,  583,  584,  585,  577,  586,  587,
      588,  595,  589,  590,  596,  190,  600,  591,  601,  190,
      190,  602,  592,  593, 1369, 1369, 1369,  597,  576,  594,
      599, 1369, 1369,  598,  610,  190,  577,  190,  190, 1369,

      595,  611,  190,  596,  608,  600,  612,  601,  606,  615,
      602,  609,  605,  616,  617,  607,  597,  618,  604,  613,
      620,  621,  598,  610,  622,  614,  623,  624,  625,  626,
      611,  627,  186,  608,  630,  612,  631,  606,  615,  632,
      609,  605,  616,  617,  607,  633,  618,  604,  613,  620,
      621,  628,  634,  622,  614,  623,  624,  625,  626,  635,
      627,  629,  186,  630,  186,  631,  186,  186,  632,  186,
      186,  186, 1369,  186,  633, 1369,  186,  186,  374, 1369,
      628,  634,  186, 1369, 1369, 1369, 1369, 1369,  635,  636,
      629,  639,  642,  186, 1369, 1369, 1369, 1369,  646,  186,

      638,  644,  637,  641,  640, 1369,  186,  643,  374, 1369,
      374, 1369,  374,  374,  658,  374,  374,  374,  636,  374,
      639,  642,  374,  374,  647,  186,  645,  646,  374,  638,
      644,  637,  641,  640,  653,  649,  643, 1369, 1369,  374,
      651,  670, 1369,  650,  190,  374,  190,  648, 1369,  671,
      652,  659,  374,  647,  190,  645,  672, 1369,  190,  673,
      190,  654, 1369,  653,  649,  674,  675,  655, 1369,  651,
      670,  374,  650,  656,  676, 1369,  648,  657,  671,  652,
      659, 1369, 1369, 1369, 1369,  672,  190,  190,  673, 1369,
      654,  190, 1369, 1369,  674,  675,  655,  190, 1369, 1369,

     1369, 1369,  656,  676, 1369, 1369,  657,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  662,  662,  662,  662,  662,
      662,  662,  662,  662, 1369,  664, 1369,  665,  667,  677,
     1369,  678,  679,  680,  681,  682,  668,  190,  683,  190,
      684,  686,  687,  190,  190,  688, 1369,  689,  685,  690,
     1369,  666,  663,  691,  664,  669,  665,  667,  677,  692,
      678,  679,  680,  681,  682,  668,  694,  683, 1369,  684,
      686,  687, 1369,  190,  688,  190,  689,  685,  690,  190,
      666,  663,  691,  696,  669, 1369, 1369, 1369,  692, 1369,

      698, 1369, 1369, 1369,  711,  694,  539,  539,  539,  539,
      539,  539,  539,  539,  539, 1369, 1369,  695,  712, 1369,
     1369, 1369,  696, 1369, 1369,  713,  704,  190,  699,  698,
      702,  701,  714,  711, 1369,  700, 1369,  715,  703, 1369,
     1369, 1369,  705,  707,  190,  190,  190,  712,  190,  716,
      190,  190,  190,  706,  713,  704,  710,  699,  717,  702,
      701,  714,  708,  709,  700,  190,  715,  703,  190,  190,
      190,  705,  707,  190,  718,  719,  720,  721,  716,  722,
      724,  725,  706,  726,  727,  710,  729,  717,  730,  731,
      733,  708,  709,  734,  735,  736,  737,  738,  739,  740,

      741, 1369,  742,  718,  719,  720,  721,  744,  722,  724,
      725,  743,  726,  727,  746,  729,  190,  730,  731,  733,
      190,  745,  734,  735,  736,  737,  738,  739,  740,  741,
      190,  742, 1369,  747,  748,  190,  744,  749, 1369,  190,
      743, 1369,  190,  746,  190,  190, 1369, 1369, 1369,  758,
      745,  759,  760,  761,  762,  763,  764,  765,  753,  768,
      769,  756,  747,  748,  770,  771,  749,  754,  772,  755,
      752,  774,  775,  776,  777,  778,  779,  757,  758,  773,
      759,  760,  761,  762,  763,  764,  765,  753,  768,  769,
      756,  780,  781,  770,  771,  782,  754,  772,  755,  752,

      774,  775,  776,  777,  778,  779,  757,  783,  773,  186,
      186,  186,  186,  186,  186,  186,  186,  817, 1369,  186,
      780,  781,  186, 1369,  782,  818,  186, 1369, 1369,  186,
     1369, 1369,  186, 1369,  786,  790,  783,  789, 1369, 1369,
      788,  795,  787, 1369,  791,  797,  817,  784,  785,  807,
     1369, 1369,  792, 1369,  818,  374,  374,  374,  374,  374,
      374,  374,  374,  786,  790,  374,  789,  794,  374,  788,
      796,  787,  374,  791,  797,  374,  784,  785,  374,  186,
      186,  792,  801,  803, 1369, 1369,  819,  190, 1369,  820,
      802,  805,  190,  821,  822,  823,  794, 1369,  798,  796,

      190,  824,  190, 1369, 1369, 1369, 1369,  799, 1369,  804,
      806,  801,  803,  918, 1369,  819, 1369, 1369,  820, 1369,
      805, 1369,  821,  822,  823,  374,  374,  798, 1369, 1369,
      824, 1369,  811,  190,  190, 1369,  799,  190,  804,  806,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  809,
      809,  809,  809,  809,  809,  809,  809,  809, 1369,  374,
      810,  811,  813, 1369, 1369,  825,  827, 1369,  829,  830,
      831,  832,  834,  836,  837,  838,  839,  190, 1369,  812,
      835,  841, 1369, 1369,  190,  815, 1369, 1369,  814,  810,
     1369,  813,  816, 1369,  825,  827,  852,  829,  830,  831,

      832,  834,  836,  837,  838,  839, 1369,  190,  812, 1369,
      841,  842,  190,  190,  815,  843,  190,  814,  848,  853,
      845,  816,  844,  846,  854,  852, 1369,  190, 1369, 1369,
      855,  190,  190,  856,  849,  190,  190,  857,  858,  190,
      842,  859,  190,  860,  843,  847, 1369,  848,  853,  845,
      861,  844,  846,  854,  864,  190,  851,  865,  190,  855,
      862,  866,  856,  849,  867,  850,  857,  858,  863,  868,
      859,  871,  860,  872,  847,  190,  873,  190,  869,  861,
      874,  875,  870,  864,  876,  851,  865,  877,  878,  862,
      866,  879,  880,  867,  850,  881,  882,  863,  868,  884,

      871, 1369,  872,  885,  883,  873,  887,  869,  190,  874,
      875,  870,  190,  876,  888, 1369,  877,  878, 1369,  889,
      879,  880,  886, 1369,  881,  882, 1369,  896,  884,  190,
      190,  190,  885,  883,  190,  887,  892,  897,  891,  898,
      900,  901,  902,  888,  904,  894,  905,  906,  889,  907,
      893,  886,  908,  909,  910,  895,  896,  911,  899,  912,
      913,  914,  915,  916,  186,  892,  897,  891,  898,  900,
      901,  902,  186,  904,  894,  905,  906,  186,  907,  893,
      186,  908,  909,  910,  895,  186,  911,  899,  912,  913,
      914,  915,  916,  186,  186,  186,  925,  186,  922,  920,

      919,  928,  186, 1369,  927, 1369, 1369,  949,  186, 1369,
      374, 1369,  186,  921, 1369, 1369,  924, 1369,  374, 1369,
      926, 1369, 1369,  374, 1369,  925,  374, 1369,  920,  919,
      923,  374, 1369, 1369, 1369,  929,  949, 1369,  936,  374,
      374,  374,  921,  374,  930,  924,  931,  374,  374,  926,
     1369,  932,  190,  938,  374,  937, 1369, 1369,  374,  923,
      190,  942, 1369,  950,  929, 1369,  190,  936,  190,  933,
      933,  933,  933,  930,  933,  931,  933,  933, 1369, 1369,
      932,  944,  938,  190,  937,  951,  190,  939,  953,  940,
      942, 1369,  950,  954,  945,  941,  955,  943, 1369,  190,

      956,  959,  960,  961,  962,  190,  190,  964,  965,  966,
      944,  190,  967,  946,  951,  969,  939,  953, 1369, 1369,
      933,  935,  954,  945,  941,  955,  943,  190,  190,  956,
      959,  960,  961,  962, 1369, 1369,  964,  965,  966, 1369,
      190,  967,  946,  971,  969, 1369, 1369,  190,  933,  975,
      970,  976,  977,  978, 1369, 1369,  973,  979,  980,  972,
      981,  982,  983,  984,  985, 1369, 1369,  190,  190,  986,
      987,  974,  971,  988,  989,  990,  991,  992,  975,  970,
      976,  977,  978,  190,  190,  973,  979,  980,  972,  981,
      982,  983,  984,  985,  190,  190,  993,  994,  986,  987,

      974,  995,  988,  989,  990,  991,  992,  996,  997,  998,
      999, 1000, 1001, 1002, 1003, 1004, 1369, 1007, 1369, 1369,
     1005, 1006, 1369, 1369,  190,  993,  994, 1013, 1369,  190,
      995, 1014, 1015, 1008, 1369,  190,  996,  997,  998,  999,
     1000, 1001, 1002, 1003, 1004,  190, 1007,  190, 1010, 1005,
     1006,  190, 1009, 1012, 1011, 1016, 1013, 1017, 1018, 1019,
     1014, 1015, 1008, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
     1027, 1028, 1029,  186, 1032,  186, 1035, 1010,  186,  186,
     1039, 1009, 1012, 1011, 1016,  186, 1017, 1018, 1019, 1033,
      186, 1041, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,

     1028, 1029,  186,  186, 1036, 1030, 1031, 1369, 1040, 1369,
     1369, 1038, 1037, 1369, 1369, 1369, 1369, 1369, 1034,  374,
      374,  374,  374, 1045,  374,  374,  374, 1369, 1369, 1369,
     1369,  374, 1369, 1036, 1030, 1031,  374,  374, 1046, 1369,
     1047, 1037, 1369, 1369, 1052, 1042, 1044, 1034,  374,  374,
      933,  933,  933,  933, 1048,  933,  190,  933,  933,  190,
     1053, 1056,  190,  190,  190,  190,  190, 1046, 1049, 1050,
     1058, 1051, 1369, 1052, 1042, 1044,  190, 1059,  190, 1064,
     1066,  190, 1068, 1048, 1070, 1369, 1074, 1369,  190, 1053,
     1056,  190,  190, 1369, 1075, 1076, 1077, 1049, 1050, 1058,

     1051,  933,  935, 1078, 1079, 1369, 1059, 1118, 1064, 1066,
     1072, 1068, 1080, 1070, 1071, 1074, 1081, 1073, 1082, 1083,
     1084,  190, 1085, 1075, 1076, 1077, 1086, 1087, 1088,  933,
     1089, 1090, 1078, 1079,  190, 1091,  190, 1093, 1094, 1072,
     1096, 1080,  190, 1071, 1097, 1081, 1073, 1082, 1083, 1084,
     1098, 1085, 1099,  374, 1369, 1086, 1087, 1088, 1100, 1089,
     1090,  190, 1104, 1369, 1091, 1369, 1093, 1094,  190, 1096,
     1105, 1106,  190, 1097, 1101, 1107, 1108, 1109, 1110, 1098,
     1111, 1099, 1102, 1112, 1103, 1113, 1114, 1100, 1115,  186,
     1119, 1104, 1122,  186, 1182,  186, 1369,  186, 1121, 1105,

     1106, 1369,  186, 1101, 1107, 1108, 1109, 1110, 1116, 1111,
     1369, 1102, 1112, 1103, 1113, 1114, 1117, 1115, 1120, 1369,
     1369, 1369, 1369, 1123, 1125, 1125, 1125, 1125, 1125, 1125,
     1125, 1125, 1125, 1135, 1369,  374,  374, 1116,  374,  374,
      374,  374, 1124,  374, 1126, 1117, 1127, 1120,  374, 1369,
      190, 1369, 1123, 1128, 1369, 1136, 1139, 1142, 1143,  190,
     1369, 1369, 1135, 1145, 1146, 1147, 1153, 1132,  190,  190,
      190, 1124, 1154, 1126, 1369, 1127, 1369, 1129, 1134, 1369,
     1369, 1369, 1128,  190, 1136, 1139, 1142, 1143, 1130, 1131,
     1133, 1369, 1145, 1146, 1147, 1153, 1132, 1155,  190, 1152,

      190, 1154, 1369,  190, 1156, 1157, 1129, 1134, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1130, 1131, 1133,
     1148, 1151, 1158,  190, 1159,  190, 1155, 1160, 1152, 1161,
      190, 1149, 1150, 1156, 1157, 1162, 1163, 1164, 1165, 1167,
     1169, 1170, 1171, 1172, 1369, 1174, 1175, 1176, 1177, 1148,
     1151, 1158, 1178, 1159,  190, 1179, 1160,  186, 1161,  186,
     1149, 1150,  186, 1173, 1162, 1163, 1164, 1165, 1167, 1169,
     1170, 1171, 1172,  186, 1174, 1175, 1176, 1177, 1369, 1369,
     1369, 1178, 1369, 1369, 1179, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1173, 1369, 1369, 1180, 1183, 1181, 1369, 1369,

     1369, 1185, 1369,  374, 1188,  374, 1184, 1189,  374, 1125,
     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1187,  374,
     1186, 1369, 1190, 1192, 1180, 1183, 1181,  190,  190,  190,
     1185,  190,  190, 1188, 1369, 1184, 1189,  190,  190, 1194,
     1195, 1369,  190, 1197, 1198, 1199, 1191, 1187, 1201, 1202,
     1203, 1190, 1192, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1204, 1193, 1200, 1205, 1207, 1369, 1194, 1195,
      190, 1208, 1197, 1198, 1199, 1191, 1209, 1201, 1202, 1203,
     1210, 1211, 1212,  190, 1213, 1215, 1206, 1369, 1216, 1217,
      190, 1204, 1193, 1218, 1205, 1207, 1219, 1221, 1220, 1222,

     1208, 1223, 1224,  186,  186, 1209,  186,  186, 1369, 1210,
     1211, 1212, 1230, 1213, 1215, 1206,  190, 1216, 1217, 1369,
     1369, 1369, 1218,  190, 1369, 1219, 1221, 1220, 1222, 1237,
     1223, 1224, 1369, 1225, 1226, 1228,  190, 1369, 1369, 1227,
     1369, 1230, 1231, 1238, 1369, 1232, 1239, 1369, 1229,  374,
      374, 1240,  374,  374, 1241, 1242, 1243,  190, 1237, 1244,
     1245, 1235, 1225, 1226, 1228, 1246, 1233, 1247, 1227,  190,
      190, 1231, 1238,  190, 1232, 1239, 1234, 1229, 1236, 1248,
     1240,  190, 1249, 1241, 1242, 1243,  190,  190, 1244, 1245,
     1235, 1250, 1251,  190, 1246, 1233, 1247, 1252, 1253, 1254,

     1255, 1256, 1257, 1258, 1259, 1234,  186, 1236, 1248,  186,
      186, 1249, 1369,  186, 1369, 1369, 1369, 1369, 1369, 1369,
     1250, 1251, 1272, 1369,  190, 1369, 1252, 1253, 1254, 1255,
     1256, 1257, 1258, 1259, 1369, 1369, 1369, 1262, 1369, 1267,
     1273, 1274, 1261, 1268, 1275, 1369, 1260, 1263, 1265, 1369,
     1276, 1272,  374, 1264, 1266,  374,  374, 1277, 1369,  374,
     1278,  190, 1279,  190,  190,  190, 1262,  190, 1267, 1273,
     1274, 1261, 1268, 1275, 1270, 1260, 1263, 1265, 1269, 1276,
     1280, 1271, 1264, 1266,  190,  190, 1277,  190, 1281, 1278,
     1282, 1279, 1283, 1284, 1285, 1286, 1287,  186, 1289, 1290,

     1291, 1288, 1292, 1270,  186,  186,  186, 1269, 1369, 1280,
     1271, 1369, 1369, 1369, 1369, 1302, 1303, 1281, 1304, 1282,
     1293, 1283, 1284, 1285, 1286, 1287,  190, 1289, 1290, 1291,
     1288, 1292, 1369, 1369, 1369, 1298, 1294, 1295, 1299, 1300,
     1305, 1306, 1296,  374, 1302, 1303, 1297, 1304, 1307, 1293,
      374,  374,  374, 1317, 1318, 1308, 1309,  190, 1301, 1310,
      190,  190,  190,  190, 1298, 1294, 1295, 1299, 1300, 1305,
     1306, 1296, 1311, 1312, 1314, 1297, 1315, 1307, 1316,  186,
     1369,  190,  190,  190, 1308, 1309,  186, 1301, 1310, 1327,
     1369, 1369, 1369, 1328, 1369, 1329, 1369, 1330, 1331,  374,

      374, 1311, 1312, 1314, 1332, 1315, 1333, 1316, 1334, 1320,
     1369, 1369,  186, 1335, 1369, 1321, 1369, 1319, 1327, 1322,
      186, 1339, 1328, 1340, 1329,  374, 1330, 1331,  186,  190,
     1323, 1324,  374, 1332, 1369, 1333,  186, 1334, 1320,  190,
      190,  190, 1335,  190, 1321,  190, 1319, 1336, 1322, 1337,
     1339, 1342, 1340, 1369, 1343, 1369, 1344, 1345,  374, 1323,
     1324, 1338, 1347,  190, 1348,  190,  374, 1349, 1350, 1351,
      186,  186, 1369,  186,  374, 1369, 1336, 1355, 1337, 1356,
     1342, 1357,  374, 1343, 1358, 1344, 1345, 1365,  186, 1346,
     1369, 1347, 1369, 1348, 1353, 1360, 1349, 1350, 1351, 1362,

     1352, 1366,  190, 1363,  190, 1369, 1355, 1354, 1356, 1364,
     1357, 1359, 1369, 1358, 1369, 1369,  374,  374, 1346,  374,
     1369,  190, 1369, 1353, 1360, 1369, 1369, 1369, 1362, 1352,
     1361, 1369, 1363,  374,  374, 1369, 1354, 1369, 1364,  190,
     1359,  190, 1369, 1369, 1369, 1369, 1369,  374, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1361,
       49,   49,   49,   49,   49,   49,   49,   58,   58,   58,
       58,   58,   58,   58,   81,   81,   81,   81,   81,   81,
       81,   46,   46,   46,   46,   46,   46,   46,   95,   95,
       95,   95,   95,   95,   95,   98,   98,   98,   98,   98,

       98,   98,  100,  100,  100,  100,  100,  100,  100,  113,
      113,  113,  113,  113,  113,  113,  124,  124,  124,  124,
      124,  124,  124,  172,  172,  172,  172,  172,  172,  172,
      176,  176,  176,  176,  176,  176,  176,  182,  182, 1369,
      182,  182,  185,  185,  185,  185,  185,  185,  185,  183,
      183, 1369,  183,  183,  184,  184, 1369,  184,  184,  190,
     1369,  190,  190,  217, 1369,  217,  236,  236,  236,  236,
      236,  236,  238, 1369,  238,  238,  238,  238,  238,  239,
     1369,  239,  254, 1369,  254,  254,  255,  255,  255,  255,
      255,  255,  255,  268,  268,  268,  275, 1369,  275,  276,

      276,  276,  276,  276,  276,  276,  286, 1369,  286,  364,
      364,  364,  364,  364,  364,  364,  368,  368,  368,  368,
      368,  368,  368,  372,  372,  372,  372,  372,  372,  372,
      428,  428,  428,  428,  428,  428,  428,  540,  540,  540,
      540,  540,  540,  540,  751, 1369,  751,  751,  767, 1369,
      767,  890, 1369,  890,  890,  903, 1369,  903,  934,  934,
      934,  934,  934,  934,  934,  933,  933,  933,  933,  933,
      933,  933,   45, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369
    } ;

static yyconst flex_int16_t yy_chk[4555] =
    {   0,
        1,    1,    1,    1, 1397,    1, 1363,    1,    1,    1,
        3,    3,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    4,   13,   13,   14,   14,   52,   11,   11,
       15,   15,   15,   16,   16,   16, 1362,    1,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   39,   39,   39,
     1330,    1,    1,   40,   40,   40,   49,   50,    3,   56,
     1303,   62,   49,  183,  184,   56,    1, 1302, 1288,    4,
      184, 1285, 1173,   13, 1163,   14,   52, 1139,   11,    1,
        2,    2,    2,    2, 1103,    2,   83,    2,    2,    2,
     1102, 1099,    2,    2,    2,    2,    2,    2,    2,    2,

        2,   19,  114,   50,  125,   49,   66,  177,   12,   12,
       62,  185,  183,   19,   19,   83,   85,    2,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   66,   19, 1098,
       19,    2,    2,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   19,   19, 1091,   85,    2, 1089,  114, 1060,
      125, 1059, 1056,  177, 1055,   66,   66,  185,   12,    2,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,   27,    7,    7,   82,   28,    7, 1012,
       82,    7,    7,    7,   69,   27,   27,    7,    7,   28,
       28,    7,  187,    7,  255, 1008,  204,   71,   86, 1007,
        7,    7,   27,    7,    7,   82,   28,    7,   69,   82,
        7,    7,    7,  439,   27,   27,    7,    7,   28,   28,
        7,   25,    7,    9,    9,    9,    9,   86,    9,   20,

        9,    9,   71,   69, 1005,  999,   76,   69,  187,   25,
      255,   20,   20,   87,   89,  204,   71,    9,    9,    9,
       90,   25,   25,  101,    9,  439,   20,   76,   20,    9,
        9,   71,    9,   55,    9,   25,    9,    9,   25,   55,
       20,   20,   87,   89,    9,    9,    9,    9,    9,   90,
       25,   25,  101,    9,   74,   76,   76,  102,    9,    9,
      995,    9,   55,    9,  968,    9,    9,  103,  965,  963,
      961,   26,    9,   10,   10,   10,   10,  960,   10,   74,
       10,   10,   55,  210,  959,  957,  102,  954,   77,   26,
      952,   55,  106,   35,  107,  951,  103,   10,   10,   10,

       35,   26,   26,   74,   10,   35,   35,   88,   74,   10,
       10,   88,   10,   67,   10,   26,   10,   10,   26,   68,
       77,  106,   35,  107,   10,   10,   10,   10,   10,   35,
       26,   26,  210,   10,   35,   35,   88,   77,   10,   10,
       88,   10,   65,   10,   68,   10,   10,   67,  935,   77,
      933,   68,   10,   17,   17,   17,   17,   67,   17,  893,
       17,   17,   67,   65,  890,  104,  884,  840,   68,  835,
      829,  828,  822,   68,  104,  818,   67,   17,   91,   17,
       68,   17,  257,   91,  110,   17,   67,   65,   17,   36,
       17,   65,   65,   17,  104,   17,   36,   17,   70,   79,

       17,   36,   36,  104,   17,   17,   17,   91,   17,  276,
       17,   73,   91,  110,   17,  105,   65,   17,   36,   17,
       79,  105,   17,  119,   17,   36,   17,   70,  257,   17,
       36,   36,   17,   18,   18,   18,   18,   70,   18,  817,
       18,   18,   73,   72,  105,  120,  757,   70,   79,   79,
      105,  119,  119,  120,  108,  276,   70,   18,  108,   18,
       73,   18,  109,  751,   72,   18,   70,  109,   18,  127,
       18,   73,   72,   18,  120,   18,  128,   18,   72,  129,
       18,  130,  147,  108,   18,   18,   18,  108,   18,  278,
       18,  109,   72,   72,   18,  130,  109,   18,  127,   18,

      750,   72,   18,  746,   18,  128,   18,   72,  129,   18,
      130,  147,   18,   21,   21,   21,   21,  136,   21,   21,
       21,   21,  742,  693,  130,   21,   21,   21,   21,   21,
       21,   21,   21,   21,  126,  278,  686,  681,  126,  148,
      146,  149,   53,  115,   21,  146,   21,  115,   53,  136,
       21,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       21,  149,  115,  126,   21,   21,  136,  126,  148,  146,
      149,   54,  115,   21,  146,   21,  115,   54,  136,   21,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   21,
      149,   53,   21,   22,   22,   22,   22,  140,   22,   22,

       22,   22,  679,  368,  618,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   84,  603,  584,  579,  573,  150,
       54,  121,   63,  140,   22,   84,   22,  121,   84,  544,
       22,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       22,  121,  536,   84,   22,   22,  140,  134,  150,  368,
      121,   64,  140,   22,   84,   22,  121,   84,   75,   22,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   22,
       80,   63,   22,   23,   23,   23,   23,  137,   23,   23,
       23,   23,  134,   75,   93,   93,   93,   93,   93,   93,
       93,   93,   93,  453,  151,  435,  134,  376,   75,   80,

       64,  152,  137,  153,   23,   80,   23,   75,  111,  163,
       23,  134,   75,  211,  364,  182,  350,  268,  254,   80,
       23,  182,  122,  151,   23,   23,  137,   75,   80,  175,
      152,  137,  153,   23,   80,   23,  122,  111,  163,   23,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   23,
      122,  122,   23,   24,   24,   24,   24,  111,   24,   24,
       24,   24,  211,  141,  182,  122,  111,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  135,  138,  309,  164,
      174,  156,  172,  309,   24,  142,   24,  139,  141,  165,
       24,  118,  118,  118,  118,  118,  118,  118,  118,  118,

       24,  171,  370,  113,   24,   24,  156,  117,  164,  154,
      135,  138,  141,   24,  142,   24,  139,  141,  165,   24,
      112,  155,  139,  166,  309,  135,  138,   96,  123,   24,
      156,  118,   24,   29,  142,  156,  139,   92,  154,  135,
      138,  372,   59,  142,  123,  139,   51,  123,  370,  123,
      157,  139,  166,   29,  168,  155,   29,   29,  154,   29,
       29,  123,  123,  169,   29,   29,   29,  154,  170,   29,
      155,   29,   29,  123,   47,  157,  123,  158,  123,  179,
      602,  197,   29,  168,  155,   29,   29,  372,   29,   29,
      123,  123,  169,   29,   29,   29,   45,  170,   29,  157,

       29,   29,   31,   31,  157,  197,  158,    0,  179,   31,
       31,  158,   31,   31,   31,   31,   31,   31,   31,   31,
       31,  377,  602,  218,   31,  167,  158,   31,  374,   31,
      197,  167,  198,   31,  197,  158,   31,   31,   31,  219,
      158,  199,   31,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  218,   31,  167,  193,   31,  198,   31,    0,
      167,  193,   31,    0,    0,   31,   31,   31,  219,  375,
      377,   31,   33,  220,  374,  375,  221,  199,   33,   33,
      222,  198,  202,   33,   33,   33,  198,  193,   33,  200,
      199,   33,  144,  144,  144,  144,  144,  144,  144,  144,

      144,   33,  220,  203,  193,  221,  199,   33,   33,  222,
      200,  207,   33,   33,   33,    0,  193,   33,  375,    0,
       33,   34,  202,  378,  203,  389,  224,   34,   34,  205,
      428,  202,   34,   34,   34,  207,    0,   34,  200,  200,
       34,  145,  145,  145,  145,  145,  145,  145,  145,  145,
       34,  202,  203,  203,  206,  224,   34,   34,  209,  208,
      207,   34,   34,   34,  207,  201,   34,  430,  205,   34,
       37,   37,  378,   37,  389,    0,  428,  213,  205,    0,
       37,   37,   37,   37,   37,   37,   37,   37,   37,  225,
      209,   37,  208,   37,  201,  206,   37,  205,  213,   37,

       37,  201,  223,  206,   37,  223,  226,  209,  208,   37,
        0,   37,   37,  430,  201,    0,    0,  227,  225,  209,
       37,  208,   37,  201,  206,   37,  213,  213,   37,   37,
      201,  223,    0,   37,  223,  226,    0,    0,   37,  212,
       37,   37,   41,   41,   41,   41,  227,   41,    0,   41,
       41,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      492,  216,  212,   41,  214,   41,  161,  161,  161,  161,
      161,  161,  161,  161,  161,    0,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  214,  228,  229,  212,  191,
      216,  212,   41,   41,   41,  191,    0,  230,  191,  191,

      191,  191,  191,  191,  191,  191,  191,    0,  231,  492,
      216,    0,  232,  214,  214,  228,  229,    0,  240,  216,
      552,   41,   42,   42,   42,   42,  230,   42,    0,   42,
       42,    0,    0,    0,  553,  656,  215,  231,  191,  242,
      192,  232,  243,   42,  194,   42,  192,  240,  244,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  234,  234,
      234,  234,  234,  234,  234,  234,  234,    0,  242,  552,
      215,  243,   42,   42,   42,  241,  241,  244,  245,  246,
      247,  195,  248,  553,  656,  215,    0,  659,  540,  192,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  215,

        0,   42,   43,   43,  241,  241,  249,  245,  246,  247,
      272,  248,   43,   43,   43,   43,   43,   43,   43,   43,
       43,  542,    0,    0,    0,    0,    0,  250,   43,  196,
      195,  251,  252,  253,  540,  249,  659,  272,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  250,   43,   44,   44,
      251,  252,  253,  267,  264,  259,  272,  542,   44,   44,
       44,   44,   44,   44,   44,   44,   44,  258,  196,  259,
      262,  264,  270,  279,   44,  258,  267,  273,  274,  263,
      262,  266,  267,  264,  259,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  263,  266,  258,  273,  274,  262,
      265,  270,  279,   44,  132,  280,  265,  132,  263,  132,
      266,  132,  132,  132,  281,  265,  132,  132,  282,  284,
      285,  288,  132,  132,  132,  260,  273,  274,    0,  265,
      270,    0,    0,  132,  280,  265,  132,  289,  132,    0,
      132,  132,  132,  281,  271,  132,  132,  282,  284,  285,
      288,  132,  132,  132,  133,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  271,    0,  289,    0,  133,  133,
      283,    0,  287,  133,  133,  290,  283,  271,  287,  291,
      292,  133,  293,  294,  296,  133,  644,  133,  297,  133,

      133,  651,  133,  271,  133,  261,  133,  702,  133,  283,
      133,  287,  133,  133,  290,  283,  271,  287,  291,  292,
      133,  293,  294,  296,  133,  295,  133,  297,  133,  133,
      298,  133,  299,  133,    0,  133,  295,  133,  159,  159,
      295,  323,  644,  159,  159,    0,    0,  651,  301,    0,
      298,  159,  299,  300,  295,  159,  702,  159,    0,  159,
      159,  311,  159,  308,  159,  295,  159,  301,  159,  295,
      323,  302,  159,  159,  305,  301,  298,  303,  299,  298,
      159,  299,  304,  300,  159,  311,  159,  300,  159,  159,
      308,  159,  300,  159,  301,  159,  301,  159,  306,  300,

      303,  307,  302,  310,  301,  314,  312,  304,  315,  308,
      311,  313,  300,  305,  311,  316,  300,  302,  318,  308,
      305,  300,  306,  303,  307,  784,    0,  317,  304,  303,
      310,  302,  313,  703,  319,  710,  304,  324,    0,  316,
      325,  315,  305,  326,  306,  314,  327,  307,  312,  310,
      317,  306,  330,  307,  314,  312,  331,  315,  319,  310,
      313,  313,  318,    0,  316,    0,  324,  318,  316,  325,
      315,  784,  326,    0,  314,  327,  317,  312,    0,  317,
        0,  330,  703,  319,  710,  331,    0,  319,    0,  335,
      338,  318,  320,  320,  320,  320,  320,  320,  320,  320,

      320,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  328,
      329,  328,  332,  337,  334,  333,  339,  329,  335,  338,
      336,  340,  341,  343,  342,  344,  341,  345,  335,  338,
      346,  341,  342,    0,    0,    0,  334,  337,  328,  329,
      328,  332,  333,  336,  347,  339,  329,  335,  338,  348,
      340,  341,  343,  342,  344,  341,  345,  349,  351,  346,
      341,  342,  337,  334,  333,  334,  337,    0,    0,  336,
        0,  333,  336,  347,    0,    0,    0,  354,  348,  355,
      356,  357,  358,  359,  360,  361,  349,  351,  352,  352,

      352,  352,  352,  352,  352,  352,  352,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  354,  362,  355,  356,
      357,  358,  359,  360,  361,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  371,  379,    0,  380,  381,  397,
      382,  383,  384,  385,  398,  386,  362,    0,    0,  399,
      388,  392,    0,  400,    0,    0,  379,    0,  387,  380,
        0,    0,  394,  371,  383,  393,  395,  386,  397,  384,
      396,    0,  401,  398,    0,  388,  392,  381,  399,  402,
        0,  382,  400,  385,  379,  379,  380,  381,  380,  382,
      383,  384,  385,  383,  386,  395,  386,  387,  384,  388,

      392,  401,  394,  393,  388,  392,  381,  387,  402,  396,
      382,  394,  385,  403,  393,  395,  404,  405,  406,  396,
      407,  408,  409,  410,  395,  411,  387,  412,  413,  414,
        0,  394,  393,  415,  416,  417,  418,  419,  396,  420,
      421,  422,  403,  423,  424,  404,  405,  406,  425,  407,
      408,  409,  410,  426,  427,    0,  412,  413,  414,  411,
      431,  434,  415,  416,  417,  418,  419,  411,  420,  421,
      422,  432,  423,  424,  433,  431,  436,  425,  437,  434,
      432,  438,  426,  427,  440,  441,  444,  433,  411,  431,
      434,  445,  442,  433,  446,  436,  411,  437,  438,  443,

      432,  447,  433,  433,  444,  436,  448,  437,  442,  449,
      438,  445,  441,  450,  451,  443,  433,  452,  440,  448,
      454,  455,  433,  446,  456,  448,  457,  458,  459,  460,
      447,  461,  468,  444,  463,  448,  464,  442,  449,  465,
      445,  441,  450,  451,  443,  466,  452,  440,  448,  454,
      455,  462,  467,  456,  448,  457,  458,  459,  460,  468,
      461,  462,  469,  463,  470,  464,  471,  473,  465,  472,
      476,  474,    0,  475,  466,    0,  477,  479,  468,    0,
      462,  467,  480,    0,    0,    0,    0,    0,  468,  469,
      462,  472,  475,  478,    0,  811,    0,  490,  479,  482,

      471,  477,  470,  474,  473,  484,  483,  476,  469,  485,
      470,  491,  471,  473,  490,  472,  476,  474,  469,  475,
      472,  475,  477,  479,  480,  481,  478,  479,  480,  471,
      477,  470,  474,  473,  485,  482,  476,  486,  489,  478,
      483,  514,  487,  482,  811,  482,  490,  481,  488,  515,
      484,  491,  483,  480,  484,  478,  516,    0,  485,  517,
      491,  486,    0,  485,  482,  518,  519,  487,    0,  483,
      514,  481,  482,  488,  520,    0,  481,  489,  515,  484,
      491,    0,    0,    0,    0,  516,  486,  489,  517,    0,
      486,  487,    0,    0,  518,  519,  487,  488,  510,    0,

      509,    0,  488,  520,  512,  844,  489,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  508,  509,  511,  510,  512,  521,
      513,  522,  523,  524,  525,  526,  512,  510,  527,  509,
      528,  529,  530,  512,  844,  531,    0,  532,  528,  533,
        0,  511,  508,  534,  509,  513,  510,  512,  521,  535,
      522,  523,  524,  525,  526,  512,  537,  527,  546,  528,
      529,  530,    0,  508,  531,  511,  532,  528,  533,  513,
      511,  508,  534,  543,  513,  548,  547,  549,  535,  551,

      546,  554,  550,  555,  561,  537,  539,  539,  539,  539,
      539,  539,  539,  539,  539,    0,  560,  539,  562,  556,
      557,  558,  543,    0,  559,  563,  554,  546,  547,  546,
      550,  549,  564,  561,    0,  548,    0,  565,  551,    0,
        0,    0,  555,  557,  548,  547,  549,  562,  551,  566,
      554,  550,  555,  556,  563,  554,  560,  547,  567,  550,
      549,  564,  558,  559,  548,  560,  565,  551,  556,  557,
      558,  555,  557,  559,  568,  569,  570,  571,  566,  572,
      574,  576,  556,  577,  578,  560,  580,  567,  581,  582,
      585,  558,  559,  586,  587,  588,  589,  590,  591,  592,

      593,    0,  594,  568,  569,  570,  571,  596,  572,  574,
      576,  595,  577,  578,  598,  580,  596,  581,  582,  585,
      594,  597,  586,  587,  588,  589,  590,  591,  592,  593,
      595,  594,  604,  599,  600,  597,  596,  601,  605,  598,
      595,  608,  600,  598,  599,  601,  606,  607,  609,  610,
      597,  611,  612,  613,  614,  615,  616,  617,  605,  620,
      621,  608,  599,  600,  622,  623,  601,  606,  624,  607,
      604,  625,  626,  627,  628,  629,  630,  609,  610,  624,
      611,  612,  613,  614,  615,  616,  617,  605,  620,  621,
      608,  631,  632,  622,  623,  633,  606,  624,  607,  604,

      625,  626,  627,  628,  629,  630,  609,  634,  624,  635,
      636,  637,  638,  639,  640,  643,  641,  670,    0,  642,
      631,  632,  648,    0,  633,  671,  646,    0,    0,  645,
        0,    0,  647,    0,  637,  641,  634,  640,  658,    0,
      639,  646,  638,  652,  642,  648,  670,  635,  636,  658,
        0,  653,  643,  655,  671,  635,  636,  637,  638,  639,
      640,  643,  641,  637,  641,  642,  640,  645,  648,  639,
      647,  638,  646,  642,  648,  645,  635,  636,  647,  649,
      650,  643,  652,  653,  654,  657,  672,  658,  664,  673,
      652,  655,  652,  674,  675,  676,  645,    0,  649,  647,

      653,  677,  655,    0,    0,    0,    0,  650,    0,  654,
      657,  652,  653,  785,    0,  672,    0,    0,  673,    0,
      655,    0,  674,  675,  676,  649,  650,  649,  666,    0,
      677,    0,  664,  654,  657,  663,  650,  664,  654,  657,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  665,  785,
      663,  664,  666,  667,  668,  678,  680,  669,  682,  683,
      684,  685,  687,  688,  689,  690,  692,  666,  706,  665,
      687,  696,  698,  700,  663,  668,  704,  846,  667,  663,
      699,  666,  669,  701,  678,  680,  712,  682,  683,  684,

      685,  687,  688,  689,  690,  692,  707,  665,  665,  705,
      696,  698,  667,  668,  668,  699,  669,  667,  706,  713,
      701,  669,  700,  704,  714,  712,  708,  706,  709,    0,
      715,  698,  700,  716,  707,  704,  846,  717,  718,  699,
      698,  719,  701,  720,  699,  705,    0,  706,  713,  701,
      722,  700,  704,  714,  724,  707,  709,  725,  705,  715,
      723,  726,  716,  707,  727,  708,  717,  718,  723,  728,
      719,  729,  720,  730,  705,  708,  731,  709,  728,  722,
      732,  733,  728,  724,  734,  709,  725,  735,  736,  723,
      726,  737,  738,  727,  708,  739,  740,  723,  728,  744,

      729,  753,  730,  745,  743,  731,  747,  728,  744,  732,
      733,  728,  743,  734,  748,  754,  735,  736,  752,  749,
      737,  738,  745,  755,  739,  740,  756,  759,  744,  748,
      747,  745,  745,  743,  749,  747,  753,  760,  752,  761,
      763,  764,  765,  748,  768,  755,  769,  770,  749,  771,
      754,  745,  772,  773,  774,  756,  759,  776,  761,  777,
      778,  781,  782,  783,  786,  753,  760,  752,  761,  763,
      764,  765,  787,  768,  755,  769,  770,  792,  771,  754,
      788,  772,  773,  774,  756,  789,  776,  761,  777,  778,
      781,  782,  783,  791,  790,  795,  792,  794,  789,  787,

      786,  796,  797,  803,  795,    0,    0,  819,  798,    0,
      786,  801,  799,  788,    0,    0,  791,  804,  787,  805,
      794,    0,    0,  792,    0,  792,  788,    0,  787,  786,
      790,  789,    0,    0,  812,  797,  819,  814,  803,  791,
      790,  795,  788,  794,  798,  791,  799,  796,  797,  794,
      806,  801,  803,  805,  798,  804,  810,  813,  799,  790,
      801,  812,  815,  820,  797,    0,  804,  803,  805,  802,
      802,  802,  802,  798,  802,  799,  802,  802,  807,  816,
      801,  814,  805,  812,  804,  821,  814,  806,  823,  807,
      812,  848,  820,  824,  815,  810,  825,  813,  849,  806,

      827,  830,  831,  832,  834,  810,  813,  836,  837,  838,
      814,  815,  839,  816,  821,  841,  806,  823,  842,  843,
      802,  802,  824,  815,  810,  825,  813,  807,  816,  827,
      830,  831,  832,  834,  845,  847,  836,  837,  838,    0,
      848,  839,  816,  843,  841,  850,  851,  849,  802,  852,
      842,  853,  854,  856,    0,    0,  847,  857,  858,  845,
      859,  860,  861,  862,  863,    0,    0,  842,  843,  864,
      865,  851,  843,  866,  868,  869,  870,  871,  852,  842,
      853,  854,  856,  845,  847,  847,  857,  858,  845,  859,
      860,  861,  862,  863,  850,  851,  872,  874,  864,  865,

      851,  875,  866,  868,  869,  870,  871,  876,  877,  878,
      879,  880,  881,  882,  883,  885,    0,  888,  895,  891,
      886,  887,    0,    0,  885,  872,  874,  896,  892,  883,
      875,  898,  899,  889,  894,  888,  876,  877,  878,  879,
      880,  881,  882,  883,  885,  886,  888,  887,  892,  886,
      887,  889,  891,  895,  894,  900,  896,  901,  902,  904,
      898,  899,  889,  905,  906,  907,  908,  909,  911,  912,
      913,  914,  916,  919,  921,  923,  924,  892,  922,  925,
      929,  891,  895,  894,  900,  920,  901,  902,  904,  922,
      926,  931,  905,  906,  907,  908,  909,  911,  912,  913,

      914,  916,  927,  930,  925,  919,  920,  932,  930,    0,
      936,  927,  926,  939,  941,  937,  943,  938,  923,  919,
      921,  923,  924,  937,  922,  925,  929,  946,    0,  944,
        0,  920,  940,  925,  919,  920,  926,  931,  938,  971,
      940,  926,  945,  942,  949,  932,  936,  923,  927,  930,
      934,  934,  934,  934,  941,  934,  932,  934,  934,  936,
      950,  953,  939,  941,  937,  943,  938,  938,  942,  944,
      955,  945,  972,  949,  932,  936,  946,  956,  944,  962,
      964,  940,  966,  941,  969,  970,  975,  973,  971,  950,
      953,  945,  942,  974,  976,  977,  978,  942,  944,  955,

      945,  934,  934,  980,  981,    0,  956, 1033,  962,  964,
      973,  966,  982,  969,  970,  975,  983,  974,  984,  985,
      986,  972,  988,  976,  977,  978,  989,  990,  991,  934,
      992,  993,  980,  981,  970,  994,  973,  996,  997,  973,
     1000,  982,  974,  970, 1002,  983,  974,  984,  985,  986,
     1003,  988, 1004, 1033, 1009,  989,  990,  991, 1006,  992,
      993, 1004, 1013, 1010,  994, 1011,  996,  997, 1003, 1000,
     1014, 1016, 1006, 1002, 1009, 1019, 1020, 1022, 1023, 1003,
     1024, 1004, 1010, 1026, 1011, 1027, 1028, 1006, 1029, 1030,
     1034, 1013, 1038, 1037, 1120, 1036,    0, 1031, 1037, 1014,

     1016, 1042, 1040, 1009, 1019, 1020, 1022, 1023, 1030, 1024,
     1050, 1010, 1026, 1011, 1027, 1028, 1031, 1029, 1036, 1044,
     1045, 1046,    0, 1040, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1052, 1048, 1030, 1034, 1030, 1038, 1037,
     1120, 1036, 1042, 1031, 1044, 1031, 1045, 1036, 1040, 1047,
     1042, 1049, 1040, 1046, 1051, 1053, 1058, 1062, 1064, 1050,
        0,    0, 1052, 1066, 1067, 1068, 1074, 1048, 1044, 1045,
     1046, 1042, 1075, 1044, 1072, 1045, 1073, 1047, 1051,    0,
        0, 1071, 1046, 1048, 1053, 1058, 1062, 1064, 1047, 1047,
     1049,    0, 1066, 1067, 1068, 1074, 1048, 1076, 1047, 1072,

     1049, 1075,    0, 1051, 1077, 1078, 1047, 1051, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1047, 1047, 1049,
     1069, 1071, 1081, 1072, 1082, 1073, 1076, 1083, 1072, 1084,
     1071, 1069, 1069, 1077, 1078, 1085, 1086, 1087, 1088, 1090,
     1093, 1094, 1095, 1100, 1101, 1106, 1110, 1111, 1112, 1069,
     1071, 1081, 1113, 1082, 1100, 1115, 1083, 1116, 1084, 1117,
     1069, 1069, 1121, 1101, 1085, 1086, 1087, 1088, 1090, 1093,
     1094, 1095, 1100, 1123, 1106, 1110, 1111, 1112, 1124, 1126,
     1128, 1113, 1129, 1133, 1115,    0,    0,    0, 1132, 1127,
        0,    0, 1101, 1130,    0, 1116, 1121, 1117,    0,    0,

        0, 1124,    0, 1116, 1128, 1117, 1123, 1129, 1121, 1125,
     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1127, 1123,
     1125, 1131, 1130, 1132, 1116, 1121, 1117, 1124, 1126, 1128,
     1124, 1129, 1133, 1128, 1134, 1123, 1129, 1132, 1127, 1135,
     1136, 1151, 1130, 1140, 1142, 1143, 1131, 1127, 1146, 1147,
     1148, 1130, 1132, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1149, 1134, 1144, 1150, 1154, 1152, 1135, 1136,
     1131, 1155, 1140, 1142, 1143, 1131, 1156, 1146, 1147, 1148,
     1157, 1158, 1160, 1134, 1162, 1164, 1151, 1187, 1165, 1166,
     1151, 1149, 1134, 1169, 1150, 1154, 1171, 1174, 1172, 1175,

     1155, 1176, 1177, 1183, 1184, 1156, 1180, 1181, 1185, 1157,
     1158, 1160, 1187, 1162, 1164, 1151, 1152, 1165, 1166,    0,
     1190, 1188, 1169, 1172, 1189, 1171, 1174, 1172, 1175, 1194,
     1176, 1177, 1191, 1180, 1181, 1184, 1187, 1192, 1193, 1183,
        0, 1187, 1188, 1195, 1206, 1189, 1197,    0, 1185, 1183,
     1184, 1198, 1180, 1181, 1199, 1201, 1202, 1185, 1194, 1203,
     1204, 1192, 1180, 1181, 1184, 1205, 1190, 1209, 1183, 1190,
     1188, 1188, 1195, 1189, 1189, 1197, 1191, 1185, 1193, 1210,
     1198, 1191, 1211, 1199, 1201, 1202, 1192, 1193, 1203, 1204,
     1192, 1213, 1214, 1206, 1205, 1190, 1209, 1217, 1218, 1219,

     1220, 1221, 1222, 1223, 1224, 1191, 1225, 1193, 1210, 1226,
     1227, 1211, 1229, 1228, 1231, 1232, 1230,    0, 1233,    0,
     1213, 1214, 1237,    0, 1220,    0, 1217, 1218, 1219, 1220,
     1221, 1222, 1223, 1224,    0, 1235, 1236, 1227, 1234, 1232,
     1238, 1239, 1226, 1233, 1240,    0, 1225, 1228, 1230,    0,
     1241, 1237, 1225, 1229, 1231, 1226, 1227, 1242,    0, 1228,
     1243, 1229, 1244, 1231, 1232, 1230, 1227, 1233, 1232, 1238,
     1239, 1226, 1233, 1240, 1235, 1225, 1228, 1230, 1234, 1241,
     1245, 1236, 1229, 1231, 1235, 1236, 1242, 1234, 1246, 1243,
     1247, 1244, 1248, 1249, 1251, 1252, 1253, 1260, 1256, 1257,

     1258, 1255, 1259, 1235, 1261, 1262, 1263, 1234, 1264, 1245,
     1236, 1265, 1268, 1266, 1267, 1272, 1273, 1246, 1274, 1247,
     1260, 1248, 1249, 1251, 1252, 1253, 1255, 1256, 1257, 1258,
     1255, 1259, 1269, 1270, 1271, 1265, 1261, 1262, 1266, 1267,
     1275, 1276, 1263, 1260, 1272, 1273, 1264, 1274, 1277, 1260,
     1261, 1262, 1263, 1293, 1294, 1278, 1279, 1264, 1270, 1282,
     1265, 1268, 1266, 1267, 1265, 1261, 1262, 1266, 1267, 1275,
     1276, 1263, 1283, 1284, 1286, 1264, 1287, 1277, 1291, 1295,
     1298, 1269, 1270, 1271, 1278, 1279, 1296, 1270, 1282, 1304,
     1297, 1299, 1300, 1305, 1301, 1306, 1321, 1307, 1309, 1293,

     1294, 1283, 1284, 1286, 1310, 1287, 1312, 1291, 1314, 1296,
        0,    0, 1320, 1316, 1323, 1297, 1324, 1295, 1304, 1298,
     1337, 1327, 1305, 1328, 1306, 1295, 1307, 1309, 1319, 1298,
     1300, 1301, 1296, 1310,    0, 1312, 1336, 1314, 1296, 1297,
     1299, 1300, 1316, 1301, 1297, 1321, 1295, 1319, 1298, 1320,
     1327, 1332, 1328, 1322, 1334, 1338, 1336, 1337, 1320, 1300,
     1301, 1322, 1339, 1323, 1340, 1324, 1337, 1341, 1342, 1343,
     1344, 1345, 1346, 1353, 1319,    0, 1319, 1347, 1320, 1348,
     1332, 1349, 1336, 1334, 1350, 1336, 1337, 1359, 1352, 1338,
     1354, 1339, 1361, 1340, 1345, 1353, 1341, 1342, 1343, 1355,

     1344, 1360, 1322, 1356, 1338,    0, 1347, 1346, 1348, 1357,
     1349, 1352,    0, 1350,    0,    0, 1344, 1345, 1338, 1353,
        0, 1346,    0, 1345, 1353,    0,    0,    0, 1355, 1344,
     1354,    0, 1356, 1359, 1352,    0, 1346,    0, 1357, 1354,
     1352, 1361,    0,    0,    0,    0,    0, 1360,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1354,
     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1375, 1375, 1375, 1375, 1375,

     1375, 1375, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1381, 1381,    0,
     1381, 1381, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1383,
     1383,    0, 1383, 1383, 1384, 1384,    0, 1384, 1384, 1385,
        0, 1385, 1385, 1386,    0, 1386, 1387, 1387, 1387, 1387,
     1387, 1387, 1388,    0, 1388, 1388, 1388, 1388, 1388, 1389,
        0, 1389, 1390,    0, 1390, 1390, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1392, 1392, 1392, 1393,    0, 1393, 1394,

     1394, 1394, 1394, 1394, 1394, 1394, 1395,    0, 1395, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1402,    0, 1402, 1402, 1403,    0,
     1403, 1404,    0, 1404, 1404, 1405,    0, 1405, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "imap-tokenizer.l"
#line 2 "imap-tokenizer.l"
/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2008 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

/* This is a flex scanner. Use flex to create the actual scanner from imap-tokenizer.l.
 * Do not modify the scanner imap-tokenizer.cpp itself, modify imap-tokenizer.l instead
 * and regenerate the scanner.
 *
 * To generate the scanner, use:
 *   flex imap-tokenizer.l
 *
 * If you want debug output (very verbose!), use:
 *   flex -d imap-tokenizer.l
 */

#include "adjunct/m2/src/backend/imap/imap-parseelements.h"
#include "adjunct/m2/src/backend/imap/imap-parse.hpp"
#include "adjunct/m2/src/engine/engine.h"
#include "adjunct/m2/src/engine/indexer.h"
#include "adjunct/m2/src/util/parser.h"
#include "adjunct/desktop_util/string/hash.h"

typedef YYSTYPE IMAPTokenType;
#define YY_EXTRA_TYPE IncomingParser<IMAPTokenType>*

#define YY_NO_UNISTD_H

// Redefine the input macro to copy up to max_size characters from the IncomingParser into buf.
// result is the number of characters read. buf is not null-terminated.
#define YY_INPUT(buf,result,max_size) IMAP4get_extra(yyscanner)->GetParseInput(buf, result, max_size)

// Redefine checking for end of input
#define YY_SKIP_YYWRAP
#define IMAP4wrap(yyscanner) !IMAP4get_extra(yyscanner)->HasInput()

// Helper macro for resetting the state (popping all states)
#define RESET_STATE while (YY_START != INITIAL) { yy_pop_state(yyscanner); }

// Enable debugging when asked
#ifdef FLEX_DEBUG
# define SET_DEBUG IMAP4set_debug(1, yyscanner)
#else
# define SET_DEBUG ((void)0)
#endif

// Helper functions go here 
YY_EXTRA_TYPE IMAP4get_extra (yyscan_t yyscanner); 
namespace ImapTokenizer 
{ 
    /** Create a new ImapUnion in yylval->generic that contains a copy of the specified string with specified 
      * length 
      * @param str Pointer to a char (C string), doesn't have to be NUL-terminated 
      * @param len Length of string to copy 
      * @param yylval Where to put result 
      * @param yyscanner This tokenizer 
      */ 
    void CopyText(const char* str, unsigned len, YYSTYPE* yylval, yyscan_t yyscanner) 
    { 
        yylval->generic = IMAP4get_extra(yyscanner)->AddElement(new ImapUnion(str, len)); 
        if (!yylval->generic || (len > 0 && !yylval->generic->m_val_string)) 
        { 
            yy_fatal_error("Out of memory!", yyscanner); 
        } 
    } 
 
    /** Create a new ImapUnion in yylval->generic that contains a copy of the specified quoted string with specified 
      * length. Unquotes the string. 
      * @param str Pointer to a char (C string), doesn't have to be NUL-terminated, with a quoted string 
      * @param len Length of string to copy 
      * @param yylval Where to put result 
      * @param yyscanner This tokenizer 
      */ 
    void CopyQuotedString(const char* str, unsigned len, YYSTYPE* yylval, yyscan_t yyscanner) 
    { 
        CopyText("", len - 2, yylval, yyscanner); 
        char* target = yylval->generic->m_val_string; 
 
        for (int i = 1; i < (int)len - 1; i++) 
        { 
            if (str[i] == '\\' && str[i-1] != '\\') 
                continue; 
            *target++ = str[i]; 
        } 
        *target = '\0'; 
    } 
}; 
using namespace ImapTokenizer; 






















#line 2008 "imap-tokenizer.cpp"

#define INITIAL 0
#define cont 1
#define untagged 2
#define tagged 3
#define resp_text 4
#define number_code 5
#define unknown_code 6
#define text 7
#define capability 8
#define badcharset 9
#define flag 10
#define ex_flag 11
#define mbx_list 12
#define mailbox_data 13
#define fetch 14
#define date 15
#define status 16
#define mailbox 17
#define section 18
#define literal 19
#define header_fields 20
#define vanished 21

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int IMAP4lex_init (yyscan_t* scanner);

int IMAP4lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int IMAP4lex_destroy (yyscan_t yyscanner );

int IMAP4get_debug (yyscan_t yyscanner );

void IMAP4set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE IMAP4get_extra (yyscan_t yyscanner );

void IMAP4set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *IMAP4get_in (yyscan_t yyscanner );

void IMAP4set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *IMAP4get_out (yyscan_t yyscanner );

void IMAP4set_out  (FILE * out_str ,yyscan_t yyscanner );

int IMAP4get_leng (yyscan_t yyscanner );

char *IMAP4get_text (yyscan_t yyscanner );

int IMAP4get_lineno (yyscan_t yyscanner );

void IMAP4set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * IMAP4get_lval (yyscan_t yyscanner );

void IMAP4set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int IMAP4wrap (yyscan_t yyscanner );
#else
extern int IMAP4wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state (int new_state ,yyscan_t yyscanner);
    
    static void yy_pop_state (yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int IMAP4lex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int IMAP4lex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 140 "imap-tokenizer.l"

	SET_DEBUG;

	IncomingParser<YYSTYPE>* parser = IMAP4get_extra(yyscanner);

	if (parser->NeedsReset())
	{
		RESET_STATE;
		parser->SetNeedsReset(FALSE);
	}

#line 2276 "imap-tokenizer.cpp"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			IMAP4ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				IMAP4_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		IMAP4_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1370 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1369 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 152 "imap-tokenizer.l"
yy_push_state(cont, yyscanner); return IM_CONT; /* hack: {SP} optional to handle Groupwise server, bug #318905 */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 153 "imap-tokenizer.l"
yy_push_state(untagged, yyscanner); return IM_UNTAGGED;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 154 "imap-tokenizer.l"
yy_push_state(tagged, yyscanner); yylval->number = Hash::String(yytext, yyleng - 1); return IM_TAG;
	YY_BREAK


case 4:
YY_RULE_SETUP
#line 158 "imap-tokenizer.l"
return IM_ALERT;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 159 "imap-tokenizer.l"
yy_push_state(badcharset, yyscanner); return IM_BADCHARSET;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 160 "imap-tokenizer.l"
return IM_PARSE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 161 "imap-tokenizer.l"
yy_push_state(ex_flag, yyscanner); return IM_PERMANENTFLAGS;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 162 "imap-tokenizer.l"
return IM_READONLY;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 163 "imap-tokenizer.l"
return IM_READWRITE;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 164 "imap-tokenizer.l"
return IM_TRYCREATE;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 165 "imap-tokenizer.l"
return IM_NOMODSEQ;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 166 "imap-tokenizer.l"
return IM_CLOSED;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 167 "imap-tokenizer.l"
return IM_COMPRESSIONACTIVE;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 168 "imap-tokenizer.l"
yy_push_state(number_code, yyscanner); return IM_UIDNEXT;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 169 "imap-tokenizer.l"
yy_push_state(number_code, yyscanner); return IM_UIDVALIDITY;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 170 "imap-tokenizer.l"
yy_push_state(number_code, yyscanner); return IM_UNSEEN;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 171 "imap-tokenizer.l"
yy_push_state(number_code, yyscanner); return IM_APPENDUID;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 172 "imap-tokenizer.l"
yy_push_state(number_code, yyscanner); return IM_COPYUID;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 173 "imap-tokenizer.l"
yy_push_state(number_code, yyscanner); return IM_HIGHESTMODSEQ;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 174 "imap-tokenizer.l"
yy_push_state(number_code, yyscanner); return IM_MODIFIED;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 175 "imap-tokenizer.l"
yy_push_state(capability, yyscanner); return IM_CAPABILITY;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 176 "imap-tokenizer.l"
/* do nothing, some servers put this in front of appenduid/copyuid */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 177 "imap-tokenizer.l"
yy_push_state(unknown_code, yyscanner); // Code we don't know about; Don't copy, we don't care
	YY_BREAK


case 24:
YY_RULE_SETUP
#line 181 "imap-tokenizer.l"
yylval->number=op_strtoui64(yytext, 0, 10); return IM_NZNUMBER;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 182 "imap-tokenizer.l"
yylval->number=op_strtoui64(yytext, 0, 10); return IM_NUMBER;
	YY_BREAK

case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 185 "imap-tokenizer.l"
/* do nothing */
	YY_BREAK

case 27:
YY_RULE_SETUP
#line 188 "imap-tokenizer.l"
return IM_AUTH_PLAIN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 189 "imap-tokenizer.l"
return IM_AUTH_LOGIN;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 190 "imap-tokenizer.l"
return IM_AUTH_CRAMMD5;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 191 "imap-tokenizer.l"
return IM_COMPRESS_DEFLATE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 192 "imap-tokenizer.l"
return IM_IDLE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 193 "imap-tokenizer.l"
return IM_IMAP4REV1;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 194 "imap-tokenizer.l"
return IM_IMAP4;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 195 "imap-tokenizer.l"
return IM_LITERALPLUS;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 196 "imap-tokenizer.l"
return IM_LOGINDISABLED;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 197 "imap-tokenizer.l"
return IM_NAMESPACE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 198 "imap-tokenizer.l"
return IM_STARTTLS;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 199 "imap-tokenizer.l"
return IM_UIDPLUS;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 200 "imap-tokenizer.l"
return IM_UNSELECT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 201 "imap-tokenizer.l"
return IM_CONDSTORE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 202 "imap-tokenizer.l"
return IM_ENABLE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 203 "imap-tokenizer.l"
return IM_QRESYNC;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 204 "imap-tokenizer.l"
return IM_ID;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 205 "imap-tokenizer.l"
return IM_XLIST;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 206 "imap-tokenizer.l"
return IM_SPECIALUSE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 207 "imap-tokenizer.l"
yylval->generic=NULL; return IM_ATOM; // Don't copy, We don't care if it's unknown
	YY_BREAK


case 47:
YY_RULE_SETUP
#line 211 "imap-tokenizer.l"
yy_push_state(text, yyscanner); // End of code
	YY_BREAK


case 48:
YY_RULE_SETUP
#line 215 "imap-tokenizer.l"
yy_push_state(resp_text, yyscanner);
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 216 "imap-tokenizer.l"
yy_push_state(text, yyscanner); yyless(0);
	YY_BREAK


case 50:
YY_RULE_SETUP
#line 220 "imap-tokenizer.l"
CopyText(yytext, yyleng, yylval, yyscanner); return IM_FREETEXT;
	YY_BREAK

/* flags */

case 51:
YY_RULE_SETUP
#line 225 "imap-tokenizer.l"
return IM_FLAG_RECENT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 226 "imap-tokenizer.l"
return IM_FLAG_ANSWERED;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 227 "imap-tokenizer.l"
return IM_FLAG_FLAGGED;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 228 "imap-tokenizer.l"
return IM_FLAG_DELETED;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 229 "imap-tokenizer.l"
return IM_FLAG_SEEN;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 230 "imap-tokenizer.l"
return IM_FLAG_DRAFT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 231 "imap-tokenizer.l"
return IM_FLAG_STAR;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 232 "imap-tokenizer.l"
return IM_FLAG_EXTENSION;
	YY_BREAK
case 59:
#line 234 "imap-tokenizer.l"
case 60:
#line 235 "imap-tokenizer.l"
case 61:
YY_RULE_SETUP
#line 235 "imap-tokenizer.l"
return IM_FLAG_SPAM;
	YY_BREAK
case 62:
#line 237 "imap-tokenizer.l"
case 63:
#line 238 "imap-tokenizer.l"
case 64:
YY_RULE_SETUP
#line 238 "imap-tokenizer.l"
return IM_FLAG_NOT_SPAM;
	YY_BREAK
case 65:
#line 240 "imap-tokenizer.l"
case 66:
#line 241 "imap-tokenizer.l"
case 67:
#line 242 "imap-tokenizer.l"
case 68:
#line 243 "imap-tokenizer.l"
case 69:
#line 244 "imap-tokenizer.l"
case 70:
YY_RULE_SETUP
#line 244 "imap-tokenizer.l"
return IM_FLAG_IGNORE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 245 "imap-tokenizer.l"
yylval->number = g_m2_engine->GetIndexer()->GetKeywordID(yytext); return IM_KEYWORD;
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 246 "imap-tokenizer.l"
yylval->number = g_m2_engine->GetIndexer()->GetKeywordID(yytext); return IM_KEYWORD;
	YY_BREAK

case 73:
YY_RULE_SETUP
#line 249 "imap-tokenizer.l"
yy_pop_state(yyscanner); return (int) yytext[0];
	YY_BREAK
/* list flags */

case 74:
YY_RULE_SETUP
#line 253 "imap-tokenizer.l"
return IM_LFLAG_NOINFERIORS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 254 "imap-tokenizer.l"
return IM_LFLAG_NOSELECT;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 255 "imap-tokenizer.l"
return IM_LFLAG_MARKED;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 256 "imap-tokenizer.l"
return IM_LFLAG_UNMARKED;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 257 "imap-tokenizer.l"
return IM_LFLAG_HASCHILDREN;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 258 "imap-tokenizer.l"
return IM_LFLAG_HASNOCHILDREN;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 259 "imap-tokenizer.l"
return IM_LFLAG_INBOX;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 260 "imap-tokenizer.l"
return IM_LFLAG_DRAFTS;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 261 "imap-tokenizer.l"
return IM_LFLAG_TRASH;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 262 "imap-tokenizer.l"
return IM_LFLAG_SENT;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 263 "imap-tokenizer.l"
return IM_LFLAG_SPAM;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 264 "imap-tokenizer.l"
return IM_LFLAG_SPAM;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 265 "imap-tokenizer.l"
return IM_LFLAG_FLAGGED;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 266 "imap-tokenizer.l"
return IM_LFLAG_FLAGGED;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 267 "imap-tokenizer.l"
return IM_LFLAG_ALLMAIL;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 268 "imap-tokenizer.l"
return IM_LFLAG_ALLMAIL;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 269 "imap-tokenizer.l"
return IM_LFLAG_ARCHIVE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 270 "imap-tokenizer.l"
return IM_FLAG_EXTENSION;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 271 "imap-tokenizer.l"
yy_push_state(mailbox, yyscanner); return (int) yytext[0];
	YY_BREAK

/* resp-cond-state */

case 93:
YY_RULE_SETUP
#line 276 "imap-tokenizer.l"
yy_push_state(cont, yyscanner); return IM_STATE_OK;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 277 "imap-tokenizer.l"
yy_push_state(cont, yyscanner); return IM_STATE_NO;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 278 "imap-tokenizer.l"
yy_push_state(cont, yyscanner); return IM_STATE_BAD;
	YY_BREAK


case 96:
YY_RULE_SETUP
#line 282 "imap-tokenizer.l"
yy_push_state(text, yyscanner); return IM_BYE;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 283 "imap-tokenizer.l"
yy_push_state(mbx_list, yyscanner); return IM_LIST;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 284 "imap-tokenizer.l"
yy_push_state(mbx_list, yyscanner); return IM_LIST;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 285 "imap-tokenizer.l"
yy_push_state(mbx_list, yyscanner); return IM_LSUB;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 286 "imap-tokenizer.l"
return IM_SEARCH;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 287 "imap-tokenizer.l"
return IM_MODSEQ;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 288 "imap-tokenizer.l"
yy_push_state(status, yyscanner); return IM_STATUS;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 289 "imap-tokenizer.l"
return IM_EXISTS;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 290 "imap-tokenizer.l"
return IM_RECENT;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 291 "imap-tokenizer.l"
return IM_EXPUNGE;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 292 "imap-tokenizer.l"
yy_push_state(vanished, yyscanner); return IM_VANISHED;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 293 "imap-tokenizer.l"
yy_push_state(fetch, yyscanner); return IM_FETCH;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 294 "imap-tokenizer.l"
yy_push_state(capability, yyscanner); return IM_CAPABILITY;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 295 "imap-tokenizer.l"
return IM_NAMESPACE;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 296 "imap-tokenizer.l"
yy_push_state(capability, yyscanner); return IM_ENABLED;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 297 "imap-tokenizer.l"
return IM_ID;
	YY_BREAK


case 112:
YY_RULE_SETUP
#line 301 "imap-tokenizer.l"
return IM_EARLIER;
	YY_BREAK


case 113:
YY_RULE_SETUP
#line 305 "imap-tokenizer.l"
yy_push_state(flag, yyscanner); return IM_FLAGS;
	YY_BREAK


case 114:
YY_RULE_SETUP
#line 309 "imap-tokenizer.l"
return IM_MODSEQ;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 310 "imap-tokenizer.l"
return IM_ENVELOPE;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 311 "imap-tokenizer.l"
yy_push_state(date, yyscanner); return IM_INTERNALDATE;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 312 "imap-tokenizer.l"
return IM_RFC822;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 313 "imap-tokenizer.l"
return IM_RFC822HEADER;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 314 "imap-tokenizer.l"
return IM_RFC822TEXT;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 315 "imap-tokenizer.l"
return IM_RFC822SIZE;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 316 "imap-tokenizer.l"
return IM_BODY;
	YY_BREAK
case 122:
/* rule 122 can match eol */
#line 318 "imap-tokenizer.l"
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 318 "imap-tokenizer.l"
yy_push_state(section, yyscanner); yyless(4); return IM_BODY;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 319 "imap-tokenizer.l"
return IM_BODYSTRUCTURE;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 320 "imap-tokenizer.l"
return IM_UID;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 322 "imap-tokenizer.l"
return IM_MEDIARFC822;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 323 "imap-tokenizer.l"
return IM_APPLICATION;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 324 "imap-tokenizer.l"
return IM_AUDIO;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 325 "imap-tokenizer.l"
return IM_IMAGE;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 326 "imap-tokenizer.l"
return IM_MESSAGE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 327 "imap-tokenizer.l"
return IM_VIDEO;
	YY_BREAK
case 132:
#line 329 "imap-tokenizer.l"
case 133:
#line 330 "imap-tokenizer.l"
case 134:
YY_RULE_SETUP
#line 330 "imap-tokenizer.l"
return IM_ARCHIVE;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 331 "imap-tokenizer.l"
return IM_OGG;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 332 "imap-tokenizer.l"
return IM_BIT7;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 333 "imap-tokenizer.l"
return IM_BIT8;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 334 "imap-tokenizer.l"
return IM_BINARY;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 335 "imap-tokenizer.l"
return IM_BASE64;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 336 "imap-tokenizer.l"
return IM_QUOTEDPRINTABLE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 337 "imap-tokenizer.l"
return IM_TEXT;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 338 "imap-tokenizer.l"
return IM_ALTERNATIVE;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 339 "imap-tokenizer.l"
return IM_HEADER;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 340 "imap-tokenizer.l"
yy_push_state(header_fields, yyscanner); return IM_HEADERFIELDS;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 341 "imap-tokenizer.l"
yy_push_state(header_fields, yyscanner); return IM_HEADERFIELDSNOT;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 342 "imap-tokenizer.l"
return IM_TEXT;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 343 "imap-tokenizer.l"
return IM_MIME;
	YY_BREAK


case 148:
YY_RULE_SETUP
#line 347 "imap-tokenizer.l"
CopyText(yytext, yyleng, yylval, yyscanner); return IM_ATOM;
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 348 "imap-tokenizer.l"
CopyQuotedString(yytext, yyleng, yylval, yyscanner); return IM_SINGLE_QUOTED_CHAR;
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 349 "imap-tokenizer.l"
CopyQuotedString(yytext, yyleng, yylval, yyscanner); return IM_QUOTED_STRING;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 350 "imap-tokenizer.l"
yy_pop_state(yyscanner); return ')';
	YY_BREAK


case 152:
YY_RULE_SETUP
#line 354 "imap-tokenizer.l"
yylval->number=op_strtoui64(yytext, 0, 10); return IM_NZNUMBER;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 355 "imap-tokenizer.l"
yylval->number=op_strtoui64(yytext, 0, 10); return IM_NUMBER;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 356 "imap-tokenizer.l"
yyless(1); return ']';
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 357 "imap-tokenizer.l"
yy_pop_state(yyscanner); return '>';
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 358 "imap-tokenizer.l"
yy_pop_state(yyscanner); return ']';
	YY_BREAK


case 157:
YY_RULE_SETUP
#line 362 "imap-tokenizer.l"
yylval->number = op_atoi(yytext); return IM_DIGIT;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 363 "imap-tokenizer.l"
yylval->number = op_atoi(yytext); return IM_DIGIT2;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 364 "imap-tokenizer.l"
yylval->number = op_atoi(yytext); return IM_DIGIT4;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 365 "imap-tokenizer.l"
yylval->signed_number = op_atoi(yytext); yy_pop_state(yyscanner); return IM_ZONE;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 366 "imap-tokenizer.l"
yylval->signed_number = op_atoi(yytext); yy_pop_state(yyscanner); return IM_ZONE;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 367 "imap-tokenizer.l"
yylval->number = 1; return IM_MONTH;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 368 "imap-tokenizer.l"
yylval->number = 2; return IM_MONTH;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 369 "imap-tokenizer.l"
yylval->number = 3; return IM_MONTH;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 370 "imap-tokenizer.l"
yylval->number = 4; return IM_MONTH;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 371 "imap-tokenizer.l"
yylval->number = 5; return IM_MONTH;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 372 "imap-tokenizer.l"
yylval->number = 6; return IM_MONTH;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 373 "imap-tokenizer.l"
yylval->number = 7; return IM_MONTH;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 374 "imap-tokenizer.l"
yylval->number = 8; return IM_MONTH;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 375 "imap-tokenizer.l"
yylval->number = 9; return IM_MONTH;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 376 "imap-tokenizer.l"
yylval->number = 10; return IM_MONTH;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 377 "imap-tokenizer.l"
yylval->number = 11; return IM_MONTH;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 378 "imap-tokenizer.l"
yylval->number = 12; return IM_MONTH;
	YY_BREAK


case 174:
YY_RULE_SETUP
#line 382 "imap-tokenizer.l"
return IM_MESSAGES;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 383 "imap-tokenizer.l"
return IM_RECENT;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 384 "imap-tokenizer.l"
return IM_UIDNEXT;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 385 "imap-tokenizer.l"
return IM_UIDVALIDITY;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 386 "imap-tokenizer.l"
return IM_UNSEEN;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 387 "imap-tokenizer.l"
return IM_HIGHESTMODSEQ;
	YY_BREAK


case 180:
YY_RULE_SETUP
#line 391 "imap-tokenizer.l"
CopyText("INBOX", 5, yylval, yyscanner); return IM_INBOX;
	YY_BREAK


case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 395 "imap-tokenizer.l"
{
								StreamBuffer<char>& buffer   = parser->GetTempBuffer();
								size_t toappend				 = min(buffer.GetCapacity() - buffer.GetFilled(), (size_t)yyleng);

								// Append as much as possible to the buffer
								buffer.Append(yytext, toappend);

								// Return unused part to the stack
								yyless(toappend);

								// Check if we're done with this literal
								if (buffer.GetFilled() == buffer.GetCapacity())
								{
									yylval->generic = parser->AddElement(OP_NEW(ImapUnion,(0)));
									if (!yylval->generic)
										YY_FATAL_ERROR("Out of memory!");
									yylval->generic->m_length     = buffer.GetCapacity();
									yylval->generic->m_val_string = buffer.Release();
									yy_pop_state(yyscanner);
									return IM_LITERAL;
								}
							}
	YY_BREAK

/* For all inclusive states */
case 182:
YY_RULE_SETUP
#line 420 "imap-tokenizer.l"
return IM_NIL;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 422 "imap-tokenizer.l"
yylval->number=op_strtoui64(yytext, 0, 10); return IM_NZNUMBER;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 423 "imap-tokenizer.l"
yylval->number=op_strtoui64(yytext, 0, 10); return IM_NUMBER;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 425 "imap-tokenizer.l"
CopyText(yytext, yyleng, yylval, yyscanner); return IM_ATOM;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 426 "imap-tokenizer.l"
CopyText(yytext, yyleng, yylval, yyscanner); return IM_PURE_ASTRING;
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 427 "imap-tokenizer.l"
CopyQuotedString(yytext, yyleng, yylval, yyscanner); return IM_SINGLE_QUOTED_CHAR;
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 428 "imap-tokenizer.l"
CopyQuotedString(yytext, yyleng, yylval, yyscanner); return IM_QUOTED_STRING;
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 429 "imap-tokenizer.l"
{
								parser->GetTempBuffer().Reserve(atoi(yytext + 1));
								yy_push_state(literal, yyscanner);
							}
	YY_BREAK
/* For all states, even exclusive ones */
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 435 "imap-tokenizer.l"
{
								// This marks a complete command. Reset the state, valid queue
								RESET_STATE;
								parser->MarkValidQueue();
								return IM_CRLF;
							}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 441 "imap-tokenizer.l"
return IM_SP;
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 442 "imap-tokenizer.l"
return yytext[0];
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 444 "imap-tokenizer.l"
ECHO;
	YY_BREAK
#line 3372 "imap-tokenizer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(cont):
case YY_STATE_EOF(untagged):
case YY_STATE_EOF(tagged):
case YY_STATE_EOF(resp_text):
case YY_STATE_EOF(number_code):
case YY_STATE_EOF(unknown_code):
case YY_STATE_EOF(text):
case YY_STATE_EOF(capability):
case YY_STATE_EOF(badcharset):
case YY_STATE_EOF(flag):
case YY_STATE_EOF(ex_flag):
case YY_STATE_EOF(mbx_list):
case YY_STATE_EOF(mailbox_data):
case YY_STATE_EOF(fetch):
case YY_STATE_EOF(date):
case YY_STATE_EOF(status):
case YY_STATE_EOF(mailbox):
case YY_STATE_EOF(section):
case YY_STATE_EOF(literal):
case YY_STATE_EOF(header_fields):
case YY_STATE_EOF(vanished):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * IMAP4lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( IMAP4wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of IMAP4lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					IMAP4realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			IMAP4restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) IMAP4realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1370 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1370 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1369);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					IMAP4restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( IMAP4wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void IMAP4restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        IMAP4ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            IMAP4_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	IMAP4_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	IMAP4_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void IMAP4_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		IMAP4pop_buffer_state();
	 *		IMAP4push_buffer_state(new_buffer);
     */
	IMAP4ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	IMAP4_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (IMAP4wrap()) processing, but the only time this flag
	 * is looked at is after IMAP4wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void IMAP4_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE IMAP4_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) IMAP4alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in IMAP4_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) IMAP4alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in IMAP4_create_buffer()" );

	b->yy_is_our_buffer = 1;

	IMAP4_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with IMAP4_create_buffer()
 * @param yyscanner The scanner object.
 */
    void IMAP4_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		IMAP4free((void *) b->yy_ch_buf ,yyscanner );

	IMAP4free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a IMAP4restart() or at EOF.
 */
    static void IMAP4_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	IMAP4_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then IMAP4_init_buffer was _probably_
     * called from IMAP4restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void IMAP4_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		IMAP4_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void IMAP4push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	IMAP4ensure_buffer_stack(yyscanner);

	/* This block is copied from IMAP4_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from IMAP4_switch_to_buffer. */
	IMAP4_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void IMAP4pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	IMAP4_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		IMAP4_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void IMAP4ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)IMAP4alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in IMAP4ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)IMAP4realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in IMAP4ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE IMAP4_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) IMAP4alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in IMAP4_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	IMAP4_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to IMAP4lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       IMAP4_scan_bytes() instead.
 */
YY_BUFFER_STATE IMAP4_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return IMAP4_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to IMAP4lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE IMAP4_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) IMAP4alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in IMAP4_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = IMAP4_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in IMAP4_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) IMAP4alloc(new_size ,yyscanner );

		else
			yyg->yy_start_stack = (int *) IMAP4realloc((void *) yyg->yy_start_stack,new_size ,yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE IMAP4get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int IMAP4get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int IMAP4get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *IMAP4get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *IMAP4get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int IMAP4get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *IMAP4get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void IMAP4set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void IMAP4set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "IMAP4set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void IMAP4set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "IMAP4set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see IMAP4_switch_to_buffer
 */
void IMAP4set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void IMAP4set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int IMAP4get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void IMAP4set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * IMAP4get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void IMAP4set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* IMAP4lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int IMAP4lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) IMAP4alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* IMAP4lex_init_extra has the same functionality as IMAP4lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to IMAP4alloc in
 * the yyextra field.
 */

int IMAP4lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    IMAP4set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) IMAP4alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    IMAP4set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from IMAP4lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * IMAP4lex_init()
     */
    return 0;
}

/* IMAP4lex_destroy is for both reentrant and non-reentrant scanners. */
int IMAP4lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		IMAP4_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		IMAP4pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	IMAP4free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        IMAP4free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * IMAP4lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    IMAP4free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *IMAP4alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *IMAP4realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void IMAP4free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see IMAP4realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 444 "imap-tokenizer.l"



