/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2008 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 * @author Alexander Remen (alexr)
 */

group "m2.qp";
require init;
require defined M2_SUPPORT;

include "adjunct/m2/src/util/qp.h";

language C++;

table AddressTable(const char*, const uni_char*)
{
	{ "mailtest", UNI_L("mailtest") },
	{ "\"Bj=?iso-8859-1?Q?=F6rn_Hagstr=F6m?=\" <user@host.tld>", UNI_L("\"Bj\x00F6rn Hagstr\x00F6m\" <user@host.tld>") } ,
	{ "=?iso-8859-2?Q?Pawe=B3?= 'Foo' Bar <baz@o2.pl>",  UNI_L("Pawe\x0142 'Foo' Bar <baz@o2.pl>") },
	{ "mailtest@opera.com", UNI_L("mailtest@opera.com") },
	{ "\"Mail tester\" <mailtest@opera.com>", UNI_L("\"Mail tester\" <mailtest@opera.com>") },
	{ "\"Mail tester\" <mailtest@opera.com>, \"Mail tester\" <mailtest@opera.com>", UNI_L("\"Mail tester\" <mailtest@opera.com>, \"Mail tester\" <mailtest@opera.com>") },
	{ "=?iso-8859-15?Q?k=FCkce_online?= <kawime@gmx.de>, \"Mail tester\" <mailtest@opera.com>, \"Mail tester\" <mailtest@opera.com>", UNI_L("\"k\x00FCkce online\" <kawime@gmx.de>, \"Mail tester\" <mailtest@opera.com>, \"Mail tester\" <mailtest@opera.com>") },
	{ "=?iso-8859-15?Q?Hafslund_-_m=E5leravlesning?= <hafslund_dontreply@list.mail.netclient.no>", UNI_L("\"Hafslund - m\x00E5leravlesning\" <hafslund_dontreply@list.mail.netclient.no>") }
}

subtest StringEquals(const OpStringC& string1, const OpStringC& string2)
{
	if (string1.Compare(string2) != 0)
	{
		OpString8 string8_1, string8_2;
		string8_1.SetUTF8FromUTF16(string1.CStr());
		string8_2.SetUTF8FromUTF16(string2.CStr());
		output("\"%s\" is not equal to \"%s\": ", string8_1.CStr() ? string8_1.CStr() : "", string8_2.CStr() ? string8_2.CStr() : "");
		return FALSE;
	}
	return TRUE;
}

subtest DecodeTest(const OpStringC8& encoded, const OpStringC& expected)
{
	OpString decoded_result;
	BOOL warning, error;
	verify(OpStatus::IsSuccess(OpQP::Decode(encoded, decoded_result, "iso-8859-15", warning, error, TRUE, TRUE)));
	verify(StringEquals(decoded_result, expected));
	verify(!warning);
	verify(!error);
	return TRUE;
}

test("DSK-260934 - drops addresses after first pair of quotes")
{
	OpString8 encoded;
	encoded.Set("=?iso-8859-15?Q?k=FCkhe_online?= <kawime@gmx.de>, \"karsten the great\" <kawime@gmx.de>, =?iso-8859-15?Q?b=FCro_online?= <kawime@gmx.de>");	
	OpString expected;
	expected.Set(UNI_L("\"k\xFCkhe online\" <kawime@gmx.de>, \"karsten the great\" <kawime@gmx.de>, \"b\xFCro online\" <kawime@gmx.de>"));
	verify(DecodeTest(encoded, expected));
}

test("DSK-259266 - QP encoding starts inside quotes")
{
	OpString8 encoded;
	encoded.Set("\"=?iso-8859-1?q?R=E9mi?= Denis-Courmont\" <remi@remlab.net>");	
	OpString expected;
	expected.Set(UNI_L("\"R\x00E9mi Denis-Courmont\" <remi@remlab.net>"));
	verify(DecodeTest(encoded, expected));
}

test("OpQP::Decode - table with several tests")
{
	iterate(encoded, expected) from AddressTable
	{
		verify(DecodeTest(encoded, expected));
	}
}
