/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 * @author Alexander Remen (alexr)
 */

group "m2.imap-uid-analyzer";
require M2_SUPPORT;
disabled;

include "adjunct/m2/src/include/mailfiles.h";
include "adjunct/m2/src/backend/imap/imap-uid-manager.h";
include "adjunct/m2/selftest/overrides/ST_MessageDatabase.h";
include "adjunct/desktop_util/filelogger/desktopfilelogger.h";

test ("Show all Folder index ids and UIDs")
	file uni filepath "data/uid_account1";
{
	OpString filename;
	MailFiles::GetRecoveryLogFilename(filename);
	OpFile* logfile = OP_NEW(OpFile, ());
	verify(logfile != NULL);
	
	logfile->Construct(filename.CStr());
	OpStringC8 log_heading("IMAP UID analyzer");
	
	ST_MessageDatabase message_db;
	ImapUidManager uid_manager(message_db);

	verify_success(uid_manager.m_tree.Open(filepath, BlockStorage::OpenReadWrite, M2_BS_BLOCKSIZE));
	
	ImapUidManager::ImapUidKey key(0, 0, 0);
	SearchIterator<ImapUidManager::ImapUidKey> *iterator = uid_manager.m_tree.Search(key, operatorGE);
	verify(iterator != NULL);
	verify_success(DesktopFileLogger::Log(logfile, log_heading, "Starting analysis"));

	if (!iterator->Empty())
	{
		do
		{
			OpString8 entry;
			verify_success(entry.AppendFormat("%d, %d", iterator->Get().GetFolder(), iterator->Get().GetUID()));
			verify_success(DesktopFileLogger::Log(logfile, log_heading, entry));
		} while (iterator->Next());
	}
	verify_success(DesktopFileLogger::Log(logfile, log_heading, "Analysis ended"));
	OP_DELETE(logfile);
}

test ("Print out which folder ids there are")
	file uni filepath "data/uid_account1";
{
	OpString filename;
	MailFiles::GetRecoveryLogFilename(filename);
	OpFile* logfile = OP_NEW(OpFile, ());
	verify(logfile != NULL);
		
	
	logfile->Construct(filename.CStr());
	OpStringC8 log_heading("IMAP UID analyzer");
	
	ST_MessageDatabase message_db;
	ImapUidManager uid_manager(message_db);

	verify_success(uid_manager.m_tree.Open(filepath, BlockStorage::OpenReadWrite, M2_BS_BLOCKSIZE));
	
	ImapUidManager::ImapUidKey key(0, 0, 0);
	SearchIterator<ImapUidManager::ImapUidKey> *iterator = uid_manager.m_tree.Search(key, operatorGE);
	verify(iterator != NULL);
	verify_success(DesktopFileLogger::Log(logfile, log_heading, "Starting analysis"));

	index_gid_t folder_id = 0;

	if (!iterator->Empty())
	{
		do
		{
			if (folder_id != iterator->Get().GetFolder())
			{
				folder_id = iterator->Get().GetFolder();
				OpString8 entry;
				verify_success(entry.AppendFormat("Folder ID: %d", folder_id));
				verify_success(DesktopFileLogger::Log(logfile, log_heading, entry));
			}

		} while (iterator->Next());
	}

	verify_success(DesktopFileLogger::Log(logfile, log_heading, "Analysis ended"));
	OP_DELETE(logfile);
}