/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Alexander Remen(alexr)
 */

group "m2.MessageSet";
require M2_SUPPORT;

include "adjunct/m2/src/backend/imap/commands/MessageSet.h";

test("MessageSet::Count is correct when inserting ranges that don't merge")
{
	ImapCommands::MessageSet set(1, 50);
	verify(set.Count()==50);
	
	set.InsertRange(20, 40);
	verify(set.Count() == 50);

	set.InsertRange(101, 150);
	verify(set.Count() == 100);

	set.InsertRange(201, 250);
	verify(set.Count() == 150);
};

test("MessageSet::Count is correct when inserting simple extendable ranges")
{
	ImapCommands::MessageSet set(1, 50);
	verify(set.Count()==50);

	set.InsertRange(51, 100);
	verify(set.Count() == 100);

	set.InsertRange(20, 40);
	verify(set.Count() == 100);
};

test("Count is correct when inserting non simple extendable ranges - 1")
{
	ImapCommands::MessageSet set(1, 30);
	verify(set.Count()==30);

	set.InsertRange(71, 100);
	verify(set.Count() == 60);

	set.InsertRange(25, 75);
	verify(set.Count() == 100);
};

test("MessageSet::Count is correct when inserting non simple extendable ranges - 2")
{
	ImapCommands::MessageSet set(21, 30);
	verify(set.Count()==10);

	set.InsertRange(51, 60);
	verify(set.Count() == 20);

	set.InsertRange(1, 100);
	verify(set.Count() == 100);
};

test("MessageSet::Count works is correct splitting off a range")
{
	ImapCommands::MessageSet set(1, 100);
	verify(set.Count()==100);

	ImapCommands::MessageSet second_set(0,0);
	verify_success(set.SplitOff(50, second_set));
	verify(set.Count() == 50);
	verify(second_set.Count() == 50);
};

test("MessageSet::Count should not count infinite ranges")
{
	ImapCommands::MessageSet set(1, 0);
	verify(set.Count()==0);

	ImapCommands::MessageSet second_set(0,0);
	verify_success(set.SplitOff(51, second_set));
	verify(set.Count() == 0);
	
	set.InsertRange(51, 60);
	verify(set.Count() == 0);

	verify(set.Count() == 0);
};

test("MessageSet::Count should take decrease when messages are expunged")
{
	ImapCommands::MessageSet set(1, 100);
	verify(set.Count()==100);

	verify_success(set.Expunge(190));
	verify(set.Count()==100);

	verify_success(set.Expunge(99));
	verify(set.Count()==99);

	verify_success(set.Expunge(50));
	verify(set.Count()==98);
};

test("MessageSet::ContainsMoreThan should return FALSE when infinite, otherwise TRUE if there are more than x")
{
	ImapCommands::MessageSet set(1, 0);
	verify(set.Count()==0);

	verify(set.ContainsMoreThan(100) == FALSE);

	ImapCommands::MessageSet set_two(1, 50);
	verify(set_two.ContainsMoreThan(100) == FALSE);
	verify(set_two.ContainsMoreThan(30) == TRUE);
};

