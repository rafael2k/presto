/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Alexander Remen (alexr)
 */


group "m2.message";
require M2_SUPPORT;

include "adjunct/m2/src/engine/message.h";

table CreateTypes(MessageTypes::CreateType)
{
	{MessageTypes::REPLY},
	{MessageTypes::QUICK_REPLY},
	{MessageTypes::REPLY_TO_LIST},
	{MessageTypes::REPLY_TO_SENDER},
	{MessageTypes::REPLYALL}
}


test("One single From address, all create types")
{
	Message old_message;
	Message reply;
	OpString from_header;
	OpString8 to_header;

	verify(OpStatus::IsSuccess(old_message.Init(0)));
	verify(OpStatus::IsSuccess(reply.Init(0)));
	verify(OpStatus::IsSuccess(from_header.Set(UNI_L("\"Alexander Remen\" <alexr@opera.com>"))));
	verify(OpStatus::IsSuccess(old_message.SetHeaderValue(Header::FROM, from_header)));

	iterate(type) from CreateTypes
	{
		verify(OpStatus::IsSuccess(reply.SetHeaderValue(Header::TO,"")));
		verify(OpStatus::IsSuccess(reply.SetPreferredRecipients(type, old_message)));
		verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::TO, to_header)));
		verify(from_header.Compare(to_header.CStr())==0);
	}
}

test("One From address, Two CC addresses, all create types")
{
	Message old_message;
	Message reply;
	OpString from_header, cc_header, expected_cc_header;
	OpString8 new_cc_header, new_to_header;

	verify(OpStatus::IsSuccess(old_message.Init(0)));
	verify(OpStatus::IsSuccess(reply.Init(0)));
	verify(OpStatus::IsSuccess(from_header.Set(UNI_L("\"Alexander Remen\" <alexr@opera.com>"))));
	verify(OpStatus::IsSuccess(cc_header.Set(UNI_L("\"\xd8yvind \xd8stlund\" <oyvindo@opera.com>, \"Arjan van Leeuwen\" <arjanl@opera.com>"))));
	verify(OpStatus::IsSuccess(expected_cc_header.Set("=?iso-8859-1?Q?=D8yvind_=D8stlund?= <oyvindo@opera.com>, \"Arjan van Leeuwen\" <arjanl@opera.com>")));
	verify(OpStatus::IsSuccess(old_message.SetHeaderValue(Header::FROM, from_header)));
	verify(OpStatus::IsSuccess(old_message.SetHeaderValue(Header::CC, cc_header)));

	iterate(type) from CreateTypes
	{
		verify(OpStatus::IsSuccess(reply.SetHeaderValue(Header::TO,"")));
		verify(OpStatus::IsSuccess(reply.SetHeaderValue(Header::CC,"")));
		verify(OpStatus::IsSuccess(reply.SetPreferredRecipients(type, old_message)));
		
		switch (type)
		{
			case MessageTypes::REPLY:
			case MessageTypes::REPLY_TO_LIST:
			case MessageTypes::REPLY_TO_SENDER:	
			case MessageTypes::QUICK_REPLY:
			{
				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::TO, new_to_header)));
				verify(from_header.Compare(new_to_header.CStr())==0);

				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::CC, new_cc_header)));
				verify(new_cc_header.IsEmpty());
				break;
			}
			case MessageTypes::REPLYALL:
			{
				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::TO, new_to_header)));
				verify(from_header.Compare(new_to_header.CStr())==0);

				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::CC, new_cc_header)));
				verify(expected_cc_header.Compare(new_cc_header.CStr())==0);
			}
		}
	}
}

test("One From address, Two CC addresses, and a List-Post header, all create types")
{
	Message old_message;
	Message reply;
	OpString from_header, cc_header, list_header, expected_cc_header;
	OpString8 new_cc_header, new_to_header;

	verify(OpStatus::IsSuccess(old_message.Init(0)));
	verify(OpStatus::IsSuccess(reply.Init(0)));
	verify(OpStatus::IsSuccess(from_header.Set(UNI_L("\"Alexander Remen\" <alexr@opera.com>"))));
	verify(OpStatus::IsSuccess(cc_header.Set(UNI_L("\"\xd8yvind \xd8stlund\" <oyvindo@opera.com>, \"Arjan van Leeuwen\" <arjanl@opera.com>"))));
	verify(OpStatus::IsSuccess(expected_cc_header.Set("=?iso-8859-1?Q?=D8yvind_=D8stlund?= <oyvindo@opera.com>, \"Arjan van Leeuwen\" <arjanl@opera.com>")));
	verify(OpStatus::IsSuccess(list_header.Set(UNI_L("<mailto:mailing@list.com>"))));
	verify(OpStatus::IsSuccess(old_message.SetHeaderValue(Header::FROM, from_header)));
	verify(OpStatus::IsSuccess(old_message.SetHeaderValue(Header::CC, cc_header)));
	verify(OpStatus::IsSuccess(old_message.SetHeaderValue(Header::LISTPOST, list_header)));

	iterate(type) from CreateTypes
	{
		verify(OpStatus::IsSuccess(reply.SetHeaderValue(Header::TO,"")));
		verify(OpStatus::IsSuccess(reply.SetHeaderValue(Header::CC,"")));
		verify(OpStatus::IsSuccess(reply.SetPreferredRecipients(type, old_message)));
		
		switch (type)
		{
			case MessageTypes::REPLY_TO_LIST:
			{
				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::TO, new_to_header)));
				verify(list_header.Find(new_to_header.CStr())!=KNotFound); // we have to find mailing@list.com inside <mailto:mailing@list.com>

				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::CC, new_cc_header)));
				verify(new_cc_header.IsEmpty());
				break;
			}
			case MessageTypes::REPLY:
			case MessageTypes::REPLY_TO_SENDER:	
			case MessageTypes::QUICK_REPLY:
			{
				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::TO, new_to_header)));
				verify(from_header.Compare(new_to_header.CStr())==0);

				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::CC, new_cc_header)));
				verify(new_cc_header.IsEmpty());
				break;
			}
			case MessageTypes::REPLYALL:
			{
				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::TO, new_to_header)));
				verify(from_header.Compare(new_to_header.CStr())==0);

				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::CC, new_cc_header)));
				verify(expected_cc_header.Compare(new_cc_header.CStr())==0);
			}
		}

	}
}

test("One From address, Two CC address, and a Reply-To header, all create types")
{
	Message old_message;
	Message reply;
	OpString from_header, cc_header, reply_to_header, expected_cc_header;
	OpString8 new_cc_header, new_to_header;

	verify(OpStatus::IsSuccess(old_message.Init(0)));
	verify(OpStatus::IsSuccess(reply.Init(0)));
	verify(OpStatus::IsSuccess(from_header.Set(UNI_L("\"Alexander Remen\" <alexr@opera.com>"))));
	verify(OpStatus::IsSuccess(cc_header.Set(UNI_L("\"\xd8yvind \xd8stlund\" <oyvindo@opera.com>, \"Arjan van Leeuwen\" <arjanl@opera.com>"))));
	verify(OpStatus::IsSuccess(expected_cc_header.Set("=?iso-8859-1?Q?=D8yvind_=D8stlund?= <oyvindo@opera.com>, \"Arjan van Leeuwen\" <arjanl@opera.com>")));
	verify(OpStatus::IsSuccess(reply_to_header.Set(UNI_L("Mailtest <mailtest@opera.com>"))));
	verify(OpStatus::IsSuccess(old_message.SetHeaderValue(Header::FROM, from_header)));
	verify(OpStatus::IsSuccess(old_message.SetHeaderValue(Header::CC, cc_header)));
	verify(OpStatus::IsSuccess(old_message.SetHeaderValue(Header::REPLYTO, reply_to_header)));

	iterate(type) from CreateTypes
	{
		verify(OpStatus::IsSuccess(reply.SetHeaderValue(Header::TO,"")));
		verify(OpStatus::IsSuccess(reply.SetHeaderValue(Header::CC,"")));
		verify(OpStatus::IsSuccess(reply.SetPreferredRecipients(type, old_message)));
		
		switch (type)
		{
			case MessageTypes::REPLY_TO_LIST:
			case MessageTypes::QUICK_REPLY:
			case MessageTypes::REPLY:
			{
				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::TO, new_to_header)));
				verify(reply_to_header.Compare(new_to_header.CStr())==0);

				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::CC, new_cc_header)));
				verify(new_cc_header.IsEmpty());
				break;
			}
			case MessageTypes::REPLY_TO_SENDER:	
			{
				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::TO, new_to_header)));
				verify(from_header.Compare(new_to_header.CStr())==0);

				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::CC, new_cc_header)));
				verify(new_cc_header.IsEmpty());
				break;
			}
			case MessageTypes::REPLYALL:
			{
				OpString expected_to_header;
				verify(OpStatus::IsSuccess(expected_to_header.AppendFormat(UNI_L("%s, %s"), from_header.CStr(), reply_to_header.CStr())));
				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::TO, new_to_header)));
				verify(expected_to_header.Compare(new_to_header.CStr())==0);

				verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::CC, new_cc_header)));
				verify(expected_cc_header.Compare(new_cc_header.CStr())==0);
			}
		}

	}
}

test("Reply to outgoing message")
{
	Message old_message;
	Message reply;
	OpString from_header, old_to_header;
	OpString8 to_header;

	verify(OpStatus::IsSuccess(old_message.Init(0)));
	verify(OpStatus::IsSuccess(reply.Init(0)));
	verify(OpStatus::IsSuccess(old_to_header.Set(UNI_L("TO <to@test.com>"))));
	verify(OpStatus::IsSuccess(old_message.SetHeaderValue(Header::TO, old_to_header)));
	verify(OpStatus::IsSuccess(from_header.Set(UNI_L("FROM <from@test.com>"))));
	verify(OpStatus::IsSuccess(old_message.SetHeaderValue(Header::FROM, from_header)));
	
	old_message.SetFlag(StoreMessage::IS_OUTGOING,TRUE);

	iterate(type) from CreateTypes
	{
		verify(OpStatus::IsSuccess(reply.SetHeaderValue(Header::TO,"")));
		verify(OpStatus::IsSuccess(reply.SetPreferredRecipients(type, old_message)));
		verify(OpStatus::IsSuccess(reply.GetHeaderValue(Header::TO, to_header)));

		switch (type)
		{
			case MessageTypes::REPLY_TO_LIST:
			case MessageTypes::QUICK_REPLY:
			case MessageTypes::REPLY:
			case MessageTypes::REPLYALL:
			{
				verify(old_to_header.Compare(to_header.CStr())==0);
				break;
			}
			case MessageTypes::REPLY_TO_SENDER:	
			{
				verify(from_header.Compare(to_header.CStr())==0);
			}
		}
	}
}