/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Alexander Remen (alexr)
 */

group "m2.store.duplicatetable";
require M2_SUPPORT;

include "adjunct/m2/src/engine/store/duplicatetable.h";

test("Test GetDuplicates()")
{
	DuplicateTable table;
	table.SetTotalMessageCount(20);
	
	// add 2 as a duplicate of 1 and check that it is added correctly
	verify_success(table.AddDuplicate(1, 2));
	verify(table.GetDuplicates(1) != NULL);
	verify(table.GetDuplicates(1)->m2_id == 1);
	verify(table.GetDuplicates(1)->next != NULL);
	verify(table.GetDuplicates(1)->next->m2_id ==2);
	verify(table.GetDuplicates(2) == NULL);

	table.Clear();
}

test("Adding more duplicates")
{
	DuplicateTable table;
	table.SetTotalMessageCount(20);
	
	// 1 -> 2 -> 3
	// 4 -> 5 -> 6
	verify_success(table.AddDuplicate(1, 2));
	verify_success(table.AddDuplicate(4, 5));
	verify_success(table.AddDuplicate(4, 6));
	verify_success(table.AddDuplicate(1, 3));

	const DuplicateMessage* item = table.GetDuplicates(1);
	verify (item != NULL);
	verify (item->m2_id == 1);
	verify (item->next->m2_id == 2);
	verify (item->next->next->m2_id == 3);
	verify (item->next->next->next == NULL);

	item = table.GetDuplicates(4);
	verify (item != NULL);
	verify (item->m2_id == 4);
	verify (item->next->m2_id == 5);
	verify (item->next->next->m2_id == 6);
	verify (item->next->next->next == NULL);

	table.Clear();
}


test("Test RemoveDuplicate()")
{
	DuplicateTable table;
	table.SetTotalMessageCount(20);
	
	// 1 -> 2 -> 3
	// 4 -> 5 -> 6
	verify_success(table.AddDuplicate(1, 2));
	verify_success(table.AddDuplicate(1, 3));
	verify_success(table.AddDuplicate(4, 5));
	verify_success(table.AddDuplicate(4, 6));

	const DuplicateMessage* item = table.GetDuplicates(1);
	verify (item != NULL);
	verify (item->m2_id == 1);
	verify (item->next->m2_id == 2);
	verify (item->next->next->m2_id == 3);
	verify (item->next->next->next == NULL);

	message_gid_t new_master;
	
	// remove 2: 1 -> 3
	verify_success(table.RemoveDuplicate(1, 2, new_master));
	verify(new_master == 1);

	item = table.GetDuplicates(1);
	verify (item != NULL);
	verify (item->m2_id == 1);
	verify (item->next->m2_id == 3);
	verify (item->next->next == NULL);

	// add 2:  1 -> 3 -> 2
	verify_success(table.AddDuplicate(1, 2));
	// remove 1: 3 -> 2
	verify_success(table.RemoveDuplicate(1, 1, new_master));
	verify(new_master == 3);

	item = table.GetDuplicates(new_master);
	verify (item != NULL);
	verify (item->m2_id == 3);
	verify (item->next->m2_id == 2);
	verify (item->next->next == NULL);

	// remove 4: 5 -> 6
	verify_success(table.RemoveDuplicate(4, 4, new_master));
	verify(new_master == 5);

	item = table.GetDuplicates(new_master);
	verify (item != NULL);
	verify (item->m2_id == 5);
	verify (item->next->m2_id == 6);
	verify (item->next->next == NULL);

	// remove 5: no duplicates any more for 4, 5 or 6
	verify_success(table.RemoveDuplicate(5, 6, new_master));
	verify(new_master == 0);

	item = table.GetDuplicates(4);
	verify(item == NULL);
	item = table.GetDuplicates(5);
	verify(item == NULL);
	item = table.GetDuplicates(6);
	verify(item == NULL);

	table.Clear();
}