/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "m2.opquote";
require M2_SUPPORT;

include "adjunct/m2/src/util/quote.h";
include "modules/locale/oplanguagemanager.h";
include "modules/locale/locale-enum.h";

test("default values: can't have delsp if not flowed")
{
	OpQuote quote(FALSE, TRUE);
	verify(!quote.HasDelsp());
}

test("default values: max line length can't be 0")
{
	OpQuote quote(TRUE, TRUE, TRUE, 0);
	verify(quote.GetMaxLineLength() > 0);
}

test("default values: max quote depth should be less than max line length")
{
	OpQuote quote(TRUE, TRUE, TRUE, 10, 32);
	verify(quote.GetMaxQuoteDepth() < quote.GetMaxLineLength());
}

subtest CompareQuotedText(const char* to_quote, const char* desired_output)
{
	OpQuote quote;
	OpString output;
	OpString input;
	verify(OpStatus::IsSuccess(input.Set(to_quote)));

	verify(OpStatus::IsSuccess(quote.QuoteText(output, input)));

	verify(output == desired_output);
}

test("quote simple text")
{
	verify(CompareQuotedText("Line 1",
							 "> Line 1"));
}

test("don't prefix space if text was already quoted")
{
	verify(CompareQuotedText("> Line 1", ">> Line 1"));
}

test("remove signature on quote")
{
	verify(CompareQuotedText("Line 1\r\n-- \r\nSignature\r\n",
							 "> Line 1\r\n"));
}

test("snip text when quote depth exceeded")
{
	OpString snip_text;
	verify(OpStatus::IsSuccess(g_languageManager->GetString(Str::S_STRIPPED_QUOTE, snip_text)));
	verify(OpStatus::IsSuccess(snip_text.Append(UNI_L("\r\n"))));
	// TODO REMOVE THIS NEXT LINE, documenting current behavior, seems a BUG
	verify(OpStatus::IsSuccess(snip_text.Append(UNI_L("> "))));
	OpQuote quote(TRUE, TRUE, TRUE, 76, 2);
	OpString output;

	verify(OpStatus::IsSuccess(quote.QuoteText(output, UNI_L(">>> Line 1\r\n"))));

	verify(output == snip_text);
}

test("leave spaces for format=flowed, delsp=yes intact when quoting")
{
	verify(CompareQuotedText("Line 1  \r\nStill line 1",
							  "> Line 1  \r\n> Still line 1"));
}

test("add delsp to format=flowed, delsp=no text when quoting")
{
	OpQuote quote(TRUE, FALSE);
	OpString output;

	verify(OpStatus::IsSuccess(quote.QuoteText(output, UNI_L("Line 1 \r\nStill line 1"))));

	verify(output == UNI_L("> Line 1  \r\n> Still line 1"));
	verify(quote.HasDelsp());
}

subtest CompareWrappedText(const char* to_wrap, const char* desired_output, BOOL strip_nonquoted_flows)
{
	OpQuote quote;
	OpString output;
	OpString input;
	verify(OpStatus::IsSuccess(input.Set(to_wrap)));

	verify(OpStatus::IsSuccess(quote.WrapText(output, input, strip_nonquoted_flows)));

	verify(output == desired_output);
}

test("Remove format=flowed, delsp=yes spaces")
{
	// TODO This test is weird, documenting current behavior - why would it *remove* flows?
	// looks more logical to reflow this.
	verify(CompareWrappedText("Line 1  \r\nStill line 1",
							  "Line 1\r\nStill line 1",
							  FALSE));
}

test("don't strip spaces at end of nonquoted flows")
{
	// TODO Still removes two spaces. Why?
	verify(CompareWrappedText("   \r\nLine 2",
							  " \r\nLine 2",
							  FALSE));
}

test("strip spaces at end of nonquoted flows")
{
	verify(CompareWrappedText("   \r\nLine 2",
							  "\r\nLine 2",
							  TRUE));
}

test("strip spaces at end of quoted flows")
{
	// TODO No idea why this removes all spaces in the
	// quote, but it does
	verify(CompareWrappedText(">   \r\nLine 2",
							  ">\r\nLine 2",
							  TRUE));
}
