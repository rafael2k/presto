/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "m2.composer.messageencoder";
require M2_SUPPORT;

include "adjunct/m2/src/engine/header.h";
include "adjunct/m2/src/composer/messageencoder.h";
include "adjunct/m2/src/util/inputconvertermanager.h";
include "adjunct/m2/src/util/qp.h";
include "adjunct/m2/src/util/quote.h";
include "modules/upload/upload.h";

table TestHeaders(Header::HeaderType, const uni_char*, const char*, const char*)
{
	{ Header::FROM,		UNI_L("T\xf8st T\xf8st <from@from.com>"),	"iso-8859-15", "From: =?iso-8859-15?Q?T=F8st_T=F8st?= <from@from.com>" },
	{ Header::TO,		UNI_L("T\xf8st T\xf8st <to@to.com>"),		"iso-8859-15", "To: =?iso-8859-15?Q?T=F8st_T=F8st?= <to@to.com>" },
	{ Header::SUBJECT,	UNI_L("Subject"),							"us-ascii",    "Subject: Subject" }
}

table TestRedirectHeaders(const char*, const uni_char*)
{
	{ "Return-path" ,			 UNI_L("<whatwg-bounces@lists.whatwg.org>") },
	{ "Received" ,				 UNI_L("from mx.opera.com (mx.opera.com [213.236.208.184]) by mail.opera.com (8.14.3/8.14.3/Debian-5) with ESMTP id n5GGcUXc007409 (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT); Tue, 16 Jun 2009 16:38:30 GMT") },
	{ "Received" ,				 UNI_L("from zapata.dreamhost.com (zapata.dreamhost.com [208.97.161.172]) by mx.opera.com (8.13.8/8.13.8/Debian-3) with ESMTP id n5GGcLIU025895; Tue, 16 Jun 2009 16:38:26 GMT") },
	{ "Received" ,				 UNI_L("from zapata.dreamhost.com (localhost [127.0.0.1]) by zapata.dreamhost.com (Postfix) with ESMTP id 288658DB0232; Tue, 16 Jun 2009 09:38:17 -0700 (PDT)") },
	{ "X-Original-To" ,          UNI_L("whatwg@lists.whatwg.org") },
	{ "Received" ,				 UNI_L("from mail-out3.apple.com (mail-out3.apple.com [17.254.13.22]) by zapata.dreamhost.com (Postfix) with ESMTP id 7247A8DB022E for <whatwg@lists.whatwg.org>; Tue, 16 Jun 2009 09:38:13 -0700 (PDT)") },
	{ "Received" ,				 UNI_L("from relay13.apple.com (relay13.apple.com [17.128.113.29]) by mail-out3.apple.com (Postfix) with ESMTP id 2897B6572E50; Tue, 16 Jun 2009 09:38:13 -0700 (PDT)") },
	{ "Received" ,				 UNI_L("from relay13.apple.com (unknown [127.0.0.1]) by relay13.apple.com (Symantec Brightmail Gateway) with ESMTP id 1104C28050; Tue, 16 Jun 2009 09:38:13 -0700 (PDT)") },
	{ "X-AuditID" ,				 UNI_L("1180711d-a45f8bb000005f4f-4f-4a37ca74505f") },
	{ "Received" ,				 UNI_L("from [17.202.35.52] (singda.apple.com [17.202.35.52]) by relay13.apple.com (Apple SCV relay) with ESMTP id 91C772807D; Tue, 16 Jun 2009 09:38:12 -0700 (PDT)") },
	{ "Message-ID" ,			 UNI_L("<p06240812c65d7a6e7ba5@[17.202.35.52]>") },
	{ "In-Reply-To" ,			 UNI_L("<7A04B8B2EB214FC8B9C241742B279811@POCZTOWIEC>") },
	{ "References" ,			 UNI_L("<mailman.19606.1245121927.13789.whatwg-whatwg.org@lists.whatwg.org> <363F623BC85F2A42B5539F0EFB8129CE02CCED69@bbcxues15.national.core.bbc.co.u k> <7A04B8B2EB214FC8B9C241742B279811@POCZTOWIEC>") },
	{ "Date" ,				     UNI_L("Tue, 16 Jun 2009 18:37:08 +0200") },
	{ "To" ,				     UNI_L("\"Kristof Zelechovski\" { \"'Sam Dutton'\" <Sam.Dutton@bbc.co.uk>, whatwg@lists.whatwg.org") },
	{ "From" ,				     UNI_L("\"David Singer\" <singer@apple.com>") },
	{ "X-Brightmail-Tracker" ,	 UNI_L("AAAAAA==") },
	{ "Subject" ,				 UNI_L("test") },
	{ "X-BeenThere" ,			 UNI_L("whatwg@lists.whatwg.org") },
	{ "X-Mailman-Version" ,		 UNI_L("2.1.11") },
	{ "Precedence" ,			 UNI_L("list") },
	{ "List-Id" ,				 UNI_L("\"Public mailing list for the WHAT working group\" <whatwg-whatwg.org>") },
	{ "List-Unsubscribe" ,		 UNI_L("<http://lists.whatwg.org/options.cgi/whatwg-whatwg.org>, <mailto:whatwg-request@lists.whatwg.org?subject=unsubscribe>") },
	{ "List-Archive" ,			 UNI_L("<http://lists.whatwg.org/pipermail/whatwg-whatwg.org>") },
	{ "List-Post" ,				 UNI_L("<mailto:whatwg@lists.whatwg.org>") },
	{ "List-Help" ,				 UNI_L("<mailto:whatwg-request@lists.whatwg.org?subject=help>") },
	{ "List-Subscribe" ,		 UNI_L("<http://lists.whatwg.org/listinfo.cgi/whatwg-whatwg.org>, <mailto:whatwg-request@lists.whatwg.org?subject=subscribe>") },
	{ "Sender" ,				 UNI_L("whatwg-bounces@lists.whatwg.org") },
	{ "Errors-To" ,				 UNI_L("whatwg-bounces@lists.whatwg.org") },
	{ "X-Greylist" ,			 UNI_L("IP, sender and recipient auto-whitelisted, not delayed by milter-greylist-3.0 (mx.opera.com [213.236.208.184]); Tue, 16 Jun 2009 16:38:27 +0000 (UTC)") },
	{ "X-EsetResult" ,			 UNI_L("Found to be clean") },
	{ "X-Virus-Scanned" ,		 UNI_L("ClamAV 0.94/9471/Tue Jun 16 16:00:24 2009 on mx.opera.com") },
	{ "X-Virus-Status" ,		 UNI_L("Clean") },
	{ "X-Spam-Status" ,			 UNI_L("No, score=-2.6 required=4.0 tests=BAYES_00 autolearn=ham version=3.2.5-opera") },
	{ "X-Spam-Report" ,			 UNI_L("* -2.6 BAYES_00 BODY: Bayesian spam probability is 0 to 1% *      [score: 0.0000]") },
	{ "X-Spam-Checker-Version" , UNI_L("SpamAssassin 3.2.5-opera (2008-06-10) on e7.opera.com") }
}

global
{
	// NOTE! This macro does not handle "finally" clauses
	#define TRAP_AND_VERIFY( block ) \
		do{ TRAPD(verify_trap_tmp, block); \
			if (!OpStatus::IsSuccess(verify_trap_tmp)) \
			{g_selftest.utils->TestFailed(__FILE__,__LINE__,"'" #block "' did LEAVE."); return 0;} \
		} while(0)

	// Test values
	#define PLAIN_BODY			"Test test test test test test\n\n\n-- \nUsing Opera's revolutionary e-mail client: http://www.opera.com/mail/ "
	#define PLAIN_BODY_ENCODED	"Test test test test test test\r\n\r\n\r\n-- \r\nUsing Opera's revolutionary e-mail client: http://www.opera.com/mail/ "
	#define PLAIN_BODY_WRAPPED	"Wrapped\r\n"
	#define USE_CHARSET			"us-ascii"
	#define ATTACHMENT			"this is an attachment\r\n"
	#define ATTACHMENT_FILENAME "temp_messageencoder_attachment.txt"
	#define ATTACHMENT_ENCODED	"Content-Disposition: attachment; filename=" ATTACHMENT_FILENAME "\r\n" \
								"Content-Type: text/plain; name=" ATTACHMENT_FILENAME "\r\n" \
								"Content-Transfer-Encoding: 7bit\r\n" \
								"\r\n" \
								ATTACHMENT

	#define ATTACHMENT_2_FILENAME			UNI_L("\xe6_attachment.txt")
	#define ATTACHMENT_2_ENCODED			"Content-Disposition: attachment; filename*=utf-8''%C3%A6_attachment.txt\r\n" \
											"Content-Type: text/plain; name==?utf-8?Q?=C3=A6=5Fattachment.txt?=\r\n" \
											"Content-Transfer-Encoding: 7bit\r\n" \
											"\r\n" \
											ATTACHMENT

	#define HTML_BODY			"<html><body>html text</body></html>\r\n"

	class MockOpQuote : public OpQuote
	{
	public:
		virtual OP_STATUS WrapText(OpString& wrapped_text, const OpStringC& original_text, BOOL strip_nonquoted_flows)
		{
			return wrapped_text.Set(PLAIN_BODY_WRAPPED);
		}
	};

	OpFile attachment_file;
	InputConverterManager input_converter_manager;
}

setup
{
	// OpQP will use global without this
	// FIXME needs proper fix (ie. elimination of OpQP)
	input_converter_manager.Init();
	OpQP::SetInputConverterManager(&input_converter_manager);
}

exit
{
	OpQP::SetInputConverterManager(0);
}

subtest StringContains(const OpStringC8& big, const OpStringC8& little)
{
	if (big.Find(little) == KNotFound)
	{
		output("\"%s\" does not contain \"%s\": ", big.CStr() ? big.CStr() : "", little.CStr() ? little.CStr() : "");
		return FALSE;
	}
	return TRUE;
}

test("Create message with plain text body")
{
	MessageEncoder encoder;

	verify(SetHeaders(encoder));
	verify(SetPlainBody(encoder));

	OpString8 message;
	verify(OpStatus::IsSuccess(
		   encoder.Encode(message,USE_CHARSET)));

	verify(CheckPlainBody(message));
	verify(CheckHeaders(message));
}

subtest SetHeaders(MessageEncoder& encoder)
{
	iterate(type, value, charset, encoded) from TestHeaders
	{
		verify(OpStatus::IsSuccess(
			   encoder.AddHeaderValue(type, value, charset)));
	}
}

subtest SetRedirectHeaders(MessageEncoder& encoder)
{
	iterate(name, value) from TestRedirectHeaders
	{
		verify(OpStatus::IsSuccess(
			   encoder.AddHeaderValue(name, value, USE_CHARSET)));
	}
}

subtest CheckHeaders(const OpStringC8& message)
{
	iterate(type, value, charset, encoded) from TestHeaders
	{
		verify(StringContains(message, encoded));
	}
}

subtest SetPlainBody(MessageEncoder& encoder)
{
	verify(OpStatus::IsSuccess(
		   encoder.SetPlainTextBody(UNI_L(PLAIN_BODY), USE_CHARSET)));
}

subtest CheckPlainBody(const OpStringC8& message)
{
	verify(StringContains(message, PLAIN_BODY_ENCODED));
}

test("Create message with plain text body and use wrapping")
{
	MessageEncoder encoder;

	OpAutoPtr<OpQuote> wrapper (OP_NEW(MockOpQuote, ()));
	encoder.SetTextWrapper(wrapper);

	verify(SetHeaders(encoder));
	verify(SetPlainBody(encoder));

	OpString8 message;
	verify(OpStatus::IsSuccess(
		   encoder.Encode(message, USE_CHARSET)));

	verify(StringContains(message, PLAIN_BODY_WRAPPED));
}

subtest AddAttachment(MessageEncoder& encoder, const uni_char* attachment_filename)
{
	attachment_file.Construct(attachment_filename, OPFILE_TEMP_FOLDER);

	verify(OpStatus::IsSuccess(
		   attachment_file.Open(OPFILE_WRITE)));
	verify(OpStatus::IsSuccess(
		   attachment_file.Write(ATTACHMENT, op_strlen(ATTACHMENT))));
	verify(OpStatus::IsSuccess(
		   attachment_file.Close()));

	verify(OpStatus::IsSuccess(
		   encoder.AddAttachment(attachment_file.GetFullPath(), attachment_file.GetName(), USE_CHARSET, "")));
}

test("Create message with HTML body")
{
	MessageEncoder encoder;

	verify(SetHeaders(encoder));
	verify(SetHTMLBody(encoder));

	OpString8 message;
	verify(OpStatus::IsSuccess(
		   encoder.Encode(message,USE_CHARSET)));

	verify(CheckHTMLBody(message));
	verify(CheckHeaders(message));
}

subtest SetHTMLBody(MessageEncoder& encoder)
{
	OpAutoPtr<Upload_OpString8> html_part (OP_NEW(Upload_OpString8, ()));

	TRAP_AND_VERIFY(html_part->InitL(HTML_BODY, "text/html", USE_CHARSET));

	verify(OpStatus::IsSuccess(
		   encoder.SetHTMLBody(OpAutoPtr<Upload_Base>(html_part.release()))));
}

subtest CheckHTMLBody(const OpStringC8& message)
{
	verify(StringContains(message, HTML_BODY));
}

test("Create message with plain text and HTML body")
{
	MessageEncoder encoder;

	verify(SetPlainBody(encoder));
	verify(SetHeaders(encoder));
	verify(SetHTMLBody(encoder));

	OpString8 message;
	verify(OpStatus::IsSuccess(
		   encoder.Encode(message,USE_CHARSET)));

	verify(CheckHTMLBody(message));
	verify(CheckPlainBody(message));
	verify(CheckHeaders(message));
}

test("Create message with plain text body and attachment")
{
	MessageEncoder encoder;

	verify(SetHeaders(encoder));
	verify(SetPlainBody(encoder));
	verify(AddAttachment(encoder, UNI_L(ATTACHMENT_FILENAME)));

	OpString8 message;
	verify(OpStatus::IsSuccess(
		   encoder.Encode(message,USE_CHARSET)));

	verify(CheckPlainBody(message));
	verify(CheckHeaders(message));
	verify(StringContains(message, ATTACHMENT_ENCODED));
}
finally
{
	attachment_file.Close();
	attachment_file.Delete();
}

test("Create message with plain text and HTML body and attachment")
{
	MessageEncoder encoder;

	verify(SetHeaders(encoder));
	verify(SetPlainBody(encoder));
	verify(SetHTMLBody(encoder));
	verify(AddAttachment(encoder, UNI_L(ATTACHMENT_FILENAME)));

	OpString8 message;
	verify(OpStatus::IsSuccess(
		   encoder.Encode(message,USE_CHARSET)));

	verify(CheckHTMLBody(message));
	verify(CheckPlainBody(message));
	verify(CheckHeaders(message));
	verify(StringContains(message, ATTACHMENT_ENCODED));
}
finally
{
	attachment_file.Close();
	attachment_file.Delete();
}

test("Create message with attachment with filename with NON ascii character")
{
	MessageEncoder encoder;

	verify(SetHeaders(encoder));
	verify(SetPlainBody(encoder));
	verify(AddAttachment(encoder, ATTACHMENT_2_FILENAME));

	OpString8 message;
	verify(OpStatus::IsSuccess(
		   encoder.Encode(message,USE_CHARSET)));

	verify(CheckPlainBody(message));
	verify(CheckHeaders(message));
	verify(StringContains(message, ATTACHMENT_2_ENCODED));
}
finally
{
	attachment_file.Close();
	attachment_file.Delete();
}


test("Create a redirect message with a lot of headers to test DSK-250881")
{
	MessageEncoder encoder;

	verify(SetRedirectHeaders(encoder));

	verify(OpStatus::IsSuccess(
		   encoder.SetPlainTextBody(UNI_L("PASS"), USE_CHARSET)));

	OpString8 message;
	verify(OpStatus::IsSuccess(
		   encoder.Encode(message, USE_CHARSET)));
	
	verify(StringContains(message, "PASS"));
}
