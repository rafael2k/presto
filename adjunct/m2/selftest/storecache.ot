/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "m2.store.storecache";
require M2_SUPPORT;

include "adjunct/m2/src/engine/store/storecache.h";

test("Adding and retrieving items")
{
	StoreCache cache;

	StoreItem item(1, 10);
	verify(OpStatus::IsSuccess(cache.UpdateItem(item)));
	verify(cache.GetFromCache(item.m2_id).row_id == item.row_id);

	StoreItem item2(2, 20);
	verify(OpStatus::IsSuccess(cache.UpdateItem(item2)));

	verify(cache.GetFromCache(item.m2_id) == item);
	verify(cache.GetFromCache(item2.m2_id) == item2);
}

test("Get children in a thread")
{
	StoreCache cache;
	StoreItem item(1, 1);
	verify(OpStatus::IsSuccess(cache.UpdateItem(item)));
	item.parent_id = 1;
	item.m2_id = 2;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item)));
	item.m2_id = 3;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item)));

	OpINTSet children;
	verify(OpStatus::IsSuccess(cache.GetChildrenIds(1, children)));

	verify(children.GetCount() == 2);
	verify(children.Contains(2));
	verify(children.Contains(3));
}

test("Get all items in a thread")
{
	StoreCache cache;
	StoreItem item(1, 1);
	verify(OpStatus::IsSuccess(cache.UpdateItem(item)));
	item.parent_id = 1;
	item.m2_id = 2;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item)));
	item.parent_id = 2;
	item.m2_id = 3;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item)));

	OpINTSet thread;
	verify(OpStatus::IsSuccess(cache.GetThreadIds(3, thread)));

	verify(thread.GetCount() == 3);
	verify(thread.Contains(1));
	verify(thread.Contains(2));
	verify(thread.Contains(3));
}

test("Update existing items")
{
	StoreCache cache;
	StoreItem item(1, 1);
	verify(OpStatus::IsSuccess(cache.UpdateItem(item)));

	item.row_id = 4;
	item.size = 6;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item)));

	verify(cache.GetFromCache(item.m2_id) == item);
}

test("Update threaded items 1")
{
	StoreCache cache;
	StoreItem item(1, 1);
	verify(OpStatus::IsSuccess(cache.UpdateItem(item)));
	StoreItem item2(2, 2);
	item2.parent_id = 1;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item2)));
	StoreItem item3(3, 3);
	item3.parent_id = 1;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item3)));

	item2.size = 6;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item2)));

	OpINTSet children;
	verify(OpStatus::IsSuccess(cache.GetChildrenIds(1, children)));
	verify(children.GetCount() == 2);
	verify(children.Contains(2));
	verify(children.Contains(3));
}

test("Update threaded items 2")
{
	StoreCache cache;
	StoreItem item(1, 1);
	verify(OpStatus::IsSuccess(cache.UpdateItem(item)));
	StoreItem item2(2, 2);
	verify(OpStatus::IsSuccess(cache.UpdateItem(item2)));
	StoreItem item3(3, 3);
	item3.parent_id = 1;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item3)));
	StoreItem item4(4, 4);
	item4.parent_id = 1;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item4)));

	item4.parent_id = 2;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item4)));

	OpINTSet children1, children2;
	verify(OpStatus::IsSuccess(cache.GetChildrenIds(1, children1)));
	verify(children1.GetCount() == 1);
	verify(children1.Contains(3));
	verify(OpStatus::IsSuccess(cache.GetChildrenIds(2, children2)));
	verify(children2.GetCount() == 1);
	verify(children2.Contains(4));
}

test("Update threaded items 3")
{
	StoreCache cache;
	StoreItem item(1, 1);
	verify(OpStatus::IsSuccess(cache.UpdateItem(item)));
	StoreItem item2(2, 2);
	verify(OpStatus::IsSuccess(cache.UpdateItem(item2)));
	StoreItem item3(3, 3);
	item3.parent_id = 1;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item3)));
	StoreItem item4(4, 4);
	item4.parent_id = 1;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item4)));

	item3.parent_id = 2;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item3)));

	OpINTSet children1, children2;
	verify(OpStatus::IsSuccess(cache.GetChildrenIds(1, children1)));
	verify(children1.GetCount() == 1);
	verify(children1.Contains(4));
	verify(OpStatus::IsSuccess(cache.GetChildrenIds(2, children2)));
	verify(children2.GetCount() == 1);
	verify(children2.Contains(3));
}

test("Child sent date is updated")
{
	StoreCache cache;
	StoreItem item(1, 1);
	item.child_sent_date = 100;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item)));

	StoreItem item2(2, 2);
	item2.parent_id = 1;
	item2.child_sent_date = 200;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item2)));

	verify(cache.GetFromCache(item.m2_id).child_sent_date == 200);
}

test("Removing an item")
{
	StoreCache cache;
	StoreItem item(1, 1);
	verify(OpStatus::IsSuccess(cache.UpdateItem(item)));
	StoreItem item2(2, 2);
	item2.parent_id = 1;
	verify(OpStatus::IsSuccess(cache.UpdateItem(item2)));

	cache.RemoveItem(item.m2_id);

	verify(cache.GetFromCache(item.m2_id).m2_id == 0);
	OpINTSet thread_ids;
	verify(OpStatus::IsSuccess(cache.GetThreadIds(item2.m2_id, thread_ids)));
	verify(thread_ids.GetCount() == 1);
}
