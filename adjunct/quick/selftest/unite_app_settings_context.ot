group "quick.gadgetversion";

require init;
require GADGET_SUPPORT;

include "adjunct/quick/windows/DesktopGadget.h";

language C++;


table GadgetVersionTable(const uni_char*, UINT32, UINT32, UINT32, const char*)
{
	// input string, major, minor, revision, additional
	{ UNI_L("1.1.1 test"), 1, 1, 1, " test" },
	{ UNI_L("123.456.789.asdf"), 123, 456, 789, ".asdf" },
	{ UNI_L("4.1a"), 4, 1, 0, "a" },
	{ UNI_L("01.02.asdf"), 1, 2, 0, ".asdf" },
	{ UNI_L("01.asdf"), 1, 0, 0, ".asdf" },
	{ UNI_L(".ver1"), 0, 0, 0, ".ver1" },
	{ UNI_L("Version 1.0"), 0, 0, 0, "Version 1.0" },
	{ UNI_L("1.0"), 1, 0, 0, "" },
	{ UNI_L(""), 0, 0, 0, "" }
}

test("test set GadgetVersion")
{
	// check empty version first
	GadgetVersion version;
	verify(version.GetMajor() == 0);
	verify(version.GetMinor() == 0);
	verify(version.GetRevision() == 0);

	OpString info;
	verify(OpStatus::IsSuccess(version.GetAdditionalInfo(info)));
	verify(info.IsEmpty());

	// check versions from table now
	iterate (input, major, minor, revision, additional) from GadgetVersionTable
	{
		GadgetVersion version;

		verify(OpStatus::IsSuccess(version.Set(input)));
		verify(version.GetMajor() == major);
		verify(version.GetMinor() == minor);
		verify(version.GetRevision() == revision);

		OpString info;
		verify(OpStatus::IsSuccess(version.GetAdditionalInfo(info)));
		verify(info.Compare(additional) == 0);
	}
}

table GadgetVersionGreaterThan(const uni_char*, const uni_char*)
{
	// version 1 > version 2
	{ UNI_L("1.0"), UNI_L("0.3")},
	{ UNI_L("1.1.0"), UNI_L("1.0.3")},
	{ UNI_L("1.1.23"), UNI_L("1.1.22")},
	{ UNI_L("1.4"), UNI_L("1.3")},
	{ UNI_L("1.0.0 a"), UNI_L("1")},
	{ UNI_L("1.3 alpha"), UNI_L("0.3 beta")},
	{ UNI_L("1.0_a"), UNI_L("0.3.a")},
	{ UNI_L("1.0a"), UNI_L("1.0 b")}
}

test("test GadgetVersion greater/smaller than")
{
	iterate (greater, smaller) from GadgetVersionGreaterThan
	{
		GadgetVersion ver_greater, ver_smaller;

		verify(OpStatus::IsSuccess(ver_greater.Set(greater)));
		verify(OpStatus::IsSuccess(ver_smaller.Set(smaller)));

		verify (ver_greater != ver_smaller);

		verify (ver_greater > ver_smaller);
		verify (!(ver_greater <= ver_smaller));

		verify (ver_smaller < ver_greater);
		verify (!(ver_smaller >= ver_greater));
	}
}

table GadgetVersionEqual(const uni_char*, const uni_char*)
{
	// version 1 == version 2
	{ UNI_L("1.0.134 alpha"), UNI_L("1.0.134 alpha")},
	{ UNI_L("1.0"), UNI_L("1")},
	{ UNI_L("1.02.003"), UNI_L("1.2.3")},
	{ UNI_L("1.2.3"), UNI_L("1.2.3")},
	{ UNI_L("1.0.0_test"), UNI_L("1_test")},
	{ UNI_L("1.4a"), UNI_L("1.4A")}
}

test("test GadgetVersion equals")
{
	iterate (v1, v2) from GadgetVersionEqual
	{
		GadgetVersion version_1, version_2;

		verify(OpStatus::IsSuccess(version_1.Set(v1)));
		verify(OpStatus::IsSuccess(version_2.Set(v2)));

		verify (version_1 == version_2);
		verify (!(version_1 != version_2));

		verify (version_1 <= version_2);
		verify (version_1 >= version_2);
	}
}

table GadgetVersionAssignmentTable(const uni_char*, const uni_char*)
{
	// version 1, version 2
	{ UNI_L("1.1.1 test"), UNI_L("0")},
	{ UNI_L("123.456.789.asdf"), UNI_L("1.2.3 something") },
	{ UNI_L(".ver1"), UNI_L("1") },
	{ UNI_L("Version 1.0"), UNI_L("1") },
	{ UNI_L("23"), UNI_L("1") },
	{ UNI_L(""), UNI_L("") }
}

test("test GadgetVersion assignment")
{
	iterate (v1, v2) from GadgetVersionAssignmentTable
	{
		GadgetVersion version_1, version_2, tmp_version;

		verify(OpStatus::IsSuccess(version_1.Set(v1)));
		verify(OpStatus::IsSuccess(version_2.Set(v2)));
		
		// assignment operator
		tmp_version = version_1;
		verify (tmp_version == version_1);

		tmp_version = version_2;
		verify (tmp_version == version_2);

		// copy contstructor
		GadgetVersion tmp1(version_1);
		verify (tmp1 == version_1);

		GadgetVersion tmp2(version_2);
		verify (tmp2 == version_2);
	}
}