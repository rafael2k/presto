/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 */

group "quick.QuickContextualUI";

include "adjunct/quick/application/QuickContextualUI.h";
include "modules/util/OpLineParser.h";
include "modules/locale/oplanguagemanager.h";
include "modules/prefs/prefsmanager/collections/pc_ui.h";

test("Platform Syntax")
{
	OpString first;
	OpLineParser line(UNI_L("Platform Windows-Unix, Button"));
#if defined(MSWIN) || defined(_UNIX_DESKTOP_)
	verify (!SkipEntry(line,first));
#else
	verify (SkipEntry(line,first));
#endif

	OpLineParser line1(UNI_L("Platform QNX-Windows, Button"));
#ifdef MSWIN
	verify (!SkipEntry(line,first));
#elif defined PHOTON
	verify (!SkipEntry(line,first));
#else
	verify (SkipEntry(line,first));
#endif

	OpLineParser line2(UNI_L("Platform Mac-Win7-Unix, Button"));
	OpLineParser line3(UNI_L("Platform Unix-Mac-Win7, Button"));
	verify (SkipEntry(line2,first) == SkipEntry(line3,first));
}

test("Not syntax")
{
	OpString first;
	OpLineParser line1(UNI_L("Platform !Win7, Button"));
	OpLineParser line2(UNI_L("Platform Win7, Button"));
	verify (SkipEntry(line1,first) == !SkipEntry(line2,first));
	
	OpLineParser line3(UNI_L("Platform !Windows, Button"));
	OpLineParser line4(UNI_L("Platform Windows, Button"));
	verify (SkipEntry(line3,first) == !SkipEntry(line4,first));
	
	OpLineParser line5(UNI_L("Feature !Private, Button"));
	OpLineParser line6(UNI_L("Feature Private, Button"));
	verify (SkipEntry(line5,first) == !SkipEntry(line6,first));
	
	OpLineParser line7(UNI_L("Platform Mac-Win7-Unix, Button"));
	OpLineParser line8(UNI_L("Platform !Unix-Mac-Win7, Button"));
	verify (SkipEntry(line7,first) == !SkipEntry(line8,first));
	
	OpLineParser line9(UNI_L("Platform Windows-Mac, Button"));
	OpLineParser line10(UNI_L("Platform !Mac-Windows, Button"));
	verify (SkipEntry(line9,first) == !SkipEntry(line10,first));
}

test("Multiple rules")
{
	OpString first;
	BOOL ret,ret1,ret2;
	OpLineParser line1(UNI_L("Platform Windows, Feature !Private, Button"));
	OpLineParser line2(UNI_L("Feature !Private, Platform Windows-Mac, Button"));
	OpLineParser line3(UNI_L("Feature !Private, Button"));
	ret = SkipEntry(line3, first);
	
#ifdef MSWIN
	verify (SkipEntry(line1,first) == ret && SkipEntry(line2,first) == ret);
#elif defined _MACINTOSH_
	verify (!SkipEntry(line1,first));
	verify (SkipEntry(line2,first) == ret);
#else
	verify (!SkipEntry(line1,first));
	verify (!SkipEntry(line2,first));
#endif

	OpLineParser line4(UNI_L("Platform Windows-Mac,Feature Private, Button"));
	OpLineParser line5(UNI_L("Feature Private, Platform !Mac-Windows, Button"));
	OpLineParser line6(UNI_L("Feature Private, Button"));
	ret = SkipEntry(line6,first);
	ret1 = SkipEntry(line4,first);
	ret2 = SkipEntry(line5,first);
	if (ret)
	{
		verify (ret1 && ret2);
	}
	else
	{
		verify (ret1 == !ret2);
	}
}

test("Language syntax")
{
	OpString lang;
	lang.Set(g_languageManager->GetLanguage());
	
	{
		OpString str;
		str.AppendFormat(L"Language %s, Button", lang.CStr());
		OpLineParser line(str.CStr());
		verify(!SkipEntry(line,str));
	}
	
	{
		OpString str;
		str.AppendFormat(L"Language zh|en|%s, Button", lang.CStr());
		OpLineParser line(str.CStr());
		verify(!SkipEntry(line,str));
	}
	
	{
		OpString str;
		str.AppendFormat(L"Language !%s, Button", lang.CStr());
		OpLineParser line(str.CStr());
		verify(SkipEntry(line,str));
	}
	
	{
		OpString str;
		str.AppendFormat(L"Language !%s|zh|en|no|ru, Button", lang.CStr());
		OpLineParser line(str.CStr());
		verify(SkipEntry(line,str));
	}
}

test("ExtendedShortcuts")
{
	{
		OpString str;
		OpLineParser line(UNI_L("Feature ExtendedShortcuts, Button"));
#ifdef IM_EXTENDED_KEYBOARD_SHORTCUTS
		if (g_pcui->GetIntegerPref(PrefsCollectionUI::ExtendedKeyboardShortcuts))
			verify(!SkipEntry(line,str));
		else
			verify(SkipEntry(line,str));
#else
		verify(SkipEntry(line,str));
#endif

	}
}


test("Access to comma separated keys")
{
	/* Ensure we get the correct key offset after parsing line with platform syntax */
	{
		OpString sequence;
		sequence.Set(L"GestureUp, GestureDown");
		OpString key;
#if defined _UNIX_DESKTOP_
		key.AppendFormat(L"Platform Unix, %s", sequence.CStr());
#elif defined MSWIN
		key.AppendFormat(L"Platform Windows, %s", sequence.CStr());
#else
		key.AppendFormat(L"Platform Mac, %s", sequence.CStr());
#endif
		OpString token;
		OpLineParser line(key.CStr());
		verify(!SkipEntry(line,token));
		verify(!token.Compare(L"GestureUp"));
		int pos = key.Find(token);
		verify(pos != KNotFound);
		verify(!sequence.Compare(&key.CStr()[pos]));
	}

	/* Ensure we get the correct key offset after parsing line without platform syntax */
	{
		OpString sequence;
		sequence.Set(L"GestureUp, GestureDown");
		OpString key;
		key.Set(sequence);
		OpString token;
		OpLineParser line(key.CStr());
		verify(!SkipEntry(line,token));
		verify(!token.Compare(L"GestureUp"));
		int pos = key.Find(token);
		verify(pos != KNotFound);
		verify(!sequence.Compare(&key.CStr()[pos]));
	}
}
