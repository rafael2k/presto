group "quick.webserver.webservermanager";

require init;
require WEBSERVER_SUPPORT;

include "adjunct/quick/managers/WebServerManager.h";
include "adjunct/quick/selftest/src/ST_WebServerManager.h";

language C++;

global
{
	void InitWebServerManager()
	{
		g_fake_webserver_manager.reset(OP_NEW(ST_WebServerManager, ()));
		g_fake_webserver_manager->Init(&g_fake_account_manager,
				&g_fake_gadget_manager, &g_fake_hotlist_manager);
	}

	FakeDesktopGadgetManager	g_fake_gadget_manager;
	FakeOperaAccountManager		g_fake_account_manager;
	FakeHotlistManager			g_fake_hotlist_manager;
	FakeFeatureControllerListener g_fake_controller_listener;
	OpAutoPtr<ST_WebServerManager> g_fake_webserver_manager;
}

setup
{
	g_fake_gadget_manager.Init();
	g_fake_hotlist_manager.Init();
	g_fake_account_manager.Init();
}


test("Enable Webserver (logged in)") async;
{
	InitWebServerManager();

	g_fake_account_manager.SetLoggedIn(TRUE);
	g_fake_webserver_manager->GetOperaAccountManager()->SetUsernameAndPassword(
			UNI_L("user"), UNI_L("password"));

	g_fake_controller_listener.SetPassingCriteria(
			FakeFeatureControllerListener::FeatureEnabled, 4000);

	g_fake_webserver_manager->AddListener(&g_fake_controller_listener);

	// CHECK: setup
	if (!g_fake_webserver_manager->IsInited()
			|| g_fake_webserver_manager->IsFeatureEnabled()
			|| !g_fake_webserver_manager->GetOperaAccountManager()->GetLoggedIn()
			|| !g_fake_webserver_manager->GetOperaAccountManager()->GetAccountContext()->IsValidCredentials())
	{
		ST_failed( "Failed to initialize test correctly" );
	}

	// ACTION: enable
	WebServerSettingsContext context;
	context.SetDeviceName(UNI_L("home"));

	g_fake_webserver_manager->EnableFeature(&context);
}

test("Webserver re-connect, webserver enabled") async;
{
	InitWebServerManager();

	g_fake_webserver_manager->GetOperaAccountManager()->SetLoggedIn(TRUE);
	g_fake_webserver_manager->GetOperaAccountManager()->SetUsernameAndPassword(
			UNI_L("user"), UNI_L("password"));

	g_fake_webserver_manager->AddListener(&g_fake_controller_listener);

	WebServerSettingsContext context;
	context.SetDeviceName(UNI_L("home"));

	g_fake_webserver_manager->EnableFeature(&context);

	 // set after enabling, so that it doen't pass before that
	g_fake_controller_listener.SetPassingCriteria(
			FakeFeatureControllerListener::FeatureEnabled, 4000);

	// ACTION: device being taken over
	g_fake_webserver_manager->OnProxyDisconnected(PROXY_CONNECTION_LOGGED_OUT, TRUE);
}


test("Webserver re-connect, webserver disabled") async;
{
	InitWebServerManager();

	g_fake_webserver_manager->GetOperaAccountManager()->SetLoggedIn(TRUE);
	g_fake_webserver_manager->GetOperaAccountManager()->SetUsernameAndPassword(
			UNI_L("user"), UNI_L("password"));

	g_fake_controller_listener.SetPassingCriteria(
			FakeFeatureControllerListener::FeatureEnabled, 4000);

	g_fake_webserver_manager->AddListener(&g_fake_controller_listener);

	// ACTION: enable feature
	WebServerSettingsContext context;
	context.SetDeviceName(UNI_L("home"));

	g_fake_webserver_manager->EnableFeature(&context);
}

test("discovered devices")
{
	InitWebServerManager();

	OP_ASSERT(g_fake_webserver_manager->IsLocalDiscoveryNotificationsEnabled());
	g_fake_webserver_manager->SetHasDiscoveredServices(TRUE);

	verify(g_fake_webserver_manager->GetWidgetStateModifier());
	verify(g_fake_webserver_manager->GetWidgetStateModifier()->HasAttention());

	OpString users_found_str; 
	g_languageManager->GetString(Str::S_WEBSERVER_DISCOVERY_TOOLTIP, users_found_str);
	verify(g_fake_webserver_manager->GetWidgetStateModifier()->GetAttentionText().Compare(users_found_str) == 0);
}

// manual tests
test("webserver is insecure")
	manual("do you see an update or information about an insecure Unite version?");
{
	g_webserver_manager->OnProxyDisconnected(PROXY_CONNECTION_ERROR_UNSECURE_SERVER_VERSION, FALSE);
}
