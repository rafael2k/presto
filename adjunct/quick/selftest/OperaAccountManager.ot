group "quick.webserver.operaaccountmanager";

require init;
require WEBSERVER_SUPPORT;

include "adjunct/quick/selftest/src/ST_OperaAccountManager.h";

language C++;

test("Authenticate") async;
{
	ST_OperaAccountManager manager(ST_OperaAccountManager::SuccessCriteriaAuthentication);
	if (OpStatus::IsError(manager.Init()))
	{
		ST_failed("Init failed");
	}

	OpStringC uname(UNI_L("user"));
	OpStringC pword(UNI_L("pass"));

	if (OpStatus::IsError(manager.Authenticate(uname, pword)))
	{
		ST_failed("Authenticate returned error");
	}
}

test("Register Device, logged out, no username known") async;
{
	ST_OperaAccountManager manager(ST_OperaAccountManager::SuccessCriteriaDeviceRegistration);
	if (OpStatus::IsError(manager.Init()))
	{
		ST_failed("Init failed");
	}

	OpStringC device_name(UNI_L("device"));
	if (OpStatus::IsError(manager.RegisterDevice(device_name, FALSE)))
	{
		// needs to return an error, there's no username
		ST_passed();
	}
}


test("Register Device, logged out, username known in prefs, wand password set") async;
{
	ST_OperaAccountManager manager(ST_OperaAccountManager::SuccessCriteriaDeviceRegistration);
	if (OpStatus::IsError(manager.Init()))
	{
		ST_failed("Init failed");
	}

	manager.SetPrefsUserName(UNI_L("user"));
	manager.SetWandPassword(UNI_L("password"));

	OpStringC device_name(UNI_L("device"));
	if (OpStatus::IsError(manager.RegisterDevice(device_name, FALSE)))
	{
		ST_failed("RegisterDevice returned error");
	}
}

test("Register Device, logged in, password cached") async;
{
	ST_OperaAccountManager manager(ST_OperaAccountManager::SuccessCriteriaDeviceRegistration);
	if (OpStatus::IsError(manager.Init()))
	{
		ST_failed("Init failed");
	}

	manager.SetUsernameAndPassword(UNI_L("user"), UNI_L("password"));
	manager.SetLoggedIn(TRUE);

	OpStringC device_name(UNI_L("device"));
	if (OpStatus::IsError(manager.RegisterDevice(device_name, FALSE)))
	{
		ST_failed("RegisterDevice returned error");
	}
}

test("Register Device, logged in, password not cached, wand password set") async;
{
	ST_OperaAccountManager manager(ST_OperaAccountManager::SuccessCriteriaDeviceRegistration);
	if (OpStatus::IsError(manager.Init()))
	{
		ST_failed("Init failed");
	}

	manager.SetWandPassword(UNI_L("password"));
	manager.SetUsernameAndPassword(UNI_L("user"), NULL);
	manager.SetLoggedIn(TRUE);

	OpStringC device_name(UNI_L("device"));
	if (OpStatus::IsError(manager.RegisterDevice(device_name, FALSE)))
	{
		ST_failed("RegisterDevice returned error");
	}
}

test("Register Device (forced), logged out, username known in prefs, wand password set") async;
{
	ST_OperaAccountManager manager(ST_OperaAccountManager::SuccessCriteriaDeviceRegistration);
	if (OpStatus::IsError(manager.Init()))
	{
		ST_failed("Init failed");
	}

	manager.SetPrefsUserName(UNI_L("user"));
	manager.SetWandPassword(UNI_L("password"));

	OpStringC device_name(UNI_L("device"));
	if (OpStatus::IsError(manager.RegisterDevice(device_name, TRUE)))
	{
		ST_failed("RegisterDevice returned error");
	}
}

test("Register Device, logged out, username known in prefs, no password found") async;
{
	ST_OperaAccountManager manager(ST_OperaAccountManager::SuccessCriteriaDeviceRegistration);
	if (OpStatus::IsError(manager.Init()))
	{
		ST_failed("Init failed");
	}

	manager.SetPrefsUserName(UNI_L("user"));
	OpStringC device_name(UNI_L("device"));
	if (OpStatus::IsError(manager.RegisterDevice(device_name, FALSE)))
	{
		ST_failed("RegisterDevice returned error");
	}
}


test("Release Device, logged out, no username known") async;
{
	ST_OperaAccountManager manager(ST_OperaAccountManager::SuccessCriteriaDeviceRelease);
	if (OpStatus::IsError(manager.Init()))
	{
		ST_failed("Init failed");
	}

	OpStringC device_name(UNI_L("device"));
	if (OpStatus::IsError(manager.ReleaseDevice(device_name)))
	{
		// needs to return an error, there's no username
		ST_passed();
	}
}


test("Release Device, logged out, username known in prefs, wand password set") async;
{
	ST_OperaAccountManager manager(ST_OperaAccountManager::SuccessCriteriaDeviceRelease);
	if (OpStatus::IsError(manager.Init()))
	{
		ST_failed("Init failed");
	}

	manager.SetPrefsUserName(UNI_L("user"));
	manager.SetWandPassword(UNI_L("password"));

	OpStringC device_name(UNI_L("device"));
	if (OpStatus::IsError(manager.ReleaseDevice(device_name)))
	{
		ST_failed("ReleaseDevice returned error");
	}
}

test("Release Device, logged in, password cached") async;
{
	ST_OperaAccountManager manager(ST_OperaAccountManager::SuccessCriteriaDeviceRelease);
	if (OpStatus::IsError(manager.Init()))
	{
		ST_failed("Init failed");
	}

	manager.SetUsernameAndPassword(UNI_L("user"), UNI_L("password"));
	manager.SetLoggedIn(TRUE);

	OpStringC device_name(UNI_L("device"));
	if (OpStatus::IsError(manager.ReleaseDevice(device_name)))
	{
		ST_failed("ReleaseDevice returned error");
	}
}

test("Release Device, logged out, username known in prefs, no password found") async;
{
	ST_OperaAccountManager manager(ST_OperaAccountManager::SuccessCriteriaDeviceRelease);
	if (OpStatus::IsError(manager.Init()))
	{
		ST_failed("Init failed");
	}

	manager.SetPrefsUserName(UNI_L("user"));
	OpStringC device_name(UNI_L("device"));
	if (OpStatus::IsError(manager.ReleaseDevice(device_name)))
	{
		ST_failed("ReleaseDevice returned error");
	}
}
