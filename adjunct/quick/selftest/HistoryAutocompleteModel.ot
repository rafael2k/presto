/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick.HistoryAutocompleteModel";

include "adjunct/quick/models/HistoryAutocompleteModel.h";

include "adjunct/quick/hotlist/HotlistModelItem.h";
include "adjunct/quick/models/Bookmark.h";
include "adjunct/quick/models/HistoryModelItem.h";
include "adjunct/desktop_util/string/stringutils.h";
include "adjunct/desktop_util/skin/SkinUtils.h";
include "adjunct/quick_toolkit/widgets/OpTreeView/TreeViewModelItem.h";
include "adjunct/quick_toolkit/widgets/OpTreeView/ItemDrawArea.h";
include "modules/pi/OpBitmap.h";

global
{
	#define SEARCH_TERM UNI_L("test")
	#define ADDRESS UNI_L("http://www.test.com/test")
	#define TITLE UNI_L("test title")
	#define TITLE_HIGHLIGHT UNI_L("<b>test</b> title")
	#define BOOKMARK_TITLE UNI_L("My bookmark")
	#define ASSOCIATED_TEXT UNI_L("Associated text")
	#define ACCESS_TIME 123456

	class TestItem
	{
	public:
		TestItem()
			: key(HistoryKey::Create(ADDRESS))
			, core_page(HistoryPage::Create(ACCESS_TIME, 0, TITLE, key))
			, page(core_page.get())
		{}

		HistoryAutocompleteModelItem* operator->() { return get(); }
		HistoryAutocompleteModelItem* get() { return page.GetSimpleItem(); }
		
		void SetSearchType(PageBasedAutocompleteItem::SearchType type) { page.GetSimpleItem()->SetSearchType(type); }

		HistoryKey* key;
		OpAutoPtr<HistoryPage> core_page;
		HistoryModelPage page;
	};
};

test("address is correct")
{
	TestItem item;
	OpString address;

	verify_success(item->GetAddress(address));

	verify(address == ADDRESS);
}

test("first column is icon")
{
    TestItem item;

    // Set search type to opera page. For opera page icon is taken from core page
    item.SetSearchType(PageBasedAutocompleteItem::OPERA_PAGE);

    OpTreeModelItem::ItemData item_data(OpTreeModelItem::COLUMN_QUERY);
    
    // icon should be displayed only when item is focused
    item->GetItemData(&item_data);
    verify(!item_data.column_query_data.column_image);
   
    item_data.flags |= OpTreeModelItem::FLAG_FOCUSED; 
    item->GetItemData(&item_data);
    verify(OpStringC8(item.core_page->GetImage()) == item_data.column_query_data.column_image);
}

test("OPERA_PAGE second column is address")
{
	TestItem item;
	OpString address;
	
	// Set search type to opera page to avoid address color
	item.SetSearchType(PageBasedAutocompleteItem::OPERA_PAGE);

	OpTreeModelItem::ItemData item_data(OpTreeModelItem::COLUMN_QUERY);
	item_data.column_query_data.column = 1;
	item_data.column_query_data.column_text = &address;
	item->GetItemData(&item_data);

	verify(address == ADDRESS);
}

test("HISTORY second column contains address and title")
{
	TestItem item;
	OpString address;
	OpString title;

	item.SetSearchType(PageBasedAutocompleteItem::HISTORY);
	item->GetTitle(title);
	item->GetDisplayAddress(address);
	

	verify(address == ADDRESS);
	verify(title == TITLE);
}

test("has correct image")
{
	TestItem item;

	verify(OpStringC8(item->GetItemImage()) == item.core_page->GetImage());
}

test("parseFormattedText basic test")
{
	ItemDrawArea drawArea;
	OpString input;
	verify_success(input.Set("aaaaaa"));
	verify_success(TreeViewModelItem::ParseFormattedText(NULL,&drawArea,input));
	verify(drawArea.m_strings.m_string.Get() != NULL);
	verify(drawArea.m_strings.m_next == NULL);
	OpString output; 
	verify_success(output.Set(drawArea.m_strings.m_string.Get()));
	verify (output == input);

	verify_success(input.Set(""));
	ItemDrawArea drawArea2;
	verify_success(TreeViewModelItem::ParseFormattedText(NULL,&drawArea2,input));
	verify(drawArea2.m_strings.m_string.Get() != NULL);
	verify(drawArea2.m_strings.m_next == NULL);
}

test("parseFormattedText test bold")
{
	ItemDrawArea drawArea;
	OpString input;
	verify_success(input.Set("bbb <b>aaaaaa</b> ccc"));
	verify_success(TreeViewModelItem::ParseFormattedText(NULL,&drawArea,input));

	ItemDrawArea::StringList* current_string = &drawArea.m_strings;
	verify(current_string);
	OpString output;

	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L("bbb "));
	verify(current_string->m_string_flags == 0);

	current_string = current_string->m_next;
	verify(current_string);
	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L("aaaaaa"));
	verify(current_string->m_string_flags == ItemDrawArea::FLAG_BOLD);

	current_string = current_string->m_next;
	verify(current_string);
	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L(" ccc"));
	verify(current_string->m_string_flags == 0);

	verify(current_string->m_next == NULL);
}


test("parseFormattedText test color")
{
	ItemDrawArea drawArea;
	OpString input;
	verify_success(input.Set("bbb <c=123456>aaaaaa</c> ccc"));
	verify_success(TreeViewModelItem::ParseFormattedText(NULL,&drawArea,input));

	ItemDrawArea::StringList* current_string = &drawArea.m_strings;
	verify(current_string);
	OpString output;

	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L("bbb "));
	verify(current_string->m_string_flags == 0);

	current_string = current_string->m_next;
	verify(current_string);
	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L("aaaaaa"));
	verify(current_string->m_string_flags == ItemDrawArea::FLAG_COLOR);

	current_string = current_string->m_next;
	verify(current_string);
	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L(" ccc"));
	verify(current_string->m_string_flags == 0);

	verify(current_string->m_next == NULL);
}


test("parseFormattedText test color and bold")
{
	ItemDrawArea drawArea;
	OpString input;
	verify_success(input.Set("bbb <c=123456>aaa<b>www</b>aa</c> ccc"));
	verify_success(TreeViewModelItem::ParseFormattedText(NULL,&drawArea,input));

	ItemDrawArea::StringList* current_string = &drawArea.m_strings;
	verify(current_string);
	OpString output;

	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L("bbb "));
	verify(current_string->m_string_flags == 0);

	current_string = current_string->m_next;
	verify(current_string);
	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L("aaa"));
	verify(current_string->m_string_flags == ItemDrawArea::FLAG_COLOR);

	current_string = current_string->m_next;
	verify(current_string);
	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L("www"));
	verify(current_string->m_string_flags | ItemDrawArea::FLAG_BOLD);
	verify(current_string->m_string_flags | ItemDrawArea::FLAG_COLOR);

	current_string = current_string->m_next;
	verify(current_string);
	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L("aa"));
	verify(current_string->m_string_flags == ItemDrawArea::FLAG_COLOR);

	current_string = current_string->m_next;
	verify(current_string);
	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L(" ccc"));
	verify(current_string->m_string_flags == 0);

	verify(current_string->m_next == NULL);
}


test("parseFormattedText test color and bold and italic")
{
	ItemDrawArea drawArea;
	OpString input;
	verify_success(input.Set("<i>bbb </i><c=123456>aaa<i>www</i>aa</c><b>ccc</b> s"));
	verify_success(TreeViewModelItem::ParseFormattedText(NULL,&drawArea,input));

	ItemDrawArea::StringList* current_string = &drawArea.m_strings;
	verify(current_string);
	OpString output;

	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L("bbb "));
	verify(current_string->m_string_flags == ItemDrawArea::FLAG_ITALIC);

	current_string = current_string->m_next;
	verify(current_string);
	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L("aaa"));
	verify(current_string->m_string_flags == ItemDrawArea::FLAG_COLOR);

	current_string = current_string->m_next;
	verify(current_string);
	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L("www"));
	verify(current_string->m_string_flags | ItemDrawArea::FLAG_ITALIC);
	verify(current_string->m_string_flags | ItemDrawArea::FLAG_COLOR);

	current_string = current_string->m_next;
	verify(current_string);
	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L("aa"));
	verify(current_string->m_string_flags == ItemDrawArea::FLAG_COLOR);

	current_string = current_string->m_next;
	verify(current_string);
	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L("ccc"));
	verify(current_string->m_string_flags == ItemDrawArea::FLAG_BOLD);

	current_string = current_string->m_next;
	verify(current_string);
	verify_success(output.Set(current_string->m_string.Get()));
	verify(output == UNI_L(" s"));
	verify(current_string->m_string_flags == 0);
	
	verify(current_string->m_next == NULL);
}


test("parseFormattedText should not crash")
{
	ItemDrawArea drawArea;
	OpString input, output;
	verify_success(input.Set("23487sad&*%^#&^<324!@345>*R^&%$J>>MM<</>s"));
	verify_success(output.Set(input.CStr()));
	verify_success(TreeViewModelItem::ParseFormattedText(NULL,&drawArea,input));
	verify_string(output, input);

	verify_success(input.Set("<meta property=\"og:image\" content=\"http://static.myopera.com/upic/pool1/qC/gH0/WKu7VsR_A8xFWkbXNAkGQY/292470_l.jpg\">"));
	verify_success(output.Set(input.CStr()));
	verify_success(TreeViewModelItem::ParseFormattedText(NULL,&drawArea,input) == OpStatus::ERR);
	verify_string(output, input);

	verify_success(input.Set("<![endif]--><!--[if IE 6]><link rel=\"stylesheet\" href=\"http://static.myopera.com/community/css/browsers/ie6.css\" type=\"text/css\"><![endif]--><!--[if IE 7]>"));
	verify_success(output.Set(input.CStr()));
	verify_success(TreeViewModelItem::ParseFormattedText(NULL,&drawArea,input) == OpStatus::ERR);
	verify_string(output, input);
}


test("can set bookmark as source")
{
	TestItem item;
	item.SetSearchType(PageBasedAutocompleteItem::BOOKMARK);
	BookmarkItem bookmark_item;
	Bookmark bookmark(&bookmark_item);
	bookmark.SetName(BOOKMARK_TITLE);
	bookmark.SetUrl(ADDRESS);
	item->SetBookmark(&bookmark);

	OpString title;
	OpTreeModelItem::ItemData item_data(OpTreeModelItem::COLUMN_QUERY);
	item_data.column_query_data.column = 2;
	item_data.column_query_data.column_text = &title;
	verify_success(item->GetItemData(&item_data));
}

test("shortcut Url basic")
{

	OpString input, preserve;

	verify_success(input.Set("/reviews/Components,1/Motherboards,2/"));
	verify_success(HistoryAutocompleteModelItem::ShortenUrl(input,preserve,99));
	verify_string(input, "/reviews/Components,1/Motherboards,2/");
	
	verify_success(input.Set("/reviews/Components,1/Motherboards,2/"));
	verify_success(HistoryAutocompleteModelItem::ShortenUrl(input,preserve,36));
	verify_string(input, "/.../Components,1/Motherboards,2/");

	preserve.Set("rev");
	verify_success(input.Set("/reviews/Components,1/Motherboards,2/"));
	verify_success(HistoryAutocompleteModelItem::ShortenUrl(input,preserve,36));
	verify_string(input, "/reviews/.../Motherboards,2/");

}

test("shortcut Url query")
{
	OpString input, preserve;
	
	verify_success(input.Set("/search?client=opera&rls=en&q=some+long+query&sourceid=opera&ie=utf-8&oe=utf-8&channel=suggest"));
	verify_success(HistoryAutocompleteModelItem::ShortenUrl(input,preserve,99));
	verify_string(input, "/search?client=opera&rls=en&q=some+long+query&sourceid=opera&ie=utf-8&oe=utf-8&channel=suggest");
	
	verify_success(input.Set("/search?client=opera&rls=en&q=some+long+query&sourceid=opera&ie=utf-8&oe=utf-8&channel=suggest"));
	verify_success(HistoryAutocompleteModelItem::ShortenUrl(input,preserve,20));
	verify_string(input, "/...&channel=suggest");
	
	preserve.Set("opera");
	verify_success(input.Set("/search?client=opera&rls=en&q=some+long+query&sourceid=opera&ie=utf-8&oe=utf-8&channel=suggest"));
	verify_success(HistoryAutocompleteModelItem::ShortenUrl(input,preserve,42));
	verify_string(input, "/search?client=opera&...&sourceid=opera&...");
	
	preserve.Set("some");
	verify_success(input.Set("/search?client=opera&rls=en&q=some+long+query&sourceid=opera&ie=utf-8&oe=utf-8&channel=suggest"));
	verify_success(HistoryAutocompleteModelItem::ShortenUrl(input,preserve,45));
	verify_string(input, "/...&q=some+long+query&...&channel=suggest");
}


