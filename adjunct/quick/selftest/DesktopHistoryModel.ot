/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quick.DesktopHistoryModel";
require init;

include "adjunct/quick/models/DesktopHistoryModel.h";

global
{
	class TestListener : public OpTreeModel::Listener
	{
	public:
		TestListener() : count_tree_changed(0) {}
		virtual	void OnItemAdded(OpTreeModel* tree_model, INT32 item) {}
		virtual	void OnItemChanged(OpTreeModel* tree_model, INT32 item, BOOL sort) {}
		virtual	void OnItemRemoving(OpTreeModel* tree_model, INT32 item) {}
		virtual	void OnSubtreeRemoving(OpTreeModel* tree_model, INT32 parent, INT32 subtree_root, INT32 subtree_size) {}
		virtual	void OnSubtreeRemoved(OpTreeModel* tree_model, INT32 parent, INT32 subtree_root, INT32 subtree_size) {}
		virtual void OnTreeChanging(OpTreeModel* tree_model) {}
		virtual void OnTreeChanged(OpTreeModel* tree_model)
		{
			count_tree_changed++;
		}
		virtual void OnTreeDeleted(OpTreeModel* tree_model) {}

		int count_tree_changed;
	};
};

test("Should only call OnTreeChanged once")
{
	TestListener listener;
	DesktopHistoryModel* model = DesktopHistoryModel::GetInstance();
	model->AddListener(&listener);

	model->ChangeMode(DesktopHistoryModel::TIME_MODE);
	model->RemoveListener(&listener);

	verify(listener.count_tree_changed == 1);
};
