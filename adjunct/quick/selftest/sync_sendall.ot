/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */


group "quick_sync.sendall";
require init;
require SUPPORT_DATA_SYNC;

include "modules/sync/sync_coordinator.h";
include "modules/sync/sync_dataitem.h";
include "modules/sync/sync_state.h";
include "modules/sync/sync_util.h";
include "adjunct/quick/Application.h";
include "adjunct/quick/managers/SyncManager.h";
include "adjunct/quick/selftest/src/ST_SyncNoteItems.h";

language C++;

table bookmark_samples (const uni_char *, const uni_char*, const uni_char*)
{
	{ UNI_L("http://www.little-gamers.com/comics/00001551.gif"), UNI_L("Title 11"), UNI_L("U")},
	{ UNI_L("http://xkcd.org/c230.html"),                        UNI_L("Title 22"), UNI_L("V")},
	{ UNI_L("http://www.vg.no/"),                                UNI_L("Title 33"), UNI_L("W")},
	{ UNI_L("http://db.no/"),                                    UNI_L("Title 44"), UNI_L("X")},
	{ UNI_L("http://www.adobe.com/no/"),                         UNI_L("Title 55"), UNI_L("Y")},
	{ UNI_L("http://www.cafemir.no/"),                           UNI_L("Title 66"), UNI_L("Z")},
	{ UNI_L("http://www.gulesider.no/tk/index.c"),               UNI_L("Title 77"), UNI_L("M")},
	{ UNI_L("http://people.opera.com/howcome/"),                 UNI_L("Title 88"), UNI_L("God")},
	{ UNI_L("http://www.ifi.uio.no"),                            UNI_L("Title 99"), UNI_L("More than one word")},
}


test("Send all item")
{
	ST_SyncNoteItems* syncer = OP_NEW(ST_SyncNoteItems, ());
	verify(syncer);
	syncer->EnableNoteListening(TRUE);
	verify(syncer->IsNoteListening());

	HotlistGenericModel* model = g_hotlist_manager->GetNotesModel();
	verify(model);

	model->Erase();
	model->GetTrashFolder(); // Adds trash

	// Add item with allow_dups FALSE, should not add the item again
	iterate(url_name, title, nick) from bookmark_samples
	{
		HotlistModelItem* item = OP_NEW(NoteModelItem, ());
		
		item->SetUrl(url_name);
		item->SetName(title);
		item->SetShortName(nick);

		HotlistModelItem* added = model->AddItem(item, /* allow_duplicates */ FALSE, FALSE);
		verify(added != 0);
	}

 	verify(model->GetCount() == 10);
	verify(syncer->GetAddCount() == 10);

	verify(OpStatus::IsSuccess(syncer->SyncDataFlush(OpSyncDataItem::DATAITEM_NOTE, /* first_sync*/ FALSE, /*dirty*/ TRUE))); // test not dirty  too
	   
}
