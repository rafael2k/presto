/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */


group "hotlist.bookmarks";
require init;
require HISTORY_SUPPORT;
require USE_HOTLIST;

include "adjunct/quick/hotlist/HotlistModel.h";
include "adjunct/quick/hotlist/hotlistparser.h";
include "adjunct/quick/hotlist/HotlistManager.h";
include "modules/history/OpHistoryModel.h";
include "modules/pi/OpDragManager.h";


language C++;

table url_samples (const uni_char *, const uni_char*, time_t, const uni_char*)
{
	{ UNI_L("http://www.webmonkey.com/"),                         UNI_L("Title 1"), 1173106132, UNI_L("a")}, 
	{ UNI_L("http://www.whatismyip.com/"),                        UNI_L("Title 2"), 1173106172, UNI_L("b")},
	{ UNI_L("http://www.whitehouse.gov/"),                        UNI_L("Title 3"), 1172586234, UNI_L("c")},
	{ UNI_L("http://weblogs.mozillazine.org/asa/"),               UNI_L("Title 4"), 1138388417, UNI_L("d")},
	{ UNI_L("http://webmail.uio.no/"),                            UNI_L("Title 5"), 1172479246, UNI_L("e")},
	{ UNI_L("http://www.webstandards.org/files/acid2/test.html"), UNI_L("Title 6"), 1170861512, UNI_L("f")}, 
	{ UNI_L("http://widgets.opera.com/"),                         UNI_L("Title 7"), 1170684169, UNI_L("h")}, 
	{ UNI_L("http://www.wired.com/wired/"),                       UNI_L("Title 8"), 1131017655, UNI_L("n")}, 
	{ UNI_L("http://women.debian.org/"),                          UNI_L("Title 9"), 1146072219, UNI_L("t")}, 
}

table bookmark_samples (const uni_char *, const uni_char*, const uni_char*)
{
	{ UNI_L("http://www.little-gamers.com/comics/00001551.gif"), UNI_L("Title 11"), UNI_L("U")},
	{ UNI_L("http://xkcd.org/c230.html"),                        UNI_L("Title 22"), UNI_L("V")},
	{ UNI_L("http://www.vg.no/"),                                UNI_L("Title 33"), UNI_L("W")},
	{ UNI_L("http://db.no/"),                                    UNI_L("Title 44"), UNI_L("X")},
	{ UNI_L("http://www.adobe.com/no/"),                         UNI_L("Title 55"), UNI_L("Y")},
	{ UNI_L("http://www.cafemir.no/"),                           UNI_L("Title 66"), UNI_L("Z")},
	{ UNI_L("http://www.gulesider.no/tk/index.c"),               UNI_L("Title 77"), UNI_L("M")},
	{ UNI_L("http://people.opera.com/howcome/"),                 UNI_L("Title 88"), UNI_L("God")},
	{ UNI_L("http://www.ifi.uio.no"),                            UNI_L("Title 99"), UNI_L("More than one word")},
}

table bookmarks_table (const uni_char*, const uni_char*, time_t, const uni_char*, BOOL, BOOL, int, int)
{
	{ UNI_L("http://www.db.no"),                         UNI_L("DB"), 1173106132, UNI_L("a description"), TRUE, TRUE, 1, 1}, 
	{ UNI_L("http://www.ap.no"),                         UNI_L("AP"), 1173106172, UNI_L("newspaper etc"), TRUE, FALSE, 1, 1},
	{ UNI_L("http://www.morgenbladet.no/"),              UNI_L("MB"), 1172586234, UNI_L("blad"), FALSE, TRUE, 1, 1},
	{ UNI_L("http://weblogs.mozillazine.org"),           UNI_L("MOZ"), 1138388417, UNI_L("something"), FALSE, FALSE, 1, 1},
	{ UNI_L("http://www.reddit.com"),                    UNI_L("RED"), 1131017655, UNI_L("reddit"), TRUE, TRUE, 0, 0}, 
	{ UNI_L("http://www.digi.no/"),                      UNI_L("DIG"), 1146072219, UNI_L("norwegian"), TRUE, TRUE, 10, 10}, 
	{ UNI_L("http://www.ifi.uio.no/"),                   UNI_L("IFI"), 1172479246, UNI_L("informatics"), TRUE, TRUE, 2, 3},
}

test("Add bookmark and is duplicate bookmark")
{
	HotlistModel* model = g_hotlist_manager->GetBookmarksModel();
	verify(model);

	model->Erase();
	model->GetTrashFolder(); // Adds trash
	
	iterate(url_name, title, vis, nick) from url_samples
	{
		OP_STATUS status;

		// AddItem Creates the item and adds it to the model
		HotlistModelItem* item = model->AddItem(OpTypedObject::BOOKMARK_TYPE, status, FALSE);
		verify(OpStatus::IsSuccess(status) && item != 0);

		HotlistManager::ItemData item_data;
		item_data.url.Set(url_name);
		item_data.name.Set(title);
		item_data.shortname.Set(nick);
		g_hotlist_manager->SetItemValue(item->GetID(), item_data, FALSE, HotlistModel::FLAG_NAME | HotlistModel::FLAG_URL | HotlistModel::FLAG_NICK);
	
		verify(item->IsBookmark());
		verify(item->GetModel() == model);
	}

	verify(model->GetCount() == 10);

	// Add item with allow_dups FALSE, should not add the item again
	iterate(url_name, title, vis, nick) from url_samples
	{
		HotlistModelItem* item = OP_NEW(BookmarkModelItem, ());
		
		item->SetUrl(url_name);
		item->SetName(title);
		item->SetVisited(vis);
		item->SetShortName(nick);

		HotlistModelItem* added = model->AddItem(item, /* allow_duplicates */ FALSE, FALSE);
		verify(added == 0);
	}

 	verify(model->GetCount() == 10);
	
//  	HistoryPage* page = 0;
//  	verify(model->IsDuplicateURL(UNI_L("http://weblogs.mozillazine.org/asa/"), &page)); // page == 0
//  	BookmarkModelItem* bm = 0;
//  	verify(model->IsDuplicateURLInSameFolder(UNI_L("http://weblogs.mozillazine.org/asa/"),NULL, &bm)); // bm == 0

	//verify(model->IsDuplicateURL(&item, &page, &bm));

}

test("Nickname")
{
	HotlistModel* model = g_hotlist_manager->GetBookmarksModel();
	
	// --- Get bookmark by nickname ---

	verify(model->GetByNickname(UNI_L("t")) != 0);
	verify(model->GetByNickname(UNI_L("h")) != 0);

	// --- Check if nickname in use

	verify(g_hotlist_manager->HasNickname(UNI_L("t"), 0));

	// --- check if nickname in use by any other item than this one

	OP_STATUS status;
	HotlistModelItem* item = model->AddItem(OpTypedObject::BOOKMARK_TYPE, status, FALSE);
	verify(OpStatus::IsSuccess(status));
	item->SetUrl(UNI_L("http://www.sau.no"));
	item->SetName(UNI_L("Sau"));
	item->SetShortName(UNI_L("tt"));
	verify(!g_hotlist_manager->HasNickname(UNI_L("tt"), item));

	// Folder nickname test -----------------------------------------------------------------------
	
	HotlistModelItem* folder = model->AddItem(OpTypedObject::FOLDER_TYPE, status, FALSE);
	folder->SetShortName(UNI_L("fl"));

	iterate(url_name, name_name, nick) from bookmark_samples
	{
		HotlistManager::ItemData item_data;
		item_data.url.Set(url_name);
		item_data.name.Set(name_name);
		item_data.shortname.Set(nick);

		verify(g_hotlist_manager->NewItemFirstInFolder(model, OpTypedObject::BOOKMARK_TYPE, &item_data, folder));
		
		HotlistModelItem* item = model->GetByName(name_name);
		verify(item);
		if (item)
		{
			verify(item->GetParentFolder() == folder);
			verify(item->GetPreviousItem() == 0);
		}
	}	

	// --- Get urls corresponding to the nickname of folder added above

	OpAutoVector<OpString> urls;
	verify(g_hotlist_manager->ResolveNickname(UNI_L("fl"), urls));

	verify(urls.GetCount() == 9);
	verify((UINT32)folder->GetChildCount() == urls.GetCount());
}


test("Bookmark history")
{
	HotlistModel* model = g_hotlist_manager->GetBookmarksModel();
	HotlistModelItem* item_to_move = 0; 
	
	INT32 num_items = model->GetCount();

 	// ------------- Check all the bookmark items are in history -----------------
	for (INT32 i = 0; i < model->GetCount(); i++)
	{
		HotlistModelItem* item = model->GetItemByIndex(i);

		if (item->IsBookmark())
		{
			// -------------- Lookup the item in history on url ------------------
			HistoryPage* page = 0;
			OP_STATUS status = g_globalHistory->GetItem(item->GetResolvedUrl().CStr(), page);		

			if (!item->GetIsInsideTrashFolder())
			{
				verify(OpStatus::IsSuccess(status)); // GetItem returns ERR if item not found
				verify(page != 0); // means item was found
				item_to_move = item;
			}
			else
			{
				verify(OpStatus::IsError(status) && page == 0); // means item was not found
			}

			// -------------- Check the nick is in history too -------------------
			if(item->GetShortName().HasContent())
			{
				page = 0;
				status = g_globalHistory->GetBookmarkByNick(item->GetShortName(), page);

				if (item->GetIsInsideTrashFolder())
					verify(OpStatus::IsError(status) && page == 0);
				else
					verify(OpStatus::IsSuccess(status) && page != 0);
			}
		}
	}

	verify(item_to_move != 0 && item_to_move->GetModel() == model);

	OpString guid;
	guid.Set(item_to_move->GetUniqueGUID());

 	// Move item into trash (delete item or drag-drop) - check it is not in history and check nick is not in history

	verify(model->DeleteItem( (OpTreeModelItem*) item_to_move, TRUE, FALSE, FALSE));
	HotlistModelItem* hmi_in_trash = model->GetByUniqueGUID(guid);
	verify(hmi_in_trash && hmi_in_trash->GetIsInsideTrashFolder());

	verify(num_items == model->GetCount());

	// ---------- Check item is not in history and nick is not in history ---------------------
	HistoryPage* page = 0;
	OP_STATUS status = g_globalHistory->GetItem(hmi_in_trash->GetResolvedUrl().CStr(), page);		
	verify(OpStatus::IsError(status) && page == 0);
	status = g_globalHistory->GetBookmarkByNick(hmi_in_trash->GetShortName(), page);
	verify(OpStatus::IsError(status) && page == 0);

 	// ------------------- Move item out of trash - check item and nick is back in history ----
	HotlistModelItem* hmi = 0;
	for (int i = 0; i < model->GetCount(); i++)
	{
		HotlistModelItem* itm = model->GetItemByIndex(i);
		if (!itm->IsBookmark() || itm->GetIsInsideTrashFolder()) 
			continue;
		else
			hmi = itm;
	}

	if (hmi && hmi_in_trash)
	{
		HistoryPage* page = 0;

		INT32 id = -1;
		verify(g_hotlist_manager->DropItem(hmi_in_trash->GetID(), hmi->GetID(), DROP_MOVE, INSERT_AFTER, TRUE, &id, FALSE));

		HotlistModelItem* item = model->GetItemByID(id);
		verify(item && !item->GetIsInsideTrashFolder());

		OP_STATUS status = g_globalHistory->GetItem(item->GetResolvedUrl().CStr(), page);		
		verify(OpStatus::IsSuccess(status) && page != 0);

		page = 0;
		status = g_globalHistory->GetBookmarkByNick(item->GetShortName(), page);
		verify(OpStatus::IsSuccess(status) && page != 0);
	}

	verify(num_items == model->GetCount());
}


test("New item first in folder (Opera Link)")
{
	HotlistModel* model = g_hotlist_manager->GetBookmarksModel();

	HotlistManager::ItemData item_data;
	item_data.url.Set(UNI_L("URL"));
	item_data.name.Set(UNI_L("NAME"));

	// Let parent folder be 0
	verify(g_hotlist_manager->NewItemFirstInFolder(model, OpTypedObject::BOOKMARK_TYPE, &item_data, 0));
	HotlistModelItem* item = model->GetByName(UNI_L("NAME"));
	verify(item);
	verify(item->GetParentFolder() == 0);
	verify(item->GetPreviousItem() == 0);

	verify(model->DeleteItem(item, FALSE));
	// TODO: Separator, folder

}

test("New item ordered (Opera Link)")
{
	HotlistModel* model = g_hotlist_manager->GetBookmarksModel();

	HotlistManager::ItemData item_data;
	item_data.url.Set(UNI_L("my.opera.com"));
	item_data.name.Set(UNI_L("My Opera"));

	OP_STATUS status;
	HotlistModelItem* folder = model->AddItem(OpTypedObject::FOLDER_TYPE, status, FALSE);
	verify(OpStatus::IsSuccess(status));

	//HotlistModelItem* b,     = model->AddItem(OpTypedObject::BOOKMARK_TYPE, status, FALSE);
	//HotlistModelItem* sep    = model->AddItem(OpTypedObject::SEPARATOR_TYPE, status, FALSE);

	verify(g_hotlist_manager->NewItemOrdered(model, OpTypedObject::BOOKMARK_TYPE, &item_data, folder));
	HotlistModelItem* item = model->GetByName(UNI_L("My Opera"));
	verify(item);
	verify(item->GetPreviousItem() == folder);
	verify(model->DeleteItem(item, FALSE));

}

// test("New bookmark")
// {
	
// 	iterate(url_name, title, vis, desc, pbar, panel, pbar_pos, panel_pos) from bookmarks_table
// 	{
// 		HotlistManager::ItemData item_data;
// 		item_data.name.Set(title);
// 		item_data.url.Set(url_name);

// 		// OpString folder;
// 		item_data.description.Set(desc);

// 		// generate a unique ID
// 		verify(OpStatus::IsSuccess(Application::GenerateClientID(item_data.unique_guid)));
// 		verify(item_data.unique_guid.HasContent());

// 		item_data.on_personalbar = pbar;
// 		item_data.in_panel = panel;
// 		item_data.personalbar_position = pbar_pos;
// 		item_data.panel_position = panel_pos;

// 		BOOL result = g_hotlist_manager->NewBookmark( item_data, -1, 0, FALSE, TRUE);
// 		verify(result);

// 		HotlistModel* model = g_hotlist_manager->GetBookmarksModel();
// 		verify(model);
// 		HotlistModelItem* item = model->GetByUniqueGUID(item_data.unique_guid);
// 		verify(item);
// 		verify(item->GetName().Compare(title) == 0);
// 		verify(item->GetUrl().Compare(url_name) == 0);
// // 		verify(item->GetPersonalbarPos() == pbar_pos);
// // 		verify(item->GetPanelPos() == panel_pos);
// // 		verify(item->GetOnPersonalbar() == pbar);
// // 		verify(item->GetInPanel() == panel);
		
// 		// BOOL DeleteItem( OpTreeModelItem* item, BOOL copy_to_trash, BOOL handle_trash = FALSE, BOOL keep_gadget = FALSE );
// 		result = model->DeleteItem(item, FALSE);
// 		verify(result);
// 	}
// }

test("New folder")
{
	INT32 id = 0;
	BOOL result = g_hotlist_manager->NewFolder(UNI_L("New_Folder"), HotlistModel::BookmarkRoot, &id);
	verify(result);
	HotlistModel* model = g_hotlist_manager->GetBookmarksModel();
	verify(model);
	HotlistModelItem* item = model->GetItemByID(id);
	verify(item);
	verify(item->IsFolder());
	verify(!item->GetParentFolder());
	verify(model->DeleteItem(item, FALSE));

}

test("New separator")
{
	INT32 id = 0;
	BOOL result = g_hotlist_manager->NewSeparator(HotlistModel::BookmarkRoot, &id);
	verify(result);
	HotlistModel* model = g_hotlist_manager->GetBookmarksModel();
	verify(model);
	HotlistModelItem* item = model->GetItemByID(id);
	verify(item);
	verify(item->IsSeparator());
	verify(item && !item->GetParentFolder());
	verify(model->DeleteItem(item, FALSE));
}

test("")
{
	// Add bookmark
	// Delete bookmark
	// Check bookmark is in trash
	// Delete bookmark
}

// Copy bookmark

// Cut


// test("Drop Item")
// test("Move delete copy cut")
// test("GetByUniqueGuid performance")
// test("Favicons")
//BOOL HotlistModel::GetIsDescendantOf(HotlistModelItem* descendant, 
//									 HotlistModelItem* item)

test("AddLastBeforeTrash")
{
	HotlistModel* model = g_hotlist_manager->GetBookmarksModel();
	verify(model);

	model->Erase();
	HotlistModelItem* trash = model->GetTrashFolder(); // Adds trash
	
	iterate(url_name, title, vis, nick) from url_samples
	{
		OP_STATUS status;

		// AddItem Creates the item and adds it to the model
		HotlistModelItem* item = model->CreateItem(OpTypedObject::BOOKMARK_TYPE, status, FALSE);
		verify(item);

		item->SetUrl(url_name);
		item->SetName(title);
		item->SetVisited(vis);
		item->SetShortName(nick);

		INT32 idx;
		model->AddLastBeforeTrash(-1, item, &idx);
		verify(item);
		verify(item->GetModel() == model);
		verify(item->GetSiblingItem() == trash);
		verify(item->IsBookmark());

	}
	model->Erase();
}

test("Dirty model")
{
	HotlistModel* model = g_hotlist_manager->GetBookmarksModel();
	verify(model);
	model->SetDirty(TRUE);
	verify(model->IsDirty());
}

test("GetIsRootFolder")
{
	HotlistModel* model = g_hotlist_manager->GetBookmarksModel();
	verify(model);
	int i;

	for (i = HotlistModel::BookmarkRoot; i <=  HotlistModel::UniteServicesRoot; i++)
	{
		verify(model->GetIsRootFolder((HotlistModel::ListRoot)i));
	}
	for (; i <= HotlistModel::MaxRoot; i++)
	{
		verify(!model->GetIsRootFolder((HotlistModel::ListRoot)i));
	}
}

test("Panel and PanelPos")
{
	HotlistModel* model = g_hotlist_manager->GetBookmarksModel();
	verify(model);

	model->Erase();

	OP_STATUS status(OpStatus::OK);
	// AddItem Creates the item and adds it to the model
	HotlistModelItem* item = model->AddItem(OpTypedObject::BOOKMARK_TYPE, status, FALSE);
	verify(OpStatus::IsSuccess(status) && item != 0);
	
	item->SetUrl(UNI_L("url"));
	item->SetName(UNI_L("title"));
	item->SetPanelPos(3);
	verify(item->GetInPanel());
	item->SetPanelPos(0);
	verify(item->GetInPanel());
	item->SetPanelPos(-1);
	verify(!item->GetInPanel());
	verify(item->IsBookmark());
	verify(item->GetModel() == model);

	INT32 id = item->GetID();
	g_hotlist_manager->SetPanelPosition( id, 1, TRUE);
	verify(item->GetInPanel());
	g_hotlist_manager->SetPanelPosition(id, -1, TRUE);
	verify(!item->GetInPanel());
	verify(g_hotlist_manager->ShowInPanel(id, TRUE));
	verify(item->GetInPanel());

	model->Erase();
}
