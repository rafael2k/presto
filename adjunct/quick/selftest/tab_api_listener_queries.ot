/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2012 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Marcin Zdun (mzdun)
*/

group "quick.extensions.wintab.queries";

include "adjunct/quick/extensions/TabAPIListener.h";

include "modules/windowcommander/src/WindowCommander.h";
include "adjunct/quick/Application.h";
include "adjunct/quick/models/DesktopWindowCollection.h";
include "adjunct/quick/windows/BrowserDesktopWindow.h";

require init;
require WIC_TAB_API_SUPPORT;

global
{
	struct WinTabAPI: public OpTabAPIListener //to both separate the code _and_ get into OpTabAPIListener:: scope
	{
		enum LAST_CALLBACK
		{
			CALLBACK_UNKNOWN,
			CALLBACK_NotifyQueryAllBrowserWindows,
			CALLBACK_NotifyQueryAllTabGroups,
			CALLBACK_NotifyQueryAllTabs,
			CALLBACK_NotifyQueryTab,
			CALLBACK_NotifyQueryBrowserWindow
		};

		struct TabInfoType {
			TabAPIItemIdCollection ids;
			TabAPIItemIdCollection windows;
		};

		template <class InfoType = int>
		class TestCallbacks: public ExtensionWindowTabNotifications
		{
		public:
			OP_STATUS last_status;
			LAST_CALLBACK last_notify_callback;
			InfoType copy;

			TestCallbacks()
				: last_status(OpStatus::ERR)
				, last_notify_callback(CALLBACK_UNKNOWN)
			{
				memset(&copy, 0, sizeof(copy));
			}
			~TestCallbacks()
			{
				clean(copy);
			}

			template <class T, class Q> static void clone(const T* src, Q& dst) {}
			template <class T1, class T2, class Q> static void clone(const T1* src1, const T2* src2, Q& dst) {}

			static void clone(const TabAPIItemIdCollection* src, TabAPIItemIdCollection& dst)
			{
				if (!src) {
					dst.Clear();
					return;
				}
				OpStatus::Ignore(dst.DuplicateOf(*src));
			}

			static void clone(const ExtensionTabInfo* src, ExtensionTabInfo& dst)
			{
				clean(dst);
				if (!src)
				{
					memset(&dst, 0, sizeof(dst));
					return;
				}
				else
					memcpy(&dst, src, sizeof(dst));

				(uni_char*&)dst.title = src->title ? uni_strdup(src->title) : NULL;
			}

			static void clone(const ExtensionBrowserWindowInfo* src, ExtensionBrowserWindowInfo& dst)
			{
				clean(dst);
				if (!src)
					memset(&dst, 0, sizeof(dst));
				else
					memcpy(&dst, src, sizeof(dst));
			}

			static void clone(const TabAPIItemIdCollection* tabs, const TabAPIItemIdCollection* windows, TabInfoType& dst)
			{
				clone(tabs, dst.ids);
				clone(windows, dst.windows);
			}

			static void clone(const int* src, int& dst) {}

			template <class T> static void clean(T&) {}

			static void clean(ExtensionTabInfo& data)
			{
				op_free((void*)data.title);
				data.title = NULL;
			}

			void notify(OP_STATUS status, LAST_CALLBACK cb)
			{
				last_status = status;
				last_notify_callback = cb;
			}

			virtual void NotifyQueryAllBrowserWindows(OP_STATUS status, const TabAPIItemIdCollection* all_windows)
			{
				notify(status, CALLBACK_NotifyQueryAllBrowserWindows);
			}

			virtual void NotifyQueryAllTabGroups(OP_STATUS status, const TabAPIItemIdCollection* all_tab_groups)
			{
				notify(status, CALLBACK_NotifyQueryAllTabGroups);
			}

			virtual void NotifyQueryTab(OP_STATUS status, const ExtensionTabInfo *info)
			{
				notify(status, CALLBACK_NotifyQueryTab);
				clone(info, copy);
			}

			virtual void NotifyQueryAllTabs(OP_STATUS status, const TabAPIItemIdCollection* all_tabs, const TabWindowIdCollection* all_tabs_window_ids)
			{
				notify(status, CALLBACK_NotifyQueryAllTabs);
				clone(all_tabs, all_tabs_window_ids, copy);
			}

			virtual void NotifyQueryBrowserWindow(OP_STATUS status, const ExtensionBrowserWindowInfo* info, const TabAPIItemIdCollection* groups, const TabAPIItemIdCollection* tabs, const TabWindowIdCollection* tabs_windows)
			{
				notify(status, CALLBACK_NotifyQueryBrowserWindow);
				clone(info, copy);
			}

			virtual void NotifyQueryTabGroup(OP_STATUS status, const ExtensionTabGroupInfo *info, const TabAPIItemIdCollection* tabs, const TabWindowIdCollection* tab_windows) {}
			virtual void NotifyBrowserWindowClose(OP_STATUS status) {}
			virtual void NotifyBrowserWindowMoveResize(OP_STATUS status) {}
			virtual void NotifyTabGroupClose(OP_STATUS status) {}
			virtual void NotifyTabGroupMove(OP_STATUS status, TabAPIItemId browser_window_id) {}
			virtual void NotifyTabGroupUpdate(OP_STATUS status) {}
			virtual void NotifyTabClose(OP_STATUS status) {}
			virtual void NotifyTabMove(OP_STATUS status, TabAPIItemId browser_window_id, TabAPIItemId tab_group_id) {}
			virtual void NotifyTabUpdate(OP_STATUS status) {}
		};
	};
}

// the tests below try to test the proper behavior
// of the methods mentioned in the names of the tests
test("OnQueryAllBrowserWindows()")
{
	TabAPIListener listener;
	WinTabAPI::TestCallbacks<WinTabAPI::TabAPIItemIdCollection> callbacks;

	listener.OnQueryAllBrowserWindows(&callbacks);
	verify_success(callbacks.last_status);
	verify(callbacks.last_notify_callback == WinTabAPI::CALLBACK_NotifyQueryAllBrowserWindows);
}

test("OnQueryAllTabGroups()")
{
	TabAPIListener listener;
	WinTabAPI::TestCallbacks<WinTabAPI::TabAPIItemIdCollection> callbacks;

	listener.OnQueryAllTabGroups(&callbacks);
	verify_success(callbacks.last_status);
	verify(callbacks.last_notify_callback == WinTabAPI::CALLBACK_NotifyQueryAllTabGroups);
}

test("OnQueryAllTabs()")
{
	TabAPIListener listener;
	WinTabAPI::TestCallbacks<WinTabAPI::TabInfoType> callbacks;

	listener.OnQueryAllTabs(&callbacks);
	verify_success(callbacks.last_status);
	verify(callbacks.last_notify_callback == WinTabAPI::CALLBACK_NotifyQueryAllTabs);
	verify(callbacks.copy.ids.GetCount() == callbacks.copy.windows.GetCount());

	UINT32 count = callbacks.copy.ids.GetCount();
	for (UINT32 i = 0; i < count; ++i)
	{
		WinTabAPI::TabAPIItemId tab_id = callbacks.copy.ids.Get(i);
		WinTabAPI::TabAPIItemId window_id = callbacks.copy.windows.Get(i);
		DesktopWindow* window = g_application->GetDesktopWindowCollection().GetDesktopWindowByID(tab_id);
		verify(window);
		verify(window->GetType() == OpTypedObject::WINDOW_TYPE_DOCUMENT);
		OpWindowCommander* window_commander = window->GetWindowCommander();
		verify(window_commander);
		verify(window_commander->GetWindowId() == window_id);
	}
}

test("OnQueryTabWindow(TabAPIItemId)")
{
	TabAPIListener listener;
	WinTabAPI::TestCallbacks<WinTabAPI::ExtensionTabInfo> callbacks;

	DocumentDesktopWindow* doc_window = g_application->GetActiveDocumentDesktopWindow();
	verify(doc_window);
	OpWindowCommander* doc_window_commander = doc_window->GetWindowCommander();
	verify(doc_window_commander);
	DesktopWindow* browser = doc_window->GetToplevelDesktopWindow();
	verify(browser);

	UINT32 id = static_cast<UINT32>(doc_window->GetID());
	unsigned int window_id = doc_window_commander->GetWindowId();
	UINT32 browser_window_id = static_cast<UINT32>(browser->GetID());

	listener.OnQueryTab(id, &callbacks);
	verify_success(callbacks.last_status);
	verify(callbacks.last_notify_callback == WinTabAPI::CALLBACK_NotifyQueryTab);
	verify(callbacks.copy.id == id);
	verify(callbacks.copy.window_id == window_id);
	verify(callbacks.copy.browser_window_id == browser_window_id);
	verify(callbacks.copy.is_locked == !!doc_window->IsLockedByUser());
	verify(callbacks.copy.is_selected == !!doc_window->IsActive());
	verify(callbacks.copy.is_private == !!doc_window->PrivacyMode());
}

test("OnQueryTabWindow(OpWindowCommander)")
{
	TabAPIListener listener;
	WinTabAPI::TestCallbacks<WinTabAPI::ExtensionTabInfo> callbacks;

	DocumentDesktopWindow* doc_window = g_application->GetActiveDocumentDesktopWindow();
	verify(doc_window);
	OpWindowCommander* doc_window_commander = doc_window->GetWindowCommander();
	verify(doc_window_commander);
	DesktopWindow* browser = doc_window->GetToplevelDesktopWindow();
	verify(browser);

	UINT32 id = static_cast<UINT32>(doc_window->GetID());
	unsigned int window_id = doc_window_commander->GetWindowId();
	UINT32 browser_window_id = static_cast<UINT32>(browser->GetID());

	listener.OnQueryTab(doc_window_commander, &callbacks);
	verify_success(callbacks.last_status);
	verify(callbacks.last_notify_callback == WinTabAPI::CALLBACK_NotifyQueryTab);
	verify(callbacks.copy.id == id);
	verify(callbacks.copy.window_id == window_id);
	verify(callbacks.copy.browser_window_id == browser_window_id);
	verify(callbacks.copy.is_locked == !!doc_window->IsLockedByUser());
	verify(callbacks.copy.is_selected == !!doc_window->IsActive());
	verify(callbacks.copy.is_private == !!doc_window->PrivacyMode());
}

test("OnQueryBrowserWindow()")
{
	TabAPIListener listener;
	WinTabAPI::TestCallbacks<WinTabAPI::ExtensionBrowserWindowInfo> callbacks;

	BrowserDesktopWindow* browser = g_application->GetActiveBrowserDesktopWindow();
	verify(browser);
	OpRect pos;
	browser->GetRect(pos);
	DesktopWindow* top_level_parent = browser->GetToplevelDesktopWindow();
	verify(top_level_parent);

	UINT32 window_id = static_cast<UINT32>(browser->GetID());
	listener.OnQueryBrowserWindow(window_id, FALSE, &callbacks);

	verify_success(callbacks.last_status);
	verify(callbacks.last_notify_callback == WinTabAPI::CALLBACK_NotifyQueryBrowserWindow);
	verify(callbacks.copy.id         == window_id);
	verify(callbacks.copy.parent_id  == static_cast<UINT32>(top_level_parent->GetID()));
	verify(callbacks.copy.has_focus  == (top_level_parent->IsActive() && top_level_parent == g_application->GetActiveBrowserDesktopWindow()));
	verify(callbacks.copy.top        == pos.y);
	verify(callbacks.copy.left       == pos.x);
	verify(callbacks.copy.width      == pos.width);
	verify(callbacks.copy.height     == pos.height);
	verify(callbacks.copy.is_private == !!browser->PrivacyMode());

	DesktopWindow* dsk_wnd = browser->GetWorkspace() ? browser->GetWorkspace()->GetActiveDesktopWindow() : NULL;
	if (dsk_wnd)
	{
		verify(callbacks.copy.selected_tab_id        == static_cast<UINT32>(dsk_wnd->GetID()));
		verify(callbacks.copy.selected_tab_window_id == (dsk_wnd->GetWindowCommander() ? dsk_wnd->GetWindowCommander()->GetWindowId(): 0));
	}
	else
	{
		verify(callbacks.copy.selected_tab_id        == 0);
		verify(callbacks.copy.selected_tab_window_id == 0);
	}
}
