/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Patricia Aas (psmaas)
 */

group "quick.address_dropdown";

include "adjunct/quick/widgets/OpAddressDropDown.h";
include "adjunct/quick_toolkit/selftest/src/OpMockWindowCommander.h";

global
{
	class MockOwner
	{
	public:
		OP_STATUS GetText(OpString& text) { return text.Set(m_get_text.CStr()); }
		OP_STATUS SetText(const OpStringC& text) { return m_set_text.Set(text.CStr()); }
		BOOL TextIsNotUrl(const OpStringC& text, OpWindowCommander* windowcommander) { return TRUE; }
		void SetMisMatched() {}

		OpString m_get_text;
		OpString m_set_text;
	};
};

test("PushTab on empty TabTextContent should succeed")
{
	MockOwner owner;
	OpMockWindowCommander mock_commander;
	TabTextContent<MockOwner> tab_text_context;
	tab_text_context.SetOwner(&owner);

	verify(OpStatus::IsSuccess(tab_text_context.PushTab(&mock_commander)));
}

test("PopTab on empty TabTextContent should fail")
{
	MockOwner owner;
	OpMockWindowCommander mock_commander;
	TabTextContent<MockOwner> tab_text_context;
	tab_text_context.SetOwner(&owner);

	verify(OpStatus::IsError(tab_text_context.PopTab(&mock_commander)));
}

test("PopTab on non-empty TabTextContent should succeed")
{
	MockOwner owner;
	OpMockWindowCommander mock_commander;
	TabTextContent<MockOwner> tab_text_context;
	tab_text_context.SetOwner(&owner);

	owner.m_get_text.Set("Mock Text");
	verify(OpStatus::IsSuccess(tab_text_context.PushTab(&mock_commander)));
	verify(OpStatus::IsSuccess(tab_text_context.PopTab(&mock_commander)));
}
