/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

// FIXME Doesn't compile!
disabled;

group "quick_bookmarks.bookmarkmodel";
require init;
require CORE_BOOKMARKS_SUPPORT;

include "adjunct/quick/models/BookmarkModel.h";
include "adjunct/quick/models/Bookmark.h";
include "adjunct/quick/models/BookmarkFolder.h";
include "adjunct/quick/models/DesktopBookmark.h";
include "adjunct/quick/hotlist/hotlistparser.h";
include "adjunct/quick/models/selftest/src/DummyCoreBookmark.h";
include "modules/bookmarks/bookmark_sync.h";

language C++;

table url_samples (const uni_char *, const uni_char*, time_t, const uni_char*)
{
	{ UNI_L("http://www.webmonkey.com/"),                         UNI_L("Title 1"), 1173106132, UNI_L("a")}, 
	{ UNI_L("http://www.whatismyip.com/"),                        UNI_L("Title 2"), 1173106172, UNI_L("b")},
	{ UNI_L("http://www.whitehouse.gov/"),                        UNI_L("Title 3"), 1172586234, UNI_L("c")},
	{ UNI_L("http://weblogs.mozillazine.org/asa/"),               UNI_L("Title 4"), 1138388417, UNI_L("d")},
	{ UNI_L("http://webmail.uio.no/"),                            UNI_L("Title 5"), 1172479246, UNI_L("e")},
	{ UNI_L("http://www.webstandards.org/files/acid2/test.html"), UNI_L("Title 6"), 1170861512, UNI_L("f")}, 
	{ UNI_L("http://widgets.opera.com/"),                         UNI_L("Title 7"), 1170684169, UNI_L("h")}, 
	{ UNI_L("http://www.wired.com/wired/"),                       UNI_L("Title 8"), 1131017655, UNI_L("n")}, 
	{ UNI_L("http://women.debian.org/"),                          UNI_L("Title 9"), 1146072219, UNI_L("t")}, 
}

table bookmark_samples (const uni_char *, const uni_char*, const uni_char*)
{
	{ UNI_L("http://www.little-gamers.com/comics/00001551.gif"), UNI_L("Title 11"), UNI_L("U")},
	{ UNI_L("http://xkcd.org/c230.html"),                        UNI_L("Title 22"), UNI_L("V")},
	{ UNI_L("http://www.vg.no/"),                                UNI_L("Title 33"), UNI_L("W")},
	{ UNI_L("http://db.no/"),                                    UNI_L("Title 44"), UNI_L("X")},
	{ UNI_L("http://www.adobe.com/no/"),                         UNI_L("Title 55"), UNI_L("Y")},
	{ UNI_L("http://www.cafemir.no/"),                           UNI_L("Title 66"), UNI_L("Z")},
	{ UNI_L("http://www.gulesider.no/tk/index.c"),               UNI_L("Title 77"), UNI_L("M")},
	{ UNI_L("http://people.opera.com/howcome/"),                 UNI_L("Title 88"), UNI_L("God")},
	{ UNI_L("http://www.ifi.uio.no"),                            UNI_L("Title 99"), UNI_L("More than one word")},
}

table bookmarks_table (const uni_char*, const uni_char*, time_t, const uni_char*, BOOL, BOOL, int, int)
{
	{ UNI_L("http://www.db.no"),                         UNI_L("DB"), 1173106132, UNI_L("a description"), TRUE, TRUE, 1, 1}, 
	{ UNI_L("http://www.ap.no"),                         UNI_L("AP"), 1173106172, UNI_L("newspaper etc"), TRUE, FALSE, 1, 1},
	{ UNI_L("http://www.morgenbladet.no/"),              UNI_L("MB"), 1172586234, UNI_L("blad"), FALSE, TRUE, 1, 1},
	{ UNI_L("http://weblogs.mozillazine.org"),           UNI_L("MOZ"), 1138388417, UNI_L("something"), FALSE, FALSE, 1, 1},
	{ UNI_L("http://www.reddit.com"),                    UNI_L("RED"), 1131017655, UNI_L("reddit"), TRUE, TRUE, 0, 0}, 
	{ UNI_L("http://www.digi.no/"),                      UNI_L("DIG"), 1146072219, UNI_L("norwegian"), TRUE, TRUE, 10, 10}, 
	{ UNI_L("http://www.ifi.uio.no/"),                   UNI_L("IFI"), 1172479246, UNI_L("informatics"), TRUE, TRUE, 2, 3},
}

global
{
	class ST_BookmarkModel : public BookmarkModel
	{
	public:
		ST_BookmarkModel() : m_item_added(0) { }
		~ST_BookmarkModel()
		{
			m_manager->RemoveAllBookmarks();
			OP_DELETE(m_manager);
		}

		void Init(BookmarkManager* manager)
		{
			m_manager = manager;
			m_manager->RegisterBookmarkManagerListener(this);
		}

		virtual	void OnBookmarkAdded(BookmarkItem* item)
		{
			if (item->GetFolderType() == FOLDER_TRASH_FOLDER)
				m_trash_added = TRUE;
			else
				m_item_added++;

			BookmarkModel::OnBookmarkAdded(item);
		}

		BOOL CheckItemAdded() 
		{ 
			if (m_item_added) 
			{ 
				m_item_added--; 
				return TRUE;
			}

			return FALSE;
		}

		BOOL CheckTrashAdded() { return m_trash_added; }
		void ResetTrashAdded() { m_trash_added = FALSE; }

	private: 
		INT32 m_item_added;
		BOOL  m_trash_added;
	};

	ST_BookmarkModel* model = OP_NEW(ST_BookmarkModel, ());
	BookmarkManager* manager = OP_NEW(BookmarkManager, ());
}

setup
{
	manager->Init();
	model->Init(manager);
	// Sync won't work now, goes through SyncManager in quick
	BookmarkSync* syncer = OP_NEW(BookmarkSync, ());
	syncer->SetManager(manager);
	manager->SetBookmarkSync(syncer);
	syncer->SetCoordinator(g_sync_coordinator);
	model->SetSyncModel(FALSE);

}

test("BookmarkModel::EmptyTrash")
{	
	model->RemoveAllItems();
	if(!model->GetTrashFolder())
	{
		BookmarkItem* item = OP_NEW(BookmarkItem, ());
		item->SetFolderType(FOLDER_TRASH_FOLDER);
		// Set title
		verify(model->AddNewFolderItem(item, 0, 0));
		verify(model->CheckTrashAdded());
		verify(model->GetTrashFolder());
	}

	INT32 initial_count = model->GetCount();
	INT32 num_added = 0;
	iterate(title, vis, nick) from bookmark_samples
	{
		BookmarkItemData item_data;
		item_data.name.Set(title);
		//item_data.visited.Set(vis);
		item_data.shortname.Set(nick);
		
		verify(model->AddNewBookmarkItem(item_data, 0, 0));
		verify(model->CheckItemAdded());
		num_added++;
	}
	verify(num_added + initial_count == model->GetCount());
	for (INT32 j = initial_count; j < num_added / 2 && j < model->GetCount(); )
	{
		DesktopBookmark* bm = model->GetItemByIndex(j);
		INT32 cnt = model->GetCount();
		verify(bm);
		model->DeleteItem(bm);
		if (model->GetCount() == cnt)
			break;
	}
	model->EmptyTrash();
	verify(model->GetTrashFolder());
	verify(initial_count == model->GetCount());
}

test("Unique ID Uniqueness ") 
disabled;
{
	model->RemoveAllItems();
	INT32 num_items = model->GetCount();
	verify(num_items == 0); // Trash 
	BookmarkItemData item_data;
	verify(OpStatus::IsSuccess(item_data.name.Set(UNI_L("Name"))));
	
	char* id;
	g_bookmark_manager->GenerateUniqueId(&id);
	verify(OpStatus::IsSuccess(item_data.unique_id.Set(id)));
	verify(model->AddNewBookmarkItem( item_data, NULL, NULL )); 
	verify(num_items == model->GetCount() - 1);
	num_items = model->GetCount();

	BookmarkItemData item_data_dup;
	verify(OpStatus::IsSuccess(item_data_dup.name.Set(UNI_L("DupName"))));
	
	id = 0;
	g_bookmark_manager->GenerateUniqueId(&id);
	verify(OpStatus::IsSuccess(item_data_dup.unique_id.Set(id)));

	/* verify(!*/model->AddNewBookmarkItem( item_data_dup, NULL, NULL ); 
	//verify(num_items == model->GetCount());
}

test("Add bookmarks")
{
	INT32 i = model->GetCount();
	// Add item with allow_dups FALSE, should not add the item again
	iterate(url_name, title, vis, nick) from url_samples
	{
		BookmarkItemData item_data;
		item_data.url.Set(url_name);
		item_data.name.Set(title);
		//item_data.visited.Set(vis);
		item_data.shortname.Set(nick);

		model->AddNewBookmarkItem(item_data, 0, 0);
		verify(model->CheckItemAdded());
		i++;
	}
	verify(i == model->GetCount());
}

test("Add folder")
{
	BookmarkItem* item = DummyCoreBookmark::CreateFolder(UNI_L("FOLDER"), UNI_L(""), UNI_L("nick"));
	item->SetFolderType(FOLDER_NORMAL_FOLDER);
	model->AddNewBookmarkItem(item, 0, 0);
	verify(model->CheckItemAdded());
}

test("BookmarkModel::GetItemByID")
{
	//verify(FALSE);
}

test("BookmarkModel::GetByUniqueGUID")
{
	//verify(FALSE);
}
test("BookmarkModel::GetActiveItem")
{
	//verify(model->GetActiveItem());
}

test("BookmarkModel::AddTrashFolder")
{
	if (!model->GetTrashFolder())
	{
		BookmarkItem* item = OP_NEW(BookmarkItem, ());
		item->SetFolderType(FOLDER_TRASH_FOLDER);
		// Set title
		model->AddNewFolderItem(item, 0, 0);
		verify(model->CheckTrashAdded());
		verify(model->GetTrashFolder());
	}

	model->ResetTrashAdded();
	verify(!model->CheckTrashAdded());
	INT32 count = model->GetCount();
	BookmarkItem* trash = OP_NEW(BookmarkItem, ());
	trash->SetFolderType(FOLDER_TRASH_FOLDER);
	model->AddNewFolderItem(trash, 0, 0);
	verify(model->GetCount() == count);
	verify(!model->CheckTrashAdded());

	OP_DELETE(trash);
}

test("BookmarkModel::DeleteItems")
{
	//verify(FALSE);
}

test("BookmarkModel::MoveItem")
{

}



finally 
{
 	//OP_DELETE(model);
 	//OP_DELETE(manager);
}
