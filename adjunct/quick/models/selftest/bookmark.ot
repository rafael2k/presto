/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "quick_bookmarks.bookmark";
require init;
require CORE_BOOKMARKS_SUPPORT;

include "adjunct/quick/models/BookmarkModel.h";
include "adjunct/quick/models/Bookmark.h";
include "adjunct/quick/models/BookmarkFolder.h";
include "adjunct/quick/models/DesktopBookmark.h";
include "adjunct/quick/hotlist/hotlistparser.h";
include "modules/bookmarks/bookmark_manager.h";
include "modules/bookmarks/bookmark_item.h";
include "adjunct/quick/models/selftest/src/DummyCoreBookmark.h";
//include "adjunct/quick/hotlist/HotlistManager.h";

language C++;

global
{
	BookmarkItem* core_item = 0;
	BookmarkItem* core_folder = 0;
	BookmarkItem* core_visited_item = 0;
	HotlistModelItem* bookmark = 0;
	HotlistModelItem* folder = 0;
	HotlistModelItem* visited_bookmark = 0;
}

setup
{
	core_item = DummyCoreBookmark::CreateBookmark(UNI_L("title"),
											   UNI_L("url"),
											   UNI_L("description"),
											   UNI_L("nick"),
											   UNI_L("2007-06-28"),
											   UNI_L("2007-06-30"));

	core_folder = DummyCoreBookmark::CreateFolder(UNI_L("foldertitle"),
											   UNI_L("folderdescription"),
											   UNI_L("foldernick"));

	// Fix visited date 
	core_visited_item = DummyCoreBookmark::CreateBookmark(UNI_L("title"),
											   UNI_L("url"),
											   UNI_L("description"),
											   UNI_L("nick"),
											   UNI_L("2007-06-28"),
											   UNI_L("2008-10-10"));

	core_item->SetAllowedToSync(FALSE);
	core_folder->SetAllowedToSync(FALSE);
	core_visited_item->SetAllowedToSync(FALSE);
	
	bookmark = OP_NEW(Bookmark, (core_item));
	folder   = OP_NEW(BookmarkFolder, (core_folder));
	visited_bookmark = OP_NEW(Bookmark, (core_visited_item));
}


test("DesktopBookmark::GetItemData")
{

}

test("DesktopBookmark::GetType")
{
	verify(bookmark->GetType() == OpTypedObject::BOOKMARK_TYPE);

	verify(folder->GetType() == OpTypedObject::FOLDER_TYPE);

}
test("DesktopBookmark::GetID")
{
	verify(bookmark->GetID());
	verify(folder->GetID());
}

test("DesktopBookmark::G[S]etTitle")
{
	// DO: GetTitle
	bookmark->SetName(UNI_L("bookmark_title"));
	verify(bookmark->GetName().Compare(UNI_L("bookmark_title")) == 0);

}

test("DesktopBookmark::G[S]etUrl")
{
	// DO GET URL
	bookmark->SetUrl(UNI_L("bookmark_url"));
	verify(bookmark->GetUrl().Compare(UNI_L("bookmark_url")) == 0);

}

test("DesktopBookmark::GetResolvedUrl")
{

}

test("DesktopBookmark::GetUniqueGUID")
{

}
test("DesktopBookmark::G[S]etDescription")
{

}
	
test("DesktopBookmark::G[S]etNickName")
{

}
test("DesktopBookmark::GetCreatedString")
{

}
test("DesktopBookmark::G[S]etCreated")
{

}

test("DesktopBookmark::GetVisitedString")
{

}
test("DesktopBookmark::G[S]etVisited")
{

}

test("DesktopBookmark::G[S]etOnPersonalbar and Pos")
{

}

test("DesktopBookmark::G[S]etInPanel and Pos")
{

}

test("DesktopBookmark::GetParentFolder")
{

}
test("DesktopBookmark::GetParentGUID")
{

}

test("DesktopBookmark::GetImage")
{
	OpString8 bm_image;
	bm_image.Set(bookmark->GetImage());
	verify(bm_image.Compare("Unvisited bookmark") == 0);

	bm_image.Empty();
	bm_image.Set(visited_bookmark->GetImage());
	verify(bm_image.Compare("Visited bookmark") == 0);

	OpString8 folder_image;
	folder_image.Set(folder->GetImage());
	verify(folder_image.Compare("Folder") == 0);

// 	DesktopBookmark* trash = BookmarkModel::GetTestInstance().GetTrashFolder();
// 	OpString8 trash_image;
// 	trash_image.Set(trash->GetImage());
// 	verify(trash_image.Compare("Trash folder") == 0);

// 	DesktopBookmark* special = OP_NEW(BookmarkTrashFolder, ());
// 	OpString8 special_image;
// 	special_image.Set(special->GetImage());
// 	verify(special_image.Compare("Target folder") == 0);

}

test("DesktopBookmark::GetIcon")
{

}

test("DesktopBookmark::G[S]etIsActiveItem")
{

}

test("DesktopBookmark::IsFolder")
{
	verify(bookmark->GetType() == OpTypedObject::BOOKMARK_TYPE);
	verify(folder->GetType() == OpTypedObject::FOLDER_TYPE);

// 	DesktopBookmark* trash  = BookmarkModel::GetTestInstance().GetTrashFolder();
// 	verify(trash);
// 	verify(trash->GetType() == OpTypedObject::FOLDER_TYPE);
	//DesktopBookmark* special = OP_NEW(BookmarkSpecialFolder, ());
	//verify(special->GetType() == OpTypedObject::FOLDER_TYPE);
}

test("DesktopBookmark::HasSeparator")
{

}
test("DesktopBookmark::RemoveBookmark")
{

}

// // Manipulators 
// virtual const OpStringC &GetResolvedUrl();
// virtual OP_STATUS GetUrl(OpString& url) const { return GetStringAttribute(BOOKMARK_URL, url); }
// virtual OP_STATUS SetUrl(const uni_char* str) { return SetStringAttribute(BOOKMARK_URL, str); }


// .. protected:
//OP_STATUS GetStringAttribute(BookmarkAttributeType, OpString& value) const;
//	OP_STATUS SetStringAttribute(BookmarkAttributeType type, const OpStringC& str);
//	void SetCoreItem(BookmarkItem* item) { m_core_item = item;}
//	BookmarkItem* GetCoreItem() { return m_core_item; }
//	void RemoveCoreItem();


