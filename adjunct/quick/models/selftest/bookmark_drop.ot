/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "quick_bookmarks.drop";
require init;
require CORE_BOOKMARKS_SUPPORT;

// FIXME Doesn't compile!
disabled;

include "adjunct/quick/models/BookmarkModel.h";
include "adjunct/quick/models/Bookmark.h";
include "adjunct/quick/models/BookmarkFolder.h";
include "adjunct/quick/models/DesktopBookmark.h";
include "adjunct/quick/hotlist/hotlistparser.h";
include "adjunct/quick/models/selftest/src/DummyCoreBookmark.h";
include "adjunct/quick/managers/DesktopBookmarkManager.h";

language C++;



global
{
	// TODO: Use ST_BookmarkModel instead, get rid of this?
	class BookmarkListener : BookmarkModel::Listener
	{
	public:
		BookmarkListener()
			: m_bookmark(0)
		{
			g_hotlist_manager->GetBookmarksModel()->SetListener(this);
		}

		~BookmarkListener()
		{
			OP_DELETE(m_bookmark);
			g_hotlist_manager->GetBookmarksModel()->RemoveListener(this);
		}

		virtual void OnBookmarkAdded(DesktopBookmark* bookmark)
		{
			m_bookmark = bookmark;
		}

		virtual void OnBookmarkMoved(DesktopBookmark* bookmark) {}

		DesktopBookmark* GetLastItem() { return m_bookmark; }

	private:
		DesktopBookmark* m_bookmark;
	};

	BookmarkListener bookmark_hook;
}




test("BookmarkModel::DropItem")
{
	//g_hotlist_manager->GetBookmarksModel()->Clear();
	//verify(g_hotlist_manager->GetBookmarksModel()->GetCount());

	DummyCoreBookmark::AddBookmark(UNI_L("title"),
								   UNI_L("url"),
								   UNI_L("description"),
								   UNI_L("short"),
								   0, 0);

	DesktopBookmark* added_item = bookmark_hook.GetLastItem();
	verify(added_item);

	BookmarkItemData item_data;
	item_data.name.Set("dropped_item");

	INT32 first_id;
	verify(g_desktop_bookmark_manager->DropItem(item_data, 
														  OpTypedObject::BOOKMARK_TYPE, 
														  0, 
														  INSERT_AFTER, 
														  TRUE,
														  OpTypedObject::DRAG_TYPE_WINDOW,
														  &first_id));

	//verify(g_hotlist_manager->GetBookmarksModel()->GetCount() == 2);
	DesktopBookmark* dropped_item = bookmark_hook.GetLastItem();
	verify(dropped_item);
	
	INT32 id = added_item->GetID();
	
	verify(g_desktop_bookmark_manager->DropItem( id, 
														   dropped_item->GetID(),
														   DROP_MOVE,
														   INSERT_AFTER,
														   TRUE, 
														   &first_id, 
														   FALSE));
	//verify(g_hotlist_manager->GetBookmarksModel()->GetCount() == 2);
	verify(bookmark_hook.GetLastItem() == dropped_item);
 
}


