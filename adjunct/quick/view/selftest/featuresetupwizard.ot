group "view.featuresetupwizard";

include "adjunct/quick/view/selftest/src/FakeFeatureSetupWizard.h";
include "adjunct/quick/Application.h";

require QUICKTK_CAP_HAS_DIALOG_PAGE_COUNT;

// params: return value, index of page, name of page
table PagesToRetrieveTable(OP_STATUS, UINT32, const char*)
{
	{ OpStatus::ERR, 0, "" },
	{ OpStatus::ERR, 0, "xyz" },
	{ OpStatus::OK,  0, "create_account_page" },
	{ OpStatus::OK,  1, "login_page" },
	{ OpStatus::OK,  2, "fakefeature_intro_page" },
	{ OpStatus::OK,  3, "fakefeature_settings_page" }
}

subtest CheckIsFakeIntroPageShown(FakeFeatureDialog & wizard)
{
	verify(wizard.GetPageCount() >= 4 && "have you forgotten to call Init()?");
	verify(wizard.GetCurrentPage() == 2);
	//verify(wizard.GetCurrentState()->GetType() == FeatureSetupState::IntroPage);
	verify(wizard.GetOkTextID() == Str::D_FEATURE_SETUP_CONTINUE);
	verify(wizard.GetCancelTextID() == Str::DI_ID_CANCEL);
}

subtest CheckIsCreateAccountPageShown(FakeFeatureDialog & wizard)
{
	verify(wizard.GetPageCount() >= 4 && "have you forgotten to call Init()?");
	verify(wizard.GetCurrentPage() == 0);
	//verify(wizard.GetCurrentState()->GetType() == FeatureSetupState::CreateAccountPage);
	verify(wizard.GetOkTextID() == Str::D_FEATURE_SETUP_CREATE_ACCOUNT);
	verify(wizard.GetCancelTextID() == Str::DI_ID_CANCEL);
}

subtest CheckIsLoginPageShown(FakeFeatureDialog & wizard)
{
	verify(wizard.GetPageCount() >= 4 && "have you forgotten to call Init()?");
	verify(wizard.GetCurrentPage() == 1);
	//verify(wizard.GetCurrentState()->GetType() == FeatureSetupState::LoginPage);
	verify(wizard.GetOkTextID() == Str::D_FEATURE_SETUP_LOGIN);
	verify(wizard.GetCancelTextID() == Str::DI_ID_CANCEL);
}

subtest CheckIsFakeSettingsPageShown(FakeFeatureDialog & wizard)
{
	verify(wizard.GetPageCount() > 3 && "have you forgotten to call Init()?");
	verify(wizard.GetCurrentPage() == 3);
	//verify(wizard.GetCurrentState()->GetType() == FeatureSetupState::SettingsPage);
	verify(wizard.GetOkTextID() == Str::D_FEATURE_SETUP_FINISH);
	verify(wizard.GetCancelTextID() == Str::DI_ID_CANCEL);
}


test("create FeatureSetupWizard")
	disabled;
{
	// set up wizard
	FakeFeatureDialog wizard;
	wizard.Init(g_application->GetActiveDesktopWindow());

	CheckIsFakeIntroPageShown(wizard);
}

test("init FeatureSetupWizard")
	disabled;
{
	// set up wizard, init
	FakeFeatureDialog wizard;
	wizard.Init(g_application->GetActiveDesktopWindow());

	CheckIsFakeIntroPageShown(wizard);
}


test("show intro page")
	disabled;
{
	// set up wizard
	FakeFeatureDialog wizard;
	wizard.Init(g_application->GetActiveDesktopWindow());

	wizard.ShowIntroPage();

	verify(wizard.GetCurrentPage() == 2);
}

test("show create account page")
	disabled;
{
	// set up wizard
	FakeFeatureDialog wizard;
	wizard.Init(g_application->GetActiveDesktopWindow());

	wizard.ShowCreateAccountPage();

	verify(wizard.GetCurrentPage() == 0);
}

test("show login page")
	disabled;
{
	// set up wizard
	FakeFeatureDialog wizard;
	wizard.Init(g_application->GetActiveDesktopWindow());

	wizard.ShowLoginPage();

	verify(wizard.GetCurrentPage() == 1);
}


test("show settings page")
	disabled;
{
	// set up wizard
	FakeFeatureDialog wizard;
	wizard.Init(g_application->GetActiveDesktopWindow());

	wizard.ShowSettingsPage();

	verify(wizard.GetCurrentPage() == 3);
}

foreach (status, index, page_name) from PagesToRetrieveTable
{
	test("set current page to " page_name)
		disabled;
	{
		FakeFeatureDialog wizard;
		wizard.Init(g_application->GetActiveDesktopWindow());

		verify(wizard.SetCurrentPageByName(page_name) == status);
		if (status == OpStatus::OK)
		{
			verify(wizard.GetCurrentPage() == index);
		}
	}
}

test("go to next page")
	disabled;
{
	// set up wizard
	FakeFeatureDialog wizard;
	wizard.Init(g_application->GetActiveDesktopWindow());

	// init, go to account page ("next" button)
	wizard.GoToNextPage(); // goes to either account or login

	CheckIsCreateAccountPageShown(wizard);
}

test("go to next next page")
	disabled;
{
	// set up wizard
	FakeFeatureDialog wizard;
	wizard.Init(g_application->GetActiveDesktopWindow());

	// init, go to account page ("next" button)

	wizard.GoToNextPage(); // goes to either account or login
	wizard.GoToNextPage(); // goes to settings

	CheckIsFakeSettingsPageShown(wizard);
}

test("go through wizard, account known")
	disabled;
{
	AccountContext account_context;

	OpString username;
	username.Set(UNI_L("test"));
	account_context.SetUsername(username);

	OpString password;
	password.Set(UNI_L("account"));
	account_context.SetPassword(password);

	FakeFeatureDialog wizard(&account_context);
	wizard.Init(g_application->GetActiveDesktopWindow());

	wizard.GoToNextPage();

	// an account is known, so go to login instead of create account
	CheckIsLoginPageShown(wizard);
}


test("go through wizard, logged in")
	disabled;
{
	AccountContext account_context;

	// set username, password, logged-in
	OpString username;
	username.Set(UNI_L("test"));
	account_context.SetUsername(username);

	OpString password;
	password.Set(UNI_L("account"));
	account_context.SetPassword(password);

	account_context.SetLoggedIn(TRUE);

	FakeFeatureDialog wizard(&account_context);
	wizard.Init(g_application->GetActiveDesktopWindow());

	wizard.GoToNextPage();

	// check that it jumped over the login/create account
	CheckIsFakeSettingsPageShown(wizard);
}


test("open license dialog")
	disabled;
{
	FakeFeatureDialog wizard;
	wizard.Init(g_application->GetActiveDesktopWindow());

	wizard.GoToNextPage();	// be sure to be on the create-account page

	// simulate "show license" button press
	OpInputAction licence_action(OpInputAction::ACTION_VIEW_FEATURE_LICENSE);
	// if action is enabled
	if(g_input_manager->GetActionState(&licence_action) & OpInputAction::STATE_ENABLED)
	{
		g_input_manager->InvokeAction(OpInputAction::ACTION_VIEW_FEATURE_LICENSE);
		verify(wizard.HasOpenedLicense());
		//g_input_manager->InvokeAction(OpInputAction::ACTION_OK); // close license dialog
	}
	else
	{
		verify(!"view feature license isn't enabled");
	}

}


test("open license dialog, false attempt")
	disabled;
{
	FakeFeatureDialog wizard;
	wizard.Init(g_application->GetActiveDesktopWindow());

	// simulate "show license" button press
	OpInputAction licence_action(OpInputAction::ACTION_VIEW_FEATURE_LICENSE);
	// verify that the action is disabled
	verify (!(g_input_manager->GetActionState(&licence_action) & OpInputAction::STATE_ENABLED));
}
