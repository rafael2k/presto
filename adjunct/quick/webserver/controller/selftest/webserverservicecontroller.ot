group "webserver.controller.webserverservicecontroller";

require WEBSERVER_SUPPORT;

include "adjunct/quick/webserver/controller/WebServerServiceController.h";
include "adjunct/quick/webserver/controller/WebServerServiceDownloadContext.h";
include "adjunct/quick/webserver/controller/WebServerServiceSettingsContext.h";
include "adjunct/quick/hotlist/HotlistModelItem.h";
include "adjunct/quick/webserver/controller/selftest/src/FakeServiceDownloadListener.h";
include "adjunct/quick_toolkit/widgets/OpTreeView/OpTreeView.h";

global
{
	class ST_WebServerServiceController : public WebServerServiceController
	{
	public:
		using WebServerServiceController::GetUniteItemsTreeView;
	};
}

table existing_files(char*, BOOL)
{
  { "selftest_service.wgt", TRUE },
  { "selftest_service.us", TRUE }
}

test("service context from invalid path") leakcheck;
{
	OpStringC wrong_path(UNI_L("xyz"));
	OpString remote_path;
	WebServerServiceSettingsContext* context = WebServerServiceController::CreateServiceContextFromPath(wrong_path, remote_path);
	verify(context == NULL);
}


foreach (filename, is_valid_service_path) from existing_files
{
	test("service context from existing file: " filename) leakcheck;
		file uni test_service filename;
	{
		OpStringC working_path(test_service);
		OpString remote_path;
		WebServerServiceSettingsContext* context = WebServerServiceController::CreateServiceContextFromPath(working_path, remote_path);

		if (is_valid_service_path)
		{
			verify(context != NULL);

			verify(context->GetLocalDownloadPath().Compare(working_path) == 0);
			verify(context->GetFriendlyName().HasContent());
			verify(context->GetServiceNameInURL().IsEmpty());

			OP_DELETE(context);
		}
		else
			verify(context == NULL);
	}
}


test("create WebServerServiceController") leakcheck;
{
	WebServerServiceController controller;
	verify(controller.GetItemsListenersTable()->GetCount() == 0);
}

test("WebServerServiceController::GetUniteItemsTreeView")
{
	ST_WebServerServiceController controller;
	OpTreeView * tree_view = controller.GetUniteItemsTreeView();
	verify(tree_view != NULL);
	verify(tree_view->OpWidget::GetParent());
	verify(tree_view->OpWidget::GetParent()->GetType() == OpTypedObject::WIDGET_TYPE_UNITE_SERVICES_VIEW);
}


// DISABLED. needs to be fixed once patch CORE-18079 is in!
test("WebServerServiceController, start download") leakcheck; async;
	file uni file_path "selftest_service.wgt";
	disabled;
{
	OpStringC full_download_url(UNI_L("http://toman.oslo.osa/tommyo/test/widgets/unite/unite-service.wgt"));
	OpStringC repository_url(UNI_L("http://toman.oslo.osa/tommyo/test/widgets/unite/"));

	WebServerServiceDownloadContext download_context(full_download_url, repository_url, FALSE);
	FakeServiceDownloadListener transfer_listener(TRUE);

	WebServerServiceController controller;
	OP_STATUS status = controller.StartServiceDownload(&download_context, &transfer_listener);

	//verify(controller.GetItemsListenersTable()->GetCount() == 1);
}
