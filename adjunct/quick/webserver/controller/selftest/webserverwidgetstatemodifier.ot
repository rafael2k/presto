group "webserver.controller.webserverwidgetstatemodifier";

require WEBSERVER_SUPPORT;

include "adjunct/quick/webserver/controller/WebServerWidgetStateModifier.h";
include "modules/locale/locale-enum.h";
include "modules/locale/oplanguagemanager.h";
include "modules/inputmanager/inputaction.h";

global
{
	class ST_WebServerWidgetState : public WebServerWidgetState
	{
	public:
		ST_WebServerWidgetState(const OpStringC & status_text) 
			: m_status_text(status_text)
			, m_action_text()
		{}
		
		// WebServerWidgetState functions
		virtual Type GetStateType() const
			{ return WebServerEnabled; }

		virtual const OpStringC & GetStatusText() const
			{ return m_status_text; }

		virtual OP_STATUS SetActionText(const OpStringC & action_text)
			{ return m_action_text.Set(action_text); }

		// additionall getter needed in tests
		virtual const uni_char* GetActionText() const
			{ return m_action_text.CStr(); }

		// WidgetState stubs
		virtual const OpInputAction* GetAction()           const { return NULL; }
		virtual const char*          GetForegroundImage()  const { return NULL; }
		virtual const char*          GetStatusImage()      const { return NULL; }

		virtual const char*          GetFgImage()          const { return NULL; }
		virtual const char*          GetAttentionFgImage() const { return NULL; }

	private:
		OpStringC	m_status_text;
		OpString	m_action_text;
	};
}

test("WebServerWidgetState, attention state (text)")
{
	OpStringC status_text(UNI_L("status"));
	ST_WebServerWidgetState wstate(status_text);

	// check defaults
	verify(wstate.HasAttention() == FALSE);
	verify_string(wstate.GetText(), status_text);
	verify(wstate.GetActionText() == NULL);
	verify_string(wstate.GetText(), wstate.GetStatusText());
	verify_string(wstate.GetTooltipText(), wstate.GetText());

	// attention state, but no attention state string
	wstate.SetAttention(TRUE);
	verify(wstate.HasAttention() == TRUE);
	verify_string(wstate.GetText(), wstate.GetStatusText());
	verify_string(wstate.GetTooltipText(), wstate.GetText());
	verify_string(wstate.GetActionText(), wstate.GetText());

	// in addition, set attention string
	OpStringC attention_text(UNI_L("attention status"));
	verify(OpStatus::IsSuccess(wstate.SetAttentionText(attention_text)));
	verify_string(wstate.GetAttentionText(), attention_text);
	verify_string(wstate.GetText(), wstate.GetAttentionText());
	verify_string(wstate.GetTooltipText(), wstate.GetText());
	verify_string(wstate.GetActionText(), wstate.GetText());

	// empty string handling
	OpString empty;
	verify(OpStatus::IsSuccess(wstate.SetAttentionText(empty)));
	verify_string(wstate.GetAttentionText(), empty);
	verify_string(wstate.GetText(), wstate.GetStatusText());
	verify_string(wstate.GetTooltipText(), wstate.GetText());
	verify_string(wstate.GetActionText(), wstate.GetText());

}

test("create WebServerEnabledWidgetState") leakcheck;
{
	WebServerEnabledWidgetState enabled_state;
	verify(enabled_state.GetStateType() == WebServerWidgetState::WebServerEnabled);
	verify(enabled_state.GetAction() != NULL);
	verify(const_cast<OpInputAction*>(enabled_state.GetAction())->GetAction() == OpInputAction::ACTION_SHOW_HIDDEN_POPUP_MENU);
	OpStringC action_string(UNI_L("Webserver Status Popup Menu"));
	verify_string("Webserver Status Popup Menu", const_cast<OpInputAction*>(enabled_state.GetAction())->GetActionDataString());
	verify_string(enabled_state.GetForegroundImage(), "Unite Enabled");

	OpString tooltip_text;
	g_languageManager->GetString(Str::S_WEBSERVER_STATE_ENABLED, tooltip_text);
	verify_string(enabled_state.GetTooltipText(), tooltip_text);
}

test("create WebServerEnablingWidgetState") leakcheck;
{
	WebServerEnablingWidgetState enabling_state;
	verify(enabling_state.GetStateType() == WebServerWidgetState::WebServerEnabling);
	verify(enabling_state.GetAction() != NULL);
	verify(const_cast<OpInputAction*>(enabling_state.GetAction())->GetAction() == OpInputAction::ACTION_SHOW_HIDDEN_POPUP_MENU);
	verify_string("Webserver Status Popup Menu", const_cast<OpInputAction*>(enabling_state.GetAction())->GetActionDataString());
	verify_string(enabling_state.GetForegroundImage(), "Unite Disabled");

	OpString tooltip_text;
	g_languageManager->GetString(Str::S_WEBSERVER_STATE_ENABLING, tooltip_text);
	verify_string(enabling_state.GetTooltipText(), tooltip_text);
}

test("create WebServerDisabledWidgetState") leakcheck;
{
	WebServerDisabledWidgetState disabled_state;
	verify(disabled_state.GetStateType() == WebServerWidgetState::WebServerDisabled);
	verify(disabled_state.GetAction() != NULL);
	verify(const_cast<OpInputAction*>(disabled_state.GetAction())->GetAction() == OpInputAction::ACTION_SHOW_HIDDEN_POPUP_MENU);
	verify_string("Webserver Setup Status Popup Menu", const_cast<OpInputAction*>(disabled_state.GetAction())->GetActionDataString());
	verify_string(disabled_state.GetForegroundImage(), "Unite Disabled");

	OpString tooltip_text;
	g_languageManager->GetString(Str::S_WEBSERVER_STATE_DISABLED, tooltip_text);
	verify_string(disabled_state.GetTooltipText(), tooltip_text.CStr());
}


test("create WebServerErrorWidgetState") leakcheck;
{
	WebServerErrorWidgetState error_state;
	verify(error_state.GetStateType() == WebServerWidgetState::WebServerError);
	verify(error_state.GetAction() != NULL);
	verify(const_cast<OpInputAction*>(error_state.GetAction())->GetAction() == OpInputAction::ACTION_SHOW_HIDDEN_POPUP_MENU);
	verify_string("Webserver Status Popup Menu", const_cast<OpInputAction*>(error_state.GetAction())->GetActionDataString());
	verify_string(error_state.GetForegroundImage(), "Unite Failed");

	OpString tooltip_text;
	g_languageManager->GetString(Str::S_WEBSERVER_STATE_FAILED, tooltip_text);
	verify_string(error_state.GetTooltipText(), tooltip_text.CStr());
}


test("create WebServerWidgetStateModifier") leakcheck;
{
	WebServerWidgetStateModifier modifier;
	modifier.Init();
	verify(static_cast<WebServerWidgetState*>(modifier.GetCurrentWidgetState())->GetStateType() == WebServerWidgetState::WebServerDisabled);
}


test("WebServerWidgetStateModifier, set to enabled") leakcheck;
{
	WebServerWidgetStateModifier modifier;
	modifier.Init();
	modifier.SetWidgetStateToEnabled();
	verify(static_cast<WebServerWidgetState*>(modifier.GetCurrentWidgetState())->GetStateType() == WebServerWidgetState::WebServerEnabled);
}


test("WebServerWidgetStateModifier, set to enabling") leakcheck;
{
	WebServerWidgetStateModifier modifier;
	modifier.Init();
	modifier.SetWidgetStateToEnabling();
	verify(static_cast<WebServerWidgetState*>(modifier.GetCurrentWidgetState())->GetStateType() == WebServerWidgetState::WebServerEnabling);
}


test("WebServerWidgetStateModifier, set to disabled") leakcheck;
{
	WebServerWidgetStateModifier modifier;
	modifier.Init();
	modifier.SetWidgetStateToDisabled();
	verify(static_cast<WebServerWidgetState*>(modifier.GetCurrentWidgetState())->GetStateType() == WebServerWidgetState::WebServerDisabled);
}


test("WebServerWidgetStateModifier, set to busy") leakcheck;
{
	WebServerWidgetStateModifier modifier;
	modifier.Init();
	modifier.SetWidgetStateToError();
	verify(static_cast<WebServerWidgetState*>(modifier.GetCurrentWidgetState())->GetStateType() == WebServerWidgetState::WebServerError);
}

test("WebServerWidgetStateModifier, sticky attention state") leakcheck;
{
	// testing if all info is copied correctly from one state to the next
	WebServerWidgetStateModifier modifier;
	modifier.Init();

	// check defaults
	WebServerWidgetState * current_state = static_cast<WebServerWidgetState*>(modifier.GetCurrentWidgetState());
	verify(current_state != NULL);
	verify(current_state->HasAttention() == FALSE);
	verify(current_state->GetAttentionText().IsEmpty());

	// now set attention info
	OpStringC attention_str(UNI_L("attention"));
	current_state->SetAttentionText(attention_str);
	current_state->SetAttention(TRUE);

	// setting to enabled. check that attention info was transferred
	modifier.SetWidgetStateToEnabled();
	current_state = static_cast<WebServerWidgetState*>(modifier.GetCurrentWidgetState());
	verify(current_state != NULL);
	verify(current_state->HasAttention() == TRUE);
	verify_string(current_state->GetAttentionText(), attention_str);

	// setting to enabling. check that attention info was transferred
	modifier.SetWidgetStateToEnabling();
	current_state = static_cast<WebServerWidgetState*>(modifier.GetCurrentWidgetState());
	verify(current_state != NULL);
	verify(current_state->HasAttention() == TRUE);
	verify_string(current_state->GetAttentionText(), attention_str);

	// setting to disabled. check that attention info was transferred
	modifier.SetWidgetStateToDisabled();
	current_state = static_cast<WebServerWidgetState*>(modifier.GetCurrentWidgetState());
	verify(current_state != NULL);
	verify(current_state->HasAttention() == TRUE);
	verify_string(current_state->GetAttentionText(), attention_str);

	// setting to error. check that attention info was transferred
	modifier.SetWidgetStateToError();
	current_state = static_cast<WebServerWidgetState*>(modifier.GetCurrentWidgetState());
	verify(current_state != NULL);
	verify(current_state->HasAttention() == TRUE);
	verify_string(current_state->GetAttentionText(), attention_str);
}