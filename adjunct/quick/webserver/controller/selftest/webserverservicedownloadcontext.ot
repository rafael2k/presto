/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Manuela Hutter (manuelah)
 */

group "webserver.controller.webserverservicedownloadcontext";

require WEBSERVER_SUPPORT;

include "adjunct/quick/webserver/controller/WebServerServiceDownloadContext.h";

/*
test("create WebServerServiceDownloadContext, empty contructor") leakcheck;
{
	WebServerServiceDownloadContext context;

	verify(context.GetFullDownloadURL().IsEmpty());
	verify(context.GetRepositoryURL().IsEmpty());
	verify(!context.IsTrustedServer());
}


test("create WebServerServiceDownloadContext, parameterized contructor") leakcheck;
{
	OpString download_url;
	download_url.Set(UNI_L("http://somedownload.com/superservice.us"));

	OpString repository_url;
	repository_url.Set(UNI_L("http://somedownload.com/"));
	
	WebServerServiceDownloadContext context(download_url, repository_url, TRUE);

	verify(context.GetFullDownloadURL().Compare(download_url) == 0);
	verify(context.GetRepositoryURL().Compare(repository_url) == 0);
	verify(context.IsTrustedServer());
}


test("create WebServerServiceDownloadContext, set download url") leakcheck;
{
	OpString download_url;
	download_url.Set(UNI_L("http://somedownload.com/superservice.us"));
	
	WebServerServiceDownloadContext context;
	OP_STATUS status = context.SetFullDownloadURL(download_url);
	
	verify(OpStatus::IsSuccess(status));
	verify(context.GetFullDownloadURL().Compare(download_url) == 0);
}


test("create WebServerServiceDownloadContext, set repository url") leakcheck;
{
	OpString repository_url;
	repository_url.Set(UNI_L("http://somedownload.com/"));
	
	WebServerServiceDownloadContext context;
	OP_STATUS status = context.SetRepositoryURL(repository_url);
	
	verify(OpStatus::IsSuccess(status));
	verify(context.GetRepositoryURL().Compare(repository_url) == 0);
}


test("create WebServerServiceDownloadContext, set trusted server") leakcheck;
{
	WebServerServiceDownloadContext context;
	context.SetIsTrustedServer(TRUE);
	
	verify(context.IsTrustedServer());
}

*/
