/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
/* Espen Sand */

group "unix.lockfile";
require init;
require UNIX;

include "platforms/unix/base/common/unixutils.h";

test("Test file locking")
{
	OpString filename;
	OpString tmp_storage;
	filename.Set(g_folder_manager->GetFolderPathIgnoreErrors(OPFILE_USERPREFS_FOLDER, tmp_storage));
	filename.Append("selftestlock");

	int file;
	int rc = UnixUtils::LockFile(filename, &file);
	verify(rc == 1); /* Means we were able to lock the file */

	rc = UnixUtils::LockFile(filename, 0);
	verify(rc == 1); /* Means we were not able to lock the file because it was already locked */

	close(file); /* This will automatically unlock */

	rc = UnixUtils::LockFile(filename, &file);
	verify(rc == 1); /* Means we were able to lock the file once again*/

	close(file);
}
