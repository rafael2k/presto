/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
/* Espen Sand */

group "unix.mdebuffer";
require init;
require UNIX;

include "platforms/unix/base/x11/x11_widget.h";
include "platforms/unix/base/x11/x11_mdebuffer.h";


test("Allocate buffer")
{
	X11Widget widget;	
	verify(OpStatus::IsSuccess(widget.Init(0)));
	verify(OpStatus::IsSuccess(widget.CreateMdeScreen(16, 16)));
	verify(widget.GetMdeBuffer() != 0);
	verify(widget.GetMdeBuffer()->UsesXImage());
	verify(OpStatus::IsSuccess(widget.GetMdeBuffer()->AllocateBuffer(16,16)));
	verify(widget.GetMdeBuffer()->GetWidth() == 16);
	verify(widget.GetMdeBuffer()->GetHeight() == 16);
}


test("Erase buffer")
{
	X11Widget widget;
	verify(OpStatus::IsSuccess(widget.Init(0,0,X11Widget::TRANSPARENT)));
	verify(OpStatus::IsSuccess(widget.CreateMdeScreen(8, 8)));
	verify(widget.GetMdeBuffer() != 0);
	verify(widget.GetMdeBuffer()->UsesXImage());	
	verify(OpStatus::IsSuccess(widget.GetMdeBuffer()->AllocateBuffer(8,8)));
	verify(widget.GetMdeBuffer()->GetWidth() == 8);
	verify(widget.GetMdeBuffer()->GetHeight() == 8);
	widget.GetMdeBuffer()->Erase(MDE_MakeRect(0,0,8,8));

	UINT32* data = static_cast<UINT32*>(widget.GetMdeBuffer()->GetImageBuffer());
	verify(data != 0);

	/* Erase only erases when depth is 32 */
	if (widget.GetDepth() == 32)
	{
		for (UINT i=0; i<64; i++ )
		{
			verify(data[i]&0xFF000000 == 0);
		}
	}
}

