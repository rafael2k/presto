/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
/* Espen Sand */

group "unix.ipc";
require init;
require UNIX;

include "platforms/unix/product/x11quick/ipcmessageparser.h";

test("Parse Open URL command")
{
	OpString command;
	IPCMessageParser::ParsedData pd;

	command.Set("openURL(www.opera.com/test)"); 
	verify(IPCMessageParser::ParseOpenUrlCommand(command, pd) == TRUE);
	verify(pd.new_window == FALSE);
	verify(pd.new_tab == FALSE);
	verify(pd.in_background == FALSE);
	verify(pd.noraise == FALSE);
	verify(pd.window_name.IsEmpty());
	verify(pd.address.Compare("www.opera.com/test")==0);
}


test("Parse Open URL command in new window")
{
	OpString command;
	IPCMessageParser::ParsedData pd;

	command.Set("openURL(www.opera.com/test,new-window)"); 
	verify(IPCMessageParser::ParseOpenUrlCommand(command, pd) == TRUE);
	verify(pd.new_window == TRUE);
	verify(pd.new_tab == FALSE);
	verify(pd.in_background == FALSE);
	verify(pd.noraise == FALSE);
	verify(pd.window_name.IsEmpty());
	verify(pd.address.Compare("www.opera.com/test")==0);
}


test("Parse Open URL command in new tab and not raised")
{
	OpString command;
	IPCMessageParser::ParsedData pd;

	command.Set("openURL(www.opera.com/test,new-tab,noraise)"); 
	verify(IPCMessageParser::ParseOpenUrlCommand(command, pd) == TRUE);
	verify(pd.new_window == FALSE);
	verify(pd.new_tab == TRUE);
	verify(pd.in_background == FALSE);
	verify(pd.noraise == TRUE);
	verify(pd.window_name.IsEmpty());
	verify(pd.address.Compare("www.opera.com/test")==0);
}


test("Parse Open URL command with name and geometry in a tab")
{
	OpString command;
	IPCMessageParser::ParsedData pd;

	command.Set("openURL(www.opera.com/test,background-tab,N=windowname,G=300x400+10-20,noraise)"); 
	verify(IPCMessageParser::ParseOpenUrlCommand(command, pd) == TRUE);
	verify(pd.new_window == FALSE);
	verify(pd.new_tab == FALSE);
	verify(pd.in_background == TRUE);
	verify(pd.noraise == TRUE);
	verify(pd.window_name.IsEmpty());
	verify(pd.address.Compare("www.opera.com/test")==0);
	verify(pd.window_rect.IsEmpty() == TRUE);
}


test("Parse Open URL command with name and geometry in a window")
{
	OpString command;
	IPCMessageParser::ParsedData pd;
	OpRect rect(10,-20,300,400);

	command.Set("openURL(www.opera.com/test,new-window,N=windowname,G=300x400+10-20,noraise)"); 
	verify(IPCMessageParser::ParseOpenUrlCommand(command, pd) == TRUE);
	verify(pd.new_window == TRUE);
	verify(pd.new_tab == FALSE);
	verify(pd.in_background == FALSE);
	verify(pd.noraise == TRUE);
	verify(pd.window_name.Compare("windowname")==0);
	verify(pd.address.Compare("www.opera.com/test")==0);
	verify(pd.window_rect.Equals(rect) == TRUE);
}



test("Parse destination with name and geometry in a window")
{
	OpString command;
	IPCMessageParser::ParsedData pd;
	OpRect rect(10,500,300,400);

	command.Set("openURL(www.opera.com/test,new-window,N=windowname,G=300x400+10+500,noraise)"); 
	verify(IPCMessageParser::ParseDestinationCommand(command, pd) == TRUE);
	verify(pd.new_window == TRUE);
	verify(pd.new_tab == FALSE);
	verify(pd.in_background == FALSE);
	verify(pd.noraise == TRUE);
	verify(pd.window_name.Compare("windowname")==0);
	verify(pd.address.IsEmpty());
	verify(pd.window_rect.Equals(rect) == TRUE);
}

