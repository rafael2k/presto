/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*-
**
** Copyright (C) 1995-2007 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "unix.gadgetutils";

require _UNIX_DESKTOP_; 
require WIDGET_RUNTIME_SUPPORT; 

include "adjunct/widgetruntime/pi/PlatformGadgetUtils.h";
include "platforms/unix/base/common/unix_gadgetutils.h";

include "adjunct/desktop_util/opfile/desktop_opfile.h";
include "modules/util/opautoptr.h";
include "modules/util/opfile/opfile.h";

table GadgetNames(OpString, OpString)
{
	{ "Analog Clock", "analog-clock" },
	{ " 	Digital  Clock ", "digital-clock" },
	{ "brackets test (test)", "brackets-test-test" },
	{ "Artist's Sketchbook 1.65", "artists-sketchbook-1.65" },
	{ "\"Artist's Sketchbook 1.66\"", "artists-sketchbook-1.66" },
	{ "ついっぺら", "ついっぺら" }
}

table PackageTypes_PackageExtension(char*, char*)
{
	{ "deb" , "deb" },
	{ "tar" , "tar.gz" }
	// TODO: Add rpm but it depends on rpmbuild... how to test it?
	// Runtime check?
}

foreach (name, normalized_name) from GadgetNames
{
	test("Normalize gadget name: " name)
	{
		OpString foo;
		foo.Set(name);
		PlatformGadgetUtils::Normalize(foo);
		// output( "normalized to: %s\n", uni_down_strdup(foo.CStr()) );
		verify( foo.Compare(normalized_name) == 0 );
	}
}

foreach (package_type, package_extension) from PackageTypes_PackageExtension
{
	test("Creating " package_type " package")
		file uni test_wgt_path "data/test.wgt";
		file uni output_path "data/";
	{
		// Start creating package foo.<pack type> (blocking call)

		FILE* pipe;
		verify(OpStatus::IsSuccess(UnixGadgetUtils::CreateGadgetPackage(
				test_wgt_path, UNI_L(package_type), &pipe, output_path, 
				UNI_L("foo"), TRUE)));

		// Construct path for created package

		OpString package_path;
		package_path.Set(output_path);
		package_path.Append("foo.");
		package_path.Append(package_extension);

		// Check if package exists

		BOOL exists = FALSE;
		DesktopOpFileUtils::Exists(package_path, exists);
		verify(exists == TRUE);

		// Remove it

		OpFile package_file;
		package_file.Construct(package_path);
		package_file.Delete(TRUE);
	}
}
