/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "windows.timeinfo";
require init;
require MSWIN;

include "platforms/windows/pi/WindowsOpTimeInfo.h";
include "platforms/windows/WindowsTimer.h";

language C++;

global
{
	OpTimeInfo* oti;
}

test("create")
{
	OP_STATUS status = OpTimeInfo::Create(&oti);
	verify(OpStatus::IsSuccess(status) && oti != NULL);
}

test("DaylightSavingsTimeAdjustmentMS") require success "create";
{
	double summer = oti->DaylightSavingsTimeAdjustmentMS(1119218400.0 * 1000); // 2005-06-20
	double winter = oti->DaylightSavingsTimeAdjustmentMS(1135378800.0 * 1000); // 2005-12-24
	if (summer < winter)
	{
		double tmp = summer;
		summer = winter;
		winter = tmp;
		output("(you seem to be in the Southern hemisphere) ");
	}
	else
		output("(you seem to be in the Northern hemisphere) ");
  
	if (summer - winter > 1e-3)
		verify(op_abs(summer - 3600000) < 1e-3);
	else
		output("(you seem to be in a DST-less time-zone) ");

	verify(op_abs(winter) < 1e-3);
}

test("GetTimezone") require success "create";
{
	long tz = oti->GetTimezone();
	// Test that it's within the plausible +/- 13 hours range:
	verify(tz <= 13 * 3600 && tz > -13 * 3600);
 
	if (tz)
	{
        // Catch anyone who's measured it in hours or minutes instead of seconds:
        verify(tz > 840 || tz < -840);
	} 
	// Sanity constraint:
    verify(tz % 300 == 0);
}

test("performance: DaylightSavingsTimeAdjustmentMS() with 10M iterations") timer;
{
	time_t tmptime = time(NULL);
	UINT32 i;
	double adjustment;
	double timenow = (double)(tmptime * 1000.);

	for(i = 0; i < 10000000; i++)
	{
        adjustment = oti->DaylightSavingsTimeAdjustmentMS(timenow);
	}
}

test("performance: GetTimeUTC() with 10M iterations") timer;
{
	UINT32 i;
	double nano_time;

	for(i = 0; i < 10000000; i++)
	{
        nano_time = oti->GetTimeUTC();
	}
}

test("performance: GetRuntimeMS() with 10M iterations") timer;
{
	UINT32 i;
	double nano_time;

	for(i = 0; i < 10000000; i++)
	{
        nano_time = oti->GetRuntimeMS();
	}
}

test("GetWallClockResolution() with resolution increase")
{
	verify(WindowsTimerResolutionManager::GetInstance());
	WindowsTimerResolutionManager::GetInstance()->UpdateTimerResolution(TRUE);

	double res = oti->GetWallClockResolution();

	// we should have increased resolution now
	verify(res == 0.003);

	WindowsTimerResolutionManager::GetInstance()->UpdateTimerResolution(FALSE);

	// It should be reset back to what it was now
	res = oti->GetWallClockResolution();

	verify(res == 0.01);
}

exit
{
	OP_DELETE(oti);
}
