/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "windows.launch";
require MSWIN;

include "platforms/windows/WindowsLaunch.h";

language C++;

table arg_samples (const char *, const char*)
{
	{ "simplearg", "simplearg" },
	{ "arg with space", "\"arg with space\"" },
	{ "argwith\"quote", "argwith\\\"quote" },
	{ "arg with space \"and\" quotes", "\"arg with space \\\"and\\\" quotes\"" },
	{ "argwith\\\"quoteand\\backslashes", "argwith\\\\\\\"quoteand\\backslashes" },
	{ "A \\\\\"complex\" argument \\\\ ", "\"A \\\\\\\\\\\"complex\\\" argument \\\\ \"" },
	{ "simple\xC3\xA5rg", "simple\xC3\xA5rg" },
}

test("EscapeAndQuoteArg")
{
	WindowsLaunchPI launch;

    iterate(unquoted_arg, quoted_arg) from arg_samples
    {
		char* result = launch.EscapeAndQuoteArg(unquoted_arg);
		verify (result && op_strcmp(result, quoted_arg) == 0);
		delete[] result;
    }
}

test("ArgCat")
{
	WindowsLaunchPI launch;
	
	char* args1[] = { "simplearg", "argwith\"quote", "A \\\\\"complex\" \xC3\xA5rgument \\\\ " } ;
	uni_char* cl1 = UNI_L("simplearg argwith\\\"quote \"A \\\\\\\\\\\"complex\\\" \x00E5rgument \\\\ \"");
	
	uni_char* result = launch.ArgCat(3, args1);
	verify (result && uni_strcmp(result, cl1) == 0);
	delete[] result;
}
