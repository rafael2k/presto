// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
//
// Copyright (C) 2003-2010 Opera Software AS.  All rights reserved.
//
// This file is part of the Opera web browser.  It may not be distributed
// under any circumstances.
//
// Øyvind Østlund
//
 
group "operainstaller.registrykey";
require init;
require MSWIN;

include "platforms/windows/installer/RegistryKey.h";

language C++;

global
{
	OpString selftest_folder;

	//uni_char* reg_none_str = UNI_L("REG_NONE");
	//uni_char* reg_sz_str = UNI_L("REG_SZ");
	//uni_char* reg_expand_sz_str = UNI_L("REG_EXPAND_SZ");
	//uni_char* reg_binary_str = UNI_L("REG_BINARY");
	//uni_char* reg_dword_str	= UNI_L("REG_DWORD");
} 

setup
{
	selftest_folder.Set(__FILE__);
	int i = selftest_folder.FindLastOf(PATHSEPCHAR);
	selftest_folder.Delete(i);
	selftest_folder.Append(UNI_L("\\data\\"));
}


exit
{

}

test("Set/Get key path")
{
	RegistryKey r;
	uni_char* str;

	// Empty string
	str = UNI_L("");
	verify(OpStatus::IsSuccess(r.SetKeyPath(str)));
	verify(uni_strcmp(r.GetKeyPath(), str) == 0);

	// Path
	str = UNI_L("C:\\program files\\opera\\");
	verify(OpStatus::IsSuccess(r.SetKeyPath(str)));
	verify(uni_strcmp(r.GetKeyPath(), str) == 0);

	// NULL pointer
	verify(OpStatus::IsError(r.SetKeyPath(NULL)));
	verify(uni_strcmp(r.GetKeyPath(), str) == 0);
}

test("Set/Get value type (default)")
{
	RegistryKey r;
	OpString tmp;

	// Default value
	verify(r.GetValueType() == REG_SZ);
	tmp.Empty();
}
test("Set/Get value type (dword)")
{
	RegistryKey r;
	OpString tmp;

	// Wrong value
	r.SetValueType((DWORD)-1);
	verify(r.GetValueType() == REG_SZ);
	verify(OpStatus::IsSuccess(r.GetValueType(tmp)));
	verify(tmp.Compare(RegistryKey::TYPE[REG_SZ]) == 0);
	tmp.Empty();

	// REG_DWORD as value
	r.SetValueType(REG_DWORD);
	verify(r.GetValueType() == REG_DWORD);
	verify(OpStatus::IsSuccess(r.GetValueType(tmp)));
	verify(tmp.Compare(RegistryKey::TYPE[REG_DWORD]) == 0);
}

test("Get/Set value name")
{
	RegistryKey r;
	uni_char* str;

	// Empty string
	str = UNI_L("");
	verify(OpStatus::IsSuccess(r.SetValueName(str)));
	verify(uni_strcmp(r.GetValueName(), "") == 0);

	// Random name
	str = UNI_L("Opera.exe");
	verify(OpStatus::IsSuccess(r.SetValueName(str)));
	verify(uni_strcmp(r.GetValueName(), str) == 0);

	// NULL pointer
	verify(OpStatus::IsSuccess(r.SetValueName(NULL)));
	verify(uni_strcmp(r.GetValueName(), "") == 0);
}
