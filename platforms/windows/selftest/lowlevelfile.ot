/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "windows.lowlevelfile";
require init;
require MSWIN;

include "modules/util/opfile/opfile.h";
include "platforms/windows/pi/WindowsOpLowLevelFile.h";


test("performance: Test Exists() 100k times") timer;
		file uni path "lowlevelfile.ot";
{
	OpFile file;
	verify_success(file.Construct(path));

	BOOL exists = FALSE;
	for (UINT32 i = 0; i < 100000; i++)
	{
		verify_success(file.Exists(exists));
		verify(exists);
	}
}

test("serialization of paths")
{
	OpLowLevelFile* file = NULL;
	OpString filepath;
	OpString fileserpath;
	
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_RESOURCES_FOLDER, filepath)));
	filepath.Append(UNI_L("test.txt"));
	fileserpath.Set(UNI_L("{Resources}test.txt"));
	verify_success(OpLowLevelFile::Create(&file, fileserpath.CStr(), TRUE));
	
	verify(filepath.Compare(file->GetFullPath()) == 0);
	verify(fileserpath.Compare(file->GetSerializedName()) == 0);

	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_RESOURCES_FOLDER, filepath)));
	filepath.Delete(filepath.Length() - 1);
	fileserpath.Set(UNI_L("{Resources}"));

	OP_DELETE(file);

	verify_success(OpLowLevelFile::Create(&file, fileserpath.CStr(), TRUE));
	
	verify(filepath.Compare(file->GetFullPath()) == 0);
	verify(fileserpath.Compare(file->GetSerializedName()) == 0);

	//If the local home folder is the same as the home folder (because of user customization or single user installation), the serialized name will be turned from large to Small.
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_LOCAL_HOME_FOLDER, filepath)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_HOME_FOLDER, fileserpath)));
	BOOL same_profile_folder = (filepath.Compare(fileserpath) == 0);
	
	filepath.Append(UNI_L("test.txt"));
	fileserpath.Set(UNI_L("{LargePreferences}test.txt"));

	OP_DELETE(file);

	verify_success(OpLowLevelFile::Create(&file, fileserpath.CStr(), TRUE));
	
	verify(filepath.Compare(file->GetFullPath()) == 0);
	
	if (!same_profile_folder)
		verify(fileserpath.Compare(file->GetSerializedName()) == 0);

	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_HOME_FOLDER, filepath)));
	filepath.Append(UNI_L("test.txt"));
	fileserpath.Set(UNI_L("{SmallPreferences}test.txt"));
	verify_success(OpLowLevelFile::Create(&file, fileserpath.CStr(), TRUE));
	
	verify(filepath.Compare(file->GetFullPath()) == 0);
	verify(fileserpath.Compare(file->GetSerializedName()) == 0);
}
finally
{
	OP_DELETE(file);
}

test("Test Exists() with invalid path - should not show a dialog")
{
	OpLowLevelFile *file;

	verify_success(OpLowLevelFile::Create(&file, UNI_L("I:\\invalidfile.css"), FALSE));

	BOOL exists = FALSE;
	verify_success(file->Exists(&exists));
	verify(!exists);
}
finally
{
	OP_DELETE(file);
}

test("Test Open() with invalid path - should fail without any dialog")
{
	OpLowLevelFile *file;

	verify_success(OpLowLevelFile::Create(&file, UNI_L("I:\\invalidfile.css"), FALSE));

	verify(OpStatus::IsError(file->Open(OPFILE_READ)));
}
finally
{
	OP_DELETE(file);
}

