/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "windows.execute_application";
require init;
require MSWIN;

include "platforms/windows/pi/WindowsOpSystemInfo.h";

language C++;

// each row describes one test :
// test description, command to run, file to pass to command, expected application, expected parameters, expected return code
table app_samples (const char *, const uni_char *, const uni_char *, const uni_char *, const uni_char *, OP_STATUS)
{
	{ "notepad", UNI_L("C:\\Windows\\notepad.exe"), UNI_L("C:\\autoexec.bat"), UNI_L("C:\\Windows\\notepad.exe"), UNI_L("\"C:\\autoexec.bat\""), OpStatus::OK },
	{ "notepad no path", UNI_L("\"notepad\""), UNI_L("\"C:\\autoexec.bat\""), UNI_L("notepad"), UNI_L("\"C:\\autoexec.bat\""), OpStatus::OK },
	{ "notepad with args", UNI_L("\"notepad.exe\"   %s blub"), UNI_L("C:\\autoexec.bat"), UNI_L("notepad.exe"), UNI_L("\"C:\\autoexec.bat\" blub"), OpStatus::OK },
	{ "app in the file name", UNI_L("notepad.exe"), UNI_L("C:\\Windows\\notepad.exe"), UNI_L("C:\\Windows\\notepad.exe"), UNI_L(""), OpStatus::OK },
	{ "quote mismatch 1", UNI_L("\"notepad.exe   %s blub"), UNI_L("C:\\autoexec.bat"), NULL, NULL, OpStatus::ERR_PARSING_FAILED },
	{ "quoted app", UNI_L("\"notepad.exe\""), NULL, UNI_L("notepad.exe"), UNI_L(""), OpStatus::OK },
	{ "quoted app with args", UNI_L("\"notepad.exe\" blub"), NULL, UNI_L("notepad.exe"), UNI_L("blub"), OpStatus::OK },
	{ "missing file name placehoder 1", UNI_L("\"notepad.exe\"   blub"), UNI_L("\"C:\\autoexec.bat"), UNI_L("notepad.exe"), UNI_L("blub \"\"C:\\autoexec.bat\""), OpStatus::OK },
	{ "empty app", UNI_L(""), UNI_L("\"C:\\autoexec.bat"), NULL, NULL, OpStatus::ERR },
	{ "quote mismatch 2", UNI_L("notepad.exe\" %s blub"), UNI_L("C:\\autoexec.bat"), NULL, NULL, OpStatus::ERR },
	{ "missing file name placehoder 2", UNI_L("notepad"), UNI_L("C:\\autoexec.but"), UNI_L("notepad"), UNI_L("\"C:\\autoexec.but\""), OpStatus::OK },
	{ "quote and parameters must be separated by a space", UNI_L("\"notepad\"%s"), UNI_L("C:\\autoexec.bat"), NULL, NULL, OpStatus::ERR_PARSING_FAILED },
	{ "quoted file name placeholder", UNI_L("\"notepad.exe\" \"%s\" blub"), UNI_L("C:\\autoexec.bat"), UNI_L("notepad.exe"), UNI_L("\"C:\\autoexec.bat\" blub"), OpStatus::OK },
	{ "quote mismatch on placeholder 1", UNI_L("\"notepad.exe\" %s\" blub"), UNI_L("C:\\autoexec.bat"),  NULL, NULL, OpStatus::ERR },
	{ "quote mismatch on placeholder 2", UNI_L("\"notepad.exe\" blub %s\" blub"), UNI_L("C:\\autoexec.bat"), NULL, NULL, OpStatus::ERR },
	{ "quote mismatch on placeholder 3", UNI_L("\"notepad.exe\" \"%s blub"), UNI_L("C:\\autoexec.bat"),  NULL, NULL, OpStatus::ERR },
	{ "unexisting binary 1", UNI_L("i_dont_like_you_here.exe"), NULL, NULL, NULL, OpStatus::ERR },
	{ "unexisting binary 2", UNI_L("C:\\Program Files\\i_dont_like_you_here.exe"), NULL, NULL, NULL, OpStatus::ERR },
}

foreach (test_description, app, param, app_result, param_result, retval) from app_samples
{
	test(test_description)
	{
		OP_STATUS status;
		OpString application;
		OpString parameters;

		status = ((WindowsOpSystemInfo*)g_op_system_info)->ProcessAppParameters(app, param, application, parameters);
		verify(status == retval);
		if (OpStatus::IsSuccess(retval))
		{
			verify_string(app_result, application);
			verify_string(param_result, parameters);
		}
	}
}