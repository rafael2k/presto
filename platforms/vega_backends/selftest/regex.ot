/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "vega_backends.blocklist.regex";
require VEGA_BACKENDS_USE_BLOCKLIST;

include "modules/util/str.h";
include "platforms/vega_backends/vega_blocklist_file.h";

test("regex matches")
{
	VEGABlocklistRegexEntry e;
	verify(e.m_exp = UniSetNewStr(UNI_L("version (\\d+)\\.(\\d+)\\.(\\d+) or something")));

	verify(e.Matches(UNI_L("version 1.2 or something")) == OpBoolean::IS_FALSE);
	verify(e.Matches(UNI_L("version 1.2.3 or something")) == OpBoolean::IS_TRUE);
	verify(e.Matches(UNI_L("version 1.2.3")) == OpBoolean::IS_FALSE);
	verify(e.Matches(UNI_L("version 1.2.3 or something else")) == OpBoolean::IS_FALSE); // must match whole string


	// negative values are used to represent less than three numbers
	const size_t NumTests = 8;
	INT32 MatchNumbers[NumTests][3] = {
		{ 0, -1, -1, },
		{ 1, -1, -1, },
		{ 2,  1, -1, },
		{ 1,  2, -1, },
		{ 1,  3, -1, },
		{ 1,  2,  2, },
		{ 1,  2,  3, },
		{ 1,  2,  4, },
	};
	BOOL MatchStatus[NumTests][6] = {
		// ==     !=     >      >=     <      <=
		// 0
		{  FALSE, TRUE,  TRUE,  TRUE,  FALSE, FALSE, },
		// 1
		{  FALSE, TRUE,  TRUE,  TRUE,  FALSE, FALSE, },
		// 2
		{  FALSE, TRUE,  FALSE, FALSE, TRUE,  TRUE,  },
		// 1.2
		{  FALSE, TRUE,  TRUE,  TRUE,  FALSE, FALSE, },
		// 1.3
		{  FALSE, TRUE,  FALSE, FALSE, TRUE,  TRUE,  },
		// 1.2.2
		{  FALSE,  TRUE, TRUE,  TRUE,  FALSE, FALSE, },
		// 1.2.3
		{  TRUE,  FALSE, FALSE, TRUE,  FALSE, TRUE,  },
		// 1.2.4
		{  FALSE, TRUE,  FALSE, FALSE, TRUE,  TRUE,  },
	};

	for (size_t i = 0; i < NumTests; ++i)
	{
		e.m_comp[0].m_values.Clear();
		for (int j = 0; j < 3; ++j)
		{
			const INT32 val = MatchNumbers[i][j];
			if (val < 0)
				break;
			verify_success(e.m_comp[0].m_values.Add(val));
		}

		for (size_t j = 0; j < 6; ++j)
		{
			e.m_comp[0].m_comp = (VEGABlocklistRegexEntry::Comparison)j;
			verify(e.Matches(UNI_L("version 1.2.3 or something")) ==
			       (MatchStatus[i][j] ? OpBoolean::IS_TRUE : OpBoolean::IS_FALSE));
		}
	}

	// m_comp[0] is now 1.2.4
	e.m_comp[0].m_comp = VEGABlocklistRegexEntry::LessThan;
	e.m_comp[1].m_comp = VEGABlocklistRegexEntry::EqualTo;

	const size_t NumTests2 = 3;
	INT32 MatchNumbers2[NumTests2][3] = {
		{ 1, 2, 2, },
		{ 1, 2, 3, },
		{ 1, 2, 4, },
	};
	BOOL MatchStatus2[NumTests2] = { FALSE, TRUE, FALSE, };

	for (size_t i = 0; i < NumTests2; ++i)
	{
		e.m_comp[1].m_values.Clear();
		for (int j = 0; j < 3; ++j)
		{
			const INT32 val = MatchNumbers2[i][j];
			verify_success(e.m_comp[1].m_values.Add(val));
		}

		verify(e.Matches(UNI_L("version 1.2.3 or something")) ==
		       (MatchStatus2[i] ? OpBoolean::IS_TRUE : OpBoolean::IS_FALSE));
	}
}
