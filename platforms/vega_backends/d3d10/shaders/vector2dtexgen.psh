float2 wrap_texpos(float2 texpos)
{
#include "swrap.shd"
#include "twrap.shd"
  return texpos;
}

Texture2D tex1;
Texture2D tex2;
Texture2D tex3;

SamplerState linearSampler1;
SamplerState linearSampler2;
SamplerState linearSampler3;

cbuffer constants : register (b0)
{
	bool stencilComponentBased : packoffset (c0);
	bool straightAlpha : packoffset (c1);
};

static const float3 lumfactors = float3(0.2125, 0.7154, 0.0721);

float4 op_main(float4 pos : SV_POSITION, float4 diffuse : COLOR0, float2 texpos : TEXCOORD0, float2 texgenpos : TEXCOORD1, float2 texgenpos2 : TEXCOORD2) : SV_Target
{
	float4 stencil = tex2.Sample(linearSampler2, wrap_texpos(texgenpos));
	if (stencilComponentBased == true)
	{
		float lum = dot(stencil.rgb, lumfactors);
		stencil = float4(lum, lum, lum, lum);
	}

	float maskAlpha = tex3.Sample(linearSampler3, wrap_texpos(texgenpos2)).a;
	// Same as "maskColor = straightAlpha ? 1.0 : maskAlpha", without conditional
	float maskColor = max(float(straightAlpha), maskAlpha);
	float4 mask = float4(maskColor, maskColor, maskColor, maskAlpha);

	float4 color = tex1.Sample(linearSampler1, wrap_texpos(texpos))*stencil*mask*diffuse;
	return color;
}

