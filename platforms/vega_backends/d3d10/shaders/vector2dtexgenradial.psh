Texture2D tex1;
Texture2D tex2;
Texture2D tex3;

SamplerState linearSampler1;
SamplerState linearSampler2;
SamplerState linearSampler3;

cbuffer constants : register (b0)
{
	bool stencilComponentBased : packoffset (c0);
	bool straightAlpha : packoffset (c1);
	float uSrcY : packoffset(c2);
	float3 uFocusPoint : packoffset (c3);
	float3 uCenterPoint : packoffset (c4);
};

static const float3 lumfactors = float3(0.2125, 0.7154, 0.0721);

float4 op_main(float4 pos : SV_POSITION, float4 diffuse : COLOR0, float2 texpos : TEXCOORD0, float2 texgenpos : TEXCOORD1, float2 texgenpos2 : TEXCOORD2) : SV_Target
{
	// see formula in modules/libvega/src/vegagradient.cpp
	float3 cd = uCenterPoint - uFocusPoint;
	// storing r0 in pdr allows dot on entire vectors when computing b
	float3 pd;
	pd.xy = texpos - uFocusPoint.xy;
	pd.z = uFocusPoint.z;

	float a = dot(cd.xy, cd.xy) - cd.z*cd.z; // invariant
	float b = dot(pd, cd);
	float c = dot(pd.xy, pd.xy) - pd.z*pd.z;

	float offset;
	float scale = tex3.Sample(linearSampler3, texgenpos2).a;
	if (abs(a) < 0.001)
	{
		offset = c / (2.0 * b);
		// if (abs(b) < epsilon) result is undefined
		scale *= step(0.001, abs(b));
	}
	else
	{
		float bbac = b*b-a*c;
		// if (bbac < 0) result is undefined
		scale *= step(0.0, bbac);
		bbac = sqrt(bbac)/a;
		b /= a;
		offset = b+bbac;
		// if (offset*cdr < -r0) result is undefined so use b - sqrt(bb-ac) instead
		offset -= step(offset*cd.z, -uFocusPoint.z)*2.0*bbac;
	}
	// if (offset*cdr < -r0) result is undefined
	scale *= step(-uFocusPoint.z, offset*cd.z);

	float4 stencil = tex2.Sample(linearSampler2, texgenpos);
	if (stencilComponentBased == true)
	{
		float lum = dot(stencil.rgb, lumfactors);
		stencil = float4(lum, lum, lum, lum);
	}

	// Same as "maskColor = straightAlpha ? 1.0 : scale", without conditional
	float maskColor = max(float(straightAlpha), scale);
	float4 mask = float4(maskColor, maskColor, maskColor, scale);

	float4 color = tex1.Sample(linearSampler1, float2(offset, uSrcY))*stencil*mask*diffuse;
	return color;
}

