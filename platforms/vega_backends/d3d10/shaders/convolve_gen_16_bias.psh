float2 wrap_texpos(float2 texpos)
{
#include "swrap.shd"
#include "twrap.shd"
  return texpos;
}

Texture2D srcTex;
SamplerState srcSampler;

cbuffer constants : register (b0)
{
	// Offset and weight for the texture reads
	float3 offsetWeight[16] : packoffset (c0);

	float divisor : packoffset (c16);
	float bias : packoffset (c17);

	bool preserve_alpha : packoffset (c18);
};

float4 unpremultiply(float4 v)
{
	return v.a <= 0 ? v : float4(v.rgb/v.a, v.a);
}

float4 op_main(float4 pos : SV_POSITION, float4 diffuse : COLOR0, float2 texpos : TEXCOORD0) : SV_Target
{
	float4 col = 0;
	for (int i = 0; i < 16; ++i)
	{
		float2 tc = wrap_texpos(texpos + offsetWeight[i].xy);
		col += srcTex.Sample(srcSampler, tc) * offsetWeight[i].z;
	}
	col = col / divisor + bias;

	if (preserve_alpha)
	{
		float4 orig = srcTex.Sample(srcSampler, wrap_texpos(texpos));
		col = unpremultiply(col);
		col = float4(col.rgb * orig.a, orig.a);
	}
	return saturate(col);
}

