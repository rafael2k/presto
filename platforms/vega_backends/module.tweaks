TWEAK_VEGA_BACKENDS_VSYNC		timj

	Enable vsync in the backend drivers that supports it. Vsync will limit
	your rendering speed but might reduce screen update artefacts.

	Category: setting
	Define: VEGA_BACKEND_VSYNC
	Depends on: nothing
	Enabled for: none
	Disabled for: desktop, smartphone, tv, minimal, mini
	
TWEAK_VEGA_BACKENDS_LAZY_DIRECTFB_ALLOCATION	awabik

	Some DirectFB implementations use lazy video memory allocation when creating
	surfaces. The CreateSurface() function will return success, but when trying to
	Lock() or Blit() on that surface, VRAM may be exhausted and the delayed
	allocation fails. If your environment is affected, you should enable this tweak.
	It will make Lock & Unlock on each surface after creation, and if Lock fails,
	fallback (allocating surface in system memory) will be used. Don't use this
	tweak if your environment is not affected, as it has a performance cost.
	
	Category: memory, performance
	Define: VEGA_BACKENDS_LAZY_DIRECTFB_ALLOCATION
	Depends on: API_VEGA_BACKENDS_DIRECTFB
	Enabled for: none
	Disabled for: desktop, smartphone, tv, minimal

TWEAK_VEGA_BACKENDS_D2D_INTEROPERABILITY	timj

	D2D interoperability for D3D 10.1. This is used for direct write
	integration.

	Category: setting
	Define: VEGA_BACKEND_D2D_INTEROPERABILITY
	Depends on: API_VEGA_BACKENDS_DIRECT3D10
	Enabled for: none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_VEGA_BACKENDS_DYNAMIC_LIBRARY_LOADING	timj

	Enable dynamic loading of symbols to avoid a dependency. If the dll
	cannot be loaded creating the device will fail. Dynamic loading
	is not yet implemented for all backends.

	Category: setting
	Define: VEGA_BACKEND_DYNAMIC_LIBRARY_LOADING
	Depends on: nothing
	Enabled for: desktop, smartphone, tv, minimal, mini
	Disabled for: none

TWEAK_VEGA_BACKENDS_OPENGLES			timj

	Use native OpenGL ES 2.0 to implement the OpenGL backend instead of
	emulating it on desktop GL. This requires the application to be linked
	with proper GL ES libraries and proper GL ES headers to be present.

	Category: setting
	Define: VEGA_OPENGLES
	Depends on: API_VEGA_BACKENDS_OPENGL
	Enabled for: none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_VEGA_BACKENDS_OPENGLES_HEADER	timj

	Change the include file used for OpenGL ES. The default is <GLES/gl2.h>

	Category: setting
	Define: VEGA_OPENGLES_HEADER
	Value: <GLES2/gl2.h>
	Disabled for: desktop, smartphone, tv, minimal, mini
	Depends on: VEGA_OPENGLES

TWEAK_VEGA_BACKENDS_OPENGLES_EXTENSIONS_HEADER		rogerj

	Change the include file used for OpenGL ES extensions. The default is <GLES/gl2ext.h>

	Category: setting
	Define: VEGA_OPENGLES_EXTENSIONS_HEADER
	Value: <GLES2/gl2ext.h>
	Disabled for: desktop, smartphone, tv, minimal, mini
	Depends on: VEGA_OPENGLES

TWEAK_VEGA_BACKENDS_GL_DEBUG			timj

	Generate a debug wrapper around every OpenGL function. The wrapper
	dumps the arguments and return value (enable "opengl" in
	dbug/debug.txt), as well as checks for OpenGL errors. Note that
	the latter will cause a serious slowdown because glGetError()
	forces synchronous execution. Do not use in production builds!

	Category: setting
	Define: VEGA_GL_DEBUG
	Depends on: API_VEGA_BACKENDS_OPENGL && _DEBUG
	Enabled for: none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_VEGA_BACKENDS_GL_DEBUG_CONTEXT	wonko

	Enable use of the OpenGL debug context. When OpenGL encounters an
	error it will print an error message (enable "opengl" in
	debug.txt) and trigger an OP_ASSERT. Do not use in production
	builds!

	Category: setting
	Define: VEGA_GL_DEBUG_CONTEXT
	Depends on: API_VEGA_BACKENDS_OPENGL && _DEBUG
	Enabled for: none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_VEGA_BACKENDS_API_ENTRY			timj

	Extra declarators that functions imported from the OpenGL shared
	library require, such as cdecl or stdcall.

	Category: setting
	Define: VEGA_GL_API_ENTRY
	Value: /* empty */
	Depends on: API_VEGA_BACKENDS_OPENGL
	Enabled for: none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_VEGA_BACKENDS_USE_BLOCKLIST             wonko

    if enabled, blocklist files will be consulted when creating a 3d
    device. this allows us to block unsupported vendors and driver
    versions. disabling this tweak may lead to crashes for unsupported
    backends and driver versions.

    Category: setting
    Define: VEGA_BACKENDS_USE_BLOCKLIST
    Depends on: TWEAK_VEGA_3D_HARDWARE_SUPPORT || FEATURE_CANVAS3D, FEATURE_VEGA_OPPAINTER
    Enabled for: desktop
    Disabled for: smartphone, tv, minimal, mini

TWEAK_VEGA_BACKENDS_OPENGL_FLIPY landell

	Enable flipping of the coordinates along the y axis when rendering
	to a window in order to mimic a coordinate system with origin in
	the top left corner.

	Category: workaround
	Define: VEGA_BACKENDS_OPENGL_FLIPY
	Depends on: nothing
	Enabled for: none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_VEGA_BACKENDS_BLOCKLIST_SHIPPED_FOLDER	wonko

	The folder where blocklist files shipped as part of the package
	are to be found. One of OPFILE_*_FOLDER values.

	Category: setting
	Define: VEGA_BACKENDS_BLOCKLIST_SHIPPED_FOLDER
	Value: OPFILE_RESOURCES_FOLDER
	Depends on: nothing
	Enabled for: none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_VEGA_BACKENDS_BLOCKLIST_FETCHED_FOLDER	wonko

	The folder where blocklist files fetched from the auto-update
	server are to be stored. One of OPFILE_*_FOLDER values.

	Category: setting
	Define: VEGA_BACKENDS_BLOCKLIST_FETCHED_FOLDER
	Value: OPFILE_HOME_FOLDER
	Depends on: nothing
	Enabled for: none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_VEGA_BACKENDS_BLOCKLIST_FETCH			wonko

	Enable automatic fetching of updated blocklist files by Core. If
	disabled, the platform is responsible for updating the file and
	placing it in the folder defined above.

	Category: setting
	Define: VEGA_BACKENDS_BLOCKLIST_FETCH
	Depends on: VEGA_BACKENDS_USE_BLOCKLIST
	Enabled for: desktop, smartphone, tv, minimal
	Disabled for: none

TWEAK_VEGA_BACKENDS_ENABLE_PERF_EVENTS				emoller

	If enabled opera.beginPerfEvent(string) and opera.endPerfEvent()
	are added and enables you to hierarchically bracket javascript code
	causing rendercalls with a specific user event name. User events are
	visible in PIX when running with one of the DX backends and in
	GDebugger when running with the openGL backend. There's also a simpler
	opera.setPerfMarker(string) which just insers a marker in the stream.
	All methods are also available as VEGA3DDevice::BeginPerfEvent() etc.

	Category: setting
	Define: VEGA_ENABLE_PERF_EVENTS
	Depends on: TWEAK_VEGA_3D_HARDWARE_SUPPORT, FEATURE_VEGA_OPPAINTER
	Enabled for: none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_VEGA_BACKENDS_GL_QUIRKS_DONT_DETACH_SHADERS_WORKAROUND      jadahl

	On certain devices using the Tegra GPU there are bugs caused by
	detaching shaders too early (for the driver). This workaround delays
	the removal of the shaders, causing a temporary higher memory usage.

	See ANDMO-2874.

	Category: workaround
	Define: VEGA_BACKENDS_GL_QUIRKS_DONT_DETACH_SHADERS_WORKAROUND
	Enabled for: none
	Disabled for: desktop, smartphone, tv, minimal, mini
	Depends on: TWEAK_VEGA_BACKENDS_USE_BLOCKLIST, API_VEGA_BACKENDS_OPENGL
