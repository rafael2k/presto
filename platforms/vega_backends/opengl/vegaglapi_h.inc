/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
** Auto-generated by scripts/generate_api.py from glapi.txt.
** DO NOT EDIT THIS FILE MANUALLY.
** To update, run the script mentioned above.
**
** Copyright Opera Software ASA. All rights reserved.
** This file is part of the Opera web browser. It may not be distributed
** under any circumstances.
*/

#ifdef OPENGL_REGISTRY

# ifdef VEGA_GL_DEBUG_CONTEXT
typedef void (VEGA_GL_API_ENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);
# endif // VEGA_GL_DEBUG_CONTEXT

class VEGAGlDevice;

class VEGAGlAPI
{
public:
# ifndef VEGA_OPENGLES
	OP_STATUS Init(VEGAGlDevice * dev);

	typedef void (VEGA_GL_API_ENTRY * BlendFunc_t) (GLenum sfactor, GLenum dfactor);
	BlendFunc_t m_BlendFunc;

	typedef void (VEGA_GL_API_ENTRY * Clear_t) (GLbitfield mask);
	Clear_t m_Clear;

	typedef void (VEGA_GL_API_ENTRY * ClearColor_t) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	ClearColor_t m_ClearColor;

	typedef void (VEGA_GL_API_ENTRY * ClearDepth_t) (GLclampd depth);
	ClearDepth_t m_ClearDepth;

	typedef void (VEGA_GL_API_ENTRY * ClearStencil_t) (GLint s);
	ClearStencil_t m_ClearStencil;

	typedef void (VEGA_GL_API_ENTRY * ColorMask_t) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	ColorMask_t m_ColorMask;

	typedef void (VEGA_GL_API_ENTRY * CullFace_t) (GLenum mode);
	CullFace_t m_CullFace;

	typedef void (VEGA_GL_API_ENTRY * DepthFunc_t) (GLenum func);
	DepthFunc_t m_DepthFunc;

	typedef void (VEGA_GL_API_ENTRY * DepthMask_t) (GLboolean flag);
	DepthMask_t m_DepthMask;

	typedef void (VEGA_GL_API_ENTRY * DepthRange_t) (GLclampd near_val, GLclampd far_val);
	DepthRange_t m_DepthRange;

	typedef void (VEGA_GL_API_ENTRY * Disable_t) (GLenum cap);
	Disable_t m_Disable;

	typedef void (VEGA_GL_API_ENTRY * Enable_t) (GLenum cap);
	Enable_t m_Enable;

	typedef void (VEGA_GL_API_ENTRY * Finish_t) ();
	Finish_t m_Finish;

	typedef void (VEGA_GL_API_ENTRY * Flush_t) ();
	Flush_t m_Flush;

	typedef void (VEGA_GL_API_ENTRY * FrontFace_t) (GLenum mode);
	FrontFace_t m_FrontFace;

	typedef GLenum (VEGA_GL_API_ENTRY * GetError_t) ();
	GetError_t m_GetError;

	typedef void (VEGA_GL_API_ENTRY * GetFloatv_t) (GLenum pname, GLfloat * params);
	GetFloatv_t m_GetFloatv;

	typedef void (VEGA_GL_API_ENTRY * GetIntegerv_t) (GLenum pname, GLint * params);
	GetIntegerv_t m_GetIntegerv;

	typedef const GLubyte * (VEGA_GL_API_ENTRY * GetString_t) (GLenum name);
	GetString_t m_GetString;

	typedef void (VEGA_GL_API_ENTRY * Hint_t) (GLenum target, GLenum mode);
	Hint_t m_Hint;

	typedef void (VEGA_GL_API_ENTRY * PixelStorei_t) (GLenum pname, GLint param);
	PixelStorei_t m_PixelStorei;

	typedef void (VEGA_GL_API_ENTRY * ReadPixels_t) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * pixels);
	ReadPixels_t m_ReadPixels;

	typedef void (VEGA_GL_API_ENTRY * Scissor_t) (GLint x, GLint y, GLsizei width, GLsizei height);
	Scissor_t m_Scissor;

	typedef void (VEGA_GL_API_ENTRY * StencilFunc_t) (GLenum func, GLint ref, GLuint mask);
	StencilFunc_t m_StencilFunc;

	typedef void (VEGA_GL_API_ENTRY * StencilMask_t) (GLuint mask);
	StencilMask_t m_StencilMask;

	typedef void (VEGA_GL_API_ENTRY * StencilOp_t) (GLenum fail, GLenum zfail, GLenum zpass);
	StencilOp_t m_StencilOp;

	typedef void (VEGA_GL_API_ENTRY * GetTexParameteriv_t) (GLenum target, GLenum pname, GLint * params);
	GetTexParameteriv_t m_GetTexParameteriv;

	typedef void (VEGA_GL_API_ENTRY * TexParameteri_t) (GLenum target, GLenum pname, GLint param);
	TexParameteri_t m_TexParameteri;

	typedef void (VEGA_GL_API_ENTRY * Viewport_t) (GLint x, GLint y, GLsizei width, GLsizei height);
	Viewport_t m_Viewport;

	typedef void (VEGA_GL_API_ENTRY * BindTexture_t) (GLenum target, GLuint texture);
	BindTexture_t m_BindTexture;

	typedef void (VEGA_GL_API_ENTRY * CopyTexSubImage2D_t) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	CopyTexSubImage2D_t m_CopyTexSubImage2D;

	typedef void (VEGA_GL_API_ENTRY * DeleteTextures_t) (GLsizei n, const GLuint * textures);
	DeleteTextures_t m_DeleteTextures;

	typedef void (VEGA_GL_API_ENTRY * DrawArrays_t) (GLenum mode, GLint first, GLsizei count);
	DrawArrays_t m_DrawArrays;

	typedef void (VEGA_GL_API_ENTRY * DrawElements_t) (GLenum mode, GLsizei count, GLenum type, const GLvoid * indices);
	DrawElements_t m_DrawElements;

	typedef void (VEGA_GL_API_ENTRY * GenTextures_t) (GLsizei n, GLuint * textures);
	GenTextures_t m_GenTextures;

	typedef void (VEGA_GL_API_ENTRY * PolygonOffset_t) (GLfloat factor, GLfloat units);
	PolygonOffset_t m_PolygonOffset;

	typedef void (VEGA_GL_API_ENTRY * TexImage2D_t) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
	TexImage2D_t m_TexImage2D;

	typedef void (VEGA_GL_API_ENTRY * TexSubImage2D_t) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
	TexSubImage2D_t m_TexSubImage2D;

	typedef void (VEGA_GL_API_ENTRY * BlendColor_t) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	BlendColor_t m_BlendColor;

	typedef void (VEGA_GL_API_ENTRY * BlendEquation_t) (GLenum mode);
	BlendEquation_t m_BlendEquation;

	typedef void (VEGA_GL_API_ENTRY * ActiveTexture_t) (GLenum texture);
	ActiveTexture_t m_ActiveTexture;

	typedef void (VEGA_GL_API_ENTRY * BlendFuncSeparate_t) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	BlendFuncSeparate_t m_BlendFuncSeparate;

	typedef void (VEGA_GL_API_ENTRY * BindBuffer_t) (GLenum target, GLuint buffer);
	BindBuffer_t m_BindBuffer;

	typedef void (VEGA_GL_API_ENTRY * BufferData_t) (GLenum target, GLsizeiptr size, const GLvoid * data, GLenum usage);
	BufferData_t m_BufferData;

	typedef void (VEGA_GL_API_ENTRY * BufferSubData_t) (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid * data);
	BufferSubData_t m_BufferSubData;

	typedef void (VEGA_GL_API_ENTRY * DeleteBuffers_t) (GLsizei n, const GLuint * buffers);
	DeleteBuffers_t m_DeleteBuffers;

	typedef void (VEGA_GL_API_ENTRY * GenBuffers_t) (GLsizei n, GLuint * buffers);
	GenBuffers_t m_GenBuffers;

	typedef void (VEGA_GL_API_ENTRY * AttachShader_t) (GLuint program, GLuint shader);
	AttachShader_t m_AttachShader;

	typedef void (VEGA_GL_API_ENTRY * BindAttribLocation_t) (GLuint program, GLuint index, const GLchar * name);
	BindAttribLocation_t m_BindAttribLocation;

	typedef void (VEGA_GL_API_ENTRY * BlendEquationSeparate_t) (GLenum modeRGB, GLenum modeAlpha);
	BlendEquationSeparate_t m_BlendEquationSeparate;

	typedef void (VEGA_GL_API_ENTRY * CompileShader_t) (GLuint shader);
	CompileShader_t m_CompileShader;

	typedef GLuint (VEGA_GL_API_ENTRY * CreateProgram_t) ();
	CreateProgram_t m_CreateProgram;

	typedef GLuint (VEGA_GL_API_ENTRY * CreateShader_t) (GLenum type);
	CreateShader_t m_CreateShader;

	typedef void (VEGA_GL_API_ENTRY * DeleteProgram_t) (GLuint program);
	DeleteProgram_t m_DeleteProgram;

	typedef void (VEGA_GL_API_ENTRY * DeleteShader_t) (GLuint shader);
	DeleteShader_t m_DeleteShader;

	typedef void (VEGA_GL_API_ENTRY * DetachShader_t) (GLuint program, GLuint shader);
	DetachShader_t m_DetachShader;

	typedef void (VEGA_GL_API_ENTRY * DisableVertexAttribArray_t) (GLuint index);
	DisableVertexAttribArray_t m_DisableVertexAttribArray;

	typedef void (VEGA_GL_API_ENTRY * EnableVertexAttribArray_t) (GLuint index);
	EnableVertexAttribArray_t m_EnableVertexAttribArray;

	typedef void (VEGA_GL_API_ENTRY * GetActiveAttrib_t) (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
	GetActiveAttrib_t m_GetActiveAttrib;

	typedef void (VEGA_GL_API_ENTRY * GetActiveUniform_t) (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
	GetActiveUniform_t m_GetActiveUniform;

	typedef GLint (VEGA_GL_API_ENTRY * GetAttribLocation_t) (GLuint program, const GLchar * name);
	GetAttribLocation_t m_GetAttribLocation;

	typedef void (VEGA_GL_API_ENTRY * GetProgramInfoLog_t) (GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
	GetProgramInfoLog_t m_GetProgramInfoLog;

	typedef void (VEGA_GL_API_ENTRY * GetProgramiv_t) (GLuint program, GLenum pname, GLint * params);
	GetProgramiv_t m_GetProgramiv;

	typedef void (VEGA_GL_API_ENTRY * GetShaderInfoLog_t) (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
	GetShaderInfoLog_t m_GetShaderInfoLog;

	typedef void (VEGA_GL_API_ENTRY * GetShaderiv_t) (GLuint shader, GLenum pname, GLint * params);
	GetShaderiv_t m_GetShaderiv;

	typedef GLint (VEGA_GL_API_ENTRY * GetUniformLocation_t) (GLuint program, const GLchar * name);
	GetUniformLocation_t m_GetUniformLocation;

	typedef void (VEGA_GL_API_ENTRY * GetUniformfv_t) (GLuint program, GLint location, GLfloat * params);
	GetUniformfv_t m_GetUniformfv;

	typedef void (VEGA_GL_API_ENTRY * GetUniformiv_t) (GLuint program, GLint location, GLint * params);
	GetUniformiv_t m_GetUniformiv;

	typedef void (VEGA_GL_API_ENTRY * LinkProgram_t) (GLuint program);
	LinkProgram_t m_LinkProgram;

	typedef void (VEGA_GL_API_ENTRY * ShaderSource_t) (GLuint shader, GLsizei count, const GLchar* * string, const GLint * length);
	ShaderSource_t m_ShaderSource;

	typedef void (VEGA_GL_API_ENTRY * StencilFuncSeparate_t) (GLenum face, GLenum func, GLint ref, GLuint mask);
	StencilFuncSeparate_t m_StencilFuncSeparate;

	typedef void (VEGA_GL_API_ENTRY * StencilOpSeparate_t) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
	StencilOpSeparate_t m_StencilOpSeparate;

	typedef void (VEGA_GL_API_ENTRY * Uniform1f_t) (GLint location, GLfloat v0);
	Uniform1f_t m_Uniform1f;

	typedef void (VEGA_GL_API_ENTRY * Uniform1fv_t) (GLint location, GLsizei count, const GLfloat * value);
	Uniform1fv_t m_Uniform1fv;

	typedef void (VEGA_GL_API_ENTRY * Uniform1i_t) (GLint location, GLint v0);
	Uniform1i_t m_Uniform1i;

	typedef void (VEGA_GL_API_ENTRY * Uniform1iv_t) (GLint location, GLsizei count, const GLint * value);
	Uniform1iv_t m_Uniform1iv;

	typedef void (VEGA_GL_API_ENTRY * Uniform2f_t) (GLint location, GLfloat v0, GLfloat v1);
	Uniform2f_t m_Uniform2f;

	typedef void (VEGA_GL_API_ENTRY * Uniform2fv_t) (GLint location, GLsizei count, const GLfloat * value);
	Uniform2fv_t m_Uniform2fv;

	typedef void (VEGA_GL_API_ENTRY * Uniform2i_t) (GLint location, GLint v0, GLint v1);
	Uniform2i_t m_Uniform2i;

	typedef void (VEGA_GL_API_ENTRY * Uniform2iv_t) (GLint location, GLsizei count, const GLint * value);
	Uniform2iv_t m_Uniform2iv;

	typedef void (VEGA_GL_API_ENTRY * Uniform3f_t) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	Uniform3f_t m_Uniform3f;

	typedef void (VEGA_GL_API_ENTRY * Uniform3fv_t) (GLint location, GLsizei count, const GLfloat * value);
	Uniform3fv_t m_Uniform3fv;

	typedef void (VEGA_GL_API_ENTRY * Uniform3i_t) (GLint location, GLint v0, GLint v1, GLint v2);
	Uniform3i_t m_Uniform3i;

	typedef void (VEGA_GL_API_ENTRY * Uniform3iv_t) (GLint location, GLsizei count, const GLint * value);
	Uniform3iv_t m_Uniform3iv;

	typedef void (VEGA_GL_API_ENTRY * Uniform4f_t) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	Uniform4f_t m_Uniform4f;

	typedef void (VEGA_GL_API_ENTRY * Uniform4fv_t) (GLint location, GLsizei count, const GLfloat * value);
	Uniform4fv_t m_Uniform4fv;

	typedef void (VEGA_GL_API_ENTRY * Uniform4i_t) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	Uniform4i_t m_Uniform4i;

	typedef void (VEGA_GL_API_ENTRY * Uniform4iv_t) (GLint location, GLsizei count, const GLint * value);
	Uniform4iv_t m_Uniform4iv;

	typedef void (VEGA_GL_API_ENTRY * UniformMatrix2fv_t) (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	UniformMatrix2fv_t m_UniformMatrix2fv;

	typedef void (VEGA_GL_API_ENTRY * UniformMatrix3fv_t) (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	UniformMatrix3fv_t m_UniformMatrix3fv;

	typedef void (VEGA_GL_API_ENTRY * UniformMatrix4fv_t) (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	UniformMatrix4fv_t m_UniformMatrix4fv;

	typedef void (VEGA_GL_API_ENTRY * UseProgram_t) (GLuint program);
	UseProgram_t m_UseProgram;

	typedef void (VEGA_GL_API_ENTRY * ValidateProgram_t) (GLuint program);
	ValidateProgram_t m_ValidateProgram;

	typedef void (VEGA_GL_API_ENTRY * VertexAttrib1f_t) (GLuint index, GLfloat x);
	VertexAttrib1f_t m_VertexAttrib1f;

	typedef void (VEGA_GL_API_ENTRY * VertexAttrib1fv_t) (GLuint index, const GLfloat * v);
	VertexAttrib1fv_t m_VertexAttrib1fv;

	typedef void (VEGA_GL_API_ENTRY * VertexAttrib2f_t) (GLuint index, GLfloat x, GLfloat y);
	VertexAttrib2f_t m_VertexAttrib2f;

	typedef void (VEGA_GL_API_ENTRY * VertexAttrib2fv_t) (GLuint index, const GLfloat * v);
	VertexAttrib2fv_t m_VertexAttrib2fv;

	typedef void (VEGA_GL_API_ENTRY * VertexAttrib3f_t) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
	VertexAttrib3f_t m_VertexAttrib3f;

	typedef void (VEGA_GL_API_ENTRY * VertexAttrib3fv_t) (GLuint index, const GLfloat * v);
	VertexAttrib3fv_t m_VertexAttrib3fv;

	typedef void (VEGA_GL_API_ENTRY * VertexAttrib4f_t) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	VertexAttrib4f_t m_VertexAttrib4f;

	typedef void (VEGA_GL_API_ENTRY * VertexAttrib4fv_t) (GLuint index, const GLfloat * v);
	VertexAttrib4fv_t m_VertexAttrib4fv;

	typedef void (VEGA_GL_API_ENTRY * VertexAttribPointer_t) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer);
	VertexAttribPointer_t m_VertexAttribPointer;

	typedef void (VEGA_GL_API_ENTRY * BindFramebuffer_t) (GLenum target, GLuint framebuffer);
	BindFramebuffer_t m_BindFramebuffer;

	typedef void (VEGA_GL_API_ENTRY * BindRenderbuffer_t) (GLenum target, GLuint renderbuffer);
	BindRenderbuffer_t m_BindRenderbuffer;

	typedef GLenum (VEGA_GL_API_ENTRY * CheckFramebufferStatus_t) (GLenum target);
	CheckFramebufferStatus_t m_CheckFramebufferStatus;

	typedef void (VEGA_GL_API_ENTRY * DeleteFramebuffers_t) (GLsizei n, const GLuint * framebuffers);
	DeleteFramebuffers_t m_DeleteFramebuffers;

	typedef void (VEGA_GL_API_ENTRY * DeleteRenderbuffers_t) (GLsizei n, const GLuint * renderbuffers);
	DeleteRenderbuffers_t m_DeleteRenderbuffers;

	typedef void (VEGA_GL_API_ENTRY * FramebufferRenderbuffer_t) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	FramebufferRenderbuffer_t m_FramebufferRenderbuffer;

	typedef void (VEGA_GL_API_ENTRY * FramebufferTexture2D_t) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	FramebufferTexture2D_t m_FramebufferTexture2D;

	typedef void (VEGA_GL_API_ENTRY * GenFramebuffers_t) (GLsizei n, GLuint * framebuffers);
	GenFramebuffers_t m_GenFramebuffers;

	typedef void (VEGA_GL_API_ENTRY * GenRenderbuffers_t) (GLsizei n, GLuint * renderbuffers);
	GenRenderbuffers_t m_GenRenderbuffers;

	typedef void (VEGA_GL_API_ENTRY * GenerateMipmap_t) (GLenum target);
	GenerateMipmap_t m_GenerateMipmap;

	typedef void (VEGA_GL_API_ENTRY * GetRenderbufferParameteriv_t) (GLenum target, GLenum pname, GLint * params);
	GetRenderbufferParameteriv_t m_GetRenderbufferParameteriv;

	typedef void (VEGA_GL_API_ENTRY * RenderbufferStorage_t) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	RenderbufferStorage_t m_RenderbufferStorage;

	typedef void (VEGA_GL_API_ENTRY * BlitFramebuffer_t) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	BlitFramebuffer_t m_BlitFramebuffer;

	typedef void (VEGA_GL_API_ENTRY * RenderbufferStorageMultisample_t) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	RenderbufferStorageMultisample_t m_RenderbufferStorageMultisample;

	typedef GLvoid* (VEGA_GL_API_ENTRY * MapBufferRange_t) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
	MapBufferRange_t m_MapBufferRange;

	typedef GLboolean (VEGA_GL_API_ENTRY * UnmapBuffer_t) (GLenum target);
	UnmapBuffer_t m_UnmapBuffer;

	typedef GLsync (VEGA_GL_API_ENTRY * FenceSync_t) (GLenum condition, GLbitfield flags);
	FenceSync_t m_FenceSync;

	typedef void (VEGA_GL_API_ENTRY * GetSynciv_t) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values);
	GetSynciv_t m_GetSynciv;

	typedef void (VEGA_GL_API_ENTRY * DeleteSync_t) (GLsync sync);
	DeleteSync_t m_DeleteSync;

	typedef void (VEGA_GL_API_ENTRY * BindFragDataLocationIndexed_t) (GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
	BindFragDataLocationIndexed_t m_BindFragDataLocationIndexed;

#  ifdef VEGA_ENABLE_PERF_EVENTS
	typedef void (VEGA_GL_API_ENTRY * StringMarkerGREMEDY_t) (GLsizei len, const GLvoid * string);
	StringMarkerGREMEDY_t m_StringMarkerGREMEDY;
#  endif // VEGA_ENABLE_PERF_EVENTS

#  ifdef VEGA_GL_DEBUG_CONTEXT
	typedef void (VEGA_GL_API_ENTRY * DebugMessageCallbackARB_t) (GLDEBUGPROCARB callback, const GLvoid * userParam);
	DebugMessageCallbackARB_t m_DebugMessageCallbackARB;
#  endif // VEGA_GL_DEBUG_CONTEXT

# endif // !VEGA_OPENGLES

# ifdef VEGA_GL_DEBUG
	static OpString8 FormatGLenum(GLenum value);

	static void debug_BlendFunc(GLenum sfactor, GLenum dfactor);
	static void debug_Clear(GLbitfield mask);
	static void debug_ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
#  ifndef VEGA_OPENGLES
	static void debug_ClearDepth(GLclampd depth);
#  endif // !VEGA_OPENGLES
#  ifdef VEGA_OPENGLES
	static void debug_ClearDepthf(GLclampf depth);
#  endif // VEGA_OPENGLES
	static void debug_ClearStencil(GLint s);
	static void debug_ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	static void debug_CullFace(GLenum mode);
	static void debug_DepthFunc(GLenum func);
	static void debug_DepthMask(GLboolean flag);
#  ifndef VEGA_OPENGLES
	static void debug_DepthRange(GLclampd near_val, GLclampd far_val);
#  endif // !VEGA_OPENGLES
#  ifdef VEGA_OPENGLES
	static void debug_DepthRangef(GLclampf near_val, GLclampf far_val);
#  endif // VEGA_OPENGLES
	static void debug_Disable(GLenum cap);
	static void debug_Enable(GLenum cap);
	static void debug_Finish();
	static void debug_Flush();
	static void debug_FrontFace(GLenum mode);
	static void debug_GetFloatv(GLenum pname, GLfloat * params);
	static void debug_GetIntegerv(GLenum pname, GLint * params);
	static const GLubyte * debug_GetString(GLenum name);
	static void debug_Hint(GLenum target, GLenum mode);
	static void debug_PixelStorei(GLenum pname, GLint param);
	static void debug_ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * pixels);
	static void debug_Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
	static void debug_StencilFunc(GLenum func, GLint ref, GLuint mask);
	static void debug_StencilMask(GLuint mask);
	static void debug_StencilOp(GLenum fail, GLenum zfail, GLenum zpass);
	static void debug_GetTexParameteriv(GLenum target, GLenum pname, GLint * params);
	static void debug_TexParameteri(GLenum target, GLenum pname, GLint param);
	static void debug_Viewport(GLint x, GLint y, GLsizei width, GLsizei height);
	static void debug_BindTexture(GLenum target, GLuint texture);
	static void debug_CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	static void debug_DeleteTextures(GLsizei n, const GLuint * textures);
	static void debug_DrawArrays(GLenum mode, GLint first, GLsizei count);
	static void debug_DrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices);
	static void debug_GenTextures(GLsizei n, GLuint * textures);
	static void debug_PolygonOffset(GLfloat factor, GLfloat units);
	static void debug_TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
	static void debug_TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
	static void debug_BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	static void debug_BlendEquation(GLenum mode);
	static void debug_ActiveTexture(GLenum texture);
	static void debug_BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	static void debug_BindBuffer(GLenum target, GLuint buffer);
	static void debug_BufferData(GLenum target, GLsizeiptr size, const GLvoid * data, GLenum usage);
	static void debug_BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid * data);
	static void debug_DeleteBuffers(GLsizei n, const GLuint * buffers);
	static void debug_GenBuffers(GLsizei n, GLuint * buffers);
	static void debug_AttachShader(GLuint program, GLuint shader);
	static void debug_BindAttribLocation(GLuint program, GLuint index, const GLchar * name);
	static void debug_BlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
	static void debug_CompileShader(GLuint shader);
	static GLuint debug_CreateProgram();
	static GLuint debug_CreateShader(GLenum type);
	static void debug_DeleteProgram(GLuint program);
	static void debug_DeleteShader(GLuint shader);
	static void debug_DetachShader(GLuint program, GLuint shader);
	static void debug_DisableVertexAttribArray(GLuint index);
	static void debug_EnableVertexAttribArray(GLuint index);
	static void debug_GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
	static void debug_GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
	static GLint debug_GetAttribLocation(GLuint program, const GLchar * name);
	static void debug_GetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
	static void debug_GetProgramiv(GLuint program, GLenum pname, GLint * params);
	static void debug_GetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
	static void debug_GetShaderiv(GLuint shader, GLenum pname, GLint * params);
	static GLint debug_GetUniformLocation(GLuint program, const GLchar * name);
	static void debug_GetUniformfv(GLuint program, GLint location, GLfloat * params);
	static void debug_GetUniformiv(GLuint program, GLint location, GLint * params);
	static void debug_LinkProgram(GLuint program);
	static void debug_ShaderSource(GLuint shader, GLsizei count, const GLchar* * string, const GLint * length);
	static void debug_StencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
	static void debug_StencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
	static void debug_Uniform1f(GLint location, GLfloat v0);
	static void debug_Uniform1fv(GLint location, GLsizei count, const GLfloat * value);
	static void debug_Uniform1i(GLint location, GLint v0);
	static void debug_Uniform1iv(GLint location, GLsizei count, const GLint * value);
	static void debug_Uniform2f(GLint location, GLfloat v0, GLfloat v1);
	static void debug_Uniform2fv(GLint location, GLsizei count, const GLfloat * value);
	static void debug_Uniform2i(GLint location, GLint v0, GLint v1);
	static void debug_Uniform2iv(GLint location, GLsizei count, const GLint * value);
	static void debug_Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	static void debug_Uniform3fv(GLint location, GLsizei count, const GLfloat * value);
	static void debug_Uniform3i(GLint location, GLint v0, GLint v1, GLint v2);
	static void debug_Uniform3iv(GLint location, GLsizei count, const GLint * value);
	static void debug_Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	static void debug_Uniform4fv(GLint location, GLsizei count, const GLfloat * value);
	static void debug_Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	static void debug_Uniform4iv(GLint location, GLsizei count, const GLint * value);
	static void debug_UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	static void debug_UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	static void debug_UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	static void debug_UseProgram(GLuint program);
	static void debug_ValidateProgram(GLuint program);
	static void debug_VertexAttrib1f(GLuint index, GLfloat x);
	static void debug_VertexAttrib1fv(GLuint index, const GLfloat * v);
	static void debug_VertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
	static void debug_VertexAttrib2fv(GLuint index, const GLfloat * v);
	static void debug_VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
	static void debug_VertexAttrib3fv(GLuint index, const GLfloat * v);
	static void debug_VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	static void debug_VertexAttrib4fv(GLuint index, const GLfloat * v);
	static void debug_VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer);
	static void debug_BindFramebuffer(GLenum target, GLuint framebuffer);
	static void debug_BindRenderbuffer(GLenum target, GLuint renderbuffer);
	static GLenum debug_CheckFramebufferStatus(GLenum target);
	static void debug_DeleteFramebuffers(GLsizei n, const GLuint * framebuffers);
	static void debug_DeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers);
	static void debug_FramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	static void debug_FramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	static void debug_GenFramebuffers(GLsizei n, GLuint * framebuffers);
	static void debug_GenRenderbuffers(GLsizei n, GLuint * renderbuffers);
	static void debug_GenerateMipmap(GLenum target);
	static void debug_GetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params);
	static void debug_RenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
#  ifndef VEGA_OPENGLES
	static void debug_BlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
#  endif // !VEGA_OPENGLES
#  ifndef VEGA_OPENGLES
	static void debug_RenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
#  endif // !VEGA_OPENGLES
#  ifndef VEGA_OPENGLES
	static GLvoid* debug_MapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
#  endif // !VEGA_OPENGLES
#  ifndef VEGA_OPENGLES
	static GLboolean debug_UnmapBuffer(GLenum target);
#  endif // !VEGA_OPENGLES
#  ifndef VEGA_OPENGLES
	static GLsync debug_FenceSync(GLenum condition, GLbitfield flags);
#  endif // !VEGA_OPENGLES
#  ifndef VEGA_OPENGLES
	static void debug_GetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values);
#  endif // !VEGA_OPENGLES
#  ifndef VEGA_OPENGLES
	static void debug_DeleteSync(GLsync sync);
#  endif // !VEGA_OPENGLES
#  ifndef VEGA_OPENGLES
	static void debug_BindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
#  endif // !VEGA_OPENGLES
#  ifndef VEGA_OPENGLES
#   ifdef VEGA_ENABLE_PERF_EVENTS
	static void debug_StringMarkerGREMEDY(GLsizei len, const GLvoid * string);
#   endif // VEGA_ENABLE_PERF_EVENTS
#  endif // !VEGA_OPENGLES
#  ifndef VEGA_OPENGLES
#   ifdef VEGA_GL_DEBUG_CONTEXT
	static void debug_DebugMessageCallbackARB(GLDEBUGPROCARB callback, const GLvoid * userParam);
#   endif // VEGA_GL_DEBUG_CONTEXT
#  endif // !VEGA_OPENGLES
# endif // VEGA_GL_DEBUG
};

# ifndef VEGA_OPENGLES

#  define GL_DEPTH_BUFFER_BIT                                     0x00000100
#  define GL_STENCIL_BUFFER_BIT                                   0x00000400
#  define GL_COLOR_BUFFER_BIT                                     0x00004000

#  define non_gles_GL_MAP_WRITE_BIT                               0x0002
#  define non_gles_GL_MAP_INVALIDATE_RANGE_BIT                    0x0004
#  define non_gles_GL_MAP_UNSYNCHRONIZED_BIT                      0x0020

#  define GL_FALSE                                                0
#  define GL_TRUE                                                 1

#  define GL_POINTS                                               0x0000
#  define GL_LINES                                                0x0001
#  define GL_LINE_LOOP                                            0x0002
#  define GL_LINE_STRIP                                           0x0003
#  define GL_TRIANGLES                                            0x0004
#  define GL_TRIANGLE_STRIP                                       0x0005
#  define GL_TRIANGLE_FAN                                         0x0006

#  define GL_NEVER                                                0x0200
#  define GL_LESS                                                 0x0201
#  define GL_EQUAL                                                0x0202
#  define GL_LEQUAL                                               0x0203
#  define GL_GREATER                                              0x0204
#  define GL_NOTEQUAL                                             0x0205
#  define GL_GEQUAL                                               0x0206
#  define GL_ALWAYS                                               0x0207

#  define GL_ZERO                                                 0
#  define GL_ONE                                                  1
#  define GL_SRC_COLOR                                            0x0300
#  define GL_ONE_MINUS_SRC_COLOR                                  0x0301
#  define GL_SRC_ALPHA                                            0x0302
#  define GL_ONE_MINUS_SRC_ALPHA                                  0x0303
#  define GL_DST_ALPHA                                            0x0304
#  define GL_ONE_MINUS_DST_ALPHA                                  0x0305

#  define GL_DST_COLOR                                            0x0306
#  define GL_ONE_MINUS_DST_COLOR                                  0x0307
#  define GL_SRC_ALPHA_SATURATE                                   0x0308

#  define GL_NONE                                                 0
#  define GL_FRONT                                                0x0404
#  define GL_BACK                                                 0x0405
#  define GL_FRONT_AND_BACK                                       0x0408

#  define GL_NO_ERROR                                             0
#  define GL_INVALID_ENUM                                         0x0500
#  define GL_INVALID_VALUE                                        0x0501
#  define GL_INVALID_OPERATION                                    0x0502
#  define GL_OUT_OF_MEMORY                                        0x0505

#  define GL_INVALID_FRAMEBUFFER_OPERATION                        0x0506

#  define GL_CW                                                   0x0900
#  define GL_CCW                                                  0x0901

#  define GL_LINE_WIDTH                                           0x0B21
#  define GL_CULL_FACE                                            0x0B44
#  define GL_CULL_FACE_MODE                                       0x0B45
#  define GL_FRONT_FACE                                           0x0B46
#  define GL_DEPTH_RANGE                                          0x0B70
#  define GL_DEPTH_TEST                                           0x0B71
#  define GL_DEPTH_WRITEMASK                                      0x0B72
#  define GL_DEPTH_CLEAR_VALUE                                    0x0B73
#  define GL_DEPTH_FUNC                                           0x0B74
#  define GL_STENCIL_TEST                                         0x0B90
#  define GL_STENCIL_CLEAR_VALUE                                  0x0B91
#  define GL_STENCIL_FUNC                                         0x0B92
#  define GL_STENCIL_VALUE_MASK                                   0x0B93
#  define GL_STENCIL_FAIL                                         0x0B94
#  define GL_STENCIL_PASS_DEPTH_FAIL                              0x0B95
#  define GL_STENCIL_PASS_DEPTH_PASS                              0x0B96
#  define GL_STENCIL_REF                                          0x0B97
#  define GL_STENCIL_WRITEMASK                                    0x0B98
#  define GL_VIEWPORT                                             0x0BA2
#  define GL_DITHER                                               0x0BD0
#  define GL_BLEND                                                0x0BE2
#  define GL_SCISSOR_BOX                                          0x0C10
#  define GL_SCISSOR_TEST                                         0x0C11
#  define GL_COLOR_CLEAR_VALUE                                    0x0C22
#  define GL_COLOR_WRITEMASK                                      0x0C23
#  define GL_UNPACK_ALIGNMENT                                     0x0CF5
#  define GL_PACK_ALIGNMENT                                       0x0D05
#  define GL_MAX_TEXTURE_SIZE                                     0x0D33
#  define GL_MAX_VIEWPORT_DIMS                                    0x0D3A
#  define GL_SUBPIXEL_BITS                                        0x0D50
#  define GL_RED_BITS                                             0x0D52
#  define GL_GREEN_BITS                                           0x0D53
#  define GL_BLUE_BITS                                            0x0D54
#  define GL_ALPHA_BITS                                           0x0D55
#  define GL_DEPTH_BITS                                           0x0D56
#  define GL_STENCIL_BITS                                         0x0D57
#  define GL_TEXTURE_2D                                           0x0DE1
#  define GL_POLYGON_OFFSET_UNITS                                 0x2A00
#  define GL_POLYGON_OFFSET_FILL                                  0x8037
#  define GL_POLYGON_OFFSET_FACTOR                                0x8038
#  define GL_TEXTURE_BINDING_2D                                   0x8069

#  define GL_DONT_CARE                                            0x1100
#  define GL_FASTEST                                              0x1101
#  define GL_NICEST                                               0x1102

#  define GL_BYTE                                                 0x1400
#  define GL_UNSIGNED_BYTE                                        0x1401
#  define GL_SHORT                                                0x1402
#  define GL_UNSIGNED_SHORT                                       0x1403
#  define GL_INT                                                  0x1404
#  define GL_UNSIGNED_INT                                         0x1405
#  define GL_FLOAT                                                0x1406

#  define GL_INVERT                                               0x150A

#  define GL_TEXTURE                                              0x1702

#  define GL_STENCIL_INDEX                                        0x1901
#  define GL_DEPTH_COMPONENT                                      0x1902
#  define GL_ALPHA                                                0x1906
#  define GL_RGB                                                  0x1907
#  define GL_RGBA                                                 0x1908
#  define GL_LUMINANCE                                            0x1909
#  define GL_LUMINANCE_ALPHA                                      0x190A

#  define GL_KEEP                                                 0x1E00
#  define GL_REPLACE                                              0x1E01
#  define GL_INCR                                                 0x1E02
#  define GL_DECR                                                 0x1E03

#  define GL_VENDOR                                               0x1F00
#  define GL_RENDERER                                             0x1F01
#  define GL_VERSION                                              0x1F02
#  define GL_EXTENSIONS                                           0x1F03

#  define GL_NEAREST                                              0x2600
#  define GL_LINEAR                                               0x2601

#  define GL_NEAREST_MIPMAP_NEAREST                               0x2700
#  define GL_LINEAR_MIPMAP_NEAREST                                0x2701
#  define GL_NEAREST_MIPMAP_LINEAR                                0x2702
#  define GL_LINEAR_MIPMAP_LINEAR                                 0x2703

#  define GL_TEXTURE_MAG_FILTER                                   0x2800
#  define GL_TEXTURE_MIN_FILTER                                   0x2801
#  define GL_TEXTURE_WRAP_S                                       0x2802
#  define GL_TEXTURE_WRAP_T                                       0x2803

#  define GL_REPEAT                                               0x2901

#  define GL_RGBA4                                                0x8056
#  define GL_RGB5_A1                                              0x8057

#  define GL_CONSTANT_COLOR                                       0x8001
#  define GL_ONE_MINUS_CONSTANT_COLOR                             0x8002
#  define GL_CONSTANT_ALPHA                                       0x8003
#  define GL_ONE_MINUS_CONSTANT_ALPHA                             0x8004
#  define GL_BLEND_COLOR                                          0x8005

#  define GL_FUNC_ADD                                             0x8006
#  define GL_BLEND_EQUATION                                       0x8009

#  define GL_BLEND_EQUATION_RGB                                   0x8009

#  define GL_FUNC_SUBTRACT                                        0x800A
#  define GL_FUNC_REVERSE_SUBTRACT                                0x800B

#  define GL_UNSIGNED_SHORT_4_4_4_4                               0x8033
#  define GL_UNSIGNED_SHORT_5_5_5_1                               0x8034
#  define GL_UNSIGNED_SHORT_5_6_5                                 0x8363

#  define GL_SAMPLE_ALPHA_TO_COVERAGE                             0x809E
#  define GL_SAMPLE_COVERAGE                                      0x80A0
#  define GL_SAMPLE_BUFFERS                                       0x80A8
#  define GL_SAMPLES                                              0x80A9
#  define GL_SAMPLE_COVERAGE_VALUE                                0x80AA
#  define GL_SAMPLE_COVERAGE_INVERT                               0x80AB

#  define GL_BLEND_DST_RGB                                        0x80C8
#  define GL_BLEND_SRC_RGB                                        0x80C9
#  define GL_BLEND_DST_ALPHA                                      0x80CA
#  define GL_BLEND_SRC_ALPHA                                      0x80CB

#  define non_gles_GL_BGRA                                        0x80E1

#  define GL_CLAMP_TO_EDGE                                        0x812F

#  define GL_GENERATE_MIPMAP_HINT                                 0x8192

#  define GL_DEPTH_COMPONENT16                                    0x81A5
#  define non_gles_GL_DEPTH_COMPONENT24                           0x81A6

#  define non_gles_GL_DEPTH_STENCIL_ATTACHMENT                    0x821A

#  define GL_MIRRORED_REPEAT                                      0x8370

#  define GL_ALIASED_POINT_SIZE_RANGE                             0x846D
#  define GL_ALIASED_LINE_WIDTH_RANGE                             0x846E

#  define GL_TEXTURE0                                             0x84C0
#  define GL_TEXTURE1                                             0x84C1
#  define GL_TEXTURE2                                             0x84C2
#  define GL_TEXTURE3                                             0x84C3
#  define GL_TEXTURE4                                             0x84C4
#  define GL_TEXTURE5                                             0x84C5
#  define GL_TEXTURE6                                             0x84C6
#  define GL_TEXTURE7                                             0x84C7
#  define GL_TEXTURE8                                             0x84C8
#  define GL_TEXTURE9                                             0x84C9
#  define GL_TEXTURE10                                            0x84CA
#  define GL_TEXTURE11                                            0x84CB
#  define GL_TEXTURE12                                            0x84CC
#  define GL_TEXTURE13                                            0x84CD
#  define GL_TEXTURE14                                            0x84CE
#  define GL_TEXTURE15                                            0x84CF
#  define GL_TEXTURE16                                            0x84D0
#  define GL_TEXTURE17                                            0x84D1
#  define GL_TEXTURE18                                            0x84D2
#  define GL_TEXTURE19                                            0x84D3
#  define GL_TEXTURE20                                            0x84D4
#  define GL_TEXTURE21                                            0x84D5
#  define GL_TEXTURE22                                            0x84D6
#  define GL_TEXTURE23                                            0x84D7
#  define GL_TEXTURE24                                            0x84D8
#  define GL_TEXTURE25                                            0x84D9
#  define GL_TEXTURE26                                            0x84DA
#  define GL_TEXTURE27                                            0x84DB
#  define GL_TEXTURE28                                            0x84DC
#  define GL_TEXTURE29                                            0x84DD
#  define GL_TEXTURE30                                            0x84DE
#  define GL_TEXTURE31                                            0x84DF
#  define GL_ACTIVE_TEXTURE                                       0x84E0

#  define GL_MAX_RENDERBUFFER_SIZE                                0x84E8

#  define GL_INCR_WRAP                                            0x8507
#  define GL_DECR_WRAP                                            0x8508

#  define GL_TEXTURE_CUBE_MAP                                     0x8513
#  define GL_TEXTURE_BINDING_CUBE_MAP                             0x8514
#  define GL_TEXTURE_CUBE_MAP_POSITIVE_X                          0x8515
#  define GL_TEXTURE_CUBE_MAP_NEGATIVE_X                          0x8516
#  define GL_TEXTURE_CUBE_MAP_POSITIVE_Y                          0x8517
#  define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y                          0x8518
#  define GL_TEXTURE_CUBE_MAP_POSITIVE_Z                          0x8519
#  define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z                          0x851A
#  define GL_MAX_CUBE_MAP_TEXTURE_SIZE                            0x851C

#  define non_gles_GL_SRC1_ALPHA                                  0x8589

#  define non_gles_GL_VERTEX_PROGRAM_POINT_SIZE                   0x8642

#  define GL_VERTEX_ATTRIB_ARRAY_ENABLED                          0x8622
#  define GL_VERTEX_ATTRIB_ARRAY_SIZE                             0x8623
#  define GL_VERTEX_ATTRIB_ARRAY_STRIDE                           0x8624
#  define GL_VERTEX_ATTRIB_ARRAY_TYPE                             0x8625
#  define GL_CURRENT_VERTEX_ATTRIB                                0x8626
#  define GL_VERTEX_ATTRIB_ARRAY_POINTER                          0x8645

#  define GL_BUFFER_SIZE                                          0x8764
#  define GL_BUFFER_USAGE                                         0x8765

#  define GL_VERTEX_SHADER                                        0x8B31

#  define GL_STENCIL_BACK_FUNC                                    0x8800
#  define GL_STENCIL_BACK_FAIL                                    0x8801
#  define GL_STENCIL_BACK_PASS_DEPTH_FAIL                         0x8802
#  define GL_STENCIL_BACK_PASS_DEPTH_PASS                         0x8803

#  define GL_BLEND_EQUATION_ALPHA                                 0x883D

#  define non_gles_GL_POINT_SPRITE                                0x8861

#  define GL_MAX_VERTEX_ATTRIBS                                   0x8869
#  define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED                       0x886A

#  define GL_MAX_TEXTURE_IMAGE_UNITS                              0x8872

#  define GL_ARRAY_BUFFER                                         0x8892
#  define GL_ELEMENT_ARRAY_BUFFER                                 0x8893
#  define GL_ARRAY_BUFFER_BINDING                                 0x8894
#  define GL_ELEMENT_ARRAY_BUFFER_BINDING                         0x8895
#  define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING                   0x889F

#  define GL_STREAM_DRAW                                          0x88E0
#  define GL_STATIC_DRAW                                          0x88E4
#  define GL_DYNAMIC_DRAW                                         0x88E8

#  define non_gles_GL_DEPTH24_STENCIL8                            0x88F0

#  define non_gles_GL_SRC1_COLOR                                  0x88F9
#  define non_gles_GL_ONE_MINUS_SRC1_COLOR                        0x88FA
#  define non_gles_GL_ONE_MINUS_SRC1_ALPHA                        0x88FB

#  define GL_FRAGMENT_SHADER                                      0x8B30

#  define non_gles_GL_MAX_FRAGMENT_UNIFORM_COMPONENTS             0x8B49
#  define non_gles_GL_MAX_VERTEX_UNIFORM_COMPONENTS               0x8B4A
#  define non_gles_GL_MAX_VARYING_FLOATS                          0x8B4B
#  define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS                       0x8B4C
#  define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS                     0x8B4D
#  define GL_FLOAT_VEC2                                           0x8B50
#  define GL_FLOAT_VEC3                                           0x8B51
#  define GL_FLOAT_VEC4                                           0x8B52
#  define GL_INT_VEC2                                             0x8B53
#  define GL_INT_VEC3                                             0x8B54
#  define GL_INT_VEC4                                             0x8B55
#  define GL_BOOL                                                 0x8B56
#  define GL_BOOL_VEC2                                            0x8B57
#  define GL_BOOL_VEC3                                            0x8B58
#  define GL_BOOL_VEC4                                            0x8B59
#  define GL_FLOAT_MAT2                                           0x8B5A
#  define GL_FLOAT_MAT3                                           0x8B5B
#  define GL_FLOAT_MAT4                                           0x8B5C
#  define GL_SAMPLER_2D                                           0x8B5E
#  define GL_SAMPLER_CUBE                                         0x8B60
#  define GL_DELETE_STATUS                                        0x8B80
#  define GL_COMPILE_STATUS                                       0x8B81
#  define GL_LINK_STATUS                                          0x8B82
#  define GL_VALIDATE_STATUS                                      0x8B83
#  define GL_INFO_LOG_LENGTH                                      0x8B84
#  define GL_ACTIVE_UNIFORMS                                      0x8B86
#  define GL_ACTIVE_UNIFORM_MAX_LENGTH                            0x8B87
#  define GL_SHADER_SOURCE_LENGTH                                 0x8B88
#  define GL_ACTIVE_ATTRIBUTES                                    0x8B89
#  define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH                          0x8B8A
#  define GL_SHADING_LANGUAGE_VERSION                             0x8B8C

#  define GL_FRAMEBUFFER_BINDING                                  0x8CA6
#  define GL_RENDERBUFFER_BINDING                                 0x8CA7

#  define non_gles_GL_DRAW_FRAMEBUFFER                            0x8CA9

#  define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE                   0x8CD0
#  define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME                   0x8CD1
#  define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL                 0x8CD2
#  define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE         0x8CD3
#  define GL_FRAMEBUFFER_COMPLETE                                 0x8CD5
#  define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT                    0x8CD6
#  define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT            0x8CD7
#  define GL_FRAMEBUFFER_UNSUPPORTED                              0x8CDD
#  define GL_COLOR_ATTACHMENT0                                    0x8CE0
#  define GL_DEPTH_ATTACHMENT                                     0x8D00
#  define GL_STENCIL_ATTACHMENT                                   0x8D20
#  define GL_FRAMEBUFFER                                          0x8D40
#  define GL_RENDERBUFFER                                         0x8D41
#  define GL_RENDERBUFFER_WIDTH                                   0x8D42
#  define GL_RENDERBUFFER_HEIGHT                                  0x8D43
#  define GL_RENDERBUFFER_INTERNAL_FORMAT                         0x8D44
#  define GL_STENCIL_INDEX8                                       0x8D48
#  define GL_RENDERBUFFER_RED_SIZE                                0x8D50
#  define GL_RENDERBUFFER_GREEN_SIZE                              0x8D51
#  define GL_RENDERBUFFER_BLUE_SIZE                               0x8D52
#  define GL_RENDERBUFFER_ALPHA_SIZE                              0x8D53
#  define GL_RENDERBUFFER_DEPTH_SIZE                              0x8D54
#  define GL_RENDERBUFFER_STENCIL_SIZE                            0x8D55

#  define non_gles_GL_MAX_SAMPLES                                 0x8D57

#  define non_gles_GL_SYNC_STATUS                                 0x9114
#  define non_gles_GL_SYNC_GPU_COMMANDS_COMPLETE                  0x9117
#  define non_gles_GL_SIGNALED                                    0x9119

# endif // !VEGA_OPENGLES

# define glBlendFunc                    VEGA_GLSYM(BlendFunc)
# define glClear                        VEGA_GLSYM(Clear)
# define glClearColor                   VEGA_GLSYM(ClearColor)
# define glClearDepth                   VEGA_GLSYM(ClearDepth)
# define glClearStencil                 VEGA_GLSYM(ClearStencil)
# define glColorMask                    VEGA_GLSYM(ColorMask)
# define glCullFace                     VEGA_GLSYM(CullFace)
# define glDepthFunc                    VEGA_GLSYM(DepthFunc)
# define glDepthMask                    VEGA_GLSYM(DepthMask)
# define glDepthRange                   VEGA_GLSYM(DepthRange)
# define glDisable                      VEGA_GLSYM(Disable)
# define glEnable                       VEGA_GLSYM(Enable)
# define glFinish                       VEGA_GLSYM(Finish)
# define glFlush                        VEGA_GLSYM(Flush)
# define glFrontFace                    VEGA_GLSYM(FrontFace)
# define glGetError                     VEGA_GLREALSYM(GetError)
# define glGetFloatv                    VEGA_GLSYM(GetFloatv)
# define glGetIntegerv                  VEGA_GLSYM(GetIntegerv)
# define glGetString                    VEGA_GLSYM(GetString)
# define glHint                         VEGA_GLSYM(Hint)
# define glPixelStorei                  VEGA_GLSYM(PixelStorei)
# define glReadPixels                   VEGA_GLSYM(ReadPixels)
# define glScissor                      VEGA_GLSYM(Scissor)
# define glStencilFunc                  VEGA_GLSYM(StencilFunc)
# define glStencilMask                  VEGA_GLSYM(StencilMask)
# define glStencilOp                    VEGA_GLSYM(StencilOp)
# define glGetTexParameteriv            VEGA_GLSYM(GetTexParameteriv)
# define glTexParameteri                VEGA_GLSYM(TexParameteri)
# define glViewport                     VEGA_GLSYM(Viewport)
# define glBindTexture                  VEGA_GLSYM(BindTexture)
# define glCopyTexSubImage2D            VEGA_GLSYM(CopyTexSubImage2D)
# define glDeleteTextures               VEGA_GLSYM(DeleteTextures)
# define glDrawArrays                   VEGA_GLSYM(DrawArrays)
# define glDrawElements                 VEGA_GLSYM(DrawElements)
# define glGenTextures                  VEGA_GLSYM(GenTextures)
# define glPolygonOffset                VEGA_GLSYM(PolygonOffset)
# define glTexImage2D                   VEGA_GLSYM(TexImage2D)
# define glTexSubImage2D                VEGA_GLSYM(TexSubImage2D)
# define glBlendColor                   VEGA_GLSYM(BlendColor)
# define glBlendEquation                VEGA_GLSYM(BlendEquation)
# define glActiveTexture                VEGA_GLSYM(ActiveTexture)
# define glBlendFuncSeparate            VEGA_GLSYM(BlendFuncSeparate)
# define glBindBuffer                   VEGA_GLSYM(BindBuffer)
# define glBufferData                   VEGA_GLSYM(BufferData)
# define glBufferSubData                VEGA_GLSYM(BufferSubData)
# define glDeleteBuffers                VEGA_GLSYM(DeleteBuffers)
# define glGenBuffers                   VEGA_GLSYM(GenBuffers)
# define glAttachShader                 VEGA_GLSYM(AttachShader)
# define glBindAttribLocation           VEGA_GLSYM(BindAttribLocation)
# define glBlendEquationSeparate        VEGA_GLSYM(BlendEquationSeparate)
# define glCompileShader                VEGA_GLSYM(CompileShader)
# define glCreateProgram                VEGA_GLSYM(CreateProgram)
# define glCreateShader                 VEGA_GLSYM(CreateShader)
# define glDeleteProgram                VEGA_GLSYM(DeleteProgram)
# define glDeleteShader                 VEGA_GLSYM(DeleteShader)
# define glDetachShader                 VEGA_GLSYM(DetachShader)
# define glDisableVertexAttribArray     VEGA_GLSYM(DisableVertexAttribArray)
# define glEnableVertexAttribArray      VEGA_GLSYM(EnableVertexAttribArray)
# define glGetActiveAttrib              VEGA_GLSYM(GetActiveAttrib)
# define glGetActiveUniform             VEGA_GLSYM(GetActiveUniform)
# define glGetAttribLocation            VEGA_GLSYM(GetAttribLocation)
# define glGetProgramInfoLog            VEGA_GLSYM(GetProgramInfoLog)
# define glGetProgramiv                 VEGA_GLSYM(GetProgramiv)
# define glGetShaderInfoLog             VEGA_GLSYM(GetShaderInfoLog)
# define glGetShaderiv                  VEGA_GLSYM(GetShaderiv)
# define glGetUniformLocation           VEGA_GLSYM(GetUniformLocation)
# define glGetUniformfv                 VEGA_GLSYM(GetUniformfv)
# define glGetUniformiv                 VEGA_GLSYM(GetUniformiv)
# define glLinkProgram                  VEGA_GLSYM(LinkProgram)
# define glShaderSource                 VEGA_GLSYM(ShaderSource)
# define glStencilFuncSeparate          VEGA_GLSYM(StencilFuncSeparate)
# define glStencilOpSeparate            VEGA_GLSYM(StencilOpSeparate)
# define glUniform1f                    VEGA_GLSYM(Uniform1f)
# define glUniform1fv                   VEGA_GLSYM(Uniform1fv)
# define glUniform1i                    VEGA_GLSYM(Uniform1i)
# define glUniform1iv                   VEGA_GLSYM(Uniform1iv)
# define glUniform2f                    VEGA_GLSYM(Uniform2f)
# define glUniform2fv                   VEGA_GLSYM(Uniform2fv)
# define glUniform2i                    VEGA_GLSYM(Uniform2i)
# define glUniform2iv                   VEGA_GLSYM(Uniform2iv)
# define glUniform3f                    VEGA_GLSYM(Uniform3f)
# define glUniform3fv                   VEGA_GLSYM(Uniform3fv)
# define glUniform3i                    VEGA_GLSYM(Uniform3i)
# define glUniform3iv                   VEGA_GLSYM(Uniform3iv)
# define glUniform4f                    VEGA_GLSYM(Uniform4f)
# define glUniform4fv                   VEGA_GLSYM(Uniform4fv)
# define glUniform4i                    VEGA_GLSYM(Uniform4i)
# define glUniform4iv                   VEGA_GLSYM(Uniform4iv)
# define glUniformMatrix2fv             VEGA_GLSYM(UniformMatrix2fv)
# define glUniformMatrix3fv             VEGA_GLSYM(UniformMatrix3fv)
# define glUniformMatrix4fv             VEGA_GLSYM(UniformMatrix4fv)
# define glUseProgram                   VEGA_GLSYM(UseProgram)
# define glValidateProgram              VEGA_GLSYM(ValidateProgram)
# define glVertexAttrib1f               VEGA_GLSYM(VertexAttrib1f)
# define glVertexAttrib1fv              VEGA_GLSYM(VertexAttrib1fv)
# define glVertexAttrib2f               VEGA_GLSYM(VertexAttrib2f)
# define glVertexAttrib2fv              VEGA_GLSYM(VertexAttrib2fv)
# define glVertexAttrib3f               VEGA_GLSYM(VertexAttrib3f)
# define glVertexAttrib3fv              VEGA_GLSYM(VertexAttrib3fv)
# define glVertexAttrib4f               VEGA_GLSYM(VertexAttrib4f)
# define glVertexAttrib4fv              VEGA_GLSYM(VertexAttrib4fv)
# define glVertexAttribPointer          VEGA_GLSYM(VertexAttribPointer)
# define glBindFramebuffer              VEGA_GLSYM(BindFramebuffer)
# define glBindRenderbuffer             VEGA_GLSYM(BindRenderbuffer)
# define glCheckFramebufferStatus       VEGA_GLSYM(CheckFramebufferStatus)
# define glDeleteFramebuffers           VEGA_GLSYM(DeleteFramebuffers)
# define glDeleteRenderbuffers          VEGA_GLSYM(DeleteRenderbuffers)
# define glFramebufferRenderbuffer      VEGA_GLSYM(FramebufferRenderbuffer)
# define glFramebufferTexture2D         VEGA_GLSYM(FramebufferTexture2D)
# define glGenFramebuffers              VEGA_GLSYM(GenFramebuffers)
# define glGenRenderbuffers             VEGA_GLSYM(GenRenderbuffers)
# define glGenerateMipmap               VEGA_GLSYM(GenerateMipmap)
# define glGetRenderbufferParameteriv   VEGA_GLSYM(GetRenderbufferParameteriv)
# define glRenderbufferStorage          VEGA_GLSYM(RenderbufferStorage)
# define glBlitFramebuffer              VEGA_GLSYM(BlitFramebuffer)
# define glRenderbufferStorageMultisample VEGA_GLSYM(RenderbufferStorageMultisample)
# define glMapBufferRange               VEGA_GLSYM(MapBufferRange)
# define glUnmapBuffer                  VEGA_GLSYM(UnmapBuffer)
# define glFenceSync                    VEGA_GLSYM(FenceSync)
# define glGetSynciv                    VEGA_GLSYM(GetSynciv)
# define glDeleteSync                   VEGA_GLSYM(DeleteSync)
# define glBindFragDataLocationIndexed  VEGA_GLSYM(BindFragDataLocationIndexed)
# ifdef VEGA_ENABLE_PERF_EVENTS
#  define glStringMarkerGREMEDY          VEGA_GLSYM(StringMarkerGREMEDY)
# endif // VEGA_ENABLE_PERF_EVENTS
# ifdef VEGA_GL_DEBUG_CONTEXT
#  define glDebugMessageCallbackARB      VEGA_GLSYM(DebugMessageCallbackARB)
# endif // VEGA_GL_DEBUG_CONTEXT

#endif // OPENGL_REGISTRY
