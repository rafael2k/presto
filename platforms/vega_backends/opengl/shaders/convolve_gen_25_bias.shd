uniform sampler2D src;

uniform vec4 coeffs[25]; /* [offset.x, offset.y, coeff, unused] */

uniform float divisor;
uniform float bias;

uniform bool preserve_alpha;

varying vec2 vTexCoord0;

vec4 unpremultiply(vec4 v)
{
  return v.a <= 0.0 ? v : vec4(v.rgb / v.a, v.a);
}

void main()
{
  vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);

  for (int i = 0; i < 25; ++i)
  {
    sum += texture2D_wrap(src, vTexCoord0 + coeffs[i].st) * coeffs[i].p;
  }

  vec4 result = sum / divisor + bias;

  if (preserve_alpha)
  {
    vec4 orig = texture2D_wrap(src, vTexCoord0);

    result = unpremultiply(result);
    result = vec4(result.rgb * orig.a, orig.a);
  }

  gl_FragColor = clamp(result, 0.0, 1.0);
}
