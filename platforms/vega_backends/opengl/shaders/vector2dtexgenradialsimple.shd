#ifdef GL_ES
precision mediump float;
#endif

uniform sampler2D src;
uniform sampler2D stencilSrc;
uniform sampler2D maskSrc;

uniform bool stencilComponentBased;
uniform bool straightAlpha;
uniform float uSrcY;

uniform vec3 uFocusPoint;  // p0
uniform vec3 uCenterPoint; // p1

varying vec4 vert_color;
varying vec2 vTexCoord0;
varying vec2 vTexCoord2;
varying vec2 vTexCoord3;

const vec3 lumfactors = vec3(0.2125, 0.7154, 0.0721);

void main() {
  // see formula in modules/libvega/src/vegagradient.cpp
  // as r0==0 we can skip many calculations containing the r-value, so we only
  // need to deal with x and y here, as opposed to the general radial shader
  vec2 cd = uCenterPoint.xy - uFocusPoint.xy;
  vec2 pd = vTexCoord0 - uFocusPoint.xy;

  float offset;
  float scale = texture2D(maskSrc, vTexCoord3).a;

  // This shader shouldn't be used if r0 != 0. Result undefined.
  scale *= uFocusPoint.z < 0.001 ? 1.0 : 0.0;

  float rr = uCenterPoint.z*uCenterPoint.z;
  float pdp = dot(pd.xy, pd.xy);

  if (all(equal(uFocusPoint.xy, uCenterPoint.xy)))
  {
    offset = sqrt(pdp/rr);
  }
  else
  {
    float ppc = pd.x*cd.y - pd.y*cd.x;
    float pdc = dot(pd.xy, cd.xy);

    offset = pdp / (pdc + sqrt(rr * pdp - ppc*ppc));
  }

  vec4 stencil = texture2D(stencilSrc, vTexCoord2);
  if (stencilComponentBased)
  {
    float lum = dot(stencil.rgb, lumfactors);
    stencil = vec4(lum);
  }

  // Same as "maskColor = straightAlpha ? 1.0 : scale", without conditional
  float maskColor = max(float(straightAlpha), scale);
  vec4 mask = vec4(maskColor, maskColor, maskColor, scale);

  vec4 col = texture2D(src, vec2(offset, uSrcY)) * stencil * mask * vert_color;

  gl_FragColor = col;
}
