uniform sampler2D src;

/* Light source parameters */
uniform vec3 light_color;
uniform vec3 light_position;
uniform float light_kd;
uniform float light_ks;
uniform float light_specexp;

uniform float surface_scale;

/* Mix factors */
uniform float k1;
uniform float k2;
uniform float k3;
uniform float k4;

uniform vec2 pixel_size; /* (1.0/texture_width, 1.0/texture_height) */

varying vec2 vTexCoord0;

const vec3 eye_vec = vec3(0.0, 0.0, 1.0);

vec3 calc_surface_normal()
{
  // This is not exactly according to spec, but...
  vec2 tc = vTexCoord0 + pixel_size * vec2(-1.0, -1.0);
  vec2 co = pixel_size * vec2(1.0, 0.0); // Column offset
  vec2 ro = pixel_size * vec2(-2.0, 1.0); // Row offset

  // Top row
  float c00 = texture2D(src, tc).a; tc += co;
  float c01 = texture2D(src, tc).a; tc += co;
  float c02 = texture2D(src, tc).a; tc += ro;

  // Middle row
  float c10 = texture2D(src, tc).a; tc += co;
  tc += co;
  float c12 = texture2D(src, tc).a; tc += ro;

  // Bottom row
  float c20 = texture2D(src, tc).a; tc += co;
  float c21 = texture2D(src, tc).a; tc += co;
  float c22 = texture2D(src, tc).a;

  return normalize(vec3(-surface_scale * ((c02 + 2.0 * c12 + c22) - (c00 + 2.0 * c10 + c20)) / 4.0,
			-surface_scale * ((c20 + 2.0 * c21 + c22) - (c00 + 2.0 * c01 + c02)) / 4.0,
			1.0));
}

void main()
{
  float surf_height = texture2D(src, vTexCoord0).a * surface_scale;
  vec3 surf_pos = vec3(vTexCoord0 / pixel_size, surf_height);

  vec3 n = calc_surface_normal();
  vec3 l = normalize(light_position - surf_pos);

  float n_dot_l = max(dot(n, l), 0.0);
  float n_dot_h = max(dot(n, normalize(l + eye_vec)), 0.0);

  vec3 diffuse_color = clamp(light_color * light_kd * n_dot_l, 0.0, 1.0);
  vec4 diffuse = vec4(diffuse_color, 1.0);

  vec3 specular_color = clamp(light_color * light_ks * pow(n_dot_h, light_specexp), 0.0, 1.0);
  float alpha = max(specular_color.r, max(specular_color.g, specular_color.b));
  vec4 specular = vec4(specular_color * alpha, alpha);

  vec4 combined = k1 * diffuse * specular + k2 * diffuse + k3 * specular + k4;

  gl_FragColor = clamp(combined, 0.0, 1.0);
}
