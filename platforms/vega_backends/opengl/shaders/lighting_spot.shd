uniform sampler2D src;

/* Light source parameters */
uniform vec3 light_color;
uniform vec3 light_position;
uniform float light_ks;
uniform float light_kd;
uniform float light_specexp;

/* Spotlight parameters */
uniform vec3 spot_dir;
uniform float spot_falloff;
uniform float spot_coneangle;
uniform float spot_specexp;
uniform bool spot_has_cone;

uniform float surface_scale;

/* Mix factors */
uniform float k1;
uniform float k2;
uniform float k3;
uniform float k4;

uniform vec2 pixel_size; /* (1.0/texture_width, 1.0/texture_height) */

varying vec2 vTexCoord0;

const vec3 eye_vec = vec3(0.0, 0.0, 1.0);

void main()
{
  vec3 surf = (texture2D(src, vTexCoord0).xyz - vec3(0.5, 0.5, 0.0)) * surface_scale;
  vec3 surf_pos = vec3(vTexCoord0 / pixel_size, surf.z);

  vec3 n = normalize(vec3(-surf.xy, 1.0));
  vec3 l = normalize(light_position - surf_pos);

  float n_dot_l = max(dot(n, l), 0.0);
  float n_dot_h = max(dot(n, normalize(l + eye_vec)), 0.0);
  float l_dot_s = max(-dot(l, normalize(spot_dir)), 0.0);

  float spot_att = pow(l_dot_s, spot_specexp);
  if (spot_has_cone)
    spot_att = clamp(spot_att * (l_dot_s - spot_falloff) / (spot_coneangle - spot_falloff), 0.0, 1.0);

  vec3 diffuse_color = light_color * spot_att * clamp(light_kd * n_dot_l, 0.0, 1.0);
  vec4 diffuse = vec4(diffuse_color, 1.0);

  vec3 specular_color = light_color * spot_att * clamp(light_ks * pow(n_dot_h, light_specexp), 0.0, 1.0);
  float alpha = max(specular_color.r, max(specular_color.g, specular_color.b));
  vec4 specular = vec4(specular_color * alpha, alpha);

  vec4 combined = k1 * diffuse * specular + k2 * diffuse + k3 * specular + k4;

  gl_FragColor = clamp(combined, 0.0, 1.0);
}
