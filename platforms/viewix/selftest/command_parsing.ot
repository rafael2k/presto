/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "viewix.command_parsing";

require VIEWIX_SUPPORT;

include "platforms/viewix/FileHandlerManager.h";
include "platforms/viewix/src/FileHandlerManagerUtilities.h";

language C++;

table clean_command_samples (const uni_char *, const uni_char*, OP_STATUS)
{
	{ UNI_L("/usr/bin/w3m -T text/html '%s'"),       UNI_L("/usr/bin/w3m"),              OpStatus::OK },
	{ UNI_L("kghostview %u -caption '%c' %i %m"),    UNI_L("kghostview"),                OpStatus::OK },
	{ UNI_L("lpr"),                                  UNI_L("lpr"),                       OpStatus::OK },
	{ UNI_L("konqueror %U"),                         UNI_L("konqueror"),                 OpStatus::OK },
	{ UNI_L("kioclient exec"),                       UNI_L("kioclient exec"),            OpStatus::OK },
	{ UNI_L("firefox %u"),                           UNI_L("firefox"),                   OpStatus::OK },
	{ UNI_L("kioclient openURL %u text/html"),       UNI_L("kioclient openURL"),         OpStatus::OK },
	{ UNI_L("opera %u"),                             UNI_L("opera"),                     OpStatus::OK },
	{ UNI_L("emacs"),                                UNI_L("emacs"),                     OpStatus::OK },
	{ UNI_L("mozilla"),                              UNI_L("mozilla"),                   OpStatus::OK },
	{ UNI_L("/usr/bin/w3m -dump -T text/html '%s'"), UNI_L("/usr/bin/w3m"),              OpStatus::OK },
	{ UNI_L("/usr/bin/html2text '%s'"),              UNI_L("/usr/bin/html2text"),        OpStatus::OK },
	{ UNI_L("/usr/bin/sensible-browser '%s'"),       UNI_L("/usr/bin/sensible-browser"), OpStatus::OK },
	{ UNI_L(""),                                     UNI_L(""),                          OpStatus::OK },
}

table parse_command_samples (const uni_char *, OP_STATUS, UINT32)
{
	{ UNI_L("/usr/bin/w3m -T text/html '%s'"),       OpStatus::OK,  2},
	{ UNI_L("kghostview %u -caption '%c' %i %m"),    OpStatus::OK,  5},
	{ UNI_L("lpr"),                                  OpStatus::OK,  1},
	{ UNI_L("konqueror %U"),                         OpStatus::OK,  2},
	{ UNI_L("kioclient exec"),                       OpStatus::OK,  1},
	{ UNI_L("firefox %u"),                           OpStatus::OK,  2},
	{ UNI_L("kioclient openURL %u text/html"),       OpStatus::OK,  3},
	{ UNI_L("opera %u"),                             OpStatus::OK,  2},
	{ UNI_L("emacs"),                                OpStatus::OK,  1},
	{ UNI_L("mozilla"),                              OpStatus::OK,  1},
	{ UNI_L("/usr/bin/w3m -dump -T text/html '%s'"), OpStatus::OK,  3},
	{ UNI_L("/usr/bin/html2text '%s'"),              OpStatus::OK,  2},
	{ UNI_L("/usr/bin/sensible-browser '%s'"),       OpStatus::OK,  2},
	{ UNI_L(""),                                     OpStatus::OK,  1},
}

setup
{
	FileHandlerManager::DeleteManager();
}

exit
{
	FileHandlerManager::DeleteManager();
}

test("Command Parsing")
{
    OP_STATUS status;	

    iterate(app_string, output, retval) from clean_command_samples
    {
		OpString command;
		command.Set(app_string);

		OpString clean_command;

        status = FileHandlerManagerUtilities::GetCleanCommand(command, clean_command);
		verify(status == retval);

		verify(clean_command.Compare(output) == 0);
    }

   iterate(app_string, retval, count) from parse_command_samples
   {
		OpString command;
		command.Set(app_string);

		OpAutoVector<OpString> items;

		status = FileHandlerManagerUtilities::ParseCommand(command, items);

		verify(status == retval);

		verify(items.GetCount() == count);

		OpString items_string;

		for(unsigned int i = 0; i < items.GetCount(); i++)
		{
			items_string.Append(items.Get(i)->CStr());
			items_string.Append(" ");
		}

		items_string.Strip();

		verify(command.Compare(items_string.CStr()) == 0);
   }
}
