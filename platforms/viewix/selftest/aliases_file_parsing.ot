/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "viewix.aliases_file_parsing";

require VIEWIX_SUPPORT;

include "platforms/viewix/src/input_files/AliasesFile.h";
include "platforms/viewix/FileHandlerManager.h";

language C++;

global
{
	OP_STATUS SetupPathString(OpString& str, const char* filename) 
	{
		RETURN_IF_ERROR(g_folder_manager->GetFolderPath(OPFILE_SELFTEST_DATA_FOLDER, str));
		RETURN_IF_ERROR(str.Append("platforms/viewix/selftest/data/"));
		RETURN_IF_ERROR(str.Append(filename));
		
		return OpStatus::OK;
	}
}

setup
{
	FileHandlerManager::DeleteManager();
}

exit
{
	FileHandlerManager::DeleteManager();
}

test("Aliases File Parsing - NULL filename")
{
	AliasesFile alias_file;
	OP_STATUS status = alias_file.Parse(NULL);
	verify(status == OpStatus::ERR);
}

test("Aliases File Parsing - One pass")
{
	int count = FileHandlerManager::GetManager()->GetNumberOfMimeTypes();
	verify(count == 0);

	OpString filename;
	OP_STATUS status = SetupPathString(filename, "aliases");
	verify(status == OpStatus::OK);
	
	AliasesFile alias_file;
	status = alias_file.Parse(filename);
	verify(status == OpStatus::OK);

	int items_left = alias_file.GetItemsLeft();
	verify(items_left == 58); // not sure that is the right number though

	count = FileHandlerManager::GetManager()->GetNumberOfMimeTypes();
	verify(count == 58);

	FileHandlerManager::GetManager()->EmptyStore();
}

test("Aliases File Parsing - Two passes")
{
	int count = FileHandlerManager::GetManager()->GetNumberOfMimeTypes();
	verify(count == 0);

	OpString filename;
	OP_STATUS status = SetupPathString(filename, "aliases");
	verify(status == OpStatus::OK);
	
	// First pass
	{
		AliasesFile alias_file;
		status = alias_file.Parse(filename);
		verify(status == OpStatus::OK);

		int items_left = alias_file.GetItemsLeft();
		verify(items_left == 58);
	}

	count = FileHandlerManager::GetManager()->GetNumberOfMimeTypes();
	verify(count == 58);

	// Second pass
	{
		AliasesFile alias_file;
		status = alias_file.Parse(filename);
		verify(status == OpStatus::OK);

		int items_left = alias_file.GetItemsLeft();
		verify(items_left == 0);
	}

	count = FileHandlerManager::GetManager()->GetNumberOfMimeTypes();
	verify(count == 58);

	FileHandlerManager::GetManager()->EmptyStore();
}
