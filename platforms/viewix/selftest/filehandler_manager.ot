/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "viewix.filehandler_manager";

require VIEWIX_SUPPORT;

include "platforms/viewix/FileHandlerManager.h";

language C++;

// Things that should be tested (bare minimum)

// 	OP_STATUS GetFileHandler
// 	OP_STATUS GetProtocolHandler
// 	OP_STATUS GetFileHandlers
// 	const uni_char * GetFileHandlerName
// 	const uni_char * GetApplicationIcon
// 	OpBitmap* GetApplicationIcon

// 	const uni_char * GetDesktopFilename

// 	OP_STATUS GuessMimeType

// 	const uni_char * GetFileTypeName
// 	OP_STATUS GetFileTypeInfo
// 	const uni_char * GetFileTypeIconPath
// 	OpBitmap* GetFileTypeIcon

// 	OP_STATUS OpenFileFolder
// 	BOOL OpenFileInApplication
// 	BOOL OpenFileInApplication
// 	BOOL ExecuteApplication

// 	BOOL ValidateHandler
// 	BOOL CheckSecurityProblem
// 	void WriteHandlersL

global
{
	void Print(const char* prefix, OpString & output, bool prefix_linebreak = false)
	{
		if(prefix_linebreak)
			printf("\n  ");

		OpString8 tmp;
		tmp.Set(output.CStr());
		printf("%s %s\n  ", prefix, tmp.CStr());
	}	
}

setup
{
	FileHandlerManager::DeleteManager();
}

exit
{
	FileHandlerManager::DeleteManager();
}

test("GetManager")
{
	verify(FileHandlerManager::GetManager());
}

test("GetProtocolHandler (*empty input*)")
{
	OpString uri_string;
	OpString protocol;
	OpString handler;

	OP_STATUS status = FileHandlerManager::GetManager()->GetProtocolHandler(uri_string, protocol, handler);
	verify(OpStatus::IsError(status));
}

test("GetFileHandler (*empty input*)")
{
	OpString filename;
	OpString content_type;
	OpString handler;
	OpString handler_name;

	OP_STATUS status = FileHandlerManager::GetManager()->GetFileHandler(filename, content_type, handler, handler_name);
	verify(OpStatus::IsError(status));
}

test("Platform Itegration Test : GetFileHandler (application/pdf)")
{
	OpString filename;
	filename.Set("filename.pdf");
	OpString content_type;
	content_type.Set("application/pdf");
	OpString handler;
	OpString handler_name;

	OP_STATUS status = FileHandlerManager::GetManager()->GetFileHandler(filename, content_type, handler, handler_name);
	verify(OpStatus::IsSuccess(status));
	verify(handler.HasContent());
	verify(handler_name.HasContent());
	Print("Handler name :", handler_name, true);
	Print("Handler comm :", handler);
}

test("Platform Itegration Test : GetFileHandler (text/plain)")
{
	OpString filename;
	filename.Set("filename.txt");
	OpString content_type;
	content_type.Set("text/plain");
	OpString handler;
	OpString handler_name;

	OP_STATUS status = FileHandlerManager::GetManager()->GetFileHandler(filename, content_type, handler, handler_name);
	verify(OpStatus::IsSuccess(status));
	verify(handler.HasContent());
	verify(handler_name.HasContent());
	Print("Handler name :", handler_name, true);
	Print("Handler comm :", handler);
}

test("Platform Itegration Test : GetFileHandler (text/html)")
{
	OpString filename;
	filename.Set("filename.html");
	OpString content_type;
	content_type.Set("text/html");
	OpString handler;
	OpString handler_name;

	OP_STATUS status = FileHandlerManager::GetManager()->GetFileHandler(filename, content_type, handler, handler_name);
	verify(OpStatus::IsSuccess(status));
	verify(handler.HasContent());
	verify(handler_name.HasContent());
	Print("Handler name :", handler_name, true);
	Print("Handler comm :", handler);
}
