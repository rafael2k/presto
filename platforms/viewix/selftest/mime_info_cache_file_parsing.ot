/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "viewix.mime_info_cache_file_parsing";

require VIEWIX_SUPPORT;

include "platforms/viewix/src/input_files/MimeInfoCacheFile.h";
include "platforms/viewix/FileHandlerManager.h";

language C++;

global
{
	OP_STATUS SetupPathString(OpString& str, const char* filename) 
	{
		RETURN_IF_ERROR(g_folder_manager->GetFolderPath(OPFILE_SELFTEST_DATA_FOLDER, str));
		RETURN_IF_ERROR(str.Append("platforms/viewix/selftest/data/"));
		RETURN_IF_ERROR(str.Append(filename));
		
		return OpStatus::OK;
	}
}

setup
{
	FileHandlerManager::DeleteManager();
}

exit
{
	FileHandlerManager::DeleteManager();
}

test("MimeInfoCache File Parsing - NULL filename")
{
	MimeInfoCacheFile alias_file;
	OP_STATUS status = alias_file.Parse(NULL);

	verify(status == OpStatus::ERR);
}

test("MimeInfoCache File Parsing")
{
	int count = FileHandlerManager::GetManager()->GetNumberOfMimeTypes();
	verify(count == 0);

	OpString filename;
	OP_STATUS status = SetupPathString(filename, "mimeinfo.cache");
	verify(status == OpStatus::OK);
	
	MimeInfoCacheFile alias_file;
	status = alias_file.Parse(filename);
	verify(status == OpStatus::OK);

	count = FileHandlerManager::GetManager()->GetNumberOfMimeTypes();
	verify(count == 317);
}
