/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2008-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "posix.localeutil";
require init;
require POSIX_OK_MISC;

include "platforms/posix/posix_native_util.h";
include if POSIX_OK_SETENV "platforms/posix/posix_module.h"; // for g_env.{Uns,S}et()

global
{
	uni_char *text;
}

// TODO: verify(OpStatus::IsSuccess(X)) -> verify_success(X)

table BooleanStrings (const char*, const char*, bool)
{
	// name, value, meaning
	{ "empty", "", false },
	{ "True", "True", true },
	{ "No", "No", false },
	{ "yES", "yES", true },
	{ "space-no", " no", false },
	{ "space-007", "     -007", true },
	{ "blanks-nO", "  \t\n\f\v  nO", false },
	{ "blanks+42", "  \t\n\f\v  +42", true },
	{ "gibberish", " random gibberish", false },
	{ "true", "true", true },
	{ "eyes", "eyes", false },
	{ "-3", "-3", true },
	{ "why", "why", false },
	{ "+2", "+2", true },
	{ "False", "False", false },
	{ "1&0", "1&0", true },
	{ "x1", "x1", false },
	{ "1", "1", true },
	{ "0", "0", false },
	{ "yesterday", "yesterday", true },
	{ "0 and 1", "0 & 1", false },
	{ "yelp", "yelp", false },
	{ "truncated", "truncated", false },
	{ "False implies True", "False implies True", false },
	{ "True implies False", "True implies False", true },
	{ "ab falso quod libet", "ab falso quod libet", false },
	{ "trUe", "trUe", true },
	{ "unset", (const char*) NULL, false }
}

foreach (name, value, worth) from BooleanStrings
{
	test("AffirmativeEnvVar() plain: " name)
		require POSIX_OK_SETENV;
	{
		const char env[] = "OPERA_POSIX_TEST_ENV_VAR";
		if (value)
			verify(OpStatus::IsSuccess(g_env.Set(env, value)));
		else
			verify(OpStatus::IsSuccess(g_env.Unset(env)));
		bool ans = PosixNativeUtil::AffirmativeEnvVar(env);
		verify(ans == worth);
	}
}

foreach (name, value, worth) from BooleanStrings
{
	test("AffirmativeEnvVar() uni: " name)
		require POSIX_OK_SETENV;
		require POSIX_OK_NATIVE;
	{
		const char env[] = "OPERA_POSIX_TEST_ENV_VAR";
		if (value)
		{
			OpString val;
			verify(OpStatus::IsSuccess(val.Set(value)));
			verify(OpStatus::IsSuccess(g_env.Set(env, val.CStr())));
		}
		else
			verify(OpStatus::IsSuccess(g_env.Unset(env)));
		bool ans = PosixNativeUtil::AffirmativeEnvVar(UNI_L("OPERA_POSIX_TEST_ENV_VAR"));
		verify(ans == worth);
	}
}

table ValueStrings (const char*, const char*)
{
	// name of test, value tested
	{ "empty", "" },
	{ "alphabet", "the quick brown fox jumped over the lazy dogs" },
	// TODO: add some random cruft with high bit set; but how encoded ?
	{ "blanks", "\t\n\v\f " },
	{ "unset", (const char*) NULL }
}

foreach (name, value) from ValueStrings
{
	test("UniGetEnvL() plain: " name)
		require POSIX_OK_SETENV;
	{
		text = 0;
		const char env[] = "OPERA_POSIX_TEST_ENV_VAR";
		if (value)
			verify(OpStatus::IsSuccess(g_env.Set(env, value)));
		else
			verify(OpStatus::IsSuccess(g_env.Unset(env)));

		TRAPD(err, text = PosixNativeUtil::UniGetEnvL(env));
		verify(OpStatus::IsSuccess(err));
		verify(value ? text && uni_strcmp(text, value) == 0 : !text);
	}
	finally
	{
		delete [] text;
	}
}

foreach (name, value) from ValueStrings
{
	test("UniGetEnvL() plain, len: " name)
		require POSIX_OK_SETENV;
	{
		text = 0;
		const char env[] = "OPERA_POSIX_TEST_ENV_VAR";
		if (value)
			verify(OpStatus::IsSuccess(g_env.Set(env, value)));
		else
			verify(OpStatus::IsSuccess(g_env.Unset(env)));

		TRAPD(err, text = PosixNativeUtil::UniGetEnvL(
				  "OPERA_POSIX_TEST_ENV_VAR with some cruft on the end",
				  sizeof(env) - 1));
		verify(OpStatus::IsSuccess(err));
		verify(value ? text && uni_strcmp(text, value) == 0 : !text);
	}
	finally
	{
		delete [] text;
	}
}

foreach (name, value) from ValueStrings
{
	test("UniGetEnv() plain: " name)
		require POSIX_OK_SETENV;
	{
		const char env[] = "OPERA_POSIX_TEST_ENV_VAR";
		if (value)
			verify(OpStatus::IsSuccess(g_env.Set(env, value)));
		else
			verify(OpStatus::IsSuccess(g_env.Unset(env)));

		OpString ans;
		OP_STATUS err = PosixNativeUtil::UniGetEnv(ans, env);
		verify(OpStatus::IsSuccess(err));
		verify(ans.Compare(value) == 0);
	}
}

foreach (name, value) from ValueStrings
{
	test("UniGetEnv() plain, len: " name)
		require POSIX_OK_SETENV;
	{
		const char env[] = "OPERA_POSIX_TEST_ENV_VAR";
		if (value)
			verify(OpStatus::IsSuccess(g_env.Set(env, value)));
		else
			verify(OpStatus::IsSuccess(g_env.Unset(env)));

		OpString ans;
		OP_STATUS err = PosixNativeUtil::UniGetEnv(ans,
				  "OPERA_POSIX_TEST_ENV_VAR with some cruft on the end",
											  sizeof(env) - 1);
		verify(OpStatus::IsSuccess(err));
		verify(ans.Compare(value) == 0);
	}
}

foreach (name, value) from ValueStrings
{
	test("UniGetEnvL() uni: " name)
		require POSIX_OK_SETENV;
		require POSIX_OK_NATIVE;
	{
		text = 0;
		const char env[] = "OPERA_POSIX_TEST_ENV_VAR";
		OpString val;
		if (value)
		{
			verify(OpStatus::IsSuccess(val.Set(value)));
			verify(OpStatus::IsSuccess(g_env.Set(env, val.CStr())));
		}
		else
			verify(OpStatus::IsSuccess(g_env.Unset(env)));

		TRAPD(err, text = PosixNativeUtil::UniGetEnvL(UNI_L("OPERA_POSIX_TEST_ENV_VAR")));
		verify(OpStatus::IsSuccess(err));
		verify(val.Compare(text) == 0);
	}
	finally
	{
		delete [] text;
	}
}

foreach (name, value) from ValueStrings
{
	test("UniGetEnvL() uni, len: " name)
		require POSIX_OK_SETENV;
		require POSIX_OK_NATIVE;
	{
		text = 0;
		const char env[] = "OPERA_POSIX_TEST_ENV_VAR";
		OpString val;
		if (value)
		{
			verify(OpStatus::IsSuccess(val.Set(value)));
			verify(OpStatus::IsSuccess(g_env.Set(env, val.CStr())));
		}
		else
			verify(OpStatus::IsSuccess(g_env.Unset(env)));

		TRAPD(err, text = PosixNativeUtil::UniGetEnvL(
				  UNI_L("OPERA_POSIX_TEST_ENV_VAR with some cruft on the end"),
				  sizeof(env) - 1));
		verify(OpStatus::IsSuccess(err));
		verify(val.Compare(text) == 0);
	}
	finally
	{
		delete [] text;
	}
}

foreach (name, value) from ValueStrings
{
	test("UniGetEnv() uni: " name)
		require POSIX_OK_SETENV;
		require POSIX_OK_NATIVE;
	{
		const char env[] = "OPERA_POSIX_TEST_ENV_VAR";
		OpString val;
		if (value)
		{
			verify(OpStatus::IsSuccess(val.Set(value)));
			verify(OpStatus::IsSuccess(g_env.Set(env, val.CStr())));
		}
		else
			verify(OpStatus::IsSuccess(g_env.Unset(env)));

		OpString ans;
		OP_STATUS err = PosixNativeUtil::UniGetEnv(ans, UNI_L("OPERA_POSIX_TEST_ENV_VAR"));
		verify(OpStatus::IsSuccess(err));
		verify(ans.Compare(value) == 0);
	}
}

foreach (name, value) from ValueStrings
{
	test("UniGetEnv() uni, len: " name)
		require POSIX_OK_SETENV;
		require POSIX_OK_NATIVE;
	{
		const char env[] = "OPERA_POSIX_TEST_ENV_VAR";
		OpString val;
		if (value)
		{
			verify(OpStatus::IsSuccess(val.Set(value)));
			verify(OpStatus::IsSuccess(g_env.Set(env, val.CStr())));
		}
		else
			verify(OpStatus::IsSuccess(g_env.Unset(env)));

		OpString ans;
		OP_STATUS err = PosixNativeUtil::UniGetEnv(ans,
				  UNI_L("OPERA_POSIX_TEST_ENV_VAR with some cruft on the end"),
											  sizeof(env) - 1);
		verify(OpStatus::IsSuccess(err));
		verify(ans.Compare(value) == 0);
	}
}

table SplitData (const char*, char*const*)
{
	{ "initial simple test", { "initial", "simple", "test", NULL } }
	{ "spaces and\ttabs", { "spaces", "and", "tabs", NULL } }
	{ "an\\ escaped character", { "an escaped", "character", NULL } }
	{ "escaping \\(\\ \\) and \\\\", { "escaping", "( )", "and", "\\", NULL } }
	{ "trailing space ", { "trailing", "space", NULL } }
	{ "trailing escaped space \\ ", { "trailing", "escaped", "space", " ", NULL } }
	{ "trailing escape \\", { "trailing", "escape", "", NULL } }
	{ "quote \"one\"", { "quote", "one", NULL } }
	{ "quote \"one two\"", { "quote", "one two", NULL } }
	{ "unterminated \"string ", { "unterminated", "string ", NULL } }
	{ "varying \" quotes ' \"", { "varying", " quotes ' ", NULL } }
	{ "varying \" quotes \\\" \"", { "varying", " quotes \" ", NULL } }
	{ "varying ' quotes \" '", { "varying", " quotes \" ", NULL } }
	{ "varying ' quotes \\\' '", { "varying", " quotes ' ", NULL } }
	{ "escaped \\\" quote ' \\\"", { "escaped", "\"", "quote", " \\\"", NULL } }
	{ "escaped ' same quote \\' '", { "escaped", " same quote ' ", NULL } }
	{ "escaped ' other quote \\\" '", { "escaped", " other quote \\\" ", NULL } }
}

foreach (input, output) from SplitData
{
	test("CommandSplit: " input)
		require POSIX_OK_PROCESS;
	{
		/* Perform the split. */
		PosixNativeUtil::CommandSplit split(input);
		char** out = split.get();
		verify(out != NULL);

		/* Compare components. */
		unsigned int i = 0;
		const char*const ref[] = output;
		while (ref[i] && out[i])
		{
			verify_string(ref[i], out[i]);
			i++;
		}
		verify(ref[i] == out[i]);
	}
}
