/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2009-2012 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "posix.native";
require init;
require POSIX_OK_NATIVE;

include "platforms/posix/posix_native_util.h";

table PlainStrings (const uni_char*, const char*)
{
	// uni_char value, char value; must be equivalent regardless of native encoding
	{ UNI_L(""), "" },
	{ UNI_L("~/."), "~/." },
	{ UNI_L("OK"), "OK" }
	// TODO: add some non-trivial examples.
}

// TODO: more complex tests involving NativeString or buffers, length constraints, etc.

foreach (uni, plain) from PlainStrings
{
	test("ToNative(" plain ") simple")
	{
		OpString8 ascii;
		OP_STATUS err = PosixNativeUtil::ToNative(uni, &ascii);
		verify_success(err);
		verify_string(ascii, plain);
	}
}

foreach (uni, plain) from PlainStrings
{
	test("FromNative(" plain ") simple")
	{
		OpString text;
		OP_STATUS err = PosixNativeUtil::FromNative(plain, &text);
		verify_success(err);
		verify_string(text, uni);
	}
}

table UTF16Strings (const char *, const uni_char*)
{
	// name of test, test string
	{ "DSK-271378.wmv", UNI_L("/& S\xf3-\xb4_.wmv") },
	// From encodings/testsuite/charconv/chartest.cpp:
	{ "Not in Asian", UNI_L("\xE5\xE4\xF6") },
	{ "Not in JIS X 0212", UNI_L("\xA2\xA3\xAB") },
	{ "Tricky Asian", UNI_L("\x3000\xE5\xE4\xF6\xA2\xA3\xAB") },
	{ "Full-width ASCII", UNI_L("\xFF00\xFF21\xFF22\xFF23\xFF5E") },
		// UTF-8
	{ "Outside latin-1", UNI_L("\x0100\x0101") },
	{ "French", UNI_L("Fran\x00E7ois") },
	{ "Three-way", UNI_L("Haba\x1212xbaba") },
	{ "Tail", UNI_L("Fran\x00E7") },
	{ "Outside BMP", UNI_L("\xDBC0\xDC00") },
		// JIS 0208:
	{ "JIS 0208", UNI_L("abc\x30A4xdef") },
	{ "JIS 0201", UNI_L("\xA5\x203E") },
	{ "Verre-JIS", UNI_L("\x30a4\xfffd") },
	{ "Incomplete", UNI_L("\x30a4") },
	{ "Kana-JIS", UNI_L("\x30AB\x30CA") },
	{ "Howcome-JIS", UNI_L("H\xE5kon Wium Lie") },
		// Shift JIS
	{ "Half-kana", UNI_L("\xFF76\xFF85") },
	{ "Ugga", UNI_L("\x304b\x306a\x6f22\x5b57") },
	{ "Mouse", UNI_L("on\xfffdmouseover") },
		// Big5-HKCS
	{ "Big5", UNI_L("ABC\x0100\xD840\xDD0C\x79D4\x9F98\x7881\x7C72\x2460\x2013") },
	{ "HKCS", UNI_L("\x0041\xD840\xDD0C\x00D3\xD864\xDD0D\x0042") },
	{ "Compat", UNI_L("\x515B\x515D\x74E9\x7809\x7BB8\x7C06\x7250") },
		// Big5-HKCS 2004
	{ "PUA", UNI_L("\x31C0\x31CE") },
	{ "Extend", UNI_L("\x43F0\x749D") },
		// EUC-jp
	{ "Verre-jp", UNI_L("\x304b\x306a\x6f22\x5b57") },
	{ "Kana-jp", UNI_L("\xFF76\xFF85") },
	{ "Howcome-jp", UNI_L("H\xE5kon Wium Lie") },
	{ "Bean-soup", UNI_L("\x6C41\x7C89 [\x3057\x308B\x3053] /{Kochk.}/Shiruko/(s\x00FC\x00DF\x65 Bohnensuppe mit Reiskuchen)/") },
	{ "Verre-fix", UNI_L("\x304b\xfffd") },
		// GB 2312
	{ "Verre-cn", UNI_L("\x3000\x606D\x8BF1") },
	{ "Microsoft Euro", UNI_L("\x20AC") },
		// GB 18030
	{ "GB 18030", UNI_L("ABC\x3000\x606D\x8BF1\x0080\x00A5\x00AA\xFFDF\x200F\xD800\xDC00\xDBFF\xDFFD\x0000") },
		// HZ-GB 2312
	{ "This is GB", UNI_L("\x5df1\x6240\x4e0d\x3002xBye.") },
	{ "Bad HZ-GB", UNI_L("\x5df1\x6240\x4e0d\x3002\x0Axyz") },
	{ "Broken HZ-GB", UNI_L("\x5df1\x6240\x4e0d\x3002\x0Axyz") },
		// EUC-kr
	{ "EUC-kr", UNI_L("ABC\xD55C\xAD6D\xC5B4") },
		// EUC-tw
	{ "EUC-tw", UNI_L("ABC\x3000\x9F72") },
	{ "EUC-tw[4]", UNI_L("\x4E42\x92B0") },
		// ISO 2022, CNS
	{ "RFC 1922", UNI_L("\x4EA4\x6362\x4EA4\x63DB") },
	{ "ISO-1022-cn", UNI_L("ABC\x4E42\x9F98PQR\x3000\x9F44.") },
	{ "CNS+GB", UNI_L("\x63DB\x4EA4") },
		// ISO 2022, KR
	{ "ISO-2022-kr", UNI_L("\xAE40\xCE58") },
		// ISO 8859-7, 2003
	{ "ISO-8859-7/2003", UNI_L("\x20AC\x20AF\x037A") },
		// SBCS
	{ "IBM 866", UNI_L("\x0423\x2514\x2534\x252C\x0424\x00A0") },
	{ "windows-sami-2", UNI_L("\x201C\x00C0\x00C1\x00C2\x201D\x00FF") },
	{ "windows-1250", UNI_L("\x201C\x0154\x00C1\x00C2\x201D\x02D9") },
	{ "windows-1251", UNI_L("\x201C\x0410\x0411\x0412\x201D\x044F") },
	{ "windows-1252", UNI_L("\x201C\x00C0\x00C1\x00C2\x201D\x00FF") },
	{ "windows-1253", UNI_L("\x201C\x0390\x0391\x0392\x201D") },
	{ "windows-1254", UNI_L("\x201C\x00C0\x00C1\x00C2\x201D\x00FF") },
	{ "windows-1255", UNI_L("\x201C\x05B0\x05B1\x05B2\x201D") },
	{ "windows-1256", UNI_L("\x201C\x06C1\x0621\x0622\x201D\x06D2") },
	{ "windows-1257", UNI_L("\x201C\x0104\x012E\x0100\x201D\x02D9") },
	{ "windows-1258", UNI_L("\x201C\x00C0\x00C1\x00C2\x201D\x00FF") },
	{ "tcvn", UNI_L("\x1ECE\x1EAE\x1EA6\x1EA8\x00D5\x1ED0") },
	{ "viscii", UNI_L("\x1ED8\x00C0\x00C1\x00C2\x1EE2\x1EEE") },
	{ "koi8-r", UNI_L("\x2320\x044E\x0430\x0431\x25A0\x042A") },
	{ "koi8-u", UNI_L("\x2320\x044E\x0430\x0431\x25A0\x042A") },
	{ "x-vps", UNI_L("\x1EC0\x1EA7\x00C1\x00C2\x1EC2\x1EF3") },
	// finally:
	{ "empty", UNI_L("") }
}

foreach (name, uni) from UTF16Strings
{
	// round-trip and check idempotence
	test ("{From+To}Native(" name ") round-trip")
	{
		OpString8 ascii;
		OP_STATUS err = PosixNativeUtil::ToNative(uni, &ascii);
		if (OpStatus::IsSuccess(err))
		{
			OpString text;
			err = PosixNativeUtil::FromNative(ascii, &text);
			verify_success(err);
			verify_string(text, uni);
		}
		else // not representable in native multi-byte encoding.
		{
			/* Is there something beyond ASCII in the string, to justify not
			 * being representable ? */
			int i = 0;
			while (uni[i] && uni_isascii(uni[i])) i++;
			verify(uni[i]);
			output("unrepresentable ");
		}
	}
}

table NativeStrings (const char*, const char *)
{
	// test string
	// From encodings/testsuite/charconv/chartest.cpp:
		// UTF-8:
	{ "French", "Fran\xC3\xA7ois" },
	{ "Three-way", "Haba\xE1\x88\x92xbaba" },
	{ "Tail", "Fran\xC3\xA7" },
	{ "Outside BMP", "\xF4\x80\x80\x80" },
		// JIS 0208:
	{ "JIS 0208", "abc\x1B$B%$\x1B(Bxdef" },
	{ "Verre-JIS", "Verre: \x1B$B%$\x21\x29\x1B(B" },
	{ "Incomplete", "\x1B$B%$\x1B(B" },
	{ "Kana-JIS", "\x1B$B\x25\x2B\x25\x4A\x1B(B" },
	{ "Howcome-JIS", "H\x1B$(D\x2B\x29\x1B(Bkon Wium Lie" },
		// Shift JIS
	{ "Half-kana", "\xB6\xC5" },
	{ "Ugga", "\x82\xa9\x82\xc8\x8a\xbf\x8e\x9a" },
	{ "Mouse", "on\x3fmouseover" },
		// Big5-HKCS
	{ "Big5", "ABC\x88\x56\x88\x45\xFE\xFE\xF9\xD5\xF9\xD6\xC6\x7E\xC6\xA1\xA1\x56" },
	{ "HKCS", "\x41\x88\x45\x88\x5F\xFE\xFD\x42" },
	{ "Compat", "\xA2\x5A\xA2\x5C\xA2\x60\xCF\xF1\xBA\xE6\xED\xCA\x94\x55" },
		// Big5-HKCS 2004
	{ "PUA", "\x88\x40\x88\x55" },
	{ "Extend", "\x87\x40\x87\x79" },
		// EUC-jp
	{ "Verre-jp", "\xA4\xAB\xA4\xCA\xB4\xC1\xBB\xFA" },
	{ "Howcome-jp", "H\x8F\xAB\xA9kon Wium Lie" },
	{ "Bean-soup", "\xbd\xc1\xca\xb4 [\xa4\xb7\xa4\xeb\xa4\xb3] /{Kochk.}/Shiruko/"
			"(s\x8f\xab\xe4\x8f\xa9\xce\145 Bohnensuppe mit Reiskuchen)/"},
	{ "Verre-fix", "\xa4\xab?" },
		// GB 2312
	{ "Verre-cn", "\xa1\xa1\xb9\xa7\xd3\xd5" },
	{ "Microsoft Euro", "\xA2\xE3" },
		// GB 18030
	{ "GB 18030", "ABC\xa1\xa1\xb9\xa7\xd3\xd5\x81\x30\x81\x30\x81\x30\x84\x36\x81\x30\x84\x39"
			"\x84\x31\xA2\x33\x81\x36\xA5\x31\x90\x30\x81\x30\xE3\x32\x9A\x33" },
		// HZ-GB 2312
	{ "This is GB", "~{<:Ky2;!#~}xBye." },
		// EUC-kr
	{ "EUC-kr", "ABC\xc7\xd1\xb1\xb9\xbe\xee" },
		// EUC-tw
	{ "EUC-tw", "ABC\xA1\xA1\xFD\xA1" },
	{ "EUC-tw[4]", "\x8E\xA2\xA1\xA1\x8E\xAE\xE7\xAA" },
		// ISO 2022, CNS
	{ "RFC 1922", "\x1B\x24\x29\x41\x0E\x3D\x3B\x3B\x3B\x3D\x3B\x1B\x24\x29\x47\x5F\x50\x0F" },
	{ "ISO-1022-cn", "ABC\x1B$*H\x1B\x4E\x21\x21\x1B\x4E\x72\x44PQR\x1B$)A\x0E\x21\x21\x77\x7E\x0F." },
	{ "CNS+GB", "\x1B\x24\x29\x47\x0E\x5F\x50\x47\x28\x0F" },
		// ISO 2022, KR
	{ "ISO-2022-kr", "\x1B\x24\x29\x43\x0E\x31\x68\x44\x21\x0F" },
		// SBCS
	{ "SBCS-a", "\x93\xC0\xC1\xC2\x94\xFF" },
	{ "SBCS-b", "\x93\xC0\xC1\xC2\x94" },
	{ "SBCS-c", "\x93\xC1\xC2\x94" },
	{ "SBCS-d", "\xFE\xE0\xE1\xE2\xFD" },
	{ "SBCS-e", "\xA1\xA2\xA3" },
	// finally:
	{ "empty", "" }
}

foreach (name, plain) from NativeStrings
{
	// round-trip and check idempotence
	test ("{To+From}Native(" name ") round-trip")
	{
		OpString text;
		OP_STATUS err = PosixNativeUtil::FromNative(plain, &text);
		if (OpStatus::IsSuccess(err))
		{
			OpString8 ascii;
			err = PosixNativeUtil::ToNative(text, &ascii);
			verify_success(err);
			verify_string(ascii, plain);
		}
		else // not valid in native multi-byte encoding.
		{
			/* Is there something beyond ASCII in the string, to justify not
			 * being valid ? */
			int i = 0;
			while (plain[i] && uni_isascii(plain[i])) i++;
			verify(plain[i]);
			output("unrepresentable ");
		}
	}
}

