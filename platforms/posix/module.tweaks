# Hey, emacs, please use -*- tab-width: 4; fill-column: 80; -*- thanks.
# Hey, developers - please add new entries in *alphabetic order*.

TWEAK_POSIX_APPEND_BY_HAND_HACK		eddy
	Some implementations of the streams API (i.e. assorted <stdio.h>
	functions with FILE* arguments) fail to properly implement append
	functionality.  (Known cases: allegedly Solaris, bug 200613 /
	DSK-165729, albeit not mentioned in the bug; and uclibc 0.9.29, bug
	MANTLE-954 / ITVSDK-3443.)  This hacks round that by ensuring we seek to
	end of file when needed.

	Note that, aside from writes following reads in append mode, file
	position is not generally specified to be well-behaved on transitions
	between reading and writing; see OpLowLevelFile's class documentation
	for restrictions on what the API caller is allowed to expect.  This hack
	should only be enabled if the native implementation fails to handle
	append mode as specified: if you have other problems with mis-aligned
	file position, the bug is most likely in (so should be fixed in) the
	caller of the file APIs, not in the implementation.

	Define: POSIX_APPEND_BY_HAND_HACK
	Category: workaround
	Depends on: API_POSIX_FILE
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_ASYNC_CANCELLATION		markuso
	On shutdown, use pthread_cancel() and friends to cancel any active thread
	that has not yet finished. This may improve the time to shutdown Opera when
	a long operation (like a host-resolver call) is executing in a thread
	while Opera is terminating. There is some risk that not all memory
	that was allocated on the cancelled thread is freed.

	Define: POSIX_ASYNC_CANCELLATION
	Category: setting
	Depends on: API_POSIX_ASYNC, THREAD_SUPPORT
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_ASYNC_THREADS		eddy
	Configure the maximum number of threads to be used by the asynchronous
	worker code (see src/posix_async.h) if supported.  Must be a
	positive integer.

	Value: 8
	Define: POSIX_ASYNC_THREADS
	Category: setting
	Depends on: API_POSIX_ASYNC, THREAD_SUPPORT
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_BORKED_SOCKET		eddy
	The devices team has seen at least one case (ROCCO-16) of a platform
	whose socket() returns 0 when it should have returned -1; by default,
	the networking code in this module assumes that socket behaves
	correctly, but you can enable this tweak to check against a return of 0
	(stdin), 1 (stdout) or 2 (stderr) from socket().  If that happens, with
	this tweak enabled, an assertion shall trigger and the return shall be
	coerced to -1, with a suitable errno setting if errno is not set.  Note
	that this may imply a file descriptor leak if the blocked return values
	are actually correct.

	Define: POSIX_BORKED_SOCKET_HACK
	Category: workaround
	Depends on: API_POSIX_SOCKET
	Depends on: API_POSIX_UDP_SOCKET
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_CHECK_SWITCH_SEEK		eddy
	In OpLowLevelFile (see bug 309242) there may be problems if a read
	operation is followed by a write operation, or vice versa, without an
	intervening SetFilePos.  Turning on this tweak enables detection of any
	instances of such, by using a member variable to remember what's
	currently allowed and OP_ASSERT()ing that it's consistent with what's
	being done.  This tweak is irrelevant unless you enable assertions !

	Define: CHECK_SEEK_ON_TRANSITION
	Category: workaround
	Depends on: API_DBG_OPASSERT, API_POSIX_FILE
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_CLEARCACHE			eddy
	Enable calling posix_clearcache() when finishing writing an executable 
	memory segment. This is needed on some (notably ARM) devices where 
	instruction and data are cached separately; see 
	http://blogs.arm.com/software-enablement/caches-and-selfmodifying-code/ 
	for further discussion. 

	When enabled, you must define posix_clearcache(void*, size_t), taking 
	the start and size of the written memory segment; for example, on many 
	ARM devices using gcc, 
	#define posix_clearcache(p, n) __clear_cache(p, static_cast<char*>(p)+n) 
	should work.

	Define: POSIX_CLEARCACHE
	Category: workaround
	Depends on: API_POSIX_MEMORY, API_PI_OPMEMORY_EXECUTABLE_SEGMENT
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_DIRLIST_WRAPPABLE		bprzybylski
	Expose the PosixFolderLister factory as PosixModule::CreateRawListener()
	instead of as OpFolderLister::Create(), to support platforms which can't
	always use a simple folder lister.  The platform must implement
	OpFolderLister::Create() for itself.  (For example, Mac Desktop uses
	a dummy folder lister when run inside a sandboxed environment; otherwise
	it uses a PosixFolderLister obtained from CreateRawListener.)

	Define: POSIX_DIRLIST_WRAPPABLE
	Category: workaround
	Depends on: API_POSIX_DIR
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_DNS_GETADDRINFO		eddy
	Selects getaddrinfo() as your underlying DNS implementation.  It is the
	officially correct way to do host lookups, implementing relevant RFCs about
	the order in which to try to access the destination machine.

	Define: POSIX_DNS_GETADDRINFO
	Category: setting,standards
	Depends on: API_POSIX_DNS
	Conflicts with: TWEAK_POSIX_DNS_GETHOSTBYNAME
	Conflicts with: TWEAK_POSIX_DNS_IPNODE
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_DNS_GETHOSTBYNAME		eddy
	Select gethostbyname - or one of its various variants - as underlying
	DNS implementation.  See assorted TWEAK_POSIX_GHBN_* in order to chose
	among them - you almost certainly want to set one of these, since you'll
	get vanilla gethostbyname() without them (it's the only variant POSIX
	specifies), and this isn't re-entrant safe or thread-safe, which may be
	problematic.

	Define: POSIX_DNS_GETHOSTBYNAME
	Category: setting,standards
	Depends on: API_POSIX_DNS
	Conflicts with: TWEAK_POSIX_DNS_GETADDRINFO
	Conflicts with: TWEAK_POSIX_DNS_IPNODE
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_DNS_INETNP			eddy
	Set this if the POSIX inet_ntop and inet_pton functions are available.
	These convert IP addresses between numeric and string forms.

	Define: POSIX_DNS_NP
	Category: setting,standards
	Depends on: API_POSIX_DNS
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_DNS_IPNODE			eddy
	Selects getipnodebyname() as underlying DNS implementation.  (The
	endhostent manual page (among others) indicates that "The Austin draft",
	presumably of a POSIX spec, introduces this function and deprecates
	gethostbyname.)  Available if your platform (e.g. Montavista Linux)
	supports the getipnodebyname() function and its accompanying
	freehostent(); however, these functions are not present on common Linux
	systems (e.g. Debian/squeeze).

	Define: POSIX_DNS_IPNODE
	Category: setting,standards
	Depends on: API_POSIX_DNS
	Conflicts with: TWEAK_POSIX_DNS_GETADDRINFO
	Conflicts with: TWEAK_POSIX_DNS_GETHOSTBYNAME
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_DNS_USE_RES_INIT		markuso
	Some POSIX systems don't re-read resolv.conf periodically. This may
	cause the PosixHostResolver to fail resolving a hostname if the current
	network connectivity changes, e.g. when the connection was closed and a
	new network connection established, thus causing a new resolv.conf file
	to be written.

	If this workaround is enabled, the PosixHostResolver calls res_init()
	(provided by <resolv.h>) if the first attempt to resolve
	the hostname fails and tries to resolve the hostname again.

	Note that you may need to link with -lresolv on enabling this tweak.

	res_init() is assumed to be thread-unsafe, so locking is used. If the
	system also has the thread-safe res_ninit() function available, that is
	preferred to this tweak, and TWEAK_POSIX_DNS_USE_RES_NINIT should be set
	instead.

	Define: POSIX_DNS_USE_RES_INIT
	Category: workaround
	Depends on: API_POSIX_DNS
	Conflicts with: TWEAK_POSIX_DNS_USE_RES_NINIT
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_DNS_USE_RES_NINIT		markuso
	Some POSIX systems don't re-read resolv.conf periodically. This may
	cause the PosixHostResolver to fail resolving a hostname if the current
	network connectivity changes, e.g. when the connection was closed and a
	new network connection established, thus causing a new resolv.conf file
	to be written.

	If this workaround is enabled, the PosixHostResolver calls res_ninit()
	(provided by <resolv.h>) if the first attempt to resolve
	the hostname fails and tries to resolve the hostname again.

	Note that you may need to link with -lresolv on enabling this tweak.

	This function should be available for all GNU libc versions newer than 2.2.
	The resolver's state '_res' is thread-local storage that is also used
	by the gethostbyname*_r variants (see TWEAK_POSIX_GHBN*).
	Systems that use an older or different libc version can disable this tweak
	and enable TWEAK_POSIX_DNS_USE_RES_INIT instead.

	Define: POSIX_DNS_USE_RES_NINIT
	Category: workaround
	Depends on: API_POSIX_DNS
	Conflicts with: TWEAK_POSIX_DNS_USE_RES_INIT
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_FDATASYNC			eddy
	When OpLowLevelFile::Open()'s mode includes OPFILE_COMMIT, calling
	Flush() on the file must cause data to go directly to disk, without any
	cacheing or buffering.  Normally this is achieved by calling fdatasync()
	on the int file descriptor; however, on some platforms (e.g. FreeBSD)
	this function is not available.  Such platforms should enable this tweak
	and #define PosixFDataSync to some suitable function, such as fsync,
	taking an int argument and returning int: 0 on success, -1 on failure,
	setting errno suitably.

	Value: fdatasync
	Define: PosixFDataSync
	Category: workaround
	Depends on: API_POSIX_FILE
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_FEW_LOCALE_CHANGES  espen
	Tells PosixNativeUtil::TransientLocale to assume that
	PosixModule::InitLocale()'s settings are in effect.  In practice this means
	that changes other than to LC_NUMERIC are skipped; as locale changes can be
	very expensive, this can improve performance significantly.

	Will lead to bugs if any code changes locale and fails to restore it before
	methods in this module are called.  Core is believed safe against such
	errors.

	Define: POSIX_FEWER_LOCALE_CHANGES
	Category: performance
	Depends on: API_POSIX_MISC
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_FILE_REFLEX_LOCK		eddy
	When OpLowLevelFile::Open()'s mode includes OPFILE_SHAREDENYREAD or
	OPFILE_SHAREDENYWRITE, the spec calls for locking against other
	processes being able to open the same file for any purpose or for
	writing, respectively, regardless of whether any such other process
	attempts to lock the file.  However, POSIX only provides "advisory"
	locks, which don't restrict what other processes can do aside from their
	attempts to obtain similar locks.  Consequently, this module's
	implementation of OpLowLevelFile::Open() cannot fully implement the
	spec.

	We can't fix that; but usually the other process, whose access to our
	files we want to limit, is in fact another Opera process.  So, if we
	always acquire a deny-write lock when opening to read, or a deny-read
	lock when opening to write, if two Opera processes access the file and
	one of them locks it in a manner that conflicts with the other's use of
	the file, then we'll actually get the required lock-conflict and conform
	to the spec.  The upshot of this is that the two OPFILE_SHAREDENY* flags
	become effectively meaningless, since the effect they are asking for is
	enabled in any case just by opening the file.  Enable this tweak to turn
	on such reflex locking.

	We don't presently have any clear idea of how much overhead this imposes
	on file opening, so feel free to report the results of any measurements
	you do.  While it is always undesirable to have two processes accessing
	a file in incompatible ways, our ubiquitous use of OpSafeFile and other
	tricks provides reasonably good assurances that we avoid such conflicts
	even without locking, so the cost of locking is worthless overhead in
	many situations; if it is significant, enabling this tweak is unwise.

	Define: POSIX_FILE_REFLEX_LOCK
	Category: workaround
	Depends on: API_POSIX_FILE
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_GHBN_BUFFER			eddy
	Specifies the size of buffer to provide to gethostbyname2_r or
	gethostbyname_r (except on HP/UX, where a hostent_data structure is used
	as buffer, instead).  The old Unix code joked that 8k "Ought To Be Good
	Enough For Anyone (TM)".

	Value: 8192
	Define: GHBN_BUFFER_SIZE
	Category: setting
	Depends on: TWEAK_POSIX_GHBN_2R7
	Depends on: TWEAK_POSIX_GHBN_2R6
	Depends on: TWEAK_POSIX_GHBN_R5
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_GHBN_2R7			eddy
	Selects the version of gethostbyname2_r() which takes a hostent** as
	sixth of seven arguments and returns an int status value (as provided on
	Linux).

	Define: POSIX_GHBN_2R7
	Category: setting,standards
	Depends on: TWEAK_POSIX_DNS_GETHOSTBYNAME
	Conflicts with: TWEAK_POSIX_GHBN_2R6
	Conflicts with: TWEAK_POSIX_GHBN_R5
	Conflicts with: TWEAK_POSIX_GHBN_R3
	Conflicts with: TWEAK_POSIX_GHBN2
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_GHBN_2R6			eddy
	Selects the version of gethostbyname2_r() which takes only six arguments,
	returns a hostent* pointer and reports error in errno (as provided on
	QNX).

	Define: POSIX_GHBN_2R6
	Category: setting,standards
	Depends on: TWEAK_POSIX_DNS_GETHOSTBYNAME
	Conflicts with: TWEAK_POSIX_GHBN_2R7
	Conflicts with: TWEAK_POSIX_GHBN_R5
	Conflicts with: TWEAK_POSIX_GHBN_R3
	Conflicts with: TWEAK_POSIX_GHBN2
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_GHBN_R5			eddy
	Selects the version of gethostbyname_r() which takes five arguments,
	returns a hostent* pointer and reports error in errno (as provided on
	SunOS or Solaris).

	Define: POSIX_GHBN_R5
	Category: setting,standards
	Depends on: TWEAK_POSIX_DNS_GETHOSTBYNAME
	Conflicts with: TWEAK_POSIX_GHBN_2R7
	Conflicts with: TWEAK_POSIX_GHBN_2R6
	Conflicts with: TWEAK_POSIX_GHBN_R3
	Conflicts with: TWEAK_POSIX_GHBN2
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_GHBN_R3			eddy
	Selects the version of gethostbyname_r() which takes three arguments,
	returns an integer error code and delivers host information via a
	hostent* parameter (as provided by HP/UX).

	Define: POSIX_GHBN_R3
	Category: setting,standards
	Depends on: TWEAK_POSIX_DNS_GETHOSTBYNAME
	Conflicts with: TWEAK_POSIX_GHBN_2R7
	Conflicts with: TWEAK_POSIX_GHBN_2R6
	Conflicts with: TWEAK_POSIX_GHBN_R5
	Conflicts with: TWEAK_POSIX_GHBN2
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_GHBN2			eddy
	Selects simple gethostbyname2 (for which we need to deal with
	thread-safety issues).  Any of the other TWEAK_POSIX_GHBN_* is
	preferrable to this, if supported (it is debatable whether this is any
	better than just calling raw gethostbyname).

	Define: POSIX_GHBN2
	Category: setting,standards
	Depends on: TWEAK_POSIX_DNS_GETHOSTBYNAME
	Conflicts with: TWEAK_POSIX_GHBN_2R7
	Conflicts with: TWEAK_POSIX_GHBN_2R6
	Conflicts with: TWEAK_POSIX_GHBN_R5
	Conflicts with: TWEAK_POSIX_GHBN_R3
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_GLOBAL_ASSERT_EAR		eddy
	Conformance with the core no-globals policy prevents the Debug_OpAssert
	implementation provided for API_POSIX_DEBUG+API_DBG_OPASSERT from having
	any state except between g_opera->InitL() and g_opera->Destroy(), so an
	auto PosixAssertLogger is used as fall-back handler for messages.

	Turn on this tweak to use a static (hence "global" in core's terms)
	pointer to hold the required state.  You can set this outside the
	lifetime of the posix module object using the PosixLogManager::SetAssert
	static method (q.v.); remember to clear by calling with parameter 0
	before your listener is destroyed.  You can then provide an assertion
	logger that shall remember state between failing assertions, making
	assertion handling more convenient, from when you register it (early in
	main, before any assertions can trigger) until you unregister it (at the
	end of main, after assertions have triggered).

	Define: POSIX_GLOBAL_ASSERT_EAR
	Category: setting
	Depends on: API_POSIX_DEBUG, API_DBG_OPASSERT
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_HANDLER_AS_EDITOR		eddy
	In OpSystemInfo, have GetDefaultTextEditorL use GetFileHandler's
	text/plain response, if any, rather than xedit as fall-back, if neither
	of the usual environment variables - VISUAL and EDITOR - is set.

	Define: POSIX_HANDLER_AS_EDITOR
	Category: setting
	Depends on: EXTERNAL_APPLICATIONS_SUPPORT, API_POSIX_SYS_LOCALE, API_PI_OPSYSTEMINFO_FILEUTILS
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_HAS_EAI_OVERFLOW		markuso
	The tweak controls whether or not the constant EAI_OVERFLOW is defined
	as a possible error value for the function getaddrinfo().  That error
	value indicates "An argument buffer overflowed."  The EAI_OVERFLOW error
	code was created to provide a meaningful error code for the
	getnameinfo() function, for the case where the buffers provided by the
	caller were too small.  The EAI_OVERFLOW error code is not applicable to
	getaddrinfo(), which has no buffer arguments to overflow.  EAI_OVERFLOW
	was mistakenly added to the getaddrinfo() page rather than the
	getnameinfo() page.  This tweak enables handling the error code
	EAI_OVERFLOW.

	If either the error code is not defined (e.g. on the Mac platform the
	error code is not available because they use IEEE Std 1003.1g-2000
	and EAI_OVERFLOW is some modern thing from IEEE Std 1003.1-2001-13)
	or if the standard has been corrected to not let getaddrinfo() return
	that error code, then this tweak can be disabled.

	Define: POSIX_HAS_EAI_OVERFLOW
	Category: setting,standards
	Depends on: TWEAK_POSIX_DNS_GETADDRINFO
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_HAS_LANGINFO		eddy
	Enable this tweak if your system has <langinfo.h>, providing the
	nl_langinfo function and related defines CODESET and T_FMT.  If you
	don't enable this tweak, PosixSystemInfo::GetSystemEncodingL shall
	always return the default specified by TWEAK_POSIX_SYS_DEFAULT_ENCODING;
	you should probably over-ride it in a derived class.  Most Unixes can
	enable this; but not QNX (apparently).

	Define: POSIX_HAS_LANGINFO
	Category: setting
	Depends on: API_POSIX_SYS_LOCALE
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_HAS_LANGINFO_1STDAY	markuso
	Enable this tweak if your system has <langinfo.h>, providing the function
	nl_langinfo() and related defines _NL_TIME_WEEK_1STDAY and
	_NL_TIME_FIRST_WEEKDAY, and <time.h>, providing the function mktime(). The
	value returned by nl_langinfo() for the specified _NL_* arguments can be
	used to calculate the current locale's first day of the week (with the help
	of mktime()).

	If this tweak is disabled, then PosixLocale::GetFirstDayOfWeek(int&) is
	implemented to return OpStatus::ERR_NOT_SUPPORTED.

	If a platform has another way to determine the first day of the week, it
	needs to remove the implementation of OpLocale::Create() from
	posix_locale.cpp, create its own new OpLocale implementation, possibly
	derived from PosixLocale, implent all methods that shall override the
	PosixLocale implementation and let the platform's OpLocale::Create() create
	an instance of this new class.

	Define: POSIX_HAS_LANGINFO_1STDAY
	Category: setting
	Depends on: API_POSIX_SYS_LOCALE
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_IE_SYSNAME			eddy
	Configure the string PosixUAComponentManager::GetOSString() should return
	for UA_MSIE_Only; i.e. which version of MS-Windows should we claim to be
	using when we claim to be running MSIE ?

	Value: "Windows NT 5.1"
	Define: POSIX_IE_SYSNAME
	Category: setting,workaround
	Depends on: API_POSIX_HOST
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_IN6ADDR_ANY			eddy
	The operating system may provide a default IPv6 address, typically
	pointed to by extern in6_addr in6addr_any, which denotes an unset IPv6
	address.  If this is not provided via the standard name in6addr_any (as
	happens on Solaris 7), you can use this tweak to either make
	POSIX_IN6ADDR_ANY take the value NULL (suppressing tests which would
	otherwise use it; all IPv6 addresses shall then be deemed valid); or
	point POSIX_IN6ADDR_ANY at such an address (whether provided by system
	code or platform code).  A struct in6_addr which has been memset full of
	zero bytes is a correct value for this purpose.

	This tweak is irrelevant and ignored if IN6_IS_ADDR_UNSPECIFIED is
	supported by the system.  (Unfortunately, you still have to set it.)

	Value: &in6addr_any
	Define: POSIX_IN6ADDR_ANY
	Category: setting,workaround
	Depends on: API_POSIX_SOCKADDR, TWEAK_POSIX_SUPPORT_IPV6
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_INTERACTIVE_ASSERT		eddy
	When this tweak is enabled, PosixAssertLogger::Report() will pause to
	ask the user what to do next, unless the environment variable
	OPASSERT_CONTINUE is set to an affirmative value (see PosixNativeUtil)
	or the user has answered P (to print assertion failures without stoping
	to ask) when asked about a prior failure.  This interaction happens on
	stdout/stdin: this tweak should be disabled on devices where such
	interaction is not feasible.

	Define: POSIX_INTERACTIVE_ASSERT
	Category: setting
	Depends on: API_POSIX_DEBUG, API_DBG_OPASSERT
	Enabled for: desktop, tv
	Disabled for: mini, minimal, smartphone

TWEAK_POSIX_LENIENT_READ_LOCK		espen
	Gracefully handle a failure to lock a file that is opened for
	reading using OPFILE_READ (and nothing else) if the file is opened
	outside OPFILE_HOME_FOLDER. In this case it will not be treated
	as an error.

	Define: POSIX_LENIENT_READ_LOCK
	Category: workaround
	Depends on: API_POSIX_FILE
	Enabled for: desktop
	Disabled for: mini, minimal, smartphone, tv

TWEAK_POSIX_LISTEN_UNSET_IS_ANY		eddy
	The pi spec of OpSocket::Listen() says that, if the given address is
	unset, the "default network interface" should be used.  By default,
	PosixSocket faithfully follows this (probably misguided - see DSK-278990
	for a critique) spec.  Enable this tweak to use INADDR_ANY, i.e. the
	general listening interface, instead.

	This tweak will be deprecated, and its enabled behaviour made the
	default, if the pi ever changes to say what it probably should.

	Define: POSIX_LISTEN_UNSET_IS_ANY
	Category: workaround
	Depends on: API_POSIX_SOCKET, API_PI_SOCKET_LISTEN
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_LOWFILE_BASE		eddy
	The PosixOpLowLevelFileBase macro should expand to a class based on
	OpLowLevelFile for use as base-class by PosixLowLevelFile. May be made
	redundant if/when pi can be persuaded to settle their differences of API ...

	Value: OpLowLevelFile
	Define: PosixOpLowLevelFileBase
	Category: setting
	Depends on: API_POSIX_FILE
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_LOWFILE_BASEINC		eddy
	The class specified as PosixOpLowLevelFileBase has to be declared
	somewhere; the header file which supplies it should be configured as
	POSIX_LOWFILE_BASEINC.

	Value: "modules/pi/system/OpLowLevelFile.h"
	Define: POSIX_LOWFILE_BASEINC
	Category: setting
	Depends on: API_POSIX_FILE
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_LOWFILE_WRAPPABLE		eddy
	Expose the PosixLowLevelFile factory as PosixModule::CreateRawFile instead
	of as OpLowLevelFile::Create, to allow platform code to use other low-level
	file implementations (e.g. util's zip-files) where appropriate.  (Needed on
	Android, where some files are found in a zip file and others are actually on
	disk.  Used in core to support its out-of-disk debugging.)

	Define: POSIX_LOWFILE_WRAPPABLE
	Category: workaround
	Depends on: API_POSIX_FILE
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_MAINTHREAD_OBJECTS		anders
	Configure the default number of objects in the object stack of the posix
	main thread.

	Value: 64
	Define: POSIX_MAINTHREAD_OBJECTS
	Category: setting
	Depends on: POSIX_OK_THREAD, THREAD_SUPPORT
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_MEMSEG_VIRTUAL_COUNT	eddy
	This module's implementation of OpMemory::CreateVirtualSegment (q.v.)
	uses a static array of descriptors (since CreateVirtualSegment may be
	used by the malloc implementation, we can't use a malloc-based
	implementation) to hold information about mmap()ed memory segments.  The
	size of this array must be decided at compile-time.  The descriptors
	involved are simply OpMemory::OpMemSegment structures, so only about
	three words in size; the array can be fairly large without incurring
	huge costs.  Its size is configured by this tweak.

	Value: 256
	Define: POSIX_MAX_MEMORY_SEGMENTS
	Category: setting
	Depends on: API_POSIX_MEMORY
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_MEMSEG_VIRTUAL_UNIT		eddy
	This module's implementation of OpMemory::CreateVirtualSegment (q.v.)
	rounds up the requested minimum size to a multiple of a (large) block
	size; this tweak controls the size of those blocks.  It specifies how
	many least-significant bits are clear in the rounded-up size; the
	rounded size is always a multiple of 1<<POSIX_MEMSEG_VIRTUAL_UNIT_BITS
	bytes in size.  The default value, 23, corresponds to rounding each
	allocation up to some multiple of 8 MiB.

	Value: 23
	Define: POSIX_MEMSEG_VIRTUAL_UNIT_BITS
	Category: setting
	Depends on: API_POSIX_MEMORY
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_MISTRUST_SYSTEM_TZ		eddy
	POSIX specifies extern long timezone, which "shall be set to the
	difference, in seconds, between Coordinated Universal Time (UTC) and
	local standard time."  When TWEAK_POSIX_USE_GMTOFF is disabled,
	PosixTimeInfo uses this extern, combined with DST information, to
	infer the actual effective timezone.

	The system library shall normally infer timezone's value from the value
	of the TZ environment variable.  However, some systems may fail to
	propagate TZ (from whatever mechanism the user has for selecting a time
	zone) to applications (this, at least, happens on Android 1.5); or the
	library may neglect to set timezone correctly.

	On some BSD systems, the standard library provides a function named
	timezone instead of this POSIX variable.

	In either case, it is possible that localtime_r, gmtime_r and mktime are
	(as on Android 1.5) still correctly arranged to reflect the user's
	selected timezone; enable this tweak to fall back on a computation of
	timezone using these functions.  (PosixTimeZone caches timezone
	information, so the minor extra cost should not be a serious issue.)

	Define: POSIX_MISTRUST_SYSTEM_TIMEZONE
	Category: workaround
	Depends on: API_POSIX_TIME_ZONE
	Conflicts with: TWEAK_POSIX_USE_GMTOFF
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_NAME_MAX			eddy
	The POSIX_NAME_MAX macro should expand to an upper bound on the length
	of file (and directory) names - that is, on the individual components of
	a path-name.  The default, NAME_MAX, is defined by most platforms;
	however, Solaris/x86 is known to lack it - <stdio.h>'s FILENAME_MAX is
	known to be a viable alternative.

	Value: NAME_MAX
	Define: POSIX_NAME_MAX
	Category: setting
	Depends on: API_POSIX_DIR
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_NATIVE_OOM_FALLBACKS	eddy
	Activates some attempts at recovering from OOM when converting (usually
	filenames) between native encoding and internal encoding.  These
	conversions are, at least in some cases, done via a temporary buffer,
	which increases the transient memory usage (and the speed); this may
	lead to OOM in situations which might otherwise succeed by avoiding the
	need for the temporary buffer.  This tweak activates a fall-back onto
	code which avoids the temporary buffer, if the first attempt fails -
	however, if it ever makes a difference, you were very close to OOM
	anyway.

	Define: POSIX_NATIVE_OOM_FALLBACKS
	Category: workaround
	Depends on: API_POSIX_NATIVE
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_NEGATIVE_FILELENGTH		eddy
	Work round known bug in Apache (and possibly other web servers) when
	serving files whose length needs more than 31 bits to represent: see bug
	205033.  Negative file lengths are read as a 32-bit long and then
	coerced to unsigned.

	Note that this only does the right thing if the correct value is less
	than 2**32 (and the reason for the negative value is that the remote
	server used a signed 32-bit type to represent it); beyond that, it would
	be better to have left this hack disabled, which causes
	StringToOpFileLength to fail, so that the offending alleged file size
	gets ignored and Opera acts as if it hasn't been told the size (which,
	in practice, it hasn't).  Consequently, turning this hack on causes a
	failure in a pi selftest (which expects failure on decoding a -ve
	value).

	Define: POSIX_NEGATIVE_FILELENGTH_HACK
	Category: workaround
	Depends on: API_POSIX_NATIVE, API_POSIX_SYS
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_NET_BUFFER_SIZE		eddy
	Read-buffer size to be used (via setsockopt) for sockets, in bytes.  For
	example, a system with good band-width might use 0x10000 (64 KiB) while one
	with poor band-width might limit to 0x2000 (8 KiB).  A value of zero (the
	default) means to use the system default (i.e. not set this socket option).
	With any luck, it's sensibly configured by the operating system.

	Value: 0
	Define: POSIX_SOCKET_BUFFER_SIZE
	Category: setting
	Depends on: API_POSIX_SOCKET
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_NETIF_LOOKUP_ONCE		eddy
	By default, the network interface manager shall ask various system
	functions about available interfaces each time it is asked to
	BeginEnumeration; this ensures that the enumerated information shall be
	reasonably up-to-date.  Enabling this tweak causes it to only ask the
	system once, during creation, instead.  This may be appropriate on
	systems where the network status is expected to be stable.

	Define: POSIX_NETIF_ITERATE_ONCE
	Category: setting
	Depends on: API_POSIX_NETWORK
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_NET_SENDBUF_SIZE		eddy
	Specify the maximum size (as an expression of type size_t) of the
	internal buffer used by PosixSocket::Send to store any backlog.  If a
	call to Send would (after any immediate send has been attempted) require
	a buffer bigger than this, the attempted Send() shall fail with message
	SOCKET_BLOCKING, so as to force its caller to try again after a
	subsequent OnSocketDataSent().  The buffer used shall not be as big as
	this tweak allows unless its actual backlog ever gets this big: this
	tweak only controls an upper limit, which is not normally likely to be
	exercised.  See also TWEAK_POSIX_NET_BUFFER_SIZE.

	Platforms are encouraged to experiment with the value of this tweak and
	measure how it affects performance.  Please report results to the module
	owner, indicating which core profile your platform mostly closely
	resembles.  The value given below, 1MiB, is merely a value with which a
	test-build happened to pass a pi self-test that fails unless it manages
	to overflow the buffer; for really large values of this tweak, the
	socket code manages to deliver data fast enough that the self-test code
	never succeeds in overflowing it.

	Value: 0x100000
	Define: POSIX_SENDBUF_MAX_SIZE
	Category: setting
	Depends on: API_POSIX_SOCKET
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_OWN_WCMB_LEN		eddy
	POSIX specifies that wcstombs and mbstowcs should accept a NULL first
	argument, returning the size of buffer they would need as first argument
	for success.  If your standard library doesn't support this
	(e.g. FreeBSD 4 and older) turn on this tweak to get an alternative
	implementation of the same behaviour using wctomb and mbtowc.

	Define: OWN_POSIX_WCMB_LEN
	Category: workaround
	Depends on: API_POSIX_FILE
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_PARTIAL_NETMAN		eddy
	Pure POSIX does not suffice to fully implement OpNetworkInterfaceManager
	so the implementation provided by this module is incomplete; see its
	declaration in posix_network_interface.h for details.  Platforms using
	it should generally sub-class PosixNetworkInterfaceManager and add
	support for listeners plus, where relevant and available, connection
	type.  However, if the platform has no way to support these features, it
	can fall back on using PosixNetworkInterfaceManager (i.e. have this
	module provide the OpNetworkInterfaceManager::Create implemenation) by
	enabling this tweak.

	Since Linux (including Android) appears to lack any way to implement the
	rest, this tweak is enabled by default; any platform that can implement
	the missing parts should disable this tweak.

	Define: POSIX_PARTIAL_NETMAN
	Category: setting
	Depends on: API_POSIX_NETWORK
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_PATHSEQUAL_HARDLINK		eddy
	OpSystemInfo::PathsEqual could be construed to need to deem two paths
	equal if they refer to the same inode thanks to hard links in distinct
	directories: see discussion on bug 349940.  However, in practice its
	known callers (checking whether two plugins are really the same plugin
	in two places) only really encounter aliasing via symbolic links, so the
	extra cost of calling stat() to test for hardlinks is a waste of effort.
	Turn this tweak on if you want to do the stat-based test all the same.

	Define: POSIX_PATHSEQUAL_HARDLINK
	Category: setting
	Depends on: API_POSIX_PATH
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_PLATNAME_LENGTH		eddy
	Specify size of the sysname array in struct utsname, needed for
	OpSystemInfo::GetPlatformStr().  See <sys/utsname.h>; the default is
	what Linux uses (see <bits/utsname.h>), other platforms should over-ride
	suitably.

	Value: 65
	Define: POSIX_PLATNAME_LENGTH
	Category: setting
	Depends on: API_POSIX_HOST
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_SELECTOR_EPOLL		arjanl
	See API_POSIX_SELECT for details.  Provide an implementation of
	PosixSelector based on epoll_wait(), usually available on GNU/Linux
	systems.

	Define: POSIX_SELECTOR_EPOLL
	Category: setting
	Depends on: API_POSIX_SELECT
	Enabled for: desktop, mini, minimal, smartphone, tv
	Conflicts with: TWEAK_POSIX_SELECTOR_SELECT
	Conflicts with: TWEAK_POSIX_SELECTOR_KQUEUE

TWEAK_POSIX_SELECTOR_EVENTS_PER_POLL
	When using edge-triggered selectors (kqueue or epoll), this setting
	is the maximum number of events that get processed in one call to
	Poll(). Increasing or experimenting with this setting might improve
	performance if a lot of file descriptors are being listened to and the
	time spent between Poll() calls is long enough so that there are several
	events waiting in the queue.

	Value: 16
	Define: POSIX_SELECTOR_EVENTS_PER_POLL
	Category: setting
	Depends on: TWEAK_POSIX_SELECTOR_EPOLL
	Depends on: TWEAK_POSIX_SELECTOR_KQUEUE
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_SELECTOR_KQUEUE		arjanl
	See API_POSIX_SELECT for details.  Provide an implementation of
	PosixSelector based on kqueue(), usually available on BSD-based
	systems such as Free/Net/OpenBSD and MacOS X.

	Define: POSIX_SELECTOR_KQUEUE
	Category: setting
	Depends on: API_POSIX_SELECT
	Disabled for: desktop, mini, minimal, smartphone, tv
	Conflicts with: TWEAK_POSIX_SELECTOR_SELECT
	Conflicts with: TWEAK_POSIX_SELECTOR_EPOLL

TWEAK_POSIX_SELECTOR_SELECT		arjanl
	See API_POSIX_SELECT for details.  Provide a simple POSIX-based
	implementation of PosixSelector that uses select(). If epoll_wait()
	or kqueue() is available on the system, these are usually more efficient,
	so enable TWEAK_POSIX_SELECTOR_EPOLL or TWEAK_POSIX_SELECTOR_KQUEUE instead
	in that case.

	Define: POSIX_SELECTOR_SELECT
	Category: setting
	Depends on: API_POSIX_SELECT
	Disabled for: desktop, mini, minimal, smartphone, tv
	Conflicts with: TWEAK_POSIX_SELECTOR_EPOLL
	Conflicts with: TWEAK_POSIX_SELECTOR_KQUEUE

TWEAK_POSIX_SELECTOR_SELECT_FALLBACK	arjanl
	If the platform has chosen a PosixSelector different from the simple
	select() implementation (see TWEAK_POSIX_SELECTOR_SELECT), but that
	selector returns an error on creation, fall back to using a
	PosixSelector based on select(). This is useful when the preferred selector
	method might not be available at runtime.

	Define: POSIX_SELECTOR_SELECT_FALLBACK
	Category: setting
	Depends on: API_POSIX_SELECT
	Enabled for: desktop, mini, minimal, smartphone, tv
	Conflicts with: TWEAK_POSIX_SELECTOR_SELECT

TWEAK_POSIX_SETENV_VIA_PUTENV		eddy
	Some platforms (allegedly including Solaris 8) have broken or missing
	setenv and unsetenv (which are in POSIX), but support putenv correctly.
	Such platforms should set this tweak to activate internal emulation of
	{un,}setenv via putenv.

	Define: POSIX_SETENV_VIA_PUTENV
	Category: workaround
	Depends on: API_POSIX_SETENV
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_SIGNAL			eddy
	POSIX mandates use of sigaction() in preference to signal(); by default,
	this module follows POSIX.  However, if your platform's support for
	sigaction is defective, set this tweak to force use of signal() instead.

	Define: POSIX_USE_SIGNAL
	Category: workaround
	Depends on: API_POSIX_PROCESS
	Depends on: API_POSIX_SIGNAL
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_SNPRINTF_NOQUOTE		eddy
	Some platforms (e.g. FreeBSD 4, QNX, see bug 219096) don't support the '
	(single quote) flag in a format string to snprintf.  They should
	indicate this by setting this tweak: the OpLocale::NumberFormat()
	implementations shall not honour their with_thousands_sep parameter
	(until we invent a work-around).

	Note that stdlib's op_snprintf and friends don't support the ' flag (at
	norskstandard_2_beta_1, at least); the code this uses calls snprintf
	directly (on some platforms, snprintf handles the flag but returns -1 if
	buffer size was not enough; such platforms use stdlib's op_snprintf for
	the correct return, size needed), so you need to enable this tweak if
	you fall back on stdlib's op_snprintf as your snprintf implementation !

	Define: POSIX_SNPRINTF_BROKEN_QUOTE
	Category: workaround
	Depends on: API_POSIX_LOCALE
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_STACK_GUARD_PAGE		eddy
	When allocating stack blocks via OpMemory::CreateStackSegment(),
	allocate an extra completely inaccessible memory page immediately
	preceding the first page of the stack.  This triggers an immediate crash
	in case of a stack overflow in code using such custom stacks (read:
	Carakan,) which makes it easier to accurately diagnose such issues.  If
	not used, stack overflows may result in random heap corruption instead.

	This is a very useful diagnostic tool, whose use in debug and test
	builds is strongly recommended, when possible.

	Define: POSIX_STACK_GUARD_PAGE
	Category: workaround
	Depends on: API_POSIX_MEMORY && API_PI_OPMEMORY_STACK_SEGMENT
	Conflicts with: TWEAK_POSIX_STACK_USE_MALLOC
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_STACK_USE_MALLOC		eddy
	When allocating stack blocks via OpMemory::CreateStackSegment(),
	allocate the block using malloc() instead of mmap().  This is
	incompatible with TWEAK_POSIX_STACK_GUARD_PAGE.

	Since stack blocks are relatively small, frequent and short-lived,
	allocating them on the regular heap may be more efficient, both from a
	memory usage and a performance point of view.  Such differences have not
	been investigated or proven, however.

	Define: POSIX_STACK_USE_MALLOC
	Category: memory
	Depends on: API_POSIX_MEMORY && API_PI_OPMEMORY_STACK_SEGMENT
	Conflicts with: TWEAK_POSIX_STACK_GUARD_PAGE
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_SUPPORT_IPV6		eddy
	Support IP v6 (16-octet addresses) as well as v4 (4-octet addresses).
	Note that this is suppressed at run-time if it is found that socket (3)
	doesn't support the PF_INET6 domain argument; this is checked during
	initialization.  Thus, aside from via the unavoidable foot-print cost,
	there should be negligible performance cost to enabling this, if the
	platform supports it, except when the user is actually on a network
	which supports IP v6 (so actually gets some benefit for the cost).

	Define: POSIX_SUPPORT_IPV6
	Category: setting
	Depends on: API_POSIX_DNS
	Depends on: API_POSIX_SOCKADDR
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_SYS_DEFAULT_ENCODING	eddy
	If PosixSystemInfo::GetSystemEncodingL() - see OpSystemInfo for its spec -
	is unable to determine the system encoding using setlocale(), e.g. because
	TWEAK_POSIX_HAS_LANGINFO is not enabled, it falls back on the default
	encoding specified by POSIX_SYS_DEFAULT_ENCODING.  Platforms for which this
	is not adequate should over-ride GetSystemEncodingL().

	Value: "utf-8"
	Define: POSIX_SYS_DEFAULT_ENCODING
	Category: setting
	Depends on: API_POSIX_SYS_LOCALE
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_SYSINFO_BASE		eddy
	The PosixOpSysInfoBase macro should expand to a class based on
	OpSystemInfo for use as base-class by PosixSystemInfo.

	Value: OpSystemInfo
	Define: PosixOpSysInfoBase
	Category: setting
	Depends on: API_POSIX_SYS
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_SYSINFO_BASEINC		eddy
	The class specified as PosixOpSysInfoBase has to be declared somewhere;
	the header file which supplies it should be configured as
	POSIX_SYSINFO_BASEINC.

	Value: "modules/pi/OpSystemInfo.h"
	Define: POSIX_SYSINFO_BASEINC
	Category: setting
	Depends on: API_POSIX_SYS
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_SYS_WCHAR_ENCODING		eddy
	When TWEAK_POSIX_SYS_WCHAR_SIZE is set, it is necessary to convert
	between the UTF-16 used by uni_char and the encoding used by the system
	libraries when handling wchar_t; this shall usually be UTF-32 if
	WCHAR_SYSTEMLIB_SIZE is 4.  In the event of a system using some other
	encoding, they should specify it via this tweak.  (If your system
	wchar_t has size 2 but an encoding other than UTF-16, you can set
	TWEAK_POSIX_SYS_WCHAR_SIZE but use 2 as the size, so as to be able to
	use this tweak also: but it "depends on" the size tweak so that normal
	UTF-16 systems don't have to tweak this just to set it to "utf-16".)

	When this tweak is *not* set (i.e. uni_char *is* wchar_t), if
	API_POSIX_LOCALE is imported: defining posix_wcscoll to a
	posix-compliant implementation of wcscoll shall cause this to be used in
	OpLocale::CompareStringsL, when no length limit or case-insensitivity
	flag is specified; likewise, defining posix_wcsncoll, posix_wcsnicoll
	and/or posix_wcsicoll to a suitable implementation of a length-limited
	(if n is added) and/or case-insensitive (if i is added) variant shall
	cause it to be used in the relevant case of this method.  Specifying all
	four shall save you some foot-print; otherwise, the code used when none
	are provided shall handle the cases for the ones not provided.

	Value: "utf-32"
	Define: POSIX_SYS_WCHAR_ENCODING
	Category: workaround, setting
	Depends on: TWEAK_POSIX_SYS_WCHAR_SIZE, API_POSIX_NATIVE, !TWEAK_POSIX_SYS_WCHAR_ENCODING_UTF32
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_SYS_WCHAR_ENCODING_UTF32	arjanl
	When TWEAK_POSIX_SYS_WCHAR_SIZE is set, it is necessary to convert
	between the UTF-16 used by uni_char and the encoding used by the system
	libraries when handling wchar_t; this shall usually be UTF-32 if
	WCHAR_SYSTEMLIB_SIZE is 4.  Set this tweak to YES if that is the case.
	Otherwise, see TWEAK_POSIX_SYS_WCHAR_ENCODING to specify a different
	encoding.

	Define: POSIX_SYS_WCHAR_ENCODING_UTF32
	Category: workaround, setting
	Depends on: TWEAK_POSIX_SYS_WCHAR_SIZE, API_POSIX_NATIVE
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_SYS_WCHAR_SIZE		eddy
	On some systems (notably Linux, with the right make setting) we persuade
	the compiler to make wchar_t be the two-byte type we want to use as
	uni_char, despite the system library functions having been compiled with
	some other type as wchar_t (unsigned int, on Linux).  This would make
	calls to system functions disastrous but for some careful work-arounds,
	for which we need to know the size of the type (as seen during Opera
	compilation) the system library is really expecting.  Only the values 2
	(the default) and 4 (needed on Linux and probably other Unixes, hence
	actually used as value for every profile) are supported, but other sizes
	could be supported on request (e.g. patch).

	(The untweaked value has to be 2 so that the dependency for
	TWEAK_POSIX_SYS_WCHAR_ENCODING can work right.)

	Value: 2
	Value for desktop: 4
	Value for mini: 4
	Value for minimal: 4
	Value for smartphone: 4
	Value for tv: 4
	Define: WCHAR_SYSTEMLIB_SIZE
	Category: workaround
	Depends on: API_POSIX_NATIVE

TWEAK_POSIX_THREADSAFE_MALLOC	eddy
	By default, posix's implementation of OpThreadTools's Allocate and Free
	methods assumes that op_malloc and op_free are not thread-safe, so must be
	called on the core thread, requiring synchronisation when called from any
	non-core thread.  Enable this tweak if your op_malloc and op_free are
	thread-safe, so can simply be called on other threads without problems,
	e.g. when TWEAK_MEMORY_USE_LOCKING is enabled.

	Define: POSIX_THREADSAFE_MALLOC
	Category: setting
	Depends on: API_POSIX_MAIN_THREAD
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_TILDE_EXPANSION		eddy
	Filename serialization should treat a leading ~ as an alias for $HOME.

	Define: POSIX_EXPAND_TILDE
	Category: setting
	Depends on: API_POSIX_SERIALIZE_FILENAME
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_TIME_NOJUMP			eddy
	When TWEAK_POSIX_TIME_QUANTUM (q.v.) is relevant, enabling this tweak
	(and setting its value to something positive) enables the faked up
	monotonic clock to also work around large jumps forward in time,
	e.g. resulting from bodging the start of DST or a system clock that
	eventually catches up with reality after initially thinking it's 00:00
	on January 1st, 1970.

	The define's value must be given as an integer literal, since it's
	necessary to do a comparison on it in a #if; a positive value enables
	this hack, otherwise the hack is disabled even if you have enabled this
	tweak.  The value indicates a time, in minutes, that is so large that
	the hack should be applied.  A value of 60 would trigger for the start
	of DST, if an inept system administrator set the system clock instead of
	configuring time-zone correctly; it would also trigger if the user of a
	mobile 'phone sets the clock instead of adjusting time-zone when landing
	after an international flight.

	Value: 0
	Define: POSIX_IMPLAUSIBLE_ELAPSED_TIME
	Category: workaround,setting
	Depends on: API_POSIX_CLOCK
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_TIME_QUANTUM		eddy
	If TWEAK_POSIX_TIMERS is not enabled, or if CLOCK_MONOTONIC is
	unavailable, PosixSystemInfo has to fake up a monotonic clock based on
	the system clock, which might step backwards in time (e.g. a clumsy
	system's implementation of the end of DST).  To deal with this, the
	faked-up monotonic clock fixes up backwards steps in time (and, if
	TWEAK_POSIX_TIME_NOJUMP is enabled, implausibly large steps forward in
	time), replacing them with a sensible small forward step.

	The default for this replacement step is POSIX_CREDIBLE_TIME_QUANTUM
	milliseconds, which must be positive; however, if the faked-round step
	is some whole (but possibly negative) number of hours plus a small
	forward time-step (as would happen on a clumsily-implemented DST end),
	the replacement step is this small forward remainder (since this is the
	actual time elapsed, on a clumsy DST change).

	For these purposes, anything less than 65536 times the default step is
	deemed "small".  This multiplier (65536) may be altered, or tweakified,
	in later releases of this module.  It is set so that a time quantum of
	1ms (which is probably rather large) deems a minute "small".  Also, to
	avoid problems with at least one optimizer that's been seen to deem one
	value less than another even when they're equal (floating point
	comparisons can be fuzzy that way), a step backwards in time is only
	recognized as such if it is actually backwards by more than the credible
	time quantum.

	Note that your time quantum needs to be large enough that, when added to
	a current time value in ms (of order 2e12), it yields a value which does
	in fact compare > the value to which it was added; to this end, your
	time quantum needs to be at least about 2e12*DBL_EPSILON (about 4e-4 on
	a sample 32-bit Linux/x86).  In the expression for the quantum, you can
	safely use DBL_EPSILON and m_resolution, the cached clock resolution
	measured in seconds; but remember to rescale the last to milliseconds !

	Value: MAX((1<<31) * 1e3 * DBL_EPSILON, 1e3 * m_resolution)
	Define: POSIX_CREDIBLE_TIME_QUANTUM
	Category: workaround,setting
	Depends on: API_POSIX_CLOCK
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_TIMER_RESOLUTION		eddy
	When TWEAK_POSIX_TIMERS is not enabled, we have no way to determine the
	resolution of the system clock (gettimeofday is used) so you need to
	specify it via this tweak.  (The posix gettimeofday specification says
	"The resolution of the system clock is unspecified".)  The value must be
	(or expand, at preprocessor-time, to) a valid C expression for a value
	of type double.  This value is also used, even when TWEAK_POSIX_TIMERS
	is enabled, as fall-back if clock_getres() fails.

	Our old code in the unix module claimed that Linux has a reliable
	resolution of about 20 milli-seconds; however, Eddy's experiments in
	late July 2008 found successive calls to gettimeofday returning times
	differing by about a microsecond, hence the default given here.  (For
	clock_gettime, the same experiments revealed similar differences,
	although clock_getres claims a nanosecond resolution.)  If you have
	better information on your system clock, tweak !

	Value: 1e-6
	Define: POSIX_TIMER_RESOLUTION
	Category: setting
	Depends on: API_POSIX_CLOCK
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_TIMERS			eddy
	POSIX provides several mechanisms for dealing with time.  The "Timers
	option" provides clock_gettime() and clock_getres(), which enable us to
	know the resolution of our clock; however, these functions may be
	provided by some other library than libc - the Timers option "need not
	be available on all implementations" - so using these may require extra
	libraries, complicating build processes and increasing footprint.  On
	Linux, if you #define _GNU_SOURCE (e.g. in system.h), the "Timers
	option" is generally available as part of the GNU C library.
        "man clock_gettime" suggests to link with "-lrt".

	Set this tweak to prefer these methods in our implementation.  If the
	timers option is not supported by your library, or if you don't enable
	this tweak, other mechanisms are used (see TWEAK_POSIX_TIMER_RESOLUTION,
	TWEAK_POSIX_TIME_*).

	Define: POSIX_USE_TIMERS
	Category: footprint
	Depends on: API_POSIX_CLOCK
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_TIMEZONE_VARIES		eddy
	Usually, users don't cross time-zone boundaries without restarting
	Opera.  Consequently, PosixTimeZone usually caches the timezone and no
	part of the system calls tzset() to update what it would compute - which
	it only even attempts when next it thinks DST might be about to change.

	However, some projects (e.g. a public display system for an ocean cruise
	ship) require Opera to run continuously while moving between time-zones,
	while faithfully tracking the changes.  This tweak exists for the
	benefit of such projects.

	Enable this tweak and set POSIX_TZ_VARY_INTERVAL to the number of
	minutes to allow between checks of the timezone - it must be positive.
	Then, when other factors cause Opera to ask (on the core thread) for the
	time, if this many minutes have passed since last update, PosixTimeZone
	shall ensure that its timezone information is up-to-date.  This includes
	a call to tzset().

	Value: 0
	Define: POSIX_TZ_VARY_INTERVAL
	Category: workaround
	Depends on: API_POSIX_TIME_ZONE
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_UDP_BCAST_NOBIND		anders
	Some platforms (notably Mac; see MANTLE-945) refuse to bind to
	INADDR_BROADCAST, the default broadcast address, 255.255.255, which core
	uses in some cases.  Enable this tweak to work around the problem by
	using a local interface's broadcast address (or some approximation
	thereto).  This modified address will be written back to the address
	that was passed to OpUdpSocket::Bind() so that core has some chance of
	knowing what address was actually bound to.

	Define: POSIX_UDP_BROADCAST_NOBIND
	Category: workaround
	Depends on: POSIX_OK_UDP
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_UNSETENV_INT_RETURN		eddy
	The BSD 4.3 and some earlier POSIX versions of unsetenv return void; but
	more recent POSIX versions define it to return int.  Determine which
	your platform does and enable this tweak if it returns int.  Turning
	this tweak off shall always work; it defaults to ignoring the return
	value even if there is one.

	Define: POSIX_UNSETENV_INT_RETURN
	Category: setting
	Depends on: API_POSIX_SETENV
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_USE_CUSTOM_GETBINARYPATH	andersr
	Implement PosixSystemInfo::GetBinaryPath() using a system-provided
	variable or function.  If you enable this tweak, you must also
	#define posix_program_path so that it evaluates to an expression,
	of C-string type (it must be assignable to a const char* variable),
	for the name of the currently-running (usually Opera) binary.
	GetBinaryPath() shall assume native encoding and convert to UTF-16.

	Examples:

	  // On Solaris systems, you may want to use:
	  #define posix_program_path getexecname()

	  // And on FreeBSD:
	  #define posix_program_path getprogname()

	  // With GNU compilers, there is a global variable
	  // 'program_invocation_name' which contains the path to the
	  // running program.
	  #define posix_program_path program_invocation_name

	Finally, if TWEAK_POSIX_USE_PROC_SELF_EXE is also enabled,
	posix_program_path's answer shall take precedence over
	/proc/self/exe (when both are available).

	Define: POSIX_USE_CUSTOM_GETBINARYPATH
	Category: setting
	Depends on: API_POSIX_PROCESS, API_PI_OPSYSTEMINFO_GETBINARYPATH
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_USE_GETIFADDRS		eddy
	Use the non-POSIX getifaddrs() function (known to be present on *BSD and
	some Linux, but not Solaris) to determine local IP address.  Has the
	pleasant virtue of reporting all addresses of each interface, not just
	the first.  Also supports IPv6.

	Note: this, TWEAK_POSIX_USE_NETLINK or one of the TWEAK_POSIX_USE_*_IOCTL is
	generally more likely to produce a useful result than doing a DNS lookup on
	the local host name - which may be entirely local, so unknown to DNS.  These
	tweaks may be mixed freely, in so far as they're supported by your Operating
	System.  See bugs DSK-218804 and DSK-266991.

	Define: POSIX_USE_GETIFADDRS
	Category: setting
	Depends on: API_POSIX_NETIF
	Enabled for: desktop, mini, minimal, smartphone
	Disabled for: tv

TWEAK_POSIX_USE_GMTOFF			arjanl
	BSD and GNU libc have a tm_gmtoff member in the broken-down time
	structure that gives the difference in seconds between local time and
	UTC.  If this is available on your platform (and properly implemented),
	it should be used: this tweak is enabled by default and you'll get
	compilation errors if your libc lacks the tm_gmtoff member.

	Note, however, that some devices use stripped-down versions of libc that
	may have (as on Android 1.5) removed support for setting tm_gmtoff
	suitably, without removing the member itself; your code will compile but
	trigger assertions in PosixSystemInfo when setting the timezone to
	random values well outside its plausible range.

	Define: POSIX_USE_GMTOFF
	Category: setting
	Depends on: API_POSIX_TIME_ZONE
	Conflicts with: TWEAK_POSIX_MISTRUST_SYSTEM_TZ
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_USE_IFCONF_IOCTL		eddy
	Use ioctl(,SIOCGIFCONF,) to determine local IP addresses (supported on
	Linux, including Android).  See note on TWEAK_POSIX_USE_GETIFADDRS.
	Experimental.

	Uses struct ifreq within its struct ifconf, so has the same limitation (no
	IPv6) as TWEAK_POSIX_USE_IFREQ_IOCTL (q.v.).

	Define: POSIX_USE_IFCONF_IOCTL
	Category: setting
	Depends on: API_POSIX_NETIF
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_USE_IFREQ_IOCTL		eddy
	Use the struct ifreq ioctl (SIOCGIFNAME, SIOCGIFADDR and SIOCGIFFLAGS,
	supported by Linux) to determine local IP address; only supports IPv4.
	See note on TWEAK_POSIX_USE_GETIFADDRS.

	Sadly struct ifreq uses (as at 2011/Sept) a struct sockaddr to hold its
	address, which is not big enough to hold an IPv6 address; if it's ever
	expanded to a struct sockaddr_storage, we might see it support IPv6.  Until
	then, you want at least one of the interfaces known to support IPv6, if
	you're living in the twenty-first century.

	Define: POSIX_USE_IFREQ_IOCTL
	Category: setting
	Depends on: API_POSIX_NETIF
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_USE_LIFREQ_IOCTL		eddy
	Use the struct lifreq ioctl (SIOCGLIFNUM and SIOCGLIFCONF, supported by
	Solaris) to determine local IP address.  Is believed to support IPv6.
	See note on TWEAK_POSIX_USE_GETIFADDRS.

	Define: POSIX_USE_LIFREQ_IOCTL
	Category: setting
	Depends on: API_POSIX_NETIF
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_USE_MREQN			eddy
	Linux, since kernel version 2.2, provides a struct ip_mreqn which
	extends the standard struct ip_mreq usefully; enable this tweak to
	exploit that extension, when this module has a use for it (presently,
	this is only when this module's implementations of UDP and network
	interface management are both enabled).

	Define: POSIX_USE_MREQN
	Category: setting
	Depends on: API_POSIX_NETIF, API_POSIX_UDP
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_USE_NETLINK		lbodzon
	Use the NeLink interface to determine local IP address.  This is still
	experimental and incomplete (we haven't yet worked out how to support IPv6
	for it).  Please report your experiences with it to the module owners, if
	you enable it.  See note on TWEAK_POSIX_USE_GETIFADDRS.

	Define: POSIX_USE_NETLINK
	Category: setting
	Depends on: API_POSIX_NETIF
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_USE_PROC_CPUINFO        jadahl
	On a Linux system use /proc/cpuinfo to determine CPU architecture and
	features at runtime.

	Define: POSIX_USE_PROC_CPUINFO
	Depends on: API_PI_OPSYSTEMINFO_CPU_ARCHITECTURE
	Depends on: API_PI_OPSYSTEMINFO_CPU_FEATURES
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_USE_PROC_SELF_EXE			andersr
	This can be used on Linux systems.  Use readlink('/proc/self/exe') in
	PosixSystemInfo::GetBinaryPath() to get the path to the currently running
	program.

	If TWEAK_POSIX_USE_CUSTOM_GETBINARYPATH is also enabled,
	posix_program_path's answer shall take precedence over
	/proc/self/exe (when both are available).

	Define: POSIX_USE_PROC_SELF_EXE
	Category: setting
	Depends on: API_POSIX_PROCESS, API_PI_OPSYSTEMINFO_GETBINARYPATH
	Enabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_WINSYS			eddy
	Some platforms like to specify the window-management system they're
	using, as part of their native GetOSString.  They can achieve that here by
	setting this to a suitable string, ending (if non-empty) in a semicolon
	and a space (QWS: "Qt embedded; ", X11/QT: "X11; ", photon: "Photon; ").

	Value: ""
	Define: POSIX_WINSYS_PREFIX
	Category: setting
	Depends on: API_POSIX_HOST
	Disabled for: desktop, mini, minimal, smartphone, tv

TWEAK_POSIX_DEFAULT_TIMESCALE		deprecated
	Made redundant by PosixSelector::Poll (since open_1_beta_6)

TWEAK_POSIX_DUMMY_TIMESCALE		deprecated
	Made redundant by PosixSelector::Poll (since open_1_beta_6)

TWEAK_POSIX_IMAGINARY_PATH		deprecated
	Became irrelevant when OpSystemInfo's PathsEqualL() was replaced with
	PathsEqual(), before open_1_beta_0_patch_5 (deprecated since open_1_beta_1).

TWEAK_POSIX_MIXED_SOCKADDR		deprecated
	Replaced by API_POSIX_MIXED_SOCKADDR (since open_1_beta_0_patch_3)

TWEAK_POSIX_SERIALIZE_FILENAME		deprecated
	Replaced by API_POSIX_SERIALIZE_FILENAME (since open_0_final_1_patch_1)

TWEAK_POSIX_STATIC_ASSERT_EAR		deprecated
	Use TWEAK_POSIX_GLOBAL_ASSERT_EAR instead (since open_0_final_1)

# See second line: alphabetic order !
# If everyone adds everything here, every merge gets conflicts.
