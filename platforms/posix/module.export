# Hey, emacs, please use -*- tab-width: 4; fill-column: 80; -*- thanks.
# Hey, developers - please add new entries in *alphabetic order*.

API_POSIX_ASYNC			eddy
	Support various asynchronous operations and interfaces.  Internal APIs
	which need this force an import of it for you, so you shouldn't need to
	think about it unless you use the externally visible PosixSignalWatcher
	API (q.v.).

	However, if you don't define THREAD_SUPPORT (see CORE-12504), note that
	the implementation of this API attempts to work within the core thread,
	as best it can.  That may lead to significant stalls in responsiveness;
	and this mode of operation has not been much tested, so it may be broken
	in various ways.  In short, if you need asynchronous operations, you
	should probably also #define THREAD_SUPPORT where you set your features,
	even if none of your code directly uses threads.

	Defines: POSIX_OK_ASYNC

API_POSIX_AUTOUPDATE_CHECKER		mpawlowski
	Enables the use of POSIX implementation of auto update checker.

	Define: POSIX_AUTOUPDATECHECKER_IMPLEMENTATION

API_POSIX_CLOCK			eddy
	Implement PosixTimeInfo's clock and resolution APIs.

	Defines: POSIX_OK_CLOCK

API_POSIX_DEBUG			eddy
	Implement the debug module's porting interfaces, in so far as
	the relevant APIs of the debug module are active.

	Defines: POSIX_OK_DEBUG

API_POSIX_DIR			eddy
	Implement OpFolderLister.
	Requires stat, realpath, opendir, readdir, fnmatch.

	Defines: POSIX_OK_DIR

API_POSIX_DNS			eddy
	Implement DNS lookup (resolver) using POSIX.  Note that this probably
	conflicts with FEATURE_INTERNAL_HOST_RESOLVER, if enabled.

	Defines: POSIX_OK_DNS

API_POSIX_FILE			eddy
	Implement OpLowLevelFile.  Requires umask, stat, fstat, access, fcntl,
	fopen, fclose, close, fileno, ftell, fseek, fwrite, fread, fgets, feoe,
	ferror, clearerr, mkstemp, fflush, fsync (and fdatasync where
	available), rename, chmod, rmdir, unlink, ftruncate and errno.

	With glibc, requires that _GNU_SOURCE is defined, and _LARGEFILE64_SOURCE
	set to 1 before including <pthread.h> (posix/sys/posix_choice.h does that
	for you).

	Defines: POSIX_OK_FILE

API_POSIX_FILE_EXTENDED		eddy
	This is a (hopefully) temporary API, which desktop should import (as
	well as as setting TWEAK_POSIX_LOWFILE_BASE, q.v.) to include support
	for Move, Stat and ReadLine functionality in low-level files.  We'll see
	if pi's owner can be persuaded to make DesktopOpLowLevelFile redundant ...

	Defines: POSIX_EXTENDED_FILE

API_POSIX_FILE_UTIL		eddy
	Provide PosixFileUtil.  With API_POSIX_SYS_LOCALE, implements
	PosixSystemInfo::GetIsExecutable(), if required.  With API_POSIX_NATIVE,
	implements PosixSystemInfo::PathsEqual().  Requires access, umask,
	mkdir, realpath, stat.

	Defines: POSIX_OK_FILE_UTIL
	Depends on: HAVE_GETENV

API_POSIX_HOST			eddy
	Support GetPlatformStr in PosixSystemInfo and GetOSString in
	PosixUAComponentManager.
	Needs suitable uname.

	Defines: POSIX_OK_HOST

API_POSIX_IRREGULAR		eddy
	Provide the PosixIrregular form of MessageObject, for handling an event
	which needs to happen repeatedly but the frequency with which it's
	needed is apt to vary enough to make it worth dynamically varying how
	often we poll the object.  This is sub-optimal: it is always better to
	avoid the heart-beat it implies; see MANTLE-922 for work on making it
	redundant.

	Defines: POSIX_OK_IRREGULAR

API_POSIX_LOCALE		eddy
	Implement OpLocale.
	Requires strcoll/wcs[ni]*coll, strftime, snprintf and, if
	TWEAK_POSIX_HAS_LANGINFO is on, nl_langinfo.

	Defines: POSIX_OK_LOCALE

API_POSIX_LOG			eddy
	Provides PosixLogManager *g_opera->posix_module.GetLoggingManager() via
	which to configure logging of various things going on inside the module,
	notably DNS look-up.

	Defines: POSIX_OK_LOG

API_POSIX_LOGGER		markuso
	Provide the class PosixLogger. That class is used by most other Posix
	classes for standard logging and emitting an error message. The api
	is imported by any other api that uses it.

	Defines: POSIX_OK_LOGGER

API_POSIX_LOG_STDIO		eddy
	Add-on to API_POSIX_LOG: provides the most obvious PosixLogListener,
	implemented using stdio, as PosixLogToStdIO (q.v.).

	Defines: POSIX_OK_LOG_STDIO

API_POSIX_MAIN_THREAD		eddy
	Implement OpThreadTools.  When used with THREAD_SUPPORT (pretty useless
	without) it depends on API_POSIX_THREAD.  However, THREAD_SUPPORT isn't
	defined until after tweak and API processing, so the tweak and API
	system can't automatically mediate that for you.

	Currently uses PosixIrregular (q.v. for issues) until MANTLE-922 is
	resolved.

	Defines: POSIX_OK_MAIN_THREAD
	Depends on: API_PI_OP_THREAD_TOOLS

API_POSIX_MDE_MMAP			simonb
	Implement MDE_MMapping to provide the platform implementations required by
	TWEAK_LIBGOGI_USE_MMAP.

	Defines: POSIX_OK_MDE_MMAP
	Depends on: TWEAK_LIBGOGI_USE_MMAP

API_POSIX_MEMLOCK		eddy
	Implement OpMemory's locking APIs, see API_PI_OPMEMORY_*_LOCK, using
	static PosixMutex objects; complements API_POSIX_MEMORY.  Note that this
	violates core's policies against global variables (this is unavoidable:
	the lock objects have to exist before any memory is allocated, hence
	before g_opera has been created, let alone InitL()'d).

	Defines: POSIX_OK_MEMLOCK
	Depends on: OPMEMORY_MALLOC_LOCK
	Depends on: OPMEMORY_MEMDEBUG_LOCK

API_POSIX_MEMORY		eddy
	Implement OpMemory's memory segment functionality using POSIX APIs (as
	portably as possible, currently based on mmap(): support beyond Linux
	and FreeBSD has yet to be researched).  See API_PI_OPMEMORY_*; this
	complements API_POSIX_MEMLOCK.  API_PI_OPMEMORY_MEMORY_SEGMENT is
	currently incomplete (no segment support, allegedly not crucial) and
	untested.

	The support for executable memory (i.e. Carakan) is limited to the large
	memory model; i.e. TWEAK_MEMORY_SMALL_EXEC_SEGMENTS needs to be NO.

	Defines: POSIX_OK_MEMORY
	Depends on: API_PI_OPMEMORY_ALIGNED_SEGMENT
	Depends on: API_PI_OPMEMORY_EXECUTABLE_SEGMENT
	Depends on: API_PI_OPMEMORY_MEMORY_SEGMENT
	Depends on: API_PI_OPMEMORY_STACK_SEGMENT
	Depends on: API_PI_OPMEMORY_VIRTUAL_MEMORY
	Conflicts with: TWEAK_MEMORY_SMALL_EXEC_SEGMENTS

API_POSIX_MIXED_SOCKADDR	eddy
	The posix implementation of OpSocketAddress can co-exist with some other
	implementation; if this is required, import this API.  Otherwise,
	assorted code in this module shall take for granted that any
	OpSocketAddress* it sees actually points to a PosixSocketAddress.

	When mixing socket address types, PosixSocketAddress also leaves out its
	implementation of OpSocketAddress::Create: you need to implement that
	yourself, chosing which socket address type to use - OpSocketAddress is
	declared a friend of PosixSocketAddress, so its Create() can still call
	the constructor.  You also, naturally, need to ensure your other type(s)
	that interact with OpSocketAddress cope with mixing - see
	CommonSocketAddress, a re-usable base class to simplify this, and
	PosixHostResolver::GetAddress() for illustrations of how to do it.

	This is most likely only relevant if you are using one of API_POSIX_DNS
	and API_POSIX_SOCKET (each of which uses API_POSIX_SOCKADDR internally),
	combined with a platform-specific implementation of the other.

	Defines: MIXED_SOCKETRY
	Depends on: API_POSIX_SOCKADDR

API_POSIX_MISC			eddy
	Small amounts of light-weight content in this module, that would otherwise
	not depend on any API of this module, are conditioned on this API;
	e.g. PosixNativeUtil's more primitive (and light-weight) parts.  It is
	automatically imported by other parts of this module, as needed.

	Defines: POSIX_OK_MISC

API_POSIX_MODULE		eddy
	Internal API to control whether POSIX_MODULE_REQUIRED needs to be set.

	Defines: POSIX_OK_MODULE

API_POSIX_NATIVE		eddy
	Includes OpFileLengthToString and its converse in OpSystemInfo.
	Provides the PosixNativeUtil namespace (see posix_native_util.h).  In
	fact, that namespace (which is actually a class, for the sake of
	platforms without namespace support) is provided in any case, with its
	AffirmativeEnvVar(const char*) method, for use by this module's module
	object.  However, the rest of the name-space is conditional on this API.

	Requires wcstombs, wctomb, mbstowcs, mbtowc.  Currently only supports
	platforms where uni_char and the native library wchar_t don't match;
	this is due some fixing !  Takes getenv for granted.

	Defines: POSIX_OK_NATIVE
	Depends on: HAVE_GETENV

API_POSIX_NETADDR		eddy
	Enable the internal PosixNetworkAddress class, extending the
	OpSocketAddress API to include various things needed internally (and by
	implementations of PosixSelector).

	Defines: POSIX_OK_NETADDR

API_POSIX_NETIF			eddy
	Enable the internal network interface support, used by the network
	interface manager and by system-info's interface detection.

	Defines: POSIX_OK_NETIF

API_POSIX_NETWORK		eddy
	Management of network connections, presently only reporting status on
	potentially many interfaces: see OpNetworkInterfaceManager in pi,
	controlled by API_PI_NETWORK_INTERFACE_MANAGER.  The implementation here
	is incomplete, since POSIX doesn't provide APIs for some of what the pi
	asks for; see TWEAK_POSIX_PARTIAL_NETMAN.

	Defines: POSIX_OK_NETWORK
	Depends on: API_PI_NETWORK_INTERFACE_MANAGER

API_POSIX_PATH			eddy
	Various locale-implicating path-related functionalities in OpSystemInfo.

	Defines: POSIX_OK_PATH

API_POSIX_PROCESS		eddy
	Implement OpSystemInfo::ExecuteApplication (and GetCurrentProcessId),
	if relevant.

	PosixSystemInfo::GetBinaryPath implementations also depend on this
	API. (The implementation of this function is tweakable, see tweaks
	that import API_POSIX_SYS_GETBINARYPATH).

	Defines: POSIX_OK_PROCESS

API_POSIX_SELECT		eddy
	Provide the PosixSelector framework for using select/pselect/poll.
	Platforms which use a tool-kit (e.g. Qt) which provides its own select()
	infrastructure should implement PosixSelector on top of that (see
	unix/base/qt/qt_selector.{h,cpp} for an example); otherwise, enabling
	one of the TWEAK_POSIX_SELECTOR_* tweaks will give you various
	implementations.  You will need to include a call to
	g_posix_selector->Poll(timeout) in your main loop.

	Defines: POSIX_OK_SELECT

API_POSIX_SELECT_CALLBACK	eddy
	Support the {add,remove}SocketCallback interface used by
	OperaLibnppSetSocketWatcher (see ns4plugins/src/pluginlib.cpp).

	Defines: POSIX_OK_SELECT_CALLBACK
	Depends on: API_PLUGIX_PLUGINS

API_POSIX_SERIALIZE_FILENAME	eddy
	Support a non-fatuous serialized form for file names (see
	OpLowLevelFile's GetSerializedName and the serialized argument to
	Create).  This is implemented by the static {De,En}codeEnvironment()
	methods of PosixFileUtil, but PosixLowLevelFile accesses them via
	methods of PosixSystemInfo, to provide for platforms (notably Mac) to
	extend the serialization with their own complications.

	For de-serialization, OpSystemInfo::ExpandSystemVariablesInString() is
	used; for serialization, PosixSystemInfo adds an extension,
	SerializeFileName().  This last is relatively conservative: it escapes
	all (prior, unescaped) uses of $ and may replace the value of one
	environment variable with a reference to that variable, but only if the
	value is a leading prefix of the file name, followed by a PATHSEP, and
	the environment variable is one of: OPERA_PERSONALDIR, OPERA_BINARYDIR,
	OPERA_HOME, OPERA_DIR and HOME (in this order).  In the case of HOME, ~
	is used in preference to $HOME if TWEAK_POSIX_TILDE_EXPANSION is active.

	Unless ExpandSystemVariablesInString() is the one provided by this
	PosixSystemInfo, you have no guarantee that what GetSerializedName
	returns shall be read back in faithfully.  Derived classes which
	over-ride either should over-ride the other to match.

	Defines: POSIX_SERIALIZE_FILENAME

API_POSIX_SETENV		eddy
	Implements PosixModule::Environment, providing the means to set
	environment variables persistently.

	Defines: POSIX_OK_SETENV
	Depends on: HAVE_GETENV

API_POSIX_SET_GOGI_BASE_FOLDER	eddy
	Provides a getenv-based implementation of the call-back required by
	TWEAK_GOGI_BASE_FOLDERS_CALLBACK.

	Defines: POSIX_SET_GOGI_BASE_FOLDER
	Depends on: TWEAK_GOGI_BASE_FOLDERS_CALLBACK

API_POSIX_SHARED_MEMORY		mpawlowski
	Provides an implementation of OpSharedMemory and OpSharedMemoryMutex.
	The implementation uses POSIX semaphores. This requires to link the binary
	against the real-time library librt, so compile with flags -lrt.

	Defines: POSIX_OK_SHARED_MEMORY

API_POSIX_SIGNAL		eddy
	Provide PosixSignalWatcher and its associated listener.

	Defines: POSIX_OK_SIGNAL

API_POSIX_SO			eddy
	Implement OpDLL.  Current implementation only works for
	DLL_NAME_LOOKUP_SUPPORT, this may be remedied later.

	Requires dlopen, dlcose, dlsym and dlerror (modulo hacks on HP-UX).

	Defines: POSIX_OK_SO
	Depends on: DLL_NAME_LOOKUP_SUPPORT

API_POSIX_SOCKADDR		eddy
	Provide PosixSocketAddress (implementing OpSocketAddress) and
	PosixNetworkAddress (extending it for use by classes in this module and
	others based on them); by default, also uses the former to implement
	OpSocketAddress::Create(), but see API_POSIX_MIXED_SOCKADDR.
	Automatically imported if DNS, NETWORK, SOCKET or UDP_SOCKET is
	imported.

	Defines: POSIX_OK_SOCKADDR

API_POSIX_SOCKET		eddy
	Implement OpSocket using APIs provided by POSIX.

	Note: If you import this API, then the pi api
	API_PI_OPSYSTEMINFO_GETSYSTEMIP is imported automatically and
	PosixSystemInfo provides an implementation for
	OpSystemInfo::GetSystemIp().

	Defines: POSIX_OK_SOCKET

API_POSIX_SYS			eddy
	Implement such of OpSystemInfo as POSIX provides.  See also time,
	process, locale, host and file APIs and this module's tweaks.

	Defines: POSIX_OK_SYS

API_POSIX_SYS_GETBINARYPATH		eddy
	Internal API: posix has an implementation of OpSystemInfo::GetBinaryPath().

	Define: POSIX_HAS_GETBINARYPATH

API_POSIX_SYSINFO_EXTENDED	eddy
	This is an API for desktop to import (as well as as setting
	TWEAK_POSIX_SYSINFO_BASE, q.v.) to include support for the illegal
	filename character functionality in system info.

	Defines: POSIX_EXTENDED_SYSINFO

API_POSIX_SYS_LOCALE		eddy
	PosixSystemInfo's GetSystemEncodingL and ExpandSystemVariablesInString.
	See also: TWEAK_POSIX_HAS_LANGINFO.

	Defines: POSIX_OK_SYS_LOCALE
	Depends on: HAVE_GETENV

API_POSIX_THREAD		eddy
	Implement the posix thread utilities (see posix_thread_util.h).
	Pretty useless without THREAD_SUPPORT !

	Enabling this will also add thread support to the implementation of
	API_POSIX_MAIN_THREAD (q.v.), if it's enabled.

	Requires <pthread.h> and its assorted functions.
	Copes with HP-UX idiosyncrasies.
	With glibc, requires that _GNU_SOURCE is defined before including
	<pthread.h> (posix/sys/posix_choice.h does that for you).

	Defines: POSIX_OK_THREAD

API_POSIX_TIME_ZONE		eddy
	Implement PosixTimeInfo's time-zone and daylight-saving APIs.

	Defines: POSIX_OK_TIME_ZONE

API_POSIX_UDP_SOCKET		eddy
	Implement OpUdpSocket using APIs provided by POSIX.

	Defines: POSIX_OK_UDP
	Depends on: API_PI_UDP_SOCKET

# See second line: alphabetic order !
# If everyone adds everything here, every merge gets conflicts.
