/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quix.GtkToolkitLibrary";
require _UNIX_DESKTOP_;

include "platforms/quix/toolkits/ToolkitLoader.h";
include "platforms/quix/toolkits/ToolkitLibrary.h";
include "platforms/quix/toolkits/ToolkitUiSettings.h";

global
{
	ToolkitLoader loader;
	ToolkitLibrary* library = 0;
};

test("Create GTK toolkit library object")
{
	verify(OpStatus::IsSuccess(loader.Init(DesktopEnvironment::TOOLKIT_GTK)));

	library = loader.CreateToolkitLibrary();

	verify(library);
}

test("Get native skin elements")
	require success "Create GTK toolkit library object";
{
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_SCROLLBAR_VERTICAL_UP));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_SCROLLBAR_VERTICAL_DOWN));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_SCROLLBAR_HORIZONTAL_LEFT));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_SCROLLBAR_HORIZONTAL_RIGHT));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_SCROLLBAR_HORIZONTAL_KNOB));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_SCROLLBAR_VERTICAL_KNOB));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_SCROLLBAR_HORIZONTAL));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_SCROLLBAR_VERTICAL));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_DROPDOWN_BUTTON));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_DROPDOWN));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_DROPDOWN_EDIT));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_PUSH_BUTTON));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_PUSH_DEFAULT_BUTTON));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_RADIO_BUTTON));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_CHECKBOX));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_EDIT));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_MULTILINE_EDIT));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_LISTBOX));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_DIALOG));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_DIALOG_PAGE));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_BROWSER_WINDOW));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_WINDOW));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_DIALOG_TAB_PAGE));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_TAB_BUTTON));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_TABS));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_MENU));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_MENU_BUTTON));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_MENU_RIGHT_ARROW));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_POPUP_MENU));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_POPUP_MENU_BUTTON));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_LISTITEM));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_SLIDER_HORIZONTAL_TRACK));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_SLIDER_HORIZONTAL_KNOB));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_HEADER_BUTTON));
	verify(TestForNativeSkinElement(NativeSkinElement::NATIVE_TREEVIEW));
}

subtest TestForNativeSkinElement(NativeSkinElement::NativeType type)
{
	OpAutoPtr<NativeSkinElement> element (library->GetNativeSkinElement(type));
	verify(element.get());

	const int width = 100;
	const int height = 100;
	uint32_t bitmap[width * height];
	for (int state = 0; state < NativeSkinElement::STATE_COUNT; state++)
	{
		op_memset(bitmap, 0xa5, width * height * 4);
		element->Draw(bitmap, width, height,
					  NativeSkinElement::NativeRect(0, 0, width, height), state);

		bool drawn_something = false;
		for (size_t i = 0; i < width * height && !drawn_something; i++)
		{
			drawn_something |= (bitmap[i] != 0xa5a5a5a5 && bitmap[i] != 0xffff0000);
		}

		verify(drawn_something);
	}
}

test("Default button is on right")
	require success "Create GTK toolkit library object";
{
	ToolkitUiSettings* settings = library->GetUiSettings();
	verify(settings);

	verify(settings->DefaultButtonOnRight());
}

test("Get UI colors")
	require success "Create GTK toolkit library object";
{
	ToolkitUiSettings* settings = library->GetUiSettings();
	verify(settings);

	for (int i = 0; i < ToolkitUiSettings::COLOR_COUNT; i++)
	{
		uint32_t color = settings->GetSystemColor((ToolkitUiSettings::SystemColor)i);
		verify(color != 0);
	}
	verify(settings->GetSystemColor(ToolkitUiSettings::COLOR_TEXT) != settings->GetSystemColor(ToolkitUiSettings::COLOR_BACKGROUND));
}

test("Get default font")
	require success "Create GTK toolkit library object";
{
	ToolkitUiSettings* settings = library->GetUiSettings();
	verify(settings);

	ToolkitUiSettings::FontDetails font;
	verify(settings->GetDefaultFont(font));

	verify(strcmp(font.family, "Sans") == 0);
	verify(font.weight == 4);
	verify(font.italic == false);
	verify(font.smallcaps == false);
	verify(font.size == 10);
}

exit
{
	/* Can not delete library while it is still in use by the skin
	 * code.
	 */
	//OP_DELETE(library);
};
