/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 * @author Arjan van Leeuwen (arjanl)
 */

group "quix.UnixOpSkinElement";
require _UNIX_DESKTOP_;

include "platforms/quix/skin/UnixOpSkinElement.h";
include "platforms/quix/toolkits/NativeSkinElement.h";
include "modules/pi/OpBitmap.h";

global
{
	class MockNativeSkinElement : public NativeSkinElement
	{
		virtual void Draw(uint32_t* bitmap, int width, int height, const NativeRect& clip_rect, int state)
		{
			for (int i = 0; i < width * height; i++)
			{
				int y = i / width;
				int x = i % width;
				if ((x < 2 && y < 2) || (x >= 2 && y >= 2))
					bitmap[i] = 0xff000000;
				else
					bitmap[i] = 0xffffffff;
			}
		}

		virtual void ChangeDefaultPadding(int& left, int& top, int& right, int& bottom, int state)
		{
			left = 1;
			top = 2;
			right = 3;
			bottom = 4;
		}

		virtual void ChangeDefaultMargin(int& left, int& top, int& right, int& bottom, int state)
		{
			left = 1;
			top = 2;
			right = 3;
			bottom = 4;
		}

		virtual void ChangeDefaultSize(int& width, int& height, int state)
		{
			width++;
			height++;
		}

		virtual void ChangeDefaultTextColor(uint8_t& red, uint8_t& green, uint8_t& blue, uint8_t& alpha, int state)
		{
			if (state & NativeSkinElement::STATE_HOVER)
				red = green = blue = alpha = 0xff;
		}

		virtual void ChangeDefaultSpacing(int& spacing, int state)
		{
			spacing = 2;
		}
	};

	class MockUnixOpSkinElement : public UnixOpSkinElement
	{
	public:
		class StateElement : public OpSkinElement::StateElement
		{
		};
	};
};

test("Element is drawn")
{
	// native_element is OP_DELETEd in element's destructor
	MockNativeSkinElement * native_element = OP_NEW(MockNativeSkinElement, ());
	UnixOpSkinElement element(native_element, 0, 0, SKINTYPE_DEFAULT, SKINSIZE_DEFAULT);

	OpBitmap* bitmap = element.GetBitmap(4, 4, 0);

	verify(bitmap);
	verify(bitmap->Width() == 4);
	verify(bitmap->Height() == 4);

	for (int i = 0; i < 4; i++)
	{
		UINT32 line[4];
		verify(bitmap->GetLineData(&line, i));
		for (int j = 0; j < 4; j++)
		{
			if ((i < 2 && j < 2) || (i >= 2 && j >= 2))
				verify(line[j] == 0xff000000);
			else
				verify(line[j] == 0xffffffff);
		}
	}
}

test("Change default padding")
{
	// native_element is OP_DELETEd in element's destructor
	MockNativeSkinElement * native_element = OP_NEW(MockNativeSkinElement, ());
	UnixOpSkinElement element(native_element, 0, 0, SKINTYPE_DEFAULT, SKINSIZE_DEFAULT);
	MockUnixOpSkinElement::StateElement state_element;

	state_element.m_padding_left = 0;
	state_element.m_padding_top = 0;
	state_element.m_padding_right = 0;
	state_element.m_padding_bottom = 0;

	element.OverrideDefaults(&state_element);

	verify(state_element.m_padding_left == 1);
	verify(state_element.m_padding_top == 2);
	verify(state_element.m_padding_right == 3);
	verify(state_element.m_padding_bottom == 4);
}

test("Change default margin")
{
	// native_element is OP_DELETEd in element's destructor
	MockNativeSkinElement * native_element = OP_NEW(MockNativeSkinElement, ());
	UnixOpSkinElement element(native_element, 0, 0, SKINTYPE_DEFAULT, SKINSIZE_DEFAULT);
	MockUnixOpSkinElement::StateElement state_element;

	state_element.m_margin_left = 0;
	state_element.m_margin_top = 0;
	state_element.m_margin_right = 0;
	state_element.m_margin_bottom = 0;

	element.OverrideDefaults(&state_element);

	verify(state_element.m_margin_left == 1);
	verify(state_element.m_margin_top == 2);
	verify(state_element.m_margin_right == 3);
	verify(state_element.m_margin_bottom == 4);
}

test("Change size")
{
	// native_element is OP_DELETEd in element's destructor
	MockNativeSkinElement * native_element = OP_NEW(MockNativeSkinElement, ());
	UnixOpSkinElement element(native_element, 0, 0, SKINTYPE_DEFAULT, SKINSIZE_DEFAULT);
	MockUnixOpSkinElement::StateElement state_element;

	state_element.m_width = 5;
	state_element.m_height = 7;

	element.OverrideDefaults(&state_element);

	// Mock increases size by one
	verify(state_element.m_width == 6);
	verify(state_element.m_height == 8);
}

test("Change text color")
{
	// native_element is OP_DELETEd in element's destructor
	MockNativeSkinElement * native_element = OP_NEW(MockNativeSkinElement, ());
	UnixOpSkinElement element(native_element, 0, 0, SKINTYPE_DEFAULT, SKINSIZE_DEFAULT);
	MockUnixOpSkinElement::StateElement state_element;
	COLORREF black = OP_RGBA(0x00, 0x00, 0x00, 0xff);
	COLORREF white = OP_RGBA(0xff, 0xff, 0xff, 0xff);

	state_element.m_text_color = black;

	element.OverrideDefaults(&state_element);

	// Mock doesn't change color in normal state
	verify(state_element.m_text_color == black);

	state_element.m_state = SKINSTATE_HOVER;
	element.OverrideDefaults(&state_element);

	// Mock changes color to white in state SKINSTATE_HOVER
	verify(state_element.m_text_color == white);
}

test("Not crashing with a gigantic element")
{
	// native_element is OP_DELETEd in element's destructor
	MockNativeSkinElement * native_element = OP_NEW(MockNativeSkinElement, ());
	UnixOpSkinElement element(native_element, 0, 0, SKINTYPE_DEFAULT, SKINSIZE_DEFAULT);

	OpBitmap* bitmap = element.GetBitmap(0x8000, 0x8000, 0);

	verify(bitmap == 0);
}

