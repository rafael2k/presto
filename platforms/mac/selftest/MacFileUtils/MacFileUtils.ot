/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*-
**
** Copyright (C) 1995-2008 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "mac.macfileutils";
require _MACINTOSH_;

include "platforms/mac/File/FileUtils_Mac.h";

test("MacFileUtils")
{
	FSRef fsref;
	Boolean	ok = OpFileUtils::ConvertUniPathToFSRef(UNI_L("/System/Library"), fsref);
	verify(ok);

	OpString path;
	OP_STATUS status = OpFileUtils::ConvertFSRefToUniPath(&fsref, &path);
	verify(OpStatus::IsSuccess(status));
	verify(path.Compare("/System/Library") == 0);
}

test("ExpandSystemVariablesInString {Resources}")
{
	OpString res_dir, large_dir, small_dir, result;
	uni_char serialised[MAX_PATH], unserialised[MAX_PATH];
	
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_RESOURCES_FOLDER, res_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_LOCAL_HOME_FOLDER, large_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_HOME_FOLDER, small_dir)));

	// Test {Resources}
	uni_strcpy(serialised, UNI_L("{Resources}Test/1/2/3"));
	verify(OpStatus::IsSuccess(OpFileUtils::ExpandSystemVariablesInString(serialised, unserialised, MAX_PATH, res_dir, large_dir, small_dir)));
	verify(OpStatus::IsSuccess(result.Set(res_dir)));
	verify(OpStatus::IsSuccess(result.Append(UNI_L("Test/1/2/3"))));
	verify(result.Compare(unserialised) == 0);
}

test("ExpandSystemVariablesInString {LargePrefs}")
{
	OpString res_dir, large_dir, small_dir, result;
	uni_char serialised[MAX_PATH], unserialised[MAX_PATH];
	
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_RESOURCES_FOLDER, res_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_LOCAL_HOME_FOLDER, large_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_HOME_FOLDER, small_dir)));

	// Test {LargePrefs}
	uni_strcpy(serialised, UNI_L("{LargePrefs}Test/1/2/3"));
	verify(OpStatus::IsSuccess(OpFileUtils::ExpandSystemVariablesInString(serialised, unserialised, MAX_PATH, res_dir, large_dir, small_dir)));
	verify(OpStatus::IsSuccess(result.Set(large_dir)));
	verify(OpStatus::IsSuccess(result.Append(UNI_L("Test/1/2/3"))));
	verify(result.Compare(unserialised) == 0);
}

test("ExpandSystemVariablesInString {SmallPrefs}")
{
	OpString res_dir, large_dir, small_dir, result;
	uni_char serialised[MAX_PATH], unserialised[MAX_PATH];
	
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_RESOURCES_FOLDER, res_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_LOCAL_HOME_FOLDER, large_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_HOME_FOLDER, small_dir)));

	// Test {SmallPrefs}
	uni_strcpy(serialised, UNI_L("{SmallPrefs}Test/1/2/3"));
	verify(OpStatus::IsSuccess(OpFileUtils::ExpandSystemVariablesInString(serialised, unserialised, MAX_PATH, res_dir, large_dir, small_dir)));
	verify(OpStatus::IsSuccess(result.Set(small_dir)));
	verify(OpStatus::IsSuccess(result.Append(UNI_L("Test/1/2/3"))));
	verify(result.Compare(unserialised) == 0);
}

test("ExpandSystemVariablesInString {Users}")
{
	OpString res_dir, large_dir, small_dir, result;
	uni_char serialised[MAX_PATH], unserialised[MAX_PATH];
	
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_RESOURCES_FOLDER, res_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_LOCAL_HOME_FOLDER, large_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_HOME_FOLDER, small_dir)));

	// Test {Users}
	uni_strcpy(serialised, UNI_L("{Users}Test/1/2/3"));
	verify(OpStatus::IsSuccess(OpFileUtils::ExpandSystemVariablesInString(serialised, unserialised, MAX_PATH, res_dir, large_dir, small_dir)));
	verify(OpStatus::IsSuccess(OpFileUtils::FindFolder(kCurrentUserFolderType, result, false)));
	verify(OpStatus::IsSuccess(result.Append(UNI_L("Test/1/2/3"))));
	verify(result.Compare(unserialised) == 0);
}

test("SerializeFileName {Resources}")
{
	OpString res_dir, large_dir, small_dir, result;
	uni_char serialised[MAX_PATH], unserialised[MAX_PATH];
	
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_RESOURCES_FOLDER, res_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_LOCAL_HOME_FOLDER, large_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_HOME_FOLDER, small_dir)));

	// Test {Resources}
	uni_strcpy(unserialised, res_dir.CStr());
	uni_strcat(unserialised, UNI_L("Test/1/2/3"));
	verify(OpStatus::IsSuccess(OpFileUtils::SerializeFileName(unserialised, serialised, MAX_PATH, res_dir, large_dir, small_dir)));
	verify(OpStatus::IsSuccess(result.Set(UNI_L("{Resources}Test/1/2/3"))));
	verify(result.Compare(serialised) == 0);
}

test("SerializeFileName {LargePrefs}")
{
	OpString res_dir, large_dir, small_dir, result;
	uni_char serialised[MAX_PATH], unserialised[MAX_PATH];
	
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_RESOURCES_FOLDER, res_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_LOCAL_HOME_FOLDER, large_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_HOME_FOLDER, small_dir)));

	// Test {LargePrefs}
	uni_strcpy(unserialised, large_dir.CStr());
	uni_strcat(unserialised, UNI_L("Test/1/2/3"));
	verify(OpStatus::IsSuccess(OpFileUtils::SerializeFileName(unserialised, serialised, MAX_PATH, res_dir, large_dir, small_dir)));
	verify(OpStatus::IsSuccess(result.Set(UNI_L("{LargePrefs}Test/1/2/3"))));
	verify(result.Compare(serialised) == 0);
}

test("SerializeFileName {SmallPrefs}")
{
	OpString res_dir, large_dir, small_dir, result;
	uni_char serialised[MAX_PATH], unserialised[MAX_PATH];
	
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_RESOURCES_FOLDER, res_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_LOCAL_HOME_FOLDER, large_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_HOME_FOLDER, small_dir)));

	// Test {SmallPrefs}
	uni_strcpy(unserialised, small_dir.CStr());
	uni_strcat(unserialised, UNI_L("Test/1/2/3"));
	verify(OpStatus::IsSuccess(OpFileUtils::SerializeFileName(unserialised, serialised, MAX_PATH, res_dir, large_dir, small_dir)));
	verify(OpStatus::IsSuccess(result.Set(UNI_L("{SmallPrefs}Test/1/2/3"))));
	verify(result.Compare(serialised) == 0);
}

test("SerializeFileName {Users}")
{
	OpString res_dir, large_dir, small_dir, user_dir, result;
	uni_char serialised[MAX_PATH], unserialised[MAX_PATH];
	
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_RESOURCES_FOLDER, res_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_LOCAL_HOME_FOLDER, large_dir)));
	verify(OpStatus::IsSuccess(g_folder_manager->GetFolderPath(OPFILE_HOME_FOLDER, small_dir)));

	// Test {Users}
	verify(OpStatus::IsSuccess(OpFileUtils::FindFolder(kCurrentUserFolderType, user_dir, false)));
	uni_strcpy(unserialised, user_dir.CStr());
	uni_strcat(unserialised, UNI_L("Test/1/2/3"));
	verify(OpStatus::IsSuccess(OpFileUtils::SerializeFileName(unserialised, serialised, MAX_PATH, res_dir, large_dir, small_dir)));
	verify(OpStatus::IsSuccess(result.Set(UNI_L("{Users}Test/1/2/3"))));
	verify(result.Compare(serialised) == 0);
}


