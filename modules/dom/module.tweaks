TWEAK_DOM_INTERVAL_LENGTH_LIMIT                 jl

        Defines, in milliseconds, how long a script interval needs to
        be to not be considered suspiciously short.  Intervals shorter
        than this will be extended to this value if repeated enough,
        to avoid "busy-looping" scripts.

        Affects performance in two ways: if set too low, high CPU
        usage can occur on silly pages, especially if the system is
        slow (so each timed script executes for a long time compared
        to the length of its timeout.)  If set too high, Opera may
        appear slow simply because it spends more time waiting for
        timeouts than really requested by the page.

        If set lower than the system's timer resolution the value
        doesn't matter too much, but beware that "0" would allow
        zero-length timeouts that do work regardless of how poor timer
        resolution the system might have.

        A value lower than 4 would violate the HTML5 specification.

        See also TWEAK_DOM_INTERVAL_DURATION_LIMIT and TWEAK_DOM_TIMEOUT_LENGTH_LIMIT.

        Category:     performance
        Define:       DOM_INTERVAL_LENGTH_LIMIT
        Value:        4
        Disabled for: desktop, tv, smartphone, minimal, mini

TWEAK_DOM_TIMEOUT_LENGTH_LIMIT                 jl

        Defines, in milliseconds, how long a script timeout needs to
        be to not be considered suspiciously short.  Timeouts shorter
        than this will be extended to this value if repeated enough,
        to avoid "busy-looping" scripts.

        Affects performance in two ways: if set too low, high CPU
        usage can occur on silly pages, especially if the system is
        slow (so each timed script executes for a long time compared
        to the length of its timeout.)  If set too high, Opera may
        appear slow simply because it spends more time waiting for
        timeouts than really requested by the page.

        If set lower than the system's timer resolution the value
        doesn't matter too much, but beware that "0" would allow
        zero-length timeouts that do work regardless of how poor timer
        resolution the system might have.

        See also TWEAK_DOM_INTERVAL_DURATION_LIMIT and TWEAK_DOM_INTERVAL_LENGTH_LIMIT.

        A value lower than 4 would violate the HTML5 specification.

        Category:     performance
        Define:       DOM_TIMEOUT_LENGTH_LIMIT
        Value:        4
        Disabled for: desktop, tv, smartphone, minimal, mini

TWEAK_DOM_INTERVAL_COUNT_LIMIT                  deprecated

        Replaced by TWEAK_DOM_INTERVAL_DURATION_LIMIT.

TWEAK_DOM_INTERVAL_DURATION_LIMIT               deprecated

        Removed since HTML5 now have decreased the limit to 4 ms. Small enough
	to please evereyone.

TWEAK_DOM_SHORTEN_SHORT_DELAYS                  markus

        Disallow repeating delays and delays longer than 2 seconds. Shorter
        delays are handled immediately.

        Category    : setting
        Define      : SHORTEN_SHORT_DELAYS
        Disabled for: desktop, tv, smartphone, minimal, mini

TWEAK_DOM_REFERENCE_XPATH_IMPLEMENTATION        jl

        Enables a simple, expensive, possibly incomplete but supposedly
        correct (where complete) XPath implementation.  The implementation
        manifests itself as the function Document.evaluate0, and takes the
        arguments 'expression source' and 'context node'.

        SHOULD NOT BE ENABLED IN PRODUCTION BUILDS!

        Category    : setting
        Define      : DOM_XPATH_REFERENCE_IMPLEMENTATION
        Depends on  : FEATURE_DOM3_XPATH
        Disabled for: desktop, tv, smartphone, minimal, mini

TWEAK_DOM_DSE_DEBUGGING                         jl

        Adds "dseEnabled" and "dseRecovered" properties on the "opera" object
        that indicate whether Delayed Script Execution was enabled when the
        document parsed, and whether HLDocProfile::ESRecover() ended up being
        called during the loading (an indication that DSE "failed".)

        Meant to be used for debugging of internal builds.

        Category    : setting
        Define      : DOM_DSE_DEBUGGING
        Depends on  : FEATURE_DELAYED_SCRIPTS
        Disabled for: desktop, tv, smartphone, minimal, mini

TWEAK_DOM_JSPLUGIN_GENERAL_OBJECT_HOOK                     mmurdzia

        Enables support for extending existing DOM objects using JSPlugins.
        Every access to a property that isn't native on the object itself
        will use jsplugin as some kind of immediate prototype, before
        checking the general prototype chain. This has severe performance
        and correctness implications unless done very carefully and
        correct.

        A major limitaion is that calls will not have any |this| context
        so it can only be used to return constants or values that only
        depend on the type itself.

        If the idea is to extend the dom environment, there is normally
        more efficiant more powerful solutions. Don't use this unless
        you're perfectly sure it is what you need.

        Category    : setting
        Define      : DOM_JSPLUGIN_GENERAL_OBJECT_HOOK
        Depends on  : FEATURE_JS_PLUGINS
        Disabled for: desktop, tv, smartphone, minimal, mini

TWEAK_DOM_JSPLUGIN_CUSTOM_EVENT_HOOK                      mmurdzia

        Enables a jsplugin to create specific event objects for custom
        (not predefined) events. This will add a call to jsplugins for
        all those events so it might have a small performance impact.
        Custom events can also be used by web pages for internal
        communication which means that this can break pages and web
        applications for jsplugins that are not carefully written.

        Category    : setting
        Define      : DOM_JSPLUGIN_CUSTOM_EVENT_HOOK
        Depends on  : FEATURE_JS_PLUGINS
        Disabled for: desktop, tv, smartphone, minimal, mini

TWEAK_DOM_FILE_REFRESH_LENGTH_LIMIT				lasse

		Defines in milliseconds how much time we're allowed to spend iterating
		through directory contents; updating files etc, at a time, before yielding.

		Category    : performance
		Define      : DOM_FILE_REFRESH_LENGTH_LIMIT
		Value       : 100
		Depends on  : DOM_GADGET_FILE_API_SUPPORT
		Disabled for: desktop, tv, smartphone, minimal, mini

TWEAK_DOM_WEBFEEDS_SUBSCRIBE_NATIVE                 arjanl

        If turned on, creates a function 'subscribeNative' in the webfeeds dom
        api that can be used to allow native code to handle a subscription to
        a webfeed (for example a native newsreader on a device, or M2 in
        desktop).

        Category    : setting
        Define      : DOM_WEBFEEDS_SUBSCRIBE_NATIVE
        Depends on  : WEBFEEDS_BACKEND_SUPPORT
        Enabled for : desktop
        Disabled for: tv, smartphone, minimal, mini

TWEAK_DOM_TO_PLATFORM_MESSAGES                 chrille

        Exposes new function: opera.sendPlatformMessage() which passes
        a message (string) to the platform.

        Category    : setting
        Define      : DOM_TO_PLATFORM_MESSAGES
        Enabled for : tv
        Disabled for: desktop, smartphone, minimal, mini

TWEAK_DOM_LOCALE_SUPPORT            arjanl

        Enables the window.opera.getLocaleString() function on opera: pages.

        Category    : setting
        Define      : DOM_LOCALE_SUPPORT
        Enabled for : desktop
        Disabled for: tv, smartphone, minimal, mini

TWEAK_DOM_JIL_ADDRESSBOOK_IGNORE_VIRTUAL_FIELDS_SAVE_ERRORS   msimonides

        Disables throwing exceptions when contact's virtual attributes are
        modified and then an attempt is made at saving the contact. Whith the
        tweak enabled the modified values of virtual attributes are ignored but
        all the real attributes are updated.

        In short, JIL address book allows for the platform to customize the set
        of supported attributes. It however mandates certain attributes to be
        always present (e.g. fullName). If a platform doesn't implement such an
        attribute, we simulate it by using other attributes (e.g. concatenate
        first name and last name to form fullName). Such attributes are called
        virutal and cannot be saved back to the platform (although they may be
        modified for the purpose of creating search criteria).
        JIL mandates that if a virtual attribute is modified, the contact cannot
        be saved - an exception is to be thrown. OTOH JIL doesn't provide
        widgets with any information on which attributes are real and which are
        virtual (see getAvailableAttributes). Therefore the functionality of
        virtual attributes has little practical use - user's are bound to modify
        such attributes unknowingly.
        This tweak allows modified contacts to at least be saved without
        throwing exceptions.

        WARNING: This setting is incompatible with the JIL specification and
        might cause the product to fail compliance tests although that is
        unlikely (JIL's tests don't expect virtual attributes).

        See also TWEAK_DAPI_JIL_GETAVAILABLEATTRIBUTES_REAL_ONLY in device_api
        module that provides a different approach to solving the problem.

        Category:     setting
        Define:       DOM_JIL_ADDRESSBOOK_IGNORE_VIRTUAL_FIELDS_SAVE_ERRORS
        Depends on:   FEATURE_DOM_JIL_API
        Disabled for: desktop, tv, smartphone, minimal, mini

TWEAK_DOM_LOAD_TV_APP                 gantczak

        Exposes new function: opera.loadTVApp(). This function accepts
        objects with required string properties:
            name - Name of the TV application
            application - AES and then base64 encoded url
            icon_url - url to app's icon
        and the optional property:
            whitelist - array of urls that the application is allowed to open
        These are decoded and passed to integration layer via
        GOGI_OPERA_EVT_LOAD_TV_APP event.

        Category    : setting
        Define      : DOM_LOAD_TV_APP
        Enabled for : tv
        Disabled for: desktop, smartphone, minimal, mini

TWEAK_DOM_KEY_EVENT_CONSTANTS                sof

        Provides the known virtual keys as constants
        on the KeyboardEvent. This adds a number of constants
        on the constructor object and is currently not
        required by the DOM Event specification. Should
        it cause unexpected compatibility problems or
        unacceptable overhead, this DOM Event feature
        is controllable via this tweak.

        Category    : setting
        Define      : DOM_EVENT_VIRTUAL_KEY_CONSTANTS
        Enabled for : desktop, tv
        Disabled for: smartphone, minimal, mini

TWEAK_DOM_HIGH_RESOLUTION_TIMER_API          sof

        Expose the now() method for getting higher resolution time samples
        on the 'window.performance' object.

        If you are enabling this API but not Navigation Timing (once
        it is supported) on window.performance, please consider carefully
        the site compatibility implications of providing a reduced
        implementation of window.performance (CORE-46314.)

        Category    : setting
        Define      : DOM_HIGH_RESOLUTION_TIMER_API_SUPPORT
        Enabled for : none
        Disabled for: desktop, tv, smartphone, minimal, mini

TWEAK_DOM_REVERSE_CTRL_AND_META_IN_DOM_EVENTS   anders

		Normally, SHIFTKEY_CTRL will map to DOM_KeyEvent.ctrl_key and
		SHIFTKEY_META will map to DOM_KeyEvent.meta_key. Enabling this tweak
		will flip that behaviour. Needed for some platforms where the key that
		usually maps to Opera's SHIFTKEY_CTRL isn't the control key.
		One example is the mac, where the command ("propeller", "place of interest",
		"apple") key is control for the purpose of Opera's keyboard.ini, but
		not in the DOM sense.

		Category:     setting
		Define:       DOM_REVERSE_CTRL_AND_META_IN_DOM_EVENTS
		Enabled for : none
		Disabled for: desktop, tv, smartphone, minimal, mini
