/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2008 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
**
*/

group "dom.storage.prototypes";

language ecmascript;

require CLIENTSIDE_STORAGE_SUPPORT || DATABASE_STORAGE_SUPPORT;

test("Storage prototypes")
require CLIENTSIDE_STORAGE_SUPPORT;
{
	verify(window.Storage);
	verify(Storage.prototype);
	Storage.prototype.__test = 123;

	verify(localStorage instanceof Storage);
	verify(localStorage.__test == 123);

	verify(sessionStorage instanceof Storage);
	verify(sessionStorage.__test == 123);
}

html {
	//! <html><body>
	//! <iframe id="ls_iframe" src=""></iframe>
	//! <iframe id="test_iframe" src=""></iframe>
	//! </body></html>
}

test("StorageEvent prototype")
require CLIENTSIDE_STORAGE_SUPPORT;
async;
{
	window.lsi = document.getElementById("ls_iframe").contentWindow;
	window.ifr = document.getElementById("test_iframe").contentWindow;

	var timeoutid = setTimeout(function(){
		ifr.onstorage = null;
		verify(!'TIMEOUT: StorageEvent did not fire');
	}, 1000);

	verify(ifr.StorageEvent);
	verify(ifr.StorageEvent.prototype);
	ifr.StorageEvent.prototype.__test2 = 456;

	//I had a quota error during the setItem, so this is just to be fault proof
	Storage.prototype.clear.call(lsi.localStorage);

	ifr.onstorage = function(e){
		ifr.onstorage = null;
		verify(e instanceof ifr.StorageEvent);
		verify(e.__test2 == 456);
		lsi.localStorage.removeItem('__testing__');

		clearTimeout(timeoutid);
		ST_passed();
	}
	Storage.prototype.setItem.call(lsi.localStorage, '__testing__','bar'+Math.random());
}

test("Database prototypes")
require DATABASE_STORAGE_SUPPORT;
async;
{
	var timeoutid = setTimeout(function(){
		verify(!'timeout');
	}, 1000);

	function fail(error) { ST_failed("ERROR " + error.code + ": " + error.message, "databasestorage.ot", 0); }
	function sqlerror(tx, error) { fail(error); }

	verify(window.Database);
	verify(Database.prototype);
	Database.prototype.__test = 789;

	opera.deleteDatabase("test-prototypes");
	var d = window.openDatabase("test-prototypes", null, "", 0);
	verify(d instanceof Database);
	verify(d.__test == 789);

	d.readTransaction(function(tx){

		verify(window.SQLTransaction);
		verify(SQLTransaction.prototype);
		SQLTransaction.prototype.__test = 0xabc;

		verify(tx instanceof SQLTransaction);
		verify(tx.__test == 0xabc);

		tx.executeSql("select 1 a, 2 b", [], function (tx, r) {

			verify(window.SQLResultSet);
			verify(SQLResultSet.prototype);
			SQLResultSet.prototype.__test = 0xdef;

			verify(r instanceof SQLResultSet);
			verify(r.__test == 0xdef);

			verify(window.SQLResultSetRowList);
			verify(SQLResultSetRowList.prototype);
			SQLResultSetRowList.prototype.__test = 0x888;

			verify(r.rows);
			verify(r.rows instanceof SQLResultSetRowList);
			verify(r.rows.__test == 0x888);

			verify(r.rows[0] instanceof Object);

			tx.executeSql("select a fail from the fail", [], function (tx, r) {
				verify(!"should have failed");
			}, function (tx, e) {

				// http://dev.w3.org/html5/webstorage/#errors-and-exceptions
				verify(window.SQLError);

				verify(SQLError.UNKNOWN_ERR    == 0);
				verify(SQLError.DATABASE_ERR   == 1);
				verify(SQLError.VERSION_ERR    == 2);
				verify(SQLError.TOO_LARGE_ERR  == 3);
				verify(SQLError.QUOTA_ERR      == 4);
				verify(SQLError.SYNTAX_ERR     == 5);
				verify(SQLError.CONSTRAINT_ERR == 6);
				verify(SQLError.TIMEOUT_ERR    == 7);

				verify(SQLError.prototype);
				SQLError.prototype.__test = 0xbbbb;

				verify(e instanceof SQLError);
				verify(e.__test == 0xbbbb);

				verify(SQLError.UNKNOWN_ERR    == e.UNKNOWN_ERR);
				verify(SQLError.DATABASE_ERR   == e.DATABASE_ERR);
				verify(SQLError.VERSION_ERR    == e.VERSION_ERR);
				verify(SQLError.TOO_LARGE_ERR  == e.TOO_LARGE_ERR);
				verify(SQLError.QUOTA_ERR      == e.QUOTA_ERR);
				verify(SQLError.SYNTAX_ERR     == e.SYNTAX_ERR);
				verify(SQLError.CONSTRAINT_ERR == e.CONSTRAINT_ERR);
				verify(SQLError.TIMEOUT_ERR    == e.TIMEOUT_ERR);

				clearTimeout(timeoutid);
				ST_passed();

				return false;
			});
		}, sqlerror);

	}, fail);
}
