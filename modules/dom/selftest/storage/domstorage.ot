/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2008 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
**
*/

group "dom.storage.domstorage";

require CLIENTSIDE_STORAGE_SUPPORT;

language ecmascript;

test("localStorage")
{
	verify('localStorage' in window);
	verify(typeof window.localStorage == 'object');
	verify(window.localStorage);
}

test("localStorage - clear / get / set / remove")
{
	verify(localStorage.clear() === undefined);
	verify(localStorage.length === 0);

	verify(localStorage.getItem("dummy") === null);
	verify(localStorage.dummy === undefined);

	verify(localStorage.setItem("a", "A") === undefined);
	verify(localStorage.length === 1);

	verify(localStorage.getItem("a") === "A");
	verify(localStorage.key(0) === "a");

	verify(localStorage.removeItem("a") === undefined);
	verify(localStorage.length === 0);

	verify(localStorage.setItem("a", "A") === undefined);
	verify(localStorage.length === 1);

	verify(localStorage.clear() === undefined);
	verify(localStorage.length === 0);
}

test("localStorage - delete keyword")
{
	localStorage.clear();
	localStorage["a"] = "A";
	delete localStorage["a"];
	verify(localStorage["a"] == undefined);
}

test("localStorage - enumeration")
{
	localStorage.clear();
	var values = ['a', 'b', 'c', 'd', 'e'];

	for(var i=0; i < values.length; i++)
		localStorage.setItem(values[i], values[i]);

	for(var k in localStorage)
	{
		i = values.indexOf(localStorage[k]);
		if(i >= 0)
		{
			verify(values[i] == localStorage[k]);
			values.splice(i, 1);
		}
	}

	verify(values.length == 0);
}

test("localStorage GS")
{
	//futhark crashes in this test
	Storage.prototype.clear.call(localStorage);
	localStorage.clear();

	verify(localStorage.__lookupGetter__);

	var gl = document.childNodes.__lookupGetter__('length');//localStorage.__lookupGetter__('length');
	verify(gl);

	verify(typeof localStorage.length == 'number');
	verify(typeof gl.call(localStorage) == 'number');

	verify(gl.call(localStorage) == 0);
	verify(gl.call(localStorage) == localStorage.length);

	verify(localStorage.setItem);
	localStorage.setItem('foo','bar');

	verify(gl.call(localStorage) == 1);
	verify(gl.call(localStorage) == localStorage.length);
}

test("localStorage - null / undefined keys")
{
	localStorage.clear();
	localStorage.setItem(null, "null key");
	localStorage.setItem(undefined, "undefined key");
	verify(localStorage.getItem(null) == "null key");
	verify(localStorage.getItem(undefined) == "undefined key");
}

test("localStorage - null character in key")
{
	localStorage.clear();
	localStorage.setItem("a\u0000a", "AA");
	localStorage.setItem("a", "A");
	verify(localStorage.getItem("a\u0000a") == "AA");
	verify(localStorage.getItem("a") == "A");
}

test("localStorage - numerical properties")
{
	localStorage.clear();

	localStorage.setItem("0", "a");
	localStorage.setItem("1", "b");

	verify(localStorage[0] == "a");
	verify(localStorage[1] == "b");

	localStorage[0] = "c";
	localStorage[1] = "d";

	verify(localStorage.getItem("0") == "c");
	verify(localStorage.getItem("1") == "d");
}

test("localStorage - null")
{
	localStorage.clear();

	localStorage[null] = null;
	verify(localStorage.length === 1);
	verify(localStorage[null] === "null");
	verify(localStorage["null"] === "null");
	verify(localStorage.getItem(null) === "null");
	verify(localStorage.getItem("null") === "null");

	localStorage.removeItem(null);
	verify(localStorage.length === 0);

	localStorage["null"] = null;
	verify(localStorage.getItem("null") === "null");
	verify(localStorage.key(0) === "null");
	localStorage.removeItem("null");
	verify(localStorage.length === 0);
}

test("localStorage - undefined")
{
	localStorage.clear();

	localStorage[undefined] = undefined;
	verify(localStorage.length === 1);
	verify(localStorage[undefined] === "undefined");
	verify(localStorage["undefined"] === "undefined");
	verify(localStorage.getItem(undefined) === "undefined");
	verify(localStorage.getItem("undefined") === "undefined");

	localStorage.removeItem(undefined);
	verify(localStorage.length === 0);

	localStorage["undefined"] = undefined;
	verify(localStorage.getItem("undefined") === "undefined");
	verify(localStorage.key(0) === "undefined");
	localStorage.removeItem("undefined");
	verify(localStorage.length === 0);
}

test("localStorage - keys by index")
{
	//lots of key tests because the backend uses a linked list
	//with a last index cached optimization
	localStorage.clear();

	localStorage.setItem("a", "A");
	localStorage.setItem("b", "B");
	localStorage.setItem("c", "C");
	localStorage.setItem("d", "D");
	localStorage.setItem("e", "E");
	localStorage.setItem("f", "F");
	localStorage.setItem("g", "G");
	localStorage.setItem("h", "H");
	localStorage.setItem("i", "I");
	localStorage.setItem("j", "J");
	localStorage.setItem("k", "K");

	verify(localStorage.key(0) == "a");
	verify(localStorage.key(1) == "b");
	verify(localStorage.key(2) == "c");
	verify(localStorage.key(3) == "d");
	verify(localStorage.key(4) == "e");
	verify(localStorage.key(5) == "f");
	verify(localStorage.key(6) == "g");
	verify(localStorage.key(7) == "h");
	verify(localStorage.key(8) == "i");
	verify(localStorage.key(9) == "j");
	verify(localStorage.key(10)== "k");

	verify(localStorage.key(0) == "a");
	verify(localStorage.key(10)== "k");
	verify(localStorage.key(1) == "b");
	verify(localStorage.key(9) == "j");
	verify(localStorage.key(2) == "c");
	verify(localStorage.key(8) == "i");
	verify(localStorage.key(3) == "d");
	verify(localStorage.key(7) == "h");
	verify(localStorage.key(4) == "e");
	verify(localStorage.key(6) == "g");
	verify(localStorage.key(5) == "f");

	verify(localStorage.key(5) == "f");
	verify(localStorage.key(0) == "a");
	verify(localStorage.key(6) == "g");
	verify(localStorage.key(1) == "b");
	verify(localStorage.key(7) == "h");
	verify(localStorage.key(2) == "c");
	verify(localStorage.key(8) == "i");
	verify(localStorage.key(3) == "d");
	verify(localStorage.key(9) == "j");
	verify(localStorage.key(4) == "e");
	verify(localStorage.key(10)== "k");
}

test("sessionStorage")
{
	verify('sessionStorage' in window);
	verify(typeof window.sessionStorage == 'object');
	verify(window.sessionStorage);
}

test("sessionStorage - clear / get / set / remove")
{
	verify(sessionStorage.clear() === undefined);
	verify(sessionStorage.length === 0);

	verify(sessionStorage.getItem("dummy") === null);
	verify(sessionStorage.dummy === undefined);

	verify(sessionStorage.setItem("a", "A") === undefined);
	verify(sessionStorage.length === 1);

	verify(sessionStorage.getItem("a") === "A");
	verify(sessionStorage.key(0) === "a");

	verify(sessionStorage.removeItem("a") === undefined);
	verify(sessionStorage.length === 0);

	verify(sessionStorage.setItem("a", "A") === undefined);
	verify(sessionStorage.length === 1);

	verify(sessionStorage.clear() === undefined);
	verify(sessionStorage.length === 0);
}

test("sessionStorage - delete keyword")
{
	sessionStorage.clear();
	sessionStorage["a"] = "A";
	delete sessionStorage["a"];
	verify(sessionStorage["a"] == undefined);
}

test("sessionStorage - enumeration")
{
	sessionStorage.clear();
	var values = ['a', 'b', 'c', 'd', 'e'];

	for(var i=0; i < values.length; i++)
		sessionStorage.setItem(values[i], values[i]);

	for(var k in sessionStorage)
	{
		i = values.indexOf(sessionStorage[k]);
		if(i >= 0)
		{
			verify(values[i] == sessionStorage[k]);
			values.splice(i, 1);
		}
	}

	verify(values.length == 0);
}

test("sessionStorage - null / undefined keys")
{
	sessionStorage.clear();
	sessionStorage.setItem(null, "null key");
	sessionStorage.setItem(undefined, "undefined key");
	verify(sessionStorage.getItem(null) == "null key");
	verify(sessionStorage.getItem(undefined) == "undefined key");
}

test("sessionStorage - nul character in key")
{
	sessionStorage.clear();
	sessionStorage.setItem("a\u0000a", "AA");
	sessionStorage.setItem("a", "A");
	verify(sessionStorage.getItem("a\u0000a") == "AA");
	verify(sessionStorage.getItem("a") == "A");
}

test("sessionStorage - numerical properties")
{
	sessionStorage.clear();

	sessionStorage.setItem("0", "a");
	sessionStorage.setItem("1", "b");

	verify(sessionStorage[0] == "a");
	verify(sessionStorage[1] == "b");

	sessionStorage[0] = "c";
	sessionStorage[1] = "d";

	verify(sessionStorage.getItem("0") == "c");
	verify(sessionStorage.getItem("1") == "d");
}

test("sessionStorage - keys by index")
{
	//lots of key tests because the backend uses a linked list
	//with a last index cached optimization
	sessionStorage.clear();

	sessionStorage.setItem("a", "A");
	sessionStorage.setItem("b", "B");
	sessionStorage.setItem("c", "C");
	sessionStorage.setItem("d", "D");
	sessionStorage.setItem("e", "E");
	sessionStorage.setItem("f", "F");
	sessionStorage.setItem("g", "G");
	sessionStorage.setItem("h", "H");
	sessionStorage.setItem("i", "I");
	sessionStorage.setItem("j", "J");
	sessionStorage.setItem("k", "K");

	verify(sessionStorage.key(0) == "a");
	verify(sessionStorage.key(1) == "b");
	verify(sessionStorage.key(2) == "c");
	verify(sessionStorage.key(3) == "d");
	verify(sessionStorage.key(4) == "e");
	verify(sessionStorage.key(5) == "f");
	verify(sessionStorage.key(6) == "g");
	verify(sessionStorage.key(7) == "h");
	verify(sessionStorage.key(8) == "i");
	verify(sessionStorage.key(9) == "j");
	verify(sessionStorage.key(10)== "k");

	verify(sessionStorage.key(0) == "a");
	verify(sessionStorage.key(10)== "k");
	verify(sessionStorage.key(1) == "b");
	verify(sessionStorage.key(9) == "j");
	verify(sessionStorage.key(2) == "c");
	verify(sessionStorage.key(8) == "i");
	verify(sessionStorage.key(3) == "d");
	verify(sessionStorage.key(7) == "h");
	verify(sessionStorage.key(4) == "e");
	verify(sessionStorage.key(6) == "g");
	verify(sessionStorage.key(5) == "f");

	verify(sessionStorage.key(5) == "f");
	verify(sessionStorage.key(0) == "a");
	verify(sessionStorage.key(6) == "g");
	verify(sessionStorage.key(1) == "b");
	verify(sessionStorage.key(7) == "h");
	verify(sessionStorage.key(2) == "c");
	verify(sessionStorage.key(8) == "i");
	verify(sessionStorage.key(3) == "d");
	verify(sessionStorage.key(9) == "j");
	verify(sessionStorage.key(4) == "e");
	verify(sessionStorage.key(10)== "k");
}

test("userJsStorage - not visible")
	require WEBSTORAGE_USER_SCRIPT_STORAGE_SUPPORT;
{
	verify(!opera.scriptStorage);
	verify(!window.StorageUserJS);
}
