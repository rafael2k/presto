/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2008 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
**
*/

group "dom.storage.domstorage.events";

require CLIENTSIDE_STORAGE_SUPPORT;

include "modules/dom/src/storage/storage.h";
include "modules/doc/frm_doc.h";

language ecmascript;

global
{
	DOM_Storage *ifr_ls;
}

html {
	//! <html><body>
	//! <iframe id="ls_iframe" src=""></iframe>
	//! <iframe id="test_iframe" src=""></iframe>
	//! </body></html>
}

test("storage event") async;
{
	window.lsi = document.getElementById("ls_iframe").contentWindow;
	window.ifr = document.getElementById("test_iframe").contentWindow;

	var timeoutid = setTimeout(function() {
		ifr.removeEventListener("storage", f, false);
		verify(!"StorageEvent did not fire");
	}, 1000);

	function f(e)
	{
		ifr.removeEventListener("storage", f, false);
		clearTimeout(timeoutid);

		verify(e);
		verify(e.type == 'storage');
		verify(e.storageArea == ifr.localStorage);
		verify(e.url == lsi.location.href);
		verify(e.key === null);
		verify(e.oldValue === null);
		verify(e.newValue === null);

		ST_passed();
	}

	lsi.localStorage.a = "A";
	ifr.addEventListener("storage", f, false);
	ifr.removeEventListener("storage", function(){}, false);
	lsi.localStorage.clear();
}

test("storage event - not same doc") async;
{
	var timeoutid = setTimeout(function() {
		ifr.removeEventListener("storage", f, false);
		ST_passed();
	}, 1000);

	function f(e)
	{
		clearTimeout(timeoutid);
		ifr.removeEventListener("storage", f, false);
		verify(!"StorageEvent should not have fired on same document");
	}

	ifr.localStorage.a = "A";
	ifr.addEventListener("storage", f, false);
	ifr.localStorage.clear();
}

test("onstorage") async;
{
	var timeoutid = setTimeout(function() {
		ifr.onstorage = null
		verify(!"StorageEvent did not fire");
	}, 1000);

	lsi.localStorage.b = "B";

	ifr.onstorage = function f(e) {
		ifr.onstorage = null;
		clearTimeout(timeoutid);

		verify(e);
		verify(e.type == 'storage');
		verify(e.storageArea == ifr.localStorage);
		verify(e.url == lsi.location.href);
		verify(e.key === null);
		verify(e.oldValue === null);
		verify(e.newValue === null);

		ST_passed();
	}

	lsi.localStorage.clear();
}

test("document.body.onstorage") async;
{
	var timeoutid = setTimeout(function() {
		ifr.document.body.onstorage = null;
		verify(!"StorageEvent did not fire");
	}, 1000);

	lsi.localStorage.c = "C";

	ifr.document.body.onstorage = function (e) {
		ifr.document.body.onstorage = null;
		clearTimeout(timeoutid);

		verify(e);
		verify(e.type == 'storage');
		verify(e.storageArea == ifr.localStorage);
		verify(e.url == lsi.location.href);
		verify(e.key === null);
		verify(e.oldValue === null);
		verify(e.newValue === null);

		ST_passed();
	}

	verify(ifr.document.body.onstorage);

	lsi.localStorage.clear();
}

test("remove event listener") async;
{
	function f(e) {
		ifr.removeEventListener("storage", f, false);
		ST_failed("the callback shouldn't have run", "domstorageevents.ot", 0);
	}

	ifr.addEventListener("storage", f, false);
	ifr.removeEventListener("storage", f, false);

	lsi.localStorage.setItem("1", "1");

	var timeoutid = setTimeout(ST_passed, 500);
}

test("localStorage: event attributes (setItem)") async;
{
	localStorage.clear();

	var timeoutid = setTimeout(function() {
		ifr.onstorage = null;
		verify(!"StorageEvent did not fire");
	}, 1000);

	var callcount = 0;
	ifr.onstorage = function (e) {
		verify(e);
		verify(e.type == 'storage');
		verify(e.key === "2");
		callcount++;
		if (e.newValue === "2a")
		{
			verify(callcount == 1);
			verify(e.oldValue === null);
		}
		else if (e.newValue === "2b")
		{
			verify(callcount == 2);
			verify(e.oldValue === "2a");
		}
		else if (e.newValue === null)
		{
			verify(callcount == 3);
			verify(e.oldValue === "2b");

			//last one
			clearTimeout(timeoutid);
			ifr.onstorage = null;
			ST_passed();
		}
		else
		{
			verify(!"Bad value");
		}
		verify(e.storageArea == ifr.localStorage);
		verify(e.url == lsi.location.href);
	}

	lsi.localStorage.setItem("2", "2a");
	lsi.localStorage.setItem("2", "2b");
	lsi.localStorage.removeItem("2");
}

test("localStorage: event attributes (clear)") async;
{
	lsi.localStorage.setItem("3", "3");
	lsi.localStorage.setItem("4", "4");

	var timeoutid = setTimeout(function() {
		ifr.onstorage = null;
		verify(!"StorageEvent did not fire");
	}, 1000);

	ifr.onstorage = function (e) {
		ifr.onstorage = null;
		clearTimeout(timeoutid);

		verify(e);
		verify(e.type == 'storage');
		verify(e.key === null);
		verify(e.oldValue === null);
		verify(e.newValue === null);
		verify(e.storageArea == ifr.localStorage);
		verify(e.url == lsi.location.href);

		ST_passed();
	}

	lsi.localStorage.clear();
}

test("sessionStorage: event attributes (setItem)") async;
{
	lsi.sessionStorage.clear();
	lsi.sessionStorage.setItem("5", "5a");

	var timeoutid = setTimeout(function() {
		ifr.onstorage = null;
		verify(!"StorageEvent did not fire");
	}, 1000);

	ifr.onstorage = function (e) {
		ifr.onstorage = null;
		clearTimeout(timeoutid);

		verify(e);
		verify(e.type == 'storage');
		verify(e.key == "5");
		verify(e.oldValue == "5a");
		verify(e.newValue == "5b");
		verify(e.storageArea == ifr.sessionStorage);
		verify(e.url == lsi.location.href);

		ST_passed();
	}

	lsi.sessionStorage.setItem("5", "5b");
}

test("sessionStorage: event attributes (clear)") async;
{
	lsi.sessionStorage.setItem("6", "6");
	lsi.sessionStorage.setItem("7", "7");

	var timeoutid = setTimeout(function() {
		ifr.onstorage = null;
		verify(!"StorageEvent did not fire");
	}, 1000);

	ifr.onstorage = function (e) {
		ifr.onstorage = null;
		clearTimeout(timeoutid);

		verify(e);
		verify(e.type == 'storage');
		verify(!e.key);
		verify(!e.oldValue);
		verify(!e.newValue);
		verify(e.storageArea == ifr.sessionStorage);
		verify(e.url == lsi.location.href);

		ST_passed();
	}

	lsi.sessionStorage.clear();
}

test("createEvent") async;
{
	//in DOMString typeArg
	//in boolean canBubbleArg
	//in boolean cancelableArg
	//in DOMString keyArg
	//in DOMString oldValueArg
	//in DOMString newValueArg
	//in DOMString urlArg
	//in WindowProxy sourceArg
	//in Storage storageAreaArg
	var ev_data = {
		key : "a\0a",
		oldValue : "",
		newValue : "c\0d",
		url : "http://foo.bar",
		storageArea : lsi.localStorage
	};

	var timeoutid = setTimeout(function(){
		window.removeEventListener("storage", ff, false);
		verify(!"StorageEvent did not fire");
	}, 1000);

	function ff(e){
		window.removeEventListener("storage", ff, false);
		clearTimeout(timeoutid);

		verify(e.type == 'storage');
		verify(e.key == ev_data.key);
		verify(e.oldValue == ev_data.oldValue);
		verify(e.newValue == ev_data.newValue);
		verify(e.url == ev_data.url);
		verify(e.storageArea == ev_data.storageArea);

		ST_passed();
	}
	window.addEventListener("storage", ff, false);

	var e = document.createEvent("StorageEvent");
	verify(e);
	e.initStorageEvent("storage", true, false, ev_data.key,
			ev_data.oldValue, ev_data.newValue, ev_data.url, ev_data.storageArea);

	dispatchEvent(e);
}

test("createEvent: clear") async;
{
	var ev_data = {
		key : null,
		oldValue : null,
		newValue : null,
		url : "http://foo.bar",
		storageArea : lsi.localStorage
	};

	var timeoutid = setTimeout(function(){
		window.onstorage = null;
		verify(!"StorageEvent did not fire");
	}, 1000);

	window.onstorage = function (e) {
		window.onstorage = null;
		clearTimeout(timeoutid);

		verify(e);
		verify(e.type == 'storage');
		verify(e.key == ev_data.key);
		verify(e.oldValue == ev_data.oldValue);
		verify(e.newValue == ev_data.newValue);
		verify(e.url == ev_data.url);
		verify(e.storageArea == ev_data.storageArea);

		ST_passed();
	}

	var e = document.createEvent("StorageEvent");
	verify(e);
	e.initStorageEvent("storage", true, false, ev_data.key,
			ev_data.oldValue, ev_data.newValue, ev_data.url, ev_data.storageArea);

	dispatchEvent(e);
}

test("createEvent: bogus")
{
	var e = document.createEvent("StorageEvent");
	verify(e);
	try{
		e.initStorageEvent("storage", true, false, "1", "a", "b", location.href, null);
		verify(!"Should have thrown exception: storageArea was null");
	}catch(ex){}

	var e = document.createEvent("StorageEvent");
	verify(e);
	try{
		e.initStorageEvent("storage", true, false, "1", "a", "b", location.href, 1);
		verify(!"Should have thrown exception: storageArea was 1");
	}catch(ex){}
}


test("check listener disabled 1")
	language c++;
{
	// Note: there's no problem in keeping a pointer to the DOM_Storage object
	// because after being created it is pinned to the window, and lives while the
	// document lives.
	ifr_ls = NULL;

	ES_Value v;
	DOM_Object *win = g_selftest.utils->doc->GetDOMEnvironment()->GetWindow();
	verify(win);
	verify(OpBoolean::IS_TRUE == win->GetRuntime()->GetName(*win, UNI_L("ifr"), &v));
	verify(v.type == VALUE_OBJECT && v.value.object);
	verify(win = DOM_GetHostObject(v.value.object));
	verify(GET_SUCCESS == win->GetName(OP_ATOM_localStorage, &v, win->GetRuntime()));
	verify(v.type == VALUE_OBJECT && v.value.object);
	DOM_Object *obj = DOM_GetHostObject(v.value.object);
	verify(obj);
	verify(obj->IsA(DOM_TYPE_STORAGE));
	ifr_ls = static_cast<DOM_Storage *>(obj);
	verify(ifr_ls->GetOpStorage());
	// The previous test have cleaned up properly, lets hope.
	verify(!ifr_ls->GetOpStorage()->HasStorageEventListeners());
}

test("setup event listener")
{
	window.last_listener = function(){}
	ifr.addEventListener("storage", window.last_listener, false);
}

test("check listener enabled")
	require success "check listener disabled 1";
	language c++;
{
	verify(ifr_ls->GetOpStorage()->HasStorageEventListeners());
}

test("remove event listener")
{
	ifr.removeEventListener("storage", window.last_listener, false);
}

test("check listener disabled 2")
	require success "check listener disabled 1";
	language c++;
{
	verify(!ifr_ls->GetOpStorage()->HasStorageEventListeners());
}
