/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
**
*/

group "dom.storage.domstorage.quotas";

require initialization;
require CLIENTSIDE_STORAGE_SUPPORT;
require DATABASE_MODULE_MANAGER_SUPPORT;
/** require the simple backend else KLocalStorage is not defined **/
require WEBSTORAGE_ENABLE_SIMPLE_BACKEND;
/** require prefs write, else PS_Policy::SetAttribute is a dead function **/
require PREFS_WRITE;

include "modules/database/prefscollectiondatabase.h";
include "modules/database/sec_policy.h";
include "modules/doc/frm_doc.h";

global
{
	OP_STATUS status;
	OpFileLength quota;
	int handling;
	PS_Policy* db_policy;
	OpString st_domain;
	const Window* st_win;
	URL_CONTEXT_ID ctx_id;
}

html "http://foo.local/" "<html>";

test("initialization")
{
	verify(g_selftest.utils->doc);
	verify_success(g_selftest.utils->doc->GetURL().GetAttribute(URL::KUniHostName, st_domain));

	st_win = g_selftest.utils->GetWindow();
	ctx_id = g_selftest.utils->doc->GetURL().GetContextId();

	db_policy = g_database_policies->GetPolicy(PS_ObjectTypes::KLocalStorage);

	quota = db_policy->GetAttribute(PS_Policy::KOriginQuota, ctx_id, st_domain.CStr(), st_win);
	handling = db_policy->GetAttribute(PS_Policy::KOriginExceededHandling, ctx_id, st_domain.CStr(), st_win);

	db_policy->SetAttribute(PS_Policy::KOriginQuota, ctx_id, 0, st_domain.CStr(), st_win);
	db_policy->SetAttribute(PS_Policy::KOriginExceededHandling, ctx_id, PS_Policy::KQuotaDeny, st_domain.CStr(), st_win);
}

language ecmascript;

test("localStorage.quota")
{
	verify(window.localStorage);
	verify(typeof localStorage.setItem == 'function');
	verify(typeof localStorage.clear == 'function');

	localStorage.clear()
	verify(localStorage.length == 0);

	var bigstr = new Array(0xffff).join("aaaa");

	try
	{
		for (var i=0; i < 100; i=i+1)
		{
			localStorage.setItem(i, bigstr);
		}
		verify(!"should have raised QUOTA_EXCEEDED_ERR");
	}
	catch(e)
	{
		verify(e.code == DOMException.QUOTA_EXCEEDED_ERR);
	}
	localStorage.clear();
	verify(localStorage.length == 0);
}

exit
{
	// restore previous quota
	db_policy->SetAttribute(PS_Policy::KOriginQuota, ctx_id, quota, st_domain.CStr(), st_win);
	db_policy->SetAttribute(PS_Policy::KOriginExceededHandling, ctx_id, handling, st_domain.CStr(), st_win);
}
