/* Note: tests that test that non-overridable properties aren't overridden pass
   if the code throws an exception or if the request is simply ignored.  It's up
   to the ecmascript module to decide what to do when we say a property can't be
   overridden, and I don't want to depend on its decision here. */


group "DOM.Misc.GettersSetters.document";

language ecmascript;

html
{
  "<p>Empty paragraph.</p>"
}

/* Overriding overridable property (document.all). */

test("getter: document.all")
{
  try
  {
    var called = false;
    document.__defineGetter__ ("all", function () { called = true; return 4711; });
    verify (document.all === 4711);
    verify (called);
  }
  catch (e)
  {
    verify (false);
  }
}
test("setter: document.all")
{
  try
  {
    var document_all = null, called = false;
    document.__defineSetter__ ("all", function (value) { called = true; document_all = value; });
    document.all = 4711;
    verify (called);
    verify (document_all === 4711);
  }
  catch (e)
  {
    verify (false);
  }
}

/* Defining undefined property (document.foo). */

test("getter: document.foo")
{
  try
  {
    var called = false;
    document.__defineGetter__ ("foo", function () { called = true; return 4711; });
    verify (document.foo === 4711);
    verify (called);
  }
  catch (e)
  {
    verify (false);
  }
}
test("setter: document.foo")
{
  try
  {
    var document_foo = null, called = false;
    document.__defineSetter__ ("foo", function (value) { called = true; document_foo = value; });
    document.foo = 4711;
    verify (called);
    verify (document_foo === 4711);
  }
  catch (e)
  {
    verify (false);
  }
}

/* Failing to override non-overridable property (document.location). */

test("getter: document.location")
{
  try
  {
    var document_location = document.location, called = false;
    document.__defineGetter__ ("location", function () { called = true; return 4711; });
    verify (document.location === document_location);
    verify (!called);
  }
  catch (e)
  {
  }
}
test("setter: document.location")
{
  try
  {
    var document_location = document.location, called = false;
    document.__defineSetter__ ("location", function (value) { called = true; });
    document.location = 4711;
    verify (!called);
    verify (document.location === document_location);
  }
  catch (e)
  {
  }
}

group "DOM.Misc.GettersSetters.window";

language ecmascript;

html
{
  "<p>Empty paragraph.</p>"
}

/* Overriding overridable property (window.name). */

test("getter: window.name")
{
  try
  {
    var called = false;
    window.__defineGetter__ ("name", function () { called = true; return 4711; });
    verify (window.name === 4711);
    verify (called);
  }
  catch (e)
  {
    verify (false);
  }
}
test("setter: window.name")
{
  try
  {
    var window_name = null, called = false;
    window.__defineSetter__ ("name", function (value) { called = true; window_name = value; });
    window.name = 4711;
    verify (called);
    verify (window_name === 4711);
  }
  catch (e)
  {
    verify (false);
  }
}

/* Defining undefined property (window.foo). */

test("getter: window.foo")
{
  try
  {
    var called = false;
    window.__defineGetter__ ("foo", function () { called = true; return 4711; });
    verify (window.foo === 4711);
    verify (called);
  }
  catch (e)
  {
    verify (false);
  }
}
test("setter: window.foo")
{
  try
  {
    var window_foo = null, called = false;
    window.__defineSetter__ ("foo", function (value) { called = true; window_foo = value; });
    window.foo = 4711;
    verify (called);
    verify (window_foo === 4711);
  }
  catch (e)
  {
    verify (false);
  }
}

/* Failing to override non-overridable property (window.window). */

test("getter: window.window")
{
  try
  {
    var window_window = window.window, called = false;
    window.__defineGetter__ ("window", function () { called = true; return 4711; });
    verify (window.window === window_window);
    verify (!called);
  }
  catch (e)
  {
  }
}
test("setter: window.window")
{
  try
  {
    var window_window = window.window, called = false;
    window.__defineSetter__ ("window", function (value) { called = true; });
    window.window = 4711;
    verify (!called);
    verify (window.window === window_window);
  }
  catch (e)
  {
  }
}

/* Failing to override non-overridable property (window.top). */

test("getter: window.top")
{
  try
  {
    var window_top = window.top, called = false;
    window.__defineGetter__ ("top", function () { called = true; return 4711; });
    verify (window.top === window_top);
    verify (!called);
  }
  catch (e)
  {
  }
}
test("setter: window.top")
{
  try
  {
    var window_top = window.top, called = false;
    window.__defineSetter__ ("top", function (value) { called = true; });
    window.top = 4711;
    verify (!called);
    verify (window.top === window_top);
  }
  catch (e)
  {
  }
}

/* Failing to override non-overridable property (window.location). */

test("getter: window.location")
{
  try
  {
    var window_location = window.location, called = false;
    window.__defineGetter__ ("location", function () { called = true; return 4711; });
    verify (window.location === window_location);
    verify (!called);
  }
  catch (e)
  {
  }
}
test("setter: window.location")
{
  try
  {
    var window_location = window.location, called = false;
    window.__defineSetter__ ("location", function (value) { called = true; });
    window.location = 4711;
    verify (!called);
    verify (window.location === window_location);
  }
  catch (e)
  {
  }
}

/* Allowing override of previously non-overridable property (window.parent). */

test("getter: window.parent")
{
  try
  {
    var window_parent = window.parent, called = false;
    window.__defineGetter__ ("parent", function () { called = true; return 4711; });
    verify (window.parent === 4711);
    verify (called);
  }
  catch (e)
  {
  }
}
test("setter: window.parent")
{
  try
  {
    var window_parent = window.parent, called = false;
    window.__defineSetter__ ("parent", function (value) { called = true; });
    window.parent = 4711;
    verify (called);
  }
  catch (e)
  {
  }
}

/* Allowing override of previously non-overridable property (window.self). */

test("getter: window.self")
{
  try
  {
    var window_self = window.self, called = false;
    window.__defineGetter__ ("self", function () { called = true; return 4711; });
    verify (window.self === 4711);
    verify (called);
  }
  catch (e)
  {
  }
}
test("setter: window.self")
{
  try
  {
    var window_self = window.self, called = false;
    window.__defineSetter__ ("self", function (value) { called = true; });
    window.self = 4711;
    verify (called);
  }
  catch (e)
  {
  }
}

/* Failing to override non-overridable property (window.document). */

test("getter: window.document")
{
  try
  {
    var window_document = window.document, called = false;
    window.__defineGetter__ ("document", function () { called = true; return 4711; });
    verify (window.document === window_document);
    verify (!called);
  }
  catch (e)
  {
  }
}
test("setter: window.document")
{
  try
  {
    var window_document = window.document, called = false;
    window.__defineSetter__ ("document", function (value) { called = true; });
    window.document = 4711;
    verify (!called);
    verify (window.document === window_document);
  }
  catch (e)
  {
  }
}

/* Failing to override non-overridable property (window.frameElement). */

test("getter: window.frameElement")
{
  try
  {
    var window_frameElement = window.frameElement, called = false;
    window.__defineGetter__ ("frameElement", function () { called = true; return 4711; });
    verify (window.frameElement === window_frameElement);
    verify (!called);
  }
  catch (e)
  {
  }
}
test("setter: window.frameElement")
{
  try
  {
    var window_frameElement = window.frameElement, called = false;
    window.__defineSetter__ ("frameElement", function (value) { called = true; });
    window.frameElement = 4711;
    verify (!called);
    verify (window.frameElement === window_frameElement);
  }
  catch (e)
  {
  }
}

group "DOM.Misc.GettersSetters.location";

language ecmascript;

html
{
  "<p>Empty paragraph.</p>"
}

/* Overriding overridable property (location.hash). */

test("getter: location.hash")
{
  try
  {
    var called = false;
    location.__defineGetter__ ("hash", function () { called = true; return 4711; });
    verify (location.hash === 4711);
    verify (called);
  }
  catch (e)
  {
    verify (false);
  }
}
test("setter: location.hash")
{
  try
  {
    var location_hash = null, called = false;
    location.__defineSetter__ ("hash", function (value) { called = true; location_hash = value; });
    location.hash = 4711;
    verify (called);
    verify (location_hash === 4711);
  }
  catch (e)
  {
    verify (false);
  }
}

/* Defining undefined property (location.foo). */

test("getter: location.foo")
{
  try
  {
    var called = false;
    location.__defineGetter__ ("foo", function () { called = true; return 4711; });
    verify (location.foo === 4711);
    verify (called);
  }
  catch (e)
  {
    verify (false);
  }
}
test("setter: location.foo")
{
  try
  {
    var location_foo = null, called = false;
    location.__defineSetter__ ("foo", function (value) { called = true; location_foo = value; });
    location.foo = 4711;
    verify (called);
    verify (location_foo === 4711);
  }
  catch (e)
  {
    verify (false);
  }
}

/* Failing to override non-overridable property (location.href). */

test("getter: location.href")
{
  try
  {
    var location_href = location.href, called = false;
    location.__defineGetter__ ("href", function () { called = true; return 4711; });
    verify (location.href === location_href);
    verify (!called);
  }
  catch (e)
  {
  }
}
test("setter: location.href")
{
  try
  {
    var location_href = location.href, called = false;
    location.__defineSetter__ ("href", function (value) { called = true; });
    location.href = 4711;
    verify (!called);
    verify (location.href === location_href);
  }
  catch (e)
  {
  }
}

/* Failing to override non-overridable property (location.toString). */

test("getter: location.toString")
{
  try
  {
    var location_toString = location.toString, called = false;
    location.__defineGetter__ ("toString", function () { called = true; return 4711; });
    verify (location.toString === location_toString);
    verify (!called);
  }
  catch (e)
  {
  }
}
test("setter: location.toString")
{
  try
  {
    var location_toString = location.toString, called = false;
    location.__defineSetter__ ("toString", function (value) { called = true; });
    location.toString = 4711;
    verify (!called);
    verify (location.toString === location_toString);
  }
  catch (e)
  {
  }
}

/* Failing to override non-overridable property (location.valueOf). */

test("getter: location.valueOf")
{
  try
  {
    var location_valueOf = location.valueOf, called = false;
    location.__defineGetter__ ("valueOf", function () { called = true; return 4711; });
    verify (location.valueOf === location_valueOf);
    verify (!called);
  }
  catch (e)
  {
  }
}
test("setter: location.valueOf")
{
  try
  {
    var location_valueOf = location.valueOf, called = false;
    location.__defineSetter__ ("valueOf", function (value) { called = true; });
    location.valueOf = 4711;
    verify (!called);
    verify (location.valueOf === location_valueOf);
  }
  catch (e)
  {
  }
}
