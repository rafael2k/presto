/* -*- Mode: c++; indent-tabs-mode: nil; c-file-style: "gnu" -*-
 *
 * Copyright (C) 1995-2005 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.  It may not be distributed
 * under any circumstances.
 */
group "DOM.Misc.Dialogs";

include "modules/doc/frm_doc.h";
include "modules/dochand/win.h";
include "modules/ecmascript/ecmascript.h";
include "modules/windowcommander/src/WindowCommander.h";
include "modules/hardcore/mh/messobj.h";
include "modules/hardcore/mh/mh.h";

global
{
  class DOMDialogsST_OpDocumentListener
    : public NullDocumentListener,
      public MessageObject
  {
  public:
    DOMDialogsST_OpDocumentListener(ES_Runtime *runtime, BOOL immediate, const uni_char *expected_type, const uni_char *expected_message, BOOL expected_ok = FALSE, const uni_char *expected_default_value = NULL, const uni_char *expected_input = NULL)
      : runtime(runtime),
        immediate(immediate),
        expected_type(expected_type),
        expected_ok(expected_ok),
        expected_message(expected_message),
        expected_default_value(expected_default_value),
        expected_input(expected_input),
        callback(NULL)
    {
      oom = OpStatus::IsMemoryError(result.Set("listener not called")) || !immediate && OpStatus::IsMemoryError(g_main_message_handler->SetCallBack(this, MSG_ES_ASYNC_MESSAGE, reinterpret_cast<MH_PARAM_1>(this)));
    }

    ~DOMDialogsST_OpDocumentListener()
    {
        if (!immediate)
            g_main_message_handler->UnsetCallBacks(this);
    }

    OpString result;
    BOOL oom;

  private:
    ES_Runtime *runtime;
    BOOL immediate;
    const uni_char *expected_type;
    BOOL expected_ok;
    const uni_char *expected_message;
    const uni_char *expected_default_value;
    const uni_char *expected_input;
    JSDialogCallback *callback;

    virtual void OnJSAlert(OpWindowCommander* commander, const uni_char *hostname, const uni_char *message, JSDialogCallback *callback)
    {
      if (!uni_str_eq(expected_type, "Alert"))
        {
          oom = oom || OpStatus::IsMemoryError(result.Set("wrong callback called"));
          oom = oom || OpStatus::IsMemoryError(result.AppendFormat(UNI_L("; got OnJSAlert(), expected OnJS%s()"), expected_type));
        }
      else if (!message || !uni_str_eq(message, expected_message))
        {
          oom = oom || OpStatus::IsMemoryError(result.Set("wrong message received"));
          oom = oom || OpStatus::IsMemoryError(result.AppendFormat(UNI_L("; got '%s', expected '%s'"), message, expected_message));
        }
      else
        {
          oom = oom || OpStatus::IsMemoryError(result.Set("ok"));
          if (immediate)
            callback->OnAlertDismissed();
          else
            {
              g_main_message_handler->PostMessage(MSG_ES_ASYNC_MESSAGE, reinterpret_cast<MH_PARAM_1>(this), 0);
              this->callback = callback;
            }
          oom = oom || SetSequenceCheckVariable();
          return;
        }
      callback->OnAlertDismissed();
    }

    virtual void OnJSConfirm(OpWindowCommander* commander, const uni_char *hostname, const uni_char *message, JSDialogCallback *callback)
    {
      if (!uni_str_eq(expected_type, "Confirm"))
        {
          oom = oom || OpStatus::IsMemoryError(result.Set("wrong callback called"));
          oom = oom || OpStatus::IsMemoryError(result.AppendFormat(UNI_L("; got OnJSConfirm(), expected OnJS%s()"), expected_type));
        }
      else if (!message || !uni_str_eq(message, expected_message))
        {
          oom = oom || OpStatus::IsMemoryError(result.Set("wrong message received"));
          oom = oom || OpStatus::IsMemoryError(result.AppendFormat(UNI_L("; got '%s', expected '%s'"), message, expected_message));
        }
      else
        {
          oom = oom || OpStatus::IsMemoryError(result.Set("ok"));
          if (immediate)
            callback->OnConfirmDismissed(expected_ok);
          else
            {
              g_main_message_handler->PostMessage(MSG_ES_ASYNC_MESSAGE, reinterpret_cast<MH_PARAM_1>(this), 0);
              this->callback = callback;
            }
          oom = oom || SetSequenceCheckVariable();
          return;
        }
      callback->OnConfirmDismissed(expected_ok);
    }

    virtual void OnJSPrompt(OpWindowCommander* commander, const uni_char *hostname, const uni_char *message, const uni_char *default_value, JSDialogCallback *callback)
    {
      if (!uni_str_eq(expected_type, "Prompt"))
        {
          oom = oom || OpStatus::IsMemoryError(result.Set("wrong callback called"));
          oom = oom || OpStatus::IsMemoryError(result.AppendFormat(UNI_L("; got OnJSPrompt(), expected OnJS%s()"), expected_type));
        }
      else if (!message || !uni_str_eq(message, expected_message))
        {
          oom = oom || OpStatus::IsMemoryError(result.Set("wrong message received"));
          oom = oom || OpStatus::IsMemoryError(result.AppendFormat(UNI_L("; got '%s', expected '%s'"), message, expected_message));
        }
      else if (!default_value || !expected_default_value || !uni_str_eq(expected_default_value, default_value))
        {
          oom = oom || OpStatus::IsMemoryError(result.Set("wrong default value received"));
          oom = oom || OpStatus::IsMemoryError(result.AppendFormat(UNI_L("; got '%s', expected '%s'"), default_value, expected_default_value));
        }
      else
        {
          oom = oom || OpStatus::IsMemoryError(result.Set("ok"));
          if (immediate)
            {
              callback->OnPromptDismissed(expected_ok, expected_input);
              oom = oom || SetSequenceCheckVariable();
            }
          else
            {
              oom = oom || !g_main_message_handler->PostMessage(MSG_ES_ASYNC_MESSAGE, reinterpret_cast<MH_PARAM_1>(this), 0);
              this->callback = callback;
            }
          return;
        }
      callback->OnPromptDismissed(expected_ok, expected_input);
    }

    virtual void HandleCallback(OpMessage msg, MH_PARAM_1 par1, MH_PARAM_2 par2)
    {
      if (uni_str_eq(expected_type, "Alert"))
        callback->OnAlertDismissed();
      else if (uni_str_eq(expected_type, "Confirm"))
        callback->OnConfirmDismissed(expected_ok);
      else
        callback->OnPromptDismissed(expected_ok, expected_input);
      oom = oom || SetSequenceCheckVariable();
    }

    BOOL SetSequenceCheckVariable()
    {
      ES_Value value;
      value.type = VALUE_BOOLEAN;
      value.value.boolean = TRUE;
      return OpStatus::IsMemoryError(runtime->PutName(reinterpret_cast<ES_Object *>(runtime->GetGlobalObject()), UNI_L("sequenceCheck"), value));
    }
  };

  DOMDialogsST_OpDocumentListener *test_listener;
  OpDocumentListener *previous_listener;
}

html { "<title>Empty document</title>" }

test("Test: alert (setup, C++, immediate)")
{
  verify(state.doc->ConstructDOMEnvironment() == OpStatus::OK);

  ES_Value value;
  value.type = VALUE_BOOLEAN;
  value.value.boolean = FALSE;
  verify(OpStatus::IsSuccess(state.doc->GetESRuntime()->PutName(reinterpret_cast<ES_Object *>(state.doc->GetESRuntime()->GetGlobalObject()), UNI_L("sequenceCheck"), value)));

  test_listener = OP_NEW(DOMDialogsST_OpDocumentListener, (state.doc->GetESRuntime(), TRUE, UNI_L("Alert"), UNI_L("Test: alert")));
  verify(test_listener);

  previous_listener = state.doc->GetWindow()->GetWindowCommander()->GetDocumentListener();
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(test_listener);
}

test("Test: alert (main, ecmascript, immediate)")
  language ecmascript;
  require success "Test: alert (setup, C++, immediate)";
{
  verify(sequenceCheck == false);
  alert("Test: alert");
  verify(sequenceCheck == true);
}

test("Test: alert (result check, C++, immediate)")
  require success "Test: alert (setup, C++, immediate)";
{
  verify(!test_listener->oom);
  verify(test_listener->result.Compare(UNI_L("ok")) == 0);
}
finally
{
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(previous_listener);

  OP_DELETE(test_listener);
}

html { "<title>Empty document</title>" }

test("Test: confirm (setup, C++, immediate, OK)")
{
  verify(state.doc->ConstructDOMEnvironment() == OpStatus::OK);

  ES_Value value;
  value.type = VALUE_BOOLEAN;
  value.value.boolean = FALSE;
  verify(OpStatus::IsSuccess(state.doc->GetESRuntime()->PutName(reinterpret_cast<ES_Object *>(state.doc->GetESRuntime()->GetGlobalObject()), UNI_L("sequenceCheck"), value)));

  test_listener = OP_NEW(DOMDialogsST_OpDocumentListener, (state.doc->GetESRuntime(), TRUE, UNI_L("Confirm"), UNI_L("Test: confirm"), TRUE));
  verify(test_listener);

  previous_listener = state.doc->GetWindow()->GetWindowCommander()->GetDocumentListener();
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(test_listener);
}

test("Test: confirm (main, ecmascript, immediate, OK)")
  language ecmascript;
  require success "Test: confirm (setup, C++, immediate, OK)";
{
  verify(sequenceCheck == false);
  verify(confirm("Test: confirm") == true);
  verify(sequenceCheck == true);
}

test("Test: confirm (result check, C++, immediate, OK)")
  require success "Test: confirm (setup, C++, immediate, OK)";
{
  verify(!test_listener->oom);
  verify(test_listener->result.Compare(UNI_L("ok")) == 0);
}
finally
{
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(previous_listener);

  OP_DELETE(test_listener);
}

html { "<title>Empty document</title>" }

test("Test: confirm (setup, C++, immediate, cancel)")
{
  verify(state.doc->ConstructDOMEnvironment() == OpStatus::OK);

  ES_Value value;
  value.type = VALUE_BOOLEAN;
  value.value.boolean = FALSE;
  verify(OpStatus::IsSuccess(state.doc->GetESRuntime()->PutName(reinterpret_cast<ES_Object *>(state.doc->GetESRuntime()->GetGlobalObject()), UNI_L("sequenceCheck"), value)));

  test_listener = OP_NEW(DOMDialogsST_OpDocumentListener, (state.doc->GetESRuntime(), TRUE, UNI_L("Confirm"), UNI_L("Test: confirm"), FALSE));
  verify(test_listener);

  previous_listener = state.doc->GetWindow()->GetWindowCommander()->GetDocumentListener();
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(test_listener);
}

test("Test: confirm (main, ecmascript, immediate, cancel)")
  language ecmascript;
  require success "Test: confirm (setup, C++, immediate, cancel)";
{
  verify(sequenceCheck == false);
  verify(confirm("Test: confirm") == false);
  verify(sequenceCheck == true);
}

test("Test: confirm (result check, C++, immediate, cancel)")
  require success "Test: confirm (setup, C++, immediate, cancel)";
{
  verify(!test_listener->oom);
  verify(test_listener->result.Compare(UNI_L("ok")) == 0);
}
finally
{
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(previous_listener);

  OP_DELETE(test_listener);
}

html { "<title>Empty document</title>" }

test("Test: prompt (setup, C++, immediate, OK)")
{
  verify(state.doc->ConstructDOMEnvironment() == OpStatus::OK);

  ES_Value value;
  value.type = VALUE_BOOLEAN;
  value.value.boolean = FALSE;
  verify(OpStatus::IsSuccess(state.doc->GetESRuntime()->PutName(reinterpret_cast<ES_Object *>(state.doc->GetESRuntime()->GetGlobalObject()), UNI_L("sequenceCheck"), value)));

  test_listener = OP_NEW(DOMDialogsST_OpDocumentListener, (state.doc->GetESRuntime(), TRUE, UNI_L("Prompt"), UNI_L("Test: prompt"), TRUE, UNI_L("default value"), UNI_L("example input")));
  verify(test_listener);

  previous_listener = state.doc->GetWindow()->GetWindowCommander()->GetDocumentListener();
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(test_listener);
}

test("Test: prompt (main, ecmascript, immediate, OK)")
  language ecmascript;
  require success "Test: prompt (setup, C++, immediate, OK)";
{
  verify(sequenceCheck == false);
  verify(prompt("Test: prompt", "default value") == "example input");
  verify(sequenceCheck == true);
}

test("Test: prompt (result check, C++, immediate, OK)")
  require success "Test: prompt (setup, C++, immediate, OK)";
{
  verify(!test_listener->oom);
  verify(test_listener->result.Compare(UNI_L("ok")) == 0);
}
finally
{
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(previous_listener);

  OP_DELETE(test_listener);
}

html { "<title>Empty document</title>" }

test("Test: prompt (setup, C++, immediate, OK but empty)")
{
  verify(state.doc->ConstructDOMEnvironment() == OpStatus::OK);

  ES_Value value;
  value.type = VALUE_BOOLEAN;
  value.value.boolean = FALSE;
  verify(OpStatus::IsSuccess(state.doc->GetESRuntime()->PutName(reinterpret_cast<ES_Object *>(state.doc->GetESRuntime()->GetGlobalObject()), UNI_L("sequenceCheck"), value)));

  test_listener = OP_NEW(DOMDialogsST_OpDocumentListener, (state.doc->GetESRuntime(), TRUE, UNI_L("Prompt"), UNI_L("Test: prompt"), TRUE, UNI_L(""), UNI_L("")));
  verify(test_listener);

  previous_listener = state.doc->GetWindow()->GetWindowCommander()->GetDocumentListener();
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(test_listener);
}

test("Test: prompt (main, ecmascript, immediate, OK but empty)")
  language ecmascript;
  require success "Test: prompt (setup, C++, immediate, OK but empty)";
{
  verify(sequenceCheck == false);
  verify(prompt("Test: prompt", "") == "");
  verify(sequenceCheck == true);
}

test("Test: prompt (result check, C++, immediate, OK but empty)")
  require success "Test: prompt (setup, C++, immediate, OK but empty)";
{
  verify(!test_listener->oom);
  verify(test_listener->result.Compare(UNI_L("ok")) == 0);
}
finally
{
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(previous_listener);

  OP_DELETE(test_listener);
}

html { "<title>Empty document</title>" }

test("Test: prompt (setup, C++, immediate, cancel)")
{
  verify(state.doc->ConstructDOMEnvironment() == OpStatus::OK);

  ES_Value value;
  value.type = VALUE_BOOLEAN;
  value.value.boolean = FALSE;
  verify(OpStatus::IsSuccess(state.doc->GetESRuntime()->PutName(reinterpret_cast<ES_Object *>(state.doc->GetESRuntime()->GetGlobalObject()), UNI_L("sequenceCheck"), value)));

  test_listener = OP_NEW(DOMDialogsST_OpDocumentListener, (state.doc->GetESRuntime(), TRUE, UNI_L("Prompt"), UNI_L("Test: prompt"), FALSE, UNI_L("default value"), UNI_L("unexpected input")));
  verify(test_listener);

  previous_listener = state.doc->GetWindow()->GetWindowCommander()->GetDocumentListener();
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(test_listener);
}

test("Test: prompt (main, ecmascript, immediate, cancel)")
  language ecmascript;
  require success "Test: prompt (setup, C++, immediate, cancel)";
{
  verify(sequenceCheck == false);
  verify(prompt("Test: prompt", "default value") == undefined);
  verify(sequenceCheck == true);
}

test("Test: prompt (result check, C++, immediate, cancel)")
  require success "Test: prompt (setup, C++, immediate, cancel)";
{
  verify(!test_listener->oom);
  verify(test_listener->result.Compare(UNI_L("ok")) == 0);
}
finally
{
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(previous_listener);

  OP_DELETE(test_listener);
}


html { "<title>Empty document</title>" }

test("Test: alert (setup, C++, delayed)")
{
  verify(state.doc->ConstructDOMEnvironment() == OpStatus::OK);

  ES_Value value;
  value.type = VALUE_BOOLEAN;
  value.value.boolean = FALSE;
  verify(OpStatus::IsSuccess(state.doc->GetESRuntime()->PutName(reinterpret_cast<ES_Object *>(state.doc->GetESRuntime()->GetGlobalObject()), UNI_L("sequenceCheck"), value)));

  test_listener = OP_NEW(DOMDialogsST_OpDocumentListener, (state.doc->GetESRuntime(), FALSE, UNI_L("Alert"), UNI_L("Test: alert")));
  verify(test_listener);

  previous_listener = state.doc->GetWindow()->GetWindowCommander()->GetDocumentListener();
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(test_listener);
}

test("Test: alert (main, ecmascript, delayed)")
  language ecmascript;
  require success "Test: alert (setup, C++, delayed)";
{
  verify(sequenceCheck == false);
  alert("Test: alert");
  verify(sequenceCheck == true);
}

test("Test: alert (result check, C++, delayed)")
  require success "Test: alert (setup, C++, delayed)";
{
  verify(!test_listener->oom);
  verify(test_listener->result.Compare(UNI_L("ok")) == 0);
}
finally
{
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(previous_listener);

  OP_DELETE(test_listener);
}

html { "<title>Empty document</title>" }

test("Test: confirm (setup, C++, delayed, OK)")
{
  verify(state.doc->ConstructDOMEnvironment() == OpStatus::OK);

  ES_Value value;
  value.type = VALUE_BOOLEAN;
  value.value.boolean = FALSE;
  verify(OpStatus::IsSuccess(state.doc->GetESRuntime()->PutName(reinterpret_cast<ES_Object *>(state.doc->GetESRuntime()->GetGlobalObject()), UNI_L("sequenceCheck"), value)));

  test_listener = OP_NEW(DOMDialogsST_OpDocumentListener, (state.doc->GetESRuntime(), FALSE, UNI_L("Confirm"), UNI_L("Test: confirm"), TRUE));
  verify(test_listener);

  previous_listener = state.doc->GetWindow()->GetWindowCommander()->GetDocumentListener();
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(test_listener);
}

test("Test: confirm (main, ecmascript, delayed, OK)")
  language ecmascript;
  require success "Test: confirm (setup, C++, delayed, OK)";
{
  verify(sequenceCheck == false);
  verify(confirm("Test: confirm") == true);
  verify(sequenceCheck == true);
}

test("Test: confirm (result check, C++, delayed, OK)")
  require success "Test: confirm (setup, C++, delayed, OK)";
{
  verify(!test_listener->oom);
  verify(test_listener->result.Compare(UNI_L("ok")) == 0);
}
finally
{
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(previous_listener);

  OP_DELETE(test_listener);
}

html { "<title>Empty document</title>" }

test("Test: confirm (setup, C++, delayed, cancel)")
{
  verify(state.doc->ConstructDOMEnvironment() == OpStatus::OK);

  ES_Value value;
  value.type = VALUE_BOOLEAN;
  value.value.boolean = FALSE;
  verify(OpStatus::IsSuccess(state.doc->GetESRuntime()->PutName(reinterpret_cast<ES_Object *>(state.doc->GetESRuntime()->GetGlobalObject()), UNI_L("sequenceCheck"), value)));

  test_listener = OP_NEW(DOMDialogsST_OpDocumentListener, (state.doc->GetESRuntime(), FALSE, UNI_L("Confirm"), UNI_L("Test: confirm"), FALSE));
  verify(test_listener);

  previous_listener = state.doc->GetWindow()->GetWindowCommander()->GetDocumentListener();
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(test_listener);
}

test("Test: confirm (main, ecmascript, delayed, cancel)")
  language ecmascript;
  require success "Test: confirm (setup, C++, delayed, cancel)";
{
  verify(sequenceCheck == false);
  verify(confirm("Test: confirm") == false);
  verify(sequenceCheck == true);
}

test("Test: confirm (result check, C++, delayed, cancel)")
  require success "Test: confirm (setup, C++, delayed, cancel)";
{
  verify(!test_listener->oom);
  verify(test_listener->result.Compare(UNI_L("ok")) == 0);
}
finally
{
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(previous_listener);

  OP_DELETE(test_listener);
}

html { "<title>Empty document</title>" }

test("Test: prompt (setup, C++, delayed, OK)")
{
  verify(state.doc->ConstructDOMEnvironment() == OpStatus::OK);

  ES_Value value;
  value.type = VALUE_BOOLEAN;
  value.value.boolean = FALSE;
  verify(OpStatus::IsSuccess(state.doc->GetESRuntime()->PutName(reinterpret_cast<ES_Object *>(state.doc->GetESRuntime()->GetGlobalObject()), UNI_L("sequenceCheck"), value)));

  test_listener = OP_NEW(DOMDialogsST_OpDocumentListener, (state.doc->GetESRuntime(), FALSE, UNI_L("Prompt"), UNI_L("Test: prompt"), TRUE, UNI_L("default value"), UNI_L("example input")));
  verify(test_listener);

  previous_listener = state.doc->GetWindow()->GetWindowCommander()->GetDocumentListener();
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(test_listener);
}

test("Test: prompt (main, ecmascript, delayed, OK)")
  language ecmascript;
  require success "Test: prompt (setup, C++, delayed, OK)";
{
  verify(sequenceCheck == false);
  verify(prompt("Test: prompt", "default value") == "example input");
  verify(sequenceCheck == true);
}

test("Test: prompt (result check, C++, delayed, OK)")
  require success "Test: prompt (setup, C++, delayed, OK)";
{
  verify(!test_listener->oom);
  verify(test_listener->result.Compare(UNI_L("ok")) == 0);
}
finally
{
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(previous_listener);

  OP_DELETE(test_listener);
}

html { "<title>Empty document</title>" }

test("Test: prompt (setup, C++, delayed, OK but empty)")
{
  verify(state.doc->ConstructDOMEnvironment() == OpStatus::OK);

  ES_Value value;
  value.type = VALUE_BOOLEAN;
  value.value.boolean = FALSE;
  verify(OpStatus::IsSuccess(state.doc->GetESRuntime()->PutName(reinterpret_cast<ES_Object *>(state.doc->GetESRuntime()->GetGlobalObject()), UNI_L("sequenceCheck"), value)));

  test_listener = OP_NEW(DOMDialogsST_OpDocumentListener, (state.doc->GetESRuntime(), FALSE, UNI_L("Prompt"), UNI_L("Test: prompt"), TRUE, UNI_L(""), UNI_L("")));
  verify(test_listener);

  previous_listener = state.doc->GetWindow()->GetWindowCommander()->GetDocumentListener();
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(test_listener);
}

test("Test: prompt (main, ecmascript, delayed, OK but empty)")
  language ecmascript;
  require success "Test: prompt (setup, C++, delayed, OK but empty)";
{
  verify(sequenceCheck == false);
  verify(prompt("Test: prompt", "") == "");
  verify(sequenceCheck == true);
}

test("Test: prompt (result check, C++, delayed, OK but empty)")
  require success "Test: prompt (setup, C++, delayed, OK but empty)";
{
  verify(!test_listener->oom);
  verify(test_listener->result.Compare(UNI_L("ok")) == 0);
}
finally
{
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(previous_listener);

  OP_DELETE(test_listener);
}

html { "<title>Empty document</title>" }

test("Test: prompt (setup, C++, delayed, cancel)")
{
  verify(state.doc->ConstructDOMEnvironment() == OpStatus::OK);

  ES_Value value;
  value.type = VALUE_BOOLEAN;
  value.value.boolean = FALSE;
  verify(OpStatus::IsSuccess(state.doc->GetESRuntime()->PutName(reinterpret_cast<ES_Object *>(state.doc->GetESRuntime()->GetGlobalObject()), UNI_L("sequenceCheck"), value)));

  test_listener = OP_NEW(DOMDialogsST_OpDocumentListener, (state.doc->GetESRuntime(), FALSE, UNI_L("Prompt"), UNI_L("Test: prompt"), FALSE, UNI_L("default value"), UNI_L("unexpected input")));
  verify(test_listener);

  previous_listener = state.doc->GetWindow()->GetWindowCommander()->GetDocumentListener();
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(test_listener);
}

test("Test: prompt (main, ecmascript, delayed, cancel)")
  language ecmascript;
  require success "Test: prompt (setup, C++, delayed, cancel)";
{
  verify(sequenceCheck == false);
  verify(prompt("Test: prompt", "default value") == undefined);
  verify(sequenceCheck == true);
}

test("Test: prompt (result check, C++, delayed, cancel)")
  require success "Test: prompt (setup, C++, delayed, cancel)";
{
  verify(!test_listener->oom);
  verify(test_listener->result.Compare(UNI_L("ok")) == 0);
}
finally
{
  state.doc->GetWindow()->GetWindowCommander()->SetDocumentListener(previous_listener);

  OP_DELETE(test_listener);
}

test("Bad this objects (CORE-17086)")
  language ecmascript;
{
  try
    {
      alert.call({}, "foo"); // Should fail not crash
      verify(!"Should have thrown an exception");
    }
  catch (e)
    {
    }

  try
    {
      prompt.call({}, "foo"); // Should fail not crash
      verify(!"Should have thrown an exception");
    }
  catch (e)
    {
    }

  try
    {
      confirm.call({}, "foo"); // Should fail silently, not crash
      verify(!"Should have thrown an exception");
    }
  catch (e)
    {
    }
}
