/* -*- Mode: c++; -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.  It may not be distributed
 * under any circumstances.
 *
 */
group "DOM.Misc.XSLTProcessor";

language ecmascript;
require XSLT_SUPPORT;
require DOM3_LOAD;
require DOM3_SAVE;

xml
{
  "<root/>"
}

test("XSLTProcessor (setup 1)")
{
  loadXML = function parseXML (source)
    {
      var lsparser = document.implementation.createLSParser (DOMImplementationLS.MODE_SYNCHRONOUS, "");
      var lsinput = document.implementation.createLSInput ();
      lsinput.stringData = source;
      return lsparser.parse (lsinput);
    };

  save = function save (document)
    {
      function fixHTML (result)
      {
        /* Known problem: the XSLT engine always ends HTML output with a newline
           character, and the HTML parser, correctly ignoring BODY and HTML end
           tags, incorrectly (but harmlessly) puts the newline text node in the
           BODY element. */
        if (result.substr (-15) == "\n</body></html>")
          return result.substr (0, result.length - 15) + "</body></html>\n";
        else
          return result;
      }

      if (document instanceof DocumentFragment)
      {
        var result = "";
        for (var child = document.firstChild; child; child = child.nextSibling)
          if (child instanceof HTMLElement)
            result += child.outerHTML;
          else
          {
            var lsserializer = document.ownerDocument.implementation.createLSSerializer ();
            lsserializer.domConfig.setParameter ("xml-declaration", false);
            result += lsserializer.writeToString (child);
          }
        return fixHTML (result);
      }
      else if (document instanceof HTMLDocument)
        return fixHTML (document.documentElement.outerHTML);
      else
      {
        var lsserializer = document.implementation.createLSSerializer ();
        lsserializer.domConfig.setParameter ("xml-declaration", false);
        return lsserializer.writeToString (document);
      }
    };
}

/* Tests default XML output. */
test("XSLTProcessor #1")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>PASS</result>");
}

/* Tests explicit XML output. */
test("XSLTProcessor #2")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><output method='xml'/><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>PASS</result>");
}

/* Tests default HTML output. */
test("XSLTProcessor #3")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><html xmlns=''><p>PASS</p></html></template></stylesheet>"));
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (result instanceof HTMLDocument);
  verify (save (result) == "<html><head></head><body><p>PASS</p></body></html>\n");
}

/* Tests explicit HTML output. */
test("XSLTProcessor #4")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><output method='html'/><template match='/'><p xmlns=''>PASS</p></template></stylesheet>"));
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (result instanceof HTMLDocument);
  verify (save (result) == "<html><head></head><body><p>PASS</p></body></html>\n");
}

/* Tests explicit text output. */
test("XSLTProcessor #5")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><output method='text'/><template match='/'>PASS</template></stylesheet>"));
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>PASS</result>");
}

/* Tests that xsl:import works via XSLTProcessor. */
test("XSLTProcessor #6")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><import href='data:text/xml,%3Cstylesheet version=%271.0%27 xmlns=%27http://www.w3.org/1999/XSL/Transform%27%3E%3Ctemplate match=%27/%27%3E%3Cresult xmlns=%27%27%3EPASS%3C/result%3E%3C/template%3E%3C/stylesheet%3E'/></stylesheet>"));
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>PASS</result>");
}

/* Tests that xsl:include works via XSLTProcessor. */
test("XSLTProcessor #7")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><include href='data:text/xml,%3Cstylesheet version=%271.0%27 xmlns=%27http://www.w3.org/1999/XSL/Transform%27%3E%3Ctemplate match=%27/%27%3E%3Cresult xmlns=%27%27%3EPASS%3C/result%3E%3C/template%3E%3C/stylesheet%3E'/></stylesheet>"));
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>PASS</result>");
}

/* Tests that document() works via XSLTProcessor. */
test("XSLTProcessor #8")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><copy-of select='document(\"data:text/xml,%3Cresult%3EPASS%3C/result%3E\")'/></template></stylesheet>"));
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>PASS</result>");
}

/* Tests setting a number parameter. */
test("XSLTProcessor #9")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform'><xsl:param name='x' select='0'/><xsl:template match='/'><result><xsl:value-of select='$x'/></result></xsl:template></xsl:stylesheet>"));
  xsltprocessor.setParameter (null, "x", 4711);
  verify (xsltprocessor.getParameter (null, "x") == 4711);
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>4711</result>");
}

/* Tests setting a boolean parameter. */
test("XSLTProcessor #10")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform'><xsl:param name='x' select='false()'/><xsl:template match='/'><result><xsl:value-of select='$x'/></result></xsl:template></xsl:stylesheet>"));
  xsltprocessor.setParameter (null, "x", true);
  verify (xsltprocessor.getParameter (null, "x") == true);
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>true</result>");
}

/* Tests setting a string parameter. */
test("XSLTProcessor #11")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform'><xsl:param name='x' select='\"FAIL\"'/><xsl:template match='/'><result><xsl:value-of select='$x'/></result></xsl:template></xsl:stylesheet>"));
  xsltprocessor.setParameter (null, "x", "PASS");
  verify (xsltprocessor.getParameter (null, "x") == "PASS");
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>PASS</result>");
}

/* Tests setting a single node parameter. */
test("XSLTProcessor #12")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform'><xsl:param name='x'>FAIL</xsl:param><xsl:template match='/'><result><xsl:value-of select='$x'/></result></xsl:template></xsl:stylesheet>"));
  var node = document.createTextNode ("PASS");
  xsltprocessor.setParameter (null, "x", node);
  verify (xsltprocessor.getParameter (null, "x") === node);
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>PASS</result>");
}

/* Tests setting a nodelist parameter. */
test("XSLTProcessor #13")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform'><xsl:param name='x'>FAIL</xsl:param><xsl:template match='/'><result><xsl:for-each select='$x[self::text()]'><xsl:value-of select='.'/></xsl:for-each></result></xsl:template></xsl:stylesheet>"));
  var nodes = loadXML ("<root>P<!--X-->A<!--X-->S<!--X-->S</root>").documentElement.childNodes;
  xsltprocessor.setParameter (null, "x", nodes);
  verify (xsltprocessor.getParameter (null, "x") === nodes);
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>PASS</result>");
}

/* Tests setting a string parameter removing it again. */
test("XSLTProcessor #14")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform'><xsl:param name='x' select='\"removed\"'/><xsl:template match='/'><result><xsl:value-of select='$x'/></result></xsl:template></xsl:stylesheet>"));
  xsltprocessor.setParameter (null, "x", "set");
  xsltprocessor.removeParameter (null, "x");
  verify (xsltprocessor.getParameter (null, "x") == null);
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>removed</result>");
}

/* Tests setting four string parameters. */
test("XSLTProcessor #15")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform'><xsl:param name='x1' select='\"F\"'/><xsl:param name='x2' select='\"A\"'/><xsl:param name='x3' select='\"I\"'/><xsl:param name='x4' select='\"L\"'/><xsl:template match='/'><result><xsl:value-of select='$x1'/><xsl:value-of select='$x2'/><xsl:value-of select='$x3'/><xsl:value-of select='$x4'/></result></xsl:template></xsl:stylesheet>"));
  xsltprocessor.setParameter (null, "x1", "P");
  xsltprocessor.setParameter (null, "x4", "S");
  xsltprocessor.setParameter (null, "x2", "A");
  xsltprocessor.setParameter (null, "x3", "S");
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>PASS</result>");
}

/* Tests setting four string parameters and clearing parameters. */
test("XSLTProcessor #16")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform'><xsl:param name='x1' select='\"P\"'/><xsl:param name='x2' select='\"A\"'/><xsl:param name='x3' select='\"S\"'/><xsl:param name='x4' select='\"S\"'/><xsl:template match='/'><result><xsl:value-of select='$x1'/><xsl:value-of select='$x2'/><xsl:value-of select='$x3'/><xsl:value-of select='$x4'/></result></xsl:template></xsl:stylesheet>"));
  xsltprocessor.setParameter (null, "x1", "F");
  xsltprocessor.setParameter (null, "x4", "L");
  xsltprocessor.setParameter (null, "x2", "A");
  xsltprocessor.setParameter (null, "x3", "I");
  xsltprocessor.clearParameters ();
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>PASS</result>");
}

/* Tests setting three string parameters and removing the middle one. */
test("XSLTProcessor #17")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform'><xsl:param name='x1' select='\"FAIL\"'/><xsl:param name='x2' select='\"PASS\"'/><xsl:param name='x3' select='\"FAIL\"'/><xsl:template match='/'><result><xsl:value-of select='$x1'/>, <xsl:value-of select='$x2'/>, <xsl:value-of select='$x3'/></result></xsl:template></xsl:stylesheet>"));
  xsltprocessor.setParameter (null, "x1", "PASS");
  xsltprocessor.setParameter (null, "x2", "FAIL");
  xsltprocessor.setParameter (null, "x3", "PASS");
  xsltprocessor.removeParameter (null, "x2");
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>PASS, PASS, PASS</result>");
}

/* Tests setting parameter with namespace URI. */
test("XSLTProcessor #18")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:opera='http://www.opera.com/'><xsl:param name='opera:x' select='\"FAIL\"'/><xsl:template match='/'><result xsl:exclude-result-prefixes='opera'><xsl:value-of select='$opera:x'/></result></xsl:template></xsl:stylesheet>"));
  xsltprocessor.setParameter ("http://www.opera.com/", "x", "PASS");
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>PASS</result>");
}

/* Tests transforming several times. */
test("XSLTProcessor #19")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform'><xsl:template match='/'><result>PASS<xsl:value-of select='source/@index'/></result></xsl:template></xsl:stylesheet>"));
  var result1 = xsltprocessor.transformToDocument (loadXML ("<source index='1'/>"));
  verify (save (result1) == "<result>PASS1</result>");
  var result2 = xsltprocessor.transformToDocument (loadXML ("<source index='2'/>"));
  verify (save (result2) == "<result>PASS2</result>");
  var result3 = xsltprocessor.transformToDocument (loadXML ("<source index='3'/>"));
  verify (save (result3) == "<result>PASS3</result>");
}

/* Tests transforming several times with different parameters. */
test("XSLTProcessor #20")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform'><xsl:param name='index' select='\"FAIL\"'/><xsl:template match='/'><result>PASS<xsl:value-of select='$index'/></result></xsl:template></xsl:stylesheet>"));
  xsltprocessor.setParameter (null, "index", 1);
  var result1 = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result1) == "<result>PASS1</result>");
  xsltprocessor.setParameter (null, "index", 2);
  var result2 = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result2) == "<result>PASS2</result>");
  xsltprocessor.setParameter (null, "index", 3);
  var result3 = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result3) == "<result>PASS3</result>");
}

/* Tests resetting an XSLTProcessor. */
test("XSLTProcessor #21")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS1</result></template></stylesheet>"));
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>PASS1</result>");
  xsltprocessor.reset ();
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS2</result></template></stylesheet>"));
  var result = xsltprocessor.transformToDocument (loadXML ("<source/>"));
  verify (save (result) == "<result>PASS2</result>");
}

/* Tests error handling in importStylesheet: invalid argument (string). */
test("XSLTProcessor #22")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS1</result></template></stylesheet>");
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("WRONG_ARGUMENTS_ERR") == 0);
}

/* Tests error handling in importStylesheet: invalid argument (native object). */
test("XSLTProcessor #23")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet ({ toString: function () { return "<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS1</result></template></stylesheet>"; }});
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("WRONG_ARGUMENTS_ERR") == 0);
}

/* Tests error handling in importStylesheet: invalid argument (text node). */
test("XSLTProcessor #24")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet (document.createTextNode ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS1</result></template></stylesheet>"));
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("NOT_SUPPORTED_ERR") == 0);
}

/* Tests error handling in importStylesheet: importing two stylesheets without resetting. */
test("XSLTProcessor #25")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
  try
  {
    xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("NOT_SUPPORTED_ERR") == 0);
}

/* Tests error handling in importStylesheet: invalid stylesheet (missing version attribute). */
test("XSLTProcessor #26")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet (loadXML ("<stylesheet xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("XSLT_PARSING_FAILED_ERR") == 0);
}

/* Tests error handling in importStylesheet: invalid stylesheet (disallowed import). */
test("XSLTProcessor #27")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><import href='http://www.opera.com/'/></stylesheet>"));
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("XSLT_PARSING_FAILED_ERR") == 0);
}

/* Tests error handling in importStylesheet: invalid stylesheet (invalid pattern). */
test("XSLTProcessor #28")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><variable name='x'/><template match='$x'/></stylesheet>"));
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("XSLT_PARSING_FAILED_ERR") == 0);
}

/* Tests error handling in transformToDocument: invalid argument (string). */
test("XSLTProcessor #29")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
    xsltprocessor.transformToDocument ("source");
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("WRONG_ARGUMENTS_ERR") == 0);
}

/* Tests error handling in transformToDocument: invalid argument (native object). */
test("XSLTProcessor #30")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
    xsltprocessor.transformToDocument ({});
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("WRONG_ARGUMENTS_ERR") == 0);
}

/* Tests error handling in transformToDocument: invalid argument (text node). */
test("XSLTProcessor #31")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
    xsltprocessor.transformToDocument (document.createTextNode ("source"));
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("NOT_SUPPORTED_ERR") == 0);
}

/* Tests error handling in transformToDocument: called without stylesheet. */
test("XSLTProcessor #32")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.transformToDocument (loadXML ("<source/>"));
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("RESOURCE_UNAVAILABLE_ERR") == 0);
}

/* Tests error handling in transformToDocument: invalid stylesheet. */
test("XSLTProcessor #33")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><variable name='x' select='\"string\"'/><template match='/'><value-of select='$x/child'/></template></stylesheet>"));
    xsltprocessor.transformToDocument (loadXML ("<source/>"));
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("XSLT_PROCESSING_FAILED_ERR") == 0);
}

/* Tests error handling in transformToFragment: invalid argument (string). */
test("XSLTProcessor #34")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
    xsltprocessor.transformToFragment ("source", document);
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("WRONG_ARGUMENTS_ERR") == 0);
}

/* Tests error handling in transformToFragment: invalid argument (native object). */
test("XSLTProcessor #35")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
    xsltprocessor.transformToFragment ({}, document);
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("WRONG_ARGUMENTS_ERR") == 0);
}

/* Tests error handling in transformToFragment: invalid argument (text node). */
test("XSLTProcessor #36")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
    xsltprocessor.transformToFragment (document.createTextNode ("source"), document);
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("NOT_SUPPORTED_ERR") == 0);
}

/* Tests error handling in transformToFragment: invalid second argument (string). */
test("XSLTProcessor #37")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
    xsltprocessor.transformToFragment (loadXML ("<source/>"), "document");
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("WRONG_ARGUMENTS_ERR") == 0);
}

/* Tests error handling in transformToFragment: invalid second argument (native object). */
test("XSLTProcessor #38")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
    xsltprocessor.transformToFragment (loadXML ("<source/>"), {});
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("WRONG_ARGUMENTS_ERR") == 0);
}

/* Tests error handling in transformToFragment: invalid second argument (text node). */
test("XSLTProcessor #39")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
    xsltprocessor.transformToFragment (loadXML ("<source/>"), document.createTextNode ("document"));
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("WRONG_ARGUMENTS_ERR") == 0);
}

/* Tests error handling in transformToFragment: called without stylesheet. */
test("XSLTProcessor #40")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.transformToFragment (loadXML ("<source/>"), document);
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("RESOURCE_UNAVAILABLE_ERR") == 0);
}

/* Tests error handling in transformToFragment: invalid stylesheet. */
test("XSLTProcessor #41")
{
  var xsltprocessor = new XSLTProcessor;
  var exception = null;
  try
  {
    xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><variable name='x' select='\"string\"'/><template match='/'><value-of select='$x/child'/></template></stylesheet>"));
    xsltprocessor.transformToFragment (loadXML ("<source/>"), document);
  }
  catch (exception0)
  {
    exception = exception0;
  }
  verify (exception);
  verify (exception.message.indexOf ("XSLT_PROCESSING_FAILED_ERR") == 0);
}

/* Tests default XML output with transformToFragment. */
test("XSLTProcessor #42")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
  var result = xsltprocessor.transformToFragment (loadXML ("<source/>"), document);
  verify (save (result) == "<result>PASS</result>");
}

/* Tests explicit XML output with transformToFragment. */
test("XSLTProcessor #43")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><output method='xml'/><template match='/'><result xmlns=''>PASS</result></template></stylesheet>"));
  var result = xsltprocessor.transformToFragment (loadXML ("<source/>"), document);
  verify (save (result) == "<result>PASS</result>");
}

/* Tests default HTML output with transformToFragment (shouldn't work, since we're in an XML document). */
test("XSLTProcessor #44")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><html xmlns=''><p>PASS</p></html></template></stylesheet>"));
  var result = xsltprocessor.transformToFragment (loadXML ("<source/>"), document);
  verify (result.firstChild instanceof Element);
  verify (save (result) == "<html><p>PASS</p></html>");
}

/* Tests explicit HTML output with transformToFragment. */
test("XSLTProcessor #45")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><output method='html'/><template match='/'><p xmlns=''>PASS</p></template></stylesheet>"));
  var result = xsltprocessor.transformToFragment (loadXML ("<source/>"), document);
  verify (result.firstChild instanceof HTMLParagraphElement);
  verify (save (result) == "<p>PASS</p>\n");
}

/* Tests explicit text output with transformToFragment. */
test("XSLTProcessor #46")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><output method='text'/><template match='/'>PASS</template></stylesheet>"));
  var result = xsltprocessor.transformToFragment (loadXML ("<source/>"), document);
  verify (save (result) == "<result>PASS</result>");
}

/* Tests default multiple top-level elements with transformToFragment. */
test("XSLTProcessor #48")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><result xmlns=''>PASS1</result><result xmlns=''>PASS2</result><result xmlns=''>PASS3</result></template></stylesheet>"));
  var result = xsltprocessor.transformToFragment (loadXML ("<source/>"), document);
  verify (save (result) == "<result>PASS1</result><result>PASS2</result><result>PASS3</result>");
}

/* Tests top-level text with transformToFragment. */
test("XSLTProcessor #49")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'>PASS</template></stylesheet>"));
  var result = xsltprocessor.transformToFragment (loadXML ("<source/>"), document);
  verify (save (result) == "PASS");
}

/* Tests white-space stripping via XSLTProcessor (no stripping). */
test("XSLTProcessor #50")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform'><xsl:strip-space elements='y'/><xsl:template match='/'><result><xsl:copy-of select='*//text()'/></result></xsl:template></xsl:stylesheet>"));
  var result = xsltprocessor.transformToDocument (loadXML ("<source>P<x> </x>A<x> </x>S<x> </x>S</source>"), document);
  verify (save (result) == "<result>P A S S</result>");
}

/* Tests white-space stripping via XSLTProcessor (stripping). */
test("XSLTProcessor #51")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform'><xsl:strip-space elements='x'/><xsl:template match='/'><result><xsl:copy-of select='*//text()'/></result></xsl:template></xsl:stylesheet>"));
  var result = xsltprocessor.transformToDocument (loadXML ("<source>P<x> </x>A<x> </x>S<x> </x>S</source>"), document);
  verify (save (result) == "<result>PASS</result>");
}

html
{
  "<title>Dummy document</title>"
}

test("XSLTProcessor (setup 2)")
{
  loadXML = function parseXML (source)
    {
      var lsparser = document.implementation.createLSParser (DOMImplementationLS.MODE_SYNCHRONOUS, "");
      var lsinput = document.implementation.createLSInput ();
      lsinput.stringData = source;
      return lsparser.parse (lsinput);
    };

  save = function save (document)
    {
      function fixHTML (result)
      {
        /* Known problem: the XSLT engine always ends HTML output with a newline
           character, and the HTML parser, correctly ignoring BODY and HTML end
           tags, incorrectly (but harmlessly) puts the newline text node in the
           BODY element. */
        if (result.substr (-15) == "\n</BODY></HTML>")
          return result.substr (0, result.length - 15) + "</BODY></HTML>\n";
        else
          return result;
      }

      if (document instanceof DocumentFragment)
      {
        var result = "";
        for (var child = document.firstChild; child; child = child.nextSibling)
          if (child instanceof HTMLElement)
            result += child.outerHTML;
          else
          {
            var lsserializer = document.ownerDocument.implementation.createLSSerializer ();
            lsserializer.domConfig.setParameter ("xml-declaration", false);
            result += lsserializer.writeToString (child);
          }
        return fixHTML (result);
      }
      else if (document instanceof HTMLDocument)
        return fixHTML (document.documentElement.outerHTML);
      else
      {
        var lsserializer = document.implementation.createLSSerializer ();
        lsserializer.domConfig.setParameter ("xml-declaration", false);
        return lsserializer.writeToString (document);
      }
    };
}

/* Tests default XML output with transformToFragment (shouldn't work, since we're in an HTML document). */
test("XSLTProcessor #52")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><div xmlns=''>PASS</div></template></stylesheet>"));
  var result = xsltprocessor.transformToFragment (loadXML ("<source/>"), document);
  verify (result.firstChild instanceof HTMLDivElement);
  verify (save (result) == "<div>PASS</div>\n");
}

/* Tests explicit XML output with transformToFragment. */
test("XSLTProcessor #53")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><output method='xml'/><template match='/'><div xmlns=''>PASS</div></template></stylesheet>"));
  var result = xsltprocessor.transformToFragment (loadXML ("<source/>"), document);
  verify (result.firstChild instanceof Element);
  verify (save (result) == "<div>PASS</div>");
}

/* Tests default HTML output with transformToFragment. */
test("XSLTProcessor #54")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><html xmlns=''><p>PASS</p></html></template></stylesheet>"));
  var result = xsltprocessor.transformToFragment (loadXML ("<source/>"), document);
  verify (result.firstChild instanceof HTMLParagraphElement);
  verify (save (result) == "<p>PASS</p>\n");
}

/* Tests default HTML output without {null, 'html'} root with transformToFragment. */
test("XSLTProcessor #55")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><template match='/'><div xmlns=''>PASS</div></template></stylesheet>"));
  var result = xsltprocessor.transformToFragment (loadXML ("<source/>"), document);
  verify (result.firstChild instanceof HTMLDivElement);
  verify (save (result) == "<div>PASS</div>\n");
}

/* Tests explicit HTML output with transformToFragment. */
test("XSLTProcessor #56")
{
  var xsltprocessor = new XSLTProcessor;
  xsltprocessor.importStylesheet (loadXML ("<stylesheet version='1.0' xmlns='http://www.w3.org/1999/XSL/Transform'><output method='html'/><template match='/'><p xmlns=''>PASS</p></template></stylesheet>"));
  var result = xsltprocessor.transformToFragment (loadXML ("<source/>"), document);
  verify (result.firstChild instanceof HTMLParagraphElement);
  verify (save (result) == "<p>PASS</p>\n");
}

/* Tests the result document type after transformToDocument */
test("XSLTProcessor #57")
{
  // Taken from bug CORE-20754
  var xml1 = '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"><xsl:output method="xml" omit-xml-declaration="yes" /><xsl:template match="/"><xsl:element name="ab"></xsl:element></xsl:template></xsl:stylesheet>';

  var doc1 = (new DOMParser()).parseFromString(xml1,'text/xml');
  verify(doc1);

  var xml2 = '<?xml version="1.0"?><ab/>';
  var doc2 = (new DOMParser()).parseFromString(xml2,'text/xml');
  verify(doc2);

  var xslt = new XSLTProcessor();
  xslt.importStylesheet(doc1);
  var ttd = xslt.transformToDocument(doc2);
  verify(ttd);
  verify(ttd instanceof XMLDocument);
}
