group "DOM.Traversal.TreeWalker";
require init;

require DOM2_TRAVERSAL;

language ecmascript;

html
{
  "<html>"
    "<body>"
      "<div id='tree1'>"
        "<div id='tree1.1'>"
          "<div id='tree1.1.1' class='skip'>"
          "</div>"
          "<div id='tree1.1.2'>"
          "</div>"
          "<div id='tree1.1.3' class='skip'>"
          "</div>"
        "</div>"
        "<div id='tree1.2' class='reject'>"
          "<div id='tree1.2.1'>"
          "</div>"
          "<div id='tree1.2.2' class='skip'>"
          "</div>"
          "<div id='tree1.2.3'>"
          "</div>"
        "</div>"
        "<div id='tree1.3' class='skip'>"
          "<div id='tree1.3.1' class='skip'>"
          "</div>"
          "<div id='tree1.3.2'>"
          "</div>"
          "<div id='tree1.3.3'>"
          "</div>"
        "</div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Setup #1")
{
  assignmentNotAllowed = function assignmentNotAllowed(treeWalker, property, new_value, old_value)
  {
    "use strict";
    try
    {
      treeWalker[property] = new_value;
    }
    catch(e)
    {
      if (e instanceof TypeError)
        return (treeWalker[property] == old_value);
    }
    return false;
  }

  move = function move(treeWalker, method, currentNode, expected)
  {
    try
    {
      try
      {
        treeWalker.currentNode = currentNode;
        var result = method.apply(treeWalker);
        if (!(result == null && expected == null || result == expected))
          return false;
        if (!(expected == null && treeWalker.currentNode == currentNode || treeWalker.currentNode == expected))
          return false;
        return true;
      }
      catch(e)
      {
        return false;
      }
    }
    finally
    {
      treeWalker.currentNode = currentNode;
    }
  }

  filter_skip = { acceptNode: function (node) { return node.className.indexOf("skip") == -1 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP; } };
  filter_reject = { acceptNode: function (node) { return node.className.indexOf("reject") == -1 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT; } };
  filter_throw = { acceptNode: function (node) { if (this.do_throw) throw "got ya!"; else return NodeFilter.FILTER_ACCEPT; }, do_throw: false };

  // test("TreeWalker: bug #1")
  filter_bug1 = { acceptNode: function (node) { return node.id && node.id.substring(0, 8) == "tree1.3." ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP; } };

  tree1 = document.getElementById("tree1");
  tree11 = document.getElementById("tree1.1");
  tree111 = document.getElementById("tree1.1.1");
  tree112 = document.getElementById("tree1.1.2");
  tree113 = document.getElementById("tree1.1.3");
  tree12 = document.getElementById("tree1.2");
  tree121 = document.getElementById("tree1.2.1");
  tree122 = document.getElementById("tree1.2.2");
  tree123 = document.getElementById("tree1.2.3");
  tree13 = document.getElementById("tree1.3");
  tree131 = document.getElementById("tree1.3.1");
  tree132 = document.getElementById("tree1.3.2");
  tree133 = document.getElementById("tree1.3.3");

  verify(tree1 && tree1.id == "tree1");
  verify(tree11 && tree11.id == "tree1.1");
  verify(tree111 && tree111.id == "tree1.1.1");
  verify(tree112 && tree112.id == "tree1.1.2");
  verify(tree113 && tree113.id == "tree1.1.3");
  verify(tree12 && tree12.id == "tree1.2");
  verify(tree121 && tree121.id == "tree1.2.1");
  verify(tree122 && tree122.id == "tree1.2.2");
  verify(tree123 && tree123.id == "tree1.2.3");
  verify(tree13 && tree13.id == "tree1.3");
  verify(tree131 && tree131.id == "tree1.3.1");
  verify(tree132 && tree132.id == "tree1.3.2");
  verify(tree133 && tree133.id == "tree1.3.3");

  /* Workaround for a bug in the ECMAScript engine: the 'in' operator
     sometimes doesn't work for properties on host objects because the
     engine optimizes away the lookup if it hasn't seen the name used
     as a property name before.  So we use them all as property names
     here to make sure the engine has seen them. */
  var identifiers = {
    root: null,
    whatToShow: null,
    filter: null,
    expandEntityReferences: null,
    currentNode: null
  };
}

// --------------------------------------------------------------------

test("HasProperty: TreeWalker")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);

  verify("root" in treeWalker);
  verify("whatToShow" in treeWalker);
  verify("filter" in treeWalker);
  verify("expandEntityReferences" in treeWalker);
  verify("currentNode" in treeWalker);
}

test("Get: TreeWalker")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);

  verify(treeWalker.root == tree1);
  verify(treeWalker.whatToShow == NodeFilter.SHOW_ALL);
  verify(treeWalker.filter == filter_skip);
  verify(treeWalker.expandEntityReferences == true);
  verify(treeWalker.currentNode == tree1);
}

test("Put: TreeWalker")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);

  verify(assignmentNotAllowed(treeWalker, "root", null, tree1));
  verify(assignmentNotAllowed(treeWalker, "whatToShow", 0, NodeFilter.SHOW_ALL));
  verify(assignmentNotAllowed(treeWalker, "filter", null, filter_skip));
  verify(assignmentNotAllowed(treeWalker, "expandEntityReferences", false, true));

  treeWalker.currentNode = tree11;
  verify(treeWalker.currentNode == tree11);
}

// --------------------------------------------------------------------

test("TreeWalker: tree1 (normal)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree1, null));
    verify(move(treeWalker, firstChild, tree1, tree11));
    verify(move(treeWalker, lastChild, tree1, tree13));
    verify(move(treeWalker, previousSibling, tree1, null));
    verify(move(treeWalker, nextSibling, tree1, null));
    verify(move(treeWalker, previousNode, tree1, null));
    verify(move(treeWalker, nextNode, tree1, tree11));
  }
}

test("TreeWalker: tree11 (normal)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree11, tree1));
    verify(move(treeWalker, firstChild, tree11, tree111));
    verify(move(treeWalker, lastChild, tree11, tree113));
    verify(move(treeWalker, previousSibling, tree11, null));
    verify(move(treeWalker, nextSibling, tree11, tree12));
    verify(move(treeWalker, previousNode, tree11, tree1));
    verify(move(treeWalker, nextNode, tree11, tree111));
  }
}

test("TreeWalker: tree111 (normal)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree111, tree11));
    verify(move(treeWalker, firstChild, tree111, null));
    verify(move(treeWalker, lastChild, tree111, null));
    verify(move(treeWalker, previousSibling, tree111, null));
    verify(move(treeWalker, nextSibling, tree111, tree112));
    verify(move(treeWalker, previousNode, tree111, tree11));
    verify(move(treeWalker, nextNode, tree111, tree112));
  }
}

test("TreeWalker: tree112 (normal)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree112, tree11));
    verify(move(treeWalker, firstChild, tree112, null));
    verify(move(treeWalker, lastChild, tree112, null));
    verify(move(treeWalker, previousSibling, tree112, tree111));
    verify(move(treeWalker, nextSibling, tree112, tree113));
    verify(move(treeWalker, previousNode, tree112, tree111));
    verify(move(treeWalker, nextNode, tree112, tree113));
  }
}

test("TreeWalker: tree113 (normal)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree113, tree11));
    verify(move(treeWalker, firstChild, tree113, null));
    verify(move(treeWalker, lastChild, tree113, null));
    verify(move(treeWalker, previousSibling, tree113, tree112));
    verify(move(treeWalker, nextSibling, tree113, null));
    verify(move(treeWalker, previousNode, tree113, tree112));
    verify(move(treeWalker, nextNode, tree113, tree12));
  }
}

test("TreeWalker: tree12 (normal)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree12, tree1));
    verify(move(treeWalker, firstChild, tree12, tree121));
    verify(move(treeWalker, lastChild, tree12, tree123));
    verify(move(treeWalker, previousSibling, tree12, tree11));
    verify(move(treeWalker, nextSibling, tree12, tree13));
    verify(move(treeWalker, previousNode, tree12, tree113));
    verify(move(treeWalker, nextNode, tree12, tree121));
  }
}

test("TreeWalker: tree121 (normal)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree121, tree12));
    verify(move(treeWalker, firstChild, tree121, null));
    verify(move(treeWalker, lastChild, tree121, null));
    verify(move(treeWalker, previousSibling, tree121, null));
    verify(move(treeWalker, nextSibling, tree121, tree122));
    verify(move(treeWalker, previousNode, tree121, tree12));
    verify(move(treeWalker, nextNode, tree121, tree122));
  }
}

test("TreeWalker: tree122 (normal)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree122, tree12));
    verify(move(treeWalker, firstChild, tree122, null));
    verify(move(treeWalker, lastChild, tree122, null));
    verify(move(treeWalker, previousSibling, tree122, tree121));
    verify(move(treeWalker, nextSibling, tree122, tree123));
    verify(move(treeWalker, previousNode, tree122, tree121));
    verify(move(treeWalker, nextNode, tree122, tree123));
  }
}

test("TreeWalker: tree123 (normal)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree123, tree12));
    verify(move(treeWalker, firstChild, tree123, null));
    verify(move(treeWalker, lastChild, tree123, null));
    verify(move(treeWalker, previousSibling, tree123, tree122));
    verify(move(treeWalker, nextSibling, tree123, null));
    verify(move(treeWalker, previousNode, tree123, tree122));
    verify(move(treeWalker, nextNode, tree123, tree13));
  }
}

test("TreeWalker: tree13 (normal)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree13, tree1));
    verify(move(treeWalker, firstChild, tree13, tree131));
    verify(move(treeWalker, lastChild, tree13, tree133));
    verify(move(treeWalker, previousSibling, tree13, tree12));
    verify(move(treeWalker, nextSibling, tree13, null));
    verify(move(treeWalker, previousNode, tree13, tree123));
    verify(move(treeWalker, nextNode, tree13, tree131));
  }
}

test("TreeWalker: tree131 (normal)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree131, tree13));
    verify(move(treeWalker, firstChild, tree131, null));
    verify(move(treeWalker, lastChild, tree131, null));
    verify(move(treeWalker, previousSibling, tree131, null));
    verify(move(treeWalker, nextSibling, tree131, tree132));
    verify(move(treeWalker, previousNode, tree131, tree13));
    verify(move(treeWalker, nextNode, tree131, tree132));
  }
}

test("TreeWalker: tree132 (normal)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree132, tree13));
    verify(move(treeWalker, firstChild, tree132, null));
    verify(move(treeWalker, lastChild, tree132, null));
    verify(move(treeWalker, previousSibling, tree132, tree131));
    verify(move(treeWalker, nextSibling, tree132, tree133));
    verify(move(treeWalker, previousNode, tree132, tree131));
    verify(move(treeWalker, nextNode, tree132, tree133));
  }
}

test("TreeWalker: tree133 (normal)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree133, tree13));
    verify(move(treeWalker, firstChild, tree133, null));
    verify(move(treeWalker, lastChild, tree133, null));
    verify(move(treeWalker, previousSibling, tree133, tree132));
    verify(move(treeWalker, nextSibling, tree133, null));
    verify(move(treeWalker, previousNode, tree133, tree132));
    verify(move(treeWalker, nextNode, tree133, null));
  }
}

// --------------------------------------------------------------------

test("TreeWalker: tree1 (skip)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree1, null));
    verify(move(treeWalker, firstChild, tree1, tree11));
    verify(move(treeWalker, lastChild, tree1, tree133));
    verify(move(treeWalker, previousSibling, tree1, null));
    verify(move(treeWalker, nextSibling, tree1, null));
    verify(move(treeWalker, previousNode, tree1, null));
    verify(move(treeWalker, nextNode, tree1, tree11));
  }
}

test("TreeWalker: tree11 (skip)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree11, tree1));
    verify(move(treeWalker, firstChild, tree11, tree112));
    verify(move(treeWalker, lastChild, tree11, tree112));
    verify(move(treeWalker, previousSibling, tree11, null));
    verify(move(treeWalker, nextSibling, tree11, tree12));
    verify(move(treeWalker, previousNode, tree11, tree1));
    verify(move(treeWalker, nextNode, tree11, tree112));
  }
}

test("TreeWalker: tree111 (skip)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree111, tree11));
    verify(move(treeWalker, firstChild, tree111, null));
    verify(move(treeWalker, lastChild, tree111, null));
    verify(move(treeWalker, previousSibling, tree111, null));
    verify(move(treeWalker, nextSibling, tree111, tree112));
    verify(move(treeWalker, previousNode, tree111, tree11));
    verify(move(treeWalker, nextNode, tree111, tree112));
  }
}

test("TreeWalker: tree112 (skip)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree112, tree11));
    verify(move(treeWalker, firstChild, tree112, null));
    verify(move(treeWalker, lastChild, tree112, null));
    verify(move(treeWalker, previousSibling, tree112, null));
    verify(move(treeWalker, nextSibling, tree112, null));
    verify(move(treeWalker, previousNode, tree112, tree11));
    verify(move(treeWalker, nextNode, tree112, tree12));
  }
}

test("TreeWalker: tree113 (skip)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree113, tree11));
    verify(move(treeWalker, firstChild, tree113, null));
    verify(move(treeWalker, lastChild, tree113, null));
    verify(move(treeWalker, previousSibling, tree113, tree112));
    verify(move(treeWalker, nextSibling, tree113, null));
    verify(move(treeWalker, previousNode, tree113, tree112));
    verify(move(treeWalker, nextNode, tree113, tree12));
  }
}

test("TreeWalker: tree12 (skip)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree12, tree1));
    verify(move(treeWalker, firstChild, tree12, tree121));
    verify(move(treeWalker, lastChild, tree12, tree123));
    verify(move(treeWalker, previousSibling, tree12, tree11));
    verify(move(treeWalker, nextSibling, tree12, tree132));
    verify(move(treeWalker, previousNode, tree12, tree112));
    verify(move(treeWalker, nextNode, tree12, tree121));
  }
}

test("TreeWalker: tree121 (skip)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree121, tree12));
    verify(move(treeWalker, firstChild, tree121, null));
    verify(move(treeWalker, lastChild, tree121, null));
    verify(move(treeWalker, previousSibling, tree121, null));
    verify(move(treeWalker, nextSibling, tree121, tree123));
    verify(move(treeWalker, previousNode, tree121, tree12));
    verify(move(treeWalker, nextNode, tree121, tree123));
  }
}

test("TreeWalker: tree122 (skip)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree122, tree12));
    verify(move(treeWalker, firstChild, tree122, null));
    verify(move(treeWalker, lastChild, tree122, null));
    verify(move(treeWalker, previousSibling, tree122, tree121));
    verify(move(treeWalker, nextSibling, tree122, tree123));
    verify(move(treeWalker, previousNode, tree122, tree121));
    verify(move(treeWalker, nextNode, tree122, tree123));
  }
}

test("TreeWalker: tree123 (skip)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree123, tree12));
    verify(move(treeWalker, firstChild, tree123, null));
    verify(move(treeWalker, lastChild, tree123, null));
    verify(move(treeWalker, previousSibling, tree123, tree121));
    verify(move(treeWalker, nextSibling, tree123, null));
    verify(move(treeWalker, previousNode, tree123, tree121));
    verify(move(treeWalker, nextNode, tree123, tree132));
  }
}

test("TreeWalker: tree13 (skip)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree13, tree1));
    verify(move(treeWalker, firstChild, tree13, tree132));
    verify(move(treeWalker, lastChild, tree13, tree133));
    verify(move(treeWalker, previousSibling, tree13, tree12));
    verify(move(treeWalker, nextSibling, tree13, null));
    verify(move(treeWalker, previousNode, tree13, tree123));
    verify(move(treeWalker, nextNode, tree13, tree132));
  }
}

test("TreeWalker: tree131 (skip)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree131, tree1));
    verify(move(treeWalker, firstChild, tree131, null));
    verify(move(treeWalker, lastChild, tree131, null));
    verify(move(treeWalker, previousSibling, tree131, tree12));
    verify(move(treeWalker, nextSibling, tree131, tree132));
    verify(move(treeWalker, previousNode, tree131, tree123));
    verify(move(treeWalker, nextNode, tree131, tree132));
  }
}

test("TreeWalker: tree132 (skip)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree132, tree1));
    verify(move(treeWalker, firstChild, tree132, null));
    verify(move(treeWalker, lastChild, tree132, null));
    verify(move(treeWalker, previousSibling, tree132, tree12));
    verify(move(treeWalker, nextSibling, tree132, tree133));
    verify(move(treeWalker, previousNode, tree132, tree123));
    verify(move(treeWalker, nextNode, tree132, tree133));
  }
}

test("TreeWalker: tree133 (skip)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree133, tree1));
    verify(move(treeWalker, firstChild, tree133, null));
    verify(move(treeWalker, lastChild, tree133, null));
    verify(move(treeWalker, previousSibling, tree133, tree132));
    verify(move(treeWalker, nextSibling, tree133, null));
    verify(move(treeWalker, previousNode, tree133, tree132));
    verify(move(treeWalker, nextNode, tree133, null));
  }
}

// --------------------------------------------------------------------

test("TreeWalker: tree1 (reject)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree1, null));
    verify(move(treeWalker, firstChild, tree1, tree11));
    verify(move(treeWalker, lastChild, tree1, tree13));
    verify(move(treeWalker, previousSibling, tree1, null));
    verify(move(treeWalker, nextSibling, tree1, null));
    verify(move(treeWalker, previousNode, tree1, null));
    verify(move(treeWalker, nextNode, tree1, tree11));
  }
}

test("TreeWalker: tree11 (reject)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree11, tree1));
    verify(move(treeWalker, firstChild, tree11, tree111));
    verify(move(treeWalker, lastChild, tree11, tree113));
    verify(move(treeWalker, previousSibling, tree11, null));
    verify(move(treeWalker, nextSibling, tree11, tree13));
    verify(move(treeWalker, previousNode, tree11, tree1));
    verify(move(treeWalker, nextNode, tree11, tree111));
  }
}

test("TreeWalker: tree111 (reject)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree111, tree11));
    verify(move(treeWalker, firstChild, tree111, null));
    verify(move(treeWalker, lastChild, tree111, null));
    verify(move(treeWalker, previousSibling, tree111, null));
    verify(move(treeWalker, nextSibling, tree111, tree112));
    verify(move(treeWalker, previousNode, tree111, tree11));
    verify(move(treeWalker, nextNode, tree111, tree112));
  }
}

test("TreeWalker: tree112 (reject)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree112, tree11));
    verify(move(treeWalker, firstChild, tree112, null));
    verify(move(treeWalker, lastChild, tree112, null));
    verify(move(treeWalker, previousSibling, tree112, tree111));
    verify(move(treeWalker, nextSibling, tree112, tree113));
    verify(move(treeWalker, previousNode, tree112, tree111));
    verify(move(treeWalker, nextNode, tree112, tree113));
  }
}

test("TreeWalker: tree113 (reject)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree113, tree11));
    verify(move(treeWalker, firstChild, tree113, null));
    verify(move(treeWalker, lastChild, tree113, null));
    verify(move(treeWalker, previousSibling, tree113, tree112));
    verify(move(treeWalker, nextSibling, tree113, null));
    verify(move(treeWalker, previousNode, tree113, tree112));
    verify(move(treeWalker, nextNode, tree113, tree13));
  }
}

test("TreeWalker: tree12 (reject)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree12, tree1));
    verify(move(treeWalker, firstChild, tree12, tree121));
    verify(move(treeWalker, lastChild, tree12, tree123));
    verify(move(treeWalker, previousSibling, tree12, tree11));
    verify(move(treeWalker, nextSibling, tree12, tree13));
    verify(move(treeWalker, previousNode, tree12, tree113));
    verify(move(treeWalker, nextNode, tree12, tree121));
  }
}

test("TreeWalker: tree121 (reject)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree121, tree1));
    verify(move(treeWalker, firstChild, tree121, null));
    verify(move(treeWalker, lastChild, tree121, null));
    verify(move(treeWalker, previousSibling, tree121, tree11));
    verify(move(treeWalker, nextSibling, tree121, tree122));
    verify(move(treeWalker, previousNode, tree121, tree113));
    verify(move(treeWalker, nextNode, tree121, tree122));
  }
}

test("TreeWalker: tree122 (reject)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree122, tree1));
    verify(move(treeWalker, firstChild, tree122, null));
    verify(move(treeWalker, lastChild, tree122, null));
    verify(move(treeWalker, previousSibling, tree122, tree121));
    verify(move(treeWalker, nextSibling, tree122, tree123));
    verify(move(treeWalker, previousNode, tree122, tree121));
    verify(move(treeWalker, nextNode, tree122, tree123));
  }
}

test("TreeWalker: tree123 (reject)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree123, tree1));
    verify(move(treeWalker, firstChild, tree123, null));
    verify(move(treeWalker, lastChild, tree123, null));
    verify(move(treeWalker, previousSibling, tree123, tree122));
    verify(move(treeWalker, nextSibling, tree123, tree13));
    verify(move(treeWalker, previousNode, tree123, tree122));
    verify(move(treeWalker, nextNode, tree123, tree13));
  }
}

test("TreeWalker: tree13 (reject)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree13, tree1));
    verify(move(treeWalker, firstChild, tree13, tree131));
    verify(move(treeWalker, lastChild, tree13, tree133));
    verify(move(treeWalker, previousSibling, tree13, tree11));
    verify(move(treeWalker, nextSibling, tree13, null));
    verify(move(treeWalker, previousNode, tree13, tree113));
    verify(move(treeWalker, nextNode, tree13, tree131));
  }
}

test("TreeWalker: tree131 (reject)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree131, tree13));
    verify(move(treeWalker, firstChild, tree131, null));
    verify(move(treeWalker, lastChild, tree131, null));
    verify(move(treeWalker, previousSibling, tree131, null));
    verify(move(treeWalker, nextSibling, tree131, tree132));
    verify(move(treeWalker, previousNode, tree131, tree13));
    verify(move(treeWalker, nextNode, tree131, tree132));
  }
}

test("TreeWalker: tree132 (reject)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree132, tree13));
    verify(move(treeWalker, firstChild, tree132, null));
    verify(move(treeWalker, lastChild, tree132, null));
    verify(move(treeWalker, previousSibling, tree132, tree131));
    verify(move(treeWalker, nextSibling, tree132, tree133));
    verify(move(treeWalker, previousNode, tree132, tree131));
    verify(move(treeWalker, nextNode, tree132, tree133));
  }
}

test("TreeWalker: tree133 (reject)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree133, tree13));
    verify(move(treeWalker, firstChild, tree133, null));
    verify(move(treeWalker, lastChild, tree133, null));
    verify(move(treeWalker, previousSibling, tree133, tree132));
    verify(move(treeWalker, nextSibling, tree133, null));
    verify(move(treeWalker, previousNode, tree133, tree132));
    verify(move(treeWalker, nextNode, tree133, null));
  }
}

// --------------------------------------------------------------------

test("TreeWalker: tree1 (throw)")
  require success "Setup #1";
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, filter_throw, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    firstChild();
	nextSibling();

	filter_throw.do_throw = true;

    try { parentNode(); throw "Exception not propagated from parentNode()"; }
    catch (e) { if (e != "got ya!") throw e; }

    try { firstChild(); throw "Exception not propagated from firstChild()"; }
    catch (e) { if (e != "got ya!") throw e; }

    try { lastChild(); throw "Exception not propagated from lastChild()"; }
    catch (e) { if (e != "got ya!") throw e; }

    try { previousSibling(); throw "Exception not propagated from previousSibling()"; }
    catch (e) { if (e != "got ya!") throw e; }

    try { nextSibling(); throw "Exception not propagated from nextSibling()"; }
    catch (e) { if (e != "got ya!") throw e; }

    try { previousNode(); throw "Exception not propagated from previousNode()"; }
    catch (e) { if (e != "got ya!") throw e; }

    try { nextNode(); throw "Exception not propagated from nextNode()"; }
    catch (e) { if (e != "got ya!") throw e; }
  }
}

// --------------------------------------------------------------------
// This test tests a bug that triggers if the logical first child is a
// physical child of the last physical child of the current node causing
// firstChild() to erroneously return null.

test("TreeWalker: bug #1")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ELEMENT, filter_bug1, true);
  verify(treeWalker);

  with (treeWalker)
  {
    verify(move(treeWalker, firstChild, tree1, tree131));
    verify(move(treeWalker, lastChild, tree1, tree133));
    verify(move(treeWalker, firstChild, tree13, tree131));
    verify(move(treeWalker, lastChild, tree13, tree133));
  }
}

// --------------------------------------------------------------------

html
{
  "<html>"
    "<body>"
      "<div id='tree1'>"
      "</div>"
    "</body>"
  "</html>"
}

test("Setup #2")
{
  move = function move(treeWalker, method, currentNode, expected)
  {
    try
    {
      try
      {
        treeWalker.currentNode = currentNode;
        var result = method.apply(treeWalker);
        if (!(result == null && expected == null || result == expected))
          return false;
        if (!(expected == null && treeWalker.currentNode == currentNode || treeWalker.currentNode == expected))
          return false;
        return true;
      }
      catch(e)
      {
        return false;
      }
    }
    finally
    {
      treeWalker.currentNode = currentNode;
    }
  }

  tree1 = document.getElementById("tree1");
  text = document.createTextNode("[Text]");
  cdatasection = document.createCDATASection("[CDATASection]");
  comment = document.createComment("[Comment]");

  tree1.appendChild(text);
  tree1.appendChild(cdatasection);
  tree1.appendChild(comment);
}

test("TreeWalker: NodeFilter.SHOW_ALL: tree1")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree1, null));
    verify(move(treeWalker, firstChild, tree1, text));
    verify(move(treeWalker, lastChild, tree1, comment));
    verify(move(treeWalker, previousSibling, tree1, null));
    verify(move(treeWalker, nextSibling, tree1, null));
    verify(move(treeWalker, previousNode, tree1, null));
    verify(move(treeWalker, nextNode, tree1, text));
  }
}

test("TreeWalker: NodeFilter.SHOW_ALL: text")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  treeWalker.currentNode = text;
  verify(treeWalker.currentNode == text);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, text, tree1));
    verify(move(treeWalker, firstChild, text, null));
    verify(move(treeWalker, lastChild, text, null));
    verify(move(treeWalker, previousSibling, text, null));
    verify(move(treeWalker, nextSibling, text, cdatasection));
    verify(move(treeWalker, previousNode, text, tree1));
    verify(move(treeWalker, nextNode, text, cdatasection));
  }
}

test("TreeWalker: NodeFilter.SHOW_ALL: cdatasection")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  treeWalker.currentNode = cdatasection;
  verify(treeWalker.currentNode == cdatasection);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, cdatasection, tree1));
    verify(move(treeWalker, firstChild, cdatasection, null));
    verify(move(treeWalker, lastChild, cdatasection, null));
    verify(move(treeWalker, previousSibling, cdatasection, text));
    verify(move(treeWalker, nextSibling, cdatasection, comment));
    verify(move(treeWalker, previousNode, cdatasection, text));
    verify(move(treeWalker, nextNode, cdatasection, comment));
  }
}

test("TreeWalker: NodeFilter.SHOW_ALL: comment")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(treeWalker);
  treeWalker.currentNode = comment;
  verify(treeWalker.currentNode == comment);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, comment, tree1));
    verify(move(treeWalker, firstChild, comment, null));
    verify(move(treeWalker, lastChild, comment, null));
    verify(move(treeWalker, previousSibling, comment, cdatasection));
    verify(move(treeWalker, nextSibling, comment, null));
    verify(move(treeWalker, previousNode, comment, cdatasection));
    verify(move(treeWalker, nextNode, comment, null));
  }
}

test("TreeWalker: NodeFilter.SHOW_ELEMENT: tree1")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ELEMENT, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree1, null));
    verify(move(treeWalker, firstChild, tree1, null));
    verify(move(treeWalker, lastChild, tree1, null));
    verify(move(treeWalker, previousSibling, tree1, null));
    verify(move(treeWalker, nextSibling, tree1, null));
    verify(move(treeWalker, previousNode, tree1, null));
    verify(move(treeWalker, nextNode, tree1, null));
  }
}

test("TreeWalker: NodeFilter.SHOW_ELEMENT: text")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ELEMENT, null, true);
  verify(treeWalker);
  treeWalker.currentNode = text;
  verify(treeWalker.currentNode == text);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, text, tree1));
    verify(move(treeWalker, firstChild, text, null));
    verify(move(treeWalker, lastChild, text, null));
    verify(move(treeWalker, previousSibling, text, null));
    verify(move(treeWalker, nextSibling, text, null));
    verify(move(treeWalker, previousNode, text, tree1));
    verify(move(treeWalker, nextNode, text, null));
  }
}

test("TreeWalker: NodeFilter.SHOW_ELEMENT: cdatasection")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ELEMENT, null, true);
  verify(treeWalker);
  treeWalker.currentNode = cdatasection;
  verify(treeWalker.currentNode == cdatasection);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, cdatasection, tree1));
    verify(move(treeWalker, firstChild, cdatasection, null));
    verify(move(treeWalker, lastChild, cdatasection, null));
    verify(move(treeWalker, previousSibling, cdatasection, null));
    verify(move(treeWalker, nextSibling, cdatasection, null));
    verify(move(treeWalker, previousNode, cdatasection, tree1));
    verify(move(treeWalker, nextNode, cdatasection, null));
  }
}

test("TreeWalker: NodeFilter.SHOW_ELEMENT: comment")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_ELEMENT, null, true);
  verify(treeWalker);
  treeWalker.currentNode = comment;
  verify(treeWalker.currentNode == comment);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, comment, tree1));
    verify(move(treeWalker, firstChild, comment, null));
    verify(move(treeWalker, lastChild, comment, null));
    verify(move(treeWalker, previousSibling, comment, null));
    verify(move(treeWalker, nextSibling, comment, null));
    verify(move(treeWalker, previousNode, comment, tree1));
    verify(move(treeWalker, nextNode, comment, null));
  }
}

test("TreeWalker: NodeFilter.SHOW_TEXT: tree1")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_TEXT, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree1, null));
    verify(move(treeWalker, firstChild, tree1, text));
    verify(move(treeWalker, lastChild, tree1, text));
    verify(move(treeWalker, previousSibling, tree1, null));
    verify(move(treeWalker, nextSibling, tree1, null));
    verify(move(treeWalker, previousNode, tree1, null));
    verify(move(treeWalker, nextNode, tree1, text));
  }
}

test("TreeWalker: NodeFilter.SHOW_TEXT: text")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_TEXT, null, true);
  verify(treeWalker);
  treeWalker.currentNode = text;
  verify(treeWalker.currentNode == text);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, text, null));
    verify(move(treeWalker, firstChild, text, null));
    verify(move(treeWalker, lastChild, text, null));
    verify(move(treeWalker, previousSibling, text, null));
    verify(move(treeWalker, nextSibling, text, null));
    verify(move(treeWalker, previousNode, text, null));
    verify(move(treeWalker, nextNode, text, null));
  }
}

test("TreeWalker: NodeFilter.SHOW_TEXT: cdatasection")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_TEXT, null, true);
  verify(treeWalker);
  treeWalker.currentNode = cdatasection;
  verify(treeWalker.currentNode == cdatasection);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, cdatasection, null));
    verify(move(treeWalker, firstChild, cdatasection, null));
    verify(move(treeWalker, lastChild, cdatasection, null));
    verify(move(treeWalker, previousSibling, cdatasection, text));
    verify(move(treeWalker, nextSibling, cdatasection, null));
    verify(move(treeWalker, previousNode, cdatasection, text));
    verify(move(treeWalker, nextNode, cdatasection, null));
  }
}

test("TreeWalker: NodeFilter.SHOW_TEXT: comment")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_TEXT, null, true);
  verify(treeWalker);
  treeWalker.currentNode = comment;
  verify(treeWalker.currentNode == comment);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, comment, null));
    verify(move(treeWalker, firstChild, comment, null));
    verify(move(treeWalker, lastChild, comment, null));
    verify(move(treeWalker, previousSibling, comment, text));
    verify(move(treeWalker, nextSibling, comment, null));
    verify(move(treeWalker, previousNode, comment, text));
    verify(move(treeWalker, nextNode, comment, null));
  }
}

test("TreeWalker: NodeFilter.SHOW_CDATA_SECTION: tree1")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_CDATA_SECTION, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree1, null));
    verify(move(treeWalker, firstChild, tree1, cdatasection));
    verify(move(treeWalker, lastChild, tree1, cdatasection));
    verify(move(treeWalker, previousSibling, tree1, null));
    verify(move(treeWalker, nextSibling, tree1, null));
    verify(move(treeWalker, previousNode, tree1, null));
    verify(move(treeWalker, nextNode, tree1, cdatasection));
  }
}

test("TreeWalker: NodeFilter.SHOW_CDATA_SECTION: text")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_CDATA_SECTION, null, true);
  verify(treeWalker);
  treeWalker.currentNode = text;
  verify(treeWalker.currentNode == text);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, text, null));
    verify(move(treeWalker, firstChild, text, null));
    verify(move(treeWalker, lastChild, text, null));
    verify(move(treeWalker, previousSibling, text, null));
    verify(move(treeWalker, nextSibling, text, cdatasection));
    verify(move(treeWalker, previousNode, text, null));
    verify(move(treeWalker, nextNode, text, cdatasection));
  }
}

test("TreeWalker: NodeFilter.SHOW_CDATA_SECTION: cdatasection")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_CDATA_SECTION, null, true);
  verify(treeWalker);
  treeWalker.currentNode = cdatasection;
  verify(treeWalker.currentNode == cdatasection);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, cdatasection, null));
    verify(move(treeWalker, firstChild, cdatasection, null));
    verify(move(treeWalker, lastChild, cdatasection, null));
    verify(move(treeWalker, previousSibling, cdatasection, null));
    verify(move(treeWalker, nextSibling, cdatasection, null));
    verify(move(treeWalker, previousNode, cdatasection, null));
    verify(move(treeWalker, nextNode, cdatasection, null));
  }
}

test("TreeWalker: NodeFilter.SHOW_CDATA_SECTION: comment")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_CDATA_SECTION, null, true);
  verify(treeWalker);
  treeWalker.currentNode = comment;
  verify(treeWalker.currentNode == comment);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, comment, null));
    verify(move(treeWalker, firstChild, comment, null));
    verify(move(treeWalker, lastChild, comment, null));
    verify(move(treeWalker, previousSibling, comment, cdatasection));
    verify(move(treeWalker, nextSibling, comment, null));
    verify(move(treeWalker, previousNode, comment, cdatasection));
    verify(move(treeWalker, nextNode, comment, null));
  }
}

test("TreeWalker: NodeFilter.SHOW_COMMENT: tree1")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_COMMENT, null, true);
  verify(treeWalker);
  verify(treeWalker.currentNode == tree1);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, tree1, null));
    verify(move(treeWalker, firstChild, tree1, comment));
    verify(move(treeWalker, lastChild, tree1, comment));
    verify(move(treeWalker, previousSibling, tree1, null));
    verify(move(treeWalker, nextSibling, tree1, null));
    verify(move(treeWalker, previousNode, tree1, null));
    verify(move(treeWalker, nextNode, tree1, comment));
  }
}

test("TreeWalker: NodeFilter.SHOW_COMMENT: text")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_COMMENT, null, true);
  verify(treeWalker);
  treeWalker.currentNode = text;
  verify(treeWalker.currentNode == text);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, text, null));
    verify(move(treeWalker, firstChild, text, null));
    verify(move(treeWalker, lastChild, text, null));
    verify(move(treeWalker, previousSibling, text, null));
    verify(move(treeWalker, nextSibling, text, comment));
    verify(move(treeWalker, previousNode, text, null));
    verify(move(treeWalker, nextNode, text, comment));
  }
}

test("TreeWalker: NodeFilter.SHOW_COMMENT: cdatasection")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_COMMENT, null, true);
  verify(treeWalker);
  treeWalker.currentNode = cdatasection;
  verify(treeWalker.currentNode == cdatasection);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, cdatasection, null));
    verify(move(treeWalker, firstChild, cdatasection, null));
    verify(move(treeWalker, lastChild, cdatasection, null));
    verify(move(treeWalker, previousSibling, cdatasection, null));
    verify(move(treeWalker, nextSibling, cdatasection, comment));
    verify(move(treeWalker, previousNode, cdatasection, null));
    verify(move(treeWalker, nextNode, cdatasection, comment));
  }
}

test("TreeWalker: NodeFilter.SHOW_COMMENT: comment")
{
  var treeWalker = document.createTreeWalker(tree1, NodeFilter.SHOW_COMMENT, null, true);
  verify(treeWalker);
  treeWalker.currentNode = comment;
  verify(treeWalker.currentNode == comment);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, comment, null));
    verify(move(treeWalker, firstChild, comment, null));
    verify(move(treeWalker, lastChild, comment, null));
    verify(move(treeWalker, previousSibling, comment, null));
    verify(move(treeWalker, nextSibling, comment, null));
    verify(move(treeWalker, previousNode, comment, null));
    verify(move(treeWalker, nextNode, comment, null));
  }
}

test("TreeWalker: NodeFilter.SHOW_DOCUMENT")
{
  var treeWalker = document.createTreeWalker(document, NodeFilter.SHOW_DOCUMENT, null, true);
  verify(treeWalker);
  treeWalker.currentNode = document.firstChild;
  verify(treeWalker.currentNode == document.firstChild);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, document.firstChild, document));
    verify(move(treeWalker, firstChild, document.firstChild, null));
    verify(move(treeWalker, lastChild, document.firstChild, null));
    verify(move(treeWalker, previousSibling, document.firstChild, null));
    verify(move(treeWalker, nextSibling, document.firstChild, null));
    verify(move(treeWalker, previousNode, document.firstChild, document));
    verify(move(treeWalker, nextNode, document.firstChild, null));
  }
}

test("TreeWalker: NodeFilter.SHOW_DOCUMENT_FRAGMENT")
{
  var docfrag = document.createDocumentFragment();
  docfrag.appendChild(document.createTextNode("[text]"));

  var treeWalker = document.createTreeWalker(docfrag, NodeFilter.SHOW_DOCUMENT_FRAGMENT, null, true);
  verify(treeWalker);
  treeWalker.currentNode = docfrag.firstChild;
  verify(treeWalker.currentNode == docfrag.firstChild);

  with (treeWalker)
  {
    verify(move(treeWalker, parentNode, docfrag.firstChild, docfrag));
    verify(move(treeWalker, firstChild, docfrag.firstChild, null));
    verify(move(treeWalker, lastChild, docfrag.firstChild, null));
    verify(move(treeWalker, previousSibling, docfrag.firstChild, null));
    verify(move(treeWalker, nextSibling, docfrag.firstChild, null));
    verify(move(treeWalker, previousNode, docfrag.firstChild, docfrag));
    verify(move(treeWalker, nextNode, docfrag.firstChild, null));
  }
}
