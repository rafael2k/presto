/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "DOM.Traversal.NodeIterator";
require init;

require DOM2_TRAVERSAL;

language ecmascript;

html
{
  "<html>"
    "<body>"
      "<div id='tree1'>"
        "<div id='tree1.1'>"
          "<div id='tree1.1.1' class='skip'>"
          "</div>"
          "<div id='tree1.1.2'>"
          "</div>"
          "<div id='tree1.1.3' class='skip'>"
          "</div>"
        "</div>"
        "<div id='tree1.2' class='reject'>"
          "<div id='tree1.2.1'>"
          "</div>"
          "<div id='tree1.2.2' class='skip'>"
          "</div>"
          "<div id='tree1.2.3'>"
          "</div>"
        "</div>"
        "<div id='tree1.3' class='skip'>"
          "<div id='tree1.3.1' class='skip'>"
          "</div>"
          "<div id='tree1.3.2'>"
          "</div>"
          "<div id='tree1.3.3'>"
          "</div>"
        "</div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Setup")
{
  assignmentNotAllowed = function assignmentNotAllowed(nodeIterator, property, new_value, old_value)
  {
    "use strict";
    try
    {
      nodeIterator[property] = new_value;
    }
    catch(e)
    {
      if (e instanceof TypeError)
        return (nodeIterator[property] == old_value);
    }
    return false;
  }

  filter_skip = { acceptNode: function (node) { return node.className.indexOf("skip") == -1 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP; } };
  filter_reject = { acceptNode: function (node) { return node.className.indexOf("reject") == -1 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT; } };
  filter_throw = { acceptNode: function (node) { if (this.do_throw) throw "got ya!"; else return NodeFilter.FILTER_ACCEPT; }, do_throw: false };

  tree1 = document.getElementById("tree1");
  tree11 = document.getElementById("tree1.1");
  tree111 = document.getElementById("tree1.1.1");
  tree112 = document.getElementById("tree1.1.2");
  tree113 = document.getElementById("tree1.1.3");
  tree12 = document.getElementById("tree1.2");
  tree121 = document.getElementById("tree1.2.1");
  tree122 = document.getElementById("tree1.2.2");
  tree123 = document.getElementById("tree1.2.3");
  tree13 = document.getElementById("tree1.3");
  tree131 = document.getElementById("tree1.3.1");
  tree132 = document.getElementById("tree1.3.2");
  tree133 = document.getElementById("tree1.3.3");

  verify(tree1 && tree1.id == "tree1");
  verify(tree11 && tree11.id == "tree1.1");
  verify(tree111 && tree111.id == "tree1.1.1");
  verify(tree112 && tree112.id == "tree1.1.2");
  verify(tree113 && tree113.id == "tree1.1.3");
  verify(tree12 && tree12.id == "tree1.2");
  verify(tree121 && tree121.id == "tree1.2.1");
  verify(tree122 && tree122.id == "tree1.2.2");
  verify(tree123 && tree123.id == "tree1.2.3");
  verify(tree13 && tree13.id == "tree1.3");
  verify(tree131 && tree131.id == "tree1.3.1");
  verify(tree132 && tree132.id == "tree1.3.2");
  verify(tree133 && tree133.id == "tree1.3.3");

  /* Workaround for a bug in the ECMAScript engine: the 'in' operator
     sometimes doesn't work for properties on host objects because the
     engine optimizes away the lookup if it hasn't seen the name used
     as a property name before.  So we use them all as property names
     here to make sure the engine has seen them. */
  var identifiers = {
    root: null,
    whatToShow: null,
    filter: null,
    expandEntityReferences: null,
    currentNode: null
  };
}

// --------------------------------------------------------------------

test("HasProperty: NodeIterator")
  require success "Setup";
{
  var nodeIterator = document.createNodeIterator(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(nodeIterator);

  verify("root" in nodeIterator);
  verify("whatToShow" in nodeIterator);
  verify("filter" in nodeIterator);
  verify("expandEntityReferences" in nodeIterator);
}

test("Get: NodeIterator")
  require success "Setup";
{
  var nodeIterator = document.createNodeIterator(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(nodeIterator);

  verify(nodeIterator.root == tree1);
  verify(nodeIterator.whatToShow == NodeFilter.SHOW_ALL);
  verify(nodeIterator.filter == filter_skip);
  verify(nodeIterator.expandEntityReferences == true);
}

test("Put: NodeIterator")
  require success "Setup";
{
  var nodeIterator = document.createNodeIterator(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(nodeIterator);

  verify(assignmentNotAllowed(nodeIterator, "root", null, tree1));
  verify(assignmentNotAllowed(nodeIterator, "whatToShow", 0, NodeFilter.SHOW_ALL));
  verify(assignmentNotAllowed(nodeIterator, "filter", null, filter_skip));
  verify(assignmentNotAllowed(nodeIterator, "expandEntityReferences", false, true));
}

// --------------------------------------------------------------------

test("NodeIterator: normal #1")
  require success "Setup";
{
  var nodeIterator = document.createNodeIterator(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(nodeIterator);

  with (nodeIterator)
  {
    verify(nextNode() == tree1);
    verify(nextNode() == tree11);
    verify(nextNode() == tree111);
    verify(nextNode() == tree112);
    verify(nextNode() == tree113);
    verify(nextNode() == tree12);
    verify(nextNode() == tree121);
    verify(nextNode() == tree122);
    verify(nextNode() == tree123);
    verify(nextNode() == tree13);
    verify(nextNode() == tree131);
    verify(nextNode() == tree132);
    verify(nextNode() == tree133);
    verify(nextNode() == null);
    verify(previousNode() == tree133);
    verify(previousNode() == tree132);
    verify(previousNode() == tree131);
    verify(previousNode() == tree13);
    verify(previousNode() == tree123);
    verify(previousNode() == tree122);
    verify(previousNode() == tree121);
    verify(previousNode() == tree12);
    verify(previousNode() == tree113);
    verify(previousNode() == tree112);
    verify(previousNode() == tree111);
    verify(previousNode() == tree11);
    verify(previousNode() == tree1);
    verify(previousNode() == null);
  }
}

test("NodeIterator: normal #2")
  require success "Setup";
{
  var nodeIterator = document.createNodeIterator(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(nodeIterator);

  with (nodeIterator)
  {
    verify(previousNode() == null);

    verify(nextNode() == tree1);
    verify(previousNode() == tree1);
    verify(nextNode() == tree1);

    verify(nextNode() == tree11);
    verify(previousNode() == tree11);
    verify(nextNode() == tree11);

    verify(nextNode() == tree111);
    verify(previousNode() == tree111);
    verify(nextNode() == tree111);

    verify(nextNode() == tree112);
    verify(previousNode() == tree112);
    verify(nextNode() == tree112);

    verify(nextNode() == tree113);
    verify(previousNode() == tree113);
    verify(nextNode() == tree113);

    verify(nextNode() == tree12);
    verify(previousNode() == tree12);
    verify(nextNode() == tree12);

    verify(nextNode() == tree121);
    verify(previousNode() == tree121);
    verify(nextNode() == tree121);

    verify(nextNode() == tree122);
    verify(previousNode() == tree122);
    verify(nextNode() == tree122);

    verify(nextNode() == tree123);
    verify(previousNode() == tree123);
    verify(nextNode() == tree123);

    verify(nextNode() == tree13);
    verify(previousNode() == tree13);
    verify(nextNode() == tree13);

    verify(nextNode() == tree131);
    verify(previousNode() == tree131);
    verify(nextNode() == tree131);

    verify(nextNode() == tree132);
    verify(previousNode() == tree132);
    verify(nextNode() == tree132);

    verify(nextNode() == tree133);
    verify(previousNode() == tree133);
    verify(nextNode() == tree133);

    verify(nextNode() == null);
    verify(previousNode() == tree133);
    verify(nextNode() == tree133);
  }
}

test("NodeIterator: normal #3")
  require success "Setup";
{
  var nodeIterator = document.createNodeIterator(tree1, NodeFilter.SHOW_ALL, null, true);
  verify(nodeIterator);

  with (nodeIterator)
  {
    while (nextNode());

    verify(previousNode() == tree133);
    verify(nextNode() == tree133);
    verify(previousNode() == tree133);

    verify(previousNode() == tree132);
    verify(nextNode() == tree132);
    verify(previousNode() == tree132);

    verify(previousNode() == tree131);
    verify(nextNode() == tree131);
    verify(previousNode() == tree131);

    verify(previousNode() == tree13);
    verify(nextNode() == tree13);
    verify(previousNode() == tree13);

    verify(previousNode() == tree123);
    verify(nextNode() == tree123);
    verify(previousNode() == tree123);

    verify(previousNode() == tree122);
    verify(nextNode() == tree122);
    verify(previousNode() == tree122);

    verify(previousNode() == tree121);
    verify(nextNode() == tree121);
    verify(previousNode() == tree121);

    verify(previousNode() == tree12);
    verify(nextNode() == tree12);
    verify(previousNode() == tree12);

    verify(previousNode() == tree113);
    verify(nextNode() == tree113);
    verify(previousNode() == tree113);

    verify(previousNode() == tree112);
    verify(nextNode() == tree112);
    verify(previousNode() == tree112);

    verify(previousNode() == tree111);
    verify(nextNode() == tree111);
    verify(previousNode() == tree111);

    verify(previousNode() == tree11);
    verify(nextNode() == tree11);
    verify(previousNode() == tree11);

    verify(previousNode() == tree1);
    verify(nextNode() == tree1);
    verify(previousNode() == tree1);

    verify(previousNode() == null);
    verify(nextNode() == tree1);
    verify(previousNode() == tree1);
  }
}

// --------------------------------------------------------------------

test("NodeIterator: skip #1")
  require success "Setup";
{
  var nodeIterator = document.createNodeIterator(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(nodeIterator);

  with (nodeIterator)
  {
    verify(nextNode() == tree1);
    verify(nextNode() == tree11);
    verify(nextNode() == tree112);
    verify(nextNode() == tree12);
    verify(nextNode() == tree121);
    verify(nextNode() == tree123);
    verify(nextNode() == tree132);
    verify(nextNode() == tree133);
    verify(nextNode() == null);
    verify(previousNode() == tree133);
    verify(previousNode() == tree132);
    verify(previousNode() == tree123);
    verify(previousNode() == tree121);
    verify(previousNode() == tree12);
    verify(previousNode() == tree112);
    verify(previousNode() == tree11);
    verify(previousNode() == tree1);
    verify(previousNode() == null);
  }
}

test("NodeIterator: skip #2")
  require success "Setup";
{
  var nodeIterator = document.createNodeIterator(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(nodeIterator);

  with (nodeIterator)
  {
    verify(previousNode() == null);

    verify(nextNode() == tree1);
    verify(previousNode() == tree1);
    verify(nextNode() == tree1);

    verify(nextNode() == tree11);
    verify(previousNode() == tree11);
    verify(nextNode() == tree11);

    verify(nextNode() == tree112);
    verify(previousNode() == tree112);
    verify(nextNode() == tree112);

    verify(nextNode() == tree12);
    verify(previousNode() == tree12);
    verify(nextNode() == tree12);

    verify(nextNode() == tree121);
    verify(previousNode() == tree121);
    verify(nextNode() == tree121);

    verify(nextNode() == tree123);
    verify(previousNode() == tree123);
    verify(nextNode() == tree123);

    verify(nextNode() == tree132);
    verify(previousNode() == tree132);
    verify(nextNode() == tree132);

    verify(nextNode() == tree133);
    verify(previousNode() == tree133);
    verify(nextNode() == tree133);

    verify(nextNode() == null);
    verify(previousNode() == tree133);
    verify(nextNode() == tree133);
  }
}

test("NodeIterator: skip #3")
  require success "Setup";
{
  var nodeIterator = document.createNodeIterator(tree1, NodeFilter.SHOW_ALL, filter_skip, true);
  verify(nodeIterator);

  with (nodeIterator)
  {
    while (nextNode());

    verify(previousNode() == tree133);
    verify(nextNode() == tree133);
    verify(previousNode() == tree133);

    verify(previousNode() == tree132);
    verify(nextNode() == tree132);
    verify(previousNode() == tree132);

    verify(previousNode() == tree123);
    verify(nextNode() == tree123);
    verify(previousNode() == tree123);

    verify(previousNode() == tree121);
    verify(nextNode() == tree121);
    verify(previousNode() == tree121);

    verify(previousNode() == tree12);
    verify(nextNode() == tree12);
    verify(previousNode() == tree12);

    verify(previousNode() == tree112);
    verify(nextNode() == tree112);
    verify(previousNode() == tree112);

    verify(previousNode() == tree11);
    verify(nextNode() == tree11);
    verify(previousNode() == tree11);

    verify(previousNode() == tree1);
    verify(nextNode() == tree1);
    verify(previousNode() == tree1);

    verify(previousNode() == null);
    verify(nextNode() == tree1);
    verify(previousNode() == tree1);
  }
}

// --------------------------------------------------------------------

test("NodeIterator: reject #1")
  require success "Setup";
{
  var nodeIterator = document.createNodeIterator(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(nodeIterator);

  with (nodeIterator)
  {
    verify(nextNode() == tree1);
    verify(nextNode() == tree11);
    verify(nextNode() == tree111);
    verify(nextNode() == tree112);
    verify(nextNode() == tree113);
    verify(nextNode() == tree121);
    verify(nextNode() == tree122);
    verify(nextNode() == tree123);
    verify(nextNode() == tree13);
    verify(nextNode() == tree131);
    verify(nextNode() == tree132);
    verify(nextNode() == tree133);
    verify(nextNode() == null);
    verify(previousNode() == tree133);
    verify(previousNode() == tree132);
    verify(previousNode() == tree131);
    verify(previousNode() == tree13);
    verify(previousNode() == tree123);
    verify(previousNode() == tree122);
    verify(previousNode() == tree121);
    verify(previousNode() == tree113);
    verify(previousNode() == tree112);
    verify(previousNode() == tree111);
    verify(previousNode() == tree11);
    verify(previousNode() == tree1);
    verify(previousNode() == null);
  }
}

test("NodeIterator: reject #2")
  require success "Setup";
{
  var nodeIterator = document.createNodeIterator(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(nodeIterator);

  with (nodeIterator)
  {
    verify(previousNode() == null);

    verify(nextNode() == tree1);
    verify(previousNode() == tree1);
    verify(nextNode() == tree1);

    verify(nextNode() == tree11);
    verify(previousNode() == tree11);
    verify(nextNode() == tree11);

    verify(nextNode() == tree111);
    verify(previousNode() == tree111);
    verify(nextNode() == tree111);

    verify(nextNode() == tree112);
    verify(previousNode() == tree112);
    verify(nextNode() == tree112);

    verify(nextNode() == tree113);
    verify(previousNode() == tree113);
    verify(nextNode() == tree113);

    verify(nextNode() == tree121);
    verify(previousNode() == tree121);
    verify(nextNode() == tree121);

    verify(nextNode() == tree122);
    verify(previousNode() == tree122);
    verify(nextNode() == tree122);

    verify(nextNode() == tree123);
    verify(previousNode() == tree123);
    verify(nextNode() == tree123);

    verify(nextNode() == tree13);
    verify(previousNode() == tree13);
    verify(nextNode() == tree13);

    verify(nextNode() == tree131);
    verify(previousNode() == tree131);
    verify(nextNode() == tree131);

    verify(nextNode() == tree132);
    verify(previousNode() == tree132);
    verify(nextNode() == tree132);

    verify(nextNode() == tree133);
    verify(previousNode() == tree133);
    verify(nextNode() == tree133);

    verify(nextNode() == null);
    verify(previousNode() == tree133);
    verify(nextNode() == tree133);
  }
}

test("NodeIterator: reject #3")
  require success "Setup";
{
  var nodeIterator = document.createNodeIterator(tree1, NodeFilter.SHOW_ALL, filter_reject, true);
  verify(nodeIterator);

  with (nodeIterator)
  {
    while (nextNode());

    verify(previousNode() == tree133);
    verify(nextNode() == tree133);
    verify(previousNode() == tree133);

    verify(previousNode() == tree132);
    verify(nextNode() == tree132);
    verify(previousNode() == tree132);

    verify(previousNode() == tree131);
    verify(nextNode() == tree131);
    verify(previousNode() == tree131);

    verify(previousNode() == tree13);
    verify(nextNode() == tree13);
    verify(previousNode() == tree13);

    verify(previousNode() == tree123);
    verify(nextNode() == tree123);
    verify(previousNode() == tree123);

    verify(previousNode() == tree122);
    verify(nextNode() == tree122);
    verify(previousNode() == tree122);

    verify(previousNode() == tree121);
    verify(nextNode() == tree121);
    verify(previousNode() == tree121);

    verify(previousNode() == tree113);
    verify(nextNode() == tree113);
    verify(previousNode() == tree113);

    verify(previousNode() == tree112);
    verify(nextNode() == tree112);
    verify(previousNode() == tree112);

    verify(previousNode() == tree111);
    verify(nextNode() == tree111);
    verify(previousNode() == tree111);

    verify(previousNode() == tree11);
    verify(nextNode() == tree11);
    verify(previousNode() == tree11);

    verify(previousNode() == tree1);
    verify(nextNode() == tree1);
    verify(previousNode() == tree1);

    verify(previousNode() == null);
    verify(nextNode() == tree1);
    verify(previousNode() == tree1);
  }
}

// --------------------------------------------------------------------

test("NodeIterator: throw")
  require success "Setup";
{
  var nodeIterator = document.createNodeIterator(tree1, NodeFilter.SHOW_ALL, filter_throw, true);
  verify(nodeIterator);

  with (nodeIterator)
  {
    nextNode();

    filter_throw.do_throw = true;

    try { nextNode(); throw "Exception not propagated from nextNode()"; }
    catch (e) { if (e != "got ya!") throw e; }

    try { previousNode(); throw "Exception not propagated from previousNode()"; }
    catch (e) { if (e != "got ya!") throw e; }
  }
}

xhtml
{
	//! <html xmlns="http://www.w3.org/1999/xhtml">
	//!  <head>
	//!   <title>DOM Traversal: NodeIterator: Removal of an ancestor of the Reference Node (forwards) (deep check)</title>
	//!  </head>
	//!  <body>
	//!   <p><span id="root"><span id="A"></span><span id="B"><span id="BB"></span></span><span id="C"></span></span></p>
	//!  </body>
	//! </html>
}

// From http://www.hixie.ch/tests/adhoc/dom/traversal/node-iterator/007.xml
test("hixie007")
{
	var errors = 0;
	var log = '';
	function check(a, b) {
		if (!a) {
			errors += 1;
			log += 'Found null but expected ' + b + ' (' + b.id + ').\n';
		} else if (a != b) {
			errors += 1;
			log += 'Found ' + a + ' (' + a.id + ') but expected ' + b + ' (' + b.id + ').\n';
		}
	}
	function remove(a) {
		if (!a) {
			errors += 1;
			log += 'Tried removing null node.\n';
		} else
			a.parentNode.removeChild(a);
	}
	function addChildTo(a) {
		var x = document.createElementNS('http://www.w3.org/1999/xhtml', 'span');
		x.id = 'X';
		a.appendChild(x);
		return x;
	}

	var iterator = document.createNodeIterator(document.getElementById('root'), NodeFilter.SHOW_ALL, null, false);
	var root = document.getElementById('root');
	var A = document.getElementById('A');
	var B = document.getElementById('B');
	var BB = document.getElementById('BB');
	var C = document.getElementById('C');
	verify(iterator.nextNode() == root);
	verify(iterator.nextNode() == A);
	verify(iterator.nextNode() == B);
	verify(iterator.nextNode() == BB);
	remove(B);
	var X = addChildTo(A);
	verify(iterator.nextNode() == X);
}

test("acid3 - test2")
{
	var pass = true;
	var log = "";
	var count = 0;
	var expect = function(n, node1, node2)
	{
        count += 1;
        if(n != count)
		{
			pass = false;
			log += "Got " + n + " Expected " + count + "\r\n";
		}
        if(node1 != node2)
		{
			pass = false
			log += "Got " + node1 + " Expected " + node2 + "\r\n"
        }
	}
	var doc = document.implementation.createDocument(null, "html", null)
	var t1 = doc.documentElement.appendChild(doc.createElement('t1'))
	var t2 = doc.documentElement.appendChild(doc.createElement('t2'))
	var t3 = doc.documentElement.appendChild(doc.createElement('t3'))
	var t4 = doc.documentElement.appendChild(doc.createElement('t4'))
	var callCount = 0;
	var filterFunctions = [
        function (node) { expect(1, node, doc.documentElement); return 1; }, // filter 0
        function (node) { expect(3, node, t1); return 1; }, // filter 1
        function (node) { expect(5, node, t2); return 1; }, // filter 2
        function (node) { expect(7, node, t3); doc.documentElement.removeChild(t4); return 1; }, // filter 3
        function (node) { expect(9, node, t4); return 1; }, // filter 4
        function (node) { expect(11, node, t4); doc.documentElement.removeChild(t4); return 2 /* REJECT */; }, // filter 5
        function (node) { expect(12, node, t3); return 1; }, // filter 6
        function (node) { expect(14, node, t2); doc.documentElement.removeChild(t2); return 1; }, // filter 7
        function (node) { expect(16, node, t1); return 1; }, // filter 8
      ];
	var i = doc.createNodeIterator(doc.documentElement, 0xFFFFFFFF, function (node) { return filterFunctions[callCount++](node); }, true);
      // * H 1 2 3 4
	expect(2, i.nextNode(), doc.documentElement); // filter 0
      // [H] * 1 2 3 4
	expect(4, i.nextNode(), t1); // filter 1
      // H [1] * 2 3 4
	expect(6, i.nextNode(), t2); // filter 2
      // H 1 [2] * 3 4
	expect(8, i.nextNode(), t3); // filter 3
      // H 1 2 [3] *
	doc.documentElement.appendChild(t4);
      // H 1 2 [3] * 4
	expect(10, i.nextNode(), t4); // filter 4
      // H 1 2 3 [4] *
	expect(13, i.previousNode(), t3); // filters 5, 6
        // H 1 2 3 * (4) // filter 5
        // H 1 2 [3] *   // between 5 and 6
        // H 1 2 * (3)   // filter 6
      // H 1 2 * [3]
	expect(15, i.previousNode(), t2); // filter 7
        // H 1 2 * (2) [3]
        // -- spec says "For instance, if a NodeFilter removes a node
        //    from a document, it can still accept the node, which
        //    means that the node may be returned by the NodeIterator
        //    or TreeWalker even though it is no longer in the subtree
        //    being traversed."
        // -- but it also says "If changes to the iterated list do not
        //    remove the reference node, they do not affect the state
        //    of the NodeIterator."
      // H 1 * [3]
	expect(17, i.previousNode(), t1); // filter 8
      // H [1] * 3

	if (!pass)
	{
		log = "FAILED:\n"+log;
		verify(log == ""); // to trigger a nice error message
	}
}

test("document root")
{
  var nodeIterator = document.createNodeIterator(document, NodeFilter.SHOW_DOCUMENT, null, true);
  verify(nodeIterator);
  verify(nodeIterator.nextNode() == document);
  verify(nodeIterator.nextNode() == null);
  verify(nodeIterator.previousNode() == document);
  verify(nodeIterator.previousNode() == null);
  verify(nodeIterator.nextNode() == document);

  nodeIterator = document.createNodeIterator(document, NodeFilter.SHOW_DOCUMENT, null, true);
  verify(nodeIterator);
  verify(nodeIterator.previousNode() == null);
  verify(nodeIterator.nextNode() == document);
  verify(nodeIterator.nextNode() == null);
  verify(nodeIterator.previousNode() == document);
  verify(nodeIterator.previousNode() == null);
  verify(nodeIterator.nextNode() == document);
}

html
{
	//! <body>fum<div>foo</div>bar</body>
}
test("text node root")
{
	var div = document.getElementsByTagName("div")[0];
	verify(div);
	var text = div.firstChild;
	verify(text);
  var nodeIterator = document.createNodeIterator(text, NodeFilter.SHOW_TEXT, null, true);
  verify(nodeIterator);
  verify(nodeIterator.nextNode() == text);
  verify(nodeIterator.nextNode() == null);
  verify(nodeIterator.previousNode() == text);
  verify(nodeIterator.previousNode() == null);
  verify(nodeIterator.nextNode() == text);

  nodeIterator = document.createNodeIterator(text, NodeFilter.SHOW_TEXT, null, true);
  verify(nodeIterator);
  verify(nodeIterator.previousNode() == null);
  verify(nodeIterator.nextNode() == text);
  verify(nodeIterator.nextNode() == null);
  verify(nodeIterator.previousNode() == text);
  verify(nodeIterator.previousNode() == null);
  verify(nodeIterator.nextNode() == text);
}


