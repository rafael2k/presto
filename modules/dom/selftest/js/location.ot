/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "dom.js.location";

include "modules/ecmascript/ecmascript.h";
include "modules/dom/domutils.h";
include "modules/dom/domtypes.h";
include "modules/dom/src/domobj.h";
include "modules/doc/frm_doc.h";
include "modules/dom/src/js/location.h";

language ecmascript;
require init;

html
{
	//! <!doctype html>
	//! <script>
	//! 1;
	//! </script>
}

test("Location basics")
{
	verify("Location" in window);

	verify(Location.prototype);
	verify(Location.prototype.constructor);
	verify(Location.prototype.constructor === Location);
	verify(Location.prototype.constructor.prototype === Location.prototype);
}

test("Location object")
{
	verify("location" in window);
	verify(location instanceof Location);

	verify("reload" in location && typeof location.reload == 'function');
	verify("replace" in location && typeof location.replace == 'function');
	verify("assign" in location && typeof location.assign == 'function');
	verify("toString" in location && typeof location.toString == 'function');
	verify("valueOf" in location && typeof location.valueOf == 'function');

	verify("href" in location && typeof location.href == 'string');
	verify("protocol" in location && typeof location.protocol == 'string');
	verify("host" in location && typeof location.host == 'string');
	verify("hostname" in location && typeof location.hostname == 'string');
	verify("port" in location && typeof location.port == 'string');
	verify("pathname" in location && typeof location.pathname == 'string');
	verify("search" in location && typeof location.search == 'string');
	verify("hash" in location && typeof location.hash == 'string');
}

test("Location navigation setup")
	language c++;
{
	ES_Runtime *source_runtime = state.doc->GetESRuntime();
	ES_Object *global_object = source_runtime->GetGlobalObject();
	DOM_Object *host_global_object = DOM_Utils::GetDOM_Object(global_object, DOM_Utils::TYPE_DEFAULT);
	ES_Value value;
	ES_GetState result = host_global_object->GetName(OP_ATOM_location, &value, source_runtime);
	verify(result == GET_SUCCESS);
	verify(value.type == VALUE_OBJECT);
	DOM_Object *host_object = DOM_Utils::GetDOM_Object(value.value.object, DOM_Utils::TYPE_DEFAULT);
	verify(host_object != NULL);
	verify(host_object->IsA(DOM_TYPE_LOCATION));
	JS_Location *location = static_cast<JS_Location *>(host_object);
	location->DisableNavigation();
}

test("Location.protocol")
	require success "Location navigation setup";
{
	verify("location" in window);
	verify(location instanceof Location);

	var base = "http://example.org/foo/bar";
	location.href = base;
	verify(location.href === base);

	location.protocol = "ftp";
	verify(location.protocol == "ftp:");

	location.protocol = "http";
	verify(location.protocol == "http:");

	location.protocol = "http:";
	verify(location.protocol == "http:");

	location.protocol = "http::::::::::::::";
	verify(location.protocol == "http:");

	var prev = location.href;
	location.protocol = ":::::::";
	verify(location.href === prev);

	location.href = base;
	verify(location.href === base);
}

test("Location.host")
	require success "Location navigation setup";
{
	verify("location" in window);
	verify(location instanceof Location);

	var base = "http://example.org/foo/bar";
	location.href = base;
	verify(location.href === base);

	location.host = "example.com";
	verify(location.host == "example.com");

	location.host = "example.com:80";
	verify(location.host == "example.com");

	location.host = "example.com:81";
	verify(location.host == "example.com:81");

	location.host = "example.com:008081";
	verify(location.host == "example.com:8081");

	location.host = "example.com:008081blah";
	verify(location.host == "example.com:8081");

	location.host = "example.com:8081 ";
	verify(location.host == "example.com:8081");

	base = "http://example.org:4567/foo/bar";
	location.href = base;
	verify(location.href === base);

	location.host = "example.com:81";
	verify(location.host == "example.com:81");

	location.href = base;
	verify(location.href === base);
}

test("Location.hostname")
	require success "Location navigation setup";
{
	verify("location" in window);
	verify(location instanceof Location);

	var base = "data:text/html,";
	location.href = base;
	verify(location.href === base);

	location.hostname = "example.com";
	verify(location.hostname == '');
	verify(location.href == base);

	base = "https://example.org/f";
	location.href = base;
	verify(location.href === base);

	location.hostname = "example.com";
	verify(location.hostname == "example.com");

	location.hostname = "example.com:81";
	verify(location.hostname == "example.com");

	base = "http://example.org:4567/foo/bar";
	location.href = base;
	verify(location.href === base);

	location.hostname = "example.com";
	verify(location.hostname == "example.com");
	verify(location.port == "4567");

	location.href = base;
	verify(location.href === base);
}

test("Location.port")
	require success "Location navigation setup";
{
	verify("location" in window);
	verify(location instanceof Location);

	var base = "data:text/html,";
	location.href = base;
	verify(location.href === base);

	location.port = 32;
	verify(location.port == '');
	verify(location.href == base);

	base = "http://example.org/f";
	location.href = base;
	verify(location.href === base);

	location.port = 55;
	verify(location.port == 55);

	location.port = "056";
	verify(location.port == 56);

	location.port = "057zz";
	verify(location.port == 57);

	location.port = "059zz";
	verify(location.port == 59);

	location.port = "65535";
	verify(location.port == 65535);

	location.port = "65536";
	verify(location.port == 65535);

	location.port = "2244939";
	verify(location.port == 65535);

	location.port = "-39";
	verify(location.port == 65535);

	location.port = "39";
	verify(location.port == 39);

	location.port = "z38";
	verify(location.port == 39);

	location.href = base;
	verify(location.href === base);
}

test("Location.pathname")
	require success "Location navigation setup";
{
	verify("location" in window);
	verify(location instanceof Location);

	var base = "http://example.org";
	location.href = base;
	verify(location.href === base + '/');

	location.pathname = "a";
	verify(location.href === base + '/a');
	verify(location.pathname === '/a');

	location.pathname = "/a";
	verify(location.href === base + '/a');
	verify(location.pathname === '/a');

	location.pathname = "/a/foo";
	verify(location.href === base + '/a/foo');
	verify(location.pathname === '/a/foo');

	location.pathname = "../b";
	verify(location.href === base + '/b');
	verify(location.pathname === '/b');

	base = "http://example.org";
	location.href = base;
	verify(location.href === base + '/');

}

test("Location.search")
	require success "Location navigation setup";
{
	verify("location" in window);
	verify(location instanceof Location);

	var base = "http://example.org/";
	location.href = base;
	verify(location.href === base);

	location.search = "a";
	verify(location.href === base + '?a');
	verify(location.search === '?a');

	location.search = "?b";
	verify(location.search === '?b');

	location.search = "??b";
	verify(location.search === '??b');

	location.search = "??c=2&d='34%'";
	verify(location.search === "??c=2&d='34%'");

	base = "http://example.org";
	location.href = base;
	verify(location.href === base + '/');
}

test("Location.hash")
	require success "Location navigation setup";
{
	verify("location" in window);
	verify(location instanceof Location);

	var base = "http://example.org/";
	location.href = base;
	verify(location.href === base);

	location.hash = "a";
	verify(location.href === base + '#a');
	verify(location.hash === '#a');

	location.hash = "##b";
	verify(location.hash === '##b');

	location.hash = "#c=2&d='34%'";
	verify(location.hash === "#c=2&d='34%'");

	base = "http://example.org";
	location.href = base;
	verify(location.href === base + '/');
}
