/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2008 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
**
*/

group "dom.js.window.base64";

language ecmascript;

html
{
  //! <script>
  //!	function test(value, expected64, expectedFinal){
  //!		var z, y='', x = value;
  //!		y = btoa(x);
  //!		z = atob(y);
  //!		expectedFinal = expectedFinal || value;
  //!		expectedFinal = expectedFinal == null ? '' : expectedFinal;
  //!
  //!		if (y!=expected64) return 'btoa failed';
  //!		if (z!=expectedFinal) return 'atob failed';
  //!		return '';
  //!	}
  //! </script>
}

test("1")
{
	var result = test(
		"abcdefghijklmnopqrstuvwxyz",
		"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo="
	);
	verify(result == '');
}

test("2")
{
	var result = test(
		0,
		"MA=="
	);
	verify(result == '');
}

test("3")
{
	var result = test(
		undefined,
		"dW5kZWZpbmVk",
		"undefined"
	);
	verify(result == '');
}

test("4")
{
	var result = test(
		"undefined",
		"dW5kZWZpbmVk"
	);
	verify(result == '');
}

test("5")
{
	var result = test(
		null,
		"bnVsbA==",
		"null"
	);
	verify(result == '');
}

test("6")
{
	var result = test(
		"null",
		"bnVsbA=="
	);
	verify(result == '');
}

test("7")
{
	var result = test(
		"",
		""
	);
	verify(result == '');
}

test("8")
{
	var result = test(
		"\0",
		"AA=="
	);
	verify(result == '');
}

test("9")
{
	var result = test(
		"\0\0",
		"AAA="
	);
	verify(result == '');
}

test("10")
{
	var result = test(
		"\0\0\0",
		"AAAA"
	);
	verify(result == '');
}

test("11")
{
	var special_str = [];
	for(var k=0;k < 0x100; k++)
		special_str.push(String.fromCharCode(k));
	var special_b64 = 'AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==';

	var result = test(
		unescape(special_str.join('')),
		special_b64
	);
	verify(result == '');
}

test("12")
{
	// Input is expected to be a sequence of octets, so strings having codepoints beyond U+00FF should fail.
	// (This is a heavyweight way of checking that by adapting '11'.)
	var special_str = [], special_str_r = [];
	for(var k=0;k < 0x100; k++){
		special_str.push(String.fromCharCode(k|k<<8));
		special_str_r.push(String.fromCharCode(k));
	}
	var special_b64 = 'AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==';

	var result = 'fail';
	try {
		result = test(unescape(special_str.join('')), special_b64, unescape(special_str_r.join('')));
	}
	catch (ex) {
		result = (ex.code == DOMException.INVALID_CHARACTER_ERR) ? 'pass' : 'fail';
	}
	verify(result == 'pass');
}

test("invalid input")
{
	try{
		//invalid base64 chars must raise exception
		atob("aa$$##");
		verify(!"Should have thrown exception");
	}
	catch(ex)
	{
		verify(ex.code == DOMException.INVALID_CHARACTER_ERR);
	}
}

test("check this")
{
	//atob and btoa are not bound to any object, they are "free" functions, like
	//escape/unescape, etc...
	verify(atob.call(null,"AAAA") == "\0\0\0");
	verify(btoa.call(null,"\0\0\0") == "AAAA");
}

