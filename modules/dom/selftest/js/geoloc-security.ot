/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "dom.geolocation.security";

require GEOLOCATION_SUPPORT;
require SECMAN_SET_USERCONSENT;
require init;

language c++;

include "modules/security_manager/include/security_manager.h";
include "modules/windowcommander/OpWindowCommander.h";

html {
//! <html></html>
}

test("Access denied - setup")
{
	verify_success(g_secman_instance->SetUserConsent(state.GetWindow(),
		OpPermissionListener::PermissionCallback::PERMISSION_TYPE_GEOLOCATION_REQUEST,
		OpPermissionListener::PermissionCallback::PERSISTENCE_TYPE_RUNTIME,
		OpSecurityManager::GetSelftestHostName(), DENIED));
}

test("Access denied - test watchPosition")
	require success "Access denied - setup";
	language ecmascript;
	async;
{
	function onSuccess(position)
	{
		ST_failed("watchPosition success callback called but error expected");
	}

	function onError(error)
	{
		if (error.code == error.PERMISSION_DENIED)
			ST_passed();
		else
			ST_failed("PERMISSION_DENIED (1) expected but got " + error.code + " instead");
	}

	navigator.geolocation.watchPosition(onSuccess, onError);
}


html {
//! <html>
//! <script>
//! var success_called = false
//! var error_called = false
//! function onError(error)
//! {
//! 	opera.postError('onError called');
//! 	error_called = true;
//! 	if (!success_called)
//! 		ST_failed("watchPosition error: " + error.code);
//! }
//! </script>
//! </html>
}

test("Access revoked - setup")
{
	verify_success(g_secman_instance->SetUserConsent(state.GetWindow(),
		OpPermissionListener::PermissionCallback::PERMISSION_TYPE_GEOLOCATION_REQUEST,
		OpPermissionListener::PermissionCallback::PERSISTENCE_TYPE_RUNTIME,
		OpSecurityManager::GetSelftestHostName(), ALLOWED));
}

test("Access revoked - watchPosition")
	require success "Access revoked - setup";
	language ecmascript;
	async;
{
	function onSuccess(position)
	{
		success_called = true;
		ST_passed();
	}

	// onError must be declared outside of this scope, otherwise
	// it is cancelled.
	navigator.geolocation.watchPosition(onSuccess, onError);
}

test("Access revoked - revoke permission")
	require success "Access revoked - watchPosition";
{
	verify_success(g_secman_instance->SetUserConsent(state.GetWindow(),
		OpPermissionListener::PermissionCallback::PERMISSION_TYPE_GEOLOCATION_REQUEST,
		OpPermissionListener::PermissionCallback::PERSISTENCE_TYPE_RUNTIME,
		OpSecurityManager::GetSelftestHostName(), ASK));
}

test("Access revoked - check result")
	require success "Access revoked - revoke permission";
	language ecmascript;
{
	verify(success_called);
	verify(error_called);
}

exit
{
	g_secman_instance->SetUserConsent(state.GetWindow(),
		OpPermissionListener::PermissionCallback::PERMISSION_TYPE_GEOLOCATION_REQUEST,
		OpPermissionListener::PermissionCallback::PERSISTENCE_TYPE_RUNTIME,
		OpSecurityManager::GetSelftestHostName(), ASK);
}
