/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2008 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
**
*/

group "dom.js.window";

language ecmascript;

html
{
  //! <html><head><title>tc</title></head><body>
  //! <iframe id="window"></iframe>
  //! </body></html>
}

test("window")
{
  verify(window);
  verify(window.document.location != "about:blank");
}

html
{
  //! <html><head><title>tc</title></head><body>
  //! <iframe style="display:none"></iframe>
  //! <iframe style="display:none" name="foo"></iframe>
  //! <x id="0"><x id="2" id="foo"><x id="hi">
  //! </body></html>
}

test("window.frames#1")
{
  verify("frames" in window);
  verify(window.frames);
  verify(window.frames === window);
}

test("window.frames#2")
{
  // Test from the demo in CORE-6730
  var iframe0 = document.getElementsByTagName("iframe")[0].contentWindow;
  var iframe1_foo = document.getElementsByTagName("iframe")[1].contentWindow;
  var x0_0 = document.getElementsByTagName("x")[0];
  var x1_2_foo = document.getElementsByTagName("x")[1];
  var x2_hi = document.getElementsByTagName("x")[2];

  verify(iframe0);
  verify(iframe1_foo);
  verify(x0_0);
  verify(x1_2_foo);
  verify(x2_hi);

  verify(window.frames['0'] == iframe0);
  verify(window['0'] == iframe0);

  verify(window.frames['1'] == iframe1_foo);
  verify(window['1'] == iframe1_foo);

  verify(window.frames['2'] == undefined);
  verify(window['2'] == undefined);

  verify(window.frames['hi'] == x2_hi);
  verify(window['hi'] == x2_hi);

  verify(window.frames['foo'] == iframe1_foo);
  verify(window['foo'] == iframe1_foo);
}

test("window.frames#3")
{
  var result = "not tested";

  try
  {
	window.frames('0');
	result = "no exception";
  }
  catch (e)
  {
	result = e.name;
  }

  verify(result == "TypeError");
}

test("window.frames#4")
{
  var result = "not tested";

  try
  {
	window('0');
	result = "no exception";
  }
  catch (e)
  {
	result = e.name;
  }

  verify(result == "TypeError");
}

test("clearInterval and clearTimeout shouldn't throw")
{
	verify("clearInterval" in window);
	verify("clearTimeout" in window);

	window.clearInterval(); // should fail silently

	window.clearTimeout(); // should fail silently
}

test("setTimeout weird values")
async;
{
	var number_of_calls = 0;
	var t0 = setTimeout(function(){
		number_of_calls++;
	}, -10);
	var t1 = setTimeout(function(){
		number_of_calls++;
	}, -Infinity);
	var t2 = setTimeout(function(){
		number_of_calls++;
	}, 0);
	var t3 = setTimeout(function(){
		number_of_calls++;
	}, NaN);
	var t4 = setTimeout(function(){
		number_of_calls++;
	}, Infinity);

	setTimeout(function(){
		clearTimeout(t0);
		clearTimeout(t1);
		clearTimeout(t2);
		clearTimeout(t3);
		clearTimeout(t4);

		verify(number_of_calls == 5);
		ST_passed();
	},50);
}

test("setInterval weird values")
async;
{
	var number_of_calls = 0;
	var t0 = setInterval(function(){
		clearInterval(t0);
		number_of_calls++;
	},-10);
	var t1 = setInterval(function(){
		clearInterval(t1);
		number_of_calls++;
	},-Infinity);
	var t2 = setInterval(function(){
		clearInterval(t2);
		number_of_calls++;
	},0);
	var t3 = setInterval(function(){
		clearInterval(t3);
		number_of_calls++;
	},NaN);
	var t4 = setInterval(function(){
		clearInterval(t4);
		number_of_calls++;
	}, Infinity);

	//good callback
	setTimeout(function(){
		clearInterval(t0);
		clearInterval(t1);
		clearInterval(t2);
		clearInterval(t3);
		clearInterval(t4);

		verify(number_of_calls == 5);
		ST_passed();
	},50);
}

test("window.event")
{
	// This testcase will have to change a little when we drop
	// attachEvent and window.event. Specifically property reads will
	// return undefined rather than null when window.event isn't set.

	verify("event" in window);
	verify(typeof window.event == 'undefined');
	verify(typeof window.event === 'undefined');

	window.event = "hello";
	verify(window.event === "hello");

	window.event = window;
	verify(window.event === window);

	window.event = undefined;
	verify(window.event === undefined);

	delete window.event;
	verify(typeof window.event == 'undefined');
}

test("Customizable Selection object")
require DOM_SELECTION_SUPPORT;
{
	verify("Selection" in window);
	verify(window.Selection);
	verify(window.Selection.prototype);

	Selection.prototype.foo = 1;
	var s = getSelection();
	verify(s);
	verify(s.foo == 1);
}

html
{
	//! <input name="damer">
	//! <input name="damer">
}

test("named properties: input,name")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	check_named_property('damer');
	verify(check_if_enumerable('damer', window) == false);
}

html
{
	//! <input id="damer">
	//! <input id="damer">
}
test("named properties: input,id")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	check_named_property('damer');
	verify(check_if_enumerable('damer', window) == false);
}

html
{
	//! <div name="damer"></div>
	//! <div name="damer"></div>
}
test("named properties: div,name")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	verify(typeof window.damer === 'undefined');
	verify(check_if_enumerable('damer', window) == false);
}

html
{
	//! <div id="damer"></div>
	//! <div id="damer"></div>
}
test("named properties: div,id")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	check_named_property('damer');
	verify(check_if_enumerable('damer', window) == false);
}

html
{
	//! <form name="damer9"></form>
	//! <form name="damer9">
	//!	  <input name="damer5">
	//!	  <input name="damer5">
	//!	  <div name="damer6"></div>
	//!	  <div name="damer6"></div>
	//!	  <input id="damer7">
	//!	  <input id="damer7">
	//!	  <div id="damer8"></div>
	//!	  <div id="damer8"></div>
	//! </form>
}
test("named properties: form,name+id")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	verify(window.damer5 === undefined);
	verify(window.damer6 === undefined);
	verify(window.damer7 === undefined);

	check_named_property('damer8');
	check_named_property('damer9');
	verify(check_if_enumerable('damer', window) == false);
}

html
{
	//! <form id="damer"></form>
	//! <form id="damer"></form>
}
test("named properties: form,name (empty)")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	check_named_property('damer');
	verify(check_if_enumerable('damer', window) == false);
}

html
{
	//! <iframe name="damer"></iframe>
	//! <iframe name="damer"></iframe>
}
test("named properties: iframe, name")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	verify(window.damer == document.getElementsByTagName('iframe')[0].contentWindow);
	// See CORE-46663.
	verify(check_if_enumerable('damer', window) == true);
}

html
{
	//! <iframe id="damer"></iframe>
	//! <iframe id="damer"></iframe>
}
test("named properties: iframe, id")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	verify(window.damer == document.getElementsByTagName('iframe')[0].contentWindow);
	// See CORE-46663.
	verify(check_if_enumerable('damer', window) == true);
}

html
{
	//! <a name="damer" href=""></a>
	//! <a name="damer" href=""></a>
}
test("named properties: a, name")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	check_named_property('damer');
	verify(check_if_enumerable('damer', window) == false);
}

html
{
	//! <a id="damer" href=""></a>
	//! <a id="damer" href=""></a>
}
test("named properties: a, id")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	check_named_property('damer');
	verify(check_if_enumerable('damer', window) == false);
}

html
{
	//! <img name="damer">
	//! <img name="damer">
}
test("named properties: img, name")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	check_named_property('damer');
	verify(check_if_enumerable('damer', window) == false);
}

html
{
	//! <img id="damer">
	//! <img id="damer">
}
test("named properties: img, id")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	check_named_property('damer');
	verify(check_if_enumerable('damer', window) == false);
}

html
{
	//! <object name="damer"></object>
	//! <object name="damer"></object>
}
test("named properties: object, name")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	check_named_property('damer');
	verify(check_if_enumerable('damer', window) == false);
}

html
{
	//! <object id="damer"></object>
	//! <object id="damer"></object>
}
test("named properties: object, id")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	check_named_property('damer');
	verify(check_if_enumerable('damer', window) == false);
}

html
{
	//! <embed name="damer"></embed>
	//! <embed name="damer"></embed>
}
test("named properties: embed, name")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	check_named_property('damer');
	verify(check_if_enumerable('damer', window) == false);
}

html
{
	//! <embed id="damer"></embed>
	//! <embed id="damer"></embed>
}
test("named properties: embed, id")
{
	function check_named_property(p)
	{
		var list = window[p];
		verify(list != null);
		verify(p in window);
		verify(list.length == 2);
		verify(list[0] != null && list[1] != null);
		verify(list[p]);
		verify(list[p].length == list.length);
	}

	function check_if_enumerable(n, obj)
	{
		for (var p in obj)
			if (p.indexOf(n) == 0)
				return true;

		return false;
	}

	check_named_property('damer');
	verify(check_if_enumerable('damer', window) == false);
}

test("devicePixelRatio")
{
	// Check that the value is within a reasonable range.
	verify(window.devicePixelRatio > 0 && window.devicePixelRatio < 1000);

	// Check that the the property is readonly.
	var old_ratio = window.devicePixelRatio;
	window.devicePixelRatio = 666;
	verify(window.devicePixelRatio == old_ratio);
}

test("window.postMessage")
	require DOM_CROSSDOCUMENT_MESSAGING_SUPPORT;
{
	verify ("postMessage" in window);
	try {
		window.postMessage();
		verify(!"window.postMessage() requires 2 arguments");
	} catch (e) {
		verify (e.message.indexOf ("WRONG_ARGUMENTS_ERR") == 0);
	}
	try {
		window.postMessage(1);
		verify(!"window.postMessage() requires 2 arguments");
	} catch (e) {
		verify (e.message.indexOf ("WRONG_ARGUMENTS_ERR") == 0);
	}
	try {
		window.postMessage(1, "");
		verify(!"window.postMessage() requires 2 arguments");
	} catch (e) {
		verify(e.code == DOMException.SYNTAX_ERR);
	}
	try {
		window.postMessage(1, "a");
		verify(!"Invalid origin, window.postMessage() should throw");
	} catch (e) {
		verify(e.code == DOMException.SYNTAX_ERR);
	}
	try {
		window.postMessage(1, "/");
	} catch (e) {
		verify(!"Valid origin, window.postMessage() should not throw");
	}
	try {
		window.postMessage(1, "*");
	} catch (e) {
		verify(!"Valid origin, window.postMessage() should not throw");
	}
}

test("window.supportsCSS")
{
	verify("supportsCSS" in window);

	verify(window.supportsCSS("color", "green") == true );
	verify(window.supportsCSS("color", "70px") == false );
	verify(window.supportsCSS("foobar", "auto") == false );
	verify(window.supportsCSS("color\0", "green") == false );
	verify(window.supportsCSS("color", "green\0") == false );

	try {
		window.supportsCSS();
		verify(!"window.supportsCSS() requires 2 arguments");
	} catch (e) {
	}
	try {
		window.supportsCSS("color");
		verify(!"window.supportsCSS() requires 2 arguments");
	} catch (e) {
	}
}
