/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
**
*/

group "dom.js.console";

include "modules/console/opconsoleengine.h";
include "modules/doc/frm_doc.h";
include "modules/dochand/docman.h";
include "modules/dochand/win.h";
include "modules/dom/src/js/js_console.h";
include "modules/ecmascript_utils/esasyncif.h";
include "modules/hardcore/timer/optimer.h";

global
{

	// How long (in milliseconds) we should wait for
	// before we consider a single test a failure.
	#define TIMEOUT 1000

	class ConsoleLogTester
		: public OpConsoleListener
		, public OpTimerListener
	{
	public:

		enum CheckField
		{
			CHECK_NOTHING = 0x0,
			CHECK_SOURCE = 0x1,
			CHECK_SEVERITY = 0x2,
			CHECK_WINDOW = 0x4,
			CHECK_URL = 0x8,
			CHECK_CONTEXT = 0x10,
			CHECK_MESSAGE = 0x20,
		};

		struct Fields
		{
			OpConsoleEngine::Source source;
			OpConsoleEngine::Severity severity;
			unsigned window;
			const uni_char *url;
			const uni_char *context;
			const uni_char *message;
		};

		ConsoleLogTester()
			: check_bits(CHECK_NOTHING)
		{
			timer.SetTimerListener(this);
			g_console->RegisterConsoleListener(this);
		}

		virtual ~ConsoleLogTester()
		{
			g_console->UnregisterConsoleListener(this);
		}

		void SetSource(OpConsoleEngine::Source source) { check_bits |= CHECK_SOURCE; fields.source = source; }
		void SetSeverity(OpConsoleEngine::Severity severity) { check_bits |= CHECK_SEVERITY; fields.severity = severity; }
		void SetWindow(unsigned window) { check_bits |= CHECK_WINDOW; fields.window = window; }
		void SetURL(const uni_char *url) { check_bits |= CHECK_URL; fields.url = url; }
		void SetContext(const uni_char *context) { check_bits |= CHECK_CONTEXT; fields.context = context; }
		void SetMessage(const uni_char *message) { check_bits |= CHECK_MESSAGE; fields.message = message; }

		void Reset() { check_bits = CHECK_NOTHING; }

		BOOL CheckConditions(const OpConsoleEngine::Message *message)
		{
			if (check_bits == CHECK_NOTHING)
				return FALSE;
			if ((check_bits & CHECK_SOURCE) && (message->source != fields.source))
				return FALSE;
			if ((check_bits & CHECK_SEVERITY) && (message->severity != fields.severity))
				return FALSE;
			if ((check_bits & CHECK_WINDOW) && (message->window != fields.window))
				return FALSE;
			if ((check_bits & CHECK_URL) && (message->url.Compare(fields.url) != 0))
				return FALSE;
			if ((check_bits & CHECK_CONTEXT) && (message->context.Compare(fields.context) != 0))
				return FALSE;
			if ((check_bits & CHECK_MESSAGE) && (message->message.Compare(fields.message) != 0))
				return FALSE;
			return TRUE;
		}

		// From OpConsoleListener
		virtual OP_STATUS NewConsoleMessage(unsigned int id, const OpConsoleEngine::Message *message)
		{
			if (CheckConditions(message))
			{
				Reset();
				timer.Stop();
				ST_passed();
			}

			return OpStatus::OK;
		}

		// From OpTimerListener
		void OnTimeOut(OpTimer* timer)
		{
			ST_failed("Timeout! Correct Error Console message not observed.");
			Reset();
			timer->Stop();
		}

		void Start(const uni_char *script)
		{
			DocumentManager* doc_man = state.GetWindow()->DocManager();
			FramesDocument* frm_doc = doc_man->GetCurrentDoc();
			ES_AsyncInterface *asyncif = (frm_doc ? frm_doc->GetESAsyncInterface() : NULL);

			if (!asyncif)
				ST_failed("No FramesDocument or ES_AsyncInterface");

			timer.Start(TIMEOUT);

			if (OpStatus::IsError(asyncif->Eval(script)))
				ST_failed("Eval failed");
		}

	private:
		unsigned check_bits;
		Fields fields;
		OpTimer timer;
	};

	ConsoleLogTester logtester;
}

test("existence")
	language ecmascript;
{
	verify("console" in window);
	verify(window.console);
	verify(window.console == console);

	verify("log" in console);
	verify("debug" in console);
	verify("info" in console);
	verify("warn" in console);
	verify("error" in console);
	verify("assert" in console);
	verify("dir" in console);
	verify("dirxml" in console);
	verify("group" in console);
	verify("groupCollapsed" in console);
	verify("groupEnd" in console);
	verify("count" in console);
	verify("table" in console);
	verify("time" in console);
	verify("timeEnd" in console);
	verify("trace" in console);
	verify("profile" in console);
	verify("profileEnd" in console);
	verify("clear" in console);
	verify("exception" in console);
}

test("simple")
	language ecmascript;
	require success "existence";
{
	console.log("Test log message from selftest dom.js.console");
	console.debug("Test warning message from selftest dom.js.console");
	console.info("Test error message from selftest dom.js.console");
	console.warn("Test log message from selftest dom.js.console");
	console.error("Test warning message from selftest dom.js.console");
	console.dir("Test log message from selftest dom.js.console");
	console.dirxml("Test warning message from selftest dom.js.console");
	console.error("Test error message from selftest dom.js.console");
	console.dir("Test warning message from selftest dom.js.console");
	console.dirxml("Test log message from selftest dom.js.console");
	console.group("Test warning message from selftest dom.js.console");
	console.groupCollapsed("Test error message from selftest dom.js.console");
	console.count("Test error message from selftest dom.js.console");
	console.table("Test error message from selftest dom.js.console");
	console.time("Fruit");
	console.timeEnd("Fruit");
	console.trace();
	console.profile("Weee");
	console.profileEnd();
	console.clear();
	console.exception("Error");
}

test("edge cases with %")
	language ecmascript;
	require success "existence";
{
	// This testcase verifies that Opera does not crash when calling these functions.

	console.log("%");
	console.log("");
	console.log("%%");
	console.log();
	console.log("% %");
	console.log("%d hello");
	console.log("%hello");
}

test("argument conversions")
	language ecmascript;
	require success "existence";
{
	// This testcase verifies that Opera does not crash when calling these functions.

	console.log("Dummy %s %d", 1, 2, 3); // should be "1 2 3"
	console.log("Arrays %s %d", new Array, new Array, new Array);
	console.log("Too many arguments %s %d", new Date, new Date, new Date, new Date);
}

test("FormatString, no placeholders")
{
	ES_Value v[1];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("Basic test with no formatting");

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 1, str));
	verify(str.Compare("Basic test with no formatting") == 0);
}

test("FormatString, one placeholder, undefined arg")
{
	ES_Value v[2];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("Hello %s world");

	v[1].type = VALUE_UNDEFINED;

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 2, str));
	verify(str.Compare("Hello undefined world") == 0);
}

test("FormatString, one placeholder, null arg")
{
	ES_Value v[2];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("Hello %s world");

	v[1].type = VALUE_NULL;

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 2, str));
	verify(str.Compare("Hello null world") == 0);
}

test("FormatString, one placeholder, boolean (true) arg")
{
	ES_Value v[2];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("Hello %s world");

	v[1].type = VALUE_BOOLEAN;
	v[1].value.boolean = TRUE;

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 2, str));
	verify(str.Compare("Hello true world") == 0);
}

test("FormatString, one placeholder, boolean (false) arg")
{
	ES_Value v[2];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("Hello %s world");

	v[1].type = VALUE_BOOLEAN;
	v[1].value.boolean = FALSE;

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 2, str));
	verify(str.Compare("Hello false world") == 0);
}

test("FormatString, one placeholder, number arg")
{
	ES_Value v[2];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("Hello %s world");

	v[1].type = VALUE_NUMBER;
	v[1].value.number = 1337;

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 2, str));
	verify(str.Compare("Hello 1337 world") == 0);
}

test("FormatString, one placeholder, string arg")
{
	ES_Value v[2];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("Hello %s world");

	v[1].type = VALUE_STRING;
	v[1].value.string = UNI_L("brave new");

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 2, str));
	verify(str.Compare("Hello brave new world") == 0);
}

test("FormatString, one placeholder, string with length arg")
{
	ES_Value v[2];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("Hello %s world");

	ES_ValueString valstr;
	valstr.length = 9;
	valstr.string = UNI_L("brave new blah blah blah");

	v[1].type = VALUE_STRING_WITH_LENGTH;
	v[1].value.string_with_length = &valstr;

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 2, str));
	verify(str.Compare("Hello brave new world") == 0);
}

test("FormatString, three placeholders, three args")
{
	ES_Value v[4];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("%s hello, %s Hello, %s HELLO");

	v[1].type = VALUE_STRING;
	v[1].value.string = UNI_L("First");

	v[2].type = VALUE_STRING;
	v[2].value.string = UNI_L("Second");

	v[3].type = VALUE_STRING;
	v[3].value.string = UNI_L("Third");

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 4, str));
	verify(str.Compare("First hello, Second Hello, Third HELLO") == 0);
}

test("FormatString, three placeholders, two args")
{
	ES_Value v[4];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("%s hello, %s Hello, %s HELLO");

	v[1].type = VALUE_STRING;
	v[1].value.string = UNI_L("First");

	v[2].type = VALUE_STRING;
	v[2].value.string = UNI_L("Second");

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 3, str));
	verify(str.Compare("First hello, Second Hello, %s HELLO") == 0);
}

test("FormatString, no placeholders, three args")
{
	ES_Value v[4];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("Hello:");

	v[1].type = VALUE_STRING;
	v[1].value.string = UNI_L("First");

	v[2].type = VALUE_STRING;
	v[2].value.string = UNI_L("Second");

	v[3].type = VALUE_STRING;
	v[3].value.string = UNI_L("Third");

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 4, str));
	verify(str.Compare("Hello: First Second Third") == 0);
}

test("FormatString, first arg not string")
{
	ES_Value v[4];

	v[0].type = VALUE_BOOLEAN;
	v[0].value.boolean = TRUE;

	v[1].type = VALUE_STRING;
	v[1].value.string = UNI_L("First");

	v[2].type = VALUE_STRING;
	v[2].value.string = UNI_L("Second");

	v[3].type = VALUE_STRING;
	v[3].value.string = UNI_L("Third");

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 4, str));
	verify(str.Compare("true First Second Third") == 0);
}

test("FormatString, three consecutive placeholders")
{
	ES_Value v[4];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("%s%s%s");

	v[1].type = VALUE_STRING;
	v[1].value.string = UNI_L("First");

	v[2].type = VALUE_STRING;
	v[2].value.string = UNI_L("Second");

	v[3].type = VALUE_STRING;
	v[3].value.string = UNI_L("Third");

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 4, str));
	verify(str.Compare("FirstSecondThird") == 0);
}

test("FormatString, percent sign")
{
	ES_Value v[4];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("%%%s%%");

	v[1].type = VALUE_STRING;
	v[1].value.string = UNI_L("First");

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 2, str));
	verify(str.Compare("%First%") == 0);
}

test("FormatString, escape placeholder")
{
	ES_Value v[4];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("%%s");

	v[1].type = VALUE_STRING;
	v[1].value.string = UNI_L("First"); // Should not end up in final string.

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 2, str));
	verify(str.Compare("%s First") == 0);
}

test("FormatString, invalid placeholders ignored")
{
	ES_Value v[4];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("%s%s%a%b%c%s%g");

	v[1].type = VALUE_STRING;
	v[1].value.string = UNI_L("First");

	v[2].type = VALUE_STRING;
	v[2].value.string = UNI_L("Second");

	v[3].type = VALUE_STRING;
	v[3].value.string = UNI_L("Third");

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 4, str));
	verify(str.Compare("FirstSecond%a%b%cThird%g") == 0);
}

test("FormatString, very invalid placeholders ignored")
{
	ES_Value v[4];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L(" %s%s%a%%%%%%%%%%%b%c%s%g%%%%% %% % %");

	v[1].type = VALUE_STRING;
	v[1].value.string = UNI_L("First");

	v[2].type = VALUE_STRING;
	v[2].value.string = UNI_L("Second");

	v[3].type = VALUE_STRING;
	v[3].value.string = UNI_L("Third");

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 4, str));
	verify(str.Compare(" FirstSecond%a%%%%%%b%cThird%g%%% % % %") == 0);
}

test("FormatString, insufficient valid placeholders")
{
	ES_Value v[4];

	v[0].type = VALUE_STRING;
	v[0].value.string = UNI_L("% %% %s%s%a%%%%%%%%%%%b%c%g%%%%% %% % % ");

	v[1].type = VALUE_STRING;
	v[1].value.string = UNI_L("First");

	v[2].type = VALUE_STRING;
	v[2].value.string = UNI_L("Second");

	v[3].type = VALUE_STRING;
	v[3].value.string = UNI_L("Third");

	OpString str;
	RETURN_IF_ERROR(JS_Console::FormatString(v, 4, str));
	verify(str.Compare("% % FirstSecond%a%%%%%%b%c%g%%% % % %  Third") == 0);
}

html
{
	//! <!doctype html>
	//! <script>
	//! var foo = "bar";
	//! </script>
}

test("console.log, simple string")
	async;
{
	logtester.SetMessage(UNI_L("Basic test!"));
	const uni_char *scripts = UNI_L("console.log('Basic test!');");
	logtester.Start(scripts);
}

test("console.log, null arg")
	async;
{
	logtester.SetMessage(UNI_L("Hello null world"));
	const uni_char *scripts = UNI_L("console.log('Hello %s world', null);");
	logtester.Start(scripts);
}

test("console.log, multiple strings")
	async;
{
	logtester.SetMessage(UNI_L("Hello Brave New World"));
	const uni_char *scripts = UNI_L("console.log('Hello', 'Brave', 'New', 'World');");
	logtester.Start(scripts);
}

test("console.log, object")
	async;
{
	logtester.SetMessage(UNI_L("Hello [object Object]"));
	const uni_char *scripts = UNI_L("console.log('Hello', {});");
	logtester.Start(scripts);
}

test("console.log, function")
	async;
{
	logtester.SetMessage(UNI_L("Hello [object Function]"));
	const uni_char *scripts = UNI_L("console.log('Hello', function(){});");
	logtester.Start(scripts);
}

test("console.log, array")
	async;
{
	logtester.SetMessage(UNI_L("Hello [object Array]"));
	const uni_char *scripts = UNI_L("console.log('Hello', []);");
	logtester.Start(scripts);
}

test("console.log, single placeholder")
{
	logtester.SetMessage(UNI_L("%"));
	const uni_char *scripts = UNI_L("console.log('%');");
	logtester.Start(scripts);
}

test("console.log, empty string")
{
	logtester.SetMessage(UNI_L(""));
	const uni_char *scripts = UNI_L("console.log('');");
	logtester.Start(scripts);
}

test("console.log, escaped percent sign")
{
	logtester.SetMessage(UNI_L("%"));
	const uni_char *scripts = UNI_L("console.log('%%');");
	logtester.Start(scripts);
}

test("console.log, empty argument list")
{
	logtester.SetMessage(UNI_L(""));
	const uni_char *scripts = UNI_L("console.log();");
	logtester.Start(scripts);
}

test("console.log, two separate percent signs")
{
	logtester.SetMessage(UNI_L("% %"));
	const uni_char *scripts = UNI_L("console.log('% %');");
	logtester.Start(scripts);
}

test("console.log, no formatting arguments")
{
	logtester.SetMessage(UNI_L("%d hello"));
	const uni_char *scripts = UNI_L("console.log('%d hello');");
	logtester.Start(scripts);
}

test("console.log, single invalid placeholder")
{
	logtester.SetMessage(UNI_L("%hello"));
	const uni_char *scripts = UNI_L("console.log('%hello');");
	logtester.Start(scripts);
}

test("console.log, complex placeholders")
	async;
{
	logtester.SetMessage(UNI_L("[object Object], [object Function], and 1337, and of course false %t null, and finally world"));
	const uni_char *scripts = UNI_L("console.log('%s, %s, and %s, and of course %s %t %s, and finally', {}, function(){}, 1337, false, null, 'world');");
	logtester.Start(scripts);
}

test("console.log, placeholder abuse")
	async;
{
	logtester.SetMessage(UNI_L("% %g%y%u%% %s[object Object]%"));
	const uni_char *scripts = UNI_L("console.log('%% %g%y%u%%%% %%s%s%', {});");
	logtester.Start(scripts);
}

test("console.log, message source")
	async;
{
	logtester.SetMessage(UNI_L("Testing console.log"));
	logtester.SetSource(OpConsoleEngine::EcmaScript);
	const uni_char *scripts = UNI_L("console.log('Testing console.log');");
	logtester.Start(scripts);
}

test("console.log, message severity")
	async;
{
	logtester.SetMessage(UNI_L("Testing console.log"));
	logtester.SetSeverity(OpConsoleEngine::Information);
	const uni_char *scripts = UNI_L("console.log('Testing console.log');");
	logtester.Start(scripts);
}

test("console.log, window")
	async;
{
	logtester.SetMessage(UNI_L("Testing console.log"));
	logtester.SetWindow(state.GetWindow()->Id());
	const uni_char *scripts = UNI_L("console.log('Testing console.log');");
	logtester.Start(scripts);
}

test("console.log, url")
	async;
{
	logtester.SetMessage(UNI_L("Testing console.log"));
	logtester.SetURL(UNI_L("opera:blanker"));
	const uni_char *scripts = UNI_L("console.log('Testing console.log');");
	logtester.Start(scripts);
}

test("console.debug, message severity")
	async;
{
	logtester.SetMessage(UNI_L("Testing console.debug"));
	logtester.SetSeverity(OpConsoleEngine::Information);
	const uni_char *scripts = UNI_L("console.debug('Testing console.debug');");
	logtester.Start(scripts);
}

test("console.info, message severity")
	async;
{
	logtester.SetMessage(UNI_L("Testing console.info"));
	logtester.SetSeverity(OpConsoleEngine::Information);
	const uni_char *scripts = UNI_L("console.info('Testing console.info');");
	logtester.Start(scripts);
}

test("console.warn, message severity")
	async;
{
	logtester.SetMessage(UNI_L("Testing console.warn"));
	logtester.SetSeverity(OpConsoleEngine::Information);
	const uni_char *scripts = UNI_L("console.warn('Testing console.warn');");
	logtester.Start(scripts);
}

test("console.error, message severity")
	async;
{
	logtester.SetMessage(UNI_L("Testing console.error"));
	logtester.SetSeverity(OpConsoleEngine::Error);
	const uni_char *scripts = UNI_L("console.error('Testing console.error');");
	logtester.Start(scripts);
}

test("console.assert, message severity")
	async;
{
	logtester.SetMessage(UNI_L("Testing console.assert"));
	logtester.SetSeverity(OpConsoleEngine::Error);
	const uni_char *scripts = UNI_L("console.assert(false, 'Testing console.assert');");
	logtester.Start(scripts);
}

foreach (test_name, context, message, script) from
	{
		{"console.log",    UNI_L("console.log"),    UNI_L("Foo"), UNI_L("console.log('Foo');")},
		{"console.debug",  UNI_L("console.debug"),  UNI_L("Foo"), UNI_L("console.debug('Foo');")},
		{"console.info",   UNI_L("console.info"),   UNI_L("Foo"), UNI_L("console.info('Foo');")},
		{"console.warn",   UNI_L("console.warn"),   UNI_L("Foo"), UNI_L("console.warn('Foo');")},
		{"console.assert", UNI_L("console.assert"), UNI_L("Foo"), UNI_L("console.assert(false, 'Foo');")},
		{"console.error",  UNI_L("console.error"),  UNI_L("Foo"), UNI_L("console.error('Foo');")},
	}
{
	test(test_name ", context")
		async;
	{
		logtester.SetMessage(message);
		logtester.SetContext(context);
		logtester.Start(script);
	}
} // foreach
