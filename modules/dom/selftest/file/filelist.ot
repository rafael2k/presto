// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-

group "DOM.File.FileList";
require init;

include "modules/forms/formvalue.h";
include "modules/logdoc/htm_elm.h";

language ecmascript;

html "";

test("Constructor")
{
	verify("FileList" in window);
	verify(FileList.prototype);
	verify(FileList.prototype.constructor);
	verify(FileList.prototype.constructor === FileList);
	verify("item" in FileList.prototype);
}

html
{
	//! <input type=file>
}
test("Setup")
	language C++;
    require _FILE_UPLOAD_SUPPORT_;
    file uni    testfile_uni    "input/abc.txt";
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);
	FormValue* form_value = file_input->GetFormValue();
	verify(form_value);
	form_value->SetValueFromText(file_input, testfile_uni);
}

test("FileList.properties")
	require success "Setup";
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);
	verify(input.files === input.files);
	verify(input.files[0] != null);
	verify(input.files[0] instanceof File);
	verify(input.files[0] === input.files.item(0));
	verify(input.files[0] === input.files.item(NaN));

	// Slight asymmetry here, only item() supporting negative indexes that map to null.
	verify(typeof input.files[-1] == 'undefined');
	verify(input.files.item(-1) === null);
	verify(typeof input.files[10] == 'undefined');
	verify(input.files.item(10) === null);
}
