// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-

group "DOM.File.FileReaderSync";
require init;

include "modules/forms/formvalue.h";
include "modules/logdoc/htm_elm.h";

require DOM_WEBWORKERS_SUPPORT;
require DOM_CROSSDOCUMENT_MESSAGING_SUPPORT;

language ecmascript;

html "";

test("FileReaderSync in Worker")
	file testfile "input/workertest1.js";
	async;
{
	var stuff = #string "input/workertest1.js";
	var url = 'data:text/javascript,' + stuff;
	var w = new Worker(url);
	function onMsg(e)
	{
		var obj = e.data;
		try {
			if (obj.FileReaderSync != "function")
				ST_failed("Worker missing FileReaderSync: "+ obj.FileReaderSync, "filereadersync.ot", 1);
			else if (obj.FileReaderSyncPrototype != "object")
				ST_failed("Worker missing FileReaderSync.prototype: "+ obj.FileReaderSync, "filereadersync.ot", 1);
			else if (obj.FileReaderSyncPrototypeConstructor != "function")
				ST_failed("Worker missing FileReaderSync.prototype.constructor: "+ obj.FileReaderSync, "filereadersync.ot", 1);
			else if (obj.FileException != "function")
				ST_failed("Worker missing FileException: "+ obj.FileException, "filereadersync.ot", 1);
			else if (obj.FileExceptionPrototype != "object")
				ST_failed("Worker missing FileException.prototype: "+ obj.FileException, "filereadersync.ot", 1);
			else if (obj.FileExceptionPrototypeConstructor != "function")
				ST_failed("Worker missing FileException.prototype.constructor: "+ obj.FileException, "filereadersync.ot", 1);
			else
				ST_passed();
		} catch(e) {
			ST_failed("Worker environment not containing required methods: "+e, "filereadersync.ot", 1);
		} finally {
			w.terminate();
		}
	}

	function onErr(e)
	{
		ST_failed("Error raised: " + e.message, "filereadersync.ot", 1);
		try { w.terminate(); } catch(e) {};
	}

	w.onmessage = onMsg;
	w.onerror = onErr;
	w.postMessage(2);
}

test("FileReaderSync in Worker #2")
	file	testfile	"input/workertest2.js";
	async;
{
	var stuff = #string "input/workertest2.js";
	var url = 'data:text/javascript,' + stuff;
	var w = new Worker(url);
	function onMsg(e)
	{
		var expected = 'hey you';
		try {
			if (e.data != expected)
				ST_failed("Worker failed to read Blob, expected '" + expected + "', got: " + e.data, "filereadersync.ot", 1);
			else
				ST_passed();
		} catch(e) {
			ST_failed("Unexpected exception: " + e, "filereadersync.ot", 1);
		} finally {
			w.terminate();
		}
	}

	function onErr(e)
	{
		ST_failed("Error raised: " + e.message, "filereadersync.ot", 1);
		try { w.terminate(); } catch(e) {};
	}

	w.onmessage = onMsg;
	w.onerror = onErr;
}

html
{
	//! <input type=file>
}
test("FileReaderSync setup")
	language C++;
	require _FILE_UPLOAD_SUPPORT_;
	file uni testfile_uni "input/abc.txt";
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);
	FormValue* form_value = file_input->GetFormValue();
	verify(form_value);
	verify_success(form_value->SetValueFromText(file_input, testfile_uni));
}

test("FileReaderSync in Worker #3")
	require success "FileReaderSync setup";
	file testfile "input/workertest3.js";
	async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);

	var stuff = #string "input/workertest3.js";
	var url = 'data:text/javascript,' + stuff;
	var w = new Worker(url);
	function onMsg(e)
	{
		var expected = "defdef";
		try {
			if (e.data != expected)
				ST_failed("Worker failed to read Blob, expected '" + expected + "', got: " + e.data, "filereadersync.ot", 1);
			else
				ST_passed();
		} catch(e) {
			ST_failed("Unexpected exception: " + e, "filereadersync.ot", 1);
		} finally {
			w.terminate();
		}
	}

	function onErr(e)
	{
		ST_failed("Error raised: " + e.message, "filereadersync.ot", 1);
		try { w.terminate(); } catch(e) {};
	}

	w.onmessage = onMsg;
	w.onerror = onErr;
	w.postMessage(file.slice(3,6));
}

test("Absence in window")
{
	// FileReaderSync is in workers not in a normal document.
	verify(!("FileReaderSync" in window));
}
