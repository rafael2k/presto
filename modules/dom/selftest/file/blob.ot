// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-

group "DOM.File.Blob";
require init;

include "modules/forms/formvalue.h";
include "modules/logdoc/htm_elm.h";

language ecmascript;

html "";

test("Constructor")
{
	verify("Blob" in window);
	verify(Blob.prototype);
	verify(Blob.prototype.constructor);
	verify(Blob.prototype.constructor === Blob);
	verify(Blob.prototype.slice);
	verify(typeof Blob.prototype.slice == "function");
}

test("Constructor #2")
{
	verify("Blob" in window);
	var b = new Blob();
	verify(b);
}

test("Constructor #3")
{
	verify("Blob" in window);
	var b = new Blob(["foo"]);
	verify(b);
	verify(b.size == 3);
	verify(b.type === "");
}

test("Constructor #4")
{
	verify("Blob" in window);
	var buf = new ArrayBuffer(20);
	var b = new Blob([buf]);
	verify(b);
	verify(b.size == 20);
	verify(b.type === "");
}

test("Constructor #5")
{
	verify("Blob" in window);
	var b = new Blob(["a", "b", "c"]);
	verify(b);
	verify(b.size == 3);
	verify(b.type === "");
}

test("Constructor #6")
{
	verify("Blob" in window);
	var buf = new ArrayBuffer(20);
	var b = new Blob(["a", buf, "b", "c", buf]);
	verify(b);
	verify(b.size == 43);
	b = new Blob([b, buf]);
	verify(b);
	verify(b.size == 63);
	verify(b.type === "");
}

test("Constructor #7")
{
	verify("Blob" in window);
	var b = new Blob([]);
	verify(b);
	verify(b.size == 0);
	verify(b.type === "");
}

test("Constructor #8")
{
	verify("Blob" in window);
	var b = new Blob([2]);
	verify(b.size == 1);
}

test("Constructor #9")
{
	var expected_size = 4;
	verify("Blob" in window);
	var b = new Blob(["a\r\nb"]);
	verify(b);
	verify(b.size == 4);
	verify(b.type === "");
}

test("Constructor #10")
{
	var expected_size = 3;
	verify("Blob" in window);
	var b = new Blob(["a\nb"]);
	verify(b);
	verify(b.size == expected_size);
	verify(b.type === "");
}

test("Constructor #11")
{
	verify("Blob" in window);
	var b = new Blob(["\u00e5"]);
	verify(b);
	verify(b.size == 2);
	verify(b.type === "");
}

test("Constructor #12")
{
	verify("Blob" in window);
	var b = new Blob(["a\u0000", "b", "\u0000def"]);
	verify(b);
	verify(b.size == 7);
	verify(b.type === "");
}

test("Constructor #13")
{
	verify("Blob" in window);
	try {
		var b = new Blob(["a",, "b", "c"]);
		verify(!"Sparse input array did not throw");
	} catch (e) {
		verify(e instanceof TypeError);
	}
}

test("window.createObjectURL()")
	require DOM_SUPPORT_BLOB_URLS; // Enable when we support blob URLs
{
	verify("createObjectURL" in window);
	verify(typeof window.createObjectURL == "function");

	// Have no blob to test it with.
	var res = window.createObjectURL();
	verify(res === null);

	var res = window.createObjectURL(window);
	verify(res === null);

	var res = window.createObjectURL(new Date);
	verify(res === null);

	var res = window.createObjectURL(new Array);
	verify(res === null);

	var res = window.createObjectURL("blbo");
	verify(res === null);

	var res = window.createObjectURL(2321.12);
	verify(res === null);
}


test("window.revokeObjectURL()")
	require DOM_SUPPORT_BLOB_URLS; // Enable when we support blob URLs
{
	verify("revokeObjectURL" in window);
	verify(typeof window.revokeObjectURL == "function");

	// Have no blob to test it with.
	var res = window.revokeObjectURL();
	verify(res === undefined);

	var res = window.revokeObjectURL(window);
	verify(res === undefined);

	var res = window.revokeObjectURL(new Date);
	verify(res === undefined);

	var res = window.revokeObjectURL(new Array);
	verify(res === undefined);

	var res = window.revokeObjectURL("blob:1213131");
	verify(res === undefined);
}

html
{
	//! <input type=file>
}
test("Setup")
	language C++;
	require _FILE_UPLOAD_SUPPORT_;
	file uni testfile_uni "input/abc.txt";
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);
	FormValue* form_value = file_input->GetFormValue();
	verify(form_value);
	form_value->SetValueFromText(file_input, testfile_uni);
}

test("Blob.slice#1")
	require success "Setup";
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);
	verify(file.size == 28); // "abc..xyz\r\n"
	verify(file.type == "text/plain");

	var sliced1 = file.slice();
	verify(sliced1);
	verify(sliced1.size == 28); // "abc..xyz\r\n"
	verify(sliced1.type == "text/plain");

	var sliced2 = file.slice(1);
	verify(sliced2);
	verify(sliced2.size == 27); // "bc..xyz\r\n"
	verify(sliced2.type == "text/plain");

	var sliced3 = file.slice(0, 3);
	verify(sliced3);
	verify(sliced3.size == 3);
	verify(sliced3.type == "text/plain");

	var sliced4 = sliced3.slice(2, 4);
	verify(sliced4);
	verify(sliced4.size == 1);
	verify(sliced4.type == "text/plain");

	var sliced5 = file.slice(100, 111);
	verify(sliced5);
	verify(sliced5.size == 0);
	verify(sliced5.type == "text/plain");

	var sliced6 = file.slice(0, 111);
	verify(sliced6);
	verify(sliced6.size == 28); // "abc..xyz\r\n"
	verify(sliced6.type == "text/plain");

	var sliced7 = file.slice(0, -2);
	verify(sliced7);
	verify(sliced7.size == 26);  // "abc..xyz"
	verify(sliced7.type == "text/plain");

	var sliced8 = file.slice(2, -28);
	verify(sliced8);
	verify(sliced8.size == 0);
	verify(sliced8.type == "text/plain");

	var sliced9 = file.slice(0, -1, "text/html");
	verify(sliced9);
	verify(sliced9.size == 27); // "abc..xyz\r"
	verify(sliced9.type == "text/html");

	var sliced10 = sliced9.slice(0, 2);
	verify(sliced10);
	verify(sliced10.size == 2); // "ab"
	verify(sliced10.type == "text/html");

	var sliced11 = file.slice(-2, -1, "text/html");
	verify(sliced11);
	verify(sliced11.size == 1); // "\r"
	verify(sliced11.type == "text/html");
}

test("Setup#1")
	language C++;
	require _FILE_UPLOAD_SUPPORT_;
	file uni testfile_uni "input/abc.txt";
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);
	FormValue* form_value = file_input->GetFormValue();
	verify(form_value);
	form_value->SetValueFromText(file_input, testfile_uni);
}

test("Blob clone #1")
	require DOM_WEBWORKERS_SUPPORT;
	async;
{
	function checkBlob(blob)
	{
		verify(blob.size == 3); // "hey"
	}
	var b = new Blob(["hey"]);
	checkBlob(b);

	/* An echo worker; verify File cloning. */
	var w = new Worker('data:application/x-javascript,onmessage=function(e){postMessage(e.data);}');
	function on_message(e)
	{
		if (e.data instanceof Object && "the_blob" in e.data && e.data.the_blob instanceof Blob)
		{
			checkBlob(e.data.the_blob);
			ST_passed();
		}
		else
			ST_failed("e.data was '" + e.data + "', expected Blob", "blob.ot", 1);
		try { w.terminate(); } catch(e){};
	}

	function on_error(e)
	{
		ST_failed("Exception raised: " + e.message, "blob.ot", 1);
		try { w.terminate(); } catch(e){};
	}
	w.onmessage = on_message;
	w.onerror = on_error;
	w.postMessage({the_blob: b});
}
