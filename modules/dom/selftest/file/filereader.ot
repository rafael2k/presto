// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-

group "DOM.File.FileReader";
require init;

include "modules/forms/formvalue.h";
include "modules/logdoc/htm_elm.h";

language ecmascript;

html "";

test("Constructor")
{
	verify("FileReader" in window);
	verify(FileReader.prototype);
	verify(FileReader.prototype.constructor);
	verify(FileReader.prototype.constructor === FileReader);
}

test("Constants")
{
	verify("FileReader" in window);

	verify("EMPTY" in FileReader);
	verify("LOADING" in FileReader);
	verify("DONE" in FileReader);

	verify(FileReader.EMPTY === 0);
	verify(FileReader.LOADING === 1);
	verify(FileReader.DONE === 2);

	FileReader.EMPTY === 4;
	verify(FileReader.EMPTY === 0);

	FileReader.LOADING === 4;
	verify(FileReader.LOADING === 1);

	FileReader.DONE === 4;
	verify(FileReader.DONE === 2);
}

test("Prototype")
{
	verify("FileReader" in window);
	verify(FileReader.prototype);
	var p = FileReader.prototype;
	verify("addEventListener" in p);
	verify("removeEventListener" in p);
	verify("readAsArrayBuffer" in p);
	verify("readAsBinaryString" in p);
	verify("readAsText" in p);
	verify("readAsDataURL" in p);
	verify("abort" in p);
	verify("dispatchEvent" in p);
}

test("Instance")
{
	verify("FileReader" in window);
	var reader = new FileReader;
	verify(reader);

	verify("addEventListener" in reader);
	verify("removeEventListener" in reader);
	verify("readAsArrayBuffer" in reader);
	verify("readAsBinaryString" in reader);
	verify("readAsText" in reader);
	verify("readAsDataURL" in reader);
	verify("abort" in reader);
	verify("dispatchEvent" in reader);

	verify("readyState" in reader);
	verify("result" in reader);
	verify("error" in reader);

	verify("onloadstart" in reader);
	verify("onprogress" in reader);
	verify("onload" in reader);
	verify("onabort" in reader);
	verify("onerror" in reader);
	verify("onloadend" in reader);
}

test("Initial state")
{
	verify("FileReader" in window);
	var reader = new FileReader;
	verify(reader);

	verify(reader.readyState === 0);
	verify(reader.result === null);
	verify(reader.error === null);

	verify(reader.onloadstart === null);
	verify(reader.onprogress === null);
	verify(reader.onload === null);
	verify(reader.onabort === null);
	verify(reader.onerror === null);
	verify(reader.onloadend === null);
}

html
{
	//! <input type=file>
}
test("Setup")
	language C++;
	require _FILE_UPLOAD_SUPPORT_;
	file uni testfile_uni "input/abc.txt";
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);
	FormValue* form_value = file_input->GetFormValue();
	verify(form_value);
	verify_success(form_value->SetValueFromText(file_input, testfile_uni));
}

test("Reading text")
require success "Setup";
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "abcdefghijklmnopqrstuvwxyz\r\n");
				ST_passed();
			}
		}, false);

	reader.readAsText(file);
}

test("Reading text #2")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "hey");
				ST_passed();
			}
		}, false);

	var b = new Blob(["hey"]);
	verify(b);
	reader.readAsText(b);
}

test("Reading text #3")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "hey");
				ST_passed();
			}
		}, false);

	verify("ArrayBuffer" in window);
	var str = "hey";
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob([buf]);
	verify(b);
	reader.readAsText(b);
}

test("Reading text #4")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "hey");
				ST_passed();
			}
		}, false);

	var b = new Blob(["he", "y"]);
	verify(b);
	reader.readAsText(b);
}

test("Reading text #5")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "hey world");
				ST_passed();
			}
		}, false);

	verify("ArrayBuffer" in window);
	var str = " world";
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob(["he", "y", buf]);
	verify(b);
	reader.readAsText(b);
}

test("Reading text #6")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "hey world");
				ST_passed();
			}
		}, false);

	verify("ArrayBuffer" in window);
	var str = "y ";
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob(["he", "", buf, "world", new ArrayBuffer(0)]);
	verify(b);
	reader.readAsText(b);
}

test("Reading text #7")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "object");
				verify(reader.result.length == 2);
				verify(reader.result[0] == 0xc3 && reader.result[1] == 0xa5);
				ST_passed();
			}
		}, false);

	var b = new Blob(["\u00e5"]);
	verify(b);
	reader.readAsArrayBuffer(b);
}

test("Reading text #8")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "object");
				verify(reader.result.length == 7);
				verify(String.fromCharCode(reader.result[0]) == 'a');
				verify(reader.result[1] == 0x0);
				verify(String.fromCharCode(reader.result[2]) == 'b');
				verify(reader.result[3] == 0x0);
				verify(String.fromCharCode(reader.result[4]) == 'd');
				verify(String.fromCharCode(reader.result[5]) == 'e');
				verify(String.fromCharCode(reader.result[6]) == 'f');
				ST_passed();
			}
		}, false);

	var b = new Blob(["a\u0000", "b", "\u0000def"]);
	verify(b);
	reader.readAsArrayBuffer(b);
}

test("Reading text #9")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "a\u0000bc\u0000def");
				ST_passed();
			}
		}, false);

	var b = new Blob(["a\u0000", "bc", "\u0000def"]);
	verify(b);
	reader.readAsText(b);
}

test("Reading text #10")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "");
				ST_passed();
			}
		}, false);

	var b = new Blob();
	verify(b);
	reader.readAsText(b);
}

test("Reading text #11")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "");
				ST_passed();
			}
		}, false);

	var b = new Blob([new ArrayBuffer(2)]);
	verify(b);
	reader.readAsText(b.slice(0,0));
}

test("Reading sliced text")
require success "Setup";
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);
	// abcdefghij klm no..
	file = file.slice(10, 13);
	verify(file instanceof Blob);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "klm");
				ST_passed();
			}
		}, false);

	reader.readAsText(file);
}

test("Reading sliced text #2")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var b = new Blob(["hey now"]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(0, 3);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "hey");
				ST_passed();
			}
		}, false);

	reader.readAsText(b);
}

test("Reading sliced text #3")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var str = "hey now";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob([buf]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(0, 3);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "hey");
				ST_passed();
			}
		}, false);

	reader.readAsText(b);
}

test("Reading sliced text #4")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var b = new Blob(["hey", " now"]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(0, 3);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "hey");
				ST_passed();
			}
		}, false);

	reader.readAsText(b);
}

test("Reading sliced text #5")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var b = new Blob(["hey", " now"]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(2, 7);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "y now");
				ST_passed();
			}
		}, false);

	reader.readAsText(b);
}

test("Reading sliced text #6")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var str = "y";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob(["he", buf, " now"]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(1, 7);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "ey now");
				ST_passed();
			}
		}, false);

	reader.readAsText(b);
}

test("Reading sliced text #7")
require success "Setup";
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);
	file = file.slice(0, 0);
	verify(file instanceof Blob);
	verify(!(file instanceof File));

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "");
				ST_passed();
			}
		}, false);

	reader.readAsText(file);
}

test("Reading sliced text #8")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var b = new Blob(["hey now"]);
	verify(b);
	b = new Blob([b.slice(2, 10), "..."]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(2, 5);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "now");
				ST_passed();
			}
		}, false);

	reader.readAsText(b);
}

test("Reading sliced text #9")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var b = new Blob(["hey", " ", "now"]);
	verify(b);
	b = new Blob([b, "..."]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(3, 50);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === " now...");
				ST_passed();
			}
		}, false);

	reader.readAsText(b);
}

test("Reading sliced text #10")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var b = new Blob(["hey", " now"]);
	verify(b);
	b = new Blob([b.slice(2, 10), "..."]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(3, 6);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "ow.");
				ST_passed();
			}
		}, false);

	reader.readAsText(b);
}

test("Reading sliced text #11")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var b = new Blob(["hey", " now"]);
	verify(b);
	b = new Blob([b.slice(2, 10), "..."]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(3, 3);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "");
				ST_passed();
			}
		}, false);

	reader.readAsText(b);
}

test("Reading sliced text #12")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var b = new Blob(["hey", " now"]);
	verify(b);
	b = new Blob([b.slice(2,2), b.slice(1,1), b.slice(2, 10), "..."]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(3, 30);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "ow...");
				ST_passed();
			}
		}, false);

	reader.readAsText(b);
}

test("Reading data url")
require success "Setup";
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "data:text/plain,abcdefghijklmnopqrstuvwxyz\r\n");
				ST_passed();
			}
		}, false);

	reader.readAsDataURL(file);
}

test("Reading data url #2")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var b = new Blob(["hey"], {type: "text/plain"});
	verify(b);
	verify(b instanceof Blob);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "data:text/plain,hey");
				ST_passed();
			}
		}, false);

	reader.readAsDataURL(b);
}

test("Reading data url #3")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var str = "hey";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob([buf], {type: "text/plain"});
	verify(b);
	verify(b instanceof Blob);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "data:text/plain,hey");
				ST_passed();
			}
		}, false);

	reader.readAsDataURL(b);
}

test("Reading data url #4")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var str = "hey";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob([buf, buf], {type: "text/plain"});
	verify(b);
	verify(b instanceof Blob);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "data:text/plain,heyhey");
				ST_passed();
			}
		}, false);

	reader.readAsDataURL(b);
}

test("Reading sliced data url")
require success "Setup";
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);
	// abcdefghi jkl mn op..
	file = file.slice(12, 14, "text/html");

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "data:text/html,mn");
				ST_passed();
			}
		}, false);

	reader.readAsDataURL(file);
}

test("Reading sliced data url #2")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var b = new Blob(["hey now"]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(0, 3, "text/html");

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "data:text/html,hey");
				ST_passed();
			}
		}, false);

	reader.readAsDataURL(b);
}

test("Reading sliced data url #3")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var str = "hey now";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob([buf]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(0, 3, "text/html");

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "data:text/html,hey");
				ST_passed();
			}
		}, false);

	reader.readAsDataURL(b);
}

test("Reading sliced data url #4")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var str = "now";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob(["hey", buf]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(1, 4, "text/html");

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "data:text/html,eyn");
				ST_passed();
			}
		}, false);

	reader.readAsDataURL(b);
}

test("Reading binary string #1")
require success "Setup";
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				var str = reader.result;
				verify(str === "abcdefghijklmnopqrstuvwxyz\r\n");
				ST_passed();
			}
		}, false);

	reader.readAsBinaryString(file);
}

test("Reading binary string #2")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var b = new Blob(["hey\r\n"]);
	verify(b);
	verify(b instanceof Blob);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				var str = reader.result;
				verify(str === "hey\r\n");
				ST_passed();
			}
		}, false);

	reader.readAsBinaryString(b);
}

test("Reading binary string #3")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var str = "hey\r\n";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob([buf]);
	verify(b);
	verify(b instanceof Blob);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				var str = reader.result;
				verify(str === "hey\r\n");
				ST_passed();
			}
		}, false);

	reader.readAsBinaryString(b);
}

test("Reading binary string #4")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var str = "hey\r\n";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob([buf, "now\r\n"]);
	verify(b);
	verify(b instanceof Blob);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				var str = reader.result;
				verify(str === "hey\r\nnow\r\n");
				ST_passed();
			}
		}, false);

	reader.readAsBinaryString(b);
}

test("Reading sliced binary string")
require success "Setup";
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);
	file = file.slice(1, 3, "text/html");

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "bc");
				ST_passed();
			}
		}, false);

	reader.readAsBinaryString(file);
}

test("Reading sliced binary string #2")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var b = new Blob(["hey now"]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(0, 3, "text/html");

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "hey");
				ST_passed();
			}
		}, false);

	reader.readAsBinaryString(b);
}

test("Reading sliced binary string #3")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var str = "hey now";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob([buf]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(0, 3, "text/html");

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "hey");
				ST_passed();
			}
		}, false);

	reader.readAsBinaryString(b);
}

test("Reading sliced binary string #4")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var str = "now";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob(["hey", buf]);
	verify(b);
	verify(b instanceof Blob);
	b = b.slice(1, 4, "text/html");

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "eyn");
				ST_passed();
			}
		}, false);

	reader.readAsBinaryString(b);
}

test("Reading ArrayBuffer #1")
require success "Setup";
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(reader.result.toString() == "[object ArrayBuffer]");
				var buffer = reader.result;
				var str = "";
				for (var i = 0; i < buffer.length; i++)
					str += String.fromCharCode(buffer[i]);
				verify(str === "abcdefghijklmnopqrstuvwxyz\r\n");
				ST_passed();
			}
		}, false);

	reader.readAsArrayBuffer(file);
}

test("Reading ArrayBuffer #2")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var b = new Blob(["hey\r\n"]);
	verify(b);
	verify(b instanceof Blob);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(reader.result.toString() == "[object ArrayBuffer]");
				var buffer = reader.result;
				var str = "";
				for (var i = 0; i < buffer.length; i++)
					str += String.fromCharCode(buffer[i]);
				verify(str === "hey\r\n");
				ST_passed();
			}
		}, false);

	reader.readAsArrayBuffer(b);
}

test("Reading ArrayBuffer #3")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var str = "hey\r\n";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob([buf]);
	verify(b);
	verify(b instanceof Blob);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(reader.result.toString() == "[object ArrayBuffer]");
				var buffer = reader.result;
				var str = "";
				for (var i = 0; i < buffer.length; i++)
					str += String.fromCharCode(buffer[i]);
				verify(str === "hey\r\n");
				ST_passed();
			}
		}, false);

	reader.readAsArrayBuffer(b);
}

test("Reading ArrayBuffer #4")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var str = "hey\r\n";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob([buf, "now\r\n"]);
	verify(b);
	verify(b instanceof Blob);

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(reader.result.toString() == "[object ArrayBuffer]");
				var buffer = reader.result;
				var str = "";
				for (var i = 0; i < buffer.length; i++)
					str += String.fromCharCode(buffer[i]);
				verify(str === "hey\r\nnow\r\n");
				ST_passed();
			}
		}, false);

	reader.readAsArrayBuffer(b);
}

test("Reading sliced ArrayBuffer #1")
require success "Setup";
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);
	// abcde fg hi..
	file = file.slice(5, 7, "text/html");

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(reader.result.toString() == "[object ArrayBuffer]");
				var buffer = reader.result;
				var str = "";
				for (var i = 0; i < buffer.length; i++)
					str += String.fromCharCode(buffer[i]);
				verify(str === "fg");
				ST_passed();
			}
		}, false);

	reader.readAsArrayBuffer(file);
}

test("Reading sliced ArrayBuffer #2")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var b = new Blob(["abc\r\n"]);
	verify(b);
	verify(b instanceof Blob);

	b = b.slice(1, 3, "text/html");

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(reader.result.toString() == "[object ArrayBuffer]");
				var buffer = reader.result;
				var str = "";
				for (var i = 0; i < buffer.length; i++)
					str += String.fromCharCode(buffer[i]);
				verify(str === "bc");
				ST_passed();
			}
		}, false);

	reader.readAsArrayBuffer(b);
}

test("Reading sliced ArrayBuffer #3")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var str = "abc\r\n";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob([buf]);
	verify(b);
	verify(b instanceof Blob);

	b = b.slice(1, 3, "text/html");

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(reader.result.toString() == "[object ArrayBuffer]");
				var buffer = reader.result;
				var str = "";
				for (var i = 0; i < buffer.length; i++)
					str += String.fromCharCode(buffer[i]);
				verify(str === "bc");
				ST_passed();
			}
		}, false);

	reader.readAsArrayBuffer(b);
}

test("Reading sliced ArrayBuffer #4")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var str = "abc\r\n";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob(["no", buf, "yes"]);
	verify(b);
	verify(b instanceof Blob);

	b = b.slice(3, 5, "text/html");

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(reader.result.toString() == "[object ArrayBuffer]");
				var buffer = reader.result;
				var str = "";
				for (var i = 0; i < buffer.length; i++)
					str += String.fromCharCode(buffer[i]);
				verify(str === "bc");
				ST_passed();
			}
		}, false);

	reader.readAsArrayBuffer(b);
}

test("Reading sliced ArrayBuffer #5")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var str = "abc";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob(["no", buf, "yes"]);
	verify(b);
	verify(b instanceof Blob);

	b = b.slice(1, 6, "text/html");

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(reader.result.toString() == "[object ArrayBuffer]");
				var buffer = reader.result;
				var str = "";
				for (var i = 0; i < buffer.length; i++)
					str += String.fromCharCode(buffer[i]);
				verify(str === "oabcy");
				ST_passed();
			}
		}, false);

	reader.readAsArrayBuffer(b);
}

test("Reading sliced ArrayBuffer #6")
require PROGRESS_EVENTS_SUPPORT;
async;
{
	/* Check that a slice() beyond the end a Blob sequence
	   is well behaved and returns an empty Blob. */
	var str = "abc";
	verify("ArrayBuffer" in window);
	var buf = new ArrayBuffer(str.length);
	verify(buf);
	for (var i = 0; i < str.length; i++)
		buf[i] = str.charCodeAt(i);

	var b = new Blob(["no", buf, "yes"]);
	verify(b);
	verify(b instanceof Blob);

	b = b.slice(200, 600, "text/html");

	window.reader = new FileReader;
	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(reader.result.toString() == "[object ArrayBuffer]");
				var buffer = reader.result;
				verify(buffer.length === 0);
				ST_passed();
			}
		}, false);

	reader.readAsArrayBuffer(b);
}

html
{
	//! <input type=file>
}
test("Setup2")
	language C++;
	require _FILE_UPLOAD_SUPPORT_;
	file uni testfile_uni "input/abc.txt";
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);
	FormValue* form_value = file_input->GetFormValue();
	verify(form_value);
	OpString file_name;
	verify_success(file_name.Set(testfile_uni));
	verify_success(file_name.Append("nonexisting"));
	verify_success(form_value->SetValueFromText(file_input, file_name.CStr()));
}

test("Reading non-existing file")
require success "Setup2";
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);

	window.reader = new FileReader;
	verify(reader);
	verify(reader.readyState == FileReader.EMPTY);
	reader.addEventListener("error", function() { reader.firederror = true }, false);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				if (reader.firederror)
					ST_passed();
				else
					ST_failed("Didn't fire error", "filereader.ot", "");
			else
				ST_failed("Didn't error", "filereader.ot", "");
		}, false);

	reader.readAsText(file);
}

html
{
	//! <input type=file>
}
test("Setup3")
	language C++;
	require _FILE_UPLOAD_SUPPORT_;
	file uni testfile_uni "input/abc.txt";
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);
	FormValue* form_value = file_input->GetFormValue();
	verify(form_value);
	verify_success(form_value->SetValueFromText(file_input, testfile_uni));
}

test("Reading - event order")
require success "Setup3";
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);

	window.reader = new FileReader;
	verify(reader);
	reader.onloadHasRunText = false;
	reader.onloadStartHasRunText = false;
	/* The spec uses "fire a progress event" during the various steps of
	   the readAs*() algorithm. Check here that the ordering comes out
	   right in the end. */
	reader.addEventListener("load", function() { reader.onloadHasRunText = true }, false);
	reader.addEventListener("loadstart", function() { reader.onloadStartHasRunText = true }, false);
	reader.addEventListener("loadend", function() {
		verify(reader.onloadStartHasRunText);
		verify(reader.onloadHasRunText);
		if (reader.error)
			ST_failed("reader.error = "+reader.error, "filereader.ot", "");
		else
		{
			verify(typeof(reader.result) == "string");
			verify(reader.result === "abcdefghijklmnopqrstuvwxyz\r\n");
			ST_passed();
		}
	}, false);

	reader.readAsText(file);
	verify(reader.readyState, FileReader.LOADING);
}

test("Reading - reusing reader")
require success "Reading - event order";
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);

	verify(reader);
	reader.addEventListener("loadend", function() {
			if (reader.error)
				ST_failed("reader.error = "+reader.error, "filereader.ot", "");
			else
			{
				verify(typeof(reader.result) == "string");
				verify(reader.result === "abcdefghijklmnopqrstuvwxyz\r\n");
				ST_passed();
			}
		}, false);

	reader.readAsText(file);
}

html
{
	//! <input type=file>
}
test("Setup4")
	language C++;
	require _FILE_UPLOAD_SUPPORT_;
	file uni testfile_uni "input/empty.txt";
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);
	FormValue* form_value = file_input->GetFormValue();
	verify(form_value);
	verify_success(form_value->SetValueFromText(file_input, testfile_uni));
}

test("Reading - empty file")
require success "Setup4";
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);

	window.reader = new FileReader;
	verify(reader);
	reader.onloadHasRunText = false;
	reader.onloadStartHasRunText = false;
	/* The spec uses "fire a progress event" during the various steps of
	   the readAs*() algorithm. Check here that the ordering comes out
	   right in the end. */
	reader.addEventListener("load", function() { reader.onloadHasRunText = true }, false);
	reader.addEventListener("loadstart", function() { reader.onloadStartHasRunText = true }, false);
	reader.addEventListener("loadend", function() {
		verify(reader.onloadStartHasRunText);
		verify(reader.onloadHasRunText);
		if (reader.error)
			ST_failed("reader.error = "+reader.error, "filereader.ot", "");
		else
		{
			verify(typeof(reader.result) == "string");
			verify(reader.result === "");
			ST_passed();
		}
	}, false);

	reader.readAsText(file);
	verify(reader.readyState, FileReader.LOADING);
}



html
{
	//! <input type=file>
}
test("Setup5")
	language C++;
	require _FILE_UPLOAD_SUPPORT_;
	file uni testfile_uni "input/abc.txt";
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);
	FormValue* form_value = file_input->GetFormValue();
	verify(form_value);
	verify_success(form_value->SetValueFromText(file_input, testfile_uni));
}

test("abort() #1")
require success "Setup5";
require PROGRESS_EVENTS_SUPPORT;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);

	window.reader = new FileReader;
	verify(reader);
	reader.abortHasRun = false;
	reader.loadEndHasRun = false;

	reader.onabort = function (event) { reader.abortHasRun = true;	}
	reader.onloadend = function (event) { reader.loadEndHasRun = true; }

	reader.abort();
	verify(!reader.abortHasRun); // "abort() is a no-op unless loading"
	verify(!reader.loadend);
}

test("abort() #2")
require success "Setup5";
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);

	window.reader = new FileReader;
	verify(reader);
	reader.abortHasRun = false;
	reader.loadEndHasRun = false;

	reader.onabort = function (event) {
		if (reader.abortHasRun)
			ST_failed("abort should only fire once", "filereader.ot", "");
		if (reader.loadEndHasRun)
			ST_failed("loadend shouldn't have fired yet", "filereader.ot", "");
		reader.abortHasRun = true;
		if (reader.readyState != FileReader.DONE)
			ST_failed("should be DONE while firing onabort", "filereader.ot", "");
		if (reader.error.code != FileError.ABORT_ERR)
			ST_failed("error code set to ABORT for aborted reads", "filereader.ot", "");
		if (reader.result !== null)
			ST_failed("file data should be null on aborted reads", "filereader.ot", "537");
	}
	reader.addEventListener("load", function() { ST_failed("load shouldn't fire for aborted reads", "filereader.ot", "539"); }, false);
	//	reader.addEventListener("error", function() { ST_failed("error shouldn't fire for aborted reads", "filereader.ot", ""); }, false);
	reader.addEventListener("progress", function() { ST_failed("progress shouldn't fire for aborted reads", "filereader.ot", ""); }, false);
	reader.onloadend = function (event) {
		if (!reader.abortHasRun)
			ST_failed("abort should fire before loadend", "filereader.ot", "");
		else if (reader.loadEndHasRun)
			ST_failed("loadend should only fire once", "filereader.ot", "");
		reader.loadEndHasRun = true;
		if (reader.readyState != FileReader.DONE)
			ST_failed("should be DONE while firing onabort", "filereader.ot", "");
		else if (reader.error.code != FileError.ABORT_ERR)
			ST_failed("error code set to ABORT for aborted reads", "filereader.ot", "");
		else if (reader.result !== null)
			ST_failed("file data should be null on aborted reads", "filereader.ot", "553");
		else
			ST_passed();
	}

	reader.abort();
	verify(!reader.abortHasRun); // "abort() is a no-op unless loading"
	reader.readAsText(file);
	reader.abort();
	verify(reader.abortHasRun); // "abort should fire sync"
	verify(reader.loadEndHasRun); // "loadend should fire sync"
}


test("implicit abort from readAs call")
require success "Setup5";
require PROGRESS_EVENTS_SUPPORT;
async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);

	window.reader = new FileReader;
	verify(reader);
	reader.abortHasRun = false;
	reader.loadEndHasRun = false;

	reader.onabort = function (event) {
		if (reader.abortHasRun)
			ST_failed("abort should only fire once", "filereader.ot", "");
		reader.abortHasRun = true;
		if (reader.readyState != FileReader.DONE)
			ST_failed("should be DONE while firing onabort", "filereader.ot", "");
		if (reader.error.code != FileError.ABORT_ERR)
			ST_failed("error code set to ABORT for aborted reads", "filereader.ot", "");
		if (reader.result !== null)
			ST_failed("file data should be null on aborted reads", "filereader.ot", "593");
	}
	reader.loadHasRun = false;
	reader.loadStartCount = 0;
	reader.onloadstart = function (event) { reader.loadStartCount++; };
	reader.abort();
	verify(!reader.abortHasRun); // "abort() is a no-op unless loading"
	reader.readAsText(file);

	/* Reliably triggering an implicit onabort due to readyState
	   being LOADING is timing sensitive and tricky. So, only go
	   ahead and attempt it if the state isn't DONE.

	   A larger file would avoid running into timing issues. */
	if (reader.readyState != FileReader.DONE)
	{
		reader.addEventListener("load", function() {
			if (reader.loadStartCount < 2)
				ST_failed("load shouldn't fire for aborted reads", "filereader.ot", "595");
			reader.loadHasRun = true;
		}, false);
		reader.onloadend = function (event) {
			if (!reader.abortHasRun)
				ST_failed("abort should fire before loadend", "filereader.ot", "");
			else if (reader.loadEndHasRun)
			{
				if (reader.readyState != FileReader.DONE)
					ST_failed("should be DONE while firing onloadend", "filereader.ot", "");
				else if (reader.error)
					ST_failed("error code set for a normal read", "filereader.ot", "605");
				else
					ST_passed();
			}
			else
			{
				reader.loadEndHasRun = true;
				if (reader.readyState != FileReader.DONE)
					ST_failed("should be DONE while firing onabort", "filereader.ot", "");
				else if (reader.error.code != FileError.ABORT_ERR)
					ST_failed("error code set to ABORT for aborted reads", "filereader.ot", "615");
				else if (reader.result !== null)
					ST_failed("file data should be null on aborted reads", "filereader.ot", "617");
			}
		}
		reader.readAsText(file);
		verify(reader.abortHasRun); // "abort should fire sync"
		verify(reader.loadEndHasRun); // "loadend should fire sync"
	}
	else
		ST_passed();
}
