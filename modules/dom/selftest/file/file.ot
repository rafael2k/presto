// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-

group "DOM.File.File";
require init;

include "modules/forms/formvalue.h";
include "modules/logdoc/htm_elm.h";

language ecmascript;

html "";

test("Constructor")
{
	verify("File" in window);
	verify(File.prototype);
	verify(File.prototype.constructor);
	verify(File.prototype.constructor === File);
}

html
{
	//! <input type=file>
}
test("Setup")
	language C++;
    require _FILE_UPLOAD_SUPPORT_;
    file uni    testfile_uni    "input/abc.txt";
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);
	FormValue* form_value = file_input->GetFormValue();
	verify(form_value);
	form_value->SetValueFromText(file_input, testfile_uni);
}

test("File.properties")
	require success "Setup";
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);

	verify("name" in file);
	verify("type" in file);
	verify("size" in file);
	verify("lastModifiedDate" in file);

	verify(typeof(file.name) == "string");
	verify(typeof(file.type) == "string");
	verify(typeof(file.size) == "number");
	verify(typeof(file.lastModifiedDate) == "object");

	verify(file.name === "abc.txt");
	verify(file.size == 28); // "abc..xyz\r\n"
	verify(file.type == "text/plain");
}

html
{
	//! <input type=file>
}
test("Setup #1")
	language C++;
    require _FILE_UPLOAD_SUPPORT_;
    file uni    testfile_uni    "input/abc.html";
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);
	FormValue* form_value = file_input->GetFormValue();
	verify(form_value);
	form_value->SetValueFromText(file_input, testfile_uni);
}

test("File.properties #1")
	require success "Setup #1";
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);

	verify("name" in file);
	verify("type" in file);
	verify("size" in file);
	verify("lastModifiedDate" in file);

	verify(typeof(file.name) == "string");
	verify(typeof(file.type) == "string");
	verify(typeof(file.size) == "number");
	verify(typeof(file.lastModifiedDate) == "object");

	verify(file.name === "abc.html");
	verify(file.size == 15); // "<html></html>\r\n"
	verify(file.type == "text/html");
}

html
{
	//! <input type=file>
}
test("Setup clone #1")
	language C++;
	require _FILE_UPLOAD_SUPPORT_;
	file uni    testfile_uni    "input/abc.txt";
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);
	FormValue* form_value = file_input->GetFormValue();
	verify(form_value);
	form_value->SetValueFromText(file_input, testfile_uni);
}

test("File clone #1")
	require success "Setup clone #1";
	require DOM_WEBWORKERS_SUPPORT;
	async;
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);
	verify(input.files);
	verify(input.files.length == 1);

	var file = input.files[0];
	verify(file);

	function checkFile(file)
	{
		verify(file.name === "abc.txt");
		verify(file.size == 28); // "abc..xyz\r\n"
		verify(file.type == "text/plain");
	}
	checkFile(file);

	/* An echo worker; verify File cloning. */
	var w = new Worker('data:application/x-javascript,onmessage=function(e){postMessage(e.data);}');
	function on_message(e)
	{
		if (e.data instanceof Object && "the_file" in e.data && e.data.the_file instanceof File)
		{
			checkFile(e.data.the_file);
			ST_passed();
		}
		else
			ST_failed("e.data was '" + e.data + "', expected File", "file.ot", 1);
		try { w.terminate(); } catch(e){};
	}
	function on_error(e)
	{
		ST_failed("Exception raised: " + e.message, "file.ot", 1);
		try { w.terminate(); } catch(e){};
	}
	w.onmessage = on_message;
	w.onerror = on_error;
	w.postMessage({the_file: file});
}
