/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "DOM.DOM_Utils";

include "modules/dom/domutils.h";
include "modules/dom/src/domenvironmentimpl.h";

language c++;

table origin_table (const uni_char*, const uni_char*)
{
	{UNI_L("http://foo.com"), UNI_L("http://foo.com")},
	{UNI_L("http://foo.com/"), UNI_L("http://foo.com")},
	{UNI_L("http://foo.com/bar"), UNI_L("http://foo.com")},
	{UNI_L("http://foo.com:80/bar"), UNI_L("http://foo.com")},
	{UNI_L("http://foo.com:81/bar"), UNI_L("http://foo.com:81")},
	{UNI_L("https://secure.bar.com"), UNI_L("https://secure.bar.com")},
	{UNI_L("https://secure.bar.com/"), UNI_L("https://secure.bar.com")},
	{UNI_L("https://secure.bar.com/bar"), UNI_L("https://secure.bar.com")},
	{UNI_L("https://secure1.bar.com:80/bar"), UNI_L("https://secure1.bar.com:80")},
	{UNI_L("https://secure2.bar.com:81/bar"), UNI_L("https://secure2.bar.com:81")},
// Q: why does URL::KServerPort not return 0 for this?
//	{UNI_L("https://secure3.bar.com:443/bar"), UNI_L("https://secure3.bar.com")},
	{UNI_L("javascript:foo"), UNI_L("null")},
	{UNI_L("opera:config"), UNI_L("null")},
	{UNI_L("about:help"), UNI_L("null")},
	{UNI_L("data:text/html,<p>hey</p>"), UNI_L("null")},
	{UNI_L("file:///etc/hosts"), UNI_L("null")},
	{UNI_L("file://localhost/etc/hosts"), UNI_L("null")},
	{UNI_L("file://localhost:80/etc/hosts"), UNI_L("null")},
	{UNI_L("ftp://localhost/etc/hosts"), UNI_L("ftp://localhost")},
}

table origin_table_with_file (const uni_char*, const uni_char*)
{
	{UNI_L("file://localhost/etc/hosts"),    UNI_L("file://localhost")},
	{UNI_L("file://localhost:80/etc/hosts"), UNI_L("file://localhost:80")},
	{UNI_L("opera:foobar"), UNI_L("")}
}

test("GetSerializedOrigin")
{
	foreach (url, origin_str) from origin_table
	{
		{
			TempBuffer buf;
			URL target = g_url_api->GetURL(url);
			verify_success(DOM_Utils::GetSerializedOrigin(target, buf));
			verify_string(buf.GetStorage(), origin_str);
		}
	}
	foreach (url, origin_str) from origin_table_with_file
	{
		{
			// This loop tests a couple extra origin formats for web storage and web sql dbs.
			TempBuffer buf;
			URL target = g_url_api->GetURL(url);
			verify_success(DOM_Utils::GetSerializedOrigin(target, buf, DOM_Utils::SERIALIZE_FILE_SCHEME));
			verify_string(buf.GetStorage() ? buf.GetStorage() : UNI_L(""), origin_str);
		}
	}
}
