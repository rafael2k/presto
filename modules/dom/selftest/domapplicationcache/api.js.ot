// -*- Mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
/**
 * Test Application cache API in ECMA Script.
 *
 * The Unit-test checks generic API like constants, functions etc.
 */

group "DOM.AppCache.API";

require APPLICATION_CACHE_SUPPORT;

language ecmascript;

html
{
	//!	<html>
	//!		<head>
	//!			<title>Application Cache Test Page</title>
	//!			<script type="text/javascript">
	//!				var APPLICATION_CACHE_CONSTANTS = [
	//!					{name: "UNCACHED"	, value: 0},
	//!					{name: "IDLE"		, value: 1},
	//!					{name: "CHECKING"	, value: 2},
	//!					{name: "DOWNLOADING", value: 3},
	//!					{name: "UPDATEREADY", value: 4},
	//!					{name: "OBSOLETE"	, value: 5},
	//!				];
	//!				function checkException (functionToTest, exceptionCode) {
	//!					var isFailed = false;
	//!					try {
	//!						functionToTest (); // call function that has to be tested
	//!					} catch (e) {
	//!						// check that the expected exception has been generated
	//!						//	if (e instanceof DOMException) { // not supported not
	//!							isFailed = exceptionCode === e.code;
	//!						// } // not supported now
	//!					} finally {
	//!						return isFailed;
	//!					}
	//!				}
	//!			</script>
	//!		</head>
	//!		<body>
	//!		</body>
	//!	</html>
}

test ("Application cache API: Constants - values") {

    /**
     * Check Constants
     *
     * The sub test verifies all possible combinations of reading property in ECMA Script, namely:
     *  * via `[]' operator
     *  * via `.' operator
     *
     * When object is read by `.' operator, `eval ()' function is used. The function creates the statement as follows:
     *  `<constanta.value> === <objectName>.<constanta.name>'.
     *
     *  Technically, both statements of reading properties are equal.
     *
     * @param object value
     * @param object name (the statements that is used in ECMA script to get the object)
     *
     * @return
     */
    var checkConstants = function (objectName) {
        // get object value
        var objectValue = eval (objectName);

        // check how properties are accessed via `[]' operator
        for (var ix = 0; ix < APPLICATION_CACHE_CONSTANTS.length; ix++) {
            var constanta = APPLICATION_CACHE_CONSTANTS[ix];
            verify (constanta.value === objectValue[constanta.name]);

            // check that the type is `Number'
            // TODO: it doesn't work...
            // verify (window.applicationCache[constanta.name] instanceof Number);
        }

        // check how properties are accessed via `.' operator
        for (var ix = 0; ix < APPLICATION_CACHE_CONSTANTS.length; ix++) {
            var constanta = APPLICATION_CACHE_CONSTANTS[ix];
            // make expression like `VALUE == window.applicationCache.NAME'
            var script  =   constanta.value
                        +   "==="
                        +   objectName + "." + constanta.name
            ;
            verify (true === eval (script));
        }
    }

    // `applciationCache' - object
    checkConstants ("applicationCache");
    checkConstants ("window.applicationCache");

    // `ApplciationCache' - class
    checkConstants ("ApplicationCache");
    checkConstants ("window.ApplicationCache");
}

test ("Application cache API: Constants - read only attribute") {
    var checkReadOnly = function (objectValue) {
        // only test a property when it is accessed via `[]' opertor
        //
        for (var ix = 0; ix < APPLICATION_CACHE_CONSTANTS.length; ix++) {
            var constanta = APPLICATION_CACHE_CONSTANTS[ix];
            objectValue[constanta.name] = 666; // try to assing a new value (no exception should be generated)

            // `666' must not be assigned to a constant property
            //	but the old one has to be preserved
            verify (constanta.value === objectValue[constanta.name]);
        }
    }

    // object
    checkReadOnly (applicationCache);
    checkReadOnly (window.applicationCache);

    // class
    checkReadOnly (ApplicationCache);
    checkReadOnly (window.ApplicationCache);
}

test ("Application cache API: `status' - read only attribute") {
	var oldStatusValue = window.applicationCache.status;
	// try to assing a new value
	window.applicationCache.status = 666;
	verify (oldStatusValue === window.applicationCache.status); // value must not be changed
}

test ("Application cache API: `ApplicationCache' class prototype - unofficial (the same class no matter what is the context)") {
    verify (window.applicationCache === applicationCache); // excact test for object

    verify (window.ApplicationCache === ApplicationCache); // excact test for class
}

test ("Application cache API: `applicationCache' object is an instance of the `ApplicationCache' class") {
    /**
     * Check that the object has the same prototype
     */
    var checkInstanceOf = function (objectName) {
        var statement = objectName + " instanceof ApplicationCache";
        verify (true === eval (statement));
    }

    checkInstanceOf ("applicationCache");
    checkInstanceOf ("window.applicationCache");
}

test ("Application cache API: `ApplicationCache' class prototype - methods") {
    var METHODS = [
        // ApplicationCache methods
        "swapCache",
        "update",

        // EventTarget methods
        "addEventListener",
        "removeEventListener",
        "dispatchEvent",

        // EventTarget emthods (DOM 3)
        // "addEventListenerNS",
        // "removeEventListenerNS",
        // "willTriggerNS",
        // "hasEventListenerNS",
    ];

    for (var ix = 0; ix < METHODS.length; ix++) {
        verify (null !== window.ApplicationCache.prototype[METHODS[ix]]);
    }
}

/**
 * Check that event handlers do work
 *
 * This is an artificial test that emulates event firing.
 * The test checks that event handlers are registered both
 * via old (`on<event-type>=') and new approaches (addEventListener)
 * and that event are handled.
 */
test ("Application cache API: `ApplicationCache' class prototype - event handlers") {
    var EVENT_TYPES = [
        "checking",
        "error",
        "noupdate",
        "downloading",
        "progress",
        "updateready",
        "cached",
        "obsolete"
    ];

    var EventHandler = function (eventType) {
        this.eventType = eventType;

        this.eventHistory = {
            oldListener: null,
            newListener: null
        };

        this.generateHandler = function (isNewEventHandler) {
            var closure = this;
            return function (event) {
                    closure.eventHistory[(isNewEventHandler ? "new" : "old") + "Listener"] = event;
                };
        }
    };

    // generate and register event handlers
    var handlers = [];
    for (var ix = 0; ix < EVENT_TYPES.length; ix++) {
        var eventType = EVENT_TYPES[ix];
        var handler = new EventHandler (eventType);
        window.applicationCache["on" + eventType] = handler.generateHandler (false);
        window.applicationCache.addEventListener (
            eventType,
            handler.generateHandler(true),
            false
        );

        handlers.push (handler);
    }

    // fire events
    for (var ix = 0; ix < EVENT_TYPES.length; ix++) {
        var eventType = EVENT_TYPES[ix];
        var event = document.createEvent ("progress" == eventType? "ProgressEvent" : "Event");
        if ("progress" == eventType) {
            event.initEvent (eventType, false, true, true, 0, 100);
        } else {
            event.initEvent (eventType, false, true);
        }

        window.applicationCache.dispatchEvent (event);
    }

    var eventHistoryChecker = function (eventType, eventValue) {
        if (null == eventValue) {
            verify (false, "Event has not been dispatched and/or handled by a listener for event type: `" + eventType + "'");
        }

        // check that the event has been correctly dispatched
        verify (eventType == eventValue.type);

        verify (event.target instanceof ApplicationCache);

        verify (window.applicationCache === event.target);

        verify (Event.AT_TARGET === event.eventPhase);

        verify (false === event.bubbles);

        verify (true === event.cancelable);

        verify (null == event.namespaceURI);
    }

    // check results
    for (var ix = 0; ix < handlers.length; ix++) {
        var handler = handlers[ix];
        eventHistoryChecker (handler.eventType, handler.eventHistory.oldListener);
        eventHistoryChecker (handler.eventType, handler.eventHistory.newListener);
    }
}
