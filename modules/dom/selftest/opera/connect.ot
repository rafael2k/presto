// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
group "DOM.opera.connect";

include "modules/dochand/win.h";
include "modules/doc/frm_doc.h";

require ABOUT_OPERA_DEBUG;

setup
{
	FramesDocument::SetAlwaysCreateDOMEnvironment(TRUE);
}

exit
{
	FramesDocument::SetAlwaysCreateDOMEnvironment(FALSE);
	Window* win = state.GetWindow();
	win->SetType(WIN_TYPE_NORMAL);
}

test("Go to opera:debug")
{
	Window *w = state.GetWindow();
	RETURN_IF_ERROR(w->OpenURL("opera:debug"));
}

table Functions
{
	{"opera.connect", opera.connect},
	{"opera.disconnect", opera.disconnect},
	{"opera.isConnected", opera.isConnected},
}

foreach (name, function) from Functions
{
	test(name " present in opera:debug")
		language ecmascript;
	{
		verify("opera");
		verify(function);
	}
}

html
{
	//! <html>
	//!		<head>
	//!			<title>DOM.opera.connect</title>
	//!		</head>
	//!		<body>
	//!			Test for DOM.opera.connect (WIN_TYPE_NORMAL)
	//!		</body>
	//! </html>
}

foreach (name, function) from Functions
{
	test(name " NOT present in WIN_TYPE_NORMAL")
		language ecmascript;
	{
		verify("opera");
		verify(!function);
	}
}

test("opera.scopeListenerAddress NOT present in WIN_TYPE_NORMAL")
	language ecmascript;
{
	verify(!("scopeListenerAddress" in opera));
}

test("Set window type to WIN_TYPE_DEVTOOLS")
{
	Window *w = state.GetWindow();
	w->SetType(WIN_TYPE_DEVTOOLS);
}

html
{
	//! <html>
	//!		<head>
	//!			<title>DOM.opera.connect</title>
	//!		</head>
	//!		<body>
	//!			Test for DOM.opera.connect (WIN_TYPE_DEVTOOLS)
	//!		</body>
	//! </html>
}

foreach (name, function) from Functions
{
	test(name " present in WIN_TYPE_DEVTOOLS")
		language ecmascript;
	{
		verify("opera");
		verify(function);
	}
}

test("opera.scopeListenerAddress present in WIN_TYPE_DEVTOOLS")
	language ecmascript;
{
	verify(typeof opera.scopeListenerAddress == "string");
}
