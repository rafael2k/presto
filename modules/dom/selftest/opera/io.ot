// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
group "DOM.opera.io";
require init;
require DOM_GADGET_FILE_API_SUPPORT;
language ecmascript;

test("FileSystem: mountSystemDirectory")
{
	try
	{
		var f1 = opera.io.filesystem.mountSystemDirectory("storage", "foo");
		var f2 = opera.io.filesystem.mountSystemDirectory("storage", "bar");
		verify(true);
	}
	catch(e)
	{
		verify(1 == 2);
	}

	try
	{
		var f1 = opera.io.filesystem.mountSystemDirectory("storage");
		var f2 = opera.io.filesystem.mountSystemDirectory("storage");
		verify(f1 == f2);
	}
	catch(e)
	{
		verify(2 == 3);
	}

	try
	{
		var f1 = opera.io.filesystem.mountSystemDirectory("storage", "foo2");
		var f2 = opera.io.filesystem.mountSystemDirectory("application", "foo2");
		verify(3 == 4); // should fail
	}
	catch(e)
	{
		verify(true);
	}

	opera.io.filesystem.removeMountPoint("foo");
	opera.io.filesystem.removeMountPoint("bar");
	opera.io.filesystem.removeMountPoint("storage");
	opera.io.filesystem.removeMountPoint("foo2");
}

test("Check that we have a clean slate to test on")
{
	var mp = opera.io.filesystem.mountSystemDirectory("storage");
	mp.deleteFile("selftest-file-api-testfile.tmp");
	mp.deleteFile("selftest-file-api-testfile2.tmp");
	mp.deleteFile("selftest-file-api-copied-testfile.tmp");
	mp.deleteFile("selftest-file-api-moved-testfile.tmp");
	mp.deleteDirectory("selftest-file-api-directory", true);
}

test("Existence of DOM file API objects")
{
	verify(opera);
	verify(opera.io);
	verify(opera.io.filesystem);
	verify(opera.io.filesystem.mountPoints);
}

test("Various attributes/constants")
{
	verify(opera.io.filesystem.mountPoints.maxPathLength);

	// check url escaping
	var mp = opera.io.filesystem.mountSystemDirectory("storage");
	var url1 = "mountpoint://storage/this%20is%20a%20test";
	var url2 = "mountpoint://storage/this is a test";
	var url3 = "mountpoint://storage/this%2520is%2520a%2520test";

	var f1 = mp.resolve(url1);
	verify(f1.path != url3);	// check that name is not double escaped

	var f2 = mp.resolve(url2);	// check that name is escaped
	verify(f2.path == url1);
}

test("Virtual filesystem")
{
	var mp = opera.io.filesystem.mountSystemDirectory("storage");

	var f1 = mp.resolve("selftest.xyz0001");
	var f2 = mp.resolve("selftest.xyz0002");
	var f3 = mp.resolve("selftest.xyz0003");

	// cleanup
	mp.deleteFile(f1);
	mp.deleteFile(f2);
	mp.deleteFile(f3);

	// test pt.1
	mp.refresh();
	var aa = mp.length;
	mp.refresh();
	var bb = mp.length;
	verify(aa == bb);

	// test pt.2
	var fs = mp.open(f1, "w+c");
	fs.writeLine("testing");
	fs.close();
	mp.refresh();
	var cc = mp.length;
	verify(bb != cc);

	// test pt.3
	mp.deleteFile(f2);
	mp.deleteFile(f3);
	var dd = mp.length;
	verify(cc == dd);

	// test pt.4
	mp.deleteFile(f1);
	mp.refresh();
	var ee = mp.length;
	verify(aa == ee);
}

test("Path concatenation")
{
	var mp = opera.io.filesystem.mountSystemDirectory("storage");

	var f1 = mp.resolve("/storage/some//funny/dir/crap/../that/that/that/./../../end");
	verify(f1.path == "mountpoint://storage/some/funny/dir/that/end");

	var f2 = mp.resolve("some//funny/dir/crap/../that/that/that/./../../end");
	verify(f2.path == "mountpoint://storage/some/funny/dir/that/end");
}

test("Security tests")
{
	var mp = opera.io.filesystem.mountSystemDirectory("storage");

	try
	{
		var root = mp.resolve("/");
		verify(root);

		var f = root.resolve("doesnotexist");
		verify(false);
	}

	catch(e)
	{
		verify(true);
	}
}

test("FileSystem: addMountPoint and removeMountPoint")
{
	var count = opera.io.filesystem.mountPoints.length;

	var f = opera.io.filesystem.addMountPoint(".", "testmp");
	verify(f);
	verify(opera.io.filesystem.mountPoints.length == count+1);
	verify(f.isDirectory == true);

	var f2 = opera.io.filesystem.addMountPoint("./doesnotexist", "testmp2");
	verify(f2);
	verify(opera.io.filesystem.mountPoints.length == count+2);

	opera.io.filesystem.removeMountPoint(f);							// Object argument
	verify(opera.io.filesystem.mountPoints.length == count+1);
	verify(opera.io.filesystem.mountPoints[count].name == "testmp2");

	opera.io.filesystem.removeMountPoint("testmp2");					// String argument
	verify(opera.io.filesystem.mountPoints.length == count+0);
}

test("filemode")
{
	verify(opera);
	verify(opera.io);
	verify(opera.io.filemode);
	var fm = opera.io.filemode;
	verify(fm.READ == 1);
	verify(fm.WRITE == 2);
	verify(fm.APPEND == 4);
	verify(fm.UPDATE == 8);
}

test("File: resolve, open, close, readLine, writeLine and deleteFile")
{
	var mp = opera.io.filesystem.mountSystemDirectory("storage");
	verify(mp);

	var fv = mp.resolve("doesnotexist").resolve("doesnotexist2");
	verify(fv);
	verify(fv.path == "mountpoint://storage/doesnotexist/doesnotexist2");

	var mpresolved = opera.io.filesystem.mountPoints.resolve("storage");
	verify(mpresolved.name == "storage");

	var filename = "selftest-file-api-testfile.tmp";
	var data = "this is a test";

	var f = mp.resolve(filename);
	verify(f);
	verify(f.path == "mountpoint://storage/selftest-file-api-testfile.tmp");

	var fs = mp.open(f, "w");											// Object argument
	verify(fs);

	fs.writeLine(data);
	fs.close();

	fs = mp.open(f, "r");
	verify(fs);
	var str = fs.readLine();

	verify(str == data);
	fs.close();

	mp.deleteFile(f);
	verify(f.exists == false);

	fs = mp.open(filename, "w+");										// String argument
	verify(fs);

	fs.writeLine(data);
	fs.close();

	fs = mp.open(f, "r");
	verify(fs);
	var str = fs.readLine();

	verify(str == data);
	fs.close();

	mp.deleteFile(f);
	verify(f.exists == false);

	var f2 = f.resolve("");
	verify(f == f2);

	var f3 = f.resolve(".");
	verify(f == f3);

	verify(opera.io.filemode);
	fs = mp.open(filename, opera.io.filemode.WRITE);										// FileMode attributes
	verify(fs);

	fs.writeLine(data);
	fs.close();

	fs = mp.open(f, opera.io.filemode.READ);
	verify(fs);
	var str = fs.readLine();

	verify(str == data);
	fs.close();

	mp.deleteFile(f);
	verify(f.exists == false);

	var f4 = f.resolve("");
	verify(f == f4);

	var f5 = f.resolve(".");
	verify(f == f5);

	// Path normalization
	try
	{
		var fc = opera.io.filesystem.mountPoints.resolve("/storage/../../../some/../some/path");
		verify(false);
	}
	catch (e)
	{
		verify(true);
	}

	try
	{
		var fc1 = opera.io.filesystem.mountPoints.resolve("/storage/../../../storage/crap/../some/path");
		verify("mountpoint://storage/some/path" == fc1.path);
	}
	catch (e)
	{
		verify(false);
	}

	try
	{
		var full1 = opera.io.filesystem.mountPoints.resolve("mountpoint://storage/test");
		verify(full1);

		var full2 = opera.io.filesystem.mountPoints.resolve("mountpoint:///storage/test");
		verify(full2);
	}
	catch (e)
	{
		verify(false);
	}
}

test("File: copyTo and moveTo")
{
	var mp = opera.io.filesystem.mountSystemDirectory("storage");
	verify(mp);

	var f = mp.resolve("selftest-file-api-testfile.tmp");
	verify(f);

	var fs = mp.open(f, "w+");
	verify(fs);

	fs.writeLine("this is a test");
	fs.close();

	var copy_file = mp.resolve("selftest-file-api-copied-testfile.tmp");
	verify(copy_file.exists == false);

	var cf = f.copyTo(copy_file);
	verify(copy_file.exists == true);
	verify(f.exists == true);
	verify(copy_file.fileSize == f.fileSize);
	verify(cf.exists == true);

	mp.deleteFile(copy_file);
	verify(copy_file.exists == false);

	var move_file = mp.resolve("selftest-file-api-moved-testfile.tmp");
	verify(move_file.exists == false);

	verify(f.exists == true);
	var mf = f.moveTo(move_file);
	verify(move_file.exists == true);
	verify(f.exists == false);
	verify(mf.exists == true);

	mp.deleteFile(move_file);
	verify(move_file.exists == false);
}

test("File: createDirectory, deleteDirectory and refresh")
{
	var mp = opera.io.filesystem.mountSystemDirectory("storage");
	verify(mp);

	var dir = mp.resolve("selftest-file-api-directory");
	verify(dir.exists == false);

	var dir2 = mp.createDirectory(dir);
	verify(dir.exists);
	verify(dir2.exists);
	verify(dir.path == dir2.path);

	var f = dir.resolve("selftest-file-api-testfile.tmp");
	verify(f);

	var fs = dir.open(f, "w");
	verify(fs);

	fs.writeLine("this is a test");
	fs.close();

	dir.refresh();
	verify(dir.length > 0);

	try
	{
		mp.deleteDirectory(dir);
	}
	catch(e)
	{
		// not deleted because it has 1 file
	}
	verify(dir.exists == true);

	try
	{
		mp.deleteDirectory(dir, true);
	}
	catch(e)
	{
		verify(false); // should not throw
	}
	verify(dir.exists == false); // gone!

	// Throw exception for empty string argument
	try
	{
		mp.createDirectory("");
		verify(false); // should throw
	}
	catch(e)
	{
		verify(true);
	}

	// Throw exception for illegal mp reference
	try
	{
		mp.createDirectory("mountpoint://foo/");
		verify(false); // should throw
	}
	catch(e)
	{
		verify(true);
	}
}

test("File: sort")
{
	var mp = opera.io.filesystem.mountSystemDirectory("storage");

	mp.refresh();
	mp.sort(function(file1, file2) { return 0; });
}

test("FileStream: read* and write* functions")
{
	var filename1 = "selftest-file-api-testfile.tmp";
	var filename2 = "selftest-file-api-testfile2.tmp";
	var data = "some string that we can write to a file to test this ting";

	var mp = opera.io.filesystem.mountSystemDirectory("storage");
	verify(mp);

	var f1 = mp.resolve(filename1);
	verify(f1);

	var f2 = mp.resolve(filename2);
	verify(f2);

	var fs1 = mp.open(f1, "w+");
	verify(fs1);

	fs1.write(data);
	fs1.position = 0;

	var base64 = fs1.readBase64(fs1.bytesAvailable);
	verify(base64);

	var fs2 = mp.open(f2, "w+");
	verify(fs2);

	fs2.writeBase64(base64);
	fs2.position = 0;

	var string2 = fs2.read(fs2.bytesAvailable);
	verify(string2 == data);

	fs1.close();
	fs2.close();

	f1.deleteFile(f1);
	f2.deleteFile(f2);

	verify(f1.exists == false);
	verify(f2.exists == false);
}

test("Testing various attributes on the file object")
{
	var mp = opera.io.filesystem.mountSystemDirectory("storage");
	verify(mp);

	verify(mp.nativePath == ""); // System directories should not expose the native path

	var f = mp.resolve("selftest-file-api-testfile.tmp");
	verify(f);

	var fs = mp.open(f, "w");
	verify(fs);
	verify(fs.position == 0);

	var str = "this is a test";

	fs.writeLine(str);
	verify(fs.bytesAvailable == 0);
	fs.position = 0;
	verify(fs.position == 0);
	verify(fs.eof == false);
	verify(fs.encoding);
	fs.close();

	verify(f.parent); // we should have the mp as parent
	verify(f.parent == mp);
	verify(f.readOnly == false);
	verify(f.exists);
	verify(f.isFile);
	verify(f.isDirectory == false);
	verify(f.isArchive == false);
//	verify(f.created); // not yet implemented
	verify(f.modified);
	verify(f.path);
	verify(f.length == 0);

	mp.deleteFile(f);
	verify(f.exists == false);

	verify(f.path == f.toString());

	verify(f.nativePath == ""); // All files underneath a system mp should ALSO not reveal their path

	// TEST modification time
	{
		var mnt = opera.io.filesystem.mountSystemDirectory("storage");
		var file = mnt.resolve("test.txt");

		var date1 = new Date(); // File modification date must be greater than or equal to this

		var stream = file.open(file, "w");
		stream.write("TEST")
		stream.close();

		var date2 = new Date(); // File modification date must be less than or equal to this

		var before = date1.getTime(); before -= before % 1000;
		var created = file.modified.getTime();
		var after  = date2.getTime(); after -= after % 1000;

		verify(before);
		verify(created);
		verify(after);

		verify(created >= before);
		verify(created <= after);
	}
}

test("Testing browseFor*() argument validation")
{
    /* cf. crash reported against it -- CORE-28379 */
	try {
	    var dir = opera.io.filesystem.browseForDirectory();
		verify(false);
	} catch (e) {
		verify(true);
	};
	try {
	    var dir = opera.io.filesystem.browseForFile("/a");
		verify(false);
	} catch (e) {
		verify(true);
	};
	try {
	    var dir = opera.io.filesystem.browseForSave("/a", "*.exe");
		verify(false);
	} catch (e) {
		verify(true);
	};
}
