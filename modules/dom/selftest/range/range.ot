// -*- Mode: c++; indent-tabs-mode: nil; c-basic-offset: 2 -*-
group "DOM.Range.Range";
require init;

require DOM2_RANGE;

language ecmascript;

html
{
  "<html>"
    "<body>"
      "<div id='tree1'>"
        "<div id='tree1.1'>"
          "<div id='tree1.1.1'>"
            "[tree1.1.1]"
          "</div>"
          "<div id='tree1.1.2'>"
            "[tree1.1.2]"
          "</div>"
          "<div id='tree1.1.3'>"
            "[tree1.1.3]"
          "</div>"
        "</div>"
        "<div id='tree1.2'>"
          "<div id='tree1.2.1'>"
            "[tree1.2.1]"
          "</div>"
          "<div id='tree1.2.2'>"
            "[tree1.2.2]"
          "</div>"
          "<div id='tree1.2.3'>"
            "[tree1.2.3]"
          "</div>"
        "</div>"
        "<div id='tree1.3'>"
          "<div id='tree1.3.1'>"
            "[tree1.3.1]"
          "</div>"
          "<div id='tree1.3.2'>"
            "[tree1.3.2]"
          "</div>"
          "<div id='tree1.3.3'>"
            "[tree1.3.3]"
          "</div>"
        "</div>"
      "</div>"
      "<div id='tree2'>"
      "</div>"
    "</body>"
  "</html>"
}

test("Setup (global)")
{
  checkProperties_HasProperty = function checkProperties_HasProperty(range, properties)
  {
    for (var index = 0; index < properties.length; ++index)
      if (!(properties[index] in range))
        throw "HasProperty: '" + properties[index] + "' not found";
    return true;
  }

  checkProperties_Enumerate = function checkProperties_Enumerate(range, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in range)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  checkProperties_Get = function checkProperties_Get(range, properties, values)
  {
    for (var index = 0; index < properties.length; ++index)
      if (!(range[properties[index]] == values[index]))
        throw "Get: '" + properties[index] + "' wrong, is '" + range[properties[index]] + "', should be '" + values[index] + "'";
    return true;
  }

  checkProperties_PutNotAllowed = function checkProperties_PutNotAllowed(range, properties)
  {
    "use strict";
    for (var index = 0; index < properties.length; ++index)
    {
      var new_value = null;
      var old_value = null;
      try
      {
        old_value = range[properties[index]];
        if (typeof(old_value) == "string")
          new_value = 10;
        else
          new_value = "foo";
        range[properties[index]] = new_value;
        if (!(range[properties[index]] == old_value))
          throw "PutNotAllowed: '" + properties[index] + "' changed value and didn't throw exception";
        else
          throw "PutNotAllowed: '" + properties[index] + "' didn't throw exception";
      }
      catch(e)
      {
        if (!(e instanceof TypeError))
          throw "PutNotAllowed: '" + properties[index] + "' threw exception other than TypeError";
        else
          if (!(range[properties[index]] == old_value))
            throw "PutNotAllowed: '" + properties[index] + "' threw exception but changed value";
      }
    }
    return true;
  }

  checkFunctions_HasProperty = function checkFunctions_HasProperty(range, functions)
  {
    for (var index = 0; index < functions.length; ++index)
      if (!(functions[index] in range))
        throw "HasProperty: function '" + functions[index] + "' not found";
      else if (!range[functions[index]] || typeof(range[functions[index]]) != "function")
        throw "HasProperty: '" + functions[index] + "' not a function: " + range[functions[index]];
    return true;
  }

  checkFunctions_Enumerate = function checkFunctions_Enumerate(range, functions)
  {
    outer: for (var index = 0; index < functions.length; ++index)
    {
      for (var property in range)
        if (property == functions[index])
          continue outer;
      throw "Enumerate: function '" + functions[index] + "' not found";
    }
    return true;
  }

  checkCall_Exception = function checkCall_Exception(range, name, arguments, code)
  {
    var error = false;
    try
    {
      range[name].apply(range, arguments);
      error = "Call: Range." + name + " didn't throw an exception";
    }
    catch (e)
    {
      if (typeof e != "object")
        throw "Call: Range." + name + " threw something strange: " + e;
      else if (!("code" in e))
        throw "Call: Range." + name + " threw exception of unknown kind: '" + e + "'";
      else if (e.code != code)
        throw "Call: Range." + name + " threw wrong exception: expected " + code + ", got " + e.code;
    }
    if (error)
      throw error;
    return true;
  }

  tree1 = document.getElementById("tree1");
  tree11 = document.getElementById("tree1.1");
  tree111 = document.getElementById("tree1.1.1");
  tree111text = tree111 ? tree111.firstChild : null;
  tree112 = document.getElementById("tree1.1.2");
  tree112text = tree112 ? tree112.firstChild : null;
  tree113 = document.getElementById("tree1.1.3");
  tree113text = tree113 ? tree113.firstChild : null;
  tree12 = document.getElementById("tree1.2");
  tree121 = document.getElementById("tree1.2.1");
  tree121text = tree121 ? tree121.firstChild : null;
  tree122 = document.getElementById("tree1.2.2");
  tree122text = tree122 ? tree122.firstChild : null;
  tree123 = document.getElementById("tree1.2.3");
  tree123text = tree123 ? tree123.firstChild : null;
  tree13 = document.getElementById("tree1.3");
  tree131 = document.getElementById("tree1.3.1");
  tree131text = tree131 ? tree131.firstChild : null;
  tree132 = document.getElementById("tree1.3.2");
  tree132text = tree132 ? tree132.firstChild : null;
  tree133 = document.getElementById("tree1.3.3");
  tree133text = tree133 ? tree133.firstChild : null;

  docfrag = document.createDocumentFragment();
  docfrag.appendChild(document.createElement("div"));

  properties = ["startContainer", "startOffset", "endContainer", "endOffset", "collapsed", "commonAncestorContainer"];
  functions = ["setStart", "setEnd", "setStartBefore", "setStartAfter", "setEndBefore", "setEndAfter",
               "collapse", "selectNode", "selectNodeContents", "compareBoundaryPoints", "deleteContents",
               "extractContents", "cloneContents", "insertNode", "surroundContents", "cloneRange",
               "toString", "detach"];

  DOMExceptionX = DOMException;
}

test("Setup #1")
{
  verify(tree1 && tree1.id == "tree1");
  verify(tree11 && tree11.id == "tree1.1");
  verify(tree111 && tree111.id == "tree1.1.1");
  verify(tree111text && tree111text.data == "[tree1.1.1]");
  verify(tree112 && tree112.id == "tree1.1.2");
  verify(tree112text && tree112text.data == "[tree1.1.2]");
  verify(tree113 && tree113.id == "tree1.1.3");
  verify(tree113text && tree113text.data == "[tree1.1.3]");
  verify(tree12 && tree12.id == "tree1.2");
  verify(tree121 && tree121.id == "tree1.2.1");
  verify(tree121text && tree121text.data == "[tree1.2.1]");
  verify(tree122 && tree122.id == "tree1.2.2");
  verify(tree122text && tree122text.data == "[tree1.2.2]");
  verify(tree123 && tree123.id == "tree1.2.3");
  verify(tree123text && tree123text.data == "[tree1.2.3]");
  verify(tree13 && tree13.id == "tree1.3");
  verify(tree131 && tree131.id == "tree1.3.1");
  verify(tree131text && tree131text.data == "[tree1.3.1]");
  verify(tree132 && tree132.id == "tree1.3.2");
  verify(tree132text && tree132text.data == "[tree1.3.2]");
  verify(tree133 && tree133.id == "tree1.3.3");
  verify(tree133text && tree133text.data == "[tree1.3.3]");

  /* Workaround for a bug in the ECMAScript engine: the 'in' operator
     sometimes doesn't work for properties on host objects because the
     engine optimizes away the lookup if it hasn't seen the name used
     as a property name before.  So we use them all as property names
     here to make sure the engine has seen them. */
  var identifiers = {
    startContainer: null,
    startOffset: null,
    endContainer: null,
    endOffset: null,
    collapsed: null,
    commonAncestorContainer: null
  };
}

// --------------------------------------------------------------------

test("HasProperty: document")
  require success "Setup #1";
{
  var document_properties = ["createRange"];
  verify(checkProperties_HasProperty(document, document_properties));
  verify(checkProperties_Enumerate(document, document_properties));
}

test("HasProperty: Range")
  require success "Setup #1";
{
  var range = document.createRange();
  verify(range);

  verify(checkProperties_HasProperty(range, properties));
  verify(checkProperties_Enumerate(range, properties));

  verify(checkFunctions_HasProperty(range, functions));
  verify(checkFunctions_Enumerate(range, functions));
}

test("Get: Range")
  require success "Setup #1";
{
  var range = document.createRange();
  verify(range);
  verify(checkProperties_Get(range, properties, [document, 0, document, 0, true, document]));
}

test("Put: Range")
  require success "Setup #1";
{
  var range = document.createRange();
  verify(range);
  verify(checkProperties_PutNotAllowed(range, properties));
}

test("Range constants")
{
  verify(window["Range"] != undefined);

  verify("START_TO_START" in Range);
  verify("START_TO_END" in Range);
  verify("END_TO_END" in Range);
  verify("END_TO_START" in Range);

  verify(Range.START_TO_START == 0);
  verify(Range.START_TO_END == 1);
  verify(Range.END_TO_END == 2);
  verify(Range.END_TO_START == 3);
}

// --------------------------------------------------------------------

test("Call: Range.setStart")
  require success "Setup #1";
{
  var range = document.createRange();
  verify(checkCall_Exception(range, "setStart", [tree1, -1], DOMException.INDEX_SIZE_ERR));

  var range = document.createRange();
  range.setStart(tree1, 0);
  verify(checkProperties_Get(range, properties, [tree1, 0, tree1, 0, true, tree1]));

  var range = document.createRange();
  range.setStart(tree1, 1);
  verify(checkProperties_Get(range, properties, [tree1, 1, tree1, 1, true, tree1]));

  var range = document.createRange();
  range.setStart(tree1, 2);
  verify(checkProperties_Get(range, properties, [tree1, 2, tree1, 2, true, tree1]));

  var range = document.createRange();
  range.setStart(tree1, 3);
  verify(checkProperties_Get(range, properties, [tree1, 3, tree1, 3, true, tree1]));

  var range = document.createRange();
  verify(checkCall_Exception(range, "setStart", [tree1, 4], DOMException.INDEX_SIZE_ERR));

  var range = document.createRange();
  verify(checkCall_Exception(range, "setStart", [tree111text, -1], DOMException.INDEX_SIZE_ERR));

  var range = document.createRange();
  range.setStart(tree111text, 0);
  verify(checkProperties_Get(range, properties, [tree111text, 0, tree111text, 0, true, tree111text]));

  var range = document.createRange();
  range.setStart(tree111text, 1);
  verify(checkProperties_Get(range, properties, [tree111text, 1, tree111text, 1, true, tree111text]));

  var range = document.createRange();
  range.setStart(tree111text, 10);
  verify(checkProperties_Get(range, properties, [tree111text, 10, tree111text, 10, true, tree111text]));

  var range = document.createRange();
  range.setStart(tree111text, 11);
  verify(checkProperties_Get(range, properties, [tree111text, 11, tree111text, 11, true, tree111text]));

  var range = document.createRange();
  verify(checkCall_Exception(range, "setStart", [tree1, 12], DOMException.INDEX_SIZE_ERR));

  var range = document.createRange();
  range.detach();
  verify(checkCall_Exception(range, "setStart", [tree1, 0], DOMException.INVALID_STATE_ERR));
}

test("Call: Range.setEnd")
  require success "Setup #1";
{
  var range = document.createRange();
  verify(checkCall_Exception(range, "setEnd", [tree1, -1], DOMException.INDEX_SIZE_ERR));

  var range = document.createRange();
  range.setEnd(tree1, 0);
  verify(checkProperties_Get(range, properties, [document, 0, tree1, 0, false, document]));

  var range = document.createRange();
  range.setEnd(tree1, 1);
  verify(checkProperties_Get(range, properties, [document, 0, tree1, 1, false, document]));

  var range = document.createRange();
  range.setEnd(tree1, 2);
  verify(checkProperties_Get(range, properties, [document, 0, tree1, 2, false, document]));

  var range = document.createRange();
  range.setEnd(tree1, 3);
  verify(checkProperties_Get(range, properties, [document, 0, tree1, 3, false, document]));

  var range = document.createRange();
  verify(checkCall_Exception(range, "setEnd", [tree1, 4], DOMException.INDEX_SIZE_ERR));

  var range = document.createRange();
  verify(checkCall_Exception(range, "setEnd", [tree111text, -1], DOMException.INDEX_SIZE_ERR));

  var range = document.createRange();
  range.setEnd(tree111text, 0);
  verify(checkProperties_Get(range, properties, [document, 0, tree111text, 0, false, document]));

  var range = document.createRange();
  range.setEnd(tree111text, 1);
  verify(checkProperties_Get(range, properties, [document, 0, tree111text, 1, false, document]));

  var range = document.createRange();
  range.setEnd(tree111text, 10);
  verify(checkProperties_Get(range, properties, [document, 0, tree111text, 10, false, document]));

  var range = document.createRange();
  range.setEnd(tree111text, 11);
  verify(checkProperties_Get(range, properties, [document, 0, tree111text, 11, false, document]));

  var range = document.createRange();
  verify(checkCall_Exception(range, "setEnd", [tree1, 12], DOMException.INDEX_SIZE_ERR));

  var range = document.createRange();
  range.detach();
  verify(checkCall_Exception(range, "setEnd", [tree1, 0], DOMException.INVALID_STATE_ERR));
}

test("Call: Range.setStartBefore")
  require success "Setup #1";
{
  var range = document.createRange();
  range.setStartBefore(tree11);
  verify(checkProperties_Get(range, properties, [tree1, 0, tree1, 0, true, tree1]));

  var range = document.createRange();
  range.setStartBefore(tree12);
  verify(checkProperties_Get(range, properties, [tree1, 1, tree1, 1, true, tree1]));

  var range = document.createRange();
  range.setStartBefore(tree13);
  verify(checkProperties_Get(range, properties, [tree1, 2, tree1, 2, true, tree1]));

  var range = document.createRange();
  range.detach();
  verify(checkCall_Exception(range, "setStartBefore", [tree11], DOMException.INVALID_STATE_ERR));

  var range = document.createRange();
  verify(checkCall_Exception(range, "setStartBefore", [document], DOMExceptionX.INVALID_NODE_TYPE_ERR));

  var range = document.createRange();
  verify(checkCall_Exception(range, "setStartBefore", [docfrag], DOMExceptionX.INVALID_NODE_TYPE_ERR));
}

test("Call: Range.setStartAfter")
  require success "Setup #1";
{
  var range = document.createRange();
  range.setStartAfter(tree11);
  verify(checkProperties_Get(range, properties, [tree1, 1, tree1, 1, true, tree1]));

  var range = document.createRange();
  range.setStartAfter(tree12);
  verify(checkProperties_Get(range, properties, [tree1, 2, tree1, 2, true, tree1]));

  var range = document.createRange();
  range.setStartAfter(tree13);
  verify(checkProperties_Get(range, properties, [tree1, 3, tree1, 3, true, tree1]));

  var range = document.createRange();
  range.detach();
  verify(checkCall_Exception(range, "setStartAfter", [tree11], DOMException.INVALID_STATE_ERR));

  var range = document.createRange();
  verify(checkCall_Exception(range, "setStartAfter", [document], DOMExceptionX.INVALID_NODE_TYPE_ERR));

  var range = document.createRange();
  verify(checkCall_Exception(range, "setStartAfter", [docfrag], DOMExceptionX.INVALID_NODE_TYPE_ERR));
}

test("Call: Range.setEndBefore")
  require success "Setup #1";
{
  var range = document.createRange();
  range.setEndBefore(tree11);
  verify(checkProperties_Get(range, properties, [document, 0, tree1, 0, false, document]));

  var range = document.createRange();
  range.setEndBefore(tree12);
  verify(checkProperties_Get(range, properties, [document, 0, tree1, 1, false, document]));

  var range = document.createRange();
  range.setEndBefore(tree13);
  verify(checkProperties_Get(range, properties, [document, 0, tree1, 2, false, document]));

  var range = document.createRange();
  range.detach();
  verify(checkCall_Exception(range, "setEndBefore", [tree11], DOMException.INVALID_STATE_ERR));

  var range = document.createRange();
  verify(checkCall_Exception(range, "setEndBefore", [document], DOMExceptionX.INVALID_NODE_TYPE_ERR));

  var range = document.createRange();
  verify(checkCall_Exception(range, "setEndBefore", [docfrag], DOMExceptionX.INVALID_NODE_TYPE_ERR));
}

test("Call: Range.setEndAfter")
  require success "Setup #1";
{
  var range = document.createRange();
  range.setEndAfter(tree11);
  verify(checkProperties_Get(range, properties, [document, 0, tree1, 1, false, document]));

  var range = document.createRange();
  range.setEndAfter(tree12);
  verify(checkProperties_Get(range, properties, [document, 0, tree1, 2, false, document]));

  var range = document.createRange();
  range.setEndAfter(tree13);
  verify(checkProperties_Get(range, properties, [document, 0, tree1, 3, false, document]));

  var range = document.createRange();
  range.detach();
  verify(checkCall_Exception(range, "setEndAfter", [tree11], DOMException.INVALID_STATE_ERR));

  var range = document.createRange();
  verify(checkCall_Exception(range, "setEndAfter", [document], DOMExceptionX.INVALID_NODE_TYPE_ERR));

  var range = document.createRange();
  verify(checkCall_Exception(range, "setEndAfter", [docfrag], DOMExceptionX.INVALID_NODE_TYPE_ERR));
}

test("Call: Range.collapse")
  require success "Setup #1";
{
  var range = document.createRange();
  range.setStart(tree1, 1);
  range.setEnd(tree1, 2);
  verify(checkProperties_Get(range, properties, [tree1, 1, tree1, 2, false, tree1]));
  range.collapse(true);
  verify(checkProperties_Get(range, properties, [tree1, 1, tree1, 1, true, tree1]));

  var range = document.createRange();
  range.setStart(tree1, 1);
  range.setEnd(tree1, 2);
  verify(checkProperties_Get(range, properties, [tree1, 1, tree1, 2, false, tree1]));
  range.collapse(false);
  verify(checkProperties_Get(range, properties, [tree1, 2, tree1, 2, true, tree1]));

  var range = document.createRange();
  range.detach();
  verify(checkCall_Exception(range, "collapse", [true], DOMException.INVALID_STATE_ERR));
}

test("Call: Range.selectNode")
  require success "Setup #1";
{
  var range = document.createRange();
  range.selectNode(tree11);
  verify(checkProperties_Get(range, properties, [tree1, 0, tree1, 1, false, tree1]));

  var range = document.createRange();
  range.selectNode(tree12);
  verify(checkProperties_Get(range, properties, [tree1, 1, tree1, 2, false, tree1]));

  var range = document.createRange();
  range.selectNode(tree13);
  verify(checkProperties_Get(range, properties, [tree1, 2, tree1, 3, false, tree1]));

  var range = document.createRange();
  range.detach();
  verify(checkCall_Exception(range, "selectNode", [tree1], DOMException.INVALID_STATE_ERR));

  var range = document.createRange();
  verify(checkCall_Exception(range, "selectNode", [document], DOMExceptionX.INVALID_NODE_TYPE_ERR));

  var range = document.createRange();
  verify(checkCall_Exception(range, "selectNode", [docfrag], DOMExceptionX.INVALID_NODE_TYPE_ERR));
}

test("Call: Range.selectNodeContents")
  require success "Setup #1";
{
  var range = document.createRange();
  range.selectNodeContents(tree1);
  verify(checkProperties_Get(range, properties, [tree1, 0, tree1, 3, false, tree1]));

  var range = document.createRange();
  range.selectNodeContents(tree111text);
  verify(checkProperties_Get(range, properties, [tree111text, 0, tree111text, 11, false, tree111text]));

  var range = document.createRange();
  range.selectNodeContents(tree2);
  verify(checkProperties_Get(range, properties, [tree2, 0, tree2, 0, true, tree2]));

  var range = document.createRange();
  range.selectNodeContents(document);
  verify(checkProperties_Get(range, properties, [document, 0, document, 1, false, document]));

  var range = document.createRange();
  range.selectNodeContents(docfrag);
  verify(checkProperties_Get(range, properties, [docfrag, 0, docfrag, 1, false, docfrag]));

  var range = document.createRange();
  range.detach();
  verify(checkCall_Exception(range, "selectNodeContents", [tree1], DOMException.INVALID_STATE_ERR));
}

// --------------------------------------------------------------------

test("Call: Range.cloneNode")
  require success "Setup #1";
{
  var range = document.createRange();
  range.selectNode(tree1);
  var clone = range.cloneRange();
  verify(range.startContainer == clone.startContainer);
  verify(range.startOffset == clone.startOffset);
  verify(range.endContainer == clone.endContainer);
  verify(range.endOffset == clone.endOffset);
  verify(range.collapsed == clone.collapsed);
  verify(range.commonAncestorContainer == clone.commonAncestorContainer);

  var range = document.createRange();
  range.selectNodeContents(tree1);
  var clone = range.cloneRange();
  verify(range.startContainer == clone.startContainer);
  verify(range.startOffset == clone.startOffset);
  verify(range.endContainer == clone.endContainer);
  verify(range.endOffset == clone.endOffset);
  verify(range.collapsed == clone.collapsed);
  verify(range.commonAncestorContainer == clone.commonAncestorContainer);
}

html
{
  //! <!DOCTYPE html>
  //! <html><head><title>range document mutation test</title></head>
  //! <body>Foo</body>
  //! </html>
}

test("Range preserved under close splitText")
{
  // Bug 314226
  document.body.normalize();
  var t = document.body.firstChild;
  t.data = 'loremipsum';
  var r = document.createRange();
  r.setStart(t, 1);
  r.setEnd(t, 5);
  verify(r.toString() != '');
  verify(r.toString() == 'orem');
  t.splitText(5); // Split after lorem, before ipsum
  verify(r.toString() != '');
  verify(r.toString() == 'orem');
}

html
{
	//! <!DOCTYPE html>
	//! <html>
	//!   <body contenteditable="true">	<br>NOT TESTED</body>
	//! </html>
}

test("Range with tab character")
  require DOCUMENT_EDIT_SUPPORT;
{
	// Bug CT-1459
	document.execCommand('SelectAll');
	selection = getSelection().toString();
	verify(selection[0] == '\t');
}
