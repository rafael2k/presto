/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "DOM.WebForms2";
require init;

language ecmascript;

html
{
	//! <html>
	//!		<body>
	//!			<form id='myform' action='http://localhost:8080/lek.jsp' method='post'>
	//!				<input id='grej' name='textnamn' min='13' max='16' type='number' pattern='^1+$' autocomplete='on' step='1.04' autofocus>
	//!			</form>
	//!		</body>
	//! </html>
}

test("WebForms2.Constants")
{
	// These have been removed
	if ("HTMLFormElement" in window)
	{
		var form_elm = window.HTMLFormElement;
		verify(!("ERROR_TYPE_MISMATCH" in form_elm));
		verify(!("ERROR_RANGE_UNDERFLOW" in form_elm));
		verify(!("ERROR_RANGE_OVERFLOW" in form_elm));
		verify(!("ERROR_STEP_MISMATCH" in form_elm));
		verify(!("ERROR_TOO_LONG" in form_elm));
		verify(!("ERROR_PATTERN_MISMATCH" in form_elm));
		verify(!("ERROR_REQUIRED" in form_elm));
		verify(!("ERROR_CUSTOM" in form_elm));
	}

	var input = document.getElementById("myform");
	verify(input);

	verify(!("ERROR_TYPE_MISMATCH" in input));
	verify(!("ERROR_RANGE_UNDERFLOW" in input));
	verify(!("ERROR_RANGE_OVERFLOW" in input));
	verify(!("ERROR_STEP_MISMATCH" in input));
	verify(!("ERROR_TOO_LONG" in input));
	verify(!("ERROR_PATTERN_MISMATCH" in input));
	verify(!("ERROR_REQUIRED" in input));
	verify(!("ERROR_CUSTOM" in input));
}

test("InputAttributesRead")
{
	var input = document.getElementById("grej");
	verify(input != undefined);
	verify(input != null);

	verify(input.min == 13);
	verify(input.max == 16);
	verify(input.type == "number");
	verify(input.pattern == "^1+$");
	verify(input.autocomplete == 'on');
	verify(input.validity.valid);
	verify(input.step);
	verify(input.step == 1.04);
	verify(input.labels);
	verify("autofocus" in input);

	verify("validationMessage" in input);
}

test("WebForms2.InputAttributesWrite")
{
	var input = document.getElementById("grej");
	verify(input);

	input.min = 15;
	verify(input.min == 15);

	input.max = 17;
	verify(input.max == 17);

	input.type = 'text';
	verify(input.type == "text");

	input.pattern = "^Kalle$";
	verify(input.pattern == "^Kalle$");

	input.autocomplete = 'off';
	verify(input.autocomplete == 'off');

	input.required = true;
	verify(input.required);

	verify(input.validity.valueMissing);

	input.autofocus = false;
	verify (input.autofocus == false);
	verify(!input.hasAttribute("autofocus"));
	input.autofocus = true;
	verify(input.autofocus == true);
	verify(input.getAttribute("autofocus") == "autofocus" || input.getAttribute("autofocus") == "true");
}

html
{
	//! <html>
	//!		<body>
	//!			<form>
	//!				<input id='grej' name='textnamn'>
	//!			</form>
	//!		</body>
	//! </html>
}

test("InputFunctions")
{
	var input = document.getElementById("grej");
	verify(input);

	verify(input.blur);
	verify(input.focus);
	verify(input.setCustomValidity);

	input.blur();
	input.blur();
	input.focus();
	input.focus();
	input.blur();

	verify(input.validity.valid);
	input.setCustomValidity("Hej");
	verify(input.validity.customError);
	verify(input.validationMessage == "Hej");
	input.setCustomValidity("");
	verify(input.validity.valid);
	input.setCustomValidity("Hioo");
	verify(input.validity.customError);
	verify(input.validationMessage == "Hioo");
	input.setCustomValidity(null);
	verify(input.validity.customError);
	verify(input.validationMessage === "null");
}


html
{
	//! <html>
	//!		<body>
	//!			<form id='myform' action='http://localhost:8080/lek.jsp' method='post'>
	//!				<textarea id="grej" pattern="Hippa*"
	//!                 autocomplete="on" autofocus required
	//!                 maxLength=100>Hipp</textarea>
	//!			</form>
	//!		</body>
	//! </html>
}


test("HTMLTextAreaElement.AttributesRead")
{
	var textarea = document.getElementById("grej");
	verify(textarea != undefined);
	verify(textarea != null);

	verify(textarea.pattern == "Hippa*");
	verify(textarea.validity.valid);
	verify("labels" in textarea);
	verify(textarea.labels);
	verify("length" in textarea.labels);
	verify(textarea.labels.length == 0);
	verify("autofocus" in textarea);
	verify("required" in textarea);
	verify(textarea.required == true);

	verify("maxLength" in textarea);
	verify(textarea.maxLength == 100);

	verify("validationMessage" in textarea);

	verify("wrap" in textarea);
	verify("autofocus" in textarea);
	verify("inputmode" in textarea);
	verify(!("accept" in textarea));

	verify("labels" in textarea);
	verify(textarea.labels);
	verify("length" in textarea.labels);

	verify("willValidate" in textarea);
	verify("validity" in textarea);
	verify(textarea.validity);

	verify("validationMessage" in textarea);
	verify("checkValidity" in textarea);
	verify("setCustomValidity" in textarea);
}

test("HTMLTextAreaElement.AttributesWrite")
{
	var textarea = document.getElementById("grej");
	verify(textarea);

	textarea.pattern = "Hippe*";
	verify(textarea.pattern == "Hippe*");

	textarea.autocomplete = 'off';
	verify(textarea.autocomplete == 'off');

	textarea.required = false;
	verify(textarea.required == false);
	textarea.required = true;
	verify(textarea.required == true);

	verify(textarea.validity.valid);
	//	verify(textarea.validity.valueMissing);

	textarea.autofocus = false;
	verify (textarea.autofocus == false);
	verify(!textarea.hasAttribute("autofocus"));
	textarea.autofocus = true;
	verify(textarea.autofocus == true);
	verify(textarea.getAttribute("autofocus") == "autofocus" || textarea.getAttribute("autofocus") == "true");
}

test("HTMLTextAreaElement.Functions")
{
	var textarea = document.getElementById("grej");
	verify(textarea);

	verify(textarea.blur);
	verify(textarea.focus);
	verify(textarea.setCustomValidity);

	textarea.blur();
	textarea.blur();
	textarea.focus();
	textarea.focus();
	textarea.blur();

	textarea.required = false;
	textarea.pattern = ".*";
	verify(textarea.validity.valid);
	textarea.setCustomValidity("Hej");
	verify(textarea.validity.customError);
	verify(textarea.validationMessage == "Hej");
	textarea.setCustomValidity("");
	verify(textarea.validity.valid);
	textarea.setCustomValidity("Hioo");
	verify(textarea.validity.customError);
	verify(textarea.validationMessage == "Hioo");
	textarea.setCustomValidity(null);
	verify(textarea.validity.customError);
	verify(textarea.validationMessage == "null");
}

html
{
	//! <html>
	//!		<body>
	//!			<form id='myform' action='http://localhost:8080/lek.jsp' method='post'>
	//!				<fieldset id="fs"><input></fieldset>
	//!			</form>
	//!		</body>
	//! </html>
}

	// interface HTMLFieldSetElement : HTMLElement {
	//   readonly attribute HTMLFormElement form;
	//
	//   // new in this specification
	//   readonly attribute NodeList        forms;
	//   readonly attribute HTMLCollection  elements;
	//            attribute boolean         disabled;
	//
	//   readonly attribute boolean         willValidate; // always false
	//   readonly attribute ValidityState   validity; // all members always set to false (except valid)
	//   readonly attribute DOMString       validationMessage; // always the empty string
	//   bool               checkValidity(); // returns true
	//   void               setCustomValidity(in DOMString error); // raises NOT_SUPPORTED_ERR
	// };

test("HTMLFieldSetElement")
{
	var fieldset = document.getElementById("fs");
	verify(fieldset);

	verify("elements" in fieldset);
	verify("disabled" in fieldset);
	verify("willValidate" in fieldset);
	verify("validity" in fieldset);
	verify("validationMessage" in fieldset);
	verify("checkValidity" in fieldset);
	verify("setCustomValidity" in fieldset);

	verify("length" in fieldset.elements);
	verify(fieldset.disabled == false);
	verify(fieldset.willValidate == false);

	var res = fieldset.checkValidity();
	verify(res == true);

	function test_properties()
	{
		"use strict";
		try
		{
			fieldset.setCustomValidity("Testvalidation error");
			verify(!"The line above should have thrown an execption");
		}
		catch (e)
		{
			verify (e.code == DOMException.NOT_SUPPORTED_ERR);
		}
		verify(fieldset.validationMessage == "");

		// Check that it doesn't thow an exception
		fieldset.forms = "jfdkdjfd";

		try
		{
			fieldset.elements = "jfdkdjfd";
			verify(!"The line above should have thrown an execption");
		}
		catch (e)
		{
			verify (e instanceof TypeError);
		}

		try
		{
			fieldset.willValidate = "jfdkdjfd";
			verify(!"The line above should have thrown an execption");
		}
		catch (e)
		{
			verify (e instanceof TypeError);
		}

		try
		{
			fieldset.validity = "jfdkdjfd";
			verify(!"The line above should have thrown an execption");
		}
		catch (e)
		{
			verify (e instanceof TypeError);
		}

		try
		{
			fieldset.validationMessage = "jfdkdjfd";
			verify(!"The line above should have thrown an execption");
		}
		catch (e)
		{
			verify (e instanceof TypeError);
		}
	}
	test_properties();
}

html
{
	//! <html>
	//!		<body>
	//!			<form id='myform' action='http://localhost:8080/lek.jsp' method='post'>
	//!				<select id="grej" autofocus></select>
	//!			</form>
	//!		</body>
	//! </html>
}


test("HTMLSelectElement.AttributesRead")
{
	var select = document.getElementById("grej");
	verify(select);

	verify("validationMessage" in select);
	verify("labels" in select);
	verify(select.labels);
	verify("length" in select.labels);
	verify(select.labels.length == 0);
	verify("autofocus" in select);
	verify(select.autofocus == true);
	verify("autocomplete" in select);
	verify("required" in select);
	verify("validity" in select);
	verify(select.validity.valid);

	verify("validationMessage" in select);

	verify("accessKey" in select);

	verify("selectedOptions" in select);
	verify(select.selectedOptions);
	verify("length" in select.selectedOptions);

	verify("willValidate" in select);
	verify("validity" in select);
	verify("validationMessage" in select);

	verify("checkValidity" in select);
	verify("setCustomValidity" in select);
}

test("HTMLSelectElement.AttributesWrite")
{
	var select = document.getElementById("grej");
	verify(select);

	verify("autocomplete" in select);
	select.pattern = "Hippe*";
	verify(select.pattern == "Hippe*");

	select.autocomplete = 'off';
	verify(select.autocomplete == 'off');

	verify("autofocus" in select);
	verify(select.autofocus == true);
	select.autofocus = false;
	verify (select.autofocus == false);
	verify(!select.hasAttribute("autofocus"));
	select.autofocus = true;
	verify(select.autofocus == true);
	verify(select.getAttribute("autofocus") == "autofocus" || select.getAttribute("autofocus") == "true");
}

test("HTMLSelectElement.Functions")
{
	var select = document.getElementById("grej");
	verify(select);

	verify(select.blur);
	verify(select.focus);
	verify(select.setCustomValidity);

	select.blur();
	select.blur();
	select.focus();
	select.focus();
	select.blur();

	verify(select.validity.valid);
	select.setCustomValidity("Hej");
	verify(select.validity.customError);
	verify(select.validationMessage == "Hej");
	select.setCustomValidity("");
	verify(select.validity.valid);
	select.setCustomValidity("Hioo");
	verify(select.validity.customError);
	verify(select.validationMessage == "Hioo");
	select.setCustomValidity(null);
	verify(select.validity.customError);
	verify(select.validationMessage == "null");
}


html
{
	//! <html>
	//!		<body>
	//!			<form id='myform' action='http://localhost:8080/lek.jsp' method='post'>
	//!				<button id="grej" type="submit"
	//!                   formaction='http://dummy:8080/leka.jsp' formmethod='gET'
	//!                   autofocus>Hipp</button>
	//!			</form>
	//!		</body>
	//! </html>
}

	//          attribute DOMString       accessKey;
	//            attribute boolean         disabled;
	//            attribute DOMString       name;
	//            attribute long            tabIndex;
	//            attribute DOMString       value;
	//
	//   // modified in this specification
	//            attribute DOMString       type;
	//
	//   // new in this specification:
	//            attribute DOMString       action;
	//            attribute DOMString       enctype;
	//            attribute DOMString       method;
	//            attribute DOMString       target;
	//            attribute boolean         autofocus;
	//   readonly attribute HTMLCollection  labels;
	//   readonly attribute RepetitionElement htmlTemplate;
	//   void               blur();
	//   void               focus();
	//
	//   readonly attribute boolean         willValidate;
	//   readonly attribute ValidityState   validity; // all members always set to false
	//   readonly attribute DOMString       validationMessage; // always the empty string
	//   bool               checkValidity(); // returns true
	//   void               setCustomValidity(in DOMString error); // raises NOT_SUPPORTED_ERR

test("HTMLButtonElement.AttributesRead")
{
	var button = document.getElementById("grej");
	verify(button);

	verify(button.validity.valid);
	verify("labels" in button);
	verify(button.labels);
	verify("length" in button.labels);
	verify(button.labels.length == 0);
	verify("autofocus" in button);

	verify("validationMessage" in button);

	verify("type" in button);
	verify(button.type == "submit");
	verify(button.value == "");

	verify(!("replace" in button));

	verify("autofocus" in button);

	verify("blur" in button);
	button.blur();

	verify("focus" in button);
	button.focus();

	verify("willValidate" in button);
	verify(button.willValidate === true);
	verify("validity" in button);
	verify(button.validity);
	verify("valid" in button.validity);
	verify(button.validity.valid == true);
}

test("HTMLButtonElement.AttributesRead#2")
{
	var button = document.getElementById("grej");
	verify(button);

	verify("formAction" in button);
	verify(button.formAction == "http://dummy:8080/leka.jsp");
	verify("formMethod" in button);
	verify(button.formMethod == "get");
	verify(button.getAttribute("formmethod") == "gET");
	verify("formEnctype" in button);
	verify("formTarget" in button);
	verify("formNoValidate" in button);
	verify(!("formNovalidate" in button));
	verify(button.formEnctype == "application/x-www-form-urlencoded");
}

test("HTMLButtonElement.AttributesWrite")
{
	var button = document.getElementById("grej");
	verify(button);

	button.autofocus = false;
	verify (button.autofocus == false);
	verify(!button.hasAttribute("autofocus"));
	button.autofocus = true;
	verify(button.autofocus == true);
	verify(button.getAttribute("autofocus") == "autofocus" || button.getAttribute("autofocus") == "true");

	function test_properties()
	{
		"use strict";
		try
		{
			button.validationMessage = "hfjdhfj";
		}
		catch(e)
		{
		}
		verify(button.validationMessage != "hfjdhfj");

		// Check that it doesn't thow an exception
		button.forms = "jfdkdjfd";

		try
		{
			button.willValidate = "jfdkdjfd";
			verify(!"The line above should have thrown an execption");
		}
		catch (e)
		{
			verify (e instanceof TypeError);
		}

		try
		{
			button.validity = "jfdkdjfd";
			verify(!"The line above should have thrown an execption");
		}
		catch (e)
		{
			verify (e instanceof TypeError);
		}

		try
		{
			button.validationMessage = "jfdkdjfd";
			verify(!"The line above should have thrown an execption");
		}
		catch (e)
		{
			verify (e instanceof TypeError);
		}
	}
	test_properties();
}

test("HTMLButtonElement.Functions")
{
	var button = document.getElementById("grej");
	verify(button);

	verify(button.blur);
	verify(button.focus);
	verify(button.checkValidity);
	verify(button.setCustomValidity);

	button.blur();
	button.blur();
	button.focus();
	button.focus();
	button.blur();

	var res = button.checkValidity();
	verify(res == true);

	try
	{
		button.setCustomValidity("Testvalidation error");
		verify(!"The line above should have thrown an execption");
	}
	catch (e)
	{
		verify (e.code == DOMException.NOT_SUPPORTED_ERR);
	}
	verify("validationMessage" in button);
	verify(button.validationMessage == "");
}

html
{
	//!	<html>
	//!		<body oninvalid="return false;"> <-- to avoid dialogs -->
	//!			<form id="myform" action='http://localhost:8080/lek.jsp' method='post' replace="document" accept="image/*" dummytomakeemacshappy="*/">
	//!				<input id='grej' name='textnamn' min='13' max='120' type='number' pattern='^1+$' autocomplete='on'>
	//!			</form>
	//!		</body>
	//!	</html>
}


test("HTMLInputElement.Functions")
{
	var input = document.getElementById("grej");
	verify(input);

	verify(input.checkValidity());
	var oldValue = input.value;
	input.value = "123";
	if (input.value != oldValue)
	{
		verify(input.value == '123');
		verify(!input.checkValidity());
	}

	oldValue = input.value;
	input.value = 111;
	verify(input.value == '111');
	verify(input.validity.valid);
	verify(input.checkValidity());
}

      //   // new in this specification:
      //   readonly attribute NodeList        forms;
      //            attribute DOMString       min;
      //            attribute DOMString       max;
      //            attribute DOMString       step;
      //            attribute DOMString       pattern;
      //            attribute boolean         required;
      //            attribute boolean         autocomplete;
      //            attribute boolean         autofocus;
      //            attribute DOMString       inputmode;
      //            attribute DOMString       action;
      //            attribute DOMString       enctype;
      //            attribute DOMString       method;
      //            attribute DOMString       target;
      //            attribute DOMString       replace;
      //   readonly attribute HTMLElement     list;
      //   readonly attribute RepetitionElement htmlTemplate;
      //   readonly attribute HTMLCollection  labels;
      //
      //            attribute DOMTimeStamp    valueAsDate;
      //            attribute float           valueAsNumber;
      //
      //   void stepUp(in int n);
      //   void stepDown(in int n);
      //
      //   readonly attribute boolean         willValidate;
      //   readonly attribute ValidityState   validity;
      //   readonly attribute DOMString       validationMessage;
      //   bool               checkValidity();
      //   void               setCustomValidity(in DOMString error);

test("HTMLInputElement.properties")
{
	var input = document.getElementById("grej");
	verify(input);

	verify("min" in input);
	verify("max" in input);
	verify("step" in input);
	verify("pattern" in input);
	verify("required" in input);
	verify("autocomplete" in input);
	verify("autofocus" in input);
	verify("inputmode" in input);
	verify("list" in input);
	verify(!("replace" in input));
	verify(!("selectedOption" in input));

	verify("labels" in input);
	verify(input.labels);
	verify("length" in input.labels);

	verify("stepUp" in input);
	verify("stepDown" in input);
	verify("willValidate" in input);
	verify("validity" in input);
	verify("validationMessage" in input);
	verify("checkValidity" in input);
	verify("setCustomValidity" in input);
}

test("HTMLInputElement.properties#2")
{
	var input = document.getElementById("grej");
	verify(input);

	verify("formAction" in input);
	verify("formEnctype" in input);
	verify("formMethod" in input);
	verify("formTarget" in input);
	verify("formNoValidate" in input);
	verify(!("formNovalidate" in input));
	verify(input.formEnctype == "application/x-www-form-urlencoded");
}

test("HTMLInputElement.properties.valueAs")
{
	var input = document.getElementById("grej");
	verify(input);
	verify("valueAsNumber" in input);
	verify("valueAsDate" in input);
}

test("HTMLFormElement.Attributes")
{
	var myform = document.getElementById("myform");
	if (myform == null)
	{
		alert('Why, why?');
		myform = document.forms[0];
	}

	verify(myform);
	verify(myform.accept == undefined);
	verify(myform.checkValidity);
	verify(myform.checkValidity());
	verify(myform.resetFromData);
	verify(myform.dispatchFormInput);
	verify("action" in myform);
	verify("method" in myform);
	verify("enctype" in myform);

	verify(myform.method == "post");
	myform.method = "posit";
	verify(myform.method == "get");
	verify(myform.getAttribute("method") == "posit");

	verify(myform.enctype == "application/x-www-form-urlencoded");
	myform.enctype = "a";
	verify(myform.enctype == "application/x-www-form-urlencoded");
	verify(myform.getAttribute("enctype") == "a");
}

test("HTMLFormElement.Functions")
{
	var myform = document.getElementById("myform");
	if (myform == null)
	{
		alert('Why, why?');
		myform = document.forms[0];
	}

	verify(myform);
	verify(myform.checkValidity());
	var input = document.getElementById('grej');
	verify(input);
	myform.dispatchFormInput();
}


html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input id="txt" type="text" value="qwerty">
	//! <input id="hide" type="hidden" value="qwerty">
	//! <input id="datum" type="date" value="qwerty">
	//! <input id="telefon" type="tel" value="qwerty">
	//! <input id="webbadress" type="url" value="qwerty">
	//! <input id="vecka" type="week" value="qwerty">
	//! <input id="tid" type="time" value="qwerty">
	//! <input id="epost" type="email" value="qwerty">
	//! <input id="nummer" type="number" value="qwerty">
	//! <input id="Utgangsdatum" type="month" value="qwerty">
	//! <input id="DatumTid" type="datetime" value="qwerty">
	//! <input id="LokalDatumTid" type="datetime-local" value="qwerty">
	//! <input id="intervall" type="range" value="10" min="5" max="200">
	//! </form></body></html>
}

test("HTMLInputElement.date.valueAs")
{
	var control = document.getElementById('datum');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	control.value = "1970-01-02";
	verify(control.value == "1970-01-02");

	var asDate = control.valueAsDate;
	verify(asDate);
	// Verify that it's a Date
	verify(asDate instanceof Date);
	verify("getDay" in asDate);

	// Verify that the Date returned is unique (hence separately mutable.)
	verify(asDate !== control.valueAsDate);

	verify(asDate.getUTCDate() == 2);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	verify(control.valueAsNumber == 86400000);

	control.value = "1971-11-21";
	verify(control.value == "1971-11-21");

	verify(control.valueAsNumber == 59529600000);
	asDate = control.valueAsDate;
	verify(asDate);
	// Verify that it's a Date
	verify(asDate instanceof Date);
	verify("getDay" in asDate);

	// Verify that the Date returned is unique (hence separately mutable.)
	verify(asDate !== control.valueAsDate);

	verify(asDate.getUTCDate() == 21);
	verify(asDate.getUTCMonth() == 10);
	verify(asDate.getUTCFullYear() == 1971);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);
}

test("HTMLInputElement.date.valueAs #2")
{
	var control = document.getElementById('datum');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	var d = new Date(Date.UTC(1970, 0, 2));
	control.valueAsDate = d;
	verify(control.value == "1970-01-02");

	var asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 2);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	verify(control.valueAsNumber == 86400000);

	var d = new Date(Date.UTC(1970, 0, 2));
	control.valueAsNumber = d.valueOf();
	verify(control.value == "1970-01-02");

	var asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 2);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	verify(control.valueAsNumber == 86400000);

	var d = new Date(Date.UTC(1971, 10, 21));
	control.valueAsDate = d;
	verify(control.value == "1971-11-21");

	verify(control.valueAsNumber == 59529600000);
	asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 21);
	verify(asDate.getUTCMonth() == 10);
	verify(asDate.getUTCFullYear() == 1971);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	var d = new Date(Date.UTC(1971, 10, 21));
	control.valueAsNumber = d.valueOf();
	verify(control.value == "1971-11-21");

	verify(control.valueAsNumber == 59529600000);
	asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 21);
	verify(asDate.getUTCMonth() == 10);
	verify(asDate.getUTCFullYear() == 1971);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);
}

test("HTMLInputElement.datetime.valueAs")
{
	var control = document.getElementById('DatumTid');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	control.value = "1970-01-01T00:00:00Z";
	verify(control.value == "1970-01-01T00:00:00Z");

	verify(control.valueAsNumber == 0);
	var asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);


	control.value = "1971-11-21T10:20:30Z";
	verify(control.value == "1971-11-21T10:20:30Z");

	var expected_number = 59529600000+10*3600000 + 20*60000+30*1000;
	verify(control.valueAsNumber == expected_number);
	asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 21);
	verify(asDate.getUTCMonth() == 10);
	verify(asDate.getUTCFullYear() == 1971);
	verify(asDate.getUTCHours() == 10);
	verify(asDate.getUTCMinutes() == 20);
	verify(asDate.getUTCSeconds() == 30);
	verify(asDate.getUTCMilliseconds() == 0);
}

test("HTMLInputElement.datetime.valueAs #2")
{
	var control = document.getElementById('DatumTid');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	var d = new Date("1970-01-01T00:00:00Z");
	control.valueAsDate = d;
	verify(control.value == "1970-01-01T00:00:00Z");

	verify(control.valueAsNumber == 0);
	var asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	var d = new Date("1970-01-01T00:00:00Z");
	control.valueAsNumber = d.valueOf();
	verify(control.value == "1970-01-01T00:00:00Z");

	verify(control.valueAsNumber == 0);
	var asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	var d = new Date("1971-11-21T10:20:30Z");
	control.valueAsDate = d;
	verify(control.value == "1971-11-21T10:20:30Z");

	var expected_number = 59529600000+10*3600000 + 20*60000+30*1000;
	verify(control.valueAsNumber == expected_number);
	asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 21);
	verify(asDate.getUTCMonth() == 10);
	verify(asDate.getUTCFullYear() == 1971);
	verify(asDate.getUTCHours() == 10);
	verify(asDate.getUTCMinutes() == 20);
	verify(asDate.getUTCSeconds() == 30);
	verify(asDate.getUTCMilliseconds() == 0);

	var d = new Date("1971-11-21T10:20:30Z");
	control.valueAsNumber = d.valueOf();
	verify(control.value == "1971-11-21T10:20:30Z");

	var expected_number = 59529600000+10*3600000 + 20*60000+30*1000;
	verify(control.valueAsNumber == expected_number);
	asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 21);
	verify(asDate.getUTCMonth() == 10);
	verify(asDate.getUTCFullYear() == 1971);
	verify(asDate.getUTCHours() == 10);
	verify(asDate.getUTCMinutes() == 20);
	verify(asDate.getUTCSeconds() == 30);
	verify(asDate.getUTCMilliseconds() == 0);
}

test("HTMLInputElement.datetime-local.valueAs")
{
	var control = document.getElementById('LokalDatumTid');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	control.value = "1970-01-01T00:00:00";
	verify(control.value == "1970-01-01T00:00:00");

	verify(control.valueAsNumber == 0);
	var asDate = control.valueAsDate;
	verify(asDate == null);

	control.value = "1971-11-21T10:20:30";
	verify(control.value == "1971-11-21T10:20:30");

	var expected_number = 59529600000+10*3600000 + 20*60000+30*1000;
	verify(control.valueAsNumber == expected_number);
	asDate = control.valueAsDate;
	verify(asDate == null);
}

test("HTMLInputElement.datetime-local.valueAs #2")
{
	var control = document.getElementById('LokalDatumTid');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	// valueAsDate not support for types in this state; verify.
	var d = new Date("1970-01-01T00:00:00");
	var passed = true;
	try {
		control.valueAsDate = d;
	} catch (ex) {
		passed = ex.code == DOMException.INVALID_STATE_ERR;
	}
	verify(passed);

	var d = new Date(1970, 0, 1, 0, 0, 0);
	control.valueAsNumber = d.valueOf();
	verify(control.value == "1970-01-01T00:00:00");

	verify(control.valueAsNumber == 0);
	var asDate = control.valueAsDate;
	verify(asDate == null);

	control.value = "1971-11-21T10:20:30";
	verify(control.value == "1971-11-21T10:20:30");

	var expected_number = 59529600000+10*3600000 + 20*60000+30*1000;
	verify(control.valueAsNumber == expected_number);
	asDate = control.valueAsDate;
	verify(asDate == null);
}

test("HTMLInputElement.time.valueAs")
{
	var control = document.getElementById('tid');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	control.value = "00:00:00";
	verify(control.value == "00:00:00");

	verify(control.valueAsNumber == 0);
	var asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	control.value = "10:20:30";
	verify(control.value == "10:20:30");

	var expected_number = 10*3600000 + 20*60000+30*1000;
	verify(control.valueAsNumber == expected_number);
	asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 10);
	verify(asDate.getUTCMinutes() == 20);
	verify(asDate.getUTCSeconds() == 30);
	verify(asDate.getUTCMilliseconds() == 0);

	control.value = "23:12:10.12";
	verify(control.value == "23:12:10.12");

	var expected_number = 23*3600000 + 12*60000+10*1000 + 120;
	verify(control.valueAsNumber == expected_number);
	asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 23);
	verify(asDate.getUTCMinutes() == 12);
	verify(asDate.getUTCSeconds() == 10);
	verify(asDate.getUTCMilliseconds() == 120);
}

test("HTMLInputElement.time.valueAs #2")
{
	var control = document.getElementById('tid');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	var d = new Date("1970-01-01T00:00:00Z");
	control.valueAsDate = d;
	verify(control.value == "00:00:00");

	verify(control.valueAsNumber == 0);
	var asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	var d = new Date("1970-01-01T00:00:00Z");
	control.valueAsNumber = d.valueOf();
	verify(control.value == "00:00:00");

	verify(control.valueAsNumber == 0);
	var asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	var d = new Date(Date.UTC(0,0,0,10,20,30));
	control.valueAsDate = d;
	verify(control.value == "10:20:30");

	var expected_number = 10*3600000 + 20*60000+30*1000;
	verify(control.valueAsNumber == expected_number);
	asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 10);
	verify(asDate.getUTCMinutes() == 20);
	verify(asDate.getUTCSeconds() == 30);
	verify(asDate.getUTCMilliseconds() == 0);

	var d = new Date(Date.UTC(0,0,0,10,20,30));
	control.valueAsNumber = d.valueOf();
	verify(control.value == "10:20:30");

	var expected_number = 10*3600000 + 20*60000+30*1000;
	verify(control.valueAsNumber == expected_number);
	asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 10);
	verify(asDate.getUTCMinutes() == 20);
	verify(asDate.getUTCSeconds() == 30);
	verify(asDate.getUTCMilliseconds() == 0);
}

test("HTMLInputElement.week.valueAs")
{
	var control = document.getElementById('vecka');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	control.value = "1970-W02";
	verify(control.value == "1970-W02");

	var asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	// I think this is when the second week started (second monday in
	// a week with 4 days in 1970).
	verify(asDate.getUTCDate() == 5);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	verify(control.valueAsNumber == 345600000);
}

test("HTMLInputElement.week.valueAs #2")
{
	var control = document.getElementById('vecka');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	var d = new Date(Date.UTC(1970, 0, 8));
	control.valueAsDate = d;
	verify(control.value == "1970-W02");

	var asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	// I think this is when the second week started (second monday in
	// a week with 4 days in 1970).
	verify(asDate.getUTCDate() == 5);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	verify(control.valueAsNumber == 345600000);

	var d = new Date(Date.UTC(1970, 0, 8));
	control.valueAsNumber = d.valueOf();
	verify(control.value == "1970-W02");

	var asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	// I think this is when the second week started (second monday in
	// a week with 4 days in 1970).
	verify(asDate.getUTCDate() == 5);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	verify(control.valueAsNumber == 345600000);
}

test("HTMLInputElement.month.valueAs")
{
	var control = document.getElementById('Utgangsdatum');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	control.value = "1970-01";
	verify(control.value == "1970-01");

	var asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	// Don't know when the first week started
	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	verify(control.valueAsNumber == 0);

	control.value = "1970-02";
	verify(control.value == "1970-02");

	asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 1);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	verify(control.valueAsNumber == 2678400000);

	control.value = "2012-09";
	verify(control.value == "2012-09");

	asDate = control.valueAsDate;
	verify(asDate);
	verify("getDay" in asDate); // verify that it's a Date

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 8);
	verify(asDate.getUTCFullYear() == 2012);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);
}

test("HTMLInputElement.month.valueAs #2")
{
	var control = document.getElementById('Utgangsdatum');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	var d = new Date(Date.UTC(1970, 0));
	control.valueAsDate = d;
	verify(control.value == "1970-01");

	var asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	// Don't know when the first week started
	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	verify(control.valueAsNumber == 0);

	var d = new Date(Date.UTC(1970, 0));
	control.valueAsNumber = d.valueOf();
	verify(control.value == "1970-01");

	var asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	// Don't know when the first week started
	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 0);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	verify(control.valueAsNumber == 0);

	var d = new Date(Date.UTC(1970, 1));
	control.valueAsDate = d;
	verify(control.value == "1970-02");

	asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 1);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	verify(control.valueAsNumber == 2678400000);

	var d = new Date(Date.UTC(1970, 1));
	control.valueAsNumber = d.valueOf();
	verify(control.value == "1970-02");

	asDate = control.valueAsDate;
	verify(asDate);
	verify(asDate instanceof Date); // verify that it's a Date
	verify("getDay" in asDate);

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 1);
	verify(asDate.getUTCFullYear() == 1970);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	verify(control.valueAsNumber == 2678400000);

	var d = new Date(2012, 9);
	control.valueAsDate = d;
	verify(control.value == "2012-09");

	asDate = control.valueAsDate;
	verify(asDate);
	verify("getDay" in asDate); // verify that it's a Date

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 8);
	verify(asDate.getUTCFullYear() == 2012);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);

	var d = new Date(2012, 9);
	control.valueAsNumber = d.valueOf();
	verify(control.value == "2012-09");

	asDate = control.valueAsDate;
	verify(asDate);
	verify("getDay" in asDate); // verify that it's a Date

	verify(asDate.getUTCDate() == 1);
	verify(asDate.getUTCMonth() == 8);
	verify(asDate.getUTCFullYear() == 2012);
	verify(asDate.getUTCHours() == 0);
	verify(asDate.getUTCMinutes() == 0);
	verify(asDate.getUTCSeconds() == 0);
	verify(asDate.getUTCMilliseconds() == 0);
}

test("HTMLInputElement.number.valueAs")
{
	var control = document.getElementById('nummer');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	control.value = "21970";
	verify(control.value == "21970");

	var asDate = control.valueAsDate;
	verify(asDate == null);
	verify(control.valueAsNumber == 21970);
}

test("HTMLInputElement.number.valueAs #2")
{
	var control = document.getElementById('nummer');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	// valueAsDate not support for types in this state; verify.
	var d = new Date("1970-01-01T00:00:00Z");
	var passed = true;
	try {
		control.valueAsDate = d;
	} catch (ex) {
		passed = ex.code == DOMException.INVALID_STATE_ERR;
	}
	verify(passed);

	control.valueAsNumber = "21970";
	verify(control.value == "21970");

	var asDate = control.valueAsDate;
	verify(asDate == null);
	verify(control.valueAsNumber == 21970);
}

test("HTMLInputElement.range.valueAs")
{
	var control = document.getElementById('intervall');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	control.value = "70";
	verify(control.value == "70");

	var asDate = control.valueAsDate;
	verify(asDate == null);
	verify(control.valueAsNumber == 70);
	verify(control.valueAsDate == null);
}

test("HTMLInputElement.range.valueAs #2")
{
	var control = document.getElementById('intervall');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	// valueAsDate not support for types in this state; verify.
	var d = new Date("1970-01-01T00:00:00Z");
	var passed = true;
	try {
		control.valueAsDate = d;
	} catch (ex) {
		passed = ex.code == DOMException.INVALID_STATE_ERR;
	}
	verify(passed);

	control.valueAsNumber = 119;
	verify(control.value == "119");

	var asDate = control.valueAsDate;
	verify(asDate == null);
	verify(control.valueAsNumber == 119);
	verify(control.valueAsDate == null);
}

test("HTMLInputElement.email.valueAs")
{
	var control = document.getElementById('epost');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	control.value = "kalle@choklad.se";
	verify(control.value == "kalle@choklad.se");
	verify(control.valueAsDate == null);
	verify(String(control.valueAsNumber) == "NaN");

	control.value = "";
	verify(control.value == "");
	verify(control.valueAsDate == null);
	verify(String(control.valueAsNumber) == "NaN");

	// valueAsDate not support for types in this state; verify.
	var d = new Date("1970-01-01T00:00:00Z");
	var passed = true;
	try {
		control.valueAsDate = d;
	} catch (ex) {
		passed = ex.code == DOMException.INVALID_STATE_ERR;
	}
	verify(passed);
}

test("HTMLInputElement.text.valueAs")
{
	var control = document.getElementById('txt');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	control.value = "kalle@choklad.se";
	verify(control.value == "kalle@choklad.se");
	verify(control.valueAsDate == null);
	verify(String(control.valueAsNumber) == "NaN");

	control.value = "";
	verify(control.value == "");
	verify(control.valueAsDate == null);
	verify(String(control.valueAsNumber) == "NaN");

	control.value = "54";
	verify(control.value == "54");
	verify(control.valueAsDate == null);
	verify(isNaN(control.valueAsNumber));

	control.value = "   54   ";
	verify(control.value == "   54   ");
	verify(control.valueAsDate == null);
	verify(isNaN(control.valueAsNumber));

	control.value = "Infinity";
	verify(control.value == "Infinity");
	verify(control.valueAsDate == null);
	verify(String(control.valueAsNumber) == "NaN");

	control.value = "  ";
	verify(control.value == "  ");
	verify(control.valueAsDate == null);
	verify(String(control.valueAsNumber) == "NaN");

	// valueAsDate not support for types in this state; verify.
	var d = new Date("1970-01-01T00:00:00Z");
	var passed = true;
	try {
		control.valueAsDate = d;
	} catch (ex) {
		passed = ex.code == DOMException.INVALID_STATE_ERR;
	}
	verify(passed);
}

test("HTMLInputElement.hidden.valueAs")
{
	var control = document.getElementById('hide');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	control.value = "kalle@choklad.se";
	verify(control.value == "kalle@choklad.se");
	verify(control.valueAsDate == null);
	verify(String(control.valueAsNumber) == "NaN");

	control.value = "";
	verify(control.value == "");
	verify(control.valueAsDate == null);
	verify(String(control.valueAsNumber) == "NaN");

	// valueAsDate not support for types in this state; verify.
	var d = new Date("1970-01-01T00:00:00Z");
	var passed = true;
	try {
		control.valueAsDate = d;
	} catch (ex) {
		passed = ex.code == DOMException.INVALID_STATE_ERR;
	}
	verify(passed);
}

test("HTMLInputElement.url.valueAs")
{
	var control = document.getElementById('webbadress');
	verify(control);

	verify("valueAsDate" in control);
	verify("valueAsNumber" in control);

	control.value = "http://www.opera.com/";
	verify(control.value == "http://www.opera.com/");
	verify(control.valueAsDate == null);
	verify(String(control.valueAsNumber) == "NaN");

	control.value = "htfdf";
	verify(control.value == "htfdf");
	verify(control.valueAsDate == null);
	verify(String(control.valueAsNumber) == "NaN");

	control.value = "";
	verify(control.value == "");
	verify(control.valueAsDate == null);
	verify(String(control.valueAsNumber) == "NaN");

	// valueAsDate not support for types in this state; verify.
	var d = new Date("1970-01-01T00:00:00Z");
	var passed = true;
	try {
		control.valueAsDate = d;
	} catch (ex) {
		passed = ex.code == DOMException.INVALID_STATE_ERR;
	}
	verify(passed);
}


html
{
	//! <html><head><title>stepUp, stepDown</title></head><body><form>
	//! <input type='time' id='time-input'></input>
	//! <input type='week' id='week-input'></input>
	//! <input type='month' id='month-input'></input>
	//! <input type='date' id='date-input'></input>
	//! <input type='datetime' id='datetime-input'></input>
	//! <input type='datetime-local' id='datetime-local-input'></input>
	//! <input type='number' min='2' max='10' step='2' id='number-input'></input>
	//! <input type='number' min='2' max='10' step='aNy' id='number-any-input'></input>
	//! <input type='range' min='2' max='10' step='2' id='range-input'></input>
	//! <input type='text' id='text-input'></input>
	//! </form></body></html>
}

test("HTMLInputElement.stepUp/Down")
{
	var control;
	function testMe(values)
	{
		var i = 0;
		var original = values[i++];
		control.value = original;
		verify(control.value == original);
		control.stepUp();
		verify(control.value == values[i++]);
		control.stepUp(1);
		verify(control.value == values[i++]);
		control.stepDown(1);
		verify(control.value == values[i++]);
		control.stepUp(-1);
		verify(control.value == values[i++]);
		// step amount is truncated.
		control.stepUp(1.5);
		verify(control.value == values[i++]);
		control.stepUp(1.51);
		verify(control.value == values[i++]);
		control.stepUp(1.49);
		verify(control.value == values[i++]);
	}

	control = document.getElementById('time-input');
	testMe(["20:12:40", "20:13:40", "20:14:40", "20:13:40", "20:12:40", "20:13:40", "20:14:40", "20:15:40"]);

	control = document.getElementById('week-input');
	testMe(["2011-W02", "2011-W03", "2011-W04", "2011-W03", "2011-W02", "2011-W03", "2011-W04", "2011-W05"]);
	control.stepDown(20);
	verify(control.value == "2010-W37");

	control = document.getElementById('month-input');
	testMe(["2011-04", "2011-05", "2011-06", "2011-05", "2011-04", "2011-05", "2011-06", "2011-07"]);
	control.stepDown(8);
	verify(control.value == "2010-11");

	control = document.getElementById('date-input');
	testMe(["2011-04-05", "2011-04-06", "2011-04-07", "2011-04-06", "2011-04-05", "2011-04-06", "2011-04-07", "2011-04-08"]);
	control.stepDown(8);
	verify(control.value == "2011-03-31");

	control = document.getElementById('datetime-input');
	testMe(["2011-04-05T23:12:10Z", "2011-04-05T23:13:10Z", "2011-04-05T23:14:10Z", "2011-04-05T23:13:10Z", "2011-04-05T23:12:10Z",
	        "2011-04-05T23:13:10Z", "2011-04-05T23:14:10Z", "2011-04-05T23:15:10Z"]);
	control.stepDown(16);
	verify(control.value == "2011-04-05T22:59:10Z");

	control = document.getElementById('datetime-local-input');
	testMe(["2011-04-05T23:12:10", "2011-04-05T23:13:10", "2011-04-05T23:14:10", "2011-04-05T23:13:10", "2011-04-05T23:12:10",
	        "2011-04-05T23:13:10", "2011-04-05T23:14:10", "2011-04-05T23:15:10"]);
	control.stepDown(16);
	verify(control.value == "2011-04-05T22:59:10");

	// step = 2
	control = document.getElementById('number-input');
	testMe(["4", 6, 8, 6, 4, 6, 8, 10]);
	control.stepDown(4);
	verify(control.value == 2);

	// step = any
	control = document.getElementById('number-any-input');
	control.value = "4";
	verify(control.value == "4");
	var passed = true;
	try {
		control.stepUp();
	} catch (ex) {
		passed = ex.code == DOMException.INVALID_STATE_ERR;
	}
	verify(passed);

	// range, step = 2
	control = document.getElementById('range-input');
	testMe(["4", 6, 8, 6, 4, 6, 8, 10]);
	control.stepDown(4);
	verify(control.value == 2);

	control = document.getElementById('text-input');
	control.value = "4";
	verify(control.value == "4");
	var passed = true;
	try {
		control.stepUp();
	} catch (ex) {
		passed = ex.code == DOMException.INVALID_STATE_ERR;
	}
	verify(passed);
}

html
{
	//! <html><body><datalist id="list">
	//! <option>Foo<option>Bar</datalist>
	//! <input id="input" list="list">
	//! <input id="brokeninput" list="listbroken">
	//! <div id="listbroken2">This is not a list</div>
	//! <input id="brokeninput2" list="listbroken2">
	//! </form></body></html>
}

test("HTMLDataListElement.DOM#1")
{
	var datalist = document.getElementById("list");
	verify(datalist);
	verify("options" in datalist);
	verify(datalist.options);
	verify("length" in datalist.options);
	verify(datalist.options.length == 2);
}

test("HTMLInputElement.list")
{
	var datalist = document.getElementById("list");
	verify(datalist);

	var input = document.getElementById("input");
	verify(input);
	verify("list" in input);
	verify(input.list);
	verify(input.list == datalist);

	input = document.getElementById("brokeninput");
	verify(input);
	verify("list" in input);
	verify(input.list == null);

	input = document.getElementById("brokeninput2");
	verify(input);
	verify("list" in input);
	verify(input.list == null);
}

html
{
	//! <html><body><form>
	//!  <p>
	//!   <input name="a" type="number" precision="float" value="0"> *
	//!   <input name="b" type="number" precision="float" value="0"> =
	//!   <output name="result" onformchange="value = a.value * b.value">0</output>
	//!  </p>
	//! </form></body></html>
}

test("HTMLOutputElement.DOM#1")
{
	var f = document.forms[0];
	verify(f.result);
	var o = f.result;
	verify(o.form);
	verify(o.form == f);
	verify(o.name == 'result');
	verify(o.defaultValue == '0');
	verify(o.value == '0');
	o.value = '1';
	verify(o.defaultValue == '0');
	verify(o.value == '1');

	verify("checkValidity" in o);
	verify("setCustomValidity" in o);
}

html
{
	//! <html><body><form>
	//!  <p>
	//!   <output name="result"
	//!          onformchange="value = a.value * b.value">0<b>1</b></output>
	//!  </p>
	//! </form></body></html>
}

/**
 * Test bad contents.
 */
test("HTMLOutputElement.DOM#2")
{
	var f = document.forms[0];
	verify(f.result);
	var o = f.result;
	verify(o.form);
	verify(o.form == f);
	verify(o.name == 'result');
	verify(o.value == '01');
	verify(o.defaultValue == '01');
	o.value = 'kalle';
	verify(o.value == 'kalle');
	verify(o.defaultValue == '01');
}


      //   // new in this specification
      //   readonly attribute NodeList        forms;
      //   readonly attribute HTMLCollection  elements;
      //            attribute boolean         disabled;

html
{
	//! <html><body><form>
	//!  <fieldset id="hej" name="hepp">
	//!   <input name="a" type="number" value="0" onformchange="value=1"> *
	//!   <input name="b" type="number" value="0" onformchange="value=1">
	//!  </fieldset>
	//! </form></body></html>

}
test("WebForms2.Fieldset#1")
{
	var f = document.forms[0];
//	verify(f.hepp);
//	var fs = f.hepp;
	verify(document.getElementById("hej"));
	var fs = document.getElementById("hej");
	verify(document.getElementById("hej") == fs);
	verify("disabled" in fs);
	verify(fs.disabled == false);
	fs.disabled = true;
	verify(fs.disabled == true);

	verify("elements" in fs);
	verify(fs.elements);
	verify("length" in fs.elements);
	verify(fs.elements.length == 2);
}

html
{
	//! <html><body><form>
	//!  <fieldset id="hej" name="hepp" disabled="javisst">
	//!   <input name="a" type="number" value="0" onformchange="value=1"> *
	//!   <input name="b" type="number" value="0" onformchange="value=1">
	//!  </fieldset>
	//! </form></body></html>

}

test("WebForms2.Fieldset#2")
{
	var f = document.forms[0];
//	verify(f.hepp);
//	var fs = f.hepp;
	verify(document.getElementById("hej"));
	var fs = document.getElementById("hej");
	verify(document.getElementById("hej") == fs);
	verify(fs.disabled == true);
	fs.disabled = false;
	verify(fs.disabled == false);
}

html
{
	//! <html><body><form>
	//!  <input name="b" type="submit" formenctype="myEncType" formmethod="SWIM"
	//!         formaction="http://atlantic/ocean" replace="document">
	//! </form></body></html>
}

test("WebForms2.SubmitInputButton")
{
	var f = document.forms[0];
	verify(f);
	verify(f.b);
	var b = f.b;
	verify(b.formAction);
	verify(b.formAction == "http://atlantic/ocean");
	verify(b.formEnctype);
	verify(b.formEnctype == "application/x-www-form-urlencoded");
	verify(b.getAttribute("formenctype") == "myEncType");
	verify(b.formMethod);
	verify(b.formMethod == "get");
	verify(b.getAttribute("formmethod") == "SWIM");
	verify(!b.replace);
	verify(b.labels);
	verify(b.labels.length == 0);
	verify(b.value == "");
}

test("WebForms2.HasFeature")
{
	verify(!document.implementation.hasFeature("WebForms", "2.0"));
	verify(!document.implementation.hasFeature("WebForms2", "2.0"));
	verify(!document.implementation.hasFeature("WebForms2", "1.0"));
	verify(!document.implementation.hasFeature("WebForms", "1.0"));
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="datum" type="date" value="qwerty">
	//! <input name="telefon" type="tel" value="qwerty">
	//! <input name="webbadress" type="url" value="qwerty">
	//! <input name="vecka" type="week" value="qwerty">
	//! <input name="tid" type="time" value="qwerty">
	//! <input name="epost" type="email" value="qwerty">
	//! <input name="nummer" type="number" value="qwerty">
	//! <input name="Utgangsdatum" type="month" value="qwerty">
	//! <input name="DatumTid" type="datetime" value="qwerty">
	//! <input name="LokalDatumTid" type="datetime-local" value="qwerty">
	//! </form></body></html>
}

test("WebForms2.defaultValue")
{
	// defaultValue should continue the value attribute even if it is illegal
	var f = document.forms[0];
	verify(f.datum);
	verify(f.telefon);
	verify(f.webbadress);
	verify(f.vecka);
	verify(f.tid);
	verify(f.epost);
	verify(f.nummer);
	verify(f.Utgangsdatum);
	verify(f.DatumTid);
	verify(f.LokalDatumTid);

	verify(f.datum.type == 'date');
	verify(f.telefon.type == 'tel');
	verify(f.webbadress.type == 'url');
	verify(f.vecka.type == 'week');
	verify(f.tid.type == 'time');
	verify(f.epost.type == 'email');
	verify(f.nummer.type == 'number');
	verify(f.Utgangsdatum.type == 'month');
	verify(f.DatumTid.type == 'datetime');
	verify(f.LokalDatumTid.type == 'datetime-local');

	verify(f.datum.defaultValue == "qwerty");
	verify(f.telefon.defaultValue == "qwerty");
	verify(f.webbadress.defaultValue == "qwerty");
	verify(f.vecka.defaultValue == "qwerty");
	verify(f.tid.defaultValue == "qwerty");
	verify(f.epost.defaultValue == "qwerty");
	verify(f.nummer.defaultValue == "qwerty");
	verify(f.Utgangsdatum.defaultValue == "qwerty");
	verify(f.DatumTid.defaultValue == "qwerty");
	verify(f.LokalDatumTid.defaultValue == "qwerty");
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="nummer" type="number" min="3" max="7" value="4">
	//! </form></body></html>
}

test("WebForms2.ValidityState")
{
	var f = document.forms[0];
	verify(f.nummer);
	var n = f.nummer;
	verify("validity" in n);
	verify(n.validity);
	var val = n.validity;
	verify("typeMismatch" in val);
	verify("stepMismatch" in val);
	verify("rangeUnderflow" in val);
	verify("rangeOverflow" in val);
	verify("tooLong" in val);
	verify("patternMismatch" in val);
	verify("valueMissing" in val);
	verify("customError" in val);
	verify("valid" in val);
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <label id="hej">
	//! <input name="nummer" type="number" min="3" max="7" value="4">
	//! </label>
	//! </form></body></html>
}

test("HTMLLabelElement.properties")
{
	var label = document.getElementById("hej");
	verify(label);

	verify("control" in label);
}

html
{
	//! <!DOCTYPE html>
	// !<html lang="en">
	//! <head>
	//! <title>repetitionBlocks simple test</title>
	//! </head>
	//! <body>
	//! <p>There should be two lines saying "PASS" below:</p>
	//! <div>
	//! <p repeat="template" repeat-start="2" id="t">FAIL</p>
	//! </div>
	//! </body>
	//! </html>
}

test("Crash bug 206118")
{
	var t = document.getElementById('t');
	verify (t);
	if (t.repetitionBlocks && t.repetitionBlocks.length)
		for(i = 0; i < t.repetitionBlocks.length; i++)
			t.repetitionBlocks[i].firstChild.data = "PASS";
}

html
{
	//! <body><input formaction="a" formenctype="b" formmethod="c" formnovalidate formTarget="d">
}

test("formPrefixes")
{
	var input = document.getElementsByTagName("input")[0];
	verify(input);

	verify("formAction" in input);
	verify("formEnctype" in input);
	verify("formMethod" in input);
	verify("formNoValidate" in input);
	verify(!("formNovalidate" in input));
	verify("formTarget" in input);

	verify(input.formAction == "a");
	verify(input.formEnctype == "application/x-www-form-urlencoded");
	verify(input.getAttribute("formenctype") == "b");

	input.formEnctype = "c";
	verify(input.formEnctype == "application/x-www-form-urlencoded");
	verify(input.getAttribute("formenctype") == "c");

	input.formEnctype = "TEXT/plain";
	verify(input.formEnctype == "text/plain");
	verify(input.getAttribute("formenctype") == "TEXT/plain");

	verify(input.formMethod == "get");
	verify(input.getAttribute("formmethod") == "c");

	input.formMethod = "got";
	verify(input.formMethod == "get");
	verify(input.getAttribute("formmethod") == "got");

	input.formMethod = "GET";
	verify(input.formMethod == "get");
	verify(input.getAttribute("formmethod") == "GET");

	verify(input.formNoValidate == true);
	verify(input.formTarget == "d");
}

html
{
	//! <html><body><form>
	//!  <p>
	//!   <progress value="0" id="progress"></progress>
	//!  </p>
	//! </form></body></html>
}

test("HTMLProgressElement.AttributesRead")
{
	var elm = document.getElementById("progress");
	verify(elm);

	verify(elm.value == 0);
	verify(elm.max == 1);
	verify(elm.labels);
	verify(elm.form);
}

html
{
	//! <html><body><form>
	//!  <p>
	//!   <meter value="0" id="meter"></meter>
	//!  </p>
	//! </form></body></html>
}

test("HTMLProgressElement.AttributesRead")
{
	var elm = document.getElementById("meter");
	verify(elm);

	verify(elm.value == 0);
	verify(elm.min == 0);
	verify(elm.max == 1);
	verify(elm.low == 0);
	verify(elm.high == 1);
	verify(elm.optimum == 0.5);
	verify(elm.labels);
	verify(elm.form);
}

html
{
	//! <html><body><form>
	//!  <p>
	//!   <input type="range" min="10" max="100" value="20" id="range"></input
	//!  </p>
	//! </form></body></html>
}

test("input type=range")
{
	var elm = document.getElementById("range");
	verify(elm);

	verify(elm.value == 20);
	verify(elm.min == 10);
	verify(elm.max == 100);
	elm.min = 40;
	verify(elm.min == 40);
	verify(elm.value == 40);
	elm.max = 140;
	verify(elm.max == 140);
	verify(elm.value == 40);
	elm.value = 130;
	verify(elm.value == 130);

	elm.removeAttribute("min");
	verify(elm.getAttribute('min') === null);
	verify(elm.min === '');
	elm.removeAttribute("max");
	verify(elm.getAttribute('max') === null);
	verify(elm.max === '');
	verify(elm.value == 100);
}
