/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "DOM.Widget.W3C";

require GADGET_SUPPORT;

include "modules/gadgets/gadget_selftest_utils.h";

global
{
	OpGadget* g_gadget;
	GadgetSelftestUtils g_utils;
}


exit
{
	g_utils.UnloadGadget();
}

table dummy1(const char *) filelist "w3c_widget.wgt" recursively;


// Initialization
test("Load W3C widget")
	file wgt_file "w3c_widget.wgt";
	async;
{
	OP_GADGET_STATUS status = g_utils.LoadGadgetForSelftest(wgt_file, URL_GADGET_INSTALL_CONTENT, &g_gadget);

	if (OpStatus::IsError(status))
		ST_failed("Unable to install test widget, status: %d", status);
	else if (status != OpGadgetStatus::OK_SIGNATURE_VERIFICATION_IN_PROGRESS)
		ST_passed();
}

test ("Test widget object exists")
	language ecmascript;
	require success "Load W3C widget";
{
	verify(widget);
}

table expected_properties
{
	// property_name , expected_value
	{ "author", "Core Extapps" },
	{ "authorEmail", "core-extapps@opera.com" },
	{ "authorHref", "http://www.opera.com" },
	{ "description", "Test desc" },
	{ "id", "http://com.opera.testwidget" },
	{ "name", "W3C Test Widget" },
	{ "shortName", "test" },
	{ "preferences", undefined },
	{ "version", "0.0.1" },
	{ "height", undefined },
	{ "width", undefined },
	{ "dumpWidget", undefined } // extension for selftest only
	// If any new properties are specified for widgets specify them here
}

foreach (property_name, expected_value) from expected_properties
{
	test("Test existence of widget API")
		language ecmascript;
		require success "Test widget object exists";
	{
		verify(property_name in widget);
		if (expected_value != null)
			verify(widget[property_name] == expected_value);
	}
}

foreach (property_name, unused) from expected_properties
{
	test ("Prepare expected_properties_array")
		language ecmascript;
		require success "Test widget object exists";
	{
		// store the expected properties in global_object
		if (!window.expected_widget_properties)
			window.expected_widget_properties = new Object;
		window.expected_widget_properties[property_name] = 1;
	}
}

test ("Test nothing except expected widget api in widget object")
	language ecmascript;
	require success "Test widget object exists";
{
	for (i in widget)
	{
		verify(i in window.expected_widget_properties);
	}
}


