// -*- Mode: c++; indent-tabs-mode: t; c-basic-offset: 4 -*-
group "DOM.HTML.dndevents";
require init;
language ecmascript;
require DRAG_SUPPORT;

html
{
	//! <div draggable></div>
	//! <span></span>
	//! <script>
	//! var create_DragEvent = function(type)
	//! {
	//! 	var event1 = document.createEvent("DragEvent");
	//! 	var an_object = {};
	//! 	event1.initDragEvent(type, true, true, null, 1, 123, 456, 789, 234, false, false, false, false, 0, null, an_object);
	//! 	return event1;
	//! }
	//! </script>
}

test("dnd objects writable in ondragstart")
	async;
{
	var ok_dragstart = false;
	var dragged = document.querySelector('div');
	dragged.ondragstart = function(e)
	{
		for (var i = e.dataTransfer.items.length; i > 0; i--) // Temporary.  Remove, when data under dataTrasfer is not global.
			delete e.dataTransfer.items[i-1];

		ok_dragstart = true;
		e.dataTransfer.dropEffect = 'move';
		e.dataTransfer.effectAllowed = 'copyLink';
		e.dataTransfer.items = 7; // Read-only.
		e.dataTransfer.types = 'types'; // Read-only.
		e.dataTransfer.files = 'files'; // Read-only.
		ok_dragstart = ok_dragstart && e.dataTransfer.dropEffect == 'move';
		ok_dragstart = ok_dragstart && e.dataTransfer.effectAllowed == 'copyLink';
		ok_dragstart = ok_dragstart && e.dataTransfer.items != 7;
		ok_dragstart = ok_dragstart && e.dataTransfer.types != 'types';
		ok_dragstart = ok_dragstart && e.dataTransfer.files != 'files';

		e.dataTransfer.items.add('mokry smok', 'zmok');
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 1;
		e.dataTransfer.items.length = 7; // Read-only.
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 1;
		e.dataTransfer.items.clear();
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 0;
		e.dataTransfer.items.add('mokry smok', 'zmok');
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 1;

		e.dataTransfer.items[0].kind = 'kind'; // Read-only.
		ok_dragstart = ok_dragstart && e.dataTransfer.items[0].kind != 'kind';
		e.dataTransfer.items[0].type = 'type'; // Read-only.
		ok_dragstart = ok_dragstart && e.dataTransfer.items[0].type != 'type';
	}
	var dragstart = create_DragEvent('dragstart');
	dragged.dispatchEvent(dragstart);
	var timeoutMs = 500;
	var timeoutId = setTimeout(function()
	{
		if (ok_dragstart)
			ST_passed();
		else
			ST_failed("Test dnd objects writable in ondragstart: ondragstart failed.","","");
	}, timeoutMs);
}

test("dnd objects protected in ondrag")
	async;
{
	var ok_dragstart = false;
	var dragged = document.querySelector('div');
	var second_element = document.querySelector('span');
	dragged.ondragstart = function(e)
	{
		for (var i = e.dataTransfer.items.length; i > 0; i--) // Temporary.  Remove, when data under dataTrasfer is not global.
			delete e.dataTransfer.items[i-1];
		ok_dragstart = true;
		e.dataTransfer.effectAllowed = 'linkMove';
		ok_dragstart = ok_dragstart && e.dataTransfer.effectAllowed == 'linkMove';
		e.dataTransfer.items.add('mokry smok', 'zmok');
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 1;
	}

	var ok_drag = false;
	dragged.ondrag = function(e)
	{
		ok_drag = true;

		// State of dataTransfer.effectAllowed is really unknown.  If
		// dataTransfer is created separately for every synthetic drag event,
		// then effectAllowed probably should have "uninitialized" value.
		ok_drag = ok_drag && e.dataTransfer.effectAllowed == 'uninitialized';
		ok_drag = ok_drag && e.dataTransfer.dropEffect == 'none';

		e.dataTransfer.dropEffect = 'move';
		ok_drag = ok_drag && e.dataTransfer.dropEffect == 'move';

		e.dataTransfer.items = 7; // Read-only.
		e.dataTransfer.types = 'types'; // Read-only.
		e.dataTransfer.files = 'files'; // Read-only.
		ok_drag = ok_drag && e.dataTransfer.items != 7;
		ok_drag = ok_drag && e.dataTransfer.types != 'types';
		ok_drag = ok_drag && e.dataTransfer.files != 'files';

		e.dataTransfer.setDragImage(second_element, 0, 0); // Nothing happens.
		e.dataTransfer.addElement(second_element); // Nothing happens.

		var len = e.dataTransfer.types.length;
		ok_drag = ok_drag && e.dataTransfer.types.length == 0;
		ok_drag = ok_drag && typeof e.dataTransfer.types.length == 'number';

		e.dataTransfer.setData('mokry smok', 'zmok');  // Nothing happens.
		ok_drag = ok_drag && (len == e.dataTransfer.types.length);

		e.dataTransfer.clearData();  // Nothing happens.
		ok_drag = ok_drag && (len == e.dataTransfer.types.length);

		ok_drag = ok_drag && e.dataTransfer.files.length == 0;
		ok_drag = ok_drag && typeof e.dataTransfer.files.length == 'number';

		// .items.
		var items_len = e.dataTransfer.items.length;
		var add_ret = e.dataTransfer.items.add('mokry smok', 'zmok');
		ok_drag = ok_drag && add_ret === null;
		ok_drag = ok_drag && e.dataTransfer.items.length == items_len; // No change.
		e.dataTransfer.items.length = 7; // Read-only.
		ok_drag = ok_drag && e.dataTransfer.items.length == items_len;
		e.dataTransfer.items.clear();
		ok_drag = ok_drag && e.dataTransfer.items.length == items_len; // No change.

		// It's impossible to test other members of dataTransfer.items in handler of synthetic event.
	}

	var dragstart = create_DragEvent('dragstart');
	dragged.dispatchEvent(dragstart);

	var drag = create_DragEvent('drag');
	dragged.dispatchEvent(drag);
	var timeoutMs = 500;
	var timeoutId = setTimeout(function()
	{
		if (!ok_dragstart)
			ST_failed("Test dnd objects writable in ondrag: ondragstart failed.","","");
		else if (!ok_drag)
			ST_failed("Test dnd objects writable in ondrag: ondrag failed.","","");
		else
			ST_passed();
	}, timeoutMs);
}


