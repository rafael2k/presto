// -*- Mode: c++; indent-tabs-mode: t; c-basic-offset: 4 -*-
group "DOM.HTML.DataTransfer";
require init;
language ecmascript;
require DRAG_SUPPORT;

html
{
	//!
	//! <script>
	//! var create_dataTransfer = function()
	//! {
	//! 	var event1 = document.createEvent("DragEvent");
	//! 	var an_object = {};
	//! 	event1.initDragEvent("type", true, true, null, 1, 123, 456, 789, 234, false, false, false, false, 0, null, an_object);
	//! 	return event1.dataTransfer;
	//! }
	//! </script>
}

test("Constructor")
{
	verify("DataTransfer" in window);
	verify(DataTransfer.prototype);
	verify(DataTransfer.prototype.constructor);
	verify(DataTransfer.prototype.constructor === DataTransfer);
}
test("properties")
{
	var datatransfer = null;
	datatransfer = create_dataTransfer();
	verify(datatransfer);
	verify("dropEffect" in datatransfer);
	verify("effectAllowed" in datatransfer);
	verify("items" in datatransfer);
	verify("setDragImage" in datatransfer);
	verify("addElement" in datatransfer);
	verify("types" in datatransfer);
	verify("getData" in datatransfer);
	verify("setData" in datatransfer);
	verify("clearData" in datatransfer);
	verify("files" in datatransfer);
}

test("instanceof")
{
	var datatransfer = null;
	datatransfer = create_dataTransfer();
	verify(window.DataTransfer);
	verify(datatransfer instanceof DataTransfer);
}

test("toString")
{
	var datatransfer = null;
	datatransfer = create_dataTransfer();
	verify(datatransfer.toString() == "[object DataTransfer]");
}

test("dropEffect")
{
	var datatransfer = null;
	datatransfer = create_dataTransfer();
	verify(datatransfer);
	verify("dropEffect" in datatransfer);
	verify(typeof datatransfer.dropEffect == "string");

	// It's really unspecified, what's initial dropEffect value for unknown
	// DragEvent, but it should be something from the set: "none", "copy",
	// "link", or "move".  Let's suppose it's the same as for dragstart, that's "none".
	verify(datatransfer.dropEffect == 'none');
	datatransfer.dropEffect = 'de';
	verify(datatransfer.dropEffect == 'none');
	datatransfer.dropEffect = 'copy';
	verify(datatransfer.dropEffect == 'copy');
	datatransfer.dropEffect = 'none';
	verify(datatransfer.dropEffect == 'none');
	datatransfer.dropEffect = 'link';
	verify(datatransfer.dropEffect == 'link');
	datatransfer.dropEffect = 'move';
	verify(datatransfer.dropEffect == 'move');
	datatransfer.dropEffect = 'de';
	verify(datatransfer.dropEffect == 'move');
}

test("effectAllowed")
{
	var dataTransfer = null;
	dataTransfer = create_dataTransfer();
	verify(dataTransfer);
	verify("effectAllowed" in dataTransfer);
	verify(typeof dataTransfer.effectAllowed == "string");
	verify(dataTransfer.effectAllowed == "uninitialized");

	// Not in read-write mode (i.e. not in ondragstart handler)
	// it's not allowed to change effects allowed.
	dataTransfer.effectAllowed = 'ea';
	verify(dataTransfer.effectAllowed == 'uninitialized');
	dataTransfer.effectAllowed = 'none';
	verify(dataTransfer.effectAllowed == 'uninitialized');
	dataTransfer.effectAllowed = 'copy';
	verify(dataTransfer.effectAllowed == 'uninitialized');
	dataTransfer.effectAllowed = 'copyLink';
	verify(dataTransfer.effectAllowed == 'uninitialized');
	dataTransfer.effectAllowed = 'copyMove';
	verify(dataTransfer.effectAllowed == 'uninitialized');
	dataTransfer.effectAllowed = 'link';
	verify(dataTransfer.effectAllowed == 'uninitialized');
	dataTransfer.effectAllowed = 'linkMove';
	verify(dataTransfer.effectAllowed == 'uninitialized');
	dataTransfer.effectAllowed = 'move';
	verify(dataTransfer.effectAllowed == 'uninitialized');
	dataTransfer.effectAllowed = 'all';
	verify(dataTransfer.effectAllowed == 'uninitialized');
}

test("items")
{
	var datatransfer = null;
	datatransfer = create_dataTransfer();
	verify(datatransfer);
	verify("items" in datatransfer);
	verify(datatransfer.items instanceof DataTransferItemList);
	// read-only
	var obj = {};
	var store = datatransfer.items;
	datatransfer.items = obj;
	verify(datatransfer.items !== obj);
	verify(datatransfer.items === store);
}

test("DataTransferItemList")
{
	var datatransfer = null;
	datatransfer = create_dataTransfer();
	verify(datatransfer);
	var items = datatransfer.items;
	verify(items instanceof DataTransferItemList);
	verify("length" in items);
	verify("clear" in items);
	verify("add" in items);
	verify(items.length == 0);

	var dti = null;
	var catched1 = false;
	var catched2 = false;
	try
	{
		dti = new DataTransferItemList;
	} catch (ex) {
		catched1 = true;
	}
	try
	{
		dti = new DataTransferItemList;
	} catch (ex) {
		catched2 = true;
	}
	verify(catched2);

	verify(items.toString() == "[object DataTransferItemList]");
}

test("setDragImage")
{
	var datatransfer = null;
	datatransfer = create_dataTransfer();
	verify(datatransfer);
	verify("setDragImage" in datatransfer);
	verify(typeof datatransfer.setDragImage == "function");
}

test("addElement")
{
	var datatransfer = null;
	datatransfer = create_dataTransfer();
	verify(datatransfer);
	verify("addElement" in datatransfer);
	verify(typeof datatransfer.addElement == "function");
}

test("types")
{
	var datatransfer = null;
	datatransfer = create_dataTransfer();
	verify(datatransfer);
	verify("types" in datatransfer);
	verify(datatransfer.types instanceof DOMStringList);
}

test("getData")
{
	var datatransfer = null;
	datatransfer = create_dataTransfer();
	verify(datatransfer);
	verify("getData" in datatransfer);
	verify(typeof datatransfer.getData == "function");
}

test("setData")
{
	var datatransfer = null;
	datatransfer = create_dataTransfer();
	verify(datatransfer);
	verify("setData" in datatransfer);
	verify(typeof datatransfer.setData == "function");
}

test("clearData")
{
	var datatransfer = null;
	datatransfer = create_dataTransfer();
	verify(datatransfer);
	verify("clearData" in datatransfer);
	verify(typeof datatransfer.clearData == "function");
}

test("files")
{
	var datatransfer = null;
	datatransfer = create_dataTransfer();
	verify(datatransfer);
	verify("files" in datatransfer);
	verify(datatransfer.files instanceof FileList);
	// read-only
	var obj = {};
	var store = datatransfer.files;
	datatransfer.files = obj;
	verify(datatransfer.files !== obj);
	verify(datatransfer.files === store);
}

html
{
	//! <div draggable></div>
	//! <script>
	//! var create_DragEvent = function(type)
	//! {
	//! 	var event1 = document.createEvent("DragEvent");
	//! 	var an_object = {};
	//! 	event1.initDragEvent(type, true, true, null, 1, 123, 456, 789, 234, false, false, false, false, 0, null, an_object);
	//! 	return event1;
	//! }
	//! </script>
}

test("DataTransfer setData(), clearData(), getData(), item.length, items.getter")
	async;
{
	var ok_dragstart = true;
	var dragged = document.querySelector('div');
	dragged.ondragstart = function(e)
	{
		var dataTransfer = e.dataTransfer;
		verify(dataTransfer);
		verify("effectAllowed" in dataTransfer);
		verify(typeof dataTransfer.effectAllowed == "string");
		verify(dataTransfer.effectAllowed == "uninitialized");

		// Should be one of "none", "copy", "copyLink", "copyMove", "link",
		// "linkMove", "move", "all", or "uninitialized".
		dataTransfer.effectAllowed = 'ea';
		verify(dataTransfer.effectAllowed == 'uninitialized');
		dataTransfer.effectAllowed = 'none';
		verify(dataTransfer.effectAllowed == 'none');
		dataTransfer.effectAllowed = 'copy';
		verify(dataTransfer.effectAllowed == 'copy');
		dataTransfer.effectAllowed = 'copyLink';
		verify(dataTransfer.effectAllowed == 'copyLink');
		dataTransfer.effectAllowed = 'copyMove';
		verify(dataTransfer.effectAllowed == 'copyMove');
		dataTransfer.effectAllowed = 'link';
		verify(dataTransfer.effectAllowed == 'link');
		dataTransfer.effectAllowed = 'linkMove';
		verify(dataTransfer.effectAllowed == 'linkMove');
		dataTransfer.effectAllowed = 'move';
		verify(dataTransfer.effectAllowed == 'move');
		dataTransfer.effectAllowed = 'all';
		verify(dataTransfer.effectAllowed == 'all');
		dataTransfer.effectAllowed = 'ea';
		verify(dataTransfer.effectAllowed == 'all');
		dataTransfer.effectAllowed = 'uninitialized';
		verify(dataTransfer.effectAllowed == 'uninitialized');

		for (var i = e.dataTransfer.items.length; i > 0; i--) // Temporary.  Remove, when data under dataTrasfer is not global.
			delete e.dataTransfer.items[i-1];

		verify(ok_dragstart && e.dataTransfer.items.length == 0);
		e.dataTransfer.setData('ZMOK', 'mokry smok');
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 1;
		verify(ok_dragstart);
		e.dataTransfer.setData('smok', 'suchy zmok');
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 2;
		verify(ok_dragstart);
		e.dataTransfer.clearData('smok'); // Simple clear.
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 1;
		verify(ok_dragstart);
		e.dataTransfer.setData('text', 'sepulki');
		e.dataTransfer.setData('url', 'sepulki');
		e.dataTransfer.setData('text/uri-list', 'murkwie'); // url==text/uri-list, replace.
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 3;
		verify(ok_dragstart);

		var dt = e.dataTransfer;
		var dti = e.dataTransfer.items;
		ok_dragstart = ok_dragstart && dti[0]; // getter
		verify(ok_dragstart);
		ok_dragstart = ok_dragstart && dti[1];
		verify(ok_dragstart);
		ok_dragstart = ok_dragstart && dti[2];
		verify(ok_dragstart);
		ok_dragstart = ok_dragstart && dti[0].type == 'zmok';
		verify(ok_dragstart);
		ok_dragstart = ok_dragstart && dt.getData('zmok') == 'mokry smok';
		verify(ok_dragstart);
		ok_dragstart = ok_dragstart && dt.getData('text') == 'sepulki';
		verify(ok_dragstart);
		ok_dragstart = ok_dragstart && dti[1].type == 'text/plain';
		verify(ok_dragstart);
		ok_dragstart = ok_dragstart && dt.getData('text/plain') == 'sepulki'; // text==text/plain
		verify(ok_dragstart);
		ok_dragstart = ok_dragstart && dt.getData('TEXT') == 'sepulki'; // case-insensitive
		verify(ok_dragstart);
		ok_dragstart = ok_dragstart && dt.getData('TEXT/PLAIN') == 'sepulki';
		verify(ok_dragstart);
		ok_dragstart = ok_dragstart && dti[2].type == 'text/uri-list';
		verify(ok_dragstart);
		ok_dragstart = ok_dragstart && dt.getData('url') == 'murkwie';
		verify(ok_dragstart);
		ok_dragstart = ok_dragstart && dt.getData('URL') == 'murkwie'; // case-insensitive
		verify(ok_dragstart);
		ok_dragstart = ok_dragstart && dt.getData('text/uri-list') == 'murkwie';
		verify(ok_dragstart);
		ok_dragstart = ok_dragstart && dt.getData('TEXT/URI-LIST') == 'murkwie';
		verify(ok_dragstart);

		dt.clearData('text');
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 2;
		verify(ok_dragstart);
		dt.setData('text', 'sepulki');
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 3;
		verify(ok_dragstart);
		dt.clearData('text/plain'); // text==text/plain
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 2;
		verify(ok_dragstart);
		dt.clearData('url');
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 1;
		verify(ok_dragstart);
		dt.setData('text/uri-list', 'murkwie');
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 2;
		verify(ok_dragstart);
	}
	var dragstart = create_DragEvent('dragstart');
	dragged.dispatchEvent(dragstart);
	var timeoutMs = 500;
	var timeoutId = setTimeout(function()
	{
		if (ok_dragstart)
			ST_passed();
		else
			ST_failed("Test DataTransfer setData(), clearData(), getData(), item.length, items.getter: ondragstart failed.","","");
	}, timeoutMs);
}


