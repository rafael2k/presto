// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
group "DOM.HTML.HTMLTimeElement.properties";
require init;

language ecmascript;

html
{
	//! <time></time>
}

test("basic <time> parsing")
{
	var t = document.querySelector("time");
	verify(t);
	verify(t instanceof HTMLElement);
	verify(t instanceof HTMLTimeElement);
	verify(t.dateTime === "");
	verify(t.pubDate === false);
	verify(t.valueAsDate === null);
}

html
{
	//! <time datetime="2009-11-14">November 14, 2009</time>
}

test("HTMLTimeElement.dateTime")
{
	var t = document.querySelector("time");
	verify(t.dateTime == "2009-11-14");
	t.dateTime = "foo";
	verify(t.getAttribute("datetime") == "foo");
}

html
{
	//! <time pubdate></time>
}

test("HTMLTimeElement.pubDate")
{
	var t = document.querySelector("time");
	verify(t.pubDate);
	t.pubDate = false;
	verify(!t.hasAttribute("pubdate"));
}

test("basic document.createElement('time')")
{
	var t = document.createElement("time");
	verify(t);
	verify(t instanceof HTMLElement);
	verify(t instanceof HTMLTimeElement);
	verify(t.dateTime === "");
	verify(t.pubDate === false);
	verify(t.valueAsDate === null);
}

test("HTMLTimeElement.valueAsDate setup")
{
	// http://unicode.org/Public/UNIDATA/PropList.txt
	var whitespace = "\u0009\u000a\u000b\u000c\u000d" +
		"\u0020" + /* "\u0085" + */ "\u00a0\u1680\u180e" +
		"\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a" +
		"\u2028\u2029\u202f\u205f\u3000";

    getTime = function(input) {
		// from @datetime
		var t1 = document.createElement("time");
		t1.dateTime = input;
		var d1 = t1.valueAsDate;
		verify(d1);
		// from text content
		var t2 = document.createElement("time");
		t2.textContent = input;
		var d2 = t1.valueAsDate;
		verify(d2);
		verify(d1.getTime() == d2.getTime());
		// from text content with whitespace
		var t3 = document.createElement("time");
		t3.textContent = whitespace+input+whitespace;
		var d3 = t3.valueAsDate;
		verify(d3);
		verify(d1.getTime() == d3.getTime());
		return d1.getTime();
	}

	closeEnough = function(input, expected) {
		return Math.abs(getTime(input) -expected) < 0.5e-10;
	}

    notValid = function(input) {
		var t = document.createElement("time");
		t.dateTime = input;
		return t.valueAsDate == null;
	}
}

test("HTMLTimeElement.valueAsDate YYYY-MM-DD")
{
	verify(notValid(""));
	verify(notValid("0"));
	verify(notValid("1"));
	verify(notValid("12"));
	verify(notValid("1234"));
	verify(notValid("1234-05"));
	verify(notValid("1234-5-6"));
	verify(notValid("1234-05-6"));
	verify(notValid("1234-5-06"));
	verify(notValid("123-04-05"));
	verify(notValid("0000-01-01"));
	verify(notValid("1234-05-00"));
	verify(notValid("1234-00-05"));
	verify(getTime("1234-05-06") == -23215075200000);
	verify(getTime("1970-01-01") == 0);
	verify(getTime("2345-06-07") == 11847427200000);
	verify(notValid("01970-01-01"));
	verify(notValid("1970-001-01"));
	verify(notValid("1970-01-001"));
	verify(notValid("1970-01-01 "));
	verify(notValid("1970-01-01+"));
	verify(notValid("1970-01-01-"));
	verify(notValid("1970-01-01:"));
	verify(notValid("1970-01-01t"));
	verify(notValid("1970-01-01Z"));
}

test("HTMLTimeElement.valueAsDate HH:MM")
{
	verify(notValid("0:"));
	verify(notValid("00:"));
	verify(notValid("0:0"));
	verify(notValid("00:0"));
	verify(notValid("0:00"));
	verify(getTime("00:00") == 0);
	verify(getTime("00:01") == 60000);
	verify(getTime("00:59") == 3540000);
	verify(notValid("00:60"));
	verify(getTime("01:00") == 3600000);
	verify(getTime("23:59") == 86340000);
	verify(notValid("24:00"));
	verify(notValid("000:00"));
	verify(notValid("00:000"));
	verify(notValid("00:00 "));
	verify(notValid("00:00+"));
	verify(notValid("00:00-"));
	verify(notValid("00:00."));
	verify(notValid("00:00.00"));
}

test("HTMLTimeElement.valueAsDate HH:MM:SS")
{
	verify(notValid("0:0:"));
	verify(notValid("00:0:"));
	verify(notValid("0:00:"));
	verify(notValid("00:00:"));
	verify(notValid("0:0:0"));
	verify(notValid("00:0:0"));
	verify(notValid("0:00:0"));
	verify(notValid("0:0:00"));
	verify(getTime("00:00:00") == 0);
	verify(getTime("00:00:01") == 1000);
	verify(getTime("00:00:59") == 59000);
	verify(notValid("00:00:60"));
	verify(getTime("00:01:00") == 60000);
	verify(getTime("00:59:59") == 3599000);
	verify(notValid("00:60:00"));
	verify(getTime("01:00:00") == 3600000);
	verify(getTime("23:59:59") == 86399000);
	verify(notValid("24:00:00"));
	verify(notValid("000:00:00"));
	verify(notValid("00:000:00"));
	verify(notValid("00:00:000"));
	verify(notValid("00:00:00 "));
	verify(notValid("00:00:00+"));
	verify(notValid("00:00:00-"));
	verify(notValid("00:00:00Z"));
}

test("HTMLTimeElement.valueAsDate HH:MM:SS.ms")
{
	verify(notValid("0:0:0.0"));
	verify(notValid("00:0:0.0"));
	verify(notValid("0:00:0.0"));
	verify(notValid("0:0:00.0"));
	verify(notValid("00:00:00."));
	verify(getTime("00:00:00.0") == 0);
	verify(closeEnough("00:00:00.1", 100));
	verify(closeEnough("00:00:00.01", 10));
	verify(closeEnough("00:00:00.001", 1));
	//verify(closeEnough("00:00:00.0001", 0.1)); // FIXME: milliseconds are truncated
	verify(getTime("00:00:01.0") == 1000);
	verify(closeEnough("00:00:01.001", 1001));
	verify(closeEnough("00:00:59.999", 59999));
	verify(notValid("00:00:60.0"));
	verify(getTime("00:01:00.0") == 60000);
	verify(closeEnough("00:01:00.1", 60100));
	verify(getTime("00:59:59.0") == 3599000);
	verify(closeEnough("00:59:59.999", 3599999));
	verify(notValid("00:60:00.0"));
	verify(getTime("01:00:00.0") == 3600000);
	verify(closeEnough("01:00:00.001", 3600001));
	verify(closeEnough("23:59:59.999", 86399999));
	verify(notValid("24:00:00.0"));
	verify(notValid("00:00:00.0 "));
	verify(notValid("00:00:00.0+"));
	verify(notValid("00:00:00.0-"));
	verify(notValid("00:00:00.0Z"));

	// rounding test
	var t = document.createElement("time");
	t.dateTime = "00:00:00.99999999999999999999";
	var rounded = t.valueAsDate.getTime();
	verify(/* rounded >= 999.999999 && */ rounded < 1000);
	// FIXME: what is the correct rounding?
}

test("HTMLTimeElement.valueAsDate YYYY-MM-DDTHH:MMZ/+-HH:MM")
{
	//verify(notValid("1970-01-01T")); // FIXME-SPEC
	verify(notValid("1970-01-01T "));
	verify(notValid("1970-01-01T00:01"));
	verify(notValid("1970-01-01T00:01+"));
	verify(notValid("1970-01-01T00:01-"));
	verify(getTime("1970-01-01T00:01Z") == 60000);
	verify(notValid("1970-01-01T00:01Z00:00"));
	verify(notValid("1970-01-01T00:01Z+00:00"));
	verify(notValid("1970-01-01T00:01Z-00:00"));
	verify(getTime("1970-01-01T00:01+00:00") == 60000);
	verify(getTime("1970-01-01T00:01-00:00") == 60000);
	verify(getTime("1970-01-01T00:01+01:00") == -3540000);
	verify(getTime("1970-01-01T00:01-01:00") == 3660000);
	verify(getTime("1970-01-01T00:01+23:59") == -86280000);
	verify(getTime("1970-01-01T00:01-23:59") == 86400000);
	verify(notValid("1970-01-01T00:01+24:00"));
	verify(notValid("1970-01-01T00:01-24:00"));
	verify(notValid("1970-01-01T00:01+00:00:00"));
	verify(notValid("1970-01-01T00:01-00:00:00"));
	verify(notValid("1970-01-01T00:01+00:00:00.0"));
	verify(notValid("1970-01-01T00:01-00:00:00.0"));
}

test("HTMLTimeElement.valueAsDate YYYY-MM-DDTHH:MM:SSZ/+-HH:MM")
{
	verify(notValid("1970-01-01T00:01:"));
	verify(notValid("1970-01-01T00:01:01"));
	verify(notValid("1970-01-01T00:01:01+"));
	verify(notValid("1970-01-01T00:01:01-"));
	verify(getTime("1970-01-01T00:01:01Z") == 61000);
	verify(notValid("1970-01-01T00:01:01Z00:00"));
	verify(notValid("1970-01-01T00:01:01Z+00:00"));
	verify(notValid("1970-01-01T00:01:01Z-00:00"));
	verify(getTime("1970-01-01T00:01:01+00:00") == 61000);
	verify(getTime("1970-01-01T00:01:01-00:00") == 61000);
	verify(getTime("1970-01-01T00:01:01+01:00") == -3539000);
	verify(getTime("1970-01-01T00:01:01-01:00") == 3661000);
	verify(getTime("1970-01-01T00:01:01+23:59") == -86279000);
	verify(getTime("1970-01-01T00:01:01-23:59") == 86401000);
	verify(notValid("1970-01-01T00:01:01+24:00"));
	verify(notValid("1970-01-01T00:01:01-24:00"));
	verify(notValid("1970-01-01T00:01:01+00:00:00"));
	verify(notValid("1970-01-01T00:01:01-00:00:00"));
	verify(notValid("1970-01-01T00:01:01+00:00:00.0"));
	verify(notValid("1970-01-01T00:01:01-00:00:00.0"));
}

test("HTMLTimeElement.valueAsDate YYYY-MM-DDTHH:MM:SS.msZ/+-HH:MM")
{
	verify(notValid("1970-01-01T00:01:01."));
	verify(notValid("1970-01-01T00:01:01.001"));
	verify(notValid("1970-01-01T00:01:01.001+"));
	verify(notValid("1970-01-01T00:01:01.001-"));
	verify(closeEnough("1970-01-01T00:01:01.001Z", 61001));
	verify(notValid("1970-01-01T00:01:01.001Z00:00"));
	verify(notValid("1970-01-01T00:01:01.001Z+00:00"));
	verify(notValid("1970-01-01T00:01:01.001Z-00:00"));
	verify(closeEnough("1970-01-01T00:01:01.001+00:00", 61001));
	verify(closeEnough("1970-01-01T00:01:01.001-00:00", 61001));
	verify(closeEnough("1970-01-01T00:01:01.001+01:00", -3538999));
	verify(closeEnough("1970-01-01T00:01:01.001-01:00", 3661001));
	verify(closeEnough("1970-01-01T00:01:01.001+23:59", -86278999));
	verify(closeEnough("1970-01-01T00:01:01.001-23:59", 86401001));
	verify(notValid("1970-01-01T00:01:01.001+24:00"));
	verify(notValid("1970-01-01T00:01:01.001-24:00"));
	verify(notValid("1970-01-01T00:01:01.001+00:00:00"));
	verify(notValid("1970-01-01T00:01:01.001-00:00:00"));
	verify(notValid("1970-01-01T00:01:01.001+00:00:00.0"));
	verify(notValid("1970-01-01T00:01:01.001-00:00:00.0"));
}

test("HTMLTimeElement.valueAsDate examples")
{
	// spec example
	verify(getTime("0037-12-13T00:00Z") == -60969628800000);
	verify(getTime("1979-10-14T12:00:00.001-04:00") == 308764800001);
	verify(getTime("8592-01-01T02:09+02:09") == 208970150400000);
}
