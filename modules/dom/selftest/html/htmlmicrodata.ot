group "DOM.HTML.HTMLElement.properties";
require init;
language ecmascript;

html
{
//!<!doctype html>
//!<body>
//!	<div itemscope>
//!		<span itemprop='prop1'>val1.1</span>
//!		<span itemprop='prop1'>val1.2</span>
//!		<span itemprop='prop2'>val2</span>
//!		<span itemprop='prop3 prop4 prop5'>val3and4and5</span>
//!	</div>
//!</body>
}

test("HTMLPropertiesCollection types")
{
	var props = document.querySelector('div').properties;
	verify (props);

	verify(props instanceof HTMLPropertiesCollection);
	verify(props instanceof HTMLCollection);
	verify(typeof props.item == "function");
	verify(typeof props.length == "number");
	verify(typeof props.namedItem == "function");
	verify(props.names instanceof DOMStringList);

	verify(props.namedItem('') instanceof PropertyNodeList);
	verify(props.namedItem('prop1') instanceof PropertyNodeList);
	verify(props.namedItem('length') instanceof PropertyNodeList);
	verify(props.namedItem('namedItem') instanceof PropertyNodeList);
}

test("HTMLPropertiesCollection simple length")
{
	var props = document.querySelector('div').properties;
	verify(props.length == 4);
}

test("HTMLPropertiesCollection simple item()")
{
	var props = document.querySelector('div').properties;
	verify(props.item(0).itemProp == 'prop1');
	verify(props.item(0).itemValue == 'val1.1');
	verify(props.item(1).itemProp == 'prop1');
	verify(props.item(1).itemValue == 'val1.2');
	verify(props.item(2).itemProp == 'prop2');
	verify(props.item(2).itemValue == 'val2');
	verify(props.item(3).itemProp == 'prop3 prop4 prop5');
	verify(props.item(3).itemProp[0] == 'prop3');
	verify(props.item(3).itemProp[1] == 'prop4');
	verify(props.item(3).itemProp[2] == 'prop5');
	verify(props.item(3).itemValue == 'val3and4and5');

	verify(props[0] === props.item(0));
	verify(props[1] === props.item(1));
	verify(props[2] === props.item(2));
	verify(props[3] === props.item(3));

	verify(props(0) === props.item(0));
	verify(props(1) === props.item(1));
	verify(props(2) === props.item(2));
	verify(props(3) === props.item(3));
}

test("HTMLPropertiesCollection simple namedItem()")
{
	var props = document.querySelector('div').properties;
	verify(props.namedItem('prop1'));
	verify(props.namedItem('prop2'));
	verify(props.namedItem('prop3'));
	verify(props.namedItem('prop4'));

	verify(props['prop1'] === props.namedItem('prop1'));
	verify(props['prop2'] === props.namedItem('prop2'));
	verify(props['prop3'] === props.namedItem('prop3'));
	verify(props['prop4'] === props.namedItem('prop4'));

	verify(props('prop1') === props.namedItem('prop1'));
	verify(props('prop2') === props.namedItem('prop2'));
	verify(props('prop3') === props.namedItem('prop3'));
	verify(props('prop4') === props.namedItem('prop4'));

	verify(props.prop1 === props.namedItem('prop1'));
	verify(props.prop2 === props.namedItem('prop2'));
	verify(props.prop3 === props.namedItem('prop3'));
	verify(props.prop4 === props.namedItem('prop4'));
}

html
{
//!<!doctype html>
//!<body>
//!	<div itemscope>
//!		<span itemprop='length'>val1</span>
//!		<span itemprop='item'>val2</span>
//!		<span itemprop='namedItem'>val3</span>
//!		<span itemprop='names'>val4</span>
//!	</div>
//!</body>
}
test("HTMLPropertiesCollection evil namedItem()")
{
	// Don't let item properties override built-in methods and members.
	var props = document.querySelector('div').properties;

	// In case of:
	// <img id=item><script>var f = document.images.item</script>
	// item function is shadowed by image with "item" id, so in case of
	// helm.properties namedItem and item methods can be shadowed too.
	// verify(typeof props['namedItem'] == 'function');
	// verify(typeof props['item'] == 'function');
	verify(typeof props['length'] == 'number');

	//verify(props.namedItem != props.namedItem('namedItem'));
	//verify(props.item != props.namedItem('item'));
	verify(props.length != props.namedItem('length'));
	verify(props.names != props.namedItem('names'));
}

html
{
//!<!doctype html>
//!<body>
//!	<div itemscope>
//!		<span id='ch' itemprop='prop1'>val1.1</span>
//!		<span itemprop='prop1'>val1.2</span>
//!		<span id='two' itemprop='prop2'>val2</span>
//!		<span id='four' itemprop='prop3 prop4 prop4 prop5'>val345</span>
//!		<span id='subitem' itemscope itemprop='prop1'></SPAN>
//!	</div>
//!</body>
}
test("HTMLPropertiesCollection.names.length")
{
	var props = document.querySelector('div').properties;
	verify(props.names.length == 5);

	// readonly
	try {
		props.names.length = 7;
	} catch (e) {}
	verify(props.names.length == 5);
}
test("HTMLPropertiesCollection.names.item()")
{
	var props = document.querySelector('div').properties;
	verify(props.names.item(0) == 'prop1');
	verify(props.names.item(1) == 'prop2');
	verify(props.names.item(2) == 'prop3');
	verify(props.names.item(3) == 'prop4');
	verify(props.names.item(4) == 'prop5');
	verify(props.names.item(5) === null);
	
	// getter
	verify(props.names[0] == props.names.item(0));
	verify(props.names[1] == props.names.item(1));
	verify(props.names[2] == props.names.item(2));
	verify(props.names[3] == props.names.item(3));
	verify(props.names[4] == props.names.item(4));
}

test("HTMLPropertiesCollection.names.contains()")
{
	var props = document.querySelector('div').properties;
	verify(props.names.contains('prop1'));
	verify(props.names.contains('prop2'));
	verify(props.names.contains('prop3'));
	verify(props.names.contains('prop4'));
	verify(props.names.contains('prop5'));

	verify(!props.names.contains('prop6'));
}

html
{
//!<!doctype html>
//!<body>
//!	<div itemscope>
//!		<span id='one' itemprop='prop1'>val1.1</span>
//!		<span itemprop='prop1'>val1.2</span>
//!		<span itemprop='prop2'>val2</span>
//!		<span itemprop='prop3 prop4 prop4 prop5'>val3and4and5</span>
//!	</div>
//!</body>
}

test("PropertyNodeList types")
{
	verify(document.querySelector('div').properties);
	var selected_props = document.querySelector('div').properties.namedItem('prop1');
	verify(selected_props);

	verify(selected_props instanceof PropertyNodeList);
	verify(selected_props instanceof NodeList);
	verify(typeof selected_props.item == "function");
	verify(typeof selected_props.length == "number");
	verify(selected_props.getValues() instanceof Array);
}

test("PropertyNodeList length")
{
	var props = document.querySelector('div').properties;
	verify(props.namedItem('prop1').length == 2);
	verify(props.namedItem('prop2').length == 1);
	verify(props.namedItem('prop3').length == 1);
	verify(props.namedItem('prop4').length == 1);
	verify(props.namedItem('prop5').length == 1);

	document.querySelector('#one').setAttribute('itemprop', 'prop5');
	verify(props.namedItem('prop1').length == 1);
	verify(props.namedItem('prop2').length == 1);
	verify(props.namedItem('prop3').length == 1);
	verify(props.namedItem('prop4').length == 1);
	verify(props.namedItem('prop5').length == 2);
}

test("PropertyNodeList length is readonly")
{
	var props = document.querySelector('div').properties;
	verify(props.namedItem('prop2').length == 1);
	try {
		props.namedItem('prop2').length = 7;
	} catch(e) {}
	verify(props.namedItem('prop2').length == 1);
}

html
{
//!<!doctype html>
//!<body>
//!	<div itemscope>
//!		<span id='one' itemprop='prop1'>val1.1</span>
//!		<span id='two' itemprop='prop1'>val1.2</span>
//!		<span id='three' itemprop='prop2'>val2</span>
//!		<span id='four' itemprop='prop3 prop4 prop4 prop5'>val3and4and5</span>
//!	</div>
//!</body>
}

test("PropertyNodeList item()")
{
	var props = document.querySelector('div').properties;
	verify(props.namedItem('prop1').item(0) === document.querySelector('#one'));
	verify(props.namedItem('prop1').item(1) === document.querySelector('#two'));
	verify(props.namedItem('prop2').item(0) === document.querySelector('#three'));
	verify(props.namedItem('prop3').item(0) === document.querySelector('#four'));
	verify(props.namedItem('prop4').item(0) === document.querySelector('#four'));
	verify(props.namedItem('prop5').item(0) === document.querySelector('#four'));

	// item() is getter.
	verify(props.namedItem('prop1')[0] === document.querySelector('#one'));
	verify(props.namedItem('prop1')[1] === document.querySelector('#two'));
	verify(props.namedItem('prop2')[0] === document.querySelector('#three'));
	verify(props.namedItem('prop3')[0] === document.querySelector('#four'));
	verify(props.namedItem('prop4')[0] === document.querySelector('#four'));
	verify(props.namedItem('prop5')[0] === document.querySelector('#four'));

	// item() is caller.
	verify(props.namedItem('prop1')(0) === document.querySelector('#one'));
	verify(props.namedItem('prop1')(1) === document.querySelector('#two'));
	verify(props.namedItem('prop2')(0) === document.querySelector('#three'));
	verify(props.namedItem('prop3')(0) === document.querySelector('#four'));
	verify(props.namedItem('prop4')(0) === document.querySelector('#four'));
	verify(props.namedItem('prop5')(0) === document.querySelector('#four'));

	verify(props.namedItem('prop4').item(1) === null);
	verify(props.namedItem('prop4')[1] === undefined);
	verify(props.namedItem('prop4')(1) === null);
}

test("PropertyNodeList values attribute simple textContent")
{
	var props = document.querySelector('div').properties;
	verify(props.namedItem('prop1').getValues().length == 2);
	verify(props.namedItem('prop1').getValues()[0] == 'val1.1');
	verify(props.namedItem('prop1').getValues()[1] == 'val1.2');
	verify(props.namedItem('prop2').getValues().length == 1);
	verify(props.namedItem('prop2').getValues()[0] == 'val2');
	verify(props.namedItem('prop3').getValues().length == 1);
	verify(props.namedItem('prop3').getValues()[0] == 'val3and4and5');
	verify(props.namedItem('prop5').getValues().length == 1);
	verify(props.namedItem('prop5').getValues()[0] == 'val3and4and5');
	verify(props.namedItem('prop5').getValues().length == 1);
	verify(props.namedItem('prop5').getValues()[0] == 'val3and4and5');
}

html {
	//! <DIV itemscope>
	//! 	<DIV itemprop=item>val1</DIV>
	//! 	<DIV itemprop=length>val2</DIV>
	//! </DIV>
}
test("PropertyNodeList evil properties' names")
{
	var props = document.querySelector('div').properties;
	verify(props.namedItem('length').length == 1);
	verify(props.namedItem('item').length == 1);
	verify(typeof props.namedItem('item').item == 'function');
}
