// -*- Mode: c++; indent-tabs-mode: t; c-basic-offset: 4 -*-
group "DOM.HTML.DataTransferItemList";
require init;
language ecmascript;
require DRAG_SUPPORT;

html
{
	//! <div draggable></div>
	//! <script>
	//! var create_DragEvent = function(type)
	//! {
	//! 	var event1 = document.createEvent("DragEvent");
	//! 	var an_object = {};
	//! 	event1.initDragEvent(type, true, true, null, 1, 123, 456, 789, 234, false, false, false, false, 0, null, an_object);
	//! 	return event1;
	//! }
	//! </script>
}

test("DataTransferItemList length")
	async;
{
	var ok_dragstart = true;
	var dragged = document.querySelector('div');
	dragged.ondragstart = function(e)
	{
		for (var i = e.dataTransfer.items.length; i > 0; i--) // Temporary.  Remove, when data under dataTrasfer is not global.
			delete e.dataTransfer.items[i-1];

		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 0;
		e.dataTransfer.setData('zmok', 'mokry smok');
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 1;
	}
	var dragstart = create_DragEvent('dragstart');
	dragged.dispatchEvent(dragstart);
	var timeoutMs = 500;
	var timeoutId = setTimeout(function()
	{
		if (ok_dragstart)
			ST_passed();
		else
			ST_failed("Test DataTransferItemList length: ondragstart failed.","","");
	}, timeoutMs);
}

test("DataTransferItemList getter")
	async;
{
	var ok_dragstart = true;
	var dragged = document.querySelector('div');
	dragged.ondragstart = function(e)
	{
		for (var i = e.dataTransfer.items.length; i > 0; i--) // Temporary.  Remove, when data under dataTrasfer is not global.
			delete e.dataTransfer.items[i-1];

		var dti = e.dataTransfer.items;
		ok_dragstart = ok_dragstart && dti.length == 0;
		e.dataTransfer.setData('zmok', 'mokry smok');
		ok_dragstart = ok_dragstart && dti.length == 1;
		ok_dragstart = ok_dragstart && (dti[0].toString() == '[object DataTransferItem]');

		e.dataTransfer.setData('smok', 'suchy zmok');
		ok_dragstart = ok_dragstart && (dti[0].toString() == '[object DataTransferItem]');
		ok_dragstart = ok_dragstart && (dti[0].toString() == '[object DataTransferItem]');
	}
	var dragstart = create_DragEvent('dragstart');
	dragged.dispatchEvent(dragstart);
	var timeoutMs = 500;
	var timeoutId = setTimeout(function()
	{
		if (ok_dragstart)
			ST_passed();
		else
			ST_failed("Test DataTransferItemList getter: ondragstart failed.","","");
	}, timeoutMs);
}

test("DataTransferItemList deleter")
	async;
{
	var ok_dragstart = true;
	var dragged = document.querySelector('div');
	dragged.ondragstart = function(e)
	{
		for (var i = e.dataTransfer.items.length; i > 0; i--) // Temporary.  Remove, when data under dataTrasfer is not global.
			delete e.dataTransfer.items[i-1];

		var dti = e.dataTransfer.items;
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 0;
		e.dataTransfer.setData('zmok', 'mokry smok');
		e.dataTransfer.setData('smok', 'suchy zmok');
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 2;
		delete dti[0];
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 1;
		ok_dragstart = ok_dragstart && (dti[0].type == 'smok');
		delete dti[0];
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 0;
	}
	var dragstart = create_DragEvent('dragstart');
	dragged.dispatchEvent(dragstart);
	var timeoutMs = 500;
	var timeoutId = setTimeout(function()
	{
		if (ok_dragstart)
			ST_passed();
		else
			ST_failed("Test DataTransferItemList deleter: ondragstart failed.","","");
	}, timeoutMs);
}

test("DataTransferItemList clear()")
	async;
{
	var ok_dragstart = true;
	var dragged = document.querySelector('div');
	dragged.ondragstart = function(e)
	{
		for (var i = e.dataTransfer.items.length; i > 0; i--) // Temporary.  Remove, when data under dataTrasfer is not global.
			delete e.dataTransfer.items[i-1];

		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 0;
		e.dataTransfer.setData('zmok', 'mokry smok');
		e.dataTransfer.setData('smok', 'suchy zmok');
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 2;
		e.dataTransfer.items.clear();
		ok_dragstart = ok_dragstart && e.dataTransfer.items.length == 0;
	}
	var dragstart = create_DragEvent('dragstart');
	dragged.dispatchEvent(dragstart);
	var timeoutMs = 500;
	var timeoutId = setTimeout(function()
	{
		if (ok_dragstart)
			ST_passed();
		else
			ST_failed("Test DataTransferItemList clear(): ondragstart failed.","","");
	}, timeoutMs);
}

test("DataTransferItemList add(DOMString, DOMString)")
	async;
{
	var ok_dragstart = true;
	var dragged = document.querySelector('div');
	dragged.ondragstart = function(e)
	{
		for (var i = e.dataTransfer.items.length; i > 0; i--) // Temporary.  Remove, when data under dataTrasfer is not global.
			delete e.dataTransfer.items[i-1];

		dti = e.dataTransfer.items;
		ok_dragstart = ok_dragstart && dti.length == 0;
		dti.add('mokry smok', 'ZMOK');
		ok_dragstart = ok_dragstart && dti.length == 1;
		dti.add('suchy zmok', 'smok');
		ok_dragstart = ok_dragstart && dti.length == 2;
		dti[0].type == 'zmok';  // Case-insensitive.
		dti[1].type == 'smok';

		var catched1 = false;
		try
		{
			dti.add('whatever', 'zmok');
		} catch(ex) {
			catched1 = true;
		}
		ok_dragstart = ok_dragstart && catched1;
		ok_dragstart = ok_dragstart && dti.length == 2;
		dti[0].type == 'zmok';  // Case-insensitive.
		dti[1].type == 'smok';

		var catched2 = false;
		try
		{
			dti.add('whatever', 'SMOK'); // Case-insensitive.
		} catch(ex) {
			catched2 = true;
		}
		ok_dragstart = ok_dragstart && catched2;
		ok_dragstart = ok_dragstart && dti.length == 2;
		dti[0].type == 'zmok';  // Case-insensitive.
		dti[1].type == 'smok';

		dti.add('whatever', 'text');
		var catched3 = false;
		try
		{
			dti.add('whatever', 'text');
		} catch(ex) {
			catched3 = true;
		}
		ok_dragstart = ok_dragstart && catched3;
		ok_dragstart = ok_dragstart && dti.length == 3;
		dti[0].type == 'zmok';  // Case-insensitive.
		dti[1].type == 'smok';
		dti[2].type == 'text';  // Probably ommision in the spec.

		dti.add('whatever', 'url');
		var catched4 = false;
		try
		{
			dti.add('whatever', 'url');
		} catch(ex) {
			catched4 = true;
		}
		ok_dragstart = ok_dragstart && catched4;
		ok_dragstart = ok_dragstart && dti.length == 4;
		dti[0].type == 'zmok';  // Case-insensitive.
		dti[1].type == 'smok';
		dti[2].type == 'text';  // Probably ommision in the spec, should rather change text to text/plain.
		dti[3].type == 'url';  // Probably ommision in the spec, should rather change url to text/uri-list.
	}
	var dragstart = create_DragEvent('dragstart');
	dragged.dispatchEvent(dragstart);
	var timeoutMs = 500;
	var timeoutId = setTimeout(function()
	{
		if (ok_dragstart)
			ST_passed();
		else
			ST_failed("Test DataTransferItemList add(DOMString, DOMString): ondragstart failed.","","");
	}, timeoutMs);
}

test("DataTransferItemList add(DOMString, 'text')")
	async;
{
	var ok_dragstart = true;
	var dragged = document.querySelector('div');
	dragged.ondragstart = function(e)
	{
		for (var i = e.dataTransfer.items.length; i > 0; i--) // Temporary.  Remove, when data under dataTrasfer is not global.
			delete e.dataTransfer.items[i-1];

		var dti = e.dataTransfer.items;
		ok_dragstart = ok_dragstart && dti.length == 0;
		dti.add('sepulki', 'text');

		var catched = false;
		try {
			dti.add('sepulki', 'text/plain');
		} catch (ev) {
			catched = true;
		}
		ok_dragstart = ok_dragstart && dti.length == 2;  // Probably ommision in the spec, should rather throw.
		ok_dragstart = ok_dragstart && catched == false;  // Probably ommision in the spec, should rather throw.
	}
	var dragstart = create_DragEvent('dragstart');
	dragged.dispatchEvent(dragstart);
	var timeoutMs = 500;
	var timeoutId = setTimeout(function()
	{
		if (ok_dragstart)
			ST_passed();
		else
			ST_failed("Test DataTransferItemList add(DOMString, 'text'): ondragstart failed.","","");
	}, timeoutMs);
}

// test("DataTransferItemList add(File)") - File is non-scriptable.



