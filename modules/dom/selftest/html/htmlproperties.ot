group "DOM.HTML.properties";

include "modules/dom/src/domruntime.h";
include "modules/dom/src/domhtml/htmlelem.h";
include "modules/dom/src/domglobaldata.h";

test("DOM_HTMLElement::simple_properties")
{
  for (unsigned index = 0; index < DOM_Runtime::HTMLELEMENT_PROTOTYPES_COUNT; ++index)
  {
    const DOM_HTMLElement::SimpleProperties &properties = g_DOM_htmlProperties[index];

    if (properties.string)
      for (unsigned index = 0; HTML_STRING_PROPERTY_ATOM(properties.string[index]) != OP_ATOM_ABSOLUTELY_LAST_ENUM; ++index)
        if (index > 0 && HTML_STRING_PROPERTY_ATOM(properties.string[index]) < HTML_STRING_PROPERTY_ATOM(properties.string[index - 1]))
          verify(FALSE);

    if (properties.numeric)
    {
      OpAtom prev_atom = OP_ATOM_ABSOLUTELY_LAST_ENUM;
      for (unsigned index = 0; HTML_NUMERIC_PROPERTY_ATOM(properties.numeric[index]) != OP_ATOM_ABSOLUTELY_LAST_ENUM; ++index)
      {
        if (index > 0 && HTML_NUMERIC_PROPERTY_ATOM(properties.numeric[index]) < prev_atom)
          verify(FALSE);
        prev_atom = HTML_NUMERIC_PROPERTY_ATOM(properties.numeric[index]);
        HTML_NUMERIC_PROPERTY_SKIP_DEFAULT(index, properties.numeric[index]);
      }
    }

    if (properties.boolean)
      for (unsigned index = 0; properties.boolean[index] != OP_ATOM_ABSOLUTELY_LAST_ENUM; ++index)
        if (index > 0 && properties.boolean[index] < properties.boolean[index - 1])
          verify(FALSE);
  }
}


html
{
	//! <html><head></head><body id=b>
	//! </body></html>
}

test("HTMLBodyElement.events")
  language ecmascript;
{
        var b = document.getElementById('b');
        verify(b);
	verify(!("onsubmit" in b));
	verify("onclick" in b);
	verify(b.onclick == null);

	var found_onclick = false;
	var found_onsubmit = false;
	for (prop in b)
	{
                verify(prop != "onsubmit");
		if (prop == "onclick")
		{
			found_onclick = true;
		}
	}
	verify(found_onclick);
}

test("HTMLAnchorElement.constructor")
  language ecmascript;
{
        var elm = document.createElement("a");
        verify(elm);
        verify("constructor" in elm);
        verify(elm.constructor === HTMLAnchorElement);

        // DontEnum
        for (var prop in elm)
        {
                verify(prop != "constructor");
        }
}

test("HTMLBasefontElement.size nuked")
  language ecmascript;
{
        var elm = document.createElement("basefont");
        elm.setAttribute("size", "2");
        verify(elm.size === undefined);
}

test("HTMLElement.accessKey")
  language ecmascript;
{
        // Using div as the most neutral element.
        var elm = document.createElement("div");
        verify("accessKey" in elm);
        verify(typeof elm.accessKey == "string");
        verify(elm.accessKey == "");

        elm.setAttribute("accesskey", "a");
        verify(elm.accessKey == "a");

        elm.accessKey = "b";
        verify(elm.accessKey == "b");
        verify(elm.getAttribute("Accesskey") == "b");
}
