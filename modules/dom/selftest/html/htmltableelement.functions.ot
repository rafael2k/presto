group "DOM.HTML.HTMLTableElement.functions.basic";
require init;
language ecmascript;

html
{
  "<html>"
    "<body>"
      "<table>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement [[HasProperty]]")
{
  function checkFunctions_HasProperty(node, properties)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in node))
        throw "HasProperty: '" + properties[index] + "' not found";
      if (!(typeof(node[properties[index]]) == "function"))
        throw "HasProperty: '" + properties[index] + "' not a function";
    }
    return true;
  }

  function checkFunctions_Enumerate(node, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in node)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  functions = [ "createCaption", "deleteCaption",
                "createTHead", "deleteTHead",
                "createTFoot", "deleteTFoot",
                "insertRow", "deleteRow" ];

  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  verify(checkFunctions_HasProperty(table1, functions));
  verify(checkFunctions_Enumerate(table1, functions));
}

// --------------------------------------------------------------------

group "DOM.HTML.HTMLTableElement.functions.createCaption";
require init;
language ecmascript;

html
{
  "<html>"
    "<body>"
      "<table>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createCaption #1")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  verify(table1.caption == null);

  var caption1 = table1.createCaption();

  verify(table1.caption == caption1);
  verify(caption1.parentNode == table1);
}

test("HTMLTableElement.createCaption #2")
  require success "HTMLTableElement.createCaption #1";
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var caption1 = document.getElementsByTagNameNS("*", "caption").item(0);

  verify(table1.caption == caption1);
  verify(caption1.parentNode == table1);

  var caption2 = table1.createCaption();

  verify(table1.caption == caption1);
  verify(caption1.parentNode == table1);
  verify(caption1 == caption2);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<thead>"
          "<tr><td></td></tr>"
        "</thead>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createCaption #3")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var thead1 = document.getElementsByTagNameNS("*", "thead").item(0);

  verify(table1.caption == null);
  verify(table1.tHead == thead1);

  var caption1 = table1.createCaption();

  verify(table1.caption == caption1);
  verify(table1.tHead == thead1);
  verify(caption1.parentNode == table1);
  verify(caption1.nextSibling == thead1);
  verify(table1.childNodes.item(0) == caption1);
  verify(table1.childNodes.item(1) == thead1);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<tfoot>"
          "<tr><td></td></tr>"
        "</tfoot>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createCaption #4")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var tfoot1 = document.getElementsByTagNameNS("*", "tfoot").item(0);

  verify(table1.caption == null);
  verify(table1.tFoot == tfoot1);

  var caption1 = table1.createCaption();

  verify(table1.caption == caption1);
  verify(table1.tFoot == tfoot1);
  verify(caption1.parentNode == table1);
  verify(caption1.nextSibling == tfoot1);
  verify(table1.childNodes.item(0) == caption1);
  verify(table1.childNodes.item(1) == tfoot1);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<tbody>"
          "<tr><td></td></tr>"
        "</tbody>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createCaption #5")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var tbody1 = document.getElementsByTagNameNS("*", "tbody").item(0);

  verify(table1.caption == null);
  verify(table1.tBodies.item(0) == tbody1);

  var caption1 = table1.createCaption();

  verify(table1.caption == caption1);
  verify(table1.tBodies.item(0) == tbody1);
  verify(caption1.parentNode == table1);
  verify(caption1.nextSibling == tbody1);
  verify(table1.childNodes.item(0) == caption1);
  verify(table1.childNodes.item(1) == tbody1);
}

// --------------------------------------------------------------------

html
{
  "<html>"
    "<body>"
      "<table>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createCaption Mutation Events #1")
  require DOM2_MUTATION_EVENTS;
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  var nodeinserted = "DOMNodeInserted: no event";
  function handleDOMNodeInserted(ev)
  {
    if (nodeinserted != "DOMNodeInserted: no event")
      nodeinserted = "DOMNodeInserted: bogus event";
    else if (ev.target.toString() != "[object HTMLTableCaptionElement]")
      nodeinserted = "DOMNodeInserted: wrong target: " + ev.target;
    else if (ev.relatedNode != table1)
      nodeinserted = "DOMNodeInserted: wrong relatedNode: " + ev.relatedNode;
    else if (ev.target.parentNode != ev.relatedNode)
      nodeinserted = "DOMNodeInserted: not inserted yet";
    else
      nodeinserted = "ok";
  }
  document.addEventListener("DOMNodeInserted", handleDOMNodeInserted, true);

  verify(table1.caption == null);

  var caption1 = table1.createCaption();

  verify(table1.caption == caption1);
  verify(caption1.parentNode == table1);

  if (nodeinserted != "ok")
    throw nodeinserted;
}

// --------------------------------------------------------------------

group "DOM.HTML.HTMLTableElement.functions.deleteCaption";
require init;
language ecmascript;

html
{
  "<html>"
    "<body>"
      "<table>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.deleteCaption #1")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  verify(table1.caption == null);

  table1.deleteCaption();

  verify(table1.caption == null);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<caption>[caption]</caption>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.deleteCaption #2")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var caption1 = document.getElementsByTagNameNS("*", "caption").item(0);

  verify(table1.caption == caption1);
  verify(caption1.parentNode == table1);

  table1.deleteCaption();

  verify(table1.caption == null);
  verify(caption1.parentNode == null);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<caption>[caption]</caption>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.deleteCaption Mutation Events #1")
  require DOM2_MUTATION_EVENTS;
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var caption1 = document.getElementsByTagNameNS("*", "caption").item(0);

  var noderemoved = "DOMNodeRemoved: no event";
  function handleDOMNodeRemoved(ev)
  {
    if (noderemoved != "DOMNodeRemoved: no event")
      noderemoved = "DOMNodeRemoved: bogus event";
    else if (ev.target != caption1)
      noderemoved = "DOMNodeRemoved: wrong target: " + ev.target;
    else if (ev.relatedNode != table1)
      noderemoved = "DOMNodeRemoved: wrong relatedNode: " + ev.relatedNode;
    else if (ev.target.parentNode != ev.relatedNode)
      noderemoved = "DOMNodeRemoved: already removed";
    else
      noderemoved = "ok";
  }
  document.addEventListener("DOMNodeRemoved", handleDOMNodeRemoved, true);

  verify(table1.caption == caption1);

  table1.deleteCaption();

  verify(table1.caption == null);
  verify(caption1.parentNode == null);

  if (noderemoved != "ok")
    throw noderemoved;
}

// --------------------------------------------------------------------

group "DOM.HTML.HTMLTableElement.functions.createTHead";
require init;
language ecmascript;

html
{
  "<html>"
    "<body>"
      "<table>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createTHead #1")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  verify(table1.tHead == null);

  var thead1 = table1.createTHead();

  verify(table1.tHead == thead1);
  verify(thead1.parentNode == table1);
}

test("HTMLTableElement.createTHead #2")
  require success "HTMLTableElement.createTHead #1";
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var thead1 = document.getElementsByTagNameNS("*", "thead").item(0);

  verify(table1.tHead == thead1);
  verify(thead1.parentNode == table1);

  var thead2 = table1.createTHead();

  verify(table1.tHead == thead1);
  verify(thead1.parentNode == table1);
  verify(thead1 == thead2);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<caption>[caption]</caption>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createTHead #3")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var caption1 = document.getElementsByTagNameNS("*", "caption").item(0);

  verify(table1.caption == caption1);
  verify(table1.tHead == null);

  var thead1 = table1.createTHead();

  verify(table1.caption == caption1);
  verify(table1.tHead == thead1);
  verify(thead1.parentNode == table1);
  verify(thead1.previousSibling == caption1);
  verify(table1.childNodes.item(0) == caption1);
  verify(table1.childNodes.item(1) == thead1);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<tfoot>"
          "<tr><td></td></tr>"
        "</tfoot>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createTHead #4")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var tfoot1 = document.getElementsByTagNameNS("*", "tfoot").item(0);

  verify(table1.tHead == null);
  verify(table1.tFoot == tfoot1);

  var thead1 = table1.createTHead();

  verify(table1.tHead == thead1);
  verify(table1.tFoot == tfoot1);
  verify(thead1.parentNode == table1);
  verify(thead1.nextSibling == tfoot1);
  verify(table1.childNodes.item(0) == thead1);
  verify(table1.childNodes.item(1) == tfoot1);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<caption>[caption]</caption>"
        "<tfoot>"
          "<tr><td></td></tr>"
        "</tfoot>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createTHead #5")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var caption1 = document.getElementsByTagNameNS("*", "caption").item(0);
  var tfoot1 = document.getElementsByTagNameNS("*", "tfoot").item(0);

  verify(table1.caption == caption1);
  verify(table1.tHead == null);
  verify(table1.tFoot == tfoot1);

  var thead1 = table1.createTHead();

  verify(table1.caption == caption1);
  verify(table1.tHead == thead1);
  verify(table1.tFoot == tfoot1);
  verify(thead1.parentNode == table1);
  verify(thead1.previousSibling == caption1);
  verify(thead1.nextSibling == tfoot1);
  verify(table1.childNodes.item(0) == caption1);
  verify(table1.childNodes.item(1) == thead1);
  verify(table1.childNodes.item(2) == tfoot1);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<tbody>"
          "<tr><td></td></tr>"
        "</tbody>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createTHead #6")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var tbody1 = document.getElementsByTagNameNS("*", "tbody").item(0);

  verify(table1.tHead == null);
  verify(table1.tBodies.item(0) == tbody1);

  var thead1 = table1.createTHead();

  verify(table1.tHead == thead1);
  verify(table1.tBodies.item(0) == tbody1);
  verify(thead1.parentNode == table1);
  verify(thead1.nextSibling == tbody1);
  verify(table1.childNodes.item(0) == thead1);
  verify(table1.childNodes.item(1) == tbody1);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<caption>[caption]</caption>"
        "<tbody>"
          "<tr><td></td></tr>"
        "</tbody>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createTHead #7")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var caption1 = document.getElementsByTagNameNS("*", "caption").item(0);
  var tbody1 = document.getElementsByTagNameNS("*", "tbody").item(0);

  verify(table1.caption == caption1);
  verify(table1.tHead == null);
  verify(table1.tBodies.item(0) == tbody1);

  var thead1 = table1.createTHead();

  verify(table1.caption == caption1);
  verify(table1.tHead == thead1);
  verify(table1.tBodies.item(0) == tbody1);
  verify(thead1.parentNode == table1);
  verify(thead1.previousSibling == caption1);
  verify(thead1.nextSibling == tbody1);
  verify(table1.childNodes.item(0) == caption1);
  verify(table1.childNodes.item(1) == thead1);
  verify(table1.childNodes.item(2) == tbody1);
}

// --------------------------------------------------------------------

html
{
  "<html>"
    "<body>"
      "<table>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createTHead Mutation Events #1")
  require DOM2_MUTATION_EVENTS;
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  var nodeinserted = "DOMNodeInserted: no event";
  function handleDOMNodeInserted(ev)
  {
    if (nodeinserted != "DOMNodeInserted: no event")
      nodeinserted = "DOMNodeInserted: bogus event";
    else if (ev.target.nodeName.toLowerCase() != "thead")
      nodeinserted = "DOMNodeInserted: wrong target: " + ev.target;
    else if (ev.relatedNode != table1)
      nodeinserted = "DOMNodeInserted: wrong relatedNode: " + ev.relatedNode;
    else if (ev.target.parentNode != ev.relatedNode)
      nodeinserted = "DOMNodeInserted: not inserted yet";
    else
      nodeinserted = "ok";
  }
  document.addEventListener("DOMNodeInserted", handleDOMNodeInserted, true);

  verify(table1.tHead == null);

  var thead1 = table1.createTHead();

  verify(table1.tHead == thead1);
  verify(thead1.parentNode == table1);

  if (nodeinserted != "ok")
    throw nodeinserted;
}

// --------------------------------------------------------------------

group "DOM.HTML.HTMLTableElement.functions.deleteTHead";
require init;
language ecmascript;

html
{
  "<html>"
    "<body>"
      "<table>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.deleteTHead #1")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  verify(table1.tHead == null);

  table1.deleteTHead();

  verify(table1.tHead == null);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<thead>"
          "<tr><td></td></tr>"
        "</thead>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.deleteTHead #2")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var thead1 = document.getElementsByTagNameNS("*", "thead").item(0);

  verify(table1.tHead == thead1);
  verify(thead1.parentNode == table1);

  table1.deleteTHead();

  verify(table1.tHead == null);
  verify(thead1.parentNode == null);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<thead>"
          "<tr><td></td></tr>"
        "</thead>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.deleteTHead Mutation Events #1")
  require DOM2_MUTATION_EVENTS;
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var thead1 = document.getElementsByTagNameNS("*", "thead").item(0);

  var noderemoved = "DOMNodeRemoved: no event";
  function handleDOMNodeRemoved(ev)
  {
    if (noderemoved != "DOMNodeRemoved: no event")
      noderemoved = "DOMNodeRemoved: bogus event";
    else if (ev.target != thead1)
      noderemoved = "DOMNodeRemoved: wrong target: " + ev.target;
    else if (ev.relatedNode != table1)
      noderemoved = "DOMNodeRemoved: wrong relatedNode: " + ev.relatedNode;
    else if (ev.target.parentNode != ev.relatedNode)
      noderemoved = "DOMNodeRemoved: already removed";
    else
      noderemoved = "ok";
  }
  document.addEventListener("DOMNodeRemoved", handleDOMNodeRemoved, true);

  verify(table1.tHead == thead1);

  table1.deleteTHead();

  verify(table1.tHead == null);
  verify(thead1.parentNode == null);

  if (noderemoved != "ok")
    throw noderemoved;
}

// --------------------------------------------------------------------

group "DOM.HTML.HTMLTableElement.functions.createTFoot";
require init;
language ecmascript;

html
{
  "<html>"
    "<body>"
      "<table>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createTFoot #1")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  verify(table1.tFoot == null);

  var tfoot1 = table1.createTFoot();

  verify(table1.tFoot == tfoot1);
  verify(tfoot1.parentNode == table1);
}

test("HTMLTableElement.createTFoot #2")
  require success "HTMLTableElement.createTFoot #1";
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var tfoot1 = document.getElementsByTagNameNS("*", "tfoot").item(0);

  verify(table1.tFoot == tfoot1);
  verify(tfoot1.parentNode == table1);

  var tfoot2 = table1.createTFoot();

  verify(table1.tFoot == tfoot2);
  verify(tfoot1.parentNode == table1);
  verify(tfoot1 == tfoot2);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<caption>[caption]</caption>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createTFoot #3")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var caption1 = document.getElementsByTagNameNS("*", "caption").item(0);

  verify(table1.caption == caption1);
  verify(table1.tFoot == null);

  var tfoot1 = table1.createTFoot();

  verify(table1.caption == caption1);
  verify(table1.tFoot == tfoot1);
  verify(tfoot1.parentNode == table1);
  verify(tfoot1.previousSibling == caption1);
  verify(table1.childNodes.item(0) == caption1);
  verify(table1.childNodes.item(1) == tfoot1);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<thead>"
          "<tr><td></td></tr>"
        "</thead>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createTFoot #4")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var thead1 = document.getElementsByTagNameNS("*", "thead").item(0);

  verify(table1.tHead == thead1);
  verify(table1.tFoot == null);

  var tfoot1 = table1.createTFoot();

  verify(table1.tHead == thead1);
  verify(table1.tFoot == tfoot1);
  verify(tfoot1.parentNode == table1);
  verify(tfoot1.previousSibling == thead1);
  verify(table1.childNodes.item(0) == thead1);
  verify(table1.childNodes.item(1) == tfoot1);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<tbody>"
          "<tr><td></td></tr>"
        "</tbody>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createTFoot #5")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var tbody1 = document.getElementsByTagNameNS("*", "tbody").item(0);

  verify(table1.tFoot == null);
  verify(table1.tBodies.item(0) == tbody1);

  var tfoot1 = table1.createTFoot();

  verify(table1.tFoot == tfoot1);
  verify(table1.tBodies.item(0) == tbody1);
  verify(tfoot1.parentNode == table1);
  verify(tfoot1.nextSibling == tbody1);
  verify(table1.childNodes.item(0) == tfoot1);
  verify(table1.childNodes.item(1) == tbody1);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<thead>"
          "<tr><td></td></tr>"
        "</thead>"
        "<tbody>"
          "<tr><td></td></tr>"
        "</tbody>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createTFoot #6")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var thead1 = document.getElementsByTagNameNS("*", "thead").item(0);
  var tbody1 = document.getElementsByTagNameNS("*", "tbody").item(0);

  verify(table1.tHead == thead1);
  verify(table1.tFoot == null);
  verify(table1.tBodies.item(0) == tbody1);

  var tfoot1 = table1.createTFoot();

  verify(table1.tHead == thead1);
  verify(table1.tFoot == tfoot1);
  verify(table1.tBodies.item(0) == tbody1);
  verify(tfoot1.parentNode == table1);
  verify(tfoot1.previousSibling == thead1);
  verify(tfoot1.nextSibling == tbody1);
  verify(table1.childNodes.item(0) == thead1);
  verify(table1.childNodes.item(1) == tfoot1);
  verify(table1.childNodes.item(2) == tbody1);
}

// --------------------------------------------------------------------

html
{
  "<html>"
    "<body>"
      "<table>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.createTFoot Mutation Events #1")
  require DOM2_MUTATION_EVENTS;
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  var nodeinserted = "DOMNodeInserted: no event";
  function handleDOMNodeInserted(ev)
  {
    if (nodeinserted != "DOMNodeInserted: no event")
      nodeinserted = "DOMNodeInserted: bogus event";
    else if (ev.target != document.getElementsByTagNameNS("*", "tfoot").item(0))
      nodeinserted = "DOMNodeInserted: wrong target: " + ev.target;
    else if (ev.relatedNode != table1)
      nodeinserted = "DOMNodeInserted: wrong relatedNode: " + ev.relatedNode;
    else if (ev.target.parentNode != ev.relatedNode)
      nodeinserted = "DOMNodeInserted: not inserted yet";
    else
      nodeinserted = "ok";
  }
  document.addEventListener("DOMNodeInserted", handleDOMNodeInserted, true);

  verify(table1.tFoot == null);

  var tfoot1 = table1.createTFoot();

  verify(table1.tFoot == tfoot1);
  verify(tfoot1.parentNode == table1);

  if (nodeinserted != "ok")
    throw nodeinserted;
}

// --------------------------------------------------------------------

group "DOM.HTML.HTMLTableElement.functions.deleteTFoot";
require init;
language ecmascript;

html
{
  "<html>"
    "<body>"
      "<table>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.deleteTFoot #1")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  verify(table1.tFoot == null);

  table1.deleteTFoot();

  verify(table1.tFoot == null);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<tfoot>"
          "<tr><td></td></tr>"
        "</tfoot>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.deleteTFoot #2")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var tfoot1 = document.getElementsByTagNameNS("*", "tfoot").item(0);

  verify(table1.tFoot == tfoot1);
  verify(tfoot1.parentNode == table1);

  table1.deleteTFoot();

  verify(table1.tFoot == null);
  verify(tfoot1.parentNode == null);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<tfoot>"
          "<tr><td></td></tr>"
        "</tfoot>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.deleteTFoot Mutation Events #1")
  require DOM2_MUTATION_EVENTS;
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var tfoot1 = document.getElementsByTagNameNS("*", "tfoot").item(0);

  var noderemoved = "DOMNodeRemoved: no event";
  function handleDOMNodeRemoved(ev)
  {
    if (noderemoved != "DOMNodeRemoved: no event")
      noderemoved = "DOMNodeRemoved: bogus event";
    else if (ev.target != tfoot1)
      noderemoved = "DOMNodeRemoved: wrong target: " + ev.target;
    else if (ev.relatedNode != table1)
      noderemoved = "DOMNodeRemoved: wrong relatedNode: " + ev.relatedNode;
    else if (ev.target.parentNode != ev.relatedNode)
      noderemoved = "DOMNodeRemoved: already removed";
    else
      noderemoved = "ok";
  }
  document.addEventListener("DOMNodeRemoved", handleDOMNodeRemoved, true);

  verify(table1.tFoot == tfoot1);

  table1.deleteTFoot();

  verify(table1.tFoot == null);
  verify(tfoot1.parentNode == null);

  if (noderemoved != "ok")
    throw noderemoved;
}

// --------------------------------------------------------------------

group "DOM.HTML.HTMLTableElement.functions.insertRow";
require init;
language ecmascript;

html
{
  "<html>"
    "<body>"
      "<table>"
        "<caption>[caption]</caption>"
        "<thead>"
          "<tr><td></td></tr>"
          "<tr><td></td></tr>"
        "</thead>"
        "<tfoot>"
          "<tr><td></td></tr>"
          "<tr><td></td></tr>"
        "</tfoot>"
        "<tbody>"
          "<tr><td></td></tr>"
          "<tr><td></td></tr>"
        "</tbody>"
        "<tbody>"
          "<tr><td></td></tr>"
          "<tr><td></td></tr>"
        "</tbody>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.insertRow #1")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  verify(table1.rows.length == 8);

  var row1 = table1.insertRow(0);

  verify(table1.rows.length == 9);
  verify(table1.rows.item(0) == row1);
  verify(row1.parentNode == table1.tHead);
  verify(row1 == table1.tHead.firstChild);
}

test("HTMLTableElement.insertRow #2")
  require success "HTMLTableElement.insertRow #1";
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  verify(table1.rows.length == 9);

  var row1 = table1.insertRow(3);

  verify(table1.rows.length == 10);
  verify(table1.rows.item(3) == row1);
  verify(row1.parentNode == table1.tFoot);
  verify(row1 == table1.tFoot.firstChild);
}

test("HTMLTableElement.insertRow #3")
  require success "HTMLTableElement.insertRow #2";
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  verify(table1.rows.length == 10);

  var row1 = table1.insertRow(6);

  verify(table1.rows.length == 11);
  verify(table1.rows.item(6) == row1);
  verify(row1.parentNode == table1.tBodies.item(0));
  verify(row1 == table1.tBodies.item(0).firstChild);
}

test("HTMLTableElement.insertRow #4")
  require success "HTMLTableElement.insertRow #3";
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  verify(table1.rows.length == 11);

  var row1 = table1.insertRow(9);

  verify(table1.rows.length == 12);
  verify(table1.rows.item(9) == row1);
  verify(row1.parentNode == table1.tBodies.item(1));
  verify(row1 == table1.tBodies.item(1).firstChild);
}

test("HTMLTableElement.insertRow #5")
  require success "HTMLTableElement.insertRow #4";
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  verify(table1.rows.length == 12);

  var row1 = table1.insertRow(12);

  verify(table1.rows.length == 13);
  verify(table1.rows.item(12) == row1);
  verify(row1.parentNode == table1.tBodies.item(1));
  verify(row1 == table1.tBodies.item(1).lastChild);
}

test("HTMLTableElement.insertRow #6")
  require success "HTMLTableElement.insertRow #5";
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  verify(table1.rows.length == 13);

  var row1 = table1.insertRow(-1);

  verify(table1.rows.length == 14);
  verify(table1.rows.item(13) == row1);
  verify(row1.parentNode == table1.tBodies.item(1));
  verify(row1 == table1.tBodies.item(1).lastChild);
}

html
{
  "<html>"
    "<body>"
      "<table>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.insertRow #7")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);

  verify(table1.rows.length == 0);
  verify(table1.tBodies.length == 0);

  var row1 = table1.insertRow(0);

  verify(table1.rows.length == 1);
  verify(table1.tBodies.length == 1);
  verify(table1.rows.item(0) == row1);
  verify(row1.parentNode == table1.tBodies.item(0));
  verify(row1 == table1.tBodies.item(0).firstChild);
}

test("HTMLTableElement.insertRow #8")
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  verify(table1);
  try
  {
    table1.insertRow();
    verify(!"insertRow(): should have thrown an exception");
  }
  catch(e) {}
  try
  {
    verify(table1.insertRow("foo") instanceof HTMLTableRowElement);
  }
  catch(e)
  {
    verify(!"insertRow('foo'): shouldn't have thrown an exception");
  }
  verify(table1);
}

html
{
  "<html>"
    "<body>"
      "<table>"
        "<tbody>"
        "</tbody>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.insertRow Mutation Events #1")
  require DOM2_MUTATION_EVENTS;
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var tbody1 = document.getElementsByTagNameNS("*", "tbody").item(0);

  var nodeinserted = "DOMNodeInserted: no event";
  function handleDOMNodeInserted(ev)
  {
    if (nodeinserted != "DOMNodeInserted: no event")
      nodeinserted = "DOMNodeInserted: bogus event";
    else if (ev.target.toString() != "[object HTMLTableRowElement]")
      nodeinserted = "DOMNodeInserted: wrong target: " + ev.target;
    else if (ev.relatedNode != tbody1)
      nodeinserted = "DOMNodeInserted: wrong relatedNode: " + ev.relatedNode;
    else if (ev.target.parentNode != ev.relatedNode)
      nodeinserted = "DOMNodeInserted: not inserted yet";
    else
      nodeinserted = "ok";
  }
  document.addEventListener("DOMNodeInserted", handleDOMNodeInserted, true);

  verify(table1.rows.length == 0);
  verify(table1.tBodies.length == 1);

  var row1 = table1.insertRow(0);

  verify(table1.rows.length == 1);
  verify(table1.tBodies.length == 1);
  verify(table1.rows.item(0) == row1);
  verify(row1.parentNode == table1.tBodies.item(0));
  verify(row1 == table1.tBodies.item(0).firstChild);

  if (nodeinserted != "ok")
    throw nodeinserted;
}

html
{
  "<html>"
    "<body>"
      "<table>"
      "</table>"
    "</body>"
  "</html>"
}

test("HTMLTableElement.insertRow Mutation Events #2")
  require DOM2_MUTATION_EVENTS;
{
  var table1 = document.getElementsByTagNameNS("*", "table").item(0);
  var tbody1 = null;

  var nodeinserted = "DOMNodeInserted: no event";
  var nodeinserted_counter = 0;
  function handleDOMNodeInserted(ev)
  {
    var error;

    switch (++nodeinserted_counter)
    {
    case 1:
      if ((tbody1 = ev.target).nodeName.toLowerCase() != "tbody")
        error = "DOMNodeInserted: wrong target: " + ev.target;
      else if (ev.relatedNode != table1)
        error = "DOMNodeInserted: wrong relatedNode: " + ev.relatedNode;
      else if (ev.target.parentNode != ev.relatedNode)
        error = "DOMNodeInserted: not inserted yet";
      else
        error = "ok";
      break;

    case 2:
      if (ev.target.nodeName.toLowerCase() != "tr")
        error = "DOMNodeInserted: wrong target: " + ev.target;
      else if (ev.relatedNode != tbody1)
        error = "DOMNodeInserted: wrong relatedNode: " + ev.relatedNode;
      else if (ev.target.parentNode != ev.relatedNode)
        error = "DOMNodeInserted: not inserted yet";
      else
        error = "ok";
      break;

    default:
      error = "DOMNodeInserted: unexpected event";
    }

    if (nodeinserted == "ok" || nodeinserted == "DOMNodeInserted: no event")
      nodeinserted = error;
    else
      nodeinserted += "\n" + error;
  }
  document.addEventListener("DOMNodeInserted", handleDOMNodeInserted, true);

  verify(table1.rows.length == 0);
  verify(table1.tBodies.length == 0);

  var row1 = table1.insertRow(0);

  verify(table1.rows.length == 1);
  verify(table1.tBodies.length == 1);
  verify(table1.rows.item(0) == row1);
  verify(row1.parentNode == table1.tBodies.item(0));
  verify(row1 == table1.tBodies.item(0).firstChild);

  if (nodeinserted != "ok")
    throw nodeinserted;
}
