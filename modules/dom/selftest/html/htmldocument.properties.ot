// -*- Mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
group "DOM.HTML.HTMLDocument.properties";
require init;

language ecmascript;

html
{
  "<html>"
    "<head>"
      "<title>[title]</title>"
    "</head>"
    "<body>"
    "</body>"
  "</html>"
}

test("Setup")
{
  checkProperties_HasProperty = function checkProperties_HasProperty(node, properties)
  {
    for (var index = 0; index < properties.length; ++index)
      if (!(properties[index] in node))
        throw "HasProperty: '" + properties[index] + "' not found";
    return true;
  }

  checkProperties_Enumerate = function checkProperties_Enumerate(node, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in node)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  checkProperties_Get = function checkProperties_Get(node, properties, values)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (properties[index] in values)
        if (!(node[properties[index]] == values[properties[index]]))
          throw "Get: '" + properties[index] + "' wrong, is '" + node[properties[index]] + "', should be '" + values[properties[index]] + "'";
    }
    return true;
  }

  checkProperties_PutNotAllowed = function checkProperties_PutNotAllowed(node, properties)
  {
    "use strict";
    for (var index = 0; index < properties.length; ++index)
    {
      var error = null;
      try
      {
        old_value = node[properties[index]];
        if (typeof(old_value) == "string")
          new_value = 10;
        else
          new_value = "foo";
        node[properties[index]] = new_value;
        if (!(node[properties[index]] == old_value))
          error = "PutNotAllowed: '" + properties[index] + "' changed value and didn't throw exception";
        else
          error = "PutNotAllowed: '" + properties[index] + "' didn't throw exception";
      }
      catch(e)
      {
        if (!(e instanceof TypeError))
          error = "PutNotAllowed: '" + properties[index] + "' threw exception other than TypeError";
        else
          if (!(node[properties[index]] == old_value))
            error = "PutNotAllowed: '" + properties[index] + "' threw exception but changed value";
      }
      if (error != null)
        throw error;
    }
    return true;
  }

  properties = [ "title", "referrer", "domain", "URL", "body", "images",
                 "applets", "links", "forms", "anchors", "cookie" ];

  body1 = document.getElementsByTagNameNS("*", "body").item(0);
  verify(body1);
  verify(body1.toString() == "[object HTMLBodyElement]");
}

test("HTMLDocument [[HasProperty]]")
  require success "Setup";
{
  checkProperties_HasProperty(document, properties);
  checkProperties_Enumerate(document, properties);
}

test("HTMLDocument [[Get]]")
  require success "Setup";
{
  checkProperties_Get(document, properties, { title: "[title]",
                                              referrer: "",
                                              domain: "",
                                              URL: "opera:blanker",
                                              body: body1,
                                              cookie: "" });
}

// --------------------------------------------------------------------

html
{
  "<html>"
  "</html>"
}

test("HTMLDocument.body [[Put]] #1")
{
  // A body element is inserted automatically.
  verify(document.body == "[object HTMLBodyElement]");

  var body1 = document.createElementNS("http://www.w3.org/1999/xhtml", "body");

  document.body = body1;

  verify(document.body == body1);
  verify(body1.parentNode == document.documentElement);
}

test("HTMLDocument.body [[Put]] #2")
{
  var body1 = document.getElementsByTagNameNS("*", "body").item(0);
  var body2 = document.createElementNS("http://www.w3.org/1999/xhtml", "body");

  verify(document.body == body1);
  verify(body1.parentNode == document.documentElement);

  document.body = body2;

  verify(document.body == body2);
  verify(body1.parentNode == null);
  verify(body2.parentNode == document.documentElement);
}

html
{
  "<html>"
  "</html>"
}

test("HTMLDocument.body [[Put]] Mutation Events #1")
  require DOM2_MUTATION_EVENTS;
{
  var body1 = document.createElementNS("http://www.w3.org/1999/xhtml", "body");

  var nodeinserted = "DOMNodeInserted: no event";
  function handleDOMNodeInserted(ev)
  {
    if (nodeinserted != "DOMNodeInserted: no event")
      nodeinserted = "DOMNodeInserted: bogus event";
    else if (ev.target != body1)
      nodeinserted = "DOMNodeInserted: wrong target: " + ev.target;
    else if (ev.relatedNode != document.documentElement)
      nodeinserted = "DOMNodeInserted: wrong relatedNode: " + ev.relatedNode;
    else if (ev.target.parentNode != ev.relatedNode)
      nodeinserted = "DOMNodeInserted: not inserted yet";
    else
      nodeinserted = "ok";
  }
  document.addEventListener("DOMNodeInserted", handleDOMNodeInserted, true);

  // A body element is inserted automatically.
  verify(document.body == "[object HTMLBodyElement]");

  document.body = body1;

  verify(document.body == body1);
  verify(body1.parentNode == document.documentElement);
}

test("HTMLDocument.body [[Put]] Mutation Events #2")
  require DOM2_MUTATION_EVENTS;
  require success "HTMLDocument.body [[Put]] Mutation Events #1";
{
  var body1 = document.getElementsByTagNameNS("*", "body").item(0);
  var body2 = document.createElementNS("http://www.w3.org/1999/xhtml", "body");

  var noderemoved = "DOMNodeRemoved: no event";
  var nodeinserted = "DOMNodeInserted: no event";
  var unexpected = "ok";
  function handleEvent(ev)
  {
    if (ev.type == "DOMNodeRemoved")
      if (noderemoved != "DOMNodeRemoved: no event")
        noderemoved = "DOMNodeRemoved: bogus event";
      else if (ev.target != body1)
        noderemoved = "DOMNodeRemoved: wrong target: " + ev.target;
      else if (ev.relatedNode != document.documentElement)
        noderemoved = "DOMNodeRemoved: wrong relatedNode: " + ev.relatedNode;
      else if (ev.target.parentNode != ev.relatedNode)
        noderemoved = "DOMNodeRemoved: already removed";
      else
        noderemoved = "ok";
    else if (ev.type == "DOMNodeInserted")
      if (nodeinserted != "DOMNodeInserted: no event")
        nodeinserted = "DOMNodeInserted: bogus event";
      else if (ev.target != body2)
        nodeinserted = "DOMNodeInserted: wrong target: " + ev.target;
      else if (ev.relatedNode != document.documentElement)
        nodeinserted = "DOMNodeInserted: wrong relatedNode: " + ev.relatedNode;
      else if (ev.target.parentNode != ev.relatedNode)
        nodeinserted = "DOMNodeInserted: not inserted yet";
      else
        nodeinserted = "ok";
    else
      unexpected = ev.type + ": unexpected event";
  }
  document.addEventListener("DOMNodeRemoved", handleEvent, true);
  document.addEventListener("DOMNodeInserted", handleEvent, true);

  verify(document.body == body1);
  verify(body1.parentNode == document.documentElement);

  document.body = body2;

  verify(document.body == body2);
  verify(body1.parentNode == null);
  verify(body2.parentNode == document.documentElement);

  if (noderemoved != "ok")
    throw noderemoved;
  if (nodeinserted != "ok")
    throw nodeinserted;
  if (unexpected != "ok")
    throw unexpected;
}

html
{
  "<html>"
  "</html>"
}

test("HTMLDocument.length")
{
  // There should be no length property, see bug 228761
  verify(!("length" in document));
}

test("HTMLDocument.title#1")
{
  var doc = document.implementation.createHTMLDocument('test doc');
  verify(doc);
  verify(doc.title == 'test doc');
}

test("HTMLDocument.compatMode")
{
  verify("compatMode" in document);
  var value = document.compatMode;
  verify(value == "CSS1Compat" || value == "BackCompat");
  try
    {
      document.compatMode = "Foo";
      // Might throw or fail silently
    }
  catch (e)
    {
    }
  verify(document.compatMode == value);
}
