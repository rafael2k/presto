// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
group "DOM.HTML.HTMLInputElement.properties";
require init;

include "modules/logdoc/htm_elm.h";

include "modules/forms/formvalue.h";
include "modules/dom/src/dominternaltypes.h"; // for DOM_SELECTION_SUPPORT

language ecmascript;

subtest SetFileValue(HTML_Element* file_input, const OpString& file_name)
{
	FormValue* form_value = file_input->GetFormValue();
	verify(form_value);
	form_value->SetValueFromText(file_input, file_name.CStr());
}

html
{
	//! <html><body><form><input type="file"></form></body></html>
}

test("HTMLInputElement.value FileInput #1 Setup")
	language C++;
require _FILE_UPLOAD_SUPPORT_;
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);
	OpString file_name;
	verify(OpStatus::IsSuccess(file_name.Set("\"C:")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("dirnamn")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("filnamn.grej\"")));

	verify(SetFileValue(file_input, file_name));
}

test("HTMLInputElement.value FileInput #1 Test")
	require success "HTMLInputElement.value FileInput #1 Setup";
require _FILE_UPLOAD_SUPPORT_;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0][0]);
	var file = document.forms[0][0];
	verify(file.value == "C:\\fakepath\\filnamn.grej");
}

test("HTMLInputElement.value FileInput #2 Setup")
	language C++;
require _FILE_UPLOAD_SUPPORT_;
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);

	OpString file_name;
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("dirnamn")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("fil2namn.grej")));

	verify(SetFileValue(file_input, file_name));
}

test("HTMLInputElement.value FileInput #2 Test")
	require success "HTMLInputElement.value FileInput #2 Setup";
require _FILE_UPLOAD_SUPPORT_;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0][0]);
	var file = document.forms[0][0];
	verify(file.value== "C:\\fakepath\\fil2namn.grej");
}

test("HTMLInputElement.value FileInput #3 Setup")
	language C++;
require _FILE_UPLOAD_SUPPORT_;
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);

	OpString file_name;
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("dirnamn")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("fil3 na;mn.grej")));

	verify(SetFileValue(file_input, file_name));
}

test("HTMLInputElement.value FileInput #3 Test")
	require success "HTMLInputElement.value FileInput #3 Setup";
require _FILE_UPLOAD_SUPPORT_;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0][0]);
	var file = document.forms[0][0];
	verify(file.value== "C:\\fakepath\\fil3 na");
}

test("HTMLInputElement.value FileInput #4 Setup")
	language C++;
require _FILE_UPLOAD_SUPPORT_;
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);

	OpString file_name;
	verify(OpStatus::IsSuccess(file_name.Append("\"")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("dirnamn")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("fil4 na mn.grej\"")));

	verify(SetFileValue(file_input, file_name));
}

test("HTMLInputElement.value FileInput #4 Test")
	require success "HTMLInputElement.value FileInput #4 Setup";
require _FILE_UPLOAD_SUPPORT_;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0][0]);
	var file = document.forms[0][0];
	verify(file.value== "C:\\fakepath\\fil4 na mn.grej");
}

test("HTMLInputElement.value FileInput #5 Setup")
	language C++;
require _FILE_UPLOAD_SUPPORT_;
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);

	OpString file_name;
	verify(SetFileValue(file_input, file_name));
}

test("HTMLInputElement.value FileInput #5 Test")
	require success "HTMLInputElement.value FileInput #5 Setup";
require _FILE_UPLOAD_SUPPORT_;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0][0]);
	var file = document.forms[0][0];
	verify(file.value== "");
}


test("HTMLInputElement.value FileInput #6 Setup")
	language C++;
require _FILE_UPLOAD_SUPPORT_;
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);

	OpString file_name;
	verify(OpStatus::IsSuccess(file_name.Append(";\"")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("dirnamn")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("fil6 na mn.grej\"")));

	verify(SetFileValue(file_input, file_name));
}

test("HTMLInputElement.value FileInput #6 Test")
	require success "HTMLInputElement.value FileInput #6 Setup";
require _FILE_UPLOAD_SUPPORT_;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0][0]);
	var file = document.forms[0][0];
	verify(file.value== "C:\\fakepath\\fil6 na mn.grej");
}

test("HTMLInputElement.value FileInput #7 Setup")
	language C++;
require _FILE_UPLOAD_SUPPORT_;
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);

	OpString file_name;
	verify(OpStatus::IsSuccess(file_name.Append("\"")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("dirnamn")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("fil7a na mn.grej\"")));
	verify(OpStatus::IsSuccess(file_name.Append(";\"")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("dirnamn")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("fil7b na mn.grej\"")));

	verify(SetFileValue(file_input, file_name));
}

test("HTMLInputElement.value FileInput #7 Test")
	require success "HTMLInputElement.value FileInput #7 Setup";
require _FILE_UPLOAD_SUPPORT_;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0][0]);
	var file = document.forms[0][0];
	verify(file.value== "C:\\fakepath\\fil7a na mn.grej");
}

test("HTMLInputElement.value FileInput #8 Setup")
	language C++;
require _FILE_UPLOAD_SUPPORT_;
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);

	OpString file_name;
	verify(OpStatus::IsSuccess(file_name.Append("\"")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("dirnamn")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("fil8a na;mn.grej\"")));
	verify(OpStatus::IsSuccess(file_name.Append(";\"")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("dirnamn")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("fil8b na mn.grej\"")));

	verify(SetFileValue(file_input, file_name));
}

test("HTMLInputElement.value FileInput #8 Test")
	require success "HTMLInputElement.value FileInput #8 Setup";
require _FILE_UPLOAD_SUPPORT_;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0][0]);
	var file = document.forms[0][0];
	verify(file.value== "C:\\fakepath\\fil8a na;mn.grej");
}

test("HTMLInputElement.value FileInput #9 Setup")
	language C++;
require _FILE_UPLOAD_SUPPORT_;
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);

	OpString file_name;
	verify(OpStatus::IsSuccess(file_name.Append(""";\"")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("dirnamn")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("fil9 na mn.grej\"")));

	verify(SetFileValue(file_input, file_name));
}

test("HTMLInputElement.value FileInput #9 Test")
	require success "HTMLInputElement.value FileInput #9 Setup";
require _FILE_UPLOAD_SUPPORT_;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0][0]);
	var file = document.forms[0][0];
	verify(file.value== "C:\\fakepath\\fil9 na mn.grej");
}


test("HTMLInputElement.value FileInputWrite #1 Setup")
	language C++;
require _FILE_UPLOAD_SUPPORT_;
{
	HTML_Element* file_input = find_element("input", 1);
	verify(file_input);

	OpString file_name;
	verify(OpStatus::IsSuccess(file_name.Append(""";\"")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("dirnamn")));
	verify(OpStatus::IsSuccess(file_name.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(file_name.Append("fil9 na mn.grej\"")));

	verify(SetFileValue(file_input, file_name));
}

test("HTMLInputElement.value FileInputWrite #1 Test")
	require success "HTMLInputElement.value FileInputWrite #1 Setup";
require _FILE_UPLOAD_SUPPORT_;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0][0]);
	var file = document.forms[0][0];
	verify(file.value== "C:\\fakepath\\fil9 na mn.grej");

	try
	{
		file.value = "new_value";
		verify(!"Setting a file input's value to anything else than the empty string should throw INVALID_STATE_ERR.");
	}
	catch(e)
	{
		verify(e instanceof DOMException);
		verify(e.code == DOMException.INVALID_STATE_ERR);
	}

	verify(file.value== "C:\\fakepath\\fil9 na mn.grej");
}

html
{
	//! <html><head></head><body>
	//! <form>
	//! <input type="radio" name="rad" value="red">
	//! <input type="radio" name="rad" value="green">
	//! <input type="radio" name="rad" value="yellow">
	//! <input type="radio" name="sl" value="red">
	//! <input type="radio" name="sl" value="green" checked>
	//! <input type="radio" name="sl" value="yellow">
	//! </form>
	//! </body></html>
}

test("HTMLInputElement.checked (radio) #1")
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0].length == 6);
	verify(document.forms[0][0]);
	verify(document.forms[0][1]);
	verify(document.forms[0][2]);
	var r0 = document.forms[0][0];
	var r1 = document.forms[0][1];
	var r2 = document.forms[0][2];

	var sl0 = document.forms[0][3];
	var sl1 = document.forms[0][4];
	var sl2 = document.forms[0][5];

	verify(r2.checked || r2.checked == false);
	verify(r1.checked || r1.checked == false);
	verify(r0.checked || r0.checked == false);

	verify(sl2.checked || sl2.checked == false);
	verify(sl1.checked || sl1.checked == false);
	verify(sl0.checked || sl0.checked == false);

	verify(r2.checked == false);
	verify(r1.checked == false);
	verify(r0.checked == false);
	verify(r0.defaultChecked == false);

	verify(sl2.checked == false);
	verify(sl1.checked == true); // from the attribute
	verify(sl0.checked == false);
	verify(sl1.defaultChecked == true);

	r1.checked = true;
	verify(r1.defaultChecked == false);

	verify(r2.checked == false);
	verify(r1.checked == true);
	verify(r0.checked == false);

	r1.checked = false; // can uncheck from script

	verify(r2.checked == false);
	verify(r1.checked == false);
	verify(r0.checked == false);

	sl1.checked = false; // can uncheck from script

	verify(sl2.checked == false);
	verify(sl1.checked == false);
	verify(sl0.checked == false);

	verify(sl1.defaultChecked == true);

	sl2.checked = true;

	verify(sl2.checked == true);
	verify(sl1.checked == false);
	verify(sl0.checked == false);

	verify(sl1.defaultChecked == true);
	verify(sl2.defaultChecked == false);
}

html
{
	//! <html><head></head><body>
	//! <form style="display:none">
	//! <input type="radio" name="rad" value="red">
	//! <input type="radio" name="rad" value="green">
	//! <input type="radio" name="rad" value="yellow">
	//! <input type="radio" name="sl" value="red">
	//! <input type="radio" name="sl" value="green" checked>
	//! <input type="radio" name="sl" value="yellow">
	//! </form>
	//! </body></html>
}

test("HTMLInputElement.checked (radio) #2")
{
	// This is the same test as #1 but with different HTML
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0].length == 6);
	verify(document.forms[0][0]);
	verify(document.forms[0][1]);
	verify(document.forms[0][2]);
	var r0 = document.forms[0][0];
	var r1 = document.forms[0][1];
	var r2 = document.forms[0][2];

	var sl0 = document.forms[0][3];
	var sl1 = document.forms[0][4];
	var sl2 = document.forms[0][5];

	verify(r2.checked || r2.checked == false);
	verify(r1.checked || r1.checked == false);
	verify(r0.checked || r0.checked == false);

	verify(sl2.checked || sl2.checked == false);
	verify(sl1.checked || sl1.checked == false);
	verify(sl0.checked || sl0.checked == false);

	verify(r2.checked == false);
	verify(r1.checked == false);
	verify(r0.checked == false);
	verify(r0.defaultChecked == false);

	verify(sl2.checked == false);
	verify(sl1.checked == true); // from the attribute
	verify(sl0.checked == false);
	verify(sl1.defaultChecked == true);

	r1.checked = true;
	verify(r1.defaultChecked == false);

	verify(r2.checked == false);
	verify(r1.checked == true);
	verify(r0.checked == false);

	r1.checked = false; // can uncheck from script

	verify(r2.checked == false);
	verify(r1.checked == false);
	verify(r0.checked == false);

	sl1.checked = false; // can uncheck from script

	verify(sl2.checked == false);
	verify(sl1.checked == false);
	verify(sl0.checked == false);

	verify(sl1.defaultChecked == true);

	sl2.checked = true;

	verify(sl2.checked == true);
	verify(sl1.checked == false);
	verify(sl0.checked == false);

	verify(sl1.defaultChecked == true);
	verify(sl2.defaultChecked == false);
}

html
{
	//! <html><head></head><body>
	//! <form>
	//! <input type="checkbox" name="rad0" value="red">
	//! <input type="checkbox" name="rad1" value="green">
	//! <input type="checkbox" name="rad2" value="yellow" checked>
	//! </form>
	//! </body></html>
}

test("HTMLInputElement.checked&defaultChecked (check) #1")
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0].length == 3);
	verify(document.forms[0][0]);
	verify(document.forms[0][1]);
	verify(document.forms[0][2]);
	var r0 = document.forms[0][0];
	var r1 = document.forms[0][1];
	var r2 = document.forms[0][2];

	verify(r0.checked || r0.checked == false);
	verify(r1.checked || r1.checked == false);
	verify(r2.checked || r2.checked == false);

	verify(r0.checked == false);
	verify(r1.checked == false);
	verify(r2.checked == true);

	verify(r0.defaultChecked == false);
	verify(r1.defaultChecked == false);
	verify(r2.defaultChecked == true);

	r1.checked = true;

	verify(r0.checked == false);
	verify(r1.checked == true);
	verify(r2.checked == true);

	verify(r0.defaultChecked == false);
	verify(r1.defaultChecked == false);
	verify(r2.defaultChecked == true);

	r1.checked = false;

	verify(r0.checked == false);
	verify(r1.checked == false);
	verify(r2.checked == true);

	verify(r0.defaultChecked == false);
	verify(r1.defaultChecked == false);
	verify(r2.defaultChecked == true);

	r2.checked = false;

	verify(r0.checked == false);
	verify(r1.checked == false);
	verify(r2.checked == false);

	verify(r0.defaultChecked == false);
	verify(r1.defaultChecked == false);
	verify(r2.defaultChecked == true);
}

html
{
	//! <html><head></head><body>
	//! <form style="display:none">
	//! <input type="checkbox" name="rad0" value="red">
	//! <input type="checkbox" name="rad1" value="green">
	//! <input type="checkbox" name="rad2" value="yellow" checked>
	//! </form>
	//! </body></html>
}

test("HTMLInputElement.checked&defaultChecked (check) #2")
{
	// This is the same test as #1 but with different HTML

	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0].length == 3);
	verify(document.forms[0][0]);
	verify(document.forms[0][1]);
	verify(document.forms[0][2]);
	var r0 = document.forms[0][0];
	var r1 = document.forms[0][1];
	var r2 = document.forms[0][2];

	verify(r0.checked || r0.checked == false);
	verify(r1.checked || r1.checked == false);
	verify(r2.checked || r2.checked == false);

	verify(r0.checked == false);
	verify(r1.checked == false);
	verify(r2.checked == true);

	verify(r0.defaultChecked == false);
	verify(r1.defaultChecked == false);
	verify(r2.defaultChecked == true);

	r1.checked = true;

	verify(r0.checked == false);
	verify(r1.checked == true);
	verify(r2.checked == true);

	verify(r0.defaultChecked == false);
	verify(r1.defaultChecked == false);
	verify(r2.defaultChecked == true);

	r1.checked = false;

	verify(r0.checked == false);
	verify(r1.checked == false);
	verify(r2.checked == true);

	verify(r0.defaultChecked == false);
	verify(r1.defaultChecked == false);
	verify(r2.defaultChecked == true);

	r2.checked = false;

	verify(r0.checked == false);
	verify(r1.checked == false);
	verify(r2.checked == false);

	verify(r0.defaultChecked == false);
	verify(r1.defaultChecked == false);
	verify(r2.defaultChecked == true);
}

test("HTMLInputElement.checked on non-checkbox")
{
	var button = document.createElement('input');
	verify(button.checked == false);
	button.checked = true;
	verify(button.checked == true);
}

html
{
	//! <html><head></head><body>
	//! <form>
	//! <input type="radio" name="rad" value="red">
	//! <input type="radio" name="rad" value="green">
	//! <input type="radio" name="rad" value="yellow">
	//! <input type="radio" name="sl" value="red">
	//! <input type="radio" name="sl" value="green" checked>
	//! <input type="radio" name="sl" value="yellow">
	//! </form>
	//! </body></html>
}

test("HTMLInputElement.value (radio) #1")
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0].length == 6);
	verify(document.forms[0][0]);
	verify(document.forms[0][1]);
	verify(document.forms[0][2]);
	var r0 = document.forms[0][0];
	var r1 = document.forms[0][1];
	var r2 = document.forms[0][2];

	var sl0 = document.forms[0][3];
	var sl1 = document.forms[0][4];
	var sl2 = document.forms[0][5];

	verify(r0.value == "red"    );
	verify(r1.value == "green"  );
	verify(r2.value == "yellow" );

	verify(sl0.value == "red"    );
	verify(sl1.value == "green"  );
	verify(sl2.value == "yellow" );

	r1.value = "brown";
	verify(r0.value == "red"    );
	verify(r1.value == "brown"  );
	verify(r2.value == "yellow" );

	verify(sl0.value == "red"    );
	verify(sl1.value == "green"  );
	verify(sl2.value == "yellow" );

}

html
{
	//! <html><head></head><body>
	//! <form style="display:none">
	//! <input type="radio" name="rad" value="red">
	//! <input type="radio" name="rad" value="green">
	//! <input type="radio" name="rad" value="yellow">
	//! <input type="radio" name="sl" value="red">
	//! <input type="radio" name="sl" value="green" checked>
	//! <input type="radio" name="sl" value="yellow">
	//! </form>
	//! </body></html>
}

test("HTMLInputElement.value (radio) #2")
{
	// This is the same test as #1 but with different HTML
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0].length == 6);
	verify(document.forms[0][0]);
	verify(document.forms[0][1]);
	verify(document.forms[0][2]);
	var r0 = document.forms[0][0];
	var r1 = document.forms[0][1];
	var r2 = document.forms[0][2];

	var sl0 = document.forms[0][3];
	var sl1 = document.forms[0][4];
	var sl2 = document.forms[0][5];

	verify(r0.value == "red"    );
	verify(r1.value == "green"  );
	verify(r2.value == "yellow" );

	verify(sl0.value == "red"    );
	verify(sl1.value == "green"  );
	verify(sl2.value == "yellow" );

	r1.value = "brown";
	verify(r0.value == "red"    );
	verify(r1.value == "brown"  );
	verify(r2.value == "yellow" );

	verify(sl0.value == "red"    );
	verify(sl1.value == "green"  );
	verify(sl2.value == "yellow" );
}

html
{
	//! <html><head></head><body>
	//! <form>
	//! <input type="checkbox" name="rad0" value="red">
	//! <input type="checkbox" name="rad1" value="green">
	//! <input type="checkbox" name="rad2" value="yellow" checked>
	//! </form>
	//! </body></html>
}

test("HTMLInputElement.value (check) #1")
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0].length == 3);
	verify(document.forms[0][0]);
	verify(document.forms[0][1]);
	verify(document.forms[0][2]);
	var r0 = document.forms[0][0];
	var r1 = document.forms[0][1];
	var r2 = document.forms[0][2];

	verify(r0.value == "red"    );
	verify(r1.value == "green"  );
	verify(r2.value == "yellow" );

	r1.value = "brown";
	verify(r0.value == "red"    );
	verify(r1.value == "brown"  );
	verify(r2.value == "yellow" );
}

html
{
	//! <html><head></head><body>
	//! <form style="display:none">
	//! <input type="checkbox" name="rad0" value="red">
	//! <input type="checkbox" name="rad1" value="green">
	//! <input type="checkbox" name="rad2" value="yellow" checked>
	//! </form>
	//! </body></html>
}

test("HTMLInputElement.value (check) #2")
{
	// This is the same test as #1 but with different HTML

	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0].length == 3);
	verify(document.forms[0][0]);
	verify(document.forms[0][1]);
	verify(document.forms[0][2]);
	var r0 = document.forms[0][0];
	var r1 = document.forms[0][1];
	var r2 = document.forms[0][2];

	verify(r0.value == "red"    );
	verify(r1.value == "green"  );
	verify(r2.value == "yellow" );

	r1.value = "brown";
	verify(r0.value == "red"    );
	verify(r1.value == "brown"  );
	verify(r2.value == "yellow" );
}

test("HTMLInputElement.onclick")
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0].length == 3);
	verify(document.forms[0][0]);
	var i = document.forms[0][0];
	verify("onclick" in i);
	verify(i.onclick == null);

	var found = false;
	for (prop in i)
	{
		if (prop == "onclick")
		{
			found = true;
			break;
		}
	}
	verify(found);
}

html
{
	//! <html><head></head><body>
	//! <form>
	//! <input type="number" min="0" max="100" step="10" value="29">
	//! </form>
	//! </body></html>
}

test("HTMLInputElement.value (number)")
{
	var input = document.getElementsByTagName('input')[0];
	verify(input);
	verify(input.value == 29);

	input.value = 40;
	verify(input.value == 40);

	// Should be able to set outside steps
	input.value = 45;
	verify(input.value == 45);

	// Should be able to set outside range
	input.value = -1;
	verify(input.value == -1);
	input.value = 101;
	verify(input.value == 101);

	// Invalid value should set value to the empty string
	input.value = "ASd";
	verify(input.value == "");
}

html
{
	//! <html><head></head><body>
	//! <form>
	//! <input type="range" min="0" max="100" step="10" value="29">
	//! </form>
	//! </body></html>
}

test("HTMLInputElement.value (range)")
{
	var input = document.getElementsByTagName('input')[0];
	verify(input);
	verify(input.value == 30);

	input.value = 40;
	verify(input.value == 40);

	// Outside step should round to nearest step (prefer towards positive infinity).
	input.value = 46;
	verify(input.value == 50);
	input.value = 45;
	verify(input.value == 50);
	input.value = 44;
	verify(input.value == 40);

	// Underflow should set to minimum.
	input.value = -1;
	verify(input.value == 0);

	// Overflow should set to maximum.
	input.value = 101;
	verify(input.value == 100);

	// Invalid value should set value to min + (min+max)/2.
	input.value = "ASd";
	verify(input.value == 50);
}

html
{
	//! <html><head></head><body>
	//! <form><input></form>
	//! </body></html>
}

test("HTMLInputElement.value.setNull (text) #1")
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0].length == 1);
	verify(document.forms[0][0]);
	var input = document.forms[0][0];
	input.value = null;
	verify(input.value == "");
}

html
{
	//! <html><head></head><body>
	//! <form><input value="somevalue"></form>
	//! </body></html>
}

test("HTMLInputElement.value.setNull (text) #2")
{
	// This is the same test as #1 but with different HTML
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0].length == 1);
	verify(document.forms[0][0]);
	var input = document.forms[0][0];
	input.value = null;
	verify(input.value == "");
}

test("HTMLInputElement.value.setUndefined (text)")
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0].length == 1);
	verify(document.forms[0][0]);
	var input = document.forms[0][0];
	input.value = undefined;
	verify(input.value == "undefined");
}

test("HTMLInputElement.width#1")
{
	var i = document.createElement("input");
	verify(i);
	verify("width" in i);
	verify(i.width === 0);
}

html
{
	//! <body><input type="image" src="http://t.oslo.osa/resources/images/16x16-navy.png"></body>
}

test("HTMLInputElement.width+height")
{
	var i = document.getElementsByTagName("input")[0];
	verify(i);
	verify("width" in i);
	verify(i.width === 16);

	verify("height" in i);
	verify(i.height === 16);
}

html
{
	//! <body>
	//! <form action="" name="form1">
	//! <input value="the word THIS should be selected" style="width: 100%">
	//! </form>
}

test("Selection")
require DOM_SELECTION_SUPPORT;
disabled; // Broke when we removed document.selection
{
	verify(document);
	verify(document.forms);
	var f = document.forms[0];
	verify(f);
	var ele = f[0];
	verify(ele);
	ele.focus();
	verify(document.selection);
	var sel = document.selection.createRange ();
	verify(sel);
	verify(sel.moveStart);
	verify(ele.value);
	verify(ele.value == "the word THIS should be selected");
	sel.moveStart('character', -ele.value.length);
	sel.moveStart('character', 9);
	verify(sel.moveEnd);
	sel.moveEnd('character', 4);
	verify(sel.select);
	sel.select();

	verify(ele.selectionStart == 9);
	verify(ele.selectionEnd == 13);
}


test("HTMLInputElement.type")
{
	var button = document.createElement('input');
	verify(button);
	verify("type" in button);
	verify(button.type);
	verify(button.type == "text");

	button.setAttribute("type", "foo");
	verify(button.type);
	verify(button.type == "text");

	button.setAttribute("type", "hIDDen");
	verify(button.type);
	verify(button.type == "hidden");

	button.removeAttribute("type");
	verify(button.type);
	verify(button.type == "text");
}

test("HTMLInputElement.dirName")
{
	var input = document.createElement('input');
	verify(input);
	verify("dirName" in input);
	verify(input.dirName == "");

	input.setAttribute("dirName", "foo");
	verify(input.dirName);
	verify(input.dirName == "foo");

	input.setAttribute("dirName", "hIDDen");
	verify(input.dirName);
	verify(input.dirName == "hIDDen");

	input.setAttribute("dirname", "other");
	verify(input.dirName);
	verify(input.dirName == "other");

	input.removeAttribute("dirName");
	verify(input.dirName == "");

	input.dirName = "foo";
	verify(input.getAttribute("dirName") == "foo");
}

test("HTMLInputElement.files")
{
	var input = document.createElement("input");
	verify("files" in input);
	verify(typeof(input.files) == "object");
	verify(input.files === null);

	input.type="file";
	verify("files" in input);
	verify(typeof(input.files) == "object");
	verify(input.files);
}

html
{
	//! <html><body><form style="display:none">
	//! <input type="text"></input>
	//! <input type="text" maxLength="-2"></input>
	//! <input type="text" maxLength="4"></input>
	//! <input type="text" maxLength="222311003211000"></input>
	//! </form></body></html>
}
test("HTMLInputElement.maxLength")
{
	var i = document.getElementsByTagName('input')[0];
	verify(i);
	verify(i.maxLength === -1);

	i = document.getElementsByTagName('input')[1];
	verify(i);
	verify(i.maxLength === -1);

	i = document.getElementsByTagName('input')[2];
	verify(i);
	verify(i.maxLength === 4);

	i = document.getElementsByTagName('input')[3];
	verify(i);
	verify(i.maxLength === -1);
	try {
		i.maxLength = -1;
		verify(!"Supposed to throw INDEX_SIZE_ERR");
	} catch (e) {
		verify(e instanceof DOMException);
	}
}

html
{
	//! <html><body><form style="display:none">
	//! <input type="text"></input>
	//! <input type="text" size="-2"></input>
	//! <input type="text" size="4"></input>
	//! <input type="text" size="222311003211000"></input>
	//! </form></body></html>
}
test("HTMLInputElement.size")
{
	var i = document.getElementsByTagName('input')[0];
	verify(i);
	verify(i.size === 20);

	i = document.getElementsByTagName('input')[1];
	verify(i);
	verify(i.size === 20);

	i = document.getElementsByTagName('input')[2];
	verify(i);
	verify(i.size === 4);

	i = document.getElementsByTagName('input')[3];
	verify(i);
	verify(i.size === 20);
	try {
		i.size = -1;
		verify(i.size == 20);
	} catch (e) {
		verify(!"Not supposed to throw INDEX_SIZE_ERR");
	}
}

table InputTypesWithSelection(char*)
{
	{ "text" },
	{ "search" },
	{ "tel" },
	{ "url" },
	{ "email" },
	{ "number" }
}

table InputTypesWithoutSelection(char*)
{
	{ "hidden" },
	{ "datetime" },
	{ "date" },
	{ "month" },
	{ "week" },
	{ "time" },
	{ "datetime-local" },
	{ "range" },
	{ "color" },
	{ "checkbox" },
	{ "radio" },
	{ "file" },
	{ "submit" },
	{ "image" },
	{ "reset" },
	{ "button" }

}

foreach (inputType) from InputTypesWithSelection
{
	test("HTMLInputElement.selectionStart - " inputType)
	require DOM_SELECTION_SUPPORT;
	{
		var input = document.createElement("input");
		input.type = inputType;
		verify("selectionStart" in input);
		verify(typeof(input.selectionStart) == "number");
		verify(input.selectionStart >= 0);
	}
}

foreach (inputType) from InputTypesWithoutSelection
{
	test("HTMLInputElement.selectionStart - " inputType)
	require DOM_SELECTION_SUPPORT;
	{
		var input = document.createElement("input");
		input.type = inputType;
		verify("selectionStart" in input);

		var gotException = false;
		try {
			input.selectionStart;
		}
		catch(e) {
			verify(typeof(e) == "object");
			verify("code" in e);
			verify(e.code == 11);
			gotException = true;
		}
		verify(gotException);

		var gotException = false;
		try {
			input.selectionStart = 0;
		}
		catch(e) {
			verify(typeof(e) == "object");
			verify("code" in e);
			verify(e.code == 11);
			gotException = true;
		}
		verify(gotException);
	}
}

foreach (inputType) from InputTypesWithSelection
{
	test("HTMLInputElement.selectionEnd - " inputType)
	require DOM_SELECTION_SUPPORT;
	{
		var input = document.createElement("input");
		input.type = inputType;
		verify("selectionEnd" in input);
		verify(typeof(input.selectionEnd) == "number");
		verify(input.selectionEnd >= 0);
	}
}

foreach (inputType) from InputTypesWithoutSelection
{
	test("HTMLInputElement.selectionEnd - " inputType)
	require DOM_SELECTION_SUPPORT;
	{
		var input = document.createElement("input");
		input.type = inputType;
		verify("selectionEnd" in input);

		var gotException = false;
		try {
			input.selectionEnd;
		}
		catch(e) {
			verify(typeof(e) == "object");
			verify("code" in e);
			verify(e.code == 11);
			gotException = true;
		}
		verify(gotException);

		var gotException = false;
		try {
			input.selectionEnd = 0;
		}
		catch(e) {
			verify(typeof(e) == "object");
			verify("code" in e);
			verify(e.code == 11);
			gotException = true;
		}
		verify(gotException);
	}
}

foreach (inputType) from InputTypesWithSelection
{
	test("HTMLInputElement.selectionDirection - " inputType)
	require DOM_SELECTION_SUPPORT;
	{
		var input = document.createElement("input");
		verify("selectionDirection" in input);
		verify(typeof(input.selectionDirection) == "string");
		verify(input.selectionDirection);
		verify(input.selectionDirection == "forward" ||
			input.selectionDirection == "backward" ||
			input.selectionDirection == "none");
	}
}

foreach (inputType) from InputTypesWithoutSelection
{
	test("HTMLInputElement.selectionDirection - " inputType)
	require DOM_SELECTION_SUPPORT;
	{
		var input = document.createElement("input");
		input.type = inputType;
		verify("selectionDirection" in input);

		var gotException = false;
		try {
			input.selectionDirection;
		}
		catch(e) {
			verify(typeof(e) == "object");
			verify("code" in e);
			verify(e.code == 11);
			gotException = true;
		}
		verify(gotException);

		var gotException = false;
		try {
			input.selectionDirection = "forward";
		}
		catch(e) {
			verify(typeof(e) == "object");
			verify("code" in e);
			verify(e.code == 11);
			gotException = true;
		}
		verify(gotException);
	}
}

table InputTypesSelectionTest(char*)
{
	{ "text" },
	{ "number" }
}

html
{
	//! <!DOCTYPE html><html><body>
	//! <input onselect="log='textOnSelect' + number++" value="1234">
	//! </body></html>
}

test("HTMLInputElement.selectionStart defaultDirection")
require DOM_SELECTION_SUPPORT;
require RANGESELECT_FROM_EDGE;
{
	defaultDirection = 'none';
}
test("HTMLInputElement.selectionStart defaultDirection")
require DOM_SELECTION_SUPPORT;
require undefined RANGESELECT_FROM_EDGE;
{
	defaultDirection = 'forward';
}

foreach (inputType) from InputTypesSelectionTest
{
	test("HTMLInputElement.selectionStart (" inputType ") Set")
	require DOM_SELECTION_SUPPORT;
	{
		var input = document.getElementsByTagName("input")[0];
		verify(input);

		input.type = inputType;
		input.selectionEnd = 0;
		log = "";
		number = 1;

		verify(input.selectionStart == 0);
		verify(input.selectionEnd == 0);
		verify(input.selectionDirection == defaultDirection);

		// Should set both start and end to 4 since the new start is bigger than the old end
		input.selectionStart = 4;
		verify(log == 'textOnSelect1');
		verify(input.selectionStart == 4);
		verify(input.selectionEnd == 4);
		verify(input.selectionDirection == defaultDirection);

		// Shouldn't change anything
		input.selectionStart = 5;
		verify(log == 'textOnSelect2');
		verify(input.selectionStart == 4);
		verify(input.selectionEnd == 4);
		verify(input.selectionDirection == defaultDirection);

		// Should only change start to 0
		input.selectionStart = 0;
		verify(log == 'textOnSelect3');
		verify(input.selectionStart == 0);
		verify(input.selectionEnd == 4);
		verify(input.selectionDirection == defaultDirection);

		// Shouldn't change anything
		input.selectionStart = -1;
		verify(log == 'textOnSelect4');
		verify(input.selectionStart == 0);
		verify(input.selectionEnd == 4);
		verify(input.selectionDirection == defaultDirection);
	}
}

html
{
	//! <!DOCTYPE html><html><body>
	//! <input onselect="log='textOnSelect' + number++" value="1234">
	//! </body></html>
}

test("HTMLInputElement.selectionEnd defaultDirection")
require DOM_SELECTION_SUPPORT;
require RANGESELECT_FROM_EDGE;
{
	defaultDirection = 'none';
}
test("HTMLInputElement.selectionEnd defaultDirection")
require DOM_SELECTION_SUPPORT;
require undefined RANGESELECT_FROM_EDGE;
{
	defaultDirection = 'forward';
}

foreach (inputType) from InputTypesSelectionTest
{
	test("HTMLInputElement.selectionEnd (" inputType ") Set")
	require DOM_SELECTION_SUPPORT;
	{
		var input = document.getElementsByTagName("input")[0];
		verify(input);

		input.type = inputType;
		input.selectionEnd = 0;
		log = "";
		number = 1;

		verify(input.selectionStart == 0);
		verify(input.selectionEnd == 0);
		verify(input.selectionDirection == defaultDirection);

		// Should only change end to 4
		input.selectionEnd = 4;
		verify(log == 'textOnSelect1');
		verify(input.selectionStart == 0);
		verify(input.selectionEnd == 4);
		verify(input.selectionDirection == defaultDirection);

		// Shouldn't change anything
		input.selectionEnd = 5;
		verify(log == 'textOnSelect2');
		verify(input.selectionStart == 0);
		verify(input.selectionEnd == 4);
		verify(input.selectionDirection == defaultDirection);

		// change start so we can test setting end to something smaller than start
		input.selectionStart = 2;
		verify(log == 'textOnSelect3');
		verify(input.selectionStart == 2);
		verify(input.selectionEnd == 4);
		verify(input.selectionDirection == defaultDirection);

		// Should change both start and end to 0 since the new end is smaller than the old start
		input.selectionEnd = 0;
		verify(log == 'textOnSelect4');
		verify(input.selectionStart == 0);
		verify(input.selectionEnd == 0);
		verify(input.selectionDirection == defaultDirection);

		// Shouldn't change anything
		input.selectionEnd = -1;
		verify(log == 'textOnSelect5');
		verify(input.selectionStart == 0);
		verify(input.selectionEnd == 0);
		verify(input.selectionDirection == defaultDirection);
	}
}

html
{
	//! <!DOCTYPE html><html><body>
	//! <input onselect="log='textOnSelect' + number++" value="1234">
	//! </body></html>
}

foreach (inputType) from InputTypesSelectionTest
{
	test("HTMLInputElement.selectionDirection (" inputType ") Set")
	require DOM_SELECTION_SUPPORT;
	require RANGESELECT_FROM_EDGE;
	{
		var input = document.getElementsByTagName("input")[0];
		verify(input);

		input.type = inputType;
		log = "";
		number = 1;

		// Select two characters
		input.selectionStart = 1;
		input.selectionEnd = 2;
		verify(log == 'textOnSelect2');
		verify(input.selectionStart == 1);
		verify(input.selectionEnd == 2);

		verify(input.selectionDirection == "none");

		input.selectionDirection = "backward";
		verify(log == 'textOnSelect3');
		verify(input.selectionStart == 1);
		verify(input.selectionEnd == 2);
		verify(input.selectionDirection == 'backward');

		input.selectionDirection = "forward";
		verify(log == 'textOnSelect4');
		verify(input.selectionStart == 1);
		verify(input.selectionEnd == 2);
		verify(input.selectionDirection == 'forward');

		input.selectionDirection = "none";
		verify(log == 'textOnSelect5');
		verify(input.selectionStart == 1);
		verify(input.selectionEnd == 2);
		verify(input.selectionDirection == 'none');

		input.selectionDirection = 'notexisting';
		verify(log == 'textOnSelect6');
		verify(input.selectionDirection == 'none');

		input.selectionDirection = null;
		verify(log == 'textOnSelect7');
		verify(input.selectionDirection == 'none');
	}

	test("HTMLInputElement.selectionDirection (" inputType ") Set")
	require DOM_SELECTION_SUPPORT;
	require undefined RANGESELECT_FROM_EDGE;
	{
		var input = document.getElementsByTagName("input")[0];
		verify(input);

		input.type = inputType;
		number = 1;

		// Select two characters
		input.selectionStart = 1;
		input.selectionEnd = 2;
		verify(log == 'textOnSelect2');
		verify(input.selectionStart == 1);
		verify(input.selectionEnd == 2);

		verify(input.selectionDirection == "forward");

		input.selectionDirection = "backward";
		verify(log == 'textOnSelect3');
		verify(input.selectionStart == 1);
		verify(input.selectionEnd == 2);
		verify(input.selectionDirection == 'backward');

		input.selectionDirection = "forward";
		verify(log == 'textOnSelect4');
		verify(input.selectionStart == 1);
		verify(input.selectionEnd == 2);
		verify(input.selectionDirection == 'forward');

		input.selectionDirection = "none";
		verify(log == 'textOnSelect5');
		verify(input.selectionStart == 1);
		verify(input.selectionEnd == 2);
		verify(input.selectionDirection == 'forward');

		input.selectionDirection = 'notexisting';
		verify(log == 'textOnSelect6');
		verify(input.selectionDirection == 'forward');

		input.selectionDirection = null;
		verify(log == 'textOnSelect7');
		verify(input.selectionDirection == 'forward');
	}
}

group "DOM.HTML.HTMLInputElement.functions";
require init;

language ecmascript;

html
{
	//! <!DOCTYPE html><html><head><title>select() should automatically focus</title><body>
	//! <input onfocus="log+='textFocused'" onselect="log+='textOnSelect'" value="1234">
	//! </body></html>
}

foreach (inputType) from InputTypesWithSelection
{
	test("HTMLInputElement.select() - " inputType)
	require DOM_SELECTION_SUPPORT;
	{
		var input = document.createElement("input");
		input.type = inputType;
		verify("select" in input);
		verify(input.select);
		input.select();
	}
}

foreach (inputType) from InputTypesWithoutSelection
{
	test("HTMLInputElement.select() - " inputType)
	require DOM_SELECTION_SUPPORT;
	{
		var input = document.createElement("input");
		input.type = inputType;
		verify("select" in input);
		verify(input.select);
		input.select();
	}
}

foreach (inputType) from InputTypesWithSelection
{
	test("HTMLInputElement.setSelectionRange() - " inputType)
	require DOM_SELECTION_SUPPORT;
	{
		var input = document.createElement("input");
		input.type = inputType;
		verify("setSelectionRange" in input);
		verify(input.setSelectionRange);
		input.setSelectionRange(0, 2);
	}
}

foreach (inputType) from InputTypesWithoutSelection
{
	test("HTMLInputElement.setSelectionRange() - " inputType)
	require DOM_SELECTION_SUPPORT;
	{
		var input = document.createElement("input");
		input.type = inputType;
		verify("setSelectionRange" in input);
		verify(input.setSelectionRange);

		var gotException = false;
		try {
			input.setSelectionRange(0, 2);
		}
		catch(e) {
			verify(typeof(e) == "object");
			verify("code" in e);
			verify(e.code == 11);
			gotException = true;
		}
		verify(gotException);
	}
}

test("HTMLInputElement.select() defaultDirection")
require DOM_SELECTION_SUPPORT;
require RANGESELECT_FROM_EDGE;
{
	defaultDirection = "none";
}
test("HTMLInputElement.select() defaultDirection")
require DOM_SELECTION_SUPPORT;
require undefined RANGESELECT_FROM_EDGE;
{
	defaultDirection = "forward";
}

foreach (inputType) from InputTypesSelectionTest
{
	test("HTMLInputElement.select() (" inputType ")")
	require DOM_SELECTION_SUPPORT;
	{
		log = "";

		verify(window.focus);
		window.focus();
		var input = document.getElementsByTagName('input')[0];
		verify(input);
		input.type = inputType;

		verify("select" in input);
		verify(input.select);
		input.select();

		verify(log == "textOnSelecttextFocused");

		verify(input.selectionStart == 0);
		verify(input.selectionEnd == 4);
		verify(input.selectionDirection == defaultDirection);
	}
}

html
{
	//! <!DOCTYPE html><html><head><title>setSelectionRange() should fire onselect event</title><body>
	//! <input onselect="log='textOnSelect' + number++" value="1234">
	//! </body></html>
}

test("HTMLInputElement.setSelectionRange() defaultDirection")
require DOM_SELECTION_SUPPORT;
require RANGESELECT_FROM_EDGE;
{
	defaultDirection = "none";
}
test("HTMLInputElement.setSelectionRange() defaultDirection")
require DOM_SELECTION_SUPPORT;
require undefined RANGESELECT_FROM_EDGE;
{
	defaultDirection = "forward";
}

foreach (inputType) from InputTypesSelectionTest
{
	test("HTMLInputElement.setSelectionRange() (" inputType ")")
	require DOM_SELECTION_SUPPORT;
	{
		log = "";
		number = 1;

		var input = document.getElementsByTagName('input')[0];
		verify(input);
		verify("setSelectionRange" in input);
		verify(input.setSelectionRange);

		input.setSelectionRange(0, 4);
		verify(log == "textOnSelect1");
		verify(input.selectionStart == 0);
		verify(input.selectionEnd == 4);

		input.setSelectionRange(-1, 5);
		verify(log == "textOnSelect2");
		verify(input.selectionStart == 0);
		verify(input.selectionEnd == 4);

		input.setSelectionRange(3, 2);
		verify(log == "textOnSelect3");
		verify(input.selectionStart == 2);
		verify(input.selectionEnd == 2);

		input.setSelectionRange(0, 3, "forward");
		verify(log == "textOnSelect4");
		verify(input.selectionStart == 0);
		verify(input.selectionEnd == 3);
		verify(input.selectionDirection == "forward");

		input.setSelectionRange(0, 3, "backward");
		verify(log == "textOnSelect5");
		verify(input.selectionStart == 0);
		verify(input.selectionEnd == 3);
		verify(input.selectionDirection == "backward");

		input.setSelectionRange(0, 3, "none");
		verify(log == "textOnSelect6");
		verify(input.selectionStart == 0);
		verify(input.selectionEnd == 3);
		verify(input.selectionDirection == defaultDirection);

		input.setSelectionRange(0, 3, "notexisting");
		verify(input.selectionDirection == defaultDirection);

		input.setSelectionRange(0, 3, null);
		verify(input.selectionDirection == defaultDirection);

		try
		{
			// Don't crash.
			input.setSelectionRange.now.apply(new Date(), [], "hjhj");
		}
		catch(e)
		{
		}

		try
		{
			// Don't crash.
			input.setSelectionRange.now.apply(null, [123, 345, 532], new Date());
		}
		catch(e)
		{
		}
	}
}

html
{
	//! <html><head></head><body>
	//! <form>
	//! <input type="number" min="0" max="100" step="10" value="29">
	//! </form>
	//! </body></html>
}

test("HTMLInputElement.step[Up|Down] (number)")
{
	var input = document.getElementsByTagName('input')[0];
	verify(input);
	verify(input.value == 29);

	input.stepUp(1);
	verify(input.value == 30);

	input.stepUp(5);
	verify(input.value == 80);

	var gotException = false;
	try {
		input.stepUp(3);
	}
	catch(e) {
		verify(typeof(e) == "object");
		verify("code" in e);
		verify(e.code == 11);
		gotException = true;
	}
	verify(gotException);

	input.stepDown(5);
	verify(input.value == 30);

	input.stepDown(1);
	verify(input.value == 20);

	var gotException = false;
	try {
		input.stepDown(3);
	}
	catch(e) {
		verify(typeof(e) == "object");
		verify("code" in e);
		verify(e.code == 11);
		gotException = true;
	}
	verify(gotException);

	input.value = 25;
	input.stepDown(1);
	verify(input.value == 20);
}

html
{
	//! <html><head></head><body>
	//! <form>
	//! <input type="range" min="0" max="100" step="10" value="29">
	//! </form>
	//! </body></html>
}

test("HTMLInputElement.step[Up|Down] (range)")
{
	var input = document.getElementsByTagName('input')[0];
	verify(input);
	verify(input.value == 30);

	input.stepUp(2);
	verify(input.value == 50);

	input.stepUp(4);
	verify(input.value == 90);

	var gotException = false;
	try {
		input.stepUp(2);
	}
	catch(e) {
		verify(typeof(e) == "object");
		verify("code" in e);
		verify(e.code == 11);
		gotException = true;
	}
	verify(gotException);

	input.stepUp(1);
	verify(input.value == 100);

	input.stepDown(1);
	verify(input.value == 90);

	input.stepDown(4);
	verify(input.value == 50);

	var gotException = false;
	try {
		input.stepDown(6);
	}
	catch(e) {
		verify(typeof(e) == "object");
		verify("code" in e);
		verify(e.code == 11);
		gotException = true;
	}
	verify(gotException);

	input.stepDown(5);
	verify(input.value == 0);
}
