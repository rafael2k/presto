// -*- Mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
group "DOM.HTML.HTMLElement.properties.itemValue";
require init;
language ecmascript;

html
{
	//! <!doctype html>
	//! <html>
	//! <head></head>
	//! <body>
	//!   <span></span>
	//!   <span itemscope></span>
	//!   <meta>
	//!   <audio></audio>
	//!   <embed>
	//!   <iframe></iframe>
	//!   <img>
	//!   <source>
	//!   <video></video>
	//!   <a></a>
	//!   <area>
	//!   <link>
	//!   <object></object>
	//!   <time datetime></time>
	//! </body>
	//! </html>
}

test("element has no itemprop attribute")
{
	var elms = document.querySelectorAll("body>*");
	verify(elms.length == 14);
	for (var i=0; i<elms.length; i++) {
		verify(!elms[i].hasAttribute("itemprop"));
		verify(elms[i].itemValue === null);
		var code;
		try {
			elms[i].itemValue = "foo";
		} catch (e) {
			code = e.code;
		}
		verify(code == 15);
	}
}

html
{
	//! <!doctype html>
	//! <html>
	//! <head></head>
	//! <body>
	//!   <span itemprop="foo" itemscope></span>
	//!   <meta itemprop="foo" itemscope>
	//!   <audio itemprop="foo" itemscope></audio>
	//!   <embed itemprop="foo" itemscope>
	//!   <iframe itemprop="foo" itemscope></iframe>
	//!   <img itemprop="foo" itemscope>
	//!   <source itemprop="foo" itemscope>
	//!   <video itemprop="foo" itemscope></video>
	//!   <a itemprop="foo" itemscope></a>
	//!   <area itemprop="foo" itemscope>
	//!   <link itemprop="foo" itemscope>
	//!   <object itemprop="foo" itemscope></object>
	//!   <time datetime itemprop="foo" itemscope></time>
	//! </body>
	//! </html>
}

test("element has an itemscope attribute")
{
	var elms = document.querySelectorAll("body>*");
	verify(elms.length == 13);
	for (var i=0; i<elms.length; i++) {
		verify(elms[i].hasAttribute("itemprop") && elms[i].hasAttribute("itemscope"));
		verify(elms[i].itemValue == elms[i]);
		var code;
		try {
			elms[i].itemValue = "foo";
		} catch (e) {
			code = e.code;
		}
		verify(code == 15);
	}
}

html
{
	//! <!doctype html>
	//! <html>
	//! <head>
	//!   <base href="http://t/resources/">
	//! </head>
	//! <body>
	//!   <meta itemprop="foo">
	//!   <audio itemprop="foo"></audio>
	//!   <embed itemprop="foo">
	//!   <iframe itemprop="foo"></iframe>
	//!   <img itemprop="foo">
	//!   <source itemprop="foo">
	//!   <video itemprop="foo"></video>
	//!   <a itemprop="foo"></a>
	//!   <area itemprop="foo">
	//!   <link itemprop="foo">
	//!   <object itemprop="foo"></object>
	//!   <time datetime itemprop="foo"></time>
	//!   <div>
	//!     <time itemprop="foo"></time>
	//!     <span itemprop="foo"></span>
	//!     <center itemprop="foo"></center>
	//!   </div>
	//! </body>
	//! </html>
}

test("reflection setup")
{
	verifyStringReflection = function(elm, attr, prop, str, delete_reflected) {
		verify(typeof elm[prop] == "string");

		// reflect content attribute -> DOM property
		verify(!elm.hasAttribute(attr));
		verify(elm[prop] == "");
		elm.setAttribute(attr, str);
		verify(elm[prop] == str);
		elm.removeAttribute(attr);
		verify(elm[prop] == "");

		// reflect DOM property -> content attribute
		elm[prop] = "";
		verify(elm.getAttribute(attr) == "");
		elm[prop] = str;
		verify(elm.getAttribute(attr) == str);

		delete elm[prop];
		if (delete_reflected != false)
			verify(elm.getAttribute(attr) === null);
		else
			verify(elm.getAttribute(attr) == str);
	};

	verifyUrlReflection = function(elm, attr, prop, path, delete_reflected) {
		var base = "http://t/resources/";

		verify(typeof elm[prop] == "string");

		// reflect content attribute -> DOM property
		verify(!elm.hasAttribute(attr));
		verify(elm[prop] == "");
		//elm.setAttribute(attr, "");
		//verify(elm[prop] == base);
		elm.setAttribute(attr, path);
		verify(elm[prop] == base+path);
		elm.removeAttribute(attr);
		verify(elm[prop] == "");

		// reflect DOM property -> content attribute
		elm[prop] = "";
		verify(elm.getAttribute(attr) == "");
		elm[prop] = path;
		verify(elm.getAttribute(attr) == path);

		delete elm[prop];
		if (delete_reflected != false)
			verify(elm.getAttribute(attr) === null);
		else
			verify(elm.getAttribute(attr) == path);
	};

	verifyItemValueStringReflection = function(tagName, attr, str) {
		var elms = document.getElementsByTagName(tagName);
		verify(elms.length == 1);
		verifyStringReflection(elms[0], attr, "itemValue", str, false);
	};


	verifyItemValueUrlReflection = function(tagName, attr, path) {
		var elms = document.getElementsByTagName(tagName);
		verify(elms.length == 1);
		verifyUrlReflection(elms[0], attr, "itemValue", path, false);
	};
}

test("meta element (@content)")
{
	verifyItemValueStringReflection("meta", "content", "metacontent");
}

test("audio element (@src)")
	require MEDIA_HTML_SUPPORT;
{
	verifyItemValueUrlReflection("audio", "src", "audiosrc");
}

test("embed element (@src)")
{
	// Spec violation. embed reflection of src doesn't resolve URL. IE doesn't
	// either, so "fixing" it might be unwise.
	// verifyItemValueUrlReflection("embed", "src", "embedsrc");
	verifyItemValueStringReflection("embed", "src", "http://t/resources/blank.htm");
}

test("iframe element (@src)")
{
	verifyItemValueUrlReflection("iframe", "src", "iframesrc");
}

test("img element (@src)")
{
	verifyItemValueUrlReflection("img", "src", "imgsrc");
}

test("source element (@src)")
	require MEDIA_HTML_SUPPORT;
{
	verifyItemValueUrlReflection("source", "src", "sourcesrc");
}

test("video element (@src)")
	require MEDIA_HTML_SUPPORT;
{
	verifyItemValueUrlReflection("video", "src", "videosrc");
}

test("a element (@href)")
{
	verifyItemValueUrlReflection("a", "href", "ahref");

}

test("area element (@href)")
{
	verifyItemValueUrlReflection("area", "href", "areahref");
}

test("link element (@href)")
{
	verifyItemValueUrlReflection("link", "href", "linkhref");
}

test("object element (@data)")
{
	verifyItemValueUrlReflection("object", "data", "objectdata");
}

test("time element (@datetime)")
{
	var time = document.querySelector("time");
	verify(time.hasAttribute("datetime"));

	// reflect content attribute -> DOM property
	time.setAttribute("datetime", "2009-11-29");
	verify(time.itemValue == "2009-11-29");

	// reflect DOM property -> content attribute
	time.itemValue = "2009-11-30";
	verify(time.getAttribute("datetime") == "2009-11-30");

	// delete not reflected
	delete time.itemValue;
	verify(time.getAttribute("datetime") == "2009-11-30");
}

test("otherwise (textContent)")
{
	var elms = document.querySelectorAll("div>*");
	verify(elms.length == 3);
	for (var i=0; i<elms.length; i++) {
		var elm = elms[i];
		elm.textContent = "text1";
		verify(elm.itemValue == "text1");
		elm.itemValue = "text2";
		verify(elm.textContent == "text2");
		delete elm.itemValue;
		verify(elm.textContent == "text2");
	}
}

// sneak in some unrelated reflection tests here because it's convenient

test("@itemscope reflection")
{
	var div = document.createElement("div");

	// reflect content attribute -> DOM property
	verify(!div.itemScope);
	div.setAttribute("itemscope", "itemscope");
	verify(div.itemScope);
	div.removeAttribute("itemscope");
	verify(!div.itemScope);

	// reflect DOM property -> content attribute
	div.itemScope = true;
	verify(div.hasAttribute("itemscope"));
	div.itemScope = false;
	verify(!div.hasAttribute("itemscope"));

	div.itemScope = true;
	verify(div.hasAttribute("itemscope"));
	delete div.itemScope;
	verify(div.getAttribute("itemscope") === null);
}

test("@itemtype reflection")
{
	var div = document.createElement("div");
	verifyStringReflection(div, "itemtype", "itemType", "someType");
}

test("@itemid reflection")
{
	var div = document.createElement("div");
	verifyUrlReflection(div, "itemid", "itemId", "someId");
}

test("@itemprop reflection")
{
	var div = document.createElement("div");
	verify(div.itemProp instanceof DOMSettableTokenList);
	//verifyStringReflection(div, "itemprop", "itemProp", "someProp1 someProp2");
	// Rest of functionality is checked in DOM.Core.DOMSettableTokenList selftest.
}

test("@itemref reflection")
{
	var div = document.createElement("div");
	verify(div.itemProp instanceof DOMSettableTokenList);
	//verifyStringReflection(div, "itemref", "itemRef", "id1 id2");
	// Rest of functionality is checked in DOM.Core.DOMSettableTokenList selftest.
}

html
{
	//! <div itemscope>
	//!     <span id='span' itemprop='prop1'>propval1</span>
	//! </div>
}
test("@textContent reflection with PutNameRestart()")
{
	var removedNodeId;
	function OnNodeRemoved(e)
	{
		removedNodeId = e.relatedNode.id;
	}
	document.addEventListener('DOMNodeRemoved', OnNodeRemoved, false);
	document.querySelector('#span').itemValue = 7;
	verify(removedNodeId == 'span');
	verify(document.querySelector('#span').itemValue == 7);
}

