// -*- Mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
group "DOM.HTML.HTMLElement.properties.getter.caller";
require init;
language ecmascript;

html
{
	//! <!doctype html>
	//! <html>
	//! <head></head>
	//! <body>
	//!     <div>
	//!	        <div id="id1" itemprop="prop1">val1</div>
	//!	        <div id="id2" itemprop="prop2">val2</div>
	//!
	//!	        <div id="id0" itemprop="0">val0</div>
	//!     </div>
	//! </body>
	//! </html>
}

test ("index getters for non-Microdata item root")
{
//.properties[0] - act as item(0)
//.properties["0"] - act as item(0)
// But here 0 is out of range (as in "out-of-range getters for Microdata item
// root" test).
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props[0] === undefined);

	verify(props["0"] === undefined);
}
test ("index callers for non-Microdata item root")
{
//.properties(0) - act as item(0)
//.properties("0") - act as item(0)
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props(0) === props.item(0));
	verify(props(0) === null);

	verify(props("0") === props.item(0));
	verify(props("0") === null);
}

test ("string getters for non-Microdata item root")
{
//.properties['foo'] - act as namedItem("foo") *only* if such a named property exists in the collection
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props['prop1'] !== props.namedItem("prop1"));
	verify(props['prop1'] === undefined);
}
test ("string callers for non-Microdata item root")
{
//.properties.namedItem(0) - act as namedItem("0") (cast toString)
//.properties('foo') - act as namedItem("foo")
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props.namedItem(0) === props.namedItem("0"));
	verify(props.namedItem(0).length == 0);

	verify(props('prop1') === props.namedItem("prop1"));
	verify(props('prop1').length == 0);
}

test ("object callers for non-Microdata item root")
{
//.properties(someObject) - cast to string, then act according to whatever it matches above
	var obj = {
		toString: function(){return 'prop2';},
		valueOf:  function(){return 2;}
	};
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props(obj) === props.namedItem("prop2"));
	verify(props(obj).length == 0);
}
test ("object getters for non-Microdata item root")
{
//.properties[someObject] - cast to string, then act according to whatever it matches above
	var obj = {
		toString: function(){return 'prop2';},
		valueOf:  function(){return 2;}
	};
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props[obj] !== props.namedItem("prop2"));
	verify(props[obj] === undefined);
}

test ("out-of-range getters for non-Microdata item root")
{
//.properties[Number_out_of_range] - undefined
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props[1000] == undefined);
	verify(props[0] == undefined);
}
test ("out-of-range getters for non-Microdata item root")
{
//.properties(Number_out_of_range) - null
//.properties.item(Number_out_of_range) - null
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props(1000) === null);
	verify(props.item(1000) === null);
	verify(props(0) === null);
	verify(props.item(0) === null);
}

html
{
	//! <!doctype html>
	//! <html>
	//! <head></head>
	//! <body>
	//!     <div itemscope>
	//!	        <div id="id1" itemprop="prop1">val1</div>
	//!	        <div id="id2" itemprop="prop2">val2</div>
	//!
	//!	        <div id="id0" itemprop="0">val0</div>
	//!     </div>
	//! </body>
	//! </html>
}
test ("index getters for Microdata item root")
{
//.properties[0] - act as item(0)
//.properties["0"] - act as item(0)
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props[0] === props.item(0));
	verify(props[0].id == 'id1');

	verify(props["0"] === props.item(0));
	verify(props["0"].id == 'id1');
}
test ("index callers for Microdata item root")
{
//.properties(0) - act as item(0)
//.properties("0") - act as item(0)
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props(0) === props.item(0));
	verify(props(0).id == 'id1');

	verify(props("0") === props.item(0));
	verify(props("0").id == 'id1');
}

test ("string getters for Microdata item root")
{
//.properties['foo'] - act as namedItem("foo") *only* if such a named property exists in the collection
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props['prop1'] === props.namedItem("prop1"));
	verify(props['prop1'].length == 1);
	verify(props['prop1'][0].id == 'id1');
}
test ("string callers for Microdata item root")
{
//.properties.namedItem(0) - act as namedItem("0") (cast toString)
//.properties('foo') - act as namedItem("foo")
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props.namedItem(0) === props.namedItem("0"));
	verify(props.namedItem(0).length == 1);
	verify(props.namedItem(0)[0].id == 'id0');

	verify(props('prop1') === props.namedItem("prop1"));
	verify(props('prop1').length == 1);
	verify(props('prop1')[0].id == 'id1');
}

test ("object getters for Microdata item root")
{
//.properties[someObject] - cast to string, then act according to whatever it matches above
	var obj = {
		toString: function(){return 'prop2';},
		valueOf:  function(){return 2;}
	};
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props(obj) === props.namedItem("prop2"));
	verify(props(obj).length == 1);
	verify(props(obj)[0].id == 'id2');
}
test ("object callers for Microdata item root")
{
//.properties(someObject) - cast to string, then act according to whatever it matches above
	var obj = {
		toString: function(){return 'prop2';},
		valueOf:  function(){return 2;}
	};
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props[obj] === props.namedItem("prop2"));
	verify(props[obj].length == 1);
	verify(props[obj][0].id == 'id2');
}

test ("out-of-range getters for Microdata item root")
{
//.properties[Number_out_of_range] - undefined
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props[1000] === undefined);
}
test ("out-of-range getters for Microdata item root")
{
//.properties(Number_out_of_range) - null
//.properties.item(Number_out_of_range) - null
	var props = document.querySelector('div').properties;
	verify(props);
	verify(props(1000) === null);
	verify(props.item(1000) == null);
}

