/* -*- mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "DOM.Performance";

language ecmascript;

test("window.performance")
	require undefined DOM_WINDOW_PERFORMANCE_OBJECT_SUPPORT;
{
	verify(!("performance" in window));
	verify(window.performance === undefined);
	verify(!("Performance" in window));
}

html
{
	//! <body>
}

test("window.performance")
	require DOM_WINDOW_PERFORMANCE_OBJECT_SUPPORT;
{
	verify("performance" in window);
	verify(window.performance);
	verify("constructor" in window.performance);
}

test("Performance constructor")
	require DOM_WINDOW_PERFORMANCE_OBJECT_SUPPORT;
{
	verify("Performance" in window);
	verify("prototype" in window.Performance);
	verify(Performance.prototype);
	verify(Performance.prototype.constructor === Performance);

	verify(performance instanceof Performance);

	window.performance = "hello";
	verify(window.performance === "hello");
}

html
{
	//! <body>
}

test("performance.now()")
	require DOM_HIGH_RESOLUTION_TIMER_API_SUPPORT;
{
	verify(window.performance);
	verify("now" in performance);
	verify(window.Performance);
	verify(window.Performance.prototype);
	verify("now" in Performance.prototype);

	var time = performance.now();

	var last_time = time;
	for (var i = 0; i < 10000; i++)
	{
		time = performance.now();
		verify(time >= last_time);
		last_time = time;
	}

	time = performance.now();
	verify(time >= last_time);
	last_time = time;

	time = performance.now(new Date());
	verify(time >= last_time);
	last_time = time;

	time = performance.now("hjhj");
	verify(time >= last_time);
	last_time = time;

	try
	{
		// Don't crash.
		performance.now.apply(new Date(), []);
	}
	catch(e)
	{
	}

	try
	{
		// Don't crash.
		performance.now.apply(null, [123, 345, 532]);
	}
	catch(e)
	{
	}

	performance.now = "hello";
	verify(performance.now === "hello");

}
