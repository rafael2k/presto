/* -*- mode: pike; tab-width: 4 -*- */

group "DOM.svg.list";
require init;
require SVG_SUPPORT;
require SVG_DOM;
require SVG_FULL_11;

language ecmascript;

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <svg id="svgElement" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 480 360">
//! <rect id="rect" width="230" height="170" fill="#808080" stroke="none"/>
//! <text id="text" x="10" y="100">En massa text</text>
//! <path d="M 0 0 L 200 200 200 0 Z " id="path"></path>
//! <polygon points="0,0    10 , 20 30, 40 50,60" id="polygon" requiredExtensions="#foo, #bar  ,    #baz%20"/>
//! <path d="M   150 ,150 L200,  100 H 250 V170 Q350,90 375,150 T 400 , 150  C500,100 575,300 560,150 S650,160 550,300 z M500,200 A25,35-80 1,1 450,220 Z" id="path2"/>
//! </svg>
}

/* These tests must be run before any DOM modifications are made to the attributes in question. */
test("SVGPointList (SVG 1.1 DOM Compatibility)")
{
	var points = document.getElementById('polygon').getAttributeNS(null, 'points');
	verify(points == '0,0    10 , 20 30, 40 50,60');
}

test("SVGStringList (SVG 1.1 DOM Compatibility)")
{
	var strings = document.getElementById('polygon').getAttributeNS(null, 'requiredExtensions');
	verify(strings == '#foo, #bar  ,    #baz%20');
}

test("SVGPathSegList (SVG 1.1 DOM Compatibility)")
{
	var d = document.getElementById('path2').getAttributeNS(null, 'd');
	verify(d == 'M   150 ,150 L200,  100 H 250 V170 Q350,90 375,150 T 400 , 150  C500,100 575,300 560,150 S650,160 550,300 z M500,200 A25,35-80 1,1 450,220 Z');
}

test("Setup")
{
	CompareMatrices = function CompareMatrices(matrix, refmatrix, epsilon) {
		if (!((matrix.a <= refmatrix.a+epsilon && matrix.a >= refmatrix.a-epsilon) &&
			  (matrix.b <= refmatrix.b+epsilon && matrix.b >= refmatrix.b-epsilon) &&
			  (matrix.c <= refmatrix.c+epsilon && matrix.c >= refmatrix.c-epsilon) &&
			  (matrix.d <= refmatrix.d+epsilon && matrix.d >= refmatrix.d-epsilon) &&
			  (matrix.e <= refmatrix.e+epsilon && matrix.e >= refmatrix.e-epsilon) &&
			  (matrix.f <= refmatrix.f+epsilon && matrix.f >= refmatrix.f-epsilon)))
			throw "matrices not equal";
		return true;
	}

	do_test = function do_test(func, should_throw, code) {
		try	{
			func();
		} catch(e) {
			return (should_throw && e.code == code);
		}
		return !should_throw;
	}

	/* This method tests general list functionality. Call it with the
	 * list, two valid objects and a third object that isn't allowed
	 * in the list */
	test_general_list_functionality = function test_general_list_functionality(lst, obj1, obj2, obj3) {

		/* Append should remove the object from its current place in the
		 * list before appending it. Therefore the length of the list
		 * remains constant during these appends. */
		for (var i=0;i<5;++i)
			if ((lst.appendItem(obj1) != obj1))
				throw "appendItem() failed";
		if (lst.numberOfItems != 1)
			throw "numberOfItems is not correct";

		/* Test that replaceItem returns the new object that replaces the
		 * old */
		if (lst.replaceItem(obj2, 0) != obj2)
			throw "replaceItem() failed";
		if (lst.numberOfItems != 1)
			throw "numberOfItems failed";

		if (lst.appendItem(obj1) != obj1)
			throw "appendItem() failed";

		if (lst.numberOfItems != 2)
			throw "numberOfItems failed";

		/* Test that the list contains inserted items */
		if (lst.getItem(0) != lst.getItem(0))
			throw "getItem() failed";

		if (lst.getItem(1) != lst.getItem(1))
			throw "getItem() failed";

		if (lst.getItem(0) != obj2)
			throw "getItem() failed";

		if (lst.getItem(1) != obj1)
			throw "getItem() failed";

		/* Test that the correct exception is thrown when accessing
		 * out-of-bounds indexes */
		do_test(function() { lst.getItem(2); },
				true, DOMException.INDEX_SIZE_ERR);

		/* Test clear */
		lst.clear();
		if (lst.numberOfItems != 0)
			throw "clear() failed";

		/* Test removeItem. It should return the removed item */
		if (lst.appendItem(obj1) != obj1)
			throw "appendItem() failed";
		if (lst.numberOfItems != 1)
			throw "numberOfItems failed";
		if (lst.removeItem(0) != obj1)
			throw "removeItem() failed";
		if (lst.numberOfItems != 0)
			throw "removeItem() failed";

		/* Test insertItemBefore. */
		if (lst.insertItemBefore(obj1, 0) != obj1)
			throw "insertItemBefore() failed";

		if (lst.insertItemBefore(obj1, 10) != obj1)
			throw "insertItemBefore() failed";

		if (lst.insertItemBefore(obj1, 20) != obj1)
			throw "insertItemBefore() failed";

		if (lst.insertItemBefore(obj2, 30) != obj2)
			throw "insertItemBefore() failed";

		if (lst.numberOfItems != 2)
			throw "numberOfItems failed";

		/* Test that the correct exception is thrown when trying to
		 * insert object of errornous type */
		do_test(function() { lst.initialize(obj3); },
				true, SVGException.SVG_WRONG_TYPE_ERR);

		do_test(function() { lst.replaceItem(obj3, 0); },
				true, SVGException.SVG_WRONG_TYPE_ERR);

		do_test(function() { lst.insertItemBefore(obj3, 0); },
				true, SVGException.SVG_WRONG_TYPE_ERR);

		do_test(function() { lst.appendItem(obj3); },
				true, SVGException.SVG_WRONG_TYPE_ERR);

		/* Test initialize */
		if (lst.initialize(obj1) != obj1)
			throw "initialize() failed";

		if (lst.numberOfItems != 1)
			throw "initialize() failed";

		if (lst.getItem(0) != obj1)
			throw "initialize() failed";

		/* All done */
		return true;
	}
}

/* Test various list methods. */
test("SVGPathSegList") require success "Setup";
{
	var epsilon = 0.0001;

	var path = document.getElementById('path');
	verify(path);
	var lst = document.getElementById('path').pathSegList;
	verify(lst);
	lst.clear();
	verify(lst.numberOfItems == 0);

	var obj1 = path.createSVGPathSegMovetoAbs(0,0);
	verify(obj1);
	var obj2 = path.createSVGPathSegLinetoAbs(100,50);
	verify(obj2);
	var obj3 = document.getElementById('svgElement').createSVGMatrix();
	verify(obj3);

	/* Append should remove the object from its current place in the
	 * list before appending it. Therefore the length of the list
	 * remains constant during these appends. */
	verify(lst.appendItem(obj1) == obj1);
	verify(lst.appendItem(obj1) == obj1);
	verify(lst.appendItem(obj1) == obj1);
	verify(lst.appendItem(obj1) == obj1);
	verify(lst.appendItem(obj1) == obj1);
	verify(lst.numberOfItems == 1);

	/* Test that replaceItem returns the new object that replaces the
	 * old */
	verify(lst.replaceItem(obj2, 0) == obj2);
	verify(lst.numberOfItems == 1);
	verify(lst.appendItem(obj1) == obj1);
	verify(lst.numberOfItems == 2);

	/* Test that the list contains inserted items */
	verify(lst.getItem(0) == lst.getItem(0));
	verify(lst.getItem(1) == lst.getItem(1));
	verify(lst.getItem(0) == obj2);
	verify(lst.getItem(1) == obj1);

	/* Test that the correct exception is thrown when accessing
	 * out-of-bounds indexes */
	do_test(function() { lst.getItem(12); },
			true, DOMException.INDEX_SIZE_ERR);

	/* Test clear */
	lst.clear();
	verify(lst.numberOfItems == 0);

	/* Test removeItem. It should return the removed item */
	verify(lst.appendItem(obj1) == obj1);
	verify(lst.numberOfItems == 1);
	verify(lst.removeItem(0) == obj1);
	verify(lst.numberOfItems == 0);

	/* Test that the correct exception is thrown when trying to
	 * insert object of errornous type */
	do_test(function() { lst.initialize(obj3); },
			true, SVGException.SVG_WRONG_TYPE_ERR);

	do_test(function() { lst.replaceItem(obj3, 0); },
			true, SVGException.SVG_WRONG_TYPE_ERR);

	do_test(function() { lst.insertItemBefore(obj3, 0); },
			true, SVGException.SVG_WRONG_TYPE_ERR);

	do_test(function() { lst.appendItem(obj3); },
			true, SVGException.SVG_WRONG_TYPE_ERR);

	/* Test initialize */
	verify(lst.initialize(obj1) == obj1);
	verify(lst.numberOfItems == 1);
	verify(lst.getItem(0) == obj1);
}

test("SVGNumberList") require success "Setup";
{
	var epsilon = 0.0001;

	var root = document.getElementById('svgElement');
	var number_list = document.getElementById('text').rotate.baseVal;
	verify(number_list);
	verify(number_list.numberOfItems == 0);

	var num = root.createSVGNumber();
	num.value = 3.14;

	var twice = root.createSVGNumber();
	twice.value = 3.14 * 2;

	var matrix = root.createSVGMatrix();

	verify(test_general_list_functionality(number_list, num, twice, matrix));

	// specific number list
	number_list.clear();
	verify(number_list.appendItem(num) == num);
	verify(number_list.numberOfItems == 1);
	verify((number_list.getItem(0).value - 3.14) < epsilon);
}

test("SVGLengthList") require success "Setup";
{
	var epsilon = 0.0001;

	var root = document.getElementById('svgElement');
	var length_list = document.getElementById('text').x.baseVal;
	verify(length_list);
	verify(length_list.numberOfItems == 1);
	length_list.clear();
	verify(length_list.numberOfItems == 0);

	var num = root.createSVGLength();
	num.value = 3.14;
	num.unitType = SVGLength.SVG_LENGTHTYPE_NUMBER;

	var twice = root.createSVGLength();
	twice.value = 3.14 * 2;
	twice.unitType = SVGLength.SVG_LENGTHTYPE_NUMBER;

	var matrix = root.createSVGMatrix();

	verify(test_general_list_functionality(length_list, num, twice, matrix));
}

test("SVGDOMTransformList::Consolidate") require success "Setup";
{
	var root = document.getElementById('svgElement');
	var transform_list = document.getElementById('rect').transform.baseVal;

	var xform = root.createSVGTransform();
	xform.setTranslate(10,-10);
	verify(transform_list.appendItem(xform) == xform);

	var correct = root.createSVGMatrix();
	correct.a = 1.0; correct.c = 0.0; correct.e = 10;
	correct.b = 0.0; correct.d = 1.0; correct.f = -10;
	verify(CompareMatrices(xform.matrix, correct, 0.0001));

	xform = root.createSVGTransform();
	xform.setTranslate(10,-10);
	verify(transform_list.appendItem(xform) == xform);

	correct.a = 1.0; correct.c = 0.0; correct.e = 10;
	correct.b = 0.0; correct.d = 1.0; correct.f = -10;
	verify(CompareMatrices(xform.matrix, correct, 0.0001));

	var product = transform_list.consolidate();
	verify(transform_list.numberOfItems == 1);
	verify(product == transform_list.getItem(0));

	correct = root.createSVGMatrix();
	correct.a = 1.0; correct.c = 0.0; correct.e = 20;
	correct.b = 0.0; correct.d = 1.0; correct.f = -20;

	verify(CompareMatrices(product.matrix, correct, 0.0001));
}

test("SVGDOMTransformList (insertions)")
{
	var root = document.getElementById('svgElement');
	var transform_list = document.getElementById('rect').transform.baseVal;

	transform_list.clear();
	verify(transform_list.numberOfItems == 0);

	for (var j=0;j<10;j++)
	{
		for(var i=0;i<10;i++)
		{
			var xform = root.createSVGTransform();
			xform.setTranslate(10,10);
			transform_list.appendItem(xform);
		}
		transform_list.clear();
	}

	for (var j=0;j<10;j++)
	{
		for(var i=0;i<10;i++)
		{
			var xform = root.createSVGTransform();
			xform.setTranslate(10,10);
			transform_list.insertItemBefore(xform, 0);
		}
		transform_list.clear();
	}
}

test("SVGDOMTransformList (general)")
{
	verify(test_general_list_functionality(document.getElementById('rect').transform.baseVal,
										   document.getElementById('svgElement').createSVGTransform(),
										   document.getElementById('svgElement').createSVGTransform(),
										   document.getElementById('svgElement').createSVGMatrix()));
}

test("SVGDOMTransformList (semantics I)")
{
	var root = document.getElementById('svgElement');
	var xform = root.createSVGTransform();
	var transform_list = document.getElementById('rect').transform.baseVal;
	transform_list.clear();
	xform.setTranslate(10,10);

	transform_list.appendItem(xform);
	transform_list.appendItem(xform);
	transform_list.appendItem(xform);
	transform_list.appendItem(xform);

	// The item should also have been removed when appended
	verify(transform_list.numberOfItems == 1);

 	transform_list.insertItemBefore(xform, 0);
 	transform_list.insertItemBefore(xform, 1);
 	transform_list.insertItemBefore(xform, 2);
	transform_list.insertItemBefore(xform, 3);

// 	// The item should also have been removed when inserted
 	verify(transform_list.numberOfItems == 1);
}

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <svg id="svgElement" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 480 360">
//! <rect id="rect1" width="230" height="170" fill="#808080" stroke="none"/>
//! <rect id="rect2" width="230" height="170" fill="#808080" stroke="none"/>
//! </svg>
}

/*
 * This test tests whether transforms is removed from other lists when
 * appended to a list
 */
test("SVGDOMTransformList (semantics II)")
{
	var root = document.getElementById('svgElement');
	var transform_list1 = document.getElementById('rect1').transform.baseVal;
	var transform_list2 = document.getElementById('rect2').transform.baseVal;

	verify(transform_list1.numberOfItems == 0);
	verify(transform_list2.numberOfItems == 0);

	var xform1 = root.createSVGTransform();
	xform1.setTranslate(10,10);

	var xform2 = root.createSVGTransform();
	xform2.setTranslate(-10,-10);

	transform_list1.appendItem(xform1);
	transform_list2.appendItem(xform2);

	verify(transform_list1.numberOfItems == 1);
	verify(transform_list2.numberOfItems == 1);

	transform_list1.appendItem(xform2);

	verify(transform_list1.numberOfItems == 2);
	verify(transform_list2.numberOfItems == 0);
}

/*
 * This test tests whether transforms is removed from other lists when
 * inserted into a list
 */
test("SVGDOMTransformList (semantics III)")
{
	var root = document.getElementById('svgElement');
	var transform_list1 = document.getElementById('rect1').transform.baseVal;
	var transform_list2 = document.getElementById('rect2').transform.baseVal;

	transform_list1.clear();
	transform_list2.clear();

	verify(transform_list1.numberOfItems == 0);
	verify(transform_list2.numberOfItems == 0);

	var xform1 = root.createSVGTransform();
	xform1.setTranslate(10,10);

	var xform2 = root.createSVGTransform();
	xform2.setTranslate(-10,-10);

	transform_list1.appendItem(xform1);
	transform_list2.appendItem(xform2);

	verify(transform_list1.numberOfItems == 1);
	verify(transform_list2.numberOfItems == 1);

	transform_list1.insertItemBefore(xform2, 0);

	verify(transform_list1.numberOfItems == 2);
	verify(transform_list2.numberOfItems == 0);
}

/*
 * This test tests whether transforms is removed from other lists when
 * replaced into a list
 */
test("SVGDOMTransformList (semantics IV)")
{
	var root = document.getElementById('svgElement');
	var transform_list1 = document.getElementById('rect1').transform.baseVal;
	var transform_list2 = document.getElementById('rect2').transform.baseVal;

	transform_list1.clear();
	transform_list2.clear();

	verify(transform_list1.numberOfItems == 0);
	verify(transform_list2.numberOfItems == 0);

	var xform1 = root.createSVGTransform();
	xform1.setTranslate(10,10);

	var xform2 = root.createSVGTransform();
	xform2.setTranslate(-10,-10);

	transform_list1.appendItem(xform1);
	transform_list2.appendItem(xform2);

	verify(transform_list1.numberOfItems == 1);
	verify(transform_list2.numberOfItems == 1);

	transform_list1.replaceItem(xform2, 0);

	verify(transform_list1.numberOfItems == 1);
	verify(transform_list2.numberOfItems == 0);
}

/*
 * This test tests whether transforms is removed from other lists when
 * replaced into a list
 */
test("SVGDOMTransformList (semantics V)")
{
	var root = document.getElementById('svgElement');
	var transform_list1 = document.getElementById('rect1').transform.baseVal;
	var transform_list2 = document.getElementById('rect2').transform.baseVal;

	transform_list1.clear();
	transform_list2.clear();

	verify(transform_list1.numberOfItems == 0);
	verify(transform_list2.numberOfItems == 0);

	var xform1 = root.createSVGTransform();
	xform1.setTranslate(10,10);

	transform_list1.appendItem(xform1);
	transform_list2.initialize(transform_list1.getItem(0));

	verify(transform_list1.numberOfItems == 0);
	verify(transform_list2.numberOfItems == 1);
}

test("SVGDOMTransformList (semantics VI)")
{
	var root = document.getElementById('svgElement');

	function makeDummyItem()
	{
		var xform = root.createSVGTransform();
		xform.setTranslate(10,10);
		return xform;
	}

	var transform_list = document.getElementById('rect1').transform.baseVal;
	transform_list.appendItem(makeDummyItem());
	transform_list.appendItem(makeDummyItem());

	var obj1 = transform_list.getItem(0);
	var obj2 = transform_list.getItem(1);

	/*
	 * Here is the tricky part. The object that is sent to replaceItem
	 * is removed from its previous list (which is transform_list
	 * too). This means that the index must be adjusted, since the
	 * object to replace then is at index 0, not 1. So the final
	 * result is that obj1 is the only item in the list.
	 */
	transform_list.replaceItem(obj1, 1);
 	verify(transform_list.numberOfItems == 1);
 	verify(transform_list.getItem(0) == obj1);

	/*
	 * The same thing happends when we insert an item in the list.
	 */
	transform_list.appendItem(obj2);
	transform_list.insertItemBefore(obj1, 1);

	/* obj1 was first removed from the list, so index 1 is transformed
	 * to index 0, and so the list should look like before. */
 	verify(transform_list.numberOfItems == 2);
 	verify(transform_list.getItem(0) == obj1);
 	verify(transform_list.getItem(1) == obj2);
}

test("SVGDOMTransformList (createSVGTransformFromMatrix)") require success "Setup";
{
    var mat = document.getElementById('svgElement').createSVGMatrix();
	var transform_list = document.getElementById('rect1').transform.baseVal;
    var xfrm = transform_list.createSVGTransformFromMatrix(mat);
    verify(xfrm.type == SVGTransform.SVG_TRANSFORM_MATRIX);
	verify(Math.abs(xfrm.matrix.a-mat.a) < 1e-6 &&
		   Math.abs(xfrm.matrix.b-mat.b) < 1e-6 &&
		   Math.abs(xfrm.matrix.c-mat.c) < 1e-6 &&
		   Math.abs(xfrm.matrix.d-mat.d) < 1e-6 &&
		   Math.abs(xfrm.matrix.e-mat.e) < 1e-6 &&
		   Math.abs(xfrm.matrix.f-mat.f) < 1e-6);
}
