group "DOM.svg.object";
require init;
require SVG_SUPPORT;
require SVG_DOM;
require SVG_FULL_11;

language ecmascript;

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 480 360" onload="init();" id="svgroot">
//! <defs>
//!   <pattern id="Pat3a" x="0" y="0" width="20" height="20" patternUnits="userSpaceOnUse">
//!     <rect x="0" y="0" width="10" height="10" fill="#333" />
//!     <rect x="10" y="0" width="10" height="10" fill="#444" />
//!     <rect x="0" y="10" width="10" height="10" fill="#555" />
//!     <rect x="10" y="10" width="10" height="10" fill="#666" />
//!     </pattern>
//!     <path id="pathelem" d="M 0,0 L 10,0 L 0,10 z"/>
//! </defs>
//! <rect id="rect" pointer-events="all" x="10" y="10" width="230" height="170" fill="#808080" stroke="none"/>
//! </svg>
}

test("Setup")
{
	checkProperties_HasProperty = function checkProperties_HasProperty(node, properties)
		{
			for (var index = 0; index < properties.length; ++index)
				if (!(properties[index] in node))
					throw "HasProperty: '" + properties[index] + "' not found";
			return true;
		}

	checkProperties_Enumerate = function checkProperties_Enumerate(node, properties)
		{
			outer: for (var index = 0; index < properties.length; ++index)
			{
				for (var property in node)
					if (property == properties[index])
						continue outer;
				throw "Enumerate: '" + properties[index] + "' not found";
			}
			return true;
		}

	checkProperties_Get = function checkProperties_Get(node, properties, values)
		{
			for (var index = 0; index < properties.length; ++index)
			{
				if (!(properties[index] in values))
					throw "Get: INCORRECT TEST: " + properties[index] + " not in values";
				if (!(node[properties[index]] == values[properties[index]]))
					throw "Get: '" + properties[index] + "' wrong, is '" + node[properties[index]] + "', should be '" + values[properties[index]] + "'";
			}
			return true;
		}

	checkProperties_PutNotAllowed = function checkProperties_PutNotAllowed(node, properties)
		{
			'use strict';

			for (var index = 0; index < properties.length; ++index)
			{
				error = null;
				try
				{
					old_value = node[properties[index]];
					if (typeof(old_value) == "string")
						new_value = 10;
					else
						new_value = "foo";
					node[properties[index]] = new_value;
					if (!(node[properties[index]] == old_value))
						error = "PutNotAllowed: '" + properties[index] + "' changed value and didn't throw exception";
					else
						error = "PutNotAllowed: '" + properties[index] + "' didn't throw exception";
				}
				catch(e)
				{
					if (e instanceof TypeError)
						if (!(node[properties[index]] == old_value))
							error = "PutNotAllowed: '" + properties[index] + "' threw exception but changed value";
				}
				if (error != null)
					throw error;
			}
			return true;
		}

	checkProperties_Unique = function checkProperties_Unique(node, properties)
		{
			error = null;
			for(var index = 0; index < properties.length; ++index)
			{
				if (node[properties[index]] != node[properties[index]])
					error = "Unique: '" + properties[index] + "' did not return an equal object in subsequent accesses";
			}

			if (error != null)
				throw error;

			return true;
		}

	checkFunctions_HasProperty = function checkFunctions_HasProperty(node, properties)
		{
			for (var index = 0; index < properties.length; ++index)
			{
				if (!(properties[index] in node))
					throw "HasProperty: '" + properties[index] + "' not found";
				if (!(typeof(node[properties[index]]) == "function"))
					throw "HasProperty: '" + properties[index] + "' not a function";
			}
			return true;
		}

	checkFunctions_Enumerate = function checkFunctions_Enumerate(node, properties)
		{
			outer: for (var index = 0; index < properties.length; ++index)
			{
				for (var property in node)
					if (property == properties[index])
						continue outer;
				throw "Enumerate: '" + properties[index] + "' not found";
			}
			return true;
		}

/*
	checkConstants = function checkConstants(node, constants)
		{
			for (var name in constants)
			{
				if (node[name] != constants[name])
					throw "Constant: '" + name + "' not found";
			}

		}
*/

	checkInterface = function checkInterface(obj, interfaces)
		{
			for (var index = 0; index < interfaces.length; ++index)
			{
				checkProperties_HasProperty(obj, interfaces[index].all_props);
				checkProperties_Enumerate(obj, interfaces[index].all_props);
				checkProperties_Unique(obj, interfaces[index].all_props);
				checkProperties_PutNotAllowed(obj, interfaces[index].ro_props);
				checkFunctions_HasProperty(obj, interfaces[index].methods);
				checkFunctions_Enumerate(obj, interfaces[index].methods);
/*
				if ("constants" in interfaces[index])
				{
					checkConstants(obj, interfaces[name], interfaces[index].constants);
				}
*/
			}

			return true;
		}

	function Interface(all_props, ro_props, methods/*, name, constants */)
	{
		this.all_props = all_props;
		this.ro_props = ro_props;
		this.methods = methods;
/*
		if (name)
			this.name = name;
		if (constants)
			this.constants = constants;
*/
	}

	svgnumber_interface = new Interface(["value"], [], []);
	svglength_interface = new Interface(["unitType", "value", "valueInSpecifiedUnits", "valueAsString"],
					    ["unitType"],
					    ["newValueSpecifiedUnits", "convertToSpecifiedUnits"]);
	svgangle_interface = new Interface(["unitType", "value", "valueInSpecifiedUnits", "valueAsString"],
					    ["unitType"],
					    ["newValueSpecifiedUnits", "convertToSpecifiedUnits"]);
	svgpoint_interface = new Interface(["x", "y"], [], ["matrixTransform"]);
	svgmatrix_interface = new Interface(["a", "b", "c", "d", "e", "f"], [],
					    ["multiply", "inverse", "translate", "scale", "scaleNonUniform", "rotate", "rotateFromVector", "flipX", "flipY", "skewX", "skewY"]);
	svgrect_interface = new Interface(["x", "y", "width", "height"], [], []);
	svgtransform_interface = new Interface(["type", "matrix", "angle"],
					       ["type", "matrix", "angle"],
					       ["setMatrix", "setTranslate", "setScale", "setRotate", "setSkewX", "setSkewY"]);

	// Path segments
	svgpathseg_interface = new Interface(["pathSegType", "pathSegTypeAsLetter"],
					     ["pathSegType", "pathSegTypeAsLetter"], []);
	svgpathseg_M = new Interface(["x", "y"], [], []);
	svgpathseg_L = new Interface(["x", "y"], [], []);
	svgpathseg_C = new Interface(["x", "y", "x1", "y1", "x2", "y2"], [], []);
	svgpathseg_Q = new Interface(["x", "y", "x1", "y1"], [], []);
	svgpathseg_A = new Interface(["x", "y", "r1", "r2", "angle", "largeArcFlag", "sweepFlag"], [], []);
	svgpathseg_H = new Interface(["x"], [], []);
	svgpathseg_V = new Interface(["y"], [], []);
	svgpathseg_S = new Interface(["x", "y", "x2", "y2"], [], []);
	svgpathseg_T = new Interface(["x", "y"], [], []);

	pathseg_M_ifs = [ svgpathseg_interface, svgpathseg_M ];
	pathseg_m_ifs = [ svgpathseg_interface, svgpathseg_M ];
	pathseg_L_ifs = [ svgpathseg_interface, svgpathseg_L ];
	pathseg_l_ifs = [ svgpathseg_interface, svgpathseg_L ];
	pathseg_C_ifs = [ svgpathseg_interface, svgpathseg_C ];
	pathseg_c_ifs = [ svgpathseg_interface, svgpathseg_C ];
	pathseg_Q_ifs = [ svgpathseg_interface, svgpathseg_Q ];
	pathseg_q_ifs = [ svgpathseg_interface, svgpathseg_Q ];
	pathseg_A_ifs = [ svgpathseg_interface, svgpathseg_A ];
	pathseg_a_ifs = [ svgpathseg_interface, svgpathseg_A ];
	pathseg_H_ifs = [ svgpathseg_interface, svgpathseg_H ];
	pathseg_h_ifs = [ svgpathseg_interface, svgpathseg_H ];
	pathseg_V_ifs = [ svgpathseg_interface, svgpathseg_V ];
	pathseg_v_ifs = [ svgpathseg_interface, svgpathseg_V ];
	pathseg_S_ifs = [ svgpathseg_interface, svgpathseg_S ];
	pathseg_s_ifs = [ svgpathseg_interface, svgpathseg_S ];
	pathseg_T_ifs = [ svgpathseg_interface, svgpathseg_T ];
	pathseg_t_ifs = [ svgpathseg_interface, svgpathseg_T ];
	pathseg_z_ifs = [ svgpathseg_interface ];

	do_test = function do_test(func, should_throw, code) {
		try	{
			func();
		} catch(e) {
			return (should_throw && e.code == code);
		}
		return !should_throw;
	}

    tol = function(a, b) { return Math.abs(a - b) < 1e-5; /* Adjust as appropriate */ }
    verifyMatrix = function(mat, tv)
	{
	    return tol(mat.a, tv.a) && tol(mat.b, tv.b) && tol(mat.c, tv.c) &&
	    tol(mat.d, tv.d) && tol(mat.e, tv.e) && tol(mat.f, tv.f);
	}
}

// Verify the rgbcolors set, when we support SVGColor
test("SVGPaint::setPaint")
	require success "Setup";
{
	var rect = document.getElementById('rect');
	var fill = rect.getPresentationAttribute('fill');
	var stroke = rect.getPresentationAttribute('stroke');
	var color = "#203040";
	var invalid_color = "#abcde;";

	verify(do_test(function() {
					   fill.setPaint(SVGPaint.SVG_PAINTTYPE_RGBCOLOR,
									 null, invalid_color, null);
				   }, true, SVGException.SVG_INVALID_VALUE_ERR));

	verify(do_test(function() {
					   fill.setPaint(SVGPaint.SVG_PAINTTYPE_RGBCOLOR,
									 null, color, null);
				   }, false, 0));
	verify(fill.paintType == SVGPaint.SVG_PAINTTYPE_RGBCOLOR);
	verify(fill.uri == null);
	verify(do_test(function() {
					   fill.setPaint(SVGPaint.SVG_PAINTTYPE_RGBCOLOR,
									 null, null, null);
				   }, true, SVGException.SVG_INVALID_VALUE_ERR));
	verify(do_test(function() {
					   fill.setPaint(SVGPaint.SVG_PAINTTYPE_NONE,
									 null, null, null);
					   stroke.setPaint(SVGPaint.SVG_PAINTTYPE_RGBCOLOR,
									   null, color, null);
				   }, false, 0));
	verify(fill.paintType == SVGPaint.SVG_PAINTTYPE_NONE);
	verify(fill.uri == null);
	verify(stroke.paintType == SVGPaint.SVG_PAINTTYPE_RGBCOLOR);
	verify(do_test(function() {
					   fill.setPaint(SVGPaint.SVG_PAINTTYPE_NONE,
									 null, "red", null);
				   }, true, SVGException.SVG_INVALID_VALUE_ERR));
	verify(fill.paintType == SVGPaint.SVG_PAINTTYPE_NONE);
	verify(fill.uri == null);
	verify(do_test(function() {
					   fill.setPaint(SVGPaint.SVG_PAINTTYPE_URI,
									 "#Pat3a", null, null);
					   stroke.setPaint(SVGPaint.SVG_PAINTTYPE_RGBCOLOR,
									   null, color, null);
				   }, false, 0));
	verify(fill.paintType == SVGPaint.SVG_PAINTTYPE_URI);
	verify(fill.uri == "#Pat3a");
	verify(stroke.paintType == SVGPaint.SVG_PAINTTYPE_RGBCOLOR);
	verify(do_test(function() {
					   fill.setPaint(SVGPaint.SVG_PAINTTYPE_URI_RGBCOLOR,
									 "#Pat3a", color, null);
				   }, false, 0));
	verify(fill.paintType == SVGPaint.SVG_PAINTTYPE_URI_RGBCOLOR);
	verify(fill.uri == "#Pat3a");
	verify(do_test(function() {
					   fill.setPaint(SVGPaint.SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR,
									 null, color, "#deadbe");
				   }, false, 0));
	verify(fill.paintType == SVGPaint.SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR);
	verify(fill.uri == null);

	verify(do_test(function() {
					   fill.setPaint(SVGPaint.SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR,
									 "#Pat3a", color, "#deadbe");
				   }, false, 0));
	verify(fill.paintType == SVGPaint.SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR);
	verify(fill.uri == "#Pat3a");
}

test("SVGPaint::setUri")
	require success "Setup";
{
	var rect = document.getElementById('rect');
	var fill = rect.getPresentationAttribute('fill');
	var stroke = rect.getPresentationAttribute('stroke');
	var color = "#203040";

	verify(do_test(function() {
					   fill.setUri("#Pat3a");
				   }, false, 0));
	verify(fill.paintType == SVGPaint.SVG_PAINTTYPE_URI_NONE);
	verify(fill.uri == "#Pat3a");
}

test("SVGPaint::setRGBColor")
{
	var rect = document.getElementById('rect');
	var fill = rect.getPresentationAttribute('fill');
	var stroke = rect.getPresentationAttribute('stroke');
	var color = "#203040";

	verify(do_test(function() {
					   fill.setRGBColor(color);
				   }, false, 0));
	verify(fill.rgbColor);
	verify(fill.rgbColor.red);
	verify(fill.rgbColor.red.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 32.0);
	verify(fill.rgbColor.green.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 48.0);
	verify(fill.rgbColor.blue.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 64.0);
}

test("Release paint object")
{
	var rect = document.getElementById('rect');
	var fill = rect.getPresentationAttribute('fill');
	var stroke = rect.getPresentationAttribute('stroke');
	var color = "#203040";

	/* Set rgb color */
	verify(do_test(function() {
					   fill.setRGBColor(color);
				   }, false, 0));

	/* Store away value */
	var copy = fill;

	/* Set value by string */
	rect.setAttribute("fill", "#FFFFFF");

	/* Verify that stored away object hasn't changed */
	verify(copy.rgbColor.red.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 32.0);
	verify(copy.rgbColor.green.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 48.0);
	verify(copy.rgbColor.blue.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 64.0);

	/* Verify that new object has changed */
	fill = rect.getPresentationAttribute('fill');
	verify(fill.rgbColor.red.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 255.0);
	verify(fill.rgbColor.green.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 255.0);
	verify(fill.rgbColor.blue.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 255.0);
}

test("Release css::RGBColor object")
{
	var rect = document.getElementById('rect');
	var fill = rect.getPresentationAttribute('fill');
	var stroke = rect.getPresentationAttribute('stroke');
	var color = "#203040";

	/* Set rgb color */
	verify(do_test(function() {
					   fill.setRGBColor(color);
				   }, false, 0));

	/* Store away value */
	var copy = fill.rgbColor;

	/* Set value by string */
	rect.setAttribute("fill", "#FFFFFF");

	/* Verify that stored away object hasn't changed */
	verify(copy.red.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 32.0);
	verify(copy.green.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 48.0);
	verify(copy.blue.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 64.0);

	fill = rect.getPresentationAttribute('fill');

	/* Verify that new object has changed */
	verify(fill.rgbColor.red.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 255.0);
	verify(fill.rgbColor.green.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 255.0);
	verify(fill.rgbColor.blue.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 255.0);
}

test("Release css::PrimitiveValue object")
{
	var rect = document.getElementById('rect');
	var fill = rect.getPresentationAttribute('fill');
	var stroke = rect.getPresentationAttribute('stroke');
	var color = "#203040";

	/* Set rgb color */
	verify(do_test(function() {
					   fill.setRGBColor(color);
				   }, false, 0));

	/* Store away value */
	var copy_r = fill.rgbColor.red;
	var copy_b = fill.rgbColor.blue;
	var copy_g = fill.rgbColor.green;

	/* Set value by string */
	rect.setAttribute("fill", "#FFFFFF");

	/* Verify that stored away object hasn't changed */
	verify(copy_r.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 32.0);
	verify(copy_g.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 48.0);
	verify(copy_b.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 64.0);

	fill = rect.getPresentationAttribute('fill');

	/* Verify that new object has changed */
	verify(fill.rgbColor.red.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 255.0);
	verify(fill.rgbColor.green.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 255.0);
	verify(fill.rgbColor.blue.getFloatValue(CSSPrimitiveValue.CSS_NUMBER) == 255.0);
}

test("Interface: SVGNumber")
  require success "Setup";
{
  var obj = document.getElementById('svgroot').createSVGNumber();
  checkInterface(obj, svgnumber_interface);
}

test("Interface: SVGLength")
  require success "Setup";
{
  var obj = document.getElementById('svgroot').createSVGLength();
  checkInterface(obj, svglength_interface);
}

test("SVGLength methods")
  require success "Setup";
{
    var len = document.getElementById('svgroot').createSVGLength();

    len.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_CM, 10.0);
    verify(Math.abs(len.valueInSpecifiedUnits - 10.0) < 1e-6);
    verify(len.unitType == SVGLength.SVG_LENGTHTYPE_CM);

    len.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_MM);
    verify(Math.abs(len.valueInSpecifiedUnits - 100.0) < 1e-6);
    verify(len.unitType == SVGLength.SVG_LENGTHTYPE_MM);
}

test("Interface: SVGAngle")
  require success "Setup";
{
  var obj = document.getElementById('svgroot').createSVGAngle();
  checkInterface(obj, svgangle_interface);
}

test("Interface: SVGPoint")
  require success "Setup";
{
  var obj = document.getElementById('svgroot').createSVGPoint();
  checkInterface(obj, svgpoint_interface);
}

test("SVGPoint methods")
  require success "Setup";
{
  var pt = document.getElementById('svgroot').createSVGPoint();
  var mat = document.getElementById('svgroot').createSVGMatrix();

  pt.x = pt.y = 1.0;
  mat.a = mat.d = 2.0;

  pt = pt.matrixTransform(mat);

  verify(Math.abs(pt.x - 2.0) < 1e-6);
  verify(Math.abs(pt.y - 2.0) < 1e-6);
}

test("Interface: SVGMatrix")
  require success "Setup";
{
  var obj = document.getElementById('svgroot').createSVGMatrix();
  checkInterface(obj, svgmatrix_interface);
}

test("SVGMatrix methods")
  require success "Setup";
{
    var testmat = document.getElementById('svgroot').createSVGMatrix();

	// [a c e]
	// [b d f]

	var newmat;
    newmat = testmat.translate(12, 34);
    verify(verifyMatrix(newmat, {a:1, b:0, c:0, d:1, e:12, f:34}));

    newmat = testmat.scaleNonUniform(12, 34);
    verify(verifyMatrix(newmat, {a:12, b:0, c:0, d:34, e:0, f:0}));

    newmat = testmat.scale(12);
    verify(verifyMatrix(newmat, {a:12, b:0, c:0, d:12, e:0, f:0}));

    newmat = testmat.flipX();
    verify(verifyMatrix(newmat, {a:-1, b:0, c:0, d:1, e:0, f:0}));

    newmat = testmat.flipY();
    verify(verifyMatrix(newmat, {a:1, b:0, c:0, d:-1, e:0, f:0}));

    newmat = testmat.skewX(45);
    verify(verifyMatrix(newmat, {a:1, b:0, c:1, d:1, e:0, f:0}));

    newmat = testmat.skewY(45);
    verify(verifyMatrix(newmat, {a:1, b:1, c:0, d:1, e:0, f:0}));

    newmat = testmat.rotate(90);
    verify(verifyMatrix(newmat, {a:0, b:1, c:-1, d:0, e:0, f:0}));

    newmat = testmat.rotateFromVector(1, 1);
    verify(verifyMatrix(newmat, {a:0.707107, b:0.707107, c:-0.707107, d:0.707107, e:0, f:0}));

    newmat = testmat.rotateFromVector(-1, -1);
    verify(verifyMatrix(newmat, {a:-0.707107, b:-0.707107, c:0.707107, d:-0.707107, e:0, f:0}));

	testmat.a = testmat.d = 2.0;

    newmat = testmat.inverse();
    verify(verifyMatrix(newmat, {a:0.5, b:0, c:0, d:0.5, e:0, f:0}));

	var newmat2 = testmat.multiply(newmat);
    verify(verifyMatrix(newmat2, {a:1, b:0, c:0, d:1, e:0, f:0}));

	newmat2.d = 0.0;

	try {
		newmat = newmat2.inverse();
		verify(false);
	}
	catch(e){}
}

test("Interface: SVGRect")
  require success "Setup";
{
  var obj = document.getElementById('svgroot').createSVGRect();
  checkInterface(obj, svgrect_interface);
}

test("Interface: SVGTransform")
  require success "Setup";
{
  var obj = document.getElementById('svgroot').createSVGTransform();
  checkInterface(obj, svgtransform_interface);
}

test("SVGTransform methods")
  require success "Setup";
{
    var testxfrm = document.getElementById('svgroot').createSVGTransform();

	testxfrm.setTranslate(42, 84);
	verify(testxfrm.type == SVGTransform.SVG_TRANSFORM_TRANSLATE);
	verify(tol(testxfrm.angle, 0));
	verify(verifyMatrix(testxfrm.matrix, {a:1, b:0, c:0, d:1, e:42, f:84}));

	testxfrm.setScale(2, 2);
	verify(testxfrm.type == SVGTransform.SVG_TRANSFORM_SCALE);
	verify(tol(testxfrm.angle, 0));
	verify(verifyMatrix(testxfrm.matrix, {a:2, b:0, c:0, d:2, e:0, f:0}));

	testxfrm.setSkewX(45);
	verify(testxfrm.type == SVGTransform.SVG_TRANSFORM_SKEWX);
	verify(tol(testxfrm.angle, 45));
	verify(verifyMatrix(testxfrm.matrix, {a:1, b:0, c:1, d:1, e:0, f:0}));

	testxfrm.setSkewY(45);
	verify(testxfrm.type == SVGTransform.SVG_TRANSFORM_SKEWY);
	verify(tol(testxfrm.angle, 45));
	verify(verifyMatrix(testxfrm.matrix, {a:1, b:1, c:0, d:1, e:0, f:0}));

    var testmat = document.getElementById('svgroot').createSVGMatrix();
	testmat.a = 1; testmat.b = 2; testmat.c = 3;
	testmat.d = 4; testmat.e = 5; testmat.f = 6;

	testxfrm.setMatrix(testmat);
	verify(testxfrm.type == SVGTransform.SVG_TRANSFORM_MATRIX);
	verify(tol(testxfrm.angle, 0));
	verify(verifyMatrix(testxfrm.matrix, {a:1, b:2, c:3, d:4, e:5, f:6}));

	testxfrm.setRotate(45, 0, 0);
	verify(testxfrm.type == SVGTransform.SVG_TRANSFORM_ROTATE);
	verify(tol(testxfrm.angle, 45));
	verify(verifyMatrix(testxfrm.matrix, {a:0.707107, b:0.707107, c:-0.707107, d:0.707107, e:0, f:0}));

	testxfrm.setRotate(45, 100, 100);
	verify(testxfrm.type == SVGTransform.SVG_TRANSFORM_ROTATE);
	verify(tol(testxfrm.angle, 45));
	verify(verifyMatrix(testxfrm.matrix, {a:0.707107, b:0.707107, c:-0.707107, d:0.707107, e:100, f:-41.421356}));
}

test("Interface: SVGPathSegClosePath") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegClosePath();
  checkInterface(obj, pathseg_z_ifs);
}

test("Interface: SVGPathSegMovetoAbs") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegMovetoAbs(0, 0);
  checkInterface(obj, pathseg_M_ifs);
}

test("Interface: SVGPathSegMovetoRel") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegMovetoRel(0, 0);
  checkInterface(obj, pathseg_m_ifs);
}

test("Interface: SVGPathSegLinetoAbs") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegLinetoAbs(0, 0);
  checkInterface(obj, pathseg_L_ifs);
}

test("Interface: SVGPathSegLinetoRel") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegLinetoRel(0, 0);
  checkInterface(obj, pathseg_l_ifs);
}

test("Interface: SVGPathSegCurvetoCubicAbs") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegCurvetoCubicAbs(0, 0, 0, 0, 0, 0);
  checkInterface(obj, pathseg_C_ifs);
}

test("Interface: SVGPathSegCurvetoCubicRel") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegCurvetoCubicRel(0, 0, 0, 0, 0, 0);
  checkInterface(obj, pathseg_c_ifs);
}

test("Interface: SVGPathSegCurvetoQuadraticAbs") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegCurvetoQuadraticAbs(0, 0, 0, 0);
  checkInterface(obj, pathseg_Q_ifs);
}

test("Interface: SVGPathSegCurvetoQuadraticRel") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegCurvetoQuadraticRel(0, 0, 0, 0);
  checkInterface(obj, pathseg_q_ifs);
}

test("Interface: SVGPathSegArcAbs") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegArcAbs(0, 0, 0, 0, 0, false, false);
  checkInterface(obj, pathseg_A_ifs);
}

test("Interface: SVGPathSegArcRel") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegArcRel(0, 0, 0, 0, 0, false, false);
  checkInterface(obj, pathseg_a_ifs);
}

test("Interface: SVGPathSegLinetoHorizontalAbs") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegLinetoHorizontalAbs(0);
  checkInterface(obj, pathseg_H_ifs);
}

test("Interface: SVGPathSegLinetoHorizontalRel") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegLinetoHorizontalRel(0);
  checkInterface(obj, pathseg_h_ifs);
}

test("Interface: SVGPathSegLinetoVerticalAbs") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegLinetoVerticalAbs(0);
  checkInterface(obj, pathseg_V_ifs);
}

test("Interface: SVGPathSegLinetoVerticalRel") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegLinetoVerticalRel(0);
  checkInterface(obj, pathseg_v_ifs);
}

test("Interface: SVGPathSegCurvetoCubicSmoothAbs") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegCurvetoCubicSmoothAbs(0, 0, 0, 0);
  checkInterface(obj, pathseg_S_ifs);
}

test("Interface: SVGPathSegCurvetoCubicSmoothRel") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegCurvetoCubicSmoothRel(0, 0, 0, 0);
  checkInterface(obj, pathseg_s_ifs);
}

test("Interface: SVGPathSegCurvetoQuadraticSmoothAbs") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegCurvetoQuadraticSmoothAbs(0, 0);
  checkInterface(obj, pathseg_T_ifs);
}

test("Interface: SVGPathSegCurvetoQuadraticSmoothRel") require success "Setup";
{
  var obj = document.getElementById('pathelem').createSVGPathSegCurvetoQuadraticSmoothRel(0, 0);
  checkInterface(obj, pathseg_t_ifs);
}

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <svg id="svgElement" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 480 360">
//! <rect id="rect" width="230" height="170" fill="#808080" stroke="none"/>
//! </svg>
}

test("SVGDOMLength::GetDistance() (create object)")
{
	var rect = document.getElementById('rect');
	// Verify that there are properties even though they wasn't specified in the document
	verify("value" in rect.x.baseVal);
	verify("value" in rect.y.baseVal);
}
