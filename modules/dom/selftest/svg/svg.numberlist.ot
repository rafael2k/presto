/* -*- mode: pike; tab-width: 4 -*- */

group "DOM.svg.numberlist";
require init;
require SVG_SUPPORT;
require SVG_DOM;
require SVG_FULL_11;

language ecmascript;

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <svg id="svgElement" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 480 360">
//! <rect id="rect" width="230" height="170" fill="#808080" stroke="none"/>
//! <text id="text" x="10" y="100">En massa text</text>
//! </svg>
}

test("Setup")
{
	do_test = function do_test(func, should_throw, code) {
		try	{
			func();
		} catch(e) {
			return (should_throw && e.code == code);
		}
		return !should_throw;
	}

	/* This method tests general list functionality. Call it with the
	 * list, two valid objects and a third object that isn't allowed
	 * in the list */
	test_general_list_functionality = function test_general_list_functionality(lst, obj1, obj2, obj3) {

		/* Append should remove the object from its current place in the
		 * list before appending it. Therefore the length of the list
		 * remains constant during these appends. */
		for (var i=0;i<5;++i)
			if ((lst.appendItem(obj1) != obj1))
				throw "appendItem() failed (1)";
		if (lst.numberOfItems != 1)
			throw "numberOfItems is not correct";

		/* Test that replaceItem returns the new object that replaces the
		 * old */
		if (lst.replaceItem(obj2, 0) != obj2)
			throw "replaceItem() failed";
		if (lst.numberOfItems != 1)
			throw "numberOfItems failed";

		if (lst.appendItem(obj1) != obj1)
			throw "appendItem() failed (2)";

		if (lst.numberOfItems != 2)
			throw "numberOfItems failed";

		/* Test that the list contains inserted items */
		if (lst.getItem(0) != lst.getItem(0))
			throw "getItem() failed";

		if (lst.getItem(1) != lst.getItem(1))
			throw "getItem() failed";

		if (lst.getItem(0) != obj2)
			throw "getItem() failed";

		if (lst.getItem(1) != obj1)
			throw "getItem() failed";

		/* Test that the correct exception is thrown when accessing
		 * out-of-bounds indexes */
		do_test(function() { lst.getItem(2); },
				true, DOMException.INDEX_SIZE_ERR);

		/* Test clear */
		lst.clear();
		if (lst.numberOfItems != 0)
			throw "clear() failed";

		/* Test removeItem. It should return the removed item */
		if (lst.appendItem(obj1) != obj1)
			throw "appendItem() failed (3)";
		if (lst.numberOfItems != 1)
			throw "numberOfItems failed";
		if (lst.removeItem(0) != obj1)
			throw "removeItem() failed";
		if (lst.numberOfItems != 0)
			throw "removeItem() failed";

		/* Test insertItemBefore. */
		if (lst.insertItemBefore(obj1, 0) != obj1)
			throw "insertItemBefore() failed";

		if (lst.insertItemBefore(obj1, 10) != obj1)
			throw "insertItemBefore() failed";

		if (lst.insertItemBefore(obj1, 20) != obj1)
			throw "insertItemBefore() failed";

		if (lst.insertItemBefore(obj2, 30) != obj2)
			throw "insertItemBefore() failed";

		if (lst.numberOfItems != 2)
			throw "numberOfItems failed";

		/* Test that the correct exception is thrown when trying to
		 * insert object of errornous type */
		do_test(function() { lst.initialize(obj3); },
				true, SVGException.SVG_WRONG_TYPE_ERR);

		do_test(function() { lst.replaceItem(obj3, 0); },
				true, SVGException.SVG_WRONG_TYPE_ERR);

		do_test(function() { lst.insertItemBefore(obj3, 0); },
				true, SVGException.SVG_WRONG_TYPE_ERR);

		do_test(function() { lst.appendItem(obj3); },
				true, SVGException.SVG_WRONG_TYPE_ERR);

		/* Test initialize */
		if (lst.initialize(obj1) != obj1)
			throw "initialize() failed";

		if (lst.numberOfItems != 1)
			throw "initialize() failed";

		if (lst.getItem(0) != obj1)
			throw "initialize() failed";

		/* All done */
		return true;
	}
}

/* Test various list methods. */
test("SVGNumberList") require success "Setup";
{
	var epsilon = 0.0001;

	var root = document.getElementById('svgElement');
	var number_list = document.getElementById('text').rotate.baseVal;
	verify(number_list);
	verify(number_list.numberOfItems == 0);

	var num = root.createSVGNumber();
	num.value = 3.14;

	var twice = root.createSVGNumber();
	twice.value = 3.14 * 2;

	var matrix = root.createSVGMatrix();

	verify(test_general_list_functionality(number_list, num, twice, matrix));

	// specific number list
	number_list.clear();
	verify(number_list.appendItem(num) == num);
	verify(number_list.numberOfItems == 1);
	verify((number_list.getItem(0).value - 3.14) < epsilon);
}
