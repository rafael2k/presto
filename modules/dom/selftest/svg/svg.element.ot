/* -*- mode: pike; tab-width: 4 -*- */

group "DOM.svg.element";
require init;
require SVG_SUPPORT;
require SVG_DOM;
require SVG_FULL_12;

language ecmascript;

xml {
//! <?xml version="1.0" encoding="iso-8859-1"?>
//! <svg x="10" width="100" height="500" viewBox="0 0 600 500"
//!      xmlns="http://www.w3.org/2000/svg"
//!      xmlns:xlink="http://www.w3.org/1999/xlink"
//!      version="1.1" id="svgElement">
//!   <title id="title">
//!     Selftest svg-file. Contains a lot svg element with id set.
//!   </title>
//!   <style id="style"></style>
//!   <desc id="desc">
//!     This is a bar chart which shows
//!     company sales by region.
//!   </desc>
//!   <defs id="defs">
//!   <linearGradient id="gradient">
//!     <stop offset="5%" stop-color="#F60" />
//!     <stop offset="95%" stop-color="#FF6" />
//!   </linearGradient>
//!   <marker id="marker"
//!       viewBox="0 0 10 10" refX="0" refY="5"
//!       markerUnits="strokeWidth"
//!       markerWidth="4" markerHeight="3"
//!       orient="auto">
//!       <path d="M 0 0 L 10 5 L 0 10 z" />
//!   </marker>
//!  <path id="MyPath"
//!   d="M 100 200
//!   C 200 100 300   0 400 100
//!   C 500 200 600 300 700 200
//!   C 800 100 900 100 900 100" /></defs>
//!   <symbol id="imageRef1" viewBox="0 0 1000 1000" preserveAspectRatio="none">
//!		<image id="image1" x="0" y="0" width="1000" height="1000" xlink:href="does_not_exists.png"/>
//!	  </symbol>
//!   <use id="upperLeft" x="0" y="0" width="240" height="150" xlink:href="#imageRef1"/>
//!   <rect transform="translate(10,10)" width="10" height="10" id="rect"/>
//!   <text id="text" y="100" x="50">Hej</text>
//!   <text y="150" x="50"><textPath id="textPath" xlink:href="#MyPath">Hej</textPath></text>
//!   <polygon id="triangle" points="50,50 50,300 300,300"
//! 	   style=" fill:blue; stroke:black;"/>
//!   <line x1="100" y1="300" x2="300" y2="100"
//! 	stroke-width="5" id="line" />
//!    <switch id="switch">
//!      <rect fill="red" x="0" y="0" width="220" height="150"
//!            requiredExtensions="http://example.org/bogus"/>
//!      <rect fill="green" x="0" y="150" width="220" height="150"/>
//!      <rect fill="blue" x="240" y="0" width="220" height="150"/>
//!    </switch>
//!
//!   <ellipse transform="translate(900 200) rotate(-30)"
//! 	   rx="250" ry="100"
//! 	   fill="none" stroke="blue" stroke-width="20" id="ellipse" />
//!   <circle cx="600" cy="200" r="100"
//! 	  fill="red" stroke="blue" stroke-width="10" id="circle" />
//!   <polyline id="polyline" fill="none" stroke="blue" stroke-width="10"
//!            points="50,375
//!                    150,375 150,325 250,325 250,375
//!                    350,375 350,250 450,250 450,375
//!                    550,375 550,175 650,175 650,375
//!                    750,375 750,100 850,100 850,375
//!                    950,375 950,25 1050,25 1050,375
//!                    1150,375" />
//!    <path id="path" d="M 100 100 L 300 100 L 200 300 z"
//!        fill="red" stroke="blue" stroke-width="3" />
//!    <polygon id="polygon" fill="lime" stroke="blue" stroke-width="10"
//!            points="850,75  958,137.5 958,262.5
//!                    850,325 742,262.6 742,137.5" />
//!    <g id="group">
//!    </g>
//!    <defs>
//!    <linearGradient id="linear_gradient">
//!        <stop id="stop" offset="5%" stop-color="#F60" />
//!        <stop offset="95%" stop-color="#FF6" />
//!    </linearGradient>
//!      <radialGradient id="radial_gradient" gradientUnits="userSpaceOnUse"
//!                      cx="400" cy="200" r="300" fx="400" fy="200">
//!        <stop offset="0%" stop-color="red" />
//!        <stop offset="50%" stop-color="blue" />
//!        <stop offset="100%" stop-color="red" />
//!      </radialGradient>
//!     <pattern id="pattern" patternUnits="userSpaceOnUse"
//!              x="0" y="0" width="100" height="100"
//!              viewBox="0 0 10 10" >
//!       <path d="M 0 0 L 7 0 L 3.5 7 z" fill="red" stroke="blue" />
//!     </pattern>
//!     <mask id="mask" maskUnits="userSpaceOnUse"
//!           x="0" y="0" width="800" height="300">
//!       <rect x="0" y="0" width="800" height="300" fill="none"  />
//!     </mask>
//!
//!     <filter id="filter"
//!             filterUnits="userSpaceOnUse" x="0" y="0" width="1200" height="400">
//!       <feOffset id="fe_offset" in="BackgroundImage" dx="0" dy="125" />
//!       <feGaussianBlur stdDeviation="8" />
//!     </filter>
//!     <filter id="Normal">
//!      <feBlend id="fe_blend" mode="normal" in2="BackgroundImage" in="SourceGraphic"/>
//!     </filter>
//!
//!     <filter id="LuminanceToAlpha" filterUnits="objectBoundingBox"
//!            x="0%" y="0%" width="100%" height="100%">
//!      <feColorMatrix id="fe_color_matrix" type="luminanceToAlpha" in="SourceGraphic" result="a"/>
//!      <feComposite id="fe_composite" in="SourceGraphic" in2="a" operator="in" />
//!    </filter>
//!
//!    <filter id="Identity" filterUnits="objectBoundingBox"
//!            x="0%" y="0%" width="100%" height="100%">
//!       <feComponentTransfer id="fe_component_transfer">
//!         <feFuncR id="fe_func_r" type="identity"/>
//!         <feFuncG id="fe_func_g" type="identity"/>
//!         <feFuncB id="fe_func_b" type="identity"/>
//!         <feFuncA id="fe_func_a" type="identity"/>
//!       </feComponentTransfer>
//!    </filter>
//!		<filter id="filt4" filterUnits="objectBoundingBox">
//!			<feConvolveMatrix id="fe_convolve_matrix" kernelMatrix="0 1 0, 1 -2 1, 0 1 0"/>
//!		</filter>
//!
//!		<filter id="diff">
//!			<feTurbulence id="fe_turbulence" type="fractalNoise" baseFrequency="0.05" numOctaves="4"/>
//!			<feDiffuseLighting id="fe_diffuse_lightning" diffuseConstant="0.9">
//!			<feDistantLight id="fe_distant_light_element" azimuth="45" elevation="45"/>
//!			</feDiffuseLighting>
//!		</filter>
//!
//!    	<filter id='displaceimglight' filterUnits="objectBoundingBox" x='0%' y='0%' width='1' height='1'>
//!         <feImage id="fe_image" xlink:href="image1.jpg" result="img"/>
//!			<feColorMatrix type="luminanceToAlpha" in="SourceGraphic" result="gradAlpha"/>
//!			<feSpecularLighting id="fe_specular_lightning" surfaceScale="50" specularConstant="0.8" specularExponent="2.2" result="lit">
//!				<fePointLight id="fe_point_light" x="10" y="10" z="200"/>
//!			</feSpecularLighting>
//!        		<feDisplacementMap id="fe_displacement_map" result='disp' in='img' in2='SourceGraphic' scale='32' xChannelSelector='R' yChannelSelector='G'/>
//!			<feComposite operator="arithmetic" in="disp" in2="lit" k1="0" k2="1" k3="1" k4="0"/>
//!    	</filter>
//! 	<filter id="spotLightA" filterUnits="objectBoundingBox" x="0" y="0" width="1" height="1">
//!			<feDiffuseLighting in="SourceGraphic" diffuseConstant="1" surfaceScale="10" lighting-color="white">
//!				<feSpotLight id="fe_spot_light" x="25" y="0" z="35" pointsAtX="25" pointsAtY="30" pointsAtZ="0" specularExponent="0"/>
//!			</feDiffuseLighting>
//!		</filter>
//!
//!		<filter id="image" x="0" y="0%" width="1" height="100%">
//!			<feGaussianBlur id="fe_gaussian_blur" stdDeviation="1" result="blurred"/>
//!			<feFlood id="fe_flood" in="SourceGraphic" flood-opacity="0.5"/>
//!			<feComposite operator="in" in="blurred"/>
//!		</filter>
//!
//!		<filter id="filtSrcGrph">
//!			<feMerge id="fe_merge">
//!				<feMergeNode id="fe_merge_node" in="SourceGraphic"/>
//!			</feMerge>
//!		</filter>
//!
//!    <filter id="Bumps2" filterUnits="objectBoundingBox" x="0" y="0" width="100" height="100">
//!      <feMorphology id="fe_morphology" operator="dilate" radius="5" result="alpha"/>
//!    </filter>
//!
//!		<filter id="feTileFilter" filterUnits="userSpaceOnUse" primitiveUnits="userSpaceOnUse" x="115" y="40" width="250" height="250">
//!			<feFlood x="115" y="40" width="54" height="19" flood-color="red"/>
//!			<feOffset x="115" y="40" width="50" height="25" dx="6" dy="6" result="offset"/>
//!			<feTile id="fe_tile"/>
//!		</filter>
//!    </defs>
//!    <defs>
//!    <linearGradient id="linear_gradient">
//!        <stop id="stop" offset="5%" stop-color="#F60" />
//!        <stop offset="95%" stop-color="#FF6" />
//!    </linearGradient>
//!      <radialGradient id="radial_gradient" gradientUnits="userSpaceOnUse"
//!                      cx="400" cy="200" r="300" fx="400" fy="200">
//!        <stop offset="0%" stop-color="red" />
//!        <stop offset="50%" stop-color="blue" />
//!        <stop offset="100%" stop-color="red" />
//!      </radialGradient>
//!     <pattern id="pattern" patternUnits="userSpaceOnUse"
//!              x="0" y="0" width="100" height="100"
//!              viewBox="0 0 10 10" >
//!       <path d="M 0 0 L 7 0 L 3.5 7 z" fill="red" stroke="blue" />
//!     </pattern>
//!
//!     <mask id="mask" maskUnits="userSpaceOnUse"
//!           x="0" y="0" width="800" height="300">
//!       <rect x="0" y="0" width="800" height="300" fill="none"  />
//!     </mask>
//!
//!     <filter id="filter"
//!             filterUnits="userSpaceOnUse" x="0" y="0" width="1200" height="400">
//!       <feOffset id="fe_offset" in="BackgroundImage" dx="0" dy="125" />
//!       <feGaussianBlur stdDeviation="8" />
//!     </filter>
//!     <filter id="Normal">
//!      <feBlend id="fe_blend" mode="normal" in2="BackgroundImage" in="SourceGraphic"/>
//!     </filter>
//!
//!     <filter id="LuminanceToAlpha" filterUnits="objectBoundingBox"
//!            x="0%" y="0%" width="100%" height="100%">
//!      <feColorMatrix id="fe_color_matrix" type="luminanceToAlpha" in="SourceGraphic" result="a"/>
//!      <feComposite id="fe_composite" in="SourceGraphic" in2="a" operator="in" />
//!    </filter>
//!
//!    <filter id="Identity" filterUnits="objectBoundingBox"
//!            x="0%" y="0%" width="100%" height="100%">
//!       <feComponentTransfer id="fe_component_transfer">
//!         <feFuncR id="fe_func_r" type="identity"/>
//!         <feFuncG id="fe_func_g" type="identity"/>
//!         <feFuncB id="fe_func_b" type="identity"/>
//!         <feFuncA id="fe_func_a" type="identity"/>
//!       </feComponentTransfer>
//!    </filter>
//!		<filter id="filt4" filterUnits="objectBoundingBox">
//!			<feConvolveMatrix id="fe_convolve_matrix" kernelMatrix="0 1 0, 1 -2 1, 0 1 0"/>
//!		</filter>
//!
//!		<filter id="diff">
//!			<feTurbulence id="fe_turbulence" type="fractalNoise" baseFrequency="0.05" numOctaves="4"/>
//!			<feDiffuseLighting id="fe_diffuse_lightning" diffuseConstant="0.9">
//!			<feDistantLight id="fe_distant_light_element" azimuth="45" elevation="45"/>
//!			</feDiffuseLighting>
//!		</filter>
//!
//!    	<filter id='displaceimglight' filterUnits="objectBoundingBox" x='0%' y='0%' width='1' height='1'>
//!         <feImage id="fe_image" xlink:href="image1.jpg" result="img"/>
//!			<feColorMatrix type="luminanceToAlpha" in="SourceGraphic" result="gradAlpha"/>
//!			<feSpecularLighting id="fe_specular_lightning" surfaceScale="50" specularConstant="0.8" specularExponent="2.2" result="lit">
//!				<fePointLight id="fe_point_light" x="10" y="10" z="200"/>
//!			</feSpecularLighting>
//!        		<feDisplacementMap id="fe_displacement_map" result='disp' in='img' in2='SourceGraphic' scale='32' xChannelSelector='R' yChannelSelector='G'/>
//!			<feComposite operator="arithmetic" in="disp" in2="lit" k1="0" k2="1" k3="1" k4="0"/>
//!    	</filter>
//!
//! 	<filter id="spotLightA" filterUnits="objectBoundingBox" x="0" y="0" width="1" height="1">
//!			<feDiffuseLighting in="SourceGraphic" diffuseConstant="1" surfaceScale="10" lighting-color="white">
//!				<feSpotLight id="fe_spot_light" x="25" y="0" z="35" pointsAtX="25" pointsAtY="30" pointsAtZ="0" specularExponent="0"/>
//!			</feDiffuseLighting>
//!		</filter>
//!
//!		<filter id="image" x="0" y="0%" width="1" height="100%">
//!			<feGaussianBlur id="fe_gaussian_blur" stdDeviation="1" result="blurred"/>
//!			<feFlood id="fe_flood" in="SourceGraphic" flood-opacity="0.5"/>
//!			<feComposite operator="in" in="blurred"/>
//!		</filter>
//!
//!		<filter id="filtSrcGrph">
//!			<feMerge>
//!				<feMergeNode id="fe_merge" in="SourceGraphic"/>
//!			</feMerge>
//!		</filter>
//!
//!    <filter id="Bumps2" filterUnits="objectBoundingBox" x="0" y="0" width="100" height="100">
//!      <feMorphology id="fe_morphology" operator="dilate" radius="5" result="alpha"/>
//!    </filter>
//!
//!		<filter id="feTileFilter" filterUnits="userSpaceOnUse" primitiveUnits="userSpaceOnUse" x="115" y="40" width="250" height="250">
//!			<feFlood x="115" y="40" width="54" height="19" flood-color="red"/>
//!			<feOffset x="115" y="40" width="50" height="25" dx="6" dy="6" result="offset"/>
//!			<feTile id="fe_tile"/>
//!		</filter>
//!   </defs>
//!   <cursor x="0" y="0" xlink:href="none.png" id="cursor"/>
//!   <a id="aname" >
//!   </a>
//!
//!   <view id="view"></view>
//!   <script id="script"></script>
//!   <rect width="100" height="100" fill="yellow">
//!    <animate id="animate" attributeName="width" from="10" to="100" begin="indefinite" dur="indefinite"/>
//!    <set id="set" attributeName="height" to="100" begin="indefinite" dur="indefinite"/>
//!    <animateMotion id="animate_motion" begin="indefinite" dur="indefinite">
//!     <mpath id="m_path" xlink:href="#path"/>
//!    </animateMotion>
//!    <animateColor attributeName="height" id="animate_color" from="#e0e" to="#000" begin="indefinite" dur="indefinite"/>
//!    <animateTransform id="animate_tranform" attributeName="transform" type="scale" from="1" to="2" begin="indefinite" dur="indefinite"/>
//!   </rect>
//!
//!   <defs>
//!		<font id="font" horiz-adv-x="959">
//!			<font-face id="font_face" font-family="TestComic" units-per-em="2048" panose-1="3 15 7 2 3 3 2 2 2 4" ascent="2257" descent="-597" alphabetic="0"/>
//!			<missing-glyph id="missing_glyph" horiz-adv-x="1024" d="M128 0V1638H896V0H128zM256 128H768V1510H256V128z"/>
//!			<glyph id="glyph" unicode="@" horiz-adv-x="1907" d="M1306 412Q1200 412 1123 443T999 535Q945 482 894 455T793 428Q682 428 584 518T485 717Q485 902 630 1055T961 1208Q1003 1208 1031 1177T1059 1102Q1059 1042 959 1013Q826 975 771 926Q690 855 690 717Q690 688 717 661Q748 631 794 633Q881 637 955 795Q1022 933 1074 933Q1116 933 1142 902T1168 826Q1168 806 1162 766T1155 706Q1155 641 1211 624Q1233 617 1306 617Q1443 617 1498 684Q1548 744 1548 883Q1548 1128 1351 1283Q1171 1425 921 1425Q630 1425 465 1205Q316 1009 316 712Q316 438 491 250Q673 54 959 54Q1040 54 1142 85L1317 150Q1361 166 1374 166Q1415 166 1445 134T1475 58Q1475 -37 1262 -96Q1101 -140 961 -140Q820 -140 673 -86T420 60Q110 328 110 712Q110 1096 322 1354Q547 1630 921 1630Q1259 1630 1500 1427Q1753 1212 1753 883Q1753 658 1643 537Q1528 412 1306 412z"/>
//!			<glyph unicode="A" horiz-adv-x="1498" d="M1250 -30Q1158 -30 1090 206Q1064 296 1025 521Q923 507 758 471L492 416Q442 285 321 33Q289 -23 234 -23Q194 -23 163 6T131 78Q131 126 282 443Q265 469 265 503Q265 584 363 607Q477 821 651 1099Q888 1478 946 1478Q1025 1478 1054 1368L1117 1032L1266 337L1323 179Q1352 98 1352 71Q1352 28 1321 -1T1250 -30zM897 1113L611 652Q732 683 978 727L897 1113z"/>
//!			<glyph unicode="y" horiz-adv-x="1066" d="M1011 892L665 144Q537 -129 469 -313L403 -507Q377 -579 313 -579Q271 -579 241 -552T210 -483Q210 -383 426 96L68 785L23 858Q-4 904 -4 935Q-4 976 27 1007T98 1038Q144 1038 169 1003Q339 767 534 331L682 676Q762 855 836 984Q868 1040 920 1040Q961 1040 992 1011T1024 942Q1024 920 1011 892z"/>
//!			<glyph unicode="&#214;" horiz-adv-x="1635" d="M802 -61Q520 -61 324 108Q116 288 116 572Q116 918 321 1201Q550 1515 892 1515Q1221 1515 1381 1367Q1548 1213 1548 881Q1548 535 1360 257Q1144 -61 802 -61zM892 1310Q647 1310 477 1066Q320 842 320 572Q320 379 463 258Q600 144 802 144Q1045 144 1203 389Q1344 608 1344 881Q1344 1120 1237 1217Q1135 1310 892 1310zM682 1848Q813 1848 813 1743Q813 1713 769 1685Q729 1660 694 1660Q571 1660 571 1763Q571 1792 608 1820T682 1848zM1221 1856Q1255 1856 1290 1825T1325 1763Q1325 1671 1182 1671Q1141 1671 1109 1692Q1073 1716 1073 1755Q1073 1824 1118 1844Q1143 1856 1221 1856z"/>
//!			<glyph unicode="&#231;" horiz-adv-x="1052" d="M770 -196Q770 -320 710 -382T528 -445Q443 -445 367 -413Q271 -371 271 -298Q271 -244 339 -244Q375 -244 420 -268T517 -293Q566 -292 590 -269T614 -201Q614 -153 577 -115T463 -48Q304 -12 208 104Q105 227 105 404Q105 607 240 823Q390 1063 578 1063Q676 1063 797 1017Q950 958 950 873Q950 835 925 806T863 776Q834 776 813 793T771 828Q712 875 578 875Q476 875 376 693Q285 526 285 404Q285 272 375 196Q459 125 591 125Q651 125 719 157L835 219Q865 235 878 235Q915 235 942 206T969 138Q969 35 713 -40Q742 -78 756 -117T770 -196z"/>
//!         <hkern id="h_kern" u1="1" g2="gl_2" k="-1000"/>
//!         <vkern id="v_kern" u1="1" g2="gl_2" k="-1000"/>
//!		</font>
//!   </defs>
//!
//!   <font-face font-family="TestComic">
//!		<font-face-src id="font_face_src">
//!			<font-face-uri id="font_face_uri" xlink:href="../images/ext-TestComic.svg#Font"/>
//!		</font-face-src>
//!	  </font-face>
//!
//!  <font-face-format id="font_face_format"/>
//!
//!  <font-face-name id="font_face_name"/>
//!
//!  <definition-src id="definition_src"/>
//!
//!  <metadata id="metadata"/>
//!
//!  <foreignObject id="foreign_object" width="100" height="50"
//!                   requiredExtensions="http://example.com/SVGExtensions/EmbeddedXHTML">
//!      <body xmlns="http://www.w3.org/1999/xhtml">
//!        <p>Here is a paragraph that requires word wrap</p>
//!      </body>
//!   </foreignObject>
//! </svg>
}

test("Setup")
{
	checkProperties_HasProperty = function checkProperties_HasProperty(node, properties)
		{
			for (var index = 0; index < properties.length; ++index)
				if (!(properties[index] in node))
					throw "HasProperty: '" + properties[index] + "' not found";
			return true;
		}

	checkProperties_Enumerate = function checkProperties_Enumerate(node, properties)
		{
			outer: for (var index = 0; index < properties.length; ++index)
			{
				for (var property in node)
					if (property == properties[index])
						continue outer;
				throw "Enumerate: '" + properties[index] + "' not found";
			}
			return true;
		}

	checkProperties_Get = function checkProperties_Get(node, properties, values)
		{
			for (var index = 0; index < properties.length; ++index)
			{
				if (!(properties[index] in values))
					throw "Get: INCORRECT TEST: " + properties[index] + " not in values";
				if (!(node[properties[index]] == values[properties[index]]))
					throw "Get: '" + properties[index] + "' wrong, is '" + node[properties[index]] + "', should be '" + values[properties[index]] + "'";
			}
			return true;
		}

	checkProperties_PutNotAllowed = function checkProperties_PutNotAllowed(node, properties)
		{
			'use strict';

			for (var index = 0; index < properties.length; ++index)
			{
				error = null;
				try
				{
					old_value = node[properties[index]];
					if (typeof(old_value) == "string")
						new_value = 10;
					else
						new_value = "foo";
					node[properties[index]] = new_value;
					if (!(node[properties[index]] == old_value))
						error = "PutNotAllowed: '" + properties[index] + "' changed value and didn't throw exception";
					else
						error = "PutNotAllowed: '" + properties[index] + "' didn't throw exception";
				}
				catch(e)
				{
					if (e instanceof TypeError)
						if (!(node[properties[index]] == old_value))
							error = "PutNotAllowed: '" + properties[index] + "' threw exception but changed value";
				}
				if (error != null)
					throw error;
			}
			return true;
		}

	checkProperties_Unique = function checkProperties_Unique(node, properties)
		{
			error = null;
			for(var index = 0; index < properties.length; ++index)
			{
				if (node[properties[index]] != node[properties[index]])
					error = "Unique: '" + properties[index] + "' did not return an equal object in subsequent accesses";
			}

			if (error != null)
				throw error;

			return true;
		}

	checkFunctions_HasProperty = function checkFunctions_HasProperty(node, properties)
		{
			for (var index = 0; index < properties.length; ++index)
			{
				if (!(properties[index] in node))
					throw "HasProperty: '" + properties[index] + "' not found";
				if (!(typeof(node[properties[index]]) == "function"))
					throw "HasProperty: '" + properties[index] + "' not a function";
			}
			return true;
		}

	checkFunctions_Enumerate = function checkFunctions_Enumerate(node, properties)
		{
			outer: for (var index = 0; index < properties.length; ++index)
			{
				for (var property in node)
					if (property == properties[index])
						continue outer;
				throw "Enumerate: '" + properties[index] + "' not found";
			}
			return true;
		}

/*
	checkConstants = function checkConstants(node, constants)
		{
			for (var name in constants)
			{
				if (node[name] != constants[name])
					throw "Constant: '" + name + "' not found";
			}

		}
*/

	checkInterface = function checkInterface(elm_id, interfaces)
		{
			var element = document.getElementById(elm_id);
			for (var index = 0; index < interfaces.length; ++index)
			{
				checkProperties_HasProperty(element, interfaces[index].all_props);
				checkProperties_Enumerate(element, interfaces[index].all_props);
				checkProperties_Unique(element, interfaces[index].all_props);
				checkProperties_PutNotAllowed(element, interfaces[index].ro_props);
				checkFunctions_HasProperty(element, interfaces[index].methods);
				checkFunctions_Enumerate(element, interfaces[index].methods);
/*
				if ("constants" in interfaces[index])
				{
					checkConstants(element, interfaces[name], interfaces[index].constants);
				}
*/
			}

			return true;
		}

	function Interface(all_props, ro_props, methods/*, name, constants */)
	{
		this.all_props = all_props;
		this.ro_props = ro_props;
		this.methods = methods;
/*
		if (name)
			this.name = name;
		if (constants)
			this.constants = constants;
*/
	}

  interface_traitaccess = new Interface([],
                  [],
                  ["getTrait", "getTraitNS", "getFloatTrait", /* "getFloatListTrait", (we don't support this yet) */ "getMatrixTrait",
                   "getRectTrait", "getPathTrait", "getRGBColorTrait", "getPresentationTrait", "getPresentationTraitNS",
                   "getFloatPresentationTrait", /* "getFloatListPresentationTrait", (we don't support this yet) */ "getMatrixPresentationTrait", "getRectPresentationTrait",
                   "getPathPresentationTrait", "getRGBColorPresentationTrait",
                   "setTrait", "setTraitNS", "setFloatTrait", /* "setFloatListTrait", (we don't support this yet) */ "setMatrixTrait",
                   "setRectTrait", "setPathTrait", "setRGBColorTrait"]);

	interface_base = new Interface([ "id", "xmlbase", "ownerSVGElement", "viewportElement" ],
								   [ "ownerSVGElement", "viewportElement" ],
								   []);

	interface_tests = new Interface([ "requiredFeatures", "requiredExtensions", "systemLanguage" ],
									[ "requiredFeatures", "requiredExtensions", "systemLanguage" ],
									[ "hasExtension" ]);

	interface_lang_space = new Interface([ "xmllang", "xmlspace" ],
										 [ ],
										 [ ]);

	interface = new Interface([ "externalResourcesRequired" ],
							  [ "externalResourcesRequired" ],
							  []);

	interface_locatable = new Interface([ "nearestViewportElement", "farthestViewportElement" ],
										[ "nearestViewportElement", "farthestViewportElement" ],
										[ "getBBox", "getCTM", "getScreenCTM", "getTransformToElement" ]);

	interface_svg_element = new Interface([ "width", "height", "contentScriptType",
											"contentStyleType", "pixelUnitToMillimeterX",
											"pixelUnitToMillimeterY", "x", "y", "viewport",
											"screenPixelToMillimeterX", "screenPixelToMillimeterY",
											/* "currentView", (not implemented) */
											"useCurrentView",
											"currentScale",
											"currentTranslate",
                      "currentRotate"
											],
										  [ "width", "height",
											"pixelUnitToMillimeterX",
											"pixelUnitToMillimeterY", "x", "y", "viewport",
											"screenPixelToMillimeterX", "screenPixelToMillimeterY",
											// "currentView", // not implemented
											"currentTranslate" ],
										  [ "suspendRedraw", "unsuspendRedraw", "unsuspendRedrawAll", "forceRedraw",
											"pauseAnimations", "unpauseAnimations", "animationsPaused", "getCurrentTime",
											"setCurrentTime", "getIntersectionList", "getEnclosureList", "checkIntersection",
											"checkEnclosure", "deselectAll",
											"createSVGNumber", "createSVGLength",
											"createSVGAngle",
											"createSVGPoint", "createSVGMatrix", "createSVGRect",
											"createSVGTransform", "createSVGTransformFromMatrix",
											"getElementById", "createSVGMatrixComponents", "createSVGPath", "createSVGRGBColor", "moveFocus", "setFocus", "getCurrentFocusedObject" ]);

	interface_animated_points = new Interface([ "points", "animatedPoints" ],
											  [ "points", "animatedPoints" ],
											  [ ]);

	interface_stylable = new Interface([ "className" ],
									   [ "className" ],
									   [ "getPresentationAttribute" ]);

	interface_rect_element = new Interface([ "x", "y", "width", "height", "rx", "ry" ],
										   [ "x", "y", "width", "height", "rx", "ry" ],
										   [ ]);

	interface_line_element = new Interface([ "x1", "y1", "x2", "y2" ],
										   [ "x1", "y1", "x2", "y2" ],
										   [ ]);

	interface_ellipse_element = new Interface([ "cx", "cy", "rx", "ry" ],
											  [ "cx", "cy", "rx", "ry" ],
											  [ ]);

	interface_circle_element = new Interface([ "cx", "cy", "r" ],
											 [ "cx", "cy", "r" ],
											 [ ]);

	interface_text_content_element = new Interface([ "textLength", "lengthAdjust" ],
												   [ "textLength", "lengthAdjust" ],
												   [ "getNumberOfChars",
													 "getComputedTextLength",
													 "getSubStringLength",
													 "getStartPositionOfChar",
													 "getEndPositionOfChar",
													 "getExtentOfChar",
													 "getRotationOfChar",
													 "getCharNumAtPosition",
													 "selectSubString" ]/*,
												   [ "LENGTHADJUST_UNKNOWN" : 0,
													 "LENGTHADJUST_SPACING" : 1,
													 "LENGTHADJUST_SPACINGANDGLYPHS" : 2 ]*/);

	interface_text_positioning = new Interface([ "x", "y", "dx", "dy", "rotate" ],
											   [ "x", "y", "dx", "dy", "rotate" ],
											   [ ]);

	interface_transformable = new Interface([ "transform" ],
											[ "transform" ],
											[ ]);

	interface_fit_to_viewbox = new Interface([ "viewBox", "preserveAspectRatio" ],
											 [ "viewBox", "preserveAspectRatio" ],
											 [ ]);

	interface_zoom_and_pan = new Interface([ "zoomAndPan" ],
										   [ ],
										   [ ]);

	interface_uri_reference = new Interface([ "href" ],
											[ "href" ],
											[ ]);

	interface_text_path_element = new Interface([ "startOffset", "method", "spacing" ],
												[ "startOffset", "method", "spacing" ],
												[ ]);

	interface_use_element = new Interface([ "x", "y", "width", "height", "instanceRoot", "animatedInstanceRoot" ],
										  [ "x", "y", "width", "height", "instanceRoot", "animatedInstanceRoot" ],
										  [ ]);

	interface_image_element = new Interface([ "x", "y", "width", "height", "preserveAspectRatio" ],
											[ "x", "y", "width", "height", "preserveAspectRatio" ],
											[ ]);

	interface_style_element = new Interface([ "xmlspace", "type","media","title" ],
											[ ],
											[ ]);

	interface_path_element = new Interface([ "pathLength" ],
										   [ "pathLength" ],
										   [ "getTotalLength",
											 "getPointAtLength",
											 "getPathSegAtLength",
											 "createSVGPathSegClosePath",
											 "createSVGPathSegMovetoAbs",
											 "createSVGPathSegMovetoRel",
											 "createSVGPathSegLinetoAbs",
											 "createSVGPathSegLinetoRel",
											 "createSVGPathSegCurvetoCubicAbs",
											 "createSVGPathSegCurvetoCubicRel",
											 "createSVGPathSegCurvetoQuadraticAbs",
											 "createSVGPathSegCurvetoQuadraticRel",
											 "createSVGPathSegArcAbs",
											 "createSVGPathSegArcRel",
											 "createSVGPathSegLinetoHorizontalAbs",
											 "createSVGPathSegLinetoHorizontalRel",
											 "createSVGPathSegLinetoVerticalAbs",
											 "createSVGPathSegLinetoVerticalRel",
											 "createSVGPathSegCurvetoCubicSmoothAbs",
											 "createSVGPathSegCurvetoCubicSmoothRel",
											 "createSVGPathSegCurvetoQuadraticSmoothAbs",
											 "createSVGPathSegCurvetoQuadraticSmoothRel" ]);

	interface_animated_path_data = new Interface([ "pathSegList", "normalizedPathSegList",
												   "animatedPathSegList",
												   "animatedNormalizedPathSegList" ],
												 [ "pathSegList", "normalizedPathSegList",
												   "animatedPathSegList",
												   "animatedNormalizedPathSegList" ],
												 [ ]);

	interface_marker_element = new Interface([ "refX", "refY", "markerUnits", "markerWidth",
											   "markerHeight", "orientType", "orientAngle" ],
											 [ "refX", "refY", "markerUnits", "markerWidth",
											   "markerHeight", "orientType", "orientAngle" ],
											 [ "setOrientToAuto", "setOrientToAngle" ]);

	interface_unit_types = new Interface([], [], []); // Only has constants

	interface_gradient_element = new Interface([ "gradientUnits", "gradientTransform",
												 "spreadMethod"  ],
											   [ "gradientUnits", "gradientTransform",
												 "spreadMethod"  ],
											   [ ]);
	interface_linear_gradient_element = new Interface(["x1", "y1", "x2", "y2"],
													  ["x1", "y1", "x2", "y2"],
													  [ ]);
	interface_radial_gradient_element = new Interface(["cx", "cy", "r", "fx", "fy"],
													  ["cx", "cy", "r", "fx", "fy"],
													  [ ]);

	interface_stop_element = new Interface(["offset"], ["offset"], [ ]);

	interface_pattern_element = new Interface(["patternUnits", "patternContentUnits", "patternTransform",
											   "x", "y", "width", "height" ],
											  ["patternUnits", "patternContentUnits", "patternTransform",
											   "x", "y", "width", "height" ],
											  [ ]);

	interface_mask_element = new Interface(["maskUnits", "maskContentUnits", "x", "y", "width", "height" ],
										   ["maskUnits", "maskContentUnits", "x", "y", "width", "height" ],
										   [ ]);

	interface_filter_element = new Interface(["filterUnits", "primitiveUnits",
											  "x", "y", "width", "height",
											  "filterResX", "filterResY"],
											 ["filterUnits", "primitiveUnits",
											  "x", "y", "width", "height",
											  "filterResX", "filterResY"],
											 [ "setFilterRes" ]);

	interface_filter_primitive_standard_attributes = new Interface(["x", "y", "width",
																	"height", "result"],
																   ["x", "y", "width",
																	"height", "result"],
																   [ ]);

	interface_fe_blend_element = new Interface(["in1", "in2", "mode"],
											   ["in1", "in2", "mode"],
											   [ ]);

	interface_fe_color_matrix_element = new Interface(["in1", "type", "values"],
													  ["in1", "type", "values"],
													  [ ]);


	interface_fe_component_transfer_element = new Interface(["in1"], ["in1"], [ ]);

	interface_component_transfer_function_element = new Interface(["type", "tableValues", "slope",
																   "intercept", "amplitude", "exponent",
																   "offset" ],
																  ["type", "tableValues", "slope",
																   "intercept", "amplitude", "exponent",
																   "offset" ],
																  [ ] );

	interface_fe_composite_element = new Interface(["in1", "in2", "operator", "k1", "k2", "k3", "k4"],
												   ["in1", "in2", "operator", "k1", "k2", "k3", "k4"],
												   [ ]);

	interface_fe_convolve_element = new Interface(["orderX", "orderY", "kernelMatrix",
												   "divisor", "bias", "targetX", "targetY",
												   "edgeMode", "kernelUnitLengthX", "kernelUnitLengthY",
												   "preserveAlpha"],
												  ["orderX", "orderY", "kernelMatrix",
												   "divisor", "bias", "targetX", "targetY",
												   "edgeMode", "kernelUnitLengthX", "kernelUnitLengthY",
												   "preserveAlpha"],
												  [ ]);

	interface_fe_diffuse_lightning_element = new Interface(["in1", "surfaceScale", "diffuseConstant",
															"kernelUnitLengthX", "kernelUnitLengthY"],
														   ["in1", "surfaceScale", "diffuseConstant",
															"kernelUnitLengthX", "kernelUnitLengthY"],
														   [ ]);

	interface_fe_distant_light_element = new Interface(["azimuth", "elevation"],
													   ["azimuth", "elevation"],
													   [ ]);

	interface_fe_point_light_element = new Interface(["x", "y", "z"],
													 ["x", "y", "z"],
													 [ ]);

	interface_fe_spot_light_element = new Interface(["x", "y", "z", "pointsAtX", "pointsAtY", "pointsAtZ", "specularExponent", "limitingConeAngle"],
													["x", "y", "z", "pointsAtX", "pointsAtY", "pointsAtZ", "specularExponent", "limitingConeAngle"],
													[ ]);

	interface_fe_displacement_map_element = new Interface(["in1", "in2", "scale", "xChannelSelector",
														   "yChannelSelector"],
														  ["in1", "in2", "scale", "xChannelSelector",
														   "yChannelSelector"],
														  [ ]);

	interface_fe_flood_element = new Interface(["in1"], ["in1"], [ ]);

	interface_fe_gaussian_blur_element = new Interface(["in1", "stdDeviationX", "stdDeviationY"],
													   ["in1", "stdDeviationX", "stdDeviationY"],
													   ["setStdDeviation"] );

	interface_fe_image_element = new Interface(["preserveAspectRatio"],
											   ["preserveAspectRatio"],
											   [ ]);

	interface_fe_morphology_element = new Interface(["in1", "operator", "radiusX", "radiusY"],
													["in1", "operator", "radiusX", "radiusY"],
													[ ]);

	interface_fe_offset_element = new Interface(["in1", "dx", "dy"],
												["in1", "dx", "dy"],
												[ ]);

	interface_fe_specular_lightning_element = new Interface(["in1", "surfaceScale",
															 "specularConstant", "specularExponent"],
															["in1", "surfaceScale",
															 "specularConstant", "specularExponent"],
															[ ]);

	interface_fe_tile_element = new Interface(["in1"], ["in1"], [ ]);

	interface_fe_turbulence_element = new Interface(["baseFrequencyX", "baseFrequencyY",
													 "numOctaves", "seed", "stitchTiles", "type"],
													["baseFrequencyX", "baseFrequencyY",
													 "numOctaves", "seed", "stitchTiles", "type"],
													[ ]);

	interface_fe_merge_node_element = new Interface(["in1"], ["in1"], [ ]);

	interface_cursor_element = new Interface(["x", "y"], ["x", "y"], [ ]);

	interface_a_element = new Interface(["target"], ["target"], [ ]);

	interface_view_element = new Interface(["viewTarget"], ["viewTarget"], [ ]);

	interface_script_element = new Interface(["type"], [ ], [ ]);

	interface_smil_event_target_interface = new Interface([ ], [ ], ["beginElement", "beginElementAt",
																	 "endElement", "endElementAt" ]);

	interface_animation_element = new Interface([ "targetElement" ], [ "targetElement" ],
												[ "getStartTime", "getCurrentTime", "getSimpleDuration" ]);

	interface_foreign_object_element = new Interface(["x", "y", "width", "height"],
													 ["x", "y", "width", "height"],
													 [ ]);

	interface_external_resources_required = new Interface(["externalResourcesRequired"], ["externalResourcesRequired"],[]);

	polyline_element_interface = [
    interface_traitaccess, // available on all elements
		interface_base,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_transformable,
		interface_animated_points ];

	svg_element_interfaces = [
		interface_traitaccess, // available on all elements
    interface_base,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_locatable,
		interface_fit_to_viewbox,
		interface_zoom_and_pan,
		interface_svg_element ];

	circle_element_interfaces = [
		interface_traitaccess, // available on all elements
    interface_base,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_transformable,
		interface_circle_element ];

	ellipse_element_interfaces = [
		interface_base,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_transformable,
		interface_ellipse_element ];

	line_element_interfaces = [
		interface_base,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_transformable,
		interface_line_element ];

	polygon_element_interfaces = [
		interface_base,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_transformable,
		interface_animated_points ];

	rect_element_interfaces = [
		interface_base,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_transformable,
		interface_rect_element ];

	text_element_interfaces = [
		interface_base,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_text_positioning,
		interface_transformable,
		interface_text_content_element ];

	text_path_element_interfaces = [
		interface_base,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_text_content_element,
		interface_uri_reference,
		interface_text_path_element ];

	g_element_interfaces = [
		interface_base,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_transformable ];

	defs_element_interfaces = [
		interface_base,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_transformable ];

	desc_element_interfaces = [
		interface_base,
//		interface_lang_space, // not implemented
		interface_stylable ];

	title_element_interfaces = [
		interface_base,
//		interface_lang_space, // not implemented
		interface_stylable ];

	symbol_element_interfaces = [
		interface_base,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_fit_to_viewbox ];

	use_element_interfaces = [
		interface_base,
		interface_uri_reference,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_transformable,
		interface_use_element ];

	image_element_interfaces = [
		interface_base,
		interface_uri_reference,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_transformable,
		interface_image_element ];

	switch_element_interfaces = [
		interface_base,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_transformable ];

	style_element_interfaces = [
		interface_base,
		interface_style_element	];

	path_element_interfaces = [
		interface_base,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_transformable,
		interface_animated_path_data,
		interface_path_element ];

	marker_element_interfaces = [
		interface_base,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_fit_to_viewbox,
		interface_marker_element ];

	gradient_element_interfaces = [
		interface_base,
		interface_uri_reference,
		interface_external_resources_required,
		interface_stylable,
		interface_unit_types,
		interface_gradient_element ];


	linear_gradient_element_interfaces = [
		interface_base,
		interface_uri_reference,
		interface_external_resources_required,
		interface_stylable,
		interface_unit_types,
		interface_gradient_element,
		interface_linear_gradient_element ];

	radial_gradient_element_interfaces = [
		interface_base,
		interface_uri_reference,
		interface_external_resources_required,
		interface_stylable,
		interface_unit_types,
		interface_gradient_element,
		interface_radial_gradient_element ];

	stop_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_stop_element ];

	pattern_element_interfaces = [
		interface_base,
		interface_uri_reference,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_fit_to_viewbox,
		interface_unit_types,
		interface_pattern_element ];

	mask_element_interfaces = [
		interface_base,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_unit_types,
		interface_mask_element ];

	filter_element_interfaces = [
		interface_base,
		interface_uri_reference,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_unit_types,
		interface_filter_element ];

	fe_blend_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_filter_primitive_standard_attributes,
		interface_fe_blend_element ];

	fe_color_matrix_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_filter_primitive_standard_attributes,
		interface_fe_color_matrix_element ];

	fe_component_transfer_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_filter_primitive_standard_attributes,
		interface_fe_component_transfer_element ];

	fe_func_r_element_interfaces = [
		interface_component_transfer_function_element ];

	fe_func_g_element_interfaces = [
		interface_component_transfer_function_element ];

	fe_func_b_element_interfaces = [
		interface_component_transfer_function_element ];

	fe_func_a_element_interfaces = [
		interface_component_transfer_function_element ];

	fe_composite_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_filter_primitive_standard_attributes,
		interface_fe_composite_element ];

	fe_convolve_matrix_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_filter_primitive_standard_attributes,
		interface_fe_convolve_element ];

	fe_diffuse_lightning_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_filter_primitive_standard_attributes,
		interface_fe_diffuse_lightning_element ];

	fe_distant_light_element_interfaces = [
		interface_base,
		interface_fe_distant_light_element ];

	fe_point_light_element_interfaces = [
		interface_base,
		interface_fe_point_light_element ];

	fe_spot_light_element_interfaces = [
		interface_base,
		interface_fe_spot_light_element ];

	fe_morphology_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_filter_primitive_standard_attributes,
		interface_fe_morphology_element ];

	fe_displacement_map_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_filter_primitive_standard_attributes,
		interface_fe_displacement_map_element ];

	fe_offset_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_filter_primitive_standard_attributes,
		interface_fe_offset_element ];

	fe_specular_lightning_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_filter_primitive_standard_attributes,
		interface_fe_specular_lightning_element ];

	fe_tile_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_filter_primitive_standard_attributes,
		interface_fe_tile_element ];

	fe_turbulence_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_filter_primitive_standard_attributes,
		interface_fe_turbulence_element ];

	fe_flood_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_filter_primitive_standard_attributes,
		interface_fe_flood_element ];

	fe_gaussian_blur_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_filter_primitive_standard_attributes,
		interface_fe_gaussian_blur_element ];

	fe_image_element_interfaces = [
		interface_base,
		interface_uri_reference,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_filter_primitive_standard_attributes,
		interface_fe_image_element ];

	fe_merge_element_interfaces = [
		interface_base,
		interface_stylable,
		interface_filter_primitive_standard_attributes ];

	fe_merge_node_element_interfaces = [
		interface_base,
		interface_fe_merge_node_element ];

	cursor_element_interfaces = [
		interface_base,
		interface_uri_reference,
		interface_tests,
		interface_external_resources_required,
		interface_cursor_element ];

	a_element_interfaces = [
		interface_base,
		interface_uri_reference,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_transformable,
		interface_a_element	];

	view_element_interfaces = [
		interface_base,
		interface_external_resources_required,
		interface_fit_to_viewbox,
		interface_zoom_and_pan //,
//		interface_view_element // not imlpemented
		];

	script_element_interfaces = [
		interface_base,
		interface_uri_reference,
		interface_external_resources_required,
		interface_script_element ];

	animate_element_interfaces = [
		interface_base,
		interface_tests,
		interface_external_resources_required,
//		interface_animation_element, // not implemented
		interface_smil_event_target_interface ];

	set_element_interfaces = [
		interface_base,
		interface_tests,
		interface_external_resources_required,
//		interface_animation_element, // not implemented
		interface_smil_event_target_interface ];

	animate_motion_element_interfaces = [
		interface_base,
		interface_tests,
		interface_external_resources_required,
//		interface_animation_element,	// not implemented
		interface_smil_event_target_interface ];

	m_path_element_interfaces = [
		interface_base,
		interface_external_resources_required,
		interface_uri_reference ];

	animate_color_element_interfaces = [
		interface_base,
		interface_tests,
		interface_external_resources_required,
//		interface_animation_element, // not implemented
		interface_smil_event_target_interface  ];

	animate_transform_element_interfaces = [
		interface_base,
		interface_tests,
		interface_external_resources_required,
//		interface_animation_element, // not implemented
		interface_smil_event_target_interface ];

	font_element_interfaces = [
		interface_base,
		interface_external_resources_required,
		interface_stylable ];

	glyph_element_interfaces = [
		interface_base,
		interface_stylable ];

	missing_glyph_element_interfaces = [
		interface_base,
		interface_stylable ];

	h_kern_element_interfaces = [
		interface_base ];

	v_kern_element_interfaces = [
		interface_base ];

	font_face_element_interfaces = [
		interface_base ];

	font_face_src_element_interfaces = [
		interface_base ];

	font_face_uri_element_interfaces = [
		interface_base ];

	font_face_format_element_interfaces = [
		interface_base ];

	font_face_name_element_interfaces = [
		interface_base ];

	definition_src_element_interfaces = [
		interface_base ];

	metadata_element_interfaces = [
		interface_traitaccess, // available on all elements
    interface_base ];

	foreign_object_element_interfaces = [
		interface_base,
		interface_tests,
//		interface_lang_space, // not implemented
		interface_external_resources_required,
		interface_stylable,
		interface_transformable,
		interface_foreign_object_element ];
}

test("Interface: SVGSVGElement")
	require success "Setup";
{
	checkInterface('svgElement', svg_element_interfaces);
}

test("Interface: SVGCircleElement")
	require success "Setup";
{
	checkInterface('circle', circle_element_interfaces);
}

test("Interface: SVGEllipseElement")
	require success "Setup";
{
	checkInterface('ellipse', ellipse_element_interfaces);
}

test("Interface: SVGLineElement")
	require success "Setup";
{
	checkInterface('line', line_element_interfaces);
}

test("Interface: SVGPolygonElement")
	require success "Setup";
{
	checkInterface('triangle', polygon_element_interfaces);
}

test("Interface: SVGRectElement")
	require success "Setup";
{
	checkInterface('rect', rect_element_interfaces);
}

test("Interface: SVGTextElement")
	require success "Setup";
{
	checkInterface('text', text_element_interfaces);
}

test("Interface: SVGTextPathElement")
	require success "Setup";
{
	checkInterface('textPath', text_path_element_interfaces);
}

test("Interface: SVGPolylineElement")
	require success "Setup";
{
	checkInterface('polyline', polyline_element_interface);
}

test("Interface: SVGGElement")
	require success "Setup";
{
	checkInterface('group', g_element_interfaces);
}

test("Interface: SVGDefsElement")
	require success "Setup";
{
	checkInterface('defs', defs_element_interfaces);
}

test("Interface: SVGDescElement")
	require success "Setup";
{
	checkInterface('desc', desc_element_interfaces);
}

test("Interface: SVGTitleElement")
	require success "Setup";
{
	checkInterface('title', title_element_interfaces);
}

test("Interface: SVGSymbolElement")
	require success "Setup";
{
	checkInterface('imageRef1', symbol_element_interfaces);
}

test("Interface: SVGUseElement")
	require success "Setup";
{
	checkInterface('upperLeft', use_element_interfaces);
}

test("Interface: SVGImageElement")
	require success "Setup";
{
	checkInterface('image1', image_element_interfaces);
}

test("Interface: SVGSwitchElement")
	require success "Setup";
{
	checkInterface('switch', switch_element_interfaces);
}

test("Interface: SVGStyleElement")
	require success "Setup";
{
	checkInterface('style', style_element_interfaces);
}

test("Interface: SVGPathElement")
	require success "Setup";
{
	checkInterface('path', path_element_interfaces);
}

test("Interface: SVGMarkerElement")
	require success "Setup";
{
	checkInterface('marker', marker_element_interfaces);
}

test("Interface: SVGGradientElement")
	require success "Setup";
{
	checkInterface('gradient', gradient_element_interfaces);
}

test("Interface: SVGLinearGradientElement")
	require success "Setup";
{
	checkInterface('linear_gradient', linear_gradient_element_interfaces);
}

test("Interface: SVGRadialGradientElement")
	require success "Setup";
{
	checkInterface('radial_gradient', radial_gradient_element_interfaces);
}

test("Interface: SVGStopElement")
	require success "Setup";
{
	checkInterface('stop', stop_element_interfaces);
}

test("Interface: SVGPatternElement")
	require success "Setup";
{
	checkInterface('pattern', pattern_element_interfaces);
}

test("Interface: SVGMaskElement")
	require success "Setup";
{
	checkInterface('mask', mask_element_interfaces);
}

test("Interface: SVGFilterElement")
	require success "Setup";
{
	checkInterface('filter', filter_element_interfaces);
}

test("Interface: SVGFEBlendElement")
	require success "Setup";
{
	checkInterface('fe_blend', fe_blend_element_interfaces);
}

test("Interface: SVGFEColorMatrixElement")
	require success "Setup";
{
	checkInterface('fe_color_matrix', fe_color_matrix_element_interfaces);
}

test("Interface: SVGFEComponentTransferElement")
	require success "Setup";
{
	checkInterface('fe_component_transfer', fe_component_transfer_element_interfaces);
}

test("Interface: SVGFEFuncRElement")
	require success "Setup";
{
	checkInterface('fe_func_r', fe_func_r_element_interfaces);
}

test("Interface: SVGFEFuncGElement")
	require success "Setup";
{
	checkInterface('fe_func_g', fe_func_g_element_interfaces);
}

test("Interface: SVGFEFuncBElement")
	require success "Setup";
{
	checkInterface('fe_func_b', fe_func_b_element_interfaces);
}

test("Interface: SVGFEFuncAElement")
	require success "Setup";
{
	checkInterface('fe_func_a', fe_func_a_element_interfaces);
}

test("Interface: SVGFECompositeElement")
	require success "Setup";
{
	checkInterface('fe_composite', fe_composite_element_interfaces);
}

test("Interface: SVGFEConvolveMatrixElement")
	require success "Setup";
{
	checkInterface('fe_convolve_matrix', fe_convolve_matrix_element_interfaces);
}

test("Interface: SVGFEDiffuseLightingElement")
	require success "Setup";
{
	checkInterface('fe_diffuse_lightning', fe_diffuse_lightning_element_interfaces);
}

test("Interface: SVGFEDistantLightElement")
	require success "Setup";
{
	checkInterface('fe_distant_light_element', fe_distant_light_element_interfaces);
}

test("Interface: SVGFEPointLightElement")
	require success "Setup";
{
	checkInterface('fe_point_light', fe_point_light_element_interfaces);
}

test("Interface: SVGFESpotLightElement")
	require success "Setup";
{
	checkInterface('fe_spot_light', fe_spot_light_element_interfaces);
}

test("Interface: SVGFEDisplacementMapElement")
	require success "Setup";
{
	checkInterface('fe_displacement_map', fe_displacement_map_element_interfaces);
}

test("Interface: SVGFEFloodElement")
	require success "Setup";
{
	checkInterface('fe_flood', fe_flood_element_interfaces);
}

test("Interface: SVGFEGaussianBlurElement")
	require success "Setup";
{
	checkInterface('fe_gaussian_blur', fe_gaussian_blur_element_interfaces);
}

test("Interface: SVGFEImageElement")
	require success "Setup";
{
	checkInterface('fe_image', fe_image_element_interfaces);
}

test("Interface: SVGFEMergeElement")
	require success "Setup";
{
	checkInterface('fe_merge', fe_merge_element_interfaces);
}

test("Interface: SVGFEMergeNodeElement")
	require success "Setup";
{
	checkInterface('fe_merge_node', fe_merge_node_element_interfaces);
}

test("Interface: SVGFEMorphologyElement")
	require success "Setup";
{
	checkInterface('fe_morphology', fe_morphology_element_interfaces);
}

test("Interface: SVGFEOffsetElement")
	require success "Setup";
{
	checkInterface('fe_offset', fe_offset_element_interfaces);
}

test("Interface: SVGFESpecularLightingElement")
	require success "Setup";
{
	checkInterface('fe_specular_lightning', fe_specular_lightning_element_interfaces);
}

test("Interface: SVGFETileElement")
	require success "Setup";
{
	checkInterface('fe_tile', fe_tile_element_interfaces);
}

test("Interface: SVGFETurbulenceElement")
	require success "Setup";
{
	checkInterface('fe_turbulence', fe_turbulence_element_interfaces);
}

test("Interface: SVGCursorElement") disabled; // not supported
	require success "Setup";
{
	checkInterface('cursor', cursor_element_interfaces);
}

test("Interface: SVGAElement")
	require success "Setup";
{
	checkInterface('aname', a_element_interfaces);
}

test("Interface: SVGViewElement")
	require success "Setup";
{
	checkInterface('view', view_element_interfaces);
}

test("Interface: SVGScriptElement")
	require success "Setup";
{
	checkInterface('script', script_element_interfaces);
}

test("Interface: SVGAnimateElement")
	require success "Setup";
{
	checkInterface('animate', animate_element_interfaces);
}

test("Interface: SVGSetElement")
	require success "Setup";
{
	checkInterface('set', set_element_interfaces);
}

test("Interface: SVGAnimateMotionElement")
	require success "Setup";
{
	checkInterface('animate_motion', animate_motion_element_interfaces);
}

test("Interface: SVGMPathElement")
	require success "Setup";
{
	checkInterface('m_path', m_path_element_interfaces);
}

test("Interface: SVGAnimateColorElement")
	require success "Setup";
{
	checkInterface('animate_color', animate_color_element_interfaces);
}

test("Interface: SVGAnimateTransformElement")
	require success "Setup";
{
	checkInterface('animate_tranform', animate_transform_element_interfaces);
}

test("Interface: SVGFontElement")
	require success "Setup";
{
	checkInterface('font', font_element_interfaces);
}

test("Interface: SVGGlyphElement")
	require success "Setup";
{
	checkInterface('glyph', glyph_element_interfaces);
}

test("Interface: SVGMissingGlyphElement")
	require success "Setup";
{
	checkInterface('missing_glyph', missing_glyph_element_interfaces);
}

test("Interface: SVGHKernElement")
	require success "Setup";
{
	checkInterface('h_kern', h_kern_element_interfaces);
}

test("Interface: SVGVKernElement")
	require success "Setup";
{
	checkInterface('v_kern', v_kern_element_interfaces);
}

test("Interface: SVGFontFaceElement")
	require success "Setup";
{
	checkInterface('font_face', font_face_element_interfaces);
}

test("Interface: SVGFontFaceSrcElement")
	require success "Setup";
{
	checkInterface('font_face_src', font_face_src_element_interfaces);
}

test("Interface: SVGFontFaceUriElement")
	require success "Setup";
{
	checkInterface('font_face_uri', font_face_uri_element_interfaces);
}

test("Interface: SVGFontFaceFormatElement")
	require success "Setup";
{
	checkInterface('font_face_format', font_face_format_element_interfaces);
}

test("Interface: SVGFontFaceNameElement")
	require success "Setup";
{
	checkInterface('font_face_name', font_face_name_element_interfaces);
}

test("Interface: SVGDefinitionSrcElement")
	require success "Setup";
{
	checkInterface('definition_src', definition_src_element_interfaces);
}

test("Interface: SVGMetadataElement")
	require success "Setup";
{
	checkInterface('metadata', metadata_element_interfaces);
}

test("Interface: SVGForeignObjectElement")
	require success "Setup";
{
	checkInterface('foreign_object', foreign_object_element_interfaces);
}

xml {
//! <?xml version="1.0" standalone="no"?>
//! <svg xmlns="http://www.w3.org/2000/svg"
//!      xmlns:xlink="http://www.w3.org/1999/xlink">
//!		<filter id="filter" filterUnits="objectBoundingBox">
//!			<feFlood id="flood" result="foo"/>
//!			<feComponentTransfer>
//!				<feFuncR id="func" slope="1"/>
//!			</feComponentTransfer>
//!		</filter>
//! </svg>
}

test("baseVal type checking")
{
  var elm = document.getElementById("flood");
  elm.result.baseVal = 1;
  verify(elm.result.baseVal == "1");

  elm = document.getElementById("filter");
  elm.filterUnits.baseVal = "2";
  verify(elm.filterUnits.baseVal == 2);

  elm = document.getElementById("func");
  elm.slope.baseVal = "2";
  verify(elm.slope.baseVal == 2);
}

xml {
//! <svg xmlns="http://www.w3.org/2000/svg">
//!   <animate attributeName="font-size" from="10" to="20" dur="10s"/>
//! </svg>
}

test("SVGElement animation time control")
{
    var currentTime = document.rootElement.getCurrentTime();
    verify(currentTime >= 0);
    document.rootElement.setCurrentTime(0);
    currentTime = document.rootElement.getCurrentTime();
    verify(currentTime < 0.5); // Adjust appropriately

    document.rootElement.setCurrentTime(100)
    currentTime = document.rootElement.getCurrentTime();
    verify(currentTime - 100 < 0.5); // Adjust appropriately

    document.rootElement.pauseAnimations();
    verify(document.rootElement.animationsPaused());
    document.rootElement.unpauseAnimations();
    verify(!document.rootElement.animationsPaused());
}

test("SVGElement suspend redraw control")
{
    /* The suspendRedraw family of functions is hard to test that they
     * do what the should in a automatic test. There is no way of
     * quereing about the current status of suspension. We call the
     * function and hopes that they don't throw any exceptions on
     * us. */

    var lockid = document.rootElement.suspendRedraw(10);
    document.rootElement.unsuspendRedraw(lockid);
    document.rootElement.suspendRedraw(10);
    document.rootElement.unsuspendRedrawAll();
}

data "image/svg+xml"
{
//! <?xml version="1.0" standalone="no"?>
//! <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
//!   <image id="img1" xlink:href="image1.jpg" width="100" height="100" xml:base="../foobar/" />
//! </svg>
}

test("SVGElement xmlbase")
{
	verify(document);
	verify(document.getElementById);
	var img = document.getElementById("img1");
	verify(img);
	verify(img.xmlbase == "../foobar/");
	verify(img.xmlbase == img.getAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:base"));
	verify(img.xmlbase == img.getAttribute("xml:base"));
	img.xmlbase = "moo";
	verify(img.xmlbase == "moo");
	verify(img.xmlbase == img.getAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:base"));
	verify(img.xmlbase == img.getAttribute("xml:base"));
}

xml {
//! <?xml version="1.0" standalone="no"?>
//! <svg xmlns="http://www.w3.org/2000/svg">
//!		<defs>
//!			<marker id="marker1"/>
//!			<filter id="filter1">
//!				<feGaussianBlur stdDeviation="5" id="gauss1"/>
//!			</filter>
//!		</defs>
//!		<rect id="rect1" width="20" height="40"/>
//!		<g>
//!			<rect id="rect2" width="30" height="50"/>
//!			<rect id="rect3" width="40" height="60" transform="scale(0 1)"/>
//!		</g>
//!		<text id="text1">This is text</text>
//! </svg>
}

test("SVGMarkerElement orient")
{
  var elm = document.getElementById("marker1");
  verify(elm.orientType.baseVal == SVGMarkerElement.SVG_MARKER_ORIENT_ANGLE);
  verify(elm.orientAngle.baseVal.value == 0.0);

  elm.setOrientToAuto();
  verify(elm.orientType.baseVal == SVGMarkerElement.SVG_MARKER_ORIENT_AUTO);

  var angle = document.rootElement.createSVGAngle();
  angle.newValueSpecifiedUnits(SVGAngle.SVG_ANGLETYPE_DEG, 140.0);
  elm.setOrientToAngle(angle);

  verify(elm.orientType.baseVal == SVGMarkerElement.SVG_MARKER_ORIENT_ANGLE);
  verify(elm.orientAngle.baseVal.value == 140.0);
  verify(elm.orientAngle.baseVal.unitType == SVGAngle.SVG_ANGLETYPE_DEG);

}

test("SVGFilterElement filterRes")
{
  var elm = document.getElementById("filter1");
  verify(elm.filterResX.baseVal == 0);
  verify(elm.filterResY.baseVal == 0);

  elm.setFilterRes(10, 5);
  verify(elm.filterResX.baseVal == 10);
  verify(elm.filterResY.baseVal == 5);
}

test("SVGFEGaussianBlurElement stdDeviation")
{
  var elm = document.getElementById("gauss1");
  verify(elm.stdDeviationX.baseVal == 5.0);
  verify(elm.stdDeviationY.baseVal == 5.0);

  elm.setStdDeviation(10.0, 15.0);
  verify(elm.stdDeviationX.baseVal == 10.0);
  verify(elm.stdDeviationY.baseVal == 15.0);
}

test("SVGLocatable")
{
  var elm = document.getElementById("rect1");
  var bbox = elm.getBBox();

  verify(Math.abs(bbox.width - 20.0) <= 1e-5 &&
		 Math.abs(bbox.height - 40.0) <= 1e-5 &&
		 Math.abs(bbox.x - 0.0) <= 1e-5 &&
		 Math.abs(bbox.y - 0.0) <= 1e-5);

  var ctm = elm.getCTM();

  verify(Math.abs(ctm.a - 1.0) <= 1e-5 &&
		 Math.abs(ctm.b - 0.0) <= 1e-5 &&
		 Math.abs(ctm.c - 0.0) <= 1e-5 &&
		 Math.abs(ctm.d - 1.0) <= 1e-5 &&
		 Math.abs(ctm.e - 0.0) <= 1e-5 &&
		 Math.abs(ctm.f - 0.0) <= 1e-5);

  try {
	var r2 = document.getElementById("rect2");
	var r3 = document.getElementById("rect3");
	var foo = r2.getTransformToElement(r3);
	ST_failed("error", "svg.element.ot", 1);
  }
  catch(e) { verify(e.code == 2); }
}

test("SVGTextContentElement exceptions")
{
  var elm = document.getElementById("text1");

  var do_test = function do_test(func) {
		try	{ func(); }
		catch(e) { return (e.code == DOMException.INDEX_SIZE_ERR); }
		return false;
  }

  // Negative start index
  verify(do_test(function() { elm.getSubStringLength(-1, 2); }));
  // Too large substring length
  // verify(do_test(function() { elm.getSubStringLength(0, 42); }));

  // Negative start index
  verify(do_test(function() { elm.selectSubString(-1, 2); }));
  // Too large substring length
  verify(do_test(function() { elm.selectSubString(42, 42); }));

  // Negative index
  verify(do_test(function() { elm.getStartPositionOfChar(-1); }));
  // Too large index
  verify(do_test(function() { elm.getStartPositionOfChar(42); }));

  // Negative index
  verify(do_test(function() { elm.getEndPositionOfChar(-1); }));
  // Too large index
  verify(do_test(function() { elm.getEndPositionOfChar(42); }));

  // Negative index
  verify(do_test(function() { elm.getExtentOfChar(-1); }));
  // Too large index
  verify(do_test(function() { elm.getExtentOfChar(42); }));

  // Negative index
  verify(do_test(function() { elm.getRotationOfChar(-1); }));
  // Too large index
  verify(do_test(function() { elm.getRotationOfChar(42); }));
}

html
{
//! <html><body>
//!   <object id="o" data="data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%0D%0A%20%20%20%20%20xmlns%3Axlink%3D%22http%3A//www.w3.org/1999/xlink%22%0D%0A%3E%0D%0A%20%20%3Cg%20fill-opacity%3D%220.6%22%20stroke%3D%22%23fff%22%20stroke-width%3D%221px%22%3E%0D%0A%20%20%20%20%3Ccircle%20id%3D%22c1%22%20cx%3D%22100px%22%20cy%3D%2250px%22%20r%3D%2250%22%20fill%3D%22%2300f%22%0D%0A%20%20%20%20%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20transform%3D%22translate%280%2C0%29%22%20/%3E%0D%0A%20%20%20%20%3Ccircle%20id%3D%22c2%22%20cx%3D%22100px%22%20cy%3D%2250px%22%20r%3D%2250%22%20fill%3D%22%23ff0%22%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20transform%3D%22translate%2830%2C50%29%22%20/%3E%0D%0A%20%20%20%20%3Ccircle%20id%3D%22c3%22%20cx%3D%22100px%22%20cy%3D%2250px%22%20r%3D%2250%22%20fill%3D%22%23f0f%22%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20transform%3D%22translate%28-30%2C50%29%22/%3E%0D%0A%20%20%3C/g%3E%0D%0A%3C/svg%3E"
//!		width="100" height="100"></object>
//!   <embed id="e" src="data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%0D%0A%20%20%20%20%20xmlns%3Axlink%3D%22http%3A//www.w3.org/1999/xlink%22%0D%0A%3E%0D%0A%20%20%3Cg%20fill-opacity%3D%220.6%22%20stroke%3D%22%23fff%22%20stroke-width%3D%221px%22%3E%0D%0A%20%20%20%20%3Ccircle%20id%3D%22c1%22%20cx%3D%22100px%22%20cy%3D%2250px%22%20r%3D%2250%22%20fill%3D%22%2300f%22%0D%0A%20%20%20%20%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20transform%3D%22translate%280%2C0%29%22%20/%3E%0D%0A%20%20%20%20%3Ccircle%20id%3D%22c2%22%20cx%3D%22100px%22%20cy%3D%2250px%22%20r%3D%2250%22%20fill%3D%22%23ff0%22%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20transform%3D%22translate%2830%2C50%29%22%20/%3E%0D%0A%20%20%20%20%3Ccircle%20id%3D%22c3%22%20cx%3D%22100px%22%20cy%3D%2250px%22%20r%3D%2250%22%20fill%3D%22%23f0f%22%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20transform%3D%22translate%28-30%2C50%29%22/%3E%0D%0A%20%20%3C/g%3E%0D%0A%3C/svg%3E"
//!		width="100" height="100"></embed>
//!   <iframe id="i" src="data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%0D%0A%20%20%20%20%20xmlns%3Axlink%3D%22http%3A//www.w3.org/1999/xlink%22%0D%0A%3E%0D%0A%20%20%3Cg%20fill-opacity%3D%220.6%22%20stroke%3D%22%23fff%22%20stroke-width%3D%221px%22%3E%0D%0A%20%20%20%20%3Ccircle%20id%3D%22c1%22%20cx%3D%22100px%22%20cy%3D%2250px%22%20r%3D%2250%22%20fill%3D%22%2300f%22%0D%0A%20%20%20%20%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20transform%3D%22translate%280%2C0%29%22%20/%3E%0D%0A%20%20%20%20%3Ccircle%20id%3D%22c2%22%20cx%3D%22100px%22%20cy%3D%2250px%22%20r%3D%2250%22%20fill%3D%22%23ff0%22%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20transform%3D%22translate%2830%2C50%29%22%20/%3E%0D%0A%20%20%20%20%3Ccircle%20id%3D%22c3%22%20cx%3D%22100px%22%20cy%3D%2250px%22%20r%3D%2250%22%20fill%3D%22%23f0f%22%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20transform%3D%22translate%28-30%2C50%29%22/%3E%0D%0A%20%20%3C/g%3E%0D%0A%3C/svg%3E"
//!		width="100" height="100"></iframe>
//! </body></html>
}

test("getSVGDocument")
{
	var obj = document.getElementById("o");
	var emb = document.getElementById("e");
  var ifr = document.getElementById("i");
	verify(obj);
	verify(emb);
	verify(ifr);
  verify(obj.getSVGDocument());
	verify(emb.getSVGDocument());
  verify(ifr.getSVGDocument());
}

test("contentDocument == getSVGDocument")
  require success "getSVGDocument";
{
  var obj = document.getElementById("o");
  var ifr = document.getElementById("i");
	verify(ifr.contentDocument == ifr.getSVGDocument());
  verify(obj.contentDocument == obj.getSVGDocument());
}

xml {
//! <html xmlns="http://www.w3.org/1999/xhtml">
//! 	<body>
//! 		<div>Hello div</div>
//! 		<svg id="svg1" xmlns="http://www.w3.org/2000/svg" width="200" height="200" style="position: absolute; top: 50px; left: 100px; border: 1px solid black">
//! 			<rect id="rect1" width="100" height="50" fill="lime"/>
//! 		</svg>
//! 		<svg id="svg2" xmlns="http://www.w3.org/2000/svg" width="200" height="200" style="position: absolute; top: 500px; left: 100px; right: 300px; border: 1px solid black">
//! 		</svg>
//! 		<svg id="svg3" xmlns="http://www.w3.org/2000/svg" style="position: absolute; top: 500px; left: 100px; width:200px; height: 200px; border: 1px solid black">
//! 		</svg>
//! 		<svg id="svg4" xmlns="http://www.w3.org/2000/svg" style="border: 1px solid black" width="100" height="300">
//! 		</svg>
//!			<svg id="svg5" xmlns="http://www.w3.org/2000/svg" style="border: 1px solid black" width="100" height="300">
//!				<svg id="svg6" x="50" y="60" width="50" height="70">
//!				</svg>
//!				<foreignObject id="fo" x="50" width="200" height="300" transform="translate(0 50)">
//!					<div id="fodiv" xmlns="http://www.w3.org/1999/xhtml" style="width:200px;height:50px;background:blue">
//! 					<svg id="svg7" xmlns="http://www.w3.org/2000/svg" width="20" height="50" style="border: 2px solid deeppink">
//! 						<rect x="5" y="25" width="10" height="10" fill="blue" />
//! 					</svg>
//!					</div>
//!				</foreignObject>
//!			</svg>
//! 	</body>
//! </html>
};

test("getBoundingClientRect on svg")
{
	verify_rect = function(id, exp)
	{
		var elm = document.getElementById(id);
		var r = elm.getBoundingClientRect();
		if(exp.top != r.top || exp.left != r.left || exp.bottom != r.bottom || exp.right != r.right)
		{
			throw "Got: " + r.top + ", " + r.left + ", " + r.bottom + ", " + r.right + " but expected: " + exp.top + ", " + exp.left + ", " + exp.bottom + ", " + exp.right;
			return false;
		}
		return true;
	};

	Rect = function(t,l,b,r)
	{
		this.top = t;
		this.left = l;
		this.bottom = b;
		this.right = r;
	};

	Rect.prototype = {
		get top() {
			return this._top;
		},
		set top(val) {
			this._top = val;
		},
		get left() {
			return this._left;
		},
		set left(val) {
			this._left = val;
		},
		get bottom() {
			return this._bottom;
		},
		set bottom(val) {
			this._bottom = val;
		},
		get right() {
			return this._right;
		},
		set right(val) {
			this._right = val;
		}
	};

	verify_rect("svg1", new Rect(50,100,252,302));
	verify_rect("svg2", new Rect(500,100,702,302));
	verify_rect("svg3", new Rect(500,100,702,302));
	verify_rect("svg4", new Rect(27,8,329,110));
	verify_rect("svg5", new Rect(27, 115, 329, 217));
	verify_rect("svg7", new Rect(0, 0, 54, 24));
	verify_rect("rect1", new Rect(50, 100, 100, 200));
}

xml
{
//! <html xmlns="http://www.w3.org/1999/xhtml">
//!   <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
//!     <rect width="100%" height="100%" fill="green"/>
//!   </svg>
//! </html>
};

test("Set cssText in SVG")
{
    var svg = document.getElementsByTagName("svg")[0];
    svg.style.cssText = "position:absolute; top: 50px; left: 100px; fill-rule: evenodd";
    verify(svg.style.top == "50px");
    verify(svg.style.left == "100px");
    verify(svg.style.position == "absolute");
    verify(svg.style.fillRule == "evenodd");
}

svg
{
//! <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" style="stroke-width:8px; position: absolute">
//!   <rect width="100%" height="100%" fill="green"/>
//! </svg>
};

test("Get cssText in SVG")
{
	var svg = document.getElementsByTagName("svg")[0];
	verify(svg.style.cssText == "stroke-width:8px; position: absolute");
    verify(svg.style.strokeWidth == "8px");
    verify(svg.style.position == "absolute");
}
