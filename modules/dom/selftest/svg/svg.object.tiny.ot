group "DOM.svg.object.tiny";
require init;
require SVG_SUPPORT;
require SVG_DOM;
require SVG_TINY_12; // only enabled in the phone profile

language ecmascript;

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 480 360" onload="init();" id="svgroot">
//! <defs>
//!   <path id="pathelem" d="M 0,0 L 10,0 L 0,10 z"/>
//! </defs>
//! <rect id="rect" pointer-events="all" x="10" y="10" width="230" height="170" fill="#808080" stroke="none"/>
//! </svg>
}

test("Setup")
{
	checkProperties_HasProperty = function checkProperties_HasProperty(node, properties)
		{
			for (var index = 0; index < properties.length; ++index)
				if (!(properties[index] in node))
					throw "HasProperty: '" + properties[index] + "' not found";
			return true;
		}

	checkProperties_Enumerate = function checkProperties_Enumerate(node, properties)
		{
			outer: for (var index = 0; index < properties.length; ++index)
			{
				for (var property in node)
					if (property == properties[index])
						continue outer;
				throw "Enumerate: '" + properties[index] + "' not found";
			}
			return true;
		}

	checkProperties_Get = function checkProperties_Get(node, properties, values)
		{
			for (var index = 0; index < properties.length; ++index)
			{
				if (!(properties[index] in values))
					throw "Get: INCORRECT TEST: " + properties[index] + " not in values";
				if (!(node[properties[index]] == values[properties[index]]))
					throw "Get: '" + properties[index] + "' wrong, is '" + node[properties[index]] + "', should be '" + values[properties[index]] + "'";
			}
			return true;
		}

	checkProperties_PutNotAllowed = function checkProperties_PutNotAllowed(node, properties)
		{
			'use strict';

			for (var index = 0; index < properties.length; ++index)
			{
				error = null;
				try
				{
					old_value = node[properties[index]];
					if (typeof(old_value) == "string")
						new_value = 10;
					else
						new_value = "foo";
					node[properties[index]] = new_value;
					if (!(node[properties[index]] == old_value))
						error = "PutNotAllowed: '" + properties[index] + "' changed value and didn't throw exception";
					else
						error = "PutNotAllowed: '" + properties[index] + "' didn't throw exception";
				}
				catch(e)
				{
					if (e instanceof TypeError)
						if (!(node[properties[index]] == old_value))
							error = "PutNotAllowed: '" + properties[index] + "' threw exception but changed value";
				}
				if (error != null)
					throw error;
			}
			return true;
		}

	checkProperties_Unique = function checkProperties_Unique(node, properties)
		{
			error = null;
			for(var index = 0; index < properties.length; ++index)
			{
				if (node[properties[index]] != node[properties[index]])
					error = "Unique: '" + properties[index] + "' did not return an equal object in subsequent accesses";
			}

			if (error != null)
				throw error;

			return true;
		}

	checkFunctions_HasProperty = function checkFunctions_HasProperty(node, properties)
		{
			for (var index = 0; index < properties.length; ++index)
			{
				if (!(properties[index] in node))
					throw "HasProperty: '" + properties[index] + "' not found";
				if (!(typeof(node[properties[index]]) == "function"))
					throw "HasProperty: '" + properties[index] + "' not a function";
			}
			return true;
		}

	checkFunctions_Enumerate = function checkFunctions_Enumerate(node, properties)
		{
			outer: for (var index = 0; index < properties.length; ++index)
			{
				for (var property in node)
					if (property == properties[index])
						continue outer;
				throw "Enumerate: '" + properties[index] + "' not found";
			}
			return true;
		}

/*
	checkConstants = function checkConstants(node, constants)
		{
			for (var name in constants)
			{
				if (node[name] != constants[name])
					throw "Constant: '" + name + "' not found";
			}

		}
*/

	checkInterface = function checkInterface(obj, interfaces)
		{
			for (var index = 0; index < interfaces.length; ++index)
			{
				checkProperties_HasProperty(obj, interfaces[index].all_props);
				checkProperties_Enumerate(obj, interfaces[index].all_props);
				checkProperties_Unique(obj, interfaces[index].all_props);
				checkProperties_PutNotAllowed(obj, interfaces[index].ro_props);
				checkFunctions_HasProperty(obj, interfaces[index].methods);
				checkFunctions_Enumerate(obj, interfaces[index].methods);
/*
				if ("constants" in interfaces[index])
				{
					checkConstants(obj, interfaces[name], interfaces[index].constants);
				}
*/
			}

			return true;
		}

	function Interface(all_props, ro_props, methods/*, name, constants */)
	{
		this.all_props = all_props;
		this.ro_props = ro_props;
		this.methods = methods;
/*
		if (name)
			this.name = name;
		if (constants)
			this.constants = constants;
*/
	}

	svgmatrix_interface = new Interface([], [],
					    ["inverse", "getComponent", "mMultiply", "mTranslate", "mScale", "mRotate"]);
	svgrect_interface = new Interface(["x", "y", "width", "height"], [], []);

	svgpath_interface = new Interface(["numberOfSegments"], ["numberOfSegments"], ["getSegment", "getSegmentParam", "moveTo", "lineTo", "quadTo", "curveTo", "close"]);

	traitaccess_interface = new Interface([],[],["getTrait", "getTraitNS", "getFloatTrait", "getMatrixTrait", "getRectTrait", "getPathTrait", "getRGBColorTrait",
												 "getPresentationTrait", "getPresentationTraitNS", "getFloatPresentationTrait", "getMatrixPresentationTrait", "getRectPresentationTrait",
												 "getPathPresentationTrait", "getRGBColorPresentationTrait", "setTrait", "setTraitNS", "setFloatTrait", "setMatrixTrait", "setRectTrait",
												 "setPathTrait", "setRGBColorTrait"]);

	do_test = function do_test(obj, func, params, should_throw, code) {
		var t = obj;
		try	{
			eval("t." + func + "(" + params + ")");
		} catch(e) {
			opera.postError("t." + func + "(" + params + "): " + e.code);
			return (should_throw && e.code == code);
		}
		return !should_throw;
	}

	compare_matrices = function compare_matrices(matrix, refmatrix, epsilon) {
		if (!((matrix.getComponent(0) <= refmatrix.getComponent(0)+epsilon && matrix.getComponent(0) >= refmatrix.getComponent(0)-epsilon) &&
			  (matrix.getComponent(1) <= refmatrix.getComponent(1)+epsilon && matrix.getComponent(1) >= refmatrix.getComponent(1)-epsilon) &&
			  (matrix.getComponent(2) <= refmatrix.getComponent(2)+epsilon && matrix.getComponent(2) >= refmatrix.getComponent(2)-epsilon) &&
			  (matrix.getComponent(3) <= refmatrix.getComponent(3)+epsilon && matrix.getComponent(3) >= refmatrix.getComponent(3)-epsilon) &&
			  (matrix.getComponent(4) <= refmatrix.getComponent(4)+epsilon && matrix.getComponent(4) >= refmatrix.getComponent(4)-epsilon) &&
			  (matrix.getComponent(5) <= refmatrix.getComponent(5)+epsilon && matrix.getComponent(5) >= refmatrix.getComponent(5)-epsilon)))
			return false;
		return true;
	}
}

test("Interface: SVGMatrix")
  require success "Setup";
{
  var obj = document.getElementById('svgroot').createSVGMatrixComponents(1,1,1,1,1,1);
  checkInterface(obj, svgmatrix_interface);
}

test("Interface: SVGRect")
  require success "Setup";
{
  var obj = document.getElementById('svgroot').createSVGRect();
  checkInterface(obj, svgrect_interface);
}

test("Interface: SVGPath")
  require success "Setup";
{
  var obj = document.getElementById('svgroot').createSVGPath();
  checkInterface(obj, svgpath_interface);
}

test("Test SVGMatrix::getComponent")
{
	var m = document.getElementById('svgroot').createSVGMatrixComponents(1,2,3,4,5,6);
	verify(m);
	verify(m.getComponent(0) == 1);
	verify(m.getComponent(1) == 2);
	verify(m.getComponent(2) == 3);
	verify(m.getComponent(3) == 4);
	verify(m.getComponent(4) == 5);
	verify(m.getComponent(5) == 6);
	verify(do_test(m, "getComponent", -1, true, DOMException.INDEX_SIZE_ERR));
	verify(do_test(m, "getComponent", 6, true, DOMException.INDEX_SIZE_ERR));
}

test("Test SVGMatrix::mMultiply")
{
	var m = document.getElementById('svgroot').createSVGMatrixComponents(1,0,0,1,0,0);
	verify(m);
	var m2 = document.getElementById('svgroot').createSVGMatrixComponents(1,0,0,1,40,20);
	var m3 = m.mMultiply(m2); // returns |this|
	verify(m == m3);
	verify(compare_matrices(m, m3, 0.005));
}

test("Test SVGMatrix::mTranslate")
{
	var m = document.getElementById('svgroot').createSVGMatrixComponents(1,0,0,1,0,0);
	verify(m);
	var m2 = m.mTranslate(40,20); // returns |this|
	verify(m == m2);
	verify(compare_matrices(m, m2, 0.005));
	verify(m.getComponent(4) == 40);
	verify(m.getComponent(5) == 20);
}

test("Test SVGMatrix::mScale")
{
	var m = document.getElementById('svgroot').createSVGMatrixComponents(1,0,0,1,0,0);
	verify(m);
	var m2 = m.mScale(2); // returns |this|
	verify(m == m2);
	verify(compare_matrices(m,m2,0.005));
	verify(m.getComponent(0) == 2);
	verify(m.getComponent(3) == 2);
}

test("Test SVGMatrix::mRotate")
{
	var m = document.getElementById('svgroot').createSVGMatrixComponents(1,0,0,1,0,0);
	verify(m);
	var angleDeg = 45;
	var angleRad = angleDeg * Math.PI / 180;
	var m2 = m.mRotate(angleDeg); // returns |this|
	verify(m == m2);
	verify(compare_matrices(m,m2,0.005));
	var m3 = document.getElementById('svgroot').createSVGMatrixComponents(1,0,0,1,0,0);
	var m4 = document.getElementById('svgroot').createSVGMatrixComponents(Math.cos(angleRad),Math.sin(angleRad),-Math.sin(angleRad),Math.cos(angleRad),0,0);
	m3.mMultiply(m4);
	if(!compare_matrices(m,m3,0.005))
	{
		throw m.getComponent(0) + "," + m.getComponent(1) + "," + m.getComponent(2) + "," + m.getComponent(3) + "," + m.getComponent(4) + "," + m.getComponent(5) + " != " + m3.getComponent(0) + "," + m3.getComponent(1) + "," + m3.getComponent(2) + "," + m3.getComponent(3) + "," + m3.getComponent(4) + "," + m3.getComponent(5);
	}
	verify(true);
}

test("Interface: TraitAccess")
{
  var obj = document.getElementById('svgroot');
  checkInterface(obj, traitaccess_interface);
}
