group "DOM.Media.Track";

require MEDIA_HTML_SUPPORT;

require init;

language ecmascript;

html
{
  //! <html><body><video id="video"><track id="track" kind="subtitles"></video></body></html>
}

test("Setup")
{
	video = document.getElementById("video");
	verify(video);
	track = document.getElementById("track");
	verify(track);
}

test("HTMLTrackElement constants")
{
	verify(HTMLTrackElement);

	verify(HTMLTrackElement.NONE === 0);
	verify(HTMLTrackElement.LOADING === 1);
	verify(HTMLTrackElement.LOADED === 2);
	verify(HTMLTrackElement.ERROR === 3);
}

test("HTMLTrackElement inheritance")
  require success "Setup";
{
	verify(track instanceof HTMLElement);
	verify(track instanceof HTMLTrackElement);

	verify(typeof track.foo === "undefined");
	HTMLElement.prototype.foo = 1;
	verify(track.foo === 1);
	HTMLTrackElement.prototype.foo = 2;
	verify(track.foo === 2);
	track.foo = 5;
	verify(track.foo === 5);
}

test("HTMLTrackElement instance interface types")
  require success "Setup";
{
	verify(typeof track.kind === "string");
	verify(typeof track.src === "string");
	verify(typeof track.srclang === "string");
	verify(typeof track.label === "string");
	verify(typeof track.default === "boolean");
	verify(typeof track.track === "object");
}

test("TextTrack creation and manipulation")
  require success "Setup";
{
	verify(video.textTracks);
	verify(video.textTracks.length === 1);

	tr = video.addTextTrack('captions', 'track foo', 'en');
	verify(tr);
	verify(video.textTracks.length === 2);
	verify(video.textTracks[1] === tr);

	verify(tr.kind === 'captions');
	verify(tr.label === 'track foo');
	verify(tr.language === 'en');
	verify(tr.mode === 'hidden');
	verify(tr.cues);
	verify(tr.cues.length === 0);
	verify(tr.activeCues);
	verify(tr.activeCues.length === 0);

	var cue = new TextTrackCue(2.5, 5.0, 'Some cue text');
	verify(cue);
	cue.id = 'myid';
	cue.size = 50;
	verify(cue.track === null);
	verify(cue.id === 'myid');
	verify(cue.startTime === 2.5);
	verify(cue.endTime === 5.0);
	verify(cue.pauseOnExit === false);
	verify(!cue.vertical);
	verify(cue.snapToLines === true);
	verify(cue.line === -1);
	verify(cue.position === 50);
	verify(cue.size === 50); // Custom
	verify(cue.align === 'middle');
	verify(cue.text === 'Some cue text');

	tr.addCue(cue);
	verify(cue.track === tr);
	verify(tr.cues.length === 1);
	verify(tr.cues[0] === cue);

	var cue2 = new TextTrackCue(1.0, 2.0, 'More cue text');
	verify(cue2);

	tr.addCue(cue2);
	verify(cue2.track === tr);
	verify(tr.cues.length === 2);
	verify(tr.cues[0] === cue2);
	verify(tr.cues[1] === cue);

	tr.removeCue(cue2);
	verify(cue2.track === null);
	verify(tr.cues.length === 1);
	verify(tr.cues[0] === cue);
}
