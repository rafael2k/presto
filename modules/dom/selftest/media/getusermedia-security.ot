/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "DOM.Media.getUserMedia.Security";

require DOM_STREAM_API_SUPPORT;
require SECMAN_SET_USERCONSENT;
require init;

language c++;

include "modules/security_manager/include/security_manager.h";
include "modules/windowcommander/OpWindowCommander.h";

html {
//! <html></html>
}

test("Access denied - setup")
{
	verify_success(g_secman_instance->SetUserConsent(state.GetWindow(),
		OpPermissionListener::PermissionCallback::PERMISSION_TYPE_CAMERA_REQUEST,
		OpPermissionListener::PermissionCallback::PERSISTENCE_TYPE_RUNTIME,
		OpSecurityManager::GetSelftestHostName(), DENIED));
}

test("Access denied - test getUserMedia")
	language ecmascript;
	async;
{
	function onUserMediaSuccess(stream)
	{
		ST_failed("getUserMedia success callback called but error expected");
	}

	function onUserMediaError(error)
	{
		if (error.code == error.PERMISSION_DENIED)
			ST_passed();
		else
			ST_failed("PERMISSION_DENIED (1) expected but got " + error.code + " instead");
	}

	navigator.getUserMedia("video", onUserMediaSuccess, onUserMediaError);
}


html {
//! <html>
//! <script>var is_success = false</script>
//! </html>
}

test("Access revoked - setup")
{
	verify_success(g_secman_instance->SetUserConsent(state.GetWindow(),
		OpPermissionListener::PermissionCallback::PERMISSION_TYPE_CAMERA_REQUEST,
		OpPermissionListener::PermissionCallback::PERSISTENCE_TYPE_RUNTIME,
		OpSecurityManager::GetSelftestHostName(), ALLOWED));
}

test("Access revoked - get stream")
	language ecmascript;
	async;
{
	function onStreamEnded()
	{
		is_success = true;
	}

	function onUserMediaSuccess(stream)
	{
		stream.onended = onStreamEnded();
		ST_passed();
	}

	function onUserMediaError(error)
	{
		ST_failed("getUserMedia error: " + error.code);
	}

	navigator.getUserMedia("video", onUserMediaSuccess, onUserMediaError);
}

test("Access revoked - revoke permission")
{
	verify_success(g_secman_instance->SetUserConsent(state.GetWindow(),
		OpPermissionListener::PermissionCallback::PERMISSION_TYPE_CAMERA_REQUEST,
		OpPermissionListener::PermissionCallback::PERSISTENCE_TYPE_RUNTIME,
		OpSecurityManager::GetSelftestHostName(), ASK));
}

// The onStreamEnded callback is called by now and the success variable should be set.
test("Access revoked - check result")
	language ecmascript;
{
	verify(is_success);
}


exit
{
	g_secman_instance->SetUserConsent(state.GetWindow(),
		OpPermissionListener::PermissionCallback::PERMISSION_TYPE_CAMERA_REQUEST,
		OpPermissionListener::PermissionCallback::PERSISTENCE_TYPE_RUNTIME,
		OpSecurityManager::GetSelftestHostName(), ASK);
}
