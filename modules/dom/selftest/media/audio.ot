/* -*- Mode: js; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2008-2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "DOM.Media.Audio";
require MEDIA_HTML_SUPPORT;
require init;
language ecmascript;

html
{
	//! <html><body><audio id="audio"></audio></body></html>
}

test("Setup")
{
	audio = document.getElementById("audio");
	verify(audio);
}

test("reading HTMLAudioElement instance constants")
	require success "Setup";
{
	verify(audio.NETWORK_EMPTY == 0);
	verify(audio.NETWORK_IDLE == 1);
	verify(audio.NETWORK_LOADING == 2);
	verify(audio.NETWORK_NO_SOURCE == 3);

	verify(audio.HAVE_NOTHING == 0);
	verify(audio.HAVE_METADATA == 1);
	verify(audio.HAVE_CURRENT_DATA == 2);
	verify(audio.HAVE_FUTURE_DATA == 3);
	verify(audio.HAVE_ENOUGH_DATA == 4);
}

test("HTMLAudioElement inheritance")
	require success "Setup";
{
	verify(audio instanceof HTMLElement);
	verify(audio instanceof HTMLMediaElement);
	verify(audio instanceof HTMLAudioElement);
	verify(!(audio instanceof HTMLVideoElement));

	verify(typeof audio.foo == "undefined");
	HTMLElement.prototype.foo = 1;
	verify(audio.foo == 1);
	HTMLMediaElement.prototype.foo = 2;
	verify(audio.foo == 2);
	HTMLAudioElement.prototype.foo = 3;
	verify(audio.foo == 3);
	HTMLVideoElement.prototype.foo = 4;
	verify(audio.foo == 3);
	audio.foo = 5;
	verify(audio.foo == 5);
}

test("HTMLAudioElement interface types")
	require success "Setup";
{
	verify(typeof audio.error == "object");
	verify(typeof audio.src == "string");
	verify(typeof audio.currentSrc == "string");
	verify(typeof audio.networkState == "number");
	verify(typeof audio.preload == "string");
	verify(audio.buffered instanceof TimeRanges);
	verify(typeof audio.buffered == "object");
	verify(typeof audio.buffered.length == "number");
	verify(typeof audio.buffered.start == "function");
	verify(typeof audio.buffered.end == "function");
	verify(typeof audio.load == "function");
	verify(typeof audio.canPlayType == "function");
	verify(typeof audio.readyState == "number");
	verify(typeof audio.seeking == "boolean");
	verify(typeof audio.currentTime == "number");
	verify(typeof audio.duration == "number");
	verify(typeof audio.paused == "boolean");
	verify(typeof audio.defaultPlaybackRate == "number");
	verify(typeof audio.playbackRate == "number");
	verify(audio.played instanceof TimeRanges);
	verify(typeof audio.played == "object");
	verify(typeof audio.played.length == "number");
	verify(typeof audio.played.start == "function");
	verify(typeof audio.played.end == "function");
	verify(audio.seekable instanceof TimeRanges);
	verify(typeof audio.seekable == "object");
	verify(typeof audio.seekable.length == "number");
	verify(typeof audio.seekable.start == "function");
	verify(typeof audio.seekable.end == "function");
	verify(typeof audio.ended == "boolean");
	verify(typeof audio.autoplay == "boolean");
	verify(typeof audio.loop == "boolean");
	verify(typeof audio.play == "function");
	verify(typeof audio.pause == "function");
	verify(typeof audio.controls == "boolean");
	verify(typeof audio.volume == "number");
	verify(typeof audio.muted == "boolean");
	verify(typeof audio.defaultMuted == "boolean");

	verify(typeof audio.width == "undefined");
	verify(typeof audio.height == "undefined");
	verify(typeof audio.videoWidth == "undefined");
	verify(typeof audio.videoHeight == "undefined");
	verify(typeof audio.poster == "undefined");
}

test("Audio() constructor")
{
	audio = new Audio();
	verify (audio instanceof HTMLAudioElement);
	audio = new Audio("nonexistant.ogg");
	verify (audio instanceof HTMLAudioElement);
	audio = Audio();
	verify (audio instanceof HTMLAudioElement);
	audio = Audio("nonexistant.ogg");
	verify (audio instanceof HTMLAudioElement);
}
