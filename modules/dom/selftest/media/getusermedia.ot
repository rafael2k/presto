/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "DOM.Media.getUserMedia";

require init;
require DOM_STREAM_API_SUPPORT;

include "modules/security_manager/include/security_manager.h";

language c++;

global
{
	OpSecurityManager::PrivilegedBlock g_privileged_block;
}

language ecmascript;

test("getUserMedia({ \"video\": true }, ...) calls the success callback")
	async;
{
	var timeout_id;
	function onUserMediaSuccess(stream)
	{
		if (timeout_id)
		{
			clearTimeout(timeout_id);
			timeout_id = null;
			if (stream == null)
				ST_failed("stream is not an object: " + stream, "", "");
			else if (!(stream instanceof LocalMediaStream))
				ST_failed("stream is not a Stream object: " + stream, "", "");
			else
				ST_passed();
		}
	}

	function onUserMediaError(error)
	{
		if (timeout_id)
		{
			clearTimeout(timeout_id);
			timeout_id = null;
			ST_failed("The failure callback has been called with the following error code: " + error.code, "", "");
		}
	}

	function onTimeout()
	{
		timeout_id = null;
		ST_failed("Timed out", "", "");
	}

	timeout_id = setTimeout(onTimeout, 500);
	navigator.getUserMedia({ "video": true }, onUserMediaSuccess, onUserMediaError);
}

// See options_objects array inside the test for actual objects
table options_index_table
{
	{ 0, "empty object",            false },
	{ 1, "no video property",       false },
	{ 2, "video property is true",  true },
	{ 3, "video property is false", false },
	{ 4, "video and some other property", true }
}

foreach (test_index, test_name, expected_result) from options_index_table
{
	test("getUserMedia options processing: " test_name)
		async;
	{
		var options_objects = [
			{ },
			{ "abc": true },
			{ "video": true },
			{ "video": false },
			{ "abc": false, "video": true }
		];

		var options = options_objects[test_index];

		var timeout_id;
		function onUserMediaSuccess(stream)
		{
			if (timeout_id)
			{
				clearTimeout(timeout_id);
				timeout_id = null;
				if (expected_result)
					ST_passed();
				else
					ST_failed("Error expected but the success callback has been invoked", "", "");
			}
		}

		function onUserMediaError(error)
		{
			if (timeout_id)
			{
				clearTimeout(timeout_id);
				timeout_id = null;
				ST_failed("onUserMediaError invoked with error: " + error, "", "");
			}
		}

		function onTimeout()
		{
			timeout_id = null;
			ST_failed("Timed out", "", "");
		}

		timeout_id = setTimeout(onTimeout, 500);
		try {
			navigator.getUserMedia(options, onUserMediaSuccess, onUserMediaError);
		}
		catch(e)
		{
			clearTimeout(timeout_id);
			if (expected_result)
				ST_failed("Unexpected exception caught: " + e);
			else if (e.code != DOMException.NOT_SUPPORTED_ERR)
				ST_failed("NOT_SUPPORTED_ERR expected but caught: " + e);
			else
				ST_passed();
		}
	}
}


// Backwards compatible string options
table options_table
{
	{ " video", true },
	{ "video ", true },
	{ " video ", true },
	{ " video environment", true },
	{ "audio,video", true }
	{ " audio, video", true },
	{ "audio,video ", true },
	{ "prefixvideo", false },
	{ "videosuffix", false },
	{ "something video", false },
	{ "something video, video", true },
	{ "audio,,video", true },
	{ "something,", false }
}

foreach (options, expected_result) from options_table
{
	test("getUserMedia options processing: '" options "'")
		async;
	{
		var timeout_id;
		function onUserMediaSuccess(stream)
		{
			if (timeout_id)
			{
				clearTimeout(timeout_id);
				timeout_id = null;
				if (expected_result)
					ST_passed();
				else
					ST_failed("Error expected but the success callback has been invoked", "", "");
			}
		}

		function onUserMediaError(error)
		{
			if (timeout_id)
			{
				clearTimeout(timeout_id);
				timeout_id = null;
				ST_failed("onUserMediaError invoked with error: " + error, "", "");
			}
		}

		function onTimeout()
		{
			timeout_id = null;
			ST_failed("Timed out", "", "");
		}

		timeout_id = setTimeout(onTimeout, 500);
		try {
			navigator.getUserMedia(options, onUserMediaSuccess, onUserMediaError);
		}
		catch(e)
		{
			clearTimeout(timeout_id);
			if (expected_result)
				ST_failed("Unexpected exception caught: " + e);
			else if (e.code != DOMException.NOT_SUPPORTED_ERR)
				ST_failed("NOT_SUPPORTED_ERR expected but caught: " + e);
			else
				ST_passed();
		}
	}
}
