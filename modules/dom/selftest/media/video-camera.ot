/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "DOM.Media.Video-Camera";

require MEDIA_HTML_SUPPORT;
require DOM_STREAM_API_SUPPORT;
require init;

language c++;

include "modules/security_manager/include/security_manager.h";

global {
	OpSecurityManager::PrivilegedBlock g_privileged_block;
}

language ecmascript;

html {
	//! <html>
	//! <script>
	//!
	//! function ListenerManager()
	//! {
	//! 	var listeners = []
	//!
	//! 	this.add = function(element, event_name, listener)
	//! 	{
	//! 		element.addEventListener(event_name, listener, false);
	//! 		listeners.push({element: element, event_name: event_name, listener: listener});
	//! 	}
	//!
	//! 	this.cleanUp = function()
	//! 	{
	//! 		for(var i in listeners)
	//! 		{
	//! 			var l = listeners[i];
	//! 			l.element.removeEventListener(l.event_name, l.listener, false);
	//! 		}
	//! 		listeners = []
	//! 	}
	//! }
	//!
	//! </script>
	//! <body id="body"><video id="video"></video></body>
	//! </html>
}

test("Assign camera to video element")
	async;
{
	var timeout_id;
	function onUserMediaSuccess(stream)
	{
		if (timeout_id)
		{
			clearTimeout(timeout_id);
			var video = document.getElementById('video');
			video.src = stream;
			if (video.src == 'about:streamurl')
				ST_passed();
			else
				ST_failed("video.src expected to be 'about:streamurl', it is " + video.src);
		}
		else
			output("onUserMediaSuccess called after timeout in \"Assign camera to video element\"");
	}

	function onUserMediaError(error)
	{
		if (timeout_id)
		{
			clearTimeout(timeout_id);
			timeout_id = null;
			ST_failed("getUserMedia has failed with error code " + error.code, "", "");
		}
		else
			output("onUserMediaError called after timeout in \"Assign camera to video element\"");
	}

	function timeout()
	{
		timeout_id = null;
		ST_failed("Timed out", "", "");
	}

	timeout_id = setTimeout(timeout, 500);
	navigator.getUserMedia("video", onUserMediaSuccess, onUserMediaError);
}


test("Video events for camera")
	require success "Assign camera to video element";
	async;
{
	var timeout_id;
	var events = [];
	var listeners = new ListenerManager();

	var video = document.getElementById('video');

	function rememberEvent(e) {
		if (timeout_id)
			events.push(e.type);
		else
			output("Event " + e.type + " received after timeout in \"Video events for camera\"");
	}

	function onUserMediaSuccess(stream)
	{
		if (timeout_id)
		{
			video.src = stream;
			video.play();
		}
		else
			output("onUserMediaSuccess called after timeout in \"Video events for camera\"");
	}

	function onUserMediaError(error)
	{
		if (timeout_id)
		{
			clearTimeout(timeout_id);
			timeout_id = null;
			ST_failed("getUserMedia has failed with error code " + error.code, "", "");
		}
		else
			output("onUserMediaError called after timeout in \"Video events for camera\"");
	}

	function timeout()
	{
		timeout_id = null;
		ST_failed("Timed out", "", "");
		listeners.cleanUp();
		output("Got the following events: " + events.join(", "));
	}

	function verifyResult()
	{
		if (timeout_id)
		{
			clearTimeout(timeout_id);
			video.pause();
			var equal = false;
			if (events.length == expected_video_events.length)
			{
				for (var i = 0; i < events.length; ++i)
					if (events[i] == expected_video_events[i])
					{
						equal = true;
						break;
					}
			}

			if (equal)
				ST_passed();
			else
				ST_failed("Incorrect events, received only: " + events.join(", "), "", "");

			listeners.cleanUp();
		}
		else
			output("verifyResult called after timeout in \"Video events for camera\"");
	}

	var expected_video_events = ['play', 'loadstart', 'durationchange', 'loadedmetadata', 'loadeddata', 'canplay', 'playing', 'canplaythrough'];
	for (var i in expected_video_events)
		listeners.add(video, expected_video_events[i], rememberEvent);

	listeners.add(video, 'canplaythrough', verifyResult);

	timeout_id = setTimeout(timeout, 500);
	navigator.getUserMedia('video', onUserMediaSuccess, onUserMediaError);
}


test("Video events for camera - autoplay")
	require success "Assign camera to video element";
	async;

{
	var timeout_id;
	var events = [];
	var listeners = new ListenerManager();

	var video = document.getElementById('video');
	video.autoplay = true;

	function cleanUp()
	{
		listeners.cleanUp();
		video.autoplay = false;
	}

	function rememberEvent(e) {
		if (timeout_id)
			events.push(e.type);
		else
			output("Event " + e.type + " received after timeout in \"Video events for camera - autoplay\"");
	}

	function onUserMediaSuccess(stream)
	{
		if (timeout_id)
		{
			video.src = stream;
			video.play();
		}
		else
			output("onUserMediaSuccess called after timeout in \"Video events for camera - autoplay\"");
	}

	function onUserMediaError(error)
	{
		if (timeout_id)
		{
			clearTimeout(timeout_id);
			timeout_id = null;
			ST_failed("getUserMedia has failed with error code " + error.code, "", "");
		}
		else
			output("onUserMediaError called after timeout in \"Video events for camera - autoplay\"");
	}

	function timeout()
	{
		timeout_id = null;
		ST_failed("Timed out", "", "");
		cleanUp();
		output("Got the following events: " + events.join(", "));
	}

	function verifyResult()
	{
		if (timeout_id)
		{
			clearTimeout(timeout_id);
			video.pause();
			var equal = false;
			if (events.length == expected_video_events.length)
			{
				for (var i = 0; i < events.length; ++i)
					if (events[i] == expected_video_events[i])
					{
						equal = true;
						break;
					}
			}

			if (equal)
				ST_passed();
			else
				ST_failed("Incorrect events, received only: " + events.join(", "), "", "");

			cleanUp();
		}
		else
			output("verifyResult called after timeout in \"Video events for camera - autoplay\"");
	}

	var expected_video_events = ['loadstart', 'durationchange', 'loadedmetadata', 'loadeddata', 'canplay', 'play', 'playing', 'canplaythrough'];
	for (var i in expected_video_events)
		listeners.add(video, expected_video_events[i], rememberEvent);

	listeners.add(video, 'canplaythrough', verifyResult);

	timeout_id = setTimeout(timeout, 500);
	navigator.getUserMedia("video", onUserMediaSuccess, onUserMediaError);
}


test("Test timeranges")
	async;
	require success "Assign camera to video element";
{
	var timeout_id;
	var video = document.getElementById('video');
	var listeners = new ListenerManager();

	function onUserMediaSuccess(stream)
	{
		if (timeout_id)
		{
			video.src = stream;

			listeners.add(video, 'playing', verifyTimeRanges);
			video.play();
		}
		else
			output("onUserMediaSuccess called after timeout in \"Test timeranges\"");
	}

	function onUserMediaError(error)
	{
		if (timeout_id)
		{
			clearTimeout(timeout_id);
			timeout_id = null;
			ST_failed("getUserMedia has failed with error code " + error.code, "", "");
		}
		else
			output("onUserMediaError called after timeout in \"Assign camera to video element\"");
	}

	function timeout()
	{
		timeout_id = null;
		ST_failed("Timed out", "", "");
		listeners.cleanUp();
	}

	function verifyTimeRanges()
	{
		if (timeout_id)
		{
			clearTimeout(timeout_id);
			if (video.seekable.length == 0)
				ST_passed();
			else
				ST_failed("The video reports camera stream as seekable, which is wrong.", "", "");
		}
		else
			listeners.cleanUp();
	}

	timeout_id = setTimeout(timeout, 500);
	navigator.getUserMedia("video", onUserMediaSuccess, onUserMediaError);
}

test("Test currentTime in timeupdate event")
	async;
	require success "Assign camera to video element";
	require success "Video events for camera";
{
	var timeout_id;
	var video = document.getElementById('video');
	var listeners = new ListenerManager();

	function onUserMediaSuccess(stream)
	{
		if (timeout_id)
		{
			video.src = stream;

			listeners.add(video, 'timeupdate', verifyTimeUpdate);
			video.play();
		}
		else
			output("onUserMediaSuccess called after timeout in \"Test currentTime in timeupdate event\"");
	}

	function onUserMediaError(error)
	{
		if (timeout_id)
		{
			clearTimeout(timeout_id);
			timeout_id = null;
			ST_failed("getUserMedia has failed with error code " + error.code, "", "");
		}
		else
			output("onUserMediaError called after timeout in \"Test currentTime in timeupdate event\"");
	}

	function timeout()
	{
		timeout_id = null;
		ST_failed("Timed out", "", "");
		listeners.cleanUp();
	}

	function verifyTimeUpdate()
	{
		if (timeout_id)
		{
			clearTimeout(timeout_id);
			if (video.currentTime > 0)
				ST_passed();
			else
				ST_failed("Invalid currentTime reported: " + video.currentTime + ", the expected value is to be > 0.", "", "");
			listeners.cleanUp();
		}
		else
			output("verifyTimeUpdate called after timeout in \"Test currentTime in timeupdate event\"");
	}

	timeout_id = setTimeout(timeout, 500);
	navigator.getUserMedia("video", onUserMediaSuccess, onUserMediaError);
}

test("video.src = [native object] (should not crash)")
{
	var video = document.getElementById('video');
	video.src = { toString: function() { return 'opera:blank'; } };

	verify(video.src == 'opera:blank');
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid"></video>
//! </body>
//! </html>
}

test("DSK-358071 - Crash in StreamMediaPlayer::Pause")
	async;
{
	var video = document.getElementById('vid');
	function set_video_src_again()
	{
		navigator.getUserMedia("video", function(stream) {
			video.src = stream; // this should not crash
			ST_passed();
		}, function() {
			ST_failed("Unexpected error", "", "");
		});
	}

	navigator.getUserMedia("video", function(stream) {
		video.src = stream;
		video.play();
		opera.collect();
		setTimeout(set_video_src_again, 100);
	}, function() {
		ST_failed("Unexpected error", "", "");
	});
}