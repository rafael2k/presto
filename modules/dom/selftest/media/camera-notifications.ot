/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "dom.media.camera.access_notifications";

require MEDIA_CAMERA_SUPPORT;
require init;

language c++;

include "modules/security_manager/include/security_manager.h";
include "modules/windowcommander/src/WindowCommander.h";
include "modules/dochand/win.h";

global
{
	class TestDocumentListener : public NullDocumentListener
	{
	public:
		TestDocumentListener()
			: m_is_oom(FALSE)
			, m_listener(NULL)
			, m_wc(NULL)
		{
		}

		void Setup(WindowCommander* wc)
		{
			m_wc = wc;
			m_listener = wc->GetDocumentListener();
			wc->SetDocumentListener(this);
		}

		~TestDocumentListener()
		{
			if (m_wc)
				m_wc->SetDocumentListener(m_listener);
		}

		virtual void OnCameraAccess(OpWindowCommander* wc, const OpVector<uni_char>* hostnames)
		{
			NotificationContent* evt = OP_NEW(NotificationContent, ());

			if (!evt || OpStatus::IsError((hostnames->GetCount() > 0) ? m_start_called.Add(evt) : m_end_called.Add(evt)))
			{
				OP_DELETE(evt);
				m_is_oom = TRUE;
				return;
			}
			evt->wc = wc;
		}

		void Reset()
		{
			m_start_called.DeleteAll();
			m_end_called.DeleteAll();
			m_is_oom = FALSE;
		}

		struct NotificationContent
		{
			OpWindowCommander* wc;
		};

		BOOL m_is_oom;
		OpAutoVector<NotificationContent> m_start_called;
		OpAutoVector<NotificationContent> m_end_called;
		OpDocumentListener* m_listener;
		WindowCommander* m_wc;
	};

	class TestPermissionListener : public NullPermissionListener
	{
	public:
		TestPermissionListener()
			: m_wc(NULL)
			, m_listener(NULL)
			, m_allow(FALSE)
		{
		}

		void Setup(WindowCommander* wc, BOOL allow)
		{
			m_wc = wc;
			m_listener = wc->GetPermissionListener();
			wc->SetPermissionListener(this);
			m_allow = allow;
		}

		~TestPermissionListener()
		{
			if (m_wc)
				m_wc->SetPermissionListener(m_listener);
		}
#ifdef WIC_SET_PERMISSION
		void RevokePermission()
		{
			m_wc->SetUserConsent(PermissionCallback::PERMISSION_TYPE_CAMERA_REQUEST, PermissionCallback::PERSISTENCE_TYPE_RUNTIME, UNI_L("opera-selftest"), MAYBE);
		}
#endif //WIC_SET_PERMISSION
		void OnAskForPermission(OpWindowCommander *commander, PermissionCallback *callback)
		{
			if (m_allow)
				callback->OnAllowed(PermissionCallback::PERSISTENCE_TYPE_RUNTIME);
			else
				callback->OnDisallowed(PermissionCallback::PERSISTENCE_TYPE_RUNTIME);
		}

	private:
		WindowCommander* m_wc;
		OpPermissionListener* m_listener;
		BOOL m_allow;
	};

	TestPermissionListener g_test_permission_listener;
	TestDocumentListener g_test_document_listener;
}

setup
{
	g_test_permission_listener.Setup(state.GetWindow()->GetWindowCommander(), TRUE);
	g_test_document_listener.Setup(state.GetWindow()->GetWindowCommander());
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid"></video>
//! </body>
//! </html>
}

/////////////// test1 getUserMedia alone should cause no notifications ///////////////

test("test1.1 getUserMedia alone should cause no notifications")
	language ecmascript;
	async;
{
	navigator.getUserMedia({video: true},
		function(stream) {
			ST_passed();
		},
		function(err) {
			ST_failed("Failed to obtain camera access: " + err.message + "(" + err.code + ")", "", "");
		}
	);
}

test("test1.2 getUserMedia alone should cause no notifications")
	require success "test1.1 getUserMedia alone should cause no notifications";
{
	verify(!g_test_document_listener.m_is_oom);

	verify(g_test_document_listener.m_start_called.GetCount() == 0);
	verify(g_test_document_listener.m_end_called.GetCount() == 0);
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid"></video>
//! </body>
//! </html>
}

test("test1.cleanup getUserMedia alone should cause no notifications")
{
	g_test_document_listener.Reset()
}

/////////////// test2 getUserMedia+set video.src should cause no notifications ///////////////

test("test2.1 getUserMedia+set video.src should cause no notifications")
	language ecmascript;
	async;
{
	var video = document.getElementById('vid');
	navigator.getUserMedia({video: true},
		function(stream) {
			video.src = stream;
			ST_passed();
		},
		function(err) {
			ST_failed("Failed to obtain camera access: " + err.message + "(" + err.code + ")", "", "");
		}
	);
}

test("test2.2 getUserMedia+set video.src should cause no notifications")
	require success "test2.1 getUserMedia+set video.src should cause no notifications";
{
	verify(!g_test_document_listener.m_is_oom);

	verify(g_test_document_listener.m_start_called.GetCount() == 0);
	verify(g_test_document_listener.m_end_called.GetCount() == 0);
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid"></video>
//! </body>
//! </html>
}

test("test2.cleanup getUserMedia+set video.src should cause no notifications")
{
	g_test_document_listener.Reset()
}

/////////////// test3 getUserMedia + set video.src + play should cause start notification ///////////////

test("test3.1 getUserMedia + set video.src + play should cause start notification")
	language ecmascript;
	async;
{
	var video = document.getElementById('vid');
	navigator.getUserMedia({video: true},
		function(stream) {
			video.src = stream;
			video.oncanplay = function(){
				video.play();
				ST_passed();
			}
		},
		function(err) {
			ST_failed("Failed to obtain camera access: " + err.message + "(" + err.code + ")", "", "");
		}
	);
}

test("test3.2 getUserMedia + set video.src + play should cause start notifications")
	require success "test3.1 getUserMedia + set video.src + play should cause start notification";
{
	verify(!g_test_document_listener.m_is_oom);

	verify(g_test_document_listener.m_start_called.GetCount() == 1);
	verify(g_test_document_listener.m_end_called.GetCount() == 0);
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid"></video>
//! </body>
//! </html>
}

test("test3.cleanup getUserMedia + set video.src + play should cause start notification")
{
	g_test_document_listener.Reset()
}

/////////////// test4 getUserMedia + set video.src + play + pause should cause start+end notification ///////////////

test("test4.1 getUserMedia + set video.src + play + pause should cause start+end notification")
	language ecmascript;
	async;
{
	var video = document.getElementById('vid');
	navigator.getUserMedia({video: true},
		function(stream) {
			video.src = stream;
			video.oncanplay = function(){
				video.play();
				video.pause();
				ST_passed();
			}
		},
		function(err) {
			ST_failed("Failed to obtain camera access: " + err.message + "(" + err.code + ")", "", "");
		}
	);
}

test("test4.2 getUserMedia + set video.src + play + pause should cause start+end notification")
	require success "test4.1 getUserMedia + set video.src + play + pause should cause start+end notification";
{
	verify(!g_test_document_listener.m_is_oom);

	verify(g_test_document_listener.m_start_called.GetCount() == 1);
	verify(g_test_document_listener.m_end_called.GetCount() == 1);
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
	verify(g_test_document_listener.m_end_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid"></video>
//! </body>
//! </html>
}

test("test4.cleanup getUserMedia + set video.src + play + pause should cause start+end notification")
{
	g_test_document_listener.Reset()
}

/////////////// test5 getUserMedia + set video.src + play + pause should cause start+end notification ///////////////

test("test5.1 getUserMedia + set video.src + play + pause + play should cause 2xstart+1xend notification")
	language ecmascript;
	async;
{
	var video = document.getElementById('vid');
	navigator.getUserMedia({video: true},
		function(stream) {
			video.src = stream;
			video.oncanplay = function(){
				video.play();
				video.pause();
				video.play();
				ST_passed();
			}
		},
		function(err) {
			ST_failed("Failed to obtain camera access: " + err.message + "(" + err.code + ")", "", "");
		}
	);
}

test("test5.2 getUserMedia + set video.src + play + pause + play should cause 2xstart+1xend notification")
	require success "test5.1 getUserMedia + set video.src + play + pause + play should cause 2xstart+1xend notification";
{
	verify(!g_test_document_listener.m_is_oom);

	verify(g_test_document_listener.m_start_called.GetCount() == 2);
	verify(g_test_document_listener.m_end_called.GetCount() == 1);
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
	verify(g_test_document_listener.m_start_called.Get(1)->wc == state.GetWindow()->GetWindowCommander());
	verify(g_test_document_listener.m_end_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid"></video>
//! </body>
//! </html>
}

test("test5.cleanup getUserMedia + set video.src + play + pause + play should cause 2xstart+1xend notification")
{
	g_test_document_listener.Reset()
}

/////////////// test6 getUserMedia + set video.src + play + play + pause should cause start+end notification ///////////////

test("test6.1 getUserMedia + set video.src + play + play  + pause should cause 1xstart+1xend notification")
	language ecmascript;
	async;
{
	var video = document.getElementById('vid');
	navigator.getUserMedia({video: true},
		function(stream) {
			video.src = stream;
			video.oncanplay = function(){
				video.play();
				video.play();
				video.pause();
				ST_passed();
			}
		},
		function(err) {
			ST_failed("Failed to obtain camera access: " + err.message + "(" + err.code + ")", "", "");
			}
		);
}

test("test6.2 getUserMedia + set video.src + play + play  + pause should cause 1xstart+1xend notification")
	require success "test6.1 getUserMedia + set video.src + play + play  + pause should cause 1xstart+1xend notification";
{
	verify(!g_test_document_listener.m_is_oom);

	verify(g_test_document_listener.m_start_called.GetCount() == 1);
	verify(g_test_document_listener.m_end_called.GetCount() == 1);
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
	verify(g_test_document_listener.m_end_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid1"></video>
//! <video id="vid2"></video>
//! </body>
//! </html>
}

test("test6.cleanup getUserMedia + set video.src + play + play  + pause should cause 1xstart+1xend notification")
{
	g_test_document_listener.Reset()
}

/////////////// test7 getUserMedia + 2 x video elements + 2xplay + 2xpause should cause 1xstart+1xend notification ///////////////

test("test7.1 getUserMedia + 2 x video elements + 2xplay + 2xpause should cause 1xstart+1xend notification")
	language ecmascript;
	async;
{
	var video1 = document.getElementById('vid1');
	var video2 = document.getElementById('vid2');
	navigator.getUserMedia({video: true},
		function(stream) {
			video1.src = stream;
			video2.src = stream;
			video2.oncanplay = function(){
				video1.play();
				video2.play();
				video1.pause();
				video2.pause();
				ST_passed();
			}
		},
		function(err) {
			ST_failed("Failed to obtain camera access: " + err.message + "(" + err.code + ")", "", "");
			}
		);
}

test("test7.2 getUserMedia + 2 x video elements + 2xplay + 2xpause should cause 1xstart+1xend notification")
	require success "test7.1 getUserMedia + 2 x video elements + 2xplay + 2xpause should cause 1xstart+1xend notification";
{
	verify(!g_test_document_listener.m_is_oom);

	verify(g_test_document_listener.m_start_called.GetCount() == 1);
	verify(g_test_document_listener.m_end_called.GetCount() == 1);
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
	verify(g_test_document_listener.m_end_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid1"></video>
//! <video id="vid2"></video>
//! </body>
//! </html>
}

test("test7.cleanup getUserMedia + 2 x video elements + 2xplay + 2xpause should cause 1xstart+1xend notification")
{
	g_test_document_listener.Reset()
}

/////////////// test8 getUserMedia + 2 x video elements + 2xplay + 1xpause should cause 1xstart notification ///////////////

test("test8.1 getUserMedia + 2 x video elements + 2xplay + 1xpause should cause 1xstart notification")
	language ecmascript;
	async;
{
	var video1 = document.getElementById('vid1');
	var video2 = document.getElementById('vid2');
	navigator.getUserMedia({video: true},
		function(stream) {
			video1.src = stream;
			video2.src = stream;
			video2.oncanplay = function(){
				video1.play();
				video2.play();
				video1.pause();
				ST_passed();
			}
		},
		function(err) {
			ST_failed("Failed to obtain camera access: " + err.message + "(" + err.code + ")", "", "");
			}
		);
}

test("test8.2 getUserMedia + 2 x video elements + 2xplay + 1xpause should cause 1xstart notification")
	require success "test8.1 getUserMedia + 2 x video elements + 2xplay + 1xpause should cause 1xstart notification";
{
	verify(!g_test_document_listener.m_is_oom);

	verify(g_test_document_listener.m_start_called.GetCount() == 1);
	verify(g_test_document_listener.m_end_called.GetCount() == 0);
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid"></video>
//! </body>
//! </html>
}

test("test8.cleanup getUserMedia + 2 x video elements + 2xplay + 1xpause should cause 1xstart notification")
{
	g_test_document_listener.Reset()
}

/////////////// test9 getUserMedia + play + delete video node should cause 1xstart+1xend notification ///////////////

test("test9.1 getUserMedia + play + delete video node should cause 1xstart+1xend notification")
	language ecmascript;
	async;
{
	var video = document.getElementById('vid');
	navigator.getUserMedia({video: true},
		function(stream) {
			video.src = stream;
			video.oncanplay = function(){
				video.play();
				video.parentNode.removeChild(video);
				opera.collect();
				ST_passed();
			}
		},
		function(err) {
			ST_failed("Failed to obtain camera access: " + err.message + "(" + err.code + ")", "", "");
		}
	);
}

test("test9.2 getUserMedia + play + delete video node should cause 1xstart+1xend notification")
	require success "test9.1 getUserMedia + play + delete video node should cause 1xstart+1xend notification";
	delay pre 1; // give Opera some time to run garbage collector.
{
	verify(!g_test_document_listener.m_is_oom);

	verify(g_test_document_listener.m_start_called.GetCount() == 1);
	verify(g_test_document_listener.m_end_called.GetCount() == 1);
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid"></video>
//! </body>
//! </html>
}

test("test9.cleanup getUserMedia + play + delete video node should cause 1xstart+1xend notification")
{
	g_test_document_listener.Reset()
}

/////////////// test10 getUserMedia + play + video.src = null should cause 1xstart+1xend notification ///////////////

test("test10.1 getUserMedia + play + video.src = null should cause 1xstart+1xend notification")
	language ecmascript;
	async;
{
	var video = document.getElementById('vid');
	navigator.getUserMedia({video: true},
		function(stream) {
			video.src = stream;
			video.oncanplay = function(){
				video.play();
				video.src = null;
				ST_passed();
			}
		},
		function(err) {
			ST_failed("Failed to obtain camera access: " + err.message + "(" + err.code + ")", "", "");
		}
	);
}

test("test10.2 getUserMedia + play + video.src = null should cause 1xstart+1xend notification")
	require success "test10.1 getUserMedia + play + video.src = null should cause 1xstart+1xend notification";
{
	verify(!g_test_document_listener.m_is_oom);

	verify(g_test_document_listener.m_start_called.GetCount() == 1);
	verify(g_test_document_listener.m_end_called.GetCount() == 1);
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid" autoplay="true"></video>
//! </body>
//! </html>
}

test("test10.cleanup getUserMedia + play + video.src = null should cause 1xstart+1xend notification")
{
	g_test_document_listener.Reset()
}

/////////////// test11 getUserMedia + autoplay + set video.src=stream should cause 1xstart notification ///////////////

test("test11.1 getUserMedia + autoplay + set video.src=stream should cause 1xstart notification")
	language ecmascript;
	async;
{
	var video = document.getElementById('vid');
	navigator.getUserMedia({video: true},
		function(stream) {
			video.src = stream;
			video.oncanplay = function(){
				ST_passed();
			}
		},
		function(err) {
			ST_failed("Failed to obtain camera access: " + err.message + "(" + err.code + ")", "", "");
		}
	);
}

test("test11.2 getUserMedia + autoplay + set video.src=stream should cause 1xstart notification")
	require success "test11.1 getUserMedia + autoplay + set video.src=stream should cause 1xstart notification";
{
	verify(!g_test_document_listener.m_is_oom);

	verify(g_test_document_listener.m_start_called.GetCount() == 1);
	verify(g_test_document_listener.m_end_called.GetCount() == 0);
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid"></video>
//! </body>
//! </html>
}

test("test11.cleanup getUserMedia + autoplay + set video.src=stream should cause 1xstart notification")
{
	g_test_document_listener.Reset()
}

/////////////// test12 getUserMedia + play + revoke permission should cause 1xstart+1xend notification ///////////////

test("test12.1 getUserMedia + play + revoke permission should cause 1xstart+1xend notification")
	require WIC_SET_PERMISSION;
	language ecmascript;
	async;
{
	var video = document.getElementById('vid');
	navigator.getUserMedia({video: true},
		function(stream) {
			video.src = stream;
			video.oncanplay = function(){
				video.play();
				ST_passed();
			}
		},
		function(err) {
			ST_failed("Failed to obtain camera access: " + err.message + "(" + err.code + ")", "", "");
		}
	);
}

test("test12.2 getUserMedia + play + revoke permission should cause 1xstart+1xend notification")
	require WIC_SET_PERMISSION;
	require success "test12.1 getUserMedia + play + revoke permission should cause 1xstart+1xend notification";
{
	verify(!g_test_document_listener.m_is_oom);

	verify(g_test_document_listener.m_start_called.GetCount() == 1);
	verify(g_test_document_listener.m_end_called.GetCount() == 0);
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());

	g_test_permission_listener.RevokePermission();

	verify(g_test_document_listener.m_start_called.GetCount() == 1);
	verify(g_test_document_listener.m_end_called.GetCount() == 1);
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
	verify(g_test_document_listener.m_end_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid"></video>
//! </body>
//! </html>
}

test("test12.cleanup getUserMedia + play + revoke permission should cause 1xstart+1xend notification")
	require WIC_SET_PERMISSION;
{
	g_test_document_listener.Reset()
}

/////////////// test13 getUserMedia + play + move to a different location should cause 1xstart+1xend notification ///////////////

test("test13.1 getUserMedia + play + move to a different location should cause 1xstart+1xend notification")
	language ecmascript;
	async;
{
	var video = document.getElementById('vid');
	navigator.getUserMedia({video: true},
		function(stream) {
			video.src = stream;
			video.oncanplay = function(){
				video.play();
				window.location = "opera:blanker";
				ST_passed();
			}
		},
		function(err) {
			ST_failed("Failed to obtain camera access: " + err.message + "(" + err.code + ")", "", "");
		}
	);
}

test("test13.2 getUserMedia + play + move to a different location should cause 1xstart+1xend notification")
	require success "test13.1 getUserMedia + play + move to a different location should cause 1xstart+1xend notification";
{
	verify(!g_test_document_listener.m_is_oom);

	verify(g_test_document_listener.m_start_called.GetCount() == 1);
	verify(g_test_document_listener.m_end_called.GetCount() == 1);
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
	verify(g_test_document_listener.m_end_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! </body>
//! </html>
}

test("test13.cleanup getUserMedia + play + move to a different location should cause 1xstart+1xend notification")
{
	g_test_document_listener.Reset()
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid"></video>
//! </body>
//! </html>
}

test("test13.cleanup getUserMedia + play + move to a different location should cause 1xstart+1xend notification")
{
	g_test_document_listener.Reset()
}

/////////////// test14 getUserMedia + play + go back in history should cause 1xstart+1xend notification ///////////////

test("test14.1 getUserMedia + play + go back in history should cause 1xstart+1xend notification")
	language ecmascript;
	async;
{
	var video = document.getElementById('vid');
	navigator.getUserMedia({video: true},
		function(stream) {
			video.src = stream;
			video.oncanplay = function(){
				video.play();
				history.go(-1);
				ST_passed();
			}
		},
		function(err) {
			ST_failed("Failed to obtain camera access: " + err.message + "(" + err.code + ")", "", "");
		}
	);
}

test("test14.2 getUserMedia + play + go back in history should cause 1xstart+1xend notification")
	require success "test14.1 getUserMedia + play + go back in history should cause 1xstart+1xend notification";
{
	verify(!g_test_document_listener.m_is_oom);

	verify(g_test_document_listener.m_start_called.GetCount() == 1);
	verify(g_test_document_listener.m_end_called.GetCount() == 1);
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
	verify(g_test_document_listener.m_end_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid"></video>
//! </body>
//! </html>
}

test("test14.cleanup getUserMedia + play + go back in history should cause 1xstart+1xend notification")
{
	g_test_document_listener.Reset()
}

/////////////// test15 getUserMedia + play + go forward in history should cause 1xstart+1xend notification ///////////////

//// go to next page
//html {
////! <html>
////! <script>
////! </script>
////! <body>
////! <video id="vid"></video>
////! </body>
////! </html>
//}


test("test15.01 getUserMedia + play + go forward in history should cause 1xstart+1xend notification")
	language ecmascript;
{
	window.location = "opera:blanker"
}

test("test15.02 getUserMedia + play + go forward in history should cause 1xstart+1xend notification")
	language ecmascript;
	require success "test15.01 getUserMedia + play + go forward in history should cause 1xstart+1xend notification";
{
	history.go(-1);
}

test("test15.1 getUserMedia + play + go forward in history should cause 1xstart+1xend notification")
	language ecmascript;
	async;
	require success "test15.02 getUserMedia + play + go forward in history should cause 1xstart+1xend notification";
{
	var video = document.getElementById('vid');
	navigator.getUserMedia({video: true},
		function(stream) {
			video.src = stream;
			video.oncanplay = function(){
				video.play();
				history.go(1);
				ST_passed();
			}
		},
		function(err) {
			ST_failed("Failed to obtain camera access: " + err.message + "(" + err.code + ")", "", "");
		}
	);
}

test("test15.1 getUserMedia + play + go forward in history should cause 1xstart+1xend notification")
	require success "test15.1 getUserMedia + play + go forward in history should cause 1xstart+1xend notification";
{
	verify(!g_test_document_listener.m_is_oom);

	verify(g_test_document_listener.m_start_called.GetCount() == 1);
	verify(g_test_document_listener.m_end_called.GetCount() == 1);
	verify(g_test_document_listener.m_start_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
	verify(g_test_document_listener.m_end_called.Get(0)->wc == state.GetWindow()->GetWindowCommander());
}

html {
//! <html>
//! <script>
//! </script>
//! <body>
//! <video id="vid"></video>
//! </body>
//! </html>
}

test("test15.cleanup getUserMedia + play + go forward in history should cause 1xstart+1xend notification")
{
	g_test_document_listener.Reset()
}

