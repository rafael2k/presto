// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
group "DOM.Save.LSSerializer";
require init;
require DOM3_SAVE;

language ecmascript;

html
{
	"<html><body></body></html>"
}

test("write - unsupported systemId")
{
	// Only supports http urls
	var output = document.implementation.createLSOutput();
	verify(output);
	output.systemId = "data:text/html,<h1>Hi</h1>";
	var serializer = document.implementation.createLSSerializer();
	verify(serializer);
    try
    {
		serializer.write(document.body, output);
		verify(!"serializer.write should have thrown an exception but didn't");
    }
	catch (e)
    {
		// Check that the exception is of the right type
    }
}

test("write - no output details")
{
	// Need to set one of the fields inside the output object
	var output = document.implementation.createLSOutput();
	verify(output);
	var serializer = document.implementation.createLSSerializer();
	verify(serializer);
    try
    {
		serializer.write(document.body, output);
		verify(!"serializer.write should have thrown an exception but didn't");
    }
	catch (e)
    {
		// Check that the exception is of the right type
    }
}

test("write - null output object")
{
	// Need an output object
	var output = null;
	var serializer = document.implementation.createLSSerializer();
	verify(serializer);
    try
    {
		serializer.write(document.body, output);
		verify(!"serializer.write should have thrown an exception but didn't");
    }
	catch (e)
    {
		// Check that the exception is of the right type
    }
}

test("write - undefined output object")
{
	// Need an output object
	var output = undefined;
	var serializer = document.implementation.createLSSerializer();
	verify(serializer);
    try
    {
		serializer.write(document.body, output);
		verify(!"serializer.write should have thrown an exception but didn't");
    }
	catch (e)
    {
		// Check that the exception is of the right type
    }
}

test("write - number output object")
{
	var output = 34;
	var serializer = document.implementation.createLSSerializer();
	verify(serializer);
    try
    {
		serializer.write(document.body, output);
		verify(!"serializer.write should have thrown an exception but didn't");
    }
	catch (e)
    {
		// Check that the exception is of the right type
    }
}

test("write - boolean output object")
{
	var output = false;
	var serializer = document.implementation.createLSSerializer();
	verify(serializer);
    try
    {
		serializer.write(document.body, output);
		verify(!"serializer.write should have thrown an exception but didn't");
    }
	catch (e)
    {
		// Check that the exception is of the right type
    }
}

test("write - regexp output object")
{
	var output = /.*/;
	var serializer = document.implementation.createLSSerializer();
	verify(serializer);
    try
    {
		serializer.write(document.body, output);
		verify(!"serializer.write should have thrown an exception but didn't");
    }
	catch (e)
    {
		// Check that the exception is of the right type
    }
}

test("write - string output object")
{
	var output = "nujj";
	var serializer = document.implementation.createLSSerializer();
	verify(serializer);
    try
    {
		serializer.write(document.body, output);
		verify(!"serializer.write should have thrown an exception but didn't");
    }
	catch (e)
    {
		// Check that the exception is of the right type
    }
}

test("writeToString - simple document")
{
	// Only supports http urls
	var serializer = document.implementation.createLSSerializer();
	verify(serializer);
	var string = serializer.writeToString(document);
	verify(string);
	verify(string == "<?xml version=\"1.0\"?><html><head/><body/></html>");
}
