// -*- Mode: c++; indent-tabs-mode: nil; c-basic-offset: 2 -*-
group "DOM.WebSockets";
require init;
require WEBSOCKETS_SUPPORT;

language ecmascript;

html "";

test("Constructor")
{
  verify("WebSocket" in window);
  verify(WebSocket.prototype);
  verify(WebSocket.prototype.constructor);
  verify(WebSocket.prototype.constructor === WebSocket);
}

test("Constants")
{
  verify("WebSocket" in window);

  verify("CONNECTING" in WebSocket);
  verify("OPEN" in WebSocket);
  verify("CLOSING" in WebSocket);
  verify("CLOSED" in WebSocket);

  verify(WebSocket.CONNECTING === 0);
  verify(WebSocket.OPEN === 1);
  verify(WebSocket.CLOSING === 2);
  verify(WebSocket.CLOSED === 3);

  WebSocket.OPEN === 5;
  verify(WebSocket.OPEN === 1);

  WebSocket.CONNECTING === "6";
  verify(WebSocket.CONNECTING === 0);

  WebSocket.CLOSED === 0;
  verify(WebSocket.CLOSED === 3);
}

test("Prototype")
{
  verify("WebSocket" in window);
  verify(WebSocket.prototype);
  var p = WebSocket.prototype;

  verify("close" in p);
  verify("send" in p);

  verify("dispatchEvent" in p);
  verify("addEventListener" in p);
  verify("removeEventListener" in p);
}

test("Instance #1")
{
  verify("WebSocket" in window);
  var ws = null;
  try {
    ws = new WebSocket("ws://127.0.0.1/foo",[]);
  } catch (e) {;}
  verify(ws != null);
  verify(ws.toString() == "[object WebSocket]");

  verify("close" in ws);
  verify("send" in ws);

  verify("dispatchEvent" in ws);
  verify("addEventListener" in ws);
  verify("removeEventListener" in ws);

  verify("url" in ws);
  verify("readyState" in ws);
  verify("onopen" in ws);
  verify("onerror" in ws);
  verify("onclose" in ws);
  verify("onmessage" in ws);

  verify("extensions" in ws);
  verify("protocol" in ws);

  verify("binaryType" in ws);
}

test("Instance #2")
{
  verify("WebSocket" in window);
  var ws = null;
  try {
    ws = new WebSocket("ws://127.0.0.1/foo","a");
  } catch (e) {;}
  verify(ws != null);
}

test("Instance #3")
{
  verify("WebSocket" in window);
  var ws = null;
  try {
    ws = new WebSocket("ws://127.0.0.1/foo",[2]);
  } catch (e) {;}
  verify(ws != null);
}

test("Instance #4")
{
  verify("WebSocket" in window);
  var ws = null;
  try {
    ws = new WebSocket("ws://127.0.0.1/foo",["a", "b"]);
  } catch (e) {;}
  verify(ws != null);
}

test("Instance #5")
{
  verify("WebSocket" in window);
  var ws = null;
  try {
    ws = new WebSocket("ws://127.0.0.1/foo",["a", "a"]);
    verify(!"Duplicate protocols must throw SYNTAX_ERR, but did not");
  } catch (e) {
    verify(e.code == DOMException.SYNTAX_ERR);
  }
}

test("Instance #6")
{
  verify("WebSocket" in window);
  var ws = null;
  try {
    ws = new WebSocket("ws://127.0.0.1/foo","a");
    verify(ws.binaryType === "blob");
  } catch (e) {;}
}

test("Instance #7")
{
  verify("WebSocket" in window);
  var ws = null;
  try {
    ws = new WebSocket("ws://127.0.0.1/foo","a\u0000b");
    verify(!"Should have thrown on being passed invalid sub-protocol");
  } catch (e) {
    verify(e instanceof DOMException);
  }
}

test("Instance #8")
{
  verify("WebSocket" in window);
  var ws = null;
  try {
    ws = new WebSocket("ws://127.0.0.1/foo",["", "a\u0000b", "\u0000he"]);
    verify(!"Should have thrown on being passed invalid sub-protocol");
  } catch (e) {
    verify(e instanceof DOMException);
  }
}

test("Instance #9")
{
  verify("WebSocket" in window);
  var ws = null;
  try {
    ws = new WebSocket("ws://127.0.0.1/foo",["a",,"b"]);
    verify(!"Should have thrown on being passed an array with a hole");
  } catch (e) {
    verify(e instanceof DOMException);
  }
}

test("send #1")
{
  verify("WebSocket" in window);
  var ws = null;
  try {
    ws = new WebSocket("ws://127.0.0.1/foo","a");
    ws.send("aa\u0000bb");
  } catch (e) {;}
}

test("Constructor (web workers)")
  async;
  require DOM_WEBWORKERS_SUPPORT;
{
  var stuff = #string "input/worker.js";
  var url = 'data:text/javascript,' + stuff;
  var w = new Worker(url);

  var expected = [true, true, true, true];

  w.onmessage = function (e) {
    var passed = true;
    try {
      for (var i = 0; i < expected.length; i++)
        if (expected[i] != e.data[i])
          passed = false;
    } catch (e) {
      passed = false;
    }

    if (passed)
      ST_passed();
    else
      ST_failed("e.data was '" + e.data + "', expected '" + expected + "'", "websockets.ot", 1);
    try { w.terminate(); } catch(e){};
  }

  w.onerror = function (e) {
    ST_failed("Exception raised: " + e.message, "websockets.ot", 1);
    try { w.terminate(); } catch(e){};
  }
}

test("Prototype (web workers)")
  async;
  require DOM_WEBWORKERS_SUPPORT;
{
  var stuff = #string "input/prototype.js";
  var url = 'data:text/javascript,' + stuff;
  var w = new Worker(url);

  var expected = [true, true, true, true];

  w.onmessage = function (e) {
    var passed = true;
    try {
      for (var i = 0; i < e.data.length; i++)
        if (e.data[i] !== true)
          passed = false;
    } catch (e) {
      passed = false;
    }

    if (passed)
      ST_passed();
    else
      ST_failed("e.data was '" + e.data + "', expected '" + expected + "'", "websockets.ot", 1);
    try { w.terminate(); } catch(e){};
  }

  w.onerror = function(e) {
    ST_failed("Exception raised: " + e.message, "websockets.ot", 1);
    try { w.terminate(); } catch(e){};
  }
}
