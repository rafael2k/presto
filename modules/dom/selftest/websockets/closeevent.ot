// -*- Mode: c++; indent-tabs-mode: nil; c-basic-offset: 2 -*-
group "DOM.WebSockets.CloseEvent";
require init;
require WEBSOCKETS_SUPPORT;

language ecmascript;

html "";

test("Constructor")
{
  verify("CloseEvent" in window);
  verify(CloseEvent.prototype);
  verify(CloseEvent.prototype.constructor);
  verify(CloseEvent.prototype.constructor === CloseEvent);
}

test("Prototype")
{
  verify("CloseEvent" in window);
  verify(CloseEvent.prototype);
  var p = CloseEvent.prototype;

  verify("stopPropagation" in p);
  verify("preventDefault" in p);
  verify("initEvent" in p);
}

test("Instance #1")
{
  verify("CloseEvent" in window);
  var close = null;
  try {
    close = new CloseEvent("close");
    verify("type" in close);
    verify("cancelable" in close);
    verify("bubbles" in close);
    verify("target" in close);
    verify("currentTarget" in close);
    verify("defaultPrevented" in close);
    verify("isTrusted" in close);
    verify("wasClean" in close);
    verify("code" in close);
    verify("reason" in close);
    verify(close.type === "close");
    verify(close.reason === "");
    verify(close.code === 0);
    verify(close.wasClean === false);
    verify(close.isTrusted === false);
  } catch (e) {
    verify(close);
  }
}

test("Instance #2")
{
  verify("CloseEvent" in window);
  var close = null;
  try {
    close = new CloseEvent("close", {cancelable: false, code: 22, wasClean: true, reason: "none"});
    verify(close.reason === "none");
    verify(close.code === 22);
    verify(close.wasClean === true);
    verify(close.isTrusted === false);
  } catch (e) {
    verify(close);
  }
}

test("Instance #3")
{
  verify("CloseEvent" in window);
  var close = null;
  try {
    close = new CloseEvent("close", {cancelable: false, code: 65537.2, wasClean: true, reason: 2});
    verify(close.reason === "2");
    verify(close.code === 1);
    verify(close.wasClean === true);
    verify(close.isTrusted === false);
  } catch (e) {
    verify(close);
  }
}

test("Instance #4 (web workers)")
  async;
  require DOM_WEBWORKERS_SUPPORT;
{
    var stuff = #string "input/close.js";
    var url = 'data:text/javascript,' + stuff;
    var w = new Worker(url);

    var expected = [true, true, true, true];

    function onMessage(e)
    {
      var passed = true;
      try {
        for (var i = 0; i < e.data.length; i++)
          if (e.data[i] !== true)
            passed = false;
      } catch (e) {
        passed = false;
      }

      if (passed)
        ST_passed();
      else
        ST_failed("e.data was '" + e.data + "', expected '" + expected + "'", "closeevent.ot", 1);
      try { w.terminate(); } catch(e){};
    }

    function onError(e)
    {
        ST_failed("Exception raised: " + e.message, "closeevent.ot", 1);
        try { w.terminate(); } catch(e){};
    }

    w.onmessage = onMessage;
    w.onerror = onError;
}
