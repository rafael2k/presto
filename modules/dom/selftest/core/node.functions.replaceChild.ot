group "DOM.Core.Node.functions.replaceChild";
require init;

language ecmascript;

// --------------------------------------------------------------------
// div.replaceChild with no other children

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild #1")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var div3 = document.createElement("DIV");
  verify(div3 && div3.nodeName == "DIV");

  verify(div1.replaceChild(div3, div2) == div2);

  verify(div1.firstChild == div3);
  verify(div1.lastChild == div3);
  verify(div2.parentNode == null);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == null);
  verify(div3.parentNode == div1);
  verify(div3.previousSibling == null);
  verify(div3.nextSibling == null);
}

// --------------------------------------------------------------------
// div.replaceChild with other children

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild #2")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var div3 = div1.lastChild;
  verify(div3 && div3.nodeName == "DIV");

  var div4 = document.createElement("DIV");
  verify(div4 && div4.nodeName == "DIV");

  verify(div1.replaceChild(div4, div2) == div2);

  verify(div1.firstChild == div4);
  verify(div1.lastChild == div3);
  verify(div2.parentNode == null);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == null);
  verify(div3.parentNode == div1);
  verify(div3.previousSibling == div4);
  verify(div3.nextSibling == null);
  verify(div4.parentNode == div1);
  verify(div4.previousSibling == null);
  verify(div4.nextSibling == div3);
}

// --------------------------------------------------------------------
// div.replaceChild with other children

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild #3")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var div3 = div1.lastChild;
  verify(div3 && div3.nodeName == "DIV");

  var div4 = document.createElement("DIV");
  verify(div4 && div4.nodeName == "DIV");

  verify(div1.replaceChild(div4, div3) == div3);

  verify(div1.firstChild == div2);
  verify(div1.lastChild == div4);
  verify(div2.parentNode == div1);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == div4);
  verify(div3.parentNode == null);
  verify(div3.previousSibling == null);
  verify(div3.nextSibling == null);
  verify(div4.parentNode == div1);
  verify(div4.previousSibling == div2);
  verify(div4.nextSibling == null);
}

// --------------------------------------------------------------------
// div.replaceChild with other children

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
        "<div></div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild #4")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.childNodes.item(0);
  verify(div2 && div2.nodeName == "DIV");

  var div3 = div1.childNodes.item(1);
  verify(div3 && div3.nodeName == "DIV");

  var div4 = div1.childNodes.item(2);
  verify(div4 && div4.nodeName == "DIV");

  var div5 = document.createElement("DIV");
  verify(div5 && div5.nodeName == "DIV");

  verify(div1.replaceChild(div5, div3) == div3);

  verify(div1.childNodes.item(0) == div2);
  verify(div1.childNodes.item(1) == div5);
  verify(div1.childNodes.item(2) == div4);
  verify(div2.parentNode == div1);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == div5);
  verify(div3.parentNode == null);
  verify(div3.previousSibling == null);
  verify(div3.nextSibling == null);
  verify(div4.parentNode == div1);
  verify(div4.previousSibling == div5);
  verify(div4.nextSibling == null);
  verify(div5.parentNode == div1);
  verify(div5.previousSibling == div2);
  verify(div5.nextSibling == div4);
}

// --------------------------------------------------------------------
// div.replaceChild removing newChild first

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
      "<div></div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild #5")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var div3 = div1.nextSibling;
  verify(div3 && div3.nodeName == "DIV");

  verify(div1.replaceChild(div3, div2) == div2);

  verify(div1.firstChild == div3);
  verify(div1.lastChild == div3);
  verify(div2.parentNode == null);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == null);
  verify(div3.parentNode == div1);
  verify(div3.previousSibling == null);
  verify(div3.nextSibling == null);
}

// --------------------------------------------------------------------
// docfrag.replaceChild with no other children

test("Call: Node.replaceChild #6")
{
  var docfrag = document.createDocumentFragment();
  verify(docfrag && docfrag.nodeName == "#document-fragment");

  var div1 = document.createElement("DIV");
  verify(div1 && div1.nodeName == "DIV");
  verify(docfrag.appendChild(div1) == div1);
  verify(docfrag.firstChild == div1);
  verify(docfrag.lastChild == div1);
  verify(div1.parentNode == docfrag);

  var div2 = document.createElement("DIV");
  verify(div2 && div2.nodeName == "DIV");

  verify(docfrag.replaceChild(div2, div1) == div1);

  verify(docfrag.firstChild == div2);
  verify(docfrag.lastChild == div2);
  verify(div1.parentNode == null);
  verify(div1.previousSibling == null);
  verify(div1.nextSibling == null);
  verify(div2.parentNode == docfrag);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == null);
}

// --------------------------------------------------------------------
// docfrag.replaceChild with other children

test("Call: Node.replaceChild #7")
{
  var docfrag = document.createDocumentFragment();
  verify(docfrag && docfrag.nodeName == "#document-fragment");

  var div1 = document.createElement("DIV");
  verify(div1 && div1.nodeName == "DIV");
  verify(docfrag.appendChild(div1) == div1);
  verify(docfrag.firstChild == div1);
  verify(docfrag.lastChild == div1);
  verify(div1.parentNode == docfrag);

  var div2 = document.createElement("DIV");
  verify(div2 && div2.nodeName == "DIV");
  verify(docfrag.appendChild(div2) == div2);
  verify(docfrag.firstChild == div1);
  verify(docfrag.lastChild == div2);
  verify(div2.parentNode == docfrag);

  var div3 = document.createElement("DIV");
  verify(div3 && div3.nodeName == "DIV");

  verify(docfrag.replaceChild(div3, div1) == div1);

  verify(docfrag.firstChild == div3);
  verify(docfrag.lastChild == div2);
  verify(div1.parentNode == null);
  verify(div1.previousSibling == null);
  verify(div1.nextSibling == null);
  verify(div2.parentNode == docfrag);
  verify(div2.previousSibling == div3);
  verify(div2.nextSibling == null);
  verify(div3.parentNode == docfrag);
  verify(div3.previousSibling == null);
  verify(div3.nextSibling == div2);
}

// --------------------------------------------------------------------
// docfrag.replaceChild with other children

test("Call: Node.replaceChild #8")
{
  var docfrag = document.createDocumentFragment();
  verify(docfrag && docfrag.nodeName == "#document-fragment");

  var div1 = document.createElement("DIV");
  verify(div1 && div1.nodeName == "DIV");
  verify(docfrag.appendChild(div1) == div1);
  verify(docfrag.firstChild == div1);
  verify(docfrag.lastChild == div1);
  verify(div1.parentNode == docfrag);

  var div2 = document.createElement("DIV");
  verify(div2 && div2.nodeName == "DIV");
  verify(docfrag.appendChild(div2) == div2);
  verify(docfrag.firstChild == div1);
  verify(docfrag.lastChild == div2);
  verify(div2.parentNode == docfrag);

  var div3 = document.createElement("DIV");
  verify(div3 && div3.nodeName == "DIV");

  verify(docfrag.replaceChild(div3, div2) == div2);

  verify(docfrag.firstChild == div1);
  verify(docfrag.lastChild == div3);
  verify(div1.parentNode == docfrag);
  verify(div1.previousSibling == null);
  verify(div1.nextSibling == div3);
  verify(div2.parentNode == null);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == null);
  verify(div3.parentNode == docfrag);
  verify(div3.previousSibling == div1);
  verify(div3.nextSibling == null);
}

// --------------------------------------------------------------------
// docfrag.replaceChild with other children

test("Call: Node.replaceChild #9")
{
  var docfrag = document.createDocumentFragment();
  verify(docfrag && docfrag.nodeName == "#document-fragment");

  var div1 = document.createElement("DIV");
  verify(div1 && div1.nodeName == "DIV");
  verify(docfrag.appendChild(div1) == div1);
  verify(docfrag.firstChild == div1);
  verify(docfrag.lastChild == div1);
  verify(div1.parentNode == docfrag);

  var div2 = document.createElement("DIV");
  verify(div2 && div2.nodeName == "DIV");
  verify(docfrag.appendChild(div2) == div2);
  verify(docfrag.firstChild == div1);
  verify(docfrag.lastChild == div2);
  verify(div2.parentNode == docfrag);

  var div3 = document.createElement("DIV");
  verify(div3 && div3.nodeName == "DIV");
  verify(docfrag.appendChild(div3) == div3);
  verify(docfrag.firstChild == div1);
  verify(docfrag.lastChild == div3);
  verify(div3.parentNode == docfrag);

  var div4 = document.createElement("DIV");
  verify(div4 && div4.nodeName == "DIV");

  verify(docfrag.replaceChild(div4, div2) == div2);

  verify(docfrag.childNodes.item(0) == div1);
  verify(docfrag.childNodes.item(1) == div4);
  verify(docfrag.childNodes.item(2) == div3);
  verify(div1.parentNode == docfrag);
  verify(div1.previousSibling == null);
  verify(div1.nextSibling == div4);
  verify(div2.parentNode == null);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == null);
  verify(div3.parentNode == docfrag);
  verify(div3.previousSibling == div4);
  verify(div3.nextSibling == null);
  verify(div4.parentNode == docfrag);
  verify(div4.previousSibling == div1);
  verify(div4.nextSibling == div3);
}

// --------------------------------------------------------------------
// docfrag.replaceChild removing newChild first

test("Call: Node.replaceChild #10")
{
  var docfrag = document.createDocumentFragment();
  verify(docfrag && docfrag.nodeName == "#document-fragment");

  var div1 = document.createElement("DIV");
  verify(div1 && div1.nodeName == "DIV");
  verify(docfrag.appendChild(div1) == div1);
  verify(docfrag.firstChild == div1);
  verify(docfrag.lastChild == div1);
  verify(div1.parentNode == docfrag);

  var div2 = document.createElement("DIV");
  verify(div2 && div2.nodeName == "DIV");
  verify(docfrag.appendChild(div2) == div2);
  verify(docfrag.firstChild == div1);
  verify(docfrag.lastChild == div2);
  verify(div2.parentNode == docfrag);

  verify(docfrag.replaceChild(div2, div1) == div1);

  verify(docfrag.firstChild == div2);
  verify(docfrag.lastChild == div2);
  verify(div1.parentNode == null);
  verify(div1.previousSibling == null);
  verify(div1.nextSibling == null);
  verify(div2.parentNode == docfrag);
  verify(div2.firstChild == null);
  verify(div2.lastChild == null);
}

// --------------------------------------------------------------------
// div.replaceChild(docfrag) empty docfrag

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild #11")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var docfrag = document.createDocumentFragment();
  verify(docfrag && docfrag.nodeName == "#document-fragment");

  verify(div1.replaceChild(docfrag, div2) == div2);

  verify(docfrag.firstChild == null);
  verify(docfrag.lastChild == null);
  verify(docfrag.parentNode == null);
  verify(div1.firstChild == null);
  verify(div1.lastChild == null);
}

// --------------------------------------------------------------------
// div.replaceChild(docfrag) empty docfrag

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild #12")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var div3 = div1.lastChild;
  verify(div3 && div3.nodeName == "DIV");

  var docfrag = document.createDocumentFragment();
  verify(docfrag && docfrag.nodeName == "#document-fragment");

  verify(div1.replaceChild(docfrag, div2) == div2);

  verify(docfrag.firstChild == null);
  verify(docfrag.lastChild == null);
  verify(docfrag.parentNode == null);
  verify(div1.firstChild == div3);
  verify(div1.lastChild == div3);
  verify(div2.parentNode == null);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == null);
  verify(div3.parentNode == div1);
  verify(div3.previousSibling == null);
  verify(div3.nextSibling == null);
}

// --------------------------------------------------------------------
// div.replaceChild(docfrag) empty docfrag

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild #13")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var div3 = div1.lastChild;
  verify(div3 && div3.nodeName == "DIV");

  var docfrag = document.createDocumentFragment();
  verify(docfrag && docfrag.nodeName == "#document-fragment");

  verify(div1.replaceChild(docfrag, div3) == div3);

  verify(docfrag.firstChild == null);
  verify(docfrag.lastChild == null);
  verify(docfrag.parentNode == null);
  verify(div1.firstChild == div2);
  verify(div1.lastChild == div2);
  verify(div2.parentNode == div1);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == null);
  verify(div3.parentNode == null);
  verify(div3.previousSibling == null);
  verify(div3.nextSibling == null);
}

// --------------------------------------------------------------------
// div.replaceChild(docfrag) empty docfrag

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
        "<div></div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild #14")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.childNodes.item(0);
  verify(div2 && div2.nodeName == "DIV");

  var div3 = div1.childNodes.item(1);
  verify(div3 && div3.nodeName == "DIV");

  var div4 = div1.childNodes.item(2);
  verify(div4 && div4.nodeName == "DIV");

  var docfrag = document.createDocumentFragment();
  verify(docfrag && docfrag.nodeName == "#document-fragment");

  verify(div1.replaceChild(docfrag, div3) == div3);

  verify(docfrag.firstChild == null);
  verify(docfrag.lastChild == null);
  verify(docfrag.parentNode == null);
  verify(div1.firstChild == div2);
  verify(div1.lastChild == div4);
  verify(div2.parentNode == div1);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == div4);
  verify(div3.parentNode == null);
  verify(div3.previousSibling == null);
  verify(div3.nextSibling == null);
  verify(div4.parentNode == div1);
  verify(div4.previousSibling == div2);
  verify(div4.nextSibling == null);
}

// --------------------------------------------------------------------
// div.replaceChild(docfrag) with no other children

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild #15")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var docfrag = document.createDocumentFragment();
  verify(docfrag && docfrag.nodeName == "#document-fragment");

  var div3 = document.createElement("DIV");
  verify(div3 && div3.nodeName == "DIV");
  verify(docfrag.appendChild(div3) == div3);
  verify(docfrag.firstChild == div3);
  verify(docfrag.lastChild == div3);
  verify(div3.parentNode == docfrag);

  verify(div1.replaceChild(docfrag, div2) == div2);

  verify(docfrag.firstChild == null);
  verify(docfrag.lastChild == null);
  verify(docfrag.parentNode == null);
  verify(div1.firstChild == div3);
  verify(div1.lastChild == div3);
  verify(div2.parentNode == null);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == null);
  verify(div3.parentNode == div1);
  verify(div3.previousSibling == null);
  verify(div3.nextSibling == null);
}

// --------------------------------------------------------------------
// div.replaceChild(docfrag) with no other children

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild #16")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var docfrag = document.createDocumentFragment();
  verify(docfrag && docfrag.nodeName == "#document-fragment");

  var div3 = document.createElement("DIV");
  verify(div3 && div3.nodeName == "DIV");
  verify(docfrag.appendChild(div3) == div3);
  verify(docfrag.firstChild == div3);
  verify(docfrag.lastChild == div3);
  verify(div3.parentNode == docfrag);

  var div4 = document.createElement("DIV");
  verify(div4 && div4.nodeName == "DIV");
  verify(docfrag.appendChild(div4) == div4);
  verify(docfrag.firstChild == div3);
  verify(docfrag.lastChild == div4);
  verify(div3.parentNode == docfrag);

  verify(div1.replaceChild(docfrag, div2) == div2);

  verify(docfrag.firstChild == null);
  verify(docfrag.lastChild == null);
  verify(docfrag.parentNode == null);
  verify(div1.firstChild == div3);
  verify(div1.lastChild == div4);
  verify(div2.parentNode == null);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == null);
  verify(div3.parentNode == div1);
  verify(div3.previousSibling == null);
  verify(div3.nextSibling == div4);
  verify(div4.parentNode == div1);
  verify(div4.previousSibling == div3);
  verify(div4.nextSibling == null);
}

// --------------------------------------------------------------------
// div.replaceChild(docfrag) with other children

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild #17")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var div3 = div1.lastChild;
  verify(div3 && div3.nodeName == "DIV");

  var docfrag = document.createDocumentFragment();
  verify(docfrag && docfrag.nodeName == "#document-fragment");

  var div4 = document.createElement("DIV");
  verify(div4 && div4.nodeName == "DIV");
  verify(docfrag.appendChild(div4) == div4);
  verify(docfrag.firstChild == div4);
  verify(docfrag.lastChild == div4);
  verify(div4.parentNode == docfrag);

  verify(div1.replaceChild(docfrag, div2) == div2);

  verify(docfrag.firstChild == null);
  verify(docfrag.lastChild == null);
  verify(docfrag.parentNode == null);
  verify(div1.firstChild == div4);
  verify(div1.lastChild == div3);
  verify(div2.parentNode == null);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == null);
  verify(div3.parentNode == div1);
  verify(div3.previousSibling == div4);
  verify(div3.nextSibling == null);
  verify(div4.parentNode == div1);
  verify(div4.previousSibling == null);
  verify(div4.nextSibling == div3);
}

// --------------------------------------------------------------------
// div.replaceChild(docfrag) with other children

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild #18")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var div3 = div1.lastChild;
  verify(div3 && div3.nodeName == "DIV");

  var docfrag = document.createDocumentFragment();
  verify(docfrag && docfrag.nodeName == "#document-fragment");

  var div4 = document.createElement("DIV");
  verify(div4 && div4.nodeName == "DIV");
  verify(docfrag.appendChild(div4) == div4);
  verify(docfrag.firstChild == div4);
  verify(docfrag.lastChild == div4);
  verify(div4.parentNode == docfrag);

  verify(div1.replaceChild(docfrag, div3) == div3);

  verify(docfrag.firstChild == null);
  verify(docfrag.lastChild == null);
  verify(docfrag.parentNode == null);
  verify(div1.firstChild == div2);
  verify(div1.lastChild == div4);
  verify(div2.parentNode == div1);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == div4);
  verify(div3.parentNode == null);
  verify(div3.previousSibling == null);
  verify(div3.nextSibling == null);
  verify(div4.parentNode == div1);
  verify(div4.previousSibling == div2);
  verify(div4.nextSibling == null);
}

// --------------------------------------------------------------------
// div.replaceChild(docfrag) with other children

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
        "<div></div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild #19")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.childNodes.item(0);
  verify(div2 && div2.nodeName == "DIV");

  var div3 = div1.childNodes.item(1);
  verify(div3 && div3.nodeName == "DIV");

  var div4 = div1.childNodes.item(2);
  verify(div4 && div4.nodeName == "DIV");

  var docfrag = document.createDocumentFragment();
  verify(docfrag && docfrag.nodeName == "#document-fragment");

  var div5 = document.createElement("DIV");
  verify(div5 && div5.nodeName == "DIV");
  verify(docfrag.appendChild(div5) == div5);
  verify(docfrag.firstChild == div5);
  verify(docfrag.lastChild == div5);
  verify(div5.parentNode == docfrag);

  verify(div1.replaceChild(docfrag, div3) == div3);

  verify(docfrag.firstChild == null);
  verify(docfrag.lastChild == null);
  verify(docfrag.parentNode == null);
  verify(div1.firstChild == div2);
  verify(div1.lastChild == div4);
  verify(div2.parentNode == div1);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == div5);
  verify(div3.parentNode == null);
  verify(div3.previousSibling == null);
  verify(div3.nextSibling == null);
  verify(div4.parentNode == div1);
  verify(div4.previousSibling == div5);
  verify(div4.nextSibling == null);
  verify(div5.parentNode == div1);
  verify(div5.previousSibling == div2);
  verify(div5.nextSibling == div4);
}

// --------------------------------------------------------------------
// div.replaceChild replacing node with itself

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild #20")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  verify(div1.replaceChild(div2, div2) == div2);

  verify(div1.firstChild == div2);
  verify(div1.lastChild == div2);
  verify(div2.parentNode == div1);
  verify(div2.previousSibling == null);
  verify(div2.nextSibling == null);
}

// --------------------------------------------------------------------
// div.replaceChild(div1)

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild HIERARCHY_REQUEST_ERR #1")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var code = "no-error";

  try
  {
    div1.replaceChild(div1, div2);
  }
  catch(error)
  {
    code = error.code;
  }

  verify(code == DOMException.HIERARCHY_REQUEST_ERR);
}

// --------------------------------------------------------------------
// div2.replaceChild(div1) where div1 is parent of div2

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div>"
          "<div></div>"
        "</div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild HIERARCHY_REQUEST_ERR #2")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var div3 = div2.firstChild;
  verify(div3 && div3.nodeName == "DIV");

  var code = "no-error";

  try
  {
    div2.replaceChild(div1, div3);
  }
  catch(error)
  {
    code = error.code;
  }

  verify(code == DOMException.HIERARCHY_REQUEST_ERR);
  verify(div2.parentNode == div1);
  verify(div3.parentNode == div2);
}

// --------------------------------------------------------------------
// div3.replaceChild(div1) where div1 is ancestor of div3

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div>"
          "<div>"
            "<div></div>"
          "</div>"
        "</div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild HIERARCHY_REQUEST_ERR #3")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var div3 = div2.firstChild;
  verify(div3 && div3.nodeName == "DIV");

  var div4 = div3.firstChild;
  verify(div4 && div4.nodeName == "DIV");

  var code = "no-error";

  try
  {
    div3.replaceChild(div1, div4);
  }
  catch(error)
  {
    code = error.code;
  }

  verify(code == DOMException.HIERARCHY_REQUEST_ERR);
  verify(div2.parentNode == div1);
  verify(div3.parentNode == div2);
  verify(div4.parentNode == div3);
}

// --------------------------------------------------------------------
// div.replaceChild(document)

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild HIERARCHY_REQUEST_ERR #4")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var code = "no-error";

  try
  {
    div1.replaceChild(document, div2);
  }
  catch(error)
  {
    code = error.code;
  }

  verify(code == DOMException.HIERARCHY_REQUEST_ERR);
}

// --------------------------------------------------------------------
// div.replaceChild(document)

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div></div>"
      "<div></div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild NOT_FOUND_ERR #1")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.nextSibling;
  verify(div2 && div2.nodeName == "DIV");

  var div3 = document.createElement("DIV");
  verify(div3 && div3.nodeName == "DIV");

  var code = "no-error";

  try
  {
    div1.replaceChild(div3, div2);
  }
  catch(error)
  {
    code = error.code;
  }

  verify(code == DOMException.NOT_FOUND_ERR);
}

// --------------------------------------------------------------------
// div.replaceChild(document)

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div></div>"
      "<div></div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild NOT_FOUND_ERR #2")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.nextSibling;
  verify(div2 && div2.nodeName == "DIV");

  var code = "no-error";

  try
  {
    div1.replaceChild(div2, div2);
  }
  catch(error)
  {
    code = error.code;
  }

  verify(code == DOMException.NOT_FOUND_ERR);
}

// --------------------------------------------------------------------
// div.replaceChild(div2) where div2 comes from other document

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild WRONG_DOCUMENT_ERR #1")
  disabled;
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var other_document = document.implementation.createDocument("http://www.w3.org/1999/xhtml", "HTML", null);

  var div3 = other_document.createElement("DIV");
  verify(div3 && div3.nodeName == "DIV");

  var code = "no-error";

  try
  {
    div1.replaceChild(div3, div2);
  }
  catch(error)
  {
    code = error.code;
  }

  verify(code == DOMException.WRONG_DOCUMENT_ERR);
  verify(div2.parentNode == div1);
  verify(div3.parentNode != div1);
}

// --------------------------------------------------------------------
// div.replaceChild(div3) where div3 comes from other document

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild WRONG_DOCUMENT_ERR #2")
  disabled;
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var other_document = document.implementation.createDocument("http://www.w3.org/1999/xhtml", "html", null);

  var div3 = other_document.createElement("DIV");
  verify(div3 && div3.nodeName == "DIV");

  var div4 = other_document.createElement("DIV");
  verify(div4 && div4.nodeName == "DIV");
  verify(div3.appendChild(div4) == div4);
  verify(div3.firstChild == div4);
  verify(div3.lastChild == div4);
  verify(div4.parentNode == div3);

  var code = "no-error";

  try
  {
    div1.replaceChild(div4, div2);
  }
  catch(error)
  {
    code = error.code;
  }

  verify(code == DOMException.WRONG_DOCUMENT_ERR);
  verify(div4.parentNode == div3);
}

// --------------------------------------------------------------------
// calls with invalid arguments

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild invalid arguments")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  var div3 = document.createElement("DIV");
  verify(div3 && div3.nodeName == "DIV");

  var object = { replaceChild: div1.replaceChild }, exception;

  exception = null; try { object.replaceChild(div3, div2); } catch (e) { exception = e; } verify(exception != null);
  exception = null; try { div1.replaceChild(null, div2); } catch (e) { exception = e; } verify(exception != null);
  exception = null; try { div1.replaceChild(true, div2); } catch (e) { exception = e; } verify(exception != null);
  exception = null; try { div1.replaceChild(0, div2); } catch (e) { exception = e; } verify(exception != null);
  exception = null; try { div1.replaceChild("", div2); } catch (e) { exception = e; } verify(exception != null);
  exception = null; try { div1.replaceChild(object, div2); } catch (e) { exception = e; } verify(exception != null);

  exception = null; try { object.replaceChild(div3, div2); } catch (e) { exception = e; } verify(exception != null);
  exception = null; try { div1.replaceChild(div3, null); } catch (e) { exception = e; } verify(exception != null);
  exception = null; try { div1.replaceChild(div3, true); } catch (e) { exception = e; } verify(exception != null);
  exception = null; try { div1.replaceChild(div3, 0); } catch (e) { exception = e; } verify(exception != null);
  exception = null; try { div1.replaceChild(div3, ""); } catch (e) { exception = e; } verify(exception != null);
  exception = null; try { div1.replaceChild(div3, object); } catch (e) { exception = e; } verify(exception != null);
}

// --------------------------------------------------------------------
// div.replaceChild(div2) listening to DOMNodeInserted and DOMNodeInsertedIntoDocument

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild Mutation Events #1")
  require DOM2_MUTATION_EVENTS;
{
  nodeinserted = "DOMNodeInserted: no event";
  nodeinsertedintodocument = "DOMNodeInsertedIntoDocument: no event";

  function handleNodeInserted(ev)
  {
    if (ev.target != div3)
      nodeinserted = "DOMNodeInserted: wrong target: " + ev.target;
    else if (ev.relatedNode != div1)
      nodeinserted = "DOMNodeInserted: wrong relatedNode: " + ev.relatedNode;
    else if (div3.parentNode != div1)
      nodeinserted = "DOMNodeInserted: node not inserted";
    else
      nodeinserted = "ok";
  }

  function handleNodeInsertedIntoDocument(ev)
  {
    if (ev.target != div3)
      nodeinsertedintodocument = "DOMNodeInsertedIntoDocument: wrong target: " + ev.target;
    else if (div3.parentNode != div1)
      nodeinsertedintodocument = "DOMNodeInsertedIntoDocument: node not inserted";
    else if (nodeinserted == "no event")
      nodeinsertedintodocument = "DOMNodeInsertedIntoDocument: received before DOMNodeInserted";
    else
      nodeinsertedintodocument = "ok";
  }

  document.addEventListener("DOMNodeInserted", handleNodeInserted, true);
  document.addEventListener("DOMNodeInsertedIntoDocument", handleNodeInsertedIntoDocument, true);

  div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  div3 = document.createElement("DIV");
  verify(div3 && div3.nodeName == "DIV");

  verify(div1.replaceChild(div3, div2) == div2);

  if (nodeinserted != "ok")
    throw nodeinserted;

  if (nodeinsertedintodocument != "ok")
    throw nodeinsertedintodocument;
}

// --------------------------------------------------------------------
// div.replaceChild(div2) listening to DOMNodeRemoved and DOMNodeRemovedFromDocument

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild Mutation Events #2")
  require DOM2_MUTATION_EVENTS;
{
  noderemoved = "DOMNodeRemoved: no event";
  noderemovedfromdocument = "DOMNodeRemovedFromDocument: no event";

  function handleNodeRemoved(ev)
  {
    if (ev.target != div2)
      noderemoved = "DOMNodeRemoved: wrong target: " + ev.target;
    else if (ev.relatedNode != div1)
      noderemoved = "DOMNodeRemoved: wrong relatedNode: " + ev.relatedNode;
    else if (div2.parentNode != div1)
      noderemoved = "DOMNodeRemoved: oldChild already removed";
    else
      noderemoved = "ok";
  }

  function handleNodeRemovedFromDocument(ev)
  {
    if (ev.target != div2)
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: wrong target: " + ev.target;
    else if (div2.parentNode != div1)
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: oldChild already removed";
    else if (noderemoved == "no event")
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: received before DOMNodeRemoved";
    else
      noderemovedfromdocument = "ok";
  }

  document.addEventListener("DOMNodeRemoved", handleNodeRemoved, true);
  document.addEventListener("DOMNodeRemovedFromDocument", handleNodeRemovedFromDocument, true);

  div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  var div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  div3 = document.createElement("DIV");
  verify(div3 && div3.nodeName == "DIV");

  verify(div1.replaceChild(div3, div2) == div2);

  if (noderemoved != "ok")
    throw noderemoved;

  if (noderemovedfromdocument != "ok")
    throw noderemovedfromdocument;
}

// --------------------------------------------------------------------
// div.replaceChild(div3) listening to DOMNodeRemoved and DOMNodeRemovedFromDocument

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild Mutation Events #3")
  require DOM2_MUTATION_EVENTS;
{
  noderemoved = "DOMNodeRemoved: no event";
  noderemovedfromdocument = "DOMNodeRemovedFromDocument: no event";

  function handleNodeRemoved(ev)
  {
    if (ev.target != div2)
      noderemoved = "DOMNodeRemoved: wrong target: " + ev.target;
    else if (ev.relatedNode != div1)
      noderemoved = "DOMNodeRemoved: wrong relatedNode: " + ev.relatedNode;
    else if (div2.parentNode != div1)
      noderemoved = "DOMNodeRemoved: node already removed";
    else
      noderemoved = "ok";
  }

  function handleNodeRemovedFromDocument(ev)
  {
    if (ev.target != div2)
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: wrong target: " + ev.target;
    else if (div2.parentNode != div1)
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: node already removed";
    else if (noderemoved == "no event")
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: received before DOMNodeRemoved";
    else
      noderemovedfromdocument = "ok";
  }

  div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  div3 = div1.nextSibling;
  verify(div3 && div3.nodeName == "DIV");

  div4 = div3.firstChild;
  verify(div4 && div4.nodeName == "DIV");

  div1.addEventListener("DOMNodeRemoved", handleNodeRemoved, true);
  div1.addEventListener("DOMNodeRemovedFromDocument", handleNodeRemovedFromDocument, true);

  verify(div3.replaceChild(div2, div4) == div4);

  if (noderemoved != "ok")
    throw noderemoved;

  if (noderemovedfromdocument != "ok")
    throw noderemovedfromdocument;
}

// --------------------------------------------------------------------
// div.replaceChild(div3) listening to DOMNodeInserted{,IntoDocument} and DOMNodeRemoved{,FromDocument}

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild Mutation Events #4")
  require DOM2_MUTATION_EVENTS;
{
  nodeinserted = "DOMNodeInserted: no event";
  nodeinsertedintodocument = "DOMNodeInsertedIntoDocument: no event";
  noderemoved = "DOMNodeRemoved: no event";
  noderemovedfromdocument = "DOMNodeRemovedFromDocument: no event";

  function handleNodeInserted(ev)
  {
    if (ev.target != div2)
      nodeinserted = "DOMNodeInserted: wrong target: " + ev.target;
    else if (ev.relatedNode != div3)
      nodeinserted = "DOMNodeInserted: wrong relatedNode: " + ev.relatedNode;
    else if (div2.parentNode != div3)
      nodeinserted = "DOMNodeInserted: node not inserted";
    else
      nodeinserted = "ok";
  }

  function handleNodeInsertedIntoDocument(ev)
  {
    if (ev.target != div2)
      nodeinsertedintodocument = "DOMNodeInsertedIntoDocument: wrong target: " + ev.target;
    else if (div2.parentNode != div3)
      nodeinsertedintodocument = "DOMNodeInsertedIntoDocument: node not inserted";
    else if (nodeinserted == "no event")
      nodeinsertedintodocument = "DOMNodeInsertedIntoDocument: received before DOMNodeInserted";
    else
      nodeinsertedintodocument = "ok";
  }

  function handleNodeRemoved(ev)
  {
    if (ev.target == div4)
    {
      if (ev.relatedNode != div3)
        noderemoved = "DOMNodeRemoved: wrong relatedNode: " + ev.relatedNode;
      else if (div4.parentNode != div3)
        noderemoved = "DOMNodeRemoved: node already removed";
      else
        noderemoved = "DOMNodeRemoved: too few events received";
    }
    else if (ev.target == div2)
    {
      if (ev.relatedNode != div1)
        noderemoved = "DOMNodeRemoved: wrong relatedNode: " + ev.relatedNode;
      else if (div2.parentNode != div1)
        noderemoved = "DOMNodeRemoved: node already removed";
      else
        noderemoved = "ok";
    }
    else
      noderemoved = "DOMNodeRemoved: wrong target: " + ev.target;
  }

  function handleNodeRemovedFromDocument(ev)
  {
    if (ev.target == div4)
    {
      if (div4.parentNode != div3)
        noderemovedfromdocument = "DOMNodeRemovedFromDocument: node already removed";
      else
        noderemovedfromdocument = "DOMNodeRemovedFromDocument: too few events received";
    }
    else if (ev.target == div2)
    {
      if (div2.parentNode != div1)
        noderemovedfromdocument = "DOMNodeRemovedFromDocument: node already removed";
      else
        noderemovedfromdocument = "ok";
    }
    else
      noderemoved = "DOMNodeRemovedFromDocument: wrong target: " + ev.target;
  }

  div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  div3 = div1.nextSibling;
  verify(div3 && div3.nodeName == "DIV");

  div4 = div3.firstChild;
  verify(div4 && div4.nodeName == "DIV");

  document.addEventListener("DOMNodeInserted", handleNodeInserted, true);
  document.addEventListener("DOMNodeInsertedIntoDocument", handleNodeInsertedIntoDocument, true);
  document.addEventListener("DOMNodeRemoved", handleNodeRemoved, true);
  document.addEventListener("DOMNodeRemovedFromDocument", handleNodeRemovedFromDocument, true);

  verify(div3.replaceChild(div2, div4) == div4);

  if (nodeinserted != "ok")
    throw nodeinserted;

  if (nodeinsertedintodocument != "ok")
    throw nodeinsertedintodocument;

  if (noderemoved != "ok")
    throw noderemoved;

  if (noderemovedfromdocument != "ok")
    throw noderemovedfromdocument;
}

// --------------------------------------------------------------------
// div.replaceChild(docfrag) listening to DOMNodeInserted{,IntoDocument} and DOMNodeRemoved{,FromDocument}

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild Mutation Events #5")
  require DOM2_MUTATION_EVENTS;
{
  nodeinserted = "DOMNodeInserted: no event";
  nodeinserted_count = 0;
  nodeinsertedintodocument = "DOMNodeInsertedIntoDocument: no event";
  nodeinsertedintodocument_count = 0;
  noderemoved = "DOMNodeRemoved: no event";
  noderemoved_count = 0;
  noderemovedfromdocument = "ok";

  function handleNodeInserted(ev)
  {
    var target = null, count, result = "DOMNodeInserted: too few events received";;
    if (ev.type == "DOMNodeInserted")
      count = nodeinserted_count++;
    else
      count = nodeinsertedintodocument_count++;

    switch (count)
    {
    case 0: target = div3; break;
    case 1: target = div4; break;
    case 2: target = div5; result = "ok"; break;
    default: result = "DOMNodeInserted: bogus event received";
    }

    if (target != null)
      if (ev.target != target)
        result = "DOMNodeInserted: wrong target: " + ev.target;
      else if (ev.type == "DOMNodeInserted" && ev.relatedNode != div1)
        result = "DOMNodeInserted: wrong relatedNode: " + ev.relatedNode;
      else if (ev.type == "DOMNodeInsertedIntoDocument" && nodeinserted_count < nodeinsertedintodocument_count)
        result = "DOMNodeInsertedIntoDocument: received before DOMNodeInserted";
      else if (ev.target.parentNode != div1)
        result = "DOMNodeInserted: node not inserted";

    if (ev.type == "DOMNodeInserted")
      nodeinserted = result;
    else
      nodeinsertedintodocument = result;
  }

  function handleNodeRemoved(ev)
  {
    if (nodeinserted_count < noderemoved_count)
    {
      noderemoved = "DOMNodeRemoved: received before DOMNodeInserted";
      return;
    }

    switch (noderemoved_count++)
    {
    case 0: target = div3; break;
    case 1: target = div4; break;
    case 2: target = div5; noderemoved = "ok"; break;
    default: noderemoved = "DOMNodeRemoved: bogus event received"; return;
    }

    if (ev.target != target)
      noderemoved = "DOMNodeRemoved: wrong target: " + ev.target;
    else if (ev.relatedNode != docfrag)
      noderemoved = "DOMNodeRemoved: wrong relatedNode: " + ev.relatedNode;
    else if (ev.target.parentNode != docfrag)
      noderemoved = "DOMNodeRemoved: node already removed";
  }

  function handleNodeRemovedFromDocument(ev)
  {
    noderemovedfromdocument = "DOMNodeRemovedFromDocument: bogus event received";
  }

  div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  docfrag = document.createDocumentFragment();
  verify(docfrag && docfrag.nodeName == "#document-fragment");

  div3 = document.createElement("DIV");
  verify(div3 && div3.nodeName == "DIV");

  div4 = document.createElement("DIV");
  verify(div4 && div4.nodeName == "DIV");

  div5 = document.createElement("DIV");
  verify(div5 && div5.nodeName == "DIV");

  verify(docfrag.appendChild(div3) == div3);
  verify(docfrag.appendChild(div4) == div4);
  verify(docfrag.appendChild(div5) == div5);

  document.addEventListener("DOMNodeInserted", handleNodeInserted, true);
  document.addEventListener("DOMNodeInsertedIntoDocument", handleNodeInserted, true);
  docfrag.addEventListener("DOMNodeRemoved", handleNodeRemoved, true);
  docfrag.addEventListener("DOMNodeRemovedFromDocument", handleNodeRemovedFromDocument, true);

  verify(div1.replaceChild(docfrag, div2) == div2);

  if (nodeinserted != "ok")
    throw nodeinserted;

  if (nodeinsertedintodocument != "ok")
    throw nodeinsertedintodocument;

  if (noderemoved != "ok")
    throw noderemoved;

  if (noderemovedfromdocument != "ok")
    throw noderemovedfromdocument;
}

// --------------------------------------------------------------------
// div1.replaceChild(div4, div2) evil mutation during DOMNodeRemoved of div4

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild Mutation Events evil #1")
  require DOM2_MUTATION_EVENTS;
{
  noderemoved = "waiting1";

  function handleNodeRemoved(ev)
  {
    if (ev.target == div2 && ev.relatedNode == div1)
    {
      if (noderemoved == "waiting1")
      {
        noderemoved = "waiting2";
        div1.removeChild(div2);
      }
      else if (noderemoved == "waiting2")
        noderemoved = "ok";
      else
        noderemoved = "DOMNodeRemoved: bogus event received";
    }
    else
      noderemoved = "DOMNodeRemoved: invalid target or relatedNode";
  }

  document.addEventListener("DOMNodeRemoved", handleNodeRemoved, true);

  div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  div3 = div1.nextSibling;
  verify(div3 && div3.nodeName == "DIV");

  div4 = div3.firstChild;
  verify(div4 && div4.nodeName == "DIV");

  var code = "no-error";

  try
  {
    div1.replaceChild(div4, div2);
  }
  catch(error)
  {
    code = error.code;
  }

  verify(code == DOMException.NOT_FOUND_ERR);

  if (noderemoved != "ok")
    throw noderemoved;
}

// --------------------------------------------------------------------
// div1.replaceChild(div4, div2) evil mutation during DOMNodeRemoved of div2

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div></div>"
      "</div>"
      "<div>"
        "<div></div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Node.replaceChild Mutation Events evil #2")
  require DOM2_MUTATION_EVENTS;
{
  noderemoved = "waiting1";

  function handleNodeRemoved(ev)
  {
    if (noderemoved == "waiting1")
      if (ev.target == div2 && ev.relatedNode == div1)
      {
        noderemoved = "waiting2";
        div1.removeChild(div2);
      }
      else
        noderemoved = "DOMNodeRemoved: invalid target or relatedNode";
    else if (noderemoved == "waiting2")
      if (ev.target == div2 && ev.relatedNode == div1)
        noderemoved = "ok";
      else
        noderemoved = "DOMNodeRemoved: invalid target or relatedNode";
    else
      noderemoved = "DOMNodeRemoved: bogus event received";
  }

  document.addEventListener("DOMNodeRemoved", handleNodeRemoved, true);

  div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  div2 = div1.firstChild;
  verify(div2 && div2.nodeName == "DIV");

  div3 = document.createElement("DIV");
  verify(div3 && div3.nodeName == "DIV");

  var code = "no-error";

  try
  {
    div1.replaceChild(div3, div2);
  }
  catch(error)
  {
    code = error.code;
  }

  verify(code == DOMException.NOT_FOUND_ERR);

  if (noderemoved != "ok")
    throw noderemoved;
}
