group "DOM.Core.Entity.properties";
require init;
require DOM3_LOAD;

language ecmascript;

xml
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root ["
    "<!ENTITY entity1 'internal1'>"
  "]>"
  "<root>&entity1;</root>"
}

test("Setup")
{
  entity_properties = ["publicId", "systemId", "notationName"];
  node_properties = [ "nodeName", "nodeValue", "nodeType", "parentNode",
                      "childNodes", "firstChild", "lastChild", "previousSibling",
                      "nextSibling", "attributes", "ownerDocument",
                      "namespaceURI", "prefix", "localName" ];
}

test("HasProperty: Entity")
{
  function checkProperties_HasProperty(node, properties)
  {
    for (var index = 0; index < properties.length; ++index)
      if (!(properties[index] in node))
        throw "HasProperty: '" + properties[index] + "' not found";
    return true;
  }

  verify(document.doctype);
  verify(document.doctype.entities);

  var entity = document.doctype.entities.getNamedItem("entity1");

  verify(entity);
  verify(checkProperties_HasProperty(entity, entity_properties));
  verify(checkProperties_HasProperty(entity, node_properties));
}

test("Enumerate: Entity")
{
  function checkProperties_Enumerate(node, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in node)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  verify(document.doctype);
  verify(document.doctype.entities);

  var entity = document.doctype.entities.getNamedItem("entity1");

  verify(entity);
  verify(checkProperties_Enumerate(entity, entity_properties));
  verify(checkProperties_Enumerate(entity, node_properties));
}

test("Get: Entity")
{
  checkProperties_Get = function checkProperties_Get(node, properties, values)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in values))
        throw "Get: INCORRECT TEST: " + properties[index] + " not in values";
      if (!(node[properties[index]] == values[properties[index]]))
        throw "Get: '" + properties[index] + "' wrong, is '" + node[properties[index]] + "', should be '" + values[properties[index]] + "'";
    }
    return true;
  }

  verify(document.doctype);
  verify(document.doctype.entities);

  var entity = document.doctype.entities.getNamedItem("entity1");

  verify(entity);
  verify(checkProperties_Get(entity, entity_properties,
         { publicId: null,
           systemId: null,
           notationName: null }));
  verify(checkProperties_Get(entity, node_properties,
         { nodeName: "entity1",
           nodeValue: null,
           nodeType: Node.ENTITY_NODE,
           parentNode: null,
           childNodes: entity.childNodes,
           firstChild: entity.firstChild,
           lastChild: entity.firstChild,
           previousSibling: null,
           nextSibling: null,
           attributes: null,
           ownerDocument: document,
           namespaceURI: null,
           prefix: null,
           localName: null }));

  verify(entity.firstChild.nodeType == Node.TEXT_NODE);
  verify(entity.firstChild.nodeValue == "internal1");
}

test("Entity children")
{
  verify(document.doctype);
  verify(document.doctype.entities);

  var entity = document.doctype.entities.getNamedItem("entity1");

  verify(entity);
  verify(entity.childNodes.length == 1);
  verify(entity.firstChild == entity.childNodes.item(0));
  verify(entity.lastChild == entity.childNodes.item(0));
  verify(entity.childNodes.item(0).parentNode == entity);
  verify(entity.childNodes.item(0).nodeName == "#text");
  verify(entity.childNodes.item(0).nodeValue == "internal1");
}

test("Predefined entity's value")
{
  verify(document.doctype);
  verify(document.doctype.entities);

  var entity = document.doctype.entities.getNamedItem("amp");

  verify(entity);
  verify(entity.firstChild);
  verify(entity.firstChild == entity.lastChild);
  verify(entity.firstChild.nodeType == Node.TEXT_NODE);
  verify(entity.firstChild.nodeValue == "&");
}
