/* -*- Mode: c++; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "DOM.Core.constructors";
require init;

language ecmascript;

html
{
  "<html>"
      "<body><div>"
  "</html>"
}

test("Common constructors#1")
{
    verify("Node" in window);
    verify(window.Node);
    verify(Node);
    verify(Node.prototype);
    verify(Node.prototype.constructor);
    verify(Node.prototype.constructor === Node);
    verify(window.Node.toString().indexOf("Node") != -1);
}

test("Common constructors#2")
require XSLT_SUPPORT;
{
    verify("XSLTProcessor" in window);
    verify(window.XSLTProcessor);
    verify(window.XSLTProcessor.prototype);
    verify(window.XSLTProcessor.prototype.constructor);
    verify(window.XSLTProcessor.prototype.constructor === window.XSLTProcessor);
    verify(window.XSLTProcessor.toString().indexOf("XSLTProcessor") != -1);
}


test("Common constructors#3")
require DOM_GADGET_FILE_API_SUPPORT;
{
    verify("File" in window);
    verify(window.File);
    verify(window.File.prototype);
    verify(window.File.prototype.constructor);
    verify(window.File.prototype.constructor === window.File);
    verify(window.File.toString().indexOf("File") != -1);
}

test("Common constructors#4")
require CANVAS_SUPPORT;
{
    verify("ImageData" in window);
    verify(window.ImageData);
    verify(window.ImageData.prototype);
    verify(window.ImageData.prototype.constructor);
    verify(window.ImageData.prototype.constructor === window.ImageData);
    verify(window.ImageData.toString().indexOf("ImageData") != -1);
}

test("Common constructors#6")
require APPLICATION_CACHE_SUPPORT;
{
    verify("ApplicationCache" in window);
    verify(window.ApplicationCache);
    verify(window.ApplicationCache.prototype);
    verify(window.ApplicationCache.prototype.constructor);
    verify(window.ApplicationCache.prototype.constructor === window.ApplicationCache);
    verify(window.ApplicationCache.toString().indexOf("ApplicationCache") != -1);
}

test("Common constructors#7")
require DOM_HTTP_SUPPORT;
{
    verify("XMLHttpRequest" in window);
    verify(window.XMLHttpRequest);
    verify(window.XMLHttpRequest.prototype);
    verify(window.XMLHttpRequest.prototype.constructor);
    verify(window.XMLHttpRequest.prototype.constructor === window.XMLHttpRequest);
    verify(window.XMLHttpRequest.toString().indexOf("XMLHttpRequest") != -1);
}

test("Common constructors#8")
require MEDIA_HTML_SUPPORT;
{
    verify("Audio" in window);
    verify(window.Audio);
    // The media changes involved some strangeness to the Audio
    // object which makes its constructor not behave like other
    // constructors. At some point it should be fixed.
    /*
    verify(window.Audio.prototype);
    verify(window.Audio.prototype.constructor);
    verify(window.Audio.prototype.constructor === window.Audio);
    */
    verify(window.Audio.toString().indexOf("Audio") != -1);
}

test("Common constructors#9")
require DOM3_XPATH;
{
    verify("XPathEvaluator" in window);
    verify(window.XPathEvaluator);
    verify(window.XPathEvaluator.prototype);
    verify(window.XPathEvaluator.prototype.constructor);
    verify(window.XPathEvaluator.prototype.constructor === window.XPathEvaluator);
    verify(window.XPathEvaluator.toString().indexOf("XPathEvaluator") != -1);
}

test("Common constructors#10")
require DOM3_SAVE;
{
    verify("XMLSerializer" in window);
    verify(window.XMLSerializer);
    verify(window.XMLSerializer.prototype);
    verify(window.XMLSerializer.prototype.constructor);
    verify(window.XMLSerializer.prototype.constructor === window.XMLSerializer);
    verify(window.XMLSerializer.toString().indexOf("XMLSerializer") != -1);
}

test("Common constructors#11")
{
    verify("HTMLDocument" in window);
    verify(window.HTMLDocument);
    verify(HTMLDocument);
    verify(HTMLDocument.prototype);
    verify(HTMLDocument.prototype.constructor);
    verify(HTMLDocument.prototype.constructor === HTMLDocument);
    verify(window.HTMLDocument.toString().indexOf("HTMLDocument") != -1);
}

test("Common constructors#12")
{
    verify("Document" in window);
    verify(window.Document);
    verify(Document);
    verify(Document.prototype);
    verify(Document.prototype.constructor);
    verify(Document.prototype.constructor === Document);
    verify(window.Document.toString().indexOf("Document") != -1);
}

test("Common constructors#13")
{
    verify("Event" in window);
    verify(window.Event);
    verify(Event);
    verify(Event.prototype);
    verify(Event.prototype.constructor);
    verify(Event.prototype.constructor === Event);
    verify(window.Event.toString().indexOf("Event") != -1);
}

test("Common constructors#14")
{
    verify("UIEvent" in window);
    verify(window.UIEvent);
    verify(UIEvent);
    verify(UIEvent.prototype);
    verify(UIEvent.prototype.constructor);
    verify(UIEvent.prototype.constructor === UIEvent);
    verify(window.UIEvent.toString().indexOf("UIEvent") != -1);
}

test("Common constructors#15")
{
    verify("MouseEvent" in window);
    verify(window.MouseEvent);
    verify(MouseEvent);
    verify(MouseEvent.prototype);
    verify(MouseEvent.prototype.constructor);
    verify(MouseEvent.prototype.constructor === MouseEvent);
    verify(window.MouseEvent.toString().indexOf("MouseEvent") != -1);
}

test("Common constructors#16")
{
    verify("MutationEvent" in window);
    verify(window.MutationEvent);
    verify(MutationEvent);
    verify(MutationEvent.prototype);
    verify(MutationEvent.prototype.constructor);
    verify(MutationEvent.prototype.constructor === MutationEvent);
    verify(window.MutationEvent.toString().indexOf("MutationEvent") != -1);
}

test("Secret constructors not visible")
{
    verify(!("Widget" in window));
    verify(!("JILRadioInfo" in window));
    verify(!("DeviceDescriptor" in window));
    verify(!("ServiceDescriptor" in window));
    verify(!("UPnPCollection" in window));
    verify(!("WebFeeds" in window));
    verify(!("FeedList" in window));
    verify(!("Feed" in window));
    verify(!("FeedEntryList" in window));
    verify(!("FeedEntry" in window));
    verify(!("FeedContent)" in window));
    verify(!("FeedReaderList" in window));
    verify(!("FeedReader" in window));
    //    verify(!("FileStream" in window));  // Should this really be visible??
    verify(!("FileSystem" in window));
    verify(!("WebServerRequest" in window));
    verify(!("WebServerResponse" in window));
    verify(!("UploadedFileMetaData" in window));
    verify(!("WebServerSession" in window));
    verify(!("WebServerConnection" in window));
    verify(!("WebServerServiceArray" in window));
    verify(!("WebServerCollection" in window));
    verify(!("WebServerServiceDescriptor" in window));
}

test("Constructor enumeration")
{
    var names = {};
    for (x in window)
	names[x] = true;

    verify(!names["XMLSerializer"]);
    verify(!names["XMLHttpRequest"]);
    verify(!names["Widget"]);
    verify(!names["HTMLDivElement"]);
    verify(!names["Event"]);
    verify(!names["HTMLDocument"]);
    verify(!names["File"]);
    verify(!names["Node"]);
    verify(!names["MouseEvent"]);

    // Test the test
    verify(names["top"]);
}

test("Constructor object enumeration hiding prototype")
{
	var example_constructors = [ "Node", "HTMLDocument", "HTMLDivElement", "Event" ];
	for (i = 0; i < example_constructors.length; i++)
	{
		var constructor_name = example_constructors[i];
		obj = window[constructor_name];
		verify(obj);
		var names = {};
		for (x in obj)
			names[x] = true;

		verify(!names["prototype"]);
	}
}

html
{
  "<html>"
      "<body><div>"
  "</html>"
}

test("Constructors through objects#1")
{
    verify("constructor" in document);
    verify(document.constructor);
    verify(document.constructor.prototype);
    verify(document.constructor.prototype.constructor);
    verify(document.constructor.prototype.constructor === document.constructor);

    verify(window.HTMLDocument);
    verify(HTMLDocument.prototype);
    verify(HTMLDocument.prototype === document.constructor.prototype);
    verify(HTMLDocument === document.constructor);
}


