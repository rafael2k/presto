group "DOM.Core.Element.properties";
require init;

include "modules/dom/src/domenvironmentimpl.h";
include "modules/dom/src/domcore/domdoc.h";
include "modules/dom/src/domcore/element.h";
include "modules/dom/src/domhtml/htmlelem.h";
include "modules/doc/frm_doc.h";
include "modules/logdoc/htm_elm.h";

language ecmascript;

html "";

test("Setup #1 (c++)")
  language c++;
{
  verify(state.doc != NULL);

  verify_success(state.doc->ConstructDOMEnvironment());

  DOM_EnvironmentImpl *environment = (DOM_EnvironmentImpl *) state.doc->GetDOMEnvironment();
  verify(environment != NULL);
  verify(environment->ConstructDocumentNode() == OpStatus::OK);

  DOM_Object *window = environment->GetWindow();
  verify(window != NULL);

  DOM_Document *doc;
  DOM_Document::Make(doc, ((DOM_Document *) environment->GetDocument())->GetDOMImplementation(), TRUE);
  window->Put(UNI_L("doc"), *doc);

  DOM_HTMLElement *html_node, *body_node, *div_node;

  DOM_HTMLElement::CreateElement(html_node, doc, UNI_L("html"));
  window->Put(UNI_L("html"), *html_node);

  DOM_HTMLElement::CreateElement(body_node, doc, UNI_L("body"));
  window->Put(UNI_L("body"), *body_node);

  DOM_HTMLElement::CreateElement(div_node, doc, UNI_L("div"));
  window->Put(UNI_L("div"), *div_node);

  doc->InsertChild(html_node, NULL, environment->GetDOMRuntime());
  html_node->InsertChild(body_node, NULL, environment->GetDOMRuntime());
  body_node->InsertChild(div_node, NULL, environment->GetDOMRuntime());
}

test("Setup #1")
{
  checkProperties_HasProperty = function checkProperties_HasProperty(node, properties)
  {
    for (var index = 0; index < properties.length; ++index)
      if (!(properties[index] in node))
        throw "HasProperty: '" + properties[index] + "' not found";
    return true;
  }

  checkProperties_Enumerate = function checkProperties_Enumerate(node, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in node)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  checkProperties_Get = function checkProperties_Get(node, properties, values)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in values))
        throw "Get: INCORRECT TEST: " + properties[index] + " not in values";
      if (!(node[properties[index]] == values[properties[index]]))
        throw "Get: '" + properties[index] + "' wrong, is '" + node[properties[index]] + "', should be '" + values[properties[index]] + "'";
    }
    return true;
  }

  checkProperties_PutNotAllowed = function checkProperties_PutNotAllowed(node, properties)
  {
    "use strict";
    for (var index = 0; index < properties.length; ++index)
    {
      var error = null;
      var new_value = null;
      var old_value = null;
      try
      {
        old_value = node[properties[index]];
        if (typeof(old_value) == "string")
          new_value = 10;
        else
          new_value = "foo";
        node[properties[index]] = new_value;
        if (!(node[properties[index]] == old_value))
          error = "PutNotAllowed: '" + properties[index] + "' changed value and didn't throw exception";
        else
          error = "PutNotAllowed: '" + properties[index] + "' didn't throw exception";
      }
      catch(e)
      {
        if (!(e instanceof TypeError))
          error = "PutNotAllowed: '" + properties[index] + "' threw exception other than TypeError";
        else
          if (!(node[properties[index]] == old_value))
            error = "PutNotAllowed: '" + properties[index] + "' threw exception but changed value";
      }
      if (error != null)
        throw error;
    }
    return true;
  }

  properties = [ "tagName" ];

  /* Workaround for a bug in the ECMAScript engine: the 'in' operator
     sometimes doesn't work for properties on host objects because the
     engine optimizes away the lookup if it hasn't seen the name used
     as a property name before.  So we use them all as property names
     here to make sure the engine has seen them. */
  var identifiers = {
    tagName: null
  };
}

test("HasProperty #1: Element (html)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(html, properties);
  checkProperties_Enumerate(html, properties);
}

test("HasProperty #1: Element (body)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(body, properties);
  checkProperties_Enumerate(body, properties);
}

test("HasProperty #1: Element (div)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(div, properties);
  checkProperties_Enumerate(div, properties);
}

test("Get #1: Element (html)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_Get(html, properties, { tagName: "HTML" });
}

test("Get #1: Element (body)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_Get(body, properties, { tagName: "BODY" });
}

test("Get #1: Element (div)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_Get(div, properties, { tagName: "DIV" });
}

test("Put #1: Element (html)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_PutNotAllowed(html, properties);
}

test("Put #1: Element (body)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_PutNotAllowed(body, properties);
}

test("Put #1: Element (div)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_PutNotAllowed(div, properties);
}

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Setup #2 (c++)")
  language c++;
{
  verify(state.doc != NULL);

  verify_success(state.doc->ConstructDOMEnvironment());

  DOM_EnvironmentImpl *environment = (DOM_EnvironmentImpl *) state.doc->GetDOMEnvironment();
  verify(environment != NULL);
  verify(environment->ConstructDocumentNode() == OpStatus::OK);

  DOM_Document *document = (DOM_Document *) environment->GetDocument();
  DOM_Object *window = environment->GetWindow();
  verify(window != NULL);

  DOM_Node *html, *head, *body, *div;
  HTML_Element *element;

  html = environment->GetRootElement();
  verify(html != NULL);

  element = html->GetThisElement();
  verify(element->Type() == HE_HTML);

  element = element->FirstChildActual();
  verify(element != NULL);
  verify(element->Type() == HE_HEAD);
  environment->ConstructNode(head, element, document);

  element = element->SucActual();
  verify(element != NULL);
  verify(element->Type() == HE_BODY);
  environment->ConstructNode(body, element, document);

  element = element->FirstChildActual();
  verify(element != NULL);
  verify(element->Type() == HE_DIV);
  environment->ConstructNode(div, element, document);

  window->Put(UNI_L("html"), *html);
  window->Put(UNI_L("head"), *head);
  window->Put(UNI_L("body"), *body);
  window->Put(UNI_L("div"), *div);
}

test("Setup #2")
{
  checkProperties_HasProperty = function checkProperties_HasProperty(node, properties)
  {
    for (var index = 0; index < properties.length; ++index)
      if (!(properties[index] in node))
        throw "HasProperty: '" + properties[index] + "' not found";
    return true;
  }

  checkProperties_Enumerate = function checkProperties_Enumerate(node, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in node)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  checkProperties_Get = function checkProperties_Get(node, properties, values)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in values))
        throw "Get: INCORRECT TEST: " + properties[index] + " not in values";
      if (!(node[properties[index]] == values[properties[index]]))
        throw "Get: '" + properties[index] + "' wrong, is '" + node[properties[index]] + "', should be '" + values[properties[index]] + "'";
    }
    return true;
  }

  checkProperties_PutNotAllowed = function checkProperties_PutNotAllowed(node, properties)
  {
    "use strict";
    for (var index = 0; index < properties.length; ++index)
    {
      var error = null;
      var new_value = null;
      var old_value = null;
      try
      {
        old_value = node[properties[index]];
        if (typeof(old_value) == "string")
          new_value = 10;
        else
          new_value = "foo";
        node[properties[index]] = new_value;
        if (!(node[properties[index]] == old_value))
          error = "PutNotAllowed: '" + properties[index] + "' changed value and didn't throw exception";
        else
          error = "PutNotAllowed: '" + properties[index] + "' didn't throw exception";
      }
      catch(e)
      {
        if (!(e instanceof TypeError))
          error = "PutNotAllowed: '" + properties[index] + "' threw exception other than TypeError";
        else
          if (!(node[properties[index]] == old_value))
            error = "PutNotAllowed: '" + properties[index] + "' threw exception but changed value";
      }
      if (error != null)
        throw error;
    }
    return true;
  }

  properties = [ "tagName" ];

  /* Workaround for a bug in the ECMAScript engine: the 'in' operator
     sometimes doesn't work for properties on host objects because the
     engine optimizes away the lookup if it hasn't seen the name used
     as a property name before.  So we use them all as property names
     here to make sure the engine has seen them. */
  var identifiers = {
    nodeName: null,
    nodeValue: null,
    nodeType: null,
    parentNode: null,
    childNodes: null,
    firstChild: null,
    lastChild: null,
    previousSibling: null,
    nextSibling: null,
    attributes: null,
    ownerDocument: null,
    namespaceURI: null,
    prefix: null,
    localName: null
  };

  doc = document;
}

test("HasProperty #2: Element (html)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_HasProperty(html, properties);
  checkProperties_Enumerate(html, properties);
}

test("HasProperty #2: Element (head)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_HasProperty(head, properties);
  checkProperties_Enumerate(head, properties);
}

test("HasProperty #2: Element (body)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_HasProperty(body, properties);
  checkProperties_Enumerate(body, properties);
}

test("HasProperty #2: Element (div)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_HasProperty(div, properties);
  checkProperties_Enumerate(div, properties);
}

test("Get #2: Element (html)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_Get(html, properties, { tagName: "HTML" });
}

test("Get #2: Element (head)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_Get(head, properties, { tagName: "HEAD" });
}

test("Get #2: Element (body)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_Get(body, properties, { tagName: "BODY" });
}

test("Get #2: Element (div)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_Get(div, properties, { tagName: "DIV" });
}

test("Put #2: Element (html)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_PutNotAllowed(html, properties);
}

test("Put #2: Element (head)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_PutNotAllowed(head, properties);
}

test("Put #2: Element (body)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_PutNotAllowed(body, properties);
}

test("Put #2: Element (div)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_PutNotAllowed(div, properties);
}
