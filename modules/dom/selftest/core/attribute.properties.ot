group "DOM.Core.Attribute.properties";
require init;

include "modules/dom/src/domenvironmentimpl.h";
include "modules/dom/src/domcore/domdoc.h";
include "modules/dom/src/domcore/element.h";
include "modules/dom/src/domhtml/htmlelem.h";

include "modules/logdoc/htm_elm.h";

language ecmascript;

xhtml
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root [ <!ELEMENT root EMPTY> <!ATTLIST root attr1 CDATA #IMPLIED> ]>"
  "<root attr1='value1'/>"
}

test("Setup")
{
  checkProperties_HasProperty = function checkProperties_HasProperty(node, properties)
  {
    for (var index = 0; index < properties.length; ++index)
      if (!(properties[index] in node))
        throw "HasProperty: '" + properties[index] + "' not found";
    return true;
  }

  checkProperties_Enumerate = function checkProperties_Enumerate(node, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in node)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  checkProperties_Get = function checkProperties_Get(node, properties, values)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in values))
        throw "Get: INCORRECT TEST: " + properties[index] + " not in values";
      if (!(node[properties[index]] == values[properties[index]]))
        throw "Get: '" + properties[index] + "' wrong, is '" + node[properties[index]] + "', should be '" + values[properties[index]] + "'";
    }
    return true;
  }

  checkProperties_PutNotAllowed = function checkProperties_PutNotAllowed(node, properties)
  {
    "use strict";
    for (var index = 0; index < properties.length; ++index)
    {
      var error = null;
      try
      {
        old_value = node[properties[index]];
        if (typeof(old_value) == "string")
          new_value = 10;
        else
          new_value = "foo";
        node[properties[index]] = new_value;
        if (!(node[properties[index]] == old_value))
          error = "PutNotAllowed: '" + properties[index] + "' changed value and didn't throw exception";
        else
          error = "PutNotAllowed: '" + properties[index] + "' didn't throw exception";
      }
      catch(e)
      {
	if (!(e instanceof TypeError))
	    error = "PutNotAllowed: '" + properties[index] + "' threw exception other than TypeError";
        else
  	  if (!(node[properties[index]] == old_value))
            error = "PutNotAllowed: '" + properties[index] + "' threw exception but changed value";
      }
      if (error != null)
        throw error;
    }
    return true;
  }

  properties = [ "name", "specified", "value", "ownerElement" ];
}

test("HasProperty: attr1")
{
  var attr1 = document.documentElement.getAttributeNodeNS("", "attr1");
  verify(attr1);

  checkProperties_HasProperty(attr1, properties);
  checkProperties_Enumerate(attr1, properties);
}

xhtml
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root [ <!ELEMENT root EMPTY> <!ATTLIST root attr1 CDATA #IMPLIED attr2 CDATA 'value2'> ]>"
  "<root attr1='value1'/>"
}

test("Get: attr1")
{
  var attr = document.documentElement.getAttributeNodeNS("", "attr1");
  verify(attr);
  verify(attr.name == "attr1");
  verify(attr.value == "value1");
  verify(attr.specified == true);
  verify(attr.ownerElement == document.documentElement);
}

test("Get: attr2 (default)")
	require undefined USE_HTML_PARSER_FOR_XML;
{
  var attr = document.documentElement.getAttributeNodeNS("", "attr2");
  verify(attr);
  verify(attr.name == "attr2");
  verify(attr.value == "value2");
  verify(attr.specified == false);
  verify(attr.ownerElement == document.documentElement);
}
