/* -*- Mode: c++; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "DOM.Core.DOMSettableTokenList";
require init;

include "modules/dom/src/domenvironmentimpl.h";
include "modules/dom/src/domcore/domdoc.h";
include "modules/dom/src/domcore/element.h";

language ecmascript;

test("DOMSettableTokenList")
{
	verify("DOMSettableTokenList" in window);
	verify(DOMSettableTokenList);
	verify(DOMSettableTokenList.prototype);
	verify(DOMSettableTokenList.prototype.constructor);
	verify(DOMSettableTokenList.prototype.constructor === DOMSettableTokenList);
	verify(DOMSettableTokenList.prototype.constructor.prototype === DOMSettableTokenList.prototype);
}

html
{
	//! <span>contents</span>
}
test("Simple DOMSettableTokenList methods in created element")
{
	var created_element = document.createElement('testelement');
	verify(created_element);
	var ip = created_element.itemProp;
	verify(ip);
	ip.add('a');
	verify(ip[0] == 'a');
	verify(ip[1] === undefined);
	verify(ip.item(0) == 'a');
	verify(ip.item(1) === null);

	ip[0] = 'b';
	ip[1] = 'b';
	verify(ip.item(0) == 'a');
	verify(ip.item(1) == null);
}

html
{
	//! <span>contents</span>
}
test("Existance of DOMSettableTokenList methods in existing element")
{
	var el = document.querySelector('span');
	verify("itemProp" in el);
	var ip = el.itemProp;
	verify(ip === el.itemProp);
	verify(ip instanceof DOMSettableTokenList);
	verify(ip.item);
	verify(ip.toggle);
	verify(ip.contains);
	verify(ip.remove);
	verify(ip.add);
	verify(ip.toString);
}

html
{
	//! <span>contents</span>
}
test("Iteration over DOMSettableTokenList created element")
{
	var el = document.createElement('testelement');
	var ip = el.itemProp;
	el.itemProp = 'a';
	ip.add('b');
	ip.add('c');
	var seen_a = false;
	var seen_b = false;
	var seen_c = false;
	var seen_length = false;
	var seen_add = false;
	var seen_toString = false;
	var seen_toggle = false;
	var seen_remove = false;
	var seen_item = false;
	var seen_contains = false;
	for (i in ip)
	{
		if (i == 0)
		{
			verify(!seen_a);
			seen_a = true;
			verify(ip[i] == 'a');
		}
		else if (i == 1)
		{
			verify(!seen_b);
			seen_b = true;
			verify(ip[i] == 'b');
		}
		else if (i == 2)
		{
			verify(!seen_c);
			seen_c = true;
			verify(ip[i] == 'c');
		}
		else if (i == 'length'){ verify(!seen_length); seen_length = true;}
		else if (i == 'add'){ verify(!seen_add); seen_add = true;}
		else if (i == 'toString'){ verify(!seen_toString); seen_toString = true;}
		else if (i == 'toggle'){ verify(!seen_toggle); seen_toggle = true;}
		else if (i == 'remove'){ verify(!seen_remove); seen_remove = true;}
		else if (i == 'item'){ verify(!seen_item); seen_item = true;}
		else if (i == 'contains'){ verify(!seen_contains); seen_contains = true;}
	}
	verify(seen_a);
	verify(seen_b);
	verify(seen_c);
	verify(seen_length);
	verify(seen_add);
	verify(seen_toString);
	verify(seen_toggle);
	verify(seen_remove);
	verify(seen_item);
	verify(seen_contains);
}

html
{
	"<span itemprop='a	 b a c'>contents</span>"
}
test("Simple DOMSettableTokenList methods")
{
	var el_name = 'span';
	var attrib_after_parse = 'a	 b a c';

	var ip = document.querySelector(el_name).itemProp;
	verify(ip == attrib_after_parse);
	verify(ip[0] == 'a');
	verify(ip[1] == 'b');
	verify(ip[2] == 'a');
	verify(ip[3] == 'c');
	verify(ip.item(0) == 'a');
	verify(ip.item(1) == 'b');
	verify(ip.item(2) == 'a');
	verify(ip.item(3) == 'c');
	verify(ip.contains('a'));
	verify(ip.contains('b'));
	verify(ip.contains('c'));
	verify(!ip.contains('d'));

	ip.add('d');
	verify(ip.contains('a'));
	verify(ip.contains('b'));
	verify(ip.contains('c'));
	verify(ip.contains('d'));
	verify(!ip.contains('e'));
	verify(ip == attrib_after_parse + ' d');

	ip.remove('a');
	verify(!ip.contains('a'));
	verify(ip.contains('b'));
	verify(ip.contains('c'));
	verify(ip.contains('d'));
	verify(!ip.contains('e'));
	verify(ip == 'b c d');

	ip.toggle('b');
	verify(!ip.contains('a'));
	verify(!ip.contains('b'));
	verify(ip.contains('c'));
	verify(ip.contains('d'));
	verify(!ip.contains('e'));
	verify(ip == 'c d');

	ip.toggle('a');
	verify(ip.contains('a'));
	verify(!ip.contains('b'));
	verify(ip.contains('c'));
	verify(ip.contains('d'));
	verify(!ip.contains('e'));
	verify(ip == 'c d a');

	var ip_after = document.querySelector(el_name).itemProp;
	verify(ip_after == 'c d a');
}

html
{
	//! <span>contents1</span>
	//! <span itemprop='a'>reference</span>
}

test("itemProp reflects itemprop attribute, DOMSettableTokenList methods")
{
	var ip = document.querySelector('span').itemProp;
	verify(ip == '');
	ip.add('a');
	verify(ip == 'a');
	verify(document.querySelector('span').itemProp == 'a');

	ip.remove('a');
	verify(ip == '');
	verify(document.querySelector('span').itemProp == '');

	ip.toggle('a');
	verify(ip == 'a');
	verify(document.querySelector('span').itemProp == 'a');

	ip.toggle('b');
	verify(ip == 'a b');
	verify(document.querySelector('span').itemProp == 'a b');

	document.querySelector('span').itemProp = 'c';
	verify(document.querySelector('span').itemProp == 'c');
	verify(ip == 'c');
}

html {
	"<!doctype html><span>contents</span>"
}

test("DOMSettableTokenList.toString()")
{
	verify(document.querySelector('span').itemProp.toString() == '');
	document.querySelector('span').itemProp = '';
	verify(document.querySelector('span').itemProp.toString() == '');
	var delimiting_characters = ' \t\r\n\f';
	for (i_char in delimiting_characters)
	{
		document.querySelector('span').itemProp = delimiting_characters[i_char];
		verify(document.querySelector('span').itemProp.toString() == delimiting_characters[i_char]);

		var propstring = delimiting_characters[i_char] + 'a';
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.toString() == propstring);

		propstring = 'a' + delimiting_characters[i_char];
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.toString() == propstring);

		propstring = 'a' + delimiting_characters[i_char] + 'b';
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.toString() == propstring);
	}
}

html
{
	//! <span>contents1</span>
	//! <span itemprop='a'>reference</span>
}
test("DOMSettableTokenList.length")
{
	verify(document.querySelector('span').itemProp.length == 0);

	var longitemprop = 'a';
	for (var i = 0; i < 15; i++)
		longitemprop += longitemprop;
	document.querySelector('span').itemProp = longitemprop;
	verify(document.querySelector('span').itemProp.length == 1);

	document.querySelector('span').itemProp = 'a b a c';
	verify(document.querySelector('span').itemProp.length == 4);

	var delimiting_characters = ' \t\r\n\f';
	for (i_char in delimiting_characters)
	{
		document.querySelector('span').itemProp = delimiting_characters[i_char];
		verify(document.querySelector('span').itemProp.length == 0);

		var propstring = delimiting_characters[i_char] + 'a';
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.length == 1);

		propstring = 'a' + delimiting_characters[i_char] + 'b';
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.length == 2);

		propstring = 'a' + delimiting_characters[i_char];
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.length == 1);

		propstring = 'a' + delimiting_characters[i_char] + 'b';
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.length == 2);

		propstring = ' a b' + delimiting_characters[i_char];
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.length == 2);

		propstring = ' a' + delimiting_characters[i_char];
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.length == 1);
	}

	document.querySelector('span').itemProp = 'a a A A';
	verify(document.querySelector('span').itemProp.length == 4);
	document.querySelector('span').itemProp.add('b');
	document.querySelector('span').itemProp.add('B');
	document.querySelector('span').itemProp.add('b');
	document.querySelector('span').itemProp.add('B');
	verify(document.querySelector('span').itemProp.length == 6);
}

html
{
	//! <span>contents1</span>
	//! <span itemprop='a'>reference</span>
}
test("DOMSettableTokenList.item()")
{
	verify(document.querySelector('span').itemProp.item(-1) === null);
	verify(document.querySelector('span').itemProp.item(0) === null);
	verify(document.querySelector('span').itemProp.item(1) === null);
	verify(document.querySelector('span').itemProp.item(2) === null);

	var longitemprop = 'a';
	for (var i = 0; i < 15; i++)
		longitemprop += longitemprop;
	document.querySelector('span').itemProp = longitemprop;
	verify(document.querySelector('span').itemProp.item(-1) === null);
	verify(document.querySelector('span').itemProp.item(0) == longitemprop);
	verify(document.querySelector('span').itemProp.item(1) === null);

	document.querySelector('span').itemProp = 'a b a c';
	verify(document.querySelector('span').itemProp.item(-1) === null);
	verify(document.querySelector('span').itemProp.item(0) == 'a');
	verify(document.querySelector('span').itemProp.item(1) == 'b');
	verify(document.querySelector('span').itemProp.item(2) == 'a');
	verify(document.querySelector('span').itemProp.item(3) == 'c');
	verify(document.querySelector('span').itemProp.item(4) === null);

	var delimiting_characters = ' \t\r\n\f';
	for (i_char in delimiting_characters)
	{
		document.querySelector('span').itemProp = delimiting_characters[i_char];
		verify(document.querySelector('span').itemProp.item(-1) === null);
		verify(document.querySelector('span').itemProp.item(0) === null);
		verify(document.querySelector('span').itemProp.item(1) === null);

		var propstring = delimiting_characters[i_char] + 'a';
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.item(-1) === null);
		verify(document.querySelector('span').itemProp.item(0) === 'a');
		verify(document.querySelector('span').itemProp.item(1) === null);

		propstring = 'a' + delimiting_characters[i_char] + 'b';
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.item(-1) === null);
		verify(document.querySelector('span').itemProp.item(0) === 'a');
		verify(document.querySelector('span').itemProp.item(1) === 'b');
		verify(document.querySelector('span').itemProp.item(2) === null);

		propstring = 'a' + delimiting_characters[i_char];
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.item(-1) === null);
		verify(document.querySelector('span').itemProp.item(0) === 'a');
		verify(document.querySelector('span').itemProp.item(1) === null);

		propstring = 'a' + delimiting_characters[i_char] + 'b';
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.item(-1) === null);
		verify(document.querySelector('span').itemProp.item(0) === 'a');
		verify(document.querySelector('span').itemProp.item(1) === 'b');
		verify(document.querySelector('span').itemProp.item(2) === null);

		propstring = ' a b' + delimiting_characters[i_char];
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.item(-1) === null);
		verify(document.querySelector('span').itemProp.item(0) === 'a');
		verify(document.querySelector('span').itemProp.item(1) === 'b');
		verify(document.querySelector('span').itemProp.item(2) === null);

		propstring = ' a' + delimiting_characters[i_char];
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.item(-1) === null);
		verify(document.querySelector('span').itemProp.item(0) === 'a');
		verify(document.querySelector('span').itemProp.item(1) === null);
	}
}

html
{
	//! <span>contents1</span>
	//! <span itemprop='a'>reference</span>
}
test("DOMSettableTokenList array")
{
	verify(document.querySelector('span').itemProp[-1] === undefined);
	verify(document.querySelector('span').itemProp[0] === undefined);
	verify(document.querySelector('span').itemProp[1] === undefined);
	verify(document.querySelector('span').itemProp[2] === undefined);

	document.querySelector('span').itemProp[0] = 'b';
	verify(document.querySelector('span').itemProp[-1] === undefined);
	verify(document.querySelector('span').itemProp[0] === undefined);
	verify(document.querySelector('span').itemProp[1] === undefined);
	verify(document.querySelector('span').itemProp[2] === undefined);

	document.querySelector('span').itemProp = 'a';
	verify(document.querySelector('span').itemProp[-1] === undefined);
	verify(document.querySelector('span').itemProp[0] == 'a');
	verify(document.querySelector('span').itemProp[1] === undefined);
	verify(document.querySelector('span').itemProp[2] === undefined);

	document.querySelector('span').itemProp[0] = 'b';
	verify(document.querySelector('span').itemProp[-1] === undefined);
	verify(document.querySelector('span').itemProp[0] == 'a');
	verify(document.querySelector('span').itemProp[1] === undefined);
	verify(document.querySelector('span').itemProp[2] === undefined);
}

html
{
	//! <span>contents1</span>
	//! <span itemprop='a'>reference</span>
}
test("DOMSettableTokenList.contains()")
{
	verify(!document.querySelector('span').itemProp.contains('b'));

	var catched = false;
	try{
		document.querySelector('span').itemProp.contains('');
	}catch(e){
		verify(e.code == DOMException.SYNTAX_ERR);
		catched=true;
		verify(document.querySelector('span').itemProp == '');
	}
	verify(catched);

	var delimiting_characters = ' \t\r\n\f';
	for (i_char in delimiting_characters)
	{
		document.querySelector('span').itemProp = '';
		catched = false;
		try{
			document.querySelector('span').itemProp.contains(delimiting_characters[i_char]);
		}catch(e){
			catched=true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == '');
		}
		verify(catched);

		catched = false;
		try{
			var propstring = delimiting_characters[i_char] + 'a';
			document.querySelector('span').itemProp.contains(propstring);
		}catch(e){
			catched=true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == '');
		}
		verify(catched);

		try{
			var propstring = 'a' + delimiting_characters[i_char] + 'b';
			document.querySelector('span').itemProp.contains(propstring);
		}catch(e){
			catched=true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == '');
		}
		verify(catched);

		try{
			var propstring = 'a' + delimiting_characters[i_char];
			document.querySelector('span').itemProp.contains(propstring);
		}catch(e){
			catched=true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == '');
		}
		verify(catched);

		document.querySelector('span').itemProp = 'c d';
		try{
			var propstring = 'a' + delimiting_characters[i_char] + 'b';
			document.querySelector('span').itemProp.contains(propstring);
		}catch(e){
			catched=true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == 'c d');
		}
		verify(catched);

		var propstring = ' a b' + delimiting_characters[i_char];
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.contains('a'));
		verify(document.querySelector('span').itemProp.contains('b'));

		propstring = ' a' + delimiting_characters[i_char];
		document.querySelector('span').itemProp = propstring;
		verify(document.querySelector('span').itemProp.contains('a'));
	}

	var longitemprop = 'a';
	for (var i = 0; i < 15; i++)
		longitemprop += longitemprop;
	document.querySelector('span').itemProp = longitemprop;
	verify(document.querySelector('span').itemProp.contains(longitemprop));

	document.querySelector('span').itemProp = '';
	verify(!document.querySelector('span').itemProp.contains('b'));
}

test("DOMSettableTokenList.add()")
{
	document.querySelector('span').itemProp.add('b');
	verify(document.querySelector('span').itemProp == 'b');

	document.querySelector('span').itemProp = '';
	var catched = false;
	try{
		document.querySelector('span').itemProp.add('');
	}catch(e){
		verify(e.code == DOMException.SYNTAX_ERR);
		catched=true;
		verify(document.querySelector('span').itemProp == '');
	}
	verify(catched);

	var delimiting_characters = ' \t\r\n\f';
	for (i_char in delimiting_characters)
	{
		document.querySelector('span').itemProp = '';
		catched = false;
		try{
			document.querySelector('span').itemProp.add(delimiting_characters[i_char]);
		}catch(e){
			catched=true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == '');
		}
		verify(catched);

		catched = false;
		try{
			var propstring = delimiting_characters[i_char] + 'a';
			document.querySelector('span').itemProp.add(propstring);
		}catch(e){
			catched=true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == '');
		}
		verify(catched);

		try{
			var propstring = 'a' + delimiting_characters[i_char] + 'b';
			document.querySelector('span').itemProp.add(propstring);
		}catch(e){
			catched=true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == '');
		}
		verify(catched);

		try{
			var propstring = 'a' + delimiting_characters[i_char];
			document.querySelector('span').itemProp.add(propstring);
		}catch(e){
			catched=true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == '');
		}
		verify(catched);

		document.querySelector('span').itemProp = 'c d';
		try{
			var propstring = 'a' + delimiting_characters[i_char] + 'b';
			document.querySelector('span').itemProp.add(propstring);
		}catch(e){
			catched=true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == 'c d');
		}
		verify(catched);

		var propstring = ' a b' + delimiting_characters[i_char];
		document.querySelector('span').itemProp = propstring;
		document.querySelector('span').itemProp.add('a');
		verify(document.querySelector('span').itemProp == propstring);

		propstring = ' a' + delimiting_characters[i_char];
		document.querySelector('span').itemProp = propstring;
		document.querySelector('span').itemProp.add('b');
		verify(document.querySelector('span').itemProp == propstring + 'b');
	}

	document.querySelector('span').itemProp = '';
	document.querySelector('span').itemProp.add('b');
	verify(document.querySelector('span').itemProp == 'b');
}

html
{
	//! <span>contents1</span>
	//! <span itemprop='a'>reference</span>
}
test("DOMSettableTokenList.remove()")
{
	var catched = false;
	try{
		document.querySelector('span').itemProp.remove('');
	}catch(e){
		verify(e.code == DOMException.SYNTAX_ERR);
		catched=true;
		verify(document.querySelector('span').itemProp == '');
	}
	verify(catched);

	var delimiting_characters = ' \t\r\n\f';
	for (i_char in delimiting_characters)
	{
		document.querySelector('span').itemProp = '';
		catched = false;
		try{
			document.querySelector('span').itemProp.remove(delimiting_characters[i_char]);
		}catch(e){
			catched=true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == '');
		}
		verify(catched);

		catched = false;
		try{
			var propstring = delimiting_characters[i_char] + 'a';
			document.querySelector('span').itemProp.remove(propstring);
		}catch(e){
			catched=true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == '');
		}
		verify(catched);

		try{
			var propstring = 'a' + delimiting_characters[i_char] + 'b';
			document.querySelector('span').itemProp.remove(propstring);
		}catch(e){
			catched=true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == '');
		}
		verify(catched);

		try{
			var propstring = 'a' + delimiting_characters[i_char];
			document.querySelector('span').itemProp.remove(propstring);
		}catch(e){
			catched=true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == '');
		}
		verify(catched);

		document.querySelector('span').itemProp = 'a b';
		try{
			var propstring = 'a' + delimiting_characters[i_char] + 'b';
			document.querySelector('span').itemProp.remove(propstring);
		}catch(e){
			catched=true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == 'a b');
		}
		verify(catched);
	}

	var return_value = undefined;
	document.querySelector('span').itemProp = 'a';
	return_value = document.querySelector('span').itemProp.remove('a');
	verify(return_value === undefined);
	return_value = document.querySelector('span').itemProp.remove('a');
	verify(return_value === undefined);
}

html
{
	//! <span>contents1</span>
	//! <span itemprop='a'>reference</span>
}
test("DOMSettableTokenList.toggle()")
{
	var toggled = false;
	try {
		toggled = document.querySelector('span').itemProp.toggle('');
	} catch(e) {
		verify(e.code == DOMException.SYNTAX_ERR);
		catched = true;
		verify(document.querySelector('span').itemProp == '');
	}
	verify(!toggled);
	verify(catched);

	var delimiting_characters = ' \t\r\n\f';
	for (i_char in delimiting_characters)
	{
		document.querySelector('span').itemProp = '';
		var toggled = undefined;
		var catched = false;

		// toggle(whitespace);
		try {
			toggled = document.querySelector('span').itemProp.toggle(delimiting_characters[i_char]);
		} catch(e) {
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			catched = true;
			verify(document.querySelector('span').itemProp == '');
		}
		verify(toggled === undefined);
		verify(catched);

		// toggle(whitespace + 'a');
		catched = false;
		try {
			var propstring = delimiting_characters[i_char] + 'a';
			toggled = document.querySelector('span').itemProp.toggle(propstring);
		} catch(e) {
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			catched = true;
			verify(document.querySelector('span').itemProp == '');
		}
		verify(toggled === undefined);
		verify(catched);

		// toggle('a' + whitespace);
		catched = false;
		try {
			var propstring = 'a' + delimiting_characters[i_char];
			toggled = document.querySelector('span').itemProp.toggle(propstring);
		} catch(e) {
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			catched = true;
			verify(document.querySelector('span').itemProp == '');
		}
		verify(toggled === undefined);
		verify(catched);

		// toggle('a' + whitespace + 'b');
		catched = false;
		try {
			var propstring = 'a' + delimiting_characters[i_char] + 'b';
			toggled = document.querySelector('span').itemProp.toggle(propstring);
		} catch(e) {
			catched = true;
			verify(e.code == DOMException.INVALID_CHARACTER_ERR);
			verify(document.querySelector('span').itemProp == '');
		}
		verify(toggled === undefined);
		verify(catched);

		// toggle('b') for already exisiting itemProp = 'a' + whitespace.
		var propstring = 'a' + delimiting_characters[i_char];
		document.querySelector('span').itemProp = propstring;
		toggled = document.querySelector('span').itemProp.toggle('b');
		verify(toggled === true);
		verify(document.querySelector('span').itemProp == propstring + 'b');
	}

	// Return value.
	document.querySelector('span').itemProp = '';
	toggled = document.querySelector('span').itemProp.toggle('a');
	verify(toggled === true);
	toggled = document.querySelector('span').itemProp.toggle('b');
	verify(toggled === true);
	verify(document.querySelector('span').itemProp == 'a b');
	toggled = document.querySelector('span').itemProp.toggle('b');
	verify(toggled === false);
	toggled = document.querySelector('span').itemProp.toggle('a');
	verify(toggled === false);
}

