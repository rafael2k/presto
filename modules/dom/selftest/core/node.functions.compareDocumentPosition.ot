/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style: "stroustrup" -*-
 *
 * Copyright (C) 1995-2007 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.  It may not be distributed
 * under any circumstances.
 *
 */

group "DOM.Core.Node.functions.compareDocumentPosition";
require init;

include "modules/dom/src/dominternaltypes.h"; // So that we can check if entities and notations are enabled

language ecmascript;

html "<html></html>";

test("Node constants")
{
	verify(document); // A random "Node"

	verify("DOCUMENT_POSITION_DISCONNECTED" in document);
	verify(document.DOCUMENT_POSITION_DISCONNECTED == 0x01);

	verify("DOCUMENT_POSITION_PRECEDING" in document);
	verify(document.DOCUMENT_POSITION_PRECEDING == 0x02);

	verify("DOCUMENT_POSITION_FOLLOWING" in document);
	verify(document.DOCUMENT_POSITION_FOLLOWING == 0x04);

	verify("DOCUMENT_POSITION_CONTAINS" in document);
	verify(document.DOCUMENT_POSITION_CONTAINS == 0x08);

	verify("DOCUMENT_POSITION_CONTAINED_BY" in document);
	verify(document.DOCUMENT_POSITION_CONTAINED_BY == 0x10);

	verify("DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC" in document);
	verify(document.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC == 0x20);

	var element = document.createElement("foo"); // Another random node
	verify(element);

	verify("DOCUMENT_POSITION_DISCONNECTED" in element);
	verify(element.DOCUMENT_POSITION_DISCONNECTED == 0x01);

	verify("DOCUMENT_POSITION_PRECEDING" in element);
	verify(element.DOCUMENT_POSITION_PRECEDING == 0x02);

	verify("DOCUMENT_POSITION_FOLLOWING" in element);
	verify(element.DOCUMENT_POSITION_FOLLOWING == 0x04);

	verify("DOCUMENT_POSITION_CONTAINS" in element);
	verify(element.DOCUMENT_POSITION_CONTAINS == 0x08);

	verify("DOCUMENT_POSITION_CONTAINED_BY" in element);
	verify(element.DOCUMENT_POSITION_CONTAINED_BY == 0x10);

	verify("DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC" in element);
	verify(element.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC == 0x20);

	var attribute = document.createAttribute("bar"); // Another random node
	verify(attribute);

	verify("DOCUMENT_POSITION_DISCONNECTED" in attribute);
	verify(attribute.DOCUMENT_POSITION_DISCONNECTED == 0x01);

	verify("DOCUMENT_POSITION_PRECEDING" in attribute);
	verify(attribute.DOCUMENT_POSITION_PRECEDING == 0x02);

	verify("DOCUMENT_POSITION_FOLLOWING" in attribute);
	verify(attribute.DOCUMENT_POSITION_FOLLOWING == 0x04);

	verify("DOCUMENT_POSITION_CONTAINS" in attribute);
	verify(attribute.DOCUMENT_POSITION_CONTAINS == 0x08);

	verify("DOCUMENT_POSITION_CONTAINED_BY" in attribute);
	verify(attribute.DOCUMENT_POSITION_CONTAINED_BY == 0x10);

	verify("DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC" in attribute);
	verify(attribute.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC == 0x20);

	// The "Node" object, don't know if this is correct
	verify("DOCUMENT_POSITION_DISCONNECTED" in Node);
	verify(Node.DOCUMENT_POSITION_DISCONNECTED == 0x01);

	verify("DOCUMENT_POSITION_PRECEDING" in Node);
	verify(Node.DOCUMENT_POSITION_PRECEDING == 0x02);

	verify("DOCUMENT_POSITION_FOLLOWING" in Node);
	verify(Node.DOCUMENT_POSITION_FOLLOWING == 0x04);

	verify("DOCUMENT_POSITION_CONTAINS" in Node);
	verify(Node.DOCUMENT_POSITION_CONTAINS == 0x08);

	verify("DOCUMENT_POSITION_CONTAINED_BY" in Node);
	verify(Node.DOCUMENT_POSITION_CONTAINED_BY == 0x10);

	verify("DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC" in Node);
	verify(Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC == 0x20);
}

html
{
	"<html><body attr1='foo' attr2='bar'><h1 attr3='fum'>Header</h1><h2></h2></body></html>"
}

test("Element comparisons#0")
{
	var elm1 = document.createElement("p");
	verify("compareDocumentPosition" in elm1);
	var result = elm1.compareDocumentPosition(elm1);
	verify(result == 0);
}

test("Element comparisons#1")
{
	var elm1 = document.createElement("p");
	var elm2 = document.createElement("p");

	verify(elm1);
	verify(elm2);

	verify("compareDocumentPosition" in elm1);
	var result = elm2.compareDocumentPosition(elm1);
	verify(result & elm1.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
	verify(!(result & elm1.DOCUMENT_POSITION_CONTAINED_BY));
	verify(!(result & elm1.DOCUMENT_POSITION_CONTAINS));
	verify(result & elm1.DOCUMENT_POSITION_DISCONNECTED);
	var follows = result & elm1.DOCUMENT_POSITION_FOLLOWING;
	if (follows)
	{
		verify(!(result & elm1.DOCUMENT_POSITION_PRECEDING));
	}
	else
		verify(result & elm1.DOCUMENT_POSITION_PRECEDING);

	// Now reverse the comparison
	result = elm1.compareDocumentPosition(elm2);
	verify(result & elm1.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
	verify(!(result & elm1.DOCUMENT_POSITION_CONTAINED_BY));
	verify(!(result & elm1.DOCUMENT_POSITION_CONTAINS));
	verify(result & elm1.DOCUMENT_POSITION_DISCONNECTED);
	if (follows)
	{
		verify(result & elm1.DOCUMENT_POSITION_PRECEDING);
	}
	else
		verify(!(result & elm1.DOCUMENT_POSITION_PRECEDING));
}

test("Element comparisons#2")
{
	var h1 = document.getElementsByTagName("h1")[0];
	var h2 = document.getElementsByTagName("h2")[0];

	verify(h1);
	verify(h2);

	var result = h2.compareDocumentPosition(h1);
	verify(result == h1.DOCUMENT_POSITION_PRECEDING);
	result = h1.compareDocumentPosition(h2);
	verify(result == h1.DOCUMENT_POSITION_FOLLOWING);
}

test("Element comparisons#3")
{
	var elm1 = document.createElement("p");
	var h1 = document.getElementsByTagName("h1")[0];

	verify(h1);
	verify(elm1);

	verify("compareDocumentPosition" in h1);
	var result = h1.compareDocumentPosition(elm1);
	verify(result & elm1.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
	verify(!(result & elm1.DOCUMENT_POSITION_CONTAINED_BY));
	verify(!(result & elm1.DOCUMENT_POSITION_CONTAINS));
	verify(result & elm1.DOCUMENT_POSITION_DISCONNECTED);
	var follows = result & elm1.DOCUMENT_POSITION_FOLLOWING;
	if (follows)
	{
		verify(!(result & elm1.DOCUMENT_POSITION_PRECEDING));
	}
	else
		verify(result & elm1.DOCUMENT_POSITION_PRECEDING);

	// Now reverse the comparison
	result = elm1.compareDocumentPosition(h1);
	verify(result & elm1.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
	verify(!(result & elm1.DOCUMENT_POSITION_CONTAINED_BY));
	verify(!(result & elm1.DOCUMENT_POSITION_CONTAINS));
	verify(result & elm1.DOCUMENT_POSITION_DISCONNECTED);
	if (follows)
	{
		verify(result & elm1.DOCUMENT_POSITION_PRECEDING);
	}
	else
		verify(!(result & elm1.DOCUMENT_POSITION_PRECEDING));
}

test("Element comparisons#4")
{
	var h1 = document.getElementsByTagName("h1")[0];
	var h2 = document.getElementsByTagName("h2")[0];
	var body = document.body;

	verify(h1);
	verify(body);

	var result = h1.compareDocumentPosition(body);
	verify(result == h1.DOCUMENT_POSITION_CONTAINED_BY | h1.DOCUMENT_POSITION_FOLLOWING);
	result = body.compareDocumentPosition(h1);
	verify(result == h1.DOCUMENT_POSITION_PRECEDING | h1.DOCUMENT_POSITION_CONTAINS);
}

test("Element-Text comparisons#1")
{
	var h1 = document.getElementsByTagName("h1")[0];
	verify(h1);
	var text = h1.firstChild;
	verify(text);

	var result = text.compareDocumentPosition(h1);
	verify(result == h1.DOCUMENT_POSITION_CONTAINED_BY | h1.DOCUMENT_POSITION_FOLLOWING);
	result = h1.compareDocumentPosition(text);
	verify(result == h1.DOCUMENT_POSITION_PRECEDING | h1.DOCUMENT_POSITION_CONTAINS);
}


test("Element-Document comparisons#1")
{
	var body = document.body;

	verify(document);
	verify(body);

	var result = body.compareDocumentPosition(document);
	verify(result == document.DOCUMENT_POSITION_PRECEDING | document.DOCUMENT_POSITION_CONTAINS);
	result = document.compareDocumentPosition(body);
	verify(result == document.DOCUMENT_POSITION_CONTAINED_BY | document.DOCUMENT_POSITION_FOLLOWING);
}

test("Attribute comparisons#1")
{
	var body = document.body;
	verify(body);
	verify(body.attributes.length == 2);
	var attr1 = body.attributes[0];
	var attr2 = body.attributes[1];

	verify("compareDocumentPosition" in attr1);
	var result = attr1.compareDocumentPosition(attr1);
	verify(result == 0); // Self comparison

	result = attr2.compareDocumentPosition(attr1);
	verify(result == attr1.DOCUMENT_POSITION_PRECEDING | Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);

	// Now reverse the comparison
	result = attr1.compareDocumentPosition(attr2);
	verify(result == attr2.DOCUMENT_POSITION_FOLLOWING | Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
}

test("Attribute comparisons#2")
{
	var body = document.body;
	verify(body);
	verify(body.attributes.length == 2);
	var attr1 = body.attributes[0];
	var attr2 = body.attributes[1];

	var h1 = document.getElementsByTagName("h1")[0];
	verify(h1);
	verify(h1.attributes.length == 1);
	var h1_attr = h1.attributes[0];
	verify(h1_attr);

	verify("compareDocumentPosition" in attr1);
	var result = h1_attr.compareDocumentPosition(attr1);
	verify(result == attr1.DOCUMENT_POSITION_PRECEDING);

	// Now reverse the comparison
	result = attr1.compareDocumentPosition(h1_attr);
	verify(result == attr2.DOCUMENT_POSITION_FOLLOWING);
}


test("Attribute-Element comparisons#1")
{
	var body = document.body;
	verify(body);
	verify(body.attributes.length == 2);
	var attr1 = body.attributes[0];
	var attr2 = body.attributes[1];

	verify("compareDocumentPosition" in attr1);

	var result = attr1.compareDocumentPosition(body);
	verify(result == attr1.DOCUMENT_POSITION_PRECEDING | attr1.DOCUMENT_POSITION_CONTAINS);

	// Now reverse the comparison
	result = body.compareDocumentPosition(attr1);
	verify(result == attr1.DOCUMENT_POSITION_FOLLOWING | attr1.DOCUMENT_POSITION_CONTAINED_BY);
}

test("Attribute-Element comparisons#2")
{
	var body = document.body;
	verify(body);
	verify(body.attributes.length == 2);
	var attr1 = body.attributes[0];
	var attr2 = body.attributes[1];

	var h1 = document.getElementsByTagName("h1")[0];
	verify(h1);

	verify("compareDocumentPosition" in attr1);

	var result = attr1.compareDocumentPosition(h1);
	verify(result == attr1.DOCUMENT_POSITION_FOLLOWING);

	// Now reverse the comparison
	result = h1.compareDocumentPosition(attr1);
	verify(result == attr1.DOCUMENT_POSITION_PRECEDING);
}

xml
{
	"<!DOCTYPE foo [<!NOTATION myNotation SYSTEM 'hej'> <!NOTATION myOtherNotation SYSTEM 'hej2'> <!ENTITY myEntity 'hipphipp'>]>"
	"<foo/>"
}

test("Entity-Notation comparison#1")
	require DOM_SUPPORT_NOTATION;
	require DOM_SUPPORT_ENTITY;
{
	verify(document.doctype);
	verify(document.doctype.entities.length >= 1);
	verify(document.doctype.notations.length >= 1);
	var notation = document.doctype.notations[0];
	var entity = document.doctype.entities[0];
	verify(notation);
	verify(entity);
	var result = notation.compareDocumentPosition(entity);
	verify(result == Node.DOCUMENT_POSITION_FOLLOWING);

	result = entity.compareDocumentPosition(notation);
	verify(result == Node.DOCUMENT_POSITION_PRECEDING);
}

test("Entity-Doctype comparison#1")
	require DOM_SUPPORT_ENTITY;
{
	verify(document.doctype);
	verify(document.doctype.entities.length >= 1);
	var entity = document.doctype.entities[0];
	verify(entity);
	var result = document.doctype.compareDocumentPosition(entity);
	verify(result == Node.DOCUMENT_POSITION_CONTAINED_BY | Node.DOCUMENT_POSITION_FOLLOWING);

	result = entity.compareDocumentPosition(document.doctype);
	verify(result == Node.DOCUMENT_POSITION_CONTAINS | Node.DOCUMENT_POSITION_PRECEDING);
}

test("Notation-Doctype comparison#1")
	require DOM_SUPPORT_NOTATION;
{
	verify(document.doctype);
	verify(document.doctype.notations.length >= 1);
	var notation = document.doctype.notations[0];
	verify(notation);
	var result = document.doctype.compareDocumentPosition(notation);
	verify(result == Node.DOCUMENT_POSITION_CONTAINED_BY | Node.DOCUMENT_POSITION_FOLLOWING);

	result = notation.compareDocumentPosition(document.doctype);
	verify(result == Node.DOCUMENT_POSITION_CONTAINS | Node.DOCUMENT_POSITION_PRECEDING);
}

test("Entity-Document comparison#1")
	require DOM_SUPPORT_ENTITY;
{
	verify(document.doctype);
	verify(document.doctype.entities.length >= 1);
	var entity = document.doctype.entities[0];
	verify(entity);
	var result = document.compareDocumentPosition(entity);
	verify(result == Node.DOCUMENT_POSITION_CONTAINED_BY | Node.DOCUMENT_POSITION_FOLLOWING);

	result = entity.compareDocumentPosition(document);
	verify(result == Node.DOCUMENT_POSITION_CONTAINS | Node.DOCUMENT_POSITION_PRECEDING);
}

test("Entity-Entity comparison#1")
	require DOM_SUPPORT_ENTITY;
{
	verify(document.doctype);
	verify(document.doctype.entities.length >= 2);
	var entity1 = document.doctype.entities[0];
	verify(entity1);
	var entity2 = document.doctype.entities[1];
	verify(entity2);
	var result = entity1.compareDocumentPosition(entity2);
	verify (result | Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
}

test("Notation-Notation comparison#1")
	require DOM_SUPPORT_NOTATION;
{
	verify(document.doctype);
	verify(document.doctype.notations.length >= 2);
	var notation1 = document.doctype.notations[0];
	verify(notation1);
	var notation2 = document.doctype.notations[1];
	verify(notation2);
	var result = notation1.compareDocumentPosition(notation2);
	verify (result | Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);
}

test("Entity-TextChild comparison#1")
	require DOM_SUPPORT_ENTITY;
{
	verify(document.doctype);
	verify(document.doctype.entities.length >= 1);
	// The first entities have no child. Don't know if that's a bug?
	var entity = document.doctype.entities[document.doctype.entities.length-1];
	verify(entity);
	var text = entity.firstChild;
	verify(text);
	var result = entity.compareDocumentPosition(text);
	verify(result == Node.DOCUMENT_POSITION_CONTAINED_BY | Node.DOCUMENT_POSITION_FOLLOWING);

	result = text.compareDocumentPosition(entity);
	verify(result == Node.DOCUMENT_POSITION_CONTAINS | Node.DOCUMENT_POSITION_PRECEDING);
}
