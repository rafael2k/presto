group "DOM.Core.Node.properties";
require init;

include "modules/dom/src/domenvironmentimpl.h";
include "modules/dom/src/domcore/domdoc.h";
include "modules/dom/src/domcore/element.h";
include "modules/dom/src/domcore/text.h";
include "modules/dom/src/domcore/comment.h";
include "modules/dom/src/domcore/cdatasection.h";
include "modules/dom/src/domcore/docfrag.h";
include "modules/dom/src/domhtml/htmlelem.h";
include "modules/doc/frm_doc.h";
include "modules/logdoc/htm_elm.h";

language ecmascript;

html "";

test("Node constants")
{
  verify(Node.ELEMENT_NODE == 1);
  verify(Node.ATTRIBUTE_NODE == 2);
  verify(Node.TEXT_NODE == 3);
  verify(Node.CDATA_SECTION_NODE == 4);
  verify(Node.ENTITY_REFERENCE_NODE == 5);
  verify(Node.ENTITY_NODE == 6);
  verify(Node.PROCESSING_INSTRUCTION_NODE == 7);
  verify(Node.COMMENT_NODE == 8);
  verify(Node.DOCUMENT_NODE == 9);
  verify(Node.DOCUMENT_TYPE_NODE == 10);
  verify(Node.DOCUMENT_FRAGMENT_NODE == 11);
  verify(Node.NOTATION_NODE == 12);
}

test("Setup #1 (c++)")
  language c++;
{
  verify(state.doc != NULL);

  verify_success(state.doc->ConstructDOMEnvironment());

  DOM_EnvironmentImpl *environment = (DOM_EnvironmentImpl *) state.doc->GetDOMEnvironment();
  verify(environment != NULL);
  verify(environment->ConstructDocumentNode() == OpStatus::OK);

  DOM_Object *window = environment->GetWindow();
  verify(window != NULL);

  DOM_Document *doc;
  DOM_Document::Make(doc, ((DOM_Document *) environment->GetDocument())->GetDOMImplementation(), TRUE);
  window->Put(UNI_L("doc"), *doc);

  DOM_DocumentFragment *docfrag;
  DOM_DocumentFragment::Make(docfrag, doc);
  window->Put(UNI_L("docfrag"), *docfrag);

  DOM_HTMLElement *html_node, *body_node, *div1_node, *div2_node, *div3_node, *div4_node, *div5_node, *div6_node;

  DOM_HTMLElement::CreateElement(html_node, doc, UNI_L("html"));
  window->Put(UNI_L("html"), *html_node);

  DOM_HTMLElement::CreateElement(body_node, doc, UNI_L("body"));
  window->Put(UNI_L("body"), *body_node);

  DOM_HTMLElement::CreateElement(div1_node, doc, UNI_L("div"));
  window->Put(UNI_L("div1"), *div1_node);

  DOM_HTMLElement::CreateElement(div2_node, doc, UNI_L("div"));
  window->Put(UNI_L("div2"), *div2_node);

  DOM_HTMLElement::CreateElement(div3_node, doc, UNI_L("div"));
  window->Put(UNI_L("div3"), *div3_node);

  DOM_HTMLElement::CreateElement(div4_node, doc, UNI_L("div"));
  window->Put(UNI_L("div4"), *div4_node);

  DOM_HTMLElement::CreateElement(div5_node, doc, UNI_L("div"));
  window->Put(UNI_L("div5"), *div5_node);

  DOM_HTMLElement::CreateElement(div6_node, doc, UNI_L("div"));
  window->Put(UNI_L("div6"), *div6_node);

  DOM_Text *text_node;
  DOM_Text::Make(text_node, doc, UNI_L("This is a Text node."));
  window->Put(UNI_L("text"), *text_node);

  DOM_Comment *comment_node;
  DOM_Comment::Make(comment_node, doc, UNI_L("This is a Comment node."));
  window->Put(UNI_L("comment"), *comment_node);

  DOM_CDATASection *cdatasection_node;
  DOM_CDATASection::Make(cdatasection_node, doc, UNI_L("This is a CDATASection node."));
  window->Put(UNI_L("cdatasection"), *cdatasection_node);

  doc->InsertChild(html_node, NULL, environment->GetDOMRuntime());
  html_node->InsertChild(body_node, NULL, environment->GetDOMRuntime());
  body_node->InsertChild(div1_node, NULL, environment->GetDOMRuntime());
  body_node->InsertChild(div2_node, NULL, environment->GetDOMRuntime());
  body_node->InsertChild(div3_node, NULL, environment->GetDOMRuntime());

  div1_node->InsertChild(text_node, NULL, environment->GetDOMRuntime());
  div2_node->InsertChild(comment_node, NULL, environment->GetDOMRuntime());
  div3_node->InsertChild(cdatasection_node, NULL, environment->GetDOMRuntime());

  docfrag->InsertChild(div4_node, NULL, environment->GetDOMRuntime());
  docfrag->InsertChild(div5_node, NULL, environment->GetDOMRuntime());
  docfrag->InsertChild(div6_node, NULL, environment->GetDOMRuntime());
}

test("Setup #1")
{
  /* Use Object.prototype.toString explicitly.  Who knows, these darn
     DOM objects might provide their own sneaky implementations of
     "toString". */
  getClass = function getClass(obj)
  {
    return Object.prototype.toString.apply(obj).slice(8, -1);
  }

  checkProperties_HasProperty = function checkProperties_HasProperty(node, properties)
  {
    for (var index = 0; index < properties.length; ++index)
      if (!(properties[index] in node))
        throw "HasProperty: '" + properties[index] + "' not found";
    return true;
  }

  checkProperties_Enumerate = function checkProperties_Enumerate(node, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in node)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  checkProperties_Get = function checkProperties_Get(node, properties, values)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in values))
        throw "Get: INCORRECT TEST: " + properties[index] + " not in values";
      if (!(node[properties[index]] == values[properties[index]]))
        throw "Get: '" + properties[index] + "' wrong, is '" + node[properties[index]] + "', should be '" + values[properties[index]] + "'";
    }
    return true;
  }

  checkProperties_Put = function checkProperties_Put(node, properties, values)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in values))
        throw "Put: INCORRECT TEST: " + properties[index] + " not in values";
      var error = null;
      try
      {
        old_value = node[properties[index]];
        node[properties[index]] = values[properties[index]];
        if (!(node[properties[index]] != old_value))
          error = "Put: '" + properties[index] + "' didn't change value";
        if (!(node[properties[index]] == values[properties[index]]))
          error = "Put: '" + properties[index] + "' changed to the wrong value";
      }
      catch(e)
      {
        error = "Put: '" + properties[index] + "' threw exception";
      }
      if (error != null)
        throw error;
    }
    return true;
  }

  checkProperties_PutIgnored = function checkProperties_PutIgnored(node, properties)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      var error = null;
      var new_value = null;
      var old_value = null;
      try
      {
        old_value = node[properties[index]];
        if (typeof(old_value) == "string" || old_value == null)
          new_value = old_value == "foo" ? "bar" : "foo";
        else if (typeof(old_value) == "number")
          new_value = old_value == 10 ? 20 : 10;
        else if (typeof(old_value) == "boolean")
          new_value = !old_value;
        node[properties[index]] = new_value;
        if (!(node[properties[index]] == old_value))
          error = "PutIgnored: '" + properties[index] + "' changed value";
      }
      catch(e)
      {
        if (!(node[properties[index]] == old_value))
          error = "PutIgnored: '" + properties[index] + "' threw exception and changed value";
        else
          error = "PutIgnored: '" + properties[index] + "' threw exception";
      }
      if (error != null)
        throw error;
    }
    return true;
  }

  checkProperties_PutNotAllowed = function checkProperties_PutNotAllowed(node, properties)
  {
    "use strict";
    for (var index = 0; index < properties.length; ++index)
    {
      var error = null;
      var new_value = null;
      var old_value = null;
      try
      {
        old_value = node[properties[index]];
        if (typeof(old_value) == "string")
          new_value = 10;
        else
          new_value = "foo";
        node[properties[index]] = new_value;
        if (!(node[properties[index]] == old_value))
          error = "PutNotAllowed: '" + properties[index] + "' changed value and didn't throw exception";
        else
          error = "PutNotAllowed: '" + properties[index] + "' didn't throw exception";
      }
      catch(e)
      {
        if (!(e instanceof TypeError))
          error = "PutNotAllowed: '" + properties[index] + "' threw exception other than TypeError";
        else
          if (!(node[properties[index]] == old_value))
            error = "PutNotAllowed: '" + properties[index] + "' threw exception but changed value";
      }
      if (error != null)
        throw error;
    }
    return true;
  }

  all_properties = [ "nodeName", "nodeValue", "nodeType", "parentNode", "childNodes", "firstChild", "lastChild", "previousSibling",
                     "nextSibling", "attributes", "ownerDocument", "namespaceURI", "prefix", "localName", "baseURI" ];
  simple_properties = [ "nodeName", "nodeValue", "nodeType", "parentNode", "firstChild", "lastChild", "previousSibling",
                        "nextSibling", "ownerDocument", "namespaceURI", "prefix", "localName" ];
  putnotallowed_properties = [ "nodeName", "nodeType", "parentNode", "childNodes", "firstChild", "lastChild", "previousSibling",
                               "nextSibling", "attributes", "ownerDocument", "namespaceURI", "localName" ];
  putignored_properties = [ "nodeValue", "prefix" ];

  /* Workaround for a bug in the ECMAScript engine: the 'in' operator
     sometimes doesn't work for properties on host objects because the
     engine optimizes away the lookup if it hasn't seen the name used
     as a property name before.  So we use them all as property names
     here to make sure the engine has seen them. */
  var identifiers = {
    nodeName: null,
    nodeValue: null,
    nodeType: null,
    parentNode: null,
    childNodes: null,
    firstChild: null,
    lastChild: null,
    previousSibling: null,
    nextSibling: null,
    attributes: null,
    ownerDocument: null,
    namespaceURI: null,
    prefix: null,
    localName: null
  };
}

test("HasProperty #1: Document")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(doc, all_properties);
  checkProperties_Enumerate(doc, all_properties);
}

test("HasProperty #1: DocumentFragment")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(docfrag, all_properties);
  checkProperties_Enumerate(docfrag, all_properties);
}

test("HasProperty #1: Element (html)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(html, all_properties);
  checkProperties_Enumerate(html, all_properties);
}

test("HasProperty #1: Element (body)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(body, all_properties);
  checkProperties_Enumerate(body, all_properties);
}

test("HasProperty #1: Element (div1)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(div1, all_properties);
  checkProperties_Enumerate(div1, all_properties);
}

test("HasProperty #1: Element (div2)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(div2, all_properties);
  checkProperties_Enumerate(div2, all_properties);
}

test("HasProperty #1: Element (div3)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(div3, all_properties);
  checkProperties_Enumerate(div3, all_properties);
}

test("HasProperty #1: Text")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(text, all_properties);
  checkProperties_Enumerate(text, all_properties);
}

test("HasProperty #1: Comment")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(comment, all_properties);
  checkProperties_Enumerate(comment, all_properties);
}

test("HasProperty #1: CDATASection")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(cdatasection, all_properties);
  checkProperties_Enumerate(cdatasection, all_properties);
}

test("HasProperty #1: Element (div4)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(div4, all_properties);
  checkProperties_Enumerate(div4, all_properties);
}

test("HasProperty #1: Element (div5)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(div5, all_properties);
  checkProperties_Enumerate(div5, all_properties);
}

test("HasProperty #1: Element (div6)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
{
  checkProperties_HasProperty(div6, all_properties);
  checkProperties_Enumerate(div6, all_properties);
}

test("Get #1: Document")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_Get(doc, simple_properties,
                      { nodeName: "#document",
                        nodeValue: null,
                        nodeType: Node.DOCUMENT_NODE,
                        parentNode: null,
                        firstChild: html,
                        lastChild: html,
                        previousSibling: null,
                        nextSibling: null,
                        ownerDocument: null,
                        namespaceURI: null,
                        prefix: null,
                        localName: null });
  verify(getClass(doc.childNodes) == "NodeList");
  verify(doc.attributes == null);
}

test("Get #1: DocumentFragment")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_Get(docfrag, simple_properties,
                      { nodeName: "#document-fragment",
                        nodeValue: null,
                        nodeType: Node.DOCUMENT_FRAGMENT_NODE,
                        parentNode: null,
                        firstChild: div4,
                        lastChild: div6,
                        previousSibling: null,
                        nextSibling: null,
                        ownerDocument: doc,
                        namespaceURI: null,
                        prefix: null,
                        localName: null });
  verify(getClass(docfrag.childNodes) == "NodeList");
  verify(docfrag.attributes == null);
}

test("Get #1: Element (html)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_Get(html, simple_properties,
                      { nodeName: "HTML",
                        nodeValue: null,
                        nodeType: Node.ELEMENT_NODE,
                        parentNode: doc,
                        firstChild: body,
                        lastChild: body,
                        previousSibling: null,
                        nextSibling: null,
                        ownerDocument: doc,
                        namespaceURI: "http://www.w3.org/1999/xhtml",
                        prefix: null,
                        localName: "html" });
  verify(getClass(html.childNodes) == "NodeList");
  verify(getClass(html.attributes) == "NamedNodeMap");
}

test("Get #1: Element (body)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_Get(body, simple_properties,
                      { nodeName: "BODY",
                        nodeValue: null,
                        nodeType: Node.ELEMENT_NODE,
                        parentNode: html,
                        firstChild: div1,
                        lastChild: div3,
                        previousSibling: null,
                        nextSibling: null,
                        ownerDocument: doc,
                        namespaceURI: "http://www.w3.org/1999/xhtml",
                        prefix: null,
                        localName: "body" });
  verify(getClass(html.childNodes) == "NodeList");
  verify(getClass(html.attributes) == "NamedNodeMap");
}

test("Get #1: Element (div1)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_Get(div1, simple_properties,
                      { nodeName: "DIV",
                        nodeValue: null,
                        nodeType: Node.ELEMENT_NODE,
                        parentNode: body,
                        firstChild: text,
                        lastChild: text,
                        previousSibling: null,
                        nextSibling: div2,
                        ownerDocument: doc,
                        namespaceURI: "http://www.w3.org/1999/xhtml",
                        prefix: null,
                        localName: "div" });
  verify(getClass(html.childNodes) == "NodeList");
  verify(getClass(html.attributes) == "NamedNodeMap");
}

test("Get #1: Element (div2)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_Get(div2, simple_properties,
                      { nodeName: "DIV",
                        nodeValue: null,
                        nodeType: Node.ELEMENT_NODE,
                        parentNode: body,
                        firstChild: comment,
                        lastChild: comment,
                        previousSibling: div1,
                        nextSibling: div3,
                        ownerDocument: doc,
                        namespaceURI: "http://www.w3.org/1999/xhtml",
                        prefix: null,
                        localName: "div" });
  verify(getClass(html.childNodes) == "NodeList");
  verify(getClass(html.attributes) == "NamedNodeMap");
}

test("Get #1: Element (div3)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_Get(div3, simple_properties,
                      { nodeName: "DIV",
                        nodeValue: null,
                        nodeType: Node.ELEMENT_NODE,
                        parentNode: body,
                        firstChild: cdatasection,
                        lastChild: cdatasection,
                        previousSibling: div2,
                        nextSibling: null,
                        ownerDocument: doc,
                        namespaceURI: "http://www.w3.org/1999/xhtml",
                        prefix: null,
                        localName: "div" });
  verify(getClass(html.childNodes) == "NodeList");
  verify(getClass(html.attributes) == "NamedNodeMap");
}

test("Get #1: Element (div4)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_Get(div4, simple_properties,
                      { nodeName: "DIV",
                        nodeValue: null,
                        nodeType: Node.ELEMENT_NODE,
                        parentNode: docfrag,
                        firstChild: null,
                        lastChild: null,
                        previousSibling: null,
                        nextSibling: div5,
                        ownerDocument: doc,
                        namespaceURI: "http://www.w3.org/1999/xhtml",
                        prefix: null,
                        localName: "div" });
  verify(getClass(html.childNodes) == "NodeList");
  verify(getClass(html.attributes) == "NamedNodeMap");
}

test("Get #1: Element (div5)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_Get(div5, simple_properties,
                      { nodeName: "DIV",
                        nodeValue: null,
                        nodeType: Node.ELEMENT_NODE,
                        parentNode: docfrag,
                        firstChild: null,
                        lastChild: null,
                        previousSibling: div4,
                        nextSibling: div6,
                        ownerDocument: doc,
                        namespaceURI: "http://www.w3.org/1999/xhtml",
                        prefix: null,
                        localName: "div" });
  verify(getClass(html.childNodes) == "NodeList");
  verify(getClass(html.attributes) == "NamedNodeMap");
}

test("Get #1: Element (div6)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_Get(div6, simple_properties,
                      { nodeName: "DIV",
                        nodeValue: null,
                        nodeType: Node.ELEMENT_NODE,
                        parentNode: docfrag,
                        firstChild: null,
                        lastChild: null,
                        previousSibling: div5,
                        nextSibling: null,
                        ownerDocument: doc,
                        namespaceURI: "http://www.w3.org/1999/xhtml",
                        prefix: null,
                        localName: "div" });
  verify(getClass(html.childNodes) == "NodeList");
  verify(getClass(html.attributes) == "NamedNodeMap");
}

test("Get #1: Text")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_Get(text, simple_properties,
                      { nodeName: "#text",
                        nodeValue: "This is a Text node.",
                        nodeType: Node.TEXT_NODE,
                        parentNode: div1,
                        firstChild: null,
                        lastChild: null,
                        previousSibling: null,
                        nextSibling: null,
                        ownerDocument: doc,
                        namespaceURI: null,
                        prefix: null,
                        localName: null });
  verify(getClass(text.childNodes) == "NodeList");
  verify(text.attributes == null);
}

test("Get #1: Comment")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_Get(comment, simple_properties,
                      { nodeName: "#comment",
                        nodeValue: "This is a Comment node.",
                        nodeType: Node.COMMENT_NODE,
                        parentNode: div2,
                        firstChild: null,
                        lastChild: null,
                        previousSibling: null,
                        nextSibling: null,
                        ownerDocument: doc,
                        namespaceURI: null,
                        prefix: null,
                        localName: null });
  verify(getClass(comment.childNodes) == "NodeList");
  verify(comment.attributes == null);
}

test("Get #1: CDATASection")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_Get(cdatasection, simple_properties,
                      { nodeName: "#cdata-section",
                        nodeValue: "This is a CDATASection node.",
                        nodeType: Node.CDATA_SECTION_NODE,
                        parentNode: div3,
                        firstChild: null,
                        lastChild: null,
                        previousSibling: null,
                        nextSibling: null,
                        ownerDocument: doc,
                        namespaceURI: null,
                        prefix: null,
                        localName: null });
  verify(getClass(cdatasection.childNodes) == "NodeList");
  verify(cdatasection.attributes == null);
}

test("Put #1: Document")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(doc, putnotallowed_properties);
  checkProperties_PutIgnored(doc, putignored_properties);
}

test("Put #1: DocumentFragment")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(docfrag, putnotallowed_properties);
  checkProperties_PutIgnored(docfrag, putignored_properties);
}

test("Put #1: Element (html)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(html, putnotallowed_properties);
  checkProperties_PutIgnored(html, putignored_properties);
}

test("Put #1: Element (body)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(body, putnotallowed_properties);
  checkProperties_PutIgnored(body, putignored_properties);
}

test("Put #1: Element (div1)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(div1, putnotallowed_properties);
  checkProperties_PutIgnored(div1, putignored_properties);
}

test("Put #1: Element (div2)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(div2, putnotallowed_properties);
  checkProperties_PutIgnored(div2, putignored_properties);
}

test("Put #1: Element (div3)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(div3, putnotallowed_properties);
  checkProperties_PutIgnored(div3, putignored_properties);
}

test("Put #1: Element (div4)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(div4, putnotallowed_properties);
  checkProperties_PutIgnored(div4, putignored_properties);
}

test("Put #1: Element (div5)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(div5, putnotallowed_properties);
  checkProperties_PutIgnored(div5, putignored_properties);
}

test("Put #1: Element (div6)")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(div6, putnotallowed_properties);
  checkProperties_PutIgnored(div6, putignored_properties);
}

test("Put #1: Text")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(text, putnotallowed_properties);
  checkProperties_PutIgnored(text, ["prefix"]);
  checkProperties_Put(text, ["nodeValue"], { nodeValue: "new value" });
}

test("Put #1: Comment")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(comment, putnotallowed_properties);
  checkProperties_PutIgnored(comment, ["prefix"]);
  checkProperties_Put(comment, ["nodeValue"], { nodeValue: "new value" });
}

test("Put #1: CDATASection")
  require success "Setup #1 (c++)";
  require success "Setup #1";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(cdatasection, putnotallowed_properties);
  checkProperties_PutIgnored(cdatasection, ["prefix"]);
  checkProperties_Put(cdatasection, ["nodeValue"], { nodeValue: "new value" });
}

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "This is a Text node."
      "</div>"
      "<div>"
        "<!--This is a Comment node.-->"
      "</div>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Setup #2 (c++)")
  language c++;
{
  verify(state.doc != NULL);

  verify_success(state.doc->ConstructDOMEnvironment());

  DOM_EnvironmentImpl *environment = (DOM_EnvironmentImpl *) state.doc->GetDOMEnvironment();
  verify(environment != NULL);
  verify(environment->ConstructDocumentNode() == OpStatus::OK);

  DOM_Document *document = (DOM_Document *) environment->GetDocument();
  DOM_Object *window = environment->GetWindow();
  verify(window != NULL);

  DOM_Node *html, *head, *body, *div1, *div2, *div3, *text, *comment;
  HTML_Element *element;

  html = environment->GetRootElement();
  verify(html != NULL);

  element = html->GetThisElement();
  verify(element->Type() == HE_HTML);

  element = element->FirstChildActual();
  verify(element != NULL);
  verify(element->Type() == HE_HEAD);
  environment->ConstructNode(head, element, document);

  element = element->SucActual();
  verify(element != NULL);
  verify(element->Type() == HE_BODY);
  environment->ConstructNode(body, element, document);

  element = element->FirstChildActual();
  verify(element != NULL);
  verify(element->Type() == HE_DIV);
  environment->ConstructNode(div1, element, document);

  element = element->FirstChildActual();
  verify(element != NULL);
  verify(element->Type() == HE_TEXT);
  environment->ConstructNode(text, element, document);

  element = element->ParentActual()->SucActual();
  verify(element != NULL);
  verify(element->Type() == HE_DIV);
  environment->ConstructNode(div2, element, document);

  element = element->FirstChildActual();
  verify(element != NULL);
  verify(element->Type() == HE_COMMENT);
  environment->ConstructNode(comment, element, document);

  element = element->ParentActual()->SucActual();
  verify(element != NULL);
  verify(element->Type() == HE_DIV);
  environment->ConstructNode(div3, element, document);

  window->Put(UNI_L("html"), *html);
  window->Put(UNI_L("head"), *head);
  window->Put(UNI_L("body"), *body);
  window->Put(UNI_L("div1"), *div1);
  window->Put(UNI_L("div2"), *div2);
  window->Put(UNI_L("div3"), *div3);
  window->Put(UNI_L("text"), *text);
  window->Put(UNI_L("comment"), *comment);
}

test("Setup #2")
{
  /* Use Object.prototype.toString explicitly.  Who knows, these darn
     DOM objects might provide their own sneaky implementations of
     "toString". */
  getClass = function getClass(obj)
  {
    return Object.prototype.toString.apply(obj).slice(8, -1);
  }

  checkProperties_HasProperty = function checkProperties_HasProperty(node, properties)
  {
    for (var index = 0; index < properties.length; ++index)
      if (!(properties[index] in node))
        throw "HasProperty: '" + properties[index] + "' not found";
    return true;
  }

  checkProperties_Enumerate = function checkProperties_Enumerate(node, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in node)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  checkProperties_Get = function checkProperties_Get(node, properties, values)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in values))
        throw "Get: INCORRECT TEST: " + properties[index] + " not in values";
      if (!(node[properties[index]] == values[properties[index]]))
        throw "Get: '" + properties[index] + "' wrong, is '" + node[properties[index]] + "', should be '" + values[properties[index]] + "'";
    }
    return true;
  }

  checkProperties_Put = function checkProperties_Put(node, properties, values)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in values))
        throw "Put: INCORRECT TEST: " + properties[index] + " not in values";
      var error = null;
      try
      {
        old_value = node[properties[index]];
        node[properties[index]] = values[properties[index]];
        if (!(node[properties[index]] != old_value))
          error = "Put: '" + properties[index] + "' didn't change value";
        if (!(node[properties[index]] == values[properties[index]]))
          error = "Put: '" + properties[index] + "' changed to the wrong value";
      }
      catch(e)
      {
        error = "Put: '" + properties[index] + "' threw exception";
      }
      if (error != null)
        throw error;
    }
    return true;
  }

  checkProperties_PutIgnored = function checkProperties_PutIgnored(node, properties)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      var error = null;
      var new_value = null;
      var old_value = null;
      try
      {
        old_value = node[properties[index]];
        if (typeof(old_value) == "string" || old_value == null)
          new_value = old_value == "foo" ? "bar" : "foo";
        else if (typeof(old_value) == "number")
          new_value = old_value == 10 ? 20 : 10;
        else if (typeof(old_value) == "boolean")
          new_value = !old_value;
        node[properties[index]] = new_value;
        if (!(node[properties[index]] == old_value))
          error = "PutIgnored: '" + properties[index] + "' changed value";
      }
      catch(e)
      {
        if (!(node[properties[index]] == old_value))
          error = "PutIgnored: '" + properties[index] + "' threw exception and changed value";
        else
          error = "PutIgnored: '" + properties[index] + "' threw exception";
      }
      if (error != null)
        throw error;
    }
    return true;
  }

  checkProperties_PutNotAllowed = function checkProperties_PutNotAllowed(node, properties)
  {
    "use strict";
    for (var index = 0; index < properties.length; ++index)
    {
      var error = null;
      var new_value = null;
      var old_value = null;
      try
      {
        old_value = node[properties[index]];
        if (typeof(old_value) == "string")
          new_value = 10;
        else
          new_value = "foo";
        node[properties[index]] = new_value;
        if (!(node[properties[index]] == old_value))
          error = "PutNotAllowed: '" + properties[index] + "' changed value and didn't throw exception";
        else
          error = "PutNotAllowed: '" + properties[index] + "' didn't throw exception";
      }
      catch(e)
      {
        if (!(e instanceof TypeError))
          error = "PutNotAllowed: '" + properties[index] + "' threw exception other than TypeError";
        else
          if (!(node[properties[index]] == old_value))
            error = "PutNotAllowed: '" + properties[index] + "' threw exception but changed value";
      }
      if (error != null)
        throw error;
    }
    return true;
  }

  all_properties = [ "nodeName", "nodeValue", "nodeType", "parentNode", "childNodes", "firstChild", "lastChild", "previousSibling",
                     "nextSibling", "attributes", "ownerDocument", "namespaceURI", "prefix", "localName" ];
  simple_properties = [ "nodeName", "nodeValue", "nodeType", "parentNode", "firstChild", "lastChild", "previousSibling",
                        "nextSibling", "ownerDocument", "namespaceURI", "prefix", "localName" ];
  putnotallowed_properties = [ "nodeName", "nodeType", "parentNode", "childNodes", "firstChild", "lastChild", "previousSibling",
                               "nextSibling", "attributes", "ownerDocument", "namespaceURI", "localName" ];
  putignored_properties = [ "nodeValue", "prefix" ];

  /* Workaround for a bug in the ECMAScript engine: the 'in' operator
     sometimes doesn't work for properties on host objects because the
     engine optimizes away the lookup if it hasn't seen the name used
     as a property name before.  So we use them all as property names
     here to make sure the engine has seen them. */
  var identifiers = {
    nodeName: null,
    nodeValue: null,
    nodeType: null,
    parentNode: null,
    childNodes: null,
    firstChild: null,
    lastChild: null,
    previousSibling: null,
    nextSibling: null,
    attributes: null,
    ownerDocument: null,
    namespaceURI: null,
    prefix: null,
    localName: null
  };

  doc = document;
}

test("HasProperty #2: Document")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_HasProperty(doc, all_properties);
  checkProperties_Enumerate(doc, all_properties);
}

test("HasProperty #2: Element (html)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_HasProperty(html, all_properties);
  checkProperties_Enumerate(html, all_properties);
}

test("HasProperty #2: Element (head)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_HasProperty(head, all_properties);
  checkProperties_Enumerate(head, all_properties);
}

test("HasProperty #2: Element (body)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_HasProperty(body, all_properties);
  checkProperties_Enumerate(body, all_properties);
}

test("HasProperty #2: Element (div1)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_HasProperty(div1, all_properties);
  checkProperties_Enumerate(div1, all_properties);
}

test("HasProperty #2: Element (div2)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_HasProperty(div2, all_properties);
  checkProperties_Enumerate(div2, all_properties);
}

test("HasProperty #2: Element (div3)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_HasProperty(div3, all_properties);
  checkProperties_Enumerate(div3, all_properties);
}

test("HasProperty #2: Text")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_HasProperty(text, all_properties);
  checkProperties_Enumerate(text, all_properties);
}

test("HasProperty #2: Comment")
  require success "Setup #2 (c++)";
  require success "Setup #2";
{
  checkProperties_HasProperty(comment, all_properties);
  checkProperties_Enumerate(comment, all_properties);
}

test("Get #2: Document")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_Get(doc, simple_properties,
                      { nodeName: "#document",
                        nodeValue: null,
                        nodeType: Node.DOCUMENT_NODE,
                        parentNode: null,
                        firstChild: html,
                        lastChild: html,
                        previousSibling: null,
                        nextSibling: null,
                        ownerDocument: null,
                        namespaceURI: null,
                        prefix: null,
                        localName: null });
  verify(getClass(doc.childNodes) == "NodeList");
  verify(doc.attributes == null);
}

test("Get #2: Element (html)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_Get(html, simple_properties,
                      { nodeName: "HTML",
                        nodeValue: null,
                        nodeType: Node.ELEMENT_NODE,
                        parentNode: doc,
                        firstChild: head,
                        lastChild: body,
                        previousSibling: null,
                        nextSibling: null,
                        ownerDocument: doc,
                        namespaceURI: "http://www.w3.org/1999/xhtml",
                        prefix: null,
                        localName: "html" });
  verify(getClass(html.childNodes) == "NodeList");
  verify(getClass(html.attributes) == "NamedNodeMap");
}

test("Get #2: Element (head)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_Get(head, simple_properties,
                      { nodeName: "HEAD",
                        nodeValue: null,
                        nodeType: Node.ELEMENT_NODE,
                        parentNode: html,
                        firstChild: null,
                        lastChild: null,
                        previousSibling: null,
                        nextSibling: body,
                        ownerDocument: doc,
                        namespaceURI: "http://www.w3.org/1999/xhtml",
                        prefix: null,
                        localName: "head" });
  verify(getClass(html.childNodes) == "NodeList");
  verify(getClass(html.attributes) == "NamedNodeMap");
}

test("Get #2: Element (body)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_Get(body, simple_properties,
                      { nodeName: "BODY",
                        nodeValue: null,
                        nodeType: Node.ELEMENT_NODE,
                        parentNode: html,
                        firstChild: div1,
                        lastChild: div3,
                        previousSibling: head,
                        nextSibling: null,
                        ownerDocument: doc,
                        namespaceURI: "http://www.w3.org/1999/xhtml",
                        prefix: null,
                        localName: "body" });
  verify(getClass(html.childNodes) == "NodeList");
  verify(getClass(html.attributes) == "NamedNodeMap");
}

test("Get #2: Element (div1)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_Get(div1, simple_properties,
                      { nodeName: "DIV",
                        nodeValue: null,
                        nodeType: Node.ELEMENT_NODE,
                        parentNode: body,
                        firstChild: text,
                        lastChild: text,
                        previousSibling: null,
                        nextSibling: div2,
                        ownerDocument: doc,
                        namespaceURI: "http://www.w3.org/1999/xhtml",
                        prefix: null,
                        localName: "div" });
  verify(getClass(html.childNodes) == "NodeList");
  verify(getClass(html.attributes) == "NamedNodeMap");
}

test("Get #2: Element (div2)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_Get(div2, simple_properties,
                      { nodeName: "DIV",
                        nodeValue: null,
                        nodeType: Node.ELEMENT_NODE,
                        parentNode: body,
                        firstChild: comment,
                        lastChild: comment,
                        previousSibling: div1,
                        nextSibling: div3,
                        ownerDocument: doc,
                        namespaceURI: "http://www.w3.org/1999/xhtml",
                        prefix: null,
                        localName: "div" });
  verify(getClass(html.childNodes) == "NodeList");
  verify(getClass(html.attributes) == "NamedNodeMap");
}

test("Get #2: Element (div3)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_Get(div3, simple_properties,
                      { nodeName: "DIV",
                        nodeValue: null,
                        nodeType: Node.ELEMENT_NODE,
                        parentNode: body,
                        firstChild: null,
                        lastChild: null,
                        previousSibling: div2,
                        nextSibling: null,
                        ownerDocument: doc,
                        namespaceURI: "http://www.w3.org/1999/xhtml",
                        prefix: null,
                        localName: "div" });
  verify(getClass(html.childNodes) == "NodeList");
  verify(getClass(html.attributes) == "NamedNodeMap");
}

test("Get #2: Text")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_Get(text, simple_properties,
                      { nodeName: "#text",
                        nodeValue: "This is a Text node.",
                        nodeType: Node.TEXT_NODE,
                        parentNode: div1,
                        firstChild: null,
                        lastChild: null,
                        previousSibling: null,
                        nextSibling: null,
                        ownerDocument: doc,
                        namespaceURI: null,
                        prefix: null,
                        localName: null });
  verify(getClass(text.childNodes) == "NodeList");
  verify(text.attributes == null);
}

test("Get #2: Comment")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_Get(comment, simple_properties,
                      { nodeName: "#comment",
                        nodeValue: "This is a Comment node.",
                        nodeType: Node.COMMENT_NODE,
                        parentNode: div2,
                        firstChild: null,
                        lastChild: null,
                        previousSibling: null,
                        nextSibling: null,
                        ownerDocument: doc,
                        namespaceURI: null,
                        prefix: null,
                        localName: null });
  verify(getClass(comment.childNodes) == "NodeList");
  verify(comment.attributes == null);
}

test("Put #2: Document")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(doc, putnotallowed_properties);
  checkProperties_PutIgnored(doc, putignored_properties);
}

test("Put #2: Element (html)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(html, putnotallowed_properties);
  checkProperties_PutIgnored(html, putignored_properties);
}

test("Put #2: Element (head)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(head, putnotallowed_properties);
  checkProperties_PutIgnored(head, putignored_properties);
}

test("Put #2: Element (body)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(body, putnotallowed_properties);
  checkProperties_PutIgnored(body, putignored_properties);
}

test("Put #2: Element (div1)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(div1, putnotallowed_properties);
  checkProperties_PutIgnored(div1, putignored_properties);
}

test("Put #2: Element (div2)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(div2, putnotallowed_properties);
  checkProperties_PutIgnored(div2, putignored_properties);
}

test("Put #2: Element (div3)")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(div3, putnotallowed_properties);
  checkProperties_PutIgnored(div3, putignored_properties);
}

test("Put #2: Text")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(text, putnotallowed_properties);
  checkProperties_PutIgnored(text, ["prefix"]);
  checkProperties_Put(text, ["nodeValue"], { nodeValue: "new value" });
}

test("Put #2: Comment")
  require success "Setup #2 (c++)";
  require success "Setup #2";
  require success "Node constants";
{
  checkProperties_PutNotAllowed(comment, putnotallowed_properties);
  checkProperties_PutIgnored(comment, ["prefix"]);
  checkProperties_Put(comment, ["nodeValue"], { nodeValue: "new value" });
}

html
{
  "<html><body><div id=node>He<!-- bah -->llo</div></body></html>"
}

test("textContent") // Bug 233522
{
  var node = document.getElementById('node');
  verify(node);
  verify("textContent" in node);
  verify(node.textContent);
  verify(node.textContent == "Hello");
}

test("baseURI#1")
{
  verify(document);
  verify("baseURI" in document);
  verify(document.baseURI == document.documentURI);
}

html
{
  //! <body><a href="/">A</a><base href="http://www.foo.com/"><a href="/">B</a></base><a href="/">C</a>
}

test("baseURI#2")
{
  verify(document.baseURI == "http://www.foo.com/");

  var a1 = document.getElementsByTagName("a")[0];
  var a2 = document.getElementsByTagName("a")[1];
  var a3 = document.getElementsByTagName("a")[2];

  verify(a1);
  verify(a2);
  verify(a3);

  verify(a1.baseURI == "http://www.foo.com/");
  verify(a1.href    == "http://www.foo.com/");
  verify(a2.baseURI == "http://www.foo.com/");
  verify(a2.href    == "http://www.foo.com/");
  verify(a3.baseURI == "http://www.foo.com/");
  verify(a3.href    == "http://www.foo.com/");
}

xhtml
{
  //! <?xml version="1.0" ?>
  //! <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
  //! <html xmlns="http://www.w3.org/1999/xhtml"><head>
  //!	<title> BaseURI (XHTML)</title>
  //! </head>
  //! <body>
  //! <a href="/">A</a><base href="http://www.foo.com/"><a href="/">B</a></base><a href="/">C</a><a xml:base="http://www.bar.com" href="/">D<span xml:base="http://www.fie.com"><a href="/">E</a></span></a>
  //! </body>
  //! </html>
}

test("baseURI#3")
{
  verify(document.baseURI == "http://www.foo.com/");

  var a1 = document.getElementsByTagName("a")[0];
  var a2 = document.getElementsByTagName("a")[1];
  var a3 = document.getElementsByTagName("a")[2];
  var a4 = document.getElementsByTagName("a")[3];
  var a5 = document.getElementsByTagName("a")[4];

  verify(a1);
  verify(a2);
  verify(a3);
  verify(a4);
  verify(a5);

  verify(a1.baseURI == "http://www.foo.com/");
  verify(a1.href    == "http://www.foo.com/");
  verify(a2.baseURI == "http://www.foo.com/");
  verify(a2.href    == "http://www.foo.com/");
  verify(a3.baseURI == "http://www.foo.com/");
  verify(a3.href    == "http://www.foo.com/");
  verify(a4.baseURI == "http://www.bar.com/");
  verify(a4.href    == "http://www.bar.com/");
  verify(a5.baseURI == "http://www.fie.com/");
  verify(a5.href    == "http://www.fie.com/");
}

xml
{
  //! <?xml version="1.0" ?>
  //! <html xmlns="http://www.myown.com/test"><head>
  //!	<title> BaseURI (XHTML)</title>
  //! </head>
  //! <body>
  //! <a href="/">A</a><xhtml:base xmlns:xhtml="http://www.w3.org/1999/xhtml" xhtml:href="http://www.foo.com/"><a href="/">B</a></xhtml:base><a href="/">C</a><a xml:base="http://www.bar.com" href="/">D<span xml:base="http://www.fie.com"><a href="/">E</a></span></a>
  //! </body>
  //! </html>
}

test("baseURI#4")
{
  verify(document.baseURI == "http://www.foo.com/");

  var a1 = document.getElementsByTagName("a")[0];
  var a2 = document.getElementsByTagName("a")[1];
  var a3 = document.getElementsByTagName("a")[2];
  var a4 = document.getElementsByTagName("a")[3];
  var a5 = document.getElementsByTagName("a")[4];

  verify(a1);
  verify(a2);
  verify(a3);
  verify(a4);
  verify(a5);

  verify(a1.baseURI == "http://www.foo.com/");
  verify(!("href" in a1)); // Unknown namespace, <a> is not an anchor.
  verify(a2.baseURI == "http://www.foo.com/");
  verify(!("href" in a2)); // Unknown namespace, <a> is not an anchor.
  verify(a3.baseURI == "http://www.foo.com/");
  verify(!("href" in a3)); // Unknown namespace, <a> is not an anchor.
  verify(a4.baseURI == "http://www.bar.com/");
  verify(!("href" in a4)); // Unknown namespace, <a> is not an anchor.
  verify(a5.baseURI == "http://www.fie.com/");
  verify(!("href" in a5)); // Unknown namespace, <a> is not an anchor.
}
