group "DOM.Core.Node.functions.normalize";
require init;

language ecmascript;

// --------------------------------------------------------------------
// div1.normalize() with no text nodes

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Element.normalize #1")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  div1.normalize();

  verify(div1.firstChild == null);
  verify(div1.lastChild == null);
}

// --------------------------------------------------------------------
// div1.normalize() with only one text node

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Element.normalize #2")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("[text1]");

  div1.appendChild(text1);
  div1.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(text1.nodeValue == "[text1]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
}

// --------------------------------------------------------------------
// div1.normalize() with only one empty text node

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Element.normalize #3")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("");

  div1.appendChild(text1);
  div1.normalize();

  verify(div1.firstChild == null);
  verify(div1.lastChild == null);
  verify(text1.nodeValue == "");
  verify(text1.parentNode == null);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
}

// --------------------------------------------------------------------
// div1.normalize() with two text nodes

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Element.normalize #4")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("[text2]");

  div1.appendChild(text1);
  div1.appendChild(text2);
  div1.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(text1.nodeValue == "[text1][text2]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
}

// --------------------------------------------------------------------
// div1.normalize() with one empty and one non-empty text node

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Element.normalize #5")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("");
  var text2 = document.createTextNode("[text2]");

  div1.appendChild(text1);
  div1.appendChild(text2);
  div1.normalize();

  verify(div1.firstChild == text2);
  verify(div1.lastChild == text2);
  verify(text1.nodeValue == "");
  verify(text1.parentNode == null);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == div1);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
}

// --------------------------------------------------------------------
// div1.normalize() with one non-empty and one empty text node

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Element.normalize #6")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("");

  div1.appendChild(text1);
  div1.appendChild(text2);
  div1.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(text1.nodeValue == "[text1]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
}

// --------------------------------------------------------------------
// div1.normalize() with three text nodes

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Element.normalize #7")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("[text2]");
  var text3 = document.createTextNode("[text3]");

  div1.appendChild(text1);
  div1.appendChild(text2);
  div1.appendChild(text3);
  div1.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(text1.nodeValue == "[text1][text2][text3]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
  verify(text3.nodeValue == "[text3]");
  verify(text3.parentNode == null);
  verify(text3.previousSibling == null);
  verify(text3.nextSibling == null);
}

// --------------------------------------------------------------------
// div1.normalize() with three text nodes, one empty

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Element.normalize #8")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("");
  var text3 = document.createTextNode("[text3]");

  div1.appendChild(text1);
  div1.appendChild(text2);
  div1.appendChild(text3);
  div1.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(text1.nodeValue == "[text1][text3]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
  verify(text3.nodeValue == "[text3]");
  verify(text3.parentNode == null);
  verify(text3.previousSibling == null);
  verify(text3.nextSibling == null);
}

// --------------------------------------------------------------------
// div1.normalize() with three text nodes, one CDATA section

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Element.normalize #9")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createCDATASection("[text2]");
  var text3 = document.createTextNode("[text3]");

  div1.appendChild(text1);
  div1.appendChild(text2);
  div1.appendChild(text3);
  div1.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text3);
  verify(text1.nodeValue == "[text1]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == text2);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == div1);
  verify(text2.previousSibling == text1);
  verify(text2.nextSibling == text3);
  verify(text3.nodeValue == "[text3]");
  verify(text3.parentNode == div1);
  verify(text3.previousSibling == text2);
  verify(text3.nextSibling == null);
}

// --------------------------------------------------------------------
// div1.normalize() with two text nodes under div2 under div1

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div>"
        "</div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Element.normalize #10")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var div2 = div1.firstChild;
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("[text2]");

  div2.appendChild(text1);
  div2.appendChild(text2);
  div1.normalize();

  verify(div2.firstChild == text1);
  verify(div2.lastChild == text1);
  verify(text1.nodeValue == "[text1][text2]");
  verify(text1.parentNode == div2);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
}

// --------------------------------------------------------------------
// div1.normalize() with two text nodes each under div2 and div3 under div1

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div>"
        "</div>"
        "<div>"
        "</div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Element.normalize #11")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var div2 = div1.firstChild;
  var div3 = div2.nextSibling;
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("[text2]");
  var text3 = document.createTextNode("[text3]");
  var text4 = document.createTextNode("[text4]");

  div2.appendChild(text1);
  div2.appendChild(text2);
  div3.appendChild(text3);
  div3.appendChild(text4);
  div1.normalize();

  verify(div2.firstChild == text1);
  verify(div2.lastChild == text1);
  verify(div3.firstChild == text3);
  verify(div3.lastChild == text3);
  verify(text1.nodeValue == "[text1][text2]");
  verify(text1.parentNode == div2);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
  verify(text3.nodeValue == "[text3][text4]");
  verify(text3.parentNode == div3);
  verify(text3.previousSibling == null);
  verify(text3.nextSibling == null);
  verify(text4.nodeValue == "[text4]");
  verify(text4.parentNode == null);
  verify(text4.previousSibling == null);
  verify(text4.nextSibling == null);
}

// --------------------------------------------------------------------
// div1.normalize() with only one empty text node

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Element.normalize Mutation Events #1")
  require DOM2_MUTATION_EVENTS;
{
  div1 = document.firstChild.lastChild.firstChild;
  text1 = document.createTextNode("");

  noderemoved = "DOMNodeRemoved: no event";
  noderemovedfromdocument = "DOMNodeRemovedFromDocument: no event";

  function handleNodeRemoved(ev)
  {
    if (ev.target != text1)
      noderemoved = "DOMNodeRemoved: wrong target: " + ev.target;
    else if (ev.relatedNode != div1)
      noderemoved = "DOMNodeRemoved: wrong relatedNode: " + ev.relatedNode;
    else if (text1.parentNode != div1)
      noderemoved = "DOMNodeRemoved: node already removed";
    else
      noderemoved = "ok";
  }

  function handleNodeRemovedFromDocument(ev)
  {
    if (ev.target != text1)
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: wrong target: " + ev.target;
    else if (text1.parentNode != div1)
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: node already removed";
    else if (noderemoved == "no event")
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: received before DOMNodeRemoved";
    else
      noderemovedfromdocument = "ok";
  }

  div1.appendChild(text1);
  div1.addEventListener("DOMNodeRemoved", handleNodeRemoved, true);
  div1.addEventListener("DOMNodeRemovedFromDocument", handleNodeRemovedFromDocument, true);
  div1.normalize();

  verify(div1.firstChild == null);
  verify(div1.lastChild == null);
  verify(text1.nodeValue == "");
  verify(text1.parentNode == null);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);

  if (noderemoved != "ok")
    throw noderemoved;

  if (noderemovedfromdocument != "ok")
    throw noderemovedfromdocument;
}

// --------------------------------------------------------------------
// div1.normalize() with two text nodes

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Element.normalize Mutation Events #2")
  require DOM2_MUTATION_EVENTS;
{
  div1 = document.firstChild.lastChild.firstChild;
  text1 = document.createTextNode("[text1]");
  text2 = document.createTextNode("[text2]");

  characterdatamodified = "DOMCharacterDataModified: no event";

  function handleCharacterDataModified(ev)
  {
    if (ev.target != text1)
      characterdatamodified = "DOMCharacterDataModified: wrong target: " + ev.target;
    else if (ev.prevValue != "[text1]")
      characterdatamodified = "DOMCharacterDataModified: wrong previous value: " + ev.prevValue;
    else if (ev.newValue != "[text1][text2]")
      characterdatamodified = "DOMCharacterDataModified: wrong new value: " + ev.newValue;
    else if (ev.target.nodeValue != ev.newValue)
      characterdatamodified = "DOMCharacterDataModified: wrong nodeValue: " + ev.target.nodeValue;
    else
      characterdatamodified = "ok";
  }

  div1.appendChild(text1);
  div1.appendChild(text2);
  div1.addEventListener("DOMCharacterDataModified", handleCharacterDataModified, true);
  div1.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(text1.nodeValue == "[text1][text2]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);

  if (characterdatamodified != "ok")
    throw characterdatamodified;
}

// --------------------------------------------------------------------
// div1.normalize() with two text nodes

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Element.normalize Mutation Events #3")
  require DOM2_MUTATION_EVENTS;
{
  div1 = document.firstChild.lastChild.firstChild;
  text1 = document.createTextNode("[text1]");
  text2 = document.createTextNode("[text2]");

  noderemoved = "DOMNodeRemoved: no event";
  noderemovedfromdocument = "DOMNodeRemovedFromDocument: no event";
  characterdatamodified = "DOMCharacterDataModified: no event";

  function handleNodeRemoved(ev)
  {
    if (ev.target != text2)
      noderemoved = "DOMNodeRemoved: wrong target: " + ev.target;
    else if (ev.relatedNode != div1)
      noderemoved = "DOMNodeRemoved: wrong relatedNode: " + ev.relatedNode;
    else if (text2.parentNode != div1)
      noderemoved = "DOMNodeRemoved: node already removed";
    else
      noderemoved = "ok";
  }

  function handleNodeRemovedFromDocument(ev)
  {
    if (ev.target != text2)
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: wrong target: " + ev.target;
    else if (text2.parentNode != div1)
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: node already removed";
    else if (noderemoved == "no event")
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: received before DOMNodeRemoved";
    else
      noderemovedfromdocument = "ok";
  }

  function handleCharacterDataModified(ev)
  {
    if (ev.target != text1)
      characterdatamodified = "DOMCharacterDataModified: wrong target: " + ev.target;
    else if (ev.prevValue != "[text1]")
      characterdatamodified = "DOMCharacterDataModified: wrong previous value: " + ev.prevValue;
    else if (ev.newValue != "[text1][text2]")
      characterdatamodified = "DOMCharacterDataModified: wrong new value: " + ev.newValue;
    else if (ev.target.nodeValue != ev.newValue)
      characterdatamodified = "DOMCharacterDataModified: wrong nodeValue: " + ev.target.nodeValue;
    else
      characterdatamodified = "ok";
  }

  div1.appendChild(text1);
  div1.appendChild(text2);
  div1.addEventListener("DOMNodeRemoved", handleNodeRemoved, true);
  div1.addEventListener("DOMNodeRemovedFromDocument", handleNodeRemovedFromDocument, true);
  div1.addEventListener("DOMCharacterDataModified", handleCharacterDataModified, true);
  div1.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(text1.nodeValue == "[text1][text2]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);

  if (noderemoved != "ok")
    throw noderemoved;

  if (noderemovedfromdocument != "ok")
    throw noderemovedfromdocument;

  if (characterdatamodified != "ok")
    throw characterdatamodified;
}

// --------------------------------------------------------------------
// document.normalize() with no text nodes

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Document.normalize #1")
{
  var div1 = document.firstChild.lastChild.firstChild;
  verify(div1 && div1.nodeName == "DIV");

  document.normalize();

  verify(div1.firstChild == null);
  verify(div1.lastChild == null);
}

// --------------------------------------------------------------------
// document.normalize() with only one text node

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Document.normalize #2")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("[text1]");

  div1.appendChild(text1);
  document.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(text1.nodeValue == "[text1]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
}

// --------------------------------------------------------------------
// document.normalize() with only one empty text node

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Document.normalize #3")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("");

  div1.appendChild(text1);
  document.normalize();

  verify(div1.firstChild == null);
  verify(div1.lastChild == null);
  verify(text1.nodeValue == "");
  verify(text1.parentNode == null);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
}

// --------------------------------------------------------------------
// document.normalize() with two text nodes

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Document.normalize #4")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("[text2]");

  div1.appendChild(text1);
  div1.appendChild(text2);
  document.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(text1.nodeValue == "[text1][text2]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
}

// --------------------------------------------------------------------
// document.normalize() with one empty and one non-empty text node

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Document.normalize #5")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("");
  var text2 = document.createTextNode("[text2]");

  div1.appendChild(text1);
  div1.appendChild(text2);
  document.normalize();

  verify(div1.firstChild == text2);
  verify(div1.lastChild == text2);
  verify(text1.nodeValue == "");
  verify(text1.parentNode == null);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == div1);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
}

// --------------------------------------------------------------------
// document.normalize() with one non-empty and one empty text node

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Document.normalize #6")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("");

  div1.appendChild(text1);
  div1.appendChild(text2);
  document.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(text1.nodeValue == "[text1]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
}

// --------------------------------------------------------------------
// document.normalize() with three text nodes

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Document.normalize #7")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("[text2]");
  var text3 = document.createTextNode("[text3]");

  div1.appendChild(text1);
  div1.appendChild(text2);
  div1.appendChild(text3);
  document.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(text1.nodeValue == "[text1][text2][text3]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
  verify(text3.nodeValue == "[text3]");
  verify(text3.parentNode == null);
  verify(text3.previousSibling == null);
  verify(text3.nextSibling == null);
}

// --------------------------------------------------------------------
// document.normalize() with three text nodes, one empty

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Document.normalize #8")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("");
  var text3 = document.createTextNode("[text3]");

  div1.appendChild(text1);
  div1.appendChild(text2);
  div1.appendChild(text3);
  document.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(text1.nodeValue == "[text1][text3]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
  verify(text3.nodeValue == "[text3]");
  verify(text3.parentNode == null);
  verify(text3.previousSibling == null);
  verify(text3.nextSibling == null);
}

// --------------------------------------------------------------------
// document.normalize() with three text nodes, one CDATA section

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Document.normalize #9")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createCDATASection("[text2]");
  var text3 = document.createTextNode("[text3]");

  div1.appendChild(text1);
  div1.appendChild(text2);
  div1.appendChild(text3);
  document.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text3);
  verify(text1.nodeValue == "[text1]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == text2);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == div1);
  verify(text2.previousSibling == text1);
  verify(text2.nextSibling == text3);
  verify(text3.nodeValue == "[text3]");
  verify(text3.parentNode == div1);
  verify(text3.previousSibling == text2);
  verify(text3.nextSibling == null);
}

// --------------------------------------------------------------------
// document.normalize() with two text nodes under div2 under div1

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div>"
        "</div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Document.normalize #10")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var div2 = div1.firstChild;
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("[text2]");

  div2.appendChild(text1);
  div2.appendChild(text2);
  document.normalize();

  verify(div2.firstChild == text1);
  verify(div2.lastChild == text1);
  verify(text1.nodeValue == "[text1][text2]");
  verify(text1.parentNode == div2);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
}

// --------------------------------------------------------------------
// document.normalize() with two text nodes each under div2 and div3 under div1

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
        "<div>"
        "</div>"
        "<div>"
        "</div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Document.normalize #11")
{
  var div1 = document.firstChild.lastChild.firstChild;
  var div2 = div1.firstChild;
  var div3 = div2.nextSibling;
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("[text2]");
  var text3 = document.createTextNode("[text3]");
  var text4 = document.createTextNode("[text4]");

  div2.appendChild(text1);
  div2.appendChild(text2);
  div3.appendChild(text3);
  div3.appendChild(text4);
  document.normalize();

  verify(div2.firstChild == text1);
  verify(div2.lastChild == text1);
  verify(div3.firstChild == text3);
  verify(div3.lastChild == text3);
  verify(text1.nodeValue == "[text1][text2]");
  verify(text1.parentNode == div2);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
  verify(text3.nodeValue == "[text3][text4]");
  verify(text3.parentNode == div3);
  verify(text3.previousSibling == null);
  verify(text3.nextSibling == null);
  verify(text4.nodeValue == "[text4]");
  verify(text4.parentNode == null);
  verify(text4.previousSibling == null);
  verify(text4.nextSibling == null);
}

// --------------------------------------------------------------------
// document.normalize() with only one empty text node

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Document.normalize Mutation Events #1")
  require DOM2_MUTATION_EVENTS;
{
  div1 = document.firstChild.lastChild.firstChild;
  text1 = document.createTextNode("");

  noderemoved = "DOMNodeRemoved: no event";
  noderemovedfromdocument = "DOMNodeRemovedFromDocument: no event";

  function handleNodeRemoved(ev)
  {
    if (ev.target != text1)
      noderemoved = "DOMNodeRemoved: wrong target: " + ev.target;
    else if (ev.relatedNode != div1)
      noderemoved = "DOMNodeRemoved: wrong relatedNode: " + ev.relatedNode;
    else if (text1.parentNode != div1)
      noderemoved = "DOMNodeRemoved: node already removed";
    else
      noderemoved = "ok";
  }

  function handleNodeRemovedFromDocument(ev)
  {
    if (ev.target != text1)
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: wrong target: " + ev.target;
    else if (text1.parentNode != div1)
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: node already removed";
    else if (noderemoved == "no event")
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: received before DOMNodeRemoved";
    else
      noderemovedfromdocument = "ok";
  }

  div1.appendChild(text1);
  document.addEventListener("DOMNodeRemoved", handleNodeRemoved, true);
  document.addEventListener("DOMNodeRemovedFromDocument", handleNodeRemovedFromDocument, true);
  document.normalize();

  verify(div1.firstChild == null);
  verify(div1.lastChild == null);
  verify(text1.nodeValue == "");
  verify(text1.parentNode == null);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);

  if (noderemoved != "ok")
    throw noderemoved;

  if (noderemovedfromdocument != "ok")
    throw noderemovedfromdocument;
}

// --------------------------------------------------------------------
// document.normalize() with two text nodes

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Document.normalize Mutation Events #2")
  require DOM2_MUTATION_EVENTS;
{
  div1 = document.firstChild.lastChild.firstChild;
  text1 = document.createTextNode("[text1]");
  text2 = document.createTextNode("[text2]");

  characterdatamodified = "DOMCharacterDataModified: no event";

  function handleCharacterDataModified(ev)
  {
    if (ev.target != text1)
      characterdatamodified = "DOMCharacterDataModified: wrong target: " + ev.target;
    else if (ev.prevValue != "[text1]")
      characterdatamodified = "DOMCharacterDataModified: wrong previous value: " + ev.prevValue;
    else if (ev.newValue != "[text1][text2]")
      characterdatamodified = "DOMCharacterDataModified: wrong new value: " + ev.newValue;
    else if (ev.target.nodeValue != ev.newValue)
      characterdatamodified = "DOMCharacterDataModified: wrong nodeValue: " + ev.target.nodeValue;
    else
      characterdatamodified = "ok";
  }

  div1.appendChild(text1);
  div1.appendChild(text2);
  document.addEventListener("DOMCharacterDataModified", handleCharacterDataModified, true);
  document.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(text1.nodeValue == "[text1][text2]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);

  if (characterdatamodified != "ok")
    throw characterdatamodified;
}

// --------------------------------------------------------------------
// document.normalize() with two text nodes

html
{
  "<html>"
    "<head></head>"
    "<body>"
      "<div>"
      "</div>"
    "</body>"
  "</html>"
}

test("Call: Document.normalize Mutation Events #3")
  require DOM2_MUTATION_EVENTS;
{
  div1 = document.firstChild.lastChild.firstChild;
  text1 = document.createTextNode("[text1]");
  text2 = document.createTextNode("[text2]");

  noderemoved = "DOMNodeRemoved: no event";
  noderemovedfromdocument = "DOMNodeRemovedFromDocument: no event";
  characterdatamodified = "DOMCharacterDataModified: no event";

  function handleNodeRemoved(ev)
  {
    if (ev.target != text2)
      noderemoved = "DOMNodeRemoved: wrong target: " + ev.target;
    else if (ev.relatedNode != div1)
      noderemoved = "DOMNodeRemoved: wrong relatedNode: " + ev.relatedNode;
    else if (text2.parentNode != div1)
      noderemoved = "DOMNodeRemoved: node already removed";
    else
      noderemoved = "ok";
  }

  function handleNodeRemovedFromDocument(ev)
  {
    if (ev.target != text2)
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: wrong target: " + ev.target;
    else if (text2.parentNode != div1)
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: node already removed";
    else if (noderemoved == "no event")
      noderemovedfromdocument = "DOMNodeRemovedFromDocument: received before DOMNodeRemoved";
    else
      noderemovedfromdocument = "ok";
  }

  function handleCharacterDataModified(ev)
  {
    if (ev.target != text1)
      characterdatamodified = "DOMCharacterDataModified: wrong target: " + ev.target;
    else if (ev.prevValue != "[text1]")
      characterdatamodified = "DOMCharacterDataModified: wrong previous value: " + ev.prevValue;
    else if (ev.newValue != "[text1][text2]")
      characterdatamodified = "DOMCharacterDataModified: wrong new value: " + ev.newValue;
    else if (ev.target.nodeValue != ev.newValue)
      characterdatamodified = "DOMCharacterDataModified: wrong nodeValue: " + ev.target.nodeValue;
    else
      characterdatamodified = "ok";
  }

  div1.appendChild(text1);
  div1.appendChild(text2);
  document.addEventListener("DOMNodeRemoved", handleNodeRemoved, true);
  document.addEventListener("DOMNodeRemovedFromDocument", handleNodeRemovedFromDocument, true);
  document.addEventListener("DOMCharacterDataModified", handleCharacterDataModified, true);
  document.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(text1.nodeValue == "[text1][text2]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);

  if (noderemoved != "ok")
    throw noderemoved;

  if (noderemovedfromdocument != "ok")
    throw noderemovedfromdocument;

  if (characterdatamodified != "ok")
    throw characterdatamodified;
}

// --------------------------------------------------------------------
// docfrag.normalize() with no text nodes

test("Call: DocumentFragment.normalize #1")
{
  var docfrag = document.createDocumentFragment();
  docfrag.normalize();

  verify(docfrag.firstChild == null);
  verify(docfrag.lastChild == null);
}

// --------------------------------------------------------------------
// docfrag.normalize() with only one text node

test("Call: DocumentFragment.normalize #2")
{
  var docfrag = document.createDocumentFragment();
  var text1 = document.createTextNode("[text1]");

  docfrag.appendChild(text1);
  docfrag.normalize();

  verify(docfrag.firstChild == text1);
  verify(docfrag.lastChild == text1);
  verify(text1.nodeValue == "[text1]");
  verify(text1.parentNode == docfrag);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
}

// --------------------------------------------------------------------
// docfrag.normalize() with only one empty text node

test("Call: DocumentFragment.normalize #3")
{
  var docfrag = document.createDocumentFragment();
  var text1 = document.createTextNode("");

  docfrag.appendChild(text1);
  docfrag.normalize();

  verify(docfrag.firstChild == null);
  verify(docfrag.lastChild == null);
  verify(text1.nodeValue == "");
  verify(text1.parentNode == null);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
}

// --------------------------------------------------------------------
// docfrag.normalize() with two text nodes

test("Call: DocumentFragment.normalize #4")
{
  var docfrag = document.createDocumentFragment();
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("[text2]");

  docfrag.appendChild(text1);
  docfrag.appendChild(text2);
  docfrag.normalize();

  verify(docfrag.firstChild == text1);
  verify(docfrag.lastChild == text1);
  verify(text1.nodeValue == "[text1][text2]");
  verify(text1.parentNode == docfrag);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
}

// --------------------------------------------------------------------
// docfrag.normalize() with one empty and one non-empty text node

test("Call: DocumentFragment.normalize #5")
{
  var docfrag = document.createDocumentFragment();
  var text1 = document.createTextNode("");
  var text2 = document.createTextNode("[text2]");

  docfrag.appendChild(text1);
  docfrag.appendChild(text2);
  docfrag.normalize();

  verify(docfrag.firstChild == text2);
  verify(docfrag.lastChild == text2);
  verify(text1.nodeValue == "");
  verify(text1.parentNode == null);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == docfrag);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
}

// --------------------------------------------------------------------
// docfrag.normalize() with one non-empty and one empty text node

test("Call: DocumentFragment.normalize #6")
{
  var docfrag = document.createDocumentFragment();
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("");

  docfrag.appendChild(text1);
  docfrag.appendChild(text2);
  docfrag.normalize();

  verify(docfrag.firstChild == text1);
  verify(docfrag.lastChild == text1);
  verify(text1.nodeValue == "[text1]");
  verify(text1.parentNode == docfrag);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
}

// --------------------------------------------------------------------
// docfrag.normalize() with three text nodes

test("Call: DocumentFragment.normalize #7")
{
  var docfrag = document.createDocumentFragment();
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("[text2]");
  var text3 = document.createTextNode("[text3]");

  docfrag.appendChild(text1);
  docfrag.appendChild(text2);
  docfrag.appendChild(text3);
  docfrag.normalize();

  verify(docfrag.firstChild == text1);
  verify(docfrag.lastChild == text1);
  verify(text1.nodeValue == "[text1][text2][text3]");
  verify(text1.parentNode == docfrag);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
  verify(text3.nodeValue == "[text3]");
  verify(text3.parentNode == null);
  verify(text3.previousSibling == null);
  verify(text3.nextSibling == null);
}

// --------------------------------------------------------------------
// docfrag.normalize() with three text nodes, one empty

test("Call: DocumentFragment.normalize #8")
{
  var docfrag = document.createDocumentFragment();
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("");
  var text3 = document.createTextNode("[text3]");

  docfrag.appendChild(text1);
  docfrag.appendChild(text2);
  docfrag.appendChild(text3);
  docfrag.normalize();

  verify(docfrag.firstChild == text1);
  verify(docfrag.lastChild == text1);
  verify(text1.nodeValue == "[text1][text3]");
  verify(text1.parentNode == docfrag);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
  verify(text3.nodeValue == "[text3]");
  verify(text3.parentNode == null);
  verify(text3.previousSibling == null);
  verify(text3.nextSibling == null);
}

// --------------------------------------------------------------------
// docfrag.normalize() with three text nodes, one CDATA section

test("Call: DocumentFragment.normalize #9")
{
  var docfrag = document.createDocumentFragment();
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createCDATASection("[text2]");
  var text3 = document.createTextNode("[text3]");

  docfrag.appendChild(text1);
  docfrag.appendChild(text2);
  docfrag.appendChild(text3);
  docfrag.normalize();

  verify(docfrag.firstChild == text1);
  verify(docfrag.lastChild == text3);
  verify(text1.nodeValue == "[text1]");
  verify(text1.parentNode == docfrag);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == text2);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == docfrag);
  verify(text2.previousSibling == text1);
  verify(text2.nextSibling == text3);
  verify(text3.nodeValue == "[text3]");
  verify(text3.parentNode == docfrag);
  verify(text3.previousSibling == text2);
  verify(text3.nextSibling == null);
}

// --------------------------------------------------------------------
// docfrag.normalize() with two text nodes under div1 under docfrag

test("Call: DocumentFragment.normalize #10")
{
  var docfrag = document.createDocumentFragment();
  var div1 = document.createElement("div");
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("[text2]");

  docfrag.appendChild(div1)
  div1.appendChild(text1);
  div1.appendChild(text2);
  docfrag.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(text1.nodeValue == "[text1][text2]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
}

// --------------------------------------------------------------------
// docfrag.normalize() with two text nodes each under div1 and div2 under docfrag

test("Call: DocumentFragment.normalize #11")
{
  var docfrag = document.createDocumentFragment();
  var div1 = document.createElement("div");
  var div2 = document.createElement("div");
  var text1 = document.createTextNode("[text1]");
  var text2 = document.createTextNode("[text2]");
  var text3 = document.createTextNode("[text3]");
  var text4 = document.createTextNode("[text4]");

  docfrag.appendChild(div1);
  docfrag.appendChild(div2);
  div1.appendChild(text1);
  div1.appendChild(text2);
  div2.appendChild(text3);
  div2.appendChild(text4);
  docfrag.normalize();

  verify(div1.firstChild == text1);
  verify(div1.lastChild == text1);
  verify(div2.firstChild == text3);
  verify(div2.lastChild == text3);
  verify(text1.nodeValue == "[text1][text2]");
  verify(text1.parentNode == div1);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);
  verify(text3.nodeValue == "[text3][text4]");
  verify(text3.parentNode == div2);
  verify(text3.previousSibling == null);
  verify(text3.nextSibling == null);
  verify(text4.nodeValue == "[text4]");
  verify(text4.parentNode == null);
  verify(text4.previousSibling == null);
  verify(text4.nextSibling == null);
}

// --------------------------------------------------------------------
// div1.normalize() with only one empty text node

test("Call: DocumentFragment.normalize Mutation Events #1")
  require DOM2_MUTATION_EVENTS;
{
  docfrag = document.createDocumentFragment();
  text1 = document.createTextNode("");

  noderemoved = "DOMNodeRemoved: no event";
  noderemovedfromdocument = "ok";

  function handleNodeRemoved(ev)
  {
    if (ev.target != text1)
      noderemoved = "DOMNodeRemoved: wrong target: " + ev.target;
    else if (ev.relatedNode != docfrag)
      noderemoved = "DOMNodeRemoved: wrong relatedNode: " + ev.relatedNode;
    else if (text1.parentNode != docfrag)
      noderemoved = "DOMNodeRemoved: node already removed";
    else
      noderemoved = "ok";
  }

  function handleNodeRemovedFromDocument(ev)
  {
    noderemovedfromdocument = "DOMNodeRemovedFromDocument: bogus event";
  }

  docfrag.appendChild(text1);
  docfrag.addEventListener("DOMNodeRemoved", handleNodeRemoved, true);
  docfrag.addEventListener("DOMNodeRemovedFromDocument", handleNodeRemovedFromDocument, true);
  docfrag.normalize();

  verify(docfrag.firstChild == null);
  verify(docfrag.lastChild == null);
  verify(text1.nodeValue == "");
  verify(text1.parentNode == null);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);

  if (noderemoved != "ok")
    throw noderemoved;

  if (noderemovedfromdocument != "ok")
    throw noderemovedfromdocument;
}

// --------------------------------------------------------------------
// div1.normalize() with two text nodes

html
{
  "<html>"
    "<head></head>"
    "<body>"
    "</body>"
  "</html>"
}

test("Call: DocumentFragment.normalize Mutation Events #2")
  require DOM2_MUTATION_EVENTS;
{
  docfrag = document.createDocumentFragment();
  text1 = document.createTextNode("[text1]");
  text2 = document.createTextNode("[text2]");

  characterdatamodified = "DOMCharacterDataModified: no event";

  function handleCharacterDataModified(ev)
  {
    if (ev.target != text1)
      characterdatamodified = "DOMCharacterDataModified: wrong target: " + ev.target;
    else if (ev.prevValue != "[text1]")
      characterdatamodified = "DOMCharacterDataModified: wrong previous value: " + ev.prevValue;
    else if (ev.newValue != "[text1][text2]")
      characterdatamodified = "DOMCharacterDataModified: wrong new value: " + ev.newValue;
    else if (ev.target.nodeValue != ev.newValue)
      characterdatamodified = "DOMCharacterDataModified: wrong nodeValue: " + ev.target.nodeValue;
    else
      characterdatamodified = "ok";
  }

  docfrag.appendChild(text1);
  docfrag.appendChild(text2);
  docfrag.addEventListener("DOMCharacterDataModified", handleCharacterDataModified, true);
  docfrag.normalize();

  verify(docfrag.firstChild == text1);
  verify(docfrag.lastChild == text1);
  verify(text1.nodeValue == "[text1][text2]");
  verify(text1.parentNode == docfrag);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);

  if (characterdatamodified != "ok")
    throw characterdatamodified;
}

// --------------------------------------------------------------------
// div1.normalize() with two text nodes

html
{
  "<html>"
    "<head></head>"
    "<body>"
    "</body>"
  "</html>"
}

test("Call: DocumentFragment.normalize Mutation Events #3")
  require DOM2_MUTATION_EVENTS;
{
  docfrag = document.createDocumentFragment();
  text1 = document.createTextNode("[text1]");
  text2 = document.createTextNode("[text2]");

  noderemoved = "DOMNodeRemoved: no event";
  noderemovedfromdocument = "ok";
  characterdatamodified = "DOMCharacterDataModified: no event";

  function handleNodeRemoved(ev)
  {
    if (ev.target != text2)
      noderemoved = "DOMNodeRemoved: wrong target: " + ev.target;
    else if (ev.relatedNode != docfrag)
      noderemoved = "DOMNodeRemoved: wrong relatedNode: " + ev.relatedNode;
    else if (text2.parentNode != docfrag)
      noderemoved = "DOMNodeRemoved: node already removed";
    else
      noderemoved = "ok";
  }

  function handleNodeRemovedFromDocument(ev)
  {
    noderemovedfromdocument = "DOMNodeRemovedFromDocument: bogus event";
  }

  function handleCharacterDataModified(ev)
  {
    if (ev.target != text1)
      characterdatamodified = "DOMCharacterDataModified: wrong target: " + ev.target;
    else if (ev.prevValue != "[text1]")
      characterdatamodified = "DOMCharacterDataModified: wrong previous value: " + ev.prevValue;
    else if (ev.newValue != "[text1][text2]")
      characterdatamodified = "DOMCharacterDataModified: wrong new value: " + ev.newValue;
    else if (ev.target.nodeValue != ev.newValue)
      characterdatamodified = "DOMCharacterDataModified: wrong nodeValue: " + ev.target.nodeValue;
    else
      characterdatamodified = "ok";
  }

  docfrag.appendChild(text1);
  docfrag.appendChild(text2);
  docfrag.addEventListener("DOMNodeRemoved", handleNodeRemoved, true);
  docfrag.addEventListener("DOMNodeRemovedFromDocument", handleNodeRemovedFromDocument, true);
  docfrag.addEventListener("DOMCharacterDataModified", handleCharacterDataModified, true);
  docfrag.normalize();

  verify(docfrag.firstChild == text1);
  verify(docfrag.lastChild == text1);
  verify(text1.nodeValue == "[text1][text2]");
  verify(text1.parentNode == docfrag);
  verify(text1.previousSibling == null);
  verify(text1.nextSibling == null);
  verify(text2.nodeValue == "[text2]");
  verify(text2.parentNode == null);
  verify(text2.previousSibling == null);
  verify(text2.nextSibling == null);

  if (noderemoved != "ok")
    throw noderemoved;

  if (noderemovedfromdocument != "ok")
    throw noderemovedfromdocument;

  if (characterdatamodified != "ok")
    throw characterdatamodified;
}
