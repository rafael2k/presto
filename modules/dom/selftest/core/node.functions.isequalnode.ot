group "DOM.Core.Node.functions.isEqualNode";
require init;

language ecmascript;

html {
	//! <!DOCTYPE html PUBLIC "fairy" "tale"><html>
	//! <body id="ping" class="a b c" style="display:block;background-color:white">
	//! <p custom="evil">hello <!--not--> world!<input disabled="disabled" size="6"></p></body></html>
}

test("basic html")
{
	window.compareFragments = function(a, b)
	{
		var da = new DOMParser().parseFromString(a, 'text/xml');
		var db = new DOMParser().parseFromString(b, 'text/xml');

		return da.isEqualNode(db) && db.isEqualNode(da);
	}

	verify(document.isEqualNode);
	verify(!document.isEqualNode(null));
	verify(document.isEqualNode(document));
	verify(document.documentElement.isEqualNode(document.documentElement));
	verify(document.documentElement.isEqualNode(document.documentElement.cloneNode(true)));
	verify(!document.documentElement.isEqualNode(document.documentElement.cloneNode(false)));

	verify(document.implementation.createDocument(null, null, null).isEqualNode(document.implementation.createDocument(null, null, null)));
	verify(!document.implementation.createDocument(null, null, null).isEqualNode(document.implementation.createDocument(null, "html", null)));
}

test("xml complex")
{
	var fragments = [
		/* 0*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><foo a="b">bar</foo>',
		// adding some garbage
		/* 1*/ '<?xml-stylesheetX href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><foo a="b">bar</foo>',
		/* 2*/ '<?xml-stylesheet href="#fooX" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><foo a="b">bar</foo>',
		/* 3*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE fooX PUBLIC "public-id" "system-id"><foo a="b">bar</foo>',
		/* 4*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-idX" "system-id"><foo a="b">bar</foo>',
		/* 5*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-idX"><foo a="b">bar</foo>',
		/* 6*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><fooX a="b">bar</fooX>',
		/* 7*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><foo aX="b">bar</foo>',
		/* 8*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><foo a="bX">bar</foo>',
		/* 9*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><foo a="b">barX</foo>',
		/*10*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><foo a="b" xmlns="potato">bar</foo>',
		/*11*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><potato:foo a="b" xmlns:potato="a">bar</potato:foo>',
		/*12*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><foo potato:a="b" xmlns:potato="url">bar</foo>',
		/*13*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><foo a="b" xmlns:potato="url">bar</foo>',
		//removing stuff
		/*14*/ '<?xml-stylesheet href="#foo"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><foo a="b">bar</foo>',
		/*15*/ '<?xml-stylesheet type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><foo a="b">bar</foo>',
		/*16*/ '<!DOCTYPE foo PUBLIC "public-id" "system-id"><foo a="b">bar</foo>',
		/*17*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "" "system-id"><foo a="b">bar</foo>',
		/*18*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo><foo a="b">bar</foo>',
		/*19*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><foo a="b">bar</foo>',
		/*20*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><foo a="">bar</foo>',
		/*21*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><foo>bar</foo>',
		/*22*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><foo a="b"/>',
		/*23*/ '<?xml-stylesheet href="#foo" type="text/x-bar"?><!DOCTYPE foo PUBLIC "public-id" "system-id"><foo a="b"/><!--aa-->'
		];
	for(var k = 0; k < fragments.length; k++)
	{
		if (new DOMParser().parseFromString(fragments[k], 'text/xml').documentElement.nodeName == 'parsererror')
			verify(("fragment " + k + "malformed") == '');

		var ok = compareFragments(fragments[k], fragments[k]) ? '' : 'isEqualNode failed for fragment '+k;
		verify(ok == '');
	}
	for(var j = 0; j < fragments.length-1; j++)
	{
		var bad = [];
		for(var k = j+1; k < fragments.length; k++)
		{
			if (compareFragments(fragments[j], fragments[k]))
				bad.push(k);
		}
		var ok = bad.length ? 'isEqualNode equalled fragments '+j+' with ' + bad.join(',') : '';
		verify(ok == '');
	}
}

test("attribute mangling")
{
	verify( compareFragments('<r a="b" c="d"/>', '<r c="d" a="b"/>'));
	verify(!compareFragments('<r a="b" c="d"/>', '<R c="d" a="b"/>'));
	verify(!compareFragments('<r a="b" c="d"/>', '<r A="b" c="d"/>'));
	verify(!compareFragments('<r a="b" c="d"/>', '<r c="d" a="X"/>'));
	verify(!compareFragments('<r a="b" c="d"/>', '<r a="b" c="X"/>'));
}

test("some comments")
{
	verify(!compareFragments('<r/><!--a-->', '<r/><!--b-->'));
}

test("32kb text nodes")
{
	// Tests for HE_TEXTGROUP
	var s  = '<x>' + (new Array(0x10100 + 1).join('.')) + '</x>';
	var sa = '<x>' + (new Array(0x10100 + 1).join('.')) + 'a</x>';
	var sb = '<x>' + (new Array(0x10100 + 1).join('.')) + 'b</x>';

	verify(compareFragments(s, s));
	verify(!compareFragments(sa, sb));
}

html
{
	//! <!DOCTYPE html PUBLIC "foo" "bar"><iframe src='about:blank'></iframe>"
}

test("dynamic elements")
{
	var a = document.createElement('a');
	a.setAttribute("href", "http://www.opera.com/");
	a.textContent = 'The fastest browser in the world';

	var b = a.cloneNode(true);

	// The whole family.
	verify(a.isEqualNode(a));
	verify(a.isEqualNode(b) && b.isEqualNode(a));

	// The attribute
	verify(a.getAttributeNode('href').isEqualNode(b.getAttributeNode('href')));
	verify(b.getAttributeNode('href').isEqualNode(a.getAttributeNode('href')));

	var attr2 = document.createAttribute('href');
	attr2.value = 'http://foo.no/'
	verify(!a.getAttributeNode('href').isEqualNode(attr2));
	verify(!attr2.isEqualNode(a.getAttributeNode('href')));

	// The text.
	verify(a.firstChild.isEqualNode(b.firstChild));
	verify(b.firstChild.isEqualNode(a.firstChild));

	var i = document.getElementsByTagName('iframe')[0];
	verify(i && i.contentDocument);
	i.contentDocument.adoptNode(b);

	// And after betraying the family...
	verify(a.isEqualNode(b) && b.isEqualNode(a));

	var fa = document.createDocumentFragment();
	var fb = i.contentDocument.createDocumentFragment();

	fa.appendChild(a);
	fb.appendChild(b);
	verify(fa.isEqualNode(fb) && fb.isEqualNode(fa));

	fa.appendChild(document.createElement('b'));
	verify(!fa.isEqualNode(fb) && !fb.isEqualNode(fa));

	fb.appendChild(i.contentDocument.createElement('b'));
	verify(fa.isEqualNode(fb) && fb.isEqualNode(fa));
}

test("doctypes")
{
	var a = document.doctype;
	verify(a);

	var b = document.implementation.createDocumentType(a.name, a.publicId, a.systemId);

	verify(a.isEqualNode(b) && b.isEqualNode(a));
}

test("text nodes")
{
	var t = 'Kafir!';
	document.createTextNode(t).isEqualNode(document.createTextNode(t));
	document.createComment(t).isEqualNode(document.createComment(t));
	document.createCDATASection(t).isEqualNode(document.createCDATASection(t));
}
