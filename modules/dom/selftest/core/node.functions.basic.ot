group "DOM.Core.Node.functions.basic";
require init;

language ecmascript;

html "";

test("HasProperty: Node functions")
{
  function checkFunctions_HasProperty(node, properties)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in node))
        throw "HasProperty: '" + properties[index] + "' not found";
      if (!(typeof(node[properties[index]]) == "function"))
        throw "HasProperty: '" + properties[index] + "' not a function";
    }
    return true;
  }

  function checkFunctions_Enumerate(node, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in node)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  functions = [ "insertBefore", "replaceChild", "removeChild", "appendChild", "hasChildNodes",
                "cloneNode", "normalize", "isSupported", "hasAttributes" ];

  verify(checkFunctions_HasProperty(document, functions));
  verify(checkFunctions_Enumerate(document, functions));
}

test("proc inst target change")
{
	var p = document.createProcessingInstruction('xml-foo', 'bar');
	verify(p.target == 'xml-foo');
	verify(p.data == 'bar');
	p.data = 'xxx';
	verify(p.data == 'xxx');

	p = document.createProcessingInstruction('xml-stylesheet', 'type="text/css" href="#"');
	verify(p.target == 'xml-stylesheet');
	verify(p.data == 'type="text/css" href="#"');
	p.data = 'xxx';
	verify(p.data == 'xxx');
}
