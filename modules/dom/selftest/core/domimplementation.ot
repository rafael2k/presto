group "DOM.Core.DOMImplementation";
require init;

language ecmascript;

html "";

test("Setup")
{
  checkFunctions_HasProperty = function checkFunctions_HasProperty(node, properties)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in node))
        throw "HasProperty: '" + properties[index] + "' not found";
      if (!(typeof(node[properties[index]]) == "function"))
        throw "HasProperty: '" + properties[index] + "' not a function";
    }
    return true;
  }

  checkFunctions_Enumerate = function checkFunctions_Enumerate(node, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in node)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  checkHasFeature = function checkHasFeature(feature, version1, version2)
  {
    function checkInner(feature, version, expected, got)
    {
      if (expected != got)
        throw "hasFeature('" + feature + "', '" + version + "'): expected " + expected + ", got " + document.implementation.hasFeature(feature, version);
	}

    checkInner(feature, "1.0", version1, document.implementation.hasFeature(feature, "1.0"));
    checkInner(feature.toLowerCase(), "1.0", version1, document.implementation.hasFeature(feature, "1.0"));
    checkInner(feature.toUpperCase(), "1.0", version1, document.implementation.hasFeature(feature, "1.0"));

    checkInner(feature, "2.0", version2, document.implementation.hasFeature(feature, "2.0"));
    checkInner(feature.toLowerCase(), "2.0", version2, document.implementation.hasFeature(feature, "2.0"));
    checkInner(feature.toUpperCase(), "2.0", version2, document.implementation.hasFeature(feature, "2.0"));
  }

  functions = [ "hasFeature", "createDocumentType", "createDocument" ];
}

test("DOMImplementation [[HasProperty]]")
{
  verify(checkFunctions_HasProperty(document.implementation, functions));
  verify(checkFunctions_Enumerate(document.implementation, functions));
}

test("DOMImplementation.hasFeature #1")
{
  checkHasFeature("Core", false, true);
  checkHasFeature("Html", true, true);
  checkHasFeature("Events", false, true);
  checkHasFeature("UIEvents", false, true);
  checkHasFeature("MouseEvents", false, true);
  checkHasFeature("HTMLEvents", false, true);
  checkHasFeature("Xml", true, true);
  checkHasFeature("Views", false, true);
  checkHasFeature("Xhtml", true, true);
}

test("DOMImplementation.hasFeature #2 (Traversal supported)")
  require DOM2_TRAVERSAL;
{
  checkHasFeature("Traversal", false, true);
}

test("DOMImplementation.hasFeature #3 (Traversal not supported)")
  require undefined DOM2_TRAVERSAL;
{
  checkHasFeature("Traversal", false, false);
}

test("DOMImplementation.hasFeature #4 (Range supported)")
  require DOM2_RANGE;
{
  checkHasFeature("Range", false, true);
}

test("DOMImplementation.hasFeature #5 (Range not supported)")
  require undefined DOM2_RANGE;
{
  checkHasFeature("Range", false, false);
}

test("DOMImplementation.hasFeature #6 (Style supported)")
{
  checkHasFeature("StyleSheets", false, true);
  checkHasFeature("Css", false, true);
  checkHasFeature("Css2", false, true);
}

// FIXME: the document created by createDocument should be an XML document even if the
// script is executed in an HTML document.  But since we can't keep track of that
// right now, the following line is required to make the createDocument tests below
// succeed.
xml "<root/>";

test("DOMImplementation.createDocumentType #1")
{
  doctype1 = document.implementation.createDocumentType("html", "-//W3C//DTD XHTML 1.0 Strict//EN", "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd");

  verify(doctype1);
  verify(doctype1.name == "html");
  verify(doctype1.publicId == "-//W3C//DTD XHTML 1.0 Strict//EN");
  verify(doctype1.systemId == "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd");
  verify(doctype1.ownerDocument == null);

  verify("DocumentType" in window);
  verify(doctype1 instanceof DocumentType);
}

test("DOMImplementation.createDocumentType #2")
{
  doctype2 = document.implementation.createDocumentType("foo", "", "http://www.opera.com/foo");

  verify(doctype2);
  verify(doctype2.name == "foo");
  verify(doctype2.publicId == "");
  verify(doctype2.systemId == "http://www.opera.com/foo");
  verify(doctype2.ownerDocument == null);
}

test("DOMImplementation.createDocumentType #3")
{
  // This created a memory leak in CORE-24882, see if we
  // can catch it if it appears again.
  var doctype3 = document.implementation.createDocumentType('html', null, null);
  verify(doctype3);
}

test("DOMImplementation.createDocument #1")
{
  var doc = document.implementation.createDocument("http://www.w3.org/1999/xhtml", "html", null);

  verify(doc.firstChild != null);
  verify(doc.firstChild.nodeName == "html");
  verify(doc.firstChild.parentNode == doc);
  verify(doc.firstChild.ownerDocument == doc);
  verify(doc.doctype == null);
}

test("DOMImplementation.createDocument #2")
{
  var doc = document.implementation.createDocument("http://www.w3.org/1999/xhtml", "html", doctype1);

  verify(doc.firstChild != null);
  verify(doc.firstChild.nodeName == "html");
  verify(doc.firstChild.parentNode == doc);
  verify(doc.doctype == doctype1);
  verify(doc.doctype.ownerDocument == doc);
}

test("DOMImplementation.createDocument #3")
{
  var doc = document.implementation.createDocument("http://www.opera.com/foo", "foo", doctype2);

  verify(doc.firstChild != null);
  verify(doc.firstChild.nodeName == "foo");
  verify(doc.firstChild.parentNode == doc);
  verify(doc.doctype == doctype2);
  verify(doc.doctype.ownerDocument == doc);
}
