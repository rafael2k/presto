group "DOM.Core.Node.functions.cloneNode";
require init;

language ecmascript;

test("cloneNode ELEMENT_NODE")
{
	var n = document.createElement("y");
	n.setAttribute("top","down");
	n.innerHTML = '<b c=d e=f><g h=i><j>hello</j></g></b><z></z>';

	verify(n.childNodes.length == 2);
	var deep_children = n.selectNodes('self::*[@top]/b[@c="d" and @e="f"]/g[@h="i"]/j | z');
	verify(deep_children.length == 2);
	verify(deep_children[0].tagName.toLowerCase() == 'j');
	verify(deep_children[1].tagName.toLowerCase() == 'z');
	verify(deep_children[0].textContent == 'hello');

	var m = n.cloneNode(false);
	verify(m.childNodes.length == 0);
	verify(m.getAttribute("top") == "down");

	m = n.cloneNode(true);
	verify(m.parentNode == null);
	verify(m.childNodes.length == 2);
	var deep_children = m.selectNodes('self::*[@top]/b[@c="d" and @e="f"]/g[@h="i"]/j | z');
	verify(deep_children.length == 2);
	verify(deep_children[0].tagName.toLowerCase() == 'j');
	verify(deep_children[1].tagName.toLowerCase() == 'z');
	verify(deep_children[0].textContent == 'hello');

	verify(deep_children[0].ownerDocument == document);
	verify(deep_children[1].ownerDocument == document);
}

test("cloneNode ATTRIBUTE_NODE")
{
	var n = document.createElement("y");
	n.setAttribute("top","down");
	verify(n.attributes.length == 1);

	var at = n.attributes[0];
	verify(at.nodeType == Node.ATTRIBUTE_NODE);
	verify(at.name == "top");
	verify(at.value == "down");
	verify(at.ownerElement != null);

	var ac = at.cloneNode(false);
	verify(at != ac);
	verify(ac.name == "top");
	verify(ac.value == "down");
	verify(ac.ownerElement == null);
}

test("cloneNode TEXT_NODE")
{
	var n = document.createTextNode("damer");
	verify(n.ownerDocument == document);
	var m = n.cloneNode(true);
	verify(n.nodeValue == m.nodeValue);
	verify(m.ownerDocument == document);

	var p = document.createElement('damer');
	p.textContent = 'abc';

	verify(p.firstChild);
	verify(p.firstChild.nodeType == Node.TEXT_NODE);
	var m = p.firstChild.cloneNode(true);
	verify(p.firstChild.nodeValue == m.nodeValue);
	verify(m.parentNode == null);
	verify(m.ownerDocument == document);
}

test("cloneNode CDATA_SECTION_NODE")
{
	var document = new DOMParser().parseFromString('<root><![CDATA[abc]]></root>', 'text/xml');

	var n = document.createCDATASection("damer");
	verify(n.ownerDocument == document);
	var m = n.cloneNode(true);
	verify(n.nodeValue == m.nodeValue);
	verify(m.ownerDocument == document);

	var p = document.documentElement;

	verify(p.firstChild);
	verify(p.firstChild.nodeType == Node.CDATA_SECTION_NODE);
	var m = p.firstChild.cloneNode(true);
	verify(p.firstChild.nodeValue == 'abc');
	verify(p.firstChild.nodeValue == m.nodeValue);
	verify(m.parentNode == null);
	verify(m.ownerDocument == document);
}

test("cloneNode COMMENT_NODE")
{

	var a0 = document.createComment('aa');
	var a1 = a0.cloneNode(true);
	verify(a1);
	verify(a0 != a1);
	verify(a0.nodeValue == 'aa');
	verify(a0.nodeValue == a1.nodeValue);

	var b = document.createElement('foobar');
	b.innerHTML = '<!--comment-->';
	verify(b.childNodes.length == 1);
	verify(b.childNodes[0].nodeType == Node.COMMENT_NODE);

	var cc = b.childNodes[0].cloneNode(false);
	verify(cc);
	verify(cc.nodeType == Node.COMMENT_NODE);
	verify(cc.nodeValue == b.childNodes[0].nodeValue);
	verify(cc != b.childNodes[0]);
	verify(cc.ownerDocument == document);
}

html
{
	//! <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
	//! <html><body><p>hello world</p></body></html>
}

test("cloneNode DOCUMENT_TYPE_NODE")
{
	verify(document.doctype);
	verify(document.doctype.parentNode == document);

	var cd = document.doctype.cloneNode(false);
	verify(cd);
	verify(cd.publicId == document.doctype.publicId);
	verify(cd.systemId == document.doctype.systemId);
	verify(cd.parentNode == null);
	verify(cd.ownerDocument == document);

	var doc = document.implementation.createDocument(null, null, null);
	cd = doc.importNode(cd, true);

	verify(cd.publicId == document.doctype.publicId);
	verify(cd.systemId == document.doctype.systemId);
	verify(cd.parentNode == null);
	verify(cd.ownerDocument == doc);
}

test("cloneNode DOCUMENT_NODE html")
{
	var cd = document.cloneNode(false);
	verify(cd);
	verify(cd.doctype == null);
	verify(cd.documentElement == null);

	cd = document.cloneNode(true);
	verify(cd);
	verify(cd.doctype);
	verify(cd.doctype.publicId == document.doctype.publicId);
	verify(cd.doctype.systemId == document.doctype.systemId);
	verify(cd.documentElement);
	verify(cd.documentElement.ownerDocument == cd);
	verify(cd.documentElement.nodeName.toLowerCase() == document.documentElement.nodeName.toLowerCase());
	verify(cd.body);
	verify(cd.body.ownerDocument == cd);
	verify(cd.body.firstChild);
	verify(cd.body.firstChild.textContent == document.body.firstChild.textContent);
}

test("cloneNode DOCUMENT_NODE xml")
{
	var doc = new DOMParser().parseFromString(
			'<!DOCTYPE foo PUBLIC "public-id" "system-id"><?xml-stylesheet type="foo/bar" href="#"?><foo>bar</foo>', 'text/xml');
	verify(doc);
	verify(doc.doctype);
	verify(doc.childNodes[0] == doc.doctype);
	verify(doc.childNodes[1].nodeType == Node.PROCESSING_INSTRUCTION_NODE);
	verify(doc.documentElement);
	verify(doc.childNodes[2] == doc.documentElement);
	verify(doc.documentElement.nodeName == 'foo');
	verify(doc.documentElement.textContent == "bar");

	var doc2 = document.implementation.createDocument(null, null, null);
	var dtd2 = doc2.importNode(doc.doctype, true);

	verify(dtd2.publicId == doc.doctype.publicId);
	verify(dtd2.systemId == doc.doctype.systemId);
	verify(dtd2.parentNode == null);
	verify(dtd2.ownerDocument == doc2);

	var cd = doc.cloneNode(false);
	verify(cd);
	verify(cd.doctype == null);
	verify(cd.documentElement == null);
	verify(cd.childNodes.length == 0);

	cd = doc.cloneNode(true);
	verify(cd);
	verify(cd.doctype);
	verify(cd.childNodes[0] == cd.doctype);
	verify(cd.doctype.publicId == doc.doctype.publicId);
	verify(cd.doctype.systemId == doc.doctype.systemId);
	verify(cd.doctype.ownerDocument == cd);
	verify(cd.childNodes[1].nodeType == Node.PROCESSING_INSTRUCTION_NODE);
	verify(doc.childNodes[1].data);
	verify(cd.childNodes[1].data == doc.childNodes[1].data);
	verify(cd.documentElement);
	verify(cd.childNodes[2] == cd.documentElement);
	verify(cd.documentElement.ownerDocument == cd);
	verify(cd.documentElement.nodeName == 'foo');
	verify(cd.documentElement.textContent == "bar");
}

test("cloneNode DOCUMENT_NODE doctypeless")
{
	var doc = document.implementation.createDocument(null, "xx", null);
	verify(doc);
	verify(doc.doctype == null);
	verify(doc.documentElement);
	verify(doc.documentElement.ownerDocument == doc);
	verify(doc.documentElement.nodeName == 'xx');

	cd = doc.cloneNode(true);
	verify(cd);
	verify(cd.doctype == null);
	verify(cd.documentElement);
	verify(cd.documentElement.ownerDocument == cd);
	verify(cd.documentElement.nodeName == 'xx');
}

test("cloneNode PROCESSING_INSTRUCTION_NODE")
{
	var document = new DOMParser().parseFromString('<?xml-stylesheet type="foo/bar" href="#"?><foo/>', 'text/xml');
	verify(document.childNodes.length == 2);
	verify(document.childNodes[0].nodeType == Node.PROCESSING_INSTRUCTION_NODE);
	verify(document.childNodes[1] == document.documentElement);

	var cp = document.childNodes[0].cloneNode(true);
	verify(cp);
	verify(cp.childNodes.length == 0);
	verify(cp.nodeType == Node.PROCESSING_INSTRUCTION_NODE);
	verify(cp.parentNode == null);
	verify(cp.ownerDocument == document);
	verify(cp.data);
	verify(cp.data == document.childNodes[0].data);
}
