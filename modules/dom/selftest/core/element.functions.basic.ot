/* -*- Mode: c++; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2008 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "DOM.Core.Element.functions";
require init;

language ecmascript;

html
{
  "<html>"
  "</html>"
}

test("HasProperty: Element functions")
{
  function checkFunctions_HasProperty(node, properties)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in node))
        throw "HasProperty: '" + properties[index] + "' not found";
      if (!(typeof(node[properties[index]]) == "function"))
        throw "HasProperty: '" + properties[index] + "' not a function";
    }
    return true;
  }

  function checkFunctions_Enumerate(node, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in node)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  functions = [ "getAttribute", "setAttribute", "hasAttribute", "removeAttribute",
                "getAttributeNode", "setAttributeNode", "removeAttributeNode",
                "getElementsByTagName",
                "getAttributeNS", "setAttributeNS", "hasAttributeNS", "removeAttributeNS",
                "getAttributeNodeNS", "setAttributeNodeNS",
                "getElementsByTagNameNS" ];

  verify(checkFunctions_HasProperty(document.firstChild, functions));
  verify(checkFunctions_Enumerate(document.firstChild, functions));
}

html
{
//! <!doctype html>
//! <html>
//!   <head>
//!     <style>
//!       body { margin:10px }
//!       div#t1 { height:10px; width:10px; border: 10px; }
//!       div#t2 { position:absolute; top:20px; left:10px; height:10px; width:10px }
//!       div#dt3 { position:absolute; top:10px; left: 10px; font:20px/1 Ahem }
//!       span#t3 { font:20px/1 Ahem }
//!     </style>
//!   </head>
//!   <body>
//!     <div id=t1>TEST1</div>
//!     <div id=t2>TEST2</div>
//!     <div id="dt3"><span id=t3>XX<br>XX<br>XX</span></div>
//!   </body>
//! </html>
}

test("getClientRects/getBoundingClientRect")
{
    function r(n)
    {
	return Math.round(n);
    }

    function number_match(n1, n2)
    {
	return r(n1) == n2;
    }

    function test_getBoundingClientRect_by_id(target_id, value) {
	var element = document.getElementById(target_id);
	var x = element.getBoundingClientRect();
	var pass = x.top == value.top &&
	    x.right == value.right &&
	    x.bottom == value.bottom &&
	    x.left == value.left &&
	    x.width == value.width &&
	    x.height == value.height;

	if (!pass)
	    throw "Expected: " + value + ". Got: " + x + ".";
    }

    function pretty_print_obj(value)
    {
	return "left: " + value.left + ", right: " + value.right + ", top:" + value.top + ", bottom: " + value.bottom + ", width: " + value.width + ", height: " + value.height;
    }

    function pretty_print_array(value)
    {
	var s = "{ ";
	for(var i = 0; i < value.length; i++)
	{
	    s += pretty_print_obj(value[i]);
	    if (i + 1< value.length)
		s += " }, { ";
	}
	s += " }";
	return s;
    }

    function test_getClientRect_by_id(target_id, value)
    {
	var element = document.getElementById(target_id);
	var x = element.getClientRects();
	var results = [];
	var pass = true;

	if(value.length != x.length)
	    throw "Expected amount of rectangles: " + value.length + ". Got: " + x.length + ".";

	for(var i = 0; i < value.length; i++)
	{
	    var temp = number_match(x[i].top, value[i].top) &&
		number_match(x[i].right, value[i].right) &&
		number_match(x[i].bottom, value[i].bottom) &&
		number_match(x[i].left, value[i].left) &&
		number_match(x[i].width, value[i].width) &&
		number_match(x[i].height, value[i].height);

	    results.push( { top: x[i].top,
			    right: x[i].right,
			    bottom: x[i].bottom,
			    left: x[i].left,
			    width: x[i].width,
			    height: x[i].height } );

	    if(!temp)
		pass = false;
	}

	if (!pass)
	    throw "Expected: " + pretty_print_array(value) + ". Got: " + pretty_print_array(results) + ".";
    }

    test_getClientRect_by_id("t1", [ { top: 10, right: 20, bottom: 20, left: 10, width: 10, height: 10 } ]);
    test_getBoundingClientRect_by_id("t1", { top: 10, right: 20, bottom: 20, left: 10, width: 10, height: 10 } );

    test_getClientRect_by_id("t2", [ { top: 20, right: 20, bottom: 30, left: 10, width: 10, height: 10 } ]);
    test_getBoundingClientRect_by_id("t2", { top: 20, right: 20, bottom: 30, left: 10, width: 10, height: 10 } );

    test_getClientRect_by_id("t3", [ { top: 10, right: 50, bottom: 30, left: 10, width: 40, height: 20 },
				     { top: 30, right: 50, bottom: 50, left: 10, width: 40, height: 20 },
				     { top: 50, right: 50, bottom: 70, left: 10, width: 40, height: 20 } ]);

    test_getBoundingClientRect_by_id("t3", { top: 10, right: 50, bottom: 70, left: 10, width: 40, height: 60 } );
}
