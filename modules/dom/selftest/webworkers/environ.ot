// -*- Mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
group "dom.webworkers.scope";
require init;
require DOM_WEBWORKERS_SUPPORT;
require DOM_CROSSDOCUMENT_MESSAGING_SUPPORT;

language ecmascript;

test("Dedicated Worker scope")
async;
{
    var stuff = #string "input/scope-dedicated-worker.js";
    var url = 'data:text/javascript,' + stuff;
    var w = new Worker(url);
    function onMsg(e)
    {
        var obj = e.data;
        try {
            var res =
                (obj.importScripts != 'undefined') &&
                (obj.navigator     != 'undefined') &&
                (obj.location      != 'undefined') &&
                (obj.setInterval   != 'undefined') &&
                (obj.clearInterval != 'undefined') &&
                (obj.setTimeout    != 'undefined') &&
                (obj.clearTimeout  != 'undefined') &&
                (obj.onmessage     != 'undefined') &&
                (obj.onerror       != 'undefined') &&
                (obj.postMessage   != 'undefined') &&
                (obj.self          != 'undefined') &&
                (obj["$scope"]     === true);
            if (res)
                ST_passed();
            else
                ST_failed("Worker environment not containing required methods", "environ.ot", 1);
        } catch(e) {
            ST_failed("Worker environment not containing required methods", "environ.ot", 1);
        } finally {
            w.terminate();
        }
    }

    function onErr(e)
    {
        ST_failed("Error raised: " + e.message, "basic.ot", 1);
        try { w.terminate(); } catch(e) {};
    }

    w.onmessage = onMsg;
    w.onerror   = onErr;
    w.postMessage(2);
}

test("Shared Worker scope")
async;
{
    var stuff = #string "input/scope-shared-worker.js";
    var url = 'data:text/javascript,' + stuff;
    var w = null;
    try {
      w = new SharedWorker(url, 'shared-scope'+(new Date()).valueOf());
    } catch(e) {
      if (e.code == 18)
          ST_passed();
      else
          ST_failed("e.code was '" + e.code + "', expected '" + expected + "18(SECURITY_ERR)'", "environ.ot", 1);
    }

    function onMsg(e) {
        var obj = e.data;
        try {
            var res =
                (obj.importScripts != 'undefined') &&
                (obj.navigator     != 'undefined') &&
                (obj.location      != 'undefined') &&
                (obj.setInterval   != 'undefined') &&
                (obj.clearInterval != 'undefined') &&
                (obj.setTimeout    != 'undefined') &&
                (obj.clearTimeout  != 'undefined') &&
                (obj.onerror       != 'undefined') &&
                (obj.onconnect     != 'undefined') &&
                (obj.name          != 'undefined') &&
                (obj.applicationCache != 'undefined') &&
                (obj["$scope"]     === true);
            if (res)
                ST_passed();
            else
                ST_failed("Worker environment not containing required methods", "environ.ot", 1);
        } catch(e) {
            ST_failed("Worker environment not containing required methods", "environ.ot", 1);
        } finally {
            w.terminate();
        }
    }
    function onErr(e)
    {
        ST_failed("Error raised: " + e.message, "basic.ot", 1);
        try {w.terminate();} catch(e) {};
    }

    if (w)
    {
        w.port.onmessage = onMsg;
        w.onerror = onErr;
        w.port.postMessage(2);
    }
}
