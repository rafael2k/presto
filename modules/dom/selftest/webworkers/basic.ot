// -*- Mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
group "dom.webworkers";
require init;
require DOM_WEBWORKERS_SUPPORT;
require DOM_CROSSDOCUMENT_MESSAGING_SUPPORT;

language ecmascript;

// Initial check that the window has the necessary toplevel objects
test("Environment")
{
    verify("Worker" in window);
    verify("SharedWorker" in window);
    verify("MessageChannel" in window);
    verify("MessagePort" in window);
    verify("postMessage" in window);
}

test("Worker methods and properties")
{
    try {
        var stuff = #string "input/null.js";
        var url = 'data:text/javascript,' + stuff;
        var w = new Worker(url);
        verify("onmessage" in w);
        verify("postMessage" in w);
        verify("terminate" in w);
    } catch (e) {
        verify(false);
    } finally {
       w.terminate();
    }
}

test("Shared worker methods")
{
    var w = window.SharedWorker.prototype;
    try {
        verify("terminate" in w);
    } catch(e) {
        verify(false);
    }
}

test("Message channel basics")
{
    var ch = new MessageChannel();
    verify("port1" in ch);
    verify("port2" in ch);
}

test("invoking a worker")
async;
{
    var stuff = #string "input/worker.js";
    var url = 'data:text/javascript,' + stuff;
    var w = new Worker(url);

    var expected = "hey";
    function onMsg(e)
    {
        if (e.data == expected)
            ST_passed();
        else
            ST_failed("e.data was '" + e.data + "', expected '" + expected + "'", "basic.ot", 1);
        try { w.terminate(); } catch(e){};
    }
    function onErr(e)
    {
        ST_failed("Exception raised: " + e.message, "basic.ot", 1);
        try { w.terminate(); } catch(e){};
    }

    w.onmessage = onMsg;
    w.onerror   = onErr;
    w.postMessage(2);
}

test("invoking a shared worker")
async;
{
    /* Introducing data: for SharedWorker introduces potential for cross-domain information leakage.
     * So, while v. useful, retired the support. Which makes selftesting a struggle. */
    var stuff = #string "input/shared-worker.js";
    var url = 'data:text/javascript,' + stuff;
    var w = null;
    try {
      w = new SharedWorker(url, 'shared-test'+(new Date()).valueOf());
      var expected = "2=2";
      verify(false);
    } catch(e) {
      if (e.code == 18)
          ST_passed();
      else
          ST_failed("e.code was '" + e.code + "', expected '" + expected + "18(SECURITY_ERR)'", "basic.ot", 1);
    }

    function onMsg(e)
    {
        try {
            if (e.data == expected)
                ST_passed();
            else
                ST_failed("e.data was '" + e.data + "', expected '" + expected + "'", "basic.ot", 1);
        } catch(e) {
            ST_failed("e.data was '" + e.data + "', expected '" + expected + "'", "basic.ot", 1);
        } finally {
            w.terminate();
        }
    }
    function onErr(e)
    {
        ST_failed("Exception raised: " + e.message, "basic.ot", 1);
        try { w.terminate(); } catch(e) {};
    }

    if (w)
    {
        w.port.onmessage = onMsg;
        w.onerror = onErr;
        w.port.postMessage(2);
    }
}

test("worker.postMessage #1")
async;
{
    var stuff = #string "input/worker-m1.js";
    var url = 'data:text/javascript,' + stuff;
    var w = new Worker(url);
    var done = false;
    var expected = true;

    function onMsg(e)
    {
        done = true;
        try { w.terminate(); } catch(e) {};
        if (e.data == expected)
            ST_passed();
        else
            ST_failed("e.data was '" + e.data + "', expected '" + expected + "'", "basic.ot", 1);
    }
    function onErr(e)
    {
        ST_failed("Exception raised: " + e.message, "basic.ot", 1);
        try { w.terminate(); } catch(e){};
    }

    w.onmessage = onMsg;
    w.onerror   = onErr;
    w.postMessage(2);
    // just to make sure we kill it off and continue.
    setTimeout(function(){ if (!done) { ST_failed("failed to terminate", "basic.ot", 1); try { w.terminate();} catch(e) {;} }}, 5000);
}

test("worker exceptions #1")
async;
{
    var stuff = #string "input/worker-m3.js";
    var url = 'data:text/javascript,' + stuff;
    var w = new Worker(url);
    var expected = "PASS";

    function onMsg(e)
    {
        if (e.data.indexOf(expected) >= 0)
            ST_passed();
        else
            ST_failed("e.data was '" + e.data + "', expected '" + expected + "'", "basic.ot", 1);
        try { w.terminate(); } catch(e) {};
    }
    function onErr(e)
    {
        if (e.message.indexOf(expected) >= 0)
            ST_passed();
        else
            ST_failed("e.message was '" + e.message + "', expected '" + expected + "'", "basic.ot", 1);
        try { w.terminate(); } catch(e) {};
    }

    w.onmessage = onMsg;
    w.onerror   = onErr;
    w.postMessage(2);
}

test("worker timeouts/intervals #1")
async;
{
    var stuff = #string "input/worker-m2.js";
    var url = 'data:text/javascript,' + stuff;
    var w = new Worker(url);

    var expected = "PASS";

    function onMsg(e)
    {
        if (true || e.data == expected)
            ST_passed();
        else
            ST_failed("e.data was '" + e.data + "', expected '" + expected + "'", "basic.ot", 1);
        try { w.terminate(); } catch(ex) {};
    }

    function onErr(e)
    {
        ST_failed("Exception raised: " + e.message, "basic.ot", 1);
        try { w.terminate(); } catch(e) {};
    }

    w.onmessage = onMsg;
    w.onerror   = onErr;
    w.postMessage(2);
}
