/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
**
*/
group "dom.webworkers.base64";

require init;
require DOM_WEBWORKERS_SUPPORT;

language ecmascript;

test("worker.btoa #1")
async;
{
    // Check if btoa() is accessible at the global scope of a Worker.
    // And that it works as expected.
    var stuff = #string "input/worker-echo.js";
    var url = 'data:text/javascript,' + stuff;
    var w = new Worker(url);
    var done = false;

    var test_program = 'btoa("abcdefghijklmnopqrstuvwxyz")';
    var expected = "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=";

    function onMsg(e)
    {
        done = true;
        try { w.terminate(); } catch(e) {};
        if (e.data == expected)
            ST_passed();
        else
            ST_failed("e.data was '" + e.data + "', expected '" + expected + "'", "bas64.ot", 1);
    }
    function onErr(e)
    {
        done = true;
        ST_failed("Exception raised: " + e.message, "base64.ot", 1);
        try { w.terminate(); } catch(e){};
    }

    w.onmessage = onMsg;
    w.onerror   = onErr;
    w.postMessage(test_program);
    setTimeout(function(){ if (!done) { ST_failed("failed to terminate", "base64.ot", 1); try { w.terminate();} catch(e) {;} }}, 5000);
}

test("worker.atob #1")
async;
{
    // Same test as previous, this time for atob().
    var stuff = #string "input/worker-echo.js";
    var url = 'data:text/javascript,' + stuff;
    var w = new Worker(url);
    var done = false;

    var test_program = "atob('YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=')";
    var expected = "abcdefghijklmnopqrstuvwxyz";

    function onMsg(e)
    {
        done = true;
        try { w.terminate(); } catch(e) {};
        if (e.data == expected)
            ST_passed();
        else
            ST_failed("e.data was '" + e.data + "', expected '" + expected + "'", "bas64.ot", 1);
    }
    function onErr(e)
    {
        done = true;
        ST_failed("Exception raised: " + e.message, "base64.ot", 1);
        try { w.terminate(); } catch(e){};
    }

    w.onmessage = onMsg;
    w.onerror   = onErr;
    w.postMessage(test_program);
    setTimeout(function(){ if (!done) { ST_failed("failed to terminate", "base64.ot", 1); try { w.terminate();} catch(e) {;} }}, 5000);
}

test("worker.atob #2")
async;
{
    // Test if decoding exceptions are propagated as expected.
    var stuff = #string "input/worker-echo.js";
    var url = 'data:text/javascript,' + stuff;
    var w = new Worker(url);
    var done = false;

    var test_program = "try { atob('ab==='); } catch (ex) { throw ex.message; }";

    function onMsg(e)
    {
        done = true;
        try { w.terminate(); } catch(e) {};
        ST_failed("e.data was '" + e.data + "', expected an INVALID_CHARACTER_ERR exception", "bas64.ot", 1);
    }
    function onErr(e)
    {
        done = true;
        try { w.terminate(); } catch(e){};
        // A string-valued .message is not ideal.
        if (e.message.indexOf("INVALID_CHARACTER_ERR") >= 0)
            ST_passed();
        else
            ST_failed("Unexpected exception: " + e.message + ", expected INVALID_CHARACTER_ERR", "base64.ot", 1);
    }

    w.onmessage = onMsg;
    w.onerror   = onErr;
    w.postMessage(test_program);
    setTimeout(function(){ if (!done) { ST_failed("failed to terminate", "base64.ot", 1); try { w.terminate();} catch(e) {;} }}, 5000);
}

test("worker.atob #3")
async;
{
    // Test if decoding exceptions can be caught and tested for within a Worker.
    var stuff = #string "input/worker-echo.js";
    var url = 'data:text/javascript,' + stuff;
    var w = new Worker(url);
    var done = false;

    var test_program = "function f() { try { atob('ab===') ; return false; } catch (ex) { return (ex.code == DOMException.INVALID_CHARACTER_ERR); }} f();";

    function onMsg(e)
    {
        done = true;
        try { w.terminate(); } catch(e) {};
        if (e.data)
           ST_passed();
        else    
           ST_failed("e.data was '" + e.data + "', expected 'true'", "bas64.ot", 1);
    }
    function onErr(e)
    {
        done = true;
        try { w.terminate(); } catch(e){};
        ST_failed("Unexpected exception: " + e.message, "base64.ot", 1);
    }

    w.onmessage = onMsg;
    w.onerror   = onErr;
    w.postMessage(test_program);
    setTimeout(function(){ if (!done) { ST_failed("failed to terminate", "base64.ot", 1); try { w.terminate();} catch(e) {;} }}, 5000);
}
