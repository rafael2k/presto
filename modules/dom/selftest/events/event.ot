/* -*- Mode: c++; tab-width: 2; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "DOM.Events.Event";
require init;

language ecmascript;

test("Event constants")
{
  verify("Event" in window);
  verify(Event.CAPTURING_PHASE == 1);
  verify(Event.AT_TARGET == 2);
  verify(Event.BUBBLING_PHASE == 3);
}

test("UIEvent constants")
{
  verify("UIEvent" in window);

  verify(!("CAPTURING_PHASE" in UIEvent));
  verify(!("AT_TARGET" in UIEvent));
  verify(!("BUBBLING_PHASE" in UIEvent));
}

test("MouseEvent constants")
{
  verify("MouseEvent" in window);

  verify(!("CAPTURING_PHASE" in MouseEvent));
  verify(!("AT_TARGET" in MouseEvent));
  verify(!("BUBBLING_PHASE" in MouseEvent));
}

test("Create events")
{
  // Don't crash // bug 366181
  var event = document.createEvent("MouseEvents");
  verify(event);
  event.initMouseEvent("",0,0,window,0,0,0,0,0,0,0,0,0,0,void 0);

  // Don't crash // bug 366181
  event = document.createEvent("MouseEvents");
  verify(event);
  event.initMouseEvent("",0,0,function(){},0,0,0,0,0,0,0,0,0,0,void 0);

  // Don't crash // bug 366181
  event = document.createEvent("MouseEvents");
  verify(event);
  event.initMouseEvent("",0,0,/.*/,0,0,0,0,0,0,0,0,0,0,void 0);
}

test("Properties on a newly created event")
{
  var event = document.createEvent("MouseEvents");
  verify(event);

  verify(event.target == null);
  verify(event.currentTarget == null);
}

test("Event.constructor")
{
  var event = document.createEvent("Events");
  verify(event);
  verify("constructor" in event);
  verify(event.constructor === window.Event);

  // DontEnum
  for (var prop in event)
  {
    verify(prop != "constructor");
  }

  // Shouldn't work as a constructor
  try
  {
    var e = new Event;
    verify(!e);
  }
  catch (e)
  {
  }
}

test("MouseEvent.constructor")
{
  var event = document.createEvent("MouseEvents");
  verify(event);
  verify("constructor" in event);
  verify(event.constructor === window.MouseEvent);

  // DontEnum
  for (var prop in event)
  {
    verify(prop != "constructor");
  }

  // Shouldn't work as a constructor
  try
  {
    var e = new MouseEvent;
    verify(!e);
  }
  catch (e)
  {
  }
}

test("UIEvent.constructor")
{
  var event = document.createEvent("UIEvent");
  verify(event);
  verify("constructor" in event);
  verify(event.constructor === window.UIEvent);

  // DontEnum
  for (var prop in event)
  {
    verify(prop != "constructor");
  }

  // Shouldn't work as a constructor
  try
  {
    var e = new UIEvent;
    verify(!e);
  }
  catch (e)
  {
  }
}

test("KeyboardEvent constants")
{
  verify("KeyboardEvent" in window);
  verify("DOM_KEY_LOCATION_STANDARD" in KeyboardEvent);
  verify(KeyboardEvent.DOM_KEY_LOCATION_STANDARD == 0);
  verify(KeyboardEvent.DOM_KEY_LOCATION_LEFT == 1);
  verify(KeyboardEvent.DOM_KEY_LOCATION_RIGHT == 2);
  verify(KeyboardEvent.DOM_KEY_LOCATION_NUMPAD == 3);
  verify(KeyboardEvent.DOM_KEY_LOCATION_MOBILE == 4);
  verify(KeyboardEvent.DOM_KEY_LOCATION_JOYSTICK == 5);
}

test("KeyboardEvent constants #2")
		require DOM_EVENT_VIRTUAL_KEY_CONSTANTS;
{
  verify("KeyboardEvent" in window);
  verify("DOM_VK_BACKSPACE" in KeyboardEvent);
  verify(KeyboardEvent.DOM_VK_BACKSPACE == 8);
  verify("DOM_VK_0" in KeyboardEvent);
  verify(KeyboardEvent.DOM_VK_0 == 0x30);
  verify(KeyboardEvent.DOM_VK_9 == 0x39);
  verify(KeyboardEvent.DOM_VK_PROCESSKEY == 229);
}

test("KeyboardEvent.constructor")
{
	var event = document.createEvent("KeyboardEvent");
	verify(event);
	verify("constructor" in event);
	verify(event.constructor);
	verify(event.constructor === window.KeyboardEvent);

	// DontEnum
	for (var prop in event)
	{
		verify(prop != "constructor");
	}

	// DOM Level3 + legacy properties.
	verify("which" in event);
	verify("keyCode" in event);
	verify("charCode" in event);
	verify("char" in event);
	verify("key" in event);
	verify("location" in event);
	verify("ctrlKey" in event);
	verify("shiftKey" in event);
	verify("altKey" in event);
	verify("metaKey" in event);
	verify("repeat" in event);
	verify("locale" in event);
}

test("KeyboardEvent.prototype")
{
	verify("KeyboardEvent" in window);
	verify(window.KeyboardEvent);
	verify(KeyboardEvent.prototype);
	var proto = KeyboardEvent.prototype;
	verify(proto.constructor);
	verify(proto.constructor === KeyboardEvent);
	verify("initKeyboardEvent" in proto);
	verify("getModifierState" in proto);
}

test("KeyboardEvent constructor #1")
{
	verify("KeyboardEvent" in window);
	var k = new KeyboardEvent("keypress", {});
	verify(k.type === "keypress");
	verify(k.bubbles === false);
	verify(k.cancelable === false);
	verify(k.detail === 0);
	verify(k.view === null);
	verify(k.key === "");
	verify(k.char === "");
	verify(k.location === KeyboardEvent.DOM_KEY_LOCATION_STANDARD);
	verify(k.ctrlKey === false);
	verify(k.altKey === false);
	verify(k.shiftKey === false);
	verify(k.metaKey === false);
	verify(k.repeat === false);
	verify(k.locale === "");
	verify(k.keyCode === 0);
	verify(k.which === 0);
	verify(k.charCode === 0);
	verify(k.isTrusted === false);
}

test("KeyboardEvent constructor #2")
{
	verify("KeyboardEvent" in window);
	var k = new KeyboardEvent("keypress", {key:"a", char: "b", keyCode: 40, cancelable: true, detail: "2"});
	verify(k.type === "keypress");
	verify(k.bubbles === false);
	verify(k.cancelable === true);
	verify(k.detail === 2);
	verify(k.view === null);
	verify(k.key === "");
	verify(k.char === "");
	verify(k.location === KeyboardEvent.DOM_KEY_LOCATION_STANDARD);
	verify(k.ctrlKey === false);
	verify(k.altKey === false);
	verify(k.shiftKey === false);
	verify(k.metaKey === false);
	verify(k.repeat === false);
	verify(k.locale === "");
	verify(k.keyCode === 0);
	verify(k.which === 0);
	verify(k.charCode === 0);
	verify(k.isTrusted === false);
}

test("TextEvent constants")
{
		verify("TextEvent" in window);
		verify(TextEvent.DOM_INPUT_METHOD_UNKNOWN == 0);
		verify(TextEvent.DOM_INPUT_METHOD_KEYBOARD == 1);
		verify(TextEvent.DOM_INPUT_METHOD_PASTE == 2);
		verify(TextEvent.DOM_INPUT_METHOD_DROP == 3);
		verify(TextEvent.DOM_INPUT_METHOD_IME == 4);
		verify(TextEvent.DOM_INPUT_METHOD_OPTION == 5);
		verify(TextEvent.DOM_INPUT_METHOD_HANDWRITING == 6);
		verify(TextEvent.DOM_INPUT_METHOD_VOICE == 7);
		verify(TextEvent.DOM_INPUT_METHOD_MULTIMODAL == 8);
		verify(TextEvent.DOM_INPUT_METHOD_SCRIPT == 9);
}

test("TextEvent constructor #1")
{
	verify("TextEvent" in window);
	var t = new TextEvent("textinput", {});
	verify(t.type === "textinput");
	verify(t.bubbles === false);
	verify(t.cancelable === false);
	verify(t.detail === 0);
	verify(t.view === null);
	verify(t.data === "");
	verify(t.inputMethod === TextEvent.DOM_INPUT_METHOD_UNKNOWN);
	verify(t.locale === "");
	verify(t.isTrusted === false);
}

test("TextEvent constructor #2")
{
	verify("TextEvent" in window);
	var t = new TextEvent("textinput", {data:"my input", inputMethod: 1, cancelable: true, detail: "2"});
	verify(t.type === "textinput");
	verify(t.bubbles === false);
	verify(t.cancelable === true);
	verify(t.detail === 2);
	verify(t.view === null);
	verify(t.data === "");
	verify(t.inputMethod === TextEvent.DOM_INPUT_METHOD_UNKNOWN);
	verify(t.locale === "");
	verify(t.isTrusted === false);
}

test("CustomEvents")
{
	var values = [undefined, null, 'string', 1, false, true, {}, new String('a')];
	verify(window.CustomEvent);
	CustomEvent.prototype._dummy = 123;
	for(var k = 0; k < values.length; k++)
	{
		(function(eventname, value){
			function listener(e0){
				verify(e0 == e);
				verify(e0.type == eventname);
				verify(e0.detail === value);
				try{e0.detail='ping'}catch(e){}
				verify(e0.detail === value);
				verify(e0._dummy === 123);
				verify(e0.isTrusted === false);
			}
			document.addEventListener(eventname, listener, false);
			var e = document.createEvent("CustomEvent");
			verify(e instanceof CustomEvent);
			e.initCustomEvent(eventname, true, false, value);
			document.dispatchEvent(e);
			document.removeEventListener(eventname, listener, false);
		})('event.' + k, values[k]);
	}
}

html
{
	//! <body onload="window.the_onload_event = event"></body>
}

test("Event.isTrusted")
{
	verify("the_onload_event" in window);
	verify(the_onload_event instanceof Event);
	verify("isTrusted" in the_onload_event);
	verify(the_onload_event.isTrusted === true);

	try { the_onload_event.isTrusted = false; } catch(e) {}
	verify(the_onload_event.isTrusted === true);

	the_onload_event.initEvent("load", true, true);
	verify(the_onload_event.isTrusted === false);

	var event = document.createEvent("MouseEvents");
	verify(event);
	verify(event.isTrusted === false);
	event.initMouseEvent("",0,0,/.*/,0,0,0,0,0,0,0,0,0,0,void 0);
	verify(event.isTrusted === false);

	try { event.isTrusted = true; } catch(e) {}
	verify(event.isTrusted === false);

}

test("Event.initEvent (dispatch flag)")
{
	var passed = false;
	function handler(e)
	{
		try {
			e.initCustomEvent("bar", true, false, "10");
			passed = e.type == "foo";
		} catch (e) {
			passed = false;
		}
	}
	document.addEventListener("foo", handler, false);
	var e = document.createEvent("CustomEvent");
	verify(e instanceof CustomEvent);
	e.initCustomEvent("foo", true, false, 6);
	document.dispatchEvent(e);
	try {
		if (passed)
		{
			e.initCustomEvent("baz", true, false, {a:2});
			passed = e.type == "baz";
		}
	} catch (e) {
		passed = false;
	}
	verify(passed === true);
}
