/* -*- Mode: c++ -*-
 *
 * Copyright (C) 1995-2006 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.  It may not be distributed
 * under any circumstances.
 *
 */
group "DOM.Events.DocumentEvent";
require init;

language ecmascript;

html
{
  "<html>"
    "<body>"
      "<div id='div1'>"
        "<div id='div2'>"
        "</div>"
      "</div>"
    "</body>"
  "</html>"
};

test("HasProperty: DocumentEvent functions")
{
  function checkFunctions_HasProperty(documentevent, properties)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in documentevent))
        throw "HasProperty: '" + properties[index] + "' not found";
      if (!(typeof(documentevent[properties[index]]) == "function"))
        throw "HasProperty: '" + properties[index] + "' not a function";
    }
    return true;
  }

  function checkFunctions_Enumerate(documentevent, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in documentevent)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  functions = [ "createEvent" ];

  verify(checkFunctions_HasProperty(document, functions));
  verify(checkFunctions_Enumerate(document, functions));
}

test("Call: DocumentEvent.createEvent UIEvents")
{
  var ev1 = document.createEvent("UIEvents");
  verify(ev1);
  verify(ev1 == "[object UIEvent]");

  var ev2 = document.createEvent("uieVENTS");
  verify(ev2);
  verify(ev2 == "[object UIEvent]");
}

test("Call: DocumentEvent.createEvent MouseEvents")
{
  var ev1 = document.createEvent("MouseEvents");
  verify(ev1);
  verify(ev1 == "[object MouseEvent]");

  var ev2 = document.createEvent("mOUSEeVENTS");
  verify(ev2);
  verify(ev2 == "[object MouseEvent]");
}

test("Call: DocumentEvent.createEvent HTMLEvents")
{
  var ev1 = document.createEvent("HTMLEvents");
  verify(ev1);
  verify(ev1 == "[object Event]");

  var ev2 = document.createEvent("htmleVENTS");
  verify(ev2);
  verify(ev2 == "[object Event]");

  verify(ev1.eventPhase == Event.CAPTURING_PHASE);
  verify(ev1.target == null);
  verify(ev1.currentTarget == null);
}

test("Call: DocumentEvent.createEvent MutationEvents")
  require DOM2_MUTATION_EVENTS;
{
  var ev1 = document.createEvent("MutationEvents");
  verify(ev1);
  verify(ev1 == "[object MutationEvent]");

  var ev2 = document.createEvent("mUTATIONeVENTS");
  verify(ev2);
  verify(ev2 == "[object MutationEvent]");
}

test("Call: DocumentEvent.createEvent invalid")
{
  var error = null;
  try
  {
    var ev1 = document.createEvent("InvalidEvents");
    error = "No exception thrown";
  }
  catch (e)
  {
    if (!("code" in e))
      error = "Wrong type of exception thrown";
    else if (e.code != DOMException.NOT_SUPPORTED_ERR)
    {
      error = "Wrong exception thrown: ";
      var cs = "unknown";
      for (var c in DOMException)
        if (DOMException[c] == e.code)
        {
          cs = c;
          break;
        }
      error += cs;
    }
  }
  if (error)
    throw error;
}

html
{
  //! <html><head></head><body>
  //!   <iframe src="data:text/html,<html><head><script>window.addEventListener('DOMContentLoaded', function() { window.gotcaptureddomcontentloaded = true; }, true); window.addEventListener('DOMContentLoaded', function() { window.gotnoncaptureddomcontentloaded = true; }, false);</script></html>"></iframe>
  //! </body></html>
}

test("DOMContentLoaded should reach window")
{
  // Keeping the amount of listeners in the source to a minimum to
  // expose bugs in the HasListeners optimization
  win = document.getElementsByTagName("iframe")[0].contentWindow;
  verify("gotcaptureddomcontentloaded" in win);
  verify(win.gotcaptureddomcontentloaded == true);

  verify("gotnoncaptureddomcontentloaded" in win);
  verify(win.gotnoncaptureddomcontentloaded == true);
}

html
{
  //! <html><head></head><body>
  //!   <iframe src="data:text/html,<html><head><script>document.addEventListener('DOMContentLoaded', function() { document.gotcaptureddomcontentloaded = true; }, true); document.addEventListener('DOMContentLoaded', function() { document.gotnoncaptureddomcontentloaded = true; }, false);</script></html>"></iframe>
  //! </body></html>
}

test("DOMContentLoaded should reach document")
{
  // Keeping the amount of listeners in the source to a minimum to
  // expose bugs in the HasListeners optimization
  doc = document.getElementsByTagName("iframe")[0].contentDocument;
  verify("gotcaptureddomcontentloaded" in doc);
  verify(doc.gotcaptureddomcontentloaded == true);

  verify("gotnoncaptureddomcontentloaded" in doc);
  verify(doc.gotnoncaptureddomcontentloaded == true);
}
