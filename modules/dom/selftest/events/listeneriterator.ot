group "DOM.Events.ListenerIterator";
require init;

include "modules/dom/domenvironment.h";
include "modules/dom/src/domevents/domeventtarget.h";
include "modules/dom/src/domevents/domeventlistener.h";
include "modules/dom/src/domobj.h";
include "modules/doc/frm_doc.h";

html
{
	//! <!doctype html>
	//! <div id="event" onclick="alert();">Event target</div>
}

test("One listener")
{
	FramesDocument *doc = state.doc;
	DOM_Environment *env = doc->GetDOMEnvironment();
	HTML_Element *elm = find_element("div", 1);
	verify(elm != NULL);

	DOM_Object *dom_obj;
	verify_success(env->ConstructNode(dom_obj, elm));

	DOM_EventTarget *target = dom_obj->GetEventTarget();
	verify(target != NULL);

	DOM_EventTarget::NativeIterator it = target->NativeListeners();
	verify(!it.AtEnd());

	const DOM_EventListener *listener = it.Current();
	verify(listener != NULL);
	verify(listener->IsNativeHandler());
	verify(listener->GetKnownType() == ONCLICK);
	verify(listener->IsFromAttribute());

	it.Next();
	verify(it.AtEnd());
}

html
{
	//! <!doctype html>
	//! <div id="event" onclick="alert();" onkeypress="alert();" onblur="alert();">Event target</div>
}

test("Multiple listeners")
{
	FramesDocument *doc = state.doc;
	DOM_Environment *env = doc->GetDOMEnvironment();
	HTML_Element *elm = find_element("div", 1);
	verify(elm != NULL);

	DOM_Object *dom_obj;
	verify_success(env->ConstructNode(dom_obj, elm));

	DOM_EventTarget *target = dom_obj->GetEventTarget();
	verify(target != NULL);

	DOM_EventTarget::NativeIterator it = target->NativeListeners();
	verify(!it.AtEnd());

	unsigned count = 0;
	BOOL has_click = FALSE;
	BOOL has_keypress = FALSE;
	BOOL has_blur = FALSE;
	for (; !it.AtEnd(); it.Next() )
	{
		const DOM_EventListener *listener = it.Current();
		verify(listener != NULL);
		verify(listener->IsNativeHandler());
		if (listener->GetKnownType() == ONCLICK)
		{
			verify(!has_click);
			verify(listener->IsFromAttribute());
			has_click = TRUE;
		}
		else if (listener->GetKnownType() == ONKEYPRESS)
		{
			verify(!has_keypress);
			verify(listener->IsFromAttribute());
			has_keypress = TRUE;
		}
		else if (listener->GetKnownType() == ONBLUR)
		{
			verify(!has_blur);
			verify(listener->IsFromAttribute());
			has_blur = TRUE;
		}
		++count;
	}
	verify(count == 3);
	verify(has_click);
	verify(has_keypress);
	verify(has_blur);
}

html
{
	//! <html>
	//!   <head>
	//!   </head>
	//!   <body>
	//!     <div id="this_one" onclick="alert();">Event target</div>
	//!     <script>
	//!       var div = document.getElementById("this_one");
	//!       function do_key(e) { alert(); };
	//!       div.addEventListener("keypress", do_key);
	//!       div.addEventListener("keydown", do_key, true);
	//!     </script>
	//!   </body>
	//! </html>
}

test("Multiple addEventListener")
{
	FramesDocument *doc = state.doc;
	DOM_Environment *env = doc->GetDOMEnvironment();
	HTML_Element *elm = find_element("div", 1);
	verify(elm != NULL);

	DOM_Object *dom_obj;
	verify_success(env->ConstructNode(dom_obj, elm));

	DOM_EventTarget *target = dom_obj->GetEventTarget();
	verify(target != NULL);

	DOM_EventTarget::NativeIterator it = target->NativeListeners();
	verify(!it.AtEnd());

	unsigned count = 0;
	BOOL has_click = FALSE;
	BOOL has_keypress = FALSE;
	BOOL has_keydown = FALSE;
	for (; !it.AtEnd(); it.Next() )
	{
		const DOM_EventListener *listener = it.Current();
		verify(listener != NULL);
		verify(listener->IsNativeHandler());
		if (listener->GetKnownType() == ONCLICK)
		{
			verify(!has_click);
			verify(listener->IsFromAttribute());
			has_click = TRUE;
		}
		else if (listener->GetKnownType() == ONKEYPRESS)
		{
			verify(!has_keypress);
			verify(!listener->IsFromAttribute());
			has_keypress = TRUE;
		}
		else if (listener->GetKnownType() == ONKEYDOWN)
		{
			verify(!has_keydown);
			verify(!listener->IsFromAttribute());
			has_keydown = TRUE;
		}
		++count;
	}
	verify(count == 3);
	verify(has_click);
	verify(has_keypress);
	verify(has_keydown);
}

html
{
	//! <html>
	//!   <head>
	//!   </head>
	//!   <body>
	//!     <div id="this_one" onclick="alert();">Event target</div>
	//!     <script>
	//!       var div = document.getElementById("this_one");
	//!       function do_key(e) { alert(); };
	//!       div.addEventListener("keypress", do_key);
	//!       div.addEventListener("keydown", do_key, true);
	//!     </script>
	//!   </body>
	//! </html>
}

test("Multiple addEventListener")
{
	FramesDocument *doc = state.doc;
	DOM_Environment *env = doc->GetDOMEnvironment();
	HTML_Element *elm = find_element("div", 1);
	verify(elm != NULL);

	DOM_Object *dom_obj;
	verify_success(env->ConstructNode(dom_obj, elm));

	DOM_EventTarget *target = dom_obj->GetEventTarget();
	verify(target != NULL);

	DOM_EventTarget::NativeIterator it = target->NativeListeners();
	verify(!it.AtEnd());

	unsigned count = 0;
	BOOL has_click = FALSE;
	BOOL has_keypress = FALSE;
	BOOL has_keydown = FALSE;
	for (; !it.AtEnd(); it.Next() )
	{
		const DOM_EventListener *listener = it.Current();
		verify(listener != NULL);
		verify(listener->IsNativeHandler());
		if (listener->GetKnownType() == ONCLICK)
		{
			verify(!has_click);
			verify(listener->IsFromAttribute());
			has_click = TRUE;
		}
		else if (listener->GetKnownType() == ONKEYPRESS)
		{
			verify(!has_keypress);
			verify(!listener->IsFromAttribute());
			has_keypress = TRUE;
		}
		else if (listener->GetKnownType() == ONKEYDOWN)
		{
			verify(!has_keydown);
			verify(!listener->IsFromAttribute());
			has_keydown = TRUE;
		}
		++count;
	}
	verify(count == 3);
	verify(has_click);
	verify(has_keypress);
	verify(has_keydown);
}
