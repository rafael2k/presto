/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2006 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.  It may not be distributed
 * under any circumstances.
 *
 */
group "DOM.Events.WindowEvents";
require init;

language ecmascript;

html
{
	//! <body>
	//! <iframe src="data:text/html,<html><head><script>function func(){document.gotevent = true;}window.addEventListener('DOMContentLoaded',func,false);</script></head><body></body></html>"></iframe>
	//! </body>
}

test("domcontentloaded")
{
	var ifrm = document.getElementsByTagName("iframe")[0];
	verify(ifrm);

	verify(ifrm.contentDocument);
	verify(ifrm.contentDocument.gotevent);
}

html
{
	//! <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
	//! <html><head>
	//! <title> order of load events </title>
	//! </head>
	//! <body onload="failed()">
	//!
	//! 	<p>FAILED (This TC requires JavaScript enabled)</p>
	//!
	//! 	<script type="text/javascript">
	//! 	function failed(){report(false);}
	//! 	function passed(){report(true);}
	//!
	//! 	function report(passed){
	//!			if (passed)
	//!			{
	//!				if (window.got_passed)
	//!					window.got_passed_twice = true;
	//!				window.got_passed = true;
	//!			}
	//!			else
	//!			{
	//!				if (window.got_failed)
	//!					window.got_failed_twice = true;
	//!				window.got_failed = true;
	//!			}
	//! 	}
	//! 	window.onload=passed;
	//! 	</script>
	//!
	//! </body></html>
}

test("attr-prop onload conflict#1")
{
	// Test is really in the html code
	verify(window.got_passed);
	verify(!window.got_passed_twice);
	verify(!window.got_failed);
}

html
{
	//! <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
	//! <html><head>
	//! <title> order of load events </title>
	//! 	<script type="text/javascript">
	//! 	function failed(){report(false);}
	//! 	function passed(){report(true);}
	//!
	//! 	function report(passed){
	//!			if (passed)
	//!			{
	//!				if (window.got_passed)
	//!					window.got_passed_twice = true;
	//!				window.got_passed = true;
	//!			}
	//!			else
	//!			{
	//!				if (window.got_failed)
	//!					window.got_failed_twice = true;
	//!				window.got_failed = true;
	//!			}
	//! 	}
	//! 	window.onload=failed;
	//! 	</script>
	//! </head>
	//! <body onload="passed()">
	//! 	<p>FAILED (This TC requires JavaScript enabled)</p>
	//! </body></html>
}

test("attr-prop onload conflict#2")
{
	// Test is really in the html code
	verify(window.got_passed);
	verify(!window.got_passed_twice);
	verify(!window.got_failed);
}

html
{
	//! <html><body>
	//! <script>
	//! window.onresize=function(){};
	//! window.onload=function(){
	//! window.found_it = (typeof onresize == 'function');
	//! };
	//! </script>
	//! </body></html>
}
test("Looking up event properties")
{
	// Bug 333841
	verify("onresize" in window);
	verify(typeof onresize == 'function');
	verify("found_it" in window);
	verify(window.found_it);

}

html
{
	//! <body><script>
	//! window.gotinlineevent = 0;
	//! window.gotwindowevent = 0;
	//! function foo(evt) { if (evt.target == document) window.gotwindowevent++; else window.gotinlineevent++; }
	//! window.addEventListener("load", foo, true);
	//! </script>
	//! <iframe src="data:text/html,Foo"></iframe>
	//! </body>
}

test("capturing window.onload shouldn't work for inline objects")
{
	verify("gotwindowevent" in window);
	verify(window.gotwindowevent);
	verify(window.gotwindowevent == 1);
	verify("gotinlineevent" in window);
	verify(window.gotinlineevent == 0);
}

html
{
	//! <body>
	//! <iframe src="data:text/html,."></iframe>
	//! </body>
}

test("onhashchange html") async;
{
	// http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#event-hashchange

	var ifrm = document.getElementsByTagName("iframe")[0];
	verify(ifrm);
	verify(ifrm.contentWindow);
	ifrm = ifrm.contentWindow
	verify(ifrm.HashChangeEvent);

	function hc_listener(e){
		var curr_url = ifrm.location.href.split('#')[0];
		verify(e instanceof ifrm.HashChangeEvent);
		verify(e.currentTarget == ifrm);
		switch (number_of_calls++)
		{
		case 0:
			verify(e.oldURL == 'three');
			verify(e.newURL == 'four');
			break;

		case 1:
			verify(e.oldURL == curr_url);
			verify(e.newURL == curr_url + '#one');
			break;

		case 2:
			verify(e.oldURL == curr_url + '#one');
			verify(e.newURL == curr_url + '#two');
			break;

		case 3:
			//history.back();
			verify(e.oldURL == curr_url + '#two');
			verify(e.newURL == curr_url + '#one');

			clearTimeout(test_timeout);
			test_timeout = null;
			ifrm.removeEventListener("hashchange", hc_listener, false);
			ST_passed();
			break;

		default:
			verify(!"Whoops");
		}
	}

	var number_of_calls = 0;
	ifrm.addEventListener("hashchange", hc_listener, false);

	var hce = ifrm.document.createEvent("HashChangeEvent");
	verify(hce && hce.initHashChangeEvent);
	hce.initHashChangeEvent("hashchange", true, false, "three", "four");
	ifrm.dispatchEvent(hce);

	//dispatchEvent is always sync
	verify(number_of_calls == 1);

	ifrm.location.hash = 'one';
	ifrm.location.hash = 'two';

	history.back();

	//async events
	verify(number_of_calls == 1);

	var test_timeout = setTimeout(function(){
		if (test_timeout != null)
		{
			ifrm.removeEventListener("hashchange", hc_listener, false);
			verify(!"timeout");
		}
	},100);
}

test("PopStateEvent")
{
	verify("PopStateEvent" in window);
	verify(PopStateEvent.prototype);
	verify(PopStateEvent.prototype.constructor);
	verify(PopStateEvent.prototype.constructor === PopStateEvent);
	verify(PopStateEvent.prototype.constructor.prototype === PopStateEvent.prototype);
}

html
{
	//! <body>
	//! </body>
}

test("onpopstate addEventListener")
async;
{
	var popevent = document.createEvent("PopStateEvent");
	verify(popevent);
	verify("initPopStateEvent" in popevent);
	popevent.initPopStateEvent("popstate", true, false, {});
	var timeoutid = setTimeout(function() { ST_failed("No popstate event fired", "", ""); }, 200);
	window.addEventListener('popstate', function(e)
										{
											clearTimeout(timeoutid);
											timeoutid = 0;
											if ("state" in e)
											{
												ST_passed();
											}
											else
											{
												ST_failed("no state property in the popstate event", "", "");
											}
										}, false);
	window.dispatchEvent(popevent);
}

html
{
	//! <script>
	//! timeout_id = 0;
	//! popstate_counter = 0;
	//! function HandlePopState(e)
	//! {
	//!     popstate_counter++;
	//!     if (popstate_counter == 1)
	//!     {
	//!         if (timeout_id != 0)
	//!         {
	//!             clearTimeout(timeout_id);
	//!             timeout_id = 0;
	//!         }
	//!         if ("state" in e)
	//!             ST_passed();
	//!         else
	//!             ST_failed("no state property in the popstate event", "", "");
	//!     }
	//! }
	//! </script>
	//! <body onpopstate="HandlePopState(event);">
	//! </body>
}

test("onpopstate html attribute")
async;
{
	var popevent = document.createEvent("PopStateEvent");
	verify(popevent);
	verify("initPopStateEvent" in popevent);
	popevent.initPopStateEvent("popstate", true, false, {});
	timeout_id = setTimeout(function() { ST_failed("No popstate event fired", "", ""); }, 200);
	window.dispatchEvent(popevent);
}

html
{
	//! <body>
	//! <script> popstate_counter = 0; timeout_id = 0; </script>
	//! <iframe src="data:text/html,
	//! <head><script>
	//! function HandlePopState(e){
	//! ++top.popstate_counter;
	//! if (top.popstate_counter == 1)
	//! {
	//!     top.clearTimeout(top.timeout_id);
	//!     top.ST_passed();
	//! }}
	//! </script></head><body onpopstate='HandlePopState(event);'></body>"></iframe>
	//! </body>
}


test("onpopstate while navigating")
async;
{
	var iframe = document.getElementsByTagName('iframe')[0];
	if (!iframe)
		ST_failed("iframe is not present which is not expected", "", "");

	if (iframe.contentWindow)
		iframe = iframe.contentWindow;
	else
		ST_failed("iframe's window is not present which is not expected", "", "");

	timeout_id = setTimeout(function() { ST_failed("not all expected popstate evenets were received", "", ""); }, 5000);
	iframe.location.hash='#test';
	history.back();
}

