// -*- Mode: c++; indent-tabs-mode: nil; c-basic-offset: 2 -*-
group "DOM.Events.ProgressEvent";
require init;

require PROGRESS_EVENTS_SUPPORT;

language ecmascript;

test("Constructor")
{
  verify("ProgressEvent" in window);
  verify(ProgressEvent.prototype);
  verify(ProgressEvent.prototype.constructor);
  verify(ProgressEvent.prototype.constructor === ProgressEvent);
}

test("Prototype")
{
  verify("ProgressEvent" in window);
  verify(ProgressEvent.prototype);
  var p = ProgressEvent.prototype;

  verify("stopPropagation" in p);
  verify("preventDefault" in p);
  verify("initEvent" in p);
}

test("Instance #1")
{
  verify("ProgressEvent" in window);
  var progress = null;
  try {
    progress = new ProgressEvent("progress");
    verify("type" in progress);
    verify("cancelable" in progress);
    verify("bubbles" in progress);
    verify("target" in progress);
    verify("currentTarget" in progress);
    verify("defaultPrevented" in progress);
    verify("isTrusted" in progress);
    verify("lengthComputable" in progress);
    verify("loaded" in progress);
    verify("total" in progress);
    verify(progress.type === "progress");
    verify(progress.lengthComputable === false);
    verify(progress.loaded === 0);
    verify(progress.total === 0);
    verify(progress.isTrusted === false);
  } catch (e) {
    verify(progress);
  }
}

test("Instance #2")
{
  verify("ProgressEvent" in window);
  var progress = null;
  try {
    progress = new ProgressEvent("loadstart", {cancelable: true, lengthComputable: true, loaded: 120, total: 240});
    verify(progress.type === "loadstart");
    verify(progress.lengthComputable === true);
    verify(progress.loaded === 120);
    verify(progress.total === 240);
    verify(progress.isTrusted === false);
  } catch (e) {
    verify(progress);
  }
}

test("Instance #3")
{
  verify("ProgressEvent" in window);
  var progress = null;
  try {
    progress = new ProgressEvent("abort", {cancelable: false, lengthComputable: false, loaded: 120, total: 240});
    verify(progress.type === "abort");
    verify(progress.lengthComputable === false);
    verify(progress.loaded === 120);
    verify(progress.total === 0);
    verify(progress.isTrusted === false);
  } catch (e) {
    verify(progress);
  }
}

test("Instance #4 (web workers)")
  async;
  require DOM_WEBWORKERS_SUPPORT;
{
  var stuff = #string "input/progress.js";
  var url = 'data:text/javascript,' + stuff;
  var w = new Worker(url);

  var expected = [true, true, true, true, true];

  function onMessage(e)
  {
    var passed = true;
    try {
      for (var i = 0; i < e.data.length; i++)
        if (e.data[i] !== true)
          passed = false;
    } catch (e) {
      passed = false;
    }

    if (passed)
      ST_passed();
    else
      ST_failed("e.data was '" + e.data + "', expected '" + expected + "'", "progressevent.ot", 1);
    try { w.terminate(); } catch(e){};
  }

  function onError(e)
  {
    ST_failed("Exception raised: " + e.message, "progressevent.ot", 1);
    try { w.terminate(); } catch(e){};
  }

  w.onmessage = onMessage;
  w.onerror = onError;
}

test("ProgressEvent instance types")
{
  var ev = document.createEvent("ProgressEvent");
  verify(ev);
  verify(ev instanceof Event);
  verify(ev instanceof ProgressEvent);
  verify(typeof ev.lengthComputable == "boolean");
  verify(typeof ev.loaded == "number");
  verify(typeof ev.total == "number");
  verify(typeof ev.initProgressEvent == "function");
}

test("initProgressEvent")
{
  function test_type(t) {
    var ev = document.createEvent("ProgressEvent");
    ev.initProgressEvent(t, false, false, false, 0, 0);
    return ev.type == t;
  }
  verify(test_type("loadstart"));
  verify(test_type("progress"));
  verify(test_type("stalled"));
  verify(test_type("error"));
  verify(test_type("abort"));
  verify(test_type("load"));

  // canBubbleArg
  function test_bubbles(b) {
    var ev = document.createEvent("ProgressEvent");
    ev.initProgressEvent("load", b, false, false, 0, 0);
    return ev.bubbles == b;
  }
  verify(test_bubbles(true));
  verify(test_bubbles(false));

  function test_cancelable(c) {
    var ev = document.createEvent("ProgressEvent");
    ev.initProgressEvent("load", false, c, false, 0, 0);
    return ev.cancelable == c;
  }
  verify(test_cancelable(true));
  verify(test_cancelable(false));

  function test_lengthComputable(l) {
    var ev = document.createEvent("ProgressEvent");
    ev.initProgressEvent("load", false, false, l, 0, 0);
    return ev.lengthComputable == l;
  }
  verify(test_lengthComputable(true));
  verify(test_lengthComputable(false));

  function test_loaded(loaded_in, loaded_out) {
    var ev = document.createEvent("ProgressEvent");
    ev.initProgressEvent("load", false, false, false, loaded_in, 0);
    return ev.loaded == loaded_out;
  }
  verify(test_loaded(0, 0));
  verify(test_loaded(4294967296, 4294967296)); // 2^32
  verify(test_loaded(4503599627370496, 4503599627370496)); // 2^52
  verify(test_loaded(-1, 0));

  function test_total(total_in, total_out) {
    var ev = document.createEvent("ProgressEvent");
    ev.initProgressEvent("load", false, false, true, 0, total_in);
    return ev.total == total_out;
  }
  verify(test_total(0, 0));
  verify(test_total(4294967296, 4294967296)); // 2^32
  verify(test_total(4503599627370496, 4503599627370496)); // 2^52
  verify(test_total(-1, 0));

  // error handling of lengthComputable/total

  var ev = document.createEvent("ProgressEvent");
  ev.initProgressEvent("load", false, false, false, 0, -1);
  verify(ev.total == 0);

  var ev = document.createEvent("ProgressEvent");
  ev.initProgressEvent("load", false, false, false, 0, 1);
  verify(ev.total == 0);

  var ev = document.createEvent("ProgressEvent");
  ev.initProgressEvent("load", false, false, true, 0, -1);
  verify(!ev.lengthComputable);
  verify(ev.total == 0);
}

