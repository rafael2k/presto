group "DOM.Events.EventTarget";
require init;

language ecmascript;

html
{
  "<html>"
  "</html>"
};

test("HasProperty: EventTarget functions")
{
  function checkFunctions_HasProperty(eventtarget, properties)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in eventtarget))
        throw "HasProperty: '" + properties[index] + "' not found";
      if (!(typeof(eventtarget[properties[index]]) == "function"))
        throw "HasProperty: '" + properties[index] + "' not a function";
    }
    return true;
  }

  function checkFunctions_Enumerate(eventtarget, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in eventtarget)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  functions = [ "addEventListener", "removeEventListener", "dispatchEvent" ];

  verify(checkFunctions_HasProperty(document, functions));
  verify(checkFunctions_Enumerate(document, functions));

  var html = document.firstChild;
  verify(checkFunctions_HasProperty(html, functions));
  verify(checkFunctions_Enumerate(html, functions));
}

html
{
  "<html>"
  "</html>"
};

test("Call: EventTarget #1")
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  ev.initUIEvent("DOMActivate", true, true, null, 0);
  verify(ev.type == "DOMActivate");

  result = "DOMActivate: not handled";
  function handleDOMActivate(ev)
  {
    if (ev.type != "DOMActivate")
      result = "DOMActivate: wrong event";
    else if (ev.eventPhase != Event.AT_TARGET)
    {
      result = "DOMActivate: wrong eventPhase: ";
      var ps = "unknown";
      for (var p in Event)
        if (Event[p] == ev.eventPhase)
          ps = p;
      result += ps;
    }
    else if (ev.currentTarget != document)
      result = "DOMActivate: wrong currentTarget: " + ev.currentTarget;
    else
      result = "ok";
  }

  document.addEventListener("DOMActivate", handleDOMActivate, false);
  verify(document.dispatchEvent(ev));

  if (result != "ok")
    throw result;
}

html
{
  "<html>"
  "</html>"
};

test("Call: EventTarget #2")
  disabled;
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  ev.initUIEvent("DOMActivate", true, true, null, 0);
  verify(ev.type == "DOMActivate");

  result = "ok";
  function handleDOMActivate(ev)
  {
    result = "DOMActivate: bogus event";
  }

  document.addEventListener("DOMActivate", handleDOMActivate, true);
  verify(document.dispatchEvent(ev));

  if (result != "ok")
    throw result;
}

html
{
  "<html>"
  "</html>"
};

test("Call: EventTarget #3")
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  ev.initUIEvent("DOMActivate", true, true, null, 0);
  verify(ev.type == "DOMActivate");

  result = "DOMActivate: not handled";
  function handleDOMActivate(ev)
  {
    if (ev.type != "DOMActivate")
      result = "DOMActivate: wrong event";
    else if (ev.eventPhase != Event.BUBBLING_PHASE)
    {
      result = "DOMActivate: wrong phase: ";
      var ps = "unknown";
      for (var p in Event)
        if (Event[p] == ev.eventPhase)
          ps = p;
      result += ps;
    }
    else if (ev.currentTarget != document)
      result = "DOMActivate: wrong currentTarget: " + ev.currentTarget;
    else
      result = "ok";
  }

  document.addEventListener("DOMActivate", handleDOMActivate, false);
  verify(document.firstChild.dispatchEvent(ev));

  if (result != "ok")
    throw result;
}

html
{
  "<html>"
  "</html>"
};

test("Call: EventTarget #4")
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  ev.initUIEvent("DOMActivate", true, true, null, 0);
  verify(ev.type == "DOMActivate");

  result = "DOMActivate: not handled";
  function handleDOMActivate(ev)
  {
    if (ev.type != "DOMActivate")
      result = "DOMActivate: wrong event";
    else if (ev.eventPhase != Event.CAPTURING_PHASE)
    {
      result = "DOMActivate: wrong phase: ";
      var ps = "unknown";
      for (var p in Event)
        if (Event[p] == ev.eventPhase)
          ps = p;
      result += ps;
    }
    else if (ev.currentTarget != document)
      result = "DOMActivate: wrong currentTarget: " + ev.currentTarget;
    else
      result = "ok";
  }

  document.addEventListener("DOMActivate", handleDOMActivate, true);
  verify(document.firstChild.dispatchEvent(ev));

  if (result != "ok")
    throw result;
}

html
{
  "<html>"
    "<body>"
    "</body>"
  "</html>"
};

test("Call: EventTarget #5")
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  ev.initUIEvent("DOMActivate", true, true, null, 0);
  verify(ev.type == "DOMActivate");

  result = "DOMActivate: not handled";
  function handleDOMActivate(ev)
  {
    if (ev.type != "DOMActivate")
      result = "DOMActivate: wrong event";
    else if (ev.eventPhase != Event.AT_TARGET)
    {
      result = "DOMActivate: wrong eventPhase: ";
      var ps = "unknown";
      for (var p in Event)
        if (Event[p] == ev.eventPhase)
          ps = p;
      result += ps;
    }
    else if (ev.currentTarget != document.firstChild)
      result = "DOMActivate: wrong currentTarget: " + ev.currentTarget;
    else
      result = "ok";
  }

  document.firstChild.addEventListener("DOMActivate", handleDOMActivate, false);
  verify(document.firstChild.dispatchEvent(ev));

  if (result != "ok")
    throw result;
}

html
{
  "<html>"
    "<body>"
    "</body>"
  "</html>"
};

test("Call: EventTarget #6")
  disabled;
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  ev.initUIEvent("DOMActivate", true, true, null, 0);
  verify(ev.type == "DOMActivate");

  result = "ok";
  function handleDOMActivate(ev)
  {
    result = "DOMActivate: bogus event";
  }

  document.firstChild.addEventListener("DOMActivate", handleDOMActivate, true);
  verify(document.firstChild.dispatchEvent(ev));

  if (result != "ok")
    throw result;
}

html
{
  "<html>"
    "<body>"
    "</body>"
  "</html>"
};

test("Call: EventTarget #7")
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  ev.initUIEvent("DOMActivate", true, true, null, 0);
  verify(ev.type == "DOMActivate");

  result = "DOMActivate: not handled";
  function handleDOMActivate(ev)
  {
    if (ev.type != "DOMActivate")
      result = "DOMActivate: wrong event";
    else if (ev.eventPhase != Event.BUBBLING_PHASE)
    {
      result = "DOMActivate: wrong phase: ";
      var ps = "unknown";
      for (var p in Event)
        if (Event[p] == ev.eventPhase)
          ps = p;
      result += ps;
    }
    else if (ev.currentTarget != document.firstChild)
      result = "DOMActivate: wrong currentTarget: " + ev.currentTarget;
    else
      result = "ok";
  }

  document.firstChild.addEventListener("DOMActivate", handleDOMActivate, false);
  verify(document.firstChild.firstChild.dispatchEvent(ev));

  if (result != "ok")
    throw result;
}

html
{
  "<html>"
    "<body>"
    "</body>"
  "</html>"
};

test("Call: EventTarget #8")
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  ev.initUIEvent("DOMActivate", true, true, null, 0);
  verify(ev.type == "DOMActivate");

  result = "DOMActivate: not handled";
  function handleDOMActivate(ev)
  {
    if (ev.type != "DOMActivate")
      result = "DOMActivate: wrong event";
    else if (ev.eventPhase != Event.CAPTURING_PHASE)
    {
      result = "DOMActivate: wrong phase: ";
      var ps = "unknown";
      for (var p in Event)
        if (Event[p] == ev.eventPhase)
          ps = p;
      result += ps;
    }
    else if (ev.currentTarget != document.firstChild)
      result = "DOMActivate: wrong currentTarget: " + ev.currentTarget;
    else
      result = "ok";
  }

  document.firstChild.addEventListener("DOMActivate", handleDOMActivate, true);
  verify(document.firstChild.firstChild.dispatchEvent(ev));

  if (result != "ok")
    throw result;
}

html
{
  "<html>"
    "<body>"
    "</body>"
  "</html>"
};

test("Call: EventTarget #9")
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  ev.initUIEvent("DOMActivate", true, true, null, 0);
  verify(ev.type == "DOMActivate");

  result = "DOMActivate: not handled";
  function handleDOMActivate(ev)
  {
    if (ev.type != "DOMActivate")
      result = "DOMActivate: wrong event";
    else if (ev.eventPhase != Event.AT_TARGET)
    {
      result = "DOMActivate: wrong phase: ";
      var ps = "unknown";
      for (var p in Event)
        if (Event[p] == ev.eventPhase)
          ps = p;
      result += ps;
    }
    else if (ev.currentTarget != document.firstChild.firstChild)
      result = "DOMActivate: wrong currentTarget: " + ev.currentTarget;
    else
      result = "ok";
  }

  document.firstChild.firstChild.addEventListener("DOMActivate", handleDOMActivate, false);
  verify(document.firstChild.firstChild.dispatchEvent(ev));

  if (result != "ok")
    throw result;
}

html
{
  "<html>"
    "<body>"
    "</body>"
  "</html>"
};

test("Call: EventTarget #10")
  disabled;
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  ev.initUIEvent("DOMActivate", true, true, null, 0);
  verify(ev.type == "DOMActivate");

  result = "ok";
  function handleDOMActivate(ev)
  {
    result = "DOMActivate: bogus event";
  }

  document.firstChild.firstChild.addEventListener("DOMActivate", handleDOMActivate, true);
  verify(document.firstChild.firstChild.dispatchEvent(ev));

  if (result != "ok")
    throw result;
}

html
{
  "<html>"
  "</html>"
};

test("Call: EventTarget #11")
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  ev.initUIEvent("DOMActivate", true, true, null, 0);
  verify(ev.type == "DOMActivate");

  result = "DOMActivate: not handled";
  count = 0;
  function handleDOMActivate(ev)
  {
    if (count >= 2)
      result = "DOMActivate: too many events";
    else if (ev.type != "DOMActivate")
      result = "DOMActivate: wrong event";
    else if (count == 0 && ev.eventPhase != Event.AT_TARGET ||
             count == 1 && ev.eventPhase != Event.BUBBLING_PHASE)
    {
      result = "DOMActivate: wrong eventPhase: ";
      var ps = "unknown";
      for (var p in Event)
        if (Event[p] == ev.eventPhase)
          ps = p;
      result += ps;
    }
    else if (count == 0 && ev.currentTarget != document.firstChild ||
             count == 1 && ev.currentTarget != document)
      result = "DOMActivate: wrong currentTarget: " + ev.currentTarget;
    else
      result = "ok";

    ++count;
  }

  document.addEventListener("DOMActivate", handleDOMActivate, false);
  document.firstChild.addEventListener("DOMActivate", handleDOMActivate, false);
  verify(document.firstChild.dispatchEvent(ev));

  if (result != "ok")
    throw result;
}

html
{
  "<html>"
  "</html>"
};

test("Call: EventTarget #12")
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  ev.initUIEvent("DOMActivate", true, true, null, 0);
  verify(ev.type == "DOMActivate");

  result = "DOMActivate: not handled";
  count = 0;
  function handleDOMActivate(ev)
  {
    if (count >= 1)
      result = "DOMActivate: too many events";
    else if (ev.type != "DOMActivate")
      result = "DOMActivate: wrong event";
    else if (ev.eventPhase != Event.AT_TARGET)
    {
      result = "DOMActivate: wrong eventPhase: ";
      var ps = "unknown";
      for (var p in Event)
        if (Event[p] == ev.eventPhase)
          ps = p;
      result += ps;
    }
    else if (ev.currentTarget != document)
      result = "DOMActivate: wrong currentTarget: " + ev.currentTarget;
    else
      result = "ok";

    ++count;
  }

  document.addEventListener("DOMActivate", handleDOMActivate, false);
  document.firstChild.addEventListener("DOMActivate", handleDOMActivate, false);
  verify(document.dispatchEvent(ev));

  if (result != "ok")
    throw result;
}

html
{
  "<html>"
  "</html>"
};

test("Call: EventTarget #13")
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  ev.initUIEvent("DOMActivate", true, true, null, 0);
  verify(ev.type == "DOMActivate");

  result = "DOMActivate: not handled";
  count = 0;
  function handleDOMActivate(ev)
  {
    if (count >= 2)
      result = "DOMActivate: too many events";
    else if (ev.type != "DOMActivate")
      result = "DOMActivate: wrong event";
    else if (count == 0 && ev.eventPhase != Event.CAPTURING_PHASE ||
             count == 1 && ev.eventPhase != Event.AT_TARGET)
    {
      result = "DOMActivate: wrong eventPhase: ";
      var ps = "unknown";
      for (var p in Event)
        if (Event[p] == ev.eventPhase)
          ps = p;
      result += ps;
    }
    else if (count == 0 && ev.currentTarget != document ||
             count == 1 && ev.currentTarget != document.firstChild)
      result = "DOMActivate: wrong currentTarget: " + ev.currentTarget;
    else
      result = "ok";

    ++count;
  }

  document.addEventListener("DOMActivate", handleDOMActivate, true);
  document.firstChild.addEventListener("DOMActivate", handleDOMActivate, false);
  verify(document.firstChild.dispatchEvent(ev));

  if (result != "ok")
    throw result;
}

html
{
  "<html>"
  "</html>"
};

test("Call: EventTarget #14")
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  ev.initUIEvent("DOMActivate", true, true, null, 0);
  verify(ev.type == "DOMActivate");

  result = "DOMActivate: not handled";
  count = 0;
  function handleDOMActivate(ev)
  {
    if (count >= 2)
      result = "DOMActivate: too many events";
    else if (ev.type != "DOMActivate")
      result = "DOMActivate: wrong event";
    else if (count == 0 && ev.eventPhase != Event.AT_TARGET ||
             count == 1 && ev.eventPhase != Event.BUBBLING_PHASE)
    {
      result = "DOMActivate: wrong eventPhase: ";
      var ps = "unknown";
      for (var p in Event)
        if (Event[p] == ev.eventPhase)
          ps = p;
      result += ps;
    }
    else if (count == 0 && ev.currentTarget != document.firstChild ||
             count == 1 && ev.currentTarget != document)
      result = "DOMActivate: wrong currentTarget: " + ev.currentTarget;
    else
      result = "ok";

    ++count;
  }

  document.addEventListener("DOMActivate", handleDOMActivate, false);
  document.firstChild.addEventListener("DOMActivate", handleDOMActivate, true);
  verify(document.firstChild.dispatchEvent(ev));

  if (result != "ok")
    throw result;
}

html
{
  "<html>"
  "</html>"
};

test("Call: EventTarget #15")
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  ev.initUIEvent("DOMActivate", true, true, null, 0);
  verify(ev.type == "DOMActivate");

  result = "DOMActivate: not handled";
  function handleDOMActivate(ev)
  {
    try
    {
      ev.currentTarget.dispatchEvent (ev);
      result = "DOMActivate: no exception";
    }
    catch (err)
    {
      if (err.code != 1)
        result = "DOMActivate: wrong exception";
      else
        result = "ok";
    }
  }

  document.firstChild.addEventListener("DOMActivate", handleDOMActivate, false);
  verify(document.firstChild.dispatchEvent(ev));

  if (result != "ok")
    throw result;
}

html
{
  "<html>"
  "<p></p>"
  "</html>"
};

test("removeEventListener with wrong arguments")
{
  var node = document.getElementsByTagName('p')[0];
  verify(node);
  try
  {
    node.removeEventListener('mouseover', null, false);
  }
  catch(err)
  {
    verify(!"removeEventListener threw an exception when called with wrong arguments.");
  }
}

test("addEventListener with wrong arguments")
{
  var node = document.getElementsByTagName('p')[0];
  verify(node);
  try
  {
    node.addEventListener('mouseover', null, false);
  }
  catch(err)
  {
    verify(!"addEventListener threw an exception when called with wrong arguments.");
  }
}

test("dispatchEvent with wrong arguments")
{
  var ev = document.createEvent("UIEvents");
  verify(ev);

  try
  {
     document.dispatchEvent.call(Object,ev);
     result = "dispatchEvent: no exception";
  }
  catch (err)
  {
      if (err.code != 7)
        result = "dispatchEvent: wrong exception code: " + err.code + "; error: " + err;
      else
        result = "ok";
  }
  if (result != "ok")
    throw result;
}
