group "DOM.Canvas.2d";

require CANVAS_SUPPORT;

require init;

language ecmascript;

html
{
  "<html>"
    "<body>"
    "<canvas id='canvas'>"
    "</canvas>"
    "</body>"
  "</html>"
}

test("Setup")
{

  canvas = document.getElementById('canvas');
  verify(canvas);
  context = canvas.getContext('2d');
  verify(context);
}

test("fillStyle")
  require success "Setup";
{
  context.fillStyle='#ff0000';
  verify(context.fillStyle=='#ff0000');
  context.fillStyle = "kossa";
  verify(context.fillStyle=='#ff0000');

  context.fillStyle = "rgba(20, 20, 20, 0.004)";
  verify(context.fillStyle == "rgba(20, 20, 20, 0.0039216)");
  context.fillStyle = "rgba(20, 20, 20, 0.002)";
  verify(context.fillStyle == "rgba(20, 20, 20, 0.0039216)");
  context.fillStyle = "rgba(20, 20, 20, 0.001)";
  verify(context.fillStyle == "rgba(20, 20, 20, 0.0)");
  context.fillStyle = "rgba(20, 20, 20, 0.0)";
  verify(context.fillStyle == "rgba(20, 20, 20, 0.0)");
  context.fillStyle = "rgba(20, 20, 20, 1.0)";
  verify(context.fillStyle == "#141414");
  context.fillStyle = "rgba(20, 20, 20, 0.999)";
  verify(context.fillStyle == "#141414");
  context.fillStyle = "rgba(20, 20, 20, 0.998)";
  verify(context.fillStyle == "rgba(20, 20, 20, 0.99608)");
  context.fillStyle = "rgba(20, 20, 20, 0.996)";
  verify(context.fillStyle == "rgba(20, 20, 20, 0.99608)");
  context.fillStyle = "rgba(20, 20, 20, 0.5)";
  verify(context.fillStyle == "rgba(20, 20, 20, 0.50196)");
}

test("save/restore")
  require success "Setup";
{
	// set a lot of parameters
	context.strokeStyle = "#ff0000";
	context.fillStyle = "#ff0000";
	context.globalAlpha = 0.5;
	context.lineWidth = 10;
	context.lineCap = "round";
	context.lineJoin = "round";
	context.miterLimit = 5;
	context.shadowOffsetX = 10;
	context.shadowOffsetY = 10;
	context.shadowBlur = 10;
	context.shadowColor = "#ff0000";
	context.globalCompositeOperation = "xor";
	context.save();
	// Change them
	context.strokeStyle = "#00ff00";
	context.fillStyle = "#00ff00";
	context.globalAlpha = 0.1;
	context.lineWidth = 5;
	context.lineCap = "square";
	context.lineJoin = "miter";
	context.miterLimit = 1;
	context.shadowOffsetX = 5;
	context.shadowOffsetY = 5;
	context.shadowBlur = 5;
	context.shadowColor = "#00ff00";
	context.globalCompositeOperation = "source-atop";

	context.restore();
	verify(context.strokeStyle == "#ff0000");
	verify(context.fillStyle == "#ff0000");
	verify(context.globalAlpha > 0.49 && context.globalAlpha < 0.51);
	verify(context.lineWidth == 10);
	verify(context.lineCap == "round");
	verify(context.lineJoin == "round");
	verify(context.miterLimit == 5);
	verify(context.shadowOffsetX == 10);
	verify(context.shadowOffsetY == 10);
	verify(context.shadowBlur == 10);
	verify(context.shadowColor == "#ff0000");
	verify(context.globalCompositeOperation == "xor");
	context.restore();
	verify(context.strokeStyle == "#ff0000");
	verify(context.fillStyle == "#ff0000");
	verify(context.globalAlpha > 0.49 && context.globalAlpha < 0.51);
	verify(context.lineWidth == 10);
	verify(context.lineCap == "round");
	verify(context.lineJoin == "round");
	verify(context.miterLimit == 5);
	verify(context.shadowOffsetX == 10);
	verify(context.shadowOffsetY == 10);
	verify(context.shadowBlur == 10);
	verify(context.shadowColor == "#ff0000");
	verify(context.globalCompositeOperation == "xor");
}

test("scale")
  require success "Setup";
{
	var ex = null;
	try {
		context.scale();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.scale(1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.scale(1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.scale(1, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.scale("kossa", context);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
}

test("rotate")
  require success "Setup";
{
	var ex = null;
	try {
		context.rotate();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.rotate(1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.rotate(1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.rotate("kossa");
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
}

test("translate")
  require success "Setup";
{
	var ex = null;
	try {
		context.translate();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.translate(1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.translate(1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.translate(1, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.translate("kossa", context);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
}

test("transform")
  require success "Setup";
{
	var ex = null;
	try {
		context.transform();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.transform(1, 1, 1, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.transform(1, 1, 1, 1, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.transform(1, 1, 1, 1, 1, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.transform("kossa", 0, 0, 0, 0, 0);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
}

test("setTransform")
  require success "Setup";
{
	var ex = null;
	try {
		context.setTransform();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.setTransform(1, 1, 1, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.setTransform(1, 1, 1, 1, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.setTransform(1, 1, 1, 1, 1, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.setTransform("kossa", 0, 0, 0, 0, 0);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
}

test("clearRect")
  require success "Setup";
{
	var ex = null;
	try {
		context.clearRect();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.clearRect(0, 0, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.clearRect(0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.clearRect(0, 0, 1, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.clearRect("kossa", 0, 1, 1);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
}

test("fillRect")
  require success "Setup";
{
	var ex = null;
	try {
		context.fillRect();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.fillRect(0, 0, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.fillRect(0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.fillRect(0, 0, 1, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.fillRect("kossa", 0, 1, 1);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
}

test("strokeRect")
  require success "Setup";
{
	var ex = null;
	try {
		context.strokeRect();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.strokeRect(0, 0, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.strokeRect(0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.strokeRect(0, 0, 1, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.strokeRect("kossa", 0, 1, 1);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
}

test("beginPath")
  require success "Setup";
{
	var ex = null;
	try {
		context.beginPath();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.beginPath(0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
}

test("moveTo")
  require success "Setup";
{
	var ex = null;
	try {
		context.moveTo();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.moveTo(0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.moveTo(0, 0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.moveTo("kossa", 0);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
}

test("closePath")
  require success "Setup";
{
	var ex = null;
	try {
		context.closePath();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.closePath(0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
}

test("lineTo")
  require success "Setup";
{
	var ex = null;
	try {
		context.lineTo();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.lineTo(0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.lineTo(0, 0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.lineTo("kossa", 0);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
}

test("quadraticCurveTo")
  require success "Setup";
{
	var ex = null;
	try {
		context.quadraticCurveTo();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.quadraticCurveTo(0, 0, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.quadraticCurveTo(0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.quadraticCurveTo("kossa", 0, 1, 1);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
}

test("bezierCurveTo")
  require success "Setup";
{
	var ex = null;
	try {
		context.bezierCurveTo();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.bezierCurveTo(0, 0, 0, 0, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.bezierCurveTo(0, 0, 0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.bezierCurveTo("kossa", 0, 0, 0, 1, 1);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
}

test("arcTo")
  require success "Setup";
{
	var ex = null;
	try {
		context.arcTo();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.arcTo(0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.arcTo(0, 0, 1, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.arcTo("kossa", 0, 1, 1, 1);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
}

test("arc")
  require success "Setup";
{
	var ex = null;
	try {
		context.arc();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.arc(0, 0, 1, 0, 3.14);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.arc(0, 0, 1, 0, 3.14, true);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.arc(0, 0, 1, 0, 3.14, true, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.arc("kossa", 0, 1, 0, 3.14, true);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.arc(0, 0, 0, 0, 3.14, true);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.arc(0, 0, -1, 0, 3.14, true);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == DOMException.INDEX_SIZE_ERR);
}

test("rect")
  require success "Setup";
{
	var ex = null;
	try {
		context.rect();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.rect(0, 0, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.rect(0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.rect(0, 0, 1, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.rect("kossa", 0, 1, 1);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.rect(0, 0, -1, -1);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
}

test("fill")
  require success "Setup";
{
	var ex = null;
	try {
		context.fill();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.fill(0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
}

test("stroke")
  require success "Setup";
{
	var ex = null;
	try {
		context.stroke();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.stroke(0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
}

test("clip")
  require success "Setup";
{
	var ex = null;
	try {
		context.save();
		context.clip();
		context.restore();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.save();
		context.clip(0);
		context.restore();
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
}

test("isPointInPath")
  require success "Setup";
{
	var ex = null;
	try {
		context.isPointInPath();
	} catch (e) {
		ex = e.code;
	}
	verify(ex != null);
	ex = null;
	try {
		context.isPointInPath("kossa", 0);
	} catch (e) {
		verify(!"Should not be an exception");
		ex = e.code;
	}
	verify(ex == null);
	context.setTransform(1,0,0,1,0,0);
	context.beginPath();
	context.rect(10, 10, 10, 10);
	verify(!context.isPointInPath(0,0));
	verify(context.isPointInPath(15,15));
}

test("drawImage")
  require success "Setup";
{
	var img = new Image();
	img.src = canvas.toDataURL();
	var cvs = document.createElement("canvas");
	cvs.getContext('2d');
	var ex = null;
	try {
		context.drawImage(img);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.drawImage(cvs);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.drawImage(null);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == DOMException.TYPE_MISMATCH_ERR);
	ex = null;
	try {
		context.drawImage(img, 0, 0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.drawImage(cvs, 0, 0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.drawImage(null, 0, 0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == DOMException.TYPE_MISMATCH_ERR);
	ex = null;
	try {
		context.drawImage(img, 0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.drawImage(cvs, 0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.drawImage(null, 0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == DOMException.TYPE_MISMATCH_ERR);
	ex = null;
	try {
		context.drawImage(img, 0, 0, 1, 1, 0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.drawImage(cvs, 0, 0, 1, 1, 0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.drawImage(null, 0, 0, 1, 1, 0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == DOMException.TYPE_MISMATCH_ERR);
	ex = null;

	// Negative size
	try {
		context.drawImage(img, 0, 0, -1, -1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == DOMException.INDEX_SIZE_ERR);
	ex = null;
	try {
		context.drawImage(img, -1, -1, 1, 1, 0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == DOMException.INDEX_SIZE_ERR);
	ex = null;
	try {
		context.drawImage(img, 1000, 1000, 1, 1, 0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
	try {
		context.drawImage(img, 0, 0, 1000, 1000, 0, 0, 1, 1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	ex = null;
}

test("createPattern")
  require success "Setup";
{
	var img = new Image();
	img.src = canvas.toDataURL();
	var cvs = document.createElement("canvas");
	cvs.getContext('2d');
	var ex = null;
	try {
		context.createPattern(img);
	} catch (e) {
		ex = e.code;
	}
	verify(ex != null);
	try {
		context.createPattern(cvs);
	} catch (e) {
		ex = e.code;
	}
	verify(ex != null);
	try {
		context.createPattern(null);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == DOMException.TYPE_MISMATCH_ERR);
	ex = null;
	try {
		context.createPattern(img, "", 0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.createPattern(cvs, "", 0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.createPattern(null, "", 0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == DOMException.TYPE_MISMATCH_ERR);
}

test("createLinearGradient")
  require success "Setup";
{
	var ex = null;
	try {
		context.createLinearGradient();
	} catch (e) {
		ex = e.code;
	}
	verify(ex != null);
	ex = null;
	try {
		context.createLinearGradient(0,0,1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex != null);
	ex = null;
	try {
		context.createLinearGradient(0,0,1,1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.createLinearGradient(0,0,1,1,1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.createLinearGradient("kossa",0,1,1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex != null);
}

test("createRadialGradient")
  require success "Setup";
{
	var ex = null;
	try {
		context.createRadialGradient();
	} catch (e) {
		ex = e.code;
	}
	verify(ex != null);
	ex = null;
	try {
		context.createRadialGradient(0,0,0,0,0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex != null);
	ex = null;
	try {
		context.createRadialGradient(0,0,0,0,0,1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.createRadialGradient(0,0,0,0,0,1,0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		context.createLinearGradient("kossa",0,0,0,0,1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex != null);
	// FIXME: not sure about this test, the spec has changed a lot in this area
	/*ex = null;
	try {
		context.createLinearGradient(0,0,-1,0,0,-1);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == DOMException.INDEX_SIZE_ERR);*/
}

test("addColorStop")
  require success "Setup";
{
	var gradient = context.createLinearGradient(0,0,1,1);
	verify(gradient);

	var ex = null;
	try {
		gradient.addColorStop();
	} catch (e) {
		ex = e.code;
	}
	verify(ex != null);

	ex = null;
	try {
		gradient.addColorStop(0, "black");
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);
	try {
		gradient.addColorStop(-1, "black");
	} catch (e) {
		ex = e.code;
	}
	verify(ex == DOMException.INDEX_SIZE_ERR);
	ex = null;
	try {
		gradient.addColorStop(2, "black");
	} catch (e) {
		ex = e.code;
	}
	verify(ex == DOMException.INDEX_SIZE_ERR);
}

test("getImageData/putImageData")
  require success "Setup";
{
	var ex = null;
	try {
		context.getImageData();
	} catch (e) {
		ex = e.code;
	}
	verify(ex != null);
	ex = null;
	try {
		context.getImageData(0,0,0,0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == DOMException.INDEX_SIZE_ERR);

	context.getImageData(0,0,-1,-1); // Shouldn't throw

	var epsilon = 2.2204460492503131e-16;
	ex = null;
	try {
		// Causes integer overflow => INDEX_SIZE_ERR
		context.getImageData(Math.pow(2, 31) - 1, 0, epsilon, 1);
	} catch(e) {
		ex = e.code;
	}
	verify(ex == DOMException.INDEX_SIZE_ERR);

	context.getImageData(Math.pow(2, 31) - 2, 0, epsilon, 1); // Shouldn't throw

	ex = null;
	try {
		context.putImageData();
	} catch (e) {
		ex = e.code;
	}
	verify(ex != null);
	ex = null;
	try {
		context.putImageData(null, 0, 0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex != null);

	context.setTransform(1,0,0,1,0,0);
	context.globalAlpha = 1;
	context.fillStyle = "#00ff00";
	context.globalCompositeOperation = "source-over";
	context.fillRect(0,0,10,10);
	var imgdata = context.getImageData(0, 0, 10, 10);
	verify(imgdata.width == 10 && imgdata.height == 10);
	verify(imgdata.data[0] == 0);
	verify(imgdata.data[1] == 255);
	verify(imgdata.data[2] == 0);
	verify(imgdata.data[3] == 255);
	imgdata.data[0] = 255;
	imgdata.data[1] = 0;
	context.putImageData(imgdata, 0, 0);
	imgdata = context.getImageData(0, 0, 10, 10);
	verify(imgdata.width == 10 && imgdata.height == 10);
	verify(imgdata.data[0] == 255);
	verify(imgdata.data[1] == 0);
	verify(imgdata.data[2] == 0);
	verify(imgdata.data[3] == 255);

	context.fillStyle = "#ff0000";
	context.fillRect(0, 0, 10, 10);
	// Put green 5x5 square at 5,5
	context.putImageData(imgdata, 3, 3, 2, 2, 5, 5);
	var ver_img = context.getImageData(0, 0, 10, 10);
	var is_uniform_block = function(b, x, y, w, h, col)
	{
		var d = b.data
		for (var iy = y; iy < y + h; ++iy)
		{
			var idx = (iy * b.width + x) * 4;
			for (var ix = x; ix < x + w; ++ix, idx+=4)
			{
				if (d[idx+0] != col[0] || d[idx+1] != col[1] ||
					d[idx+2] != col[2] || d[idx+3] != col[3])
					return false;
			}
		}
		return true;
	}
	var red = [255, 0, 0, 255];
	var lime = [0, 255, 0, 255];
	verify(is_uniform_block(ver_img, 0, 0, 10, 5, red));
	verify(is_uniform_block(ver_img, 0, 5, 5, 5, red));
	verify(is_uniform_block(ver_img, 5, 5, 5, 5, lime));

	// Put green 5x5 square at 5,0
	context.putImageData(imgdata, 5, -5, 0, 5, 5, 5);
	ver_img = context.getImageData(0, 0, 10, 10);
	// There should now be one 5x10 stripe of red @0,0 and one stripe of lime @5,0
	verify(is_uniform_block(ver_img, 0, 0, 5, 10, red));
	verify(is_uniform_block(ver_img, 5, 0, 5, 10, lime));
}

test("createImageData")
  require success "Setup";
{
	var ex = null;
	try {
		context.createImageData();
	} catch (e) {
		ex = e.code;
	}
	verify(ex != null);
	var ex = null;
	try {
		context.createImageData(null);
	} catch (e) {
		ex = e.code;
	}
	verify(ex != null);

	// If any of the arguments to createImageData() [...] are infinite or NaN
	// [...], the method must instead raise a NOT_SUPPORTED_ERR exception.
	var dim = [+Infinity, -Infinity, NaN];
	var dim2 = [+Infinity, -Infinity, NaN, -1, 0, 1];
	var i, j;
	for (i=0;i<dim.length;i++) {
		for (j=0;j<dim2.length;j++) {
			ex = null;
			try {
				context.createImageData(dim[i], dim2[j]);
			} catch (e) {
				ex = e.code;
			}
			verify(ex == DOMException.NOT_SUPPORTED_ERR);
			ex = null;
			try {
				context.createImageData(dim2[j], dim[i]);
			} catch (e) {
				ex = e.code;
			}
			verify(ex == DOMException.NOT_SUPPORTED_ERR);
		}
	}

	// If either the sw or sh arguments are zero, the method must instead
	// raise an INDEX_SIZE_ERR exception.
	dim = [-1, 0, 1];
	for (i=0;i<dim.length;i++) {
		ex = null;
		try {
			context.createImageData(0, dim[i]);
		} catch (e) {
			ex = e.code;
		}
		verify(ex == DOMException.INDEX_SIZE_ERR);
		ex = null;
		try {
			context.createImageData(dim[i], 0);
		} catch (e) {
			ex = e.code;
		}
		verify(ex == DOMException.INDEX_SIZE_ERR);
	}

	dim = [-10, 5];
	for (i=0;i<dim.length;i++) {
		for (j=0;j<dim.length;j++) {
			var im;
			try {
				im = context.createImageData(dim[i], dim[j]);
			} catch (e) {
				verify(!"no exception expected");
			}
			verify(im.width == Math.abs(dim[i]));
			verify(im.height == Math.abs(dim[j]));
			verify(im.data.length == Math.abs(dim[i]*dim[j])*4);
			// The ImageData object return must be filled with transparent black.
			for (var k=0;k<im.data.length;k++) {
				verify(im.data[i] == 0);
			}
		}
	}
}

test("CORE-27420 drawImage exceptions")
	require success "Setup";
{
	var cvs = document.createElement("canvas");
	var ctx = cvs.getContext("2d");
	var img = new Image();

	var ex = null;
	img.src = "no/image/here";
	try {
		ctx.drawImage(img, 0, 0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);

	ex = null;
	img.src = "";
	try {
		context.drawImage(img, 0, 0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == null);

	ex = null;
	try {
		ctx.drawImage(document.createElement("p"), 0, 0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == DOMException.TYPE_MISMATCH_ERR);

	ex = null;
	try {
		ctx.drawImage(document, 0, 0);
	} catch (e) {
		ex = e.code;
	}
	verify(ex == DOMException.TYPE_MISMATCH_ERR);
}

test("CORE-30464 invalid font attribute")
	require success "Setup";
{
	// invalid font specs unexpected, causing a NULL deref previously.
	var cvs = document.createElement("canvas");
	var ctx = cvs.getContext("2d");
	ex = null;
	try {
		ctx.font = "10px fake.wlv";
	} catch (e) {
		ex = e;
	}
	verify (ex == null);
};
