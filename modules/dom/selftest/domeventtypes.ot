/* -*- mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "DOM.DOMEventTypes.simple";

include "modules/dom/domeventtypes.h";
include "modules/dom/src/domevents/domevent.h";
include "modules/dom/src/domevents/domeventdata.h";
include "modules/dom/src/domglobaldata.h";

test("Every event type has a name")
{
	for (int index = 0; index < DOM_EVENTS_COUNT; ++index)
	{
		verify(g_DOM_eventData[index].name);
		verify(op_strlen(g_DOM_eventData[index].name) > 0 || index == ONMOUSEWHEELH || index == ONMOUSEWHEELV);
	}
	verify(!g_DOM_eventData[DOM_EVENTS_COUNT].name);
}

test("Conversion: name => type (DOM3_EVENTS)")
	require DOM3_EVENTS;
{
	const DOM_EventData *p = &g_DOM_eventData[0];

	while (p->name)
	{
		OpString un;
		verify_success(un.SetFromUTF8(p->name));
		verify(DOM_Event::GetEventType(NULL, un.CStr(), FALSE) == (DOM_EventType) (p - g_DOM_eventData));
		++p;
	}
}

test("Conversion: namespace+name => type (DOM3_EVENTS)")
	require DOM3_EVENTS;
{
	const DOM_EventNamespaceData *p = &g_DOM_eventNamespaceData[0];

	while (p->known_type != DOM_EVENT_NONE)
	{
		OpString unsuri;
		OpString uln;
		verify_success(unsuri.SetFromUTF8(p->namespaceURI));
		verify_success(uln.SetFromUTF8(p->localname));
		verify(DOM_Event::GetEventType(unsuri.CStr(), uln.CStr(), FALSE) == p->known_type);
		++p;
	}
}

test("Event type name translation (!DOM3_EVENTS)")
	require undefined DOM3_EVENTS;
{
	const DOM_EventData *p = &g_DOM_eventData[0];

	while (p->name)
	{
		if (*p->name)
		{
			OpString un;
			verify_success(un.SetFromUTF8(p->name));
			verify(DOM_Event::GetEventType(un.CStr(), FALSE) == (DOM_EventType) (p - g_DOM_eventData));
		}
		++p;
	}
}
