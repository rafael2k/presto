group "DOM.XPath.XPathEvaluator.functions";
require init;
require DOM3_XPATH;
language ecmascript;

test("HasProperty: XPathEvaluator functions")
{
  function checkFunctions_HasProperty(object, properties)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in object))
        throw "HasProperty: '" + properties[index] + "' not found";
      if (!(typeof(object[properties[index]]) == "function"))
        throw "HasProperty: '" + properties[index] + "' not a function";
    }
    return true;
  }

  function checkFunctions_Enumerate(object, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in object)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  functions = [ "createExpression", "createNSResolver", "evaluate" ];

  verify(checkFunctions_HasProperty(document, functions));
  verify(checkFunctions_Enumerate(document, functions));
}

group "DOM.XPath.XPathEvaluator.functions.createExpression";
require init;
require DOM3_XPATH;
language ecmascript;

test("Call: XPathEvaluator.createExpression #1")
{
  var expression = document.createExpression(".//div", null);

  verify (expression);
  verify (Object.prototype.toString.call(expression) == "[object XPathExpression]");
}

test("Call: XPathEvaluator.createExpression #2")
{
  var exception = null;

  try
  {
    document.createExpression("this is invalid", null);
  }
  catch (exception0)
  {
    exception = exception0;
  }

  verify(exception);
  verify(exception instanceof XPathException);
  verify(typeof exception == "object");
  verify(Object.prototype.toString.call(exception) == "[object XPathException]");
  verify(exception["code"] == 51);
}

test("Call: XPathEvaluator.createExpression #3")
{
  var exception = null;

  try
  {
    document.createExpression(".//html:div", null);
  }
  catch (exception0)
  {
    exception = exception0;
  }

  verify(exception);
  verify(typeof exception == "object");
  verify(Object.prototype.toString.call(exception) == "[object DOMException]");
  verify(exception["code"] == 14);
}

test("Call: XPathEvaluator.createExpression #4")
{
  var exception = null;

  try
  {
    document.createExpression(".//html:div", { lookupNamespaceURI: function (prefix) { return null; } });
  }
  catch (exception0)
  {
    exception = exception0;
  }

  verify(exception);
  verify(typeof exception == "object");
  verify(Object.prototype.toString.call(exception) == "[object DOMException]");
  verify(exception["code"] == 14);
}


test("Call: XPathEvaluator.createExpression #5")
{
  var exception = null;

  try
  {
    var expression = document.createExpression(".//html:div", { lookupNamespaceURI: function (prefix) { return prefix == "html" ? "http://www.example.com/" : null; } });
    verify(expression);
    verify(Object.prototype.toString.call(expression) == "[object XPathExpression]");
  }
  catch (exception0)
  {
    exception = exception0;
  }

  verify(exception == null);
}

test("Call: XPathEvaluator.createExpression #1 (standalone)")
{
  var expression = (new XPathEvaluator).createExpression(".//div", null);

  verify (expression);
  verify (Object.prototype.toString.call(expression) == "[object XPathExpression]");
}

test("Call: XPathEvaluator.createExpression #2 (standalone)")
{
  var exception = null;

  try
  {
    (new XPathEvaluator).createExpression("this is invalid", null);
  }
  catch (exception0)
  {
    exception = exception0;
  }

  verify(exception);
  verify(exception instanceof XPathException);
  verify(typeof exception == "object");
  verify(Object.prototype.toString.call(exception) == "[object XPathException]");
  verify(exception["code"] == 51);
}

test("Call: XPathEvaluator.createExpression #3 (standalone)")
{
  var exception = null;

  try
  {
    (new XPathEvaluator).createExpression(".//html:div", null);
  }
  catch (exception0)
  {
    exception = exception0;
  }

  verify(exception);
  verify(typeof exception == "object");
  verify(Object.prototype.toString.call(exception) == "[object DOMException]");
  verify(exception["code"] == 14);
}

test("Call: XPathEvaluator.createExpression #4 (standalone)")
{
  var exception = null;

  try
  {
    (new XPathEvaluator).createExpression(".//html:div", { lookupNamespaceURI: function (prefix) { return null; } });
  }
  catch (exception0)
  {
    exception = exception0;
  }

  verify(exception);
  verify(typeof exception == "object");
  verify(Object.prototype.toString.call(exception) == "[object DOMException]");
  verify(exception["code"] == 14);
}


test("Call: XPathEvaluator.createExpression #5 (standalone)")
{
  var exception = null;

  try
  {
    var expression = (new XPathEvaluator).createExpression(".//html:div", { lookupNamespaceURI: function (prefix) { return prefix == "html" ? "http://www.example.com/" : null; } });
    verify(expression);
    verify(Object.prototype.toString.call(expression) == "[object XPathExpression]");
  }
  catch (exception0)
  {
    exception = exception0;
  }

  verify(exception == null);
}

group "DOM.XPath.XPathEvaluator.functions.createNSResolver";
require init;
require DOM3_XPATH;
language ecmascript;

test("Call: XPathEvaluator.createNSResolver #1")
{
  var resolver = document.createNSResolver(document);
  verify(resolver);
  verify(Object.prototype.toString.call(resolver) == "[object XPathNSResolver]");
}

test("Call: XPathEvaluator.createNSResolver #1 (standalone)")
{
  var resolver = (new XPathEvaluator).createNSResolver(document);
  verify(resolver);
  verify(Object.prototype.toString.call(resolver) == "[object XPathNSResolver]");
}

group "DOM.XPath.XPathEvaluator.functions.evaluate";
require init;
require DOM3_XPATH;
language ecmascript;

xml
{
  "<!DOCTYPE root>"
  "<root>"
    "<element/>"
    "<element/>"
  "</root>"
}

test("Call: XPathEvaluator.evaluate #1")
{
  var result = document.evaluate("root/element", document, null, 0, null);
  verify(result);
  verify(Object.prototype.toString.call(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == document.documentElement.firstChild);
  verify(result.iterateNext() == document.documentElement.lastChild);
  verify(result.iterateNext() == null);
}

test("Call: XPathEvaluator.evaluate #2")
{
  var result = document.evaluate("element", document, null, 0, null);
  verify(result);
  verify(Object.prototype.toString.call(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == null);
}

test("Call: XPathEvaluator.evaluate #3")
{
  var result = document.evaluate("element", document.documentElement, null, 0, null);
  verify(result);
  verify(Object.prototype.toString.call(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == document.documentElement.firstChild);
  verify(result.iterateNext() == document.documentElement.lastChild);
  verify(result.iterateNext() == null);
}

test("Call: XPathEvaluator.evaluate #4")
{
  var exception = null;

  try
  {
    document.evaluate("this is invalid", document, null, 0, null);
  }
  catch (exception0)
  {
    exception = exception0;
  }

  verify(exception);
  verify(exception instanceof XPathException);
  verify(typeof exception == "object");
  verify(Object.prototype.toString.call(exception) == "[object XPathException]");
  verify(exception["code"] == 51);
}

test("Call: XPathEvaluator.evaluate #5")
{
  var exception = null;

  try
  {
    document.evaluate("prefix:root", document, null, 0, null);
  }
  catch (exception0)
  {
    exception = exception0;
  }

  verify(exception);
  verify(exception instanceof DOMException);
  verify(typeof exception == "object");
  verify(Object.prototype.toString.call(exception) == "[object DOMException]");
  verify(exception["code"] == 14);
}

test("Call: XPathEvaluator.evaluate #6")
{
  var exception = null;

  try
  {
    document.evaluate("prefix:root", document, { lookupNamespaceURI: function (prefix) { return null; } }, 0, null);
  }
  catch (exception0)
  {
    exception = exception0;
  }

  verify(exception);
  verify(exception instanceof DOMException);
  verify(typeof exception == "object");
  verify(Object.prototype.toString.call(exception) == "[object DOMException]");
  verify(exception["code"] == 14);
}

xml
{
  "<!DOCTYPE prefix:root>"
  "<prefix:root xmlns:prefix='http://www.example.org/'>"
    "<prefix:element/>"
    "<prefix:element/>"
  "</prefix:root>"
}

test("Call: XPathEvaluator.evaluate #7")
{
  var result = document.evaluate("prefix:root", document, { lookupNamespaceURI: function (prefix) { return prefix == "prefix" ? "http://www.example.org/" : null; } }, 0, null);
  verify(result);
  verify(Object.prototype.toString.call(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == document.documentElement);
  verify(result.iterateNext() == null);
}

test("Call: XPathEvaluator.evaluate #8")
{
  var result = document.evaluate("prefix:root", document, document.createNSResolver(document.documentElement), 0, null);
  verify(result);
  verify(Object.prototype.toString.call(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == document.documentElement);
  verify(result.iterateNext() == null);
}

xml
{
  "<!DOCTYPE root>"
  "<root attribute='value'>"
    "<element/>"
    "<element/>"
  "</root>"
}

test("Call: XPathEvaluator.evaluate #9")
{
  var result = document.evaluate("..", document.documentElement.getAttributeNode("attribute"), null, 0, null);
  verify(result);
  verify(Object.prototype.toString.call(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == document.documentElement);
  verify(result.iterateNext() == null);
}

xml
{
  "<!DOCTYPE prefix:root>"
  "<root xmlns:prefix='http://www.example.org/'>"
    "<element/>"
    "<element/>"
  "</root>"
}

test("Call: XPathEvaluator.evaluate #10")
{
  var result1 = document.evaluate("namespace::node()", document.documentElement, null, 8, null);
  verify(result1);
  verify(Object.prototype.toString.call(result1) == "[object XPathResult]");
  verify(result1.resultType == 8);
  verify(Object.prototype.toString.call(result1.singleNodeValue) == "[object XPathNamespace]");
  verify(result1.singleNodeValue.ownerElement == document.documentElement);

  var result2 = document.evaluate("..", result1.singleNodeValue, null, 0, null);
  verify(result2);
  verify(Object.prototype.toString.call(result2) == "[object XPathResult]");
  verify(result2.resultType == 4);
  verify(result2.iterateNext() == document.documentElement);
  verify(result2.iterateNext() == null);
}

xml
{
  "<!DOCTYPE root>"
  "<root>"
    "<element/>"
    "<element/>"
  "</root>"
}

test("Call: XPathEvaluator.evaluate #1 (standalone)")
{
  var result = (new XPathEvaluator).evaluate("root/element", document, null, 0, null);
  verify(result);
  verify(Object.prototype.toString.call(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == document.documentElement.firstChild);
  verify(result.iterateNext() == document.documentElement.lastChild);
  verify(result.iterateNext() == null);
}

test("Call: XPathEvaluator.evaluate #2 (standalone)")
{
  var result = (new XPathEvaluator).evaluate("element", document, null, 0, null);
  verify(result);
  verify(Object.prototype.toString.call(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == null);
}

test("Call: XPathEvaluator.evaluate #3 (standalone)")
{
  var result = (new XPathEvaluator).evaluate("element", document.documentElement, null, 0, null);
  verify(result);
  verify(Object.prototype.toString.call(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == document.documentElement.firstChild);
  verify(result.iterateNext() == document.documentElement.lastChild);
  verify(result.iterateNext() == null);
}

test("Call: XPathEvaluator.evaluate #4 (standalone)")
{
  var exception = null;

  try
  {
    (new XPathEvaluator).evaluate("this is invalid", document, null, 0, null);
  }
  catch (exception0)
  {
    exception = exception0;
  }

  verify(exception);
  verify(exception instanceof XPathException);
  verify(typeof exception == "object");
  verify(Object.prototype.toString.call(exception) == "[object XPathException]");
  verify(exception["code"] == 51);
}

test("Call: XPathEvaluator.evaluate #5 (standalone)")
{
  var exception = null;

  try
  {
    (new XPathEvaluator).evaluate("prefix:root", document, null, 0, null);
  }
  catch (exception0)
  {
    exception = exception0;
  }

  verify(exception);
  verify(exception instanceof DOMException);
  verify(typeof exception == "object");
  verify(Object.prototype.toString.call(exception) == "[object DOMException]");
  verify(exception["code"] == 14);
}

test("Call: XPathEvaluator.evaluate #6 (standalone)")
{
  var exception = null;

  try
  {
    (new XPathEvaluator).evaluate("prefix:root", document, { lookupNamespaceURI: function (prefix) { return null; } }, 0, null);
  }
  catch (exception0)
  {
    exception = exception0;
  }

  verify(exception);
  verify(exception instanceof DOMException);
  verify(typeof exception == "object");
  verify(Object.prototype.toString.call(exception) == "[object DOMException]");
  verify(exception["code"] == 14);
}

xml
{
  "<!DOCTYPE prefix:root>"
  "<prefix:root xmlns:prefix='http://www.example.org/'>"
    "<prefix:element/>"
    "<prefix:element/>"
  "</prefix:root>"
}

test("Call: XPathEvaluator.evaluate #7 (standalone)")
{
  var result = (new XPathEvaluator).evaluate("prefix:root", document, { lookupNamespaceURI: function (prefix) { return prefix == "prefix" ? "http://www.example.org/" : null; } }, 0, null);
  verify(result);
  verify(Object.prototype.toString.call(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == document.documentElement);
  verify(result.iterateNext() == null);
}

test("Call: XPathEvaluator.evaluate #8 (standalone)")
{
  var result = (new XPathEvaluator).evaluate("prefix:root", document, (new XPathEvaluator).createNSResolver(document.documentElement), 0, null);
  verify(result);
  verify(Object.prototype.toString.call(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == document.documentElement);
  verify(result.iterateNext() == null);
}

xml
{
  "<!DOCTYPE root>"
  "<root attribute='value'>"
    "<element/>"
    "<element/>"
  "</root>"
}

test("Call: XPathEvaluator.evaluate #9 (standalone)")
{
  var result = (new XPathEvaluator).evaluate("..", document.documentElement.getAttributeNode("attribute"), null, 0, null);
  verify(result);
  verify(Object.prototype.toString.call(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == document.documentElement);
  verify(result.iterateNext() == null);
}

xml
{
  "<!DOCTYPE prefix:root>"
  "<root xmlns:prefix='http://www.example.org/'>"
    "<element/>"
    "<element/>"
  "</root>"
}

test("Call: XPathEvaluator.evaluate #10 (standalone)")
{
  var result1 = (new XPathEvaluator).evaluate("namespace::node()", document.documentElement, null, 8, null);
  verify(result1);
  verify(Object.prototype.toString.call(result1) == "[object XPathResult]");
  verify(result1.resultType == 8);
  verify(Object.prototype.toString.call(result1.singleNodeValue) == "[object XPathNamespace]");
  verify(result1.singleNodeValue.ownerElement == document.documentElement);

  var result2 = (new XPathEvaluator).evaluate("..", result1.singleNodeValue, null, 0, null);
  verify(result2);
  verify(Object.prototype.toString.call(result2) == "[object XPathResult]");
  verify(result2.resultType == 4);
  verify(result2.iterateNext() == document.documentElement);
  verify(result2.iterateNext() == null);
}
