group "DOM.XPath.XPathExpression.functions";
require init;
require DOM3_XPATH;
language ecmascript;

test("HasProperty: XPathExpression functions")
{
  function checkFunctions_HasProperty(object, properties)
  {
    for (var index = 0; index < properties.length; ++index)
    {
      if (!(properties[index] in object))
        throw "HasProperty: '" + properties[index] + "' not found";
      if (!(typeof(object[properties[index]]) == "function"))
        throw "HasProperty: '" + properties[index] + "' not a function";
    }
    return true;
  }

  function checkFunctions_Enumerate(object, properties)
  {
    outer: for (var index = 0; index < properties.length; ++index)
    {
      for (var property in object)
        if (property == properties[index])
          continue outer;
      throw "Enumerate: '" + properties[index] + "' not found";
    }
    return true;
  }

  functions = [ "evaluate" ];

  var expression = document.createExpression("child::node()", null);

  verify(checkFunctions_HasProperty(expression, functions));
  verify(checkFunctions_Enumerate(expression, functions));
}

group "DOM.XPath.XPathExpression.functions.evaluate";
require init;
require DOM3_XPATH;
language ecmascript;

xml
{
  "<!DOCTYPE root>"
  "<root>"
    "<element/>"
    "<element/>"
  "</root>"
}

test("Call: XPathExpression.evaluate #1")
{
  var result = document.createExpression("root/element", null).evaluate(document, 0, null);
  verify(result);
  verify(String(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == document.documentElement.firstChild);
  verify(result.iterateNext() == document.documentElement.lastChild);
  verify(result.iterateNext() == null);
}

test("Call: XPathExpression.evaluate #2")
{
  var result = document.createExpression("element", null).evaluate(document, 0, null);
  verify(result);
  verify(String(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == null);
}

test("Call: XPathExpression.evaluate #3")
{
  var result = document.createExpression("element", null).evaluate(document.documentElement, 0, null);
  verify(result);
  verify(String(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == document.documentElement.firstChild);
  verify(result.iterateNext() == document.documentElement.lastChild);
  verify(result.iterateNext() == null);
}

xml
{
  "<!DOCTYPE prefix:root>"
  "<prefix:root xmlns:prefix='http://www.example.org/'>"
    "<prefix:element/>"
    "<prefix:element/>"
  "</prefix:root>"
}

test("Call: XPathExpression.evaluate #4")
{
  var result = document.createExpression("prefix:root", { lookupNamespaceURI: function (prefix) { return prefix == "prefix" ? "http://www.example.org/" : null; } }).evaluate(document, 0, null);
  verify(result);
  verify(String(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == document.documentElement);
  verify(result.iterateNext() == null);
}

test("Call: XPathExpression.evaluate #5")
{
  var result = document.createExpression("prefix:root", document.createNSResolver(document.documentElement)).evaluate(document, 0, null);
  verify(result);
  verify(String(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == document.documentElement);
  verify(result.iterateNext() == null);
}

xml
{
  "<!DOCTYPE root>"
  "<root attribute='value'>"
    "<element/>"
    "<element/>"
  "</root>"
}

test("Call: XPathExpression.evaluate #6")
{
  var result = document.createExpression("..", null).evaluate(document.documentElement.getAttributeNode("attribute"), 0, null);
  verify(result);
  verify(String(result) == "[object XPathResult]");
  verify(result.resultType == 4);
  verify(result.iterateNext() == document.documentElement);
  verify(result.iterateNext() == null);
}

xml
{
  "<!DOCTYPE prefix:root>"
  "<root xmlns:prefix='http://www.example.org/'>"
    "<element/>"
    "<element/>"
  "</root>"
}

test("Call: XPathExpression.evaluate #7")
{
  var result1 = document.createExpression("namespace::node()", null).evaluate(document.documentElement, 8, null);
  verify(result1);
  verify(String(result1) == "[object XPathResult]");
  verify(result1.resultType == 8);
  verify(String(result1.singleNodeValue) == "[object XPathNamespace]");
  verify(result1.singleNodeValue.ownerElement == document.documentElement);

  var result2 = document.evaluate("..", result1.singleNodeValue, null, 0, null);
  verify(result2);
  verify(String(result2) == "[object XPathResult]");
  verify(result2.resultType == 4);
  verify(result2.iterateNext() == document.documentElement);
  verify(result2.iterateNext() == null);
}

test("selectSingleNode")
{
  // Don't crash (bug 246501)
  try
  {
    document.selectSingleNode('x:*',{});
  }
  catch (e) {}
}
