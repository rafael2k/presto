group "DOM.Load.LSParser.basic";
require init;
require DOM3_LOAD;

language ecmascript;

test("LSParser constants")
{
  verify(LSParser.ACTION_APPEND_AS_CHILDREN == 1);
  verify(LSParser.ACTION_REPLACE_CHILDREN == 2);
  verify(LSParser.ACTION_INSERT_BEFORE == 3);
  verify(LSParser.ACTION_INSERT_AFTER == 4);
  verify(LSParser.ACTION_REPLACE == 5);
}

group "DOM.Load.LSParser.MODE_SYNCHRONOUS";
require init;
require DOM3_LOAD;
language ecmascript;

test("LSParser.parse #1")
{
  var stringData = #string "input/input1.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  input.stringData = stringData;

  var newDocument = parser.parse(input);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var foo = newDocument.documentElement;
  verify(foo);
  verify(foo.nodeName == "foo");
  verify(foo.namespaceURI == null);
  verify(foo.prefix == null);
  verify(foo == newDocument.firstChild);

  var bar = foo.firstChild;
  verify(bar);
  verify(bar.nodeName == "bar");
  verify(bar.namespaceURI == null);
  verify(bar.prefix == null);
  verify(bar == foo.lastChild);
  verify(bar.firstChild == null);
  verify(bar.lastChild == null);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 1);
  verify(foos.item(0) == foo);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 1);
  verify(bars.item(0) == bar);
}

test("LSParser.parse #2")
{
  var stringData = #string "input/input2.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  input.stringData = stringData;

  var newDocument = parser.parse(input);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var foo = newDocument.documentElement;
  verify(foo);
  verify(foo.nodeName == "foo");
  verify(foo.namespaceURI == null);
  verify(foo.prefix == null);
  verify(foo == newDocument.firstChild);

  var bar1 = foo.firstChild;
  verify(bar1);
  verify(bar1.nodeName == "bar");
  verify(bar1.namespaceURI == null);
  verify(bar1.prefix == null);
  verify(bar1.firstChild == null);
  verify(bar1.lastChild == null);

  var bar2 = bar1.nextSibling;
  verify(bar2);
  verify(bar2.nodeName == "bar");
  verify(bar2.namespaceURI == null);
  verify(bar2.prefix == null);

  var fie1 = bar2.firstChild;
  verify(fie1);
  verify(fie1.nodeName == "fie");
  verify(fie1.namespaceURI == null);
  verify(fie1.prefix == null);
  verify(fie1.firstChild == null);
  verify(fie1.lastChild == null);

  var fie2 = fie1.nextSibling;
  verify(fie2);
  verify(fie2.nodeName == "fie");
  verify(fie2.namespaceURI == null);
  verify(fie2.prefix == null);
  verify(fie2.firstChild == null);
  verify(fie2.lastChild == null);

  verify(bar2.childNodes.length == 2);
  verify(bar2.childNodes.item(0) == fie1);
  verify(bar2.childNodes.item(1) == fie2);

  var bar3 = bar2.nextSibling;
  verify(bar3);
  verify(bar3.nodeName == "bar");
  verify(bar3.namespaceURI == null);
  verify(bar3.prefix == null);
  verify(bar3.firstChild == null);
  verify(bar3.lastChild == null);

  verify(foo.childNodes.length == 3);
  verify(foo.childNodes.item(0) == bar1);
  verify(foo.childNodes.item(1) == bar2);
  verify(foo.childNodes.item(2) == bar3);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 1);
  verify(foos.item(0) == foo);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 3);
  verify(bars.item(0) == bar1);
  verify(bars.item(1) == bar2);
  verify(bars.item(2) == bar3);

  var fies = newDocument.getElementsByTagName("fie");
  verify(fies);
  verify(fies.length == 2);
  verify(fies.item(0) == fie1);
  verify(fies.item(1) == fie2);
}

test("LSParser.parse #3")
{
  var stringData = #string "input/input3.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  input.stringData = stringData;

  var newDocument = parser.parse(input);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var foo = newDocument.documentElement;
  verify(foo);
  verify(foo.getAttribute("attr1") == "foo1");
  verify(foo.getAttribute("attr2") == "foo2");
  verify(foo.attributes.length == 2);
  verify(foo.attributes.item(0).nodeName == "attr1");
  verify(foo.attributes.item(0).nodeValue == "foo1");
  verify(foo.attributes.item(0).namespaceURI == null);
  verify(foo.attributes.item(0).prefix == null);
  verify(foo.attributes.item(1).nodeName == "attr2");
  verify(foo.attributes.item(1).nodeValue == "foo2");
  verify(foo.attributes.item(1).namespaceURI == null);
  verify(foo.attributes.item(1).prefix == null);

  var bar = foo.firstChild;
  verify(bar);
  verify(bar.getAttribute("attr1") == "bar1");
  verify(bar.getAttribute("attr2") == "bar2");
  verify(bar.attributes.length == 2);
  verify(bar.attributes.item(0).nodeName == "attr1");
  verify(bar.attributes.item(0).nodeValue == "bar1");
  verify(bar.attributes.item(0).namespaceURI == null);
  verify(bar.attributes.item(0).prefix == null);
  verify(bar.attributes.item(1).nodeName == "attr2");
  verify(bar.attributes.item(1).nodeValue == "bar2");
  verify(bar.attributes.item(1).namespaceURI == null);
  verify(bar.attributes.item(1).prefix == null);
}

test("LSParser.parse #4")
{
  var stringData = #string "input/input4.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  input.stringData = stringData;

  var newDocument = parser.parse(input);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var foo = newDocument.documentElement;
  verify(foo);
  verify(foo.nodeName == "foo");
  verify(foo.namespaceURI == "http://www.opera.com/namespace-foo");
  verify(foo.prefix == null);
  verify(foo == newDocument.firstChild);
  verify(foo.getAttribute("xmlns") == "http://www.opera.com/namespace-foo");
  verify(foo.getAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns") == foo.getAttribute("xmlns"));
  verify(foo.getAttributeNode("xmlns").nodeName == "xmlns");
  verify(foo.getAttributeNode("xmlns").nodeValue == "http://www.opera.com/namespace-foo");
  verify(foo.getAttributeNode("xmlns").namespaceURI == "http://www.w3.org/2000/xmlns/");
  verify(foo.getAttributeNode("xmlns").prefix == null);
  verify(foo.getAttributeNodeNS("http://www.w3.org/2000/xmlns/", "xmlns") == foo.getAttributeNode("xmlns"));

  var bar = foo.firstChild;
  verify(bar);
  verify(bar.nodeName == "bar");
  verify(bar.namespaceURI == "http://www.opera.com/namespace-foo");
  verify(bar.prefix == null);
  verify(bar == foo.lastChild);
  verify(bar.firstChild == null);
  verify(bar.lastChild == null);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 1);
  verify(foos.item(0) == foo);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 1);
  verify(bars.item(0) == bar);

  var foos_ns = newDocument.getElementsByTagNameNS("http://www.opera.com/namespace-foo", "foo");
  verify(foos_ns);
  verify(foos_ns.length == 1);
  verify(foos_ns.item(0) == foo);

  var bars_ns = newDocument.getElementsByTagNameNS("http://www.opera.com/namespace-foo", "bar");
  verify(bars_ns);
  verify(bars_ns.length == 1);
  verify(bars_ns.item(0) == bar);
}

test("LSParser.parse #5")
{
  var stringData = #string "input/input5.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  input.stringData = stringData;

  var newDocument = parser.parse(input);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var foo = newDocument.documentElement;
  verify(foo);
  verify(foo.getAttribute("attr1") == "foo1");
  verify(foo.getAttributeNS("http://www.opera.com/namespace-foo", "attr1") == null);
  verify(foo.getAttributeNS(null, "attr1") == "foo1");
  verify(foo.getAttribute("attr2") == "foo2");
  verify(foo.getAttributeNS("http://www.opera.com/namespace-foo", "attr2") == null);
  verify(foo.getAttributeNS(null, "attr2") == "foo2");
  verify(foo.attributes.length == 3);
  verify(foo.attributes.item(0).nodeName == "xmlns");
  verify(foo.attributes.item(0).nodeValue == "http://www.opera.com/namespace-foo");
  verify(foo.attributes.item(0).namespaceURI == "http://www.w3.org/2000/xmlns/");
  verify(foo.attributes.item(0).prefix == null);
  verify(foo.attributes.item(1).nodeName == "attr1");
  verify(foo.attributes.item(1).nodeValue == "foo1");
  verify(foo.attributes.item(1).namespaceURI == null);
  verify(foo.attributes.item(1).prefix == null);
  verify(foo.attributes.item(2).nodeName == "attr2");
  verify(foo.attributes.item(2).nodeValue == "foo2");
  verify(foo.attributes.item(2).namespaceURI == null);
  verify(foo.attributes.item(2).prefix == null);

  var bar = foo.firstChild;
  verify(bar);
  verify(bar.getAttribute("attr1") == "bar1");
  verify(bar.getAttributeNS("http://www.opera.com/namespace-foo", "attr1") == null);
  verify(bar.getAttributeNS(null, "attr1") == "bar1");
  verify(bar.getAttribute("attr2") == "bar2");
  verify(bar.getAttributeNS("http://www.opera.com/namespace-foo", "attr2") == null);
  verify(bar.getAttributeNS(null, "attr2") == "bar2");
  verify(bar.attributes.length == 2);
  verify(bar.attributes.item(0).nodeName == "attr1");
  verify(bar.attributes.item(0).nodeValue == "bar1");
  verify(bar.attributes.item(0).namespaceURI == null);
  verify(bar.attributes.item(0).prefix == null);
  verify(bar.attributes.item(1).nodeName == "attr2");
  verify(bar.attributes.item(1).nodeValue == "bar2");
  verify(bar.attributes.item(1).namespaceURI == null);
  verify(bar.attributes.item(1).prefix == null);
}

test("LSParser.parse #6")
{
  var stringData = #string "input/input6.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  input.stringData = stringData;

  var newDocument = parser.parse(input);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var foo = newDocument.documentElement;
  verify(foo);
  verify(foo.nodeName == "foo:foo");
  verify(foo.namespaceURI == "http://www.opera.com/namespace-foo");
  verify(foo.prefix == "foo");
  verify(foo == newDocument.firstChild);
  verify(foo.getAttribute("foo") == null);
  verify(foo.getAttribute("xmlns:foo") == "http://www.opera.com/namespace-foo");
  verify(foo.getAttributeNS("http://www.w3.org/2000/xmlns/", "foo") == foo.getAttribute("xmlns:foo"));
  verify(foo.getAttributeNode("foo") == null);
  verify(foo.getAttributeNode("xmlns:foo").nodeName == "xmlns:foo");
  verify(foo.getAttributeNode("xmlns:foo").nodeValue == "http://www.opera.com/namespace-foo");
  verify(foo.getAttributeNode("xmlns:foo").namespaceURI == "http://www.w3.org/2000/xmlns/");
  verify(foo.getAttributeNode("xmlns:foo").prefix == "xmlns");
  verify(foo.getAttributeNodeNS("http://www.w3.org/2000/xmlns/", "foo") == foo.getAttributeNode("xmlns:foo"));

  var bar = foo.firstChild;
  verify(bar);
  verify(bar.nodeName == "foo:bar");
  verify(bar.namespaceURI == "http://www.opera.com/namespace-foo");
  verify(bar.prefix == "foo");
  verify(bar == foo.lastChild);
  verify(bar.firstChild == null);
  verify(bar.lastChild == null);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 1);
  verify(foos.item(0) == foo);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 1);
  verify(bars.item(0) == bar);

  var foos_ns = newDocument.getElementsByTagNameNS("http://www.opera.com/namespace-foo", "foo");
  verify(foos_ns);
  verify(foos_ns.length == 1);
  verify(foos_ns.item(0) == foo);

  var bars_ns = newDocument.getElementsByTagNameNS("http://www.opera.com/namespace-foo", "bar");
  verify(bars_ns);
  verify(bars_ns.length == 1);
  verify(bars_ns.item(0) == bar);
}

test("LSParser.parse #7")
{
  var stringData = #string "input/input7.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  input.stringData = stringData;

  var newDocument = parser.parse(input);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var foo = newDocument.documentElement;
  verify(foo);
  verify(foo.getAttribute("attr1") == null);
  verify(foo.getAttribute("foo:attr1") == "foo1");
  verify(foo.getAttributeNS("http://www.opera.com/namespace-foo", "attr1") == "foo1");
  verify(foo.getAttribute("attr2") == null);
  verify(foo.getAttribute("foo:attr2") == "foo2");
  verify(foo.getAttributeNS("http://www.opera.com/namespace-foo", "attr2") == "foo2");
  verify(foo.attributes.length == 3);
  verify(foo.attributes.item(0).nodeName == "xmlns:foo");
  verify(foo.attributes.item(0).nodeValue == "http://www.opera.com/namespace-foo");
  verify(foo.attributes.item(0).namespaceURI == "http://www.w3.org/2000/xmlns/");
  verify(foo.attributes.item(0).prefix == "xmlns");
  verify(foo.attributes.item(1).nodeName == "foo:attr1");
  verify(foo.attributes.item(1).nodeValue == "foo1");
  verify(foo.attributes.item(1).namespaceURI == "http://www.opera.com/namespace-foo");
  verify(foo.attributes.item(1).prefix == "foo");
  verify(foo.attributes.item(2).nodeName == "foo:attr2");
  verify(foo.attributes.item(2).nodeValue == "foo2");
  verify(foo.attributes.item(2).namespaceURI == "http://www.opera.com/namespace-foo");
  verify(foo.attributes.item(2).prefix == "foo");

  var bar = foo.firstChild;
  verify(bar);
  verify(bar.getAttribute("attr1") == null);
  verify(bar.getAttribute("foo:attr1") == "bar1");
  verify(bar.getAttributeNS("http://www.opera.com/namespace-foo", "attr1") == "bar1");
  verify(bar.getAttribute("attr2") == null);
  verify(bar.getAttribute("foo:attr2") == "bar2");
  verify(bar.getAttributeNS("http://www.opera.com/namespace-foo", "attr2") == "bar2");
  verify(bar.attributes.length == 2);
  verify(bar.attributes.item(0).nodeName == "foo:attr1");
  verify(bar.attributes.item(0).nodeValue == "bar1");
  verify(bar.attributes.item(0).namespaceURI == "http://www.opera.com/namespace-foo");
  verify(bar.attributes.item(0).prefix == "foo");
  verify(bar.attributes.item(1).nodeName == "foo:attr2");
  verify(bar.attributes.item(1).nodeValue == "bar2");
  verify(bar.attributes.item(1).namespaceURI == "http://www.opera.com/namespace-foo");
  verify(bar.attributes.item(1).prefix == "foo");
}

test("LSParser.parse #8")
{
  var stringData = #string "input/input8.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  input.stringData = stringData;

  var newDocument = parser.parse(input);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var foo = newDocument.documentElement;
  verify(foo);
  verify(foo.nodeName == "foo");

  var foo_text1 = foo.childNodes.item(0);
  verify(foo_text1);
  verify(foo_text1.nodeName == "#text");
  verify(foo_text1.nodeValue == "foo-text1");

  var bar = foo.childNodes.item(1);
  verify(bar);
  verify(bar.nodeName == "bar");

  var bar_text1 = bar.childNodes.item(0);
  verify(bar_text1);
  verify(bar_text1.nodeName == "#text");
  verify(bar_text1.nodeValue == "bar-text1");

  var foo_text2 = foo.childNodes.item(2);
  verify(foo_text2);
  verify(foo_text2.nodeName == "#text");
  verify(foo_text2.nodeValue == "foo-text2");
}

test("LSParser.parse #9")
{
  var stringData = #string "input/input9.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  input.stringData = stringData;

  var newDocument = parser.parse(input);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var foo = newDocument.documentElement;
  verify(foo);
  verify(foo.nodeName == "foo");

  var foo_text1 = foo.childNodes.item(0);
  verify(foo_text1);
  verify(foo_text1.nodeName == "#cdata-section");
  verify(foo_text1.nodeValue == "foo-text1");

  var bar = foo.childNodes.item(1);
  verify(bar);
  verify(bar.nodeName == "bar");

  var bar_text1 = bar.childNodes.item(0);
  verify(bar_text1);
  verify(bar_text1.nodeName == "#cdata-section");
  verify(bar_text1.nodeValue == "bar-text1");

  var foo_text2 = foo.childNodes.item(2);
  verify(foo_text2);
  verify(foo_text2.nodeName == "#cdata-section");
  verify(foo_text2.nodeValue == "foo-text2");
}

test("LSParser.parse #10")
{
  var stringData = #string "input/input10.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  input.stringData = stringData;

  var newDocument = parser.parse(input);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var foo = newDocument.documentElement;
  verify(foo);
  verify(foo.nodeName == "foo");

  var foo_text1 = foo.childNodes.item(0);
  verify(foo_text1);
  verify(foo_text1.nodeName == "#comment");
  verify(foo_text1.nodeValue == "foo-text1");

  var bar = foo.childNodes.item(1);
  verify(bar);
  verify(bar.nodeName == "bar");

  var bar_text1 = bar.childNodes.item(0);
  verify(bar_text1);
  verify(bar_text1.nodeName == "#comment");
  verify(bar_text1.nodeValue == "bar-text1");

  var foo_text2 = foo.childNodes.item(2);
  verify(foo_text2);
  verify(foo_text2.nodeName == "#comment");
  verify(foo_text2.nodeValue == "foo-text2");
}

test("LSParser.parse #11")
{
  var stringData = #string "input/input11.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  input.stringData = stringData;

  var newDocument = parser.parse(input);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  verify(newDocument.doctype);
  verify(newDocument.doctype.name == "foo");

  var foo = newDocument.documentElement;
  verify(foo);
  verify(foo.nodeName == "foo");
}

test("LSParser.parse LSException.PARSE_ERR #1")
{
  var stringData = #string "input/broken1.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  input.stringData = stringData;

  try
  {
    parser.parse(input);
    verify("no exception thrown" == false);
  }
  catch (e)
  {
    verify(e instanceof LSException);
    verify(Object.prototype.toString.apply(e) == "[object LSException]");
    verify(e.code == LSException.PARSE_ERR);
  }
}

test("LSParser.parse LSException.PARSE_ERR #2")
{
  var stringData = #string "input/broken1.xml";
  var error = null;

  var input = document.implementation.createLSInput();
  verify(input);
  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  input.stringData = stringData;

  function handleError(err)
  {
    error = err;
  }
  parser.domConfig.setParameter("error-handler", handleError);

  try
  {
    parser.parse(input);
    verify("no exception thrown" == false);
  }
  catch (e)
  {
    verify(e instanceof LSException);
    verify(Object.prototype.toString.apply(e) == "[object LSException]");
    verify(e.code == LSException.PARSE_ERR);
  }

  verify(error);
  verify(error.severity == DOMError.SEVERITY_FATAL_ERROR);
  verify(error.type == "parse-error");
  window.error = error;
}

test("LSParser.parse LSException.PARSE_ERR #3")
	 require XML_ERRORS;
	 require success "LSParser.parse LSException.PARSE_ERR #2";
{
  var error = window.error;
  verify(error);
  verify(error.severity == DOMError.SEVERITY_FATAL_ERROR);
  verify(error.type == "parse-error");
  verify(error.location.lineNumber == 1);
  verify(error.location.columnNumber == 5);
  verify(error.location.byteOffset == 0);
  verify(error.location.utf16Offset == 0);
}

test("LSParser.parse LSParserFilter #1")
{
  var stringData = #string "input/input1.xml";
  var filter_result = "";

  function startElement(node)
  {
    filter_result += "<" + node.nodeName + ">";
    return LSParserFilter.FILTER_ACCEPT;
  }

  function acceptNode(node)
  {
    if (node.nodeName == "#text")
      filter_result += node.nodeValue;
    else
    {
      if (filter_result.substring(filter_result.length - node.nodeName.length - 2) == "<" + node.nodeName + ">")
        filter_result = filter_result.substring(0, filter_result.length - 1) + "/>";
      else
        filter_result += "</" + node.nodeName + ">";
    }
    return LSParserFilter.FILTER_ACCEPT;
  }

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);
  parser.filter = { startElement: startElement, acceptNode: acceptNode, whatToShow: NodeFilter.SHOW_ALL };

  var newDocument = parser.parse(input);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");
  verify(filter_result == stringData);

  var foo = newDocument.documentElement;
  verify(foo);
  verify(foo.nodeName == "foo");
  verify(foo.namespaceURI == null);
  verify(foo.prefix == null);
  verify(foo == newDocument.firstChild);

  var bar = foo.firstChild;
  verify(bar);
  verify(bar.nodeName == "bar");
  verify(bar.namespaceURI == null);
  verify(bar.prefix == null);
  verify(bar == foo.lastChild);
  verify(bar.firstChild == null);
  verify(bar.lastChild == null);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 1);
  verify(foos.item(0) == foo);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 1);
  verify(bars.item(0) == bar);
}

test("LSParser.parse LSParserFilter #2")
{
  var stringData = #string "input/input2.xml";
  var filter_result = "";

  function startElement(node)
  {
    filter_result += "<" + node.nodeName + ">";
    return LSParserFilter.FILTER_ACCEPT;
  }

  function acceptNode(node)
  {
    if (node.nodeName == "#text")
      filter_result += node.nodeValue;
    else
    {
      if (filter_result.substring(filter_result.length - node.nodeName.length - 2) == "<" + node.nodeName + ">")
        filter_result = filter_result.substring(0, filter_result.length - 1) + "/>";
      else
        filter_result += "</" + node.nodeName + ">";
    }
    return LSParserFilter.FILTER_ACCEPT;
  }

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);
  parser.filter = { startElement: startElement, acceptNode: acceptNode, whatToShow: NodeFilter.SHOW_ALL };

  var newDocument = parser.parse(input);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");
  verify(filter_result == stringData);

  var foo = newDocument.documentElement;
  verify(foo);
  verify(foo.nodeName == "foo");
  verify(foo.namespaceURI == null);
  verify(foo.prefix == null);
  verify(foo == newDocument.firstChild);

  var bar1 = foo.firstChild;
  verify(bar1);
  verify(bar1.nodeName == "bar");
  verify(bar1.namespaceURI == null);
  verify(bar1.prefix == null);
  verify(bar1.firstChild == null);
  verify(bar1.lastChild == null);

  var bar2 = bar1.nextSibling;
  verify(bar2);
  verify(bar2.nodeName == "bar");
  verify(bar2.namespaceURI == null);
  verify(bar2.prefix == null);

  var fie1 = bar2.firstChild;
  verify(fie1);
  verify(fie1.nodeName == "fie");
  verify(fie1.namespaceURI == null);
  verify(fie1.prefix == null);
  verify(fie1.firstChild == null);
  verify(fie1.lastChild == null);

  var fie2 = fie1.nextSibling;
  verify(fie2);
  verify(fie2.nodeName == "fie");
  verify(fie2.namespaceURI == null);
  verify(fie2.prefix == null);
  verify(fie2.firstChild == null);
  verify(fie2.lastChild == null);

  verify(bar2.childNodes.length == 2);
  verify(bar2.childNodes.item(0) == fie1);
  verify(bar2.childNodes.item(1) == fie2);

  var bar3 = bar2.nextSibling;
  verify(bar3);
  verify(bar3.nodeName == "bar");
  verify(bar3.namespaceURI == null);
  verify(bar3.prefix == null);
  verify(bar3.firstChild == null);
  verify(bar3.lastChild == null);

  verify(foo.childNodes.length == 3);
  verify(foo.childNodes.item(0) == bar1);
  verify(foo.childNodes.item(1) == bar2);
  verify(foo.childNodes.item(2) == bar3);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 1);
  verify(foos.item(0) == foo);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 3);
  verify(bars.item(0) == bar1);
  verify(bars.item(1) == bar2);
  verify(bars.item(2) == bar3);

  var fies = newDocument.getElementsByTagName("fie");
  verify(fies);
  verify(fies.length == 2);
  verify(fies.item(0) == fie1);
  verify(fies.item(1) == fie2);
}

test("LSParser.parse LSParserFilter #3")
{
  var stringData = #string "input/input8.xml";
  var filter_result = "";

  function startElement(node)
  {
    filter_result += "<" + node.nodeName + ">";
    return LSParserFilter.FILTER_ACCEPT;
  }

  function acceptNode(node)
  {
    if (node.nodeName == "#text")
      filter_result += node.nodeValue;
    else
    {
      if (filter_result.substring(filter_result.length - node.nodeName.length - 2) == "<" + node.nodeName + ">")
        filter_result = filter_result.substring(0, filter_result.length - 1) + "/>";
      else
        filter_result += "</" + node.nodeName + ">";
    }
    return LSParserFilter.FILTER_ACCEPT;
  }

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);
  parser.filter = { startElement: startElement, acceptNode: acceptNode, whatToShow: NodeFilter.SHOW_ALL };

  var newDocument = parser.parse(input);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var foo = newDocument.documentElement;
  verify(foo);
  verify(foo.nodeName == "foo");

  var foo_text1 = foo.childNodes.item(0);
  verify(foo_text1);
  verify(foo_text1.nodeName == "#text");
  verify(foo_text1.nodeValue == "foo-text1");

  var bar = foo.childNodes.item(1);
  verify(bar);
  verify(bar.nodeName == "bar");

  var bar_text1 = bar.childNodes.item(0);
  verify(bar_text1);
  verify(bar_text1.nodeName == "#text");
  verify(bar_text1.nodeValue == "bar-text1");

  var foo_text2 = foo.childNodes.item(2);
  verify(foo_text2);
  verify(foo_text2.nodeName == "#text");
  verify(foo_text2.nodeValue == "foo-text2");
}

test("LSParser.parse LSParserFilter (skip) #1")
{
  var stringData = #string "input/levels1.xml";

#include "lsparser-utils.js"

  function startElement(node)
  {
    if (node.nodeName == "level2")
      return LSParserFilter.FILTER_SKIP;
    else
      return LSParserFilter.FILTER_ACCEPT;
  }

  function acceptNode(node)
  {
    return LSParserFilter.FILTER_ACCEPT;
  }

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);
  parser.filter = { startElement: startElement, acceptNode: acceptNode, whatToShow: NodeFilter.SHOW_ALL };

  var newDocument = parser.parse(input);

  verify(serializeNode(newDocument) == "<level1><level3/><level3/><level3/><level3/></level1>");
}

test("LSParser.parse LSParserFilter (skip) #2")
{
  var stringData = #string "input/levels1.xml";

#include "lsparser-utils.js"

  function startElement(node)
  {
    if (node.nodeName == "level3")
      return LSParserFilter.FILTER_SKIP;
    else
      return LSParserFilter.FILTER_ACCEPT;
  }

  function acceptNode(node)
  {
    return LSParserFilter.FILTER_ACCEPT;
  }

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);
  parser.filter = { startElement: startElement, acceptNode: acceptNode, whatToShow: NodeFilter.SHOW_ALL };

  var newDocument = parser.parse(input);

  verify(serializeNode(newDocument) == "<level1><level2/><level2/></level1>");
}

test("LSParser.parse LSParserFilter (skip) #3")
{
  var stringData = #string "input/levels1.xml";

#include "lsparser-utils.js"

  function startElement(node)
  {
    return LSParserFilter.FILTER_ACCEPT;
  }

  function acceptNode(node)
  {
    if (node.nodeName == "level2")
      return LSParserFilter.FILTER_SKIP;
    else
      return LSParserFilter.FILTER_ACCEPT;
  }

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);
  parser.filter = { startElement: startElement, acceptNode: acceptNode, whatToShow: NodeFilter.SHOW_ALL };

  var newDocument = parser.parse(input);

  verify(serializeNode(newDocument) == "<level1><level3/><level3/><level3/><level3/></level1>");
}

test("LSParser.parse LSParserFilter (skip) #4")
{
  var stringData = #string "input/levels1.xml";

#include "lsparser-utils.js"

  function startElement(node)
  {
    return LSParserFilter.FILTER_ACCEPT;
  }

  function acceptNode(node)
  {
    if (node.nodeName == "level3")
      return LSParserFilter.FILTER_SKIP;
    else
      return LSParserFilter.FILTER_ACCEPT;
  }

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);
  parser.filter = { startElement: startElement, acceptNode: acceptNode, whatToShow: NodeFilter.SHOW_ALL };

  var newDocument = parser.parse(input);

  verify(serializeNode(newDocument) == "<level1><level2/><level2/></level1>");
}

test("LSParser.parse LSParserFilter (reject) #1")
{
  var stringData = #string "input/levels1.xml";

#include "lsparser-utils.js"

  function startElement(node)
  {
    if (node.nodeName == "level2")
      return LSParserFilter.FILTER_REJECT;
    else
      return LSParserFilter.FILTER_ACCEPT;
  }

  function acceptNode(node)
  {
    return LSParserFilter.FILTER_ACCEPT;
  }

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);
  parser.filter = { startElement: startElement, acceptNode: acceptNode, whatToShow: NodeFilter.SHOW_ALL };

  var newDocument = parser.parse(input);

  verify(serializeNode(newDocument) == "<level1/>");
}

test("LSParser.parse LSParserFilter (reject) #2")
{
  var stringData = #string "input/levels1.xml";

#include "lsparser-utils.js"

  function startElement(node)
  {
    if (node.nodeName == "level3")
      return LSParserFilter.FILTER_REJECT;
    else
      return LSParserFilter.FILTER_ACCEPT;
  }

  function acceptNode(node)
  {
    return LSParserFilter.FILTER_ACCEPT;
  }

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);
  parser.filter = { startElement: startElement, acceptNode: acceptNode, whatToShow: NodeFilter.SHOW_ALL };

  var newDocument = parser.parse(input);

  verify(serializeNode(newDocument) == "<level1><level2/><level2/></level1>");
}

test("LSParser.parse LSParserFilter (reject) #3")
{
  var stringData = #string "input/levels1.xml";

#include "lsparser-utils.js"

  function startElement(node)
  {
    return LSParserFilter.FILTER_ACCEPT;
  }

  function acceptNode(node)
  {
    if (node.nodeName == "level2")
      return LSParserFilter.FILTER_REJECT;
    else
      return LSParserFilter.FILTER_ACCEPT;
  }

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);
  parser.filter = { startElement: startElement, acceptNode: acceptNode, whatToShow: NodeFilter.SHOW_ALL };

  var newDocument = parser.parse(input);

  verify(serializeNode(newDocument) == "<level1/>");
}

test("LSParser.parse LSParserFilter (reject) #4")
{
  var stringData = #string "input/levels1.xml";

#include "lsparser-utils.js"

  function startElement(node)
  {
    return LSParserFilter.FILTER_ACCEPT;
  }

  function acceptNode(node)
  {
    if (node.nodeName == "level3")
      return LSParserFilter.FILTER_REJECT;
    else
      return LSParserFilter.FILTER_ACCEPT;
  }

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);
  parser.filter = { startElement: startElement, acceptNode: acceptNode, whatToShow: NodeFilter.SHOW_ALL };

  var newDocument = parser.parse(input);

  verify(serializeNode(newDocument) == "<level1><level2/><level2/></level1>");
}

test("LSParser.parseWithContext (ACTION_APPEND_AS_CHILDREN) #1")
{
  var stringData = #string "input/input1.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  var newDocument = document.implementation.createDocument("http://www.opera.com/namespace-foo", "fum", null);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var fum = newDocument.documentElement;
  verify(fum);
  verify(fum.nodeName == "fum");
  verify(fum.namespaceURI == "http://www.opera.com/namespace-foo");
  verify(fum.prefix == null);
  verify(fum == newDocument.firstChild);

  var foo = parser.parseWithContext(input, fum, LSParser.ACTION_APPEND_AS_CHILDREN);
  verify(foo);
  verify(foo.nodeName == "foo");
  verify(foo.namespaceURI == null);
  verify(foo.prefix == null);
  verify(foo == fum.firstChild);
  verify(foo == fum.lastChild);

  var bar = foo.firstChild;
  verify(bar);
  verify(bar.nodeName == "bar");
  verify(bar.namespaceURI == null);
  verify(bar.prefix == null);
  verify(bar == foo.lastChild);
  verify(bar.firstChild == null);
  verify(bar.lastChild == null);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 1);
  verify(foos.item(0) == foo);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 1);
  verify(bars.item(0) == bar);
}

test("LSParser.parseWithContext (ACTION_APPEND_AS_CHILDREN) #2")
{
  var stringData = #string "input/input2.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  var newDocument = document.implementation.createDocument("http://www.opera.com/namespace-foo", "fum", null);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var fum = newDocument.documentElement;
  verify(fum);
  verify(fum.nodeName == "fum");
  verify(fum.namespaceURI == "http://www.opera.com/namespace-foo");
  verify(fum.prefix == null);
  verify(fum == newDocument.firstChild);

  var foo = parser.parseWithContext(input, fum, LSParser.ACTION_APPEND_AS_CHILDREN);
  verify(foo);
  verify(foo.nodeName == "foo");
  verify(foo.namespaceURI == null);
  verify(foo.prefix == null);
  verify(foo == fum.firstChild);
  verify(foo == fum.lastChild);

  var bar1 = foo.firstChild;
  verify(bar1);
  verify(bar1.nodeName == "bar");
  verify(bar1.namespaceURI == null);
  verify(bar1.prefix == null);
  verify(bar1.firstChild == null);
  verify(bar1.lastChild == null);

  var bar2 = bar1.nextSibling;
  verify(bar2);
  verify(bar2.nodeName == "bar");
  verify(bar2.namespaceURI == null);
  verify(bar2.prefix == null);

  var fie1 = bar2.firstChild;
  verify(fie1);
  verify(fie1.nodeName == "fie");
  verify(fie1.namespaceURI == null);
  verify(fie1.prefix == null);
  verify(fie1.firstChild == null);
  verify(fie1.lastChild == null);

  var fie2 = fie1.nextSibling;
  verify(fie2);
  verify(fie2.nodeName == "fie");
  verify(fie2.namespaceURI == null);
  verify(fie2.prefix == null);
  verify(fie2.firstChild == null);
  verify(fie2.lastChild == null);

  verify(bar2.childNodes.length == 2);
  verify(bar2.childNodes.item(0) == fie1);
  verify(bar2.childNodes.item(1) == fie2);

  var bar3 = bar2.nextSibling;
  verify(bar3);
  verify(bar3.nodeName == "bar");
  verify(bar3.namespaceURI == null);
  verify(bar3.prefix == null);
  verify(bar3.firstChild == null);
  verify(bar3.lastChild == null);

  verify(foo.childNodes.length == 3);
  verify(foo.childNodes.item(0) == bar1);
  verify(foo.childNodes.item(1) == bar2);
  verify(foo.childNodes.item(2) == bar3);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 1);
  verify(foos.item(0) == foo);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 3);
  verify(bars.item(0) == bar1);
  verify(bars.item(1) == bar2);
  verify(bars.item(2) == bar3);

  var fies = newDocument.getElementsByTagName("fie");
  verify(fies);
  verify(fies.length == 2);
  verify(fies.item(0) == fie1);
  verify(fies.item(1) == fie2);
}

test("LSParser.parseWithContext (ACTION_REPLACE_CHILDREN) #1")
{
  var stringData = #string "input/input1.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  var newDocument = document.implementation.createDocument("http://www.opera.com/namespace-foo", "fum", null);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var fum = newDocument.documentElement;
  verify(fum);
  verify(fum.nodeName == "fum");
  verify(fum.namespaceURI == "http://www.opera.com/namespace-foo");
  verify(fum.prefix == null);
  verify(fum == newDocument.firstChild);

  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));

  var oldfoos = newDocument.getElementsByTagName("foo");
  verify(oldfoos);
  verify(oldfoos.length == 3);

  var oldfoo1 = oldfoos.item(0);
  var oldfoo2 = oldfoos.item(1);
  var oldfoo3 = oldfoos.item(2);

  verify(oldfoo1.parentNode == fum);
  verify(oldfoo2.parentNode == fum);
  verify(oldfoo3.parentNode == fum);

  var foo = parser.parseWithContext(input, fum, LSParser.ACTION_REPLACE_CHILDREN);
  verify(foo);
  verify(foo.nodeName == "foo");
  verify(foo.namespaceURI == null);
  verify(foo.prefix == null);
  verify(foo == fum.firstChild);
  verify(foo == fum.lastChild);

  var bar = foo.firstChild;
  verify(bar);
  verify(bar.nodeName == "bar");
  verify(bar.namespaceURI == null);
  verify(bar.prefix == null);
  verify(bar == foo.lastChild);
  verify(bar.firstChild == null);
  verify(bar.lastChild == null);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 1);
  verify(foos.item(0) == foo);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 1);
  verify(bars.item(0) == bar);

  verify(oldfoo1.parentNode == null);
  verify(oldfoo2.parentNode == null);
  verify(oldfoo3.parentNode == null);
}

test("LSParser.parseWithContext (ACTION_REPLACE_CHILDREN) #2")
{
  var stringData = #string "input/input2.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  var newDocument = document.implementation.createDocument("http://www.opera.com/namespace-foo", "fum", null);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var fum = newDocument.documentElement;
  verify(fum);
  verify(fum.nodeName == "fum");
  verify(fum.namespaceURI == "http://www.opera.com/namespace-foo");
  verify(fum.prefix == null);
  verify(fum == newDocument.firstChild);

  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));

  var oldfoos = newDocument.getElementsByTagName("foo");
  verify(oldfoos);
  verify(oldfoos.length == 3);

  var oldfoo1 = oldfoos.item(0);
  var oldfoo2 = oldfoos.item(1);
  var oldfoo3 = oldfoos.item(2);

  verify(oldfoo1.parentNode == fum);
  verify(oldfoo2.parentNode == fum);
  verify(oldfoo3.parentNode == fum);

  var foo = parser.parseWithContext(input, fum, LSParser.ACTION_REPLACE_CHILDREN);
  verify(foo);
  verify(foo.nodeName == "foo");
  verify(foo.namespaceURI == null);
  verify(foo.prefix == null);
  verify(foo == fum.firstChild);
  verify(foo == fum.lastChild);

  var bar1 = foo.firstChild;
  verify(bar1);
  verify(bar1.nodeName == "bar");
  verify(bar1.namespaceURI == null);
  verify(bar1.prefix == null);
  verify(bar1.firstChild == null);
  verify(bar1.lastChild == null);

  var bar2 = bar1.nextSibling;
  verify(bar2);
  verify(bar2.nodeName == "bar");
  verify(bar2.namespaceURI == null);
  verify(bar2.prefix == null);

  var fie1 = bar2.firstChild;
  verify(fie1);
  verify(fie1.nodeName == "fie");
  verify(fie1.namespaceURI == null);
  verify(fie1.prefix == null);
  verify(fie1.firstChild == null);
  verify(fie1.lastChild == null);

  var fie2 = fie1.nextSibling;
  verify(fie2);
  verify(fie2.nodeName == "fie");
  verify(fie2.namespaceURI == null);
  verify(fie2.prefix == null);
  verify(fie2.firstChild == null);
  verify(fie2.lastChild == null);

  verify(bar2.childNodes.length == 2);
  verify(bar2.childNodes.item(0) == fie1);
  verify(bar2.childNodes.item(1) == fie2);

  var bar3 = bar2.nextSibling;
  verify(bar3);
  verify(bar3.nodeName == "bar");
  verify(bar3.namespaceURI == null);
  verify(bar3.prefix == null);
  verify(bar3.firstChild == null);
  verify(bar3.lastChild == null);

  verify(foo.childNodes.length == 3);
  verify(foo.childNodes.item(0) == bar1);
  verify(foo.childNodes.item(1) == bar2);
  verify(foo.childNodes.item(2) == bar3);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 1);
  verify(foos.item(0) == foo);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 3);
  verify(bars.item(0) == bar1);
  verify(bars.item(1) == bar2);
  verify(bars.item(2) == bar3);

  var fies = newDocument.getElementsByTagName("fie");
  verify(fies);
  verify(fies.length == 2);
  verify(fies.item(0) == fie1);
  verify(fies.item(1) == fie2);

  verify(oldfoo1.parentNode == null);
  verify(oldfoo2.parentNode == null);
  verify(oldfoo3.parentNode == null);
}

test("LSParser.parseWithContext (ACTION_REPLACE_CHILDREN) #3")
{
  var stringData = #string "input/input11.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  var newDocument = document.implementation.createDocument("http://www.opera.com/namespace-foo", "fum", null);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  input.stringData = stringData;

  parser.parseWithContext(input, newDocument, LSParser.ACTION_REPLACE_CHILDREN);

  verify(newDocument.doctype);
  verify(newDocument.doctype.name == "foo");

  var foo = newDocument.documentElement;
  verify(foo);
  verify(foo.nodeName == "foo");
}

test("LSParser.parseWithContext (ACTION_INSERT_BEFORE) #1")
{
  var stringData = #string "input/input1.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  var newDocument = document.implementation.createDocument("http://www.opera.com/namespace-foo", "fum", null);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var fum = newDocument.documentElement;
  verify(fum);
  verify(fum.nodeName == "fum");
  verify(fum.namespaceURI == "http://www.opera.com/namespace-foo");
  verify(fum.prefix == null);
  verify(fum == newDocument.firstChild);

  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));

  var oldfoos = newDocument.getElementsByTagName("foo");
  verify(oldfoos);
  verify(oldfoos.length == 3);

  var oldfoo1 = oldfoos.item(0);
  var oldfoo2 = oldfoos.item(1);
  var oldfoo3 = oldfoos.item(2);

  verify(oldfoo1.parentNode == fum);
  verify(oldfoo2.parentNode == fum);
  verify(oldfoo3.parentNode == fum);

  var foo = parser.parseWithContext(input, oldfoo2, LSParser.ACTION_INSERT_BEFORE);
  verify(foo);
  verify(foo.nodeName == "foo");
  verify(foo.namespaceURI == null);
  verify(foo.prefix == null);
  verify(foo == oldfoo1.nextSibling);
  verify(foo == oldfoo2.previousSibling);
  verify(foo.parentNode == fum);

  var bar = foo.firstChild;
  verify(bar);
  verify(bar.nodeName == "bar");
  verify(bar.namespaceURI == null);
  verify(bar.prefix == null);
  verify(bar == foo.lastChild);
  verify(bar.firstChild == null);
  verify(bar.lastChild == null);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 4);
  verify(foos.item(0) == oldfoo1);
  verify(foos.item(1) == foo);
  verify(foos.item(2) == oldfoo2);
  verify(foos.item(3) == oldfoo3);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 1);
  verify(bars.item(0) == bar);

  verify(oldfoo1.parentNode == fum);
  verify(oldfoo2.parentNode == fum);
  verify(oldfoo3.parentNode == fum);
}

test("LSParser.parseWithContext (ACTION_INSERT_BEFORE) #2")
{
  var stringData = #string "input/input2.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  var newDocument = document.implementation.createDocument("http://www.opera.com/namespace-foo", "fum", null);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var fum = newDocument.documentElement;
  verify(fum);
  verify(fum.nodeName == "fum");
  verify(fum.namespaceURI == "http://www.opera.com/namespace-foo");
  verify(fum.prefix == null);
  verify(fum == newDocument.firstChild);

  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));

  var oldfoos = newDocument.getElementsByTagName("foo");
  verify(oldfoos);
  verify(oldfoos.length == 3);

  var oldfoo1 = oldfoos.item(0);
  var oldfoo2 = oldfoos.item(1);
  var oldfoo3 = oldfoos.item(2);

  verify(oldfoo1.parentNode == fum);
  verify(oldfoo2.parentNode == fum);
  verify(oldfoo3.parentNode == fum);

  var foo = parser.parseWithContext(input, oldfoo2, LSParser.ACTION_INSERT_BEFORE);
  verify(foo);
  verify(foo.nodeName == "foo");
  verify(foo.namespaceURI == null);
  verify(foo.prefix == null);
  verify(foo == oldfoo1.nextSibling);
  verify(foo == oldfoo2.previousSibling);
  verify(foo.parentNode == fum);

  var bar1 = foo.firstChild;
  verify(bar1);
  verify(bar1.nodeName == "bar");
  verify(bar1.namespaceURI == null);
  verify(bar1.prefix == null);
  verify(bar1.firstChild == null);
  verify(bar1.lastChild == null);

  var bar2 = bar1.nextSibling;
  verify(bar2);
  verify(bar2.nodeName == "bar");
  verify(bar2.namespaceURI == null);
  verify(bar2.prefix == null);

  var fie1 = bar2.firstChild;
  verify(fie1);
  verify(fie1.nodeName == "fie");
  verify(fie1.namespaceURI == null);
  verify(fie1.prefix == null);
  verify(fie1.firstChild == null);
  verify(fie1.lastChild == null);

  var fie2 = fie1.nextSibling;
  verify(fie2);
  verify(fie2.nodeName == "fie");
  verify(fie2.namespaceURI == null);
  verify(fie2.prefix == null);
  verify(fie2.firstChild == null);
  verify(fie2.lastChild == null);

  verify(bar2.childNodes.length == 2);
  verify(bar2.childNodes.item(0) == fie1);
  verify(bar2.childNodes.item(1) == fie2);

  var bar3 = bar2.nextSibling;
  verify(bar3);
  verify(bar3.nodeName == "bar");
  verify(bar3.namespaceURI == null);
  verify(bar3.prefix == null);
  verify(bar3.firstChild == null);
  verify(bar3.lastChild == null);

  verify(foo.childNodes.length == 3);
  verify(foo.childNodes.item(0) == bar1);
  verify(foo.childNodes.item(1) == bar2);
  verify(foo.childNodes.item(2) == bar3);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 4);
  verify(foos.item(0) == oldfoo1);
  verify(foos.item(1) == foo);
  verify(foos.item(2) == oldfoo2);
  verify(foos.item(3) == oldfoo3);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 3);
  verify(bars.item(0) == bar1);
  verify(bars.item(1) == bar2);
  verify(bars.item(2) == bar3);

  var fies = newDocument.getElementsByTagName("fie");
  verify(fies);
  verify(fies.length == 2);
  verify(fies.item(0) == fie1);
  verify(fies.item(1) == fie2);

  verify(oldfoo1.parentNode == fum);
  verify(oldfoo2.parentNode == fum);
  verify(oldfoo3.parentNode == fum);
}

test("LSParser.parseWithContext (ACTION_INSERT_AFTER) #1")
{
  var stringData = #string "input/input1.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  var newDocument = document.implementation.createDocument("http://www.opera.com/namespace-foo", "fum", null);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var fum = newDocument.documentElement;
  verify(fum);
  verify(fum.nodeName == "fum");
  verify(fum.namespaceURI == "http://www.opera.com/namespace-foo");
  verify(fum.prefix == null);
  verify(fum == newDocument.firstChild);

  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));

  var oldfoos = newDocument.getElementsByTagName("foo");
  verify(oldfoos);
  verify(oldfoos.length == 3);

  var oldfoo1 = oldfoos.item(0);
  var oldfoo2 = oldfoos.item(1);
  var oldfoo3 = oldfoos.item(2);

  verify(oldfoo1.parentNode == fum);
  verify(oldfoo2.parentNode == fum);
  verify(oldfoo3.parentNode == fum);

  var foo = parser.parseWithContext(input, oldfoo2, LSParser.ACTION_INSERT_AFTER);
  verify(foo);
  verify(foo.nodeName == "foo");
  verify(foo.namespaceURI == null);
  verify(foo.prefix == null);
  verify(foo == oldfoo2.nextSibling);
  verify(foo == oldfoo3.previousSibling);
  verify(foo.parentNode == fum);

  var bar = foo.firstChild;
  verify(bar);
  verify(bar.nodeName == "bar");
  verify(bar.namespaceURI == null);
  verify(bar.prefix == null);
  verify(bar == foo.lastChild);
  verify(bar.firstChild == null);
  verify(bar.lastChild == null);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 4);
  verify(foos.item(0) == oldfoo1);
  verify(foos.item(1) == oldfoo2);
  verify(foos.item(2) == foo);
  verify(foos.item(3) == oldfoo3);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 1);
  verify(bars.item(0) == bar);

  verify(oldfoo1.parentNode == fum);
  verify(oldfoo2.parentNode == fum);
  verify(oldfoo3.parentNode == fum);
}

test("LSParser.parseWithContext (ACTION_INSERT_AFTER) #2")
{
  var stringData = #string "input/input2.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  var newDocument = document.implementation.createDocument("http://www.opera.com/namespace-foo", "fum", null);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var fum = newDocument.documentElement;
  verify(fum);
  verify(fum.nodeName == "fum");
  verify(fum.namespaceURI == "http://www.opera.com/namespace-foo");
  verify(fum.prefix == null);
  verify(fum == newDocument.firstChild);

  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));

  var oldfoos = newDocument.getElementsByTagName("foo");
  verify(oldfoos);
  verify(oldfoos.length == 3);

  var oldfoo1 = oldfoos.item(0);
  var oldfoo2 = oldfoos.item(1);
  var oldfoo3 = oldfoos.item(2);

  verify(oldfoo1.parentNode == fum);
  verify(oldfoo2.parentNode == fum);
  verify(oldfoo3.parentNode == fum);

  var foo = parser.parseWithContext(input, oldfoo2, LSParser.ACTION_INSERT_AFTER);
  verify(foo);
  verify(foo.nodeName == "foo");
  verify(foo.namespaceURI == null);
  verify(foo.prefix == null);
  verify(foo == oldfoo2.nextSibling);
  verify(foo == oldfoo3.previousSibling);
  verify(foo.parentNode == fum);

  var bar1 = foo.firstChild;
  verify(bar1);
  verify(bar1.nodeName == "bar");
  verify(bar1.namespaceURI == null);
  verify(bar1.prefix == null);
  verify(bar1.firstChild == null);
  verify(bar1.lastChild == null);

  var bar2 = bar1.nextSibling;
  verify(bar2);
  verify(bar2.nodeName == "bar");
  verify(bar2.namespaceURI == null);
  verify(bar2.prefix == null);

  var fie1 = bar2.firstChild;
  verify(fie1);
  verify(fie1.nodeName == "fie");
  verify(fie1.namespaceURI == null);
  verify(fie1.prefix == null);
  verify(fie1.firstChild == null);
  verify(fie1.lastChild == null);

  var fie2 = fie1.nextSibling;
  verify(fie2);
  verify(fie2.nodeName == "fie");
  verify(fie2.namespaceURI == null);
  verify(fie2.prefix == null);
  verify(fie2.firstChild == null);
  verify(fie2.lastChild == null);

  verify(bar2.childNodes.length == 2);
  verify(bar2.childNodes.item(0) == fie1);
  verify(bar2.childNodes.item(1) == fie2);

  var bar3 = bar2.nextSibling;
  verify(bar3);
  verify(bar3.nodeName == "bar");
  verify(bar3.namespaceURI == null);
  verify(bar3.prefix == null);
  verify(bar3.firstChild == null);
  verify(bar3.lastChild == null);

  verify(foo.childNodes.length == 3);
  verify(foo.childNodes.item(0) == bar1);
  verify(foo.childNodes.item(1) == bar2);
  verify(foo.childNodes.item(2) == bar3);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 4);
  verify(foos.item(0) == oldfoo1);
  verify(foos.item(1) == oldfoo2);
  verify(foos.item(2) == foo);
  verify(foos.item(3) == oldfoo3);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 3);
  verify(bars.item(0) == bar1);
  verify(bars.item(1) == bar2);
  verify(bars.item(2) == bar3);

  var fies = newDocument.getElementsByTagName("fie");
  verify(fies);
  verify(fies.length == 2);
  verify(fies.item(0) == fie1);
  verify(fies.item(1) == fie2);

  verify(oldfoo1.parentNode == fum);
  verify(oldfoo2.parentNode == fum);
  verify(oldfoo3.parentNode == fum);
}

test("LSParser.parseWithContext (ACTION_REPLACE) #1")
{
  var stringData = #string "input/input1.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  var newDocument = document.implementation.createDocument("http://www.opera.com/namespace-foo", "fum", null);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var fum = newDocument.documentElement;
  verify(fum);
  verify(fum.nodeName == "fum");
  verify(fum.namespaceURI == "http://www.opera.com/namespace-foo");
  verify(fum.prefix == null);
  verify(fum == newDocument.firstChild);

  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));

  var oldfoos = newDocument.getElementsByTagName("foo");
  verify(oldfoos);
  verify(oldfoos.length == 3);

  var oldfoo1 = oldfoos.item(0);
  var oldfoo2 = oldfoos.item(1);
  var oldfoo3 = oldfoos.item(2);

  verify(oldfoo1.parentNode == fum);
  verify(oldfoo2.parentNode == fum);
  verify(oldfoo3.parentNode == fum);

  var foo = parser.parseWithContext(input, oldfoo2, LSParser.ACTION_REPLACE);
  verify(foo);
  verify(foo.nodeName == "foo");
  verify(foo.namespaceURI == null);
  verify(foo.prefix == null);
  verify(foo == oldfoo1.nextSibling);
  verify(foo == oldfoo3.previousSibling);
  verify(foo.parentNode == fum);

  var bar = foo.firstChild;
  verify(bar);
  verify(bar.nodeName == "bar");
  verify(bar.namespaceURI == null);
  verify(bar.prefix == null);
  verify(bar == foo.lastChild);
  verify(bar.firstChild == null);
  verify(bar.lastChild == null);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 3);
  verify(foos.item(0) == oldfoo1);
  verify(foos.item(1) == foo);
  verify(foos.item(2) == oldfoo3);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 1);
  verify(bars.item(0) == bar);

  verify(oldfoo1.parentNode == fum);
  verify(oldfoo2.parentNode == null);
  verify(oldfoo3.parentNode == fum);
}

test("LSParser.parseWithContext (ACTION_REPLACE) #2")
{
  var stringData = #string "input/input2.xml";

  var input = document.implementation.createLSInput();
  verify(input);
  input.stringData = stringData;

  var parser = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
  verify(parser);

  var newDocument = document.implementation.createDocument("http://www.opera.com/namespace-foo", "fum", null);
  verify(newDocument);
  verify(newDocument.nodeName == "#document");

  var fum = newDocument.documentElement;
  verify(fum);
  verify(fum.nodeName == "fum");
  verify(fum.namespaceURI == "http://www.opera.com/namespace-foo");
  verify(fum.prefix == null);
  verify(fum == newDocument.firstChild);

  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));
  fum.appendChild(newDocument.createElementNS("http://www.opera.com/namespace-foo", "foo"));

  var oldfoos = newDocument.getElementsByTagName("foo");
  verify(oldfoos);
  verify(oldfoos.length == 3);

  var oldfoo1 = oldfoos.item(0);
  var oldfoo2 = oldfoos.item(1);
  var oldfoo3 = oldfoos.item(2);

  verify(oldfoo1.parentNode == fum);
  verify(oldfoo2.parentNode == fum);
  verify(oldfoo3.parentNode == fum);

  var foo = parser.parseWithContext(input, oldfoo2, LSParser.ACTION_REPLACE);
  verify(foo);
  verify(foo.nodeName == "foo");
  verify(foo.namespaceURI == null);
  verify(foo.prefix == null);
  verify(foo == oldfoo1.nextSibling);
  verify(foo == oldfoo3.previousSibling);
  verify(foo.parentNode == fum);

  var bar1 = foo.firstChild;
  verify(bar1);
  verify(bar1.nodeName == "bar");
  verify(bar1.namespaceURI == null);
  verify(bar1.prefix == null);
  verify(bar1.firstChild == null);
  verify(bar1.lastChild == null);

  var bar2 = bar1.nextSibling;
  verify(bar2);
  verify(bar2.nodeName == "bar");
  verify(bar2.namespaceURI == null);
  verify(bar2.prefix == null);

  var fie1 = bar2.firstChild;
  verify(fie1);
  verify(fie1.nodeName == "fie");
  verify(fie1.namespaceURI == null);
  verify(fie1.prefix == null);
  verify(fie1.firstChild == null);
  verify(fie1.lastChild == null);

  var fie2 = fie1.nextSibling;
  verify(fie2);
  verify(fie2.nodeName == "fie");
  verify(fie2.namespaceURI == null);
  verify(fie2.prefix == null);
  verify(fie2.firstChild == null);
  verify(fie2.lastChild == null);

  verify(bar2.childNodes.length == 2);
  verify(bar2.childNodes.item(0) == fie1);
  verify(bar2.childNodes.item(1) == fie2);

  var bar3 = bar2.nextSibling;
  verify(bar3);
  verify(bar3.nodeName == "bar");
  verify(bar3.namespaceURI == null);
  verify(bar3.prefix == null);
  verify(bar3.firstChild == null);
  verify(bar3.lastChild == null);

  verify(foo.childNodes.length == 3);
  verify(foo.childNodes.item(0) == bar1);
  verify(foo.childNodes.item(1) == bar2);
  verify(foo.childNodes.item(2) == bar3);

  var foos = newDocument.getElementsByTagName("foo");
  verify(foos);
  verify(foos.length == 3);
  verify(foos.item(0) == oldfoo1);
  verify(foos.item(1) == foo);
  verify(foos.item(2) == oldfoo3);

  var bars = newDocument.getElementsByTagName("bar");
  verify(bars);
  verify(bars.length == 3);
  verify(bars.item(0) == bar1);
  verify(bars.item(1) == bar2);
  verify(bars.item(2) == bar3);

  var fies = newDocument.getElementsByTagName("fie");
  verify(fies);
  verify(fies.length == 2);
  verify(fies.item(0) == fie1);
  verify(fies.item(1) == fie2);

  verify(oldfoo1.parentNode == fum);
  verify(oldfoo2.parentNode == null);
  verify(oldfoo3.parentNode == fum);
}

group "DOM.Load.DOMParser";
require init;
require DOM3_LOAD;
language ecmascript;

test("Has DOMParser.prototype")
{
  verify(window.DOMParser);
  verify(DOMParser.prototype);
}

test("DOMParser error handling#1")
{
  var t = '<foo bar="&"></foo>';
  try
    {
      var h=(new DOMParser()).parseFromString(t,"text/xml");
    }
  catch(e)
    {
      verify(!"Threw unexpected exception");
    }
  verify(h.getElementsByTagName('parsererror').length==1);
}

test("DOMParser error handling#2")
{
  var t = '<foo></foo><hi></hi>';
  try
    {
      var h=(new DOMParser()).parseFromString(t,"text/xml");
    }
  catch(e)
    {
      verify(!"Threw unexpected exception");
    }
  verify(h.getElementsByTagName('parsererror').length==1);
}

test("DOMParser error handling#3")
{
  var t = '';
  try
    {
      var h=(new DOMParser()).parseFromString(t,"text/xml");
    }
  catch(e)
    {
      verify(!"Threw unexpected exception");
    }
  verify(h.getElementsByTagName('parsererror').length==1);
}

test("DOMParser error handling#4")
{
  var t = null;
  try
    {
      var h=(new DOMParser()).parseFromString(t,"text/xml");
      verify("Expected exception");
    }
  catch(e)
    {
      // pass if we get here
    }
}

test("DOMParser error handling#5")
{
  var t = undefined;
  try
    {
      var h=(new DOMParser()).parseFromString(t,"text/xml");
      verify("Expected exception");
    }
  catch(e)
    {
      // pass if we get here
    }
}
