group "DOM.Load.DOMConfiguration.basic";
require init;
require DOM3_LOAD;

language ecmascript;

test("DOMConfiguration #1")
{
    var par = document.implementation.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, "");
    verify(par);
    verify(par.domConfig);
    verify(par.domConfig.parameterNames);
    verify(par.domConfig.parameterNames.length);

    var len = par.domConfig.parameterNames.length;
    var params = par.domConfig.parameterNames;

    function checkVal(i, name, deflt)
    {
        verify(params[i] == name);
        verify(par.domConfig.getParameter(name) == deflt);
    }

    /* checking that the default ones & their default values are there, and in the right order. */
    checkVal(0, "canonical-form", false);
    checkVal(1, "cdata-sections", true);
    checkVal(2, "check-character-normalization", false);
    checkVal(3, "comments", true);
    checkVal(4, "datatype-normalization", false);
    checkVal(5, "entities", false);
    checkVal(6, "error-handler", null);
    checkVal(7, "infoset", false);
    checkVal(8, "namespaces", true);
    checkVal(9, "namespace-declarations", true);
    checkVal(10, "normalize-characters", false);
    checkVal(11, "schema-location", null);
    checkVal(12, "schema-type", null);
    checkVal(13, "split-cdata-sections", false);
    checkVal(14, "validate", false);
    checkVal(15, "validate-if-schema", false);
    checkVal(16, "well-formed", true);
    checkVal(17, "element-content-whitespace", true);

    /* try setting some.. */
    try {
        par.domConfig.setParameter("error-handler", null);
        verify(par.domConfig.getParameter("error-handler") == null);
        par.domConfig.setParameter("error-handler", function() { return; });
        verify(par.domConfig.getParameter("error-handler") != null);

        verify(par.domConfig.getParameter("validate") == false);
        par.domConfig.setParameter("validate", false);
        verify(par.domConfig.getParameter("validate") == false);

        par.domConfig.setParameter("element-content-whitespace", true);
        verify(par.domConfig.getParameter("element-content-whitespace") == true);
    }
    catch(e) {
        verify(!"Threw unexpected exception");
    }

    try {
        par.domConfig.setParameter("error-handler", false);
        verify(false);
    }
    catch(e) {
       verify(true);
    }

    len = par.domConfig.parameterNames.length;
    try {
       par.domConfig.setParameter("something-new", true);
        verify(false);
    }
    catch(e) {
       verify(true);
    }
    verify (par.domConfig.parameterNames.length == len);
}
