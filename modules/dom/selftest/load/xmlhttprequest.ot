// -*- Mode: c++; indent-tabs-mode: nil; c-basic-offset: 2 -*-
group "DOM.Load.XMLHttpRequest";
require init;
require DOM_HTTP_SUPPORT;

include "modules/dom/src/domobj.h";
include "modules/dom/src/opera/domhttp.h";

language ecmascript;

test("Constructor")
{
  verify("XMLHttpRequest" in window);
  verify(XMLHttpRequest.prototype);
  verify(XMLHttpRequest.prototype.constructor);
  verify(XMLHttpRequest.prototype.constructor === XMLHttpRequest);
}

test("Constants")
{
  verify("XMLHttpRequest" in window);

  verify("UNSENT" in XMLHttpRequest);
  verify("OPENED" in XMLHttpRequest);
  verify("HEADERS_RECEIVED" in XMLHttpRequest);
  verify("LOADING" in XMLHttpRequest);
  verify("DONE" in XMLHttpRequest);

  verify(XMLHttpRequest.UNSENT === 0);
  verify(XMLHttpRequest.OPENED === 1);
  verify(XMLHttpRequest.HEADERS_RECEIVED === 2);
  verify(XMLHttpRequest.LOADING === 3);
  verify(XMLHttpRequest.DONE === 4);

  XMLHttpRequest.UNSENT === 5;
  verify(XMLHttpRequest.UNSENT === 0);

  XMLHttpRequest.LOADING === 6;
  verify(XMLHttpRequest.LOADING === 3);

  XMLHttpRequest.DONE === 10;
  verify(XMLHttpRequest.DONE === 4);
}

test("Prototype")
{
  verify("XMLHttpRequest" in window);
  verify(XMLHttpRequest.prototype);
  var p = XMLHttpRequest.prototype;

  verify("addEventListener" in p);
  verify("removeEventListener" in p);
  verify("open" in p);
  verify("send" in p);
  verify("abort" in p);
  verify("dispatchEvent" in p);
  verify("getResponseHeader" in p);
  verify("getAllResponseHeaders" in p);
  verify("overrideMimeType" in p);
}

test("Instance")
{
  verify("XMLHttpRequest" in window);
  var xhr = new XMLHttpRequest;
  verify(xhr);
  verify(xhr.toString() == "[object XMLHttpRequest]");

  verify("addEventListener" in xhr);
  verify("removeEventListener" in xhr);
  verify("open" in xhr);
  verify("send" in xhr);
  verify("abort" in xhr);
  verify("dispatchEvent" in xhr);
  verify("getResponseHeader" in xhr);
  verify("getAllResponseHeaders" in xhr);
  verify("overrideMimeType" in xhr);

  verify("readyState" in xhr);
  verify("status" in xhr);
  verify("statusText" in xhr);
  verify("responseType" in xhr);
  verify("response" in xhr);
  verify("responseText" in xhr);
  verify("responseXML" in xhr);

  verify("onload" in xhr);
  verify("onerror" in xhr);
  verify("onreadystatechange" in xhr);
}

test("XMLHttpRequest #1")
{
  var xhr = new XMLHttpRequest;
  verify(xhr.readyState == 0);

  xhr.open("GET", "data:text/plain,this is some plain text", false);
  verify(xhr.readyState == 1);

  xhr.send(null);
  verify(xhr.readyState == 4);
  verify(xhr.responseText == "this is some plain text");
}

test("XMLHttpRequest #2")
{
  var xhr = new XMLHttpRequest;
  verify(xhr.readyState == 0);

  xhr.open("GET", "data:text/xml,<?xml version='1.0'?><root/>", false);
  verify(xhr.readyState == 1);

  xhr.send(null);
  verify(xhr.readyState == 4);
  verify(xhr.responseText == "<?xml version='1.0'?><root/>");
  verify(xhr.responseXML);
  verify(xhr.responseXML.documentElement);
  verify(xhr.responseXML.documentElement.nodeName == "root");
}

test("XMLHttpRequest #3")
  async;
{
  var xhr = new XMLHttpRequest;
  verify(xhr.readyState == 0);

  var expected_readyState = 1;
  var finished = false;

  xhr.onreadystatechange = function ()
    {
      if (!finished)
        if (xhr.readyState != expected_readyState)
        {
          finished = true;
          ST_failed("xhr.readyState was " + String(xhr.readyState) + ", expected " + String(expected_readyState), "xmlhttprequest.ot", 1);
        }
        else if (expected_readyState == 4)
        {
          finished = true;
          if (xhr.responseText == "this is some plain text")
            ST_passed();
          else
            ST_failed("xhr.responseText was '" + xhr.responseText + "', expected 'this is some plain text'", "xmlhttprequest.ot", 1);
        }
        else
          ++expected_readyState;
    };

  xhr.open("GET", "data:text/plain,this is some plain text", true);
  verify(xhr.readyState == 1);

  xhr.send(null);
  verify(xhr.readyState == 1);
}

test("XMLHttpRequest #4")
  async;
{
  var xhr = new XMLHttpRequest;
  verify(xhr.readyState == 0);

  var expected_readyState = 1;
  var finished = false;

  xhr.onreadystatechange = function ()
    {
      if (!finished)
        if (xhr.readyState != expected_readyState)
        {
          finished = true;
          ST_failed("xhr.readyState was " + String(xhr.readyState) + ", expected " + String(expected_readyState), "xmlhttprequest.ot", 1);
        }
        else if (expected_readyState == 4)
        {
          finished = true;
          if (xhr.responseText == "<?xml version='1.0'?><root/>" &&
              xhr.responseXML &&
              xhr.responseXML.documentElement &&
              xhr.responseXML.documentElement.nodeName == "root")
            ST_passed();
          else
            ST_failed("incorrect result");
        }
        else
          ++expected_readyState;
    };

  xhr.open("GET", "data:text/xml,<?xml version='1.0'?><root/>", true);
  verify(xhr.readyState == 1);

  xhr.send(null);
  verify(xhr.readyState == 1);
}

test("XMLHttpRequest #5")
{
  var xhr = new XMLHttpRequest;
  verify(xhr.readyState == 0);

  xhr.open("GET", "data:text/plain,this is some plain text", false);
  verify(xhr.readyState == 1);

  xhr.send(null);
  verify(xhr.readyState == 4);
  verify(xhr.responseText == "this is some plain text");

  xhr.abort();
  verify(xhr.readyState == 0);

  xhr.open("GET", "data:text/plain,this is some plain text", false);
  verify(xhr.readyState == 1);

  xhr.send(null);
  verify(xhr.readyState == 4);
  verify(xhr.responseText == "this is some plain text");
}

test("XMLHttpRequest #6")
{
  /* Artificially raise testing coverage.  I don't want to depend on real
     HTTP servers, and with non-HTTP URL:s is't kind of difficult to test
     header stuff. */
  var xhr = new XMLHttpRequest;

  xhr.open("GET", "data:text/plain,this is some plain text", false);
  xhr.setRequestHeader("Foo", "foo");
  xhr.send(null);
  xhr.getAllResponseHeaders();
  xhr.getResponseHeader("Bar");
}

html
{
  //! <html><body>Not started yet</body></html>
}

test("XMLHttpRequest #7")
  async;
{
  var outputNode = document.body.firstChild;
  verify(outputNode);
  verify(outputNode.data.indexOf("Not started yet") != -1);

  var x = new XMLHttpRequest();
  var href = "data:text/plain,Hej";
  x.open('GET', href);
  x.send(null);

  // Make sure the script is interrupted, giving the xmlhttprequest
  // time to finish.
  var delay = 1000;
  var s=new Date();
  do {
    outputNode.data = 'Please wait ' + (delay - (new Date() - s)) + 'ms';
  } while (new Date() - s < delay);

  var tries = 10;
  setTimeout(function() {
      passed = (x.readyState == 4);
      if (!passed && tries--) {
        setTimeout(arguments.callee, 100);
        return;
      }
      outputNode.data = (passed?'PASS':'FAIL') + ' (readyState == ' + x.readyState + ')';
      if (passed)
        ST_passed();
      else
        ST_failed("readyState didn't get to 4 in time", "xmlhttprequest.ot", 1);
    }, 100);
}

test("XMLHttpRequest #8: Methods")
{
  function sendOne(method, content) {
     var xhr = new XMLHttpRequest();
     verify(xhr.readyState == 0);

     /* Note: no encoding done */
     xhr.open(method, "data:text/plain,"+content, false);
     verify(xhr.readyState == 1);

     xhr.send(null);
     verify(xhr.readyState == 4);
     verify(xhr.responseText == content);

     xhr.abort();
     verify(xhr.readyState == 0);
  }

  sendOne("GET", "GET me this");
  sendOne("gET", "this is some plain text");
  sendOne("get", "GET me this");

  sendOne("FETCH", "fetched text");
  sendOne("feTch", "this is some plain text");

  sendOne("PUT", "PUT me this");

  var no_exception = true;
  try {
    sendOne("CONNECT", "no can do");
  } catch(e) {
    if (e.code != 18)
      throw ("CONNECT: unexpected exception (" + e.code + "); wanted SECURITY_ERR");
    no_exception = false;
  }
  if (no_exception)
    throw "CONNECT: illegal method; expected exception SECURITY_ERR";

  sendOne("CONNECTor", "can do");
  sendOne("CONNEC_T", "can do");

  no_exception = true;
  try {
    sendOne("TRACE", "no can do");
  } catch(e) {
    if (e.code != 18)
      throw ("TRACE: unexpected exception (" + e.code + "); wanted SECURITY_ERR");
    no_exception = false;
  }
  if (no_exception)
    throw "TRACE: illegal method; expected exception SECURITY_ERR";
  sendOne("TRACER", "can do");
  sendOne("TRAC", "can do");

  no_exception = true;
  try {
    sendOne("TRACK", "no can do");
  } catch(e) {
    if (e.code != 18)
      throw ("TRACK: unexpected exception (" + e.code + "); wanted SECURITY_ERR");
    no_exception = false;
  }
  if (no_exception)
    throw "TRACK: illegal method; expected exception SECURITY_ERR";

  no_exception = true;
  try {
    sendOne("tracK", "no can do");
  } catch(e) {
    if (e.code != 18)
      throw ("TRACK: unexpected exception (" + e.code + "); wanted SECURITY_ERR");
    no_exception = false;
  }
  if (no_exception)
    throw "TRACK: illegal method; expected exception SECURITY_ERR";

  sendOne("TRACK_", "can do");
  sendOne("TRACK1", "can do");

  no_exception = true;
  try {
    sendOne("GET\thttp://www.example.org\tHTTP/1.0\r\nHost:www.target.org\r\nX:Y\r\n\r\nGET\thttp://devnull.org/\tHTTP/1.0\r\nA:B", "no can do");
  } catch(e) {
    if (e.code != 12)
      throw ("GET: unexpected exception (" + e.code + "); wanted SYNTAX_ERR");
    no_exception = false;
  }
  if (no_exception)
    throw "GET: illegal HTTP request splitting; expected SYNTAX_ERR";
}

test("XMLHttpRequest #9: WebDAV methods")
{
  function sendOne(method, content) {
     var xhr = new XMLHttpRequest();
     verify(xhr.readyState == 0);

     /* Note: no encoding done */
     xhr.open(method, "data:text/plain,"+content, false);
     verify(xhr.readyState == 1);

     xhr.send(null);
     verify(xhr.readyState == 4);
     verify(xhr.responseText == content);

     xhr.abort();
     verify(xhr.readyState == 0);
  }

  sendOne("GET", "GET me this");
  sendOne("gET", "this is some plain text");

  /* WebDAV extensions: */
  var webdav_methods =
    { "MKCOL": "made dir",
      "COPY": "copied this",
      "MOVE": "resource moved",
      "LOCK": "locking",
      "UNLOCK": "resource",
      "PROPFIND": "a",
      "PROPPATCH": "b",
      "DELETE": "deleted",
      "NOTIFY": "notified",
      "POLL": "polled",
      "SEARCH": "for",
      "SUBSCRIBE": "x",
      "UNSUBSCRIBE": "x"
    };
  for (m in webdav_methods)
    sendOne(m, webdav_methods[m]);
}

test("XMLHttpRequest #10: userinfo")
{
  function sendOne(method, content, user, password) {
     var xhr = new XMLHttpRequest();
     verify(xhr.readyState == 0);

     xhr.open(method, "data:text/plain,"+content, false, user, password);
     verify(xhr.readyState == 1);

     xhr.send(null);
     verify(xhr.readyState == 4);
     verify(xhr.responseText == content);

     xhr.abort();
     verify(xhr.readyState == 0);
  }

  sendOne("GET", "hello world", "user", "password");
  sendOne("GET", "hello world", "u%0d%0A%7F--__--_-_()=*+;,", "zyyxxyy()===***+;%20%0A%0a");

  try {
    var lterm  = String.fromCharCode(10,13);
    sendOne("GET", "hello world", lterm + lterm + "\uFFFE spaces are allowed too ", "the password \r\n in \r\n cleartext");
  } catch(e) {
    throw "Userinfo not accepted";
  }
}

test("XMLHttpRequest #11: responseType + response")
{
  var xhr = new XMLHttpRequest;
  verify(xhr.readyState == 0);

  xhr.open("GET", "data:text/plain,this is some plain text", false);
  verify(xhr.readyState == 1);

  xhr.send(null);
  verify(xhr.readyState == 4);
  verify(xhr.responseText == "this is some plain text");

  xhr.abort();
  verify(xhr.readyState == 0);

  xhr.open("GET", "data:text/plain,this is some plain text", false);
  verify(xhr.readyState == 1);
  verify("responseType" in xhr);
  xhr.responseType = "foo";
  verify(xhr.responseType == "");
  xhr.responseType = "text";
  verify(xhr.responseType == "text");

  xhr.send(null);
  verify(xhr.readyState == 4);
  verify(xhr.responseText == "this is some plain text");

  xhr.abort();
  verify(xhr.readyState == 0);

  var str = "this is some plain text";
  xhr.open("GET", "data:application/octet-stream," + str, false);
  verify(xhr.readyState == 1);
  verify("responseType" in xhr);
  xhr.responseType = "arraybuffer";
  verify(xhr.responseType == "arraybuffer");

  xhr.send(null);
  verify(xhr.readyState == 4);

  verify(xhr.response.length == str.length);
  try {
    verify(xhr.responseText == "" && xhr.responseText != "");
  } catch (e) {
    verify (e.code == DOMException.INVALID_STATE_ERR);
  }
}

test("XMLHttpRequest #11: responseType(json)")
{
  var xhr = new XMLHttpRequest;
  xhr.responseType = "json";

  function verifySameValue(a, b)
  {
    verify(typeof a == typeof b);
    if (typeof a != 'object')
      verify(a === b);
    else
    {
      for (var p in a)
      {
        verify (p in b);
        verifySameValue(a[p], b[p]);
      }
    }
  }

  var expected = {"foo": 1, "bar": 2};
  xhr.open("GET", 'data:application/json,' + JSON.stringify(expected), false);
  xhr.send(null);
  verifySameValue(xhr.response, expected);

  expected = [1,2,3,4.2, 'a'];
  xhr.open("GET", 'data:application/json,' + JSON.stringify(expected), false);
  xhr.send(null);
  verifySameValue(xhr.response, expected);

  expected = "hey";
  xhr.open("GET", 'data:application/json,' + JSON.stringify(expected), false);
  xhr.send(null);
  verifySameValue(xhr.response, expected);

  expected = {};
  xhr.open("GET", 'data:application/json,' + JSON.stringify(expected), false);
  xhr.send(null);
  verifySameValue(xhr.response, expected);
}


test("XMLHttpRequest #12: withCredentials")
  require CORS_SUPPORT;
{
  var xhr = new XMLHttpRequest();
  verify('withCredentials' in xhr);
  verify(xhr.withCredentials === false);
  xhr.withCredentials = true;
  verify(xhr.withCredentials);
  xhr.open("GET", "data:text/plain,this is some plain text", false);
  verify(xhr.readyState == 1);
  try {
    xhr.withCredentials = true;
    verify(xhr.withCredentials === true);
  } catch (e) {
    verify(false);
  }

  xhr.send(null);
  verify(xhr.readyState == 4);
  try {
    xhr.withCredentials = false;
    verify(false);
  } catch (e) {
    verify(e.code == DOMException.INVALID_STATE_ERR);
    verify(xhr.withCredentials === true);
  }
  xhr.abort();
  xhr.withCredentials = false;
  verify(!xhr.withCredentials);
  xhr.withCredentials = true;
  verify(xhr.withCredentials);
}

test("XMLHttpRequest #13: open(method)")
{
  var xhr = new XMLHttpRequest;
  var url = "data:text/plain,hey";
  try {
    xhr.open("", url, false);
    verify(!"open() should throw on empty method");
  } catch (e) {
    verify(e instanceof DOMException);
    verify(e.code == DOMException.SYNTAX_ERR);
  }
  try {
    xhr.open(" GET", url, false);
    verify(!"open() should throw on illegal method");
  } catch (e) {
    verify(e instanceof DOMException);
    verify(e.code == DOMException.SYNTAX_ERR);
  }
  try {
    xhr.open("\tGET", url, false);
    verify(!"open() should throw on illegal method");
  } catch (e) {
    verify(e instanceof DOMException);
    verify(e.code == DOMException.SYNTAX_ERR);
  }
  try {
    xhr.open("GET\u0000", url, false);
    verify(!"open() should throw on illegal method");
  } catch (e) {
    verify(e instanceof DOMException);
    verify(e.code == DOMException.SYNTAX_ERR);
  }
  try {
    xhr.open("PO\u0000ST", url, false);
    verify(!"open() should throw on illegal method");
  } catch (e) {
    verify(e instanceof DOMException);
    verify(e.code == DOMException.SYNTAX_ERR);
  }
}

test("XMLHttpRequest #13: open(method)")
{
  var xhr = new XMLHttpRequest;
  var url = "data:text/plain,hey";
  xhr.open("GET", url, false);
  try {
    xhr.setRequestHeader("", "illegal");
    verify(!"setRequestHeader() should throw on illegal header name");
  } catch (e) {
    verify(e instanceof DOMException);
    verify(e.code == DOMException.SYNTAX_ERR);
  }
  try {
    xhr.setRequestHeader("a\tb", "illegal");
    verify(!"setRequestHeader() should throw on illegal header name");
  } catch (e) {
    verify(e instanceof DOMException);
    verify(e.code == DOMException.SYNTAX_ERR);
  }
  try {
    xhr.setRequestHeader("a\u0000b", "illegal");
    verify(!"setRequestHeader() should throw on illegal header name");
  } catch (e) {
    verify(e instanceof DOMException);
    verify(e.code == DOMException.SYNTAX_ERR);
  }
  try {
    xhr.setRequestHeader("\u0000", "illegal");
    verify(!"setRequestHeader() should throw on illegal header name");
  } catch (e) {
    verify(e instanceof DOMException);
    verify(e.code == DOMException.SYNTAX_ERR);
  }
  try {
    xhr.setRequestHeader("AB\u0000", "illegal");
    verify(!"setRequestHeader() should throw on illegal header name");
  } catch (e) {
    verify(e instanceof DOMException);
    verify(e.code == DOMException.SYNTAX_ERR);
  }
}

test("AnonXMLHttpRequest: Constructor")
{
  verify("AnonXMLHttpRequest" in window);
  verify(AnonXMLHttpRequest.prototype);
  verify(AnonXMLHttpRequest.prototype.constructor);
  verify(AnonXMLHttpRequest.prototype.constructor === AnonXMLHttpRequest);
}

test("AnonXMLHttpRequest: Prototype")
{
  verify("AnonXMLHttpRequest" in window);
  verify(AnonXMLHttpRequest.prototype);
  var axhr = AnonXMLHttpRequest;
  var ap = axhr.prototype;

  verify("addEventListener" in ap);
  verify("removeEventListener" in ap);
  verify("open" in ap);
  verify("send" in ap);
  verify("abort" in ap);
  verify("dispatchEvent" in ap);
  verify("getResponseHeader" in ap);
  verify("getAllResponseHeaders" in ap);
  verify("overrideMimeType" in ap);
}

test("AnonXMLHttpRequest: Instance")
{
  verify("AnonXMLHttpRequest" in window);
  var xhr = new AnonXMLHttpRequest;
  verify(xhr);
  verify(xhr.toString() == "[object AnonXMLHttpRequest]");

  verify("addEventListener" in xhr);
  verify("removeEventListener" in xhr);
  verify("open" in xhr);
  verify("send" in xhr);
  verify("abort" in xhr);
  verify("dispatchEvent" in xhr);
  verify("getResponseHeader" in xhr);
  verify("getAllResponseHeaders" in xhr);
  verify("overrideMimeType" in xhr);

  verify("readyState" in xhr);
  verify("status" in xhr);
  verify("statusText" in xhr);
  verify("responseType" in xhr);
  verify("response" in xhr);
  verify("responseText" in xhr);
  verify("responseXML" in xhr);

  verify("onload" in xhr);
  verify("onerror" in xhr);
  verify("onreadystatechange" in xhr);
}

test("AnonXMLHttpRequest: withCredentials")
  require CORS_SUPPORT;
{
  verify("AnonXMLHttpRequest" in window);
  var xhr = new AnonXMLHttpRequest;
  verify(xhr);

  xhr.open("GET", "data:text/plain,this is some plain text", false);
  verify(xhr.readyState == 1);
  try {
    xhr.withCredentials = true;
    verify(false);
  } catch (e) {
    verify (e.code == DOMException.INVALID_ACCESS_ERR);
    verify(xhr.withCredentials === false);
  }
}

test("XMLHttpRequest setRequestHeader #1")
{
  var xhr = new XMLHttpRequest;

  xhr.open("GET", "data:text/plain,this is some plain text", false);
  xhr.send(null);
  try {
    xhr.setRequestHeader("Foo", "foo");
    verify(false);
  } catch (e) {
    verify (e.code == DOMException.INVALID_STATE_ERR);
  }
}

test("XMLHttpRequest setRequestHeader #2")
{
  function verifyThrow(f, expected)
  {
    try {
      f();
      verify(false);
    } catch (e) {
      verify(e.code == expected);
    }
  }

  var xhr = new XMLHttpRequest;
  xhr.open("GET", "data:text/plain,this is some plain text", false);
  xhr.setRequestHeader("Foo", "foo");
  verifyThrow(function () { xhr.setRequestHeader('Foo','\u2000 b');}, DOMException.SYNTAX_ERR);
  verifyThrow(function () { xhr.setRequestHeader('Fo o','b');}, DOMException.SYNTAX_ERR);
  verifyThrow(function () { xhr.setRequestHeader('','b');}, DOMException.SYNTAX_ERR);
}

test("XMLHttpRequest readyState")
{
  var xhr = new XMLHttpRequest;
  xhr.open("GET", "data:text/plain,this is some plain text", true);
  xhr.send(null);
  verify(xhr.readyState == 1);
  xhr.open("GET", "data:text/plain,this is some plain text", true);
  xhr.send(null);
  verify(xhr.readyState == 1);
}

test("Instance (progress events)")
  require PROGRESS_EVENTS_SUPPORT;
{
  verify("XMLHttpRequest" in window);
  var xhr = new XMLHttpRequest;
  verify(xhr);

  verify("overrideMimeType" in xhr);

  verify("upload" in xhr);
  verify("timeout" in xhr);

  verify("onload" in xhr);
  verify("onerror" in xhr);
  verify("onreadystatechange" in xhr);
  verify("onloadstart" in xhr);
  verify("onloadend" in xhr);
  verify("ontimeout" in xhr);
  verify("onabort" in xhr);
  verify("onprogress" in xhr);
}

test("XMLHttpRequest timeout")
  require PROGRESS_EVENTS_SUPPORT;
{
  var xhr = new XMLHttpRequest;
  verify(xhr.timeout == 0);
  xhr.timeout = 44;
  verify(xhr.timeout == 44);
  xhr.timeout = NaN;
  verify(xhr.timeout == 0);
  xhr.timeout = -1;
  verify(xhr.timeout == 0xffffffff);
}

test("XMLHttpRequest upload")
  require PROGRESS_EVENTS_SUPPORT;
{
  verify("XMLHttpRequestUpload" in window);
  verify(typeof window.XMLHttpRequestUpload === 'function');
  var xhr = new XMLHttpRequest;
  verify("upload" in xhr);
  var up = xhr.upload;

  verify("addEventListener" in up);
  verify("removeEventListener" in up);
  verify("dispatchEvent" in up);
  verify("onload" in up);
  verify("onerror" in up);
  verify(!("onreadystatechange" in up));
  verify("onloadstart" in up);
  verify("onloadend" in up);
  verify("onprogress" in up);
  verify("ontimeout" in up);
  verify("onabort" in up);
}

table content_types(const char *,const char *, const char *, const char *)
{
  {"text/plain", "text/plain", NULL, "text/plain"},
  {"text/html", "text/plain", "utf-8", "text/html"}
  {"text/html", "text/plain", "UTF-8", "text/html"}
  {"text/html", "text/plain", "UTF-8", "text/html"}
  {"text/html;", "text/plain", "utf-8", "text/html;"}
  {"text/html;foo=bar,charset=utf-8", "text/plain", "UTF-8", "text/html;foo=bar,charset=utf-8"}
  {"text/html;foo=bar,charset=UTF-8", "text/plain", "utf-8", "text/html;foo=bar,charset=UTF-8"}
  {"text/html;foo=bar,a=b,charset=ascii", "text/plain", "utf-8", "text/html;foo=bar,a=b,charset=utf-8"}
  {"text/html;foo=bar,a=b,charset=UTF-8", "text/plain", "utf-8", "text/html;foo=bar,a=b,charset=UTF-8"}
  {"text/html;  foo=bar  ,  a=b,,charset=UTF-8", "text/plain", "utf-8", "text/html;  foo=bar  ,  a=b,,charset=UTF-8"}
  {"text/html  ;charset=utf-8,  foo=bar  ,  a=b,", "text/plain", "utf-8", "text/html  ;charset=utf-8,  foo=bar  ,  a=b,"}
  {"text/html;foo=bar,charset=utf-8", "text/plain", "utf-8", "text/html;foo=bar,charset=utf-8"}
  {"text/html;foo=bar,CHARSET=UTF-8", "text/plain", "utf-8", "text/html;foo=bar,CHARSET=UTF-8"}
  {"text/html;foo=bar,charset=us-ascii,a=b", "text/plain", "utf-8", "text/html;foo=bar,charset=utf-8,a=b"}
  {"text/html;foo=bar,charset=us-ascii,a=b,charset=us-ascii", "text/plain", "utf-8", "text/html;foo=bar,charset=utf-8,a=b,charset=utf-8"}
  {"text/html;foo=bar,charset=us-ascii,a=b,charset=utf-8", "text/plain", "utf-8", "text/html;foo=bar,charset=utf-8,a=b,charset=utf-8"}
  {"text/html;foo=bar,charset=us-ascii,a=b,charset=UTF-8", "text/plain", "utf-8", "text/html;foo=bar,charset=utf-8,a=b,charset=utf-8"}
  {"text/html;foo=bar,charset=\"us-ascii\",a=b,charset=UTF-8", "text/plain", "utf-8", "text/html;foo=bar,charset=utf-8,a=b,charset=utf-8"}
  {"text/html;foo=bar,charset=\"us-ascii\",a=b,charset=\"UTF-8\"", "text/plain", "utf-8", "text/html;foo=bar,charset=utf-8,a=b,charset=utf-8"}
  {"text/html;foo=bar,charset=\"us-ascii\";a=b;charset= UTF-8", "text/plain", "utf-8", "text/html;foo=bar,charset=utf-8;a=b;charset=utf-8"}
  {"text/html;foo=bar,charset=  \"us-ascii\";a=b;charset= UTF-8", "text/plain", "utf-8", "text/html;foo=bar,charset=utf-8;a=b;charset=utf-8"}
  {"text/html;foo=bar,charset  =  \"us-ascii\";a=b;charset= UTF-8", "text/plain", "utf-8", "text/html;foo=bar,charset  =utf-8;a=b;charset=utf-8"}
  {"text/html;foo=bar,charsett=us-ascii", "text/plain", "utf-8", "text/html;foo=bar,charsett=us-ascii"}
  {"text/html;foo=bar,charset=\"x\\\"", "text/plain", "utf-8", "text/html;foo=bar,charset=utf-8"}
  {"text/html;foo=bar,charset=\"", "text/plain", "utf-8", "text/html;foo=bar,charset=utf-8"}
  {"text/html;foo=bar,charset=\"x\\\"\"", "text/plain", "utf-8", "text/html;foo=bar,charset=utf-8"}
}

test("XMLHttpRequest Content-Type")
  language c++;
{
  char *encoding = NULL;
  iterate (orig_value, mime_type, enc, expected) from content_types
  {
    OP_DELETEA(encoding);
    encoding = SetNewStr(orig_value);
    verify_not_oom(encoding);
    verify_success(DOM_HTTPOutputStream::TransformContentType(encoding, mime_type, enc));
    verify(op_strcmp(encoding, expected) == 0);
  }
}
finally
{
  OP_DELETEA(encoding);
}
