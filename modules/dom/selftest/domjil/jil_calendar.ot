/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2007-2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "DOM.JIL.Calendar";

require GADGET_SUPPORT;
require DOM_JIL_API_SUPPORT;
include "modules/security_manager/include/security_manager.h";
include "modules/gadgets/gadget_selftest_utils.h";

global
{
	OpSecurityManager::PrivilegedBlock disable_security;
	GadgetSelftestUtils g_utils;
}

exit
{
	g_utils.UnloadGadget();
}

// "Touch" all widget data files so that they are included in the build package
table dummy1(const char *) filelist "calendar_test_wgt" recursively;

test("Load Calendar test gadget")
	file zip_file "calendar_test_wgt/config.xml";
	async;
{
	OP_GADGET_STATUS status = g_utils.LoadGadgetForSelftest(zip_file, URL_GADGET_INSTALL_CONTENT);

	if (OpStatus::IsError(status))
		ST_failed("Unable to install test widget, status: %d", status);
	else if (status != OpGadgetStatus::OK_SIGNATURE_VERIFICATION_IN_PROGRESS)
		ST_passed();
}

test("Test object existence")
	language ecmascript;
	require success "Load Calendar test gadget";
{
	verify(Widget);
	verify(Widget.PIM);
	verify(new Widget.PIM.CalendarItem);

	verify(Widget.PIM.EventRecurrenceTypes);
	verify(Widget.PIM.EventRecurrenceTypes.DAILY);
	verify(Widget.PIM.EventRecurrenceTypes.EVERY_WEEKDAY);
	verify(Widget.PIM.EventRecurrenceTypes.MONTHLY_ON_DAY);
	verify(Widget.PIM.EventRecurrenceTypes.MONTHLY_ON_DAY_COUNT);
	verify(Widget.PIM.EventRecurrenceTypes.NOT_REPEAT);
	verify(Widget.PIM.EventRecurrenceTypes.WEEKLY_ON_DAY);
	verify(Widget.PIM.EventRecurrenceTypes.YEARLY);
}

test("CalendarItem setters/getters on newly created item")
	language ecmascript;
	require success "Test object existence";
{
	calendar_item = new Widget.PIM.CalendarItem;
	verify(calendar_item);

	jil_check_property(calendar_item, "alarmDate", "Date", "object"); //typeof(null) == 'object')
	jil_check_property(calendar_item, "alarmed", "boolean", "undefined");
	jil_check_property(calendar_item, "calendarItemId", "string", "undefined", true);
	jil_check_property(calendar_item, "eventEndTime", "Date", "object");  //typeof(null) == 'object')
	jil_check_property(calendar_item, "eventName", "string", "undefined");
	jil_check_property(calendar_item, "eventNotes", "string", "undefined");
	jil_check_property(calendar_item, "eventStartTime", "Date", "object");  //typeof(Date) == 'object')

	verify(calendar_item instanceof Widget.PIM.CalendarItem);
}

test("Add/Get/Remove CalendarItem - basic")
	language ecmascript;
	require success "Test object existence";
{
	calendar_item = new Widget.PIM.CalendarItem;
	var EVENT_NAME = "Meeting with Barnaba"
	calendar_item.eventName = EVENT_NAME;
	var count_before_add = Widget.PIM.getCalendarItemsCount();
	var id = Widget.PIM.addCalendarItem(calendar_item);
	var count_after_add = Widget.PIM.getCalendarItemsCount();
	verify(count_after_add - 1 == count_before_add);
	retrieved_item = Widget.PIM.getCalendarItem(id);
	verify(retrieved_item);
	verify(retrieved_item.calendarItemId == id);
	verify(retrieved_item.eventName == EVENT_NAME);
	verify(retrieved_item instanceof Widget.PIM.CalendarItem);
	Widget.PIM.deleteCalendarItem(retrieved_item.calendarItemId);
	var count_after_delete = Widget.PIM.getCalendarItemsCount();
	verify(count_after_delete == count_before_add);
	retrieved_item = Widget.PIM.getCalendarItem(id);
	verify(retrieved_item == null);
}

test("Add/Get/Remove/update CalendarItem - basic")
	language ecmascript;
	require success "Test object existence";
{
	calendar_item = new Widget.PIM.CalendarItem;
	var EVENT_NAME = "Meeting with Barnaba"
	calendar_item.eventName = EVENT_NAME;
	var count_before_add = Widget.PIM.getCalendarItemsCount();
	var id = Widget.PIM.addCalendarItem(calendar_item);
	var count_after_add = Widget.PIM.getCalendarItemsCount();
	verify(count_after_add - 1 == count_before_add);
	retrieved_item = Widget.PIM.getCalendarItem(id);
	verify(retrieved_item);
	verify(retrieved_item.calendarItemId == id);
	verify(retrieved_item.eventName == EVENT_NAME);
	var EVENT_NAME_MODIFIED = "Meeting with Alonso";
	retrieved_item.eventName = EVENT_NAME_MODIFIED;
	retrieved_item.update();
	var retrieved_item2 = Widget.PIM.getCalendarItem(id);
	verify(retrieved_item2);
	verify(retrieved_item2.calendarItemId == id);
	verify(retrieved_item2.eventName == EVENT_NAME_MODIFIED);

	Widget.PIM.deleteCalendarItem(id);
	var count_after_delete = Widget.PIM.getCalendarItemsCount();
	verify(count_after_delete == count_before_add);
	retrieved_item = Widget.PIM.getCalendarItem(id);
	verify(retrieved_item == null);
}

test("Add/Get/Remove CalendarItem - correct data")
	language ecmascript;
	require success "Add/Get/Remove CalendarItem - basic";
{
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, undefined, undefined, undefined, undefined, undefined));
	verify(check_add_remove_calendar_item(false, "Test Meeting", "test note", undefined, undefined, undefined, undefined, undefined));
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, new Date("December 18, 2015 15:11:00") , undefined, undefined, undefined, undefined));
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, new Date("December 18, 2015 15:11:00"), new Date("December 18, 2015 15:21:00"), undefined, undefined, undefined));
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, new Date("December 18, 2015 15:11:00"), undefined, true, new Date("December 18, 2015 14:11:00"), undefined));
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, new Date("December 18, 2015 15:11:00"), undefined, false, new Date("December 18, 2015 14:11:00"), undefined));
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, new Date("December 18, 2015 15:11:00"), undefined, false, new Date("December 18, 2015 15:11:00"), undefined));
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, new Date("December 18, 2015 15:11:00"), undefined, false, new Date("December 18, 2015 14:11:00"), Widget.PIM.EventRecurrenceTypes.NOT_REPEAT));
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, new Date("December 18, 2015 15:11:00"), undefined, false, new Date("December 18, 2015 14:11:00"), Widget.PIM.EventRecurrenceTypes.YEARLY));
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, new Date("December 18, 2015 15:11:00"), undefined, false, new Date("December 18, 2015 14:11:00"), Widget.PIM.EventRecurrenceTypes.DAILY));
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, new Date("December 18, 2015 15:11:00"), undefined, false, new Date("December 18, 2015 14:11:00"), Widget.PIM.EventRecurrenceTypes.EVERY_WEEKDAY));
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, new Date("December 18, 2015 15:11:00"), undefined, false, new Date("December 18, 2015 14:11:00"), Widget.PIM.EventRecurrenceTypes.MONTHLY_ON_DAY));
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, new Date("December 18, 2015 15:11:00"), undefined, false, new Date("December 7, 2015 14:11:00"), Widget.PIM.EventRecurrenceTypes.MONTHLY_ON_DAY)); // check for a bug in week number handling
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, new Date("December 18, 2015 15:11:00"), undefined, false, new Date("December 8, 2015 14:11:00"), Widget.PIM.EventRecurrenceTypes.MONTHLY_ON_DAY)); // check for a bug in week number handling
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, new Date("December 18, 2015 15:11:00"), undefined, false, new Date("December 18, 2015 14:11:00"), Widget.PIM.EventRecurrenceTypes.MONTHLY_ON_DAY_COUNT));
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, new Date("December 18, 2015 15:11:00"), undefined, false, new Date("December 18, 2015 14:11:00"), Widget.PIM.EventRecurrenceTypes.WEEKLY_ON_DAY));
	verify(check_add_remove_calendar_item(false, "Test Meeting", undefined, new Date("December 18, 2015 15:11:00"), undefined, false, new Date("December 18, 2015 14:11:00"), Widget.PIM.EventRecurrenceTypes.MONTHLY_ON_DAY_COUNT));
}

test("Add/Get/Remove CalendarItem - incorrect data")
	language ecmascript;
	require success "Add/Get/Remove CalendarItem - basic";
{
	verify(check_add_remove_calendar_item(true, "Test Meeting", undefined, null, undefined, undefined, undefined, undefined));
}

test("Test PIM.findCalendarItems with no callback (CORE-32957) - should not crash")
	language ecmascript;
	require success "Test object existence";
{
	Widget.PIM.onCalendarItemsFound = null;
	Widget.PIM.findCalendarItems(new Widget.PIM.CalendarItem(), 0, 1);
	Widget.PIM.findCalendarItems(new Widget.PIM.CalendarItem(), 2, 1);
}

test("Test Searching for CalendarItem")
	language ecmascript;
	require success "Test object existence";
	async;
{
	var added_items = new Array;
	cleanup_added_items = function()
	{
		remove_calendar_items(added_items);
	}
	var i = 0;
	while (i < 31)
	{
		var item = add_calendar_item("TestName" + i, "TestNotes" + i);
		added_items.push(item);
		i = i + 1;
	}
	make_search = function(name, notes, numResults, results )
	{
		var item = new Widget.PIM.CalendarItem;
		if (!item)
		{
			cleanup_added_items();
			ST_failed("Failed to create CalendarItem", "", "");
		}
		item.eventNotes = notes;
		item.eventName = name;
		item.eventStartTime = undefined;

		var object = {criterion:item, numResults:numResults, results:results};
		return object;
	}
	var searches = new Array;
	searches.push(make_search("TestName*", "TestNotes*", 31));
	searches.push(make_search("TestName1", "TestNotes1", 1));
	searches.push(make_search("TestName1*", "TestNotes1*", 11));
	test_search = function(searches_array, search_count)
	{
		if (searches_array.length == 0)
		{
			cleanup_added_items();
			ST_passed();
			return;
		}
		Widget.PIM.onCalendarItemsFound = function(results)
		{
			if (!results)
			{
				cleanup_added_items();
				ST_failed("Search no " + search_count + ": no result (i.e. error occurred during search)", "A", "B");
				return;
			}
			if (results.length != searches_array[0].numResults)
			{
				cleanup_added_items();
				ST_failed("Search no" + search_count + ": Bad result got " + results.length + " results, " + searches_array[0].numResults + "expected" ,"A","B");
				return;
			}
			test_search(searches_array.slice(1), search_count + 1);
		}
		Widget.PIM.findCalendarItems(searches_array[0].criterion, 0, 200);
	}

	test_search(searches, 0);
}

test("Test Searching for CalendarItem - dates")
	language ecmascript;
	require success "Test object existence";
	async;
{
	var added_items = new Array;
	cleanup_added_items = function()
	{
		remove_calendar_items(added_items);
	}

	var item_every_3rd_of_march = add_calendar_item("every 3rd of march", "birthday", new Date("March 3, 2010 12:00"), new Date("March 3, 2010 13:00"), false, null, Widget.PIM.EventRecurrenceTypes.YEARLY);
	added_items.push(item_every_3rd_of_march);
	var item_every_1st_wednsday_of_month = add_calendar_item("every 1st wednsday of month", "pay the bills", new Date("March 3, 2010 12:00"), new Date("March 3, 2010 13:00"), false, null, Widget.PIM.EventRecurrenceTypes.MONTHLY_ON_DAY);
	added_items.push(item_every_1st_wednsday_of_month);
	var item_every_3rd_of_month = add_calendar_item("every 3rd of every month", "something else", new Date("March 3, 2010 12:00"), new Date("March 3, 2010 13:00"), false, null, Widget.PIM.EventRecurrenceTypes.MONTHLY_ON_DAY_COUNT);
	added_items.push(item_every_3rd_of_month);
	var item_every_wednsday = add_calendar_item("every wednsday", "pool", new Date("March 3, 2010 12:00"), new Date("March 3, 2010 13:00"), false, null, Widget.PIM.EventRecurrenceTypes.WEEKLY_ON_DAY);
	added_items.push(item_every_wednsday);
	var item_every_weekday = add_calendar_item("every weekday", "work", new Date("March 3, 2010 12:00"), new Date("March 3, 2010 13:00"), false, null, Widget.PIM.EventRecurrenceTypes.EVERY_WEEKDAY);
	added_items.push(item_every_weekday);
	var item_every_day = add_calendar_item("every day", "lunch", new Date("March 3, 2010 12:00"), new Date("March 3, 2010 13:00"), false, null, Widget.PIM.EventRecurrenceTypes.DAILY);
	added_items.push(item_every_day);

	make_search = function(start_date, end_date, numResults, results )
	{
		var item = new Widget.PIM.CalendarItem;
		if (!item)
		{
			cleanup_added_items();
			ST_failed("Failed to create CalendarItem", "", "");
		}
		item.eventStartTime = start_date;
		item.eventEndTime = end_date;
		var object = {criterion:item, numResults:numResults, results:results};
		return object;
	}
	var searches = new Array;
	searches.push(make_search(new Date("March 3, 2010 12:00"), new Date("March 3, 2010 13:00"), 6));
	searches.push(make_search(undefined, new Date("March 3, 2010 13:00"), 6));
	searches.push(make_search(new Date("March 3, 2010 12:00"), undefined, 6));
	searches.push(make_search(undefined, new Date("March 3, 2010 12:59"), 0));
	searches.push(make_search(new Date("March 3, 2010 12:01"), undefined, 6));
	searches.push(make_search(new Date("March 3, 2010 12:01"), new Date("March 3, 2010 13:10"), 0));

	searches.push(make_search(new Date("March 3, 2011 12:00"), new Date("March 3, 2011 13:00"), 4, [item_every_3rd_of_march, item_every_3rd_of_month, item_every_weekday, item_every_day]));
	searches.push(make_search(new Date("April 3, 2010 12:00"), new Date("April 3, 2010 13:00"), 2, [item_every_3rd_of_month, item_every_day]));
	searches.push(make_search(new Date("March 4, 2010 12:00"), new Date("March 4, 2010 13:00"), 2, [item_every_weekday, item_every_day]));
	searches.push(make_search(new Date("April 7, 2010 12:00"), new Date("April 7, 2010 13:00"), 4 ,[item_every_1st_wednsday_of_month, item_every_wednsday, item_every_weekday, item_every_day]));
	searches.push(make_search(new Date("April 14, 2010 12:00"), new Date("April 14, 2010 13:00"), 3, [item_every_wednsday, item_every_weekday, item_every_day]));

	test_search = function(searches_array, search_count)
	{
		if (searches_array.length == 0)
		{
			cleanup_added_items();
			ST_passed();
			return;
		}
		Widget.PIM.onCalendarItemsFound = function(results)
		{
			if (!results)
			{
				cleanup_added_items();
				ST_failed("Search no " + search_count + ": no result (i.e. error occurred during search)", "A", "B");
				return;
			}
			if (results.length != searches_array[0].numResults)
			{
				cleanup_added_items();
				ST_failed("Search no" + search_count + ": Bad result got " + results.length + " results, " + searches_array[0].numResults + "expected" ,"A","B");
				return;
			}

			if (searches_array[0].results)
			{
				for (i in results)
				{
					var found = false;
					for (j in searches_array[0].results)
					{
						if (searches_array[0].results[j].carlendarItemId == results[i].carlendarItemId)
						{
							found = true;
							break;
						}
					}
					if (!found)
					{
						cleanup_added_items();
						ST_failed("Search no " + search_count + ": Unexpected result", "", "");
						return;
					}
				}
			}
			test_search(searches_array.slice(1), search_count + 1);
		}
		Widget.PIM.findCalendarItems(searches_array[0].criterion, 0, 200);
	}
	test_search(searches, 0);
}

test("Test Searching for CalendarItem - startIndex > endIndex")
	language ecmascript;
	require success "Test object existence";
	async;
{
	Widget.PIM.onCalendarItemsFound = function(results) {
		if (results === null || results === undefined) 
			ST_failed("There is no result, got: " + results, "", "")
		else if (typeof results != "object")
			ST_failed("The result is expected to be an object, got: " + result, "", "")
		else if (!(results instanceof Array))
			ST_failed("The result is expected to be an array, got: " + result, "", "")
		else if (results.length != 0)
			ST_failed("The result should be empty but contains some elements: " + result, "", "")
		else
			ST_passed()
	}

	Widget.PIM.findCalendarItems(new Widget.PIM.CalendarItem, 2, 1)
}

test("Test Searching for CalendarItem - dates - using getCalendarItems 1")
	language ecmascript;
	require success "Test object existence";
{
	var added_items = new Array;
	cleanup_added_items = function()
	{
		remove_calendar_items(added_items);
	}

	var item_every_3rd_of_march = add_calendar_item("every 3rd of march", "birthday", new Date("March 3, 2010 12:00"), new Date("March 3, 2010 13:00"), false, null, Widget.PIM.EventRecurrenceTypes.YEARLY);
	added_items.push(item_every_3rd_of_march);
	var item_every_1st_wednsday_of_month = add_calendar_item("every 1st wednsday of month", "pay the bills", new Date("March 3, 2010 12:00"), new Date("March 3, 2010 13:00"), false, null, Widget.PIM.EventRecurrenceTypes.MONTHLY_ON_DAY);
	added_items.push(item_every_1st_wednsday_of_month);
	var item_every_3rd_of_month = add_calendar_item("every 3rd of every month", "something else", new Date("March 3, 2010 12:00"), new Date("March 3, 2010 13:00"), false, null, Widget.PIM.EventRecurrenceTypes.MONTHLY_ON_DAY_COUNT);
	added_items.push(item_every_3rd_of_month);
	var item_every_wednsday = add_calendar_item("every wednsday", "pool", new Date("March 3, 2010 12:00"), new Date("March 3, 2010 13:00"), false, null, Widget.PIM.EventRecurrenceTypes.WEEKLY_ON_DAY);
	added_items.push(item_every_wednsday);
	var item_every_weekday = add_calendar_item("every weekday", "work", new Date("March 3, 2010 12:00"), new Date("March 3, 2010 13:00"), false, null, Widget.PIM.EventRecurrenceTypes.EVERY_WEEKDAY);
	added_items.push(item_every_weekday);
	var item_every_day = add_calendar_item("every day", "lunch", new Date("March 3, 2010 12:00"), new Date("March 3, 2010 13:00"), false, null, Widget.PIM.EventRecurrenceTypes.DAILY);
	added_items.push(item_every_day);

	make_search = function(start_date, end_date, numResults, results )
	{
		var item = new Widget.PIM.CalendarItem;
		if (!item)
		{
			cleanup_added_items();
			verify(item);
		}
		item.eventStartTime = start_date;
		item.eventEndTime = end_date;

		var object = {criterion:item, numResults:numResults, results:results};
		return object;
	}
	var searches = new Array;
	searches.push(make_search(new Date("March 3, 2010 12:00"), new Date("March 3, 2010 13:00"), 6));
	searches.push(make_search(new Date("Feb 1, 1990 12:00"), new Date("March 3, 2010 13:00"), 6));
	searches.push(make_search(new Date("March 3, 2010 12:00"), new Date("Feb 1, 2020 12:00"), 6));
	searches.push(make_search(new Date("Feb 1, 1990 12:00"), new Date("March 3, 2010 12:59"), 0));
	searches.push(make_search(new Date("March 3, 2010 12:01"), new Date("Feb 1, 2020 12:00"), 6));
	searches.push(make_search(new Date("March 3, 2010 12:01"), new Date("March 3, 2010 13:10"), 0));

	searches.push(make_search(new Date("March 3, 2011 12:00"), new Date("March 3, 2011 13:00"), 4, [item_every_3rd_of_march, item_every_3rd_of_month, item_every_weekday, item_every_day]));
	searches.push(make_search(new Date("April 3, 2010 12:00"), new Date("April 3, 2010 13:00"), 2, [item_every_3rd_of_month, item_every_day]));
	searches.push(make_search(new Date("March 4, 2010 12:00"), new Date("March 4, 2010 13:00"), 2, [item_every_weekday, item_every_day]));
	searches.push(make_search(new Date("April 7, 2010 12:00"), new Date("April 7, 2010 13:00"), 4 ,[item_every_1st_wednsday_of_month, item_every_wednsday, item_every_weekday, item_every_day]));
	searches.push(make_search(new Date("April 14, 2010 12:00"), new Date("April 14, 2010 13:00"), 3, [item_every_wednsday, item_every_weekday, item_every_day]));

	for( i in searches)
	{
		var current_search_desc = searches[i];
		var search_count = i + 1;
		var results = Widget.PIM.getCalendarItems(current_search_desc.criterion.eventStartTime, current_search_desc.criterion.eventEndTime);
		if (results.length != current_search_desc.numResults)
		{
			cleanup_added_items();
			verify(results.length == current_search_desc.numResults);
		}

		if (current_search_desc.results)
		{
			for (i in results)
			{
				var found = false;
				for (j in current_search_desc.results)
				{
					if (current_search_desc.results[j].carlendarItemId == results[i].carlendarItemId)
					{
						found = true;
						break;
					}
				}
				if (!found)
				{
					cleanup_added_items();
					verify(found);
				}
			}
		}
	}
	cleanup_added_items();
}

test("Test Searching for CalendarItem - dates - using getCalendarItems 2")
	language ecmascript;
	require success "Test object existence";
{
	var added_items = new Array;
	cleanup_added_items = function()
	{
		remove_calendar_items(added_items);
	}

	var item_every_wednsday = add_calendar_item("every wednsday", "club", new Date("March 3, 2010 22:00 GMT-0600"), new Date("March 3, 2010 23:00 GMT-0600"), false, null, Widget.PIM.EventRecurrenceTypes.WEEKLY_ON_DAY);
	var item_every_31st_day_of_the_month  = add_calendar_item("every 31", "test", new Date("March 31, 2010 22:00"), new Date("March 31,, 2010 23:00"), false, null, Widget.PIM.EventRecurrenceTypes.MONTHLY_ON_DAY_COUNT);
	added_items.push(item_every_wednsday);
	added_items.push(item_every_31st_day_of_the_month);
	make_search = function(start_date, end_date, numResults, results )
	{
		var item = new Widget.PIM.CalendarItem;
		if (!item)
		{
			cleanup_added_items();
			verify(item);
		}
		item.eventStartTime = start_date;
		item.eventEndTime = end_date;

		var object = {criterion:item, numResults:numResults, results:results};
		return object;
	}
	var searches = new Array;
	searches.push(make_search(new Date("March 10, 2010 22:00 GMT-0600"), new Date("March 10, 2010 23:00 GMT-0600"), 1));
	searches.push(make_search(new Date("April 30, 2010 20:00"), new Date("April 30, 2010 23:30"), 0));
	searches.push(make_search(new Date("May 31, 2010 20:00"), new Date("May 31, 2010 23:30"), 1));

	for( i in searches)
	{
		var search_number = i + 1;
		var current_search_desc = searches[i];
		var results = Widget.PIM.getCalendarItems(current_search_desc.criterion.eventStartTime, current_search_desc.criterion.eventEndTime);
		if (results.length != current_search_desc.numResults)
		{
			cleanup_added_items();
			verify(results.length == current_search_desc.numResults);
		}

		if (current_search_desc.results)
		{
			for (i in results)
			{
				var found = false;
				for (j in current_search_desc.results)
				{
					if (current_search_desc.results[j].carlendarItemId == results[i].carlendarItemId)
					{
						found = true;
						break;
					}
				}
				if (!found)
				{
					cleanup_added_items();
					verify(found);
				}
			}
		}
	}
	cleanup_added_items();
}

test("Test on onCalendarItemAlert")
	language ecmascript;
	async;
	require success "Test object existence";
{
	calendar_item = new Widget.PIM.CalendarItem;
	calendar_item.eventName = "Event that will happen in 1 second"
	var start_time = new Date;
	start_time.setTime(start_time.getTime() + 1000);
	calendar_item.eventStartTime = start_time;
	var item_id = Widget.PIM.addCalendarItem(calendar_item);
	var timeout_id = setTimeout( function()
	{
		ST_failed("Timed out", "", "");
		Widget.PIM.onCalendarItemAlert = null;
		Widget.PIM.deleteCalendarItem(item_id);
	}, 2000);

	Widget.PIM.onCalendarItemAlert = function(calendar_item)
	{
		ST_passed();
		Widget.PIM.onCalendarItemAlert = null;
		clearTimeout(timeout_id);
		Widget.PIM.deleteCalendarItem(item_id);
	}
}
