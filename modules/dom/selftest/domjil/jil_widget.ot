/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "DOM.JIL.Widget";

require GADGET_SUPPORT;
require DOM_JIL_API_SUPPORT;
include "modules/security_manager/include/security_manager.h";
include "modules/gadgets/gadget_selftest_utils.h";

global
{
	OpSecurityManager::PrivilegedBlock disable_security;
	GadgetSelftestUtils g_utils;
}


exit
{
	g_utils.UnloadGadget();
}

table dummy1(const char *) filelist "widget_1.1.x_test_wgt" recursively;
table dummy2(const char *) filelist "widget_1.2_test_wgt" recursively;

test("Load Widget 1.1.x test gadget")
	file zip_file "widget_1.1.x_test_wgt/config.xml";
	async;
{
	OP_GADGET_STATUS status = g_utils.LoadGadgetForSelftest(zip_file, URL_GADGET_INSTALL_CONTENT);

	if (OpStatus::IsError(status))
		ST_failed("Unable to install test widget, status: %d", status);
	else if (status != OpGadgetStatus::OK_SIGNATURE_VERIFICATION_IN_PROGRESS)
		ST_passed();
}

test("Test existance ver 1.1.x")
	language ecmascript;
	require success "Load Widget 1.1.x test gadget";
{
	verify(Widget);
}

test("Test set/preferenceForKey ver 1.1.x")
	language ecmascript;
	require success "Test existance ver 1.1.x";
{
	verify(Widget);
	Widget.setPreferenceForKey("key1", "value1");
	Widget.setPreferenceForKey("key2", "value2");
	verify(Widget.preferenceForKey("key1") == "value1");
	verify(Widget.preferenceForKey("key2") == "value2");

	Widget.setPreferenceForKey("key1", null);
	verify(Widget.preferenceForKey("key1") === null);
}

test("Unload 1.1.x test gadget")
	require success "Load Widget 1.1.x test gadget";
{
	g_utils.UnloadGadget();
}


test("Load Widget 1.2 test gadget")
	file zip_file "widget_1.2_test_wgt/config.xml";
	async;
{
	OP_GADGET_STATUS status = g_utils.LoadGadgetForSelftest(zip_file, URL_GADGET_INSTALL_CONTENT);

	if (OpStatus::IsError(status))
		ST_failed("Unable to install test widget, status: %d", status);
	else if (status != OpGadgetStatus::OK_SIGNATURE_VERIFICATION_IN_PROGRESS)
		ST_passed();
}

test("Test 1.2 existance")
	language ecmascript;
	require success "Load Widget 1.2 test gadget";
{
	verify(Widget);
}

test("Test 1.2 set/getPreferenceForKey")
	language ecmascript;
	require success "Load Widget 1.2 test gadget";
{
	verify(Widget);
	Widget.setPreferenceForKey("value1", "key1");
	Widget.setPreferenceForKey("value2", "key2");
	verify(Widget.preferenceForKey("key1") == "value1");
	verify(Widget.preferenceForKey("key2") == "value2");

	Widget.setPreferenceForKey(null, "key1");
	verify(Widget.preferenceForKey("key1") === null);
}

test("Test default config.xml preferences ver 1.2")
	language ecmascript;
	require success "Test 1.2 set/getPreferenceForKey";
{
	verify(Widget);
	verify(Widget.preferenceForKey("default_rw") == "config.xml");

	Widget.setPreferenceForKey("new_value", "default_rw");
	verify(Widget.preferenceForKey("default_rw") == "new_value");

	Widget.setPreferenceForKey(null, "default_rw");
}

test("Test default read-only config.xml preferences ver 1.2")
	language ecmascript;
	require success "Test default config.xml preferences ver 1.2";
{
	verify(Widget);
	verify(Widget.preferenceForKey("default_ro") == "config.xml - readonly");

	try {
		Widget.setPreferenceForKey("new_value", "default_ro");
		verify(false);
	}
	catch(e)
	{
		verify(e instanceof Widget.Exception);
		verify(e.type == Widget.ExceptionTypes.UNSUPPORTED);
		verify(Widget.preferenceForKey("default_ro") == "config.xml - readonly");
	}
}
