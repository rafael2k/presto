/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "DOM.JIL.DataNetworkInfo";

require GADGET_SUPPORT;
require DOM_JIL_API_SUPPORT;
include "modules/security_manager/include/security_manager.h";
include "modules/gadgets/gadget_selftest_utils.h";

global
{
	OpSecurityManager::PrivilegedBlock disable_security;
	GadgetSelftestUtils g_utils;
}

exit
{
	g_utils.UnloadGadget();
}

table dummy1(const char *) filelist "datanetworkinfo_test_wgt" recursively;

test("Load DataNetworkInfo test gadget")
	file zip_file "datanetworkinfo_test_wgt/config.xml";
	async;
{
	OP_GADGET_STATUS status = g_utils.LoadGadgetForSelftest(zip_file, URL_GADGET_INSTALL_CONTENT);

	if (OpStatus::IsError(status))
		ST_failed("Unable to install test widget, status: %d", status);
	else if (status != OpGadgetStatus::OK_SIGNATURE_VERIFICATION_IN_PROGRESS)
		ST_passed();
}

test("Test existance of DataNetworkInfo")
	language ecmascript;
	require success "Load DataNetworkInfo test gadget";
{
	verify(Widget);
	verify(Widget.Device);
	verify(Widget.Device.DataNetworkInfo);

	verify(Widget.Device.DataNetworkInfo.DataNetworkConnectionTypes);
	verify(Widget.Device.DataNetworkInfo.DataNetworkConnectionTypes.BLUETOOTH);
	verify(Widget.Device.DataNetworkInfo.DataNetworkConnectionTypes.EDGE);
	verify(Widget.Device.DataNetworkInfo.DataNetworkConnectionTypes.EVDO);
	verify(Widget.Device.DataNetworkInfo.DataNetworkConnectionTypes.GPRS);
	verify(Widget.Device.DataNetworkInfo.DataNetworkConnectionTypes.IRDA);
	verify(Widget.Device.DataNetworkInfo.DataNetworkConnectionTypes.LTE);
	verify(Widget.Device.DataNetworkInfo.DataNetworkConnectionTypes.ONEXRTT);
	verify(Widget.Device.DataNetworkInfo.DataNetworkConnectionTypes.WIFI);
}

test("getting values")
	language ecmascript;
	require success "Test existance of DataNetworkInfo";
{
	var isDataNetworkConnected = Widget.Device.DataNetworkInfo.isDataNetworkConnected;
	var networkConnectionType = Widget.Device.DataNetworkInfo.networkConnectionType;
	verify(typeof(isDataNetworkConnected) == "boolean");
	verify(networkConnectionType instanceof Array);

	for (i in networkConnectionType)
	{
		var connName = Widget.Device.DataNetworkInfo.getNetworkConnectionName(networkConnectionType[i]);
		verify(typeof(connName) == "string");
	}
}

test("Test existence of DataNetworkConnectionTypes")
	language ecmascript;
	require success "Test existance of DataNetworkInfo";
{
	var connection_types = Widget.Device.DataNetworkInfo.DataNetworkConnectionTypes;
	verify(connection_types);

	verify(typeof(connection_types.BLUETOOTH) == "string");
	verify(typeof(connection_types.EDGE) == "string");
	verify(typeof(connection_types.EVDO) == "string");
	verify(typeof(connection_types.GPRS) == "string");
	verify(typeof(connection_types.IRDA) == "string");
	verify(typeof(connection_types.LTE) == "string");
	verify(typeof(connection_types.ONEXRTT) == "string");
	verify(typeof(connection_types.WIFI) == "string");
}
