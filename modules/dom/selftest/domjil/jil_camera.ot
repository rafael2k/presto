/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "DOM.JIL.Camera";

require GADGET_SUPPORT;
require DOM_JIL_API_SUPPORT;
include "modules/device_api/jil/JILFSMgr.h";
include "modules/security_manager/include/security_manager.h";
include "modules/gadgets/gadget_selftest_utils.h";

global
{
	OpSecurityManager::PrivilegedBlock disable_security;

	OpAutoVector<OpString> g_current_virt_roots;
	OpString g_selftest_mount_point;

	GadgetSelftestUtils g_utils;
}

exit
{
	g_utils.UnloadGadget();
	g_DAPI_jil_fs_mgr->RemoveMapping(g_selftest_mount_point, NULL, NULL);
	for (UINT32 i = 0; i < g_current_virt_roots.GetCount(); ++i)
		g_DAPI_jil_fs_mgr->SetActive(g_current_virt_roots.Get(i)->CStr(), TRUE);
}

table dummy1(const char *) filelist "camera_test_wgt" recursively;

test("Load Camera test gadget")
	file zip_file "camera_test_wgt/config.xml";
	async;
{
	OP_GADGET_STATUS status = g_utils.LoadGadgetForSelftest(zip_file, URL_GADGET_INSTALL_CONTENT);

	if (OpStatus::IsError(status))
		ST_failed("Unable to install test widget, status: %d", status);
	else if (status != OpGadgetStatus::OK_SIGNATURE_VERIFICATION_IN_PROGRESS)
		ST_passed();
}

test("Setup JIL FS mapping configuration")
	file uni mount_point "calendar_test_wgt";
{
	verify_success(g_DAPI_jil_fs_mgr->GetAvailableVirtualDirs(&g_current_virt_roots));
	for (UINT32 i = 0; i < g_current_virt_roots.GetCount(); ++i)
	{
		verify_success(g_DAPI_jil_fs_mgr->SetActive(g_current_virt_roots.Get(i)->CStr(), FALSE));
	}

	verify_success(g_selftest_mount_point.Set(mount_point));

	verify_success(g_DAPI_jil_fs_mgr->AddMapping(mount_point, UNI_L(PATHSEP), UNI_L("/selftest"), TRUE));
}

test("Test existance of Camera")
	language ecmascript;
	require success "Load Camera test gadget";
{
	verify(Widget);
	verify(Widget.Multimedia);
	verify(Widget.Multimedia.Camera);
}

test("Set Window")
	language ecmascript;
	require success "Test existance of Camera";
{
	var test_object = document.getElementById("test_object");
	var test_embed = document.getElementById("test_embed");
	var test_div = document.getElementById("test_div");
	Widget.Multimedia.Camera.setWindow(test_object);
	try
	{
		Widget.Multimedia.Camera.setWindow(test_embed);
		verify(false);
	}
	catch (err)
	{
		verify(err.type == Widget.ExceptionTypes.INVALID_PARAMETER);
	}

	try
	{
		Widget.Multimedia.Camera.setWindow(test_div);
		verify(false);
	}
	catch (err)
	{
		verify(err.type == Widget.ExceptionTypes.INVALID_PARAMETER);
	}
	Widget.Multimedia.Camera.setWindow(null);
}

test("Capture image - window set")
	language ecmascript;
	require success "Test existance of Camera";
	async;
{
	var test_object = document.getElementById("test_object");
	Widget.Multimedia.Camera.setWindow(test_object);
	var timed_out = false;
	var timeout_id = setTimeout( function()
	{
		timed_out = true;
		ST_failed("","","");
		Widget.Multimedia.Camera.onCameraCaptured = null;
		Widget.Multimedia.Camera.setWindow(null);
	}, 2000);

	Widget.Multimedia.Camera.onCameraCaptured = function(path)
	{
		if (!timed_out)
		{
			ST_passed();
			clearTimeout(timeout_id);
			Widget.Multimedia.Camera.onCameraCaptured = null;
			Widget.Multimedia.Camera.setWindow(null);
		}
	}
	Widget.Multimedia.Camera.captureImage("/selftest", false);
}

test("Capture image - window not set")
	language ecmascript;
	require success "Test existance of Camera";
	async;
{
	var test_object = document.getElementById("test_object");
	Widget.Multimedia.Camera.setWindow(null);
	var timed_out = false;
	var timeout_id = setTimeout( function()
	{
		timed_out = true;
		ST_failed("","","");
		Widget.Multimedia.Camera.onCameraCaptured = null;
	}, 2000);

	Widget.Multimedia.Camera.onCameraCaptured = function(path)
	{
		if (!timed_out)
		{
			ST_passed();
			clearTimeout(timeout_id);
			Widget.Multimedia.Camera.onCameraCaptured = null;
		}
	}
	Widget.Multimedia.Camera.captureImage("/selftest/test_image.jpg", false);
}

test("Capture image + changing set window - crasher")
	language ecmascript;
	require success "Test existance of Camera";
	async;
{
	var test_object = document.getElementById("test_object");
	Widget.Multimedia.Camera.setWindow(test_object);
	var timed_out = false;
	var timeout_id = setTimeout( function()
	{
		timed_out = true;
		ST_failed("Timed out","","");
		Widget.Multimedia.Camera.onCameraCaptured = null;
	}, 2000);

	Widget.Multimedia.Camera.onCameraCaptured = function(path)
	{
		if (!timed_out)
		{
			ST_passed();
			clearTimeout(timeout_id);
			Widget.Multimedia.Camera.onCameraCaptured = null;
		}
	}
	Widget.Multimedia.Camera.captureImage("/selftest/test_image.jpg", false);
	Widget.Multimedia.Camera.setWindow(null);
	opera.collect();
}

