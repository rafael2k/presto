group "DOM.JIL.Messaging.MessageTypes";

require GADGET_SUPPORT;
require DOM_JIL_API_SUPPORT;
include "modules/security_manager/include/security_manager.h";
include "modules/gadgets/gadget_selftest_utils.h";

global
{
	OpSecurityManager::PrivilegedBlock disable_security;
	GadgetSelftestUtils g_utils;
}

exit
{
	g_utils.UnloadGadget();
}

table dummy1(const char *) filelist "messaging_test_wgt" recursively;

test("Load Messaging test widget")
	file zip_file "messaging_test_wgt/config.xml";
	async;
{
	OP_GADGET_STATUS status = g_utils.LoadGadgetForSelftest(zip_file, URL_GADGET_INSTALL_CONTENT);

	if (OpStatus::IsError(status))
		ST_failed("Unable to install test widget, status: %d", status);
	else if (status != OpGadgetStatus::OK_SIGNATURE_VERIFICATION_IN_PROGRESS)
		ST_passed();
}

test("Test Messaging existence")
	language ecmascript;
	require success "Load Messaging test widget";
{
	verify(Widget);
	verify(Widget.Messaging);
}

test("Test Messaging.MessageTypes properties")
	language ecmascript;
	require success "Test Messaging existence";
{
	verify(Widget.Messaging.MessageTypes);
	verify(Widget.Messaging.MessageTypes.EmailMessage == "email");
	verify(Widget.Messaging.MessageTypes.MMSMessage == "mms");
	verify(Widget.Messaging.MessageTypes.SMSMessage == "sms");
	// Above string values are not inside JIL specification,
	// but are implementation specific.
}

