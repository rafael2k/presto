/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "DOM.JIL.AccountInfo";

require GADGET_SUPPORT;
require DOM_JIL_API_SUPPORT;
include "modules/security_manager/include/security_manager.h";
include "modules/gadgets/gadget_selftest_utils.h";

global
{
	OpSecurityManager::PrivilegedBlock disable_security;
	GadgetSelftestUtils g_utils;
}

exit
{
	g_utils.UnloadGadget();
}

table dummy1(const char *) filelist "accountinfo_test_wgt" recursively;

test("Load AccountInfo test gadget")
	file zip_file "accountinfo_test_wgt/config.xml";
	async;
{
	OP_GADGET_STATUS status = g_utils.LoadGadgetForSelftest(zip_file, URL_GADGET_INSTALL_CONTENT);

	if (OpStatus::IsError(status))
		ST_failed("Unable to install test widget, status: %d", status);
	else if (status != OpGadgetStatus::OK_SIGNATURE_VERIFICATION_IN_PROGRESS)
		ST_passed();
}

test("Test existance of AccountInfo")
	language ecmascript;
	require success "Load AccountInfo test gadget";
{
	verify(Widget);
	verify(Widget.Device);
	verify(Widget.Device.AccountInfo);
}

test("getting values")
	language ecmascript;
	require success "Test existance of AccountInfo";
{
	var phoneMSISDN = Widget.Device.AccountInfo.phoneMSISDN;
	var phoneOperatorName = Widget.Device.AccountInfo.phoneOperatorName;
	var phoneUserUniqueId = Widget.Device.AccountInfo.phoneUserUniqueId;
	var userAccountBalance = Widget.Device.AccountInfo.userAccountBalance;
	var userSubscriptionType = Widget.Device.AccountInfo.userSubscriptionType;
	verify(typeof(phoneMSISDN) == "string");
	verify(typeof(phoneOperatorName) == "string");
	verify(typeof(phoneUserUniqueId) == "string");
	verify(typeof(userAccountBalance) == "number");
	verify(typeof(userSubscriptionType) == "string");
}

test("read only properties")
	language ecmascript;
	require success "getting values";
{
	var phoneMSISDN1 = Widget.Device.AccountInfo.phoneMSISDN;
	var phoneOperatorName1 = Widget.Device.AccountInfo.phoneOperatorName;
	var phoneUserUniqueId1 = Widget.Device.AccountInfo.phoneUserUniqueId;
	var userAccountBalance1 = Widget.Device.AccountInfo.userAccountBalance;
	var userSubscriptionType1 = Widget.Device.AccountInfo.userSubscriptionType;

	Widget.Device.AccountInfo.phoneMSISDN = "a";
	Widget.Device.AccountInfo.phoneOperatorName = "b";
	Widget.Device.AccountInfo.phoneUserUniqueId = "c";
	Widget.Device.AccountInfo.userAccountBalance = 500;
	Widget.Device.AccountInfo.userSubscriptionType = "c";

	var phoneMSISDN2 = Widget.Device.AccountInfo.phoneMSISDN;
	var phoneOperatorName2 = Widget.Device.AccountInfo.phoneOperatorName;
	var phoneUserUniqueId2 = Widget.Device.AccountInfo.phoneUserUniqueId;
	var userAccountBalance2 = Widget.Device.AccountInfo.userAccountBalance;
	var userSubscriptionType2 = Widget.Device.AccountInfo.userSubscriptionType;

	verify(phoneMSISDN1 == phoneMSISDN2);
	verify(phoneOperatorName1 == phoneOperatorName2);
	verify(phoneUserUniqueId1 == phoneUserUniqueId2);
	verify(userAccountBalance1 == userAccountBalance2);
	verify(userSubscriptionType1 == userSubscriptionType2);
}

