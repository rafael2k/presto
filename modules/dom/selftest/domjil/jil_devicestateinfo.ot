/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2009-2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "DOM.JIL.DeviceStateInfo";

require GADGET_SUPPORT;
require DOM_JIL_API_SUPPORT;
include "modules/security_manager/include/security_manager.h";
include "modules/gadgets/gadget_selftest_utils.h";

global
{
	OpSecurityManager::PrivilegedBlock disable_security;
	GadgetSelftestUtils g_utils;
}

exit
{
	g_utils.UnloadGadget();
}

table dummy1(const char *) filelist "devicestateinfo_test_wgt" recursively;

test("Load DeviceStateInfo test gadget")
	file zip_file "devicestateinfo_test_wgt/config.xml";
	async;
{
	OP_GADGET_STATUS status = g_utils.LoadGadgetForSelftest(zip_file, URL_GADGET_INSTALL_CONTENT);

	if (OpStatus::IsError(status))
		ST_failed("Unable to install test widget, status: %d", status);
	else if (status != OpGadgetStatus::OK_SIGNATURE_VERIFICATION_IN_PROGRESS)
		ST_passed();
}

test("Test DeviceStateInfo existence")
	language ecmascript;
	require success "Load DeviceStateInfo test gadget";
{
	verify(Widget);
	verify(Widget.Device);
	verify(Widget.Device.DeviceStateInfo);

	verify("audioPath" in Widget.Device.DeviceStateInfo);
	verify(typeof Widget.Device.DeviceStateInfo.audioPath == 'string' || typeof Widget.Device.DeviceStateInfo.audioPath == 'undefined');

	verify("availableMemory" in Widget.Device.DeviceStateInfo);
	verify(typeof Widget.Device.DeviceStateInfo.availabeMemory == 'number' || typeof Widget.Device.DeviceStateInfo.availabeMemory == 'undefined');

	verify("backLightOn" in Widget.Device.DeviceStateInfo);
	verify(typeof Widget.Device.DeviceStateInfo.backLightOn == 'boolean' || typeof Widget.Device.DeviceStateInfo.backLightOn == 'undefined');

	verify("keypadLightOn" in Widget.Device.DeviceStateInfo);
	verify(typeof Widget.Device.DeviceStateInfo.keypadLightOn == 'boolean' || typeof Widget.Device.DeviceStateInfo.keypadLightOn == 'undefined');

	verify("language" in Widget.Device.DeviceStateInfo);
	verify(typeof Widget.Device.DeviceStateInfo.language == 'string' || typeof Widget.Device.DeviceStateInfo.language == 'undefined');

	verify("processorUtilizationPercent" in Widget.Device.DeviceStateInfo);
	verify(typeof Widget.Device.DeviceStateInfo.processorUtilizationPercent == 'string' || typeof Widget.Device.DeviceStateInfo.processorUtilizationPercent == 'undefined');
}

test("Test DeviceStateInfo.requestPositionInfo")
	language ecmascript;
	require success "Test DeviceStateInfo existence";
	async;
{
	verify(Widget.Device.DeviceStateInfo.requestPositionInfo);

	var timeout = 20000;
	var timeout_id = setTimeout(function()
	{
		if (timeout_id)
		{
			clearTimeout(timeout_id);
			timeout_id = null;
			ST_failed("Request timed out (" + timeout + "ms timeout)", "", "");
			Widget.Device.DeviceStateInfo.onPositionRetrieved = null;
		}
	}, timeout);

	Widget.Device.DeviceStateInfo.onPositionRetrieved = function(pos_info, method)
	{
		try
		{
			if (timeout_id)
			{
				clearTimeout(timeout_id);
				timeout_id = null;
				if (!pos_info)
					ST_failed("onPositionRetrieved called with no result: " + pos_info, "", "");
				else if (!(pos_info instanceof Widget.Device.PositionInfo))
					ST_failed("onPositionRetrieved called with invalid result type: " + pos_info, "", "");
				else
					ST_passed();
				Widget.Device.DeviceStateInfo.onPositionRetrieved = null;
			}
		}
		catch(e)
		{
			ST_failed("Caught exception in onPositionRetrieved: " + e, "", "");
		}
	}
	Widget.Device.DeviceStateInfo.requestPositionInfo("gps")
}


