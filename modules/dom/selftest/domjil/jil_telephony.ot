/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "DOM.JIL.Telephony";

require GADGET_SUPPORT;
require DOM_JIL_API_SUPPORT;
include "modules/security_manager/include/security_manager.h";
include "modules/gadgets/gadget_selftest_utils.h";

global
{
	OpSecurityManager::PrivilegedBlock disable_security;
	GadgetSelftestUtils g_utils;
}

exit
{
	g_utils.UnloadGadget();
}

table dummy1(const char *) filelist "telephony_test_wgt" recursively;

test("Load Telephony test gadget")
	file zip_file "telephony_test_wgt/config.xml";
	async;
{
	OP_GADGET_STATUS status = g_utils.LoadGadgetForSelftest(zip_file, URL_GADGET_INSTALL_CONTENT);

	if (OpStatus::IsError(status))
		ST_failed("Unable to install test widget, status: %d", status);
	else if (status != OpGadgetStatus::OK_SIGNATURE_VERIFICATION_IN_PROGRESS)
		ST_passed();
}

test("Test existence of Telephony")
	language ecmascript;
	require success "Load Telephony test gadget";
{
	verify(Widget);
	verify(Widget.Telephony);
}

test("Get Telephony properties")
	language ecmascript;
	require success "Test existence of Telephony";
{
	verify(Widget.Telephony.onCallEvent == undefined);
	verify(Widget.Telephony.onCallRecordsFound == undefined);
	verify(typeof Widget.Telephony.deleteAllCallRecords == "function");
	verify(typeof Widget.Telephony.deleteCallRecord == "function");
	verify(typeof Widget.Telephony.findCallRecords == "function");
	verify(typeof Widget.Telephony.getCallRecord == "function");
	verify(typeof Widget.Telephony.getCallRecordCnt == "function");
	verify(typeof Widget.Telephony.initiateVoiceCall == "function");
}

test("Set Telephony properties")
	language ecmascript;
	require success "Get Telephony properties";
{
	Widget.Telephony.onCallEvent = function(type, phone_number){};
	Widget.Telephony.onCallRecordsFound = function(found){};

	verify(Widget.Telephony.onCallEvent != undefined);
	verify(Widget.Telephony.onCallRecordsFound != undefined);

	Widget.Telephony.onCallEvent = null;
	Widget.Telephony.onCallRecordsFound = null;
	verify(Widget.Telephony.onCallEvent == null);
	verify(Widget.Telephony.onCallRecordsFound == null);

	var caught = false;
	try {
		Widget.Telephony.onCallEvent = 9;
	} catch(e) {
		caught = true;
	}
	verify(caught);
	caught = false;
	try {
		Widget.Telephony.onCallRecordsFound = 7;
	} catch(e) {
		caught = true;
	}
	verify(caught);
}

test("Telephony.initiateVoiceCall")
	language ecmascript;
	require success "Test existence of Telephony";
{
	try {
		Widget.Telephony.initiateVoiceCall('1');
	} catch(e) {
		verify(e.message == "Phone application not available");
		verify(e.type == Widget.ExceptionTypes.UNSUPPORTED);
	}
}

test("Telephony.getCallRecordCnt")
	language ecmascript;
	require success "Test existence of Telephony";
{
	var count_outgoing = Widget.Telephony.getCallRecordCnt(Widget.Telephony.CallRecordTypes.OUTGOING);
	var count_received = Widget.Telephony.getCallRecordCnt(Widget.Telephony.CallRecordTypes.RECEIVED);
	var count_missed = Widget.Telephony.getCallRecordCnt(Widget.Telephony.CallRecordTypes.MISSED);
	verify(typeof count_outgoing == "number");
	verify(typeof count_received == "number");
	verify(typeof count_missed == "number");
}

test("Telephony.getCallRecordCnt double read")
	language ecmascript;
	require success "Telephony.getCallRecordCnt";
{
	var count_outgoing = Widget.Telephony.getCallRecordCnt(Widget.Telephony.CallRecordTypes.OUTGOING);
	count_outgoing++;
	var count_outgoing2 = Widget.Telephony.getCallRecordCnt(Widget.Telephony.CallRecordTypes.OUTGOING);
	verify(count_outgoing == count_outgoing2+1);
}

test("Telephony.getCallRecord")
	language ecmascript;
	require success "Test existence of Telephony";
	require USE_DUMMY_OP_TELEPHONY_IMPL;
{
	var call_record = Widget.Telephony.getCallRecord(Widget.Telephony.CallRecordTypes.OUTGOING, 'id0');
	verify(call_record.callRecordAddress == '1');
	verify(call_record.callRecordId == 'id0');
	verify(call_record.callRecordName == 'One');
	verify(call_record.callRecordType == Widget.Telephony.CallRecordTypes.OUTGOING);
	verify(call_record.durationSeconds == 3601);
	verify(typeof call_record.startTime == 'object');
	verify(call_record.startTime instanceof Date);
	verify(call_record instanceof Widget.Telephony.CallRecord);

	var call_record2 = Widget.Telephony.getCallRecord(Widget.Telephony.CallRecordTypes.RECEIVED, 'id4');
	verify(call_record2.callRecordAddress == '2');
	verify(call_record2.callRecordId == 'id4');
	verify(call_record2.callRecordName == 'Two');
	verify(call_record2.callRecordType == Widget.Telephony.CallRecordTypes.RECEIVED);
	verify(call_record2.durationSeconds == 3604);
	verify(typeof call_record2.startTime == 'object');
}

test("Telephony.getCallRecord immutable results")
	language ecmascript;
	require success "Telephony.getCallRecord";
	require USE_DUMMY_OP_TELEPHONY_IMPL;
{
	var call_record = Widget.Telephony.getCallRecord(Widget.Telephony.CallRecordTypes.OUTGOING, 'id0');
	verify(call_record.callRecordAddress == '1');
	verify(call_record.callRecordId == 'id0');
	verify(call_record.callRecordName == 'One');
	verify(call_record.callRecordType == Widget.Telephony.CallRecordTypes.OUTGOING);
	verify(call_record.durationSeconds == 3601);
	verify(typeof call_record.startTime == 'object');

	call_record.callRecordAddress = '9';
	call_record.callRecordId = 'id9';
	call_record.callRecordName = 'Other';
	call_record.callRecordType = Widget.Telephony.CallRecordTypes.MISSED;
	call_record.durationSeconds = 0;
	call_record.startTime = new Date();

	var call_record2 = Widget.Telephony.getCallRecord(Widget.Telephony.CallRecordTypes.OUTGOING, 'id0');
	verify(call_record2.callRecordAddress == '1');
	verify(call_record2.callRecordId == 'id0');
	verify(call_record2.callRecordName == 'One');
	verify(call_record2.callRecordType == Widget.Telephony.CallRecordTypes.OUTGOING);
	verify(call_record2.durationSeconds == 3601);
	verify(typeof call_record2.startTime == 'object');
}

test("Test Telephony.findCallRecords with no callback (CORE-32957) - should not crash")
	language ecmascript;
	require success "Test existence of Telephony";
{
	Widget.Telephony.onCallRecordsFound = null;
	Widget.Telephony.findCallRecords(new Widget.Telephony.CallRecord(), 0, 1);
	Widget.Telephony.findCallRecords(new Widget.Telephony.CallRecord(), 2, 1);
}

test("Telephony.findCallRecords all")
	language ecmascript;
	require success "Test existence of Telephony";
	async;
	require USE_DUMMY_OP_TELEPHONY_IMPL;
{
	var timeoutMs = 10000;
	var timeoutId = setTimeout(function()
	{
		Widget.Telephony.findCallRecords = null;
		ST_failed("Test Telephony.findCallRecords all: Widget.Telephony.onCallEvent was not called in " + timeoutMs + "ms.","","");
	}, timeoutMs);
	var cb = function(found)
	{
		clearTimeout(timeoutId);
		Widget.Telephony.onCallRecordsFound = null;

		for (var i = 0; i < found.length; ++i)
		{
			if (!(found[i] instanceof Widget.Telephony.CallRecord))
			{
				ST_failed("Find result is not an instance of Widget.Telephony.CallRecord: " + found[i]);
				return;
			}
		}

		if (found.length != 4
			|| found[0].callRecordAddress != '1' || found[0].callRecordId != 'id0' || found[0].callRecordName != 'One' || found[0].callRecordType != Widget.Telephony.CallRecordTypes.OUTGOING || found[0].durationSeconds != 3601
			|| found[1].callRecordAddress != '2' || found[1].callRecordId != 'id1' || found[1].callRecordName != 'Two' || found[1].callRecordType != Widget.Telephony.CallRecordTypes.OUTGOING || found[1].durationSeconds != 3602
			|| found[2].callRecordAddress != '3' || found[2].callRecordId != 'id2' || found[2].callRecordName != 'Three' || found[2].callRecordType != Widget.Telephony.CallRecordTypes.OUTGOING || found[2].durationSeconds != 3603
			|| found[3].callRecordAddress != '2' || found[3].callRecordId != 'id4' || found[3].callRecordName != 'Two' || found[3].callRecordType != Widget.Telephony.CallRecordTypes.RECEIVED || found[3].durationSeconds != 3604)
			ST_failed('Telephony.onCallRecordsFound got wrong parameters.', '', '');
		else
			ST_passed();
	}
	Widget.Telephony.onCallRecordsFound = cb;
	to_find = new Widget.Telephony.CallRecord;
	Widget.Telephony.findCallRecords(to_find, 0, 2000); // find all
}

test("Telephony.findCallRecords all regardless of next operations")
	language ecmascript;
	require success "Test existence of Telephony";
	async;
	require USE_DUMMY_OP_TELEPHONY_IMPL;
{
	var timeoutMs = 10000;
	var timeoutId = setTimeout(function()
	{
		Widget.Telephony.findCallRecords = null;
		ST_failed("Test Telephony.findCallRecords all: Widget.Telephony.onCallEvent was not called in " + timeoutMs + "ms.","","");
	}, timeoutMs);
	var cb = function(found)
	{
		clearTimeout(timeoutId);
		Widget.Telephony.onCallRecordsFound = null;
		if (found.length != 4
			|| found[0].callRecordAddress != '1' || found[0].callRecordId != 'id0' || found[0].callRecordName != 'One' || found[0].callRecordType != Widget.Telephony.CallRecordTypes.OUTGOING || found[0].durationSeconds != 3601
			|| found[1].callRecordAddress != '2' || found[1].callRecordId != 'id1' || found[1].callRecordName != 'Two' || found[1].callRecordType != Widget.Telephony.CallRecordTypes.OUTGOING || found[1].durationSeconds != 3602
			|| found[2].callRecordAddress != '3' || found[2].callRecordId != 'id2' || found[2].callRecordName != 'Three' || found[2].callRecordType != Widget.Telephony.CallRecordTypes.OUTGOING || found[2].durationSeconds != 3603
			|| found[3].callRecordAddress != '2' || found[3].callRecordId != 'id4' || found[3].callRecordName != 'Two' || found[3].callRecordType != Widget.Telephony.CallRecordTypes.RECEIVED || found[3].durationSeconds != 3604)
			ST_failed('Telephony.onCallRecordsFound got wrong parameters.', '', '');
		else
			ST_passed();
	}
	Widget.Telephony.onCallRecordsFound = cb;
	to_find = new Widget.Telephony.CallRecord;
	Widget.Telephony.findCallRecords(to_find, 0, 2000); // find all
	to_find.callRecordName = 'One'; // this should have no meaning for findCallRecords
}

test("Telephony.findCallRecords some")
	language ecmascript;
	require success "Telephony.findCallRecords all";
	async;
	require USE_DUMMY_OP_TELEPHONY_IMPL;
{
	var timeoutMs = 10000;
	var timeoutId = setTimeout(function()
	{
		Widget.Telephony.findCallRecords = null;
		ST_failed("Test Telephony.findCallRecords some: Widget.Telephony.onCallEvent was not called in " + timeoutMs + "ms.","","");
	}, timeoutMs);
	var cb = function(found)
	{
		clearTimeout(timeoutId);
		Widget.Telephony.onCallRecordsFound = null;
		if (found.length != 2
			|| found[0].callRecordAddress != '2' || found[0].callRecordName != 'Two'
			|| found[1].callRecordAddress != '2' || found[1].callRecordName != 'Two')
			ST_failed('Telephony.onCallRecordsFound got wrong parameters.', '', '');
		else
			ST_passed();
	}
	Widget.Telephony.onCallRecordsFound = cb;
	to_find = new Widget.Telephony.CallRecord;
	to_find.callRecordName = 'Two';
	Widget.Telephony.findCallRecords(to_find, 0, 2000);
}

test("Telephony.findCallRecords one")
	language ecmascript;
	require success "Telephony.findCallRecords all";
	async;
	require USE_DUMMY_OP_TELEPHONY_IMPL;
{
	var timeoutMs = 10000;
	var timeoutId = setTimeout(function()
	{
		Widget.Telephony.findCallRecords = null;
		ST_failed("Test Telephony.findCallRecords one: Widget.Telephony.onCallEvent was not called in " + timeoutMs + "ms.","","");
	}, timeoutMs);
	var cb = function(found)
	{
		clearTimeout(timeoutId);
		Widget.Telephony.onCallRecordsFound = null;
		if (found.length != 1 || found[0].callRecordAddress != '2' || found[0].callRecordName != 'Two')
			ST_failed('Telephony.onCallRecordsFound got wrong parameters.', '', '');
		else
			ST_passed();
	}
	Widget.Telephony.onCallRecordsFound = cb;
	to_find = new Widget.Telephony.CallRecord;
	to_find.callRecordName = 'Two';
	Widget.Telephony.findCallRecords(to_find, 0, 0);
}

test("Telephony.findCallRecords none")
	language ecmascript;
	require success "Telephony.findCallRecords all";
	async;
	require USE_DUMMY_OP_TELEPHONY_IMPL;
{
	var timeoutMs = 10000;
	var timeoutId = setTimeout(function()
	{
		Widget.Telephony.findCallRecords = null;
		ST_failed("Test Telephony.findCallRecords all: Widget.Telephony.onCallEvent was not called in " + timeoutMs + "ms.","","");
	}, timeoutMs);
	var cb = function(found)
	{
		clearTimeout(timeoutId);
		Widget.Telephony.onCallRecordsFound = null;
		if (found.length != 0)
			ST_failed('Telephony.onCallRecordsFound parameter should have zero length.', '', '');
		else
			ST_passed();
	}
	Widget.Telephony.onCallRecordsFound = cb;
	to_find = new Widget.Telephony.CallRecord;
	to_find.callRecordName = 'wrong';
	Widget.Telephony.findCallRecords(to_find, 0, 2000);
}

test("Telephony.findCallRecords OUTGOING")
	language ecmascript;
	require success "Telephony.findCallRecords all";
	async;
	require USE_DUMMY_OP_TELEPHONY_IMPL;
{
	var timeoutMs = 10000;
	var timeoutId = setTimeout(function()
	{
		Widget.Telephony.findCallRecords = null;
		ST_failed("Test Telephony.findCallRecords OUTGOING: Widget.Telephony.onCallEvent was not called in " + timeoutMs + "ms.","","");
	}, timeoutMs);
	var cb = function(found)
	{
		clearTimeout(timeoutId);
		Widget.Telephony.onCallRecordsFound = null;
		if (found.length != 3
			|| found[0].callRecordType != Widget.Telephony.CallRecordTypes.OUTGOING
			|| found[1].callRecordType != Widget.Telephony.CallRecordTypes.OUTGOING
			|| found[2].callRecordType != Widget.Telephony.CallRecordTypes.OUTGOING)
			ST_failed('Telephony.onCallRecordsFound got wrong parameters.', '', '');
		else
			ST_passed();
	}
	Widget.Telephony.onCallRecordsFound = cb;
	to_find = new Widget.Telephony.CallRecord;
	to_find.callRecordType = Widget.Telephony.CallRecordTypes.OUTGOING;
	Widget.Telephony.findCallRecords(to_find, 0, 2000);
}

test("Telephony.findCallRecords with startTime and durationSeconds")
	language ecmascript;
	require success "Telephony.findCallRecords all";
	async;
	require USE_DUMMY_OP_TELEPHONY_IMPL;
{
	var two_minutes_ago = new Date();
	two_minutes_ago.setMinutes(two_minutes_ago.getMinutes()-2);
	var timeoutMs = 10000;
	var timeoutId = setTimeout(function()
	{
		Widget.Telephony.findCallRecords = null;
		ST_failed("Test Telephony.findCallRecords with startTime: Widget.Telephony.onCallEvent was not called in " + timeoutMs + "ms.","","");
	}, timeoutMs);
	var cb = function(found)
	{
		clearTimeout(timeoutId);
		Widget.Telephony.onCallRecordsFound = null;
		if (found.length != 3)
			ST_failed('Telephony.onCallRecordsFound got wrong parameters.', '', '');
		else
			ST_passed();
	}
	Widget.Telephony.onCallRecordsFound = cb;
	to_find = new Widget.Telephony.CallRecord;
	to_find.callRecordType = Widget.Telephony.CallRecordTypes.OUTGOING;
	to_find.startTime = two_minutes_ago;
	to_find.durationSeconds = 3 * 60 * 60;
	Widget.Telephony.findCallRecords(to_find, 0, 2000);
}

test("Telephony.deleteCallRecord")
	language ecmascript;
	require success "Test existence of Telephony";
	require success "Telephony.getCallRecordCnt";
	require USE_DUMMY_OP_TELEPHONY_IMPL;
{
	var count_before = Widget.Telephony.getCallRecordCnt(Widget.Telephony.CallRecordTypes.OUTGOING);
	Widget.Telephony.deleteCallRecord(Widget.Telephony.CallRecordTypes.OUTGOING, 'id0');
	var count_after = Widget.Telephony.getCallRecordCnt(Widget.Telephony.CallRecordTypes.OUTGOING);
	if (count_before == 0)
	{
		verify(count_after == 0);
	}
	else
	{
		verify(count_after == count_before - 1);
	}
}

test("Telephony.deleteCallRecord verify deleted")
	language ecmascript;
	require success "Telephony.deleteCallRecord";
	require success "Telephony.getCallRecord";
	require USE_DUMMY_OP_TELEPHONY_IMPL;
{
	var count_before = Widget.Telephony.getCallRecordCnt(Widget.Telephony.CallRecordTypes.OUTGOING);
	var call_record = Widget.Telephony.getCallRecord(Widget.Telephony.CallRecordTypes.OUTGOING, 'id1');
	verify(call_record != null);
	Widget.Telephony.deleteCallRecord(Widget.Telephony.CallRecordTypes.OUTGOING, 'id1');
	var count_after = Widget.Telephony.getCallRecordCnt(Widget.Telephony.CallRecordTypes.OUTGOING);
	if (count_before == 0)
	{
		verify(count_after == 0);
	}
	else
	{
		verify(count_after == count_before - 1);
	}
	var deleted_call_record = null;
	var catched = false;
	try {
		deleted_call_record = Widget.Telephony.getCallRecord(Widget.Telephony.CallRecordTypes.OUTGOING, 'id1');
	} catch(e) {
		verify(e.message == 'Invalid call record id');
		verify(e.type == Widget.ExceptionTypes.INVALID_PARAMETER);
		catched = true;
	}
	verify(deleted_call_record == null);
	verify(catched);
}

test("Telephony.deleteAllCallRecords")
	language ecmascript;
	require success "Test existence of Telephony";
	require success "Telephony.getCallRecordCnt";
{
	var count_before = Widget.Telephony.getCallRecordCnt(Widget.Telephony.CallRecordTypes.OUTGOING);
	Widget.Telephony.deleteAllCallRecords(Widget.Telephony.CallRecordTypes.OUTGOING);
	var count_after = Widget.Telephony.getCallRecordCnt(Widget.Telephony.CallRecordTypes.OUTGOING);
	verify(count_after == 0);
}

test("Telephony.onCallEvent")
	language ecmascript;
	require success "Test existence of Telephony";
	async;
	require USE_DUMMY_OP_TELEPHONY_IMPL;
{
	var timeoutMs = 30000;
	var timeoutId = setTimeout(function()
	{
		Widget.Telephony.onCallEvent = null;
		ST_failed("Test Telephony.onCallEvent: Widget.Telephony.onCallEvent was not called in " + timeoutMs + "ms.","","");
	}, timeoutMs);
	var cb = function(type, number)
	{
		clearTimeout(timeoutId);
		Widget.Telephony.onCallEvent = null;
		if (type == Widget.Telephony.CallRecordTypes.MISSED && number == "0700123123")
			ST_passed();
		else
			ST_failed('Telephony.onCallEvent(' + type + ', ' + nubmer + ')' + 'should have ("MISSED", "0700123123") parameters.', '', '');
	}
	Widget.Telephony.onCallEvent = cb;
}

