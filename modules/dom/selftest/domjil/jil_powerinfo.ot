/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2009-2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "DOM.JIL.PowerInfo";

require GADGET_SUPPORT;
require DOM_JIL_API_SUPPORT;
include "modules/security_manager/include/security_manager.h";
include "modules/gadgets/gadget_selftest_utils.h";
include "modules/dom/selftest/domselftestutils.h";
include "modules/util/opfile/opfile.h";
include "modules/dom/src/domobj.h";
include "modules/dom/src/domjil/utils/jilutils.h";

global
{
	OpSecurityManager::PrivilegedBlock disable_security;
	GadgetSelftestUtils g_utils;
}

exit
{
	g_utils.UnloadGadget();
}

// "Touch" all widget data files so that they are included in the build package
table dummy1(const char *) filelist "powerinfo_test_wgt" recursively;

test("Load PowerInfo test gadget")
	file zip_file "powerinfo_test_wgt/config.xml";
	async;
{
	OP_GADGET_STATUS status = g_utils.LoadGadgetForSelftest(zip_file, URL_GADGET_INSTALL_CONTENT);

	if (OpStatus::IsError(status))
		ST_failed("Unable to install test widget, status: %d", status);
	else if (status != OpGadgetStatus::OK_SIGNATURE_VERIFICATION_IN_PROGRESS)
		ST_passed();
}

test("Test PowerInfo existence")
	language ecmascript;
	require success "Load PowerInfo test gadget";
{
	verify(Widget);
	verify(Widget.Device);
	verify(Widget.Device.PowerInfo);
}

test("Test PowerInfo properties")
	language ecmascript;
	require success "Test PowerInfo existence";
{
	verify("isCharging" in Widget.Device.PowerInfo);
	verify("percentRemaining" in Widget.Device.PowerInfo);
	verify("onChargeLevelChange" in Widget.Device.PowerInfo);
	verify("onChargeStateChange" in Widget.Device.PowerInfo);
	verify("onLowBattery" in Widget.Device.PowerInfo);

	var isCharging = Widget.Device.PowerInfo.isCharging;
	var percentRemaining = Widget.Device.PowerInfo.percentRemaining;
	verify(typeof(isCharging) == "boolean");
	verify(typeof(percentRemaining) == "number");
	verify(percentRemaining <= 100);
	verify(percentRemaining >= 0);

	Widget.Device.PowerInfo.isCharging = !isCharging;
	verify(Widget.Device.PowerInfo.isCharging == isCharging); // testing for readonly-ness
	Widget.Device.PowerInfo.percentRemaining = percentRemaining / 2;
	verify(Widget.Device.PowerInfo.percentRemaining == percentRemaining); // testing for readonly-ness
}

