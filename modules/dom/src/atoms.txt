# This file is used to generate opatom.h and opatomdata.cpp.
#
# Empty lines and lines starting with '#' are ignored (and stripped
# the next time this file is modified by the script that reads it.)
#
# The syntax is
#
#  atom
#
# or
#
#  atom = [datum, datum, ...]
#
# where 'datum' could be a CSS_PROPERTY_* or ATTR_* the atom can be
# translated into.
#
# Atoms can be conditional by appending {CONDITION} to the line that
# defines the atom:
#
#   atom {ifdef FOO_SUPPORT}
#
# or
#
#  atom = [datum, datum, ...] {ifdef FOO_SUPPORT}
#
# The CONDITION can be anything that fits behind the # in a pre-
# processor directive.
#
# The entries in this file are ordered in ASCII lexicographic order,
# but feel free to add new entries at the top; the script will fix
# the order for you.

AppleDashboardRegion = [CSS_PROPERTY__apple_dashboard_region]
MIMEType {ifdef DOM_JIL_API_SUPPORT}
Multimedia {ifdef DOM_JIL_API_SUPPORT}
OBorderImage = [CSS_PROPERTY__o_border_image]
OFocusOpacity = [CSS_PROPERTY__o_focus_opacity] {ifdef CSS_MINI_EXTENSIONS}
OLink = [CSS_PROPERTY__o_link]
OLinkSource = [CSS_PROPERTY__o_link_source]
OMiniFold = [CSS_PROPERTY__o_mini_fold] {ifdef CSS_MINI_EXTENSIONS}
OObjectFit = [CSS_PROPERTY__o_object_fit]
OObjectPosition = [CSS_PROPERTY__o_object_position]
OTabSize = [CSS_PROPERTY__o_tab_size]
OTableBaseline = [CSS_PROPERTY__o_table_baseline]
OTransform = [CSS_PROPERTY_transform] {ifdef CSS_TRANSFORMS}
OTransformOrigin = [CSS_PROPERTY_transform_origin] {ifdef CSS_TRANSFORMS}
OTransition = [CSS_PROPERTY_transition] {ifdef CSS_TRANSITIONS}
OTransitionDelay = [CSS_PROPERTY_transition_delay] {ifdef CSS_TRANSITIONS}
OTransitionDuration = [CSS_PROPERTY_transition_duration] {ifdef CSS_TRANSITIONS}
OTransitionProperty = [CSS_PROPERTY_transition_property] {ifdef CSS_TRANSITIONS}
OTransitionTimingFunction = [CSS_PROPERTY_transition_timing_function] {ifdef CSS_TRANSITIONS}
URL
WapAccesskey = [CSS_PROPERTY__wap_accesskey]
WapInputFormat = [CSS_PROPERTY__wap_input_format]
WapInputRequired = [CSS_PROPERTY__wap_input_required]
WapMarqueeDir = [CSS_PROPERTY__wap_marquee_dir]
WapMarqueeLoop = [CSS_PROPERTY__wap_marquee_loop]
WapMarqueeSpeed = [CSS_PROPERTY__wap_marquee_speed]
WapMarqueeStyle = [CSS_PROPERTY__wap_marquee_style]
WebkitBackgroundSize = [CSS_PROPERTY_background_size]
WebkitBorderBottomLeftRadius = [CSS_PROPERTY_border_bottom_left_radius]
WebkitBorderBottomRightRadius = [CSS_PROPERTY_border_bottom_right_radius]
WebkitBorderRadius = [CSS_PROPERTY_border_radius]
WebkitBorderTopLeftRadius = [CSS_PROPERTY_border_top_left_radius]
WebkitBorderTopRightRadius = [CSS_PROPERTY_border_top_right_radius]
WebkitBoxAlign
WebkitBoxDirection
WebkitBoxFlex
WebkitBoxLines
WebkitBoxOrdinalGroup
WebkitBoxOrient
WebkitBoxPack
WebkitBoxShadow = [CSS_PROPERTY_box_shadow]
WebkitTransform = [CSS_PROPERTY_transform] {ifdef CSS_TRANSFORMS}
WebkitTransformOrigin = [CSS_PROPERTY_transform_origin] {ifdef CSS_TRANSFORMS}
WebkitTransition = [CSS_PROPERTY_transition] {ifdef CSS_TRANSITIONS}
WebkitTransitionDelay = [CSS_PROPERTY_transition_delay] {ifdef CSS_TRANSITIONS}
WebkitTransitionDuration = [CSS_PROPERTY_transition_duration] {ifdef CSS_TRANSITIONS}
WebkitTransitionProperty = [CSS_PROPERTY_transition_property] {ifdef CSS_TRANSITIONS}
WebkitTransitionTimingFunction = [CSS_PROPERTY_transition_timing_function] {ifdef CSS_TRANSITIONS}
a {if defined SVG_DOM || defined CSS_TRANSFORMS}
aLink = [ATTR_ALINK]
abbr = [ATTR_ABBR]
accept = [ATTR_ACCEPT]
acceptCharset = [ATTR_ACCEPT_CHARSET]
accessKey = [ATTR_ACCESSKEY]
accountId {ifdef DOM_JIL_API_SUPPORT}
accountName {ifdef DOM_JIL_API_SUPPORT}
accuracy {ifdef DOM_GEOLOCATION_SUPPORT}
action = [ATTR_ACTION]
active {if defined WEBSERVER_SUPPORT || defined GADGET_SUPPORT}
activeCues {ifdef MEDIA_HTML_SUPPORT}
activeElement
addEventListener
address {ifdef DOM_JIL_API_SUPPORT}
addressBookItemId {ifdef DOM_JIL_API_SUPPORT}
alarmDate {ifdef DOM_JIL_API_SUPPORT}
alarmed {ifdef DOM_JIL_API_SUPPORT}
align = [ATTR_ALIGN]
alignContent = [CSS_PROPERTY_align_content]
alignItems = [CSS_PROPERTY_align_items]
alignSelf = [CSS_PROPERTY_align_self]
alignmentBaseline = [Markup::SVGA_ALIGNMENT_BASELINE, CSS_PROPERTY_alignment_baseline] {ifdef SVG_DOM}
alinkColor
all
allFeeds {ifdef WEBFEEDS_BACKEND_SUPPORT}
allow {if defined EXTENSION_SUPPORT && defined URL_FILTER}
alpha {ifdef CANVAS3D_SUPPORT}
alt = [ATTR_ALT]
altKey
alternateURL {ifdef UPNP_SUPPORT}
altitude {ifdef DOM_GEOLOCATION_SUPPORT}
altitudeAccuracy {ifdef DOM_GEOLOCATION_SUPPORT}
amplitude = [Markup::SVGA_AMPLITUDE] {ifdef SVG_DOM}
anchorNode {ifdef DOM_SELECTION_SUPPORT}
anchorOffset {ifdef DOM_SELECTION_SUPPORT}
anchors
angle {ifdef SVG_DOM}
animVal {ifdef SVG_DOM}
animatedInstanceRoot {ifdef SVG_DOM}
animatedNormalizedPathSegList {ifdef SVG_DOM}
animatedPathSegList {ifdef SVG_DOM}
animatedPoints {ifdef SVG_DOM}
animation = [CSS_PROPERTY_animation] {ifdef CSS_ANIMATIONS}
animationDelay = [CSS_PROPERTY_animation_delay] {ifdef CSS_ANIMATIONS}
animationDirection = [CSS_PROPERTY_animation_direction] {ifdef CSS_ANIMATIONS}
animationDuration = [CSS_PROPERTY_animation_duration] {ifdef CSS_ANIMATIONS}
animationFillMode = [CSS_PROPERTY_animation_fill_mode] {ifdef CSS_ANIMATIONS}
animationIterationCount = [CSS_PROPERTY_animation_iteration_count] {ifdef CSS_ANIMATIONS}
animationName = [CSS_PROPERTY_animation_name] {ifdef CSS_ANIMATIONS}
animationPlayState = [CSS_PROPERTY_animation_play_state] {ifdef CSS_ANIMATIONS}
animationTimingFunction = [CSS_PROPERTY_animation_timing_function] {ifdef CSS_ANIMATIONS}
antialias {ifdef CANVAS3D_SUPPORT}
appCodeName
appMinorVersion
appName
appVersion
applets
applicationCache {if defined APPLICATION_CACHE_SUPPORT || defined DOM_WEBWORKERS_SUPPORT}
archive = [ATTR_ARCHIVE]
areas
async
attached {ifdef INTEGRATED_DEVTOOLS_SUPPORT}
attachments {ifdef DOM_JIL_API_SUPPORT}
attrChange {ifdef DOM2_MUTATION_EVENTS}
attrName {ifdef DOM2_MUTATION_EVENTS}
attributes
audioLevel = [CSS_PROPERTY_audio_level] {if defined SVG_DOM}
audioPath {ifdef DOM_JIL_API_SUPPORT}
authState {ifdef OPERA_AUTH_SUPPORT}
authStatus {ifdef OPERA_AUTH_SUPPORT}
authentication {ifdef WEBSERVER_SUPPORT}
author {if defined WEBFEEDS_BACKEND_SUPPORT || defined WEBSERVER_SUPPORT || defined GADGET_SUPPORT}
authorEmail {ifdef GADGET_SUPPORT}
authorHref {ifdef GADGET_SUPPORT}
autocomplete = [ATTR_AUTOCOMPLETE]
autofocus = [ATTR_AUTOFOCUS]
autoplay = [ATTR_AUTOPLAY] {ifdef MEDIA_HTML_SUPPORT}
availHeight
availWidth
availableMemory {ifdef DOM_JIL_API_SUPPORT}
axis = [ATTR_AXIS]
azimuth = [Markup::SVGA_AZIMUTH]
b {if defined SVG_DOM || defined CSS_TRANSFORMS}
backLightOn {ifdef DOM_JIL_API_SUPPORT}
background = [ATTR_BACKGROUND, CSS_PROPERTY_background]
backgroundAttachment = [CSS_PROPERTY_background_attachment]
backgroundClip = [CSS_PROPERTY_background_clip]
backgroundColor = [CSS_PROPERTY_background_color]
backgroundImage = [CSS_PROPERTY_background_image]
backgroundOrigin = [CSS_PROPERTY_background_origin]
backgroundPosition = [CSS_PROPERTY_background_position]
backgroundRepeat = [CSS_PROPERTY_background_repeat]
backgroundSize = [CSS_PROPERTY_background_size]
badge {ifdef EXTENSION_SUPPORT}
baseFrequencyX = [Markup::SVGA_BASEFREQUENCY] {ifdef SVG_DOM}
baseFrequencyY = [Markup::SVGA_BASEFREQUENCY] {ifdef SVG_DOM}
baseURI
baseVal {ifdef SVG_DOM}
baselineShift = [Markup::SVGA_BASELINE_SHIFT, CSS_PROPERTY_baseline_shift] {ifdef SVG_DOM}
bccAddress {ifdef DOM_JIL_API_SUPPORT}
behavior = [ATTR_BEHAVIOR]
bgColor = [ATTR_BGCOLOR]
bgProcess {ifdef EXTENSION_SUPPORT}
bias = [Markup::SVGA_BIAS] {ifdef SVG_DOM}
binaryType {ifdef WEBSOCKETS_SUPPORT}
block {if defined EXTENSION_SUPPORT && defined URL_FILTER}
blue {ifdef SVG_DOM}
blur
body
bodyItems {ifdef WEBSERVER_SUPPORT}
booleanValue {ifdef DOM3_XPATH}
border = [ATTR_BORDER, CSS_PROPERTY_border]
borderBottom = [CSS_PROPERTY_border_bottom]
borderBottomColor = [CSS_PROPERTY_border_bottom_color]
borderBottomLeftRadius = [CSS_PROPERTY_border_bottom_left_radius]
borderBottomRightRadius = [CSS_PROPERTY_border_bottom_right_radius]
borderBottomStyle = [CSS_PROPERTY_border_bottom_style]
borderBottomWidth = [CSS_PROPERTY_border_bottom_width]
borderCollapse = [CSS_PROPERTY_border_collapse]
borderColor = [CSS_PROPERTY_border_color]
borderLeft = [CSS_PROPERTY_border_left]
borderLeftColor = [CSS_PROPERTY_border_left_color]
borderLeftStyle = [CSS_PROPERTY_border_left_style]
borderLeftWidth = [CSS_PROPERTY_border_left_width]
borderRadius = [CSS_PROPERTY_border_radius]
borderRight = [CSS_PROPERTY_border_right]
borderRightColor = [CSS_PROPERTY_border_right_color]
borderRightStyle = [CSS_PROPERTY_border_right_style]
borderRightWidth = [CSS_PROPERTY_border_right_width]
borderSpacing = [CSS_PROPERTY_border_spacing]
borderStyle = [CSS_PROPERTY_border_style]
borderTop = [CSS_PROPERTY_border_top]
borderTopColor = [CSS_PROPERTY_border_top_color]
borderTopLeftRadius = [CSS_PROPERTY_border_top_left_radius]
borderTopRightRadius = [CSS_PROPERTY_border_top_right_radius]
borderTopStyle = [CSS_PROPERTY_border_top_style]
borderTopWidth = [CSS_PROPERTY_border_top_width]
borderWidth = [CSS_PROPERTY_border_width]
bottom = [CSS_PROPERTY_bottom]
boxDecorationBreak = [CSS_PROPERTY_box_decoration_break]
boxShadow = [CSS_PROPERTY_box_shadow]
boxSizing = [CSS_PROPERTY_box_sizing]
breakAfter = [CSS_PROPERTY_break_after]
breakBefore = [CSS_PROPERTY_break_before]
breakInside = [CSS_PROPERTY_break_inside]
browserLanguage
browserWindow {ifdef DOM_EXTENSIONS_TAB_API_SUPPORT}
bubbles
buffered {ifdef MEDIA_HTML_SUPPORT}
bufferedAmount {ifdef WEBSOCKETS_SUPPORT}
bufferedRendering = [CSS_PROPERTY_buffered_rendering]
busy
button
bytesAvailable {ifdef DOM_GADGET_FILE_API_SUPPORT}
c {if defined SVG_DOM || defined CSS_TRANSFORMS}
calendarItemId {ifdef DOM_JIL_API_SUPPORT}
callRecordAddress {ifdef DOM_JIL_API_SUPPORT}
callRecordId {ifdef DOM_JIL_API_SUPPORT}
callRecordName {ifdef DOM_JIL_API_SUPPORT}
callRecordType {ifdef DOM_JIL_API_SUPPORT}
callbackNumber {ifdef DOM_JIL_API_SUPPORT}
cancelBubble
cancelable
canvas {ifdef CANVAS_SUPPORT}
caption
captionSide = [CSS_PROPERTY_caption_side]
ccAddress {ifdef DOM_JIL_API_SUPPORT}
cellIndex
cellPadding = [ATTR_CELLPADDING]
cellSpacing = [ATTR_CELLSPACING]
cells
ch = [ATTR_CHAR]
chOff = [ATTR_CHAROFF]
challenge = [ATTR_CHALLENGE]
changedTouches {ifdef TOUCH_EVENTS_SUPPORT}
char
charCode
characterSet
characterType = [CSS_PROPERTY_character_type] {ifdef CSS_CHARACTER_TYPE_SUPPORT}
charset = [ATTR_CHARSET]
checked = [ATTR_CHECKED]
childElementCount
childNodes
children
chunked {ifdef WEBSERVER_SUPPORT}
cite = [ATTR_CITE]
class = [ATTR_CLASS]
classId = [ATTR_CLASSID]
classList
className = [Markup::SVGA_CLASS, ATTR_CLASS]
clear = [ATTR_CLEAR, CSS_PROPERTY_clear]
clientHeight
clientLeft
clientTop
clientWidth
clientX
clientY
clip = [CSS_PROPERTY_clip]
clipPath = [Markup::SVGA_CLIP_PATH, CSS_PROPERTY_clip_path] {ifdef SVG_DOM}
clipPathUnits = [Markup::SVGA_CLIPPATHUNITS] {ifdef SVG_DOM}
clipRule = [Markup::SVGA_CLIP_RULE, CSS_PROPERTY_clip_rule] {ifdef SVG_DOM}
clipboardData {ifdef USE_OP_CLIPBOARD}
clipboardString {ifdef DOM_JIL_API_SUPPORT}
close
closed
code = [ATTR_CODE]
codeBase = [ATTR_CODEBASE]
codeType = [ATTR_CODETYPE]
colSpan = [ATTR_COLSPAN]
collapsed {ifdef DOM2_RANGE}
color = [ATTR_COLOR, CSS_PROPERTY_color]
colorDepth
colorInterpolation = [Markup::SVGA_COLOR_INTERPOLATION, CSS_PROPERTY_color_interpolation] {ifdef SVG_DOM}
colorInterpolationFilters = [Markup::SVGA_COLOR_INTERPOLATION_FILTERS, CSS_PROPERTY_color_interpolation_filters] {ifdef SVG_DOM}
colorProfile = [Markup::SVGA_COLOR_PROFILE, CSS_PROPERTY_color_profile] {ifdef SVG_DOM}
colorRendering = [Markup::SVGA_COLOR_RENDERING, CSS_PROPERTY_color_rendering] {ifdef SVG_DOM}
cols = [ATTR_COLS]
columnCount = [CSS_PROPERTY_column_count]
columnFill = [CSS_PROPERTY_column_fill]
columnGap = [CSS_PROPERTY_column_gap]
columnRule = [CSS_PROPERTY_column_rule]
columnRuleColor = [CSS_PROPERTY_column_rule_color]
columnRuleStyle = [CSS_PROPERTY_column_rule_style]
columnRuleWidth = [CSS_PROPERTY_column_rule_width]
columnSpan = [CSS_PROPERTY_column_span]
columnWidth = [CSS_PROPERTY_column_width]
columns = [CSS_PROPERTY_columns]
commonAncestorContainer {ifdef DOM2_RANGE}
compact = [ATTR_COMPACT]
company {ifdef DOM_JIL_API_SUPPORT}
compatMode
complete
connection {ifdef WEBSERVER_SUPPORT}
content = [ATTR_CONTENT, CSS_PROPERTY_content]
contentDocument
contentEditable = [ATTR_CONTENTEDITABLE]
contentScriptType {ifdef SVG_DOM}
contentStyleType {ifdef SVG_DOM}
contentType
contentWindow
contexts {ifdef EXTENSION_SUPPORT}
control
controls = [ATTR_CONTROLS] {ifdef MEDIA_HTML_SUPPORT}
cookie
cookieEnabled
coords = [ATTR_COORDS]
correspondingElement {ifdef SVG_DOM}
correspondingUseElement {ifdef SVG_DOM}
count {ifdef GADGET_SUPPORT}
counterIncrement = [CSS_PROPERTY_counter_increment]
counterReset = [CSS_PROPERTY_counter_reset]
createDate {ifdef DOM_JIL_API_SUPPORT}
createDocumentFragment
createElement
createEvent
createTextNode
created {ifdef DOM_GADGET_FILE_API_SUPPORT}
crossOrigin = [Markup::HA_CROSSORIGIN]
cssFloat = [CSS_PROPERTY_float]
cssRules
cssText
ctrlKey
cues {ifdef MEDIA_HTML_SUPPORT}
current
currentFps {ifdef SVG_SUPPORT}
currentIcon {ifdef GADGET_SUPPORT}
currentNode {ifdef DOM2_TRAVERSAL}
currentPage {ifdef PAGED_MEDIA_SUPPORT}
currentRotate {ifdef SVG_DOM}
currentScale {ifdef SVG_DOM}
currentServiceName {ifdef WEBSERVER_SUPPORT}
currentServicePath {ifdef WEBSERVER_SUPPORT}
currentSrc {ifdef MEDIA_HTML_SUPPORT}
currentStyle {ifdef CURRENT_STYLE_SUPPORT}
currentTarget
currentTime {ifdef MEDIA_HTML_SUPPORT}
currentTranslate {ifdef SVG_DOM}
cursor = [CSS_PROPERTY_cursor]
customError
cx = [Markup::SVGA_CX] {ifdef SVG_DOM}
cy = [Markup::SVGA_CY] {ifdef SVG_DOM}
d = [Markup::SVGA_D] {if defined SVG_DOM || defined CSS_TRANSFORMS}
data = [ATTR_DATA]
dataTransfer {ifdef DRAG_SUPPORT}
dataset
dateTime = [ATTR_DATETIME]
declare = [ATTR_DECLARE]
default = [Markup::HA_DEFAULT] {ifdef MEDIA_HTML_SUPPORT}
defaultChecked = [ATTR_CHECKED]
defaultMuted = [ATTR_MUTED] {ifdef MEDIA_HTML_SUPPORT}
defaultPlaybackRate {ifdef MEDIA_HTML_SUPPORT}
defaultPrevented
defaultSelected = [ATTR_SELECTED]
defaultStatus
defaultValue = [ATTR_VALUE]
defaultView
defer = [ATTR_DEFER]
depth {ifdef CANVAS3D_SUPPORT}
description
designMode
destinationAddress {ifdef DOM_JIL_API_SUPPORT}
detail
device {if defined UPNP_SUPPORT || (defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL)}
deviceName {ifdef WEBSERVER_SUPPORT}
devicePixelRatio
dialogArguments {ifdef ABOUT_HTML_DIALOGS}
diffuseConstant = [Markup::SVGA_DIFFUSECONSTANT] {ifdef SVG_DOM}
dir = [ATTR_DIR]
dirName = [ATTR_DIRNAME]
direction = [ATTR_DIRECTION, CSS_PROPERTY_direction]
disabled = [ATTR_DISABLED]
dispatchEvent
display = [CSS_PROPERTY_display]
displayAlign = [CSS_PROPERTY_display_align] {ifdef SVG_DOM}
divisor = [Markup::SVGA_DIVISOR] {ifdef SVG_DOM}
doNotTrack
doctype
document
documentElement
documentURI
documentURL {ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT}
documentURLPatterns {ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT}
domConfig
domain
dominantBaseline = [Markup::SVGA_DOMINANT_BASELINE, CSS_PROPERTY_dominant_baseline] {ifdef SVG_DOM}
draggable = [Markup::SVGA_DRAGGABLE, Markup::HA_DRAGGABLE] {ifdef DRAG_SUPPORT}
drawingBufferHeight {ifdef CANVAS3D_SUPPORT}
drawingBufferWidth {ifdef CANVAS3D_SUPPORT}
dropEffect {ifdef DRAG_SUPPORT}
dropzone = [Markup::SVGA_DROPZONE, Markup::HA_DROPZONE] {ifdef DRAG_SUPPORT}
dseEnabled {ifdef DOM_DSE_DEBUGGING}
dseRecovered {ifdef DOM_DSE_DEBUGGING}
duration {ifdef MEDIA_HTML_SUPPORT}
durationSeconds {ifdef DOM_JIL_API_SUPPORT}
dx = [Markup::SVGA_DX] {ifdef SVG_DOM}
dy = [Markup::SVGA_DY] {ifdef SVG_DOM}
e {if defined SVG_DOM || defined CSS_TRANSFORMS}
eMail {ifdef DOM_JIL_API_SUPPORT}
edgeMode = [Markup::SVGA_EDGEMODE] {ifdef SVG_DOM}
effectAllowed {ifdef DRAG_SUPPORT}
elapsedTime
element
elements
elevation = [Markup::SVGA_ELEVATION]
embeds
emptyCells = [CSS_PROPERTY_empty_cells]
enableBackground = [Markup::SVGA_ENABLE_BACKGROUND, CSS_PROPERTY_enable_background] {ifdef SVG_DOM}
enabledPlugin
encoding = [ATTR_ENCTYPE]
enctype = [ATTR_ENCTYPE]
endContainer {ifdef DOM2_RANGE}
endOffset {ifdef DOM2_RANGE}
endTime {ifdef MEDIA_HTML_SUPPORT}
ended {ifdef MEDIA_HTML_SUPPORT}
entities
entries {ifdef WEBFEEDS_BACKEND_SUPPORT}
eof {if defined WEBSERVER_SUPPORT || defined DOM_GADGET_FILE_API_SUPPORT}
error
event = [ATTR_EVENT]
eventCancelled {ifdef USER_JAVASCRIPT}
eventEndTime {ifdef DOM_JIL_API_SUPPORT}
eventName {ifdef DOM_JIL_API_SUPPORT}
eventNotes {ifdef DOM_JIL_API_SUPPORT}
eventPhase
eventRecurrence {ifdef DOM_JIL_API_SUPPORT}
eventStartTime {ifdef DOM_JIL_API_SUPPORT}
exists {ifdef DOM_GADGET_FILE_API_SUPPORT}
expandEntityReferences {ifdef DOM2_TRAVERSAL}
exponent = [Markup::SVGA_EXPONENT] {ifdef SVG_DOM}
extension {ifdef EXTENSION_SUPPORT}
extensions {ifdef WEBSOCKETS_SUPPORT}
externalResourcesRequired = [Markup::SVGA_EXTERNALRESOURCESREQUIRED] {ifdef SVG_DOM}
f {if defined SVG_DOM || defined CSS_TRANSFORMS}
face = [ATTR_FACE]
farthestViewportElement {ifdef SVG_DOM}
favicon {ifdef EXTENSION_SUPPORT}
faviconUrl {ifdef EXTENSION_SUPPORT}
fgColor
fileInstance {ifdef DOM_GADGET_FILE_API_SUPPORT}
fileName {ifdef DOM_JIL_API_SUPPORT}
filePath {ifdef DOM_JIL_API_SUPPORT}
fileSize {if defined DOM_GADGET_FILE_API_SUPPORT || defined DOM_JIL_API_SUPPORT}
filename
files
fill = [Markup::SVGA_FILL, CSS_PROPERTY_fill] {ifdef SVG_DOM}
fillOpacity = [Markup::SVGA_FILL_OPACITY, CSS_PROPERTY_fill_opacity] {ifdef SVG_DOM}
fillRule = [Markup::SVGA_FILL_RULE, CSS_PROPERTY_fill_rule] {ifdef SVG_DOM}
fillStyle {ifdef CANVAS_SUPPORT}
filter = [Markup::SVGA_FILTER, CSS_PROPERTY_filter] {if defined DOM2_TRAVERSAL || defined DOM3_LOAD || defined DOM3_SAVE || defined SVG_DOM}
filterResX = [Markup::SVGA_FILTERRES] {ifdef SVG_DOM}
filterResY = [Markup::SVGA_FILTERRES] {ifdef SVG_DOM}
filterUnits = [Markup::SVGA_FILTERUNITS] {ifdef SVG_DOM}
firstChild
firstElementChild
flex = [CSS_PROPERTY_flex]
flexBasis = [CSS_PROPERTY_flex_basis]
flexDirection = [CSS_PROPERTY_flex_direction]
flexFlow = [CSS_PROPERTY_flex_flow]
flexGrow = [CSS_PROPERTY_flex_grow]
flexShrink = [CSS_PROPERTY_flex_shrink]
flexWrap = [CSS_PROPERTY_flex_wrap]
floodColor = [Markup::SVGA_FLOOD_COLOR, CSS_PROPERTY_flood_color] {ifdef SVG_DOM}
floodOpacity = [Markup::SVGA_FLOOD_OPACITY, CSS_PROPERTY_flood_opacity] {ifdef SVG_DOM}
focus
focusNode {ifdef DOM_SELECTION_SUPPORT}
focusOffset {ifdef DOM_SELECTION_SUPPORT}
focused {ifdef DOM_EXTENSIONS_TAB_API_SUPPORT}
font = [CSS_PROPERTY_font]
fontFamily = [CSS_PROPERTY_font_family]
fontSize = [CSS_PROPERTY_font_size]
fontSizeAdjust = [CSS_PROPERTY_font_size_adjust]
fontStretch = [CSS_PROPERTY_font_stretch]
fontStyle = [CSS_PROPERTY_font_style]
fontVariant = [CSS_PROPERTY_font_variant]
fontWeight = [CSS_PROPERTY_font_weight]
for = [ATTR_FOR]
form
formAction = [ATTR_FORMACTION]
formEnctype = [ATTR_FORMENCTYPE]
formMethod = [ATTR_FORMMETHOD]
formNoValidate = [ATTR_FORMNOVALIDATE]
formTarget = [ATTR_FORMTARGET]
forms
frame = [ATTR_FRAME]
frameBorder = [ATTR_FRAMEBORDER]
frameElement
frames
fromElement
fullName {ifdef DOM_JIL_API_SUPPORT}
fullscreenElement {ifdef DOM_FULLSCREEN_MODE}
fullscreenEnabled {ifdef DOM_FULLSCREEN_MODE}
fx = [Markup::SVGA_FX] {ifdef SVG_DOM}
fy = [Markup::SVGA_FY] {ifdef SVG_DOM}
geolocation {ifdef DOM_GEOLOCATION_SUPPORT}
getElementById
getElementsByClassName
getElementsByTagName
globalAlpha {ifdef CANVAS_SUPPORT}
globalCompositeOperation {ifdef CANVAS_SUPPORT}
glyphOrientationHorizontal = [Markup::SVGA_GLYPH_ORIENTATION_HORIZONTAL, CSS_PROPERTY_glyph_orientation_horizontal] {ifdef SVG_DOM}
glyphOrientationVertical = [Markup::SVGA_GLYPH_ORIENTATION_VERTICAL, CSS_PROPERTY_glyph_orientation_vertical] {ifdef SVG_DOM}
gradientTransform = [Markup::SVGA_TRANSFORM] {ifdef SVG_DOM}
gradientUnits = [Markup::SVGA_GRADIENTUNITS] {ifdef SVG_DOM}
green {ifdef SVG_DOM}
hash
head
headers = [ATTR_HEADERS]
heading {ifdef DOM_GEOLOCATION_SUPPORT}
height = [Markup::SVGA_HEIGHT, ATTR_HEIGHT, CSS_PROPERTY_height]
hidden = [ATTR_HIDDEN]
high = [ATTR_HIGH]
history
hits {ifdef ESUTILS_PROFILER_SUPPORT}
home
homePhone {ifdef DOM_JIL_API_SUPPORT}
host
hostName {ifdef WEBSERVER_SUPPORT}
hostname
href = [ATTR_HREF]
hreflang = [ATTR_HREFLANG]
hspace = [ATTR_HSPACE]
htmlFor = [ATTR_FOR]
httpEquiv = [ATTR_HTTP_EQUIV]
icon {ifdef WEBFEEDS_BACKEND_SUPPORT}
icons {ifdef GADGET_SUPPORT}
id = [Markup::SVGA_ID, ATTR_ID]
identifier {if defined GADGET_SUPPORT || defined TOUCH_EVENTS_SUPPORT}
imageRendering = [Markup::SVGA_IMAGE_RENDERING, CSS_PROPERTY_image_rendering] {ifdef SVG_DOM}
images
implementation
implicitFlush {ifdef WEBSERVER_SUPPORT}
in1 = [Markup::SVGA_IN] {ifdef SVG_DOM}
in2 = [Markup::SVGA_IN2] {ifdef SVG_DOM}
indeterminate
index
innerHTML
innerHeight
innerText
innerWidth
input
inputFormat = [CSS_PROPERTY_input_format]
inputMethod
inputmode = [ATTR_INPUTMODE]
insertAdjacentHTML
insertAdjacentText
insertId {ifdef DATABASE_STORAGE_SUPPORT}
instanceRoot {ifdef SVG_DOM}
intercept = [Markup::SVGA_INTERCEPT] {ifdef SVG_DOM}
internalSubset
invalidIteratorState {ifdef DOM3_XPATH}
ip {ifdef WEBSERVER_SUPPORT}
isArchive {ifdef DOM_GADGET_FILE_API_SUPPORT}
isAudioPlaying {ifdef DOM_JIL_API_SUPPORT}
isBinary {ifdef WEBFEEDS_BACKEND_SUPPORT}
isCharging {ifdef DOM_JIL_API_SUPPORT}
isCollapsed {ifdef DOM_SELECTION_SUPPORT}
isContentEditable
isDataNetworkConnected {ifdef DOM_JIL_API_SUPPORT}
isDirectory {if defined DOM_GADGET_FILE_API_SUPPORT || defined DOM_JIL_API_SUPPORT}
isEditable {ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT}
isElementContentWhitespace
isFile {ifdef DOM_GADGET_FILE_API_SUPPORT}
isHidden {ifdef DOM_GADGET_FILE_API_SUPPORT}
isLocal {if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT}
isMap = [ATTR_ISMAP]
isMarkup {ifdef WEBFEEDS_BACKEND_SUPPORT}
isOwner {ifdef WEBSERVER_SUPPORT}
isPaused {ifdef SVG_DOM}
isPlainText {ifdef WEBFEEDS_BACKEND_SUPPORT}
isProxied {ifdef WEBSERVER_SUPPORT}
isRadioEnabled {ifdef DOM_JIL_API_SUPPORT}
isRead {ifdef DOM_JIL_API_SUPPORT}
isRoaming {ifdef DOM_JIL_API_SUPPORT}
isSubscribed {ifdef WEBFEEDS_BACKEND_SUPPORT}
isTrusted
isVideoPlaying {ifdef DOM_JIL_API_SUPPORT}
item
itemId = [ATTR_ITEMID]
itemProp = [ATTR_ITEMPROP]
itemRef = [ATTR_ITEMREF]
itemScope = [ATTR_ITEMSCOPE]
itemType = [ATTR_ITEMTYPE]
itemValue
items {if defined DRAG_SUPPORT || defined USE_OP_CLIPBOARD}
justifyContent = [CSS_PROPERTY_justify_content]
k1 = [Markup::SVGA_K1] {ifdef SVG_DOM}
k2 = [Markup::SVGA_K2] {ifdef SVG_DOM}
k3 = [Markup::SVGA_K3] {ifdef SVG_DOM}
k4 = [Markup::SVGA_K4] {ifdef SVG_DOM}
keep {ifdef WEBFEEDS_BACKEND_SUPPORT}
kernelMatrix = [Markup::SVGA_KERNELMATRIX] {ifdef SVG_DOM}
kernelUnitLengthX = [Markup::SVGA_KERNELUNITLENGTH] {ifdef SVG_DOM}
kernelUnitLengthY = [Markup::SVGA_KERNELUNITLENGTH] {ifdef SVG_DOM}
kerning = [Markup::SVGA_KERNING, CSS_PROPERTY_kerning] {ifdef SVG_DOM}
key
keyCode
keyText {ifdef CSS_ANIMATIONS}
keypadLightOn {ifdef DOM_JIL_API_SUPPORT}
keytype = [ATTR_KEYTYPE]
kind = [Markup::HA_KIND] {if defined MEDIA_HTML_SUPPORT || defined DRAG_SUPPORT || defined USE_OP_CLIPBOARD}
label = [ATTR_LABEL]
labels
lang = [ATTR_LANG]
language = [ATTR_LANGUAGE]
largeArcFlag {ifdef SVG_DOM}
lastChild
lastElementChild
lastEventId {if defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || defined WEBSOCKETS_SUPPORT}
lastModified
lastModifiedDate
lastModifyDate {ifdef DOM_JIL_API_SUPPORT}
lastPosition {ifdef DOM_GEOLOCATION_SUPPORT}
lastUpdate
latitude {ifdef DOM_GEOLOCATION_SUPPORT}
left = [CSS_PROPERTY_left]
length
lengthAdjust = [Markup::SVGA_LENGTHADJUST] {ifdef SVG_DOM}
lengthComputable {ifdef PROGRESS_EVENTS_SUPPORT}
letterSpacing = [CSS_PROPERTY_letter_spacing]
lightingColor = [Markup::SVGA_LIGHTING_COLOR, CSS_PROPERTY_lighting_color] {ifdef SVG_DOM}
limitingConeAngle = [Markup::SVGA_LIMITINGCONEANGLE] {ifdef SVG_DOM}
line {ifdef MEDIA_HTML_SUPPORT}
lineCap {ifdef CANVAS_SUPPORT}
lineHeight = [CSS_PROPERTY_line_height]
lineIncrement = [CSS_PROPERTY_line_increment] {ifdef SVG_DOM}
lineJoin {ifdef CANVAS_SUPPORT}
lineWidth {ifdef CANVAS_SUPPORT}
lineno
lines {ifdef ESUTILS_PROFILER_SUPPORT}
link = [ATTR_LINK]
linkColor
linkURL {ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT}
links
list
listStyle = [CSS_PROPERTY_list_style]
listStyleImage = [CSS_PROPERTY_list_style_image]
listStylePosition = [CSS_PROPERTY_list_style_position]
listStyleType = [CSS_PROPERTY_list_style_type]
listener
loaded {ifdef PROGRESS_EVENTS_SUPPORT}
loadedWithSPDY {if defined USE_SPDY && defined DOM_EXTENSIONS_TAB_API_SUPPORT}
localName
localStorage {ifdef CLIENTSIDE_STORAGE_SUPPORT}
locale
location = [ATTR_SRC]
locked {ifdef DOM_EXTENSIONS_TAB_API_SUPPORT}
logo {ifdef WEBFEEDS_BACKEND_SUPPORT}
longDesc = [ATTR_LONGDESC]
longitude {ifdef DOM_GEOLOCATION_SUPPORT}
loop = [ATTR_LOOP]
low = [ATTR_LOW]
lowsrc
margin = [CSS_PROPERTY_margin]
marginBottom = [CSS_PROPERTY_margin_bottom]
marginHeight = [ATTR_MARGINHEIGHT]
marginLeft = [CSS_PROPERTY_margin_left]
marginRight = [CSS_PROPERTY_margin_right]
marginTop = [CSS_PROPERTY_margin_top]
marginWidth = [ATTR_MARGINWIDTH]
marker = [CSS_PROPERTY_marker] {ifdef SVG_DOM}
markerEnd = [Markup::SVGA_MARKER_END, CSS_PROPERTY_marker_end] {ifdef SVG_DOM}
markerHeight = [Markup::SVGA_MARKERHEIGHT] {ifdef SVG_DOM}
markerMid = [Markup::SVGA_MARKER_MID, CSS_PROPERTY_marker_mid] {ifdef SVG_DOM}
markerOffset = [CSS_PROPERTY_marker_offset]
markerStart = [Markup::SVGA_MARKER_START, CSS_PROPERTY_marker_start] {ifdef SVG_DOM}
markerUnits = [Markup::SVGA_MARKERUNITS] {ifdef SVG_DOM}
markerWidth = [Markup::SVGA_MARKERWIDTH] {ifdef SVG_DOM}
mask = [Markup::SVGA_MASK, CSS_PROPERTY_mask] {ifdef SVG_DOM}
maskContentUnits = [Markup::SVGA_MASKCONTENTUNITS] {ifdef SVG_DOM}
maskUnits = [Markup::SVGA_MASKUNITS] {ifdef SVG_DOM}
matches
matrix {ifdef SVG_DOM}
max = [ATTR_MAX]
maxAge {ifdef WEBFEEDS_BACKEND_SUPPORT}
maxEntries {ifdef WEBFEEDS_BACKEND_SUPPORT}
maxHeight = [CSS_PROPERTY_max_height]
maxLength = [ATTR_MAXLENGTH]
maxPathLength {ifdef DOM_GADGET_FILE_API_SUPPORT}
maxSize {ifdef WEBFEEDS_BACKEND_SUPPORT}
maxUploadRate {if defined UPNP_SUPPORT || (defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL)}
maxWidth = [CSS_PROPERTY_max_width]
maxZoom = [CSS_PROPERTY_max_zoom]
media = [Markup::SVGA_MEDIA, ATTR_MEDIA]
mediaText
mediaType {ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT}
meetOrSlice {ifdef SVG_DOM}
menu {ifdef EXTENSION_SUPPORT}
menubar
message
messageId {ifdef DOM_JIL_API_SUPPORT}
messagePriority {ifdef DOM_JIL_API_SUPPORT}
messageType {ifdef DOM_JIL_API_SUPPORT}
metaData {ifdef DOM_GADGET_FILE_API_SUPPORT}
metaKey
method = [Markup::SVGA_METHOD, ATTR_METHOD]
millisecondsSelf {ifdef ESUTILS_PROFILER_SUPPORT}
millisecondsTotal {ifdef ESUTILS_PROFILER_SUPPORT}
mimeTypes
min = [ATTR_MIN]
minHeight = [CSS_PROPERTY_min_height]
minUpdateInterval {ifdef WEBFEEDS_BACKEND_SUPPORT}
minWidth = [CSS_PROPERTY_min_width]
minZoom = [CSS_PROPERTY_min_zoom]
miterLimit {ifdef CANVAS_SUPPORT}
mobilePhone {ifdef DOM_JIL_API_SUPPORT}
mode = [Markup::SVGA_MODE] {ifdef SVG_DOM}
modified {ifdef DOM_GADGET_FILE_API_SUPPORT}
mountPoints {ifdef DOM_GADGET_FILE_API_SUPPORT}
moveBy
moveTo
msgRingtoneVolume {ifdef DOM_JIL_API_SUPPORT}
multiple = [ATTR_MULTIPLE]
muted {ifdef MEDIA_HTML_SUPPORT}
name = [ATTR_NAME]
namedItem
names
namespaceURI
nativePath {ifdef DOM_GADGET_FILE_API_SUPPORT}
naturalHeight
naturalWidth
navDown = [CSS_PROPERTY_nav_down]
navIndex = [CSS_PROPERTY_nav_index]
navLeft = [CSS_PROPERTY_nav_left]
navRight = [CSS_PROPERTY_nav_right]
navUp = [CSS_PROPERTY_nav_up]
navigationMode
navigator
nearestViewportElement {ifdef SVG_DOM}
networkConnectionType {ifdef DOM_JIL_API_SUPPORT}
networkState {ifdef MEDIA_HTML_SUPPORT}
newDocument {ifdef DOM3_LOAD}
newLine {if defined DOM3_SAVE || defined DOM_GADGET_FILE_API_SUPPORT}
newURL
newValue {if defined DOM2_MUTATION_EVENTS || defined CLIENTSIDE_STORAGE_SUPPORT}
next
nextElementSibling
nextSibling
noHref = [ATTR_NOHREF]
noResize = [ATTR_NORESIZE]
noShade = [ATTR_NOSHADE]
noValidate = [ATTR_NOVALIDATE]
noWrap = [ATTR_NOWRAP]
nodeName
nodeType
nodeValue
normalizedPathSegList {ifdef SVG_DOM}
notationName
notations
numOctaves = [Markup::SVGA_NUMOCTAVES] {ifdef SVG_DOM}
numberOfItems {ifdef SVG_DOM}
numberOfSegments {ifdef SVG_DOM}
numberValue {ifdef DOM3_XPATH}
object = [ATTR_OBJECT]
offset = [Markup::SVGA_OFFSET] {ifdef SVG_DOM}
offsetHeight
offsetLeft
offsetParent
offsetTop
offsetWidth
offsetX
offsetY
oldURL
oldValue {ifdef CLIENTSIDE_STORAGE_SUPPORT}
onAddressBookItemsFound {ifdef DOM_JIL_API_SUPPORT}
onCalendarItemAlert {ifdef DOM_JIL_API_SUPPORT}
onCalendarItemsFound {ifdef DOM_JIL_API_SUPPORT}
onCallEvent {ifdef DOM_JIL_API_SUPPORT}
onCallRecordsFound {ifdef DOM_JIL_API_SUPPORT}
onCameraCaptured {ifdef DOM_JIL_API_SUPPORT}
onChargeLevelChange {ifdef DOM_JIL_API_SUPPORT}
onChargeStateChange {ifdef DOM_JIL_API_SUPPORT}
onFilesFound {ifdef DOM_JIL_API_SUPPORT}
onFocus {ifdef DOM_JIL_API_SUPPORT}
onLine
onLowBattery {ifdef DOM_JIL_API_SUPPORT}
onMaximize {ifdef DOM_JIL_API_SUPPORT}
onMessageArrived {ifdef DOM_JIL_API_SUPPORT}
onMessageSendingFailure {ifdef DOM_JIL_API_SUPPORT}
onMessagesFound {ifdef DOM_JIL_API_SUPPORT}
onNetworkConnectionChanged {ifdef DOM_JIL_API_SUPPORT}
onPositionRetrieved {ifdef DOM_JIL_API_SUPPORT}
onRestore {ifdef DOM_JIL_API_SUPPORT}
onScreenChangeDimensions {ifdef DOM_JIL_API_SUPPORT}
onSignalSourceChange {ifdef DOM_JIL_API_SUPPORT}
onStateChange {ifdef DOM_JIL_API_SUPPORT}
onVCardExportingFinish {ifdef DOM_JIL_API_SUPPORT}
onWakeup {ifdef DOM_JIL_API_SUPPORT}
onaddtrack {ifdef MEDIA_HTML_SUPPORT}
onafterupdate {ifdef GADGET_SUPPORT}
onauthenticationchange {ifdef OPERA_AUTH_SUPPORT}
onbeforeupdate {ifdef GADGET_SUPPORT}
onclose {ifdef WEBSOCKETS_SUPPORT}
onconnect {if defined DOM_WEBWORKERS_SUPPORT || defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT}
oncreate {ifdef EXTENSION_SUPPORT}
oncuechange {ifdef MEDIA_HTML_SUPPORT}
ondisconnect {ifdef EXTENSION_SUPPORT}
ondragstart {ifdef GADGET_SUPPORT}
ondragstop {ifdef GADGET_SUPPORT}
onenter {ifdef MEDIA_HTML_SUPPORT}
onerror {if defined DOM_WEBWORKERS_SUPPORT || defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || defined WEBSOCKETS_SUPPORT}
onexit {ifdef MEDIA_HTML_SUPPORT}
onfocus {ifdef EXTENSION_SUPPORT}
onhide {ifdef GADGET_SUPPORT}
onload {ifdef MEDIA_HTML_SUPPORT}
onmessage {if defined DOM_WEBWORKERS_SUPPORT || defined DOM_CROSSDOCUMENT_MESSAGING_SUPPORT || defined WEBSOCKETS_SUPPORT}
onmove {ifdef EXTENSION_SUPPORT}
onopen {ifdef WEBSOCKETS_SUPPORT}
onrangechange {if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL}
onrefresh {ifdef GADGET_SUPPORT}
onremove {ifdef EXTENSION_SUPPORT}
onremovetrack {ifdef MEDIA_HTML_SUPPORT}
onshow {ifdef GADGET_SUPPORT}
onthread
onupdate {ifdef EXTENSION_SUPPORT}
onviewstatechanged {ifdef GADGET_SUPPORT}
opacity = [CSS_PROPERTY_opacity]
opener
operationType {ifdef CSS_TRANSFORMS}
operator = [Markup::SVGA_OPERATOR] {ifdef SVG_DOM}
optimum = [ATTR_OPTIMUM]
options
order = [CSS_PROPERTY_order]
orderX = [Markup::SVGA_ORDER] {ifdef SVG_DOM}
orderY = [Markup::SVGA_ORDER] {ifdef SVG_DOM}
orientAngle = [Markup::SVGA_ORIENT] {ifdef SVG_DOM}
orientType = [Markup::SVGA_ORIENT] {ifdef SVG_DOM}
orientation = [CSS_PROPERTY_orientation]
origin
originURL {if defined(GADGET_SUPPORT) || defined(WEBSERVER_SUPPORT)}
orphans = [CSS_PROPERTY_orphans]
outerHTML
outerHeight
outerText
outerWidth
outline = [CSS_PROPERTY_outline]
outlineColor = [CSS_PROPERTY_outline_color]
outlineOffset = [CSS_PROPERTY_outline_offset]
outlineStyle = [CSS_PROPERTY_outline_style]
outlineWidth = [CSS_PROPERTY_outline_width]
output
overflow = [CSS_PROPERTY_overflow]
overflowWrap = [CSS_PROPERTY_overflow_wrap]
overflowX = [CSS_PROPERTY_overflow_x]
overflowY = [CSS_PROPERTY_overflow_y]
ownerDocument
ownerElement
ownerNode
ownerRule
ownerSVGElement {ifdef SVG_DOM}
padding = [CSS_PROPERTY_padding]
paddingBottom = [CSS_PROPERTY_padding_bottom]
paddingLeft = [CSS_PROPERTY_padding_left]
paddingRight = [CSS_PROPERTY_padding_right]
paddingTop = [CSS_PROPERTY_padding_top]
page = [CSS_PROPERTY_page]
pageBreakAfter = [CSS_PROPERTY_page_break_after]
pageBreakBefore = [CSS_PROPERTY_page_break_before]
pageBreakInside = [CSS_PROPERTY_page_break_inside]
pageCount {ifdef PAGED_MEDIA_SUPPORT}
pageURL {ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT}
pageX
pageXOffset
pageY
pageYOffset
paintType {ifdef SVG_DOM}
parameterNames
parent
parentElement
parentNode
parentRule
parentStyleSheet
parentWindow
passwordProtected {ifdef WEBSERVER_SUPPORT}
path {ifdef GADGET_SUPPORT}
pathLength = [Markup::SVGA_PATHLENGTH] {ifdef SVG_DOM}
pathSegList {ifdef SVG_DOM}
pathSegType {ifdef SVG_DOM}
pathSegTypeAsLetter {ifdef SVG_DOM}
pathname
pattern = [ATTR_PATTERN]
patternContentUnits = [Markup::SVGA_PATTERNCONTENTUNITS] {ifdef SVG_DOM}
patternMismatch
patternTransform = [Markup::SVGA_PATTERNTRANSFORM] {ifdef SVG_DOM}
patternUnits = [Markup::SVGA_PATTERNUNITS] {ifdef SVG_DOM}
pauseOnExit {ifdef MEDIA_HTML_SUPPORT}
paused {ifdef MEDIA_HTML_SUPPORT}
percentRemaining {ifdef DOM_JIL_API_SUPPORT}
phoneColorDepthDefault {ifdef DOM_JIL_API_SUPPORT}
phoneFirmware {ifdef DOM_JIL_API_SUPPORT}
phoneMSISDN {ifdef DOM_JIL_API_SUPPORT}
phoneManufacturer {ifdef DOM_JIL_API_SUPPORT}
phoneModel {ifdef DOM_JIL_API_SUPPORT}
phoneOS {ifdef DOM_JIL_API_SUPPORT}
phoneOperatorName {ifdef DOM_JIL_API_SUPPORT}
phoneScreenHeightDefault {ifdef DOM_JIL_API_SUPPORT}
phoneScreenWidthDefault {ifdef DOM_JIL_API_SUPPORT}
phoneSoftware {ifdef DOM_JIL_API_SUPPORT}
phoneUserUniqueId {ifdef DOM_JIL_API_SUPPORT}
pixelBottom = [CSS_PROPERTY_bottom]
pixelDepth
pixelHeight = [CSS_PROPERTY_height]
pixelLeft = [CSS_PROPERTY_left]
pixelRight = [CSS_PROPERTY_right]
pixelTop = [CSS_PROPERTY_top]
pixelUnitToMillimeterX {ifdef SVG_DOM}
pixelUnitToMillimeterY {ifdef SVG_DOM}
pixelWidth = [CSS_PROPERTY_width]
placeholder = [ATTR_PLACEHOLDER]
platform
playbackRate {ifdef MEDIA_HTML_SUPPORT}
played {ifdef MEDIA_HTML_SUPPORT}
plugins
pointerEvents = [Markup::SVGA_POINTER_EVENTS, CSS_PROPERTY_pointer_events] {ifdef SVG_DOM}
points {ifdef SVG_DOM}
pointsAtX = [Markup::SVGA_POINTSATX] {ifdef SVG_DOM}
pointsAtY = [Markup::SVGA_POINTSATY] {ifdef SVG_DOM}
pointsAtZ = [Markup::SVGA_POINTSATZ] {ifdef SVG_DOM}
popup {ifdef EXTENSION_SUPPORT}
port
port1 {ifdef DOM_CROSSDOCUMENT_MESSAGING_SUPPORT}
port2 {ifdef DOM_CROSSDOCUMENT_MESSAGING_SUPPORT}
ports {ifdef DOM_CROSSDOCUMENT_MESSAGING_SUPPORT}
posBottom = [CSS_PROPERTY_bottom]
posHeight = [CSS_PROPERTY_height]
posLeft = [CSS_PROPERTY_left]
posRight = [CSS_PROPERTY_right]
posTop = [CSS_PROPERTY_top]
posWidth = [CSS_PROPERTY_width]
position = [CSS_PROPERTY_position]
poster = [ATTR_POSTER] {ifdef MEDIA_HTML_SUPPORT}
preferences {ifdef GADGET_SUPPORT}
prefetchPrimaryLink {ifdef WEBFEEDS_BACKEND_SUPPORT}
prefix
preload = [ATTR_PRELOAD] {ifdef MEDIA_HTML_SUPPORT}
premultipliedAlpha {ifdef CANVAS3D_SUPPORT}
preserveAlpha = [Markup::SVGA_PRESERVEALPHA] {ifdef SVG_DOM}
preserveAspectRatio = [Markup::SVGA_PRESERVEASPECTRATIO] {ifdef SVG_DOM}
preserveDrawingBuffer {ifdef CANVAS3D_SUPPORT}
prevPosition {ifdef DOM_EXTENSIONS_TAB_API_SUPPORT}
prevTabGroup {ifdef DOM_EXTENSIONS_TAB_API_SUPPORT}
prevValue {ifdef DOM2_MUTATION_EVENTS}
prevWindow {ifdef DOM_EXTENSIONS_TAB_API_SUPPORT}
previous
previousElementSibling
previousSibling
primitiveUnits = [Markup::SVGA_PRIMITIVEUNITS] {ifdef SVG_DOM}
private {ifdef DOM_EXTENSIONS_TAB_API_SUPPORT}
processorUtilizationPercent {ifdef DOM_JIL_API_SUPPORT}
prompt = [ATTR_PROMPT]
propagationStopped {ifdef USER_JAVASCRIPT}
properties
propertyName
protocol
prototype
proxyName {ifdef WEBSERVER_SUPPORT}
pubDate = [ATTR_PUBDATE]
publicIP {ifdef WEBSERVER_SUPPORT}
publicId
publicPort {ifdef WEBSERVER_SUPPORT}
publicationDate
queryItems {ifdef WEBSERVER_SUPPORT}
quotes = [CSS_PROPERTY_quotes]
r = [Markup::SVGA_R] {ifdef SVG_DOM}
r1 {ifdef SVG_DOM}
r2 {ifdef SVG_DOM}
radioSignalSource {ifdef DOM_JIL_API_SUPPORT}
radioSignalStrengthPercent {ifdef DOM_JIL_API_SUPPORT}
radiusX = [Markup::SVGA_RADIUS] {ifdef SVG_DOM}
radiusY = [Markup::SVGA_RADIUS] {ifdef SVG_DOM}
range {if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL}
rangeCount {ifdef DOM_SELECTION_SUPPORT}
rangeOverflow
rangeUnderflow
readOnly = [ATTR_READONLY]
readyState
reason {ifdef WEBSOCKETS_SUPPORT}
red {ifdef SVG_DOM}
refX = [Markup::SVGA_REFX] {ifdef SVG_DOM}
refY = [Markup::SVGA_REFY] {ifdef SVG_DOM}
referrer
rel = [ATTR_REL]
relatedNode {ifdef DOM2_MUTATION_EVENTS}
relatedTarget
rememberMe {ifdef OPERA_AUTH_SUPPORT}
renderingMode
rendezvous {if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL}
repeat
request {ifdef WEBSERVER_SUPPORT}
required = [ATTR_REQUIRED]
requiredExtensions = [Markup::SVGA_REQUIREDEXTENSIONS] {ifdef SVG_DOM}
requiredFeatures = [Markup::SVGA_REQUIREDFEATURES] {ifdef SVG_DOM}
resize = [CSS_PROPERTY_resize]
resizeBy
resizeTo
response
responseText
responseType
responseXML
result = [Markup::SVGA_RESULT]
resultType {ifdef DOM3_XPATH}
returnValue
rev = [ATTR_REV]
reversed = [Markup::HA_REVERSED]
rgbColor
right = [CSS_PROPERTY_right]
rightMargin
ringtoneVolume {ifdef DOM_JIL_API_SUPPORT}
robotstxtEnabled {if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL}
root
rootElement {ifdef SVG_DOM}
rotate = [Markup::SVGA_ROTATE] {ifdef SVG_DOM}
rotation {ifdef TOUCH_EVENTS_SUPPORT}
rowIndex
rowSpan = [ATTR_ROWSPAN]
rows = [ATTR_ROWS]
rowsAffected {ifdef DATABASE_STORAGE_SUPPORT}
rules = [ATTR_RULES]
rx = [Markup::SVGA_RX] {ifdef SVG_DOM}
ry = [Markup::SVGA_RY] {ifdef SVG_DOM}
scale = [Markup::SVGA_SCALE] {if defined(SVG_DOM) || defined(TOUCH_EVENTS_SUPPORT)}
scheme = [ATTR_SCHEME]
scope = [ATTR_SCOPE]
scopeListenerAddress {ifdef SCOPE_SUPPORT}
screen
screenLeft
screenPixelToMillimeterX {ifdef SVG_DOM}
screenPixelToMillimeterY {ifdef SVG_DOM}
screenTop
screenX
screenY
scripts
scroll
scrollAmount = [ATTR_SCROLLAMOUNT]
scrollBy
scrollDelay = [ATTR_SCROLLDELAY]
scrollHeight
scrollLeft
scrollTo
scrollTop
scrollWidth
scrollX
scrollY
scrollbar3dlightColor = [CSS_PROPERTY_scrollbar_3dlight_color]
scrollbarArrowColor = [CSS_PROPERTY_scrollbar_arrow_color]
scrollbarBaseColor = [CSS_PROPERTY_scrollbar_base_color]
scrollbarDarkshadowColor = [CSS_PROPERTY_scrollbar_darkshadow_color]
scrollbarFaceColor = [CSS_PROPERTY_scrollbar_face_color]
scrollbarHighlightColor = [CSS_PROPERTY_scrollbar_highlight_color]
scrollbarShadowColor = [CSS_PROPERTY_scrollbar_shadow_color]
scrollbarTrackColor = [CSS_PROPERTY_scrollbar_track_color]
scrolling = [ATTR_SCROLLING]
search
sectionRowIndex
seed = [Markup::SVGA_SEED] {ifdef SVG_DOM}
seekable {ifdef MEDIA_HTML_SUPPORT}
seeking {ifdef MEDIA_HTML_SUPPORT}
selected
selectedIndex
selectedOptions
selectionDirection {ifdef DOM_SELECTION_SUPPORT}
selectionEnd {ifdef DOM_SELECTION_SUPPORT}
selectionStart {ifdef DOM_SELECTION_SUPPORT}
selectionText {ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT}
selectorText
self
servicePath {ifdef WEBSERVER_SUPPORT}
services {if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT}
session {ifdef WEBSERVER_SUPPORT}
sessionStorage {ifdef CLIENTSIDE_STORAGE_SUPPORT}
setInterval
shadowBlur {ifdef CANVAS_SUPPORT}
shadowColor {ifdef CANVAS_SUPPORT}
shadowOffsetX {ifdef CANVAS_SUPPORT}
shadowOffsetY {ifdef CANVAS_SUPPORT}
shape = [ATTR_SHAPE]
shapeRendering = [Markup::SVGA_SHAPE_RENDERING, CSS_PROPERTY_shape_rendering] {ifdef SVG_DOM}
sharedFolder {if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT}
sheet
shiftKey
shortName {ifdef GADGET_SUPPORT}
showImages {ifdef WEBFEEDS_BACKEND_SUPPORT}
singleNodeValue {ifdef DOM3_XPATH}
size = [ATTR_SIZE, CSS_PROPERTY_size]
slope = [Markup::SVGA_SLOPE] {ifdef SVG_DOM}
snapToLines {ifdef MEDIA_HTML_SUPPORT}
snapshotLength {ifdef DOM3_XPATH}
solidColor = [CSS_PROPERTY_solid_color] {ifdef SVG_DOM}
solidOpacity = [CSS_PROPERTY_solid_opacity] {ifdef SVG_DOM}
source
sourceAddress {ifdef DOM_JIL_API_SUPPORT}
spacing = [Markup::SVGA_SPACING] {ifdef SVG_DOM}
span = [ATTR_SPAN]
speakNumeral
specified
specularConstant = [Markup::SVGA_SPECULARCONSTANT] {ifdef SVG_DOM}
specularExponent = [Markup::SVGA_SPECULAREXPONENT] {ifdef SVG_DOM}
speed {ifdef DOM_GEOLOCATION_SUPPORT}
speeddial {ifdef EXTENSION_SUPPORT}
spellcheck {ifdef INTERNAL_SPELLCHECK_SUPPORT}
spreadMethod = [Markup::SVGA_SPREADMETHOD] {ifdef SVG_DOM}
src = [ATTR_SRC, CSS_PROPERTY_src]
srcElement
srcURL {ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT}
srclang = [Markup::HA_SRCLANG] {ifdef MEDIA_HTML_SUPPORT}
standby = [ATTR_STANDBY]
start = [ATTR_START]
startContainer {ifdef DOM2_RANGE}
startOffset = [Markup::SVGA_STARTOFFSET] {if defined(DOM2_RANGE) || defined(SVG_DOM)}
startTime {if defined(MEDIA_HTML_SUPPORT) || defined(DOM_JIL_API_SUPPORT)}
state
status
statusText {ifdef DOM_HTTP_SUPPORT}
stdDeviationX = [Markup::SVGA_STDDEVIATION] {ifdef SVG_DOM}
stdDeviationY = [Markup::SVGA_STDDEVIATION] {ifdef SVG_DOM}
stencil {ifdef CANVAS3D_SUPPORT}
step = [ATTR_STEP]
stepMismatch
stitchTiles = [Markup::SVGA_STITCHTILES] {ifdef SVG_DOM}
stopColor = [Markup::SVGA_STOP_COLOR, CSS_PROPERTY_stop_color] {ifdef SVG_DOM}
stopOpacity = [Markup::SVGA_STOP_OPACITY, CSS_PROPERTY_stop_opacity] {ifdef SVG_DOM}
storageArea {ifdef CLIENTSIDE_STORAGE_SUPPORT}
stpVersion {ifdef SCOPE_SUPPORT}
stringValue {ifdef DOM3_XPATH}
stroke = [Markup::SVGA_STROKE, CSS_PROPERTY_stroke] {ifdef SVG_DOM}
strokeDasharray = [Markup::SVGA_STROKE_DASHARRAY, CSS_PROPERTY_stroke_dasharray] {ifdef SVG_DOM}
strokeDashoffset = [Markup::SVGA_STROKE_DASHOFFSET, CSS_PROPERTY_stroke_dashoffset] {ifdef SVG_DOM}
strokeLinecap = [Markup::SVGA_STROKE_LINECAP, CSS_PROPERTY_stroke_linecap] {ifdef SVG_DOM}
strokeLinejoin = [Markup::SVGA_STROKE_LINEJOIN, CSS_PROPERTY_stroke_linejoin] {ifdef SVG_DOM}
strokeMiterlimit = [Markup::SVGA_STROKE_MITERLIMIT, CSS_PROPERTY_stroke_miterlimit] {ifdef SVG_DOM}
strokeOpacity = [Markup::SVGA_STROKE_OPACITY, CSS_PROPERTY_stroke_opacity] {ifdef SVG_DOM}
strokeStyle {ifdef CANVAS_SUPPORT}
strokeWidth = [Markup::SVGA_STROKE_WIDTH, CSS_PROPERTY_stroke_width] {ifdef SVG_DOM}
style = [ATTR_STYLE]
styleFloat = [CSS_PROPERTY_float]
styleSheet
styleSheets
subject {ifdef DOM_JIL_API_SUPPORT}
subscribedFeeds {ifdef WEBFEEDS_BACKEND_SUPPORT}
suffixes
summary = [ATTR_SUMMARY]
surfaceScale = [Markup::SVGA_SURFACESCALE] {ifdef SVG_DOM}
sweepFlag {ifdef SVG_DOM}
systemId
systemLanguage = [Markup::SVGA_SYSTEMLANGUAGE] {ifdef SVG_DOM}
systemNewLine {ifdef DOM_GADGET_FILE_API_SUPPORT}
tBodies
tFoot
tHead
tab {ifdef DOM_EXTENSIONS_TAB_API_SUPPORT}
tabGroup {ifdef DOM_EXTENSIONS_TAB_API_SUPPORT}
tabGroups {ifdef DOM_EXTENSIONS_TAB_API_SUPPORT}
tabIndex = [ATTR_TABINDEX]
tableLayout = [CSS_PROPERTY_table_layout]
tableValues = [Markup::SVGA_TABLEVALUES] {ifdef SVG_DOM}
tabs {ifdef DOM_EXTENSIONS_TAB_API_SUPPORT}
tagName
target = [Markup::SVGA_TARGET, ATTR_TARGET]
targetElement {ifdef SVG_DOM}
targetFps {ifdef SVG_SUPPORT}
targetTouches {ifdef TOUCH_EVENTS_SUPPORT}
targetURLPatterns {ifdef DOM_EXTENSIONS_CONTEXT_MENU_API_SUPPORT}
targetX = [Markup::SVGA_TARGETX] {ifdef SVG_DOM}
targetY = [Markup::SVGA_TARGETY] {ifdef SVG_DOM}
text = [ATTR_TEXT]
textAlign = [CSS_PROPERTY_text_align]
textAnchor = [Markup::SVGA_TEXT_ANCHOR, CSS_PROPERTY_text_anchor] {ifdef SVG_DOM}
textBaseline {ifdef CANVAS_SUPPORT}
textContent
textDecoration = [CSS_PROPERTY_text_decoration]
textIndent = [CSS_PROPERTY_text_indent]
textLength = [Markup::SVGA_TEXTLENGTH]
textOverflow = [CSS_PROPERTY_text_overflow]
textRendering = [Markup::SVGA_TEXT_RENDERING, CSS_PROPERTY_text_rendering] {ifdef SVG_DOM}
textShadow = [CSS_PROPERTY_text_shadow]
textTracks {ifdef MEDIA_HTML_SUPPORT}
textTransform = [CSS_PROPERTY_text_transform]
time {ifdef DOM_JIL_API_SUPPORT}
timeStamp
timeout {ifdef DOM_HTTP_SUPPORT}
timestamp {ifdef DOM_GEOLOCATION_SUPPORT}
title = [Markup::SVGA_TITLE, ATTR_TITLE]
toElement
tooLong
toolbar {ifdef EXTENSION_SUPPORT}
top = [CSS_PROPERTY_top]
topWindow {ifdef EXTENSION_SUPPORT}
total
totalMemory {ifdef DOM_JIL_API_SUPPORT}
touches {ifdef TOUCH_EVENTS_SUPPORT}
track {ifdef MEDIA_HTML_SUPPORT}
transform = [Markup::SVGA_TRANSFORM, CSS_PROPERTY_transform] {if defined SVG_DOM || defined CSS_TRANSFORMS}
transformOrigin = [CSS_PROPERTY_transform_origin] {ifdef CSS_TRANSFORMS}
transition = [CSS_PROPERTY_transition] {ifdef CSS_TRANSITIONS}
transitionDelay = [CSS_PROPERTY_transition_delay] {ifdef CSS_TRANSITIONS}
transitionDuration = [CSS_PROPERTY_transition_duration] {ifdef CSS_TRANSITIONS}
transitionProperty = [CSS_PROPERTY_transition_property] {ifdef CSS_TRANSITIONS}
transitionTimingFunction = [CSS_PROPERTY_transition_timing_function] {ifdef CSS_TRANSITIONS}
type = [Markup::SVGA_TYPE, ATTR_TYPE]
typeMismatch
types {if defined DRAG_SUPPORT || defined USE_OP_CLIPBOARD}
unicodeBidi = [CSS_PROPERTY_unicode_bidi]
unitType {ifdef SVG_DOM}
uniteDeviceName {if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT}
uniteServiceName {ifdef UPNP_SUPPORT}
uniteUser {if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT}
unread {ifdef WEBFEEDS_BACKEND_SUPPORT}
unselectable = [ATTR_UNSELECTABLE]
updateInterval {ifdef WEBFEEDS_BACKEND_SUPPORT}
upload {if defined DOM_HTTP_SUPPORT && defined PROGRESS_EVENTS_SUPPORT}
upnpDeviceIcon {if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT}
upnpDevicePayload {if defined WEBSERVER_SUPPORT || defined UPNP_SUPPORT}
upnpEnabled {if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT && defined OPERAUNITE_URL}
uri
url {if defined CLIENTSIDE_STORAGE_SUPPORT || defined UPNP_SUPPORT || defined WEBSOCKETS_SUPPORT}
useCurrentView {ifdef SVG_DOM}
useMap = [ATTR_USEMAP]
userAccountBalance {ifdef DOM_JIL_API_SUPPORT}
userAgent
userDefinedTitle {ifdef WEBFEEDS_BACKEND_SUPPORT}
userLanguage
userName {ifdef WEBSERVER_SUPPORT}
userSubscriptionType {ifdef DOM_JIL_API_SUPPORT}
userZoom = [CSS_PROPERTY_user_zoom]
username {ifdef OPERA_AUTH_SUPPORT}
users {ifdef WEBSERVER_SUPPORT}
vAlign = [ATTR_VALIGN]
vLink = [ATTR_VLINK]
valid
validationMessage
validity
validityPeriodHours {ifdef DOM_JIL_API_SUPPORT}
value = [ATTR_VALUE]
valueAsDate
valueAsNumber
valueAsString {ifdef SVG_DOM}
valueInSpecifiedUnits {ifdef SVG_DOM}
valueMissing
valueType = [ATTR_VALUETYPE]
values = [Markup::SVGA_VALUES] {ifdef SVG_DOM}
vectorEffect = [Markup::SVGA_VECTOR_EFFECT, CSS_PROPERTY_vector_effect] {ifdef SVG_DOM}
version = [ATTR_VERSION]
verticalAlign = [CSS_PROPERTY_vertical_align]
vibrationSetting {ifdef DOM_JIL_API_SUPPORT}
videoHeight {ifdef MEDIA_HTML_SUPPORT}
videoWidth {ifdef MEDIA_HTML_SUPPORT}
view
viewBox = [Markup::SVGA_VIEWBOX] {ifdef SVG_DOM}
viewport {ifdef SVG_DOM}
viewportElement {ifdef SVG_DOM}
viewportFill = [CSS_PROPERTY_viewport_fill] {ifdef SVG_DOM}
viewportFillOpacity = [CSS_PROPERTY_viewport_fill_opacity] {ifdef SVG_DOM}
visibility = [CSS_PROPERTY_visibility]
visibilityState
visibleToLocalNetwork {if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT}
visibleToSearchEngines {if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT}
visibleToServiceDiscovery {if defined GADGET_SUPPORT && defined WEBSERVER_SUPPORT}
vlinkColor
volume
vspace = [ATTR_VSPACE]
wasClean {ifdef WEBSOCKETS_SUPPORT}
whatToShow {ifdef DOM2_TRAVERSAL}
wheelDelta
wheelDeltaX
wheelDeltaY
which
whiteSpace = [CSS_PROPERTY_white_space]
wholeText
widgetMode
widgets {ifdef GADGET_SUPPORT}
widows = [CSS_PROPERTY_widows]
width = [Markup::SVGA_WIDTH, ATTR_WIDTH, CSS_PROPERTY_width]
willValidate
window
windows {ifdef EXTENSION_SUPPORT}
withCredentials {ifdef CORS_SUPPORT}
wordSpacing = [CSS_PROPERTY_word_spacing]
wordWrap = [CSS_PROPERTY_overflow_wrap]
workPhone {ifdef DOM_JIL_API_SUPPORT}
wrap = [ATTR_WRAP]
writingMode = [Markup::SVGA_WRITING_MODE, CSS_PROPERTY_writing_mode] {ifdef SVG_DOM}
x = [Markup::SVGA_X]
x1 = [Markup::SVGA_X1] {ifdef SVG_DOM}
x2 = [Markup::SVGA_X2] {ifdef SVG_DOM}
xAxis {ifdef DOM_JIL_API_SUPPORT}
xChannelSelector = [Markup::SVGA_XCHANNELSELECTOR] {ifdef SVG_DOM}
xmlbase {ifdef SVG_DOM}
xmlspace {ifdef SVG_DOM}
y = [Markup::SVGA_Y]
y1 = [Markup::SVGA_Y1] {ifdef SVG_DOM}
y2 = [Markup::SVGA_Y2] {ifdef SVG_DOM}
yAxis {ifdef DOM_JIL_API_SUPPORT}
yChannelSelector = [Markup::SVGA_YCHANNELSELECTOR] {ifdef SVG_DOM}
z = [Markup::SVGA_Z] {ifdef SVG_DOM}
zAxis {ifdef DOM_JIL_API_SUPPORT}
zIndex = [CSS_PROPERTY_z_index]
zoom = [CSS_PROPERTY_zoom]
zoomAndPan {ifdef SVG_DOM}
