/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; -*-
 *
 * Copyright (C) 2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "sync.OpSyncState";
require SUPPORT_DATA_SYNC;

include "modules/sync/sync_state.h";

test("SetSyncState")
{
	OpSyncState sync_state;
	verify_success(sync_state.SetSyncState(UNI_L("17")));
	verify_string(sync_state.GetSyncState(), "17");
	OpString state;
	verify_success(sync_state.GetSyncState(state));
	verify_string(state, "17");
}

test("SetDirty")
{
	OpSyncState sync_state;
	verify(!sync_state.GetDirty());
	sync_state.SetDirty(TRUE);
	verify(sync_state.GetDirty());
	sync_state.SetDirty(FALSE);
	verify(!sync_state.GetDirty());
}

test("SetSyncState(supports)")
{
	OpSyncState sync_state;
	verify_success(sync_state.SetSyncState(UNI_L("23"), SYNC_SUPPORTS_BOOKMARK));
	verify_string(sync_state.GetSyncState(SYNC_SUPPORTS_BOOKMARK), "23");
	OpString state;
	verify_success(sync_state.GetSyncState(state, SYNC_SUPPORTS_BOOKMARK));
	verify_string(state, "23");
}

test("ResetSyncState(supports)")
require success "SetSyncState(supports)";
{
	OpSyncState sync_state;
	verify_success(sync_state.SetSyncState(UNI_L("23"), SYNC_SUPPORTS_BOOKMARK));
	verify_success(sync_state.ResetSyncState(SYNC_SUPPORTS_BOOKMARK));
	verify(sync_state.IsDefaultValue(SYNC_SUPPORTS_BOOKMARK));
	verify_string(sync_state.GetSyncState(SYNC_SUPPORTS_BOOKMARK), "0");
}

test("Update")
require success "ResetSyncState(supports)";
{
	OpSyncState src;
	verify_success(src.SetSyncState(UNI_L("17")));
	verify_success(src.SetSyncState(UNI_L("23"), SYNC_SUPPORTS_BOOKMARK));
	verify_success(src.SetSyncState(UNI_L("8"), SYNC_SUPPORTS_CONTACT));

	OpSyncState target;
	verify_success(target.SetSyncState(UNI_L("1")));
	verify_success(target.SetSyncState(UNI_L("2"), SYNC_SUPPORTS_BOOKMARK));
	verify_success(target.SetSyncState(UNI_L("3"), SYNC_SUPPORTS_CONTACT));
	verify_success(target.ResetSyncState(SYNC_SUPPORTS_BOOKMARK));

	// Updating target from src shall not overwrite the reset state
	verify_success(target.Update(src));

	verify_string(target.GetSyncState(), "17");
	verify(target.IsDefaultValue(SYNC_SUPPORTS_BOOKMARK));
	verify_string(target.GetSyncState(SYNC_SUPPORTS_BOOKMARK), "0");
	verify_string(target.GetSyncState(SYNC_SUPPORTS_CONTACT), "8");
}

test("IsOutOfSync")
{
	OpSyncState sync_state;
	verify_success(sync_state.SetSyncState(UNI_L("17")));
	verify_success(sync_state.SetSyncState(UNI_L("23"), SYNC_SUPPORTS_BOOKMARK));
	verify_success(sync_state.SetSyncState(UNI_L("17"), SYNC_SUPPORTS_CONTACT));
	verify(sync_state.IsOutOfSync(SYNC_SUPPORTS_BOOKMARK));
	verify(!sync_state.IsOutOfSync(SYNC_SUPPORTS_CONTACT));
}

test("IsDefaultValue")
{
	OpSyncState sync_state;
	verify_success(sync_state.SetSyncState(UNI_L("17")));
	verify_success(sync_state.SetSyncState(UNI_L("23"), SYNC_SUPPORTS_BOOKMARK));
	verify_success(sync_state.SetSyncState(UNI_L("0"), SYNC_SUPPORTS_CONTACT));
	verify(!sync_state.IsDefaultValue(SYNC_SUPPORTS_BOOKMARK));
	verify(sync_state.IsDefaultValue(SYNC_SUPPORTS_CONTACT));

	// empty state should be also treated as default (DSK-350014)
	verify(sync_state.IsDefaultValue(SYNC_SUPPORTS_SPEEDDIAL_2));
}

test("ReadPrefs")
require PREFS_WRITE;
{
	/* Note: to restore the sync-state prefs we have to assume that
	 * ReadPrefs/WritePrefs works as expected: */
	OpSyncState save_state;
	verify_success(save_state.ReadPrefs());

	OpSyncState write_state;
	verify_success(write_state.SetSyncState(UNI_L("99")));
	unsigned int i;
	for (i=0; i<SYNC_SUPPORTS_MAX; i++)
	{
		OpString sync_state;
		sync_state.AppendFormat(UNI_L("%d"), 100 + i);
		verify_success(write_state.SetSyncState(sync_state, static_cast<OpSyncSupports>(i)));
	}
	verify_success(write_state.WritePrefs());

	OpSyncState read_state;
	verify_success(read_state.ReadPrefs());
	verify_string(read_state.GetSyncState(), write_state.GetSyncState());
	for (i=0; i<SYNC_SUPPORTS_MAX; i++)
	{
		OpSyncSupports supports = static_cast<OpSyncSupports>(i);
		switch (supports) {
			/* The following support types are only stored as prefs, if they
			 * are enabled: */
#ifndef SYNC_HAVE_BOOKMARKS
		case SYNC_SUPPORTS_BOOKMARK:
#endif // !SYNC_HAVE_BOOKMARKS
#ifndef SYNC_HAVE_EXTENSIONS
		case SYNC_SUPPORTS_EXTENSION:
#endif // SYNC_HAVE_EXTENSIONS
#ifndef SYNC_HAVE_NOTES
		case SYNC_SUPPORTS_NOTE:
#endif // !SYNC_HAVE_NOTES
#ifndef SYNC_HAVE_PASSWORD_MANAGER
		case SYNC_SUPPORTS_PASSWORD_MANAGER:
#endif // !SYNC_HAVE_PASSWORD_MANAGER
#ifndef SYNC_HAVE_SEARCHES
		case SYNC_SUPPORTS_SEARCHES:
#endif // !SYNC_HAVE_SEARCHES
#if !defined(SYNC_HAVE_SPEED_DIAL) || defined(SYNC_HAVE_SPEED_DIAL_2)
		case SYNC_SUPPORTS_SPEEDDIAL:
#endif // !SYNC_HAVE_SPEED_DIAL or SYNC_HAVE_SPEED_DIAL_2
#if !defined(SYNC_HAVE_SPEED_DIAL) || !defined(SYNC_HAVE_SPEED_DIAL_2)
		case SYNC_SUPPORTS_SPEEDDIAL_2:
#endif // !SYNC_HAVE_SPEED_DIAL or !SYNC_HAVE_SPEED_DIAL_2
#ifndef SYNC_HAVE_TYPED_HISTORY
		case SYNC_SUPPORTS_TYPED_HISTORY:
#endif // !SYNC_HAVE_TYPED_HISTORY
#ifndef SYNC_CONTENT_FILTERS
		case SYNC_SUPPORTS_URLFILTER:
#endif // !SYNC_CONTENT_FILTERS

			/* contact and feeds are not yet supported, so they are not yet
			 * stored in prefs: */
		case SYNC_SUPPORTS_CONTACT:
		case SYNC_SUPPORTS_FEED:

		case SYNC_SUPPORTS_ENCRYPTION:
			/* SYNC_SUPPORTS_ENCRYPTION is not persistent, so on calling
			 * ReadPrefs() on an empty state, this is set to "0": */
			verify_string(read_state.GetSyncState(supports), "0");
			break;

		default:
			verify_string(read_state.GetSyncState(supports), write_state.GetSyncState(supports));
		}
	}
}
finally
{
	OpStatus::Ignore(save_state.WritePrefs());
}

test("ReadPrefs don't overwrite encryption-state")
require PREFS_WRITE;
require success "ReadPrefs";
{
	/* The sync-state for the encryption support is not stored in prefs. And on
	 * reading the prefs-state we only set the encryption sync-state to "0" if
	 * the sync-state is empty. */
	OpSyncState save_state;
	verify_success(save_state.ReadPrefs());

	OpSyncState write_state;
	verify_success(write_state.SetSyncState(UNI_L("99")));
	unsigned int i;
	for (i=0; i<SYNC_SUPPORTS_MAX; i++)
	{
		OpString sync_state;
		sync_state.AppendFormat(UNI_L("%d"), 100 + i);
		verify_success(write_state.SetSyncState(sync_state, static_cast<OpSyncSupports>(i)));
	}
	verify_success(write_state.WritePrefs());

	OpSyncState read_state;
	verify_success(read_state.ReadPrefs());
	verify_success(read_state.SetSyncState(UNI_L("22"), SYNC_SUPPORTS_ENCRYPTION));
	verify_string(read_state.GetSyncState(SYNC_SUPPORTS_ENCRYPTION), "22");
}
finally
{
	OpStatus::Ignore(save_state.WritePrefs());
}

test("SetSyncStatePersistent")
require PREFS_WRITE;
require SYNC_HAVE_BOOKMARKS;
require success "ReadPrefs";
{
	/* If a sync-state is marked as not persistent, the prefs entry is not
	 * written. */
	OpSyncState save_state;
	verify_success(save_state.ReadPrefs());

	OpSyncState write_state;
	verify_success(write_state.SetSyncState(UNI_L("200"), SYNC_SUPPORTS_BOOKMARK));
	verify_success(write_state.WritePrefs());

	// Now change the sync-state
	verify_success(write_state.SetSyncState(UNI_L("2999"), SYNC_SUPPORTS_BOOKMARK));
	// and set to not persistent
	write_state.SetSyncStatePersistent(SYNC_SUPPORTS_BOOKMARK, FALSE);
	// WritePrefs() shall now not write this prefs value:
	verify_success(write_state.WritePrefs());

	OpSyncState read_state;
	verify_success(read_state.ReadPrefs());
	verify_string(read_state.GetSyncState(SYNC_SUPPORTS_BOOKMARK), "200");
}
finally
{
	OpStatus::Ignore(save_state.WritePrefs());
}

table table_OpSyncSupports (int, char*)
{
	{ SYNC_SUPPORTS_BOOKMARK, "SYNC_SUPPORTS_BOOKMARK" },
	{ SYNC_SUPPORTS_CONTACT, "SYNC_SUPPORTS_CONTACT" },
	{ SYNC_SUPPORTS_ENCRYPTION, "SYNC_SUPPORTS_ENCRYPTION" },
	{ SYNC_SUPPORTS_FEED, "SYNC_SUPPORTS_FEED" },
	{ SYNC_SUPPORTS_EXTENSION, "SYNC_SUPPORTS_EXTENSION" },
	{ SYNC_SUPPORTS_NOTE, "SYNC_SUPPORTS_NOTE" },
	{ SYNC_SUPPORTS_PASSWORD_MANAGER, "SYNC_SUPPORTS_PASSWORD_MANAGER" },
	{ SYNC_SUPPORTS_SEARCHES, "SYNC_SUPPORTS_SEARCHES" },
	{ SYNC_SUPPORTS_SPEEDDIAL, "SYNC_SUPPORTS_SPEEDDIAL" },
	{ SYNC_SUPPORTS_SPEEDDIAL_2, "SYNC_SUPPORTS_SPEEDDIAL_2" },
	{ SYNC_SUPPORTS_TYPED_HISTORY, "SYNC_SUPPORTS_TYPED_HISTORY" },
	{ SYNC_SUPPORTS_URLFILTER, "SYNC_SUPPORTS_URLFILTER" },
}

foreach (supports, name) from table_OpSyncSupports
{
	test("SyncSupportsState::SetSupports(" name ", true)")
	{
		SyncSupportsState flag;
		flag.SetSupports(supports, true);
		for (unsigned int i=0; i<SYNC_SUPPORTS_MAX; i++)
		{
			if (i == supports)
				verify(flag.HasSupports(static_cast<OpSyncSupports>(i)));
			else
				verify(!flag.HasSupports(static_cast<OpSyncSupports>(i)));
		}
	}
}

foreach (supports, name) from table_OpSyncSupports
{
	test("SyncSupportsState::SetSupports(" name ", false)")
	{
		SyncSupportsState flag;
		for (unsigned int i=0; i<SYNC_SUPPORTS_MAX; i++)
			flag.SetSupports(static_cast<OpSyncSupports>(i), true);
		flag.SetSupports(supports, false);
		for (unsigned int i=0; i<SYNC_SUPPORTS_MAX; i++)
		{
			if (i == supports)
				verify(!flag.HasSupports(static_cast<OpSyncSupports>(i)));
			else
				verify(flag.HasSupports(static_cast<OpSyncSupports>(i)));
		}
	}
}
