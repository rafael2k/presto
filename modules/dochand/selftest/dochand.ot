/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "dochand";
require init;

include "modules/dochand/winman.h";
include "modules/dochand/win.h";
include "modules/dochand/fdelm.h";
include "modules/doc/frm_doc.h";
include "modules/dochand/docman.h";
include "modules/logdoc/logdoc.h";
include "modules/pi/OpSystemInfo.h";
include "modules/url/url2.h";
include "modules/windowcommander/src/WindowCommander.h";
include "modules/prefs/prefsmanager/collections/pc_doc.h";
include "modules/prefs/prefsmanager/prefstypes.h";
include "modules/hardcore/timer/optimer.h";
include "modules/windowcommander/src/TransferManagerDownload.h";

global
{
#ifdef WEB_HANDLERS_SUPPORT

#define HANDLER_TEST_PROTOCOL UNI_L("webhandlertest")
#define HANDLER_TEST_REQUEST UNI_L("webhandlertest://web.handles.test/")
#define HANDLER_TEST_URL UNI_L("about:blank?url=%s")
#define HANDLER_TEST_URL_CMP UNI_L("about:blank?url=webhandlertest%3A%2F%2Fweb.handles.test%2F")
#define WEB_HANDLERS_TEST_TIMEOUT (15 * 1000)

	enum WebHandlersUsageConfirmationAnswer
	{
		OK,
		OK_DONT_ASK_PREPARE,
		OK_DONT_ASK,
		CANCEL
	};

	class TestOpDocumentListener : public NullDocumentListener
	{
		OpDocumentListener* document_listener;
		Window* window;
		WebHandlersUsageConfirmationAnswer type;
		OpTimer* test_timer;
		OpTimerListener* timer_listener;
	public:
		TestOpDocumentListener(Window *window, WebHandlersUsageConfirmationAnswer test_type, OpTimer* test_timer)
		: window(window)
		, type(test_type)
		, test_timer(test_timer)
		, timer_listener(NULL)
		{
			document_listener = window->GetWindowCommander()->GetDocumentListener();
			window->GetWindowCommander()->SetDocumentListener(this);
		}

		~TestOpDocumentListener()
		{
			test_timer->Stop();
			OP_DELETE(timer_listener);
			window->GetWindowCommander()->SetDocumentListener(document_listener);
		}

		void OnWebHandler(OpWindowCommander* commander, OpDocumentListener::WebHandlerCallback* callback)
		{
			switch(type)
			{
				case OK:
					callback->OnOK(FALSE, NULL);
					break;

				case OK_DONT_ASK_PREPARE:
					callback->OnOK(TRUE, NULL);
					ST_passed();
					OP_DELETE(this);
					break;

				case OK_DONT_ASK:
					ST_failed("Don't supposed to be called\n");

				case CANCEL:
					callback->OnCancel();
					window->GetWindowCommander()->GetLoadingListener()->OnLoadingFinished(commander, OpLoadingListener::LOADING_SUCCESS);
					break;
			}
		}

		void SetTimerListener(OpTimerListener* timer_listener)
		{
			this->timer_listener = timer_listener;
		}
	};

	class TestOpLoadingListener : public NullLoadingListener
	{
		OpLoadingListener* loading_listener;
		TestOpDocumentListener* test_document_listener;
		Window* window;
		WebHandlersUsageConfirmationAnswer type;
	public:
		TestOpLoadingListener(Window *window, TestOpDocumentListener* tst_doc_listener, WebHandlersUsageConfirmationAnswer test_type)
		: test_document_listener(tst_doc_listener)
		, window(window)
		, type(test_type)
		{
			loading_listener = window->GetWindowCommander()->GetLoadingListener();
			window->GetWindowCommander()->SetLoadingListener(this);
		}

		~TestOpLoadingListener()
		{
			window->GetWindowCommander()->SetLoadingListener(loading_listener);
			OP_DELETE(test_document_listener);
		}

		void OnLoadingFinished(OpWindowCommander* commander, LoadingFinishStatus status)
		{
			switch(type)
			{
				case OK:
					if (window->GetCurrentURL().GetAttribute(URL::KUniName_With_Fragment_Username_Password_Escaped_NOT_FOR_UI).CompareI(HANDLER_TEST_URL_CMP) == 0)
					{
						ST_passed();
					}
					else
					{
						ST_failed("Wrong URL loaded");
					}
					break;

				case OK_DONT_ASK:
					if (window->GetCurrentURL().GetAttribute(URL::KUniName_With_Fragment_Username_Password_Escaped_NOT_FOR_UI).CompareI(HANDLER_TEST_URL_CMP) == 0)
					{
						ST_passed();
					}
					else
					{
						ST_failed("Wrong URL loaded");
					}
					break;

				case CANCEL:
					if (window->GetCurrentURL().GetAttribute(URL::KUniName_With_Fragment_Username_Password_Escaped_NOT_FOR_UI).CompareI(HANDLER_TEST_URL_CMP) != 0)
					{
						ST_passed();
					}
					else
					{
						ST_failed("Wrong URL loaded");
					}
					break;
			}
			OP_DELETE(this);
		}
	};

	TestOpDocumentListener* test_document_listener;
	TestOpLoadingListener* test_loading_listener;
	Window* g_window;

	OpFile local_ignore_file;
	OpFile local_ignore_file_backup;

	OpTimer test_timer;
	class TestTimerListener : public OpTimerListener
	{
	TestOpDocumentListener* test_document_listener;
	TestOpLoadingListener* test_loading_listener;

	public:
		TestTimerListener(TestOpDocumentListener* test_document_listener, TestOpLoadingListener* test_loading_listener)
		: test_document_listener(test_document_listener)
		, test_loading_listener(test_loading_listener)
		{}

		void OnTimeOut(OpTimer* timer)
		{
			ST_failed("Test timed out\n");
				ST_failed("Test timed out\n");
			if (test_document_listener && !test_loading_listener)
				OP_DELETE(test_document_listener);
			OP_DELETE(test_loading_listener);
		}
	};
#endif // WEB_HANDLERS_SUPPORT
}

language ecmascript;

html
{
	//! <html><body onload="document.pip=true;">
	//! <form><input name="outerpw" type="password">
	//! <input name="outertxt" type="text"></form>
	//! <iframe id="idoc" width=100 height=100 xsrc="data:text/plain,Hej"></iframe>
	//! </body></html>
}

test("dochand.history - part #0")
	async;
	disabled; // Not needed
{
	function waitForDocument()
	{
		if (document.rounds)
		{
			document.rounds = 0;
		}
		document.rounds++;

		if (document.pip)
		{
			ST_passed();
		}
		else
		{
			if (document.rounds > 20)
			{
				ST_failed("Document was never loaded", "dochand.ot", 0);
			}
			else
			{
				setTimeout(waitForDocument, 10);
			}
		}
	}

	waitForDocument();
}

test("dochand.history - part #1")
{
	verify(document);
	var idoc = document.getElementById("idoc");
	verify(idoc);

	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0].outerpw);
	document.forms[0].outerpw.value = "text1";
	verify(document.forms[0].outerpw.value == "text1");
	document.forms[0].outertxt.value = "text2";
	verify(document.forms[0].outertxt.value == "text2");

	// write first document
	verify(idoc.contentDocument);
	idoc.contentDocument.open();
	idoc.contentDocument.write("<html><body><form><input name='innerpw' type='password'><input name='innertxt' type='text'></form></body></html>");
	idoc.contentDocument.close();

	verify(document.forms[0].outerpw.value == "text1");
	verify(document.forms[0].outertxt.value == "text2");

	var innerDoc = idoc.contentDocument;
	verify(innerDoc.forms[0]);
	verify(innerDoc.forms[0].innerpw);
	innerDoc.forms[0].innerpw.value = "text3";
	verify(innerDoc.forms[0].innerpw.value == "text3");
	verify(innerDoc.forms[0].innertxt);
	innerDoc.forms[0].innertxt.value = "text4";
	verify(innerDoc.forms[0].innertxt.value == "text4");

	// write new inner document
	idoc.contentDocument.open();
	var innerDoc = idoc.contentDocument;
	innerDoc.write("<html><body><div id='tmp'>Dummy</div></body></html>");
	innerDoc.close();

	verify(innerDoc.getElementById("tmp"));

	document.firstparthistoryclearpwd = true;

}

test("dochand.history - part #2")
	require success "dochand.history - part #1";
	async;
{
	//	alert('beep1');
	if (!document.firstparthistoryclearpwd)
	{
		ST_failed("Setup has not completed successfully", "dochand.ot", 0);
		return;
	}

	//	alert('beep2');
	function testPart2() {
		try
		{
			if (document.forms[0].outerpw.value != "text1")
			{
				ST_failed("outerpw has lost its value", "dochand.ot", 0);
				return;
			}
			if (document.forms[0].outertxt.value != "text2")
			{
				ST_failed("outertxt has lost its value", "dochand.ot", 0);
				return;
			}
			//	alert('beep3');
			var idoc = document.getElementById("idoc");
			if (!idoc)
			{
				ST_failed("There is no iframe? Where did it go?", "dochand.ot", 0);
				return;
			}
			//	alert('beep3a');
			var innerDoc = idoc.contentDocument;
			if (!innerDoc)
			{
				ST_failed("There is no inner document", "dochand.ot", 0);
				return;
			}

			if (!innerDoc.documentElement)
			{
				ST_failed("There are no contents in the inner document, see bug 181807", "dochand.ot", 0);
				return;
			}

			//	alert('beep3b');
			if (innerDoc.getElementById("tmp"))
			{
				ST_failed("The new document isn't replaced by the old", "dochand.ot", 0);
				return;
			}
			//	alert('beep3c');
			if (!innerDoc.forms)
			{
				ST_failed("There is no forms array in the inner document", "dochand.ot", 0);
				return;
			}
			//	alert('beep3c2');
			var f = innerDoc.forms[0];
			if (!f)
			{
				ST_failed("There is no form in the inner document", "dochand.ot", 0);
				return;
			}
			//	alert('beep3d');
			if (!f.innerpw > 0)
			{
				ST_failed("Missing innerpw form element", "dochand.ot", 0);
				return;
			}
			//	alert('beep4');
			if (!f.innertxt > 0)
			{
				ST_failed("Missing innertxt form element", "dochand.ot", 0);
				return;
			}
			if (f.innertxt.value != "text4")
			{
				ST_failed("The text in the old document's text field is lost", "dochand.ot", 0);
				return;
			}
			//	alert('beep5');
			ST_passed();
		}
		catch(e)
		{
			//	alert('beep7');
			var es = e.toString();
			var bti = es.indexOf('Backtrace:');
			ST_failed('Exception: ' + (bti == -1 ? es : es.substring(0, bti) + 'Backtrace: <skipped>'),"dochand.ot, uud" ,0);
		}
	}
	// We must give the js environment a pause to change history
	// things. We can not do it directly after this test because
	// scripts will be stopped from starting after the history
	// operation.
	//	alert("hopp2");
	var id = setTimeout(testPart2, 1000);
	if (!id)
	{
		ST_failed("setTimeout call failed", "dochand.ot", 0);
		return;
	}
	//	alert("hopp3");

	history.go(-1); // Go back to the previous document
	//	alert("hopp4");

	// Now we have to let the document "load"
}

test("New empty window with about:blank")
language C++;
{
	BOOL3 new_window = MAYBE;
	BOOL3 background = MAYBE;
	Window* win = NULL;

	OP_ASSERT(g_windowManager);
	win = g_windowManager->GetAWindow(FALSE, new_window, background);
	verify(win);
	DocumentManager* dochand = win->DocManager();
	/* If the window we retrieved from g_windowManager->GetAWindow()
	 * is currently loading a url, we want to stop loading that
	 * document immediately: */
	dochand->StopLoading(FALSE /* FALSE = abort immediately*/);
	verify(dochand->GetLoadStatus() == NOT_LOADING);
	FramesDocument* doc = dochand->GetCurrentDoc();
	verify(!doc);
	OP_STATUS status = dochand->CreateInitialEmptyDocument(FALSE, FALSE);
	verify(OpStatus::IsSuccess(status));
	verify(dochand->GetLoadStatus() == NOT_LOADING);
	URL blank_url = g_url_api->GetURL("about:blank");
	verify(!blank_url.IsEmpty());
	verify(dochand->GetCurrentURL() == blank_url);
	doc = dochand->GetCurrentDoc();
	verify(doc);
	LogicalDocument* logdoc = doc->GetLogicalDocument();
	verify(logdoc);
	verify(logdoc->IsParsed());
	verify(logdoc->IsLoaded());

	HTML_Element* root = logdoc->GetRoot();
	verify(root);

	// How to check that it really is about:blank?
}
finally
{
	if (win)
		win->Close();
	win = NULL;
}

html
{
	//! <html><frameset cols="10,*">
	//! <frame src="about:blank">
	//! <frame src="data:text/plain,Foo">
	//! </frameset>
}

test("Simple frameset")
language C++;
{
	verify(state.doc);
	verify(state.doc->IsFrameDoc());
	verify(!state.doc->GetHtmlDocument());
	FramesDocElm* fdelm = state.doc->GetFrmDocRoot();
	verify(fdelm);
	FramesDocElm* first_frame_elm = fdelm->FirstChild();
	verify(first_frame_elm);
	FramesDocElm* second_frame_elm = fdelm->LastChild();
	verify(second_frame_elm);
	verify(first_frame_elm->Suc() == second_frame_elm);

	DocumentManager* first_frame_dm = first_frame_elm->GetDocManager();
	verify(first_frame_dm);
	URL blank_url = g_url_api->GetURL("about:blank");
	verify(!blank_url.IsEmpty());
	verify(first_frame_dm->GetCurrentURL() == blank_url);
	verify(first_frame_dm->GetLoadStatus() == NOT_LOADING);

	FramesDocument* first_frame_doc = first_frame_dm->GetCurrentDoc();
	verify(first_frame_doc);
	LogicalDocument* first_frame_logdoc = first_frame_doc->GetLogicalDocument();
	verify(first_frame_logdoc);
	verify(first_frame_logdoc->IsParsed());

	DocumentManager* second_frame_dm = second_frame_elm->GetDocManager();
	verify(second_frame_dm);
	URL data_url = g_url_api->GetURL("data:text/plain,Foo");
	verify(!data_url.IsEmpty());
	verify(second_frame_dm->GetLoadStatus() == NOT_LOADING);
	verify(second_frame_dm->GetCurrentURL() == data_url);

	FramesDocument* second_frame_doc = second_frame_dm->GetCurrentDoc();
	verify(second_frame_doc);
	LogicalDocument* second_frame_logdoc = second_frame_doc->GetLogicalDocument();
	verify(second_frame_logdoc);
	verify(second_frame_logdoc->IsParsed());

}

html
{
	//! <html>
	//! <body>
	//! <script type="text/javascript">
	//! for(var i=0; i<1200; i++)
	//! {
	//!  document.write('<iframe src="data:text/plain,' + i + '"></iframe>');
	//! }
	//! </script>
	//! </body>
	//! </html>
}

test("Frames limit")
language C++;
require defined DOCHAND_MAX_FRAMES_ON_PAGE;
{
	verify(state.doc);
	verify(state.doc->IsTopDocument());
	FramesDocElm* ifrm_root = state.doc->GetIFrmRoot();
	verify(ifrm_root);

	// Check counters
	int num_frames_added = state.doc->GetNumFramesAdded();
	int num_frames_removed = state.doc->GetNumFramesRemoved();
	verify(num_frames_removed == 0);
	int total_num_frames = num_frames_added - num_frames_removed;
	int total_num_frames_backup = total_num_frames;
	verify(total_num_frames >= 0 && total_num_frames > DOCHAND_MAX_FRAMES_ON_PAGE);

	// Check if about:blank is loaded in frames above the limit and some other URL in the rest
	URL about_blank = g_url_api->GetURL("about:blank");
	FramesDocElm* iter = ifrm_root->FirstChild();
	for (int cnt = 0; cnt < total_num_frames; cnt++)
	{
		DocumentManager* frame_dm = iter->GetDocManager();
		verify(frame_dm);
		if (cnt >= DOCHAND_MAX_FRAMES_ON_PAGE)
			verify(frame_dm->GetCurrentURL() == about_blank);
		else
			verify(!(frame_dm->GetCurrentURL() == about_blank));
		iter = iter->Next();
	}

	// Remove some frames to go below the limit
	verify (total_num_frames - DOCHAND_MAX_FRAMES_ON_PAGE + 2 > 0);
	Tree out_frames;

	for (int cnt = 0; cnt < (total_num_frames - DOCHAND_MAX_FRAMES_ON_PAGE + 2); cnt++)
	{
		iter = ifrm_root->LastChild();
		iter->Out();
		iter->Under(&out_frames);
	}

	verify(num_frames_added == state.doc->GetNumFramesAdded());
	num_frames_removed = state.doc->GetNumFramesRemoved();
	verify(num_frames_removed == total_num_frames - DOCHAND_MAX_FRAMES_ON_PAGE + 2);
	verify(num_frames_removed >= 0 && out_frames.Cardinal() == (UINT)num_frames_removed);
	total_num_frames = num_frames_added - num_frames_removed;
	verify(total_num_frames >= 0 && total_num_frames < DOCHAND_MAX_FRAMES_ON_PAGE - 1);

	// Add one frame and check if it's allowed to load some URL in it now
	FramesDocElm* first = (FramesDocElm*)(out_frames.FirstChild());
	first->Out();
	verify(num_frames_removed == state.doc->GetNumFramesRemoved()); // frames removed counted did not change as it was not removed from the frame root
	first->Under(ifrm_root);
	verify_success(first->LoadFrames());
	verify(first->GetDocManager());
	verify(!(first->GetDocManager()->GetCurrentURL() == about_blank));

	// bring all frames back as they are needed to the next test
	while((iter = (FramesDocElm*)(out_frames.LastChild())))
	{
		iter->Out();
		iter->Under(ifrm_root);
	}

	// We added some frames to the ifrm_root so the cunter should increase ...
	verify(state.doc->GetNumFramesAdded() > num_frames_added);
	// ... but total number of frames should be as on the beginning
	verify(state.doc->GetNumFramesAdded() - num_frames_removed == total_num_frames_backup);
	verify_success(ifrm_root->LoadFrames());

	// check URLs again
	iter = ifrm_root->FirstChild();
	for (int cnt = 0; cnt < total_num_frames; cnt++)
	{
		DocumentManager* frame_dm = iter->GetDocManager();
		verify(frame_dm);
		if (cnt >= DOCHAND_MAX_FRAMES_ON_PAGE)
			verify(frame_dm->GetCurrentURL() == about_blank);
		else
			verify(!(frame_dm->GetCurrentURL() == about_blank));
		iter = iter->Next();
	}
}

test("Frames limit - modifications HTML 5")
require success "Frames limit";
{
	var idx_frame_to_test = window.frames.length - 2;

	//verify that in frames below the limit things work as expected
	var frame_ok = document.getElementsByTagName('iframe')[1];
	verify(frame_ok.location != 'about:blank');
	frame_ok.location = 'http://opera.com';
	verify(frame_ok.location == 'http://opera.com');
	//try to change innerHTML
	var HTML_to_add = '<h1>CHANGED</h1>';
	frame_ok.contentDocument.documentElement.innerHTML = HTML_to_add;
	verify(frame_ok.contentDocument.documentElement.innerHTML.indexOf(HTML_to_add) != -1);
	frame_ok.contentDocument.documentElement.innerHTML = '';
	verify(frame_ok.contentDocument.documentElement.innerHTML == '<head></head><body></body>');
	// try to write something into a doc
	frame_ok.contentWindow.document.open();
	frame_ok.contentWindow.document.write(HTML_to_add);
	frame_ok.contentWindow.document.close();
	verify(frame_ok.contentDocument.documentElement.innerHTML.indexOf(HTML_to_add) != -1);

	var test_frame = document.getElementsByTagName('iframe')[idx_frame_to_test];
	verify(test_frame);

	// try to change the location
	test_frame.contentWindow.location = "http://opera.com";
	verify(test_frame.contentWindow.location != 'http://opera.com');

	//... and using window and document
	document.frames[idx_frame_to_test].location = "http://opera.com";
	verify(document.frames[idx_frame_to_test].location != 'http://opera.com');
	window.frames[idx_frame_to_test].location = "http://opera.com";
	verify(window.frames[idx_frame_to_test].location != 'http://opera.com');

	// change src and see whether url changed
	test_frame.src = "http://opera.com";
	verify(test_frame.contentWindow.location != 'http://opera.com');

	// try to change innerHTML
	test_frame.contentDocument.documentElement.innerHTML = HTML_to_add;
	verify(test_frame.contentDocument.documentElement.innerHTML == '');

	// try to write something into a doc
	test_frame.contentWindow.document.open();
	test_frame.contentWindow.document.write(HTML_to_add);
	test_frame.contentWindow.document.close();

	verify(test_frame.contentDocument.documentElement.innerHTML.indexOf(HTML_to_add) == -1);
}

test("ServerTrustChecker::IsLocalURL asks to resolve URLs (see CORE-34165)")
language c++;
require TRUST_RATING;
{
	URL url;
	OpString url_name;

	// Generate an URL that hasn't been resolved yet.
	op_srand(static_cast<unsigned int>(g_op_time_info->GetTimeUTC() / 1000));
	int attempts = 0;
	const int MAX_ATTEMPTS = 20;
	do {
		url_name.Empty();
		verify_success(url_name.AppendFormat(UNI_L("http://%d.unique.invalid"), op_rand()));
		url = g_url_api->GetURL(url_name);
	} while(url.GetServerName() && url.GetServerName()->IsHostResolved() && ++attempts < MAX_ATTEMPTS);

	if (attempts >= MAX_ATTEMPTS)
		verify(FALSE, "Could not find an unresolved host name to perform the test.");

	BOOL is_local;
	BOOL needs_to_resolve;
	verify_success(ServerTrustChecker::IsLocalURL(url, is_local, needs_to_resolve));

	verify(!is_local);
	verify(needs_to_resolve);
}

test("ServerTrustChecker::IsLocalURL for url on local network (see CORE-34165)")
language c++;
require TRUST_RATING;
{
	URL url = g_url_api->GetURL(UNI_L("http://t.oslo.osa"));
	BOOL is_local;
	BOOL needs_to_resolve;
	verify_success(ServerTrustChecker::IsLocalURL(url, is_local, needs_to_resolve));

	verify(needs_to_resolve || is_local);
}

html
{
	//! <!DOCTYPE html>
	//! <html>
	//!   <body>
	//!		<iframe src="data:text/html,%3Cframeset%3E%3C/frameset%3E"></iframe>
	//!		<iframe src="about:blank"></iframe>
	//!     <script type="text/javascript">
	//!		  document.getElementsByTagName("iframe")[0].contentDocument;
	//!		</script>
	//!   </body>
	//! </html>
	//!
}

test("dochand.DocumentTreeIterator#1")
language C++;
{
	verify(state.doc);
	verify(state.doc->GetIFrmRoot());
	FramesDocElm* ifrm_root = state.doc->GetIFrmRoot();
	FramesDocElm* ifrm1 = ifrm_root->FirstChild();
	verify(ifrm1);
	FramesDocElm* ifrm2 = ifrm1->Suc();
	verify(ifrm2);
	verify(!ifrm2->Suc());

	DocumentManager* ifrm1_docman = ifrm1->GetDocManager();
	verify(ifrm1_docman);
	FramesDocument* ifrm1_doc = ifrm1_docman->GetCurrentDoc();
	verify(ifrm1_doc);
	verify(ifrm1_doc->GetFrmDocRoot());
	verify(!ifrm1_doc->GetFrmDocRoot()->FirstChild());

	DocumentTreeIterator it(state.doc);
	it.SetIncludeThis();

	verify(it.Next());
	verify(it.GetFramesDocElm() == NULL);
	verify(it.GetFramesDocument() == state.doc);

	verify(it.Next());
	verify(it.GetFramesDocElm() == ifrm1);

	verify(it.Next());
	verify(it.GetFramesDocElm() == ifrm2);

	verify(!it.Next());
}

html
{
	//! <!DOCTYPE html>
	//! <html>
	//!   <body>
	//!		<iframe src="data:text/html,%3Cframeset%3E%3Cframe src='about:blank'%3E%3C/frameset%3E"></iframe>
	//!		<iframe src="about:blank"></iframe>
	//!     <script type="text/javascript">
	//!		  document.getElementsByTagName("iframe")[0].contentDocument;
	//!		  document.getElementsByTagName("iframe")[0].contentWindow.frames[0];
	//!		</script>
	//!   </body>
	//! </html>
	//!
}

test("dochand.DocumentTreeIterator#2")
language C++;
{
	verify(state.doc);
	verify(state.doc->GetIFrmRoot());
	FramesDocElm* ifrm_root = state.doc->GetIFrmRoot();
	FramesDocElm* ifrm1 = ifrm_root->FirstChild();
	verify(ifrm1);
	FramesDocElm* ifrm2 = ifrm1->Suc();
	verify(ifrm2);
	verify(!ifrm2->Suc());

	DocumentManager* ifrm1_docman = ifrm1->GetDocManager();
	verify(ifrm1_docman);
	FramesDocument* ifrm1_doc = ifrm1_docman->GetCurrentDoc();
	verify(ifrm1_doc);
	verify(ifrm1_doc->GetFrmDocRoot());
	verify(ifrm1_doc->GetFrmDocRoot()->FirstChild());
	FramesDocElm* ifrm1_frm1 = ifrm1_doc->GetFrmDocRoot()->FirstChild();

	DocumentTreeIterator it(state.doc);
	it.SetIncludeThis();

	verify(it.Next());
	verify(it.GetFramesDocElm() == NULL);
	verify(it.GetFramesDocument() == state.doc);

	verify(it.Next());
	verify(it.GetFramesDocElm() == ifrm1);

	verify(it.Next());
	verify(it.GetFramesDocElm() == ifrm1_frm1);

	verify(it.Next());
	verify(it.GetFramesDocElm() == ifrm2);

	verify(!it.Next());
}

html
{
	//! <!DOCTYPE html>
	//! <html>
	//! <frameset cols="*,*">
	//!    <frameset rows="*">
	//!        <frameset cols="*,*">
	//!            <frame src=about:blank>
	//!            <frame src=about:blank>
	//!        </frameset>
	//!    </frameset>
	//!    <frame src=about:blank>
	//! </frameset>
	//! </html>
	//!
}

test("dochand.DocumentTreeIterator#3")
language C++;
{
	verify(state.doc);
	verify(state.doc->GetFrmDocRoot());
	FramesDocElm* frm_root = state.doc->GetFrmDocRoot();
	FramesDocElm* frm_elm1 = frm_root->FirstChild();
	verify(frm_elm1);
	FramesDocElm* frm_elm2 = frm_elm1->Suc();
	verify(frm_elm2);
	verify(!frm_elm2->Suc());
	verify(!frm_elm2->FirstChild());
	FramesDocElm* frm_elm11 = frm_elm1->FirstChild();
	verify(frm_elm11);
	verify(!frm_elm11->Suc());
	FramesDocElm* frm_elm111 = frm_elm11->FirstChild();
	verify(frm_elm111);
	verify(!frm_elm111->FirstChild());
	FramesDocElm* frm_elm112 = frm_elm111->Suc();
	verify(frm_elm112);
	verify(!frm_elm112->Suc());
	verify(!frm_elm112->FirstChild());

	DocumentTreeIterator it(state.doc);
	it.SetIncludeThis();

	verify(it.Next());
	verify(it.GetFramesDocElm() == NULL);
	verify(it.GetFramesDocument() == state.doc);

	verify(it.Next());
	verify(it.GetFramesDocElm() == frm_elm111);

	verify(it.Next());
	verify(it.GetFramesDocElm() == frm_elm112);

	verify(it.Next());
	verify(it.GetFramesDocElm() == frm_elm2);

	verify(!it.Next());
}

test("Web handlers handlers-ignore.ini setup")
require WEB_HANDLERS_SUPPORT;
language c++;
{
	OpFileFolder ignore;
	const uni_char* filename = 0;
	g_pcfiles->GetDefaultFilePref(PrefsCollectionFiles::HandlersIgnoreFile, &ignore, &filename);
	verify(filename);

	verify_success(local_ignore_file.Construct(filename, OPFILE_HOME_FOLDER));
	BOOL exists;
	verify_success(local_ignore_file.Exists(exists));
	if (exists)
	{
		OpString bak_file_path;
		verify_success(bak_file_path.Set(local_ignore_file.GetFullPath()));
		verify_success(bak_file_path.Append(UNI_L(".bak")));
		verify_success(local_ignore_file_backup.Construct(bak_file_path));
		verify_success(local_ignore_file_backup.CopyContents(&local_ignore_file, FALSE));
	}

	// Replace content in local_ignore_file
	verify_success(local_ignore_file.Open(OPFILE_WRITE));
	verify_success(local_ignore_file.Write("[Protocol]\n",11));
	verify_success(local_ignore_file.Write("webhandlertest=1\n",17));
	verify_success(local_ignore_file.Write("*=0\n",4));
	verify_success(local_ignore_file.Close());
}


test("Web handlers prepare")
language c++;
require WEB_HANDLERS_SUPPORT;
require success "Web handlers handlers-ignore.ini setup";
{
	TrustedProtocolData data;
	int idx = 1;
	idx = g_pcdoc->GetTrustedProtocolInfo(HANDLER_TEST_PROTOCOL, data);
	if (idx == -1)
		idx = g_pcdoc->GetNumberOfTrustedProtocols();

	data.protocol     = HANDLER_TEST_PROTOCOL;
	data.web_handler  = HANDLER_TEST_URL;
	data.description  = UNI_L("Test");
	data.viewer_mode  = UseWebService;
	data.user_defined = FALSE; // Otherwise 'don't show me again' is set up
	data.flags = TrustedProtocolData::TP_Protocol | TrustedProtocolData::TP_WebHandler | TrustedProtocolData::TP_Description | TrustedProtocolData::TP_ViewerMode | TrustedProtocolData::TP_UserDefined;
	TRAPD(exception,  g_pcdoc->SetTrustedProtocolInfoL(idx, data));
	verify_success(exception);
	TRAP(exception, g_pcdoc->WriteTrustedProtocolsL(idx + 1));
	verify_success(exception);
}

test("Web handlers loading allowed")
language c++;
require WEB_HANDLERS_SUPPORT;
require success "Web handlers prepare";
async;
{
	g_window = g_windowManager->SignalNewWindow(state.doc->GetDocManager()->GetWindow());
	if (!g_window)
	{
		ST_failed("Could not create a window\n");
		return -2;
	}

	test_document_listener = OP_NEW(TestOpDocumentListener, (g_window, OK, &test_timer));
	if (!test_document_listener)
	{
		ST_failed("Could not create TestOpDocumentListener\n");
		return -2;
	}
	test_loading_listener = OP_NEW(TestOpLoadingListener, (g_window, test_document_listener, OK));
	if (!test_loading_listener)
	{
		ST_failed("Could not create TestOpLoadingListener\n");
		return -2;
	}

	TestTimerListener* test_timer_listener = OP_NEW(TestTimerListener, (test_document_listener, test_loading_listener));
	if (!test_timer_listener)
	{
		ST_failed("Could not create TestTimerListener\n");
		return -2;
	}

	test_document_listener->SetTimerListener(test_timer_listener);
	test_timer.SetTimerListener(test_timer_listener);
	test_timer.Start(WEB_HANDLERS_TEST_TIMEOUT);
	if (OpStatus::IsError(g_window->OpenURL(HANDLER_TEST_REQUEST)))
	{
		ST_failed("Could not open the url\n");
		return -2;
	}
}

test("Web handlers loading not allowed")
language c++;
require WEB_HANDLERS_SUPPORT;
require success "Web handlers prepare";
async;
{
	g_window = g_windowManager->SignalNewWindow(state.doc->GetDocManager()->GetWindow());
	if (!g_window)
	{
		ST_failed("Could not create a window\n");
		return -2;
	}

	test_document_listener = OP_NEW(TestOpDocumentListener, (g_window, CANCEL, &test_timer));
	if (!test_document_listener)
	{
		ST_failed("Could not create TestOpDocumentListener\n");
		return -2;
	}
	test_loading_listener = OP_NEW(TestOpLoadingListener, (g_window, test_document_listener, CANCEL));
	if (!test_loading_listener)
	{
		ST_failed("Could not create TestOpLoadingListener\n");
		return -2;
	}

	TestTimerListener* test_timer_listener = OP_NEW(TestTimerListener, (test_document_listener, test_loading_listener));
	if (!test_timer_listener)
	{
		ST_failed("Could not create TestTimerListener\n");
		return -2;
	}
	test_document_listener->SetTimerListener(test_timer_listener);
	test_timer.SetTimerListener(test_timer_listener);
	test_timer.Start(WEB_HANDLERS_TEST_TIMEOUT);
	if (OpStatus::IsError(g_window->OpenURL(HANDLER_TEST_REQUEST)))
	{
		ST_failed("Could not open the url\n");
		return -2;
	}
}

test("Web handlers loading allowed + don't ask again prepare")
language c++;
require WEB_HANDLERS_SUPPORT;
require success "Web handlers prepare";
async;
{
	g_window = g_windowManager->SignalNewWindow(state.doc->GetDocManager()->GetWindow());
	if (!g_window)
	{
		ST_failed("Could not create a window\n");
		return -2;
	}

	test_document_listener = OP_NEW(TestOpDocumentListener, (g_window, OK_DONT_ASK_PREPARE, &test_timer));
	if (!test_document_listener)
	{
		ST_failed("Could not create TestOpDocumentListener\n");
		return -2;
	}

	TestTimerListener* test_timer_listener = OP_NEW(TestTimerListener, (test_document_listener, NULL));
	if (!test_timer_listener)
	{
		ST_failed("Could not create TestTimerListener\n");
		return -2;
	}
	test_document_listener->SetTimerListener(test_timer_listener);
	test_timer.SetTimerListener(test_timer_listener);
	test_timer.Start(WEB_HANDLERS_TEST_TIMEOUT);

	if (OpStatus::IsError(g_window->OpenURL(HANDLER_TEST_REQUEST)))
	{
		ST_failed("Could not open the url\n");
		return -2;
	}
}

test("Web handlers loading allowed + don't ask again")
language c++;
require WEB_HANDLERS_SUPPORT;
require success "Web handlers prepare";
require success "Web handlers loading allowed + don't ask again prepare";
async;
{
	g_window = g_windowManager->SignalNewWindow(state.doc->GetDocManager()->GetWindow());
	if (!g_window)
	{
		ST_failed("Could not create a window\n");
		return -2;
	}

	test_document_listener = OP_NEW(TestOpDocumentListener, (g_window, OK_DONT_ASK, &test_timer));
	if (!test_document_listener)
	{
		ST_failed("Could not create TestOpDocumentListener\n");
		return -2;
	}
	test_loading_listener = OP_NEW(TestOpLoadingListener, (g_window, test_document_listener, OK_DONT_ASK));
	if (!test_loading_listener)
	{
		ST_failed("Could not create TestOpLoadingListener\n");
		return -2;
	}

	TestTimerListener* test_timer_listener = OP_NEW(TestTimerListener, (test_document_listener, test_loading_listener));
	if (!test_timer_listener)
	{
		ST_failed("Could not create TestTimerListener\n");
		return -2;
	}
	test_document_listener->SetTimerListener(test_timer_listener);
	test_timer.SetTimerListener(test_timer_listener);
	test_timer.Start(WEB_HANDLERS_TEST_TIMEOUT);
	if (OpStatus::IsError(g_window->OpenURL(HANDLER_TEST_REQUEST)))
	{
		ST_failed("Could not open the url\n");
		return -2;
	}
}


test("Web handlers handlers-ignore.ini restoration")
require WEB_HANDLERS_SUPPORT;
require success "Web handlers handlers-ignore.ini setup";
language c++;
{
	if (local_ignore_file_backup.GetFullPath() != NULL)
	{
		verify_success(local_ignore_file.CopyContents(&local_ignore_file_backup, FALSE));
		verify_success(local_ignore_file_backup.Delete(FALSE));
	}
	else
	{
		verify_success(local_ignore_file.Delete(FALSE));
	}
}
