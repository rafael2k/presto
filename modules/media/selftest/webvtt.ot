/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style: "stroustrup" -*-
 *
 * Copyright (C) 2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "Media.WebVTT";

require MEDIA_HTML_SUPPORT;

require init;

include "modules/media/src/webvttparser.h";
include "modules/media/mediatrack.h";

global
{
	class SelftestParserListener : public WebVTT_ParserListener
	{
	public:
		SelftestParserListener() : m_finished(false) {}
		~SelftestParserListener() { m_cues.DeleteAll(); }

		void OnCueDecoded(MediaTrackCue* cue)
		{
			m_cues.Add(cue);
		}
		void OnParseError(const WebVTT_Parser::ParseError& error) {}
		void OnParsingComplete()
		{
			m_finished = true;
		}

		OpVector<MediaTrackCue> m_cues;
		bool m_finished;
	};
}

test("Single cue")
{
	SelftestParserListener cue_listener;
	WebVTT_Parser cue_parser;
	cue_parser.SetListener(&cue_listener);
	WebVTT_InputStream cue_is;
	const uni_char* vttdata = UNI_L("WEBVTT\n\n00:01.000 --> 00:02.000\nSome cue text");
	cue_is.SetBuffer(vttdata, uni_strlen(vttdata), true);

	verify_success(cue_parser.Parse(&cue_is));

	verify(cue_listener.m_finished);
	verify(cue_listener.m_cues.GetCount() == 1);
	MediaTrackCue* cue = cue_listener.m_cues.Get(0);
	verify(cue->GetStartTime() == 1.0);
	verify(cue->GetEndTime() == 2.0);
	verify(cue->GetText() == StringWithLength(UNI_L("Some cue text"), 13));
}

test("Cue split between \\r and \\n")
{
	SelftestParserListener cue_listener;
	WebVTT_Parser cue_parser;
	cue_parser.SetListener(&cue_listener);
	WebVTT_InputStream cue_is;

	const uni_char* vttdata = UNI_L("WEBVTT\r\n\r\n00:01.000 --> 00:02.000\r\nLine 1\r\nline 2");
	const size_t vttsize = uni_strlen(vttdata);
	const size_t firstsize = vttsize-7;

	cue_is.SetBuffer(vttdata, firstsize, false);
	verify_success(cue_parser.Parse(&cue_is));
	verify(!cue_listener.m_finished);
	verify(cue_listener.m_cues.GetCount() == 0);
	verify(cue_is.Remaining() == 1);

	cue_is.SetBuffer(vttdata+firstsize-1, vttsize-firstsize+1, true);
	verify_success(cue_parser.Parse(&cue_is));
	verify(cue_listener.m_finished);
	verify(cue_listener.m_cues.GetCount() == 1);
	verify(cue_is.Remaining() == 0);

	MediaTrackCue* cue = cue_listener.m_cues.Get(0);
	verify(cue->GetText() == StringWithLength(UNI_L("Line 1\nline 2"), 13));
}

test("Cue split after \\r")
{
	SelftestParserListener cue_listener;
	WebVTT_Parser cue_parser;
	cue_parser.SetListener(&cue_listener);
	WebVTT_InputStream cue_is;

	const uni_char* vttdata = UNI_L("WEBVTT\r\r00:01.000 --> 00:02.000\rLine 1\rline 2");
	const size_t vttsize = uni_strlen(vttdata);
	const size_t firstsize = vttsize-6;

	cue_is.SetBuffer(vttdata, firstsize, false);
	verify_success(cue_parser.Parse(&cue_is));
	verify(!cue_listener.m_finished);
	verify(cue_listener.m_cues.GetCount() == 0);
	verify(cue_is.Remaining() == 1);

	cue_is.SetBuffer(vttdata+firstsize-1, vttsize-firstsize+1, true);
	verify_success(cue_parser.Parse(&cue_is));
	verify(cue_listener.m_finished);
	verify(cue_listener.m_cues.GetCount() == 1);
	verify(cue_is.Remaining() == 0);

	MediaTrackCue* cue = cue_listener.m_cues.Get(0);
	verify(cue->GetText() == StringWithLength(UNI_L("Line 1\nline 2"), 13));
}
