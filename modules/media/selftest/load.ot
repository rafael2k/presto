/* -*- Mode: js; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2008-2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "Media.Load";
require MEDIA_HTML_SUPPORT;
require init;
language ecmascript;

html
{
	//! <html>
	//!   <body>
	//!     <audio id="audio0"></audio>
	//!     <audio id="audio1" src=""></audio>
	//!     <audio id="audio2" src="foo.wav"><source src="bar.wav"><source src="baz.wav"></audio>
	//!     <audio id="audio3"><source src="qux.wav"><source src="quux.wav"></audio>
	//!     <audio id="audio4"><source><source src=""><source src="corge.wav"></audio>
	//!     <audio id="audio5"></audio>
	//!     <audio id="audio6"></audio>
	//!   </body>
	//! </html>
}

test("missing src attribute") async;
{
	var fired = false;
	var a = document.getElementById("audio0");
	a.addEventListener("error", function(e) {
		fired = true;
		ST_failed("error fired", "load.ot", -1);
	}, false);
	a.load();
	setTimeout(function(){if(!fired)ST_passed();}, 100);
}

test("empty src attribute") async;
{
	var fired = false;
	var a = document.getElementById("audio1");
	a.load();
	a.addEventListener("error", function(e) {
		fired = true;
		if (!(a.error instanceof MediaError)) {
			ST_failed("error not a MediaError", "load.ot", -1);
		} else if (a.error.code != MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED) {
			ST_failed("error code not MEDIA_ERR_SRC_NOT_SUPPORTED", "load.ot", -1);
		} else if (a.networkState != HTMLMediaElement.NETWORK_NO_SOURCE) {
			ST_failed("network state not NETWORK_NO_SOURCE", "load.ot", -1);
		} else if (a.readyState != HTMLMediaElement.HAVE_NOTHING) {
			ST_failed("ready state not HAVE_NOTHING", "load.ot", -1);
		} else {
			ST_passed();
		}
	}, false);
	setTimeout(function(){if(!fired)ST_failed("error not fired", "load.ot", -1);}, 100);
}

test("setting src invokes the load algorithm") async;
{
	var passed = false;
	var a = document.createElement("audio");
	// need to get element out of NETWORK_EMPTY to see side-effects
	if (a.networkState == HTMLMediaElement.NETWORK_EMPTY) {
		a.src = "foo.wav";
		if (a.networkState == HTMLMediaElement.NETWORK_NO_SOURCE) {
			a.addEventListener("emptied", function(){passed=true;ST_passed();}, false);
			a.src = "bar.wav";
			setTimeout(function(){if(!passed)ST_failed("emptied not fired", "load.ot", -1);}, 100);
		} else {
			ST_failed("networkState not NETWORK_NO_SOURCE", "load.ot", -1);
		}
	} else {
		ST_failed("networkState not NETWORK_EMPTY", "load.ot", -1);
	}
}

test("load()/play()/pause() invokes resource selection")
{
	function _test(func) {
		var v = document.createElement("video");
		verify(v.networkState == HTMLMediaElement.NETWORK_EMPTY);
		v[func]();
		verify(v.networkState == HTMLMediaElement.NETWORK_NO_SOURCE);
	}
	_test('load');
	_test('play');
	_test('pause');
}

test("resource selection without source returns to NETWORK_EMPTY") async;
{
	var v = document.createElement("video");
	v.load();
	setTimeout(function() {
		if (v.networkState != HTMLMediaElement.NETWORK_EMPTY)
			ST_failed("networkState != NETWORK_EMPTY", "load.ot", -1);
		else
			ST_passed();
	}, 0);
}

test("resource selection with <source> fires loadstart") async;
{
	var fired = false;
	var v = document.createElement("video");
	var s = document.createElement("source");
	s.src = "foo.wav";
	v.appendChild(s);
	if (v.networkState == HTMLMediaElement.NETWORK_NO_SOURCE) {
		v.addEventListener("loadstart", function() {
			fired=true;
			if (v.networkState == HTMLMediaElement.NETWORK_LOADING) {
				ST_passed();
			} else {
				ST_failed("networkState is not NETWORK_LOADING", "load.ot", -1);
			}
		}, false);
		setTimeout(function(){if(!fired)ST_failed("loadstart not fired", "load.ot", -1);}, 100);
	} else {
		ST_failed("networkState is not NETWORK_NO_SOURCE", "load.ot", -1);
	}
}

test("new Audio() does not invoke resource selection")
{
	var a = new Audio();
	verify(a.networkState == HTMLMediaElement.NETWORK_EMPTY);
	verify(a.readyState == HTMLMediaElement.HAVE_NOTHING);
}

test("new Audio(url) invokes resource selection") async;
{
	var fired = false;
	var a = new Audio("foo.wav");
	if (a.readyState != HTMLMediaElement.HAVE_NOTHING) {
		ST_failed("readyState is not HAVE_NOTHING", "load.ot", -1);
	} else if (a.networkState != HTMLMediaElement.NETWORK_NO_SOURCE) {
		ST_failed("networkState is not NETWORK_NO_SOURCE", "load.ot", -1);
	} else {
		a.addEventListener("loadstart", function() {
			fired=true;
			if (a.networkState == HTMLMediaElement.NETWORK_LOADING) {
				ST_passed();
			} else {
				ST_failed("networkState is not NETWORK_LOADING", "load.ot", -1);
			}
		}, false);
		setTimeout(function(){if(!fired)ST_failed("loadstart not fired", "load.ot", -1);}, 100);
	}
}

test("new Audio() sets preload to \"auto\"")
{
	var a = document.createElement("audio");
	verify(!a.hasAttribute("preload"));
	a = new Audio("foo.wav");
	verify(a.getAttribute("preload") == "auto");
}

test("modified src attribute invokes resource selection") async;
{
	var passed = false;
	var a = document.getElementById("audio5");
	a.src = "foo.wav";
	a.addEventListener("loadstart", function(){passed=true;ST_passed();}, false);
	setTimeout(function(){if(!passed)ST_failed("loadstart not fired", "load.ot", -1);}, 100);
}

test("inserted source element invokes resource selection") async;
{
	var passed = false;
	var a = document.getElementById("audio6");
	s = document.createElement("source");
	a.appendChild(s);
	a.addEventListener("loadstart", function(){passed=true;ST_passed();}, false);
	setTimeout(function(){if(!passed)ST_failed("loadstart not fired", "load.ot", -1);}, 100);
}

test("inserted audio element invokes resource selection")
{
	var a = document.createElement("audio");
	verify(a.networkState == HTMLMediaElement.NETWORK_EMPTY);
	document.body.appendChild(a);
	verify(a.networkState == HTMLMediaElement.NETWORK_NO_SOURCE);
}

test("inserted video element invokes resource selection")
{
	var v = document.createElement("video");
	verify(v.networkState == HTMLMediaElement.NETWORK_EMPTY);
	document.body.appendChild(v);
	verify(v.networkState == HTMLMediaElement.NETWORK_NO_SOURCE);
}

test("load() cancels pending events") async;
{
	var passed = true;

	var a = document.createElement("audio");
	a.addEventListener("volumechange", function(){passed = false; ST_failed("volumechange fired", "load.ot", -1);}, false);
	a.addEventListener("ratechange", function(){passed = false; ST_failed("ratechange fired", "load.ot", -1);}, false);
	a.src = "foo.wav";
	a.defaultPlaybackRate = 0.5; // fires ratechange
	a.volume = 0.5; // fires volumechange
	a.load(); // should cancel both of the above
	setTimeout(function(){if(passed){ST_passed();}}, 100);
}

test("single load() does not fire abort or emptied")
{
	var passed = true;
	var a = document.createElement("audio");
	var s = document.createElement("source");
	s.src = "foo.wav";
	a.appendChild(s);
	a.addEventListener("abort", function(e) { passed = false; }, false);
	a.addEventListener("emptied", function(e) { passed = false; }, false);
	a.load();
	verify(passed);
}

test("double load() asynchronously fires emptied") async;
{
	var a = document.createElement("audio");
	var s = document.createElement("source");
	s.src = "foo.wav";
	a.appendChild(s);
	a.load();
	if (a.networkState == HTMLMediaElement.NETWORK_EMPTY) {
		ST_failed("networkState is NETWORK_EMPTY", "load.ot", -1);
	} else {
		var fired = false;
		a.addEventListener("emptied", function(e) {
			fired = true;
			ST_passed();
		}, false);
		a.load();
		setTimeout(function(){if(!fired){ST_failed("emptied not fired", "load.ot", -1);}}, 100);
	}
}

test("src attribute data URI reaches loadedmetadata") async;
{
	var passed = false;
	var failed = false;
	var a = document.createElement("audio");
	// 2 samples of silence
	a.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQAAAAAAAAA";
	a.addEventListener("error", function() {
		failed=true;
		ST_failed("error code is " + a.error.code, "load.ot", -1);
	}, false);
	a.addEventListener("loadedmetadata", function(){if(!failed){passed=true;ST_passed();}}, false);
	a.load();
	setTimeout(function() {
		if (!passed) {
			failed = true;
			ST_failed("loadedmetadata not fired", "load.ot", -1);
		}
	}, 3000);
}

test("source element without src fires error") async;
{
	var afired = false;
	var sfired = false;

	var a = document.createElement("audio");
	var s = document.createElement("source");
	a.addEventListener("error", function(){afired = true;}, false);
	s.addEventListener("error", function(){sfired = true;}, false);
	a.appendChild(s);
	a.load();

	setTimeout(function() {
		if (a.error)
			ST_failed("error code is " + a.error.code, "load.ot", -1);
		else if (afired)
			ST_failed("error fired on media element", "load.ot", -1);
		else if (!sfired)
			ST_failed("error not fired on source element", "load.ot", -1);
		else
			ST_passed();
	}, 100);
}

test("source element with unsupported media fires error") async;
{
	var afired = false;
	var sfired = false;

	var a = document.createElement("audio");
	var s = document.createElement("source");
	s.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQAAAAAAAAA";
	s.setAttribute("media", "stonetablet");
	a.addEventListener("error", function(){afired = true;}, false);
	s.addEventListener("error", function(){sfired = true;}, false);
	a.appendChild(s);
	a.load();

	setTimeout(function() {
		if (a.error)
			ST_failed("error code is " + a.error.code, "load.ot", -1);
		else if (afired)
			ST_failed("error fired on media element", "load.ot", -1);
		else if (!sfired)
			ST_failed("error not fired on source element", "load.ot", -1);
		else
			ST_passed();
	}, 100);
}

test("source element with unsupported type fires error") async;
{
	var afired = false;
	var sfired = false;

	var a = document.createElement("audio");
	var s = document.createElement("source");
	s.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQAAAAAAAAA";
	s.setAttribute("type", "text/plain");
	a.addEventListener("error", function(){afired = true;}, false);
	s.addEventListener("error", function(){sfired = true;}, false);
	a.appendChild(s);
	a.load();

	setTimeout(function() {
		if (a.error)
			ST_failed("error code is " + a.error.code, "load.ot", -1);
		else if (afired)
			ST_failed("error fired on media element", "load.ot", -1);
		else if (!sfired)
			ST_failed("error not fired on source element", "load.ot", -1);
		else
			ST_passed();
	}, 100);
}

test("source element inserted after pointer is considered") async;
{
	var passed = false;
	var a = document.createElement("audio");
	var s1 = document.createElement("source");
	a.appendChild(s1);
	s1.addEventListener("error", function() {
		var s2 = document.createElement("source");
		s2.addEventListener("error", function(){passed=true;ST_passed();}, false);
		a.appendChild(s2);
	}, false);
	a.load();
	setTimeout(function(){if(!passed)ST_failed("error not fired", "load.ot", -1);}, 100);
}

test("source element inserted before pointer is not considered") async;
{
	var failed = false;
	var a = document.createElement("audio");
	var s1 = document.createElement("source");
	a.appendChild(s1);
	s1.addEventListener("error", function() {
		var s2 = document.createElement("source");
		s2.addEventListener("error", function(){failed=true;ST_failed("error fired", "load.ot", -1);}, false);
		a.insertBefore(s2, a.firstChild);
	}, false);
	a.load();
	setTimeout(function(){if(!failed)ST_passed();}, 100);
}

test("source element is ignored when src attribute is present") async;
{
	var failed = false;
	var a = document.createElement("audio");
	a.src = "foo.wav";
	var s = document.createElement("source");
	s.addEventListener("error", function(){failed=true;ST_failed("error fired on source element", "load.ot", -1);}, false);
	a.appendChild(s);
	a.load();
	setTimeout(function(){if(!failed)ST_passed();}, 100);
}

test("javascript: URI not evaluated; fires error") async;
{
	var fired = false;
	var v = document.createElement("video");
	v.addEventListener("error", function(){fired=true;}, false);
	v.src = "javascript:window.failed=true";
	v.load();
	setTimeout(function() {
		if (window.failed)
			ST_failed("script was run", "load.ot", -1);
		else if (!fired)
			ST_failed("error not fired", "load.ot", -1);
		else
			ST_passed();
	}, 100);
}
