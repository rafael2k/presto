/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style: "stroustrup" -*-
 *
 * Copyright (C) 2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "Media.MediaByteRange";

require MEDIA_PLAYER_SUPPORT;

include "modules/media/src/mediabyterange.h";

test("Constructor")
{
	MediaByteRange range;

	range = MediaByteRange();
	verify(range.start == FILE_LENGTH_NONE);
	verify(range.end == FILE_LENGTH_NONE);

	range = MediaByteRange(0);
	verify(range.start == 0);
	verify(range.end == FILE_LENGTH_NONE);

	range = MediaByteRange(3, 7);
	verify(range.start == 3);
	verify(range.end == 7);
}

test("IsEmpty")
{
	MediaByteRange range;

	range = MediaByteRange();
	verify(range.IsEmpty());

	range = MediaByteRange(0);
	verify(!range.IsEmpty());

	range = MediaByteRange(0, 0);
	verify(!range.IsEmpty());
}

test("IsFinite")
{
	MediaByteRange range;

	range = MediaByteRange();
	verify(!range.IsFinite());

	range = MediaByteRange(0);
	verify(!range.IsFinite());

	range = MediaByteRange(0, 0);
	verify(range.IsFinite());
}

test("Length")
{
	MediaByteRange range(10, 20);
	verify(range.Length() == 11);
}

test("SetLength")
{
	MediaByteRange range;

	range = MediaByteRange(5);
	range.SetLength(10);
	verify(range.Length() == 10);

	range = MediaByteRange(0, 42);
	range.SetLength(4);
	verify(range.Length() == 4);

	range = MediaByteRange(0, 0);
	range.SetLength(0);
	verify(range.IsEmpty());
}

table RangeData(OpFileLength, OpFileLength, OpFileLength, OpFileLength, OpFileLength, OpFileLength, OpFileLength, OpFileLength)
{
	//         a_start,            a_end,          b_start,            b_end,      intxn_start,        intxn_end,      union_start,        union_end
	{ FILE_LENGTH_NONE, FILE_LENGTH_NONE, FILE_LENGTH_NONE, FILE_LENGTH_NONE, FILE_LENGTH_NONE, FILE_LENGTH_NONE, FILE_LENGTH_NONE, FILE_LENGTH_NONE }, // both empty
	{ FILE_LENGTH_NONE, FILE_LENGTH_NONE,                0,                9, FILE_LENGTH_NONE, FILE_LENGTH_NONE,                0,                9 }, // one empty
	{                3,                7,                3,                7,                3,                7,                3,                7 }, // same range
	{                3,                7,                8,               12, FILE_LENGTH_NONE, FILE_LENGTH_NONE,                3,               12 }, // no overlap
	{                3,                7,                7,               13,                7,                7,                3,               13 }, // 1 byte overlap
	{                3,                7,                5,                6,                5,                6,                3,                7 }, // contained
	{                3, FILE_LENGTH_NONE,                4, FILE_LENGTH_NONE,                4, FILE_LENGTH_NONE,                3, FILE_LENGTH_NONE }, // both open-ended
	{                3, FILE_LENGTH_NONE,                4,               15,                4,               15,                3, FILE_LENGTH_NONE }, // one open-ended
}

test("IntersectWith")
{
	iterate (a_start, a_end, b_start, b_end, intxn_start, intxn_end, union_start, union_end) from RangeData
	{
		// intersection is commutative, i.e. order should not matter
		{
			MediaByteRange range(a_start, a_end);
			MediaByteRange other(b_start, b_end);
			range.IntersectWith(other);
			verify(range.start == intxn_start);
			verify(range.end == intxn_end);
		}
		{
			MediaByteRange range(b_start, b_end);
			MediaByteRange other(a_start, a_end);
			range.IntersectWith(other);
			verify(range.start == intxn_start);
			verify(range.end == intxn_end);
		}
	}
}

test("UnionWith")
{
	iterate (a_start, a_end, b_start, b_end, intxn_start, intxn_end, union_start, union_end) from RangeData
	{
		// union is commutative, i.e. order should not matter
		{
			MediaByteRange range(a_start, a_end);
			MediaByteRange other(b_start, b_end);
			range.UnionWith(other);
			verify(range.start == union_start);
			verify(range.end == union_end);
		}
		{
			MediaByteRange range(b_start, b_end);
			MediaByteRange other(a_start, a_end);
			range.UnionWith(other);
			verify(range.start == union_start);
			verify(range.end == union_end);
		}
	}
}
