/* -*- Mode: js; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2008-2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "Media.Events";
require MEDIA_HTML_SUPPORT;
require init;
language ecmascript;

test("play() fires play if paused") async;
{
	var passed = false;
	var a = document.createElement("audio");
	a.addEventListener("play", function(){passed=true;ST_passed();}, false);
	a.src = "foo.wav";
	if (!a.paused)
		ST_failed("not paused", "events.ot", -1);
	a.play();
	setTimeout(function(){if(!passed)ST_failed("play not fired", "events.ot", -1);}, 100);
}

test("play() does not fire play if playing") async;
{
	var failed = false;
	var a = document.createElement("audio");
	a.src = "foo.wav";
	a.play();
	a.addEventListener("play", function(){failed=true;ST_failed("play fired", "events.ot", -1);}, false);
	if (a.paused)
		ST_failed("not playing", "events.ot", -1);
	a.play();
	setTimeout(function(){if(!failed)ST_passed();}, 100);
}

test("pause() fires pause if playing") async;
{
	var passed = false;
	var a = document.createElement("audio");
	a.src = "foo.wav";
	a.play();
	a.addEventListener("pause", function(){passed=true;ST_passed();}, false);
	if (a.paused)
		ST_failed("not playing", "events.ot", -1);
	a.pause();
	setTimeout(function(){if(!passed)ST_failed("pause not fired", "events.ot", -1);}, 100);
}

test("pause() does not fire pause if paused") async;
{
	var failed = false;
	var a = document.createElement("audio");
	a.src = "foo.wav";
	a.addEventListener("pause", function(){failed=true;ST_failed("pause fired", "events.ot", -1);}, false);
	if (!a.paused)
		ST_failed("not paused", "events.ot", -1);
	a.pause();
	setTimeout(function(){if(!failed)ST_passed();}, 100);
}

test("changing defaultPlaybackRate fires ratechange") async;
{
	var passed = false;
	var a = document.createElement("audio");
	a.addEventListener("ratechange", function(){passed=true;ST_passed();}, false);
	if (a.defaultPlaybackRate != 1.0)
		ST_failed("defaultPlaybackRate is " + a.defaultPlaybackRate + ", expected 1.0", "events.ot", -1);
	a.defaultPlaybackRate = 2.0;
	setTimeout(function(){if(!passed)ST_failed("ratechange not fired", "events.ot", -1);}, 100);
}

test("not changing defaultPlaybackRate does not fire ratechange") async;
{
	var failed = false;
	var a = document.createElement("audio");
	a.addEventListener("ratechange", function(){failed=true;ST_failed("ratechange fired", "events.ot", -1);}, false);
	if (a.defaultPlaybackRate != 1.0)
		ST_failed("defaultPlaybackRate is " + a.defaultPlaybackRate + ", expected 1.0", "events.ot", -1);
	a.defaultPlaybackRate = 1.0;
	setTimeout(function(){if(!failed)ST_passed();}, 100);
}

test("changing playbackRate fires ratechange") async;
{
	var passed = false;
	var a = document.createElement("audio");
	a.addEventListener("ratechange", function(){passed=true;ST_passed();}, false);
	if (a.playbackRate != 1.0)
		ST_failed("playbackRate is " + a.playbackRate + ", expected 1.0", "events.ot", -1);
	a.playbackRate = 2.0;
	setTimeout(function(){if(!passed)ST_failed("ratechange not fired", "events.ot", -1);}, 100);
}

test("not changing playbackRate does not fire ratechange") async;
{
	var failed = false;
	var a = document.createElement("audio");
	a.addEventListener("ratechange", function(){failed=true;ST_failed("ratechange fired", "events.ot", -1);}, false);
	if (a.playbackRate != 1.0)
		ST_failed("playbackRate is " + a.playbackRate + ", expected 1.0", "events.ot", -1);
	a.playbackRate = 1.0;
	setTimeout(function(){if(!failed)ST_passed();}, 100);
}

test("changing volume fires volumechange") async;
{
	var passed = false;
	var a = document.createElement("audio");
	a.addEventListener("volumechange", function(){passed=true;ST_passed();}, false);
	if (a.volume != 1.0)
		ST_failed("volume is " + a.volume + ", expected 1.0", "events.ot", -1);
	a.volume = 0.5;
	setTimeout(function(){if(!passed)ST_failed("volumechange not fired", "events.ot", -1);}, 100);
}

test("not changing volume does not fire volumechange") async;
{
	var failed = false;
	var a = document.createElement("audio");
	a.addEventListener("volumechange", function(){failed=true;ST_failed("volumechange fired", "events.ot", -1);}, false);
	if (a.volume != 1.0)
		ST_failed("volume is " + a.volume + ", expected 1.0", "events.ot", -1);
	a.volume = 1.0;
	setTimeout(function(){if(!failed)ST_passed();}, 100);
}

test("changing muted fires volumechange") async;
{
	var passed = false;
	var a = document.createElement("audio");
	a.addEventListener("volumechange", function(){passed=true;ST_passed();}, false);
	if (a.muted)
		ST_failed("muted is true, expected false", "events.ot", -1);
	a.muted = true;
	setTimeout(function(){if(!passed)ST_failed("volumechange not fired", "events.ot", -1);}, 100);
}

test("not changing muted does not fire volumechange") async;
{
	var failed = false;
	var a = document.createElement("audio");
	a.addEventListener("volumechange", function(){failed=true;ST_failed("volumechange fired", "events.ot", -1);}, false);
	if (a.muted)
		ST_failed("muted is true, expected false", "events.ot", -1);
	a.muted = false;
	setTimeout(function(){if(!failed)ST_passed();}, 100);
}
