/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style: "stroustrup" -*-
 *
 * Copyright (C) 2010-2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "Media.MediaThrottler";

require init;
require MEDIA_SUPPORT;

include "modules/media/src/mediathrottler.h";

require VIDEO_THROTTLING_SUPPORT;

include "modules/hardcore/timer/optimer.h";

global
{
	class TestMediaThrottlerListener : public MediaThrottlerListener
	{
	private:
		MediaThrottler* throttler;
		BOOL skip_notification;
	public:
		TestMediaThrottlerListener() : throttler(NULL), skip_notification(FALSE) {}

		void OnFrameUpdateAllowed()
		{
			if (skip_notification)
				return;

			if (throttler && throttler->IsFrameUpdateAllowed())
				ST_passed();
			else
				ST_failed("Not allowed when allowed was expected\n");
		}
		void SetThrottler(MediaThrottler* t) { throttler = t; }
		void SetSkipNotification(BOOL val) { skip_notification = val; }
	};

	TestMediaThrottlerListener test_throttling_listener;
	MediaThrottler* test_throttler;

	class TestTimerListener : public OpTimerListener
	{
	private:
		MediaThrottler* throttler;
		BOOL m_positive;
	public:
		TestTimerListener() : throttler(NULL), m_positive(FALSE) {}
		void OnTimeOut(OpTimer* timer)
		{
			BOOL allowed = throttler && throttler->IsFrameUpdateAllowed();

			if (allowed)
			{
				if (m_positive)
					ST_passed();
				else
					ST_failed("Allowed when not allowed was expected\n");
			}
			else
			{
				if (m_positive)
					ST_failed("Not allowed when allowed was expected\n");
				else
					ST_passed();
			}
		}

		void SetTestType(BOOL positive) { m_positive = positive; }
		void SetThrottler(MediaThrottler* t) { throttler = t; }
	};

	TestTimerListener test_timer_listener;

	UINT32 min_update_interval = 1000;

	OpTimer test_timer;
}

setup
{
	test_throttler = OP_NEW(MediaThrottler, (&test_throttling_listener));
	test_timer.SetTimerListener(&test_timer_listener);
	test_timer_listener.SetThrottler(test_throttler);
	test_throttler->SetFrameMinUpdateInterval(min_update_interval);
}

exit
{
	OP_DELETE(test_throttler);
}

test("Media Throttler frame update allowed - positive") async;
{
	test_throttler->SetSelftestThrottlingAlwaysNeeded(TRUE);
	test_throttler->Break();
	test_throttling_listener.SetSkipNotification(TRUE);
	if (test_throttler->IsFrameUpdateAllowed() == TRUE)
	{

		if (test_throttler->IsFrameUpdateAllowed() != FALSE)
		{
			ST_failed("Frame allowed when not allowed expected\n");
		}
		else
		{
			test_timer_listener.SetTestType(TRUE);
			test_timer.Start(min_update_interval);
		}
	}
	else
	{
		ST_failed("Frame not allowed when allowed expected\n");
	}
}

test("Media Throttler frame update allowed - negative") async;
{
	test_throttler->SetSelftestThrottlingAlwaysNeeded(TRUE);
	test_throttler->Break();
	test_throttling_listener.SetSkipNotification(TRUE);
	if (test_throttler->IsFrameUpdateAllowed() == TRUE)
	{
		if (test_throttler->IsFrameUpdateAllowed() != FALSE)
		{
			ST_failed("Frame allowed when not allowed expected\n");
		}
		else
		{
			test_timer_listener.SetTestType(FALSE);
			test_timer.Start(min_update_interval / 10);
		}
	}
	else
	{
		ST_failed("Frame not allowed when allowed expected\n");
	}
}

test("Media Throttler frame update allowed - no throtling")
{
	test_throttler->SetSelftestThrottlingAlwaysNeeded(FALSE);
	test_throttler->Break();
	test_throttling_listener.SetSkipNotification(TRUE);
	verify(test_throttler->IsFrameUpdateAllowed() == TRUE);
	verify(test_throttler->IsFrameUpdateAllowed() == TRUE);
}

test("Media Throttler frame update allowed") async;
{
	test_throttler->SetSelftestThrottlingAlwaysNeeded(TRUE);
	test_throttling_listener.SetThrottler(test_throttler);
	test_throttler->Break();
	test_throttling_listener.SetSkipNotification(FALSE);
	if (test_throttler->IsFrameUpdateAllowed() == TRUE)
	{
		if (test_throttler->IsFrameUpdateAllowed() != FALSE)
		{
			ST_failed("Frame allowed when not allowed expected\n");
		}
	}
	else
	{
		ST_failed("Frame not allowed when allowed expected\n");
	}
}
