/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style: "stroustrup" -*-
 *
 * Copyright (C) 2009-2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "Media.MediaSource";

require MEDIA_PLAYER_SUPPORT;

require init;

include "modules/media/src/mediasource.h";

global
{
	const uni_char* video_ogg = UNI_L("http://example.com/video.ogg");
	const uni_char* video_mp4 = UNI_L("http://example.org/video.mp4");
}

test("GetSource returns MediaSource*")
{
	MediaSourceManagerImpl manager;
	verify(manager.GetCount() == 0);
	MediaSource* source = NULL;
	URL url = g_url_api->GetURL(video_ogg);
	verify(OpStatus::IsSuccess(manager.GetSource(source, url, URL())));
	verify(source);
	verify(manager.GetCount() == 1);
	manager.PutSource(source);
	verify(manager.GetCount() == 0);
}

test("GetSource returns same/different MediaSource* for same URL (depending on streaming cache)")
{
	MediaSourceManagerImpl manager;
	verify(manager.GetCount() == 0);
	MediaSource* source1 = NULL;
	MediaSource* source2 = NULL;
	URL url = g_url_api->GetURL(video_ogg);
	verify(OpStatus::IsSuccess(manager.GetSource(source1, url, URL())));
	verify(source1);
	verify(manager.GetCount() == 1);
	verify(OpStatus::IsSuccess(manager.GetSource(source2, url, URL())));
	verify(source2);
	if (url.UseStreamingCache())
	{
		verify(source1 != source2);
		verify(manager.GetCount() == 2);
	}
	else
	{
		verify(source1 == source2);
		verify(manager.GetCount() == 1);
	}
	manager.PutSource(source1);
	verify(manager.GetCount() == 1);
	manager.PutSource(source2);
	verify(manager.GetCount() == 0);
}

test("GetSource returns different MediaSource* for different URL")
{
	MediaSourceManagerImpl manager;
	verify(manager.GetCount() == 0);
	MediaSource* source1 = NULL;
	URL url1 = g_url_api->GetURL(video_ogg);
	verify(OpStatus::IsSuccess(manager.GetSource(source1, url1, URL())));
	verify(source1);
	verify(manager.GetCount() == 1);
	MediaSource* source2 = NULL;
	URL url2 = g_url_api->GetURL(video_mp4);
	verify(OpStatus::IsSuccess(manager.GetSource(source2, url2, URL())));
	verify(source2);
	verify(source1 != source2);
	verify(manager.GetCount() == 2);
	manager.PutSource(source1);
	verify(manager.GetCount() == 1);
	manager.PutSource(source2);
	verify(manager.GetCount() == 0);
}

test("MediaSource initially has no data")
{
	URL src = g_url_api->GetURL(video_ogg);

	MediaSourceManagerImpl manager;
	MediaSource* source = NULL;
	verify(OpStatus::IsSuccess(manager.GetSource(source, src, URL())));
	verify(source);
	verify(source->GetTotalBytes() == 0);

	manager.PutSource(source);
}
