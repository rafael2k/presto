/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2007 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Marcus Cromnow
*/

group "prefsloader.filedownload";
require PREFS_FILE_DOWNLOAD;

include "modules/prefsloader/prefsloadmanager.h";
include "modules/util/opfile/opfolder.h";
include "modules/util/opfile/opfile.h";

// -- Global -------------------------------------------------------------

global
{
	const char* TARGET_FILE = "test.xml";
	const char* DOWNLOAD_FILE = "http://xml.opera.com/spoof/";

	const char* DATA_TEMPLATE =
		"data:application/x-opera-configuration-siteprefs,"
		"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>"
		"<preferences>"
		" <host name=\"opera.com\">"
        "  <section name=\"User Agent\">"
        "   <file name=\"Browser CSS file\" value=\"%s\" from=\"%s\" />"
        "  </section>"
        " </host>"
        "</preferences>"
        ;

	/* Listener for both the downloader and timer */
	class EndChecker : public OpEndChecker
	{
	public:
		/* OpEndChecker */
		virtual BOOL IsEnd(OpStringC s)
		{
			return FALSE; // Accept anything
		}

		virtual void Dispose()
		{
			ST_passed();
			OP_DELETE(this);
		}
	};
}

// -- Tests --------------------------------------------------------------

test("Checking for g_PrefsLoadManager")
{
	verify(g_PrefsLoadManager);
}

// Try to download a file
test("Download file")
	require success "Checking for g_PrefsLoadManager";
	async;
{
	// url_data must be sufficiently large to handle DATA_TEMPLATE plus associated sprintf expansion
	char url_data[op_strlen(DATA_TEMPLATE) + 300]; /* ARRAY OK molsson 2009-06-22 */
	op_snprintf(url_data, ARRAY_SIZE(url_data), DATA_TEMPLATE, TARGET_FILE, DOWNLOAD_FILE);

	URL url = g_url_api->GetURL(url_data);
	if (url.IsEmpty())
	{
		ST_failed("Failed to get url\n");
	}
	else
		g_PrefsLoadManager->InitLoader(url, OP_NEW(EndChecker, ()));
}


// Check if the download succeeded.
test("Check download")
	delay pre 1.5;
	require success "Download file";
{
	OpStringS16 target_file;
	verify(OpStatus::IsSuccess(target_file.SetFromUTF8(TARGET_FILE, op_strlen(TARGET_FILE))));

	OpFile file;
	verify(OpStatus::IsSuccess(file.Construct(target_file, OPFILE_PREFSLOAD_FOLDER)));

	BOOL exists;
	verify(OpStatus::IsSuccess(file.Exists(exists)));
	verify(exists);

	verify(OpStatus::IsSuccess(file.Delete()));
}
