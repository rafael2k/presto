/* -*- Mode: c; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2004-2006 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 * Selftests for the lea_malloc module, written for the 2.7.2 version.
 * Lars T Hansen, Eddy.
 *
 * Basically verifies that trivial use works and that the API is available.
 * Tests the version of the standard API as supplied by this module, prior to
 * any op_* wrappers.  If the test here passes and the one in malloc_tests.ot
 * fails, the bug is in the op_* wrapper.
 */
group "lea_malloc.lea_malloc";

require HAVE_DL_MALLOC;
language c++;
include "modules/lea_malloc/malloc.h";
include "modules/lea_malloc/lea_malloc.h";

test("lea_simple_malloc")
{
	/* malloc works: */
    void *p = DL_MALLOC_NAME(malloc)( 37 );
	verify( p != NULL );
    DL_MALLOC_NAME(free)( p );
}

test("lea_malloc_zero")
{
    /* malloc, free, calloc, realloc */
 	/* ANSI X3.159-1989, 4.10.3: If the size of the space requested is zero, the
	 * behavior is implementation-defined; the value returned shall be either a
	 * null pointer or a unique pointer.
	 */
    void *p = DL_MALLOC_NAME(malloc)( 0 ), *q = DL_MALLOC_NAME(malloc)( 0 );
	/* That should get us either two NULLs or two distinct non-NULLs: */
	verify( p != NULL ? q != NULL && q != p : q == NULL);
	/* But we, at Opera, demand (and thankfully have found) unique pointers: */
	verify( p != NULL );
	verify( q != NULL );
	verify( q != p );
    DL_MALLOC_NAME(free)( p );
    DL_MALLOC_NAME(free)( q );
}

test("lea_calloc")
{
	/* calloc works: */
    void *p = DL_MALLOC_NAME(calloc)( 5, 10 );
    verify( p != NULL );
	if (p)
	{
		/* and zero-fills: */
		const unsigned char * const c = (unsigned char *)p;
		int bad = 0;
		for (int i=0 ; i < 50 ; i++ )
			if (c[i]) bad++;
		DL_MALLOC_NAME(free)( p );
		verify( bad == 0 );
	}
}

test("lea_realloc")
{
	/* realloc works: */
    void *p = DL_MALLOC_NAME(malloc)( 10 );
    verify( p != NULL );
    p = DL_MALLOC_NAME(realloc)( p, 20 );
    verify( p != NULL );
	p = DL_MALLOC_NAME(realloc)( p, 5 );
    verify( p != NULL );
    DL_MALLOC_NAME(free)( p );
    DL_MALLOC_NAME(free)( 0 );		// Legal, should not crash
}

test("lea_realloc_zero")
	require undefined REALLOC_ZERO_BYTES_FREES;
{
	void *p = 0, *q = DL_MALLOC_NAME(malloc)(0);
	/* See malloc_tests.ot's realloc_zero, which might fail due to platform op_*
	 * code: this verifies that lea_malloc does the right thing.
	 */
	p = DL_MALLOC_NAME(realloc)( p, 17 );
	verify( p != NULL );
	p = DL_MALLOC_NAME(realloc)( p, 0 );
	if (q)
	{
		DL_MALLOC_NAME(free)( q );
		verify( p != NULL );
	}
	else
		verify( p == NULL );

	DL_MALLOC_NAME(free)( p );
}

test("lea_realloc_data")
	require undefined REALLOC_ZERO_BYTES_FREES;
{
	/* [ANSI X3.159-1989/4.10.3.4] The contents of the object shall be unchanged
	 * up to the lesser of the new and old sizes.
	 */
	static const char text[] = "The quick brown fox jumps over the lazy dog.";
	char *p = (char*)DL_MALLOC_NAME(malloc)(sizeof(text));
	verify(p != NULL);
	op_strcpy(p, text);

	p = (char*)DL_MALLOC_NAME(realloc)(p, 20);
	verify(p != NULL);
	p[19] = '\0';
	verify(op_strcmp("The quick brown fox", p) == 0);

	p = (char*)DL_MALLOC_NAME(realloc)(p, sizeof(text));
	verify(p != NULL);
	verify(op_strcmp("The quick brown fox", p) == 0);

	DL_MALLOC_NAME(free)(p);
}
