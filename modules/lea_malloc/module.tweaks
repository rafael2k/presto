TWEAK_LEA_MALLOC_LOCK			eddy

	This TWEAK is about to be deprecated in favour of its equivalent in the
	memory module: TWEAK_MEMORY_USE_LOCKING (MEMORY_USE_LOCKING). The two
	are completely synonymous as far as this module is concerned.

	Cope with possible use from more than one thread.  Wraps each primary
	API call of this module in calls to OpMemory::MallocLock() and
	OpMemory::MallocUnlock() (as declared in pi/system/OpMemory.h) to
	provide crude thread-safety. May contribute to a dead-lock.  Isn't safe
	against re-entrancy (see TWEAK_LEA_MALLOC_REENTRANT for that).

	Define: USE_MALLOC_LOCK
	Depends on: FEATURE_3P_LEA_MALLOC
	Category: workaround

TWEAK_LEA_MALLOC_PLATFORM_CONFIG	eddy

	Selects the file which provides platform-specific configuration.
	See file used as default value for documentation.

	Define: LEA_MALLOC_CONFIG_HEADER
	Value: "modules/lea_malloc/dummy_config.h"
	Depends on: FEATURE_3P_LEA_MALLOC
	Category: setting

TWEAK_LEA_MALLOC_USE_OPERA_SBRK		mortenro

	Import and use the Opera implementation of UNIX 'sbrk()' as
	the fundamental interface for lea_malloc's interaction with
	the system.

	The opera implementation of 'sbrk()' is called 'op_sbrk()' and
	is implemented and configured in the memory module.

	NOTE: The API for 'op_sbrk()' may not always be available, it
	will depend on the platform and its implementation of the
	porting interface for memory.

	NOTE: This API should primarily be used on small devices where
	a maximum size for the heap can be imagined, and reserved
	up-front by 'op_sbrk()'.  The maximum size of the heap may
	have to be decided at compile time.

	Define: LEA_MALLOC_USE_OPERA_SBRK
	Depends on: FEATURE_3P_LEA_MALLOC, FEATURE_VIRTUAL_MEMORY
	Category: workaround

TWEAK_LEA_MALLOC_USE_OPERA_MMAP		mortenro

	Import and use the Opera implementation of UNIX 'mmap()' as
	the secondary interface for lea_malloc's interaction with the
	system.

	The opera implementation of 'mmap()' is called 'op_mmap()'
	and 'op_munmap()' and are implemented and configured in the
	memory module.

	NOTE: The API for 'op_mmap()' may not always be available, it
	will depend on the platform and its implementation of the
	porting interface for memory.

	NOTE: This API should primarily be used on small devices where
	a maximum size for the total 'mmap()' allocations can be
	imagined, and reserved up-front by 'op_mmap()'.  The maximum
	size for use by 'mmap()' may have to be decided at compile
	time.

	Define: LEA_MALLOC_USE_OPERA_MMAP
	Depends on: FEATURE_3P_LEA_MALLOC, FEATURE_VIRTUAL_MEMORY
	Category: workaround

TWEAK_LEA_MALLOC_MMAP_BACKUP		mortenro

	This setting controls whether MMAP() should be used as a
	backup mechanism when MORECORE() fails. Using MMAP() as a
	backup is the default, but this may be undesirable, especially
	when using TWEAK_LEA_MALLOC_USE_OPERA_SBRK or
	TWEAK_LEA_MALLOC_USE_OPERA_MMAP on a system with limited
	resources.

	Define: LEA_MALLOC_MMAP_AS_BACKUP
	Depends on: FEATURE_3P_LEA_MALLOC
	Enabled for: desktop, smartphone, tv, minimal, mini
	Disabled for: none
	Category: setting

TWEAK_LEA_MALLOC_REENTRANT		eddy

	Experimental hacks to avoid re-entrancy problems.  If a signal handled
	during a call to malloc were to call malloc, we'd be unable to guarantee
	invariants presumed by malloc.  Generally signals shouldn't do that.

	This hack ensures that signals are blocked during malloc's critical code
	and handled after it's restored its internal state to sanity.  It is
	probably very expensive: it sets signal masks at the start and end of
	every call to every API function.  Beating up the fool who called malloc
	(or free) from a signal handler is probably a better solution; but
	testing with this tweak on may make it easier to test the hypothesis
	that re-entrancy is the cause of a bug.

	Define: MALLOC_BLOCK_SIGNALS
	Category: workaround
	Depends on: FEATURE_3P_LEA_MALLOC
