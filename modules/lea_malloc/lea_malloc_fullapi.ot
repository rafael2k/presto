/* -*- Mode: c; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2004-2006 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 * Selftests for the lea_malloc module, written for the 2.7.2 version.
 * Lars T Hansen, Eddy.
 *
 * Basically verifies that trivial use works and that the API is available.
 * Does not test the entire API, because there are some functions (like
 * independent_comalloc()) that Opera will never use.
 *
 * API_DLM_FULL_MEMAPI: memalign, p?valloc, cfree, independent_c{om,}alloc,
 * malloc_stats, mallopt.  Opera doesn't directly use these, but note that
 * third-party code we link with at run-time (e.g. plugins) might rely on
 * functions we don't use.
 */
group "lea_malloc.fullapi";

require HAVE_DL_MALLOC;
require LEA_MALLOC_FULL_MEMAPI;

language c++;
include "modules/lea_malloc/malloc.h";
include "modules/lea_malloc/lea_malloc.h";

test("memalign")
{
    void *p = DL_MALLOC_NAME(memalign)( 1024, 40 );
    verify( p != NULL );
    verify( (INTPTR)p & 1023 == 0 );
    DL_MALLOC_NAME(free)( p );
}

test("mallinfo")
{
    void *p = DL_MALLOC_NAME(malloc)( 100 );
    struct mallinfo m = DL_MALLOC_NAME(mallinfo)();
    verify( m.arena > 0 && m.fordblks > 0 ); // Well, probably.  Not sure yet.
    DL_MALLOC_NAME(free)( p );
}

test("malloc_trim")
{
    int x = DL_MALLOC_NAME(malloc_trim)( 0 ); // Hard to test this other than calling it
	verify( x == 0 || x == 1 );
}

test("malloc_usable_size")
{
    int x = 0;
    for ( int i = 16; i < 32 ; i++ )
    {
		void *p = DL_MALLOC_NAME(malloc)( i );
		int s = DL_MALLOC_NAME(malloc_usable_size)( p );
		if ( s > i )
			x = 1;
		else
			verify( s >= i );
		DL_MALLOC_NAME(free)( p );
    }
    verify( x == 1 );		// For some object sizes, there should be an overhead
}
// malloc_stats prints output to stderr so is hard to test here
