/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*- */

group "memtools happy-malloc";

require HAVE_LTH_MALLOC;

include "modules/memtools/happy-malloc.h";

global
{
#define BLOCK (1024*2)
	extern unsigned int illegal_free_count;
	unsigned int lastcount = 0;
	int i;
	void *p;
	char *buf;
#ifdef MSWIN
// No setenv on this platform
#  define HAPPY_SETENV(x,y,z)  ((void)(0))
#else
#  define HAPPY_SETENV setenv
#endif
}

setup
{
	/* Only print warnings, do not crash on first error */
	HAPPY_SETENV("OPERA_DEBUG_FREE", "1", 0);
}

test ("memory_allocation_stats()")
{
	output("\n");
	memory_allocation_stats( stdout );
}

test ("delete instead of delete[]")
{
	lastcount = illegal_free_count;
	buf = new char[BLOCK];
	delete buf; /* Should be delete[] */
	verify( lastcount+1 == illegal_free_count );
}

test ("delete instead of free()")
{
	lastcount = illegal_free_count;
	buf = (char*)malloc(BLOCK);
	delete buf;
	verify( lastcount+1 == illegal_free_count );
}

test ("delete [] instead of free()")
{
	lastcount = illegal_free_count;
	buf = (char*)malloc(BLOCK);
	delete [] buf;
	verify( lastcount+1 == illegal_free_count );
}

test ("free() instead of delete[]")
{
	lastcount = illegal_free_count;
	buf = new char[BLOCK];
	free(buf);
	verify( lastcount+1 == illegal_free_count );
}

test ("Double delete with delete instead of delete []")
{
	lastcount = illegal_free_count;
	buf = new char[BLOCK];
	delete buf;
	delete buf;
	verify( lastcount+2 == illegal_free_count );
}

test ("Double delete []")
{
	lastcount = illegal_free_count;
	buf = new char[BLOCK];
	delete [] buf;
	delete [] buf;
	verify( lastcount+1 == illegal_free_count );
}

test ("delete instead of free() on string from strdup()")
{
	lastcount = illegal_free_count;
	buf = strdup("teststring");
	delete buf;
	verify( lastcount+1 == illegal_free_count );
}

test ("delete [] instead of free() on string from strdup()")
{
	lastcount = illegal_free_count;
	buf = strdup("teststring");
	delete [] buf;
	verify( lastcount+1 == illegal_free_count );
}

test ("Double free()")
{
	lastcount = illegal_free_count;
	buf = (char*)malloc(BLOCK);
	free(buf);
	free(buf);
	verify( lastcount+1 == illegal_free_count );
}

test ("free() on data from strdup()")
{
	lastcount = illegal_free_count;
	buf = strdup("teststring");
	free(buf);
	verify( lastcount == illegal_free_count );
}

test ("Write past edges")
{
	lastcount = illegal_free_count;
	buf = (char*)malloc(BLOCK);
	/* Write past edges */
	for (i = -1; i <= BLOCK; i++)
		buf[i] = 0xde;
	free(buf);
	verify( lastcount+1 == illegal_free_count );
}

test ("Free invalid pointer")
{
	lastcount = illegal_free_count;
	free(&buf);
	verify( lastcount+1 == illegal_free_count );
}

test ("Underrun detection")
{
	lastcount = illegal_free_count;
	buf = (char*)malloc(BLOCK);
	buf[-1] = 0xee;
	free(buf);
	verify( lastcount+1 == illegal_free_count );
}

test ("Overrun detection")
{
	lastcount = illegal_free_count;
	buf = (char*)malloc(BLOCK);
	buf[BLOCK] = 0xee;
	free(buf);
	verify( lastcount+1 == illegal_free_count );
}

test ("Write first and last byte")
{
	lastcount = illegal_free_count;
	buf = (char*)malloc(BLOCK);
	buf[0] = 0xee;
	buf[BLOCK-1] = 0xee;
	free(buf); /* Should be OK. */
	verify(lastcount == illegal_free_count);
}

test ("Realloc test")
{
	lastcount = illegal_free_count;
	unsigned int *ibuf = (unsigned int *) malloc(4);
	*ibuf = 0x12345678;
	ibuf = (unsigned int *) realloc(ibuf, 8);
	verify( lastcount == illegal_free_count );
	verify( 0x12345678 == *ibuf );
	*(ibuf+1) = 0x87654321;
	ibuf = (unsigned int *) realloc(ibuf, 12);
	verify( lastcount == illegal_free_count );
	verify( 0x12345678 == *ibuf );
	verify( 0x87654321 == *(ibuf+1) );
	free(ibuf);
	verify( lastcount == illegal_free_count );
}
