API_MT_STACK_TRACE_GUARD				mortenro

	Enable code to detect when a stacktrace should not
	proceed beyond a certain point.  This may for instance
	be needed to prevent stacktraces from venturing into
	a plugin (which may not be compiled with stack-frames).

	The OpStackTraceGuard class will be availble when this
	API is exported.

	Note 1: Functions that needs to prevent stacktraces from
	going above them on the stack, e.g. the NPN_* plugin
	functions, will have to instantiate an object of this
	class on the stack, when the macro below is defined.

	Note 2: This class is currently not thread-safe.

	Defines:	MEMTOOLS_ENABLE_STACKGUARD
	Depends on: nothing

API_MT_CODELOC_SUPPORT					mortenro

	Enable code that will allow looking up call-stacks and
	printing function names, files and line-numbers etc.

	In order for this function to function, or even compile,
	there needs to be platform support for it.  Have a look
	in memtools/memtools_codeloc.h for details on the
	interfaces and documentation (both for usage and porting).

	There is support for Linux in src/memtools_codeloc_linux.cpp
	that uses the platform 'addr2line' utility to perform the
	symbol lookup.  This default implementation can be
	disabled with a tweak.

	Defines:	MEMTOOLS_ENABLE_CODELOC
	Depends on:	nothing

API_MT_CALLSTACK_MANAGER				mortenro

	Enable the OpCallStack and OpCallStackManager classes
	that implements a database over all call-stacks seen.
	This can be used to e.g. tag all memory operations
	with the respective call-stack leading up to an allocation
	or deallocation.

	Defines:	MEMTOOLS_CALLSTACK_MANAGER
	Depends on:	nothing
