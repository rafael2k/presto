/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (c) 1995-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "jsplugins.scripting";

require init;
require JS_PLUGIN_SUPPORT;
require STATIC_JSPLUGINS;

include "modules/jsplugins/jsplugin.h";
include "modules/jsplugins/src/js_plugin_manager.h";
include "modules/jsplugins/src/js_plugin_context.h";
include "modules/jsplugins/src/js_plugin_object.h";
include "modules/jsplugins/src/jsplugins_selftest.h";

include "modules/doc/frm_doc.h";

global
{
}

setup
{
	// Create a security domain that allows everything
	JS_Plugin_SecurityDomain *sec_dom = OP_NEW(JS_Plugin_SecurityDomain, ());
	sec_dom->ConstructCallback();
	g_jsPluginManager->AllowPluginFrom("JSP_Selftests", sec_dom);
	// Add selftest plugin
	g_jsPluginManager->AddStaticPlugin("JSP_Selftests", &jsp::capabilities);
}

html
{
	"<html><body></body></html>"
}

test("JSP_Selftests constructor")
	language ecmascript;
{
	var obj = new JSP_Selftests();
	verify(obj);
}

test("HBB-111: Compatible history navigation required on jsplugins document")
	language c++;
{
	verify(state.doc->GetCompatibleHistoryNavigationNeeded());
}

test("Garbage collection")
	language ecmascript;
	async;
{
	function destroyed_ok(destroyed)
	{
		if (!destroyed)
			ST_failed("", "", "");
		else
			ST_passed();
	}

	function destroyed_bad(destroyed)
	{
		if (destroyed)
			ST_failed("", "", "");
	}

	var jsp = new JSP_Selftests();
	jsp.hold(jsp.gctest(destroyed_bad));		// holding, should not call destructor
	jsp.gctest(destroyed_ok);					// not holding, should call destructor
}

test("Cleanup after GC test.")
	language ecmascript;
{
	var jsp = new JSP_Selftests();
	jsp.hold();									// release
}

test("Returning expressions")
	language ecmascript;
{
	var jsp = new JSP_Selftests();
	verify(jsp);
	var r = jsp.return_as_expression("return 1+2+3+4+5;");
	verify(r == 1+2+3+4+5);
}

test("Getting window identifier")
	language ecmascript;
{
	var jsp = new JSP_Selftests();
	verify(jsp);
	var id = jsp.get_window_identifier();
	verify(id != 0);
}

test("Getting object host")
	language ecmascript;
{
	var jsp = new JSP_Selftests();
	verify(jsp);
	var host = jsp.get_object_host();
	verify(host != "");
}

test("Calling function with delayed return value")
	language ecmascript;
{
	var jsp = new JSP_Selftests();
	verify(jsp);
	var res = jsp.get_delayed_result();
	verify(res == 1);
	res = jsp.get_delayed_result();
	verify(res == 2);
	res = jsp.delayed_property;
	verify(res == 3);
	res = jsp.delayed_property;
	verify(res == 4);
}

html
{
	"<html><body>"
	"<object type='application/vnd.opera.jsplugins.selftest' id='jspselfobj'></object>"
	"</body></html>"
}

test("handle_object returning expressions")
	language ecmascript;
{
	var obj = document.getElementById('jspselfobj');
	verify(obj == "[object HTMLObjectElement]");
	verify(obj.xml == "[object XMLDocument]");
}

test("strings containing null bytes be sent from the plugin")
	language ecmascript;
{
	var obj = document.getElementById('jspselfobj');
	verify(obj.string_with_null.length == 7);
	verify(obj.string_with_null[0] == "f" );
	verify(obj.string_with_null[1] == "o" );
	verify(obj.string_with_null[2] == "o" );
	//verify(obj.string_with_null[3] == "\0" );
	verify(obj.string_with_null[4] == "b" );
	verify(obj.string_with_null[5] == "a" );
	verify(obj.string_with_null[6] == "r" );
}

test("Setting up")
	language ecmascript;
{
	var obj = document.getElementById('jspselfobj');
	obj.string_with_null = "x\0y";
}

test("strings containing null bytes be sent to the plugin")
	language c++;
{
	verify((g_jsplugins_selftest_bits & JSP_SELFTEST_SET_STRING_WITH_NULL) != 0);

}

test("jsplugin_value.string structure")
	language c++;
{
	// Make sure jsplugin_value.u.string always overlays jsplugin_value.u.s.string
	jsplugin_value x;
	verify(&x.u.string == &x.u.s.string);
}

exit
{
	g_jsPluginManager->RemoveStaticPlugin("JSP_Selftests");
}
