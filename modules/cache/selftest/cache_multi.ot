/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2004-2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Tests used to check multiple downloads
**
** Luca Venturi
**
*/
group "cache.multi";
require init;
require DISK_CACHE_SUPPORT;
require WEBSERVER_SUPPORT;
include "modules/url/url_loading.h";
include "modules/cache/cache_selftest.h";
include "modules/cache/cache_st_helpers.h";

#include "cache_unite.oth";

global
{
	#define SIZE_BIG_DOWNLOAD (128*1024)
	#define SIZE_BIGGER_DOWNLOAD (1024*1024)
	
	UniteCacheTester uct;
	MultiContext mctx;
	URL url_fd1;		// URL used to test the file download
	URL url_fd2;		// URL used to test the file download
	URL url_fd3;		// URL used to test the file download
	IAmLoadingThisURL IAmLoading1;
	IAmLoadingThisURL IAmLoading2;
	IAmLoadingThisURL IAmLoading3;
	
	// Managed contexts
	URL_CONTEXT_ID ctx_download;			// Used to test the download API
	URL_InUse use1;
	URL_InUse use2;
	WaitSingleURL *wait_N=NULL;     // Normal load
	WaitSingleURL *wait_D=NULL;     // "Download_Storage" load
	WaitSingleURL *wait_N2=NULL;    // Normal load
	WaitSingleURL *wait_D2=NULL;    // "Download_Storage" load
	WaitSingleURL *wait_N3=NULL;    // Normal load
	WaitSingleURL *wait_D3=NULL;    // "Download_Storage" load
	
	CustomLoad *cl_N=NULL;
	CustomLoad *cl_D_LD=NULL;
	CustomLoad *cl_D_L=NULL;
	CustomLoad *cl_D_R=NULL;
	CustomLoad *cl_N2=NULL;
	CustomLoad *cl_D_LD2=NULL;
	CustomLoad *cl_D_L2=NULL;
	CustomLoad *cl_D_R2=NULL;
	CustomLoad *cl_N3=NULL;
	CustomLoad *cl_D_LD3=NULL;
}

exit
{
	OP_DELETE(cl_N);
	OP_DELETE(cl_D_LD);
	OP_DELETE(cl_D_L);
	OP_DELETE(cl_D_R);
	OP_DELETE(cl_N2);
	OP_DELETE(cl_D_LD2);
	OP_DELETE(cl_D_L2);
	OP_DELETE(cl_D_R2);
	OP_DELETE(cl_N3);
	OP_DELETE(cl_D_LD3);
	OP_DELETE(wait_N);
	OP_DELETE(wait_D);
	OP_DELETE(wait_N2);
	OP_DELETE(wait_D2);
	OP_DELETE(wait_N3);
	OP_DELETE(wait_D3);
}

test("Create contexts")
{
	verify_success(mctx.CreateNewContext(ctx_download, UNI_L("crash_download"), TRUE, NULL));
}

test("Create objects")
{
	wait_N=uct.CreateDefaultMessageObject(FALSE);		// Normal load
	wait_D=uct.CreateDownloadMessageObject(FALSE);		// "Download_Storage" load
	wait_N2=uct.CreateDefaultMessageObject(FALSE);		// Normal load
	wait_D2=uct.CreateDownloadMessageObject(FALSE);		// "Download_Storage" load
	wait_N3=uct.CreateDefaultMessageObject(FALSE);		// Normal load
	wait_D3=uct.CreateDownloadMessageObject(FALSE);		// "Download_Storage" load
	
	// These tests are not meant to check bandwidth transfer
	if(wait_N)
	  wait_N->SetAcceptNoTransfer(TRUE);
	if(wait_D)
	  wait_D->SetAcceptNoTransfer(TRUE);
	if(wait_N2)
	  wait_N2->SetAcceptNoTransfer(TRUE);
	if(wait_D2)
	  wait_D2->SetAcceptNoTransfer(TRUE);
	if(wait_N3)
	  wait_N3->SetAcceptNoTransfer(TRUE);
	if(wait_D3)
	  wait_D3->SetAcceptNoTransfer(TRUE);
	
	if(wait_N)
		cl_N=OP_NEW(CustomLoad, (wait_N));
	if(wait_D)
		cl_D_LD=OP_NEW(CustomLoad, (wait_D, LOAD_LOADDOCUMENT));
	if(wait_D)
		cl_D_L=OP_NEW(CustomLoad, (wait_D, LOAD_LOAD));
	if(wait_D)
		cl_D_R=OP_NEW(CustomLoad, (wait_D, LOAD_RELOAD));
	if(wait_N2)
		cl_N2=OP_NEW(CustomLoad, (wait_N2));
	if(wait_D2)
		cl_D_LD2=OP_NEW(CustomLoad, (wait_D2, LOAD_LOADDOCUMENT));
	if(wait_D2)
		cl_D_L2=OP_NEW(CustomLoad, (wait_D2, LOAD_LOAD));
	if(wait_D2)
		cl_D_R2=OP_NEW(CustomLoad, (wait_D2, LOAD_RELOAD));
	if(wait_N3)
		cl_N3=OP_NEW(CustomLoad, (wait_N3));
	if(wait_D3)
		cl_D_LD3=OP_NEW(CustomLoad, (wait_D3, LOAD_LOADDOCUMENT));
		
	if(cl_N)
		cl_N->CreateMessageHandler();
	if(cl_D_LD)
		cl_D_LD->CreateMessageHandler();
	if(cl_D_L)
		cl_D_L->CreateMessageHandler();
	if(cl_D_R)
		cl_D_R->CreateMessageHandler();
	if(cl_N2)
		cl_N2->CreateMessageHandler();
	if(cl_D_LD2)
		cl_D_LD2->CreateMessageHandler();
	if(cl_D_L2)
		cl_D_L2->CreateMessageHandler();
	if(cl_D_R2)
		cl_D_R2->CreateMessageHandler();
	if(cl_N3)
		cl_N3->CreateMessageHandler();
	if(cl_D_LD3)
		cl_D_LD3->CreateMessageHandler();
		
	// Useful for debugging, but also required at the moment because of a bug
	if(wait_D)
		wait_D->SetWaitTime(120000);
	if(wait_N)
		wait_N->SetWaitTime(120000);
	if(wait_D2)
		wait_D2->SetWaitTime(120000);
	if(wait_N2)
		wait_N2->SetWaitTime(120000);
	if(wait_N3)
		wait_N3->SetWaitTime(120000);
	if(wait_D3)
		wait_D3->SetWaitTime(120000);
}

// Two downloads at a time
table TableDoubleDownloads(char *, CustomLoad *, CustomLoad *, UINT32, URL_CONTEXT_ID)
{
	//////////// Test normal downloads followed with one of the other types
  	{ "N+N", cl_N, cl_N2, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "N+LD", cl_N, cl_D_LD, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "LD+N", cl_D_LD, cl_N, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "N+L", cl_N, cl_D_L, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "L+N", cl_D_L, cl_N, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "N+R", cl_N, cl_D_R, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "N+R", cl_D_R, cl_N, SIZE_BIG_DOWNLOAD, ctx_download},
	
	//////////// Test "file downloads" using LoadDocument() followed with one of the other (remaining) types
  	{ "LD+LD", cl_D_LD, cl_D_LD2, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "LD+L", cl_D_LD, cl_D_L, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "L+LD", cl_D_L, cl_D_LD, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "LD+R", cl_D_LD, cl_D_R, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "R+LD", cl_D_R, cl_D_LD, SIZE_BIG_DOWNLOAD, ctx_download},
  	
  	//////////// Test "file downloads" using Load() followed with one of the other (remaining) types
  	{ "L+L", cl_D_L, cl_D_L2, SIZE_BIG_DOWNLOAD, ctx_download },
  	{ "L+R", cl_D_L, cl_D_R, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "R+L", cl_D_R, cl_D_L, SIZE_BIG_DOWNLOAD, ctx_download},
  	
  	//////////// Test "file downloads" using Reload()
  	{ "R+R", cl_D_R, cl_D_R2, SIZE_BIG_DOWNLOAD, ctx_download },
}

// Three downloads at a time
table TableTripleDownloads(char *, CustomLoad *, CustomLoad *, CustomLoad *, UINT32, URL_CONTEXT_ID)
{
  	{ "N+N+N", cl_N, cl_N2, cl_N3, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "N+N+LD", cl_N, cl_N2, cl_D_LD, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "N+LD+LD", cl_N, cl_D_LD, cl_D_LD2, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "LD+LD+LD", cl_D_LD, cl_D_LD2, cl_D_LD3, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "LD+LD+N", cl_D_LD, cl_D_LD2, cl_N, SIZE_BIG_DOWNLOAD, ctx_download},
  	{ "LD+N+LD", cl_D_LD, cl_N, cl_D_LD2, SIZE_BIG_DOWNLOAD, ctx_download},
}

table TableMoments(char *, int, BOOL)
{
  { " on header (IAmLoadingThisURL)", 0, TRUE}, 
  { " on first packet (IAmLoadingThisURL)", 1, TRUE}, 
  { " on second packet (IAmLoadingThisURL)", 2, TRUE}, 
  { " immediately (IAmLoadingThisURL)", -1, TRUE}, 
  { " on header", 0, FALSE}, 
  { " on first packet", 1, FALSE}, 
  { " on second packet", 2, FALSE}, 
  { " immediately", -1, FALSE}, 
}

foreach (desc, cl1, cl2, size, ctx) from TableDoubleDownloads
{
	foreach (desc2, moment, loading) from TableMoments
	{
		test("Double download - " desc desc2)
		async;
		{
			if(cl1 && cl2)
			{
				cl1->ResetLoadingState(FALSE, moment);
				cl2->ResetLoadingState(TRUE, moment);

				url_fd1=uct.JScreatePage(size, 10000, ctx, FALSE);

				if(loading)
					IAmLoading1.SetURL(url_fd1);
				else
					IAmLoading1.UnsetURL();

				uct.SetExpectedTransferRange(size, size+1024+size/1024 /* Add some more margin for big files */);
				use1.SetURL(url_fd1);
				uct.LoadOK(url_fd1, NULL, cl1);

				url_fd2=g_url_api->GetURL(url_fd1.GetAttribute(URL::KName), ctx);
				OP_ASSERT(url_fd2.GetRep()==url_fd1.GetRep());

				if(loading)
					IAmLoading2.SetURL(url_fd2);
				else
					IAmLoading2.UnsetURL();

				uct.LoadOK(url_fd2, NULL, cl2);

				if(moment==-1)
				{
					cl1->ManageLoadToFile(url_fd1.GetRep(), 0);
					cl2->ManageLoadToFile(url_fd2.GetRep(), 0);
				}
			}
			else
				ST_failed("OOM");
		}
	}
}

foreach (desc, cl1, cl2, cl3, size, ctx) from TableTripleDownloads
{
	foreach (desc2, moment, loading) from TableMoments
	{
		test("Triple download - " desc desc2)
			async;
		{
			if(cl1 && cl2 && cl3)
			{
				cl1->ResetLoadingState(FALSE, moment);
				cl2->ResetLoadingState(FALSE, moment);
				cl3->ResetLoadingState(TRUE, moment);

				url_fd1=uct.JScreatePage(size, 10000, ctx, FALSE); 

				if(loading)
					IAmLoading1.SetURL(url_fd1);
				else
					IAmLoading1.UnsetURL();

				uct.SetExpectedTransferRange(size, size+1024+size/1024 /* Add some more margin for big files */);
				use1.SetURL(url_fd1);
				uct.LoadOK(url_fd1, NULL, cl1);

				url_fd2=g_url_api->GetURL(url_fd1.GetAttribute(URL::KName), ctx);
				url_fd3=g_url_api->GetURL(url_fd1.GetAttribute(URL::KName), ctx);

				if(loading)
					IAmLoading2.SetURL(url_fd2);
				else
					IAmLoading2.UnsetURL();

				if(loading)
					IAmLoading3.SetURL(url_fd3);
				else
					IAmLoading3.UnsetURL();

				uct.LoadOK(url_fd2, NULL, cl2);
				uct.LoadOK(url_fd3, NULL, cl3);

				if(moment==-1)
				{
					cl1->ManageLoadToFile(url_fd1.GetRep(), 0);
					cl2->ManageLoadToFile(url_fd2.GetRep(), 0);
					cl3->ManageLoadToFile(url_fd2.GetRep(), 0);
				}
			}
			else
				ST_failed("OOM");
		}
	}
}
