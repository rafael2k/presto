/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2004-2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** This file tests the basic functionalities of the cache from an higher level:
** load a document and test if it is really accessed from the cache
**
** Luca Venturi
**
** Test for the OEM cache
*/
group "cache oem";
require init;
require DISK_CACHE_SUPPORT;
include "modules/cache/cache_selftest.h";
include "modules/cache/cache_st_helpers.h";
include "modules/cache/cache_debug.h";
include "modules/cache/cache_ctxman_disk.h";
include "modules/url/url2.h";
include "modules/prefs/prefsmanager/collections/pc_network.h";

#include "cache_html.oth";

global
{
	MultiContext mctx;
	
	// Managed contexts
	URL_CONTEXT_ID ctx_opcache;			// Tests for Operator Cache (also for Dragonfly)
	
	CacheHelpers ch;
}

test("Create the contexts")
{
	verify_success(mctx.CreateNewContext(ctx_opcache, UNI_L("basic_opcache"), TRUE, NULL));
}

// Used to check the basic functionlaties, for each size
table TableSizes(char*, int, OpString&, OpFile&, URL&, char*, CacheType)
{
  { "[embedded]", SIZE_EMBEDDED, path_embedded, file_embedded, url_embedded, "embedded", TYPE_EMBEDDED},
  { "[container]", SIZE_CONTAINERS, path_cont, file_cont, url_cont, "container", TYPE_CONTAINER },
  { "[plain]", SIZE_PLAIN, path_plain, file_plain, url_plain, "plain", TYPE_PLAIN }
}


foreach (descr, file_size, file_path, file, url, vpath, cache_type) from TableSizes
{
	// Tests that OEM files are saved as plain texts
	test("Dragonfly andf Operator Cache basic test")
	require __OEM_EXTENDED_CACHE_MANAGEMENT;
	require __OEM_OPERATOR_CACHE_MANAGEMENT;
	{
		URL url_oem=ch.CacheBogusURLRetrieve(ctx_opcache, file_size, FALSE, FALSE);
		URL url_normal=ch.CacheBogusURLRetrieve(ctx_opcache, file_size, FALSE, FALSE);
		
		// Put it in the operator cache folder
		url_oem.SetAttribute(URL::KNeverFlush, TRUE);
		
		CacheTester::SaveFiles(ctx_opcache);
		OpString8 name;
 	
 		verify_success(name.Set(url_oem.GetAttribute(URL::KFileName).CStr()));
 		output("File Name: %s ", name.CStr());
 		
 		Cache_Storage *cs_oem=url_oem.GetRep()->GetDataStorage()->GetCacheStorage();
 		Cache_Storage *cs_normal=url_normal.GetRep()->GetDataStorage()->GetCacheStorage();
 		
 		if(cache_type==TYPE_EMBEDDED)
 		{
 			verify(cs_oem->IsEmbedded());		 // Embedded files are allowed, as they should not create problems
 			verify(cs_normal->IsEmbedded());
 			verify(!cs_oem->GetContainerID());
 			verify(!cs_normal->GetContainerID());
 			verify(name.Length()==0);
 		}
 		else if(cache_type==TYPE_CONTAINER)
 		{
 			verify(!cs_oem->IsEmbedded());
 			verify(!cs_normal->IsEmbedded());
 			verify(!cs_oem->GetContainerID());	// Containers are not allowed, as they can be deleted by files outside of the operator cache 
 			verify(cs_normal->GetContainerID());
 			verify(name.Length()>0);
 		}
 		else
 		{
 			verify(!cs_oem->IsEmbedded());
 			verify(!cs_normal->IsEmbedded());
 			verify(!cs_oem->GetContainerID());
 			verify(!cs_normal->GetContainerID());
 			verify(name.Length()>0);
 		}
	}	
}
