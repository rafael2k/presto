/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2004-2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** This file tests the basic functionalities of the cache from an higher level:
** load a document and test if it is really accessed from the cache
**
** Luca Venturi
**
** This file is used to share some HTML and JS Unite service
*/

/**
	Pages available after InstallCacheServices() has run:
	* generate_page {size, age}: generate a page of a given size and age
	* step {size, step, id}: generate a page, with the following characteristics (based on the step):
		1) expire immediately (-1)
		2) expire now (0)
		3) (conditional get required, error 400 for now)
		4) expire later (500)
		5) error 403 (this step is usually called if the cache misbehave)
	* auto_step: cycle between the 5 steps
	* restart_steps: start from step 1
*/


html {"	<html> <head>\n"
"	<script type='text/javascript' language='javascript'>\n"
"\n"
" // Generate a page of the required size and with the needed expire directive\n"
"	function generatePage(size, age, response)\n"
"	{\n"
"		var str_10 = '0123456789';\n"
"		var str_100 = '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789';\n"
"		var str_1000 = str_100 + str_100 + str_100 + str_100 + str_100 + str_100 + str_100 + str_100 + str_100 + str_100;\n"
"		var result='';\n"
"\n"
"		while(size>=1000) { result+=str_1000; size-=1000; }\n"
"		while(size>=100)  { result+=str_100; size-=100; }\n"
"		while(size>=10)   { result+=str_10; size-=10; }\n"
"		while(size>0)     { result+='X'; size--; }\n"
"\n"
"		if(age>=0)\n"
"		    response.setResponseHeader('Cache-Control', 'max-age=' + age);\n"
"		else\n"
"		{\n"
"			response.setResponseHeader('Expires', '-1');\n"
"			response.setResponseHeader('Cache-Control', 'private, max-age=0');\n"
"		}\n"
"\n"
"		response.write(result);\n"
"		response.close();\n"
"	}\n"
"\n"
"	/* Permanent redirection */ \n"
"   function redirectTo(response, url, content_type, response_code)\n"
"	{\n"
"		response.setStatusCode(''+response_code, 'Moved to test response ' + response_code);\n"
"		response.setResponseHeader('Location', url);\n"
"		response.setResponseHeader('Content-Type', content_type);\n"
"		response.write('<html><head><title>Moved</title></head><body>Moved!</body></html>');\n"
"		response.close();\n"
"	}\n"
"\n"
"\n"
"	function pageStep(size, step, response) {\n"
"		if(step==1) generatePage(size, -1, response);\n"
"		else if(step==2) generatePage(size, 0, response);\n"
"		else if(step==3) { response.setStatusCode(400); response.close(); }\n"
"		else if(step==4) { generatePage(size, 500, response); }\n"
"		else if(step==5) { response.setStatusCode(403); response.close(); }\n"
"	}\n"
"\n"
"	function manageStep(weStep, step) {\n"
"		var request = weStep.connection.request;\n"
"		var response = weStep.connection.response;\n"
"		var size = (request.queryItems['size'])?request.queryItems['size'][0]:0;\n"
"		pageStep(size, step, response);\n"
"	}\n"
"\n"
"	function step1(we) { manageStep(we, 1); assignAutoStep(step2); }\n"
"	function step2(we) { manageStep(we, 2); assignAutoStep(step3); }\n"
"	function step3(we) { manageStep(we, 3); assignAutoStep(step4); }\n"
"	function step4(we) { manageStep(we, 4); assignAutoStep(step5); }\n"
"	function step5(we) { manageStep(we, 5); assignAutoStep(step1); }\n"
"\n"
"	function assignAutoStep(fn) {\n"
" 		var ws = opera.io.webserver;\n"
"	    ws.removeEventListener('auto_step', step1, false);\n"
"	    ws.removeEventListener('auto_step', step2, false);\n"
"	    ws.removeEventListener('auto_step', step3, false);\n"
"	    ws.removeEventListener('auto_step', step4, false);\n"
"	    ws.removeEventListener('auto_step', step5, false);\n"
"\n"
"	    ws.addEventListener('auto_step', fn, false);\n"
"	}\n"
"\n"
"\n"
" /* Install standard cache services*/ \n"
" function InstallCacheServices()\n"
" {\n"
" 		var ws = opera.io.webserver;\n"
" 		ws.addEventListener('generate_page', function(weGenPage) {\n"
" 		var request = weGenPage.connection.request;\n"
" 		var response = weGenPage.connection.response;\n"
" 		var size = (request.queryItems['size'])?request.queryItems['size'][0]:0;\n"
" 		var age = (request.queryItems['age'])?request.queryItems['age'][0]:1;\n"
" \n"
" 		generatePage(size, age, response);\n"
" 	}, false);\n"
"	assignAutoStep(step1);\n"
"	ws.addEventListener('step', function(weStepLis) {\n"
"	    var request = weStepLis.connection.request;\n"
"	    var step = (request.queryItems['step'])?parseInt(request.queryItems['step'][0]):1;\n"
"	    manageStep(weStepLis, step)\n"
"	}, false);\n"
"	ws.addEventListener('restart_steps', function(weRestart) { assignAutoStep(step1); weRestart.connection.response.close(); }, false);\n"
"   opera.postError('InstallCacheServices() body: ' + InstallCacheServices);\n"
" }\n"
"\n"
"\n"
" /* Install a redirect*/ \n"
" function InstallRedirect(virtual_url, target_url, content_type, response_code)\n"
" {\n"
" 		var ws = opera.io.webserver;\n"
"	ws.addEventListener(virtual_url, function(weRedir) { var response = weRedir.connection.response; redirectTo(response, target_url, content_type, response_code); }, false);\n"
" }\n"
"\n"
"\n"
" function loadXMLDocRange(url, start, end, expected_answer)\n"
"  	{\n"
"	var xmlhttp = null;\n"
"  	var g_service_url = 'http://localhost:' + opera.io.webserver.port + opera.io.webserver.currentServicePath;\n"
"\n"
"   url=g_service_url+url;\n"
"  		if(window.XMLHttpRequest)\n"
"			xmlhttp=new XMLHttpRequest();\n"
"\n"
"    	if(xmlhttp!=null)\n"
"		{\n"
"  			xmlhttp.onreadystatechange=function() { state_Change(xmlhttp, expected_answer); };\n"
"  			xmlhttp.open('GET',url,true)\n"
"  			xmlhttp.setRequestHeader('Range','bytes=' + start + '-' + end)\n"
"  			xmlhttp.send(null);\n"
"  			opera.postError('Checked: ' + url + '   from ' + start + ' to ' + end + ' - expecting: ' + expected_answer, 'cache_basic.ot', 0);\n"
"  		} \n"
"  		else\n"
"  		    ST_failed('Your browser does not support XMLHTTP.', 'cache_basic.ot', 0);\n"
"  	}\n"
"\n"
"  	function state_Change(xmlhttp, expected_answer)\n"
"  	{\n"
"  		if(xmlhttp.readyState>3)\n"
"  		{\n"
"  			if(xmlhttp.status == 206)\n"
"  		 	{\n"
"  				if(xmlhttp.responseText==expected_answer)\n"
"  					ST_passed();\n"
"  				else\n"
"  					ST_failed('Expecting text: ' + expected_answer + ' - got: ' + xmlhttp.responseText, 'cache_basic.ot', 0);\n"
"  			}\n"
"  			else\n"
"  				ST_failed('Status: ' + xmlhttp.status + ' instead of 206', 'cache_basic.ot', 0);\n"
"  		}\n"
"  	}\n"
"	</script>\n"
"	</head></html>\n"
}
