group "XMLUtils.XMLFragment.basic";
require init;
require XMLUTILS_XMLFRAGMENT_SUPPORT;

include "modules/xmlutils/xmlfragment.h";
include "modules/xmlutils/xmlnames.h";
include "modules/util/adt/bytebuffer.h";
include "modules/util/opfile/opfile.h";

// Files that will be copied by parse_tests.pike
table input_files (const char *) filelist "input" name "input*.xml";

test("XMLFragment basic #1")
{
  XMLFragment fragment;
  TempBuffer buffer;

  verify(fragment.Parse(UNI_L(#string "input/input01.xml")) == OpStatus::OK);

  verify(fragment.EnterElement(UNI_L("library")));
  verify(fragment.GetAttribute(UNI_L("size")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("size")), "small"));

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "August Strindberg"));
  verify(fragment.GetAttribute(UNI_L("nationality")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("nationality")), "swedish"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Hems\366borna"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "I can't be bothered with writing long descriptions?"));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "R\366da rummet"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Again: no long descriptions here."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "Robert A. Heinlein"));
  verify(fragment.GetAttribute(UNI_L("nationality")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("nationality")), "american"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "The moon is a harsh mistress"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "This is a really good book."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Stranger in a strange land"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Never did read this."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"
  fragment.LeaveElement(); // leaving "library"

  verify(!fragment.HasCurrentElement());
}

test("XMLFragment basic #2")
{
  /* Like #1, but uses the GetAllText version that automatically enters
     an element to read the descriptions. */

  XMLFragment fragment;
  TempBuffer buffer;

  verify(fragment.Parse(UNI_L(#string "input/input01.xml")) == OpStatus::OK);

  verify(fragment.EnterElement(UNI_L("library")));
  verify(fragment.GetAttribute(UNI_L("size")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("size")), "small"));

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "August Strindberg"));
  verify(fragment.GetAttribute(UNI_L("nationality")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("nationality")), "swedish"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Hems\366borna"));

  verify(fragment.GetAllText(buffer, UNI_L("description")) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "I can't be bothered with writing long descriptions?"));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "R\366da rummet"));

  verify(fragment.GetAllText(buffer, UNI_L("description")) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Again: no long descriptions here."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "Robert A. Heinlein"));
  verify(fragment.GetAttribute(UNI_L("nationality")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("nationality")), "american"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "The moon is a harsh mistress"));

  verify(fragment.GetAllText(buffer, UNI_L("description")) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "This is a really good book."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Stranger in a strange land"));

  verify(fragment.GetAllText(buffer, UNI_L("description")) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Never did read this."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"
  fragment.LeaveElement(); // leaving "library"

  verify(!fragment.HasCurrentElement());
}

test("XMLFragment basic #3")
{
  /* Like #1, but uses the regular GetAllText version again, and does
     not enter the description element first. */

  XMLFragment fragment;
  TempBuffer buffer;

  verify(fragment.Parse(UNI_L(#string "input/input01.xml")) == OpStatus::OK);

  verify(fragment.EnterElement(UNI_L("library")));
  verify(fragment.GetAttribute(UNI_L("size")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("size")), "small"));

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "August Strindberg"));
  verify(fragment.GetAttribute(UNI_L("nationality")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("nationality")), "swedish"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Hems\366borna"));

  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "I can't be bothered with writing long descriptions?"));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "R\366da rummet"));

  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Again: no long descriptions here."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "Robert A. Heinlein"));
  verify(fragment.GetAttribute(UNI_L("nationality")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("nationality")), "american"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "The moon is a harsh mistress"));

  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "This is a really good book."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Stranger in a strange land"));

  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Never did read this."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"
  fragment.LeaveElement(); // leaving "library"

  verify(!fragment.HasCurrentElement());
}

test("XMLFragment basic #4")
{
  /* Like #3, but uses GetAttributeFallback to read attributes that are
     specified. */

  XMLFragment fragment;
  TempBuffer buffer;

  verify(fragment.Parse(UNI_L(#string "input/input01.xml")) == OpStatus::OK);

  verify(fragment.EnterElement(UNI_L("library")));
  verify(fragment.GetAttribute(UNI_L("size")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("size")), "small"));

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "August Strindberg"));
  verify(fragment.GetAttributeFallback(UNI_L("nationality"), UNI_L("norwegian")));
  verify(uni_str_eq(fragment.GetAttributeFallback(UNI_L("nationality"), UNI_L("norwegian")), "swedish"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Hems\366borna"));

  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "I can't be bothered with writing long descriptions?"));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "R\366da rummet"));

  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Again: no long descriptions here."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "Robert A. Heinlein"));
  verify(fragment.GetAttributeFallback(UNI_L("nationality"), UNI_L("norwegian")));
  verify(uni_str_eq(fragment.GetAttributeFallback(UNI_L("nationality"), UNI_L("norwegian")), "american"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "The moon is a harsh mistress"));

  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "This is a really good book."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Stranger in a strange land"));

  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Never did read this."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"
  fragment.LeaveElement(); // leaving "library"

  verify(!fragment.HasCurrentElement());
}

test("XMLFragment basic #5")
{
  /* Like #4, but loads a different input where the attributes read with
     GetAttributeFallback are not specified. */

  XMLFragment fragment;
  TempBuffer buffer;

  verify(fragment.Parse(UNI_L(#string "input/input02.xml")) == OpStatus::OK);

  verify(fragment.EnterElement(UNI_L("library")));
  verify(fragment.GetAttribute(UNI_L("size")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("size")), "small"));

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "August Strindberg"));
  verify(fragment.GetAttributeFallback(UNI_L("nationality"), UNI_L("norwegian")));
  verify(uni_str_eq(fragment.GetAttributeFallback(UNI_L("nationality"), UNI_L("norwegian")), "norwegian"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Hems\366borna"));

  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "I can't be bothered with writing long descriptions?"));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "R\366da rummet"));

  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Again: no long descriptions here."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "Robert A. Heinlein"));
  verify(fragment.GetAttributeFallback(UNI_L("nationality"), UNI_L("norwegian")));
  verify(uni_str_eq(fragment.GetAttributeFallback(UNI_L("nationality"), UNI_L("norwegian")), "norwegian"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "The moon is a harsh mistress"));

  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "This is a really good book."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Stranger in a strange land"));

  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Never did read this."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"
  fragment.LeaveElement(); // leaving "library"

  verify(!fragment.HasCurrentElement());
}

test("XMLFragment basic #6")
{
  XMLFragment fragment1;
  verify(fragment1.Parse(UNI_L("<element><text>[text 1]></text><text>[text 2]</text></element>")) == OpStatus::OK);

  XMLFragment fragment2;
  verify(fragment2.Parse(UNI_L("<element><text>[text 3]></text><text>[text 4]</text></element>")) == OpStatus::OK);

  XMLFragment fragment3;
  verify(fragment3.OpenElement(UNI_L("root")) == OpStatus::OK);
  verify(fragment3.GetElementName() == UNI_L("root"));
  verify(fragment3.AddFragment(&fragment1) == OpStatus::OK);
  verify(fragment3.GetElementName() == UNI_L("root"));
  verify(fragment3.AddFragment(&fragment2) == OpStatus::OK);
  verify(fragment3.GetElementName() == UNI_L("root"));

  TempBuffer buffer;
  verify(fragment3.GetXML(buffer, FALSE) == OpStatus::OK);
  verify(buffer.GetStorage());
  verify(uni_str_eq(buffer.GetStorage(), UNI_L("<root><element><text>[text 1]></text><text>[text 2]</text></element><element><text>[text 3]></text><text>[text 4]</text></element></root>")));
}

test("XMLFragment basic #7")
{
  XMLFragment fragment;
  verify(fragment.Parse(UNI_L(#string "input/input04.xml")) == OpStatus::ERR);
}

table not_wf_files (const char *) filelist "input" name "input01.xml";

test ("XMLFragment basic #8 ($(filename8))")
  multi not_wf_files (filename8);
{
  OpString filename;

  verify(filename.Set(filename8) == OpStatus::OK);

  OpFile file;

  verify(file.Construct(filename.CStr()) == OpStatus::OK);
  verify(file.Open(OPFILE_READ | OPFILE_TEXT) == OpStatus::OK);

  ByteBuffer source;

  while (!file.Eof())
  {
    char *chunk;
    unsigned chunk_size;

    verify(source.GetNewChunk(&chunk, &chunk_size) == OpStatus::OK);

    OpFileLength read;

    verify(file.Read(chunk, chunk_size, &read) == OpStatus::OK);

    source.AddBytes((unsigned) read);
  }

  XMLFragment fragment;
  TempBuffer buffer;

  verify(fragment.Parse(&source) == OpStatus::OK);

  verify(fragment.EnterElement(UNI_L("library")));
  verify(fragment.GetAttribute(UNI_L("size")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("size")), "small"));

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "August Strindberg"));
  verify(fragment.GetAttribute(UNI_L("nationality")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("nationality")), "swedish"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Hems\366borna"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "I can't be bothered with writing long descriptions?"));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "R\366da rummet"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Again: no long descriptions here."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "Robert A. Heinlein"));
  verify(fragment.GetAttribute(UNI_L("nationality")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("nationality")), "american"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "The moon is a harsh mistress"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "This is a really good book."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Stranger in a strange land"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Never did read this."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"
  fragment.LeaveElement(); // leaving "library"

  verify(!fragment.HasCurrentElement());
}

test ("XMLFragment basic #9 ($(filename8))")
  multi not_wf_files (filename8);
{
  OpString filename;

  verify(filename.Set(filename8) == OpStatus::OK);

  OpFile file;

  verify(file.Construct(filename.CStr()) == OpStatus::OK);
  verify(file.Open(OPFILE_READ | OPFILE_TEXT) == OpStatus::OK);

  XMLFragment fragment;
  TempBuffer buffer;

  verify(fragment.Parse(&file) == OpStatus::OK);

  verify(fragment.EnterElement(UNI_L("library")));
  verify(fragment.GetAttribute(UNI_L("size")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("size")), "small"));

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "August Strindberg"));
  verify(fragment.GetAttribute(UNI_L("nationality")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("nationality")), "swedish"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Hems\366borna"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "I can't be bothered with writing long descriptions?"));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "R\366da rummet"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Again: no long descriptions here."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "Robert A. Heinlein"));
  verify(fragment.GetAttribute(UNI_L("nationality")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("nationality")), "american"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "The moon is a harsh mistress"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "This is a really good book."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Stranger in a strange land"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Never did read this."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"
  fragment.LeaveElement(); // leaving "library"

  verify(!fragment.HasCurrentElement());
}

table empty_xml (const char *) filelist "input" name "empty.xml";

test ("XMLFragment basic #11 ($(filename8))")
  multi empty_xml (filename8);
{
  OpString filename;

  verify(filename.Set(filename8) == OpStatus::OK);

  OpFile file;

  verify(file.Construct(filename.CStr()) == OpStatus::OK);
  verify(file.Open(OPFILE_READ | OPFILE_TEXT) == OpStatus::OK);

  XMLFragment fragment;

  verify(fragment.Parse(&file) == OpStatus::OK);
}

test ("XMLFragment basic #12")
{
  ByteBuffer buffer;

  /* The purpose of this test is to test chunked parsing.  So we just
     generate some dummy content that fills up a number of chunks. */

  verify(OpStatus::IsSuccess(buffer.AppendString("<root>")));
  while (buffer.GetChunkCount() < 5)
    verify(OpStatus::IsSuccess(buffer.AppendString("<element>This is some text, to fill out.</element>")));
  verify(OpStatus::IsSuccess(buffer.AppendString("</root>")));

  XMLFragment fragment;

  verify(OpStatus::IsSuccess(fragment.Parse(&buffer)));
}

test ("XMLFragment basic #13")
  require XML_ERRORS;
{
  XMLFragment fragment;

  verify(OpStatus::IsError(fragment.Parse(UNI_L("<root>\n  <element>\n  </wrong>\n</root>"))));

  verify(fragment.GetErrorDescription());
  verify(op_strcmp(fragment.GetErrorDescription(), "invalid end-tag"));

  verify(fragment.GetErrorLocation().start.IsValid());
  verify(fragment.GetErrorLocation().start.line == 2);
  verify(fragment.GetErrorLocation().start.column == 2);

  verify(fragment.GetErrorLocation().end.IsValid());
  verify(fragment.GetErrorLocation().end.line == 2);
  verify(fragment.GetErrorLocation().end.column == 10);
}
