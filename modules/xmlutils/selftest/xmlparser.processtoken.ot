group "XMLUtils.XMLParser.ProcessToken";
require init;
require XMLUTILS_XMLPARSER_PROCESSTOKEN;
require OPTREECALLBACK_SUPPORT;

include "modules/xmlutils/xmlparser.h";
include "modules/xmlutils/xmltoken.h";
include "modules/xmlutils/xmltokenhandler.h";
include "modules/xmlutils/xmltokenbackend.h";
include "modules/xmlutils/xmlserializer.h";
include "modules/xmlutils/xmldocumentinfo.h";
include "modules/xmlutils/xmlutils.h";
include "modules/logdoc/optreecallback.h";
include "modules/doc/frm_doc.h";
include "modules/util/str.h";

global
{
  class TrivialTreeCallback : public OpTreeCallback
  {
  public:
    TrivialTreeCallback() : element(NULL) {}

    HTML_Element *element;

    virtual OP_STATUS ElementFound(HTML_Element *found)
    {
      element = found;
      return OpStatus::OK;
    }

    virtual OP_STATUS ElementNotFound()
    {
      return OpStatus::OK;
    }
  };

  class TrivialTokenBackend : public XMLTokenBackend
  {
  public:
    const uni_char *literal;

    virtual BOOL GetLiteralIsWhitespace() { return XMLUtils::IsWhitespace(literal); }
    virtual const uni_char *GetLiteralSimpleValue() { return literal; }
    virtual uni_char *GetLiteralAllocatedValue() { return UniSetNewStr(literal); }
    virtual unsigned GetLiteralLength() { return uni_strlen(literal); }
    virtual OP_STATUS GetLiteral(XMLToken::Literal &object)
    {
      RETURN_IF_ERROR(object.SetPartsCount(1));
      RETURN_IF_ERROR(object.SetPart(0, literal, uni_strlen(literal), TRUE));
      return OpStatus::OK;
    }
    virtual void ReleaseLiteralPart(unsigned index) { OP_ASSERT(FALSE); }

#ifdef XML_ERRORS
    virtual BOOL GetTokenRange(XMLRange &range) { return FALSE; }
    virtual BOOL GetAttributeRange(XMLRange &range, unsigned index) { return FALSE; }
#endif // XML_ERRORS
  };
}

xml
{
  "<root/>"
}

test("XMLParser.ProcessToken #1")
{
  TrivialTreeCallback treecb;
  TrivialTokenBackend backend;
  XMLTokenHandler *tokenhandler = NULL;
  XMLParser *parser = NULL;
  XMLSerializer *serializer = NULL;

  verify(OpTreeCallback::MakeTokenHandler(tokenhandler, state.doc->GetLogicalDocument(), &treecb) == OpStatus::OK);

  URL url;

  verify(XMLParser::Make(parser, NULL, (MessageHandler *) NULL, tokenhandler, url) == OpStatus::OK);

  XMLToken token(parser, &backend);

  XMLCompleteName root(UNI_L("root"));
  XMLCompleteName element(UNI_L("element"));
  XMLCompleteName child(UNI_L("child"));

  token.SetType(XMLToken::TYPE_STag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_STag);
  token.SetName(element);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Text);
  backend.literal = UNI_L("[text1]");
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_EmptyElemTag);
  token.SetName(child);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Text);
  backend.literal = UNI_L("[text2]");
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_EmptyElemTag);
  token.SetName(child);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Text);
  backend.literal = UNI_L("[text3]");
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_ETag);
  token.SetName(element);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_ETag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Finished);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(parser->IsFinished());

  verify(treecb.element);

  TempBuffer buffer;

  verify(XMLSerializer::MakeToStringSerializer(serializer, &buffer) == OpStatus::OK);
  verify(serializer->Serialize(NULL, url, treecb.element, NULL, NULL) == OpStatus::OK);

  verify(uni_strcmp(buffer.GetStorage(), UNI_L("<root><element>[text1]<child/>[text2]<child/>[text3]</element></root>")) == 0);
}
finally
{
  if (treecb.element && treecb.element->Clean(state.doc))
    treecb.element->Free(state.doc);

  OP_DELETE(tokenhandler);
  OP_DELETE(parser);
  OP_DELETE(serializer);
}

test("XMLParser.ProcessToken #2")
{
  TrivialTreeCallback treecb;
  TrivialTokenBackend backend;
  XMLTokenHandler *tokenhandler = NULL;
  XMLParser *parser = NULL;
  XMLSerializer *serializer = NULL;

  verify(OpTreeCallback::MakeTokenHandler(tokenhandler, state.doc->GetLogicalDocument(), &treecb) == OpStatus::OK);

  URL url;

  verify(XMLParser::Make(parser, NULL, (MessageHandler *) NULL, tokenhandler, url) == OpStatus::OK);

  XMLToken token(parser, &backend);

  XMLCompleteName root(UNI_L("root"));
  XMLCompleteName element(UNI_L("element"));
  XMLCompleteName child(UNI_L("child"));

  token.SetType(XMLToken::TYPE_STag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_STag);
  token.SetName(element);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  verify(parser->Parse(UNI_L("[text1]"), 7, TRUE) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_EmptyElemTag);
  token.SetName(child);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  verify(parser->Parse(UNI_L("[text2]"), 7, TRUE) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_EmptyElemTag);
  token.SetName(child);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  verify(parser->Parse(UNI_L("[text3]"), 7, TRUE) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_ETag);
  token.SetName(element);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_ETag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Finished);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(parser->IsFinished());

  verify(treecb.element);

  TempBuffer buffer;

  verify(XMLSerializer::MakeToStringSerializer(serializer, &buffer) == OpStatus::OK);
  verify(serializer->Serialize(NULL, url, treecb.element, NULL, NULL) == OpStatus::OK);

  verify(uni_strcmp(buffer.GetStorage(), UNI_L("<root><element>[text1]<child/>[text2]<child/>[text3]</element></root>")) == 0);
}
finally
{
  if (treecb.element && treecb.element->Clean(state.doc))
    treecb.element->Free(state.doc);

  OP_DELETE(tokenhandler);
  OP_DELETE(parser);
  OP_DELETE(serializer);
}

test("XMLParser.ProcessToken #3")
{
  TrivialTreeCallback treecb;
  TrivialTokenBackend backend;
  XMLTokenHandler *tokenhandler = NULL;
  XMLParser *parser = NULL;
  XMLSerializer *serializer = NULL;

  verify(OpTreeCallback::MakeTokenHandler(tokenhandler, state.doc->GetLogicalDocument(), &treecb) == OpStatus::OK);

  URL url;

  verify(XMLParser::Make(parser, NULL, (MessageHandler *) NULL, tokenhandler, url) == OpStatus::OK);

  XMLToken token(parser, &backend);

  XMLCompleteName root(UNI_L("root"));
  XMLCompleteName element(UNI_L("element"));
  XMLCompleteName child(UNI_L("child"));

  token.SetType(XMLToken::TYPE_STag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  verify(parser->Parse(UNI_L("<element>"), 9, TRUE) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Text);
  backend.literal = UNI_L("[text1]");
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_EmptyElemTag);
  token.SetName(child);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Text);
  backend.literal = UNI_L("[text2]");
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_EmptyElemTag);
  token.SetName(child);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Text);
  backend.literal = UNI_L("[text3]");
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  verify(parser->Parse(UNI_L("</element>"), 10, TRUE) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_ETag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Finished);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(parser->IsFinished());

  verify(treecb.element);

  TempBuffer buffer;

  verify(XMLSerializer::MakeToStringSerializer(serializer, &buffer) == OpStatus::OK);
  verify(serializer->Serialize(NULL, url, treecb.element, NULL, NULL) == OpStatus::OK);

  verify(uni_strcmp(buffer.GetStorage(), UNI_L("<root><element>[text1]<child/>[text2]<child/>[text3]</element></root>")) == 0);
}
finally
{
  if (treecb.element && treecb.element->Clean(state.doc))
    treecb.element->Free(state.doc);

  OP_DELETE(tokenhandler);
  OP_DELETE(parser);
  OP_DELETE(serializer);
}

test("XMLParser.ProcessToken #4")
{
  TrivialTreeCallback treecb;
  TrivialTokenBackend backend;
  XMLTokenHandler *tokenhandler = NULL;
  XMLParser *parser = NULL;
  XMLSerializer *serializer = NULL;

  verify(OpTreeCallback::MakeTokenHandler(tokenhandler, state.doc->GetLogicalDocument(), &treecb) == OpStatus::OK);

  URL url;

  verify(XMLParser::Make(parser, NULL, (MessageHandler *) NULL, tokenhandler, url) == OpStatus::OK);

  XMLToken token(parser, &backend);

  XMLCompleteName root(UNI_L("root"));
  XMLCompleteName element(UNI_L("element"));
  XMLCompleteName child(UNI_L("child"));

  token.SetType(XMLToken::TYPE_STag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  verify(parser->Parse(UNI_L("<!-- comment ["), 14, TRUE) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_STag);
  token.SetName(element);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Text);
  backend.literal = UNI_L("[text1]");
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_EmptyElemTag);
  token.SetName(child);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Text);
  backend.literal = UNI_L("[text2]");
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_EmptyElemTag);
  token.SetName(child);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Text);
  backend.literal = UNI_L("[text3]");
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_ETag);
  token.SetName(element);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  verify(parser->Parse(UNI_L("] comment -->"), 13, TRUE) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_ETag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Finished);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(parser->IsFinished());

  verify(treecb.element);

  TempBuffer buffer;

  verify(XMLSerializer::MakeToStringSerializer(serializer, &buffer) == OpStatus::OK);
  verify(serializer->Serialize(NULL, url, treecb.element, NULL, NULL) == OpStatus::OK);

  verify(uni_strcmp(buffer.GetStorage(), UNI_L("<root><!-- comment [<element>[text1]<child/>[text2]<child/>[text3]</element>] comment --></root>")) == 0);
}
finally
{
  if (treecb.element && treecb.element->Clean(state.doc))
    treecb.element->Free(state.doc);

  OP_DELETE(tokenhandler);
  OP_DELETE(parser);
  OP_DELETE(serializer);
}

test("XMLParser.ProcessToken #5")
{
  TrivialTreeCallback treecb;
  TrivialTokenBackend backend;
  XMLTokenHandler *tokenhandler = NULL;
  XMLParser *parser = NULL;
  XMLSerializer *serializer = NULL;

  verify(OpTreeCallback::MakeTokenHandler(tokenhandler, state.doc->GetLogicalDocument(), &treecb) == OpStatus::OK);

  URL url;

  verify(XMLParser::Make(parser, NULL, (MessageHandler *) NULL, tokenhandler, url) == OpStatus::OK);

  XMLToken token(parser, &backend);

  XMLCompleteName root(UNI_L("root"));
  XMLCompleteName element(UNI_L("element"));
  XMLCompleteName child(UNI_L("child"));

  token.SetType(XMLToken::TYPE_STag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  verify(parser->Parse(UNI_L("<![CDATA["), 9, TRUE) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_STag);
  token.SetName(element);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Text);
  backend.literal = UNI_L("[text1]");
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_EmptyElemTag);
  token.SetName(child);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Text);
  backend.literal = UNI_L("[text2]");
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_EmptyElemTag);
  token.SetName(child);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Text);
  backend.literal = UNI_L("[text3]");
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_ETag);
  token.SetName(element);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  verify(parser->Parse(UNI_L("]]>"), 3, TRUE) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_ETag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Finished);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(parser->IsFinished());

  verify(treecb.element);

  TempBuffer buffer;

  verify(XMLSerializer::MakeToStringSerializer(serializer, &buffer) == OpStatus::OK);
  verify(serializer->Serialize(NULL, url, treecb.element, NULL, NULL) == OpStatus::OK);

  verify(uni_strcmp(buffer.GetStorage(), UNI_L("<root><![CDATA[<element>[text1]<child/>[text2]<child/>[text3]</element>]]></root>")) == 0);
}
finally
{
  if (treecb.element && treecb.element->Clean(state.doc))
    treecb.element->Free(state.doc);

  OP_DELETE(tokenhandler);
  OP_DELETE(parser);
  OP_DELETE(serializer);
}

test("XMLParser.ProcessToken #6")
{
  TrivialTreeCallback treecb;
  TrivialTokenBackend backend;
  XMLTokenHandler *tokenhandler = NULL;
  XMLParser *parser = NULL;
  XMLSerializer *serializer = NULL;

  verify(OpTreeCallback::MakeTokenHandler(tokenhandler, state.doc->GetLogicalDocument(), &treecb) == OpStatus::OK);

  URL url;

  verify(XMLParser::Make(parser, NULL, (MessageHandler *) NULL, tokenhandler, url) == OpStatus::OK);

  XMLToken token(parser, &backend);

  XMLCompleteName root(UNI_L("root"));
  XMLCompleteName element(UNI_L("element"));
  XMLCompleteName attr1(UNI_L("attr1"));
  XMLCompleteName attr2(UNI_L("attr2"));
  XMLToken::Attribute *attribute;

  token.SetType(XMLToken::TYPE_STag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_EmptyElemTag);
  token.SetName(element);
  verify(token.AddAttribute(attribute) == OpStatus::OK);
  attribute->SetName(attr1);
  attribute->SetValue(UNI_L("<value1>"), 8, TRUE, TRUE);
  verify(token.AddAttribute(attribute) == OpStatus::OK);
  attribute->SetName(attr2);
  attribute->SetValue(UNI_L("<value2>"), 8, TRUE, TRUE);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_ETag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Finished);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(parser->IsFinished());

  verify(treecb.element);

  TempBuffer buffer;

  verify(XMLSerializer::MakeToStringSerializer(serializer, &buffer) == OpStatus::OK);
  verify(serializer->Serialize(NULL, url, treecb.element, NULL, NULL) == OpStatus::OK);

  verify(uni_strcmp(buffer.GetStorage(), UNI_L("<root><element attr1=\"&lt;value1&gt;\" attr2=\"&lt;value2&gt;\"/></root>")) == 0);
}
finally
{
  if (treecb.element && treecb.element->Clean(state.doc))
    treecb.element->Free(state.doc);

  OP_DELETE(tokenhandler);
  OP_DELETE(parser);
  OP_DELETE(serializer);
}

test("XMLParser.ProcessToken #7")
{
  TrivialTreeCallback treecb;
  TrivialTokenBackend backend;
  XMLTokenHandler *tokenhandler = NULL;
  XMLParser *parser = NULL;
  XMLSerializer *serializer = NULL;

  verify(OpTreeCallback::MakeTokenHandler(tokenhandler, state.doc->GetLogicalDocument(), &treecb) == OpStatus::OK);

  URL url;

  verify(XMLParser::Make(parser, NULL, (MessageHandler *) NULL, tokenhandler, url) == OpStatus::OK);

  XMLToken token(parser, &backend);

  XMLCompleteName root(UNI_L("root"));
  XMLCompleteName element(UNI_L("element"));
  XMLCompleteName attr1(UNI_L("attr1"));
  XMLCompleteName attr2(UNI_L("attr2"));
  XMLToken::Attribute *attribute;

  token.SetType(XMLToken::TYPE_STag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  verify(parser->Parse(UNI_L("<![CDATA["), 9, TRUE) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_EmptyElemTag);
  token.SetName(element);
  verify(token.AddAttribute(attribute) == OpStatus::OK);
  attribute->SetName(attr1);
  attribute->SetValue(UNI_L("<value1>"), 8, TRUE, TRUE);
  verify(token.AddAttribute(attribute) == OpStatus::OK);
  attribute->SetName(attr2);
  attribute->SetValue(UNI_L("<value2>"), 8, TRUE, TRUE);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  verify(parser->Parse(UNI_L("]]>"), 3, TRUE) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_ETag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Finished);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(parser->IsFinished());

  verify(treecb.element);

  TempBuffer buffer;

  verify(XMLSerializer::MakeToStringSerializer(serializer, &buffer) == OpStatus::OK);
  verify(serializer->Serialize(NULL, url, treecb.element, NULL, NULL) == OpStatus::OK);

  verify(uni_strcmp(buffer.GetStorage(), UNI_L("<root><![CDATA[<element attr1=\"&lt;value1>\" attr2=\"&lt;value2>\"/>]]></root>")) == 0);
}
finally
{
  if (treecb.element && treecb.element->Clean(state.doc))
    treecb.element->Free(state.doc);

  OP_DELETE(tokenhandler);
  OP_DELETE(parser);
  OP_DELETE(serializer);
}

test("XMLParser.ProcessToken #8")
{
  TrivialTreeCallback treecb;
  TrivialTokenBackend backend;
  XMLTokenHandler *tokenhandler = NULL;
  XMLParser *parser = NULL;
  XMLSerializer *serializer = NULL;

  verify(OpTreeCallback::MakeTokenHandler(tokenhandler, state.doc->GetLogicalDocument(), &treecb) == OpStatus::OK);

  URL url;

  verify(XMLParser::Make(parser, NULL, (MessageHandler *) NULL, tokenhandler, url) == OpStatus::OK);

  XMLParser::Configuration parser_configuration;
  parser_configuration.store_internal_subset = TRUE;
  parser->SetConfiguration(parser_configuration);

  XMLToken token(parser, &backend);

  XMLCompleteName root(UNI_L("root"));
  XMLCompleteName element(UNI_L("element"));
  XMLCompleteName attr1(UNI_L("attr1"));
  XMLCompleteName attr2(UNI_L("attr2"));

  XMLDocumentInformation docinfo;

  verify(docinfo.SetXMLDeclaration(XMLVERSION_1_1, XMLSTANDALONE_YES, UNI_L("UTF-8")) == OpStatus::OK);
  token.SetType(XMLToken::TYPE_XMLDecl);
  token.SetDocumentInformation(&docinfo);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  verify(docinfo.SetDoctypeDeclaration(UNI_L("root"), NULL, NULL, UNI_L("<!ENTITY entity '[entity]'>")) == OpStatus::OK);
  token.SetType(XMLToken::TYPE_DOCTYPE);
  token.SetDocumentInformation(&docinfo);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_STag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  verify(parser->Parse(UNI_L("&entity;"), 8, TRUE) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_ETag);
  token.SetName(root);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(!parser->IsFinished());
  verify(!parser->IsFailed());

  token.SetType(XMLToken::TYPE_Finished);
  verify(parser->ProcessToken(token) == OpStatus::OK);
  verify(parser->IsFinished());

  verify(treecb.element);

  TempBuffer buffer;

  verify(XMLSerializer::MakeToStringSerializer(serializer, &buffer) == OpStatus::OK);

  XMLSerializer::Configuration serializer_configuration;
  serializer_configuration.document_information = &parser->GetDocumentInformation();
  verify(serializer->SetConfiguration(serializer_configuration) == OpStatus::OK);

  verify(serializer->Serialize(NULL, url, treecb.element, NULL, NULL) == OpStatus::OK);

  verify(uni_strcmp(buffer.GetStorage(), UNI_L("<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"yes\"?><!DOCTYPE root [<!ENTITY entity '[entity]'>]><root>[entity]</root>")) == 0);
}
finally
{
  if (treecb.element && treecb.element->Clean(state.doc))
    treecb.element->Free(state.doc);

  OP_DELETE(tokenhandler);
  OP_DELETE(parser);
  OP_DELETE(serializer);
}
