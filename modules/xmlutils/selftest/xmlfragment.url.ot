group "XMLUtils.XMLFragment.url";
require init;
require XMLUTILS_XMLFRAGMENT_SUPPORT;
require URL_UPLOAD_BASE64_SUPPORT;

include "modules/xmlutils/xmlfragment.h";
include "modules/xmlutils/xmlnames.h";
include "modules/url/url2.h";
include "modules/url/url_api.h";
include "modules/util/adt/bytebuffer.h";
include "modules/util/opfile/opfile.h";
include "modules/formats/encoder.h";

test("XMLFragment URL #1")
{
  const char *xml = #string "input/input01.xml";

  char *base64 = NULL;
  int base64_length;

  verify(MIME_Encode_SetStr(base64, base64_length, xml, op_strlen(xml), "UTF-8", GEN_BASE64_ONELINE) == MIME_NO_ERROR);

  OpString8 urlstring;
  verify(urlstring.AppendFormat("data:text/xml;base64,%s", base64) == OpStatus::OK);

  URL url(g_url_api->GetURL(urlstring.CStr()));

  verify(url.QuickLoad(FALSE));

  XMLFragment fragment;
  TempBuffer buffer;

  verify(fragment.Parse(url) == OpStatus::OK);

  verify(fragment.EnterElement(UNI_L("library")));
  verify(fragment.GetAttribute(UNI_L("size")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("size")), "small"));

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "August Strindberg"));
  verify(fragment.GetAttribute(UNI_L("nationality")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("nationality")), "swedish"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Hems\366borna"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "I can't be bothered with writing long descriptions?"));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "R\366da rummet"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Again: no long descriptions here."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"

  verify(fragment.EnterElement(UNI_L("author")));
  verify(fragment.GetAttribute(UNI_L("name")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("name")), "Robert A. Heinlein"));
  verify(fragment.GetAttribute(UNI_L("nationality")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("nationality")), "american"));

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "The moon is a harsh mistress"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "This is a really good book."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"

  verify(fragment.EnterElement(UNI_L("book")));
  verify(fragment.GetAttribute(UNI_L("title")));
  verify(uni_str_eq(fragment.GetAttribute(UNI_L("title")), "Stranger in a strange land"));

  verify(fragment.EnterElement(UNI_L("description")));
  verify(fragment.GetAllText(buffer) == OpStatus::OK);
  verify(uni_str_eq(buffer.GetStorage(), "Never did read this."));
  buffer.Clear();

  fragment.LeaveElement(); // leaving "description"
  fragment.LeaveElement(); // leaving "book"
  fragment.LeaveElement(); // leaving "author"
  fragment.LeaveElement(); // leaving "library"

  verify(!fragment.HasCurrentElement());
}
finally
{
  OP_DELETEA(base64);
}

test("XMLFragment URL #2 (large)")
{
  URL url(g_url_api->GetNewOperaURL());

  verify(OpStatus::IsSuccess(url.WriteDocumentData(URL::KNormal, "<?xml version='1.0' encoding='UTF-8'?><root>")));
  for (unsigned index = 0; index < 1000; ++index)
    verify(OpStatus::IsSuccess(url.WriteDocumentData(URL::KNormal, "<![CDATA[This is filler text.  This is filler text.  This is filler text.  This is filler text.  This is filler text.  This is filler text.  This is filler text.  This is filler text.]]>")));
  verify(OpStatus::IsSuccess(url.WriteDocumentData(URL::KNormal, "</root>")));
  url.WriteDocumentDataFinished();

  XMLFragment fragment;

  verify(fragment.Parse(url) == OpStatus::OK);
}
