/* -*- Mode: c++; indent-tabs-mode: nil; c-file-style: "stroustrup"; c-basic-offset: 2 -*- */

group "XMLUtils.Utils";
require init;

include "modules/xmlutils/xmlutils.h";

test("XMLUtils::IsSpace() (positive)")
{
  verify(XMLUtils::IsSpace(0x09));
  verify(XMLUtils::IsSpace(0x0a));
  verify(XMLUtils::IsSpace(0x0d));
  verify(XMLUtils::IsSpace(0x20));
}

test("XMLUtils::IsSpace() (negative)")
{
  for (unsigned ch = 0; ch < 0x110000u; ++ch)
    if (ch != 0x09 && ch != 0x0a && ch != 0x0d && ch != 0x20)
      verify(!XMLUtils::IsSpace(ch));
}

test("XMLUtils::IsSpaceExtended(XMLVERSION_1_0) (positive)")
{
  verify(XMLUtils::IsSpaceExtended(XMLVERSION_1_0, 0x09));
  verify(XMLUtils::IsSpaceExtended(XMLVERSION_1_0, 0x0a));
  verify(XMLUtils::IsSpaceExtended(XMLVERSION_1_0, 0x0d));
  verify(XMLUtils::IsSpaceExtended(XMLVERSION_1_0, 0x20));
}

test("XMLUtils::IsSpaceExtended(XMLVERSION_1_0) (negative)")
{
  for (unsigned ch = 0; ch < 0x110000u; ++ch)
    if (ch != 0x09 && ch != 0x0a && ch != 0x0d && ch != 0x20)
      verify(!XMLUtils::IsSpaceExtended(XMLVERSION_1_0, ch));
}

test("XMLUtils::IsSpaceExtended(XMLVERSION_1_1) (positive)")
{
  verify(XMLUtils::IsSpaceExtended(XMLVERSION_1_1, 0x09));
  verify(XMLUtils::IsSpaceExtended(XMLVERSION_1_1, 0x0a));
  verify(XMLUtils::IsSpaceExtended(XMLVERSION_1_1, 0x0d));
  verify(XMLUtils::IsSpaceExtended(XMLVERSION_1_1, 0x20));
  verify(XMLUtils::IsSpaceExtended(XMLVERSION_1_1, 0x85));
  verify(XMLUtils::IsSpaceExtended(XMLVERSION_1_1, 0x2028));
}

test("XMLUtils::IsSpaceExtended(XMLVERSION_1_1) (negative)")
{
  for (unsigned ch = 0; ch < 0x110000u; ++ch)
    if (ch != 0x09 && ch != 0x0a && ch != 0x0d && ch != 0x20 && ch != 0x85 && ch != 0x2028)
      verify(!XMLUtils::IsSpaceExtended(XMLVERSION_1_1, ch));
}
