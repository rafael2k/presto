/* -*- Mode: c++; indent-tabs-mode: nil; c-file-style: "stroustrup"; c-basic-offset: 2 -*- */

group "XMLUtils.names";
require init;

include "modules/xmlutils/xmlnames.h";
include "modules/doc/frm_doc.h";
include "modules/logdoc/logdoc.h";
include "modules/logdoc/htm_elm.h";

test("XMLExpandedName::XMLExpandedName()")
{
  XMLExpandedName name;
  verify(name.GetUri() == NULL);
  verify(name.GetLocalPart() == NULL);
}

test("XMLExpandedName::XMLExpandedName(const uni_char *localpart)")
{
  const uni_char *localpart = UNI_L("localpart");
  XMLExpandedName name(localpart);
  verify(name.GetUri() == NULL);
  verify(name.GetLocalPart() == localpart);
}

test("XMLExpandedName::XMLExpandedName(const uni_char *uri, const uni_char *localpart)")
{
  const uni_char *uri = UNI_L("http://www.example.org/");
  const uni_char *localpart = UNI_L("localpart");
  XMLExpandedName name(uri, localpart);
  verify(name.GetUri() == uri);
  verify(name.GetLocalPart() == localpart);
}

test("XMLExpandedName::XMLExpandedName(const XMLExpandedName &name)")
{
  XMLExpandedName name1;
  XMLExpandedName copy1(name1);
  verify(copy1.GetUri() == name1.GetUri());
  verify(copy1.GetLocalPart() == name1.GetLocalPart());

  const uni_char *localpart = UNI_L("localpart");
  XMLExpandedName name2(localpart);
  XMLExpandedName copy2(name2);
  verify(copy2.GetUri() == name2.GetUri());
  verify(copy2.GetLocalPart() == name2.GetLocalPart());

  const uni_char *uri = UNI_L("http://www.example.org/");
  XMLExpandedName name3(uri, localpart);
  XMLExpandedName copy3(name3);
  verify(copy3.GetUri() == name3.GetUri());
  verify(copy3.GetLocalPart() == name3.GetLocalPart());
}

xml
{
  "<root>"
    "<element1/>"
    "<element2 xmlns='http://www.example.com/1'/>"
    "<prefix:element3 xmlns:prefix='http://www.example.com/2'/>"
  "</root>"
};

test("XMLExpandedName::XMLExpandedName(HTML_Element *element)")
{
  verify(state.doc);
  verify(state.doc->GetLogicalDocument());
  verify(state.doc->GetLogicalDocument()->GetDocRoot());

  HTML_Element *iter = state.doc->GetLogicalDocument()->GetDocRoot();

  iter = iter->FirstChild();
  verify(iter);
  XMLExpandedName name1(iter);
  verify(name1.GetUri() == NULL);
  verify(uni_str_eq(name1.GetLocalPart(), "element1"));

  iter = iter->Suc();
  verify(iter);
  XMLExpandedName name2(iter);
  verify(name2.GetUri() && uni_str_eq(name2.GetUri(), "http://www.example.com/1"));
  verify(uni_str_eq(name2.GetLocalPart(), "element2"));

  iter = iter->Suc();
  verify(iter);
  XMLExpandedName name3(iter);
  verify(name3.GetUri() && uni_str_eq(name3.GetUri(), "http://www.example.com/2"));
  verify(uni_str_eq(name3.GetLocalPart(), "element3"));
}

test("XMLExpandedName::XMLExpandedName(NS_Element *nselement, const uni_char *localpart)")
{
  const uni_char *uri = UNI_L("http://www.example.com/1");
  const uni_char *localpart = UNI_L("localpart");
  NS_Element *nselement = g_ns_manager->GetElementAt(g_ns_manager->GetNsIdx(uri, uni_strlen(uri), 0, 0));
  XMLExpandedName name(nselement, localpart);
  verify(name.GetUri() == nselement->GetUri());
  verify(name.GetUri() && uni_str_eq(name.GetUri(), "http://www.example.com/1"));
  verify(name.GetLocalPart() == localpart);
}

test("XMLExpandedName::GetNsType()")
{
  XMLExpandedName name1(UNI_L("localpart"));
  verify(name1.GetNsType() == NS_NONE);

  XMLExpandedName name2(UNI_L("http://www.w3.org/1999/xhtml"), UNI_L("localpart"));
  verify(name2.GetNsType() == NS_HTML);
}

test("XMLExpandedName::GetNsIndex()")
{
  XMLExpandedName name1(UNI_L("localpart"));
  verify(name1.GetNsIndex() == NS_IDX_DEFAULT);

  XMLExpandedName name2(UNI_L("http://www.w3.org/1999/xhtml"), UNI_L("localpart"));
  verify(name2.GetNsIndex() == NS_IDX_XHTML);
}

test("XMLExpandedName::IsXHTML()")
{
  XMLExpandedName name1(UNI_L("localpart"));
  verify(!name1.IsXHTML());

  XMLExpandedName name2(UNI_L("http://www.w3.org/1999/xhtml"), UNI_L("localpart"));
  verify(name2.IsXHTML());
}

test("XMLExpandedName::IsXML()")
{
  XMLExpandedName name1(UNI_L("localpart"));
  verify(!name1.IsXML());

  XMLExpandedName name2(UNI_L("http://www.w3.org/XML/1998/namespace"), UNI_L("localpart"));
  verify(name2.IsXML());
}

test("XMLExpandedName::IsSVG()")
  require SVG_SUPPORT;
{
  XMLExpandedName name1(UNI_L("localpart"));
  verify(!name1.IsSVG());

  XMLExpandedName name2(UNI_L("http://www.w3.org/2000/svg"), UNI_L("localpart"));
  verify(name2.IsSVG());
}

test("XMLExpandedName::IsWML()")
  require _WML_SUPPORT_;
{
  XMLExpandedName name1(UNI_L("localpart"));
  verify(!name1.IsWML());

  XMLExpandedName name2(UNI_L("http://www.wapforum.org/2001/wml"), UNI_L("localpart"));
  verify(name2.IsWML());
}

test("XMLExpandedName::IsXSLT()")
  require XSLT_SUPPORT;
{
  XMLExpandedName name1(UNI_L("localpart"));
  verify(!name1.IsXSLT());

  XMLExpandedName name2(UNI_L("http://www.w3.org/1999/XSL/Transform"), UNI_L("localpart"));
  verify(name2.IsXSLT());
}

test("XMLExpandedName::IsId(const XMLExpandedName &elementname)")
{
  XMLExpandedName elem1(UNI_L("unknown"));
  XMLExpandedName elem2(UNI_L("http://www.w3.org/1999/xhtml"), UNI_L("localpart"));

  XMLExpandedName attr1(UNI_L("not-id"));
  XMLExpandedName attr2(UNI_L("id"));
  XMLExpandedName attr3(UNI_L("http://www.w3.org/XML/1998/namespace"), UNI_L("id"));

  verify(!attr1.IsId(elem1));
  verify(!attr1.IsId(elem2));
  verify(!attr2.IsId(elem1));
  verify(attr2.IsId(elem2));
  verify(attr3.IsId(elem1));
  verify(attr3.IsId(elem2));
}

test("XMLExpandedName::IsId(const XMLExpandedName &elementname) [SVG]")
  require SVG_SUPPORT;
{
  XMLExpandedName elem1(UNI_L("http://www.w3.org/2000/svg"), UNI_L("localpart"));

  XMLExpandedName attr1(UNI_L("not-id"));
  XMLExpandedName attr2(UNI_L("id"));
  XMLExpandedName attr3(UNI_L("http://www.w3.org/XML/1998/namespace"), UNI_L("id"));

  verify(!attr1.IsId(elem1));
  verify(attr2.IsId(elem1));
  verify(attr3.IsId(elem1));
}

test("XMLExpandedName::IsId(const XMLExpandedName &elementname) [WML]")
  require _WML_SUPPORT_;
{
  XMLExpandedName elem1(UNI_L("http://www.wapforum.org/2001/wml"), UNI_L("localpart"));

  XMLExpandedName attr1(UNI_L("not-id"));
  XMLExpandedName attr2(UNI_L("id"));
  XMLExpandedName attr3(UNI_L("http://www.w3.org/XML/1998/namespace"), UNI_L("id"));

  verify(!attr1.IsId(elem1));
  verify(attr2.IsId(elem1));
  verify(attr3.IsId(elem1));
}

test("XMLExpandedName::IsId(const XMLExpandedName &elementname) [XSLT]")
    require XSLT_SUPPORT;
{
  XMLExpandedName elem1(UNI_L("http://www.w3.org/1999/XSL/Transform"), UNI_L("localpart"));
  XMLExpandedName elem2(UNI_L("http://www.w3.org/1999/XSL/Transform"), UNI_L("stylesheet"));
  XMLExpandedName elem3(UNI_L("http://www.w3.org/1999/XSL/Transform"), UNI_L("transform"));

  XMLExpandedName attr1(UNI_L("not-id"));
  XMLExpandedName attr2(UNI_L("id"));
  XMLExpandedName attr3(UNI_L("http://www.w3.org/XML/1998/namespace"), UNI_L("id"));

  verify(!attr1.IsId(elem1));
  verify(!attr2.IsId(elem1));
  verify(attr3.IsId(elem1));
  verify(!attr1.IsId(elem2));
  verify(attr2.IsId(elem2));
  verify(attr3.IsId(elem2));
  verify(!attr1.IsId(elem3));
  verify(attr2.IsId(elem3));
  verify(attr3.IsId(elem3));
}

test("XMLExpandedName::operator==(const XMLExpandedName &other)")
{
  XMLExpandedName left1(UNI_L("localpart"));
  XMLExpandedName left2(UNI_L("http://www.example.org/"), UNI_L("localpart"));

  XMLExpandedName right1(UNI_L("localpart"));
  XMLExpandedName right2(UNI_L("other"));
  XMLExpandedName right3(UNI_L("http://www.example.org/"), UNI_L("localpart"));
  XMLExpandedName right4(UNI_L("http://www.example.org/"), UNI_L("other"));
  XMLExpandedName right5(UNI_L("http://www.example.net/"), UNI_L("localpart"));
  XMLExpandedName right6(UNI_L("http://www.example.net/"), UNI_L("other"));

  verify(!(left1 == right1) == !TRUE);
  verify(!(left1 == right2) == !FALSE);
  verify(!(left1 == right3) == !FALSE);
  verify(!(left1 == right4) == !FALSE);
  verify(!(left1 == right5) == !FALSE);
  verify(!(left1 == right6) == !FALSE);
  verify(!(left2 == right1) == !FALSE);
  verify(!(left2 == right2) == !FALSE);
  verify(!(left2 == right3) == !TRUE);
  verify(!(left2 == right4) == !FALSE);
  verify(!(left2 == right5) == !FALSE);
  verify(!(left2 == right6) == !FALSE);
}

test("XMLExpandedName::operator==(const XMLExpandedNameN &other)")
{
  XMLExpandedName left1(UNI_L("localpart"));
  XMLExpandedName left2(UNI_L("http://www.example.org/"), UNI_L("localpart"));

  XMLExpandedNameN right1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN right2(NULL, 0, UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLExpandedNameN right3(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN right4(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLExpandedNameN right5(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN right6(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));

  verify(!(left1 == right1) == !TRUE);
  verify(!(left1 == right2) == !FALSE);
  verify(!(left1 == right3) == !FALSE);
  verify(!(left1 == right4) == !FALSE);
  verify(!(left1 == right5) == !FALSE);
  verify(!(left1 == right6) == !FALSE);
  verify(!(left2 == right1) == !FALSE);
  verify(!(left2 == right2) == !FALSE);
  verify(!(left2 == right3) == !TRUE);
  verify(!(left2 == right4) == !FALSE);
  verify(!(left2 == right5) == !FALSE);
  verify(!(left2 == right6) == !FALSE);
}

test("XMLExpandedName::operator!=(const XMLExpandedName &other)")
{
  XMLExpandedName left1(UNI_L("localpart"));
  XMLExpandedName left2(UNI_L("http://www.example.org/"), UNI_L("localpart"));

  XMLExpandedName right1(UNI_L("localpart"));
  XMLExpandedName right2(UNI_L("other"));
  XMLExpandedName right3(UNI_L("http://www.example.org/"), UNI_L("localpart"));
  XMLExpandedName right4(UNI_L("http://www.example.org/"), UNI_L("other"));
  XMLExpandedName right5(UNI_L("http://www.example.net/"), UNI_L("localpart"));
  XMLExpandedName right6(UNI_L("http://www.example.net/"), UNI_L("other"));

  verify(!(left1 != right1) != !TRUE);
  verify(!(left1 != right2) != !FALSE);
  verify(!(left1 != right3) != !FALSE);
  verify(!(left1 != right4) != !FALSE);
  verify(!(left1 != right5) != !FALSE);
  verify(!(left1 != right6) != !FALSE);
  verify(!(left2 != right1) != !FALSE);
  verify(!(left2 != right2) != !FALSE);
  verify(!(left2 != right3) != !TRUE);
  verify(!(left2 != right4) != !FALSE);
  verify(!(left2 != right5) != !FALSE);
  verify(!(left2 != right6) != !FALSE);
}

test("XMLExpandedName::operator!=(const XMLExpandedNameN &other)")
{
  XMLExpandedName left1(UNI_L("localpart"));
  XMLExpandedName left2(UNI_L("http://www.example.org/"), UNI_L("localpart"));

  XMLExpandedNameN right1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN right2(NULL, 0, UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLExpandedNameN right3(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN right4(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLExpandedNameN right5(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN right6(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));

  verify(!(left1 != right1) != !TRUE);
  verify(!(left1 != right2) != !FALSE);
  verify(!(left1 != right3) != !FALSE);
  verify(!(left1 != right4) != !FALSE);
  verify(!(left1 != right5) != !FALSE);
  verify(!(left1 != right6) != !FALSE);
  verify(!(left2 != right1) != !FALSE);
  verify(!(left2 != right2) != !FALSE);
  verify(!(left2 != right3) != !TRUE);
  verify(!(left2 != right4) != !FALSE);
  verify(!(left2 != right5) != !FALSE);
  verify(!(left2 != right6) != !FALSE);
}

test("XMLExpandedName::operator=(const XMLExpandedName &other)")
{
  XMLExpandedName original1(UNI_L("localpart"));
  XMLExpandedName copy1(UNI_L("http://www.example.org/"), UNI_L("other"));

  verify(&(copy1 = original1) == &copy1);

  verify(copy1.GetLocalPart() == original1.GetLocalPart());
  verify(copy1.GetUri() == original1.GetUri());

  XMLExpandedName original2(UNI_L("http://www.example.org/"), UNI_L("localpart"));
  XMLExpandedName copy2(UNI_L("other"));

  verify(&(copy2 = original2) == &copy2);

  verify(copy2.GetLocalPart() == original2.GetLocalPart());
  verify(copy2.GetUri() == original2.GetUri());
}

test("XMLExpandedName::Set(const XMLExpandedName &other)")
{
  XMLExpandedName original1(UNI_L("localpart"));
  XMLExpandedName copy1(UNI_L("http://www.example.org/"), UNI_L("other"));

  verify(copy1.Set(original1) == OpStatus::OK);

  verify(copy1.GetLocalPart() != original1.GetLocalPart());
  verify(copy1.GetLocalPart());
  verify(uni_strcmp(copy1.GetLocalPart(), original1.GetLocalPart()) == 0);
  verify(copy1.GetUri() == NULL);

  XMLExpandedName original2(UNI_L("http://www.example.org/"), UNI_L("other"));
  XMLExpandedName copy2(UNI_L("localpart"));

  verify(copy2.Set(original2) == OpStatus::OK);

  verify(copy2.GetLocalPart() != original2.GetLocalPart());
  verify(copy2.GetLocalPart());
  verify(uni_strcmp(copy2.GetLocalPart(), original2.GetLocalPart()) == 0);
  verify(copy2.GetUri() != original2.GetUri());
  verify(copy2.GetUri());
  verify(uni_strcmp(copy2.GetUri(), original2.GetUri()) == 0);
}

test("XMLExpandedName::Set(const XMLExpandedNameN &other)")
{
  XMLExpandedNameN original1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedName copy1(UNI_L("http://www.example.org/"), UNI_L("other"));

  verify(copy1.Set(original1) == OpStatus::OK);

  verify(copy1.GetLocalPart() != original1.GetLocalPart());
  verify(copy1.GetLocalPart());
  verify(uni_strlen(copy1.GetLocalPart()) == original1.GetLocalPartLength());
  verify(uni_strncmp(copy1.GetLocalPart(), original1.GetLocalPart(), original1.GetLocalPartLength()) == 0);
  verify(copy1.GetUri() == NULL);

  XMLExpandedNameN original2(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLExpandedName copy2(UNI_L("localpart"));

  verify(copy2.Set(original2) == OpStatus::OK);

  verify(copy2.GetLocalPart() != original2.GetLocalPart());
  verify(copy2.GetLocalPart());
  verify(uni_strlen(copy2.GetLocalPart()) == original2.GetLocalPartLength());
  verify(uni_strncmp(copy2.GetLocalPart(), original2.GetLocalPart(), original2.GetLocalPartLength()) == 0);
  verify(copy2.GetUri() != original2.GetUri());
  verify(copy2.GetUri());
  verify(uni_strlen(copy2.GetUri()) == original2.GetUriLength());
  verify(uni_strncmp(copy2.GetUri(), original2.GetUri(), original2.GetUriLength()) == 0);
}

test("XMLExpandedName::SetL(const XMLExpandedName &other)")
{
  XMLExpandedName original1(UNI_L("localpart"));
  XMLExpandedName copy1(UNI_L("http://www.example.org/"), UNI_L("other"));

  TRAPD(status1, copy1.SetL(original1));
  verify(status1 == OpStatus::OK);

  verify(copy1.GetLocalPart() != original1.GetLocalPart());
  verify(copy1.GetLocalPart());
  verify(uni_strcmp(copy1.GetLocalPart(), original1.GetLocalPart()) == 0);
  verify(copy1.GetUri() == NULL);

  XMLExpandedName original2(UNI_L("http://www.example.org/"), UNI_L("other"));
  XMLExpandedName copy2(UNI_L("localpart"));

  TRAPD(status2, copy2.SetL(original2));
  verify(status2 == OpStatus::OK);

  verify(copy2.GetLocalPart() != original2.GetLocalPart());
  verify(copy2.GetLocalPart());
  verify(uni_strcmp(copy2.GetLocalPart(), original2.GetLocalPart()) == 0);
  verify(copy2.GetUri() != original2.GetUri());
  verify(copy2.GetUri());
  verify(uni_strcmp(copy2.GetUri(), original2.GetUri()) == 0);
}

test("XMLExpandedName::SetL(const XMLExpandedNameN &other)")
{
  XMLExpandedNameN original1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedName copy1(UNI_L("http://www.example.org/"), UNI_L("other"));

  TRAPD(status, copy1.SetL(original1));
  verify(status == OpStatus::OK);

  verify(copy1.GetLocalPart() != original1.GetLocalPart());
  verify(copy1.GetLocalPart());
  verify(uni_strlen(copy1.GetLocalPart()) == original1.GetLocalPartLength());
  verify(uni_strncmp(copy1.GetLocalPart(), original1.GetLocalPart(), original1.GetLocalPartLength()) == 0);
  verify(copy1.GetUri() == NULL);

  XMLExpandedNameN original2(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLExpandedName copy2(UNI_L("localpart"));

  TRAPD(status2, copy2.SetL(original2));
  verify(status2 == OpStatus::OK);

  verify(copy2.GetLocalPart() != original2.GetLocalPart());
  verify(copy2.GetLocalPart());
  verify(uni_strlen(copy2.GetLocalPart()) == original2.GetLocalPartLength());
  verify(uni_strncmp(copy2.GetLocalPart(), original2.GetLocalPart(), original2.GetLocalPartLength()) == 0);
  verify(copy2.GetUri() != original2.GetUri());
  verify(copy2.GetUri());
  verify(uni_strlen(copy2.GetUri()) == original2.GetUriLength());
  verify(uni_strncmp(copy2.GetUri(), original2.GetUri(), original2.GetUriLength()) == 0);
}

test("XMLExpandedName::HashFunctions::Hash(const void *key)")
{
  XMLExpandedName::HashFunctions functions;

  XMLExpandedName original1(UNI_L("localpart"));
  XMLExpandedName original2(UNI_L("http://www.example.org/"), UNI_L("localpart"));
  XMLExpandedName original3(UNI_L("other"));
  XMLExpandedName original4(UNI_L("http://www.example.net/"), UNI_L("localpart"));

  XMLExpandedName copy1a, copy1b;
  verify(copy1a.Set(original1) == OpStatus::OK);
  verify(copy1b.Set(original1) == OpStatus::OK);
  XMLExpandedName copy2a, copy2b;
  verify(copy2a.Set(original2) == OpStatus::OK);
  verify(copy2b.Set(original2) == OpStatus::OK);
  XMLExpandedName copy3a, copy3b;
  verify(copy3a.Set(original3) == OpStatus::OK);
  verify(copy3b.Set(original3) == OpStatus::OK);
  XMLExpandedName copy4a, copy4b;
  verify(copy4a.Set(original4) == OpStatus::OK);
  verify(copy4b.Set(original4) == OpStatus::OK);

  /* These must of course not fail; identical names must have identical hashes. */
  verify(functions.Hash(static_cast<void*>(&copy1a)) == functions.Hash(static_cast<void*>(&copy1b)));
  verify(functions.Hash(static_cast<void*>(&copy2a)) == functions.Hash(static_cast<void*>(&copy2b)));
  verify(functions.Hash(static_cast<void*>(&copy3a)) == functions.Hash(static_cast<void*>(&copy3b)));
  verify(functions.Hash(static_cast<void*>(&copy4a)) == functions.Hash(static_cast<void*>(&copy4b)));

  /* These could fail; non-identical names can have identical hashes.  If the
     hash function changes, these might begin to fail without there being a
     real problem (though it might of course indicate that the hash function
     became worse.)  */
  verify(functions.Hash(static_cast<void*>(&copy1a)) != functions.Hash(static_cast<void*>(&copy2b)));
  verify(functions.Hash(static_cast<void*>(&copy1a)) != functions.Hash(static_cast<void*>(&copy3b)));
  verify(functions.Hash(static_cast<void*>(&copy1a)) != functions.Hash(static_cast<void*>(&copy4b)));
  verify(functions.Hash(static_cast<void*>(&copy2a)) != functions.Hash(static_cast<void*>(&copy1b)));
  verify(functions.Hash(static_cast<void*>(&copy2a)) != functions.Hash(static_cast<void*>(&copy3b)));
  verify(functions.Hash(static_cast<void*>(&copy2a)) != functions.Hash(static_cast<void*>(&copy4b)));
  verify(functions.Hash(static_cast<void*>(&copy3a)) != functions.Hash(static_cast<void*>(&copy1b)));
  verify(functions.Hash(static_cast<void*>(&copy3a)) != functions.Hash(static_cast<void*>(&copy2b)));
  verify(functions.Hash(static_cast<void*>(&copy3a)) != functions.Hash(static_cast<void*>(&copy4b)));
  verify(functions.Hash(static_cast<void*>(&copy4a)) != functions.Hash(static_cast<void*>(&copy1b)));
  verify(functions.Hash(static_cast<void*>(&copy4a)) != functions.Hash(static_cast<void*>(&copy2b)));
  verify(functions.Hash(static_cast<void*>(&copy4a)) != functions.Hash(static_cast<void*>(&copy3b)));
}

test("XMLExpandedName::HashFunctions::KeysAreEqual(const void *key1, const void *key2)")
{
  XMLExpandedName::HashFunctions functions;

  XMLExpandedName original1(UNI_L("localpart"));
  XMLExpandedName original2(UNI_L("http://www.example.org/"), UNI_L("localpart"));
  XMLExpandedName original3(UNI_L("other"));
  XMLExpandedName original4(UNI_L("http://www.example.net/"), UNI_L("localpart"));

  XMLExpandedName copy1a, copy1b;
  verify(copy1a.Set(original1) == OpStatus::OK);
  verify(copy1b.Set(original1) == OpStatus::OK);
  XMLExpandedName copy2a, copy2b;
  verify(copy2a.Set(original2) == OpStatus::OK);
  verify(copy2b.Set(original2) == OpStatus::OK);
  XMLExpandedName copy3a, copy3b;
  verify(copy3a.Set(original3) == OpStatus::OK);
  verify(copy3b.Set(original3) == OpStatus::OK);
  XMLExpandedName copy4a, copy4b;
  verify(copy4a.Set(original4) == OpStatus::OK);
  verify(copy4b.Set(original4) == OpStatus::OK);

  verify(functions.KeysAreEqual(static_cast<void*>(&copy1a), static_cast<void*>(&copy1b)));
  verify(functions.KeysAreEqual(static_cast<void*>(&copy2a), static_cast<void*>(&copy2b)));
  verify(functions.KeysAreEqual(static_cast<void*>(&copy3a), static_cast<void*>(&copy3b)));
  verify(functions.KeysAreEqual(static_cast<void*>(&copy4a), static_cast<void*>(&copy4b)));

  verify(!functions.KeysAreEqual(static_cast<void*>(&copy1a), static_cast<void*>(&copy2b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&copy1a), static_cast<void*>(&copy3b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&copy1a), static_cast<void*>(&copy4b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&copy2a), static_cast<void*>(&copy1b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&copy2a), static_cast<void*>(&copy3b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&copy2a), static_cast<void*>(&copy4b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&copy3a), static_cast<void*>(&copy1b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&copy3a), static_cast<void*>(&copy2b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&copy3a), static_cast<void*>(&copy4b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&copy4a), static_cast<void*>(&copy1b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&copy4a), static_cast<void*>(&copy2b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&copy4a), static_cast<void*>(&copy3b)));
}

test("XMLCompleteName::XMLCompleteName()")
{
  XMLCompleteName name;
  verify(name.GetUri() == NULL);
  verify(name.GetLocalPart() == NULL);
  verify(name.GetPrefix() == NULL);
}

test("XMLCompleteName::XMLCompleteName(const uni_char *localpart)")
{
  const uni_char *localpart = UNI_L("localpart");
  XMLCompleteName name(localpart);
  verify(name.GetUri() == NULL);
  verify(name.GetLocalPart() == localpart);
  verify(name.GetPrefix() == NULL);
}

test("XMLCompleteName::XMLCompleteName(const uni_char *uri, const uni_char *prefix, const uni_char *localpart)")
{
  const uni_char *uri = UNI_L("http://www.example.org/");
  const uni_char *localpart = UNI_L("localpart");
  const uni_char *prefix = UNI_L("prefix");
  XMLCompleteName name(uri, prefix ,localpart);
  verify(name.GetUri() == uri);
  verify(name.GetLocalPart() == localpart);
  verify(name.GetPrefix() == prefix);
}

test("XMLCompleteName::XMLCompleteName(const XMLExpandedName &name)")
{
  XMLExpandedName name1;
  XMLCompleteName copy1(name1);
  verify(copy1.GetUri() == name1.GetUri());
  verify(copy1.GetLocalPart() == name1.GetLocalPart());
  verify(copy1.GetPrefix() == NULL);

  const uni_char *localpart = UNI_L("localpart");
  XMLExpandedName name2(localpart);
  XMLCompleteName copy2(name2);
  verify(copy2.GetUri() == name2.GetUri());
  verify(copy2.GetLocalPart() == name2.GetLocalPart());
  verify(copy2.GetPrefix() == NULL);

  const uni_char *uri = UNI_L("http://www.example.org/");
  XMLExpandedName name3(uri, localpart);
  XMLCompleteName copy3(name3);
  verify(copy3.GetUri() == name3.GetUri());
  verify(copy3.GetLocalPart() == name3.GetLocalPart());
  verify(copy3.GetPrefix() == NULL);
}

test("XMLCompleteName::XMLCompleteName(const XMLExpandedName &name)")
{
  XMLCompleteName name1;
  XMLCompleteName copy1(name1);
  verify(copy1.GetUri() == name1.GetUri());
  verify(copy1.GetLocalPart() == name1.GetLocalPart());
  verify(copy1.GetPrefix() == NULL);

  const uni_char *localpart = UNI_L("localpart");
  XMLCompleteName name2(localpart);
  XMLCompleteName copy2(name2);
  verify(copy2.GetUri() == name2.GetUri());
  verify(copy2.GetLocalPart() == name2.GetLocalPart());
  verify(copy2.GetPrefix() == NULL);

  const uni_char *uri = UNI_L("http://www.example.org/");
  const uni_char *prefix = UNI_L("prefix");
  XMLCompleteName name3(uri, prefix, localpart);
  XMLCompleteName copy3(name3);
  verify(copy3.GetUri() == name3.GetUri());
  verify(copy3.GetLocalPart() == name3.GetLocalPart());
  verify(copy3.GetPrefix() == name3.GetPrefix());
}

xml
{
  "<root>"
    "<element1/>"
    "<element2 xmlns='http://www.example.com/1'/>"
    "<prefix:element3 xmlns:prefix='http://www.example.com/2'/>"
  "</root>"
};

test("XMLCompleteName::XMLCompleteName(HTML_Element *element)")
{
  verify(state.doc);
  verify(state.doc->GetLogicalDocument());
  verify(state.doc->GetLogicalDocument()->GetDocRoot());

  HTML_Element *iter = state.doc->GetLogicalDocument()->GetDocRoot();

  iter = iter->FirstChild();
  verify(iter);
  XMLCompleteName name1(iter);
  verify(name1.GetUri() == NULL);
  verify(uni_str_eq(name1.GetLocalPart(), "element1"));
  verify(name1.GetPrefix() == NULL);

  iter = iter->Suc();
  verify(iter);
  XMLCompleteName name2(iter);
  verify(name2.GetUri() && uni_str_eq(name2.GetUri(), "http://www.example.com/1"));
  verify(uni_str_eq(name2.GetLocalPart(), "element2"));
  verify(name2.GetPrefix() == NULL);

  iter = iter->Suc();
  verify(iter);
  XMLCompleteName name3(iter);
  verify(name3.GetUri() && uni_str_eq(name3.GetUri(), "http://www.example.com/2"));
  verify(uni_str_eq(name3.GetLocalPart(), "element3"));
  verify(name3.GetPrefix() && uni_str_eq(name3.GetPrefix(), "prefix"));
}

test("XMLCompleteName::XMLCompleteName(NS_Element *nselement, const uni_char *localpart)")
{
  const uni_char *uri = UNI_L("http://www.example.com/2");
  const uni_char *localpart = UNI_L("localpart");
  const uni_char *prefix = UNI_L("prefix");
  NS_Element *nselement = g_ns_manager->GetElementAt(g_ns_manager->GetNsIdx(uri, uni_strlen(uri), prefix, uni_strlen(prefix)));
  XMLCompleteName name(nselement, localpart);
  verify(name.GetUri() == nselement->GetUri());
  verify(name.GetUri() && uni_str_eq(name.GetUri(), "http://www.example.com/2"));
  verify(name.GetLocalPart() == localpart);
  verify(name.GetPrefix() == nselement->GetPrefix());
  verify(name.GetPrefix() && uni_str_eq(name.GetPrefix(), "prefix"));
}

test("XMLCompleteName::GetNsIndex()")
{
  XMLCompleteName name1(UNI_L("localpart"));
  verify(name1.GetNsIndex() == NS_IDX_DEFAULT);

  XMLCompleteName name2(UNI_L("http://www.w3.org/1999/xhtml"), UNI_L("prefix"), UNI_L("localpart"));
  verify(name2.GetNsIndex() != NS_IDX_XHTML); // NS_IDX_XHTML has no prefix.
}

test("XMLCompleteName::operator==(const XMLCompleteName &other)")
{
  XMLCompleteName left1(UNI_L("localpart"));
  XMLCompleteName left2(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("localpart"));

  XMLCompleteName right1(UNI_L("localpart"));
  XMLCompleteName right2(UNI_L("other"));
  XMLCompleteName right3(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("localpart"));
  XMLCompleteName right4(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("other"));
  XMLCompleteName right5(UNI_L("http://www.example.net/"), UNI_L("prefix"), UNI_L("localpart"));
  XMLCompleteName right6(UNI_L("http://www.example.net/"), UNI_L("prefix"), UNI_L("other"));
  XMLCompleteName right7(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("localpart"));
  XMLCompleteName right8(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("other"));

  verify(!(left1 == right1) == !TRUE);
  verify(!(left1 == right2) == !FALSE);
  verify(!(left1 == right3) == !FALSE);
  verify(!(left1 == right4) == !FALSE);
  verify(!(left1 == right5) == !FALSE);
  verify(!(left1 == right6) == !FALSE);
  verify(!(left1 == right7) == !FALSE);
  verify(!(left1 == right8) == !FALSE);
  verify(!(left2 == right1) == !FALSE);
  verify(!(left2 == right2) == !FALSE);
  verify(!(left2 == right3) == !TRUE);
  verify(!(left2 == right4) == !FALSE);
  verify(!(left2 == right5) == !FALSE);
  verify(!(left2 == right6) == !FALSE);
  verify(!(left2 == right7) == !FALSE);
  verify(!(left2 == right8) == !FALSE);
}

test("XMLCompleteName::operator==(const XMLCompleteNameN &other)")
{
  XMLCompleteName left1(UNI_L("localpart"));
  XMLCompleteName left2(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("localpart"));

  XMLCompleteNameN right1(NULL, 0, NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right2(NULL, 0, NULL, 0, UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteNameN right3(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right4(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteNameN right5(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right6(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteNameN right7(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("xiferp+junk"), uni_strlen(UNI_L("xiferp")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right8(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("xiferp+junk"), uni_strlen(UNI_L("xiferp")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));

  verify(!(left1 == right1) == !TRUE);
  verify(!(left1 == right2) == !FALSE);
  verify(!(left1 == right3) == !FALSE);
  verify(!(left1 == right4) == !FALSE);
  verify(!(left1 == right5) == !FALSE);
  verify(!(left1 == right6) == !FALSE);
  verify(!(left2 == right7) == !FALSE);
  verify(!(left2 == right8) == !FALSE);
  verify(!(left2 == right1) == !FALSE);
  verify(!(left2 == right2) == !FALSE);
  verify(!(left2 == right3) == !TRUE);
  verify(!(left2 == right4) == !FALSE);
  verify(!(left2 == right5) == !FALSE);
  verify(!(left2 == right6) == !FALSE);
  verify(!(left2 == right7) == !FALSE);
  verify(!(left2 == right8) == !FALSE);
}

test("XMLCompleteName::operator!=(const XMLCompleteName &other)")
{
  XMLCompleteName left1(UNI_L("localpart"));
  XMLCompleteName left2(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("localpart"));

  XMLCompleteName right1(UNI_L("localpart"));
  XMLCompleteName right2(UNI_L("other"));
  XMLCompleteName right3(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("localpart"));
  XMLCompleteName right4(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("other"));
  XMLCompleteName right5(UNI_L("http://www.example.net/"), UNI_L("prefix"), UNI_L("localpart"));
  XMLCompleteName right6(UNI_L("http://www.example.net/"), UNI_L("prefix"), UNI_L("other"));
  XMLCompleteName right7(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("localpart"));
  XMLCompleteName right8(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("other"));

  verify(!(left1 != right1) != !TRUE);
  verify(!(left1 != right2) != !FALSE);
  verify(!(left1 != right3) != !FALSE);
  verify(!(left1 != right4) != !FALSE);
  verify(!(left1 != right5) != !FALSE);
  verify(!(left1 != right6) != !FALSE);
  verify(!(left1 != right7) != !FALSE);
  verify(!(left1 != right8) != !FALSE);
  verify(!(left2 != right1) != !FALSE);
  verify(!(left2 != right2) != !FALSE);
  verify(!(left2 != right3) != !TRUE);
  verify(!(left2 != right4) != !FALSE);
  verify(!(left2 != right5) != !FALSE);
  verify(!(left2 != right6) != !FALSE);
  verify(!(left2 != right7) != !FALSE);
  verify(!(left2 != right8) != !FALSE);
}

test("XMLCompleteName::operator!=(const XMLCompleteNameN &other)")
{
  XMLCompleteName left1(UNI_L("localpart"));
  XMLCompleteName left2(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("localpart"));

  XMLCompleteNameN right1(NULL, 0, NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right2(NULL, 0, NULL, 0, UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteNameN right3(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right4(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteNameN right5(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right6(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteNameN right7(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("xiferp+junk"), uni_strlen(UNI_L("xiferp")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right8(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("xiferp+junk"), uni_strlen(UNI_L("xiferp")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));

  verify(!(left1 != right1) != !TRUE);
  verify(!(left1 != right2) != !FALSE);
  verify(!(left1 != right3) != !FALSE);
  verify(!(left1 != right4) != !FALSE);
  verify(!(left1 != right5) != !FALSE);
  verify(!(left1 != right6) != !FALSE);
  verify(!(left2 != right7) != !FALSE);
  verify(!(left2 != right8) != !FALSE);
  verify(!(left2 != right1) != !FALSE);
  verify(!(left2 != right2) != !FALSE);
  verify(!(left2 != right3) != !TRUE);
  verify(!(left2 != right4) != !FALSE);
  verify(!(left2 != right5) != !FALSE);
  verify(!(left2 != right6) != !FALSE);
  verify(!(left2 != right7) != !FALSE);
  verify(!(left2 != right8) != !FALSE);
}

test("XMLCompleteName::SameQName(const XMLCompleteName &other)")
{
  XMLCompleteName left1(UNI_L("localpart"));
  XMLCompleteName left2(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("localpart"));

  XMLCompleteName right1(UNI_L("localpart"));
  XMLCompleteName right2(UNI_L("other"));
  XMLCompleteName right3(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("localpart"));
  XMLCompleteName right4(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("other"));
  XMLCompleteName right5(UNI_L("http://www.example.net/"), UNI_L("prefix"), UNI_L("localpart"));
  XMLCompleteName right6(UNI_L("http://www.example.net/"), UNI_L("prefix"), UNI_L("other"));
  XMLCompleteName right7(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("localpart"));
  XMLCompleteName right8(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("other"));

  verify(left1.SameQName(right1));
  verify(!left1.SameQName(right2));
  verify(!left1.SameQName(right3));
  verify(!left1.SameQName(right4));
  verify(!left1.SameQName(right5));
  verify(!left1.SameQName(right6));
  verify(!left1.SameQName(right7));
  verify(!left1.SameQName(right8));

  verify(!left2.SameQName(right1));
  verify(!left2.SameQName(right2));
  verify(left2.SameQName(right3));
  verify(!left2.SameQName(right4));
  verify(left2.SameQName(right5));
  verify(!left2.SameQName(right6));
  verify(!left2.SameQName(right7));
  verify(!left2.SameQName(right8));
}

test("XMLCompleteName::operator=(const XMLExpandedName &other)")
{
  XMLExpandedName original1(UNI_L("localpart"));
  XMLCompleteName copy1(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("other"));

  verify(&(copy1 = original1) == &copy1);

  verify(copy1.GetLocalPart() == original1.GetLocalPart());
  verify(copy1.GetUri() == original1.GetUri());
  verify(copy1.GetPrefix() == NULL);

  XMLExpandedName original2(UNI_L("http://www.example.org/"), UNI_L("localpart"));
  XMLCompleteName copy2(UNI_L("other"));

  verify(&(copy2 = original2) == &copy2);

  verify(copy2.GetLocalPart() == original2.GetLocalPart());
  verify(copy2.GetUri() == original2.GetUri());
  verify(copy2.GetPrefix() == NULL);
}

test("XMLCompleteName::operator=(const XMLCompleteName &other)")
{
  XMLCompleteName original1(UNI_L("localpart"));
  XMLCompleteName copy1(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("other"));

  verify(&(copy1 = original1) == &copy1);

  verify(copy1.GetLocalPart() == original1.GetLocalPart());
  verify(copy1.GetUri() == original1.GetUri());
  verify(copy1.GetPrefix() == original1.GetPrefix());

  XMLCompleteName original2(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("localpart"));
  XMLCompleteName copy2(UNI_L("other"));

  verify(&(copy2 = original2) == &copy2);

  verify(copy2.GetLocalPart() == original2.GetLocalPart());
  verify(copy2.GetUri() == original2.GetUri());
  verify(copy2.GetPrefix() == original2.GetPrefix());
}

test("XMLCompleteName::Set(const XMLExpandedName &other)")
{
  XMLExpandedName original1(UNI_L("localpart"));
  XMLCompleteName copy1(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("other"));

  verify(copy1.Set(original1) == OpStatus::OK);

  verify(copy1.GetLocalPart() != original1.GetLocalPart());
  verify(copy1.GetLocalPart());
  verify(uni_strcmp(copy1.GetLocalPart(), original1.GetLocalPart()) == 0);
  verify(copy1.GetUri() == NULL);
  verify(copy1.GetPrefix() == NULL);

  XMLExpandedName original2(UNI_L("http://www.example.org/"), UNI_L("localpart"));
  XMLCompleteName copy2(UNI_L("other"));

  verify(copy2.Set(original2) == OpStatus::OK);

  verify(copy2.GetLocalPart() != original2.GetLocalPart());
  verify(copy2.GetLocalPart());
  verify(uni_strcmp(copy2.GetLocalPart(), original2.GetLocalPart()) == 0);
  verify(copy2.GetUri() != original2.GetUri());
  verify(copy2.GetUri());
  verify(uni_strcmp(copy2.GetUri(), original2.GetUri()) == 0);
  verify(copy2.GetPrefix() == NULL);
}

test("XMLCompleteName::Set(const XMLExpandedNameN &other)")
{
  XMLExpandedNameN original1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteName copy1(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("other"));

  verify(copy1.Set(original1) == OpStatus::OK);

  verify(copy1.GetLocalPart() != original1.GetLocalPart());
  verify(copy1.GetLocalPart());
  verify(uni_strlen(copy1.GetLocalPart()) == original1.GetLocalPartLength());
  verify(uni_strncmp(copy1.GetLocalPart(), original1.GetLocalPart(), original1.GetLocalPartLength()) == 0);
  verify(copy1.GetUri() == NULL);
  verify(copy1.GetPrefix() == NULL);

  XMLExpandedNameN original2(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteName copy2(UNI_L("localpart"));

  verify(copy2.Set(original2) == OpStatus::OK);

  verify(copy2.GetLocalPart() != original2.GetLocalPart());
  verify(copy2.GetLocalPart());
  verify(uni_strlen(copy2.GetLocalPart()) == original2.GetLocalPartLength());
  verify(uni_strncmp(copy2.GetLocalPart(), original2.GetLocalPart(), original2.GetLocalPartLength()) == 0);
  verify(copy2.GetUri() != original2.GetUri());
  verify(copy2.GetUri());
  verify(uni_strlen(copy2.GetUri()) == original2.GetUriLength());
  verify(uni_strncmp(copy2.GetUri(), original2.GetUri(), original2.GetUriLength()) == 0);
  verify(copy2.GetPrefix() == NULL);
}

test("XMLCompleteName::Set(const XMLCompleteName &other)")
{
  XMLCompleteName original1(UNI_L("localpart"));
  XMLCompleteName copy1(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("other"));

  verify(copy1.Set(original1) == OpStatus::OK);

  verify(copy1.GetLocalPart() != original1.GetLocalPart());
  verify(copy1.GetLocalPart());
  verify(uni_strcmp(copy1.GetLocalPart(), original1.GetLocalPart()) == 0);
  verify(copy1.GetUri() == NULL);
  verify(copy1.GetPrefix() == NULL);

  XMLCompleteName original2(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("localpart"));
  XMLCompleteName copy2(UNI_L("other"));

  verify(copy2.Set(original2) == OpStatus::OK);

  verify(copy2.GetLocalPart() != original2.GetLocalPart());
  verify(copy2.GetLocalPart());
  verify(uni_strcmp(copy2.GetLocalPart(), original2.GetLocalPart()) == 0);
  verify(copy2.GetUri() != original2.GetUri());
  verify(copy2.GetUri());
  verify(uni_strcmp(copy2.GetUri(), original2.GetUri()) == 0);
  verify(copy2.GetPrefix() != original2.GetPrefix());
  verify(copy2.GetPrefix());
  verify(uni_strcmp(copy2.GetPrefix(), original2.GetPrefix()) == 0);
}

test("XMLCompleteName::Set(const XMLCompleteNameN &other)")
{
  XMLCompleteNameN original1(NULL, 0, NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteName copy1(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("other"));

  verify(copy1.Set(original1) == OpStatus::OK);

  verify(copy1.GetLocalPart() != original1.GetLocalPart());
  verify(copy1.GetLocalPart());
  verify(uni_strlen(copy1.GetLocalPart()) == original1.GetLocalPartLength());
  verify(uni_strncmp(copy1.GetLocalPart(), original1.GetLocalPart(), original1.GetLocalPartLength()) == 0);
  verify(copy1.GetUri() == NULL);
  verify(copy1.GetPrefix() == NULL);

  XMLCompleteNameN original2(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteName copy2(UNI_L("other"));

  verify(copy2.Set(original2) == OpStatus::OK);

  verify(copy2.GetLocalPart() != original2.GetLocalPart());
  verify(copy2.GetLocalPart());
  verify(uni_strlen(copy2.GetLocalPart()) == original2.GetLocalPartLength());
  verify(uni_strncmp(copy2.GetLocalPart(), original2.GetLocalPart(), original2.GetLocalPartLength()) == 0);
  verify(copy2.GetUri() != original2.GetUri());
  verify(copy2.GetUri());
  verify(uni_strlen(copy2.GetUri()) == original2.GetUriLength());
  verify(uni_strncmp(copy2.GetUri(), original2.GetUri(), original2.GetUriLength()) == 0);
  verify(copy2.GetPrefix() != original2.GetPrefix());
  verify(copy2.GetPrefix());
  verify(uni_strlen(copy2.GetPrefix()) == original2.GetPrefixLength());
  verify(uni_strncmp(copy2.GetPrefix(), original2.GetPrefix(), original2.GetPrefixLength()) == 0);
}

test("XMLExpandedNameN::XMLExpandedNameN()")
{
  XMLExpandedNameN name;
  verify(name.GetUri() == NULL);
  verify(name.GetUriLength() == 0);
  verify(name.GetLocalPart() == NULL);
  verify(name.GetLocalPartLength() == 0);
}

test("XMLExpandedNameN::XMLExpandedNameN(const uni_char *uri, unsigned uri_length, const uni_char *localpart, unsigned localpart_length)")
{
  const uni_char *uri = UNI_L("http://www.example.org/+junk");
  const uni_char *localpart = UNI_L("localpart+junk");
  XMLExpandedNameN name(uri, uni_strlen(UNI_L("http://www.example.org/")), localpart, uni_strlen(UNI_L("localpart")));
  verify(name.GetUri() == uri);
  verify(name.GetUriLength() == uni_strlen(UNI_L("http://www.example.org/")));
  verify(name.GetLocalPart() == localpart);
  verify(name.GetLocalPartLength() == uni_strlen(UNI_L("localpart")));
}

test("XMLExpandedNameN::XMLExpandedNameN(const XMLExpandedName &other)")
{
  XMLExpandedName name1;
  XMLExpandedNameN copy1(name1);
  verify(copy1.GetUri() == name1.GetUri());
  verify(copy1.GetUriLength() == 0);
  verify(copy1.GetLocalPart() == name1.GetLocalPart());
  verify(copy1.GetLocalPartLength() == 0);

  const uni_char *localpart = UNI_L("localpart");
  XMLExpandedName name2(localpart);
  XMLExpandedNameN copy2(name2);
  verify(copy2.GetUri() == name2.GetUri());
  verify(copy2.GetUriLength() == 0);
  verify(copy2.GetLocalPart() == name2.GetLocalPart());
  verify(copy2.GetLocalPartLength() == uni_strlen(UNI_L("localpart")));

  const uni_char *uri = UNI_L("http://www.example.org/");
  XMLExpandedName name3(uri, localpart);
  XMLExpandedNameN copy3(name3);
  verify(copy3.GetUri() == name3.GetUri());
  verify(copy3.GetUriLength() == uni_strlen(UNI_L("http://www.example.org/")));
  verify(copy3.GetLocalPart() == name3.GetLocalPart());
  verify(copy3.GetLocalPartLength() == uni_strlen(UNI_L("localpart")));
}

test("XMLExpandedNameN::XMLExpandedNameN(const XMLExpandedNameN &other)")
{
  XMLExpandedNameN name1;
  XMLExpandedNameN copy1(name1);
  verify(copy1.GetUri() == name1.GetUri());
  verify(copy1.GetUriLength() == name1.GetUriLength());
  verify(copy1.GetLocalPart() == name1.GetLocalPart());
  verify(copy1.GetLocalPartLength() == name1.GetLocalPartLength());

  const uni_char *uri = UNI_L("http://www.example.org/+junk");
  const uni_char *localpart = UNI_L("localpart+junk");
  XMLExpandedNameN name2(uri, uni_strlen(UNI_L("http://www.example.org/")), localpart, uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN copy2(name2);
  verify(copy2.GetUri() == name2.GetUri());
  verify(copy2.GetUriLength() == name2.GetUriLength());
  verify(copy2.GetLocalPart() == name2.GetLocalPart());
  verify(copy2.GetLocalPartLength() == name2.GetLocalPartLength());
}

test("XMLExpandedNameN::GetNsType()")
{
  XMLExpandedNameN name1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(name1.GetNsType() == NS_NONE);

  XMLExpandedNameN name2(UNI_L("http://www.w3.org/1999/xhtml+junk"), uni_strlen(UNI_L("http://www.w3.org/1999/xhtml")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(name2.GetNsType() == NS_HTML);
}

test("XMLExpandedNameN::GetNsIndex()")
{
  XMLExpandedNameN name1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(name1.GetNsIndex() == NS_IDX_DEFAULT);

  XMLExpandedNameN name2(UNI_L("http://www.w3.org/1999/xhtml+junk"), uni_strlen(UNI_L("http://www.w3.org/1999/xhtml")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(name2.GetNsIndex() == NS_IDX_XHTML);
}

test("XMLExpandedNameN::IsXHTML()")
{
  XMLExpandedNameN name1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(!name1.IsXHTML());

  XMLExpandedNameN name2(UNI_L("http://www.w3.org/1999/xhtml+junk"), uni_strlen(UNI_L("http://www.w3.org/1999/xhtml")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(name2.IsXHTML());
}

test("XMLExpandedNameN::IsXML()")
{
  XMLExpandedNameN name1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(!name1.IsXML());

  XMLExpandedNameN name2(UNI_L("http://www.w3.org/XML/1998/namespace+junk"), uni_strlen(UNI_L("http://www.w3.org/XML/1998/namespace")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(name2.IsXML());
}

test("XMLExpandedNameN::IsSVG()")
  require SVG_SUPPORT;
{
  XMLExpandedNameN name1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(!name1.IsSVG());

  XMLExpandedNameN name2(UNI_L("http://www.w3.org/2000/svg+junk"), uni_strlen(UNI_L("http://www.w3.org/2000/svg")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(name2.IsSVG());
}

test("XMLExpandedNameN::IsWML()")
  require _WML_SUPPORT_;
{
  XMLExpandedNameN name1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(!name1.IsWML());

  XMLExpandedNameN name2(UNI_L("http://www.wapforum.org/2001/wml+junk"), uni_strlen(UNI_L("http://www.wapforum.org/2001/wml")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(name2.IsWML());
}

test("XMLExpandedNameN::IsXSLT()")
  require XSLT_SUPPORT;
{
  XMLExpandedNameN name1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(!name1.IsXSLT());

  XMLExpandedNameN name2(UNI_L("http://www.w3.org/1999/XSL/Transform+junk"), uni_strlen(UNI_L("http://www.w3.org/1999/XSL/Transform")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(name2.IsXSLT());
}

test("XMLExpandedNameN::IsId(const XMLExpandedNameN &elementname)")
{
  XMLExpandedNameN elem1(NULL, 0, UNI_L("unknown+junk"), uni_strlen(UNI_L("unknown")));
  XMLExpandedNameN elem2(UNI_L("http://www.w3.org/1999/xhtml+junk"), uni_strlen(UNI_L("http://www.w3.org/1999/xhtml")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));

  XMLExpandedNameN attr1(NULL, 0, UNI_L("not-id+junk"), uni_strlen(UNI_L("not-id")));
  XMLExpandedNameN attr2(NULL, 0, UNI_L("id+junk"), uni_strlen(UNI_L("id")));
  XMLExpandedNameN attr3(UNI_L("http://www.w3.org/XML/1998/namespace+junk"), uni_strlen(UNI_L("http://www.w3.org/XML/1998/namespace")), UNI_L("id+junk"), uni_strlen(UNI_L("id")));

  verify(!attr1.IsId(elem1));
  verify(!attr1.IsId(elem2));
  verify(!attr2.IsId(elem1));
  verify(attr2.IsId(elem2));
  verify(attr3.IsId(elem1));
  verify(attr3.IsId(elem2));
}

test("XMLExpandedNameN::IsId(const XMLExpandedNameN &elementname) [SVG]")
  require SVG_SUPPORT;
{
  XMLExpandedNameN elem1(UNI_L("http://www.w3.org/2000/svg+junk"), uni_strlen(UNI_L("http://www.w3.org/2000/svg")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));

  XMLExpandedNameN attr1(NULL, 0, UNI_L("not-id+junk"), uni_strlen(UNI_L("not-id")));
  XMLExpandedNameN attr2(NULL, 0, UNI_L("id+junk"), uni_strlen(UNI_L("id")));
  XMLExpandedNameN attr3(UNI_L("http://www.w3.org/XML/1998/namespace+junk"), uni_strlen(UNI_L("http://www.w3.org/XML/1998/namespace")), UNI_L("id+junk"), uni_strlen(UNI_L("id")));

  verify(!attr1.IsId(elem1));
  verify(attr2.IsId(elem1));
  verify(attr3.IsId(elem1));
}

test("XMLExpandedNameN::IsId(const XMLExpandedNameN &elementname) [WML]")
  require _WML_SUPPORT_;
{
  XMLExpandedNameN elem1(UNI_L("http://www.wapforum.org/2001/wml+junk"), uni_strlen(UNI_L("http://www.wapforum.org/2001/wml")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));

  XMLExpandedNameN attr1(NULL, 0, UNI_L("not-id+junk"), uni_strlen(UNI_L("not-id")));
  XMLExpandedNameN attr2(NULL, 0, UNI_L("id+junk"), uni_strlen(UNI_L("id")));
  XMLExpandedNameN attr3(UNI_L("http://www.w3.org/XML/1998/namespace+junk"), uni_strlen(UNI_L("http://www.w3.org/XML/1998/namespace")), UNI_L("id+junk"), uni_strlen(UNI_L("id")));

  verify(!attr1.IsId(elem1));
  verify(attr2.IsId(elem1));
  verify(attr3.IsId(elem1));
}

test("XMLExpandedNameN::IsId(const XMLExpandedNameN &elementname) [XSLT]")
    require XSLT_SUPPORT;
{
  XMLExpandedNameN elem1(UNI_L("http://www.w3.org/1999/XSL/Transform+junk"), uni_strlen(UNI_L("http://www.w3.org/1999/XSL/Transform")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN elem2(UNI_L("http://www.w3.org/1999/XSL/Transform+junk"), uni_strlen(UNI_L("http://www.w3.org/1999/XSL/Transform")), UNI_L("stylesheet+junk"), uni_strlen(UNI_L("stylesheet")));
  XMLExpandedNameN elem3(UNI_L("http://www.w3.org/1999/XSL/Transform+junk"), uni_strlen(UNI_L("http://www.w3.org/1999/XSL/Transform")), UNI_L("transform+junk"), uni_strlen(UNI_L("transform")));

  XMLExpandedNameN attr1(NULL, 0, UNI_L("not-id+junk"), uni_strlen(UNI_L("not-id")));
  XMLExpandedNameN attr2(NULL, 0, UNI_L("id+junk"), uni_strlen(UNI_L("id")));
  XMLExpandedNameN attr3(UNI_L("http://www.w3.org/XML/1998/namespace+junk"), uni_strlen(UNI_L("http://www.w3.org/XML/1998/namespace")), UNI_L("id+junk"), uni_strlen(UNI_L("id")));

  verify(!attr1.IsId(elem1));
  verify(!attr2.IsId(elem1));
  verify(attr3.IsId(elem1));
  verify(!attr1.IsId(elem2));
  verify(attr2.IsId(elem2));
  verify(attr3.IsId(elem2));
  verify(!attr1.IsId(elem3));
  verify(attr2.IsId(elem3));
  verify(attr3.IsId(elem3));
}

test("XMLExpandedNameN::operator==(const XMLExpandedName &other)")
{
  XMLExpandedNameN left1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN left2(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));

  XMLExpandedName right1(UNI_L("localpart"));
  XMLExpandedName right2(UNI_L("other"));
  XMLExpandedName right3(UNI_L("http://www.example.org/"), UNI_L("localpart"));
  XMLExpandedName right4(UNI_L("http://www.example.org/"), UNI_L("other"));
  XMLExpandedName right5(UNI_L("http://www.example.net/"), UNI_L("localpart"));
  XMLExpandedName right6(UNI_L("http://www.example.net/"), UNI_L("other"));

  verify(!(left1 == right1) == !TRUE);
  verify(!(left1 == right2) == !FALSE);
  verify(!(left1 == right3) == !FALSE);
  verify(!(left1 == right4) == !FALSE);
  verify(!(left1 == right5) == !FALSE);
  verify(!(left1 == right6) == !FALSE);
  verify(!(left2 == right1) == !FALSE);
  verify(!(left2 == right2) == !FALSE);
  verify(!(left2 == right3) == !TRUE);
  verify(!(left2 == right4) == !FALSE);
  verify(!(left2 == right5) == !FALSE);
  verify(!(left2 == right6) == !FALSE);
}

test("XMLExpandedNameN::operator==(const XMLExpandedNameN &other)")
{
  XMLExpandedNameN left1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN left2(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));

  XMLExpandedNameN right1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN right2(NULL, 0, UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLExpandedNameN right3(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN right4(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLExpandedNameN right5(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN right6(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));

  verify(!(left1 == right1) == !TRUE);
  verify(!(left1 == right2) == !FALSE);
  verify(!(left1 == right3) == !FALSE);
  verify(!(left1 == right4) == !FALSE);
  verify(!(left1 == right5) == !FALSE);
  verify(!(left1 == right6) == !FALSE);
  verify(!(left2 == right1) == !FALSE);
  verify(!(left2 == right2) == !FALSE);
  verify(!(left2 == right3) == !TRUE);
  verify(!(left2 == right4) == !FALSE);
  verify(!(left2 == right5) == !FALSE);
  verify(!(left2 == right6) == !FALSE);
}

test("XMLExpandedNameN::operator!=(const XMLExpandedName &other)")
{
  XMLExpandedNameN left1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN left2(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));

  XMLExpandedName right1(UNI_L("localpart"));
  XMLExpandedName right2(UNI_L("other"));
  XMLExpandedName right3(UNI_L("http://www.example.org/"), UNI_L("localpart"));
  XMLExpandedName right4(UNI_L("http://www.example.org/"), UNI_L("other"));
  XMLExpandedName right5(UNI_L("http://www.example.net/"), UNI_L("localpart"));
  XMLExpandedName right6(UNI_L("http://www.example.net/"), UNI_L("other"));

  verify(!(left1 != right1) == TRUE);
  verify(!(left1 != right2) == FALSE);
  verify(!(left1 != right3) == FALSE);
  verify(!(left1 != right4) == FALSE);
  verify(!(left1 != right5) == FALSE);
  verify(!(left1 != right6) == FALSE);
  verify(!(left2 != right1) == FALSE);
  verify(!(left2 != right2) == FALSE);
  verify(!(left2 != right3) == TRUE);
  verify(!(left2 != right4) == FALSE);
  verify(!(left2 != right5) == FALSE);
  verify(!(left2 != right6) == FALSE);
}

test("XMLExpandedNameN::operator!=(const XMLExpandedNameN &other)")
{
  XMLExpandedNameN left1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN left2(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));

  XMLExpandedNameN right1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN right2(NULL, 0, UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLExpandedNameN right3(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN right4(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLExpandedNameN right5(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN right6(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));

  verify(!(left1 != right1) == TRUE);
  verify(!(left1 != right2) == FALSE);
  verify(!(left1 != right3) == FALSE);
  verify(!(left1 != right4) == FALSE);
  verify(!(left1 != right5) == FALSE);
  verify(!(left1 != right6) == FALSE);
  verify(!(left2 != right1) == FALSE);
  verify(!(left2 != right2) == FALSE);
  verify(!(left2 != right3) == TRUE);
  verify(!(left2 != right4) == FALSE);
  verify(!(left2 != right5) == FALSE);
  verify(!(left2 != right6) == FALSE);
}

test("XMLExpandedNameN::SetUri(const uni_char *uri, unsigned uri_length)")
{
  XMLExpandedNameN name1(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  name1.SetUri(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")));

  verify(name1.GetUriLength() == uni_strlen(UNI_L("http://www.example.org/")));
  verify(name1.GetUri() && uni_strncmp(name1.GetUri(), UNI_L("http://www.example.org/"), uni_strlen(UNI_L("http://www.example.org/"))) == 0);

  XMLExpandedNameN name2(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  name2.SetUri(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")));

  verify(name2.GetUriLength() == uni_strlen(UNI_L("http://www.example.org/")));
  verify(name2.GetUri() && uni_strncmp(name2.GetUri(), UNI_L("http://www.example.org/"), uni_strlen(UNI_L("http://www.example.org/"))) == 0);
}

test("XMLExpandedNameN::HashFunctions::Hash(const void *key)")
{
  XMLExpandedNameN::HashFunctions functions;

  XMLExpandedNameN name1a(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN name2a(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN name3a(NULL, 0, UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLExpandedNameN name4a(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN name1b(NULL, 0, UNI_L("localpart+knuj"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN name2b(UNI_L("http://www.example.org/+knuj"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("localpart+knuj"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN name3b(NULL, 0, UNI_L("other+knuj"), uni_strlen(UNI_L("other")));
  XMLExpandedNameN name4b(UNI_L("http://www.example.net/+knuj"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("localpart+knuj"), uni_strlen(UNI_L("localpart")));

  /* These must of course not fail; identical names must have identical hashes. */
  verify(functions.Hash(static_cast<void*>(&name1a)) == functions.Hash(static_cast<void*>(&name1b)));
  verify(functions.Hash(static_cast<void*>(&name2a)) == functions.Hash(static_cast<void*>(&name2b)));
  verify(functions.Hash(static_cast<void*>(&name3a)) == functions.Hash(static_cast<void*>(&name3b)));
  verify(functions.Hash(static_cast<void*>(&name4a)) == functions.Hash(static_cast<void*>(&name4b)));

  /* These could fail; non-identical names can have identical hashes.  If the
     hash function changes, these might begin to fail without there being a
     real problem (though it might of course indicate that the hash function
     became worse.)  */
  verify(functions.Hash(static_cast<void*>(&name1a)) != functions.Hash(static_cast<void*>(&name2b)));
  verify(functions.Hash(static_cast<void*>(&name1a)) != functions.Hash(static_cast<void*>(&name3b)));
  verify(functions.Hash(static_cast<void*>(&name1a)) != functions.Hash(static_cast<void*>(&name4b)));
  verify(functions.Hash(static_cast<void*>(&name2a)) != functions.Hash(static_cast<void*>(&name1b)));
  verify(functions.Hash(static_cast<void*>(&name2a)) != functions.Hash(static_cast<void*>(&name3b)));
  verify(functions.Hash(static_cast<void*>(&name2a)) != functions.Hash(static_cast<void*>(&name4b)));
  verify(functions.Hash(static_cast<void*>(&name3a)) != functions.Hash(static_cast<void*>(&name1b)));
  verify(functions.Hash(static_cast<void*>(&name3a)) != functions.Hash(static_cast<void*>(&name2b)));
  verify(functions.Hash(static_cast<void*>(&name3a)) != functions.Hash(static_cast<void*>(&name4b)));
  verify(functions.Hash(static_cast<void*>(&name4a)) != functions.Hash(static_cast<void*>(&name1b)));
  verify(functions.Hash(static_cast<void*>(&name4a)) != functions.Hash(static_cast<void*>(&name2b)));
  verify(functions.Hash(static_cast<void*>(&name4a)) != functions.Hash(static_cast<void*>(&name3b)));
}

test("XMLExpandedNameN::HashFunctions::KeysAreEqual(const void *key1, const void *key2)")
{
  XMLExpandedNameN::HashFunctions functions;

  XMLExpandedNameN name1a(NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN name2a(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN name3a(NULL, 0, UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLExpandedNameN name4a(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN name1b(NULL, 0, UNI_L("localpart+knuj"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN name2b(UNI_L("http://www.example.org/+knuj"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("localpart+knuj"), uni_strlen(UNI_L("localpart")));
  XMLExpandedNameN name3b(NULL, 0, UNI_L("other+knuj"), uni_strlen(UNI_L("other")));
  XMLExpandedNameN name4b(UNI_L("http://www.example.net/+knuj"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("localpart+knuj"), uni_strlen(UNI_L("localpart")));

  verify(functions.KeysAreEqual(static_cast<void*>(&name1a), static_cast<void*>(&name1b)));
  verify(functions.KeysAreEqual(static_cast<void*>(&name2a), static_cast<void*>(&name2b)));
  verify(functions.KeysAreEqual(static_cast<void*>(&name3a), static_cast<void*>(&name3b)));
  verify(functions.KeysAreEqual(static_cast<void*>(&name4a), static_cast<void*>(&name4b)));

  verify(!functions.KeysAreEqual(static_cast<void*>(&name1a), static_cast<void*>(&name2b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&name1a), static_cast<void*>(&name3b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&name1a), static_cast<void*>(&name4b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&name2a), static_cast<void*>(&name1b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&name2a), static_cast<void*>(&name3b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&name2a), static_cast<void*>(&name4b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&name3a), static_cast<void*>(&name1b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&name3a), static_cast<void*>(&name2b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&name3a), static_cast<void*>(&name4b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&name4a), static_cast<void*>(&name1b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&name4a), static_cast<void*>(&name2b)));
  verify(!functions.KeysAreEqual(static_cast<void*>(&name4a), static_cast<void*>(&name3b)));
}

test("XMLCompleteNameN::XMLCompleteNameN()")
{
  XMLCompleteNameN name;
  verify(name.GetUri() == NULL);
  verify(name.GetUriLength() == 0);
  verify(name.GetLocalPart() == NULL);
  verify(name.GetLocalPartLength() == 0);
  verify(name.GetPrefix() == NULL);
  verify(name.GetPrefixLength() == 0);
}

test("XMLCompleteNameN::XMLCompleteNameN(const uni_char *qname, unsigned qname_length)")
{
  const uni_char *qname1 = UNI_L("localpart+junk");
  XMLCompleteNameN name1(qname1, uni_strlen(UNI_L("localpart")));
  verify(name1.GetUri() == NULL);
  verify(name1.GetUriLength() == 0);
  verify(name1.GetLocalPart() == qname1);
  verify(name1.GetLocalPartLength() == uni_strlen(UNI_L("localpart")));
  verify(name1.GetPrefix() == NULL);
  verify(name1.GetPrefixLength() == 0);

  const uni_char *qname2 = UNI_L("prefix:localpart+junk");
  XMLCompleteNameN name2(qname2, uni_strlen(UNI_L("prefix:localpart")));
  verify(name2.GetUri() == NULL);
  verify(name2.GetUriLength() == 0);
  verify(name2.GetLocalPart() == qname2 + uni_strlen(UNI_L("prefix:")));
  verify(name2.GetLocalPartLength() == uni_strlen(UNI_L("localpart")));
  verify(name2.GetPrefix() == qname2);
  verify(name2.GetPrefixLength() == uni_strlen(UNI_L("prefix")));
}

test("XMLCompleteNameN::XMLCompleteNameN(const uni_char *uri, unsigned uri_length, const uni_char *localpart, unsigned localpart_length)")
{
  const uni_char *uri = UNI_L("http://www.example.org/+junk");
  const uni_char *localpart = UNI_L("localpart+junk");
  const uni_char *prefix = UNI_L("prefix+junk");
  XMLCompleteNameN name(uri, uni_strlen(UNI_L("http://www.example.org/")), prefix, uni_strlen(UNI_L("prefix")), localpart, uni_strlen(UNI_L("localpart")));
  verify(name.GetUri() == uri);
  verify(name.GetUriLength() == uni_strlen(UNI_L("http://www.example.org/")));
  verify(name.GetLocalPart() == localpart);
  verify(name.GetLocalPartLength() == uni_strlen(UNI_L("localpart")));
  verify(name.GetPrefix() == prefix);
  verify(name.GetPrefixLength() == uni_strlen(UNI_L("prefix")));
}

test("XMLCompleteNameN::XMLCompleteNameN(const XMLCompleteName &other)")
{
  XMLCompleteName name1;
  XMLCompleteNameN copy1(name1);
  verify(copy1.GetUri() == name1.GetUri());
  verify(copy1.GetUriLength() == 0);
  verify(copy1.GetLocalPart() == name1.GetLocalPart());
  verify(copy1.GetLocalPartLength() == 0);
  verify(copy1.GetPrefix() == name1.GetPrefix());
  verify(copy1.GetPrefixLength() == 0);

  const uni_char *localpart = UNI_L("localpart");
  XMLCompleteName name2(localpart);
  XMLCompleteNameN copy2(name2);
  verify(copy2.GetUri() == name2.GetUri());
  verify(copy2.GetUriLength() == 0);
  verify(copy2.GetLocalPart() == name2.GetLocalPart());
  verify(copy2.GetLocalPartLength() == uni_strlen(UNI_L("localpart")));
  verify(copy2.GetPrefix() == name2.GetPrefix());
  verify(copy2.GetPrefixLength() == 0);

  const uni_char *uri = UNI_L("http://www.example.org/");
  const uni_char *prefix = UNI_L("prefix");
  XMLCompleteName name3(uri, prefix, localpart);
  XMLCompleteNameN copy3(name3);
  verify(copy3.GetUri() == name3.GetUri());
  verify(copy3.GetUriLength() == uni_strlen(UNI_L("http://www.example.org/")));
  verify(copy3.GetLocalPart() == name3.GetLocalPart());
  verify(copy3.GetLocalPartLength() == uni_strlen(UNI_L("localpart")));
  verify(copy3.GetPrefix() == name3.GetPrefix());
  verify(copy3.GetPrefixLength() == uni_strlen(UNI_L("prefix")));
}

test("XMLCompleteNameN::XMLCompleteNameN(const XMLCompleteNameN &other)")
{
  XMLCompleteNameN name1;
  XMLCompleteNameN copy1(name1);
  verify(copy1.GetUri() == name1.GetUri());
  verify(copy1.GetUriLength() == name1.GetUriLength());
  verify(copy1.GetLocalPart() == name1.GetLocalPart());
  verify(copy1.GetLocalPartLength() == name1.GetLocalPartLength());
  verify(copy1.GetPrefix() == name1.GetPrefix());
  verify(copy1.GetPrefixLength() == name1.GetPrefixLength());

  const uni_char *uri = UNI_L("http://www.example.org/+junk");
  const uni_char *localpart = UNI_L("localpart+junk");
  const uni_char *prefix = UNI_L("prefix+junk");
  XMLCompleteNameN name2(uri, uni_strlen(UNI_L("http://www.example.org/")), prefix, uni_strlen(UNI_L("prefix")), localpart, uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN copy2(name2);
  verify(copy2.GetUri() == name2.GetUri());
  verify(copy2.GetUriLength() == name2.GetUriLength());
  verify(copy2.GetLocalPart() == name2.GetLocalPart());
  verify(copy2.GetLocalPartLength() == name2.GetLocalPartLength());
  verify(copy2.GetPrefix() == name2.GetPrefix());
  verify(copy2.GetPrefixLength() == name2.GetPrefixLength());
}

test("XMLCompleteNameN::GetNsIndex()")
{
  XMLCompleteNameN name1(NULL, 0, NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(name1.GetNsIndex() == NS_IDX_DEFAULT);

  XMLCompleteNameN name2(UNI_L("http://www.w3.org/1999/xhtml+junk"), uni_strlen(UNI_L("http://www.w3.org/1999/xhtml")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  verify(name2.GetNsIndex() != NS_IDX_XHTML); // NS_IDX_XHTML has no prefix.
}

test("XMLCompleteNameN::operator==(const XMLCompleteName &other)")
{
  XMLCompleteNameN left1(NULL, 0, NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN left2(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));

  XMLCompleteName right1(UNI_L("localpart"));
  XMLCompleteName right2(UNI_L("other"));
  XMLCompleteName right3(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("localpart"));
  XMLCompleteName right4(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("other"));
  XMLCompleteName right5(UNI_L("http://www.example.net/"), UNI_L("prefix"), UNI_L("localpart"));
  XMLCompleteName right6(UNI_L("http://www.example.net/"), UNI_L("prefix"), UNI_L("other"));
  XMLCompleteName right7(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("localpart"));
  XMLCompleteName right8(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("other"));

  verify(!(left1 == right1) == !TRUE);
  verify(!(left1 == right2) == !FALSE);
  verify(!(left1 == right3) == !FALSE);
  verify(!(left1 == right4) == !FALSE);
  verify(!(left1 == right5) == !FALSE);
  verify(!(left1 == right6) == !FALSE);
  verify(!(left1 == right7) == !FALSE);
  verify(!(left1 == right8) == !FALSE);
  verify(!(left2 == right1) == !FALSE);
  verify(!(left2 == right2) == !FALSE);
  verify(!(left2 == right3) == !TRUE);
  verify(!(left2 == right4) == !FALSE);
  verify(!(left2 == right5) == !FALSE);
  verify(!(left2 == right6) == !FALSE);
  verify(!(left2 == right7) == !FALSE);
  verify(!(left2 == right8) == !FALSE);
}

test("XMLCompleteNameN::operator==(const XMLCompleteNameN &other)")
{
  XMLCompleteNameN left1(NULL, 0, NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN left2(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));

  XMLCompleteNameN right1(NULL, 0, NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right2(NULL, 0, NULL, 0, UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteNameN right3(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right4(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteNameN right5(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right6(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteNameN right7(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("xiferp+junk"), uni_strlen(UNI_L("xiferp")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right8(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("xiferp+junk"), uni_strlen(UNI_L("xiferp")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));

  verify(!(left1 == right1) == !TRUE);
  verify(!(left1 == right2) == !FALSE);
  verify(!(left1 == right3) == !FALSE);
  verify(!(left1 == right4) == !FALSE);
  verify(!(left1 == right5) == !FALSE);
  verify(!(left1 == right6) == !FALSE);
  verify(!(left2 == right7) == !FALSE);
  verify(!(left2 == right8) == !FALSE);
  verify(!(left2 == right1) == !FALSE);
  verify(!(left2 == right2) == !FALSE);
  verify(!(left2 == right3) == !TRUE);
  verify(!(left2 == right4) == !FALSE);
  verify(!(left2 == right5) == !FALSE);
  verify(!(left2 == right6) == !FALSE);
  verify(!(left2 == right7) == !FALSE);
  verify(!(left2 == right8) == !FALSE);
}

test("XMLCompleteNameN::operator!=(const XMLCompleteName &other)")
{
  XMLCompleteNameN left1(NULL, 0, NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN left2(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));

  XMLCompleteName right1(UNI_L("localpart"));
  XMLCompleteName right2(UNI_L("other"));
  XMLCompleteName right3(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("localpart"));
  XMLCompleteName right4(UNI_L("http://www.example.org/"), UNI_L("prefix"), UNI_L("other"));
  XMLCompleteName right5(UNI_L("http://www.example.net/"), UNI_L("prefix"), UNI_L("localpart"));
  XMLCompleteName right6(UNI_L("http://www.example.net/"), UNI_L("prefix"), UNI_L("other"));
  XMLCompleteName right7(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("localpart"));
  XMLCompleteName right8(UNI_L("http://www.example.org/"), UNI_L("xiferp"), UNI_L("other"));

  verify(!(left1 != right1) != !TRUE);
  verify(!(left1 != right2) != !FALSE);
  verify(!(left1 != right3) != !FALSE);
  verify(!(left1 != right4) != !FALSE);
  verify(!(left1 != right5) != !FALSE);
  verify(!(left1 != right6) != !FALSE);
  verify(!(left1 != right7) != !FALSE);
  verify(!(left1 != right8) != !FALSE);
  verify(!(left2 != right1) != !FALSE);
  verify(!(left2 != right2) != !FALSE);
  verify(!(left2 != right3) != !TRUE);
  verify(!(left2 != right4) != !FALSE);
  verify(!(left2 != right5) != !FALSE);
  verify(!(left2 != right6) != !FALSE);
  verify(!(left2 != right7) != !FALSE);
  verify(!(left2 != right8) != !FALSE);
}

test("XMLCompleteNameN::operator!=(const XMLCompleteNameN &other)")
{
  XMLCompleteNameN left1(NULL, 0, NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN left2(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));

  XMLCompleteNameN right1(NULL, 0, NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right2(NULL, 0, NULL, 0, UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteNameN right3(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right4(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteNameN right5(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right6(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteNameN right7(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("xiferp+junk"), uni_strlen(UNI_L("xiferp")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right8(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("xiferp+junk"), uni_strlen(UNI_L("xiferp")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));

  verify(!(left1 != right1) != !TRUE);
  verify(!(left1 != right2) != !FALSE);
  verify(!(left1 != right3) != !FALSE);
  verify(!(left1 != right4) != !FALSE);
  verify(!(left1 != right5) != !FALSE);
  verify(!(left1 != right6) != !FALSE);
  verify(!(left2 != right7) != !FALSE);
  verify(!(left2 != right8) != !FALSE);
  verify(!(left2 != right1) != !FALSE);
  verify(!(left2 != right2) != !FALSE);
  verify(!(left2 != right3) != !TRUE);
  verify(!(left2 != right4) != !FALSE);
  verify(!(left2 != right5) != !FALSE);
  verify(!(left2 != right6) != !FALSE);
  verify(!(left2 != right7) != !FALSE);
  verify(!(left2 != right8) != !FALSE);
}

test("XMLCompleteNameN::SameQName(const XMLCompleteNameN &other)")
{
  XMLCompleteNameN left1(NULL, 0, NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN left2(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));

  XMLCompleteNameN right1(NULL, 0, NULL, 0, UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right2(NULL, 0, NULL, 0, UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteNameN right3(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right4(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteNameN right5(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right6(UNI_L("http://www.example.net/+junk"), uni_strlen(UNI_L("http://www.example.net/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));
  XMLCompleteNameN right7(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("xiferp+junk"), uni_strlen(UNI_L("xiferp")), UNI_L("localpart+junk"), uni_strlen(UNI_L("localpart")));
  XMLCompleteNameN right8(UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("xiferp+junk"), uni_strlen(UNI_L("xiferp")), UNI_L("other+junk"), uni_strlen(UNI_L("other")));

  verify(left1.SameQName(right1));
  verify(!left1.SameQName(right2));
  verify(!left1.SameQName(right3));
  verify(!left1.SameQName(right4));
  verify(!left1.SameQName(right5));
  verify(!left1.SameQName(right6));
  verify(!left1.SameQName(right7));
  verify(!left1.SameQName(right8));

  verify(!left2.SameQName(right1));
  verify(!left2.SameQName(right2));
  verify(left2.SameQName(right3));
  verify(!left2.SameQName(right4));
  verify(left2.SameQName(right5));
  verify(!left2.SameQName(right6));
  verify(!left2.SameQName(right7));
  verify(!left2.SameQName(right8));
}

test("XMLNamespaceDeclaration #1")
{
  XMLNamespaceDeclaration::Reference current;

  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), NULL, 0, 1) == OpStatus::OK);

  verify(current != NULL);
  verify(current->GetPrevious() == NULL);
  verify(current->GetUri() && uni_str_eq(current->GetUri(), "http://www.example.org/"));
  verify(current->GetPrefix() == NULL);
  verify(current->GetLevel() == 1);
  verify(current->GetNsType() == NS_USER);

  int index = current->GetNsIndex();
  verify(index != NS_IDX_NOT_FOUND);
  verify(g_ns_manager->GetElementAt(index) != NULL);
  verify(g_ns_manager->GetElementAt(index)->GetUri() && uni_str_eq(g_ns_manager->GetElementAt(index)->GetUri(), "http://www.example.org/"));
  verify(g_ns_manager->GetElementAt(index)->GetPrefix() && uni_strlen(g_ns_manager->GetElementAt(index)->GetPrefix()) == 0);

  XMLNamespaceDeclaration::Pop(current, 1);

  verify(current == NULL);
}

test("XMLNamespaceDeclaration #2")
{
  XMLNamespaceDeclaration::Reference current;

  TRAPD(status, XMLNamespaceDeclaration::PushL(current, UNI_L("http://www.example.org/+junk"), uni_strlen(UNI_L("http://www.example.org/")), UNI_L("prefix+junk"), uni_strlen(UNI_L("prefix")), 1));
  verify(status == OpStatus::OK);

  verify(current != NULL);
  verify(current->GetPrevious() == NULL);
  verify(current->GetUri() && uni_str_eq(current->GetUri(), "http://www.example.org/"));
  verify(current->GetPrefix() && uni_str_eq(current->GetPrefix(), "prefix"));
  verify(current->GetLevel() == 1);
  verify(current->GetNsType() == NS_USER);

  int index = current->GetNsIndex();
  verify(index != NS_IDX_NOT_FOUND);
  verify(g_ns_manager->GetElementAt(index) != NULL);
  verify(g_ns_manager->GetElementAt(index)->GetUri() && uni_str_eq(g_ns_manager->GetElementAt(index)->GetUri(), "http://www.example.org/"));
  verify(g_ns_manager->GetElementAt(index)->GetPrefix() && uni_str_eq(g_ns_manager->GetElementAt(index)->GetPrefix(), "prefix"));

  XMLNamespaceDeclaration::Pop(current, 1);

  verify(current == NULL);
}

test("XMLNamespaceDeclaration #3")
{
  XMLNamespaceDeclaration::Reference current;

  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/1+junk"), uni_strlen(UNI_L("http://www.example.org/1")), UNI_L("prefix1+junk"), uni_strlen(UNI_L("prefix1")), 1) == OpStatus::OK);
  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/2+junk"), uni_strlen(UNI_L("http://www.example.org/2")), UNI_L("prefix2+junk"), uni_strlen(UNI_L("prefix2")), 1) == OpStatus::OK);

  verify(current != NULL);
  verify(current->GetPrevious() != NULL);
  verify(current->GetPrevious()->GetPrevious() == NULL);
  verify(current->GetUri() && uni_str_eq(current->GetUri(), "http://www.example.org/2"));
  verify(current->GetPrefix() && uni_str_eq(current->GetPrefix(), "prefix2"));
  verify(current->GetLevel() == 1);
  verify(current->GetPrevious()->GetUri() && uni_str_eq(current->GetPrevious()->GetUri(), "http://www.example.org/1"));
  verify(current->GetPrevious()->GetPrefix() && uni_str_eq(current->GetPrevious()->GetPrefix(), "prefix1"));
  verify(current->GetPrevious()->GetLevel() == 1);

  XMLNamespaceDeclaration::Pop(current, 1);

  verify(current == NULL);
}

test("XMLNamespaceDeclaration #4")
{
  XMLNamespaceDeclaration::Reference current;

  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/1+junk"), uni_strlen(UNI_L("http://www.example.org/1")), UNI_L("prefix1+junk"), uni_strlen(UNI_L("prefix1")), 1) == OpStatus::OK);
  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/2+junk"), uni_strlen(UNI_L("http://www.example.org/2")), UNI_L("prefix2+junk"), uni_strlen(UNI_L("prefix2")), 2) == OpStatus::OK);

  verify(current != NULL);
  verify(current->GetPrevious() != NULL);
  verify(current->GetPrevious()->GetPrevious() == NULL);
  verify(current->GetUri() && uni_str_eq(current->GetUri(), "http://www.example.org/2"));
  verify(current->GetPrefix() && uni_str_eq(current->GetPrefix(), "prefix2"));
  verify(current->GetLevel() == 2);
  verify(current->GetPrevious()->GetUri() && uni_str_eq(current->GetPrevious()->GetUri(), "http://www.example.org/1"));
  verify(current->GetPrevious()->GetPrefix() && uni_str_eq(current->GetPrevious()->GetPrefix(), "prefix1"));
  verify(current->GetPrevious()->GetLevel() == 1);

  XMLNamespaceDeclaration::Pop(current, 2);

  verify(current != NULL);
  verify(current->GetPrevious() == NULL);
  verify(current->GetLevel() == 1);

  XMLNamespaceDeclaration::Pop(current, 1);

  verify(current == NULL);
}

test("XMLNamespaceDeclaration #5")
{
  XMLNamespaceDeclaration::Reference current;

  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/1+junk"), uni_strlen(UNI_L("http://www.example.org/1")), UNI_L("prefix1+junk"), uni_strlen(UNI_L("prefix1")), 1) == OpStatus::OK);
  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/2+junk"), uni_strlen(UNI_L("http://www.example.org/2")), UNI_L("prefix2+junk"), uni_strlen(UNI_L("prefix2")), 1) == OpStatus::OK);
  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/3+junk"), uni_strlen(UNI_L("http://www.example.org/3")), UNI_L("prefix3+junk"), uni_strlen(UNI_L("prefix3")), 1) == OpStatus::OK);

  XMLNamespaceDeclaration *prefix1 = XMLNamespaceDeclaration::FindDeclaration(current, UNI_L("prefix1"));
  verify(prefix1 != NULL);
  verify(prefix1->GetUri() && uni_str_eq(prefix1->GetUri(), "http://www.example.org/1"));

  XMLNamespaceDeclaration *prefix2 = XMLNamespaceDeclaration::FindDeclaration(current, UNI_L("prefix2"));
  verify(prefix2 != NULL);
  verify(prefix2->GetUri() && uni_str_eq(prefix2->GetUri(), "http://www.example.org/2"));

  XMLNamespaceDeclaration *prefix3 = XMLNamespaceDeclaration::FindDeclaration(current, UNI_L("prefix3"));
  verify(prefix3 != NULL);
  verify(prefix3->GetUri() && uni_str_eq(prefix3->GetUri(), "http://www.example.org/3"));

  XMLNamespaceDeclaration *prefix4 = XMLNamespaceDeclaration::FindDeclaration(current, UNI_L("prefix4"));
  verify(prefix4 == NULL);

  XMLNamespaceDeclaration *defaultdecl = XMLNamespaceDeclaration::FindDefaultDeclaration(current);
  verify(defaultdecl == NULL);

  XMLNamespaceDeclaration::Pop(current, 1);

  verify(current == NULL);
}

test("XMLNamespaceDeclaration #6")
{
  XMLNamespaceDeclaration::Reference current;

  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/1+junk"), uni_strlen(UNI_L("http://www.example.org/1")), UNI_L("prefix1+junk"), uni_strlen(UNI_L("prefix1")), 1) == OpStatus::OK);
  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/2+junk"), uni_strlen(UNI_L("http://www.example.org/2")), NULL, 0, 1) == OpStatus::OK);
  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/3+junk"), uni_strlen(UNI_L("http://www.example.org/3")), UNI_L("prefix3+junk"), uni_strlen(UNI_L("prefix3")), 1) == OpStatus::OK);

  XMLNamespaceDeclaration *prefix1 = XMLNamespaceDeclaration::FindDeclaration(current, UNI_L("prefix1"));
  verify(prefix1 != NULL);
  verify(prefix1->GetUri() && uni_str_eq(prefix1->GetUri(), "http://www.example.org/1"));

  XMLNamespaceDeclaration *prefix2 = XMLNamespaceDeclaration::FindDeclaration(current, UNI_L("prefix2"));
  verify(prefix2 == NULL);

  XMLNamespaceDeclaration *prefix3 = XMLNamespaceDeclaration::FindDeclaration(current, UNI_L("prefix3"));
  verify(prefix3 != NULL);
  verify(prefix3->GetUri() && uni_str_eq(prefix3->GetUri(), "http://www.example.org/3"));

  XMLNamespaceDeclaration *defaultdecl = XMLNamespaceDeclaration::FindDefaultDeclaration(current);
  verify(defaultdecl != NULL);
  verify(defaultdecl->GetUri() && uni_str_eq(defaultdecl->GetUri(), "http://www.example.org/2"));

  XMLNamespaceDeclaration::Pop(current, 1);

  verify(current == NULL);
}

test("XMLNamespaceDeclaration #7")
{
  XMLNamespaceDeclaration::Reference current;

  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/1+junk"), uni_strlen(UNI_L("http://www.example.org/1")), UNI_L("prefix1+junk"), uni_strlen(UNI_L("prefix1")), 1) == OpStatus::OK);
  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/2+junk"), uni_strlen(UNI_L("http://www.example.org/2")), UNI_L("prefix2+junk"), uni_strlen(UNI_L("prefix2")), 1) == OpStatus::OK);
  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/3+junk"), uni_strlen(UNI_L("http://www.example.org/3")), UNI_L("prefix3+junk"), uni_strlen(UNI_L("prefix3")), 1) == OpStatus::OK);

  const uni_char *prefix1 = XMLNamespaceDeclaration::FindUri(current, UNI_L("prefix1"));
  verify(prefix1 && uni_str_eq(prefix1, "http://www.example.org/1"));

  const uni_char *prefix2 = XMLNamespaceDeclaration::FindUri(current, UNI_L("prefix2"));
  verify(prefix2 && uni_str_eq(prefix2, "http://www.example.org/2"));

  const uni_char *prefix3 = XMLNamespaceDeclaration::FindUri(current, UNI_L("prefix3"));
  verify(prefix3 && uni_str_eq(prefix3, "http://www.example.org/3"));

  const uni_char *prefix4 = XMLNamespaceDeclaration::FindUri(current, UNI_L("prefix4"));
  verify(prefix4 == NULL);

  const uni_char  *defaultdecl = XMLNamespaceDeclaration::FindDefaultUri(current);
  verify(defaultdecl == NULL);

  XMLNamespaceDeclaration::Pop(current, 1);

  verify(current == NULL);
}

test("XMLNamespaceDeclaration #8")
{
  XMLNamespaceDeclaration::Reference current;

  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/1+junk"), uni_strlen(UNI_L("http://www.example.org/1")), UNI_L("prefix1+junk"), uni_strlen(UNI_L("prefix1")), 1) == OpStatus::OK);
  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/2+junk"), uni_strlen(UNI_L("http://www.example.org/2")), NULL, 0, 1) == OpStatus::OK);
  verify(XMLNamespaceDeclaration::Push(current, UNI_L("http://www.example.org/3+junk"), uni_strlen(UNI_L("http://www.example.org/3")), UNI_L("prefix3+junk"), uni_strlen(UNI_L("prefix3")), 1) == OpStatus::OK);

  const uni_char *prefix1 = XMLNamespaceDeclaration::FindUri(current, UNI_L("prefix1"));
  verify(prefix1 && uni_str_eq(prefix1, "http://www.example.org/1"));

  const uni_char *prefix2 = XMLNamespaceDeclaration::FindUri(current, UNI_L("prefix2"));
  verify(prefix2 == NULL);

  const uni_char *prefix3 = XMLNamespaceDeclaration::FindUri(current, UNI_L("prefix3"));
  verify(prefix3 && uni_str_eq(prefix3, "http://www.example.org/3"));

  const uni_char *defaultdecl = XMLNamespaceDeclaration::FindDefaultUri(current);
  verify(defaultdecl && uni_str_eq(defaultdecl, "http://www.example.org/2"));

  XMLNamespaceDeclaration::Pop(current, 1);

  verify(current == NULL);
}

xhtml
{
  "<html xmlns='http://www.w3.org/1999/xhtml'>"
    "<body xmlns:foo='http://www.opera.com/foo'>"
      "<div lang='en' foo:foo1='foo1' foo:foo2='foo2'>"
	      "<div lang='en' xmlns:foo='http://www.opera.com/bar' foo:foo1='foo1' foo:foo2='foo2'>"
	      "</div>"
      "</div>"
    "</body>"
  "</html>"
}

test("XMLNamespaceDeclaration::ResolvePrefixInScope #1")
{
	XMLCompleteNameN name(UNI_L("foo:foo1"), 8);
	verify(XMLNamespaceDeclaration::ResolveNameInScope(find_element("div", 1), name));
	verify(name.GetNsIndex() != NS_IDX_NOT_FOUND);
	verify(uni_str_eq(UNI_L("http://www.opera.com/foo"), name.GetUri()));
}

test("XMLNamespaceDeclaration::ResolvePrefixInScope #2")
{
	XMLCompleteNameN name(UNI_L("foo:foo1"), 8);
	verify(XMLNamespaceDeclaration::ResolveNameInScope(find_element("div", 2), name));
	verify(name.GetNsIndex() != NS_IDX_NOT_FOUND);
	verify(uni_str_eq(UNI_L("http://www.opera.com/bar"), name.GetUri()));
}

test("XMLNamespaceDeclaration::ResolvePrefixInScope #3")
{
	XMLCompleteNameN name(UNI_L("notthere:foo1"), 13);
	verify(!XMLNamespaceDeclaration::ResolveNameInScope(find_element("div", 2), name));
}
