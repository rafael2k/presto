group "XMLUtils.simple";
require init;

include "modules/xmlutils/xmlparser.h";
include "modules/xmlutils/xmltoken.h";
include "modules/xmlutils/xmltokenhandler.h";
include "modules/url/url2.h";

global
{
  class IgnoringXMLTokenHandler
    : public XMLTokenHandler
  {
  public:
    BOOL finished;

    IgnoringXMLTokenHandler() : finished(FALSE) {}

    virtual Result HandleToken(XMLToken &token) { if (token.GetType() == XMLToken::TYPE_Finished) finished = TRUE; return XMLTokenHandler::RESULT_OK; }
  };
}

test("Parser without MessageHandler")
{
  XMLParser *parser = 0;
  IgnoringXMLTokenHandler tokenhandler;
  URL url;

  verify(OpStatus::IsSuccess(XMLParser::Make(parser, NULL, (MessageHandler *) NULL, &tokenhandler, url)));

  unsigned consumed;

  verify(OpStatus::IsSuccess(parser->Parse(UNI_L("<root/>"), 7, FALSE, &consumed)));
  verify(consumed == 7);
  verify(parser->IsFinished());
  verify(!parser->IsFailed());
  verify(tokenhandler.finished);
}
finally
{
  OP_DELETE(parser);
}

test("Parser without MessageHandler (failed)")
{
  XMLParser *parser = 0;
  IgnoringXMLTokenHandler tokenhandler;
  URL url;

  verify(OpStatus::IsSuccess(XMLParser::Make(parser, NULL, (MessageHandler *) NULL, &tokenhandler, url)));
  verify(OpStatus::IsSuccess(parser->Parse(UNI_L("<root/><root/>"), 14, FALSE)));
  verify(!parser->IsFinished());
  verify(parser->IsFailed());
  verify(!tokenhandler.finished);
}
finally
{
  OP_DELETE(parser);
}

test("Parser without MessageHandler (fragment)")
{
  XMLParser *parser = 0;
  IgnoringXMLTokenHandler tokenhandler;
  URL url;

  XMLParser::Configuration configuration;
  configuration.parse_mode = XMLParser::PARSEMODE_FRAGMENT;

  verify(OpStatus::IsSuccess(XMLParser::Make(parser, NULL, (MessageHandler *) NULL, &tokenhandler, url)));
  parser->SetConfiguration(configuration);
  verify(OpStatus::IsSuccess(parser->Parse(UNI_L("<root/><root/>"), 14, FALSE)));
  verify(parser->IsFinished());
  verify(!parser->IsFailed());
  verify(tokenhandler.finished);
}
finally
{
  OP_DELETE(parser);
}
