/* -*- mode: c++; c-file-style: "gnu" -*- */

group "XMLUtils.XMLFragment.xpath";
require init;
require XMLUTILS_XMLFRAGMENT_XPATH_SUPPORT;

include "modules/xmlutils/xmlfragment.h";

test("XMLFragment xpath #1")
{
  XMLFragment fragment;

  verify(OpStatus::IsSuccess(fragment.Parse(UNI_L("<root><element1/>text1<element2/>text2<element3/>text3</root>"))));

  double result = 0;

  verify(OpStatus::IsSuccess(fragment.EvaluateXPathToNumber(result, UNI_L("count(root/*)"))));
  verify(result == 3);
}

test("XMLFragment xpath #2")
{
  XMLFragment fragment;

  verify(OpStatus::IsSuccess(fragment.Parse(UNI_L("<root><element1/>text1<element2/>text2<element3/>text3</root>"))));

  BOOL result = FALSE;

  verify(OpStatus::IsSuccess(fragment.EvaluateXPathToBoolean(result, UNI_L("count(root/*)=3"))));
  verify(result == TRUE);
}

test("XMLFragment xpath #3")
{
  XMLFragment fragment;

  verify(OpStatus::IsSuccess(fragment.Parse(UNI_L("<root><element1/>text1<element2/>text2<element3/>text3</root>"))));

  OpString result;

  verify(OpStatus::IsSuccess(fragment.EvaluateXPathToString(result, UNI_L("root/text()[2]"))));
  verify(result.Compare(UNI_L("text2")) == 0);
}
