group "XMLUtils.XMLSerializer.canonicalize";
require init;
require XMLUTILS_CANONICAL_XML_SUPPORT;
require undefined USE_HTML_PARSER_FOR_XML;

include "modules/xmlutils/xmlserializer.h";
include "modules/doc/frm_doc.h";
include "modules/url/url2.h";

xml {
  "<?xml version=\"1.0\"?>\r\n"
  "\r\n"
  "<?xml-stylesheet   href=\"doc.css\"\r\n"
  "   type=\"text/css\"   ?>\r\n"
  "\r\n"
  "<!DOCTYPE doc SYSTEM \"doc.dtd\">\r\n"
  "\r\n"
  "<doc>Hello, world!<!-- Comment 1 --></doc>\r\n"
  "\r\n"
  "<?pi-without-data     ?>\r\n"
  "\r\n"
  "<!-- Comment 2 -->\r\n"
  "\r\n"
  "<!-- Comment 3 -->\r\n"
}

test("Specification example 3.1 (without comments)")
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->SetCanonicalize(XMLSerializer::CANONICALIZE_1_0)));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot(), NULL, NULL)));

  verify(uni_str_eq(buffer.GetStorage(), "<?xml-stylesheet href=\"doc.css\"\n   type=\"text/css\"   ?>\n<doc>Hello, world!</doc>\n<?pi-without-data?>"));
}
finally
{
  OP_DELETE(serializer);
}

test("Specification example 3.1 (with comments)")
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->SetCanonicalize(XMLSerializer::CANONICALIZE_1_0, TRUE)));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot(), NULL, NULL)));

  verify(uni_str_eq(buffer.GetStorage(), "<?xml-stylesheet href=\"doc.css\"\n   type=\"text/css\"   ?>\n<doc>Hello, world!<!-- Comment 1 --></doc>\n<?pi-without-data?>\n<!-- Comment 2 -->\n<!-- Comment 3 -->"));
}
finally
{
  OP_DELETE(serializer);
}

xml {
  "<doc>\r\n"
  "   <clean>   </clean>\r\n"
  "   <dirty>   A   B   </dirty>\r\n"
  "   <mixed>\r\n"
  "      A\r\n"
  "      <clean>   </clean>\r\n"
  "      B\r\n"
  "      <dirty>   A   B   </dirty>\r\n"
  "      C\r\n"
  "   </mixed>\r\n"
  "</doc>"
}

test("Specification example 3.2")
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->SetCanonicalize(XMLSerializer::CANONICALIZE_1_0)));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot(), NULL, NULL)));

  verify(uni_str_eq(buffer.GetStorage(), "<doc>\n   <clean>   </clean>\n   <dirty>   A   B   </dirty>\n   <mixed>\n      A\n      <clean>   </clean>\n      B\n      <dirty>   A   B   </dirty>\n      C\n   </mixed>\n</doc>"));
}
finally
{
  OP_DELETE(serializer);
}

xml {
  "<!DOCTYPE doc [<!ATTLIST e9 attr CDATA \"default\">]>\r\n"
  "<doc>\r\n"
  "   <e1   />\r\n"
  "   <e2   ></e2>\r\n"
  "   <e3   name = \"elem3\"   id=\"elem3\"   />\r\n"
  "   <e4   name=\"elem4\"   id=\"elem4\"   ></e4>\r\n"
  "   <e5 a:attr=\"out\" b:attr=\"sorted\" attr2=\"all\" attr=\"I'm\"\r\n"
  "      xmlns:b=\"http://www.ietf.org\"\r\n"
  "      xmlns:a=\"http://www.w3.org\"\r\n"
  "      xmlns=\"http://example.org\"/>\r\n"
  "   <e6 xmlns=\"\" xmlns:a=\"http://www.w3.org\">\r\n"
  "      <e7 xmlns=\"http://www.ietf.org\">\r\n"
  "         <e8 xmlns=\"\" xmlns:a=\"http://www.w3.org\">\r\n"
  "            <e9 xmlns=\"\" xmlns:a=\"http://www.ietf.org\"/>\r\n"
  "         </e8>\r\n"
  "      </e7>\r\n"
  "   </e6>\r\n"
  "</doc>\r\n"
}

test("Specification example 3.3")
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->SetCanonicalize(XMLSerializer::CANONICALIZE_1_0)));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot(), NULL, NULL)));

  verify(buffer.GetStorage() && uni_str_eq(buffer.GetStorage(), "<doc>\n   <e1></e1>\n   <e2></e2>\n   <e3 id=\"elem3\" name=\"elem3\"></e3>\n   <e4 id=\"elem4\" name=\"elem4\"></e4>\n   <e5 xmlns=\"http://example.org\" xmlns:a=\"http://www.w3.org\" xmlns:b=\"http://www.ietf.org\" attr=\"I'm\" attr2=\"all\" b:attr=\"sorted\" a:attr=\"out\"></e5>\n   <e6 xmlns:a=\"http://www.w3.org\">\n      <e7 xmlns=\"http://www.ietf.org\">\n         <e8 xmlns=\"\">\n            <e9 xmlns:a=\"http://www.ietf.org\" attr=\"default\"></e9>\n         </e8>\n      </e7>\n   </e6>\n</doc>"));
}
finally
{
  OP_DELETE(serializer);
}

xml {
  "<!DOCTYPE doc [\r\n"
  "<!ATTLIST normId id ID #IMPLIED>\r\n"
  "<!ATTLIST normNames attr NMTOKENS #IMPLIED>\r\n"
  "]>\r\n"
  "<doc>\r\n"
  "   <text>First line&#x0d;&#10;Second line</text>\r\n"
  "   <value>&#x32;</value>\r\n"
  "   <compute><![CDATA[value>\"0\" && value<\"10\" ?\"valid\":\"error\"]]></compute>\r\n"
  "   <compute expr='value>\"0\" &amp;&amp; value&lt;\"10\" ?\"valid\":\"error\"'>valid</compute>\r\n"
  "   <norm attr=' &apos;   &#x20;&#13;&#xa;&#9;   &apos; '/>\r\n"
  "   <normNames attr='   A   &#x20;&#13;&#xa;&#9;   B   '/>\r\n"
  "   <normId id=' &apos;   &#x20;&#13;&#xa;&#9;   &apos; '/>\r\n"
  "</doc>\r\n"
}

test("Specification example 3.4")
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->SetCanonicalize(XMLSerializer::CANONICALIZE_1_0)));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot(), NULL, NULL)));

  verify(buffer.GetStorage() && uni_str_eq(buffer.GetStorage(), "<doc>\n   <text>First line&#xD;\nSecond line</text>\n   <value>2</value>\n   <compute>value&gt;\"0\" &amp;&amp; value&lt;\"10\" ?\"valid\":\"error\"</compute>\n   <compute expr=\"value&gt;&quot;0&quot; &amp;&amp; value&lt;&quot;10&quot; ?&quot;valid&quot;:&quot;error&quot;\">valid</compute>\n   <norm attr=\" '    &#xD;&#xA;&#x9;   ' \"></norm>\n   <normNames attr=\"A &#xD;&#xA;&#x9; B\"></normNames>\n   <normId id=\"' &#xD;&#xA;&#x9; '\"></normId>\n</doc>"));
}
finally
{
  OP_DELETE(serializer);
}


xml {
  "<!DOCTYPE doc [\r\n"
  "<!ATTLIST doc attrExtEnt ENTITY #IMPLIED>\r\n"
  "<!ENTITY ent1 \"Hello\">\r\n"
  "<!ENTITY ent2 \"world\">\r\n"
  "<!ENTITY entExt SYSTEM \"earth.gif\" NDATA gif>\r\n"
  "<!NOTATION gif SYSTEM \"viewgif.exe\">\r\n"
  "]>\r\n"
  "<doc attrExtEnt=\"entExt\">\r\n"
  "   &ent1;, &ent2;!\r\n"
  "</doc>\r\n"
}

test("Specification example 3.5")
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->SetCanonicalize(XMLSerializer::CANONICALIZE_1_0)));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot(), NULL, NULL)));

  verify(buffer.GetStorage() && uni_str_eq(buffer.GetStorage(), "<doc attrExtEnt=\"entExt\">\n   Hello, world!\n</doc>"));
}
finally
{
  OP_DELETE(serializer);
}

xml {
  "<?xml version='1.0'?>"
  "<n0:local xmlns:n0=\"foo:bar\""
           " xmlns:n3=\"ftp://example.org\">"
    "<n1:elem2 xmlns:n1=\"http://example.net\""
             " xml:lang=\"en\">"
      "<n3:stuff xmlns:n3=\"ftp://example.org\"/>"
    "</n1:elem2>"
  "</n0:local>"
}

test("Exclusive example 2.2 #1 (normal)")
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->SetCanonicalize(XMLSerializer::CANONICALIZE_1_0)));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot()->FirstChildActual()->FirstChildActual(), NULL, NULL)));

  verify(buffer.GetStorage() && uni_str_eq(buffer.GetStorage(), "<n1:elem2 xmlns:n0=\"foo:bar\" xmlns:n1=\"http://example.net\" xmlns:n3=\"ftp://example.org\" xml:lang=\"en\"><n3:stuff></n3:stuff></n1:elem2>"));
}
finally
{
  OP_DELETE(serializer);
}

test("Exclusive example 2.2 #1 (exclusive)")
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->SetCanonicalize(XMLSerializer::CANONICALIZE_1_0_EXCLUSIVE)));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot()->FirstChildActual()->FirstChildActual(), NULL, NULL)));

  verify(buffer.GetStorage() && uni_str_eq(buffer.GetStorage(), "<n1:elem2 xmlns:n1=\"http://example.net\" xml:lang=\"en\"><n3:stuff xmlns:n3=\"ftp://example.org\"></n3:stuff></n1:elem2>"));
}
finally
{
  OP_DELETE(serializer);
}

test("Exclusive example 2.2 #1 (exclusive + prefix list)")
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->SetCanonicalize(XMLSerializer::CANONICALIZE_1_0_EXCLUSIVE)));
  verify(OpStatus::IsSuccess(serializer->SetInclusiveNamespacesPrefixList(UNI_L("n0 n3"))));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot()->FirstChildActual()->FirstChildActual(), NULL, NULL)));

  verify(buffer.GetStorage() && uni_str_eq(buffer.GetStorage(), "<n1:elem2 xmlns:n0=\"foo:bar\" xmlns:n1=\"http://example.net\" xmlns:n3=\"ftp://example.org\" xml:lang=\"en\"><n3:stuff></n3:stuff></n1:elem2>"));
}
finally
{
  OP_DELETE(serializer);
}

xml {
  "<?xml version='1.0'?>"
  "<n2:pdu xmlns:n1=\"http://example.com\""
         " xmlns:n2=\"http://foo.example\""
         " xml:lang=\"fr\""
         " xml:space=\"preserve\">"
    "<n1:elem2 xmlns:n1=\"http://example.net\""
             " xml:lang=\"en\">"
      "<n3:stuff xmlns:n3=\"ftp://example.org\"/>"
    "</n1:elem2>"
  "</n2:pdu>"
}

test("Exclusive example 2.2 #2 (normal)")
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->SetCanonicalize(XMLSerializer::CANONICALIZE_1_0)));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot()->FirstChildActual()->FirstChildActual(), NULL, NULL)));

  verify(buffer.GetStorage() && uni_str_eq(buffer.GetStorage(), "<n1:elem2 xmlns:n1=\"http://example.net\" xmlns:n2=\"http://foo.example\" xml:lang=\"en\" xml:space=\"preserve\"><n3:stuff xmlns:n3=\"ftp://example.org\"></n3:stuff></n1:elem2>"));
}
finally
{
  OP_DELETE(serializer);
}

test("Exclusive example 2.2 #2 (exclusive)")
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->SetCanonicalize(XMLSerializer::CANONICALIZE_1_0_EXCLUSIVE)));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot()->FirstChildActual()->FirstChildActual(), NULL, NULL)));

  verify(buffer.GetStorage() && uni_str_eq(buffer.GetStorage(), "<n1:elem2 xmlns:n1=\"http://example.net\" xml:lang=\"en\"><n3:stuff xmlns:n3=\"ftp://example.org\"></n3:stuff></n1:elem2>"));
}
finally
{
  OP_DELETE(serializer);
}

test("Exclusive example 2.2 #2 (exclusive + prefix list)")
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->SetCanonicalize(XMLSerializer::CANONICALIZE_1_0_EXCLUSIVE)));
  verify(OpStatus::IsSuccess(serializer->SetInclusiveNamespacesPrefixList(UNI_L("dummy1 n2 dummy2"))));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot()->FirstChildActual()->FirstChildActual(), NULL, NULL)));

  verify(buffer.GetStorage() && uni_str_eq(buffer.GetStorage(), "<n1:elem2 xmlns:n1=\"http://example.net\" xmlns:n2=\"http://foo.example\" xml:lang=\"en\"><n3:stuff xmlns:n3=\"ftp://example.org\"></n3:stuff></n1:elem2>"));
}
finally
{
  OP_DELETE(serializer);
}
