/* -*- mode: c++; c-file-style: "gnu" -*- */

group "XMLUtils.XMLFragment.treeaccessor";
require init;
require XMLUTILS_XMLFRAGMENT_XMLTREEACCESSOR_SUPPORT;

include "modules/xmlutils/xmlfragment.h";
include "modules/xmlutils/xmltreeaccessor.h";
include "modules/xmlutils/xmlnames.h";

test("XMLFragment tree accessor #1")
{
  XMLFragment fragment;
  XMLTreeAccessor *tree = 0;

  verify(OpStatus::IsSuccess(fragment.Parse(UNI_L("<root><element1/>text1<element2/>text2<element3/>text3</root>"))));
  verify(OpStatus::IsSuccess(fragment.CreateXMLTreeAccessor(tree)));

  XMLTreeAccessor::Node *node, *other;
  const uni_char *value;

  verify(node = tree->GetRoot());
  verify(tree->GetNodeType(node) == XMLTreeAccessor::TYPE_ROOT);

  /* <root/> */
  verify(node = tree->GetFirstChild(node));
  verify(!tree->GetPreviousSibling(node));
  verify(!tree->GetNextSibling(node));
  verify(tree->GetNodeType(node) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(node) == XMLCompleteName(UNI_L("root")));
  other = node;

  /* <element1/> */
  verify(node = tree->GetFirstChild(node));
  verify(other == tree->GetParent(node));
  verify(!tree->GetPreviousSibling(node));
  verify(tree->GetNodeType(node) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(node) == XMLCompleteName(UNI_L("element1")));
  other = node;

  /* text1 */
  verify(node = tree->GetNextSibling(node));
  verify(other == tree->GetPreviousSibling(node));
  verify(tree->GetNodeType(node) == XMLTreeAccessor::TYPE_TEXT);
  verify(OpStatus::IsSuccess(tree->GetData(value, node, NULL)));
  verify(value);
  verify(uni_strcmp(value, UNI_L("text1")) == 0);
  other = node;

  /* <element2/> */
  verify(node = tree->GetNextSibling(node));
  verify(other == tree->GetPreviousSibling(node));
  verify(tree->GetNodeType(node) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(node) == XMLCompleteName(UNI_L("element2")));
  other = node;

  /* text2 */
  verify(node = tree->GetNextSibling(node));
  verify(other == tree->GetPreviousSibling(node));
  verify(tree->GetNodeType(node) == XMLTreeAccessor::TYPE_TEXT);
  verify(OpStatus::IsSuccess(tree->GetData(value, node, NULL)));
  verify(value);
  verify(uni_strcmp(value, UNI_L("text2")) == 0);
  other = node;

  /* <element3/> */
  verify(node = tree->GetNextSibling(node));
  verify(other == tree->GetPreviousSibling(node));
  verify(tree->GetNodeType(node) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(node) == XMLCompleteName(UNI_L("element3")));
  other = node;

  /* text3 */
  verify(node = tree->GetNextSibling(node));
  verify(other == tree->GetPreviousSibling(node));
  verify(tree->GetNodeType(node) == XMLTreeAccessor::TYPE_TEXT);
  verify(OpStatus::IsSuccess(tree->GetData(value, node, NULL)));
  verify(value);
  verify(uni_strcmp(value, UNI_L("text3")) == 0);

  verify(node == tree->GetLastChild(tree->GetFirstChild(tree->GetRoot())));
  verify(!tree->GetNextSibling(node));
}
finally
{
  XMLFragment::FreeXMLTreeAccessor(tree);
}

test("XMLFragment tree accessor #2")
{
  XMLFragment fragment;
  XMLTreeAccessor *tree = 0;

  verify(OpStatus::IsSuccess(fragment.Parse(UNI_L("<root><parent1><child1><grandchild1/><grandchild2/><grandchild3/></child1><child2><grandchild1/><grandchild2/><grandchild3/></child2></parent1><parent2><child1><grandchild1/><grandchild2/><grandchild3/></child1><child2><grandchild1/><grandchild2/><grandchild3/></child2></parent2></root>"))));
  verify(OpStatus::IsSuccess(fragment.CreateXMLTreeAccessor(tree)));

  XMLTreeAccessor::Node *rootnode, *rootelement, *parent1, *parent2, *child1, *child2, *grandchild1, *grandchild2, *grandchild3;

  verify(rootnode = tree->GetRoot());
  verify(tree->GetNodeType(rootnode) == XMLTreeAccessor::TYPE_ROOT);
  verify(tree->GetParent(rootnode) == NULL);
  verify(tree->GetPreviousSibling(rootnode) == NULL);
  verify(tree->GetNextSibling(rootnode) == NULL);

  verify(rootelement = tree->GetFirstChild(rootnode));
  verify(rootelement == tree->GetLastChild(rootnode));
  verify(tree->GetNodeType(rootelement) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(rootelement) == XMLCompleteName(UNI_L("root")));
  verify(tree->GetParent(rootelement) == rootnode);
  verify(tree->GetPreviousSibling(rootelement) == NULL);
  verify(tree->GetNextSibling(rootelement) == NULL);

  verify(parent1 = tree->GetFirstChild(rootelement));
  verify(parent2 = tree->GetLastChild(rootelement));

  verify(tree->GetNodeType(parent1) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(parent1) == XMLCompleteName(UNI_L("parent1")));
  verify(tree->GetParent(parent1) == rootelement);
  verify(tree->GetPreviousSibling(parent1) == NULL);
  verify(tree->GetNextSibling(parent1) == parent2);

  verify(tree->GetNodeType(parent2) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(parent2) == XMLCompleteName(UNI_L("parent2")));
  verify(tree->GetParent(parent2) == rootelement);
  verify(tree->GetPreviousSibling(parent2) == parent1);
  verify(tree->GetNextSibling(parent2) == NULL);

  verify(child1 = tree->GetFirstChild(parent1));
  verify(child2 = tree->GetLastChild(parent1));

  verify(tree->GetNodeType(child1) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(child1) == XMLCompleteName(UNI_L("child1")));
  verify(tree->GetParent(child1) == parent1);
  verify(tree->GetPreviousSibling(child1) == NULL);
  verify(tree->GetNextSibling(child1) == child2);

  verify(tree->GetNodeType(child2) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(child2) == XMLCompleteName(UNI_L("child2")));
  verify(tree->GetParent(child2) == parent1);
  verify(tree->GetPreviousSibling(child2) == child1);
  verify(tree->GetNextSibling(child2) == NULL);

  verify(grandchild1 = tree->GetFirstChild(child1));
  verify(grandchild2 = tree->GetNextSibling(grandchild1));
  verify(grandchild3 = tree->GetLastChild(child1));

  verify(tree->GetNodeType(grandchild1) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(grandchild1) == XMLCompleteName(UNI_L("grandchild1")));
  verify(tree->GetParent(grandchild1) == child1);
  verify(tree->GetFirstChild(grandchild1) == NULL);
  verify(tree->GetLastChild(grandchild1) == NULL);
  verify(tree->GetPreviousSibling(grandchild1) == NULL);
  verify(tree->GetNextSibling(grandchild1) == grandchild2);

  verify(tree->GetNodeType(grandchild2) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(grandchild2) == XMLCompleteName(UNI_L("grandchild2")));
  verify(tree->GetParent(grandchild2) == child1);
  verify(tree->GetFirstChild(grandchild2) == NULL);
  verify(tree->GetLastChild(grandchild2) == NULL);
  verify(tree->GetPreviousSibling(grandchild2) == grandchild1);
  verify(tree->GetNextSibling(grandchild2) == grandchild3);

  verify(tree->GetNodeType(grandchild3) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(grandchild3) == XMLCompleteName(UNI_L("grandchild3")));
  verify(tree->GetParent(grandchild3) == child1);
  verify(tree->GetFirstChild(grandchild3) == NULL);
  verify(tree->GetLastChild(grandchild3) == NULL);
  verify(tree->GetPreviousSibling(grandchild3) == grandchild2);
  verify(tree->GetNextSibling(grandchild3) == NULL);

  verify(grandchild1 = tree->GetFirstChild(child2));
  verify(grandchild2 = tree->GetNextSibling(grandchild1));
  verify(grandchild3 = tree->GetLastChild(child2));

  verify(tree->GetNodeType(grandchild1) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(grandchild1) == XMLCompleteName(UNI_L("grandchild1")));
  verify(tree->GetParent(grandchild1) == child2);
  verify(tree->GetFirstChild(grandchild1) == NULL);
  verify(tree->GetLastChild(grandchild1) == NULL);
  verify(tree->GetPreviousSibling(grandchild1) == NULL);
  verify(tree->GetNextSibling(grandchild1) == grandchild2);

  verify(tree->GetNodeType(grandchild2) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(grandchild2) == XMLCompleteName(UNI_L("grandchild2")));
  verify(tree->GetParent(grandchild2) == child2);
  verify(tree->GetFirstChild(grandchild2) == NULL);
  verify(tree->GetLastChild(grandchild2) == NULL);
  verify(tree->GetPreviousSibling(grandchild2) == grandchild1);
  verify(tree->GetNextSibling(grandchild2) == grandchild3);

  verify(tree->GetNodeType(grandchild3) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(grandchild3) == XMLCompleteName(UNI_L("grandchild3")));
  verify(tree->GetParent(grandchild3) == child2);
  verify(tree->GetFirstChild(grandchild3) == NULL);
  verify(tree->GetLastChild(grandchild3) == NULL);
  verify(tree->GetPreviousSibling(grandchild3) == grandchild2);
  verify(tree->GetNextSibling(grandchild3) == NULL);

  verify(child1 = tree->GetFirstChild(parent2));
  verify(child2 = tree->GetLastChild(parent2));

  verify(tree->GetNodeType(child1) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(child1) == XMLCompleteName(UNI_L("child1")));
  verify(tree->GetParent(child1) == parent2);
  verify(tree->GetPreviousSibling(child1) == NULL);
  verify(tree->GetNextSibling(child1) == child2);

  verify(tree->GetNodeType(child2) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(child2) == XMLCompleteName(UNI_L("child2")));
  verify(tree->GetParent(child2) == parent2);
  verify(tree->GetPreviousSibling(child2) == child1);
  verify(tree->GetNextSibling(child2) == NULL);

  verify(grandchild1 = tree->GetFirstChild(child1));
  verify(grandchild2 = tree->GetNextSibling(grandchild1));
  verify(grandchild3 = tree->GetLastChild(child1));

  verify(tree->GetNodeType(grandchild1) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(grandchild1) == XMLCompleteName(UNI_L("grandchild1")));
  verify(tree->GetParent(grandchild1) == child1);
  verify(tree->GetFirstChild(grandchild1) == NULL);
  verify(tree->GetLastChild(grandchild1) == NULL);
  verify(tree->GetPreviousSibling(grandchild1) == NULL);
  verify(tree->GetNextSibling(grandchild1) == grandchild2);

  verify(tree->GetNodeType(grandchild2) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(grandchild2) == XMLCompleteName(UNI_L("grandchild2")));
  verify(tree->GetParent(grandchild2) == child1);
  verify(tree->GetFirstChild(grandchild2) == NULL);
  verify(tree->GetLastChild(grandchild2) == NULL);
  verify(tree->GetPreviousSibling(grandchild2) == grandchild1);
  verify(tree->GetNextSibling(grandchild2) == grandchild3);

  verify(tree->GetNodeType(grandchild3) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(grandchild3) == XMLCompleteName(UNI_L("grandchild3")));
  verify(tree->GetParent(grandchild3) == child1);
  verify(tree->GetFirstChild(grandchild3) == NULL);
  verify(tree->GetLastChild(grandchild3) == NULL);
  verify(tree->GetPreviousSibling(grandchild3) == grandchild2);
  verify(tree->GetNextSibling(grandchild3) == NULL);

  verify(grandchild1 = tree->GetFirstChild(child2));
  verify(grandchild2 = tree->GetNextSibling(grandchild1));
  verify(grandchild3 = tree->GetLastChild(child2));

  verify(tree->GetNodeType(grandchild1) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(grandchild1) == XMLCompleteName(UNI_L("grandchild1")));
  verify(tree->GetParent(grandchild1) == child2);
  verify(tree->GetFirstChild(grandchild1) == NULL);
  verify(tree->GetLastChild(grandchild1) == NULL);
  verify(tree->GetPreviousSibling(grandchild1) == NULL);
  verify(tree->GetNextSibling(grandchild1) == grandchild2);

  verify(tree->GetNodeType(grandchild2) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(grandchild2) == XMLCompleteName(UNI_L("grandchild2")));
  verify(tree->GetParent(grandchild2) == child2);
  verify(tree->GetFirstChild(grandchild2) == NULL);
  verify(tree->GetLastChild(grandchild2) == NULL);
  verify(tree->GetPreviousSibling(grandchild2) == grandchild1);
  verify(tree->GetNextSibling(grandchild2) == grandchild3);

  verify(tree->GetNodeType(grandchild3) == XMLTreeAccessor::TYPE_ELEMENT);
  verify(tree->GetName(grandchild3) == XMLCompleteName(UNI_L("grandchild3")));
  verify(tree->GetParent(grandchild3) == child2);
  verify(tree->GetFirstChild(grandchild3) == NULL);
  verify(tree->GetLastChild(grandchild3) == NULL);
  verify(tree->GetPreviousSibling(grandchild3) == grandchild2);
  verify(tree->GetNextSibling(grandchild3) == NULL);
}
finally
{
  XMLFragment::FreeXMLTreeAccessor(tree);
}
