group "XMLUtils.XMLFragment.serialize";
require init;
require XMLUTILS_XMLFRAGMENT_SUPPORT;

include "modules/xmlutils/xmlfragment.h";
include "modules/xmlutils/xmlnames.h";
include "modules/xmlutils/xmlserializer.h";

test("XMLFragment serialize #1")
{
  XMLFragment fragment;

  fragment.SetDefaultWhitespaceHandling(XMLWHITESPACEHANDLING_PRESERVE);

  verify(fragment.OpenElement(UNI_L("root")) == OpStatus::OK);
  verify(fragment.OpenElement(UNI_L("element")) == OpStatus::OK);

  verify(fragment.OpenElement(UNI_L("text")) == OpStatus::OK);
  verify(fragment.AddText(UNI_L("[text 1]")) == OpStatus::OK);
  verify(fragment.AddText(UNI_L("[text 2]")) == OpStatus::OK);
  fragment.CloseElement();

  verify(fragment.OpenElement(UNI_L("text")) == OpStatus::OK);
  verify(fragment.AddText(UNI_L("[text 3]")) == OpStatus::OK);
  verify(fragment.AddText(UNI_L("[text 4]")) == OpStatus::OK);
  fragment.CloseElement();

  fragment.CloseElement();
  verify(fragment.OpenElement(UNI_L("element")) == OpStatus::OK);

  verify(fragment.OpenElement(UNI_L("text")) == OpStatus::OK);
  verify(fragment.AddText(UNI_L("[text 5]")) == OpStatus::OK);
  verify(fragment.AddText(UNI_L("[text 6]")) == OpStatus::OK);
  fragment.CloseElement();

  verify(fragment.OpenElement(UNI_L("text")) == OpStatus::OK);
  verify(fragment.AddText(UNI_L("[text 7]")) == OpStatus::OK);
  verify(fragment.AddText(UNI_L("[text 8]")) == OpStatus::OK);
  fragment.CloseElement();

  fragment.CloseElement();
  fragment.CloseElement();

  TempBuffer buffer;

  verify(fragment.GetXML(buffer, FALSE) ==  OpStatus::OK);

  verify(buffer.GetStorage());
  verify(uni_str_eq(buffer.GetStorage(), UNI_L("<root><element><text>[text 1][text 2]</text><text>[text 3][text 4]</text></element><element><text>[text 5][text 6]</text><text>[text 7][text 8]</text></element></root>")));
}

test("XMLFragment serialize #2")
{
  XMLFragment fragment;

  fragment.SetDefaultWhitespaceHandling(XMLWHITESPACEHANDLING_PRESERVE);

  verify(fragment.OpenElement(UNI_L("root")) == OpStatus::OK);
  verify(fragment.SetAttribute(UNI_L("attr1"), UNI_L("value1")) == OpStatus::OK);
  verify(fragment.SetAttribute(UNI_L("attr2"), UNI_L("value2")) == OpStatus::OK);
  verify(fragment.SetAttribute(UNI_L("attr3"), UNI_L("value3")) == OpStatus::OK);
  fragment.CloseElement();

  TempBuffer buffer;

  verify(fragment.GetXML(buffer, FALSE) ==  OpStatus::OK);

  verify(buffer.GetStorage());
  verify(uni_str_eq(buffer.GetStorage(), UNI_L("<root attr1=\"value1\" attr2=\"value2\" attr3=\"value3\"/>")));
}

test("XMLFragment serialize #3")
{
  XMLFragment fragment;

  fragment.SetDefaultWhitespaceHandling(XMLWHITESPACEHANDLING_PRESERVE);

  verify(fragment.OpenElement(UNI_L("root")) == OpStatus::OK);
  verify(fragment.SetAttributeFormat(UNI_L("attr1"), UNI_L("value%d"), 1) == OpStatus::OK);
  verify(fragment.SetAttributeFormat(UNI_L("attr2"), UNI_L("%s2"), UNI_L("value")) == OpStatus::OK);
  verify(fragment.SetAttributeFormat(UNI_L("attr3"), UNI_L("%s%d"), UNI_L("value"), 3) == OpStatus::OK);
  fragment.CloseElement();

  TempBuffer buffer;

  verify(fragment.GetXML(buffer, FALSE) ==  OpStatus::OK);

  verify(buffer.GetStorage());
  verify(uni_str_eq(buffer.GetStorage(), UNI_L("<root attr1=\"value1\" attr2=\"value2\" attr3=\"value3\"/>")));
}

test("XMLFragment serialize #4")
{
  XMLFragment fragment;

  fragment.SetDefaultWhitespaceHandling(XMLWHITESPACEHANDLING_PRESERVE);

  verify(fragment.OpenElement(UNI_L("root")) == OpStatus::OK);
  fragment.CloseElement();

  TempBuffer buffer;

  verify(fragment.GetXML(buffer, TRUE) ==  OpStatus::OK);

  verify(buffer.GetStorage());
  verify(uni_str_eq(buffer.GetStorage(), UNI_L("<?xml version=\"1.0\"?><root/>")));
}

test("XMLFragment serialize #5")
{
  XMLFragment fragment;

  fragment.SetDefaultWhitespaceHandling(XMLWHITESPACEHANDLING_PRESERVE);

  verify(fragment.OpenElement(UNI_L("root")) == OpStatus::OK);
  fragment.CloseElement();

  TempBuffer buffer;

  verify(fragment.GetXML(buffer, TRUE, "UTF-8") ==  OpStatus::OK);

  verify(buffer.GetStorage());
  verify(uni_str_eq(buffer.GetStorage(), UNI_L("<?xml version=\"1.0\" encoding=\"UTF-8\"?><root/>")));
}

test("XMLFragment serialize #6")
{
  XMLFragment fragment;

  verify(fragment.Parse(UNI_L("<root><ignored ignored='ignored'><ignored ignored='ignored'>ignored</ignored><included included='included'>included</included><ignored ignored='ignored'>ignored</ignored></ignored></root>")) == OpStatus::OK);

  verify(fragment.EnterElement(UNI_L("root")));
  verify(fragment.EnterElement(UNI_L("ignored")));
  verify(fragment.EnterElement(UNI_L("ignored")));
  fragment.LeaveElement();
  verify(fragment.EnterElement(UNI_L("included")));

  XMLFragment::GetXMLOptions options(TRUE);
  options.scope = XMLFragment::GetXMLOptions::SCOPE_CURRENT_ELEMENT_INCLUSIVE;

  TempBuffer buffer;

  verify(fragment.GetXML(buffer, options) ==  OpStatus::OK);

  verify(buffer.GetStorage());
  verify(uni_str_eq(buffer.GetStorage(), UNI_L("<?xml version=\"1.0\"?><included included=\"included\">included</included>")));
}

test("XMLFragment serialize #7")
{
  XMLFragment fragment;

  verify(fragment.Parse(UNI_L("<root><ignored ignored='ignored'><included included='included'>included</included></ignored></root>")) == OpStatus::OK);

  verify(fragment.EnterElement(UNI_L("root")));
  verify(fragment.EnterElement(UNI_L("ignored")));

  XMLFragment::GetXMLOptions options(TRUE);
  options.scope = XMLFragment::GetXMLOptions::SCOPE_CURRENT_ELEMENT_EXCLUSIVE;

  TempBuffer buffer;

  verify(fragment.GetXML(buffer, options) ==  OpStatus::OK);

  verify(buffer.GetStorage());
  verify(uni_str_eq(buffer.GetStorage(), UNI_L("<?xml version=\"1.0\"?><included included=\"included\">included</included>")));
}

test("XMLFragment serialize #8")
  require XMLUTILS_CANONICAL_XML_SUPPORT;
{
  XMLFragment fragment;

  verify(fragment.Parse(UNI_L("<root xmlns='xxx'><ignored xmlns:a='aaa'><ignored xmlns:b='bbb'>ignored</ignored><included xmlns:c='ccc'>included</included><ignored xmlns:d='ddd'>ignored</ignored></ignored></root>")) == OpStatus::OK);

  verify(fragment.EnterElement(XMLExpandedName(UNI_L("xxx"), UNI_L("root"))));
  verify(fragment.EnterElement(XMLExpandedName(UNI_L("xxx"), UNI_L("ignored"))));
  verify(fragment.EnterElement(XMLExpandedName(UNI_L("xxx"), UNI_L("ignored"))));
  fragment.LeaveElement();
  verify(fragment.EnterElement(XMLExpandedName(UNI_L("xxx"), UNI_L("included"))));

  XMLFragment::GetXMLOptions options(FALSE);
  options.canonicalize = XMLFragment::GetXMLOptions::CANONICALIZE_WITHOUT_COMMENTS;
  options.scope = XMLFragment::GetXMLOptions::SCOPE_CURRENT_ELEMENT_INCLUSIVE;

  TempBuffer buffer;

  verify(fragment.GetXML(buffer, options) ==  OpStatus::OK);

  verify(buffer.GetStorage());
  verify(uni_str_eq(buffer.GetStorage(), UNI_L("<included xmlns=\"xxx\" xmlns:a=\"aaa\" xmlns:c=\"ccc\">included</included>")));
}

test("XMLFragment serialize #9")
  require XMLUTILS_XMLFRAGMENT_EXTENDED_CONTENT;
{
  XMLFragment fragment;

  fragment.SetStoreCommentsAndPIs();

  verify(fragment.Parse(UNI_L("<root><!-- comment --><?target data?></root>")) == OpStatus::OK);

  XMLFragment::GetXMLOptions options(TRUE);

  TempBuffer buffer;

  verify(fragment.GetXML(buffer, options) ==  OpStatus::OK);

  verify(buffer.GetStorage());
  verify(uni_str_eq(buffer.GetStorage(), UNI_L("<?xml version=\"1.0\"?><root><!-- comment --><?target data?></root>")));
}

test("XMLFragment serialize #10")
  require XMLUTILS_XMLFRAGMENT_EXTENDED_CONTENT;
{
  XMLFragment fragment;

  fragment.SetStoreCommentsAndPIs();

  verify(fragment.Parse(UNI_L("<root><!-- comment --><?target data?></root>")) == OpStatus::OK);

  XMLFragment::GetXMLOptions options(FALSE);
  options.canonicalize = XMLFragment::GetXMLOptions::CANONICALIZE_WITHOUT_COMMENTS;

  TempBuffer buffer;

  verify(fragment.GetXML(buffer, options) ==  OpStatus::OK);

  verify(buffer.GetStorage());
  verify(uni_str_eq(buffer.GetStorage(), UNI_L("<root><?target data?></root>")));
}

test("XMLFragment serialize #11")
  require XMLUTILS_XMLFRAGMENT_EXTENDED_CONTENT;
{
  XMLFragment fragment;

  fragment.SetStoreCommentsAndPIs();

  verify(fragment.Parse(UNI_L("<root><!-- comment --><?target data?></root>")) == OpStatus::OK);

  XMLFragment::GetXMLOptions options(FALSE);
  options.canonicalize = XMLFragment::GetXMLOptions::CANONICALIZE_WITH_COMMENTS;

  TempBuffer buffer;

  verify(fragment.GetXML(buffer, options) ==  OpStatus::OK);

  verify(buffer.GetStorage());
  verify(uni_str_eq(buffer.GetStorage(), UNI_L("<root><!-- comment --><?target data?></root>")));
}
