group "XMLUtils.XMLSerializer";
require init;
require XMLUTILS_XMLTOSTRINGSERIALIZER_SUPPORT;

include "modules/xmlutils/xmlserializer.h";
include "modules/doc/frm_doc.h";
include "modules/url/url2.h";

xml { "<root/>" }

test("Setup #1")
  language ecmascript;
{
  document.documentElement.appendChild (document.createTextNode ("Text cannot contain an unescaped ']]>' sequence, you know."));
}

test("Serializing text containing ']]>'")
  require success "Setup #1";
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot(), NULL, NULL)));

  verify(uni_str_eq(buffer.GetStorage(), "<root>Text cannot contain an unescaped ']]&gt;' sequence, you know.</root>"));
}
finally
{
  OP_DELETE(serializer);
}

xml { "<root/>" }

test("Setup #2")
  language ecmascript;
{
  document.documentElement.appendChild (document.createCDATASection ("A CDATA section cannot contain an unescaped ']]>' sequence, you know."));
}

test("Serializing text containing ']]>'")
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot(), NULL, NULL)));

  verify(uni_str_eq(buffer.GetStorage(), "<root><![CDATA[A CDATA section cannot contain an unescaped ']]>]<![CDATA[]>' sequence, you know.]]></root>"));
}
finally
{
  OP_DELETE(serializer);
}

xml { "<root/>" }

test("Namespace normalization #1 (setup)")
  language ecmascript;
{
  var child = document.documentElement.appendChild (document.createElementNS ("uri1", "prefix1:child"));
  child.setAttributeNS ("uri2", "prefix2:attr1", "value1");
  child.setAttributeNS ("uri3", "attr2", "value2");
  child.setAttributeNS ("uri4", "attr3", "value3");
  var grandchild = child.appendChild (document.createElementNS ("uri5", "prefix1:grandchild"));
  grandchild.setAttributeNS ("uri1", "attr4", "value4");
  grandchild.setAttributeNS ("uri2", "attr5", "value5");
  grandchild.setAttributeNS ("uri4", "attr6", "value6");
  grandchild.setAttributeNS ("uri3", "attr7", "value7");
}

test("Namespace normalization #1")
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot(), NULL, NULL)));

  verify(uni_str_eq(buffer.GetStorage(),

    "<root>"
      "<prefix1:child prefix2:attr1=\"value1\""
                    " NS1:attr2=\"value2\""
                    " NS2:attr3=\"value3\""
                    " xmlns:prefix1=\"uri1\""
                    " xmlns:prefix2=\"uri2\""
                    " xmlns:NS1=\"uri3\""
                    " xmlns:NS2=\"uri4\">"
        "<prefix1:grandchild NS3:attr4=\"value4\""
                           " prefix2:attr5=\"value5\""
                           " NS2:attr6=\"value6\""
                           " NS1:attr7=\"value7\""
                           " xmlns:prefix1=\"uri5\""
                           " xmlns:NS3=\"uri1\"/>"
      "</prefix1:child>"
    "</root>"));
}
finally
{
  OP_DELETE(serializer);
}

xml { "<root/>" }

test("Namespace normalization #2 (setup)")
  language ecmascript;
{
  var child = document.documentElement.appendChild (document.createElementNS ("uri1", "child"));
  var grandchild = child.appendChild (document.createElementNS (null, "grandchild"));
}

test("Namespace normalization #2")
{
  XMLSerializer *serializer;
  TempBuffer buffer;
  URL url;

  verify(OpStatus::IsSuccess(XMLSerializer::MakeToStringSerializer(serializer, &buffer)));
  verify(OpStatus::IsSuccess(serializer->Serialize(NULL, url, state.doc->GetDocRoot(), NULL, NULL)));

  verify(uni_str_eq(buffer.GetStorage(),

    "<root>"
      "<child xmlns=\"uri1\">"
        "<grandchild xmlns=\"\"/>"
      "</child>"
    "</root>"));
}
finally
{
  OP_DELETE(serializer);
}
