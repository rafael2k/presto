TWEAK_LIBGOGI_SMALLER_AREA_MORE_ONPAINT		emil

	This tweak does only do good on medium and big screens. If invalidated areas is to far away from each other, there will be several individual
	paintcalls for theese areas, instead of one big union. That can be much faster in some cases, but might also be slower if it is a really big
	complex page that is slow to traverse.

	Define    : MDE_SMALLER_AREA_MORE_ONPAINT
	Depends on:
	Category  : setting
	Conflicts with:
	Enabled for : desktop, smartphone, tv
	Disabled for: minimal, mini

TWEAK_LIBGOGI_USE_MMAP	emil

	Use mmap to map fonts. If this tweak is enabled the MDE_MMapping class in
	mde_mmap.h must be implemented by the platform. If it is possible to
	use mmap on the platform this tweak should be enabled since it is usually
	much faster than the alternatives.

	Define    : MDE_USE_MMAP
	Depends on:
	Category  : setting
	Conflicts with:
	Enabled for : none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_LIBGOGI_RGBA32_FORMAT		emil

	Support RGBA32 color format.

	Define		: MDE_SUPPORT_RGBA32
	Category	: setting

TWEAK_LIBGOGI_RGBA24_FORMAT		emil

	Support RGBA24 color format.

	Define		: MDE_SUPPORT_RGBA24
	Category	: setting

TWEAK_LIBGOGI_BGR24_FORMAT		emil

	Support BGR24 color format.

	Define		: MDE_SUPPORT_BGR24
	Category	: setting

TWEAK_LIBGOGI_ARGB32_FORMAT		emil

	Support ARGB32 color format.

	Define		: MDE_SUPPORT_ARGB32
	Category	: setting

TWEAK_LIBGOGI_RGB16_FORMAT		emil

	Support RGB16 color format.

	Define		: MDE_SUPPORT_RGB16
	Category	: setting

TWEAK_LIBGOGI_MBGR16_FORMAT		timj

	Support MBGR16 color format.
	15 bit color data and 1 bit mask.

	Define		: MDE_SUPPORT_MBGR16
	Category	: setting

TWEAK_LIBGOGI_RGBA16_FORMAT		emil

	Support RGBA16 color format.

	Define		: MDE_SUPPORT_RGBA16
	Category	: setting

TWEAK_LIBGOGI_SRGB16_FORMAT		emil

	Support SRGB16 color format.

	Define		: MDE_SUPPORT_SRGB16
	Category	: setting

TWEAK_LIBGOGI_INTERNAL_MEMCPY_SCROLL	emil

	Normally when scrolling, op_memmove or op_memcpy will be used to scroll the pixeldata.
	This tweak enables internal memcpy routines for 16bit and 32bit screenmodes using "duffs device" loops.
	You should use this if it is faster than your implementation of op_memcpy.

	Define     : MDE_INTERNAL_MEMCPY_SCROLL
	Depends on :
	Category   : setting

TWEAK_LIBGOGI_FULLUPDATE_SCROLL			emil

	If libgogi is operating directly on the framebuffer and your system are really slow at *reading* pixels from it, then this might be something for you!
	Normally when scrolling, the pixeldata is moved (see TWEAK_LIBGOGI_INTERNAL_MEMCPY_SCROLL) and only the newly exposed area is repainted.
	If this is enabled, a full repaint on the area to scroll is done instead (so only writing will be done, instead of moving).
	You should probably do some testing which method is the fastest.
	(This tweak replaces the old define GOGI_SLOW_READ_PIXELS)

	Define		: MDE_FULLUPDATE_SCROLL
	Depends on	:
	Category	: setting
	Enabled for: none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_LIBGOGI_BILINEAR_BLITSTRETCH	timj
	Normally blitstretching uses nearest scaling of the images. With this
	tweak you can make libgogi use bilinear filtering instead. This will
	improve visual quality at the expense of performance.

	Define		: MDE_BILINEAR_BLITSTRETCH
	Depends on	:
	Category	: setting

TWEAK_LIBGOGI_DEFAULT_STRETCH_METHOD	simonb
	Normally when enabling the TWEAK_LIBGOGI_BILINEAR_BLITSTRETCH, all blits
	become bilinear by default. This tweak allows changing the default
	stretching method to nearest-neighbor while keeping the bilinear
	blitstretch code enabled.
	The value of this tweak should be one of the values from the
	MDE_STRETCH_METHOD enum. Current values include MDE_STRETCH_NEAREST
	and MDE_STRETCH_BILINEAR.

	Define		: MDE_DEFAULT_STRETCH_METHOD
	Value		: MDE_STRETCH_BILINEAR
	Depends on	: MDE_BILINEAR_BLITSTRETCH
	Category	: setting
	Enabled for: none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_LIBGOGI_OPENGL_BACKEND		timj

	Use OpenGL as a backend for libgogi. All rendering operations will
	be performed by OpenGL instead of software.

	Define		: MDE_OPENGL_PAINTING
	Depends on	:
	Category	: setting
	Enabled for	: none
	Disabled for	: desktop, smartphone, tv, minimal, mini

TWEAK_LIBGOGI_USE_ALPHA_LOOKUPTABLE		emil

	Will make blit of alphabitmaps (and fonts) on buffers with destinationalpha faster. That is, when the alpha values of the destination buffer is important.
	It will sacrifice 64kb memory by using a lookuptable for alphavalues (allocated during startup).
	This should be enabled only if you care about alpha values of the framebuffer (Have called GOGI_Screen::SetClearBackground(FALSE) or gogi_set_clear_background(id, FALSE))
	It currently only works when destinationbuffer format is BGRA32, so if you don't use that, it's also no meaning to enable it.

	Define       : MDE_USE_ALPHA_LOOKUPTABLE
	Category     : setting
	Enabled for  : desktop
	Disabled for : smartphone, tv, minimal, mini

TWEAK_LIBGOGI_BRIGHT_WHITE_BLEND			emil

	When bitmaps in RGBA16 format are blended, we need extra computation for the best result.
	If this tweak is disabled, the brightest color possible will look gray (0xf0 on all channels).
	If this tweak is enabled, the brightest color will be full white (0xff on all channels) but this remapping cost some CPU.

	Define       : MDE_BRIGHT_WHITE_BLEND
	Depends on   : TWEAK_LIBGOGI_RGBA16_FORMAT
	Category     : setting
	Enabled for  : smartphone, tv, mini
	Disabled for : desktop, minimal

TWEAK_LIBGOGI_NO_OPBITMAP					markus

	Use this tweak to turn off the implementation of OpBitmap
	which libgogi has. The platform must implement OpBitmap itself.

	Category  : setting
	Define    : LIBGOGI_PLATFORM_IMPLEMENTS_OPBITMAP
	Depends on: nothing
	Enabled for : none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_LIBGOGI_CURSOR					emil

	Enables the support for a virtual cursor.

	If this tweak is enabled a platform which uses gogi, can
	access the gogi API functions gogi_set_cursor_image(),
	gogi_show_cursor() and gogi_hide_cursor() to paint a cursor
	directly on the gogi-buffer.

	Note: this tweak is incompatible with ns4plugins running in
	wmode == window, because the software rendered cursor is painted
	behind the native X11 window of the plugin.

	Enabling the tweak costs ~10KB on lingogi.

	Category     : setting
	Define       : MDE_CURSOR_SUPPORT
	Depends on   : nothing
	Enabled for  : tv
	Disabled for : desktop, smartphone, minimal, mini

TWEAK_LIBGOGI_SPLIT_OPBITMAPS				timj

	Enable support for storing Opbitmaps sliced to reduce the size
	of blocks which needs to be allocated for Opbitmaps.

	Category: memory
	Define: MDE_SUPPORT_SPLIT_BITMAPS
	Depends on: nothing
	Enabled for :
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_LIBGOGI_SPLIT_OPBITMAP_SIZE				timj

	Change the size of the slices in when using split op bitmap tweak.

	Category: memory
	Define: MDE_SPLIT_BITMAP_SIZE
	Value: 8000
	Depends on: TWEAK_LIBGOGI_SPLIT_OPBITMAPS

TWEAK_LIBGOGI_LIMIT_OPBITMAP_SIZE				timj

	Enable storing big images in a downscaled version to reduce memory usage.
	When the images are drawn they are scaled back to the original dimensions.
	This will reduce the quality of large images, but reduce memory usage
	a lot.

	Category: memory
	Define: MDE_LIMIT_IMAGE_SIZE
	Depends on: nothing
	Enabled for :
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_LIBGOGI_MAX_OPBITMAP_SIZE				timj

	Set the limit for when images are down scaled when using the limit image
	size tweak.

	Category: memory
	Define: MDE_MAX_IMAGE_SIZE
	Value: 640*480
	Depends on: TWEAK_LIBGOGI_LIMIT_OPBITMAP_SIZE

TWEAK_LIBGOGI_NO_OPPAINTER					markus

	Use this tweak to turn off the implementation of OpPainter
	which LIBGOGI has. The platform must implement OpPainter itself.

	Category  : setting
	Define    : MDE_PLATFORM_IMPLEMENTS_OPPAINTER
	Depends on: nothing
	Enabled for : none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_LIBGOGI_DOUBLEBUF					danielb

	Enable doublebuffer support in MDE_OpView and MDE_OpPainter.

	Category  : setting
	Define    : MDE_DOUBLEBUF_SUPPORT
	Depends on: nothing
	Enabled for : none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_LIBGOGI_DS_MODE                                   timj

	Enable support for the DS mode (aka overview mode). Not all
	features are ported from the Nintendo DS port, but it should work.

	Category: setting
	Define: MDE_DS_MODE
	Depends on: nothing
	Enabled for : none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_LIBGOGI_FORCEINLINE					emil

	Makes it possible to force inlining of some functions that are called in really tight loops.
	Some compilers does not inline theese functions even when inline is specified, and for functions
	that are called millions of times that is not good.
	There is no standard way to force inline functions, so this is done by defining this tweak
	to something your compiler can handle.

	Hint: Some compilers support "__forceinline", and GCC support "inline __attribute__((always_inline))"

	Define		: LIBGOGI_FORCEINLINE
	Value		: inline
	Value for desktop: inline
	Value for smartphone: inline
	Value for tv: inline
	Value for minimal: inline
	Value for mini  : inline
	Depends on	: nothing
	category	: performance

TWEAK_LIBGOGI_DEBUG_INFO					emil

	Enable support for realtime graphical debug info (such as invalidation and update regions).
	The different types of info are set with MDE_Screen::SetDebugInfo runtime.
	Default is that no debug info is shown.

	category	: performance
	Define		: MDE_DEBUG_INFO
	Depends on	: nothing
	Enabled for : none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_LIBGOGI_16BPP_OPBITMAP       timj

    Use 16 bits per pixel in GOGI_OpBitmap.  This halves the memory involved
    (more or less) at a modest loss of precision - which is no loss on devices
    where the display only supports 16 bpp in any case.
    May improve or worsen speed depending on memory vs CPU speed.

    Define: USE_16BPP_OPBITMAP
    Category: performance,memory
    Depends on: nothing
    Conflicts with: TWEAK_LIBGOGI_NO_OPBITMAP
    Enabled for: none
    Disabled for: desktop, tv, smartphone, minimal, mini

TWEAK_LIBGOGI_16BPP_ALPHA_OPBITMAP       marcusc

    Use 16 bits per pixel in GOGI_OpBitmap with bitmaps with alpha or
    transperency. This halves the memory involved (more or less) at a
    modest loss of precision.
    May improve or worsen speed depending on memory vs CPU speed.

    Define: USE_16BPP_ALPHA_OPBITMAP
    Category: performance,memory
    Depends on: TWEAK_LIBGOGI_16BPP_OPBITMAP
    Conflicts with: TWEAK_LIBGOGI_NO_OPBITMAP
    Enabled for: none
    Disabled for: desktop, tv, smartphone, minimal

TWEAK_LIBGOGI_OPWINDOW_HAS_CHROME                                   timj

	Enable support for drawing chrome on restored OpWindows.
	When this is enabled you need a implementation of MDEChromeHandler.

	Category: setting
	Define: MDE_OPWINDOW_CHROME_SUPPORT
	Depends on: nothing
	Enabled for : none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_LIBGOGI_SUPPORT_CREATE_TILE                               timj

	Enable implementation of CreateTile() at the cost of using
	more memory.

	When this tweak is enabled core will create larger bitmaps
	containing multiple copies of the source bitmap in order to
	speed up blitting tiled images. For more information see
	modules/pi/OpBitmap.h

	Define: LIBGOGI_SUPPORT_CREATE_TILE
	Category: performance,memory
	Depends on: nothing
	Enabled for: desktop, tv, smartphone, minimal
	Disabled for: mini

TWEAK_LIBGOGI_MULTI_TOUCH_LIMIT			terjes

    This tweak defines an upper bound on simultaneous active touches.

    Category   : setting
    Define     : LIBGOGI_MULTI_TOUCH_LIMIT
    Depends on : FEATURE_TOUCH_EVENTS
    Value      : 9
    Value for desktop,smartphone,tv,minimal: 10

TWEAK_LIBGOGI_IME_COMMIT_ON_ABORT_COMPOSING		ed

	This tweak defines if the IME should commit its result
	if the text input loses focus for any reason.

	Category	: setting
	Define		: LIBGOGI_IME_COMMIT_ON_ABORT_COMPOSING
	Depends on	: FEATURE_IME
	Enabled for	: desktop, tv, smartphone, minimal, mini
	Disabled for: none

TWEAK_LIBGOGI_IME_SEND_KEY_EVENTS				andersh

	When an IME updates or commits the changes to a text input, the last char of
	the new text is sent as a keypress. This causes the corresponding JS events
	(onkeydown/onkeypress/onkeyup) to be sent to the input field, which makes a
	lot of pages depending on those events work better (e.g. completion of email
	addresses in gmail).

	Due to the way this is implemented, any key events coming in the "normal"
	way through the input system will not affect the text input field any more.

	Category	: setting
	Define		: IME_SEND_KEY_EVENTS
	Depends on	: FEATURE_IME
	Enabled for	: smartphone
	Disabled for	: desktop, tv, minimal, mini

TWEAK_LIBGOGI_IME_NO_HIGHLIGHT_ON_COMMIT			andersh

	If IME is being used, this tweak prevents the HTML element from being
	highlighted after text has been committed.

	Can be useful for platforms like Bream that wish to handle highlighting in
	the platform layer.

	Category	: setting
	Define		: IME_NO_HIGHLIGHT_ON_COMMIT
	Depends on	: FEATURE_IME
	Enabled for	: smartphone
	Disabled for	: desktop, tv, minimal, mini

