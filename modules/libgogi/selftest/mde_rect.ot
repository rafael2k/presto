/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "libgogi.mde_rect";

language c++;

include "modules/libgogi/mde.h";

test("MDE_MakeRect")
{
	MDE_RECT rect = MDE_MakeRect(3, 5, 9, 17);
	verify(rect.x == 3);
	verify(rect.y == 5);
	verify(rect.w == 9);
	verify(rect.h == 17);

	rect = MDE_MakeRect(7, 3, 1, -11);
	verify(rect.x == 7);
	verify(rect.y == 3);
	verify(rect.w == 1);
	verify(rect.h == -11);
};

test("MDE_RectIsEmpty")
{
	MDE_RECT rect = MDE_MakeRect(8, 13, 0, 7);
	verify(MDE_RectIsEmpty(rect));

	rect = MDE_MakeRect(8, 13, 11, 0);
	verify(MDE_RectIsEmpty(rect));

	rect = MDE_MakeRect(8, 13, 1, 7);
	verify(!MDE_RectIsEmpty(rect));

	rect = MDE_MakeRect(8, -13, 11, 1 );
	verify(!MDE_RectIsEmpty(rect));

	rect = MDE_MakeRect(4, 3, -1, 7);
	verify(MDE_RectIsEmpty(rect));

	rect = MDE_MakeRect(17, 12, 11, -1 );
	verify(MDE_RectIsEmpty(rect));

	rect = MDE_MakeRect(5, 10, -1, -7);
	verify(MDE_RectIsEmpty(rect));

	rect = MDE_MakeRect(7, 7, -11, -9 );
	verify(MDE_RectIsEmpty(rect));

	rect = MDE_MakeRect(3, 15, 0, 0 );
	verify(MDE_RectIsEmpty(rect));
};

test("MDE_RectIsInsideOut")
{
	MDE_RECT rect = MDE_MakeRect(8, 13, 0, 7);
	verify(!MDE_RectIsInsideOut(rect));

	rect = MDE_MakeRect(8, 13, 11, 0);
	verify(!MDE_RectIsInsideOut(rect));

	rect = MDE_MakeRect(8, 13, 1, 7);
	verify(!MDE_RectIsInsideOut(rect));

	rect = MDE_MakeRect(8, -13, 11, 1 );
	verify(!MDE_RectIsInsideOut(rect));

	rect = MDE_MakeRect(4, 3, -1, 7);
	verify(MDE_RectIsInsideOut(rect));

	rect = MDE_MakeRect(17, 12, 11, -1 );
	verify(MDE_RectIsInsideOut(rect));

	rect = MDE_MakeRect(5, 10, -1, -7);
	verify(MDE_RectIsInsideOut(rect));

	rect = MDE_MakeRect(7, 7, -11, -9 );
	verify(MDE_RectIsInsideOut(rect));

	rect = MDE_MakeRect(3, 15, 0, 0 );
	verify(!MDE_RectIsInsideOut(rect));
};

test("MDE_RectIsIdentical")
{
	verify(MDE_RectIsIdentical(MDE_MakeRect(6, 2, 15, 11), MDE_MakeRect(6, 2, 15, 11)));
	verify(!MDE_RectIsIdentical(MDE_MakeRect(6, 2, 15, 11), MDE_MakeRect(6, 2, 11, 15)));
	verify(!MDE_RectIsIdentical(MDE_MakeRect(6, 2, 15, 11), MDE_MakeRect(6, 1, 15, 11)));
	verify(!MDE_RectIsIdentical(MDE_MakeRect(6, 2, 15, 11), MDE_MakeRect(7, 2, 15, 11)));
	verify(!MDE_RectIsIdentical(MDE_MakeRect(6, 2, 15, 11), MDE_MakeRect(6, 2, 14, 11)));
	verify(!MDE_RectIsIdentical(MDE_MakeRect(6, 2, 15, 11), MDE_MakeRect(6, 2, 15, 10)));
};

test("MDE_RectUnion: inside")
{
	MDE_RECT rect = MDE_MakeRect(200, 300, 250, 350);
	MDE_RECT result = MDE_RectUnion(rect, MDE_MakeRect(220, 320, 120, 140));
	verify(MDE_RectIsIdentical(result, MDE_MakeRect(200, 300, 250, 350)));
};


test("MDE_RectUnion: up-left")
{
	MDE_RECT rect = MDE_MakeRect(200, 300, 250, 350);
	MDE_RECT result = MDE_RectUnion(rect, MDE_MakeRect(180, 240, 120, 140));
	verify(MDE_RectIsIdentical(result, MDE_MakeRect(180, 240, 270, 410)));
};

test("MDE_RectUnion: bottom-right")
{
	MDE_RECT rect = MDE_MakeRect(200, 300, 250, 350);
	MDE_RECT result = MDE_RectUnion(rect, MDE_MakeRect(270, 330, 290, 370));
	verify(MDE_RectIsIdentical(result, MDE_MakeRect(200, 300, 360, 400)));
};

test("MDE_RectUnion: surround")
{
	MDE_RECT rect = MDE_MakeRect(200, 300, 250, 350);
	MDE_RECT result = MDE_RectUnion(rect, MDE_MakeRect(160, 220, 530, 770));
	verify(MDE_RectIsIdentical(result, MDE_MakeRect(160, 220, 530, 770)));
};
