/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "libgogi_visibility";

language c++;

include "modules/libgogi/mde.h";

global
{
	class TestScreen : public MDE_Screen
	{
	public:
		MDE_BUFFER buf;

		TestScreen()
		{
			Init(1000, 1000);
			MDE_InitializeBuffer(1000, 1000, 1000 * MDE_GetBytesPerPixel(MDE_FORMAT_BGRA32), MDE_FORMAT_BGRA32, NULL, NULL, &buf);
			Validate();
		}
		void Validate() { MDE_Screen::Validate(true); }
		virtual void OutOfMemory() {}
		virtual MDE_FORMAT GetFormat() { return MDE_FORMAT_BGRA32; }
		virtual MDE_BUFFER *LockBuffer() { return &buf; }
		virtual void UnlockBuffer(MDE_Region *update_region) {}
#ifdef VEGA_OPPAINTER_SUPPORT
		virtual class VEGAOpPainter* GetVegaPainter() { return NULL; }
#endif // VEGA_OPPAINTER_SUPPORT
	};
	class TestView : public MDE_View
	{
	public:
		TestView(bool want_vis_check) : vis(false), want_vis_check(want_vis_check) {}
		virtual void OnVisibilityChanged(bool visible) { vis = visible; }
		virtual bool GetOnVisibilityChangeWanted() { return want_vis_check; }
	public:
		bool vis;
		bool want_vis_check;
	};
	TestScreen *screen;
	TestView *p_view1;
	TestView *c_view1;
	TestView *p_view2;
	TestView *c_view2;
	TestView *big_cover_view;
} 
 
test("Init") 
{ 
	verify(screen); 
	verify(p_view1); 
	verify(c_view1); 
	verify(p_view2); 
	verify(c_view2); 
	verify(big_cover_view);
} 

test("Visibility 1") 
	require success "Init"; 
{ 
	verify(!p_view1->vis);
	verify(!c_view1->vis);
	verify(!p_view2->vis);
	verify(!c_view2->vis);
	screen->Validate(); 
	verify(p_view1->vis);
	verify(c_view1->vis);
	verify(!p_view2->vis);
	verify(!c_view2->vis);
	
	p_view1->SetVisibility(false);
	screen->Validate();
	verify(!p_view1->vis);
	verify(!c_view1->vis);

	p_view1->SetVisibility(true);
	screen->Validate();
	verify(p_view1->vis);
	verify(c_view1->vis);
} 

test("Visibility 2") 
	require success "Init"; 
{ 
	big_cover_view->SetVisibility(true);
	screen->Validate(); 
	verify(!p_view1->vis);
	verify(!c_view1->vis);
	verify(!p_view2->vis);
	verify(!c_view2->vis);
	verify(!big_cover_view->vis);
	
	big_cover_view->SetVisibility(false);
	screen->Validate(); 
	verify(p_view1->vis);
	verify(c_view1->vis);
	verify(!p_view2->vis);
	verify(!c_view2->vis);
	verify(!big_cover_view->vis);
} 

test("Visibility 3") 
	require success "Init"; 
{ 
	p_view1->want_vis_check = true;
	c_view1->want_vis_check = true;
	p_view2->want_vis_check = true;
	c_view2->want_vis_check = true;
	big_cover_view->SetVisibility(true); // Trig region change (because we changed the want_vis_check flags)
	big_cover_view->SetVisibility(false);//
	screen->Validate(); 
	verify(p_view1->vis);
	verify(c_view1->vis);
	verify(p_view2->vis);
	verify(c_view2->vis);

	p_view1->SetVisibility(false);
	p_view2->SetVisibility(false);
	screen->Validate(); 
	verify(!p_view1->vis);
	verify(!c_view1->vis);
	verify(!p_view2->vis);
	verify(!c_view2->vis);

	p_view1->want_vis_check = false;
	c_view1->want_vis_check = true;
	p_view2->want_vis_check = false;
	c_view2->want_vis_check = true;
	p_view1->SetVisibility(true);
	p_view2->SetVisibility(true);
	screen->Validate(); 
	verify(!p_view1->vis);
	verify(c_view1->vis);
	verify(!p_view2->vis);
	verify(c_view2->vis);

	p_view1->SetVisibility(false);
	c_view2->SetVisibility(false);
	screen->Validate(); 
	verify(!p_view1->vis);
	verify(!c_view1->vis);
	verify(!p_view2->vis);
	verify(!c_view2->vis);
} 
 
setup 
{ 
	screen = OP_NEW(TestScreen, ()); 
 
	if (screen) 
	{ 
		p_view1 = OP_NEW(TestView, (true)); 
		p_view1->SetRect(MDE_MakeRect(10, 10, 100, 100)); 
		screen->AddChild(p_view1); 
 
		c_view1 = OP_NEW(TestView, (false)); 
		c_view1->SetRect(MDE_MakeRect(0, 0, 100, 100)); 
		p_view1->AddChild(c_view1); 

		p_view2 = OP_NEW(TestView, (false)); 
		p_view2->SetRect(MDE_MakeRect(200, 200, 100, 100)); 
		screen->AddChild(p_view2); 
 
		c_view2 = OP_NEW(TestView, (false)); 
		c_view2->SetRect(MDE_MakeRect(0, 0, 100, 100)); 
		p_view2->AddChild(c_view2); 
		
		big_cover_view = OP_NEW(TestView, (false)); 
		big_cover_view->SetRect(MDE_MakeRect(5, 5, 400, 400));
		big_cover_view->SetVisibility(false);
		screen->AddChild(big_cover_view); 
		big_cover_view->SetZ(MDE_Z_TOP);
	} 
} 
 
exit 
{ 
	OP_DELETE(screen); // also deletes the childviews 
}
