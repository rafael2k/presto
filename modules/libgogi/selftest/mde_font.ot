group "libgogi.mde_font";
require GOGI;
require undefined MDEFONT_MODULE;

include "modules/libgogi/mde_font.h";

global
{
	MDE_FONTINFO* fontinfo = NULL;
	int fontcount = 0;
}

table FontFiles (const char*) { {"Vera.ttf"} };
foreach (filename) from FontFiles
{
	test("MDF_AddFontFile " filename) leakcheck;
	require noinit;
	{
		OpString line;
		line.Reserve(1000);
		OpString tmp_storage;
		line.Set(g_folder_manager->GetFolderPathIgnoreErrors(OPFILE_SELFTEST_DATA_FOLDER, tmp_storage));
		line.Append("modules\\mdefont\\");
		line.Append(filename);
		verify(OpStatus::IsSuccess(MDF_AddFontFile(uni_down_strdup(line.CStr()))));
	}
}



test("MDE_BeginFontEnumeration")
{
	verify(MDE_BeginFontEnumeration() == MDE_OK);
}

test("MDE_CountFonts") require success("MDE_BeginFontEnumeration");
{
	fontcount = MDE_CountFonts();
	verify(fontcount != 0);
	fontinfo = OP_NEWA(MDE_FONTINFO, fontcount);
	verify(fontinfo != NULL);
}

test("MDE_GetFontInfo") require success("MDE_CountFonts");
{
	MDE_ERROR status;
	MDE_FONTINFO fi;

	output("\n");
	for (int i = 0; i < fontcount; ++i)
	{
		status = MDE_GetFontInfo(i, &fi);
		verify(status == MDE_OK);
		fontinfo[i] = fi;
		output("    %2d %s\n", i, fi.font_name);
	}
}

test("MDE_EndFontEnumeration") require success("MDE_BeginFontEnumeration");
{
	MDE_EndFontEnumeration();
}

test("MDE_GetTable") leakcheck; require _GLYPHTESTING_SUPPORT_;
{
#define TAG_CMAP (((unsigned long)'c'<<24)|((unsigned long)'m'<<16)|((unsigned long)'a'<<8)|'p')
	for (int i = 0; i < fontcount; ++i)
	{
		MDE_FONT* font = MDE_GetFont(i, 17, false, false);
		if (!font) font = MDE_GetFont(i, 17, false, true);
		if (!font) font = MDE_GetFont(i, 17, true, false);
		if (!font) font = MDE_GetFont(i, 17, true, true);
		verify(font);
		BYTE* tbl;
		UINT32 size;
		OP_STATUS status = MDE_GetTable(font, TAG_CMAP, tbl, size);
		MDE_ReleaseFont(font);
		verify(OpStatus::IsSuccess(status) && tbl != NULL);
		MDE_FreeTable(tbl);
	}
}

exit
{
	OP_DELETEA(fontinfo);
}
