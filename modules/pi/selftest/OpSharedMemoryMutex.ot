/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2012 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "pi.OpSharedMemoryMutex";

require PI_SHARED_MEMORY;

include "modules/pi/system/OpSharedMemory.h";
include "modules/pi/system/OpSharedMemoryMutex.h";
include "modules/util/OpSharedPtr.h";

global
{
	// Invokes the destructor of OpSharedMemoryMutex stored within the shmem block.
	class Cleaner : public OpSharedMemory::CleanupFunctor
	{
		virtual void Cleanup(void* mem) const
		{
			reinterpret_cast<OpSharedMemoryMutex*>(mem)->~OpSharedMemoryMutex();
		}
	};

	void SetUpCleaner(OpSharedMemory* mem)
	{
		mem->SetCleanupFunctor(
					OpAutoPtr<OpSharedMemory::CleanupFunctor>(OP_NEW(Cleaner, ())));
	}
}

subtest InitSharedMemory(OpSharedPtr<OpSharedMemory>& mem)
{
	OpSharedMemory* memory = NULL;
	verify_success(OpSharedMemory::Create(sizeof(OpSharedMemoryMutex), &memory));
	verify(memory);
	SetUpCleaner(memory);
	mem = OpSharedPtr<OpSharedMemory>(memory);
	verify(mem);
	verify(mem->Size() >= sizeof(OpSharedMemoryMutex));
}

test("Construct")
{
	// Initialize shared memory block for the mutex.
	OpSharedPtr<OpSharedMemory> mem;
	InitSharedMemory(mem);

	// Place a mutex in shared memory.
	OpSharedMemoryMutex* mutex = new (mem->Ptr()) OpSharedMemoryMutex();

	//Constructing.
	verify_success(mutex->Construct());
}

test("Acquire and Release, one thread")
{
	// Initialize shared memory block for the mutex.
	OpSharedPtr<OpSharedMemory> mem;
	InitSharedMemory(mem);

	// Place a mutex in shared memory.
	OpSharedMemoryMutex* mutex = new (mem->Ptr()) OpSharedMemoryMutex();

	verify_success(mutex->Construct());
	verify_success(mutex->Acquire());
	verify_success(mutex->Release());
}

test("TryAcquire and Release, one thread")
{
	// Initialize shared memory block for the mutex.
	OpSharedPtr<OpSharedMemory> mem;
	InitSharedMemory(mem);

	// Place a mutex in shared memory.
	OpSharedMemoryMutex* mutex = new (mem->Ptr()) OpSharedMemoryMutex();

	verify_success(mutex->Construct());
	verify(mutex->TryAcquire());
	verify_success(mutex->Release());
}

test("Acquire, TryAcquire and Release, one thread")
{
	// Initialize shared memory block for the mutex.
	OpSharedPtr<OpSharedMemory> mem;
	InitSharedMemory(mem);

	// Place a mutex in shared memory.
	OpSharedMemoryMutex* mutex = new (mem->Ptr()) OpSharedMemoryMutex();

	verify_success(mutex->Construct());
	verify_success(mutex->Acquire());
	verify(!mutex->TryAcquire()); // We're already holding this mutex.
	verify_success(mutex->Release());
}

test("Double Acquire from one thread")
{
	// Initialize shared memory block for the mutex.
	OpSharedPtr<OpSharedMemory> mem;
	InitSharedMemory(mem);

	// Place a mutex in shared memory.
	OpSharedMemoryMutex* mutex = new (mem->Ptr()) OpSharedMemoryMutex();

	verify_success(mutex->Construct());
	verify_success(mutex->Acquire());
	verify(OpStatus::IsError(mutex->Acquire())); // We're already holding this mutex.
	verify_success(mutex->Release());
}

test("Acquire and Release several times")
{
	// Initialize shared memory block for the mutex.
	OpSharedPtr<OpSharedMemory> mem;
	InitSharedMemory(mem);

	// Place a mutex in shared memory.
	OpSharedMemoryMutex* mutex = new (mem->Ptr()) OpSharedMemoryMutex();

	verify_success(mutex->Construct());
	verify_success(mutex->Acquire());
	verify_success(mutex->Release());

	verify_success(mutex->Acquire());
	verify_success(mutex->Release());

	verify_success(mutex->Acquire());
	verify(OpStatus::IsError(mutex->Acquire())); // We're already holding this mutex.
	verify(!mutex->TryAcquire()); // We're already holding this mutex.
	verify_success(mutex->Release());

	verify(mutex->TryAcquire());
	verify_success(mutex->Release());

	verify_success(mutex->Acquire());
	verify_success(mutex->Release());
}
