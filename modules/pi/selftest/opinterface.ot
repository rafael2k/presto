/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*-
**
** Copyright (C) 1995-2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "pi.opinterface";

test("-OpPoint")
{
	verify(OpPoint(1,2).Equals(-OpPoint(-1,-2)));
}

test("OpPoint += OpPoint")
{
	verify(OpPoint(1,2).Equals(OpPoint(0,1)+=OpPoint(1,1)));
	verify(OpPoint(3,4).Equals(OpPoint(6,3)+=OpPoint(-3,1)));
}

test("OpPoint + OpPoint")
{
	verify(OpPoint(1,2).Equals(OpPoint(0,1)+OpPoint(1,1)));
	verify(OpPoint(3,4).Equals(OpPoint(6,3)+OpPoint(-3,1)));
}

test("OpPoint -= OpPoint")
{
	verify(OpPoint(1,2).Equals(OpPoint(3,5)-=OpPoint(2,3)));
	verify(OpPoint(3,4).Equals(OpPoint(11,-1)-=OpPoint(8,-5)));
}

test("OpPoint - OpPoint")
{
	verify(OpPoint(1,2).Equals(OpPoint(3,5)-OpPoint(2,3)));
	verify(OpPoint(3,4).Equals(OpPoint(11,-1)-OpPoint(8,-5)));
}

test("OpPoint == OpPoint")
{
	verify(OpPoint(1,2) == OpPoint(1,2));
	verify(!(OpPoint(1,2) == OpPoint(1,1)));
	verify(!(OpPoint(1,2) == OpPoint(2,2)));
	verify(!(OpPoint(1,2) == OpPoint(-1,-2)));
}

test("OpPoint != OpPoint")
{
	verify(!(OpPoint(1,2) != OpPoint(1,2)));
	verify(OpPoint(1,2) != OpPoint(1,1));
	verify(OpPoint(1,2) != OpPoint(2,2));
	verify(OpPoint(1,2) != OpPoint(-1,-2));
}

test("OpRect::TopLeft()")
{
	verify(OpRect(1, 2, 3, 4).TopLeft() == OpPoint(1, 2));
}

test("OpRect::TopRight()")
{
	verify(OpRect(1, 2, 3, 4).TopRight() == OpPoint(4, 2));
}

test("OpRect::BottomLeft()")
{
	verify(OpRect(1, 2, 3, 4).BottomLeft() == OpPoint(1, 6));
}

test("OpRect::BottomRight()")
{
	verify(OpRect(1, 2, 3, 4).BottomRight() == OpPoint(4, 6));
}

test("Intersecting disjoint OpRect objects (bug 318817)")
{
	OpRect a(100, 100, 100, 100);
	OpRect b(300, 300, 100, 100);

	a.IntersectWith(b);

	verify(a.IsEmpty());
	verify(a.width == 0);
	verify(a.height == 0);
}


test("OpPoint") // coverage
{
	OpPoint p, q(42, 17);
	verify(!p.Equals(q));
	p.Set(42, 17);
	verify(p.Equals(q));
}

test("OpRect basics")
{
	OpRect b, d(42, 17, 13, 7);
	verify(!b.Equals(d) && !d.Equals(b));
	verify(b.IsEmpty() && !d.IsEmpty());
	verify(d.Left() == 42 && d.Right() == 55 && d.Top() == 17 && d.Bottom() == 24);
	verify(d.Center().Equals(OpPoint(48, 20)));
	verify(d.Contains(d.Center()));
	d.Empty();
	verify(b.Equals(d) && d.Equals(b));
	b.Set(42, 17, 13, 7);
	verify(!b.Equals(d) && !d.Equals(b));
	d = b;
	verify(b.Equals(d) && d.Equals(b));
}

test("OpRect(const RECT*)")
{
	RECT w;
	w.left = 42;
	w.top = 17;
	w.right = 55;
	w.bottom = 24;
	OpRect b(&w), d(42, 17, 13, 7);
	verify(b.Equals(d) && d.Equals(b));
}

test("InsetBy")
{
	OpRect b(17, 42, 12, 6);
	verify(!b.InsetBy(1).Equals(b));
	verify(b.InsetBy(3).IsEmpty());
	verify(b.InsetBy(6, 0).IsEmpty());
	verify(!b.InsetBy(5, 0).IsEmpty());
	verify(b.InsetBy(0, 3).IsEmpty());
	verify(!b.InsetBy(5, 2).IsEmpty());
	verify(b.InsetBy(-6, -3).InsetBy(6, 3).Equals(b));
	verify(b.InsetBy(-5, 7).Center().Equals(b.InsetBy(5, -2).Center()));
}

test("Intersecting, OffsetBy")
{
	OpRect b(17, 42, 12, 6), d(42, 17, 12, 27);
	verify(!b.Intersecting(d) && !d.Intersecting(b));
	b.OffsetBy(13, 0);
	verify(!b.Intersecting(d) && !d.Intersecting(b));
	b.OffsetBy(1, 1);
	verify(b.Intersecting(d) && d.Intersecting(b));
	b.OffsetBy(7, 1);
	verify(!b.Intersecting(d) && !d.Intersecting(b));
	b.OffsetBy(7, -32);
	verify(b.Intersecting(d) && d.Intersecting(b));
	b.OffsetBy(8, -1);
	verify(!b.Intersecting(d) && !d.Intersecting(b));
	b.OffsetBy(0, 1);
	verify(b.Intersecting(d) && d.Intersecting(b));
	b.OffsetBy(1, 0);
	verify(!b.Intersecting(d) && !d.Intersecting(b));
}

test("Contains, Center")
{
	OpRect b(17, 42, 25, 13), d(b);
	verify(b.Contains(b.Center()));
	verify(b.Contains(b.InsetBy(12, 6)));
	verify(!b.Contains(b.InsetBy(-1, 1)));
	verify(!b.Contains(b.InsetBy(1, -1)));
	d.OffsetBy(0, 6);
	verify(b.Contains(d.Center()) && !b.Contains(d));
	d.OffsetBy(12, -6);
	verify(b.Contains(d.Center()) && !b.Contains(d));
	d.OffsetBy(-12, -6);
	verify(b.Contains(d.Center()) && !b.Contains(d));
	d.OffsetBy(-12, 6);
	verify(b.Contains(d.Center()) && !b.Contains(d));
	/* Once upon a time, Center() yielded the mid-point between bottom-left and
	* origin; let's be sure to catch that ... */
	d.OffsetBy(54, 55);
	verify(d.Contains(d.Center()) && !b.Contains(d.Center()));
}

test("Unite")
{
	// UnionWith should be called UniteWith, except that it's really ExtendToSubsume.
	OpRect b(17, 42, 25, 13), d(b);
	verify(d.Equals(b));

	//  Unite with same is a no-op:
	d.UnionWith(b);
	verify(d.Equals(b));

	// Union with empty is no-op:
	d.UnionWith(OpRect());
	verify(d.Equals(b));
	d.UnionWith(OpRect(12345, 6789, 0, 0));
	verify(d.Equals(b));
	d.UnionWith(OpRect(12345, -6789, -17, 99));
	verify(d.Equals(b));
	d.UnionWith(OpRect(-12345, 6789, 17, -99));
	verify(d.Equals(b));
}

test("Intersect")
{
	OpRect b(17, 42, 25, 13), d(b);

	// Intersect with same is a no-op:
	d.IntersectWith(b);
	verify(d.Equals(b));

	// Intersect with disjoint yields empty
	d.IntersectWith(OpRect(0, 0, 17, 42));
	verify(d.IsEmpty() && b.Contains(d));
	d = b;
	d.IntersectWith(OpRect(17, 0, 25, 42));
	verify(d.IsEmpty() && b.Contains(d));
	d = b;
	d.IntersectWith(OpRect(0, 42, 17, 13));
	verify(d.IsEmpty() && b.Contains(d));
	d = b;
	d.IntersectWith(OpRect(42, 42, 11, 13));
	verify(d.IsEmpty() && b.Contains(d));
	d = b;
	d.IntersectWith(OpRect(17, 55, 25, 3));
	verify(d.IsEmpty() && b.Contains(d));

	// Intersect with empty yields empty:
	// (implementation violates "A subsumes (A intersect B)" axiom of set theory in this)
	d = b;
	d.IntersectWith(d.InsetBy(7));
	verify(d.IsEmpty());
	d = b;
	d.IntersectWith(OpRect());
	verify(d.IsEmpty());
	d = b;
	d.Empty();
	d.IntersectWith(d);
	verify(d.IsEmpty());
}
 
test("Intersect, Unite")
{
	OpRect b(17, 42, 25, 13), d(b);

	// Intersect down to one corner, unite back up to the opposite:
	d.IntersectWith(OpRect(0, 0, 18, 43));
	verify(b.Contains(d));
	d.UnionWith(OpRect(40, 50, 2, 5));
	verify(d.Equals(b));

	// Intersect down to a corner, unite back to the opposite sides:
	d.IntersectWith(OpRect(41, 54, 103, 17));
	verify(b.Contains(d));
	d.UnionWith(OpRect(17, 45, 1, 1));
	verify(b.Contains(d));
	d.UnionWith(OpRect(30, 42, 1, 1));
	verify(d.Equals(b));
}
