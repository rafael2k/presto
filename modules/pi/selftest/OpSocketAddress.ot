/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*-
 *
 * Copyright (C) 1995-2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "pi.opsocketaddress";
include "modules/pi/network/OpSocketAddress.h";

test("string-conversion")
{
	OpSocketAddress *address = 0;
	OpSocketAddress *address2 = 0;

	verify_success(OpSocketAddress::Create(&address));
	verify(address);
	verify_success(OpSocketAddress::Create(&address2));
	verify(address2);

	verify(address->IsHostEqual(address2));
	verify(address->IsEqual(address2));

	OpString addrstr;

	verify_success(address->ToString(&addrstr));
	verify(addrstr.Compare(UNI_L("0.0.0.0")) == 0);
	verify(address->Port() == 0);
	verify(!address->IsHostValid());
	verify(!address->IsValid());

	verify_success(address->FromString(UNI_L("10.20.30.40")));
	verify_success(address2->FromString(UNI_L("10.20.30.40")));
	verify_success(address->ToString(&addrstr));
	verify(addrstr.Compare(UNI_L("10.20.30.40")) == 0);
	verify(address->Port() == 0);
	verify(address->IsHostValid());

	verify(address->IsHostEqual(address2));
	verify(address->IsEqual(address2));

	address->SetPort(32000);
	verify_success(address->ToString(&addrstr));
	verify(addrstr.Compare(UNI_L("10.20.30.40")) == 0);
	verify(address->Port() == 32000);
	verify(address->IsHostValid());

	verify(address->IsHostEqual(address2));
	verify(!address->IsEqual(address2));
	address2->SetPort(32000);
	verify(address->IsEqual(address2));
	address2->SetPort(32001);
	verify(address->IsHostEqual(address2));
	verify(!address->IsEqual(address2));

	verify_success(address2->FromString(UNI_L("10.100.100.100")));
	verify(!address->IsHostEqual(address2));
	verify(!address->IsEqual(address2));

	verify_status(OpStatus::ERR,
				  address->FromString(UNI_L("this is hopefully a bogus address")));
	verify(!address->IsHostValid());
	verify(!address->IsValid());
	verify_success(address->FromString(UNI_L("0.0.0.0")));
	verify(!address->IsHostValid());
	verify(!address->IsValid());
	verify_success(address->ToString(&addrstr));
	verify(addrstr.Compare(UNI_L("0.0.0.0")) == 0);

	OP_STATUS status = address->FromString(UNI_L("localhost"));
	if (OpStatus::ERR != status) // ERR is arguably the more sensible answer !
	{
		/* The spec only says that IPv4's canonical form must be supported;
		 * beyond that, it leaves the implementation to support any crazy shit
		 * it likes.  In particular, it's been reported that at least some
		 * implementations have supported "localhost" as a string, but with the
		 * socket address subsequently unusable for connection.  That is Bad. */
		verify_success(status); // i.e. only ERR is a legitimate failure
		verify(address->IsValid()); // Well, you claimed to succeed, ...
		verify(address->GetNetType() == NETTYPE_LOCALHOST); // It's canonical.
	}

	verify_success(address->Copy(address2));
	verify(address->IsHostValid());
	verify(address->IsHostEqual(address2));
	verify(address->IsEqual(address2));
	verify_success(address->ToString(&addrstr));
	verify(addrstr.Compare(UNI_L("10.100.100.100")) == 0);
	verify(address->Port() == 32001);
}
finally
{
	OP_DELETE(address);
	OP_DELETE(address2);
}

test("network type")
{
	OpSocketAddress *address = 0;

	verify_success(OpSocketAddress::Create(&address));
	verify(address);

	verify(address->GetNetType() == NETTYPE_UNDETERMINED);

	verify_success(address->FromString(UNI_L("127.0.0.1")));
	verify(address->GetNetType() == NETTYPE_LOCALHOST);

	verify_success(address->FromString(UNI_L("127.3.4.77")));
	verify(address->GetNetType() == NETTYPE_LOCALHOST);

	verify_success(address->FromString(UNI_L("10.20.30.40")));
	verify(address->GetNetType() == NETTYPE_PRIVATE);

	verify_success(address->FromString(UNI_L("172.20.30.40")));
	verify(address->GetNetType() == NETTYPE_PRIVATE);

	verify_success(address->FromString(UNI_L("192.168.30.40")));
	verify(address->GetNetType() == NETTYPE_PRIVATE);

	verify_success(address->FromString(UNI_L("1.2.3.4")));
	verify(address->GetNetType() == NETTYPE_PUBLIC);

	verify_success(address->FromString(UNI_L("172.32.3.4")));
	verify(address->GetNetType() == NETTYPE_PUBLIC);

	verify_success(address->FromString(UNI_L("192.2.3.4")));
	verify(address->GetNetType() == NETTYPE_PUBLIC);
}
finally
{
	OP_DELETE(address);
}
