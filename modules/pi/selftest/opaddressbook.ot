/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*-
**
** Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "pi.OpAddressBook";
require PI_ADDRESSBOOK;

include "modules/pi/device_api/OpAddressBook.h";
include "modules/pi/selftest/helpers/AddressBookSelftestHelper.h";

global
{
	OpAddressBook* address_book;

	class AddressBookAddGetRemoveTest : public AddressBookSelftestHelper::AddressBookAsyncTest
	{
	public:
		AddressBookAddGetRemoveTest(OpAddressBook* address_book)
			: AddressBookAsyncTest(address_book)
			, m_current_item(NULL)
			, m_count_before_add(0)
			, m_count_after_add(0)
			, m_count_after_remove(0)
		{
		}

		virtual OP_STATUS TestStep(unsigned current_step)
		{
			RETURN_IF_ERROR(m_last_operation_result);
			switch (current_step)
			{
			case 0: // get current count into m_count_before_add
			{
				GetItemCount(&m_count_before_add);
				break;
			}
			case 1:
			{
				RETURN_IF_ERROR(OpAddressBookItem::Make(&m_current_item, m_address_book));
				RETURN_IF_ERROR(g_selftest.utils->GetMemoryCleanupUtil()->DeleteAfterTest(m_current_item));
				RETURN_IF_ERROR(AddressBookSelftestHelper::FillAddressBookItemWithData(*m_current_item));
				RETURN_IF_ERROR(m_current_item->SetId(NULL));

				AddItem(m_current_item, &m_last_obtained_id);
				break;
			}
			case 2: // get current count into m_count_after_add
			{
				ASYNC_SELFTEST_VERIFY(!m_last_obtained_id.IsEmpty(), __LINE__);

				GetItemCount(&m_count_after_add);
				break;
			}
			case 3: // retrieve newly added item from the address book
			{
				ASYNC_SELFTEST_VERIFY((m_count_before_add + 1 == m_count_after_add), __LINE__);

				GetItem(m_last_obtained_id.CStr(), &m_last_retrieved_items);
				break;
			}
			case 4: // verify that the retrieved item is equal to created item and then remove it
			{
				ASYNC_SELFTEST_VERIFY(m_last_retrieved_items.GetCount() == 1, __LINE__);
				OpString tmp_id;
				RETURN_IF_ERROR(m_last_retrieved_items.Get(0)->GetId(&tmp_id));
				ASYNC_SELFTEST_VERIFY(tmp_id.Compare(m_last_obtained_id) == 0, __LINE__);
				RETURN_IF_ERROR(m_current_item->SetId(m_last_obtained_id.CStr())); // newly created item didn't have an id
				ASYNC_SELFTEST_VERIFY(AddressBookSelftestHelper::AddressBookItemsEqual(*m_current_item, *m_last_retrieved_items.Get(0)), __LINE__);

				RemoveItem(m_last_obtained_id.CStr(), &m_last_obtained_id);
				break;
			}
			case 5: // get current count into m_count_after_remove
			{
				OpString tmp_id;
				RETURN_IF_ERROR(m_last_retrieved_items.Get(0)->GetId(&tmp_id));
				ASYNC_SELFTEST_VERIFY(tmp_id.Compare(m_last_obtained_id) == 0, __LINE__);

				GetItemCount(&m_count_after_remove);
				break;
			}
			case 6: // check if the count decreased after removing item theen try to get this item from the address book again
			{
				ASYNC_SELFTEST_VERIFY((m_count_after_remove + 1 == m_count_after_add), __LINE__);

				GetItem(m_last_obtained_id.CStr(), &m_last_retrieved_items);
				break;
			}
			case 7: // check if we didnt get an item in from the addressbook after removing it
			{
				ASYNC_SELFTEST_VERIFY(m_last_retrieved_items.GetCount() == 0, __LINE__);

				TestSuccess();
				break;
			}
			default:
				OP_ASSERT(!"We should never get here");
				return OpStatus::ERR;
			}
			return OpStatus::OK;
		}
	protected:
		OpAddressBookItem* m_current_item;

		UINT32 m_count_before_add;
		UINT32 m_count_after_add;
		UINT32 m_count_after_remove;
		OpString m_last_obtained_id;
		OpVector<OpAddressBookItem> m_last_retrieved_items;
	};

	class AddressBookCommitOfNotAddedItemeTest : public AddressBookSelftestHelper::AddressBookAsyncTest
	{
	public:
		AddressBookCommitOfNotAddedItemeTest(OpAddressBook* address_book)
			: AddressBookAsyncTest(address_book)
			, m_current_item(NULL)
		{
		}

		virtual OP_STATUS TestStep(unsigned current_step)
		{
			switch (current_step)
			{
			case 0: // Try to commit unadded item
			{
				RETURN_IF_ERROR(OpAddressBookItem::Make(&m_current_item, m_address_book));
				RETURN_IF_ERROR(g_selftest.utils->GetMemoryCleanupUtil()->DeleteAfterTest(m_current_item));
				RETURN_IF_ERROR(AddressBookSelftestHelper::FillAddressBookItemWithData(*m_current_item));
				RETURN_IF_ERROR(m_current_item->SetId(NULL));

				CommitItem(m_current_item, &m_last_obtained_id);
				break;
			}
			case 1: // Check that the operation failed
			{
				ASYNC_SELFTEST_VERIFY(OpStatus::IsError(m_last_operation_result), __LINE__);

				TestSuccess();
				break;
			}
			default:
				OP_ASSERT(!"We should never get here");
				return OpStatus::ERR;
			}
			return OpStatus::OK;
		}
	private:
		OpAddressBookItem* m_current_item;

		UINT32 m_count_before_add;
		UINT32 m_count_after_add;
		UINT32 m_count_after_remove;
		OpString m_last_obtained_id;
		OpVector<OpAddressBookItem> m_last_retrieved_items;
	};

	class AddressBookAddGetCommitRemoveTest : public AddressBookSelftestHelper::AddressBookAsyncTest
	{
	public:
		AddressBookAddGetCommitRemoveTest(OpAddressBook* address_book)
			: AddressBookAsyncTest(address_book)
			, m_current_item(NULL)
			, m_count_before_add(0)
			, m_count_after_add(0)
			, m_count_after_remove(0)
		{
		}

		virtual OP_STATUS TestStep(unsigned current_step)
		{
			RETURN_IF_ERROR(m_last_operation_result);
			switch (current_step)
			{
			case 0: // get current count into m_count_before_add
			{
				GetItemCount(&m_count_before_add);
				break;
			}
			case 1:
			{
				RETURN_IF_ERROR(OpAddressBookItem::Make(&m_current_item, m_address_book));
				RETURN_IF_ERROR(g_selftest.utils->GetMemoryCleanupUtil()->DeleteAfterTest(m_current_item));
				RETURN_IF_ERROR(AddressBookSelftestHelper::FillAddressBookItemWithData(*m_current_item));
				RETURN_IF_ERROR(m_current_item->SetId(NULL));

				AddItem(m_current_item, &m_last_obtained_id);
				break;
			}
			case 2: // get current count into m_count_after_add
			{
				ASYNC_SELFTEST_VERIFY(!m_last_obtained_id.IsEmpty(), __LINE__);

				GetItemCount(&m_count_after_add);
				break;
			}
			case 3: // retrieve newly added item from the address book
			{
				ASYNC_SELFTEST_VERIFY((m_count_before_add + 1 == m_count_after_add), __LINE__);

				GetItem(m_last_obtained_id.CStr(), &m_last_retrieved_items);
				break;
			}
			case 4: // verify that the retrieved item is equal to created item and then modify it
			{
				ASYNC_SELFTEST_VERIFY(m_last_retrieved_items.GetCount() == 1, __LINE__);
				OpString tmp_id;
				RETURN_IF_ERROR(m_last_retrieved_items.Get(0)->GetId(&tmp_id));
				ASYNC_SELFTEST_VERIFY(tmp_id.Compare(m_last_obtained_id) == 0, __LINE__);
				RETURN_IF_ERROR(m_current_item->SetId(m_last_obtained_id.CStr())); // newly created item didn't have an id
				ASYNC_SELFTEST_VERIFY(AddressBookSelftestHelper::AddressBookItemsEqual(*m_current_item, *m_last_retrieved_items.Get(0)), __LINE__);

				m_current_item = m_last_retrieved_items.Get(0);
				m_current_item->SetValue(0,0,UNI_L("TEST_VALUE"));
				CommitItem(m_current_item, &m_last_obtained_id);
				break;
			}
			case 5: // check if the commit returned correct id and then retrieve modified item from the addressbook
			{
				OpString tmp_id;
				RETURN_IF_ERROR(m_current_item->GetId(&tmp_id));
				ASYNC_SELFTEST_VERIFY(tmp_id.Compare(m_last_obtained_id) == 0, __LINE__);

				GetItem(m_last_obtained_id.CStr(), &m_last_retrieved_items);
				break;
			}
			case 6: // verify that the retrieved item is equal to modified item and then remove it
			{
				ASYNC_SELFTEST_VERIFY(m_last_retrieved_items.GetCount() == 1, __LINE__);
				OpString tmp_id;
				RETURN_IF_ERROR(m_last_retrieved_items.Get(0)->GetId(&tmp_id));
				ASYNC_SELFTEST_VERIFY(tmp_id.Compare(m_last_obtained_id) == 0, __LINE__);
				RETURN_IF_ERROR(m_current_item->SetId(m_last_obtained_id.CStr())); // newly created item didn't have an id
				ASYNC_SELFTEST_VERIFY(AddressBookSelftestHelper::AddressBookItemsEqual(*m_current_item, *m_last_retrieved_items.Get(0)), __LINE__);

				RemoveItem(m_last_obtained_id.CStr(), &m_last_obtained_id);
				break;
			}
			case 7: // get current count into m_count_after_remove
			{
				OpString tmp_id;
				RETURN_IF_ERROR(m_last_retrieved_items.Get(0)->GetId(&tmp_id));
				ASYNC_SELFTEST_VERIFY(tmp_id.Compare(m_last_obtained_id) == 0, __LINE__);

				GetItemCount(&m_count_after_remove);
				break;
			}
			case 8: // check if the count decreased after removing item then try to get this item from the address book again
			{
				ASYNC_SELFTEST_VERIFY((m_count_after_remove + 1 == m_count_after_add), __LINE__);

				GetItem(m_last_obtained_id.CStr(), &m_last_retrieved_items);
				break;
			}
			case 9: // check if we didnt get an item in from the addressbook after removing it
			{
				ASYNC_SELFTEST_VERIFY(m_last_retrieved_items.GetCount() == 0, __LINE__);

				TestSuccess();
				break;
			}
			default:
				OP_ASSERT(!"We should never get here");
				return OpStatus::ERR;
			}
			return OpStatus::OK;
		}
	protected:
		OpAddressBookItem* m_current_item;

		UINT32 m_count_before_add;
		UINT32 m_count_after_add;
		UINT32 m_count_after_remove;
		OpString m_last_obtained_id;
		OpVector<OpAddressBookItem> m_last_retrieved_items;
	};
}

setup
{
	address_book = NULL;
	OpAddressBook::Create(&address_book, OpAddressBook::ADDRESSBOOK_DEVICE);
}

exit
{
	OP_DELETE(address_book);
}

test("Check Initialized")
{
	verify_not_oom(address_book);
}

test("Check global OpAddressBook exists")
	require init;
{
	verify_not_oom(g_op_address_book);
}

test("OpAddressBookItem::GetFieldInfos")
	require success "Check Initialized";
{
	const OpAddressBook::OpAddressBookFieldInfo* field_infos;
	unsigned int infos_count;
	address_book->GetFieldInfos(&field_infos, &infos_count);
	verify(field_infos);
	verify(infos_count > 0);
	for (unsigned int i = 0; i < infos_count; ++i)
	{
		verify(field_infos[i].name);// TODO display name exists
	}
}

test("OpAddressBookItem::Make")
	require success "Check Initialized";
{
	OpAddressBookItem* item = NULL;
	verify_success(OpAddressBookItem::Make(&item, address_book));
	verify(item);
	verify(item->GetAddressBook() == address_book);
	OpString id;
	verify_success(item->GetId(&id));
	verify(id.CStr() == NULL);
	verify(!item->WasAdded());
}
finally
{
	OP_DELETE(item);
}

test("OpAddressBookItem::Basic Operations with AppendValue")
	require success "OpAddressBookItem::Make";
{
	OpAddressBookItem* item = NULL;
	verify_success(OpAddressBookItem::Make(&item, address_book));
	verify(item);

	OpString value;
	unsigned int val_count;

	verify_success(item->GetValueCount(0, &val_count));
	verify(val_count == 0);
	verify_success(item->GetValue(0, 0, &value));
	verify(value.CStr() == NULL);
	
	verify_success(item->AppendValue(0, UNI_L("test_value")));
	verify_success(item->GetValueCount(0, &val_count));
	verify(val_count == 1);

	
	verify_success(item->GetValue(0, 0, &value));
	verify_string(value, UNI_L("test_value"));
	
	verify_success(item->RemoveValue(0, 0));
	verify_success(item->GetValueCount(0, &val_count));
	verify(val_count == 0);
	verify_success(item->GetValue(0, 0, &value));
	verify(value.CStr() == NULL);
}
finally
{
	OP_DELETE(item);
}

test("OpAddressBookItem::Basic Operations with SetValue")
	require success "OpAddressBookItem::Make";
{
	OpAddressBookItem* item = NULL;
	verify_success(OpAddressBookItem::Make(&item, address_book));
	verify(item);

	OpString value;
	unsigned int val_count;

	verify_success(item->GetValueCount(0, &val_count));
	verify(val_count == 0);
	verify_success(item->GetValue(0, 0, &value));
	verify(value.CStr() == NULL);
	
	verify_success(item->SetValue(0, 0, UNI_L("test_value")));
	verify_success(item->GetValueCount(0, &val_count));
	verify(val_count == 1);

	
	verify_success(item->GetValue(0, 0, &value));
	verify_string(value, UNI_L("test_value"));
	
	verify_success(item->RemoveValue(0, 0));
	verify_success(item->GetValueCount(0, &val_count));
	verify(val_count == 0);
	verify_success(item->GetValue(0, 0, &value));
	verify(value.CStr() == NULL);
}
finally
{
	OP_DELETE(item);
}


test("OpAddressBookItem::Random filling")
	require success "OpAddressBookItem::Make";
	require success "OpAddressBookItem::Basic Operations with SetValue";
{
	OpAddressBookItem* item = NULL;
	verify_success(OpAddressBookItem::Make(&item, address_book));
	
	for (int i = 0; i < 100; ++i)
		verify_success(AddressBookSelftestHelper::FillAddressBookItemWithData(*item, TRUE));
}
finally
{
	OP_DELETE(item);
}

test("OpAddressBookItem::Cloning Make")
	require success "OpAddressBookItem::Make";
	require success "OpAddressBookItem::Random filling";
{
	OpAddressBookItem* item = NULL;
	OpAddressBookItem* item_copy = NULL;
	verify_success(OpAddressBookItem::Make(&item, address_book));
	verify_success(AddressBookSelftestHelper::FillAddressBookItemWithData(*item));
	verify_success(OpAddressBookItem::Make(&item_copy, item));
	verify(item_copy);
	verify(AddressBookSelftestHelper::AddressBookItemsEqual(*item, *item_copy));
}
finally
{
	OP_DELETE(item_copy);
	OP_DELETE(item);
}

test("OpAddressBookItem::ImportFields")
	require success "OpAddressBookItem::Make";
	require success "OpAddressBookItem::Random filling";
{
	OpAddressBookItem* item = NULL;
	OpAddressBookItem* item_copy = NULL;
	verify_success(OpAddressBookItem::Make(&item, address_book));
	verify_success(AddressBookSelftestHelper::FillAddressBookItemWithData(*item));
	verify_success(OpAddressBookItem::Make(&item_copy, address_book));
	verify(item_copy);
	verify_success(item_copy->ImportFields(item));
	verify(AddressBookSelftestHelper::AddressBookItemsEqual(*item, *item_copy) == FALSE); // only id's should be different 
	OpString id;
	verify_success(item->GetId(&id));
	verify_success(item_copy->SetId(id.CStr()));
	verify(AddressBookSelftestHelper::AddressBookItemsEqual(*item, *item_copy));
}
finally
{
	OP_DELETE(item_copy);
	OP_DELETE(item);
}

test("OpAddressBook::Add/Get/Remove")
	require success "OpAddressBookItem::Make";
	require success "OpAddressBookItem::Random filling";
	async;
{
	AddressBookAddGetRemoveTest* test = OP_NEW(AddressBookAddGetRemoveTest, (address_book));
	ST_delete_after_group(test);
	test->Start();
}


test("OpAddressBook::Commit of unaded item")
	require success "OpAddressBookItem::Make";
	require success "OpAddressBookItem::Random filling";
	async;
{
	AddressBookCommitOfNotAddedItemeTest* test = OP_NEW(AddressBookCommitOfNotAddedItemeTest, (address_book));
	ST_delete_after_group(test);
	test->Start();
}

test("OpAddressBook::Add/Get/Remove + Commit")
	require success "OpAddressBookItem::Make";
	require success "OpAddressBookItem::Random filling";
	async;
{
	AddressBookAddGetCommitRemoveTest* test = OP_NEW(AddressBookAddGetCommitRemoveTest, (address_book));
	ST_delete_after_group(test);
	test->Start();
}
