/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*-
**
** Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "pi.opnetworkinterface";
require init;
require PI_NETWORK_INTERFACE_MANAGER;

include "modules/pi/network/OpNetworkInterface.h";
include "modules/pi/network/OpSocketAddress.h";

test("Find non-local network interface")
{
	/* This test assumes the following:

	  - there is at least one non-local network interface on the system,
	    and that the network for at least one of them is up.

	  - none of the network interfaces change during the test */

	OpNetworkInterfaceManager* manager;
	OpSocketAddress* address = NULL;

	verify(OpStatus::IsSuccess(OpNetworkInterfaceManager::Create(&manager, 0)));
	verify(OpStatus::IsSuccess(OpSocketAddress::Create(&address)));

	// Test that the manager refuses to return network interfaces if it isn't locked.
	verify(!manager->GetNextInterface());

	verify(OpStatus::IsSuccess(manager->BeginEnumeration()));

	// Get the first network interface
	verify(manager->GetNextInterface());

	// Locking while locked is not allowed.
	verify(manager->BeginEnumeration() == OpStatus::ERR);

	// Restart enumeration.
	manager->EndEnumeration();
	verify(OpStatus::IsSuccess(manager->BeginEnumeration()));

	// Verify that it was restarted
	verify(manager->GetNextInterface());

	// Restart enumeration.
	manager->EndEnumeration();
	verify(OpStatus::IsSuccess(manager->BeginEnumeration()));

	unsigned int usable_interface_count = 0;

	while (OpNetworkInterface* network_interface = manager->GetNextInterface())
	{
		verify(OpStatus::IsSuccess(network_interface->GetAddress(address)));

		if (network_interface->GetStatus() == NETWORK_LINK_UP)
		{
			OpSocketAddressNetType net_type = address->GetNetType();

			if (net_type == NETTYPE_PRIVATE || net_type == NETTYPE_PUBLIC)
				usable_interface_count ++;
		}
	}

	verify(usable_interface_count > 0);

	manager->EndEnumeration();

	// Test that the manager refuses to return network interfaces if it isn't locked.
	verify(!manager->GetNextInterface());
}
finally
{
	OP_DELETE(manager);
	OP_DELETE(address);
}
