/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*-
**
** Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "pi.opfolderlister";
require DIRECTORY_SEARCH_SUPPORT;
require init;

include "modules/pi/system/OpFolderLister.h";
include "modules/pi/OpSystemInfo.h";

global
{
	OP_STATUS SetupDirString(OpString &str) {
		RETURN_IF_ERROR(g_folder_manager->GetFolderPath(OPFILE_SELFTEST_DATA_FOLDER, str));
		RETURN_IF_ERROR(str.AppendFormat(UNI_L("modules%cpi%cselftest%cdata"), PATHSEPCHAR, PATHSEPCHAR, PATHSEPCHAR));
		return OpStatus::OK;
	}

	OpFolderLister* ofl;
}

setup
{
	ofl = NULL;
}

test("create")
{
	OP_STATUS status = OpFolderLister::Create(&ofl);
	verify(OpStatus::IsSuccess(status) && ofl != NULL);
}

test("construct") require success "create";
{
	OpString path;
	OP_STATUS status = SetupDirString(path);
	verify(OpStatus::IsSuccess(status));
	status = ofl->Construct(path.CStr(), UNI_L(SYS_CAP_WILDCARD_SEARCH));
	verify(OpStatus::IsSuccess(status));
}
finally
{
	OP_DELETE(ofl);
	ofl = NULL;
}

table AllFiles(const char*) filelist "data" name "*";
foreach (filename) from AllFiles
{
	test("GetFullPath: $(filename)") require success "construct";
	{
		OpFolderLister* ofl = 0;

		OP_STATUS status = OpFolderLister::Create(&ofl);
		verify(OpStatus::IsSuccess(status) && ofl != NULL);

		OpString path;
		status = SetupDirString(path);
		verify(OpStatus::IsSuccess(status));
		status = ofl->Construct(path.CStr(), UNI_L(SYS_CAP_WILDCARD_SEARCH));
		verify(OpStatus::IsSuccess(status));

		int match = 0;
		const uni_char* fn = NULL;
		while (ofl->Next())
		{
			fn = ofl->GetFullPath();

			if (fn)
			{
				BOOL equal;
				verify(OpStatus::IsSuccess(g_op_system_info->PathsEqual(ST_up(filename), fn, &equal)));
				if (equal)
					++match;
			}
		}
		verify(match == 1);
	}
	finally
	{
		OP_DELETE(ofl);
		ofl = NULL;
	}
}

test("Next") require success "construct";
{
	OP_STATUS status = OpFolderLister::Create(&ofl);
	verify(OpStatus::IsSuccess(status) && ofl != NULL);

	OpString path;
	status = SetupDirString(path);
	verify(OpStatus::IsSuccess(status));
	status = ofl->Construct(path.CStr(), UNI_L(SYS_CAP_WILDCARD_SEARCH));
	verify(OpStatus::IsSuccess(status));

	uni_char f[3][_MAX_PATH]; /* ARRAY OK 2008-08-08 eddy */
	f[0][0] = f[1][0] = f[2][0] = 0;

	BOOL next_ok = ofl->Next();
	verify(next_ok);

	const uni_char* fn = ofl->GetFileName();
	verify(fn);
	uni_strlcpy(f[0], fn, _MAX_PATH);
	verify(f[0][0]);

	int i = 1;
	while (ofl->Next())
	{
		fn = ofl->GetFileName();
		verify(fn);
		uni_strlcpy(f[i % 3], fn, _MAX_PATH);
		verify(f[i % 3][0]);
		verify(uni_strcmp(f[(i-1)%3], f[i%3]) != 0);

		if (i > 1)
			verify(uni_strcmp(f[i%3], f[(i+1)%3]) != 0);
		i++;
	}
	// ideally: verify(i == N); where N is the expected number of files.
}
finally
{
	OP_DELETE(ofl);
	ofl = NULL;
}

table AllFolders(char *) read_filelist "data/folders.txt";
foreach (foldername) from AllFolders
{
	test("IsFolder: " foldername) require success "construct";
	{
		OP_STATUS status = OpFolderLister::Create(&ofl);
		verify(OpStatus::IsSuccess(status) && ofl != NULL);

		OpString path;
		status = SetupDirString(path);
		verify(OpStatus::IsSuccess(status));
		status = ofl->Construct(path.CStr(), UNI_L(SYS_CAP_WILDCARD_SEARCH));
		verify(OpStatus::IsSuccess(status));

		int match = 0;
		const uni_char* fn = NULL;
		while (ofl->Next())
		{
			fn = ofl->GetFileName();

			if (fn && ofl->IsFolder() && uni_strcmp(UNI_L(foldername), fn) == 0)
				++match;
		}
		verify(match == 1);
	}
	finally
	{
		OP_DELETE(ofl);
		ofl = NULL;
	}
}

table AllFilesShort(char *, int) read "data/files.txt";
foreach (filename, size) from AllFilesShort
{
	test("GetFileName") require success "construct";
	{
		OP_STATUS status = OpFolderLister::Create(&ofl);
		verify(OpStatus::IsSuccess(status) && ofl != NULL);

		OpString path;
		status = SetupDirString(path);
		verify(OpStatus::IsSuccess(status));
		status = ofl->Construct(path.CStr(), UNI_L(SYS_CAP_WILDCARD_SEARCH));
		verify(OpStatus::IsSuccess(status));

		int match = 0;
		const uni_char* fn = NULL;
		while (ofl->Next())
		{
			fn = ofl->GetFileName();

			if (fn && !ofl->IsFolder() && uni_strcmp(UNI_L(filename), fn) == 0)
				++match;
		}
		verify(match == 1);
	}
	finally
	{
		OP_DELETE(ofl);
		ofl = NULL;
	}
}

test("GetFileLength") require success "construct";
{
	verify(OpStatus::IsSuccess(OpFolderLister::Create(&ofl)));
	verify(ofl);

	OpString path;
	verify(OpStatus::IsSuccess(SetupDirString(path)));
	verify(OpStatus::IsSuccess(ofl->Construct(path.CStr(), UNI_L(SYS_CAP_WILDCARD_SEARCH))));

	int match = 0;
	while (ofl->Next())
	{
		const uni_char* fn = ofl->GetFileName();

		if (fn && !ofl->IsFolder() && uni_strcmp(UNI_L("content.bin"), fn) == 0)
		{
			match ++;
			verify(ofl->GetFileLength() == 23);
		}
	}
	verify(match == 1);
}
finally
{
	OP_DELETE(ofl);
	ofl = NULL;
}

table TxtFiles(const char*) filelist "data" name "*.txt";
foreach (filename) from TxtFiles
{
	test("pattern matching: $(filename)") require success "construct";
	{
		char * name = op_strrchr(filename, PATHSEPCHAR);
		verify(name);
		name ++; // step to after the path separator

		OpString path;
		verify(OpStatus::IsSuccess(SetupDirString(path)));

		OpString filter;
		verify(OpStatus::IsSuccess(filter.Set("*.txt")));

		OpFolderLister* ofl = 0;
		verify(OpStatus::IsSuccess(OpFolderLister::Create(&ofl)) && ofl);
		verify(OpStatus::IsSuccess(ofl->Construct(path.CStr(), filter.CStr())));

		int match = 0;
		while (ofl->Next())
		{
			const uni_char* fn = ofl->GetFileName();
			verify(fn);
			if (uni_strcmp(fn, name) == 0)
				++match;
			else // check all matched names *do* match '*.txt':
			{
				const uni_char* dot = uni_strrchr(fn, '.');
				verify(dot);
			// Case-insensitive because that's how some platforms are ...
				verify(0 == uni_stricmp(dot + 1, "txt"));
			}
		}
		verify(match == 1);
	}
	finally
	{
		OP_DELETE(ofl);
		ofl = NULL;
	}
}
 


test("non-existent") require success "construct";
{
	// ... an unreadable or non-existent folder yields a valid search with no matches.
	verify(OpStatus::IsSuccess(OpFolderLister::Create(&ofl)));
	verify(ofl);

	OpString path;
	verify(OpStatus::IsSuccess(SetupDirString(path)));
	verify(OpStatus::IsSuccess(path.Append(PATHSEP)));
	verify(OpStatus::IsSuccess(path.Append("NonExisTent")));
	verify(OpStatus::IsSuccess(ofl->Construct(path.CStr(), UNI_L(SYS_CAP_WILDCARD_SEARCH))));

	int match = 0;
	while (ofl->Next())
	{
		match++;
	}
	verify(match == 0);
}
finally
{
	OP_DELETE(ofl);
	ofl = NULL;
}


exit
{
	OP_DELETE(ofl);
}
