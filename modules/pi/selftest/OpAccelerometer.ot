/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*-
**
** Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "pi.OpAccelerometer";
require API_PI_ACCELEROMETER;

include "modules/pi/pi_module.h";
include "modules/pi/device_api/OpAccelerometer.h";

test("OpAccelerometer::Create")
{
	OpAccelerometer * accelerometer = 0;
	OP_STATUS status = OpAccelerometer::Create(&accelerometer);
	verify(OpStatus::IsSuccess(status));
	verify(accelerometer);
}
finally
{
	OP_DELETE(accelerometer);
}

test("OpAccelerometer::GetCurrentData - no acceleration")
	require success "OpAccelerometer::Create";
{
	// This selftest requires that device is laying flat and still
	// - accelerometer should report zero accelerations
	verify(g_op_accelerometer);
	double x,y,z;
	OP_STATUS status = g_op_accelerometer->GetCurrentData(&x,&y,&z);
	verify(OpStatus::IsSuccess(status));
	const double TOLERANCE = 1; // arbitary(random:P) value
	verify(op_fabs(0.0 - x) < TOLERANCE);
	verify(op_fabs(0.0 - y) < TOLERANCE);
	verify(op_fabs(9.81 - z) < TOLERANCE);
}
