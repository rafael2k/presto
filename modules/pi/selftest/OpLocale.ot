/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*-
**
** Copyright (C) 1995-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "pi.oplocale";

include "modules/pi/OpLocale.h";

global
{
	OpLocale* locale;
}

setup
{
	OP_STATUS res = OpLocale::Create(&locale);

	if (OpStatus::IsError(res))
		ST_failed("OpLocale::Create() failed, with code %d", res);
}

exit
{
	OP_DELETE(locale);
}

test("CompareStringsL")
{
	const uni_char *str1 = UNI_L("hest er best");
	const uni_char *str2 = UNI_L("hest er best");
	const uni_char *str3 = UNI_L("hest er BEST");
	const uni_char *str4 = UNI_L("sau er OK");
	OP_MEMORY_VAR int diff = 0;
	OP_STATUS res;

	// Note: I'm not sure if the tests below will behave as expected under all locales

	TRAP(res, diff = locale->CompareStringsL(str1, str1));
	verify(OpStatus::IsSuccess(res));
	verify(diff == 0);

	TRAP(res, diff = locale->CompareStringsL(str1, str2));
	verify(OpStatus::IsSuccess(res));
	verify(diff == 0);

	TRAP(res, diff = locale->CompareStringsL(str1, str3));
	verify(OpStatus::IsSuccess(res));
	verify(diff != 0);

	TRAP(res, diff = locale->CompareStringsL(str1, str3, 7));
	verify(OpStatus::IsSuccess(res));
	verify(diff == 0);

	TRAP(res, diff = locale->CompareStringsL(str1, str4));
	verify(OpStatus::IsSuccess(res));
	verify(diff != 0);

	TRAP(res, diff = locale->CompareStringsL(str1, str1, -1, TRUE));
	verify(OpStatus::IsSuccess(res));
	verify(diff == 0);

	TRAP(res, diff = locale->CompareStringsL(str1, str3, -1, TRUE));
	verify(OpStatus::IsSuccess(res));
	verify(diff == 0);

	TRAP(res, diff = locale->CompareStringsL(str1, str4, -1, TRUE));
	verify(OpStatus::IsSuccess(res));
	verify(diff != 0);

	TRAP(res, diff = locale->CompareStringsL(str1+8, str3+8, 4, FALSE));
	verify(OpStatus::IsSuccess(res));
	verify(diff != 0);

	TRAP(res, diff = locale->CompareStringsL(str1+5, str3+5, 3, FALSE));
	verify(OpStatus::IsSuccess(res));
	verify(diff == 0);

	TRAP(res, diff = locale->CompareStringsL(str1+8, str3+8, 4, TRUE));
	verify(OpStatus::IsSuccess(res));
	verify(diff == 0);

	TRAP(res, diff = locale->CompareStringsL(str1+5, str3+5, 3, TRUE));
	verify(OpStatus::IsSuccess(res));
	verify(diff == 0);

	TRAP(res, diff = locale->CompareStringsL(str1, str4, -1, FALSE));
	verify(OpStatus::IsSuccess(res));
	verify(diff < 0);

	TRAP(res, diff = locale->CompareStringsL(str1, str4, 3, FALSE));
	verify(OpStatus::IsSuccess(res));
	verify(diff < 0);

	TRAP(res, diff = locale->CompareStringsL(str1, str4, -1, TRUE));
	verify(OpStatus::IsSuccess(res));
	verify(diff < 0);

	TRAP(res, diff = locale->CompareStringsL(str1, str4, 3, TRUE));
	verify(OpStatus::IsSuccess(res));
	verify(diff < 0);

	TRAP(res, diff = locale->CompareStringsL(str4, str1, 3, TRUE));
	verify(OpStatus::IsSuccess(res));
	verify(diff > 0);
}

test("op_strftime")
{
	const uni_char *format = UNI_L("%Y-%m-%d %H:%M:%S");
	const uni_char *control = UNI_L("2002-03-04 22:33:44");
	uni_char *buffer = OP_NEWA(uni_char, 100);
	struct tm t;
	int i;
	size_t chars;

	verify(buffer);

	t.tm_sec = 44;
	t.tm_min = 33;
	t.tm_hour = 22;
	t.tm_mday = 4;
	t.tm_mon = 2;
	t.tm_year = 102;
	t.tm_wday = 2;
	t.tm_yday = 62;
	t.tm_isdst = 0;

	for (i = 0; i < 10; i++)
		buffer[i] = 0xfeff;

	chars = locale->op_strftime(buffer, 0, format, &t);
	verify(chars == 0);
	for (i = 0; i < 10; i++)
		verify(buffer[i] == 0xfeff);

	chars = locale->op_strftime(buffer, 6, format, &t);
	verify(chars == 0);
	for (i = 6; i < 10; i++)
		verify(buffer[i] == 0xfeff);

	chars = locale->op_strftime(buffer, 100, format, &t);
	verify(chars == uni_strlen(control));
	verify(buffer[chars] == 0);

	verify_string(buffer, control);
}
finally
{
	OP_DELETEA(buffer);
}

test("op_strftime formats")
{
	const uni_char *formats[] =
	{
		UNI_L("%Y-%m-%d %H:%M:%S"),
		UNI_L("%y-%m-%d %H:%M:%S"),
		UNI_L("%w"),
		UNI_L("%W"),
		UNI_L(" %j "),
		UNI_L("%I%%")
	};

	const uni_char *controls[] =
	{
		UNI_L("2002-03-04 22:33:44"),
		UNI_L("02-03-04 22:33:44"),
		UNI_L("2"),
		UNI_L("09"),
		UNI_L(" 063 "),
		UNI_L("10%")
	};

	const uni_char *formats_any[] =
	{
		UNI_L("%a"),
		UNI_L("%A"),
		UNI_L("%b"),
		UNI_L("%B"),
		UNI_L("%c"),
		UNI_L("%X"),
		UNI_L("%x")
	};

	uni_char *buffer = OP_NEWA(uni_char, 100);
	tm t;
	op_memset(&t, 0, sizeof(t));

	unsigned int i;
	size_t chars;

	verify(buffer);

	t.tm_sec = 44;
	t.tm_min = 33;
	t.tm_hour = 22;
	t.tm_mday = 4;
	t.tm_mon = 2;
	t.tm_year = 102;
	t.tm_wday = 2;
	t.tm_yday = 62;
	t.tm_isdst = 0;

	for (i = 0; i < ARRAY_SIZE(formats); i++)
	{
		chars = locale->op_strftime(buffer, 100, formats[i], &t);
		verify(chars != 0);
		verify_string(buffer, controls[i]);
		verify(buffer[chars] == 0);
		verify(chars == uni_strlen(controls[i]));
		verify(chars == uni_strlen(buffer));
	}

	for (i = 0; i < ARRAY_SIZE(formats_any); i++)
	{
		chars = locale->op_strftime(buffer, 100, formats_any[i], &t);
		verify(chars > 0);
		verify(buffer[chars] == 0);
		verify(chars == uni_strlen(buffer));
		verify(buffer[0] != '%');
	}

	// Specific tests

	/* %z: Output should be on the form +HHMM or -HHMM, depending on the
	 *     local time zone. */
	chars = locale->op_strftime(buffer, 100, UNI_L("%z"), &t);
	verify(chars == 5, "%z format string is always five characters");
	verify(buffer[0] == '+' || buffer[0] == '-', "%z begins with + or -");
	verify(uni_isdigit(buffer[1]) && uni_isdigit(buffer[2]) &&
	       uni_isdigit(buffer[3]) && uni_isdigit(buffer[4]),
	       "%z time zone is numeric");
	unsigned int tz_hour = (buffer[1] - '0') * 10 + buffer[2] - '0';
	verify(tz_hour < 14, "%z hours are sane");
	unsigned int tz_minute = (buffer[3] - '0') * 10 + buffer[4] - '0';
	verify(tz_minute < 60, "%z minutes are sane");

	/* %p: AM/PM string should either both be empty (for languages not
	 *     supporting them), or be different for AM and PM */
	chars = locale->op_strftime(buffer, 50, UNI_L("%p"), &t);
	t.tm_hour -= 12;
	size_t chars2 = locale->op_strftime(buffer + 50, 50, UNI_L("%p"), &t);
	if (chars == 0)
	{
		verify(buffer[0] == 0);
		verify(chars2 == 0, "The PM string should not be empty unless the AM string is, too.");
		verify(buffer[50] == 0);
	}
	else
	{
		verify(chars2 != 0, "The AM string should only be empty if the PM string is, too.");
		verify(buffer[chars] == 0);
		verify(uni_strlen(buffer) == chars);
		verify(buffer[chars2 + 50] == 0);
		verify(uni_strlen(buffer + 50) == chars2);
		verify(uni_strcmp(buffer, buffer + 50) != 0, "AM and PM strings should differ");
	}
}
finally
{
	OP_DELETEA(buffer);
}

test("Conversion of character data between UTF-16 and locale")
{
	OpString8 locale_str;
	OpString utf16_str;
	const uni_char* text = UNI_L("some text");

	verify(OpStatus::IsSuccess(locale->ConvertToLocaleEncoding(&locale_str, text)));
	verify(OpStatus::IsSuccess(locale->ConvertFromLocaleEncoding(&utf16_str, locale_str.CStr())));

	verify(uni_str_eq(text, utf16_str.CStr()));
}
