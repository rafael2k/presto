/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "mdefont.webfonts";
require MDEFONT_MODULE;

include "modules/mdefont/mdefont.h";
include "modules/display/fontdb.h";

global
{
	const uni_char* Vera = UNI_L("Bitstream Vera Sans");
}

/**
   check sanity of various information that can be obtained from a
   webfont ref. the reference information comes from the font
   Bitstream Vera Sans, so this subtest makes sense only if ref
   referrs to said font.
 */
subtest TestVera(MDF_WebFontBase* ref, const OpFontInfo::FontType format)
{
	MDE_FONT* font = NULL;

	verify(ref);

	// check sanity of FontType
	verify(format == MDF_GetWebFontType(ref));

	// check sanity of font_info
	MDF_FONTINFO font_info;
	verify(OpStatus::IsSuccess(MDF_GetWebFontInfo(ref, &font_info)));

	verify(!uni_strcmp(font_info.font_name, Vera));

	verify(font_info.has_serif == MDF_SERIF_SANS);
	// local webfonts share fontinfo with the platform version
	verify(font_info.has_normal == TRUE);
	verify(font_info.has_bold == FALSE);
	verify(font_info.has_italic == FALSE);
	verify(font_info.has_bold_italic == FALSE);
	verify(font_info.is_monospace == FALSE);

	verify(font_info.ranges[0] == 0x800000af);
	verify(font_info.ranges[1] == 0x1000204a);
	verify(font_info.ranges[2] == 0x00000000);
	verify(font_info.ranges[3] == 0x00000000);

#ifdef MDF_CODEPAGES_FROM_OS2_TABLE
	verify(font_info.m_codepages[0] == 0x00000001);
	verify(font_info.m_codepages[1] == 0x00000000);
#endif // MDF_CODEPAGES_FROM_OS2_TABLE


	// fetch OpFont
	const int size = 12;
	font = MDF_GetWebFont(ref, size);
	verify(font);

	// measure some text
	int width = 0;
	verify(OpStatus::IsSuccess(MDF_StringWidth(width, font, UNI_L("biteme"), 6, 0)));
	// don't test against hardcoded width, since it depends on font
	// engine, kerning, hinting etc
	verify(width > 0);
}
finally
{
	if (font)
		MDF_ReleaseFont(font);
}


test("load webfont") leakcheck;
file uni filename "Vera.ttf";
{
	// add font as webfont
	MDF_WebFontBase* ref = 0;
	verify(OpStatus::IsSuccess(MDF_AddFontFile(filename, ref)));

	// check various font information
	verify(TestVera(ref, OpFontInfo::PLATFORM_WEBFONT));

	// cleanup
	MDF_RemoveFont(ref);
}

test("get local webfont") leakcheck;
{
	// need to have local font loaded on system
	if (styleManager->GetFontNumber(Vera) >= 0)
	{
		// add font as localfont
		MDF_WebFontBase* ref = 0;
		verify(OpStatus::IsSuccess(MDF_GetLocalFont(ref, Vera)));

		// check various font information
		verify(TestVera(ref, OpFontInfo::PLATFORM_LOCAL_WEBFONT));

		// cleanup
		MDF_RemoveFont(ref);
	}
	else
		output("skipped - %s not present\n", ST_down(Vera));
}

// permutations - bold, italic
table Props (BOOL, BOOL)
{
	{ TRUE,  FALSE },
	{ FALSE, TRUE },
	{ TRUE,  TRUE },
}

test("synthesize webfont") leakcheck;
file uni filename "Vera.ttf";
{
	MDF_WebFontBase* base = 0;
	verify(OpStatus::IsSuccess(MDF_AddFontFile(filename, base)));

	MDF_FONTINFO font_info;
	verify(OpStatus::IsSuccess(MDF_GetWebFontInfo(base, &font_info)));
	verify(font_info.has_normal);
	verify(!font_info.has_bold);
	verify(!font_info.has_italic);

	MDE_FONT* normal;
	MDE_FONT* synthesized;
	UINT8 weight;
	const int size = 12;
	foreach (bold, italic) from Props
	{
		weight = bold ? 7 : 4;

		normal = MDF_GetWebFont(base, size);
		verify(normal);
		MDF_ReleaseFont(normal);

		synthesized = MDF_GetWebFont(base, weight, italic, size);
		verify(synthesized);
		MDF_ReleaseFont(synthesized);
	}
}
finally
{
	if (base)
		MDF_RemoveFont(base);
}
