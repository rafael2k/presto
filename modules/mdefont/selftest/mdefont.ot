/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "mdefont.fonts";
require MDEFONT_MODULE;

include "modules/mdefont/mdefont.h";

global
{
	MDF_FONTINFO* fontinfo = NULL;
	int fontcount = 0;
}

test("MDF_AddFontFile") leakcheck;
file uni filename "Vera.ttf";
require noinit;
{
	verify(OpStatus::IsSuccess(MDF_AddFontFile(filename)));
}

test("MDF_BeginFontEnumeration")
{
	verify(OpStatus::IsSuccess(MDF_BeginFontEnumeration()));
}

test("MDF_CountFonts") require success("MDF_BeginFontEnumeration");
{
	fontcount = MDF_CountFonts();
	verify(fontcount != 0);
	fontinfo = OP_NEWA(MDF_FONTINFO, fontcount);
	verify(fontinfo != NULL);
}

test("MDF_GetFontInfo") require success("MDF_CountFonts");
{
	OP_STATUS status;
	MDF_FONTINFO fi;

	for (int i = 0; i < fontcount; ++i)
	{
		status = MDF_GetFontInfo(i, &fi);
		verify(OpStatus::IsSuccess(status));
		fontinfo[i] = fi;
	}
}

test("MDF_EndFontEnumeration") require success("MDF_BeginFontEnumeration");
{
	MDF_EndFontEnumeration();
}

test("MDF_GetTable") leakcheck; require MDF_SFNT_TABLES;
{
#define TAG_CMAP (((unsigned long)'c'<<24)|((unsigned long)'m'<<16)|((unsigned long)'a'<<8)|'p')
	for (int i = 0; i < fontcount; ++i)
	{
		MDE_FONT* font = MDF_GetFont(i, 17, false, false);
		if (!font) font = MDF_GetFont(i, 17, false, true);
		if (!font) font = MDF_GetFont(i, 17, true, false);
		if (!font) font = MDF_GetFont(i, 17, true, true);
		verify(font);
		BYTE* tbl;
		UINT32 size;
		OP_STATUS status = MDF_GetTable(font, TAG_CMAP, tbl, size);
		MDF_ReleaseFont(font);
		verify(OpStatus::IsSuccess(status) && tbl != NULL);
		MDF_FreeTable(tbl);
	}
}

exit
{
	OP_DELETEA(fontinfo);
}
