group "mdefont.indic";
require MDF_OPENTYPE_SUPPORT;

include "modules/mdefont/mdf_ot_indic.h";

table indic_strings(const uni_char*, const uni_char*, UINT8, const char*) {
    // <input string>,
    // <output string>,
    // <number of syllables>,
    // <base position relative to syllable>{number of syllables}

    // devanagari
    { UNI_L("\x0917\x094d\x0919"),
            UNI_L("\x0917\x094d\x0919"),
            1,
            "\x02" }
    { UNI_L("\x092a\x0930\x0935\x0947\x091c\x093c"),
            UNI_L("\x092a\x0930\x0935\x0947\x091c\x093c"),
            4,
            "\x00\x00\x00\x00" }
    { UNI_L("\x092e\x0941\x0936\x0930\x094d\x0930\x092b\x093c"),
            UNI_L("\x092e\x0941\x0936\x0930\x0930\x094d\x092b\x093c"),
            4,
            "\x00\x00\x00\x00" }
    { UNI_L("\x092e\x0948\x0921\x094d\x0930\x093f\x0921"),
            UNI_L("\x092e\x0948\x093f\x0921\x0930\x094d\x0921"),
            3,
            "\x00\x01\x00" }
    { UNI_L("\x0938\x094d\x0925\x093f"),
	    UNI_L("\x093f\x0938\x094d\x0925"),
	    1,
	    "\x03" }
    { UNI_L("\x092c\x0930\x094d\x095e"),
	    UNI_L("\x092c\x095e\x0930\x094d"),
	    2,
	    "\x00\x00" }

    // kannada
    { UNI_L("\x0c96\x0ccd\x0caf"),
            UNI_L("\x0c96\x0caf\x0ccd"),
            1,
            "\x00" }
    { UNI_L("\x0cae\x0cc1"),
            UNI_L("\x0cae\x0cc1"),
            1,
            "\x00" }
};

test("indic strings")
{
    // should be enough to encompass one syllable's worth of text
    const size_t BufSize = 20;
    uni_char buf[BufSize]; // ARRAY OK 2009-04-24 wonko

    iterate(input, output, num_syllables, bases) from indic_strings
    {
        const unsigned int in_len = uni_strlen(input);
        const unsigned int out_len = uni_strlen(output);
        verify (in_len == out_len);

        unsigned int o = 0;
        for (unsigned int s = 0; s < num_syllables; ++s)
        {
	    verify(o < in_len);
            verify(bases[s] >= 0);

            const uni_char* syl = input + o;
            const UINT32 len = in_len - o;
            UINT32 slen, base;
            BOOL reph;

	    // detect script
            const IndicGlyphClass::Script script = g_indic_scripts->GetScript(input[s]);
            verify (script != IndicGlyphClass::UNKNOWN);
	    // find syllable
            verify (indic_find_syllable(script, syl, len, slen));
	    // find base
            verify(indic_find_base(script, syl, slen, base));
	    // copy string to local buffer for reordering
            // if this fails BufSize is too small
            verify (slen < BufSize);
            op_memcpy(buf, syl, slen*sizeof(*buf));
	    // reorder
            indic_reorder_syllable(script, buf, slen, base, reph);
            verify(base == (UINT32)bases[s]);
            verify(!uni_strncmp(buf, output+o, slen));

	    o += slen;
        }

	verify(o == in_len);
    }
}
