/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2004-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "build cookie list";

language c++;

include "core/pch.h";
include "modules/url/url_man.h";
include "modules/prefs/prefsmanager/collections/pc_network.h";

require _ASK_COOKIE;
require NEED_URL_COOKIE_ARRAY;

include "modules/cookies/url_cm.h";

include "modules/cookies/cookie_man.h";

global {

	uni_char* domainstr = (uni_char*)UNI_L("example.com");	// the url api does not want consts
	uni_char* domainstr2 = (uni_char*)UNI_L("example1.com");// the url api does not want consts
	uni_char* pathstr = (uni_char*)UNI_L("/path/subpath/");
	uni_char* pathstr2= (uni_char*)UNI_L("/path/subpath1/");
	uni_char* pathstr3= (uni_char*)UNI_L("/hallo/hei/bless");
	uni_char* pathstrroot = (uni_char*)UNI_L("/");

}

subtest SetCookie(const char *domain_str, const char* name_str, const char* path_str, const char* value_str)
{
	OpStackAutoPtr<Cookie_Item_Handler> cookie(OP_NEW(Cookie_Item_Handler, ()));
	verify(cookie.get());
	cookie->domain.Set(domain_str);
	cookie->path.Set(path_str);
	cookie->name.Set(name_str);
	cookie->value.Set(value_str);
	g_url_api->SetCookie(cookie.get());
}

test ("Build_CookieList")
{
	BOOL old_cookiesv2_setting = g_pcnet->GetIntegerPref(PrefsCollectionNetwork::EnableCookiesV2);
	RETURN_IF_LEAVE(g_pcnet->WriteIntegerL(PrefsCollectionNetwork::EnableCookiesV2, TRUE));

	int cookie_size = 0;
	
	OpAutoArray< ::Cookie * > cookies( OP_NEWA(::Cookie *, urlManager->GetMaxCookiesInDomain()) );

	//remove all cookies
	verify_success(g_url_api->RemoveCookieList(domainstr, NULL, NULL));
	verify_success(g_url_api->RemoveCookieList(domainstr2, NULL, NULL));

	verify(SetCookie("example1.com", "1", "/", ""));						// 1
	verify(SetCookie("example1.com", "2", "", ""));							// 2 will not be included
	verify(SetCookie("example1.com", "3", "/hallo", ""));					// 3
	verify(SetCookie("example1.com", "4", "/hallo/hei", ""));				// 4
	verify(SetCookie("example1.com", "5", "/hallo/hei/hej", ""));			// 5
	verify(SetCookie("example1.com", "6", "/hallo/hei/hej/bless", ""));		// 6
	verify(SetCookie("example1.com", "7", "/hallo/hei/bless/hej", ""));		// 7

	verify(SetCookie("example.com", "1", "/", ""));							// 1
	verify(SetCookie("example.com", "2", "/path/subpath/", ""));			// 2
	verify(SetCookie("example.com", "3", "/path/subpath/", "raw"));			// 3
	verify(SetCookie("example.com", "4", "/path/subpath1/subpath2", "raw"));// 4
	verify(SetCookie("example.com", "5", "/path/subpath1/subpath3", "raw"));// 5

	verify_success(g_url_api->BuildCookieList(cookies.get(), &cookie_size, domainstr, pathstrroot, TRUE));	//will get all cookies on domain

	verify(cookie_size == 5);

	verify_success(g_url_api->BuildCookieList(cookies.get(), &cookie_size, domainstr2, pathstrroot, TRUE));	//will get all cookies on domain2

	verify(cookie_size == 7);

	verify_success(g_url_api->BuildCookieList(cookies.get(), &cookie_size, domainstr2, pathstr3, TRUE));	//will get 4 cookies from domain2

	verify(cookie_size == 4);

	verify_success(g_url_api->BuildCookieList(cookies.get(), &cookie_size, domainstr, pathstr, TRUE));

	verify(cookie_size == 3);

	g_url_api->RemoveCookieList(domainstr, NULL, NULL);

	verify_success(g_url_api->BuildCookieList(cookies.get(), &cookie_size, domainstr, pathstr, TRUE));

	verify(cookie_size == 0);
	
	//remove all cookies
	verify_success(g_url_api->RemoveCookieList(domainstr, NULL, NULL));
	verify_success(g_url_api->RemoveCookieList(domainstr2, NULL, NULL));

	RETURN_IF_LEAVE(g_pcnet->WriteIntegerL(PrefsCollectionNetwork::EnableCookiesV2, old_cookiesv2_setting));
}
