/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2004-2010 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 * Yngve N. Pettersen
 */
group "cookies test 3";

require init;

language c++;

include "core/pch.h";
include "modules/url/url_man.h";
include "modules/prefs/prefsmanager/collections/pc_network.h";

include "modules/network_selftest/urldoctestman.h";
include "modules/network_selftest/scanpass.h";

global {
	URL_DocSelfTest_Manager *url_cookie_tests = NULL;
#ifdef PREFS_WRITE
	BOOL old_cookiesv2_setting;
#endif

	class CookieSelftest : public URL_DocSelfTest_Item
	{
	private:
		URL_CONTEXT_ID context;
		URL start_url;
		BOOL header_loaded;

	public:
		CookieSelftest():context(0), header_loaded(FALSE){};
		OP_STATUS Construct(const OpStringC8 &test_url)
		{
			context = urlManager->GetNewContextID();
			if(context == 0)
				return OpStatus::ERR;

			TRAP_AND_RETURN(op_err, urlManager->AddContextL(context, OPFILE_ABSOLUTE_FOLDER, OPFILE_ABSOLUTE_FOLDER, OPFILE_ABSOLUTE_FOLDER, OPFILE_ABSOLUTE_FOLDER));

			start_url = g_url_api->GetURL(test_url, context);
			if(start_url.IsEmpty())
				return OpStatus::ERR;
			URL ref;
			URL_DocSelfTest_Item::Construct(start_url, ref);
			return OpStatus::OK;
		}

		~CookieSelftest(){urlManager->RemoveContext(context, TRUE);};
		virtual BOOL Verify_function(URL_DocSelfTest_Event event, Str::LocaleString status_code=Str::NOT_A_STRING)
		{
			switch(event)
			{
			case URLDocST_Event_Header_Loaded:
				if(header_loaded)
				{
					ReportFailure("Multiple header loaded.");
					return FALSE;
				}
				header_loaded = TRUE;
				break;
			case URLDocST_Event_Redirect:
				if(header_loaded)
				{
					ReportFailure("Redirect after header loaded.");
					return FALSE;
				}
				break;
			case URLDocST_Event_Data_Received:
				{
					if(!header_loaded)
					{
						ReportFailure("Data before header loaded.");
						return FALSE;
					}
					URLStatus status = (URLStatus) url.GetAttribute(URL::KLoadStatus,URL::KFollowRedirect);

					if(status == URL_LOADED)
					{
						OpString8 temp_url;
						
						OP_STATUS op_err = start_url.GetAttribute(URL::KName, temp_url, URL::KFollowRedirect);
						
						if(OpStatus::IsSuccess(op_err) && temp_url.Compare("http://testsuites.oslo.opera.com/core/cookies/public/result.php?result=1") == 0)
							return TRUE;

						ReportFailure("Test failed.");
						return FALSE;
					}
					else if(status != URL_LOADING)
					{
						ReportFailure("Some kind of loading failure %d.", status);
						return FALSE;
					}
				}
				break;
			default:
				ReportFailure("Some kind of loading failure %d:%d.", (int) event, (int) status_code);
				return FALSE;
			}
			return TRUE;
		}
	};
	class CookieScanPassSelftest : public ScanPass_SimpleTester
	{
	private:
		URL_CONTEXT_ID context;

	public:
		CookieScanPassSelftest():context(0){};

		OP_STATUS Construct(const OpStringC8 &source_url, URL &ref, const OpStringC8 &pass_string, BOOL unique=TRUE)
		{
			context = urlManager->GetNewContextID();
			if(context == 0)
				return OpStatus::ERR;

			TRAP_AND_RETURN(op_err, urlManager->AddContextL(context, OPFILE_ABSOLUTE_FOLDER, OPFILE_ABSOLUTE_FOLDER, OPFILE_ABSOLUTE_FOLDER, OPFILE_ABSOLUTE_FOLDER));

			URL start_url = g_url_api->GetURL(source_url, context);
			if(start_url.IsEmpty())
				return OpStatus::ERR;
			ScanPass_SimpleTester::Construct(start_url, ref, pass_string, unique);
			return OpStatus::OK;
		}

		~CookieScanPassSelftest(){urlManager->RemoveContext(context, TRUE);};
	};
}

table urlset(const char *)
{
	{"http://testsuites.oslo.opera.com/core/cookies/public/001.php"},
	//{"http://testsuites.oslo.opera.com/core/cookies/002.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/003.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/004/004.php"},
	//{"http://testsuites.oslo.opera.com/core/cookies/public/005.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/006.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/007.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/008.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/011.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/012.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/014/014.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/015/015.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/016.php"},
	//{"http://testsuites.oslo.opera.com/core/cookies/public/201.php"},
	//{"http://testsuites.oslo.opera.com/core/cookies/public/202.php"},
	//{"http://testsuites.oslo.opera.com/core/cookies/public/203.php"},
	//{"http://testsuites.oslo.opera.com/core/cookies/public/206.php"}
	//{"http://apache2.lab.osa:80/tests/cookies/001.php?test=1"},
}

table urlset2(const char *)
{
	{"http://testsuites.oslo.opera.com/core/cookies/public/301.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/302/302.php?location=../302-5.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/302/302.php?location=302-3.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/302/302.php?location=sub/302-4.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/302/302.php?location=../302-2/302-6.php"},
	//{"http://testsuites.oslo.opera.com/core/cookies/public/303.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/304.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/305.php"},
	//{"http://testsuites.oslo.opera.com/core/cookies/public/306.php"},
	//{"http://testsuites.oslo.opera.com/core/cookies/public/307.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/308.php"},
	{"http://testsuites.oslo.opera.com/core/cookies/public/309.php"},
}

setup {
//#ifdef PREFS_WRITE
//	old_cookiesv2_setting = g_pcnet->GetIntegerPref(PrefsCollectionNetwork::EnableCookiesV2);
//#endif
	url_cookie_tests = OP_NEW(URL_DocSelfTest_Manager, ());
}

exit {
	OP_DELETE(url_cookie_tests);
	url_cookie_tests = NULL;
//#ifdef PREFS_WRITE
//	g_pcnet->WriteIntegerL(PrefsCollectionNetwork::EnableCookiesV2, old_cookiesv2_setting);
//#endif
}

test("Initialized")
{
//#ifdef PREFS_WRITE
//	RETURN_IF_LEAVE(g_pcnet->WriteIntegerL(PrefsCollectionNetwork::EnableCookiesV2, TRUE));
//#else
//	verify(g_pcnet->GetIntegerPref(PrefsCollectionNetwork::EnableCookiesV2), "Cookies must be enabled for tests to work");
//#endif
	verify(url_cookie_tests != NULL);
}

subtest AddSimpleTest(URL_DocSelfTest_Batch *batch, const OpStringC8 &url)
{
	verify(batch != NULL);
	verify(url.HasContent());

	OpAutoPtr<CookieSelftest> test(OP_NEW(CookieSelftest, ()));
	verify(test.get() != NULL);

	verify(OpStatus::IsSuccess(test->Construct(url)));

	verify(batch->AddTestCase(test.release()));
}

subtest AddScanTest(URL_DocSelfTest_Batch *batch, const OpStringC8 &url)
{
	verify(batch != NULL);
	verify(url.HasContent());

	URL ref;

	OpAutoPtr<CookieScanPassSelftest> test(OP_NEW(CookieScanPassSelftest, ()));
	verify(test.get() != NULL);

	verify(OpStatus::IsSuccess(test->Construct(url, ref, "<p>PASS</p>" )));

	verify(batch->AddTestCase(test.release()));
}


subtest AddBatch(URL_DocSelfTest_Batch *batch)
{
	verify(batch != NULL);
	verify(url_cookie_tests->AddBatch(batch));
}

subtest StartTestSet()
{
	verify(url_cookie_tests->SetLastBatch());
}

subtest Setup_SingleTests(const OpStringC8 &batch_id)
{
	URL empty_ref;
	iterate (url) from urlset
	{
		OpAutoPtr<URL_DocSelfTest_Batch> batch(OP_NEW(URL_DocSelfTest_Batch, ()));

		verify(batch.get() != NULL);

		batch->SetBatchID(batch_id);

		verify(AddSimpleTest(batch.get(), url));

		verify(!batch->Empty());

		verify(AddBatch(batch.release()));
	}
	iterate (url) from urlset2
	{
		OpAutoPtr<URL_DocSelfTest_Batch> batch(OP_NEW(URL_DocSelfTest_Batch, ()));

		verify(batch.get() != NULL);

		batch->SetBatchID(batch_id);

		verify(AddScanTest(batch.get(), url));

		verify(!batch->Empty());

		verify(AddBatch(batch.release()));
	}
}

test("test remote cookies ")
	require success "Initialized";
    async;
{
//#ifdef PREFS_WRITE
//	RETURN_IF_LEAVE(g_pcnet->WriteIntegerL(PrefsCollectionNetwork::EnableCookiesV2, TRUE));
//#else
//	if (!g_pcnet->GetIntegerPref(PrefsCollectionNetwork::EnableCookiesV2))
//		ST_failed("Cookies must be enabled for tests to work");
//#endif

	if (!Setup_SingleTests("[Cookies_remote_1]") ||
		!StartTestSet())
		ST_failed("Could not start test");
}
