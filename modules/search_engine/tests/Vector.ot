group "search_engine.vector";

require SEARCH_ENGINE;

include "modules/search_engine/Vector.h";

global
{
	struct CountedDelete
	{
		int *counter;
		int value;

		CountedDelete(int *counter, int value)
		{
			this->counter = counter;
			this->value = value;
		}
		~CountedDelete(void)
		{
			++*counter;
		}
		static BOOL LessThan(const void *left, const void *right)
		{
			return (*(CountedDelete **)left)->value < (*(CountedDelete **)right)->value;
		}
	};
};


test("DuplicateOf") leakcheck;
{
	TVector<int> vector;
	for (int i = 0; i < 53; i++)
	{
		verify(vector.Add(i)== OpStatus::OK);
	}
	TVector<int> vector_copy;
	verify(vector_copy.DuplicateOf(vector) == OpStatus::OK);
	for (int j = 0; j < 53; j++)
	{
		verify(vector_copy.Get(j) == j);
	}
	verify(vector_copy.GetCount() == 53);
}

test("Add and deletebyitem") leakcheck;
{
	TVector<int *> vector(&PtrDescriptor<int>::Destruct);
	int *array[53];
	for (int i = 0; i < 53; i++)
	{
		array[i] = OP_NEW(int, (i));
		verify(vector.Add(array[i]) == OpStatus::OK);
	}

	verify(vector.GetCount() == 53);
	for (UINT32 j = 0; j < 53; j++)
	{
		verify(vector.DeleteByItem(array[j]));
	}
	verify(vector.GetCount() == 0);
}

test("Add and remove") leakcheck;
{
	TVector<int> vector;
	for (int i = 0; i < 53; i++)
	{
		verify(vector.Add(i) == OpStatus::OK);
	}
	verify(vector.GetCount() == 53);
	for (int j = 0; j < 53; j++)
	{
		verify(vector.Remove(0) == j);
	}
	verify(vector.GetCount() == 0);
}

test("Add and delete") leakcheck;
{
	TVector<int> vector;
	for (int i = 0; i < 4098; i++)
	{
		verify(vector.Add(i) == OpStatus::OK);
	}
	verify(vector.GetCount() == 4098);
	vector.Delete(0, 8);
	vector.Delete(-8, 8);

	verify(vector.GetCount() == 4082);
	verify(vector[0] == 8);
	verify(vector[vector.GetCount() - 1] == 4089);

	for (UINT32 j = 0; j < 509U; j++)
	{
		vector.Delete(1, 8);
	}
	vector.Delete(0, 10);
	verify(vector.GetCount() == 0);
}

test("Add and no delete") leakcheck;
{
	int counter = 0;

	{
		TVector<CountedDelete *> vector(&PtrDescriptor<CountedDelete>::Destruct);

		for (int i = 0; i < 3; i++)
		{
			verify(vector.Add(OP_NEW(CountedDelete, (&counter, i))) == OpStatus::OK);
		}
		verify(vector.GetCount() == 3);
	}

	verify(counter == 3);
}

test("Add, replace and get") leakcheck;
{
	TVector<int> vector;
	verify(vector.GetCount() == 0);
	for (int i = 52; i >= 0; i--)
	{
		verify(vector.Add(i + 54)== OpStatus::OK);
	}
	verify(vector.GetCount() == 53);
	for (int j = 0; j < 53; j++)
	{
		verify_success(vector.Replace(j, j));
		verify(vector.GetCount() == 53);
	}
	for (int k = 0; k < 53; k++)
	{
		verify(vector.Get(k) == k);
	}
	verify(vector.GetCount() == 53);
}

test("Insert and get") leakcheck;
{
	TVector<int> vector;
	for (int i = 52; i >= 0; i--)
	{
		verify(vector.Insert(0, i)== OpStatus::OK);
	}
	for (int j = 0; j < 53; j++)
	{
		verify(vector.Get(j) == j);
	}
	verify(vector.GetCount() == 53);
}

test("Add and get") leakcheck;
{
	TVector<int> vector;
	for (int i = 0; i < 53; i++)
	{
		verify(vector.Add(i)== OpStatus::OK);
	}
	for (int j = 0; j < 53; j++)
	{
		verify(vector.Get(j) == j);
	}
	verify(vector.GetCount() == 53);
}

test("Add and find") leakcheck;
{
	TVector<int> vector;
	for (int i = 0; i < 53; i++)
	{
		verify(vector.Add(i)== OpStatus::OK);
	}
	for (int j = 0; j < 53; j++)
	{
		verify(vector.Find(j) == j);
	}
	verify(vector.GetCount() == 53);
}

test("MergeSort") leakcheck;
{
	int i, j;
	int value;
	int counter = 0;

	for (i = 1; i < 70; ++i)
	{
		verify(counter == 0);

		TVector<CountedDelete *> v(&CountedDelete::LessThan, &PtrDescriptor<CountedDelete>::Destruct);

		for (j = 0; j < i; ++j)
		{
			value = op_rand() % 12;
			verify_success(v.Add(OP_NEW(CountedDelete, (&counter, value))));
			if ((op_rand() & 3) == 3)
				verify_success(v.Add(OP_NEW(CountedDelete, (&counter, value))));
		}
		counter = -(int)v.GetCount();

		verify_success(v.Sort());
		verify((int)v.GetCount() <= i);

		verify(v.Search(v.Get(0)) == 0);
		for (j = 1; j < (int)v.GetCount(); ++j)
		{
			verify(v.Get(j - 1)->value < v.Get(j)->value);
			verify(v.Search(v.Get(j)) == j);
		}
	}
}

test("Set addition")
{
	TVector<int> v1, v2, v3, v4;
	int j;

	verify_success(v1.Reserve(9));
	verify_success(v1.Add(1));
	verify_success(v1.Add(5));
	verify_success(v1.Add(8));
	verify_success(v1.Add(16));
	verify_success(v1.Add(18));

	verify_success(v2.Add(1));
	verify_success(v2.Add(5));
	verify_success(v2.Add(10));
	verify_success(v2.Add(11));

	verify_success(v1.Unite(v2));

	verify_success(v3.Add(5));
	verify_success(v3.Add(6));
	verify_success(v3.Add(7));
	verify_success(v3.Add(27));

	verify_success(VectorBase::Unite(v4, v1, v3));

	verify(v4.GetCount() == 10);

	for (j = 1; j < (int)v4.GetCount(); ++j)
	{
		verify(v4.Get(j - 1) < v4.Get(j));
	}
}

test("Add out of range bug")
{
	TVector<int> v1, v2;
	int j;

	verify_success(v1.Reserve(5));
	verify_success(v1.Add(1));
	verify_success(v1.Add(4));
	verify_success(v1.Add(6));

	verify_success(v2.Add(1));
	verify_success(v2.Add(3));
	verify_success(v2.Add(5));

	verify_success(v1.Unite(v2));

	for (j = 1; j < (int)v1.GetCount(); ++j)
	{
		verify(v1.Get(j - 1) < v1.Get(j));
	}

	v1.Clear();
	v2.Clear();

	for (j = 0; j < 512; ++j)
	{
		verify_success(v1.Add((j << 1) + ((j & 3) ^ 2)));
		verify_success(v2.Add(j + (j << 1) + (j & 3)));
	}
	verify_success(v1.Sort());
	verify_success(v2.Sort());

	verify_success(v1.Unite(v2));

	for (j = 1; j < (int)v1.GetCount(); ++j)
	{
		verify(v1.Get(j - 1) < v1.Get(j));
	}

	v1.Clear();
	v2.Clear();

	verify_success(v1.Reserve(2048));

	for (j = 0; j < 512; ++j)
	{
		verify_success(v1.Add((j << 1) + ((j & 3) ^ 2)));
		verify_success(v2.Add(j + (j << 1) + (j & 3)));
	}
	verify_success(v1.Sort());
	verify_success(v2.Sort());

	verify_success(v1.Unite(v2));

	for (j = 1; j < (int)v1.GetCount(); ++j)
	{
		verify(v1.Get(j - 1) < v1.Get(j));
	}
}


test("Set substraction")
{
	TVector<int> v1, v2, v4;

	verify_success(v2.Add(1));
	verify_success(v2.Add(5));
	verify_success(v2.Add(10));
	verify_success(v2.Add(11));
	verify_success(v2.Insert(0, 0));
	verify_success(v2.Insert(3, 9));
	verify_success(v2.Add(30));

	verify_success(v4.Add(1));
	verify_success(v4.Add(5));
	verify_success(v4.Add(6));
	verify_success(v4.Add(7));
	verify_success(v4.Add(8));
	verify_success(v4.Add(10));
	verify_success(v4.Add(11));
	verify_success(v4.Add(16));
	verify_success(v4.Add(18));
	verify_success(v4.Add(27));

	v4.Differ(v2);

	verify(v4.GetCount() == 6);

	v2.Clear();

	verify_success(v2.Add(27));
	verify_success(v2.Add(28));

	v4.Differ(v2);

	verify(v4.GetCount() == 5);

	v2.Clear();

	verify_success(v2.Add(7));
	verify_success(v2.Add(9));
	verify_success(v2.Add(18));

	verify_success(VectorBase::Differ(v1, v4, v2));

	verify(v1.GetCount() == 3);

	v2.Clear();

	verify_success(v2.Add(6));
	verify_success(v2.Add(7));
	verify_success(v2.Add(8));

	v1.Differ(v2);

	verify(v1.GetCount() == 1);

	verify_success(v1.Add(18));
	v2.Clear();
	verify_success(v2.Add(18));

	v1.Differ(v2);

	verify(v1.GetCount() == 1);
}

test("Set intersection")
{
	TVector<int> v1, v2, v3, v4;

	verify_success(v1.Add(1));
	verify_success(v1.Add(5));
	verify_success(v1.Add(8));
	verify_success(v1.Add(16));
	verify_success(v1.Add(18));

	verify_success(v2.Add(1));
	verify_success(v2.Add(5));
	verify_success(v2.Add(16));

	verify_success(v1.Intersect(v2));

	verify(v1.GetCount() == 3);

	verify_success(v3.Add(16));

	verify_success(v1.Intersect(v3));

	verify(v1.GetCount() == 1);

	verify_success(v1.Insert(0, 5));
	verify_success(v1.Add(18));

	verify_success(VectorBase::Intersect(v4, v1, v3));

	verify(v4.GetCount() == 1);

	v1.Clear();

	verify_success(v1.Add(1));
	verify_success(v1.Add(5));
	verify_success(v1.Add(8));
	verify_success(v1.Add(16));
	verify_success(v1.Add(18));
	verify_success(v1.Add(21));
	verify_success(v1.Add(25));
	verify_success(v1.Add(28));
	verify_success(v1.Add(116));
	verify_success(v1.Add(118));
	verify_success(v1.Add(221));
	verify_success(v1.Add(225));
	verify_success(v1.Add(228));
	verify_success(v1.Add(316));
	verify_success(v1.Add(318));

	v2.Clear();

	verify_success(v2.Add(1));
	verify_success(v2.Add(5));

	verify_success(v1.Intersect(v2));

	verify(v1.GetCount() == 2);

	v3.Clear();
	verify_success(v3.Intersect(v1));
	verify(v3.GetCount() == 0);

	verify_success(VectorBase::Intersect(v2, v1, v3));
	verify(v2.GetCount() == 0);

	verify_success(VectorBase::Intersect(v2, v3, v1));
	verify(v2.GetCount() == 0);

	verify_success(v1.Intersect(v3));
	verify(v1.GetCount() == 0);

	verify_success(v1.Add(1));
	verify_success(v1.Add(2));

	verify_success(v2.Add(1));
	verify_success(v2.Add(2));

	verify_success(v1.Intersect(v2));

	verify(v1.GetCount() == 2);

	verify_success(VectorBase::Intersect(v3, v1, v2));

	verify(v3.GetCount() == 2);
}

