group "search_engine.wordhighlighter";

require USE_SEARCH_ENGINE_WORDHIGHLIGHTER;

include "modules/search_engine/WordHighlighter.h";

test("WordHighlighter performance")
	disabled; // Takes too long. Enable for performance test
{
	const char *input_c = "Welcome to the Opera, a guide for new and existing users alike to show you how Opera works and how to make use of Opera's many great features and functions. It can be read from beginning to end, or you can choose to use it as reference."
" Note: The tutorial sometimes refers to keyboard shortcuts, such as F8; most of these only work in Opera. This particular shortcut focuses the address field. "
" This tutorial was last updated for Opera version 9.0."
" Whereas some differences remain between the Opera versions for Windows, UNIX, and Mac, most of this tutorial applies to Opera on all three major platforms. "
" Navigation"
" Links like the ones in the paragraph below are available throughout and will take you to the next, previous or start page of the tutorial. "
" < Previous | Start | Next >"
" Table of contents"
" Click on any subject to go directly to it. Or simply start at the beginning. "
" New Users"
" Using Opera"
" Getting started"
" Importing bookmarks and data"
" Using the Opera Web browser"
" The coolest features"
"(Mouse Gestures, Keyboard Shortcuts, Fast Searches, Block Pop-ups, Undo Close Page, Notes, Content Blocking, Site Preferences, Widgets, BitTorrent, The Start-up Dialog, Customize it!, View Options, Voice, Hotclick, Wand, Spell Checker, JavaScript Options) "
" The Panels"
" (Bookmarks, Mail, Contacts, History, Transfers, Links, Widgets, Windows, Notes, Search), Adding Web pages as panels "
" Chat"
" The User Interface"
"  Configure and Customize"
" Preferences"
" Tweaking the User Interface"
" Skins"
" Style sheets"
" Plug-ins"
" How to Get Help";
	const uni_char *query1 = UNI_L("beginning sheets wellcome");
	OpString out;
	OpString in;
	int i;
	time_t start;

	in.Set(input_c);

	op_time(&start);
	for (i = 499999; i >= 0; --i)
	{
		WordHighlighter h;
		h.Init(query1);
		h.AppendHighlight(out, in, 0, UNI_L("1"), UNI_L("2"));
		out.Empty();
	}

	output("%i\n", op_time(NULL) - start);
}

test("WordHighlighter")
{
	OpString input;
	OpString check;
	OpString query1;
	OpString query2;

	verify_success(input.Set("some somebody somebody@opera.com somebody some"));
	verify_success(check.Set("1some2 1somebody2 1somebody2@1opera2.1com2 1somebody2 1some2"));
	verify_success(query1.Set("some somebody somebody@opera.com"));
	verify_success(query2.Set("somebody@opera.com somebody some"));

	WordHighlighter h;
	OpString output;

	verify_success(h.Init(query1.CStr()));
	verify_success(h.AppendHighlight(output, input.CStr(), 0, UNI_L("1"), UNI_L("2")));
	verify_string(check, output);

	output.Empty();
	verify_success(h.Init(query2.CStr()));
	verify_success(h.AppendHighlight(output, input.CStr(), 0, UNI_L("1"), UNI_L("2")));
	verify_string(check, output);
}

test("limited output")
{
	OpString input;
	OpString check1;
	OpString check2;
	OpString query;

	verify_success(input.Set("the email address somebody@opera.com doesn't exists and neither http://somebody.opera.com nor http://people.opera.com/somebody does"));
	verify_success(check1.Set("1somebody2@1opera2.1com2 doesn't e"));
	verify_success(check2.Set("1somebody2@1opera2.1com2 doesn't exists and neither http://1somebody2.1opera2.1com2 nor http://people.1opera2.1com2/"));
	verify_success(query.Set("somebody@opera.com"));

	WordHighlighter h;
	OpString output;

	verify_success(h.Init(query.CStr()));
	verify_success(h.AppendHighlight(output, input.CStr(), 28, UNI_L("1"), UNI_L("2")));
	verify_string(check1, output);

	output.Empty();
	verify_success(h.AppendHighlight(output, input.CStr(), 100, UNI_L("1"), UNI_L("2")));
	verify_string(check2, output);
}

test("failed search")
{
	OpString input;
	OpString query1;
	OpString query2;
	OpString check1;

	verify_success(input.Set("the email address somebody@opera.com doesn't exists and neither http://somebody.opera.com nor http://people.opera.com/somebody does"));
	verify_success(query1.Set("somebodys@operas.coms"));
	verify_success(query2.Set(""));
	verify_success(check1.Set("the email address somebody@o"));

	WordHighlighter h;
	OpString output;

	verify_success(h.Init(query1.CStr()));
	verify_success(h.AppendHighlight(output, input.CStr(), 28, UNI_L("1"), UNI_L("2")));
	verify_string(check1, output);

	output.Empty();
	verify_success(h.Init(query2.CStr()));
	verify_success(h.AppendHighlight(output, input.CStr(), 0, UNI_L("1"), UNI_L("2")));
	verify_string(input, output);
}

test("ContainsWords")
{
	OpString input1;
	OpString input2;
	OpString input3;
	OpString query1;
	OpString query2;

	verify_success(input1.Set("some somebody somebody@opera.com somebody some"));
	verify_success(input2.Set("some body body@opera.com body some"));
	verify_success(input3.Set("some somebody somebody@opera.no somebody some"));

	verify_success(query1.Set("some somebody somebody@opera.com"));
	verify_success(query2.Set("somebody@opera.com somebody some"));

	WordHighlighter h;

	verify_success(h.Init(query1.CStr()));
	verify(h.ContainsWords(input1) == TRUE);
	verify(h.ContainsWords(input2) == FALSE);
	verify(h.ContainsWords(input3) == FALSE);

	verify_success(h.Init(query2.CStr()));
	verify(h.ContainsWords(input1) == TRUE);
	verify(h.ContainsWords(input2) == FALSE);
	verify(h.ContainsWords(input3) == FALSE);
}

test("Prefix match and highlight, bug CORE-25073")
{
	OpString input;
	OpString check;
	OpString query;

	verify_success(input.Set("some somebody somebody@opera.com somebody some"));
	verify_success(check.Set("1some2 1somebody2 1somebody2@1oper2a.com 1somebody2 1some2"));
	verify_success(query.Set("some somebody somebody@oper"));

	WordHighlighter h;
	OpString output;

	verify_success(h.Init(query.CStr()));
	verify(h.ContainsWords(input) == TRUE);
	verify_success(h.AppendHighlight(output, input.CStr(), 0, UNI_L("1"), UNI_L("2")));
	verify_string(check, output);
}

test("Highlight input containing soft-hyphen, bug CORE-8336")
{
	OpString input;
	OpString check;
	OpString query;

	verify_success(input.Set(UNI_L("find the word \255m\255ich\x2060\255el\255le\255 in historysearch")));
	verify_success(check.Set(UNI_L("find the word \255<m\255ich\x2060\255el\255le\255> <in> historysearch")));
	verify_success(query.Set(UNI_L("mi\255c\x2064helle in")));

	WordHighlighter h;
	OpString output;

	verify_success(h.Init(query.CStr()));
	verify(h.ContainsWords(input) == TRUE);
	verify_success(h.AppendHighlight(output, input.CStr(), 0, UNI_L("<"), UNI_L(">")));
	verify_string(check.CStr(), output.CStr());
}

test("Match and highlight urls with fine-grained word-segmenting")
{
	OpString input;
	OpString check1;
	OpString query1;
	OpString check2;
	OpString query2;

	verify_success(input.Set("http://t/TestCases/\r This server contains these relevant top level directories:"));
	verify_success(check1.Set("This 1server2 contains these relevant top level directories:")); // Excerpt should not include the url
	verify_success(query1.Set("server"));
	verify_success(check2.Set("http://t/Test1Cases2/ This server contains these relevant 1top2 level directories:"));
	verify_success(query2.Set("top cases"));

	WordHighlighter h;
	OpString output;

	verify_success(h.Init(query1.CStr()));
	verify(h.ContainsWords(input) == TRUE);
	verify_success(h.AppendHighlight(output, input.CStr(), 200, UNI_L("1"), UNI_L("2"), 2));
	verify_string(check1, output);

	verify_success(h.Init(query2.CStr()));
	verify(h.ContainsWords(input) == TRUE);
	verify_success(h.AppendHighlight(output, input.CStr(), 200, UNI_L("1"), UNI_L("2"), 2));
	verify_string(check2, output);
}
