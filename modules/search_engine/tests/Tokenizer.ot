group "search_engine.tokenizer";

require VISITED_PAGES_SEARCH;

include "modules/search_engine/WordSegmenter.h";

test("WordSegmenter 1")
{
					   //     text   block1            block2                 chinese with space       tibetan (2 words)
	OpStringC text(UNI_L("\r\nlatin1 email@address.org http://www.address.net \x3400\x3901\x3000\x3402 \x0F40\x0F42\x0F0B\x0F2A\x0F7A"));
	const uni_char *parsed[14];
	parsed[ 0] = UNI_L("latin1");
	parsed[ 1] = UNI_L("email");
	parsed[ 2] = UNI_L("address");
	parsed[ 3] = UNI_L("org");
	parsed[ 4] = UNI_L("http:");
	parsed[ 5] = UNI_L("www");
	parsed[ 6] = UNI_L("address");
	parsed[ 7] = UNI_L("net");
	parsed[ 8] = UNI_L("\x3400");
	parsed[ 9] = UNI_L("\x3901");
	parsed[10] = UNI_L("\x3402");
	parsed[11] = UNI_L("\x0F40\x0F42");
	parsed[12] = UNI_L("\x0F2A\x0F7A");
	parsed[13] = NULL;
	OpString tok;
	WordSegmenter msgtok;
	int i = 0;
	
	verify_success(msgtok.Set(text));
	
	while (msgtok.GetNextToken(tok) == OpBoolean::IS_TRUE)
		verify_string(tok, parsed[i++]);

	verify(parsed[i] == NULL);
}

test("WordSegmenter 2")
{
					   // 2CJK        2hiragana   latin            spaces      5hiragana                     space hir.  2thai       3katakana         4thai
	OpStringC text(UNI_L("\x3400\x3901\x3041\x3043gmail@address.org\x3000\x3004\x3042\x304F\x3041\x3065\x304F\x30A0\x3063\x0E03\x0E0D\x30AF\x30AF\x30D0\x0E03\x0E0D\x0E0E\x0E02"));
	const uni_char *parsed[16];
	parsed[ 0] = UNI_L("\x3400");
	parsed[ 1] = UNI_L("\x3901");
	parsed[ 2] = UNI_L("\x3041\x3043");
	parsed[ 3] = UNI_L("gmail");
	parsed[ 4] = UNI_L("address");
	parsed[ 5] = UNI_L("org");
	parsed[ 6] = UNI_L("\x3042\x304F\x3041");
	parsed[ 7] = UNI_L("\x304F\x3041\x3065");
	parsed[ 8] = UNI_L("\x3041\x3065\x304F");
	parsed[ 9] = UNI_L("\x3063");
	parsed[10] = UNI_L("\x0E03\x0E0D");
	parsed[11] = UNI_L("\x30AF\x30AF");
	parsed[12] = UNI_L("\x30AF\x30D0");
	parsed[13] = UNI_L("\x0E03\x0E0D\x0E0E");
	parsed[14] = UNI_L("\x0E0D\x0E0E\x0E02");
	parsed[15] = NULL;
	OpString tok;
	WordSegmenter msgtok;
	int i = 0;
	
	verify_success(msgtok.Set(text));
	
	while (msgtok.GetNextToken(tok) == OpBoolean::IS_TRUE)
		verify_string(tok, parsed[i++]);

	verify(parsed[i] == NULL);
}

test("WordSegmenter 3")
{
					   //     text   block1
	OpStringC text(UNI_L("\r\nlatin1 email@address.org "));
	OpStringC text2(UNI_L("\rlatin1 email\"address\"org"));
	const uni_char *parsed[5];
	parsed[ 0] = UNI_L("latin1");
	parsed[ 1] = UNI_L("email");
	parsed[ 2] = UNI_L("address");
	parsed[ 3] = UNI_L("org");
	parsed[ 4] = NULL;
	WordSegmenter msgtok;
	WordSegmenter msgtok2;
	OpAutoPtr<TVector<uni_char *> > tokens;
	OpAutoPtr<TVector<uni_char *> > tokens2;
	BOOL last_is_prefix;
	int i;

	verify_success(msgtok.Set(text));
	tokens = msgtok.Parse(&last_is_prefix);
	verify(!last_is_prefix);
	verify_not_oom(tokens.get());

	verify_success(msgtok2.Set(text2));
	tokens2 = msgtok2.Parse(&last_is_prefix);
	verify(last_is_prefix);
	verify_not_oom(tokens2.get());

	for (i=0; i<(int)tokens->GetCount(); i++)
	{
		verify_string(tokens->Get(i), parsed[i]);
		verify_string(tokens2->Get(i), parsed[i]);
	}

	verify(parsed[i] == NULL);
}

test("Hangul characters, bug CORE-22151")
{
					   // 4Hangul
	OpStringC text(UNI_L("\xC2DC\xC791\xD558\xAE30"));
	const uni_char *parsed[4];
	parsed[ 0] = UNI_L("\xC2DC\xC791");
	parsed[ 1] = UNI_L("\xC791\xD558");
	parsed[ 2] = UNI_L("\xD558\xAE30");
	parsed[ 3] = NULL;
	OpString tok;
	WordSegmenter msgtok;
	int i = 0;
	
	verify_success(msgtok.Set(text));
	
	while (msgtok.GetNextToken(tok) == OpBoolean::IS_TRUE)
		verify_string(tok, parsed[i++]);

	verify(parsed[i] == NULL);
}

test("wikipedia")
{
	WordSegmenter msgtok;
	OpString tok;

	verify_success(msgtok.Set(UNI_L("The Free Encyclopedia")));

	verify(msgtok.GetNextToken(tok) == OpBoolean::IS_TRUE);
	verify_string(tok, UNI_L("The"));
	verify(msgtok.GetNextToken(tok) == OpBoolean::IS_TRUE);
	verify_string(tok, UNI_L("Free"));
	verify(msgtok.GetNextToken(tok) == OpBoolean::IS_TRUE);
	verify_string(tok, UNI_L("Encyclopedia"));

	verify(msgtok.GetNextToken(tok) == OpBoolean::IS_FALSE);


	verify_success(msgtok.Set(UNI_L("Fran\347ais")));

	verify(msgtok.GetNextToken(tok) == OpBoolean::IS_TRUE);
	verify_string(tok, UNI_L("Fran\347ais"));

	verify(msgtok.GetNextToken(tok) == OpBoolean::IS_FALSE);


	verify_success(msgtok.Set(UNI_L("Die freie Enzyklop\344die")));

	verify(msgtok.GetNextToken(tok) == OpBoolean::IS_TRUE);
	verify_string(tok, UNI_L("Die"));
	verify(msgtok.GetNextToken(tok) == OpBoolean::IS_TRUE);
	verify_string(tok, UNI_L("freie"));
	verify(msgtok.GetNextToken(tok) == OpBoolean::IS_TRUE);
	verify_string(tok, UNI_L("Enzyklop\344die"));

	verify(msgtok.GetNextToken(tok) == OpBoolean::IS_FALSE);
}

test("ideographic space")
{
	OpStringC text1(UNI_L("t$\x3000\x8A66\x9A13"));
	OpStringC text2(UNI_L("\x8A66\x9A13"));
	OpString tok;
	WordSegmenter msgtok;
	int i;
	
	verify_success(msgtok.Set(text2));
	
	i = -1;
	
	do {
		verify_success(msgtok.GetNextToken(tok));
		++i;
	} while (!tok.IsEmpty());
	
	verify(i == 2);

	verify_success(msgtok.Set(text1));

	i = -1;
	
	do {
		verify_success(msgtok.GetNextToken(tok));
		++i;
	} while (!tok.IsEmpty());
	
	verify(i == 3);
}

test("7bit ASCII")
{                                                    //\'
	OpStringC text1(UNI_L("a+b_1+2,3.4;5 a!b\"c#d$e%f&g  h(i)j*k+l`m-n.o/p 0:1;2<3=4>5?6@7 A[B]C\\D^E{F|G}H~I~J"));
	const uni_char *parsed[39];
	parsed[ 0] = UNI_L("a");
	parsed[ 1] = UNI_L("b_1");
	parsed[ 2] = UNI_L("2,3.4");
	parsed[ 3] = UNI_L("5");
	parsed[ 4] = UNI_L("a");
	parsed[ 5] = UNI_L("b");
	parsed[ 6] = UNI_L("c");
	parsed[ 7] = UNI_L("d");
	parsed[ 8] = UNI_L("e");
	parsed[ 9] = UNI_L("f");
	parsed[10] = UNI_L("g");
	parsed[11] = UNI_L("h");
	parsed[12] = UNI_L("i");
	parsed[13] = UNI_L("j");
	parsed[14] = UNI_L("k");
	parsed[15] = UNI_L("l");
	parsed[16] = UNI_L("m");
	parsed[17] = UNI_L("n");
	parsed[18] = UNI_L("o");
	parsed[19] = UNI_L("p");
	parsed[20] = UNI_L("0");
	parsed[21] = UNI_L("1");
	parsed[22] = UNI_L("2");
	parsed[23] = UNI_L("3");
	parsed[24] = UNI_L("4");
	parsed[25] = UNI_L("5");
	parsed[26] = UNI_L("6");
	parsed[27] = UNI_L("7");
	parsed[28] = UNI_L("A");
	parsed[29] = UNI_L("B");
	parsed[30] = UNI_L("C");
	parsed[31] = UNI_L("D");
	parsed[32] = UNI_L("E");
	parsed[33] = UNI_L("F");
	parsed[34] = UNI_L("G");
	parsed[35] = UNI_L("H");
	parsed[36] = UNI_L("I");
	parsed[37] = UNI_L("J");
	parsed[38] = NULL;
	OpString tok;
	WordSegmenter msgtok;
	int i = 0, j = 0;
	
	verify_success(msgtok.Set(text1));
	
	while (msgtok.GetNextToken(tok) == OpBoolean::IS_TRUE)
	{
		++j;


		verify_string(tok, parsed[i++]);
	}

	verify(parsed[i] == NULL);
}

test("Normal (i.e. not fine-grained) word-segmenting")
{
	OpStringC text1(UNI_L("a'b:c_d 1.2'3,4_5 e6f7 gH \xE5\xC5"));
	const uni_char *parsed[6];
	// These are the "words" output by the Unicode word segmentation algorithm for this input:
	parsed[ 0] = UNI_L("a'b:c_d");
	parsed[ 1] = UNI_L("1.2'3,4_5");
	parsed[ 2] = UNI_L("e6f7");
	parsed[ 3] = UNI_L("gH");
	parsed[ 4] = UNI_L("\xE5\xC5");
	parsed[ 5] = NULL;

	WordSegmenter msgtok;
	verify_success(msgtok.Set(text1));

	int i = 0;
	OpString tok;
	while (msgtok.GetNextToken(tok) == OpBoolean::IS_TRUE)
		verify_string(tok, parsed[i++]);

	verify(parsed[i] == NULL);
}

test("Fine-grained word-segmenting")
{
	OpStringC text1(UNI_L("a'b:c_d 1.2'3,4_5 e6f7 gH \xE5\xC5"));
	const uni_char *parsed[18];
	parsed[ 0] = UNI_L("a");
	parsed[ 1] = UNI_L("b");
	parsed[ 2] = UNI_L("c");
	parsed[ 3] = UNI_L("d");
	parsed[ 4] = UNI_L("1");
	parsed[ 5] = UNI_L("2");
	parsed[ 6] = UNI_L("3");
	parsed[ 7] = UNI_L("4");
	parsed[ 8] = UNI_L("5");
	parsed[ 9] = UNI_L("e");
	parsed[10] = UNI_L("6");
	parsed[11] = UNI_L("f");
	parsed[12] = UNI_L("7");
	parsed[13] = UNI_L("g");
	parsed[14] = UNI_L("H");
	parsed[15] = UNI_L("\xE5");
	parsed[16] = UNI_L("\xC5");
	parsed[17] = NULL;

	WordSegmenter msgtok(WordSegmenter::FineSegmenting);
	verify_success(msgtok.Set(text1));

	int i = 0;
	OpString tok;
	while (msgtok.GetNextToken(tok) == OpBoolean::IS_TRUE)
		verify_string(tok, parsed[i++]);

	verify(parsed[i] == NULL);
}
