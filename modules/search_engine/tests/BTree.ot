group "search_engine.btree";

require ADVANCED_OPVECTOR;
require SEARCH_ENGINE;

include "modules/search_engine/SingleBTree.h";
include "modules/search_engine/tests/test_util.h";

global
{

template <typename KEY> class BTree : public SingleBTree<KEY>
{
	char num;
	const uni_char* m_dir;
public:
	BTree(const uni_char* dir, int items, int tree_num) : SingleBTree<KEY>(&DefDescriptor<KEY>::Compare)
	{
		num = tree_num + 'a';
		m_dir = dir;
		OpString s;
		OpStatus::Ignore(s.AppendFormat(UNI_L("%sdata/btree%c.bt"), dir, num));
		delete_file(s.CStr());
		OpStatus::Ignore(s.Append(UNI_L("-j")));
		delete_file(s.CStr());
		s.Empty();
		OpStatus::Ignore(s.AppendFormat(UNI_L("%sdata/btree%c.bt"), dir, num));
		OpStatus::Ignore(SingleBTree<KEY>::Open(s.CStr(), BlockStorage::OpenReadWrite, 12 + 4 + items * (4 + sizeof(KEY))));
	}
	~BTree(void)
	{
		OpStatus::Ignore(SingleBTree<KEY>::Close());
		OpString s;
		OpStatus::Ignore(s.AppendFormat(UNI_L("%sdata/btree%c.bt"), m_dir, num));
		delete_file(s.CStr());
	}
};

}

test("2 levels, odd SIZE") leakcheck;
	file uni dir "";
{
	BTree<int> b3(dir, 3, 1);
	SearchIterator<int> *result3 = NULL;
	BTree<int> b5(dir, 5, 2);
	SearchIterator<int> *result5 = NULL;
	int i, value, count;


	for (i = 0; i < 4; ++i)
	{
		verify_success(b3.Clear());
		verify_success(b3.Insert(20));
		verify_success(b3.Insert(10));
		verify_success(b3.Insert(30));
		verify_success(b3.Insert(20));

		verify_success(b3.Insert(5 + i * 10));

		result3 = b3.Search(1000, operatorLT);

		verify(result3 != NULL && result3->Count() != 0);

		count = 1;

		value = result3->Get();
		while (result3->Next())
		{
			verify(value < result3->Get());
			value = result3->Get();
			++count;
		}

		verify(count == 4);

		OP_DELETE(result3);
		result3 = NULL;
	}






	for (i = 0; i < 6; ++i)
	{
		verify_success(b5.Clear());
		verify_success(b5.Insert(20));
		verify_success(b5.Insert(10));
		verify_success(b5.Insert(30));
		verify_success(b5.Insert(20));
		verify_success(b5.Insert(40));
		verify_success(b5.Insert(50));

		verify_success(b5.Insert(5 + i * 10));

		result5 = b5.Search(1000, operatorLT);

		verify(result5 != NULL && result5->Count() != 0);

		count = 1;

		value = result5->Get();
		while (result5->Next())
		{
			verify(value < result5->Get());
			value = result5->Get();
			++count;
		}

		verify(count == 6);

		OP_DELETE(result5);
		result5 = NULL;
	}
}
finally
{
	if (result3 != NULL)
		OP_DELETE(result3);
	if (result5 != NULL)
		OP_DELETE(result5);
}

test("2 levels, even SIZE") leakcheck;
	file uni dir "";
{
	BTree<int> b4(dir, 4, 1);
	SearchIterator<int> *result4 = NULL;
	BTree<int> b6(dir, 6, 2);
	SearchIterator<int> *result6 = NULL;
	int i, value, count;


	for (i = 0; i < 5; ++i)
	{
		verify_success(b4.Clear());
		verify_success(b4.Insert(20));
		verify_success(b4.Insert(10));
		verify_success(b4.Insert(30));
		verify_success(b4.Insert(20));
		verify_success(b4.Insert(40));

		verify_success(b4.Insert(5 + i * 10));

		result4 = b4.Search(1000, operatorLT);

		verify(result4 != NULL && result4->Count() != 0);

		count = 1;

		value = result4->Get();
		while (result4->Next())
		{
			verify(value < result4->Get());
			value = result4->Get();
			++count;
		}

		verify(count == 5);

		OP_DELETE(result4);
		result4 = NULL;
	}






	for (i = 0; i < 7; ++i)
	{
		verify_success(b6.Clear());
		verify_success(b6.Insert(20));
		verify_success(b6.Insert(10));
		verify_success(b6.Insert(30));
		verify_success(b6.Insert(20));
		verify_success(b6.Insert(40));
		verify_success(b6.Insert(50));
		verify_success(b6.Insert(60));

		verify_success(b6.Insert(5 + i * 10));

		result6 = b6.Search(1000, operatorLT);

		verify(result6 != NULL && result6->Count() != 0);

		count = 1;

		value = result6->Get();
		while (result6->Next())
		{
			verify(value < result6->Get());
			value = result6->Get();
			++count;
		}

		verify(count == 7);

		OP_DELETE(result6);
		result6 = NULL;
	}
}
finally
{
	if (result4 != NULL)
		OP_DELETE(result4);
	if (result6 != NULL)
		OP_DELETE(result6);
}


test("3 levels, odd SIZE") leakcheck;
	file uni dir "";
{
	const int random[8] = {1, 10, 3, 7, 14, 13, 6, 2};
	OpINT32Vector input;
	BTree<int> b15(dir, 15, 1);
	SearchIterator<int> *result15 = NULL;
	int i, value, count, max;

	max = 2048;

	for (i = 0; i < max; ++i)
	{
		verify_success(b15.Insert(i * random[i & 7]));
		verify_success(input.Add(i * random[i & 7]));
	}

	result15 = b15.Search(0, operatorGE);

	verify(result15 != NULL && result15->Count() != 0);

	verify_success(input.Sort());

	count = 1;

	value = result15->Get();
	while (result15->Next())
	{
		if (value >= result15->Get() || value != input.Get(count - 1))
		{
			i = input.Get(count - 1);
		}
		verify(value < result15->Get());
		verify(value == input.Get(count - 1));
		value = result15->Get();
		++count;
	}




	verify(count == (int)input.GetCount());
}
finally
{
	if (result15 != NULL)
		OP_DELETE(result15);
}

test("3 levels, even SIZE") leakcheck;
	file uni dir "";
{
	const int random[8] = {1, 10, 3, 7, 14, 13, 6, 2};
	OpINT32Vector input;
	BTree<int> b16(dir, 16, 1);
	SearchIterator<int> *result16 = NULL;
	int i, value, count, max;

	max = 2048;

	for (i = 0; i < max; ++i)
	{
		verify_success(b16.Insert(i * random[i & 7]));
		verify_success(input.Add(i * random[i & 7]));
	}

	result16 = b16.Search(0, operatorGE);

	verify(result16 != NULL && result16->Count() != 0);

	verify_success(input.Sort());

	count = 1;

	value = result16->Get();
	while (result16->Next())
	{
		if (value >= result16->Get() || value != input.Get(count - 1))
		{
			i = result16->Get() + input.Get(count - 1);
		}
		verify(value < result16->Get());
		verify(value == input.Get(count - 1));
		value = result16->Get();
		++count;
	}


	verify(count == (int)input.GetCount());
}
finally
{
	if (result16 != NULL)
		OP_DELETE(result16);
}

test("4 levels, odd SIZE") leakcheck;
	file uni dir "";
{
	const int random[8] = {1, 10, 3, 7, 14, 13, 6, 2};
	OpINT32Vector input;
	BTree<int> b7(dir, 7, 1);
	SearchIterator<int> *result7 = NULL;
	int i, value, count, max;

	max = 2048;

	for (i = 0; i < max; ++i)
	{
		verify_success(b7.Insert(i * random[i & 7]));
		verify_success(input.Add(i * random[i & 7]));
	}

	result7 = b7.Search(0, operatorGE);

	verify(result7 != NULL && result7->Count() != 0);

	verify_success(input.Sort());

	count = 1;

	value = result7->Get();
	while (result7->Next())
	{
		if (value >= result7->Get() || value != input.Get(count - 1))
		{
			i = input.Get(count - 1);
		}
		verify(value < result7->Get());
		verify(value == input.Get(count - 1));
		value = result7->Get();
		++count;
	}




	verify(count == (int)input.GetCount());
}
finally
{
	if (result7 != NULL)
		OP_DELETE(result7);
}

test("4 levels, even SIZE") leakcheck;
	file uni dir "";
{
	const int random[8] = {1, 10, 3, 7, 14, 13, 6, 2};
	OpINT32Vector input;
	BTree<int> b8(dir, 8, 1);
	SearchIterator<int> *result8 = NULL;
	int i, value, count, max;

	max = 2048;

	for (i = 0; i < max; ++i)
	{
		verify_success(b8.Insert(i * random[i & 7]));
		verify_success(input.Add(i * random[i & 7]));
	}

	result8 = b8.Search(0, operatorGE);

	verify(result8 != NULL && result8->Count() != 0);

	verify_success(input.Sort());

	count = 1;

	value = result8->Get();
	while (result8->Next())
	{
		if (value >= result8->Get() || value != input.Get(count - 1))
		{
			i = input.Get(count - 1);
		}
		verify(value < result8->Get());
		verify(value == input.Get(count - 1));
		value = result8->Get();
		++count;
	}


	verify(count == (int)input.GetCount());
}
finally
{
	if (result8 != NULL)
		OP_DELETE(result8);
}

test("delete leaf") leakcheck;
	file uni dir "";
{
	BTree<int> b3(dir, 3, 1);
	SearchIterator<int> *result3 = NULL;
	int i, value, count;

	for (i = 0; i < 4; ++i)
	{
		verify_success(b3.Clear());
		verify_success(b3.Insert(20));
		verify_success(b3.Insert(10));
		verify_success(b3.Insert(30));
		verify_success(b3.Insert(20));

		verify_success(b3.Insert(5 + i * 10));

		verify_success(b3.Delete(5 + i * 10));

		result3 = b3.Search(1000, operatorLT);

		verify(result3 != NULL && result3->Count() != 0);

		count = 1;

		value = result3->Get();
		while (result3->Next())
		{
			verify(value < result3->Get());
			verify(value != 5 + i * 10);
			value = result3->Get();
			++count;
		}

		verify(count == 3);

		OP_DELETE(result3);
		result3 = NULL;
	}
}
finally
{
	if (result3 != NULL)
		OP_DELETE(result3);
}

test("delete random") leakcheck;
	file uni dir "";
{
	const int random[8] = {1, 10, 3, 7, 14, 13, 6, 2};
	const int drandom[8] = {1, 10, 3, 9, 14, 13, 6, 2};
	OpINT32Vector input;
	BTree<int> b8(dir, 8, 1);
	SearchIterator<int> *result8 = NULL;
	int i, j, value, count, max;

	max = 2048;

	for (i = 0; i < max; ++i)
	{
		verify_success(b8.Insert(i * random[i & 7]));
		verify_success(input.Add(i * random[i & 7]));
	}

	verify_success(input.Sort());

	for (i = 0; i < 2048; ++i)
	{
		verify_success(b8.Delete(i * drandom[i & 7]));
		j = input.Search(i * drandom[i & 7]);
		if (input.Get(j) == i * drandom[i & 7])
			input.Remove(j);
	}

	result8 = b8.Search(0, operatorGE);

	verify(result8 != NULL && result8->Count() != 0);

	verify_success(input.Sort());

	count = 1;

	value = result8->Get();
	while (result8->Next())
	{
		if (value >= result8->Get() || value != input.Get(count - 1))
		{
			i = input.Get(count - 1);
		}
		verify(value < result8->Get());
		verify(value == input.Get(count - 1));
		value = result8->Get();
		++count;
	}


	verify(count == (int)input.GetCount());
}
finally
{
	if (result8 != NULL)
		OP_DELETE(result8);
}

test("3 levels delete righmost leaf") leakcheck;
	file uni dir "";
{
	BTree<int> b6(dir, 6, 1);
	int i, max;

	 // root   middle level    leaves
	max = 1  +    2 * 3     +  2 * 4 * 3;

	for (i = 0; i < max; ++i)
		verify_success(b6.Insert(i));

	verify_success(b6.Delete(max - 2));

	verify_success(b6.Commit());

	verify(b6.CheckConsistency() == OpBoolean::IS_TRUE);
}

test("3 levels delete second left leaf") leakcheck;
	file uni dir "";
{
	BTree<int> b6(dir, 6, 1);
	int i, max;

	 // root   middle level    leaves
	max = 1  +    2 * 3     +  2 * 4 * 3;

	for (i = 0; i < max; ++i)
		verify_success(b6.Insert(i));

	verify_success(b6.Delete(6));

	verify_success(b6.Commit());

	verify(b6.CheckConsistency() == OpBoolean::IS_TRUE);
}

test("range delete")
	file uni dir "";
{
	BTree<int> b(dir, 6, 1);
	SearchIterator<int> *it = NULL;

	verify_success(b.Insert(1));
	verify_success(b.Insert(5));
	verify_success(b.Insert(8));
	verify_success(b.Insert(12));
	verify_success(b.Insert(20));

	verify_success(b.Delete(4, operatorGE, 18, operatorLE));

	it = b.SearchFirst();

	verify(it != NULL && !it->Empty());
	verify(it->Get() == 1);
	verify(it->Next());
	verify(it->Get() == 20);
	verify(!it->Next());

	OP_DELETE(it);
	it = NULL;

	verify_success(b.Insert(5));
	verify_success(b.Insert(8));
	verify_success(b.Insert(12));

	verify_success(b.Delete(5, operatorGE, 12, operatorLE));

	it = b.SearchFirst();

	verify(it != NULL && !it->Empty());
	verify(it->Get() == 1);
	verify(it->Next());
	verify(it->Get() == 20);
	verify(!it->Next());

	OP_DELETE(it);
	it = NULL;

	verify_success(b.Insert(5));
	verify_success(b.Insert(8));
	verify_success(b.Insert(12));

	verify_success(b.Delete(1, operatorGT, 20, operatorLT));

	it = b.SearchFirst();

	verify(it != NULL && !it->Empty());
	verify(it->Get() == 1);
	verify(it->Next());
	verify(it->Get() == 20);
	verify(!it->Next());

	OP_DELETE(it);
	it = NULL;

	verify_success(b.Insert(3));
	verify_success(b.Insert(5));
	verify_success(b.Insert(8));
	verify_success(b.Insert(12));
	verify_success(b.Insert(17));
	verify_success(b.Insert(26));

	verify_success(b.Delete(5, operatorEQ, 8, operatorLT));
	verify_success(b.Delete(12, operatorGT, 8, operatorGT));

	it = b.SearchFirst();

	verify(it != NULL && !it->Empty());
	verify(it->Get() == 8);
	verify(it->Next());
	verify(it->Get() == 12);
	verify(!it->Next());

	OP_DELETE(it);
	it = NULL;

	verify_success(b.Delete(0, operatorGT, 30, operatorLT));

	it = b.SearchFirst();

	verify(it != NULL);
	verify(it->Empty());
	verify(b.Empty());
}
finally {
	OP_DELETE(it);
}

test("range delete over multiple branches")
	file uni dir "";
{
	BTree<int> b(dir, 6, 1);
	int i;
	SearchIterator<int> *it = NULL;

	for (i = 1; i < 20; ++i)
		verify_success(b.Insert(i));

	verify_success(b.Delete(1, operatorGT, 8, operatorLT));

	it = b.SearchFirst();

	verify(it != NULL && !it->Empty());
	verify(it->Get() == 1);

	i = 1;
	while (it->Next())
		++i;

	verify_success(it->Error());
	verify(i == 13);

	OP_DELETE(it);
	it = NULL;

	verify_success(b.Delete(8, operatorGT, 20, operatorLT));

	it = b.SearchFirst();

	verify(it != NULL && !it->Empty());
	verify(it->Get() == 1);

	i = 1;
	while (it->Next())
		++i;

	verify_success(it->Error());
	verify(i == 2);
}
finally {
	OP_DELETE(it);
}

test("SIZE 3, many insertions") leakcheck; // Previously valgrind found trouble here
	file uni dir "";
{
	BTree<int> b3(dir, 3, 1);
	int i;

	op_srand((unsigned int)op_time(0));
	for (i = 0; i < 1000; ++i)
	{
		verify_success(b3.Insert(op_rand() & 0x0fffffff));
	}
}

test("LoopDetector")
	disabled; // LoopDetector triggers assert making this test very noisy
{
	LoopDetector<INT32> loopDetector;
	//double complexity = 0;
	int i;

	op_srand((unsigned int)op_time(0));
	for (i = 0; i < 10000; i++)
	{
		int chain_length = (unsigned)op_rand() % 10000 + 1;
		int loopback_point = (unsigned)op_rand() % chain_length;
		int value = 0;
		int n_steps = 0;
		loopDetector.Reset();
		for (;;)
		{
			if (OpStatus::IsError(loopDetector.CheckNext(value)))
				break;

			if (++value == chain_length)
				value = loopback_point;
			++n_steps;
		}
		verify(n_steps >= chain_length && n_steps < chain_length*3);
		//complexity += (double)n_steps / chain_length;
	}
	//complexity /= i;
	//output("\nAverage time used: O(%4.2f*n)\n", complexity);
}
