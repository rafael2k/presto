group "search_engine.log.log";

require SEARCH_ENGINE;

include "modules/search_engine/log/Log.h";

test("text and binary operations")
{
	OutputLogDevice *logger = NULL;
	InputLogDevice *player = NULL;

	verify((logger = SearchEngineLog::CreateLog(SearchEngineLog::FolderFile | SearchEngineLog::LogOnce | SearchEngineLog::FOverwrite, UNI_L("log.txt"), OPFILE_TEMP_FOLDER)) != NULL);

	logger->Write(SearchEngineLog::Debug, NULL, "first message");
	logger->Write(SearchEngineLog::Warning, NULL, "duplicate %s", "message");

	logger->Mask(-1 ^ SearchEngineLog::Notice);

	logger->Write(SearchEngineLog::Notice, NULL, "no message");
	logger->Write(SearchEngineLog::Warning, NULL, UNI_L("duplicate message"));

	logger->Write(SearchEngineLog::Debug, "msgid1", 4, "1234");

	OP_DELETE(logger);
	logger = NULL;

	verify((player = SearchEngineLog::OpenLog(UNI_L("log.txt"), OPFILE_TEMP_FOLDER)) != NULL);

	verify(!player->End());
	verify(player->Read() == OpBoolean::IS_TRUE);

	verify(!player->Binary());

	verify(player->Severity() == SearchEngineLog::Debug);

	verify(player->Id() == NULL);

	verify_string(player->UMessage(), UNI_L("first message"));

	verify(player->Read() == OpBoolean::IS_TRUE);

	verify_string(player->Message(), "duplicate message");

	verify(player->Read() == OpBoolean::IS_TRUE);
	verify(player->End());

	verify(player->DataSize() == 4);
	verify(op_strncmp((const char *)player->Data(), "1234", 4) == 0);
	verify_string(player->Id(), "msgid1");

	verify(player->Read() == OpBoolean::IS_FALSE);

	OP_DELETE(player);
	player = NULL;
}
finally
{
	OP_DELETE(logger);
	OP_DELETE(player);

	{
		OpFile logfile;

		logfile.Construct(UNI_L("log.txt"), OPFILE_TEMP_FOLDER);
		logfile.Delete();
	}
}

test("file operations")
{
	OutputLogDevice *logger = NULL;
	InputLogDevice *player = NULL;
	OpFile binfile;
	OpFileLength bytes_read;
	int i, ri;

	verify((logger = SearchEngineLog::CreateLog(SearchEngineLog::FolderFile | SearchEngineLog::LogOnce | SearchEngineLog::FOverwrite, UNI_L("log.txt"), OPFILE_TEMP_FOLDER)) != NULL);

	verify_success(binfile.Construct(UNI_L("file.bin"), OPFILE_TEMP_FOLDER));
	verify_success(binfile.Open(OPFILE_WRITE));

	for (i = 0; i < 4096; ++i)
		binfile.Write(&i, sizeof(i));

	binfile.Close();

	logger->WriteFile(SearchEngineLog::Info, "file.bin", UNI_L("file.bin"), OPFILE_TEMP_FOLDER);

	binfile.Delete();

	logger->Write(SearchEngineLog::Debug, "eof", "eof");

	OP_DELETE(logger);
	logger = NULL;

	verify((player = SearchEngineLog::OpenLog(UNI_L("log.txt"), OPFILE_TEMP_FOLDER)) != NULL);

	verify(player->Read() == OpBoolean::IS_TRUE);
	verify(player->Binary());

	verify_success(player->SaveData(UNI_L("file.bin"), OPFILE_TEMP_FOLDER));

	verify_success(binfile.Open(OPFILE_READ));

	for (i = 0; i < 4096; ++i)
	{
		verify_success(binfile.Read(&ri, sizeof(ri), &bytes_read));
		verify(bytes_read == sizeof(ri));
		verify(i == ri);
	}

	binfile.Close();

	verify(player->Read() == OpBoolean::IS_TRUE);
	verify(!player->Binary());

	verify_string(player->Id(), player->Message());

	OP_DELETE(player);
	player = NULL;
}
finally
{
	OP_DELETE(logger);
	OP_DELETE(player);

	binfile.Close();
	binfile.Delete();

	{
		OpFile logfile;

		logfile.Construct(UNI_L("log.txt"), OPFILE_TEMP_FOLDER);
		logfile.Delete();
	}
}

