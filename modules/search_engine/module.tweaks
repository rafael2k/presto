TWEAK_SEARCH_ENGINE_ACT_MAX_CACHE_BRANCHES          pavels

    Defines how many ACT braches are kept in cache. One branch is 2560B big.
	Unless the device had a very limited memory, the number should be
	quite high for a good performance.

	Category          : memory
	Define            : ACT_MAX_CACHE_BRANCHES
	Depends on        : SEARCH_ENGINE
	Value             : 4000
	Value for desktop : 4000
	Value for minimal : 250

TWEAK_SEARCH_ENGINE_BTREE_MAX_CACHE_BRANCHES          pavels

    Defines how many B-tree braches are kept in cache.
	Size of one B-tree branch can vary, it's usually between 512B and 4KB.
	Unless the device had a very limited memory, the number should be
	quite high for a good performance.

	Category          : memory
	Define            : BTREE_MAX_CACHE_BRANCHES
	Depends on        : SEARCH_ENGINE
	Value             : 2000
	Value for desktop : 2000
	Value for minimal : 250

TWEAK_SEARCH_ENGINE_VPS_WRAPPER                       pavels

	Use a platform defined wrapper for VisitedSearch, allowing its methods
	to be running in a separate thread. If you enable this tweak, the
	platform needs to provide an implementation of the abstract
	class AsyncVisitedSearch.
	The implementation of the wrapper class AsyncVisitedSearch
	should ensure that the following messages are received and
	handled in a threadsafe manner:
	- MSG_VISITEDSEARCH_PREFLUSH
	- MSG_VISITEDSEARCH_FLUSH
	- MSG_VISITEDSEARCH_COMMIT
        When this tweak is enabled and API_PI_OP_THREAD_TOOLS is
	imported, then, these messages are posted to the
	g_thread_tools. Otherwise the messages are posted to the
	g_main_message_handler.
        If this tweak is enabled, no message handler is registered, so
	the implementation of the wrapper class needs to define and
	register such a message handler.

	Category          : setting
	Define            : VPS_WRAPPER
	Depends on        : FEATURE_VISITED_PAGES_SEARCH
	Enabled for       : none
	Disabled for      : desktop, smartphone, tv, minimal

TWEAK_SEARCH_ENGINE_PHRASESEARCH                      roarl

	Enables phrase search

	Category          : setting
	Define            : SEARCH_ENGINE_PHRASESEARCH
	Depends on        : SEARCH_ENGINE
	Enabled for       : desktop
	Disabled for      : smartphone, tv, minimal

TWEAK_SEARCH_ENGINE_EXPONENTIAL_GROWTH_FILES					roarl

	Exponential growth files are used to limit the number of fragments
	on disk, thereby reducing disk seeks and improving performance.
	Files grow in increments that grow as the file grows, so that
	the number of fragments become 2*log2(n).

	Category          : setting
	Define            : SEARCH_ENGINE_EXPONENTIAL_GROWTH_FILE
	Depends on        : SEARCH_ENGINE
	Enabled for       : desktop
	Disabled for      : smartphone, tv, minimal

TWEAK_SEARCH_ENGINE_EXPONENTIAL_GROWTH_FILE_SMALLEST_SIZE		roarl

	Defines the default smallest size of exponential growth files.
	All of the space is potentially wasted, but it will reduce the
	number of fragments by 2*log2(m), where m is this value.
	Value should be a power of 2.

	Category          : performance, memory
	Define            : EXPONENTIAL_GROWTH_FILE_SMALLEST_SIZE
	Depends on        : SEARCH_ENGINE_EXPONENTIAL_GROWTH_FILE
	Value             : 4096
	Value for desktop : 4096
	Value for minimal : 1024

TWEAK_SEARCH_ENGINE_EXPONENTIAL_GROWTH_FILE_BIGGEST_INCREMENT	roarl

	Defines the biggest increment of growth of exponential growth files.
	Seek time versus sequential reading speed defines a cut-off point
	where exponential growth is not important, because the seek time
	is much less than the time it takes to read the continous segment.
	Value should be a power of 2.

	Category          : performance, memory
	Define            : EXPONENTIAL_GROWTH_FILE_BIGGEST_INCREMENT
	Depends on        : SEARCH_ENGINE_EXPONENTIAL_GROWTH_FILE
	Value             : 67108864
	Value for desktop : 67108864
	Value for minimal : 1048576
