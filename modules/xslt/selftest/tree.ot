/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t -*- */
group "XSLT.Tree";
require XSLT_SUPPORT;

include "modules/xmlutils/xmlparser.h";
include "modules/xslt/src/xslt_tree.h";
include "modules/url/url2.h";
include "modules/url/url_api.h";

test ("Test #1")
{
  XSLT_Tree *tree = 0;
  XMLParser *parser = 0;

  TRAPD (status, tree = XSLT_Tree::MakeL ());
  verify (status == OpStatus::OK);

  URL url;
  url = g_url_api->GetURL ("http://www.opera.com/");
  verify (url.GetAttribute (URL::KUniName, TRUE).Compare (UNI_L ("http://www.opera.com/")) == 0);

  OpString string;
  status = string.Set(#string "tree-test01.xml");
  verify(OpStatus::IsSuccess(status));
  const uni_char *data;
  unsigned length = string.Length();
  while (string.CStr()[length - 1] == 10 || string.CStr()[length - 1] == 13)
    --length;

  verify (XMLParser::Make (parser, NULL, (MessageHandler *) NULL, tree, url) == OpStatus::OK);
  verify (parser->Parse (string.CStr(), length, FALSE) == OpStatus::OK);
  verify (parser->IsFinished ());

  XMLTreeAccessor::Node *root = tree->GetRoot ();
  verify (root);
  verify (tree->GetNodeType (root) == XMLTreeAccessor::TYPE_ROOT);

  XMLTreeAccessor::Node *rootelement = tree->GetFirstChild (root);
  verify (rootelement);
  verify (tree->GetNodeType (rootelement) == XMLTreeAccessor::TYPE_ELEMENT);
  XMLCompleteName rootname;
  tree->GetName (rootname, rootelement);
  verify (rootname == XMLCompleteName ((const uni_char *) 0, (const uni_char *) 0, UNI_L ("root")));

  XMLTreeAccessor::Node *text1 = tree->GetFirstChild (rootelement);
  verify (text1);
  verify (tree->GetNodeType (text1) == XMLTreeAccessor::TYPE_TEXT);
  verify (tree->GetData (data, text1, 0) == OpStatus::OK);
  verify (data && uni_str_eq (data, "text1"));

  XMLTreeAccessor::Node *element1 = tree->GetNextSibling (text1);
  verify (element1);
  verify (tree->GetNodeType (element1) == XMLTreeAccessor::TYPE_ELEMENT);
  XMLCompleteName element1name;
  tree->GetName (element1name, element1);
  verify (element1name == XMLCompleteName ((const uni_char *) 0, (const uni_char *) 0, UNI_L ("element1")));
  XMLTreeAccessor::Attributes *element1attrs;
  tree->GetAttributes (element1attrs, element1, FALSE, TRUE);
  verify (element1attrs->GetCount () == 2);
  XMLCompleteName attr1name;
  const uni_char *attr1value;
  BOOL attr1specified, attr1id;
  verify (element1attrs->GetAttribute (0, attr1name, attr1value, attr1id, attr1specified, 0) == OpStatus::OK);
  verify (attr1name == XMLCompleteName ((const uni_char *) 0, (const uni_char *) 0, UNI_L ("attr1")));
  verify (attr1value && uni_str_eq (attr1value, "value1"));
  verify (attr1specified);
  verify (!attr1id);
  XMLCompleteName attr2name;
  const uni_char *attr2value;
  BOOL attr2specified, attr2id;
  verify (element1attrs->GetAttribute (1, attr2name, attr2value, attr2id, attr2specified, 0) == OpStatus::OK);
  verify (attr2name == XMLCompleteName ((const uni_char *) 0, (const uni_char *) 0, UNI_L ("attr2")));
  verify (attr2value && uni_str_eq (attr2value, "value2"));
  verify (attr2specified);
  verify (!attr2id);
  XMLTreeAccessor::Namespaces *element1namespaces;
  verify (tree->GetNamespaces (element1namespaces, element1) == OpStatus::OK);
  verify (element1namespaces->GetCount () == 1);
  const uni_char *element1prefix1;
  const uni_char *element1uri1;
  element1namespaces->GetNamespace (0, element1uri1, element1prefix1);
  verify (element1prefix1 && uni_str_eq (element1prefix1, "prefix1"));
  verify (element1uri1 && uni_str_eq (element1uri1, "uri1"));

  XMLTreeAccessor::Node *element2 = tree->GetFirstChild (element1);
  verify (element2);
  verify (tree->GetNodeType (element2) == XMLTreeAccessor::TYPE_ELEMENT);
  XMLCompleteName element2name;
  tree->GetName (element2name, element2);
  verify (element2name == XMLCompleteName ((const uni_char *) 0, (const uni_char *) 0, UNI_L ("element2")));
  XMLTreeAccessor::Attributes *element2attrs;
  tree->GetAttributes (element2attrs, element2, FALSE, TRUE);
  verify (element2attrs->GetCount () == 0);
  XMLTreeAccessor::Namespaces *element2namespaces;
  verify (tree->GetNamespaces (element2namespaces, element2) == OpStatus::OK);
  verify (element2namespaces->GetCount () == 2);
  const uni_char *element2prefix1;
  const uni_char *element2uri1;
  element2namespaces->GetNamespace (1, element2uri1, element2prefix1);
  verify (element2prefix1 && uni_str_eq (element2prefix1, "prefix1"));
  verify (element2uri1 && uni_str_eq (element2uri1, "uri1"));
  const uni_char *element2prefix2;
  const uni_char *element2uri2;
  element1namespaces->GetNamespace (0, element2uri2, element2prefix2);
  verify (element2prefix2 && uni_str_eq (element2prefix2, "prefix2"));
  verify (element2uri2 && uni_str_eq (element2uri2, "uri2"));

  XMLTreeAccessor::Node *comment1 = tree->GetNextSibling (element1);
  verify (comment1);
  verify (tree->GetNodeType (comment1) == XMLTreeAccessor::TYPE_COMMENT);
  verify (tree->GetData (data, comment1, 0) == OpStatus::OK);
  verify (data && uni_str_eq (data, "comment1"));

  XMLTreeAccessor::Node *procinst1 = tree->GetNextSibling (comment1);
  verify (procinst1);
  verify (tree->GetNodeType (procinst1) == XMLTreeAccessor::TYPE_PROCESSING_INSTRUCTION);
  verify (tree->GetPITarget (procinst1) && uni_str_eq (tree->GetPITarget (procinst1), "target1"));
  verify (tree->GetData (data, procinst1, 0) == OpStatus::OK);
  verify (data && uni_str_eq (data, "data1"));

  XMLTreeAccessor::Node *iter = root, *nothing;

  iter = tree->GetNext (iter);
  verify (iter && iter == rootelement);
  iter = tree->GetNext (iter);
  verify (iter && iter == text1);
  iter = tree->GetNext (iter);
  verify (iter && iter == element1);
  iter = tree->GetNext (iter);
  verify (iter && iter == element2);
  iter = tree->GetNext (iter);
  verify (iter && iter == comment1);
  iter = tree->GetNext (iter);
  verify (iter && iter == procinst1);
  nothing = tree->GetNext (iter);
  verify (nothing == (void *) 0);

  verify (iter && iter == procinst1);
  iter = tree->GetPrevious (iter);
  verify (iter && iter == comment1);
  iter = tree->GetPrevious (iter);
  verify (iter && iter == element2);
  iter = tree->GetPrevious (iter);
  verify (iter && iter == element1);
  iter = tree->GetPrevious (iter);
  verify (iter && iter == text1);
  iter = tree->GetPrevious (iter);
  verify (iter && iter == rootelement);
  iter = tree->GetPrevious (iter);
  verify (iter && iter == root);
  nothing = tree->GetPrevious (iter);
  verify (nothing == (void *) 0);

  verify (tree->GetNextDescendant (element1, element1) == element2);
  verify (tree->GetNextNonDescendant (element1) == comment1);
  verify (tree->GetPreviousNonAncestor (element2, element2) == text1);
  verify (tree->GetPreviousNonAncestor (element1, element2) == text1);
  verify (tree->GetPreviousNonAncestor (text1, element2) == (void *) 0);
  verify (tree->GetPreviousNonAncestor (root, element2) == (void *) 0);
}
finally
{
  OP_DELETE (tree);
  OP_DELETE (parser);
}
