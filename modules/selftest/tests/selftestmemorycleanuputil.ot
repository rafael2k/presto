/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2002-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "selftest.selftestmemorycleanuputil0";
include "modules/hardcore/timer/optimer.h";
require init;

global
{
	int testasyncoperation_count;
	// Async operation listener simulated by OpTimer
	class TestAsyncOperation : public OpTimerListener
	{
	public:
		void OnTimeOut(OpTimer* timer)
		{
			if (g_selftest.utils->GetMemoryCleanupUtil()->ItemsToCleanup() != 2)
				ST_failed("Unexpected amount of items to cleanup"); 
			else
				ST_passed();
			// No need to dealocate test_operation - they will be deleted automatically
		}
	};
}

// Example test using ST_delete_after_group
test("ST_delete_after_group")
	async;
{
	TestAsyncOperation* test_operation = OP_NEW(TestAsyncOperation, ());
	// Will be dealocated after selftest group finishes
	ST_delete_after_group(test_operation);
	OpTimer* timer = OP_NEW(OpTimer, ());
	ST_delete_after_group(timer);
	timer->SetTimerListener(test_operation);
	timer->Start(1);
}

// new group because we want to test if cleanup really worked
group "selftest.selftestmemorycleanuputil1";

test("Test that SelftestMemoryCleanupUtil::Cleanup was called")
{
	// Everything should be cleaned up after selftest ended
	verify(g_selftest.utils->GetMemoryCleanupUtil()->ItemsToCleanup() == 0);
}

test("test passing NULL to DeleteAfterTest")
{
	OpString* str = NULL;
	verify_status(g_selftest.utils->GetMemoryCleanupUtil()->DeleteAfterTest(str), OpStatus::ERR_NO_MEMORY);
}
