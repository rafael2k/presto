// Tables.  These can be used for foreach, and must be used for
// iterate.  You don't have to specify the types if you are going to
// use the table in a foreach.

group "selftest.tables";

table dirs(const char *) filelist ".." directories;
table txtfiles(const char *) filelist "." name "*.txt" recursively;
table test_file(const char *, double, int) read "test_table.txt";


global {
#define THIS_IS_A_DEFINE 1
#define THIS_IS_ANOTHER_DEFINE 2
}

test( "table test_file" )
{
	iterate( str1, num1, num2 ) from test_file {
		verify( str1 );
		verify( num1 );
		verify( num2 );
	}
}

test( "table filelist *.txt" )
{
	iterate( filename ) from txtfiles {
		verify( filename );
		verify( !op_strcmp( filename+op_strlen(filename)-4, ".txt" ) );
	}
}

test( "table test : $(i)" ) 
    multi test_file(text,f,i);
{
    verify( text && text[0] );
    verify( f );
    verify( i );
    verify( i > f );
}

test( "table directories" )
{
	BOOL passed = FALSE;
	iterate (name) from dirs {
		if (!op_strcmp(name+op_strlen(name)-5, "tests"))
			passed = TRUE;
	}
	verify (passed);
}


table Table1(int,uni_char)  {
  { 0, 'f' },  { 1, 'o' },
  { 2, 'o' },  { 3, '!' },
  { 4, '\0' }
};

table Test(const uni_char *, int) {
	{ UNI_L( "Foo" ):("Fo"+""+"o"),     ('F' + ('o')+ 'o') },
	{ UNI_L( "Bar" ):((("B")+"A")+"R"), ('B' + ('a')+ 'r') },
};

test("Table syntax" )
{
  iterate( string, sum ) from Test {
        int mysum = 0;
	for( unsigned int i = 0; i<uni_strlen(string); i++ )
	  mysum += string[i];
        verify( mysum == sum );
  }
}



// Macros are not yet implemented.
//
// Do we need them, or is a subtest() thing that defines a function
// enough?
//
// macro iterator_one( E,X,Y,Z ) {
//   // Sort of a define. But easier to write.
//   // Both X and $(X) are available in here.
//   verify( X == Y );
//   verify( E[Y] == Z );
// };

test( "Iterate" )
{
  const uni_char *example  = UNI_L( "foo!");
  iterate( index, value ) from Table1 {
    // There is always an implicit variable named '__iter__'.
    verify( __iter__ == index );
    verify( example[index] == value );
  };
}


table Table2 
{
  // descr.     value                   not-value
  { integer,    THIS_IS_A_DEFINE,       0            },
  { string,     "foo bar",              "not"        },
  { uni_char,   UNI_L("foo bar"),       UNI_L("not") },
  { pointer,    (void *)8,              (void *)10   }, 
  { number,     10.9,                   12.0         },
};

// foreach
foreach( type, value, nvalue ) from Table2 
{
	test_equal( "Equal $(type)", value, value );
	test_nequal( "Not equal $(type)", value, nvalue );
	test_equal( "Equal $(type) (failure)", value, nvalue )
		fails;;
	test_nequal( "Not Equal $(type) (failure)", value, value )
		fails;;
}

// Test defines in tables with iterate
table Table3(int, int)
{
	{	0,	0	},
#ifdef _UNDEFINED_
	{	2,	1	},
#endif
#ifndef SELFTEST
 	{	2,	1	},
#endif
#if defined(SELFTEST)
	{	1,	1	},
# ifdef _UNDEFINED_
	{	2,	1	},
# elif defined _UNDEFINED2_
	{	2,	1	},
# else
	{	2,	2	},
# endif	
	{	3,	3	},
#endif
	{	4,	4	}
}

test( "Defines in tables" )
{
	iterate(a, b) from Table3
	{
		verify(a == b);
		if(__iter__ != a)
		{
			output("Error on iteration %n\n", __iter__);
			verify(FALSE);
		}
	}
}

// Test defines in table with foreach and multi
table Table4(const char*, BOOL)
{
	{ "This test should be run", TRUE },
#if 0
	{ "This test should NOT be run!", FALSE},
#endif
	{ "This test shold be run as well", TRUE}
}

foreach (name, success) from Table4
{
	test("Foreach: " name)
		disabled;	// Not working yet!
	{
		verify(success);
	}
}

test ("Multi: $(text)")
	multi Table4(text, success);
{
	verify(success);
}


