/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2004-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Yngve N. Pettersen
*/

group "auth simple cancel";

require init;
language c++;

include "core/pch.h";

require _ENABLE_AUTHENTICATE;
require HTTP_DIGEST_AUTH;

include "modules/dochand/win.h";
include "modules/dochand/docman.h";
include "modules/doc/frm_doc.h";

include "modules/url/url_man.h";
include "modules/network_selftest/basicwincom.h";
include "modules/prefs/prefsmanager/collections/pc_files.h";

global {

	URL_DocSelfTest_Manager *auth_tests = NULL;

	class SimpleTryThenCancelAuthenticationListener
		: public BasicWindowListener
	{
	private:
		URL_ID previous_auth_id;
	public:
		SimpleTryThenCancelAuthenticationListener(URL_DocSelfTest_Manager *manager, OpLoadingListener *fallback)
			: BasicWindowListener(manager, fallback),previous_auth_id(0) {}

		virtual ~SimpleTryThenCancelAuthenticationListener() {}

		BOOL Authenticate(OpAuthenticationCallback* callback)
		{
			if(callback == NULL)
				return FALSE;

			URL_ID authid = callback->UrlId();
			if(authid != previous_auth_id)
			{
				callback->Authenticate(UNI_L("wrong"), UNI_L("tester"));
				previous_auth_id = authid;
			}
			else
				callback->CancelAuthentication();

			return TRUE;
		}

		virtual void OnAuthenticationRequired(OpWindowCommander* commander, OpAuthenticationCallback* callback)
		{
			if (Authenticate(callback))
				return;
			else
			{
				URL empty;
				ReportFailure(empty,"Authentication failed");
			}
		}
	};

    SimpleTryThenCancelAuthenticationListener *listener = NULL;
	WindowCommander *wc=NULL;

    OpString folder;
}

table included_filelist filelist "testfiles/simple_cancel";

table filename_list(const char *, const uni_char *)
{
	{"http://certo3.opera.com/http-protocol-tests/auth/digest/", UNI_L("simple_cancel/cancel.html")},
	{"http://certo3.opera.com/http-protocol-tests/auth/basic/", UNI_L("simple_cancel/cancel.html")},
	//{"http://certo.opera.com/tfw/auth/digest/", UNI_L("simple_cancel/certo_cancel_digest2.html")} // why a second digest test?
};

html { "<html><body>Empty document, Authentication going on. An authentication dialog is a failure.</body></html>" };

setup
{
	urlManager->Clear_Authentication_List();
	auth_tests = OP_NEW(URL_DocSelfTest_Manager, ());

	OpString tmp_storage;
	folder.Set(g_folder_manager->GetFolderPathIgnoreErrors(OPFILE_SELFTEST_DATA_FOLDER, tmp_storage));
	folder.Append(UNI_L("modules/auth/selftest/testfiles/"));
}

exit
{
	OP_DELETE(auth_tests);
	auth_tests = NULL;
	if(wc)
	    wc->SetLoadingListener(listener->GetFallback());
	OP_DELETE(listener);
	listener = NULL;
	urlManager->Clear_Authentication_List();
}

test("Initialized")
{
	verify(auth_tests != NULL);
	verify(folder.HasContent());
}

subtest AddSimpleTest(URL_DocSelfTest_Batch *batch, const OpStringC8 &url, URL &ref_url, const OpStringC &filename)
{
	verify(batch != NULL);
	verify(filename.HasContent());

	OpAutoPtr<URL_DocSimpleTester> test(OP_NEW(URL_DocSimpleTester, ()));
	verify(test.get() != NULL);

	OpString fullfilename;
	verify(OpStatus::IsSuccess(fullfilename.SetConcat(folder,filename)));

	verify(OpStatus::IsSuccess(test->Construct(url, ref_url, fullfilename)));

	verify(batch->AddTestCase(test.release()));
}

subtest AddBatch(URL_DocSelfTest_Batch *batch)
{
	verify(batch != NULL);
	verify(auth_tests->AddBatch(batch));
}

subtest StartTestSet()
{
	verify(auth_tests->SetLastBatch());
}

subtest Setup_SingleTests(const OpStringC8 &batch_id)
{
	URL empty_ref;
	iterate (url, filename) from filename_list
	{
		OpAutoPtr<URL_DocSelfTest_Batch> batch(OP_NEW(URL_DocSelfTest_Batch, ()));

		verify(batch.get() != NULL);

		batch->Construct(state.doc->GetMessageHandler());
		batch->SetBatchID(batch_id);

		verify(AddSimpleTest(batch.get(), url, empty_ref, filename));

		verify(!batch->Empty());

		verify(AddBatch(batch.release()));
	}
}

test("test authentication")
	require success "Initialized";
    async;
{
    wc = state.doc->GetWindow()->GetWindowCommander();
    WindowCommander::SelftestHelper helper(wc);
    listener = OP_NEW(SimpleTryThenCancelAuthenticationListener, (auth_tests, helper.GetPlatformLoadingListener()));
    wc->SetLoadingListener(listener);

	if (!Setup_SingleTests("[Simple_1]") ||
		!StartTestSet())
		ST_failed("Could not start test set");
}
