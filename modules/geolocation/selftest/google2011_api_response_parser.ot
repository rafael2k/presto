/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "geolocation.google2011_api.request_parser";
require GEOLOCATION_SUPPORT;
require GEOLOCATION_GOOGLE2011_LOCATION_PROVIDER_API;

language C++;

include "modules/ecmascript/json_parser.h";
include "modules/geolocation/src/geo_google2011_network_api_response_parser.h";

table response_tests {
	//  test name, response text,
	{    "test 1", UNI_L("{ \"status\": \"OK\", \"accuracy\": 150.0, \"location\": { \"lat\": -33.85702, \"lng\": 151.21494 }, \"access_token\": \"quijibo\" }"),
	//  expected latitude, expected longitude, expected accuracy, expected access token
	            -33.85702,          151.21494,             150.0,      UNI_L("quijibo") },
	{    "test 2", UNI_L("{ \"status\": \"OK\", \"accuracy\": 50.0, \"location\": { \"lat\": 0.0, \"lng\": 52.1231 }, \"access_token\": \"ssda\" }"),
	                  0.0,             52.1231,              50.0,      UNI_L("ssda") },
	{ "no access token", UNI_L("{ \"status\": \"OK\", \"accuracy\": 50.0, \"location\": { \"lat\": 0.0, \"lng\": 52.1231 } }"),
	                  0.0,             52.1231,              50.0,      NULL},
	{ "accept unknown value", UNI_L("{ \"status\": \"OK\", \"accuracy\": 150.0, \"some_value\": true, \"location\": { \"lat\": -33.85702, \"lng\": 151.21494 }, \"access_token\": \"quijibo\" }"),
	            -33.85702,          151.21494,             150.0,      UNI_L("quijibo") },
	{ "accept unknown object", UNI_L("{ \"status\": \"OK\", \"accuracy\": 150.0, \"some_object\": { \"in_some_object\": 123 }, \"location\": { \"lat\": -33.85702, \"lng\": 151.21494 }, \"access_token\": \"quijibo\", \"some_argument_1\": true }"),
	            -33.85702,          151.21494,             150.0,      UNI_L("quijibo") },
	{ "accept unknown array", UNI_L("{ \"status\": \"OK\", \"accuracy\": 150.0, \"some_array\": [ null, true, 432 ], \"location\": { \"lat\": -33.85702, \"lng\": 151.21494 }, \"access_token\": \"quijibo\", \"some_argument_1\": true }"),
	            -33.85702,          151.21494,             150.0,      UNI_L("quijibo") },
	{ "known attributes in unknown object", UNI_L("{ \"status\": \"OK\", \"accuracy\": 150.0, \"location\": { \"lat\": -33.85702, \"lng\": 151.21494 }, \"some_object\": { \"lat\": 73.12, \"accuracy\": 11.3 }, \"access_token\": \"quijibo\", \"some_argument_1\": true }"),
	            -33.85702,          151.21494,             150.0,      UNI_L("quijibo") },
}

foreach (test_name, response_text, expected_latitude, expected_longitude, expected_accuracy, expected_access_token) from response_tests
{
	test("Parse test: " test_name)
	{
		Google2011NetworkApiResponseParser response_parser;
		JSONParser json_parser(&response_parser);

		verify_success(json_parser.Parse(response_text, uni_strlen(response_text)));

		verify(response_parser.GetStatus() == Google2011NetworkApiResponseParser::OK);
		verify(response_parser.GetAccuracy() == expected_accuracy);
		verify(response_parser.GetLatitude() == expected_latitude);
		verify(response_parser.GetLongitude() == expected_longitude);
		if (expected_access_token)
		{
			verify(response_parser.GetAccessToken() != NULL);
			verify_string(response_parser.GetAccessToken(), expected_access_token);
		}
		else
		{
			verify(response_parser.GetAccessToken() == NULL);
		}
	}
}


table response_status_tests {
	//         test name,           response text,                       expected status
	{   "REQUEST_DENIED", UNI_L("{ \"status\": \"REQUEST_DENIED\" }"),   Google2011NetworkApiResponseParser::REQUEST_DENIED },
	{  "INVALID_REQUEST", UNI_L("{ \"status\": \"INVALID_REQUEST\" }"),  Google2011NetworkApiResponseParser::INVALID_REQUEST },
	{     "ZERO_RESULTS", UNI_L("{ \"status\": \"ZERO_RESULTS\" }"),     Google2011NetworkApiResponseParser::ZERO_RESULTS },
	{ "OVER_QUERY_LIMIT", UNI_L("{ \"status\": \"OVER_QUERY_LIMIT\" }"), Google2011NetworkApiResponseParser::OVER_QUERY_LIMIT },
}

foreach (test_name, response_text, expected_status) from response_status_tests
{
	test("Response status test: " test_name)
	{
		Google2011NetworkApiResponseParser response_parser;
		JSONParser json_parser(&response_parser);

		verify_success(json_parser.Parse(response_text, uni_strlen(response_text)));

		verify(response_parser.GetStatus() == expected_status);
	}
}
