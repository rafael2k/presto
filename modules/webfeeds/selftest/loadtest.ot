/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "webfeeds.load";
require init;
require WEBFEEDS_DISPLAY_SUPPORT;

include "modules/webfeeds/webfeeds_api.h";

language C++;

global
{
	class SelftestFeedListener : public OpFeedListener
	{
public:
		SelftestFeedListener() : m_correct_status(OpFeed::STATUS_OK) {}
		SelftestFeedListener(OpFeed::FeedStatus correct_status) : m_correct_status(correct_status) {}
		~SelftestFeedListener() { if (g_webfeeds_api) g_webfeeds_api->RemoveListener(this); }
		void OnUpdateFinished() {}
		void OnFeedLoaded(OpFeed* feed, OpFeed::FeedStatus);
		void OnEntryLoaded(OpFeedEntry* entry, OpFeedEntry::EntryStatus) {}
		void OnNewEntryLoaded(OpFeedEntry* entry, OpFeedEntry::EntryStatus) {}
private:
		OpFeed::FeedStatus m_correct_status;
	};

	class NullListener : public OpFeedListener
	{
public:
		void OnUpdateFinished() {}
		void OnFeedLoaded(OpFeed* feed, OpFeed::FeedStatus) {}
		void OnEntryLoaded(OpFeedEntry* entry, OpFeedEntry::EntryStatus) {}
		void OnNewEntryLoaded(OpFeedEntry* entry, OpFeedEntry::EntryStatus) {}
	};

	void SelftestFeedListener::OnFeedLoaded(OpFeed* feed, OpFeed::FeedStatus status)
	{
		if (status != m_correct_status)
			ST_failed("Got wrong status, status: %d, expected %d\n", status, m_correct_status);

		if (!OpFeed::IsFailureStatus(status))
		{
			URL feed_output_url;
			if (feed && feed->WriteFeed(feed_output_url, TRUE, TRUE) != OpStatus::OK)
				ST_failed("Feed display failed");
	
			URL overview_output_url;
			if (g_webfeeds_api->WriteSubscriptionList(overview_output_url) != OpStatus::OK)
				ST_failed("Subscription list display failed");
		}

		ST_passed();
	}

	SelftestFeedListener success_listener = SelftestFeedListener(OpFeed::STATUS_OK);
	SelftestFeedListener loadfailure_listener = SelftestFeedListener(OpFeed::STATUS_LOADING_ERROR);
	SelftestFeedListener parserfailure_listener = SelftestFeedListener(OpFeed::STATUS_PARSING_ERROR);
}

test("Loading illegal URL")
{
	URL feed_url = g_url_api->GetURL("sdf");

	verify(g_webfeeds_api->LoadFeed(feed_url, NULL) == OpStatus::ERR);
}

test("Loading non-feed") async;
{
	URL feed_url = g_url_api->GetURL("http://www.opera.com/");

	NullListener dummy_listener;
	if (g_webfeeds_api->AddOmniscientListener(&dummy_listener) != OpStatus::OK
		|| g_webfeeds_api->LoadFeed(feed_url, &parserfailure_listener) != OpStatus::OK)
	{
		ST_failed("Loading failed\n");
	}
	g_webfeeds_api->RemoveListener(&dummy_listener);  // this at least shouldn't crash
	g_webfeeds_api->RemoveListener(NULL);   // and neither should this
}

test("Feed loading") async;
{
	URL feed_url = g_url_api->GetURL("http://my.opera.com/desktopteam/xml/atom/blog/");

	if (g_webfeeds_api->LoadFeed(feed_url, &success_listener) != OpStatus::OK)
		ST_failed("Loading failed\n");
}

test("Feed which should fail to load") async;
{
	URL feed_url = g_url_api->GetURL("http://www.opera.com/longnamewhichshouldnotexist.xml");

	if (g_webfeeds_api->LoadFeed(feed_url, &loadfailure_listener) != OpStatus::OK)
		ST_failed("Loading failed\n");
}

test("Feed which should fail to resolve") async;
{
	URL feed_url = g_url_api->GetURL("http://domain.invalid/feed.xml");

	if (g_webfeeds_api->LoadFeed(feed_url, &loadfailure_listener) != OpStatus::OK)
		ST_failed("Loading failed\n");
}
