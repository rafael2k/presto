// -*- Mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
//
// Copyright (C) Opera Software AS.  All rights reserved.
//
// This file is part of the Opera web browser.  It may not be distributed
// under any circumstances.

group "webfeeds.atomconformance";
require init;
require WEBFEEDS_BACKEND_SUPPORT;


include "modules/webfeeds/src/webfeedparser.h";
include "modules/webfeeds/src/webfeed.h";

language C++;

global
{
	class SelftestParserListener : public WebFeedParserListener
	{
	private:
		WebFeed* last_parsed_feed;
	public:
		SelftestParserListener() : last_parsed_feed(NULL) {}
		~SelftestParserListener() { if (last_parsed_feed) last_parsed_feed->DecRef(); }
		WebFeed* GetFeed() { return last_parsed_feed; }
		
		virtual void OnEntryLoaded(OpFeedEntry* entry, OpFeedEntry::EntryStatus, BOOL new_entry) {}
		virtual void ParsingDone(WebFeed* feed, OpFeed::FeedStatus status) { if (status == OpFeed::STATUS_OK) { last_parsed_feed = feed; feed->IncRef(); } }
		virtual void ParsingStarted() {}
	};
	
	WebFeed* parsefeed(char* input, const uni_char* url_str)
	{
		SelftestParserListener parser_listener;
		WebFeedParser parser(&parser_listener);
		OpString url;
		url.Set(url_str);
		parser.Init(url);

		if (parser.Parse(input, op_strlen(input), TRUE) != OpStatus::OK)
			return NULL;

		OpFeed* feed = parser_listener.GetFeed();
		if (feed)
			feed->IncRef();

		return (WebFeed*)feed;
	}
}


test("Link test")
{
	// Start auto-generated code for reading input from files.
	// Because pike selftests create literals which cannot be more than 509 bytes.
	// * created by generate-readcode.py *

	const UINT ninputs = 7;
	const char* input_arr[ninputs];
	UINT input_len = 0;

	input_arr[0] = #string "linktests.xml.00";
	input_arr[1] = #string "linktests.xml.01";
	input_arr[2] = #string "linktests.xml.02";
	input_arr[3] = #string "linktests.xml.03";
	input_arr[4] = #string "linktests.xml.04";
	input_arr[5] = #string "linktests.xml.05";
	input_arr[6] = #string "linktests.xml.06";

	for (UINT i=0; i<ninputs; i++)
	    input_len += op_strlen(input_arr[i]);
	char* input = OP_NEWA(char, input_len+1);
	verify(input != NULL);
	input[0] = '\0';
	for (UINT j=0; j<ninputs; j++)
	    op_strcat(input, input_arr[j]);

	// End auto-generated read code

	WebFeed* feed = parsefeed(input, UNI_L("http://www.snellspace.com/public/linktests.xml"));
	OP_DELETEA(input);
	
	URL entry_alternate = g_url_api->GetURL("http://www.snellspace.com/public/linktests/alternate");
	verify(feed != NULL && !entry_alternate.IsEmpty());

	for(OpFeedEntry* entry = feed->GetFirstEntry(); entry; entry = entry->GetNext())
	{
		verify(entry->GetPrimaryLink() == entry_alternate);
	}
	feed->DecRef();
}


test("XML base test")
{
	// Start auto-generated code for reading input from files.
	// Because pike selftests create literals which cannot be more than 509 bytes, which is far too little.
	// * created by generate-readcode.py *

	const UINT ninputs = 14;
	const char* input_arr[ninputs];
	UINT input_len = 0;

	input_arr[0] = #string "xmlbase.atom.00";
	input_arr[1] = #string "xmlbase.atom.01";
	input_arr[2] = #string "xmlbase.atom.02";
	input_arr[3] = #string "xmlbase.atom.03";
	input_arr[4] = #string "xmlbase.atom.04";
	input_arr[5] = #string "xmlbase.atom.05";
	input_arr[6] = #string "xmlbase.atom.06";
	input_arr[7] = #string "xmlbase.atom.07";
	input_arr[8] = #string "xmlbase.atom.08";
	input_arr[9] = #string "xmlbase.atom.09";
	input_arr[10] = #string "xmlbase.atom.10";
	input_arr[11] = #string "xmlbase.atom.11";
	input_arr[12] = #string "xmlbase.atom.12";
	input_arr[13] = #string "xmlbase.atom.13";

	for (UINT i=0; i<ninputs; i++)
	    input_len += op_strlen(input_arr[i]);
	char* input = OP_NEWA(char, input_len+1);
	verify(input != NULL);
	input[0] = '\0';
	for (UINT j=0; j<ninputs; j++)
	    op_strcat(input, input_arr[j]);

	// End auto-generated read code

	WebFeed* feed = parsefeed(input, UNI_L("http://plasmasturm.org/attic/atom-tests/xmlbase.atom"));
	OP_DELETEA(input);
	
	URL entry_alternate = g_url_api->GetURL("http://example.org/tests/base/result.html");
	verify(feed != NULL && !entry_alternate.IsEmpty());

	for(OpFeedEntry* entry = feed->GetFirstEntry(); entry; entry = entry->GetNext())
	{
		verify(entry->GetPrimaryLink() == entry_alternate);
		if (entry->GetContent())
			verify(uni_strcmp(entry->GetContent()->GetBaseURI(), UNI_L("http://example.org/tests/")) == 0);
	}

	feed->DecRef();
}


test("Order test") disabled; // TODO: we don't support ATOM:source yet, so this test will fail.
{
	// Start auto-generated code for reading input from files.
	// Because pike selftests create literals which cannot be more than 509 bytes, which is far too little.
	// * created by generate-readcode.py *

	const UINT ninputs = 12;
	const char* input_arr[ninputs];
	UINT input_len = 0;

	input_arr[0] = #string "ordertest.xml.00";
	input_arr[1] = #string "ordertest.xml.01";
	input_arr[2] = #string "ordertest.xml.02";
	input_arr[3] = #string "ordertest.xml.03";
	input_arr[4] = #string "ordertest.xml.04";
	input_arr[5] = #string "ordertest.xml.05";
	input_arr[6] = #string "ordertest.xml.06";
	input_arr[7] = #string "ordertest.xml.07";
	input_arr[8] = #string "ordertest.xml.08";
	input_arr[9] = #string "ordertest.xml.09";
	input_arr[10] = #string "ordertest.xml.10";
	input_arr[11] = #string "ordertest.xml.11";

	for (UINT i=0; i<ninputs; i++)
	    input_len += op_strlen(input_arr[i]);
	char* input = OP_DELETEA(char, input_len+1);
	verify(input != NULL);
	input[0] = '\0';
	for (UINT i=0; i<ninputs; i++)
	    op_strcat(input, input_arr[i]);

	// End auto-generated read code

	WebFeed* feed = parsefeed(input, UNI_L("http://www.snellspace.com/public/ordertest.xml"));
	OP_DELETEA(input); input = NULL;

	URL entry_alternate = g_url_api->GetURL("http://www.snellspace.com/public/alternate");
	verify(feed != NULL && !entry_alternate.IsEmpty());

	for(OpFeedEntry* entry = feed->GetFirstEntry(); entry; entry = entry->GetNext())
	{
		verify(entry->GetPrimaryLink() == entry_alternate);
	}

	feed->DecRef();
}

/*
foreach (name, input) from { { UNI_L("html-cdata"), #string "html-cdata.xml"},
	                         { UNI_L("html-entity"), #string "html-entity.xml" },
	                         { UNI_L("html-ncr.xml"), #string "html-ncr.xml" },
		                     { UNI_L("text-cdata.xml"), #string "text-cdata.xml" },
		                     { UNI_L("text-entity.xml"), #string "text-entity.xml" },
	    	                 { UNI_L("text-ncr.xml"), #string "text-ncr.xml" },
	        	             { UNI_L("xhtml-entity.xml"), #string "xhtml-entity.xml" },
	            	         { UNI_L("xhtml-ncr.xml"), #string "xhtml-ncr.xml" }}
{
	test("Escaping test")
	{
		WebFeed* feed = parsefeed(input, name);
		verify(feed != NULL);

		OpFeedEntry* entry = feed->GetFirstEntry();
		verify(entry && entry->GetTitle());
		verify(uni_strcmp(entry->GetTitle()->Data(), UNI_L("<title>")) == 0 ||
			   uni_strcmp(entry->GetTitle()->Data(), UNI_L("&lt;title>")) == 0 ||
			   uni_strcmp(entry->GetTitle()->Data(), UNI_L("&lt;title&gt;")) == 0);
		feed->DecRef();
	}
}

foreach (name, input) from { { UNI_L("nondefaultnamespace-baseline"), #string "nondefaultnamespace-baseline.atom"}
							 { UNI_L("nondefaultnamespace"), #string "nondefaultnamespace.atom"}
						     { UNI_L("nondefaultnamespace-xhtml"), #string "nondefaultnamespace-xhtml.atom"}}
{
	test("XML namespace test")
	{
		WebFeed* feed = parsefeed(input, name);
		verify(feed != NULL);

		OpFeedEntry* entry = feed->GetFirstEntry();
		URL entry_alternate = g_url_api->GetURL("http://example.org/tests/namespace/result.html");

		verify(entry);
		verify(entry->GetPrimaryLink() == entry_alternate);
		feed->DecRef();
	}
}
*/
