# APIs exported by debug module or underlying platform code

API_DBG_PRINTF					mortenro

	Make a simplified "printf" functionality available.  Only
	the following items can be formatted and printed:

	Integers: %d %u %x %p (signed int, unsigned, unsigned hex and pointer)
	Characters: %c (including 16-bit unicode character values)
	C-strings: %s (Zero terminated ISO 8859-1 char string)
	16-bit Unicode strings: %S (Zero terminated uni_char string)

	Regular ISO 8859-1 characters in the format string will be
	printed verbatim (but possibly encoding converted). Printing a '%'
	is achieved through '%%' as usual.

	One key feature of this function is that it does not allocate
	any memory, and can thus be used to report problems from inside
	memory allocation functions (this depends on the platform not
	allocating any for the dbg_systemoutput function either).

	void dbg_printf(const char* format, ...);
	void dbg_print_timestamp(void);
	void log_printf(const char* format, ...);

	Defines:    DEBUG_ENABLE_PRINTF
	Depends on: nothing


API_DBG_OPASSERT				mortenro

	Export the OP_ASSERT macro for simple assertion testing.
	This API is special in that the macro will be defined
	if there is no interest in the API also, but it will be
	an empty statement doing nothing.

	Platforms will typically import this API conditionally
	on the _DEBUG macro, but some platforms may want to
	enable OP_ASSERT without the rest of the debug module.
	Such platforms will have to import this API conditionally
	on a macro of their own choosing.

	Note: This API should not be imported unconditionally.
	Platforms will typically not import this API for release
	builds.

	Core modules with a "module-x-power-debugging" mode may
	wish to import this API condtionally on a particular
	debugging mode.  It must *not* be imported by default.

	void OP_ASSERT(bool expression);

	Defines:    DEBUG_ENABLE_OPASSERT
	Depends on: nothing


API_DBG_SYSTEM_OUTPUT				mortenro

	Export a simple function for outputing unicode text strings
	on the device system console, whatever that may be.  This
	system console is not the same as the Opera console.
	This system console should be considered slow, and ouptut
	to it should be restricted for default builds.

	extern "C" void dbg_systemoutput(const uni_char* text);
	extern "C" void dbg_logfileoutput(const char* text, int len);

	Important: This API must not be imported for release
	builds, i.e. modules can only import this API conditionally
	on some debugging macro like _DEBUG.

	Note: This function must be implemented somewhere on the
	platform, conditionally on the define below.  If no
	suitable output mechanism exists on the platform, this
	function must be implemented as a dummy.

	Defines:    DEBUG_ENABLE_SYSTEM_OUTPUT
	Depends on: nothing


API_DBG_OPTRACER				mortenro

	Export a simple class, OpTracer, which can be used to trace
	the existence, lifetime, refcounts or a value for off-line
	analysis.  Call-stacks will be logged for inspection if
	available.

	Defines:    DEBUG_ENABLE_OPTRACER
	Depends on: nothing
