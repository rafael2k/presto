/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2008 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.  It may not be distributed
 * under any circumstances.
 */

group "debug.dbg_printf";
language C++;

require DEBUG_ENABLE_PRINTF;

global
{
	extern "C" void test_printf(const char* format, ...);
	extern "C" int verify_printf(const uni_char* expected);
}

setup
{
	g_dbg_printf_selftest_data = (uni_char*)op_malloc(16384);
}

exit
{
	op_free(g_dbg_printf_selftest_data);
	g_dbg_printf_selftest_data = 0;
}

test("Plain text output")
	leakcheck;
{
	test_printf("Plain string");
	verify(verify_printf(UNI_L("Plain string")));

	test_printf("Newline\n");
	verify(verify_printf(UNI_L("Newline\n")));

	test_printf("Concatenated ");
	test_printf("Output\n");
	verify(verify_printf(UNI_L("Concatenated Output\n")));
}

test("format %d")
{
	test_printf("Numbers: %d %d %d %d %d\n", -42, -1, 0, 1, 42);
	verify(verify_printf(UNI_L("Numbers: -42 -1 0 1 42\n")));

	// Create 2^31-1 or 2^63-1 depending on sizeof(int)
	unsigned int big = UINT_MAX;
	big >>= 1;

#ifdef SIXTY_FOUR_BIT
	if ( sizeof(int) == 8 )
	{
		// ints are 64-bit
		test_printf("%d", ((int)big)+1);
		verify(verify_printf(UNI_L("-9223372036854775808")));
		test_printf("%d", (int)big);
		verify(verify_printf(UNI_L("9223372036854775807")));
	}
	else
#endif // SIXTY_FOUR_BIT
	{
		// ints are 32-bit
		test_printf("%d %d", big+1, big);
		verify(verify_printf(UNI_L("-2147483648 2147483647")));
	}

	test_printf("%d %d %d %d %d %d %d",
				1, 10, 100, 1000, 10000, 100000, 1000000);
	verify(verify_printf(UNI_L("1 10 100 1000 10000 100000 1000000")));

	test_printf("%d %d %d %d %d %d %d",
				-1, -10, -100, -1000, -10000, -100000, -1000000);
	verify(verify_printf(UNI_L("-1 -10 -100 -1000 -10000 -100000 -1000000")));

	test_printf("%d %d %d",
				10000000, 100000000, 1000000000);
	verify(verify_printf(UNI_L("10000000 100000000 1000000000")));

	test_printf("%d %d %d",
				-10000000, -100000000, -1000000000);
	verify(verify_printf(UNI_L("-10000000 -100000000 -1000000000")));

	test_printf("%d %d %d %d %d %d %d",
				9, 99, 999, 9999, 99999, 999999, 9999999);
	verify(verify_printf(UNI_L("9 99 999 9999 99999 999999 9999999")));

	test_printf("%d %d", 99999999, 999999999);
	verify(verify_printf(UNI_L("99999999 999999999")));

	test_printf("%d %d %d %d %d %d %d",
				-9, -99, -999, -9999, -99999, -999999, -9999999);
	verify(verify_printf(UNI_L("-9 -99 -999 -9999 -99999 -999999 -9999999")));

	test_printf("%d %d", -99999999, -999999999);
	verify(verify_printf(UNI_L("-99999999 -999999999")));

	test_printf("%0d", 5);
	verify(verify_printf(UNI_L("5")));

	test_printf("%000002d", 5);
	verify(verify_printf(UNI_L("05")));

	test_printf("%01d", 5);
	verify(verify_printf(UNI_L("5")));

	test_printf("%02d", 5);
	verify(verify_printf(UNI_L("05")));

	test_printf("%011d", 5);
	verify(verify_printf(UNI_L("00000000005")));

	test_printf("%020d", 5);
	verify(verify_printf(UNI_L("00000000000000000005")));

	test_printf("%030d", 5);
	verify(verify_printf(UNI_L("000000000000000000000000000005")));

}

test("format %u")
{
	test_printf("Unsigned: %u %u %u %u %u", 0, 1, 10, 1234567890, 4294967295U);
	verify(verify_printf(UNI_L("Unsigned: 0 1 10 1234567890 4294967295")));
}

test("format %s")
{
	test_printf("String: '%s og %s!'\n", "hei", "hopp");
	verify(verify_printf(UNI_L("String: 'hei og hopp!'\n")));

	test_printf("Empty: '%s'", "");
	verify(verify_printf(UNI_L("Empty: ''")));

	test_printf("A null-pointer: %s", (char*)0);
	verify(verify_printf(UNI_L("A null-pointer: (null)")));
}

test("format %S (uni_char string)")
{
	uni_char lower[5]; // ARRAY OK 2008-05-15 mortenro
	lower[0] = 230;
	lower[1] = 248;
	lower[2] = 229;
	lower[3] = 0x0633;
	lower[4] = 0;

	test_printf("Lower: '%S'", lower);
	verify(verify_printf(UNI_L("Lower: '\x00E6\x00F8\x00E5\x0633'")));

	uni_char upper[5]; // ARRAY OK 2008-05-15 mortenro
	upper[0] = 198;
	upper[1] = 216;
	upper[2] = 197;
	upper[3] = 0x067a;
	upper[4] = 0;

	test_printf("Upper: '%S'", upper);
	verify(verify_printf(UNI_L("Upper: '\x00C6\x00D8\x00C5\x067a'")));

	test_printf("A null-pointer: %S", (uni_char*)0);
	verify(verify_printf(UNI_L("A null-pointer: (null)")));
}

test("format %B (base64 encoded raw data)")
{
	test_printf("(%B) (%B) (%B) (%B) (%B)",
				"sure.", 5, "sure", 4, "sur", 3, "su", 2, "Man", 3);
	verify(verify_printf(UNI_L("(c3VyZS4=) (c3VyZQ==) (c3Vy) (c3U=) (TWFu)")));
}

test("format %c (single char/uni_char character)")
{
	unsigned char aelig = 230;
	uni_char oslash = 248;
	int aring = 229;
	test_printf("Norsk%c %c%c%c", ':', aelig, oslash, aring);
	verify(verify_printf(UNI_L("Norsk: \x00E6\x00F8\x00E5")));
}

test("format %.*s (size limited string)")
{
	test_printf("A limited '%.*s' string", 5, "shortened");
	verify(verify_printf(UNI_L("A limited 'short' string")));

	test_printf("A %.*s string", 27, "truncated\0 by NUL embedding");
	verify(verify_printf(UNI_L("A truncated string")));

	test_printf("A null pointer: '%.*s'", 1, (char*)0);
	verify(verify_printf(UNI_L("A null pointer: '(null)'")));

	test_printf("A null pointer: '%.*s'", 10, (char*)0);
	verify(verify_printf(UNI_L("A null pointer: '(null)'")));
}
