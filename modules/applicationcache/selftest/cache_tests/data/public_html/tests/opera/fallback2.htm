<html>
<head>
   <title>Test that the manifest FALLBACK mechanism works for an explicit file mapping</title>
<script>
webserver       = window.opener.opera.io.webserver;
verifyTest      = window.opener.verifyTest;
getTestCount    = window.opener.getTestCount;
pauseWebserver  = window.opener.pauseWebserver;
wakeUpWebserver = window.opener.wakeUpWebserver;
checkWebserverStatus = window.opener.checkWebserverStatus;

</script>
<script type="text/javascript" src="resources/subdir1/subdir2/subdir3/subdir4/test.js"></script>
<script>
function log(result, message)
{ 
  if (window.opener == null)
     { 
      document.getElementById('result').innerHTML += result; 
      if (result != "PASS")
         { document.getElementById('result').innerHTML += ": " + message + "<br>"; }
     } 
  else 
     { 
      if (result == "PASS")   { verifyTest(window, true, message); }
      else                    { verifyTest(window, false, message); }
     }
}

function errlog(result, message)
{ log(result, "Received unexpected '" + message + "' event:" + resultstr); }

function test(jscheck)
{
   if (jscheck == 0)                     // Test Script
      { log("FAIL", "No external script was accessed via the manifest when server didn't respond"); }
   else
      {
       if (getTestCount() == 0)
          {
           if (jscheck == 1)
              { log("PASS", ""); }
           else 
              { log("FAIL", "Appcache tried to use fallback content improperly on first load"); }
          }
       else
          {
           if (jscheck == 2)
              { log("PASS", ""); }
           else 
              { log("FAIL", "Appcache tried to use cached file instead of fallback content on second load"); }
          }
      }
   
   verifyTest(window, false, "should not be here");  
}

function SetupServer()
{
  if (getTestCount() > 0)
     { 
      pauseWebserver();
      if (checkWebserverStatus())
          { log("FAIL", "Web server is on when it should be off"); }
     }

  if (applicationCache)
  	applicationCache.onerror = function (e) { verifyTest(window, false, "should not get an error here"); }
}

function StopTest()
{
	verifyTest(window, false,'test canceled');
}

</script>
 


</head>

<body onload="SetupServer();">

<div id="result"></div>

<button onclick="StopTest();">Stop test</button>
</body>
</html>