<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" version="XHTML 1.0" 
      xml:lang="en" manifest="/applicationcache/tests/opera/resources/xhtml3.manifest">
<head>
   <title>Testing events and loading ability of files from manifest in XHTML. File extension "html"</title>
<script type="text/javascript">
//<![CDATA[
webserver       = window.opener.opera.io.webserver;
verifyTest      = window.opener.verifyTest;
getTestCount    = window.opener.getTestCount;
pauseWebserver  = window.opener.pauseWebserver;
wakeUpWebserver = window.opener.wakeUpWebserver;
checkWebserverStatus = window.opener.checkWebserverStatus;

var resultstr    = "";
var xhrresultstr = "";
var xhrstatus    = "";
var testpattern  = "";
var testfile     = "";
var expected1    = "CHECKING-DOWNLOADING-PROGRESS-PROGRESS-PROGRESS-CACHED";
var expected2    = "CHECKING-NOUPDATE";

function log(result, message)
{ 
  if (window.opener == null)
     { 
      document.getElementById('result').innerHTML += result; 
      if (result != "PASS")
         { document.getElementById('result').innerHTML += ": " + message + "<br>"; }
     } 
  else 
     { 
      if (result == "PASS")   { verifyTest(window, true, message); }
      else                    { verifyTest(window, false, message); }
     }
}

function errlog(result, message)
{ log(result, "Received unexpected '" + message + "' event:" + resultstr); }

function verifyLoad(url, message)
{
   var req = new XMLHttpRequest();
   req.open("GET", url, false);
   req.send();
   xhrresultstr = req.responseText;
   xhrstatus    = req.status;
   if (req.status == 200 || req.responseText.indexOf(message) > -1)   { return true; } 
   else                                                               { return false; }
}

function test()
{
  if (getTestCount() == 0)
     { 
      if (resultstr != expected1)   { log("FAIL", "On load 0, expected event chain: " + expected1 + "; got: " + resultstr); }
      else                          { log("PASS", ""); }
     }
  else
     {
      if (resultstr != expected2)
         { log("FAIL", "On load 0, expected event chain: " + expected1 + "; got: " + resultstr); }
      else
         {
          pauseWebserver();
          if (checkWebserverStatus())
             { log("FAIL", "Web server is on when it should be off"); }
          else
             {
              if (!verifyLoad("resources/xhtml3-1.txt", "this is xhtml3-1.txt. It is awesome"))
                 { log("FAIL", "Did not correctly load test file 'resources/xhtml3-1.txt'"); }
              else
                 {
                  if (!verifyLoad("resources/xhtml3-2.txt", "this is xhtml3-2.txt. It is amazing"))
                     { log("FAIL", "Did not correctly load test file 'resources/xhtml3-2.txt'"); }
                  else
                     {
                      if (!verifyLoad("resources/xhtml3-bogus.txt", "bogus"))
                         { log("PASS", ""); }
                      else
                         { log("FAIL", "Was able to somehow load a document that doesn't exist!"); }
                     }
                 }
             }
         }
     }
}

function FinishServer()
{   if (getTestCount() > 0 && !checkWebserverStatus())   { wakeUpWebserver(); }   }

function SetupTest()
{
//	window.opener.resetTimeout(6000);
  applicationCache.addEventListener('checking',    function() { resultstr += "CHECKING"; }, false);
  applicationCache.addEventListener('noupdate',    function() { resultstr += "-NOUPDATE"; test(); }, false);
  applicationCache.addEventListener('downloading', function() { resultstr += "-DOWNLOADING"; }, false);
  applicationCache.addEventListener('progress',    function() { resultstr += "-PROGRESS"; }, false);
  applicationCache.addEventListener('cached',      function() { resultstr += "-CACHED"; test(); }, false);
  applicationCache.addEventListener('updateready', function() { errlog("FAIL", "UPDATEREADY"); }, false);
  applicationCache.addEventListener('obsolete',    function() { errlog("FAIL", "OBSOLETE"); }, false);
  applicationCache.addEventListener('error',       function() { errlog("FAIL", "ERROR"); }, false);
}

//]]>
</script>
</head>

<body onload="SetupTest();">

<p>Testing events and loading ability of files from manifest in XHTML. File extension "xml". Should say 'PASS'</p>

<div id="result"></div>

</body>
</html>
