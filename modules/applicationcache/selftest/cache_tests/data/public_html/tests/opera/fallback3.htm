<html manifest="/applicationcache/tests/opera/resources/fallback3.manifest">
<head>
   <title>Test that the manifest FALLBACK mechanism works for an item that is not pre-stored via the manifest</title>
<script>
webserver       = window.opener.opera.io.webserver;
verifyTest      = window.opener.verifyTest;
getTestCount    = window.opener.getTestCount;
pauseWebserver  = window.opener.pauseWebserver;
wakeUpWebserver = window.opener.wakeUpWebserver;
checkWebserverStatus = window.opener.checkWebserverStatus;

var resultstr    = "";
var xhrresultstr = "";
var testpattern  = "";
var testfile     = "";
var expected1    = "CHECKING-DOWNLOADING-PROGRESS-PROGRESS-PROGRESS-CACHED";
</script>
<script>
function log(result, message)
{ 
  if (window.opener == null)
     { 
      document.getElementById('result').innerHTML += result; 
      if (result != "PASS")
         { document.getElementById('result').innerHTML += ": " + message + "<br>"; }
     } 
  else 
     { 
      if (result == "PASS")   { verifyTest(window, true, message); }
      else                    { verifyTest(window, false, message); }
     }
}

function errlog(result, message)
{ log(result, "Received unexpected '" + message + "' event:" + resultstr); }

function verifyLoad(url)
{
   var req = new XMLHttpRequest();
   req.open("GET", url, false);
   req.send();
   xhrresultstr = req.responseText;
   if (req.status == 200 || req.responseText != "")    { return true; } 
   else                                                { return false; }
}

function test()
{
  var hadError = false;

  if (getTestCount() == 0)
     { 
      if (resultstr != expected1)   { log("FAIL", "On load 0, expected: " + expected1 + "; got: " + resultstr); }
      else                          { log("PASS", ""); }
     }
  else
     {
      // Try loading the explicitly cached file first, verify its contents
//      xhrresultstr = "";
//      testfile     = "resources/fallback-explicit3.txt";
//      testpattern  = "Fallback explicit entry";
//      if (verifyLoad(testfile))
//         {
//          if (xhrresultstr.indexOf(testpattern) == -1)
//             { 
//              hadError = true;
//              log("FAIL", "Received unexpected content for '" + testfile + "'. " + 
//                  "Expected: '" + testpattern + "', Got: '" + xhrresultstr + "'"); 
//             }
//         }
//      else
//         {
//          hadError = true;
//          log("FAIL", "Could not load '" + testfile + "'");
//         }

      // Finally, try to load something with the file mask as its base, verify it is the fallback content that is returned
      xhrresultstr = "";
      testfile     = "resources/subdir1/fallback/fallbacknonexistent.txt";
      testpattern  = "This is the fallback content";
      if (hadError == false && verifyLoad(testfile))
         {
          if (xhrresultstr.indexOf(testpattern) == -1)
             { 
              hadError = true;
              log("FAIL", "Received unexpected content for '" + testfile + "'. " + 
                  "Expected: '" + testpattern + "', Got: '" + xhrresultstr + "'"); 
             }
         }
      else
         {
          hadError = true;
          log("FAIL", "Could not load '" + testfile + "'");
         }

      // Next try loading something non-existent that doesn't match the fallback pattern match, verify it can't be reached

      if (hadError == false)  { log("PASS", ""); }
     }
}

function SetupServer()
{
  if (getTestCount() == 0)
     {
      applicationCache.addEventListener('checking',    function() { resultstr += "CHECKING"; }, false);
      applicationCache.addEventListener('noupdate',    function() { errlog("FAIL", "NOUPDATE"); }, false);
      applicationCache.addEventListener('downloading', function() { resultstr += "-DOWNLOADING"; }, false);
      applicationCache.addEventListener('progress',    function() { resultstr += "-PROGRESS"; }, false);
      applicationCache.addEventListener('cached',      function() { resultstr += "-CACHED"; test(); }, false);
      applicationCache.addEventListener('updateready', function() { errlog("FAIL", "UPDATEREADY"); }, false);
      applicationCache.addEventListener('obsolete',    function() { errlog("FAIL", "OBSOLETE"); }, false);
      applicationCache.addEventListener('error',       function() { errlog("FAIL", "ERROR"); }, false);
     }
  else
     {
      pauseWebserver();
      if (checkWebserverStatus())
          { log("FAIL", "Web server is on when it should be off"); }
      test();
     }
}

</script>
</head>

<body onload="SetupServer();">

<p>Test that the manifest FALLBACK mechanism works for an item that is not pre-stored via the manifest</p>

<div id="result"></div>

</body>
</html>