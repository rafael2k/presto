<html manifest="/applicationcache/tests/opera/resources/fallback1.manifest">
<head>
   <title>Test that the manifest FALLBACK mechanism works for an explicit file mapping</title>
<script>
webserver       = window.opener.opera.io.webserver;
verifyTest      = window.opener.verifyTest;
getTestCount    = window.opener.getTestCount;
pauseWebserver  = window.opener.pauseWebserver;
wakeUpWebserver = window.opener.wakeUpWebserver;
checkWebserverStatus = window.opener.checkWebserverStatus;

var jscheck = 0;
</script>

<script>
function log(result, message)
{ 
  if (window.opener == null)
     { 
      document.getElementById('result').innerHTML += result; 
      if (result != "PASS")
         { document.getElementById('result').innerHTML += ": " + message + "<br>"; }
     } 
  else 
     { 
      if (result == "PASS")   { verifyTest(window, true, message); }
      else                    { verifyTest(window, false, message); }
     }
}

function errlog(result, message)
{ log(result, "Received unexpected '" + message + "' event:" + resultstr); }

function test()
{
	var script_tag = document.createElement('script');
	script_tag.type = "text/javascript";
	script_tag.src = "resources/fallback1.js";
	var head = document.getElementsByTagName('head');
	head[0].appendChild(script_tag);
}

function callback(jscheck)
{
   if (jscheck == 0)  // Test Script
      { return log("FAIL", "No external script was accessed via the manifest when server didn't respond"); }
   else
      {
       if (getTestCount() == 0)
          {
           
           if (jscheck == 1)
              { return log("PASS", ""); }
           else 
              { log("FAIL", "Server is running on second load"); }
          }
       else
          {
           
			if (checkWebserverStatus())
				return log("FAIL", "server status wrong");
           
           if (jscheck == 2)
              { return log("PASS", ""); }
           else 
              { return log("FAIL", "Appcache tried to use cached file instead of fallback content"); }
          }
      }
}

function error()
{
	log("FAIL", "Received unexpected error");
}


function SetupServer()
{
  if (getTestCount() > 0)
  { 
      pauseWebserver();
      if (checkWebserverStatus())
          { log("FAIL", "Web server is on when it should be off"); }

      applicationCache.addEventListener('cached', error, false);
      applicationCache.addEventListener('noupdate', error, false);
      applicationCache.addEventListener('error', test, false);
      
  }
  else
  {      
     applicationCache.addEventListener('cached', test, false);
     applicationCache.addEventListener('noupdate', error, false);
     applicationCache.addEventListener('error', error, false);
  }
//     applicationCache.addEventListener('error', error, false);
}

</script>
</head>

<body onload="SetupServer();">

<div id="result"></div>

</body>
</html>