<html manifest="/applicationcache/update-withmanifest-withchange-checkcontent.manifest">
<head>
  <title>Manifest is present and attempt is made to trigger update() method with manifest changing between checks. 
         XHR is used to test that accessing old content still works while new content doesn't (swapCache() hasn't been triggered).</title>
<script>
webserver    = window.opener.opera.io.webserver;
verifyTest   = window.opener.verifyTest;
getTestCount = window.opener.getTestCount;
pauseWebserver  = window.opener.pauseWebserver;
wakeUpWebserver = window.opener.wakeUpWebserver;
checkWebserverStatus = window.opener.checkWebserverStatus;

var resultstr  = "";
var triggered  = 0;

function log(result, message)
{ 
   if (result == "PASS")
      { 
       document.getElementById('result').innerHTML += result; 
       verifyTest(window, true, message);
      }
   else
      {
       document.getElementById('result').innerHTML += ": " + message + "<br>";
       verifyTest(window, false, message);
       }
}

function errlog(result, message)
{ log(result, "Received unexpected '" + message + "' event. Pending events: " + resultstr); }

function verifyLoad(url, expected)
{
   var req = new XMLHttpRequest();
   expected = expected || "";

   req.open("GET", url, false);
   req.send();
   if (req.status == 200)
      {
       if (req.responseText.indexOf(expected) == -1)  { return 1; }  // Expected pattern not found
       else                                           { return 2; }  // FOUND!
      }
   else 
      { return 0; }
}

function attemptUpdate()
{
   try
      {
       triggered = 1;
       applicationCache.update();
      }
   catch (e)
      { log("FAIL", "Exception detected when trying to execute applicationCache.update()"); }
}

function checkevents()
{
   var theresult = -1;

   attemptUpdate();
   pauseWebserver();
   if (checkWebserverStatus())
      { log("FAIL", "Web server is on when it should be off"); }

   theresult = verifyLoad("tests/opera/resources/update-checkcontent1.txt", 
               "update-checkcontent1.txt. It is awesome.");
   if (theresult == 2)
      { log("FAIL", "Could not access 'update-checkcontent1.txt'"); }
   else if (theresult == 1)
      { log("FAIL", "Incorrect content received 'update-checkcontent1.txt'"); }
   else
      {
       theresult = verifyLoad("tests/opera/resources/update-checkcontent2.txt", 
               "update-checkcontent2.txt. It is pretty.");
       if (theresult != 0)
          { log("FAIL", "'update-checkcontent2.txt' was reachable when it shouldn't be"); }
       else
          { log("PASS", ""); }
      }
}

function test()
{
   applicationCache.onchecking    = function() { resultstr += "CHECKING"; }
   applicationCache.onnoupdate    = function() { errlog("FAIL", "NOUPDATE"); }
   applicationCache.ondownloading = function() { resultstr += "-DOWNLOADING"; }
   applicationCache.oncached      = function() { resultstr += "-CACHED"; checkevents(); }
   applicationCache.onupdateready = function() { errlog("FAIL", "UPDATEREADY"); }
   applicationCache.onobsolete    = function() { errlog("FAIL", "OBSOLETE"); }
   applicationCache.onerror       = function() { errlog("FAIL", "ERROR"); }
}

function SetupServer(thefile)
{
	webserver.addEventListener("update-withmanifest-withchange-checkcontent.manifest", 
						function(e)
               {
                if (e.connection.closed)     { return; }
                var response = e.connection.response;
                response.setResponseHeader("Content-Type", "text/cache-manifest");  
                response.write("CACHE MANIFEST\n");
                response.write("CACHE:\n");
                if (triggered == 0)
								   { response.write("/applicationcache/tests/opera/resources/update-checkcontent1.txt\n"); }
                else
                   { response.write("/applicationcache/tests/opera/resources/update-checkcontent2.txt\n"); }
                response.close();	
               }, false);

test();
}
</script>
</head>

<body onload="SetupServer();">

<p>Manifest is present and attempt is made to trigger update() method with manifest changing between checks. 
   XHR is used to test that accessing old content still works while new content doesn't (swapCache() hasn't been triggered). 
   Should say "PASS"</p>

<div id="result"></div>

</body>
</html>
