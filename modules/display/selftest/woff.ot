/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "display.webfonts.woff";

include "modules/display/woff.h";
include "modules/display/sfnt_base.h";
include "modules/util/opfile/opfile.h";

global
{
	OP_BOOLEAN FileExists(const uni_char* fn)
	{
		OpFile f;
		RETURN_IF_ERROR(f.Construct(fn));
		BOOL exists;
		RETURN_IF_ERROR(f.Exists(exists));
		return exists ? OpBoolean::IS_TRUE : OpBoolean::IS_FALSE;
	}

}

table woff_files(char *) filelist "fonts" name "*.woff";
table ref_files (char *) filelist "fonts" name "*.ttf";

subtest compare_to_file(const uni_char* filename, const UINT8* data, size_t datalen)
{
    OpFile file;
    verify_success(file.Construct(filename));
    verify_success(file.Open(OPFILE_READ));

    OpFileLength filelen;
    verify_success(file.GetFileLength(filelen));
    verify(filelen == (OpFileLength)datalen);

    const OpFileLength bufsize = 1024;
    UINT8 buf[bufsize];
    OpFileLength comp = filelen;
    while (comp)
    {
        const OpFileLength read = MIN(bufsize, comp);
        OpFileLength bytes_read;
        verify_success(file.Read(buf, read, &bytes_read));
        verify(bytes_read == read);
        verify(!op_memcmp(data, buf, static_cast<size_t>(read)));
		data += read;
        comp -= read;
    }
}

foreach (woff_file8) from woff_files
{
    test("$(woff_file8) - memory")
    {
		const UINT8* sfnt_data = 0;
		size_t sfnt_size;

        OpString woff_file;
        verify(OpStatus::IsSuccess(woff_file.Set(woff_file8)));

        OpString ref_file;
        verify(OpStatus::IsSuccess(ref_file.Set(woff_file.CStr(), woff_file.Length() - 5)));
        verify(OpStatus::IsSuccess(ref_file.Append(UNI_L(".ttf"))));

		FontHandle handle;
		verify(OpStatus::IsSuccess(handle.LoadFile(woff_file.CStr())));
		const UINT8* woff_data = handle.Data();
		const size_t woff_size = handle.Size();

        // convert to sfnt
		verify(IswOFF(woff_data, woff_size));
        verify(OpStatus::IsSuccess(wOFF2sfnt(woff_data, woff_size, sfnt_data, sfnt_size)));

        // compare to reference
		verify(!IswOFF(sfnt_data, sfnt_size));
        verify(compare_to_file(ref_file, sfnt_data, sfnt_size));
    }
	finally
	{
		OP_DELETEA(sfnt_data);
	}
}

foreach (woff_file8) from woff_files
{
    test("$(woff_file8) - file")
		file uni temp_file "tmp.ttf";
    {
        OpString woff_file;
        verify(OpStatus::IsSuccess(woff_file.Set(woff_file8)));

        OpString ref_file;
        verify(OpStatus::IsSuccess(ref_file.Set(woff_file.CStr(), woff_file.Length() - 5)));
        verify(OpStatus::IsSuccess(ref_file.Append(UNI_L(".ttf"))));

        // convert to sfnt
		verify(IswOFF(woff_file) == OpBoolean::IS_TRUE);
        verify(OpStatus::IsSuccess(wOFF2sfnt(woff_file, temp_file)));

		const OP_BOOLEAN is_woff = IswOFF(temp_file);
		verify_files_equal(ref_file.CStr(), temp_file);

		// don't leave temp file around
		OpFile f;
		if (OpStatus::IsSuccess(f.Construct(temp_file)))
			f.Delete(FALSE);

        // compare to reference
		verify(is_woff == OpBoolean::IS_FALSE);
    }
}

test("broken wOFF file")
file uni woff "fonts/broken.wofffont"; // sneaky name to avoid it being included in woff_files
file uni ttf  "fonts/broken.ttf";
{
	// check that wOFF file exists
	verify(FileExists(woff) == OpBoolean::IS_TRUE);

	// broken.woff is not a valid wOFF file
	verify(OpStatus::IsError(wOFF2sfnt(woff, ttf)));

	const OP_BOOLEAN exists = FileExists(ttf);
	// if file lingers though it shouldn't, remove it
	if (exists == OpBoolean::IS_TRUE)
	{
		OpFile f;
		if (OpStatus::IsSuccess(f.Construct(ttf)))
			f.Delete(FALSE);
	}

	// wOFF2sfnt shouldn't leave broken files around
	verify(exists == OpBoolean::IS_FALSE);
}
