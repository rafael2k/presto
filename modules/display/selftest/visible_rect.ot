/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2010-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances. */

group "display.visible_rect";
/* Underscore is to ensure that this group runs before display.display.
   Otherwise 'simple frameset test' tend to fail, because the frameset does not span over the whole window
   (maybe display.display is not cleaning up everything). */

/** This is the set of selftests for the following methods:
	VisualDevice::GetVisibleDocumentRect
	VisualDevice::GetDocumentInnerViewClipRect
	CoreView::GetScreenRect
	CoreView::GetVisibleRect
	CoreView::ConvertFromScreen
	CoreViewContainer::ConvertFromScreen
	CoreViewContainer::GetScreenRect */

require init;

include "modules/display/vis_dev.h";
include "modules/doc/frm_doc.h";
include "modules/dochand/win.h";
include "modules/dochand/fdelm.h";
include "modules/widgets/OpScrollbar.h";
include "modules/dochand/viewportcontroller.h";
include "modules/selftest/src/doc_st_utils.h";

global
{
	void GetScrollbarWidths(VisualDevice* vis_dev, int& v_scr_width, int& h_scr_width)
	{
		OpScrollbar *h_scr, *v_scr;

		v_scr_width = 0;
		h_scr_width = 0;

		vis_dev->GetScrollbarObjects(&h_scr, &v_scr);
		if (h_scr && h_scr->IsVisible())
			h_scr_width = h_scr->GetHeight();
		if (v_scr && v_scr->IsVisible())
			v_scr_width = v_scr->GetWidth();
	}

	void FillRectArrayForIframeTestInitialViewportPos(OpRect *rect_array)
	{
		rect_array[0] = OpRect(0, 0, 140, 100);
		rect_array[1] = OpRect(60, 110, 140, 100);
		rect_array[2] = OpRect(0, 0, 140, 100);

		rect_array[3] = OpRect(0, 0, 140, 100);
		rect_array[4] = OpRect(30, 55, 70, 50);
		rect_array[5] = OpRect(0, 0, 140, 100);

		rect_array[6] = OpRect(0, 0, 140, 100);
		rect_array[7] =	OpRect(66, 121, 154, 110);
		rect_array[8] = OpRect(0, 0, 140, 100);
	}

	void FillRectArrayForIframeTestVieportAtIframesTopLeft(OpRect* rect_array)
	{
		rect_array[0] = OpRect(0, 0, 140, 100);
		rect_array[1] = OpRect(0, 0, 140, 100);
		rect_array[2] = OpRect(0, 0, 140, 100);

		rect_array[3] = OpRect(0, 0, 140, 100);
		rect_array[4] = OpRect(0, 0, 70, 50);
		rect_array[5] = OpRect(0, 0, 140, 100);

		rect_array[6] = OpRect(0, 0, 140, 100);
		rect_array[7] =	OpRect(0, 0, 154, 110);
		rect_array[8] = OpRect(0, 0, 140, 100);
	}

	void FillRectArrayForIframeTestVieportMovedPastIframeLeft(OpRect* rect_array)
	{
		rect_array[0] = OpRect(50, 0, 90, 100);
		rect_array[1] = OpRect(0, 110, 90, 100);
		rect_array[2] = OpRect(0, 0, 140, 100);

		rect_array[3] = OpRect(50, 0, 90, 100);
		rect_array[4] = OpRect(0, 55, 45, 50);
		rect_array[5] = OpRect(0, 0, 140, 100);

		rect_array[6] = OpRect(50, 0, 90, 100);
		rect_array[7] =	OpRect(0, 121, 99, 110);
		rect_array[8] = OpRect(0, 0, 140, 100);
	}

	enum FramestInIframeTest
	{
		InitialViewportPos,
		MovedToFrameTopLeft,
		MovedPastTheFrameLeft
	};

	void FillRectArrayForFramesetInIframeTestInitialViewportPos(OpRect *rect_array,
																int v_scr_width,
																int h_scr_width,
																int frame_spacing,
																OpPoint doc_in_frame_offset)
	{
		int width_decrease, height_decrease, screen_frame_spacing;

		// 100 scale
		width_decrease = v_scr_width + frame_spacing / 2;
		height_decrease = h_scr_width;
		screen_frame_spacing = frame_spacing / 2;

		rect_array[0] = OpRect(doc_in_frame_offset.x, doc_in_frame_offset.y, 200 - width_decrease, 200 - height_decrease);
		rect_array[1] = OpRect(210 + screen_frame_spacing, 10, 200 - v_scr_width - screen_frame_spacing, 200 - h_scr_width);
		rect_array[2] = OpRect(doc_in_frame_offset.x, doc_in_frame_offset.y, 200 - width_decrease, 200 - height_decrease);

		// 50 scale
		width_decrease = v_scr_width * 2 + frame_spacing / 2; // v_scr_width to doc
		height_decrease = h_scr_width * 2; // h_scr_width to doc
		screen_frame_spacing = frame_spacing / 2 / 2; // frame_spacing / 2 to screen

		rect_array[3] = OpRect(doc_in_frame_offset.x, doc_in_frame_offset.y, 200 - width_decrease, 200 - height_decrease);
		rect_array[4] = OpRect(105 + screen_frame_spacing, 5, 100 - v_scr_width - screen_frame_spacing, 100 - h_scr_width);
		rect_array[5] = OpRect(doc_in_frame_offset.x, doc_in_frame_offset.y, 200 - width_decrease, 200 - height_decrease);

		// 120 scale

		width_decrease = v_scr_width * 100 / 120 + frame_spacing / 2; // v_scr_width to doc
		height_decrease = h_scr_width * 100 / 120; // h_scr_width to doc
		screen_frame_spacing = ((frame_spacing / 2) * 120) / 100; // frame_spacing / 2 to screen

		rect_array[6] = OpRect(doc_in_frame_offset.x, doc_in_frame_offset.y, 200 - width_decrease, 200 - height_decrease);
		rect_array[7] = OpRect(252 + screen_frame_spacing, 12, 240 - v_scr_width - screen_frame_spacing, 240 - h_scr_width);
		rect_array[8] = OpRect(doc_in_frame_offset.x, doc_in_frame_offset.y, 200 - width_decrease, 200 - height_decrease);
	}

	void FillRectArrayForFramesetInIframeTestMovedToFrameTopLeft(OpRect *rect_array,
																int v_scr_width,
																int h_scr_width,
																int frame_spacing)
	{
		int width_decrease, height_decrease, screen_frame_spacing;

		// 100 scale
		width_decrease = v_scr_width + frame_spacing / 2;
		height_decrease = h_scr_width;
		screen_frame_spacing = frame_spacing / 2;

		rect_array[0] = OpRect(0, 0, 200 - width_decrease, 200 - height_decrease);
		rect_array[1] = OpRect(screen_frame_spacing, 0, 200 - v_scr_width - screen_frame_spacing, 200 - h_scr_width);
		rect_array[2] = OpRect(0, 0, 200 - width_decrease, 200 - height_decrease);

		// 50 scale
		width_decrease = v_scr_width * 2 + frame_spacing / 2; // v_scr_width to doc
		height_decrease = h_scr_width * 2; // h_scr_width to doc
		screen_frame_spacing = frame_spacing / 2 / 2; // frame_spacing / 2 to screen

		rect_array[3] = OpRect(0, 0, 200 - width_decrease, 200 - height_decrease);
		rect_array[4] = OpRect(screen_frame_spacing, 0, 100 - v_scr_width - screen_frame_spacing, 100 - h_scr_width);
		rect_array[5] = OpRect(0, 0, 200 - width_decrease, 200 - height_decrease);

		// 120 scale

		width_decrease = v_scr_width * 100 / 120 + frame_spacing / 2; // v_scr_width to doc
		height_decrease = h_scr_width * 100 / 120; // h_scr_width to doc
		screen_frame_spacing = ((frame_spacing / 2) * 120) / 100; // frame_spacing / 2 to screen

		rect_array[6] = OpRect(0, 0, 200 - width_decrease, 200 - height_decrease);
		rect_array[7] = OpRect(screen_frame_spacing, 0, 240 - v_scr_width - screen_frame_spacing, 240 - h_scr_width);
		rect_array[8] = OpRect(0, 0, 200 - width_decrease, 200 - height_decrease);
	}

	void FillRectArrayForFramesetInIframeTestMovedPastTheFrameLeft(OpRect *rect_array,
																   int v_scr_width,
																   int h_scr_width,
																   int frame_spacing,
																   OpPoint doc_in_frame_offset)
	{
		int width_decrease, height_decrease;

		// 100 scale
		width_decrease = v_scr_width;
		height_decrease = h_scr_width;

		rect_array[0] = OpRect(100 - frame_spacing / 2 + doc_in_frame_offset.x, doc_in_frame_offset.y, 100 - width_decrease, 200 - height_decrease);
		rect_array[1] = OpRect(0, 10, 100 - v_scr_width, 200 - h_scr_width);
		rect_array[2] = OpRect(doc_in_frame_offset.x, doc_in_frame_offset.y, 200 - width_decrease - frame_spacing / 2, 200 - height_decrease);

		// 50 scale
		width_decrease = v_scr_width * 2;  // v_scr_width to doc
		height_decrease = h_scr_width * 2; // h_scr_width to doc

		rect_array[3] = OpRect(100 - frame_spacing / 2 + doc_in_frame_offset.x, doc_in_frame_offset.y, 100 - width_decrease, 200 - height_decrease);
		rect_array[4] = OpRect(0, 5, 50 - v_scr_width, 100 - h_scr_width);
		rect_array[5] = OpRect(doc_in_frame_offset.x, doc_in_frame_offset.y, 200 - width_decrease - frame_spacing / 2, 200 - height_decrease);

		// 120 scale

		width_decrease = v_scr_width * 100 / 120;  // v_scr_width to doc
		height_decrease = h_scr_width * 100 / 120; // h_scr_width to doc

		rect_array[6] = OpRect(100 - frame_spacing / 2 + doc_in_frame_offset.x, doc_in_frame_offset.y, 100 - width_decrease, 200 - height_decrease);
		rect_array[7] = OpRect(0, 12, 120 - v_scr_width, 240 - h_scr_width);
		rect_array[8] = OpRect(doc_in_frame_offset.x, doc_in_frame_offset.y, 200 - width_decrease - frame_spacing / 2, 200 - height_decrease);
	}

	void FillRectArrayForFramesetTest(OpRect *rect_array,
									  int window_width,
									  int window_height,
									  int v_scr_width,
									  int h_scr_width,
									  int frame_spacing,
									  OpPoint doc_in_frame_offset)
	{
		int screen_frame_spacing, width_scaled, height_scaled;

		// 100 scale
		screen_frame_spacing = frame_spacing / 2; // scaled to screen
		width_scaled = window_width / 2 - v_scr_width - screen_frame_spacing; // scaled to doc
		height_scaled = window_height - h_scr_width; // scaled to doc

		rect_array[0] = OpRect(doc_in_frame_offset.x, doc_in_frame_offset.y, width_scaled, height_scaled);
		rect_array[1] = OpRect(window_width / 2 + screen_frame_spacing, 0,
			window_width / 2 - v_scr_width - screen_frame_spacing, window_height - h_scr_width);
		rect_array[2] = rect_array[0];

		// 50 scale
		screen_frame_spacing = frame_spacing / 2 / 2; // scaled to screen
		width_scaled = (window_width / 2 - v_scr_width - screen_frame_spacing) * 2; // scaled to doc
		height_scaled = (window_height - h_scr_width) * 2;// scaled to doc

		rect_array[3] = OpRect(doc_in_frame_offset.x, doc_in_frame_offset.y, width_scaled, height_scaled);
		rect_array[4] = OpRect(window_width / 2 + screen_frame_spacing, 0,
			window_width / 2 - v_scr_width - screen_frame_spacing, window_height - h_scr_width);
		rect_array[5] = rect_array[3];

		// 120 scale

		screen_frame_spacing = (frame_spacing / 2) * 120 / 100; // scaled to screen
		width_scaled = (window_width / 2 - v_scr_width - screen_frame_spacing) * 100 / 120; // scaled to doc
		height_scaled = (window_height - h_scr_width) * 100 / 120; // scaled to doc

		rect_array[6] = OpRect(doc_in_frame_offset.x, doc_in_frame_offset.y, width_scaled, height_scaled);
		rect_array[7] = OpRect(window_width / 2 + screen_frame_spacing, 0,
			window_width / 2 - v_scr_width - screen_frame_spacing, window_height - h_scr_width);
		rect_array[8] = rect_array[6];
	}
}

table dummy(const char *) filelist "tests/visible_rect" recursively;

/**	Test the VisualDevice::GetVisibleDocumentRect, VisualDevice::GetDocumentInnerViewClipRect
	and CoreView::GetScreenRect triple. When single_scale param is FALSE:
		- stores the current scale
		- uses three scales: 50, 100, last_scale.
		- restores the scale that was before running this subtest
	When the single_scale param is TRUE:
		- does not change the scale at all.
		- tests just the current scale (the last_scale param is not used).
	error - how much error do we allow when comparing rects.
	Scaling errors with in case of framesets may become bigger than one, because of separate scaling of different components,
	like frame spacer, frames positions and sizes. */
subtest ScaleTests(VisualDevice* frame_dev, OpRect* rect_array, BOOL single_scale, unsigned int last_scale, unsigned int error)
{
	FramesDocument* doc = state.doc;
	CoreView* frame_view = frame_dev->GetView();
	INT32 initial_scale = 100; // Init to silence a warning.

	if (!single_scale)
	{
		initial_scale = state.doc->GetWindow()->GetScale();
		if (initial_scale != 100)
			DocSTUtils::SetScale(doc, 100);
	}

	// 100 or current scale tests
	OpRect visible_doc_rect = frame_dev->GetVisibleDocumentRect(),
		visible_screen_rect = frame_view->GetScreenRect(),
		visible_doc_rect_by_scroll = frame_dev->GetDocumentInnerViewClipRect();
	OpPoint top_doc_screen_offset = doc->GetVisualDevice()->GetView()->ConvertToScreen(OpPoint(0,0));

	visible_screen_rect.OffsetBy(-top_doc_screen_offset);

	verify(rects_equal_with_error(visible_doc_rect, rect_array[0], error));
	verify(rects_equal_with_error(visible_screen_rect, rect_array[1], error));
	verify(rects_equal_with_error(visible_doc_rect_by_scroll, rect_array[2], error));

	if (!single_scale)
	{
		// 50 scale tests
		DocSTUtils::SetScale(doc, 50);
		visible_doc_rect = frame_dev->GetVisibleDocumentRect(),
		visible_screen_rect = frame_view->GetScreenRect();
		visible_doc_rect_by_scroll = frame_dev->GetDocumentInnerViewClipRect();
		visible_screen_rect.OffsetBy(-top_doc_screen_offset);

		verify(rects_equal_with_error(visible_doc_rect, rect_array[3], error));
		verify(rects_equal_with_error(visible_screen_rect, rect_array[4], error));
		verify(rects_equal_with_error(visible_doc_rect_by_scroll, rect_array[5], error));

		// last_scale scale tests
		DocSTUtils::SetScale(doc, last_scale);
		visible_doc_rect = frame_dev->GetVisibleDocumentRect(),
		visible_screen_rect = frame_view->GetScreenRect();
		visible_doc_rect_by_scroll = frame_dev->GetDocumentInnerViewClipRect();
		visible_screen_rect.OffsetBy(-top_doc_screen_offset);

		verify(rects_equal_with_error(visible_doc_rect, rect_array[6], error));
		verify(rects_equal_with_error(visible_screen_rect, rect_array[7], error));
		verify(rects_equal_with_error(visible_doc_rect_by_scroll, rect_array[8], error));
	}
}
finally
{
	if(!single_scale)
		DocSTUtils::SetScale(state.doc, initial_scale);
}

html
{
//! <!DOCTYPE html>
//! <html>
//! <body>
//! </body>
//! </html>
}

test("PRECONDITION: default viewport request listener")
	/** Ensuring that there is no sophisticated way of viewport dealing present (like adaptive zoom).
		FIXME: The tests shouldn't really depend on that. Make scale changes async. */
{
	ViewportController* viewCtrl = state.doc->GetWindow()->GetViewportController();
	verify(viewCtrl->HasDefaultViewportRequestListener() == TRUE);

	// Set the scale that is assumed default during the below selftests (just in case)
	DocSTUtils::SetScale(state.doc, 100);
}

test("PRECONDITION: visual viewport size for iframes test")
	require success "PRECONDITION: default viewport request listener";
{
	OpRect visual_viewport = state.doc->GetVisualViewport();

	verify(visual_viewport.width >= 220 && visual_viewport.width < 5000 &&
		visual_viewport.height >= 255 && visual_viewport.height < 2500);
}

test("load iframe in iframe visible rects") async;
	require success "PRECONDITION: visual viewport size for iframes test";
	file uni iframe_in_iframe "tests/visible_rect/iframe_in_iframe/top_doc.htm";
{
	Window* win = state.GetWindow();
	if (!win)
		ST_failed("No window!");
	else
		WaitUntilLoadedObj::LoadAndWaitUntilLoaded(win, iframe_in_iframe);
}

test("iframe in iframe visible rects 1")
	require success "load iframe in iframe visible rects";
{
	FramesDocument* doc = state.doc;
	FramesDocElm* second_iframe = DocSTUtils::GetFrameById(doc, "second_iframe");
	OpRect rect_array[9];

	verify(second_iframe);

	VisualDevice* frame_dev = second_iframe->GetVisualDevice();

	FillRectArrayForIframeTestInitialViewportPos(rect_array);
	verify(ScaleTests(frame_dev, rect_array, FALSE, 110, 1));
}

test("move visual viewport 1") async;
	require success "load iframe in iframe visible rects";
{
	MoveVisualViewportObj::MoveVisualViewport(60, 110);
}

test("iframe in iframe visible rects 2")
	require success "load iframe in iframe visible rects";
	require success "move visual viewport 1";
{
	FramesDocument* doc = state.doc;
	FramesDocElm* second_iframe = DocSTUtils::GetFrameById(doc, "second_iframe");
	OpRect rect_array[9];

	verify(second_iframe);

	VisualDevice* frame_dev = second_iframe->GetVisualDevice();

	FillRectArrayForIframeTestVieportAtIframesTopLeft(rect_array);
	verify(ScaleTests(frame_dev, rect_array, FALSE, 110, 1));
}

test("move visual viewport 2") async;
	require success "load iframe in iframe visible rects";
{
	MoveVisualViewportObj::MoveVisualViewport(110, 0);
}

test("iframe in iframe visible rects 3")
	require success "load iframe in iframe visible rects";
	require success "move visual viewport 2";
{
	FramesDocument* doc = state.doc;
	FramesDocElm* second_iframe = DocSTUtils::GetFrameById(doc, "second_iframe");
	OpRect rect_array[9];

	verify(second_iframe);

	VisualDevice* frame_dev = second_iframe->GetVisualDevice();

	FillRectArrayForIframeTestVieportMovedPastIframeLeft(rect_array);
	verify(ScaleTests(frame_dev, rect_array, FALSE, 110, 1));
}

test("reset visual viewport 1") async;
	require success "PRECONDITION: default viewport request listener";
{
	MoveVisualViewportObj::MoveVisualViewport(0, 0);
}

subtest FramesetInIframeTest(FramestInIframeTest test)
{
	FramesDocElm *second_frame = DocSTUtils::GetFrameById(state.doc, "second_frame"), *iframe = DocSTUtils::GetFrameById(state.doc, "the_iframe"),
		*root;
	OpRect correct_rects[9];
	BOOL moved_vis_viewport = FALSE;
	FramesDocument* doc_in_frame = NULL;

	verify(second_frame && iframe);

	root = iframe->GetCurrentDoc() ? iframe->GetCurrentDoc()->GetFrmDocRoot() : NULL;

	verify(root);

	VisualDevice* frame_dev = second_frame->GetVisualDevice();
	int v_scr_width, h_scr_width,
		frame_spacing = root->GetFrameSpacing();
	GetScrollbarWidths(frame_dev, v_scr_width, h_scr_width);

	switch (test)
	{
	case InitialViewportPos:
		FillRectArrayForFramesetInIframeTestInitialViewportPos(correct_rects, v_scr_width, h_scr_width, frame_spacing, OpPoint(0, 0));
		break;
	case MovedToFrameTopLeft:
		FillRectArrayForFramesetInIframeTestMovedToFrameTopLeft(correct_rects, v_scr_width, h_scr_width, frame_spacing);
		break;
	case MovedPastTheFrameLeft:
		FillRectArrayForFramesetInIframeTestMovedPastTheFrameLeft(correct_rects, v_scr_width, h_scr_width, frame_spacing, OpPoint(0, 0));
		break;
	default:
		OP_ASSERT(!"Invalid frameset in iframe test type!");
	}

	verify(ScaleTests(frame_dev, correct_rects, FALSE, 120, 1));

	if (test != MovedToFrameTopLeft)
	{
		doc_in_frame = second_frame->GetCurrentDoc();
		OpPoint new_offset(200, 200);
		verify(doc_in_frame);

		doc_in_frame->RequestSetVisualViewPos(new_offset.x, new_offset.y, VIEWPORT_CHANGE_REASON_SELFTEST);
		moved_vis_viewport = TRUE;
		switch (test)
		{
		case InitialViewportPos:
			FillRectArrayForFramesetInIframeTestInitialViewportPos(correct_rects, v_scr_width, h_scr_width, frame_spacing, new_offset);
			break;
		case MovedPastTheFrameLeft:
			FillRectArrayForFramesetInIframeTestMovedPastTheFrameLeft(correct_rects, v_scr_width, h_scr_width, frame_spacing, new_offset);
			break;
		default:
			OP_ASSERT(!"Invalid frameset in iframe test type!");
		}
		verify(ScaleTests(frame_dev, correct_rects, FALSE, 120, 1));
	}
}
finally
{
	if (moved_vis_viewport)
		doc_in_frame->RequestSetVisualViewPos(0, 0, VIEWPORT_CHANGE_REASON_SELFTEST);
}

test("PRECONDITION: frameset in iframe tests")
	require success "reset visual viewport 1";
{
	int frm_policy = state.doc->GetFramesPolicy();

	if (frm_policy == FRAMES_POLICY_DEFAULT)
		frm_policy = state.doc->GetWindow()->GetFramesPolicy();

	verify(frm_policy == FRAMES_POLICY_NORMAL);

	OpRect visual_viewport = state.doc->GetVisualViewport();

	verify(visual_viewport.width >= 500 && visual_viewport.width <= 5000 &&
		visual_viewport.height >= 260 && visual_viewport.height <= 2500);
}

test("load frameset in iframe doc") async;
	require success "PRECONDITION: frameset in iframe tests";
	file uni frameset_in_iframe "tests/visible_rect/frameset_in_iframe/top_doc.htm";
{
	Window* win = state.GetWindow();
	if (!win)
		ST_failed("No window!");
	else
		WaitUntilLoadedObj::LoadAndWaitUntilLoaded(win, frameset_in_iframe);
}

test("frameset in iframe visible rects initial viewport pos")
	require success "load frameset in iframe doc";
{
	verify(FramesetInIframeTest(InitialViewportPos));
}

test("move visual viewport 3") async;
	require success "load frameset in iframe doc";
{
	MoveVisualViewportObj::MoveVisualViewport(210, 10);
}

test("frameset in iframe visible rects viewport pos beginning of second frame")
	require success "load frameset in iframe doc";
	require success "move visual viewport 3";
{
	verify(FramesetInIframeTest(MovedToFrameTopLeft));;
}

test("move visual viewport 4") async;
	require success "load frameset in iframe doc";
{
	MoveVisualViewportObj::MoveVisualViewport(310, 0);
}

test("frameset in iframe visible rects viewport past the left of the frame")
	require success "load frameset in iframe doc";
	require success "move visual viewport 4";
{
	verify(FramesetInIframeTest(MovedPastTheFrameLeft));
}

test("reset visual viewport 2") async;
	require success "PRECONDITION: default viewport request listener";
{
	MoveVisualViewportObj::MoveVisualViewport(0, 0);
}

test("PRECONDITION: simple frameset tests")
	disabled;
	/* Simple frameset test is disabled due to random behavior - depends on test group order, random issues
	   like wrong frameset size or not proper scale setting occur. */
	require success "reset visual viewport 2";
{
	verify(state.doc->GetFramesPolicy() == FRAMES_POLICY_NORMAL);

	OpWindow *op_win = state.doc->GetWindow()->GetOpWindow();
	UINT32 width, height;

	op_win->GetInnerSize(&width, &height);

	verify(width >= 200 && width <= 5000 && height >= 200 && height <= 5000);
}

test("load frameset") async;
	require success "PRECONDITION: simple frameset tests";
	file uni simple_frameset "tests/visible_rect/frameset_in_iframe/frameset.htm";
{
	Window* win = state.GetWindow();
	if (!win)
		ST_failed("No window!");
	else
		WaitUntilLoadedObj::LoadAndWaitUntilLoaded(win, simple_frameset);
}

test("simple frameset test")
	require success "load frameset";
{
	FramesDocument* doc = state.doc;
	FramesDocElm *second_frame = DocSTUtils::GetFrameById(state.doc, "second_frame"), *root;
	OpRect correct_rects[9];
	UINT32 width, height;
	BOOL moved_vis_viewport = FALSE;
	FramesDocument* doc_in_frame = NULL;

	verify(second_frame);

	root = doc->GetFrmDocRoot();

	verify(root);

	VisualDevice* frame_dev = second_frame->GetVisualDevice();
	int v_scr_width, h_scr_width,
		frame_spacing = root->GetFrameSpacing();
	GetScrollbarWidths(frame_dev, v_scr_width, h_scr_width);
	state.doc->GetWindow()->GetOpWindow()->GetInnerSize(&width, &height);

	FillRectArrayForFramesetTest(correct_rects, (int) width, (int) height, v_scr_width, h_scr_width, frame_spacing, OpPoint(0, 0));
	verify(ScaleTests(frame_dev, correct_rects, FALSE, 120, 2));

	doc_in_frame = second_frame->GetCurrentDoc();
	OpPoint new_offset(200, 200);
	verify(doc_in_frame);

	doc_in_frame->RequestSetVisualViewPos(new_offset.x, new_offset.y, VIEWPORT_CHANGE_REASON_SELFTEST);
	moved_vis_viewport = TRUE;
	FillRectArrayForFramesetTest(correct_rects, (int) width, (int) height, v_scr_width, h_scr_width, frame_spacing, new_offset);
	verify(ScaleTests(frame_dev, correct_rects, FALSE, 120, 2));
}
finally
{
	if (moved_vis_viewport)
		doc_in_frame->RequestSetVisualViewPos(0, 0, VIEWPORT_CHANGE_REASON_SELFTEST);
}

test("load transformed iframe doc") async;
	disabled; // The "transformed iframe test" is disabled due to various unsolved scaled iframe bugs e.g. CORE-35897
	require CSS_TRANSFORMS;
	require success "reset visual viewport 2";
	file uni transformed_iframe "tests/visible_rect/transform_on_iframe/top_doc.htm";
{
	Window* win = state.GetWindow();
	if (!win)
		ST_failed("No window!");
	else
		WaitUntilLoadedObj::LoadAndWaitUntilLoaded(win, transformed_iframe);
}
test("wait until event handlers attached") async;
	require success "load transformed iframe doc";
{
	CheckJSFunctionExecutedObj::WaitUntilJSFunctionExecuted(state.doc);
}

test("transformed iframe test")
	require success "wait until event handlers attached";
{
	OpRect fake_viewport_rect(0, 0, 50, 100),
		   old_viewport_rect;
	int negative_overflow = state.doc->NegativeOverflow(), old_width = 0, old_height = 0;
	ViewportController* viewCtrl = state.doc->GetWindow()->GetViewportController();
	CoreView* view = state.doc->GetVisualDevice()->GetView();
	AffinePos zero_pos(0, 0);
	FramesDocElm *second_frame = DocSTUtils::GetFrameById(state.doc, "second_iframe");
	VisualDevice* frame_dev;
	OpRect rect_triple[3];
	BOOL restore_core_view_size = FALSE;

	verify(second_frame);
	verify(negative_overflow == 0); // shouldn't be any for that doc
	frame_dev = second_frame->GetCurrentDoc() ? second_frame->GetCurrentDoc()->GetVisualDevice() : NULL;

	verify(frame_dev);

	// scale 100
	old_viewport_rect = state.doc->GetVisualViewport();
	view->GetSize(&old_width, &old_height);
	// Fake visual viewport size
	viewCtrl->LockVisualViewportSize(FALSE);
	viewCtrl->SetVisualViewport(fake_viewport_rect);
	// Fake top doc's CoreViewContainer size
	ST_CoreViewHacks::FakeCoreViewSize(view, 50, 100);
	restore_core_view_size = TRUE;

	rect_triple[0] = OpRect(0, 0, 106, 35);
	rect_triple[1] = OpRect(0, 0, 50, 100);
	rect_triple[2] = OpRect(0, 0, 141, 71);

	verify(ScaleTests(frame_dev, rect_triple, TRUE, 120, 1));

	ST_CoreViewHacks::FakeCoreViewSize(view, old_width, old_height);
	viewCtrl->SetVisualViewport(old_viewport_rect);
	viewCtrl->LockVisualViewportSize(TRUE);

	// scale 50
	DocSTUtils::SetScale(state.doc, 50);
	old_viewport_rect = state.doc->GetVisualViewport();
	view->GetSize(&old_width, &old_height);
	// Fake visual viewport size
	viewCtrl->LockVisualViewportSize(FALSE);
	viewCtrl->SetVisualViewport(fake_viewport_rect);
	// Fake top doc's CoreViewContainer size
	ST_CoreViewHacks::FakeCoreViewSize(view, 25, 50);

	rect_triple[0] = OpRect(0, 0, 106, 35);
	rect_triple[1] = OpRect(0, 0, 25, 50);
	rect_triple[2] = OpRect(0, 0, 141, 71);

	verify(ScaleTests(frame_dev, rect_triple, TRUE, 120, 1));

	ST_CoreViewHacks::FakeCoreViewSize(view, old_width, old_height);
	viewCtrl->SetVisualViewport(old_viewport_rect);
	viewCtrl->LockVisualViewportSize(TRUE);

	// scale 200
	DocSTUtils::SetScale(state.doc, 200);
	old_viewport_rect = state.doc->GetVisualViewport();
	view->GetSize(&old_width, &old_height);
	// Fake visual viewport size
	viewCtrl->LockVisualViewportSize(FALSE);
	viewCtrl->SetVisualViewport(fake_viewport_rect);
	// Fake top doc's CoreViewContainer size
	ST_CoreViewHacks::FakeCoreViewSize(view, 100, 200);

	rect_triple[0] = OpRect(0, 0, 106, 35);
	rect_triple[1] = OpRect(0, 0, 100, 200);
	rect_triple[2] = OpRect(0, 0, 141, 71);

	verify(ScaleTests(frame_dev, rect_triple, TRUE, 120, 1));
}
finally
{
	if (restore_core_view_size)
	{
		ST_CoreViewHacks::FakeCoreViewSize(view, old_width, old_height);
		viewCtrl->SetVisualViewport(old_viewport_rect);
		viewCtrl->LockVisualViewportSize(TRUE);
	}

	DocSTUtils::SetScale(state.doc, 100);
}

test("PRECONDITION: visual viewport size for clipped iframe test")
	require success "reset visual viewport 2";
	disabled;
	/**	The "clipped iframe" test is disabled, because VisualDevice::GetVisibleDocumentRect,
		VisualDevice::GetDocumentInnerViewClipRect, CoreView::GetScreenRect
		don't behave correctly when an iframe is partially clipped by the fact
		that some ancestor element has overflow:hidden or 'auto' or 'scroll'. */
{
	OpRect visual_viewport = state.doc->GetVisualViewport();

	verify(visual_viewport.width >= 100 && visual_viewport.height >= 200);
}
test("load clipped iframe doc") async;
	require success "PRECONDITION: visual viewport size for clipped iframe test";
	file uni clipped_iframe "tests/visible_rect/clipped_iframe/top_doc.htm";
{
	Window* win = state.GetWindow();
	if (!win)
		ST_failed("No window!");
	else
		WaitUntilLoadedObj::LoadAndWaitUntilLoaded(win, clipped_iframe);
}
test("clipped iframe")
	require success "load clipped iframe doc";
{
	FramesDocument* doc = state.doc;
	FramesDocElm *second_frame = DocSTUtils::GetFrameById(doc, "iframe");
	OpRect correct_rects[3];

	verify(second_frame);

	VisualDevice* frame_dev = second_frame->GetVisualDevice();

	correct_rects[0] = OpRect(0, 0, 100, 100);
	correct_rects[1] = OpRect(0, 0, 100, 100);
	correct_rects[2] = OpRect(0, 0, 100, 100);

	verify(ScaleTests(frame_dev, correct_rects, TRUE, 120, 1));
}
