group "display.opscreenpropertiescache";

include "modules/display/vis_dev.h";
include "modules/doc/frm_doc.h";
include "modules/pi/OpScreenInfo.h";

global
{
	class OpScreenInfoMonitor : public OpScreenInfo{
		private:
			OpScreenInfo* realOpScreenInfo;
			BOOL propertiesWasLoadedFlag;
		public:
			OpScreenInfoMonitor(OpScreenInfo* theRealOpScreenInfo)
			{
				realOpScreenInfo = theRealOpScreenInfo;
				clearPropertiesWasLoadedFlag();
			}
			virtual OP_STATUS GetProperties(OpScreenProperties* properties, OpWindow* window, const OpPoint* point = NULL){
				propertiesWasLoadedFlag = true;
				return realOpScreenInfo->GetProperties(properties, window, point);
			}
			virtual OP_STATUS GetDPI(UINT32* horizontal, UINT32* vertical, OpWindow* window, const OpPoint* point = NULL){
				propertiesWasLoadedFlag = true;
				return realOpScreenInfo->GetDPI(horizontal, vertical, window, point);
			}
			virtual OP_STATUS RegisterMainScreenProperties(OpScreenProperties& properties){
				return realOpScreenInfo->RegisterMainScreenProperties(properties);
			}
			virtual UINT32 GetBitmapAllocationSize(UINT32 width, UINT32 height, BOOL transparent, BOOL alpha, INT32 indexed){
				return realOpScreenInfo->GetBitmapAllocationSize(width, height, transparent, alpha, indexed);
			}

			BOOL wasPropertiesLoaded(){
				return propertiesWasLoadedFlag;
			}
			void clearPropertiesWasLoadedFlag(){
				propertiesWasLoadedFlag = FALSE;
			}
	};
}

html
{
	//! <body>
	//! Some text
	//! </body>
}

test("Test that screen properties cache is caching")
{
	verify(state.doc && state.doc->GetVisualDevice());
	VisualDevice *vis_dev = state.doc->GetVisualDevice();

	//hijack properties
	OpScreenInfo* originalOpScreenInfo = g_op_screen_info;
	OpScreenInfoMonitor* monitorOpScreenInfo = OP_NEW(OpScreenInfoMonitor,(originalOpScreenInfo));
	g_op_screen_info = monitorOpScreenInfo;

	//force a call to sub system
	vis_dev->ScreenPropertiesHaveChanged();
	monitorOpScreenInfo->clearPropertiesWasLoadedFlag();
	verify(!monitorOpScreenInfo->wasPropertiesLoaded());
	verify(vis_dev->GetScreenWidth() > 0);
	verify(monitorOpScreenInfo->wasPropertiesLoaded());

	//check if second call only goes to cache
	monitorOpScreenInfo->clearPropertiesWasLoadedFlag();
	verify(!monitorOpScreenInfo->wasPropertiesLoaded());
	verify(vis_dev->GetScreenWidth() > 0);
	verify(!monitorOpScreenInfo->wasPropertiesLoaded());

	//check that third call (after a dirty-flag) forces
	//cache to reload
	vis_dev->ScreenPropertiesHaveChanged();
	monitorOpScreenInfo->clearPropertiesWasLoadedFlag();
	verify(!monitorOpScreenInfo->wasPropertiesLoaded());
	verify(vis_dev->GetScreenWidth() > 0);
	verify(monitorOpScreenInfo->wasPropertiesLoaded());

	//unhijack screen properties
	g_op_screen_info = originalOpScreenInfo;
	OP_DELETE(monitorOpScreenInfo);
}
