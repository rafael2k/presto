/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2006-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

group "display.textshaper";
require TEXTSHAPER_SUPPORT;

include "modules/display/textshaper.h";

table arabicshaping(const uni_char *, const uni_char *)
{
	// input, expected output
	{ UNI_L("\x0627\x0644\x0644\x063a\x0627\x062a"),
	  UNI_L("\xfe8d\xfedf\xfee0\xfed0\xfe8e\xfe95") },

	  // lam+alef ligature
	{ UNI_L("\x0644\x0627"),
	  UNI_L("\xfefb") },

	  // lam+alef with non-joiner between
	{ UNI_L("\x0644\x200c\x0627"),
	  UNI_L("\xfedd\xfe8d") },

	  // lam+alef with non-joiner surrounded by joiners between
	{ UNI_L("\x0644\x200d\x200c\x200d\x0627"),
	  UNI_L("\xfedf\xfe8e") },

	  // lam+heh+jeem
	{ UNI_L("\x0644\x0647\x062c"),
	  UNI_L("\xfedf\xfeec\xfe9e") },

	  // lam+heh+jeem with non-joiners between
	{ UNI_L("\x0644\x200c\x0647\x200c\x062c"),
	  UNI_L("\xfedd\xfee9\xfe9d") },

	  // heh
	{ UNI_L("\x0647"),
	  UNI_L("\xfee9") },

	  // heh with joiners around
	{ UNI_L("\x200d\x0647\x200d"),
	  UNI_L("\xfeec") },

	// ITVSDK-515: U+0649 should be shaped properly
	{ UNI_L("\x0649"), UNI_L("\xFEEF") },

	// CORE-39645: Non-BMP characters should not trigger assert
	{ UNI_L("\x0644\x0627\xD800\xDC00\x0644\x0627"),
	  UNI_L("\xfefb\xD800\xDC00\xfefb") },
}

test("Arabic shaping")
{
	iterate(input, expected) from arabicshaping
	{
		verify(TextShaper::NeedsTransformation(input, uni_strlen(input)));

		uni_char *out = NULL;
		int len = -1;
		verify(OpStatus::IsSuccess(TextShaper::Prepare(input, uni_strlen(input), out, len)));
		verify(out != NULL);
		verify(static_cast<size_t>(len) == uni_strlen(expected));
		verify(uni_strncmp(expected, out, len) == 0);
	}

	verify(!TextShaper::NeedsTransformation(UNI_L("Latin"), 5));
	verify(!TextShaper::NeedsTransformation(UNI_L("\x65E5\x672C\x8A9E"), 3)); // Japanese
}

test("Devanagari vowel sign i swap")
require undefined MDF_OPENTYPE_SUPPORT;
{
	uni_char in[8]; /* ARRAY OK 2009-04-09 wonko */
	in[0] = L'a';
	in[1] = 0x0939; // devanagari letter ha
	in[2] = 0x093f; // devanagari vowel sign i
	in[3] = L'b';
	in[4] = 0x093f; // devanagari vowel sign i
	in[5] = 0x0939; // devanagari letter ha
	in[6] = L'c';
	in[7] = 0;
	int in_len = uni_strlen(in);

	// text shaping should be needed, since devanagari vowel sign i is
	// in the string
	verify(TextShaper::NeedsTransformation(in, in_len));

	uni_char* out = 0;
	int out_len = -1;
	verify(OpStatus::IsSuccess(TextShaper::Prepare(in, in_len,
												   out, out_len)));
	verify(out);
	// output length should be the same as input length
	verify(in_len == out_len);

	// if devanagari vowel sign i occurs after another character in the
	// devanagari range the two characters hould be swapped
	uni_char tmp = in[1];
	in[1] = in[2];
	in[2] = tmp;
	for (int i = 0; i < in_len; ++i)
		verify(in[i] == out[i]);
}

table test_get_shaped_char(const char* test_name, const uni_char* str, const UnicodePoint[] expected_chars, const int[] expected_chars_read)
{
	{ "lam+alef ligature",
			UNI_L("\x0644\x0627"), { 0xfefb }, { 2 } },
	{ "lam+alef with non-joiner between",
			UNI_L("\x0644\x200c\x0627"), { 0xfedd, 0xfe8d }, { 2, 1 } },
	{ "lam+alef with non-joiner surrounded by joiners between",
			UNI_L("\x0644\x200d\x200c\x200d\x0627"),
			{ 0xfedf, 0xfe8e }, { 4, 1 } },
	{ "lam+heh+jeem",
			UNI_L("\x0644\x0647\x062c"),
			{ 0xfedf, 0xfeec, 0xfe9e }, { 1, 1, 1 } },
	{ "lam+heh+jeem with non-joiners between",
	 		UNI_L("\x0644\x200c\x0647\x200c\x062c"),
			{ 0xfedd, 0xfee9, 0xfe9d }, { 2, 2, 1 } },
	{ "heh",
	 		UNI_L("\x0647"), { 0xfee9 }, { 1 } },
	{ "heh with joiners around",
	 		UNI_L("\x200d\x0647\x200d"), { 0xfeec }, { 3 } },
	{ "U+0649",
	 		UNI_L("\x0649"), { 0xfef0 }, { 1 } },
	{ "Non-BMP characters",
			UNI_L("\x0644\x0627\xd800\xdc00\x0644\x0627"),
			{ 0xfefb, 0x10000, 0xfefb }, { 2, 2, 2 } },
}

foreach (test_name, test_str, expected_chars, expected_chars_read) from test_get_shaped_char
{
	test("TextShaper::GetShapedChar(" test_name ")")
	{
		const UnicodePoint expected[] = expected_chars;
		int expected_read[] = expected_chars_read;
		OP_ASSERT(ARRAY_SIZE(expected_read) == ARRAY_SIZE(expected));
		const uni_char* str(test_str);
		size_t str_len = uni_strlen(str);
		for (size_t i=0; i < ARRAY_SIZE(expected); i++)
		{
			int chars_read = -1;
			UnicodePoint c = TextShaper::GetShapedChar(str, str_len, chars_read);
			verify(c == expected[i]);
			verify(chars_read == expected_read[i]);
			str += chars_read;
			str_len -= chars_read;
		}
	}
}
