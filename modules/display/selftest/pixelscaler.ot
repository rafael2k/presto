/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "libvega.scaledpainter";

require VEGA_SUPPORT;
require VEGA_OPPAINTER_SUPPORT;
require PIXEL_SCALE_RENDERING_SUPPORT;

include "modules/display/pixelscaler.h";

test("Creation")
{
	PixelScaler scaler_stack; // On the stack
	PixelScaler* scaler_heap = OP_NEW(PixelScaler, ());
	OP_DELETE(scaler_heap);
	scaler_heap = OP_NEW(PixelScaler, (150));
	OP_DELETE(scaler_heap);
}

test("SetScale")
{
	PixelScaler scaler;
	scaler.SetScale(150);
	verify(scaler.GetScale() == 150);

	PixelScaler scaler2(255);
	verify(scaler2.GetScale() == 255);

	PixelScaler scaler3 = scaler2;
	verify(scaler3.GetScale() == 255);
}

test("ToDevicePixel")
{
	PixelScaler* scaler = OP_NEW(PixelScaler, (200));

	int i = 111;
	verify(scaler->ToDevicePixel(i) == 222);
	i = -111;
	verify(scaler->ToDevicePixel(i) == -222);

	unsigned int u = 0x70000000;
	verify(scaler->ToDevicePixel(u) == 0xe0000000);

	float f = 1.1f;
	verify(scaler->ToDevicePixel(f) == 2.2f);

	OpPoint p(3, 5);
	p = scaler->ToDevicePixel(p);
	verify(p == OpPoint(6, 10));

	OpRect r(3, 5, 11, 22);
	r = scaler->ToDevicePixel(r);
	verify(r.Equals(OpRect(6, 10, 22, 44)));

	OpRect* pr = scaler->ToDevicePixel(&r);
	verify(pr == &r);
	verify(r.Equals(OpRect(12, 20, 44, 88)));

	OP_DELETE(scaler);
}

test("FromDevicePixel")
{
	PixelScaler scaler(200);

	int i = 222;
	verify(scaler.FromDevicePixel(i) == 111);
	i = -222;
	verify(scaler.FromDevicePixel(i) == -111);

	unsigned u = 0xe0000000;
	verify(scaler.FromDevicePixel(u) == 0x70000000);

	float f = 2.2f;
	verify(scaler.FromDevicePixel(f) == 1.1f);

	OpPoint p(6, 10);
	p = scaler.FromDevicePixel(p);
	verify(p == OpPoint(3, 5));

	OpRect r(12, 20, 44, 88);
	r = scaler.FromDevicePixel(r);
	verify(r.Equals(OpRect(6, 10, 22, 44)));

	OpRect* pr = scaler.FromDevicePixel(&r);
	verify(pr == &r);
	verify(r.Equals(OpRect(3, 5, 11, 22)));
}

test("ToDevicePixel")
{
	PixelScaler* scaler = OP_NEW(PixelScaler, (200));

	int i = 111;
	verify(scaler->ToDevicePixel(i) == 222);
	i = -111;
	verify(scaler->ToDevicePixel(i) == -222);

	unsigned int u = 0x70000000;
	verify(scaler->ToDevicePixel(u) == 0xe0000000);

	float f = 1.1f;
	verify(scaler->ToDevicePixel(f) == 2.2f);

	OpPoint p(3, 5);
	p = scaler->ToDevicePixel(p);
	verify(p == OpPoint(6, 10));

	OpRect r(3, 5, 11, 22);
	r = scaler->ToDevicePixel(r);
	verify(r.Equals(OpRect(6, 10, 22, 44)));

	OpRect* pr = scaler->ToDevicePixel(&r);
	verify(pr == &r);
	verify(r.Equals(OpRect(12, 20, 44, 88)));

	OP_DELETE(scaler);
}

test("FROM_DEVICE_PIXEL")
{
	PixelScaler scaler(200);

	int i = 222;
	verify(FROM_DEVICE_PIXEL(scaler, i) == 111);

	OpPoint p(6, 10);
	p = FROM_DEVICE_PIXEL(scaler, p);
	verify(p == OpPoint(3, 5));

	OpRect r(6, 10, 22, 44);
	verify(FROM_DEVICE_PIXEL(scaler, r).Equals(OpRect(3, 5, 11, 22)));
}

test("TO_DEVICE_PIXEL")
{
	PixelScaler scaler(200);

	int i = 111;
	verify(TO_DEVICE_PIXEL(scaler, i) == 222);

	OpPoint p(3, 5);
	p = TO_DEVICE_PIXEL(scaler, p);
	verify(p == OpPoint(6, 10));

	OpRect r(3, 5, 11, 22);
	verify(TO_DEVICE_PIXEL(scaler, r).Equals(OpRect(6, 10, 22, 44)));
}
