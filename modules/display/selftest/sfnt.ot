/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "display.sfnt";

require WEBFONTS_SUPPORT;

include "modules/display/check_sfnt.h";
include "modules/display/webfont_manager.h";
include "modules/doc/frm_doc.h";

global
{
	/**
	   helper class to asynchronously load URLs
	 */
	class URLLoader : public ExternalInlineListener
	{
	public:
		URLLoader() : m_doc(0) {}
		~URLLoader() { StopLoading(); }

		/**
		   start loading of URL. will cause selftest to pass or fail
		   once url is loaded or loading has failed.
		   @param doc the document used to load the url
		   @param url the url to load - should have been prepared before calling
		   @return the status of FramesDocument::LoadInline
		 */
		OP_STATUS StartLoading(FramesDocument* doc, URL& url)
		{
			OP_ASSERT(!m_doc);

			m_url = url;
			OP_STATUS status = doc->LoadInline(url, this);
			if (OpStatus::IsError(status))
				ST_failed("LoadInline failed");
			else
				m_doc = doc;

			return status;
		}

		// inherited from ExternalInlineListener
		virtual void LoadingStopped(const URL &url)
		{
			OP_ASSERT(m_doc);

			StopLoading();

			// get load status
			URLStatus url_stat = url.Status(TRUE);
			UINT32 http_response;
			if (url.Type() == URL_HTTP || url.Type() == URL_HTTPS)
				http_response = url.GetAttribute(URL::KHTTP_Response_Code, URL::KFollowRedirect);
			else
				http_response = HTTP_OK;

			if (url_stat == URL_LOADED && (http_response == HTTP_OK || http_response == HTTP_NOT_MODIFIED))
				ST_passed();
			else
				ST_failed("URL failed to load");
		}
		virtual void LoadingProgress(const URL &url) {}
		virtual void LoadingRedirected(const URL &from, const URL &to) {}

	private:
		/**
		   stop loading the current URL
		 */
		void StopLoading()
		{
			if (m_doc)
			{
				m_doc->StopLoadingInline(m_url, this);
				m_doc = 0;
			}
		}

		FramesDocument* m_doc;
		URL m_url;
	};

	/**
	   asynchronously load url into st_url. calls ST_passed if the URL
	   was successfully loaded, ST_failed otherwise.
	   @param url the url to load
	 */
	void LoadURL(const char* const url)
	{
		st_url.Unload();
		st_url = g_url_api->GetURL(url);
		st_url_loader.StartLoading(state.doc, st_url);
	}

	URL st_url; ///< currently loaded url
	URLLoader st_url_loader; ///< helper object for loading URLs
}

/**
   check that the sfnt sanity checking doesn't prune common, harmless
   spec violations, such as including the pad bytes in table sizes etc
 */
table font_urls
{
	{ "http://t/core/standards/css3/webfonts/fonts/check/cmap_14_non_default_uvs.ttf", cmap_14_non_default_uvs },
	{ "http://t/core/standards/css3/webfonts/fonts/check/cmap_2.ttc",                  cmap_2 },
	{ "http://t/core/standards/css3/webfonts/fonts/check/padded_cmap_6.ttf",           cmap_6 },
	{ "http://t/core/standards/css3/webfonts/fonts/check/padded_glyf.ttf",             padded_glyf },
	{ "http://t/core/standards/css3/webfonts/fonts/check/padded_head.ttf",             padded_head },
	{ "http://t/core/standards/css3/webfonts/fonts/check/padded_loca.ttf",             padded_loca }
}
foreach (font_url, test_name) from font_urls
{
	// load the font
	test( "$(test_name) - load" )
		async;
	{
		LoadURL(font_url);
	}
	// test that CheckSfnt doesn't discard it
	test("$(test_name) - check")
		require success "$(test_name) - load";
	{
		OpString fontfile;
		verify(OpStatus::IsSuccess(g_webfont_manager->GetWebFontFile(st_url, fontfile)));
		verify(OpStatus::IsSuccess(CheckSfnt(fontfile.CStr())));
	}
}
