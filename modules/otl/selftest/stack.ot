/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "otl.stack";
require init;

language C++;

include "modules/otl/stack.h";

global
{
	/**
	 * A class that records destruction events on DestructorReporter objects.
	 */
	class DestructorListener
	{
	public:
		DestructorListener() : m_size(0) {}
		void Add(int id) { if (m_size < 64) m_ids[m_size++] = id; }
		int GetSize() const { return m_size; }
		int operator [](int idx) const { return m_ids[idx]; }
	private:
		int m_size;
		int m_ids[64]; // ARRAY OK 2012-06-21 andersr
	};

	/**
	 * A class that reports its destruction to a DestructorListener object.
	 */
	class DestructorReporter
	{
	public:
		DestructorReporter(int id, DestructorListener& dl) : m_id(id), m_report(false), m_dl(dl) {}
		DestructorReporter(const DestructorReporter& d) : m_id(d.m_id), m_report(true), m_dl(d.m_dl) {}
		~DestructorReporter(){ if (m_report) m_dl.Add(m_id); }
	private:
		int m_id;
		bool m_report;
		DestructorListener& m_dl;
	};
}

foreach (TYPE) from
{
	{int},
	{unsigned int},
	{short},
	{bool},
	{float},
	{double},
	{int*},
	{float*},
	{void*}
}
{
	test("OtlStack<$(TYPE)>, construction")
		leakcheck;
	{
		OtlStack<TYPE> s;
		verify(s.GetSize() == 0);
	}
}

test("OtlStack<int>: pushing/popping elements")
	leakcheck;
{
	OtlStack<int> s;

	for (int i = 0; i < 1024; ++i)
		verify_success(s.Push(i));

	verify(s.GetSize() == 1024);

	for (int i = 1023; i >= 0; --i)
	{
		verify(s.Top() == i);
		s.Pop();
		verify(s.GetSize() == (size_t)i);
	}

	verify(s.IsEmpty());
}

test("OtlStack<int>: growth factor")
	leakcheck;
{
	OtlStack<int> s(17.0);
	verify(s.GetGrowthFactor() == 17.0);
	s.SetGrowthFactor(48.0);
	verify(s.GetGrowthFactor() == 48.0);
}

test("OtlStack<int>: capacity")
	leakcheck;
{
	OtlStack<int> s(12.0);
	verify(s.GetCapacity() == 0);
	verify_success(s.Push(1));
	verify_success(s.Push(2));
	verify(s.GetCapacity() == 12);
}

test("OtlStack<int>: reserve")
	leakcheck;
{
	OtlStack<int> s;
	verify_success(s.Reserve(100));
	verify(s.GetCapacity() >= 100);
}

test("OtlStack<int>: clear")
	leakcheck;
{
	OtlStack<int> s;

	for (int i = 0; i < 100; ++i)
		verify_success(s.Push(i));

	verify(s.GetSize() == 100);
	s.Clear();
	verify(s.GetSize() == 0);
	s.Clear(); //< Should be allowed on empty OtlStack.
	verify(s.GetSize() == 0);
}

test("OtlStack<int>: trim")
	leakcheck;
{
	OtlStack<int> s;
	verify_success(s.Reserve(100));
	verify(s.GetCapacity() >= 100);
	verify_success(s.Push(1));
	verify_success(s.Trim());
	verify(s.GetCapacity() == 1);
	verify(s.GetSize() == 1);
}

test("OtlStack: destruction order")
	leakcheck;
{
	DestructorListener dl;

	{
		OtlStack<DestructorReporter> s;
		verify_success(s.Push(DestructorReporter(5, dl)));
		verify_success(s.Push(DestructorReporter(7, dl)));
		verify_success(s.Push(DestructorReporter(11, dl)));
		verify_success(s.Push(DestructorReporter(13, dl)));
		verify_success(s.Push(DestructorReporter(17, dl)));
		verify_success(s.Push(DestructorReporter(19, dl)));
	}

	verify(dl.GetSize() == 6);
	verify(dl[0] == 19);
	verify(dl[1] == 17);
	verify(dl[2] == 13);
	verify(dl[3] == 11);
	verify(dl[4] == 7);
	verify(dl[5] == 5);
}
