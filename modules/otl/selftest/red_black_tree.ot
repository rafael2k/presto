/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011-2012 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "otl.red_black_tree";

include "modules/otl/src/red_black_tree.h";
include "modules/otl/pair.h";
include "modules/util/OpSharedPtr.h";

global
{
	// Numbers 1-100 shuffled randomly.
	int randomItems[] = {96, 52, 7, 42, 48, 25, 4, 21, 36, 99, 74, 33, 93, 28,
	53, 77, 34, 46, 18, 15, 23, 26, 2, 1, 89, 83, 3, 64, 8, 20, 97, 95, 17, 71,
	10, 57, 80, 35, 94, 27, 19, 29, 85, 90, 92, 41, 65, 24, 45, 39, 59, 67, 5,
	68, 40, 86, 47, 63, 11, 81, 12, 37, 87, 78, 22, 6, 30, 98, 88, 38, 75, 60,
	73, 9, 79, 51, 61, 62, 16, 50, 70, 91, 84, 69, 56, 76, 72, 44, 82, 31, 13,
	14, 32, 43, 49, 66, 58, 54, 55};

	int randomItemsReshuffled[] = {41, 34, 82, 62, 72, 2, 20, 84, 60, 11, 75,
	76, 21, 50, 91, 7, 67, 70, 16, 45, 88, 83, 4, 77, 95, 1, 28, 87, 26, 90, 9,
	85, 71, 94, 33, 55, 43, 44, 22, 54, 65, 69, 36, 46, 19, 98, 81, 51, 93, 89,
	52, 35, 10, 47, 64, 30, 37, 63, 5, 38, 12, 3, 32, 99, 57, 92, 86, 97, 25,
	29, 73, 31, 42, 39, 56, 23, 79, 61, 80, 13, 58, 96, 48, 74, 15, 17, 59, 78,
	14, 68, 8, 66, 24, 18, 27, 49, 53, 6, 40};

	// Used to test if destruction works.
	class ComplexType
	{
	public:
		ComplexType(bool* trueWhenDestroyed, int sortId) :
			m_trueWhenDestroyed(trueWhenDestroyed), m_sortId(sortId)
		{
			if(m_trueWhenDestroyed)
				*m_trueWhenDestroyed = false;
		}
		~ComplexType()
		{
			if(m_trueWhenDestroyed)
				*m_trueWhenDestroyed = true;
		}
		bool operator<(const ComplexType& other) const
		{
			return this->m_sortId < other.m_sortId;
		}

	private:
		bool* m_trueWhenDestroyed;
		int m_sortId;
	};

	// Used to test custom comparator.
	// Sorts in reverse order than the default Less.
	template<typename T>
	class More
	{
	public:
		bool operator()(const T& a, const T& b) const
		{
			return a > b;
		}
	};

	// For testing pairs
	template<typename Pair>
	struct PairComparator
	{
	public:
		bool operator()(const Pair& a, const Pair& b) const
		{
			return a.first < b.first;
		}
	};
	typedef OtlPair<const int, float> IntFloatPair;
}

test("Initialize")
{
	OtlRedBlackTree<int> tree;
	verify(tree.Empty());
	verify(tree.Size() == 0);
}

subtest insert(OtlRedBlackTree<int>& tree, int item)
{
	OtlRedBlackTree<int>::Iterator insertionResult = tree.End();
	verify_success(tree.Insert(item, &insertionResult));
	verify(*insertionResult == item);
	verify(tree.IsValidRedBlackTree());
}

subtest elem10to70insert(OtlRedBlackTree<int>& tree)
{
	/*
	 * This insertion order should give the following tree:
	 *      20b
	 *    /    \
	 * 10b     40r
	 *        /   \
	 *       30b  60b
	 *           /   \
	 *          50r  70r
	 */
	for (size_t i = 10; i <= 70; i += 10)
	{
		insert(tree, i);
	}
	verify(tree.Size() == 7);
}

test("Insert")
require success "Initialize";
{
	OtlRedBlackTree<int> tree;
	verify(tree.Count(20) == 0); // Item 20 is not in tree.
	elem10to70insert(tree);
	verify(tree.Count(20) == 1); // Item 20 is in tree.
}

test("Find item (empty tree)")
{
	OtlRedBlackTree<int> tree;
	verify(tree.Find(15) == tree.End()); // Searching an empty tree gives End().
}

test("Find item")
require success "Initialize";
{
	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);

	OtlRedBlackTree<int>::Iterator it = tree.Begin();
	for (int i = 10; i <= 70 && it != tree.End(); i += 10, ++it)
	{
		OtlRedBlackTree<int>::Iterator foundIterator = tree.Find(i);
		verify(foundIterator != tree.End());
		verify(*foundIterator == i);
	}

	verify(tree.Find(15) == tree.End()); // This item wasn't added.
}

subtest randomInsert(OtlRedBlackTree<int>& tree)
{
	for(size_t i = 0; i < ARRAY_SIZE(randomItems); ++i)
	{
		int randomItem = randomItems[i];
		insert(tree, randomItem);
		OtlRedBlackTree<int>::Iterator foundIterator = tree.Find(randomItem);
		verify(foundIterator != tree.End());
		verify(*foundIterator == randomItem);
	}
	verify(tree.Size() == ARRAY_SIZE(randomItems));
}

test("Random insert") require success "Find item";
{
	OtlRedBlackTree<int> tree;
	randomInsert(tree);
}


test("Iterators: Empty tree")
{
	OtlRedBlackTree<int> tree;
	verify(tree.Begin() == tree.End());
	verify(tree.RBegin() == tree.REnd());
}

test("Iterators: One item")
{
	OtlRedBlackTree<int> tree;
	insert(tree, 10);
	verify(*tree.Begin() == 10);
	verify(*tree.RBegin() == 10);
}

test("Iterators: In-order iteration")
{

	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);
	OtlRedBlackTree<int>::Iterator it = tree.Begin();
	for (int i = 10; i <= 70 && it != tree.End(); i += 10, ++it)
	{
		verify(*it == i);
	}
	verify(it == tree.End());
}

test("ConstIterators: In-order iteration")
{

	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);
	const OtlRedBlackTree<int>& ctree = tree;
	OtlRedBlackTree<int>::ConstIterator it = ctree.Begin();
	for (int i = 10; i <= 70 && it != ctree.End(); i += 10, ++it)
	{
		verify(*it == i);
	}
	verify(it == ctree.End());
}

test("Iterators: Reverse-order iteration")
{

	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);
	OtlRedBlackTree<int>::ReverseIterator it = tree.RBegin();
	for (int i = 70; i >= 10 && it != tree.REnd(); i -= 10, ++it)
	{
		verify(*it == i);
	}
	verify(it == tree.REnd());
}

test("ConstIterators: Reverse-order iteration")
{

	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);
	const OtlRedBlackTree<int>& ctree = tree;
	OtlRedBlackTree<int>::ReverseConstIterator it = ctree.RBegin();
	for (int i = 70; i >= 10 && it != tree.REnd(); i -= 10, ++it)
	{
		verify(*it == i);
	}
	verify(it == ctree.REnd());
}

test("Comparing Iterators, ReverseIterators and Consts ")
{

	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);
	const OtlRedBlackTree<int>& ctree = tree;

	// Iterators and reverse iterators.
	verify(tree.REnd() == --tree.Begin());
	verify(tree.REnd() != tree.Begin());
	verify(tree.End() == --tree.RBegin());
	verify(tree.End() != tree.RBegin());

	// Iterators and const iterators
	verify(tree.End() != ctree.Begin());
	verify(ctree.Begin() != tree.End());

	// Const iterators and const reverse iterators.
	verify(ctree.REnd() == --ctree.Begin());
	verify(ctree.REnd() != ctree.Begin());
	verify(ctree.End() == --ctree.RBegin());
	verify(ctree.End() != ctree.RBegin());

	// Iterators and  const reverse iterators.
	verify(tree.REnd() == --ctree.Begin());
	verify(tree.REnd() != ctree.Begin());
	verify(tree.End() == --ctree.RBegin());
	verify(tree.End() != ctree.RBegin());

	// Const iterators and reverse iterators.
	verify(ctree.REnd() == --tree.Begin());
	verify(ctree.REnd() != tree.Begin());
	verify(ctree.End() == --tree.RBegin());
	verify(ctree.End() != tree.RBegin());

	// This should instantiate a reasonable number of comparison template functions.
}

test("Insert duplicates")
{
	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);
	elem10to70insert(tree); // Multiple insertions possible.
	elem10to70insert(tree);

	// Even after inserting duplicates, we have only one copy of each.
	OtlRedBlackTree<int>::Iterator it = tree.Begin();
	for (int i = 10; i <= 70 && it != tree.End(); i += 10, ++it)
	{
		verify(*it == i);
	}
	verify(it == tree.End());
}

test("Erase item (empty tree)")
{
	OtlRedBlackTree<int> tree;
	verify(tree.Erase(15) == 0);
	verify(tree.IsValidRedBlackTree());
}

test("Erase End iterator (empty tree)")
{
	OtlRedBlackTree<int> tree;
	tree.Erase(tree.End());
	// Should not crash.
	verify(tree.IsValidRedBlackTree());
}

test("Erase End iterator (populated tree)")
{
	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);
	size_t size = tree.Size();
	tree.Erase(tree.End());
	verify(tree.Size() == size); // Size hasn't changed.

	// All items are still there.
	OtlRedBlackTree<int>::Iterator it = tree.Begin();
	for (int i = 10; i <= 70 && it != tree.End(); i += 10, ++it)
	{
		verify(*it == i);
	}
	verify(tree.IsValidRedBlackTree());
}

test("Erase invalid item (populated tree)")
{
	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);
	size_t size = tree.Size();
	verify(tree.Erase(15) == 0); // This item is not in tree.
	verify(tree.Size() == size); // Size hasn't changed.

	// All items are still there.
	OtlRedBlackTree<int>::Iterator it = tree.Begin();
	for (int i = 10; i <= 70 && it != tree.End(); i += 10, ++it)
	{
		verify(*it == i);
	}
	verify(tree.IsValidRedBlackTree());
}

test("Insert single item and erase it")
{
	OtlRedBlackTree<int> tree;
	insert(tree, 15);
	verify(tree.Erase(15) == 1);
	verify(tree.Empty());
	verify(tree.Size() == 0);
	verify(tree.IsValidRedBlackTree());
}

test("Insert single item and erase it (by Begin())")
{
	OtlRedBlackTree<int> tree;
	insert(tree, 15);
	tree.Erase(tree.Begin());
	verify(tree.Empty());
	verify(tree.Size() == 0);
	verify(tree.IsValidRedBlackTree());
}

subtest itemNotInTree(OtlRedBlackTree<int>& tree, int item)
{
	verify(tree.Find(item) == tree.End()); // It's no longer found in the tree.

	// Iterate manually and assert 40 is no longer there.
	for (OtlRedBlackTree<int>::Iterator it = tree.Begin(); it != tree.End(); ++it)
	{
		verify(*it != item);
	}
}

subtest itemErased(OtlRedBlackTree<int>& tree, int item, size_t sizeBeforeErase)
{
	verify(tree.Size() == sizeBeforeErase - 1); // Size has decremented.
	itemNotInTree(tree, item);
}

subtest eraseByIterator(int item)
{
	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);
	size_t size = tree.Size();

	OtlRedBlackTree<int>::Iterator toDelete = tree.Find(item);
	verify(toDelete != tree.End());

	tree.Erase(toDelete);

	itemErased(tree, item, size);
	verify(tree.IsValidRedBlackTree());
}

subtest eraseByItem(int item)
{
	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);
	size_t size = tree.Size();

	verify(tree.Erase(item) == 1); // One item removed.

	itemErased(tree, item, size);

	// Erase same item again.
	verify(tree.Erase(item) == 0); // This time it's not found anymore.
	verify(tree.Size() == size - 1); // Size hasn't changed.

	itemNotInTree(tree, item); // Hasn't magically appeared.
	verify(tree.IsValidRedBlackTree());
}

test("Erase iterator - red node")
{
	eraseByIterator(40);
}

test("Erase item - red node")
{
	eraseByItem(40);
}

test("Erase iterator - black node")
{
	eraseByIterator(60);
}

test("Erase item - black node")
{
	eraseByItem(60);
}

test("Erase iterator - root")
{
	eraseByIterator(20);
}

test("Erase item - root")
{
	eraseByItem(20);
}

test("Erase all items")
{
	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);
	size_t size = tree.Size();
	for (size_t i = 10; i <= 70; i += 10)
	{
		verify(tree.Erase(i) == 1); // One item removed.
		itemNotInTree(tree, i);
		verify(tree.Size() == --size); // Size gets smaller.
		verify(tree.IsValidRedBlackTree());
	}
	verify(tree.Size() == 0);
	verify(tree.IsValidRedBlackTree());
}

test("Erase while iterating")
{
	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);
	size_t size = tree.Size();
	for (OtlRedBlackTree<int>::Iterator it = tree.Begin(); it != tree.End(); )
	{
		int val = *it;
		tree.Erase(it++); // Erase should not invalidate next iterators.
		itemNotInTree(tree, val);
		verify(tree.Size() == --size); // Size gets smaller.
		verify(tree.IsValidRedBlackTree());
	}
	verify(tree.Size() == 0);
	verify(tree.IsValidRedBlackTree());
}

test("Erase while iterating in reverse")
{
	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);
	size_t size = tree.Size();
	for (OtlRedBlackTree<int>::ReverseIterator it = tree.RBegin(); it != tree.REnd(); )
	{
		int val = *it;
		tree.Erase((it++).Base()); // Erase should not invalidate previous iterators.
		itemNotInTree(tree, val);
		verify(tree.Size() == --size); // Size gets smaller.
		verify(tree.IsValidRedBlackTree());
	}
	verify(tree.Size() == 0);
	verify(tree.IsValidRedBlackTree());
}

test("Erase random items")
{
	OtlRedBlackTree<int> tree;

	// Insert
	randomInsert(tree);

	size_t size = tree.Size();

	// Remove (same order as during insertion)
	for(size_t i = 0; i < ARRAY_SIZE(randomItems); ++i)
	{
		int randomItem = randomItems[i];
		verify_success(tree.Erase(randomItem) == 1);
		itemNotInTree(tree, randomItem);
		verify(tree.Size() == --size); // Size gets smaller.
		verify(tree.IsValidRedBlackTree());
	}
	verify(tree.Empty());

	// Insert again
	randomInsert(tree);

	size = tree.Size();
	// Remove reshuffled items (random erase order)
	for(size_t i = ARRAY_SIZE(randomItemsReshuffled); i > 0; --i)
	{
		int randomItem = randomItemsReshuffled[i-1];
		verify_success(tree.Erase(randomItem) == 1);
		itemNotInTree(tree, randomItem);
		verify(tree.Size() == --size); // Size gets smaller.
		verify(tree.IsValidRedBlackTree());
	}
	verify(tree.Empty());
}

test("Clear")
{
	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);
	tree.Clear();
	verify(tree.Size() == 0);
	verify(tree.Empty());
	verify(tree.IsValidRedBlackTree());
}

test("Custom comparator")
{
	OtlRedBlackTree<int, More<int> > tree;
	for (size_t i = 10; i <= 70; i += 10)
	{
		verify_success(tree.Insert(i));
		verify(tree.IsValidRedBlackTree());
	}

	int expectedItem = 70;
	for(OtlRedBlackTree<int, More<int> >::Iterator it = tree.Begin();
		it != tree.End();
		it++)
	{
		verify(*it == expectedItem);
		expectedItem -= 10;
	}
}

test("Destructor called")
{
	bool trueWhenDestroyed = false;
	ComplexType object(&trueWhenDestroyed, 5);
	OtlRedBlackTree<ComplexType> tree;
	verify_success(tree.Insert(object));
	tree.Erase(object);

	verify(trueWhenDestroyed);
}

test("Storing OpSharedPtrs")
{
	OtlRedBlackTree<OpSharedPtr<ComplexType> > tree;

	bool trueWhenDestroyed = false;
	OpSharedPtr<ComplexType> o1 = make_shared<ComplexType>(&trueWhenDestroyed, 5);
	OpSharedPtr<ComplexType> o2 = make_shared<ComplexType>(&trueWhenDestroyed, 4);
	OpSharedPtr<ComplexType> o3 = make_shared<ComplexType>(&trueWhenDestroyed, 6);

	verify(o1);
	verify(o2);
	verify(o3);

	verify(tree.Count(o1) == 0);
	verify_success(tree.Insert(o1));
	verify(tree.Count(o1) == 1);
	verify_success(tree.Insert(o2));
	verify_success(tree.Insert(o3));

	OtlRedBlackTree<OpSharedPtr<ComplexType> >::Iterator found = tree.Find(o2);
	verify(found != tree.End());
	verify((*found).get() == o2.get()); // Same actual object, not a copy.
}

test("Storing a pair")
{
	/* Ability to use a pair with a custom comparator that checks only
	 * the first item is required for a map implementation. */
	OtlRedBlackTree<IntFloatPair, PairComparator<IntFloatPair> > tree;

	verify_success(tree.Insert(OtlMakePair(4, 4.5f)));
	verify_success(tree.Insert(OtlMakePair(2, 2.5f)));
	verify_success(tree.Insert(OtlMakePair(5, 5.5f)));
	OtlRedBlackTree<IntFloatPair, PairComparator<IntFloatPair> >::Iterator found
			= tree.Find(OtlMakePair(2, 2.5f));
	verify(found != tree.End());
	verify(found->first == 2);
	verify(found->second == 2.5f);

	size_t sizeBeforeInsert = tree.Size();

	 // Inserting item with same "key" but different "value".
	verify_success(tree.Insert(OtlMakePair(2, 5.f)));
	verify(tree.Size() == sizeBeforeInsert); // Old pair was overwritten.

	found = tree.Find(OtlMakePair(2, float()));
	verify(found != tree.End());
	verify(found->first == 2);
	verify(found->second == 5.f);
}

test("Const iterators")
{
	OtlRedBlackTree<int> tree;
	elem10to70insert(tree);

	const OtlRedBlackTree<int>& constTree = tree;
	OtlRedBlackTree<int>::ConstIterator it = constTree.Begin();
	for (int i = 10; i <= 70 && it != constTree.End(); i += 10, ++it)
	{
		verify(*it == i);
	}

	/* I have no idea how to verify that an expression doesn't compile.
	 * The best test of a ConstIterator would be trying to Erase one or
	 * modify a value referenced by it, but that won't compile (hopefuly!) */
}
