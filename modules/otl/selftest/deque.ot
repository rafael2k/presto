/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "otl.deque";
require init;

language C++;

include "modules/otl/deque.h";

global
{
	struct Point
	{
		Point(int x, int y) : x(x), y(y) {}
		int x;
		int y;
	};

	struct DtorParent
	{
		DtorParent(int &pcount) : pcount(pcount) {}
		virtual ~DtorParent() { ++pcount; }
		int &pcount;
	};

	/**
	 * A struct which "reports" destruction by incrementing an
	 * integer. This is used to verify that non-trivial destructors
	 * are indeed called.
	 */
	struct Dtor : public DtorParent
	{
		Dtor(int &pcount, int &dcount) : DtorParent(pcount), dcount(dcount) {}
		virtual ~Dtor() { ++dcount; }
		int &dcount;
	};
}

foreach (TYPE) from
{
	{int},
	{unsigned int},
	{short},
	{bool},
	{float},
	{double},
	{int*},
	{float*},
	{void*}
}
{
	test("OtlDeque<$(TYPE)>: construction")
		leakcheck;
	{
		OtlDeque<TYPE> deque;
		verify(deque.GetSize() == 0);
	}
}

test("OtlDeque<int>: PushBack up to reserved capacity")
	leakcheck;
{
	OtlDeque<int> deque;
	verify_success(deque.Reserve(10));

	for (int i = 0; i < 10; ++i)
	{
		verify_success(deque.PushBack(i));
		verify(deque.Front() == 0);
		verify(deque.Back() == i);
	}
	verify(deque.GetCapacity() >= 10 && deque.GetCapacity() <= 15);
	verify(deque.GetSize() == 10);

	for (int i = 0; i < 10; ++i)
		verify(deque[i] == i);
}

test("OtlDeque<int>: PushBack beyond reserved capacity")
	leakcheck;
{
	OtlDeque<int> deque;
	verify_success(deque.Reserve(90));

	const int prime = 97;

	for (int i = 0; i < prime; ++i)
	{
		verify_success(deque.PushBack(i));
		verify(deque.Front() == 0);
		verify(deque.Back() == i);
	}
	verify(deque.GetCapacity() >= (size_t)prime && deque.GetCapacity() <= (size_t)(prime * 1.5f));
	verify(deque.GetSize() == (size_t)prime);

	for (int i = 0; i < prime; ++i)
		verify(deque[i] == i);
}

test("OtlDeque<int>: PushFront up to reserved capacity")
	leakcheck;
{
	OtlDeque<int> deque;
	verify_success(deque.Reserve(10));

	for (int i = 10; i-- > 0;)
	{
		verify_success(deque.PushFront(i));
		verify(deque.Front() == i);
		verify(deque.Back() == 9);
	}
	verify(deque.GetCapacity() >= 10 && deque.GetCapacity() <= 15);
	verify(deque.GetSize() == 10);

	for (int i = 0; i < 10; ++i)
		verify(deque[i] == i);
}

test("OtlDeque<int>: Back and PopBack")
	leakcheck;
{
	OtlDeque<int> deque;

	for (int i = 0; i < 20; ++i)
		verify_success(deque.PushBack(i));
	verify(deque.GetCapacity() == 28);
	verify(deque.GetSize() == 20);
	verify(deque.Front() == 0);

	for (int i = 0; i < 17; ++i)
	{
		verify(deque.Back() == (19 - i));
		deque.PopBack();
	}
	verify(deque.Back() == 2);
	verify(deque.Front() == 0);
	verify(deque.GetCapacity() == 28);
	verify(deque.GetSize() == 3);
}

test("OtlDeque<int>: Clear")
	leakcheck;
{
	OtlDeque<int> deque;

	for (int i = 0; i < 10; ++i)
		verify_success(deque.PushBack(i));
	verify(!deque.IsEmpty());
	deque.Clear();
	verify(deque.GetSize() == 0);
	verify(deque.IsEmpty());

	for (int i = 0; i < 12; ++i)
		verify_success(deque.PushBack(i));
	verify(!deque.IsEmpty());
	deque.Clear();
	verify(deque.GetSize() == 0);
	verify(deque.IsEmpty());
}

test("OtlDeque<int>: Get-/SetGrowthFactor")
	leakcheck;
{
	OtlDeque<int> deque(17.0);
	verify(deque.GetGrowthFactor() == 17.0);
	verify(deque.GetCapacity() == 0);

	deque.SetGrowthFactor(2.0);
	verify(deque.GetGrowthFactor() == 2.0);
	verify(deque.GetCapacity() == 0);

	for (int i = 0; i < 10; ++i)
		verify_success(deque.PushBack(i));
	verify(deque.GetCapacity() == 16);
	verify(deque.GetSize() == 10);

	deque.SetGrowthFactor(17.0);
	for (int i = 0; i < 10; ++i)
		verify_success(deque.PushBack(i));
	verify(deque.GetCapacity() == 272);
	verify(deque.GetSize() == 20);
}

test("OtlDeque<int>::Reserve")
	leakcheck;
{
	const int prime = 17;
	const float growth = 10.0f;

	OtlDeque<int> deque(growth);
	verify(deque.GetCapacity() == 0);
	verify(deque.GetSize() == 0);
	verify(deque.GetGrowthFactor() == growth);

	verify_success(deque.Reserve(prime));
	verify(deque.GetCapacity() == (size_t)prime);
	verify(deque.GetSize() == 0);
	verify(deque.GetGrowthFactor() == growth);

	for (int i = 0; i < prime; ++i)
		verify_success(deque.PushBack(i));
	verify(deque.GetCapacity() == (size_t)prime);
	verify(deque.GetSize() == (size_t)prime);
	verify(deque.GetGrowthFactor() == growth);

	verify_success(deque.PushBack(prime));
	verify(deque.GetCapacity() == prime * growth);
	verify(deque.GetSize() == prime + 1);
	verify(deque.GetGrowthFactor() == growth);

	verify_success(deque.Reserve(deque.GetCapacity() * 2));
	verify(deque.GetCapacity() == (size_t)(prime * growth) * 2);
	for (int i = 0; i <= prime; ++i)
		verify(deque[i] == i);
}

test("OtlDeque<int>::Trim")
	leakcheck;
{
	OtlDeque<int> deque(12);

	for (int i = 0; i < 10; ++i)
	{
		verify_success(deque.PushBack(i));
		verify(deque.Front() == 0);
		verify(deque.Back() == i);
	}

	verify(deque.GetCapacity() == 12);
	verify(deque.GetSize() == 10);

	verify_success(deque.Trim());
	verify(deque.GetCapacity() == 10);

	for (int i = 0; i < 10; ++i)
		verify(deque[i] == i);
}

/**
 * Check that the actual capacity is equal to the calculated expected
 * capacity.
 *
 * This subtest calculates the expected capacity for a OtlDeque by
 * "simulating" its growth behavior. Then, it verifies that the
 * calculated capacity is equal to the incoming 'capacity'.
 *
 * @param capacity The actual capacity of the OtlDeque.
 * @param size The size of the OtlDeque.
 * @param growth The growth factor of the OtlDeque.
 */
subtest CheckCapacity(int capacity, int size, float growth)
{
	// Calculated capacity.
	int cap = 0;

	// Pretend to add 'size' elements.
	for (int i = 0; i < size; ++i)
	{
		// Grow if we exceed the capacity.
		if (i + 1 > cap)
		{
			// Calculate new capacity.
			int nc = static_cast<int>(cap * growth);

			// Always grow by at least one.
			cap = nc > cap ? nc : cap + 1;
		}
	}

	verify(cap == capacity);
}

table GrowthFactors
{
	{1.001f, 1.001},
	{static_cast<float>(op_sqrt(2)), 1.414},
	{static_cast<float>(0.5 * (1 + op_sqrt(5.0))), 1.618},
	{2.0f, 2},
	{10.0f, 10},
	{100.0f, 100},
}

foreach (GROWTH, DISPLAY) from GrowthFactors
{
	test("OtlDeque<int>($(DISPLAY))::Find")
		leakcheck;
	{
		OtlDeque<int> deque(GROWTH);

		verify_success(deque.PushBack(42));
		verify_success(deque.PushBack(1984));
		verify_success(deque.PushBack(0));
		verify_success(deque.PushBack(1337));
		verify(CheckCapacity(deque.GetCapacity(), 4, GROWTH));

		verify(deque.Find(42) == 0);
		verify(deque.Find(1984) == 1);
		verify(deque.Find(0) == 2);
		verify(deque.Find(1337) == 3);
	}

	test("OtlDeque<int>($(DISPLAY))::Find from offset")
		leakcheck;
	{
		OtlDeque<int> deque(GROWTH);

		verify_success(deque.PushBack(42));
		verify_success(deque.PushBack(1984));
		verify_success(deque.PushBack(1984));
		verify_success(deque.PushBack(0));
		verify_success(deque.PushBack(1984));
		verify_success(deque.PushBack(1337));
		verify(CheckCapacity(deque.GetCapacity(), 6, GROWTH));

		verify(deque.Find(42, 0) == 0);
		verify(deque.Find(1984, 0) == 1);
		verify(deque.Find(1984, 1) == 1);
		verify(deque.Find(1984, 2) == 2);
		verify(deque.Find(1984, 3) == 4);
		verify(deque.Find(1984, 4) == 4);
		verify(deque.Find(1984, 5) == -1);
	}

	test("OtlDeque<int>($(DISPLAY)): Indexing (as a follow-up to PushFront)")
		leakcheck;
	{
		OtlDeque<int> deque(GROWTH);

		verify_success(deque.PushFront(42));
		verify_success(deque.PushFront(1984));
		verify_success(deque.PushFront(0));
		verify_success(deque.PushFront(1337));

		verify(deque.GetSize() == 4);
		verify(deque[0] == 1337);
		verify(deque[1] == 0);
		verify(deque[2] == 1984);
		verify(deque[3] == 42);
	}

	test("OtlDeque<int>($(DISPLAY)): Indexing (as a follow-up to PushBack)")
		leakcheck;
	{
		OtlDeque<int> deque(GROWTH);

		verify_success(deque.PushBack(42));
		verify_success(deque.PushBack(1984));
		verify_success(deque.PushBack(0));
		verify_success(deque.PushBack(1337));

		verify(deque.GetSize() == 4);
		verify(deque[0] == 42);
		verify(deque[1] == 1984);
		verify(deque[2] == 0);
		verify(deque[3] == 1337);
	}

	test("OtlDeque<int>($(DISPLAY)): Iteration (front and back)")
		leakcheck;
	{
		OtlDeque<int> deque(GROWTH);

		verify_success(deque.PushBack(42));
		verify_success(deque.PushBack(1984));
		verify_success(deque.PushFront(0));
		verify_success(deque.PushFront(1337));

		verify(deque.GetSize() == 4);
		verify(deque[0] == 1337);
		verify(deque[1] == 0);
		verify(deque[2] == 42);
		verify(deque[3] == 1984);
	}

} // foreach

test("OtlDeque<int>::EraseByValue")
	leakcheck;
{
	OtlDeque<int> d(7);

	for (int i = 0; i < 10; ++i)
	{
		verify_success(d.PushBack(i));
		verify(d[i] == i);
		verify(d.Back() == i);
	}
	verify(d.GetSize() == 10);

	verify_success(d.EraseByValue(2));
	verify(d.Find(2) == -1);
	verify(d.GetSize() == 9);
	verify(d.Front() == 0);
	verify(d.Back() == 9);
	verify(d[1] == 1);
	verify(d[2] == 3);

	verify_success(d.EraseByValue(3));
	verify(d.Find(3) == -1);
	verify(d.GetSize() == 8);
	verify(d.Front() == 0);
	verify(d.Back() == 9);

	verify_success(d.EraseByValue(5));
	verify(d.Find(5) == -1);
	verify(d.GetSize() == 7);
	verify(d.Front() == 0);
	verify(d.Back() == 9);

	verify_success(d.EraseByValue(7));
	verify(d.Find(7) == -1);
	verify(d.GetSize() == 6);
	verify(d.Front() == 0);
	verify(d.Back() == 9);

	verify(d[0] == 0);
	verify(d[1] == 1);
	verify(d[2] == 4);
	verify(d[3] == 6);
	verify(d[4] == 8);
	verify(d[5] == 9);
}

test("OtlDeque<int>::EraseByValue from offset")
	leakcheck;
{
	OtlDeque<int> d;

	verify_success(d.PushFront(42));
	verify_success(d.PushFront(1));

	verify_success(d.PushBack(2));
	verify_success(d.PushBack(42));
	verify_success(d.PushBack(3));
	verify_success(d.PushBack(42));

	verify(d.GetSize() == 6);
	verify(d[0] == 1);
	verify(d[1] == 42);
	verify(d[2] == 2);
	verify(d[3] == 42);
	verify(d[4] == 3);
	verify(d[5] == 42);

	verify_success(d.EraseByValue(42, 1));

	verify(d.GetSize() == 5);
	verify(d[0] == 1);
	verify(d[1] == 2);
	verify(d[2] == 42);
	verify(d[3] == 3);
	verify(d[4] == 42);

	verify_success(d.EraseByValue(42, 1));

	verify(d.GetSize() == 4);
	verify(d[0] == 1);
	verify(d[1] == 2);
	verify(d[2] == 3);
	verify(d[3] == 42);

	verify_success(d.EraseByValue(42, 2));

	verify(d.GetSize() == 3);
	verify(d[0] == 1);
	verify(d[1] == 2);
	verify(d[2] == 3);
}

table deque_erase_offset(const char* test_name,
	int* front_values, int* back_values, int* exp_init_values,
	int erase_value, size_t erase_offset, OP_STATUS erase_status,
	int* exp_values)
{
	{
		/* Test name:         */ "skip values behind offset",
		/* Front init values: */ { 42, 1 },
		/* Back init values:  */ { 2, 42, 3, 42 },
		/* Exp. init values:  */ { 1, 42, 2, 42, 3, 42 },
		/* Value to erase:    */ 42,
		/* Erase from offset: */ 2,
		/* Exp. erase status: */ OpStatus::OK,
		/* Expected values:   */ { 1, 42, 2, 3, 42 }
	},
	{
		/* Test name:         */ "offset > size",
		/* Front init values: */ { 42, 1 },
		/* Back init values:  */ { 2, 42, 3, 42 },
		/* Exp. init values:  */ { 1, 42, 2, 42, 3, 42 },
		/* Value to erase:    */ 42,
		/* Erase from offset: */ 17,
		/* Exp. erase status: */ OpStatus::ERR,
		/* Expected values:   */ { 1, 42, 2, 42, 3, 42 },
	},
	{
		/* Test name:         */ "element not found",
		/* Front init values: */ { 42, 1 },
		/* Back init values:  */ { 2, 42, 3, 42 },
		/* Exp. init values:  */ { 1, 42, 2, 42, 3, 42 },
		/* Value to erase:    */ 1984,
		/* Erase from offset: */ 0,
		/* Exp. erase status: */ OpStatus::ERR,
		/* Expected values:   */ { 1, 42, 2, 42, 3, 42 },
	}
}

foreach (test_name, front_values, back_values, exp_init_values, erase_value,
	erase_offset, erase_status, exp_values) from deque_erase_offset
{
	test("OtlDeque<int>::EraseByValue: " test_name)
		leakcheck;
	{
		OtlDeque<int> d;

		int front_init[] = front_values;
		int back_init[] = back_values;
		int init[] = exp_init_values;

		// Push initial data (front).
		for (unsigned int i = 0; i < ARRAY_SIZE(front_init); ++i)
			verify_success(d.PushFront(front_init[i]));

		// Push initial data (back).
		for (unsigned int i = 0; i < ARRAY_SIZE(back_init); ++i)
			verify_success(d.PushBack(back_init[i]));

		// Verify that the layout is as expected.
		verify(d.GetSize() == ARRAY_SIZE(init));

		for (unsigned int i = 0; i < ARRAY_SIZE(init); ++i)
			verify(d[i] == init[i]);

		// Erase one item, from the offset.
		verify(d.EraseByValue(erase_value, erase_offset) == erase_status);

		int exp[] = exp_values;

		// Verify that the layout is as expected.
		verify(d.GetSize() == ARRAY_SIZE(exp));

		for (unsigned int i = 0; i < ARRAY_SIZE(exp); ++i)
			verify(d[i] == exp[i]);
	}
}

/**
 * Verify that the OtlDeque contains the elements in the range
 * [start, start+size-1], ordered front to back.
 */
subtest CheckLayout(OtlDeque<int> &d, int start, int size)
{
	verify(d.GetSize() == static_cast<size_t>(size));

	for (int i = 0; i < size; ++i)
		verify(d[i] == i + start);
}

foreach (PUSH_FRONT, PUSH_BACK) from
{
	{ 17, 0 },
	{ 0, 17 },
	{ 91, 11 },
	{ 11, 91 },
}
{
	test("OtlDeque<int>::PushFront($(PUSH_FRONT))/Back($(PUSH_BACK)) across ringbuffer boundary")
		leakcheck;
	{
		OtlDeque<int> d;

		// The target size of the OtlDeque.
		const int PUSH_SIZE = PUSH_FRONT + PUSH_BACK;

		verify_success(d.Reserve(PUSH_SIZE));

		/* Add elements such that the logical order becomes
		   [0, PUSH_FRONT+PUSH_BACK-1]. */

		for (int i = PUSH_FRONT; --i >= 0;)
			verify_success(d.PushFront(i));
		for (int i = PUSH_FRONT; i < PUSH_SIZE; ++i)
			verify_success(d.PushBack(i));

		verify(CheckLayout(d, 0, PUSH_SIZE));

		for (int i = 0; i < PUSH_SIZE; ++i)
		{
			d.PopBack();
			verify(CheckLayout(d, 0, PUSH_SIZE - (i + 1)));
		}

		verify(d.IsEmpty());
	}

	test("OtlDeque<int>::PushBack($(PUSH_BACK))/Front($(PUSH_FRONT)) across ringbuffer boundary")
		leakcheck;
	{
		OtlDeque<int> d;

		// The target size of the OtlDeque.
		const int PUSH_SIZE = PUSH_FRONT + PUSH_BACK;

		verify_success(d.Reserve(PUSH_SIZE));

		/* Add elements such that the logical order becomes
		   [0, PUSH_FRONT+PUSH_BACK-1]. */
		for (int i = PUSH_FRONT; i < PUSH_SIZE; ++i)
			verify_success(d.PushBack(i));
		for (int i = PUSH_FRONT; --i >= 0;)
			verify_success(d.PushFront(i));

		verify(CheckLayout(d, 0, PUSH_SIZE));

		for (int i = 0; i < PUSH_SIZE; ++i)
		{
			d.PopFront();
			verify(CheckLayout(d, i + 1, PUSH_SIZE - (i + 1)));
		}

		verify(d.IsEmpty());
	}
}

test("OtlDeque<int>: Stress test (alternate between back and front)")
	leakcheck;
{
	const int prime = 997;
	OtlDeque<int> d(17);

	for (int i = 0; i < prime; ++i)
	{
		if (i & 1)
			verify_success(d.PushFront(i));
		else
			verify_success(d.PushBack(i));
	}
	verify(d.GetCapacity() == 4913);
	verify(d.GetSize() == (size_t)prime);

	const int p = prime / 2;
	for (int i = 0; i < p; ++i)
		verify(d[i] == prime - ((i + 1) << 1));
	for (int i = p; i < prime; ++i)
		verify(d[i] == ((i - p) << 1));
}

test("OtlDeque<int>: Alternately PushBack and PopFront")
	leakcheck;
{
	const int prime = 11;
	OtlDeque<int> d(7);

	for (int i = 0; i < prime; ++i)
	{
		if (i & 1)
			d.PopFront();
		else
			verify_success(d.PushBack(i));
	}
	verify(d.GetCapacity() == 1);
	verify(d.GetSize() == 1);
	verify(d[0] == prime - 1);
}

foreach (GROWTH, DISPLAY) from GrowthFactors
{
	test("OtlDeque<int>($(DISPLAY)) (front < back): Erase in the middle")
		leakcheck;
	{
		OtlDeque<int> d(GROWTH);

		for (int i = 1; i <= 5; ++i)
			verify_success(d.PushBack(i));

		verify(CheckCapacity(d.GetCapacity(), 5, GROWTH));

		verify(d.GetSize() == 5);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);
		verify(d[4] == 5);

		d.Erase(1);
		verify(d.GetSize() == 4);
		verify(d[0] == 1);
		verify(d[1] == 3);
		verify(d[2] == 4);
		verify(d[3] == 5);

		d.Erase(2);
		verify(d.GetSize() == 3);
		verify(d[0] == 1);
		verify(d[1] == 3);
		verify(d[2] == 5);

		d.Erase(1);
		verify(d.GetSize() == 2);
		verify(d[0] == 1);
		verify(d[1] == 5);
	}

	test("OtlDeque<int>($(DISPLAY)) (front < back): Erase front")
		leakcheck;
	{
		OtlDeque<int> d(GROWTH);

		for (int i = 1; i <= 5; ++i)
			verify_success(d.PushBack(i));

		verify(CheckCapacity(d.GetCapacity(), 5, GROWTH));

		verify(d.GetSize() == 5);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);
		verify(d[4] == 5);

		d.Erase(0);
		verify(d.GetSize() == 4);
		verify(d[0] == 2);
		verify(d[1] == 3);
		verify(d[2] == 4);
		verify(d[3] == 5);

		d.Erase(0);
		verify(d.GetSize() == 3);
		verify(d[0] == 3);
		verify(d[1] == 4);
		verify(d[2] == 5);

		d.Erase(0);
		verify(d.GetSize() == 2);
		verify(d[0] == 4);
		verify(d[1] == 5);

		d.Erase(0);
		verify(d.GetSize() == 1);
		verify(d[0] == 5);

		d.Erase(0);
		verify(d.GetSize() == 0);
		verify(d.IsEmpty());
	}

	test("OtlDeque<int>($(DISPLAY)) (front < back): PushBack: Erase back")
		leakcheck;
	{
		OtlDeque<int> d(GROWTH);

		for (int i = 1; i <= 5; ++i)
			verify_success(d.PushBack(i));

		verify(CheckCapacity(d.GetCapacity(), 5, GROWTH));

		verify(d.GetSize() == 5);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);
		verify(d[4] == 5);

		d.Erase(4);
		verify(d.GetSize() == 4);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);

		d.Erase(3);
		verify(d.GetSize() == 3);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);

		d.Erase(2);
		verify(d.GetSize() == 2);
		verify(d[0] == 1);
		verify(d[1] == 2);

		d.Erase(1);
		verify(d.GetSize() == 1);
		verify(d[0] == 1);

		d.Erase(0);
		verify(d.GetSize() == 0);
		verify(d.IsEmpty());
	}

	test("OtlDeque<int>($(DISPLAY)) (front > back): Erase in the middle")
		leakcheck;
	{
		OtlDeque<int> d(GROWTH);

		for (int i = 5; i >= 1; --i)
			verify_success(d.PushFront(i));

		verify(CheckCapacity(d.GetCapacity(), 5, GROWTH));

		verify(d.GetSize() == 5);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);
		verify(d[4] == 5);

		d.Erase(1);
		verify(d.GetSize() == 4);
		verify(d[0] == 1);
		verify(d[1] == 3);
		verify(d[2] == 4);
		verify(d[3] == 5);

		d.Erase(2);
		verify(d.GetSize() == 3);
		verify(d[0] == 1);
		verify(d[1] == 3);
		verify(d[2] == 5);

		d.Erase(1);
		verify(d.GetSize() == 2);
		verify(d[0] == 1);
		verify(d[1] == 5);
	}

	test("OtlDeque<int>($(DISPLAY)) (front > back): Erase front")
		leakcheck;
	{
		OtlDeque<int> d(GROWTH);

		for (int i = 5; i >= 1; --i)
			verify_success(d.PushFront(i));

		verify(CheckCapacity(d.GetCapacity(), 5, GROWTH));

		verify(d.GetSize() == 5);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);
		verify(d[4] == 5);

		d.Erase(0);
		verify(d.GetSize() == 4);
		verify(d[0] == 2);
		verify(d[1] == 3);
		verify(d[2] == 4);
		verify(d[3] == 5);

		d.Erase(0);
		verify(d.GetSize() == 3);
		verify(d[0] == 3);
		verify(d[1] == 4);
		verify(d[2] == 5);

		d.Erase(0);
		verify(d.GetSize() == 2);
		verify(d[0] == 4);
		verify(d[1] == 5);

		d.Erase(0);
		verify(d.GetSize() == 1);
		verify(d[0] == 5);

		d.Erase(0);
		verify(d.GetSize() == 0);
		verify(d.IsEmpty());
	}

	test("OtlDeque<int>($(DISPLAY)) (front > back): Erase back")
		leakcheck;
	{
		OtlDeque<int> d(GROWTH);

		for (int i = 5; i >= 1; --i)
			verify_success(d.PushFront(i));

		verify(CheckCapacity(d.GetCapacity(), 5, GROWTH));

		verify(d.GetSize() == 5);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);
		verify(d[4] == 5);

		d.Erase(4);
		verify(d.GetSize() == 4);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);

		d.Erase(3);
		verify(d.GetSize() == 3);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);

		d.Erase(2);
		verify(d.GetSize() == 2);
		verify(d[0] == 1);
		verify(d[1] == 2);

		d.Erase(1);
		verify(d.GetSize() == 1);
		verify(d[0] == 1);

		d.Erase(0);
		verify(d.GetSize() == 0);
		verify(d.IsEmpty());
	}

	// Insert

	test("OtlDeque<int>($(DISPLAY)) (front < back): Insert middle")
		leakcheck;
	{
		OtlDeque<int> d(GROWTH);

		for (int i = 1; i <= 5; ++i)
			verify_success(d.PushBack(i));

		verify(d.GetSize() == 5);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);
		verify(d[4] == 5);

		d.Insert(2, 1337);
		verify(d.GetSize() == 6);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 1337);
		verify(d[3] == 3);
		verify(d[4] == 4);
		verify(d[5] == 5);

		verify(CheckCapacity(d.GetCapacity(), 6, GROWTH));
	}

	test("OtlDeque<int>($(DISPLAY)) (front < back): Insert front")
		leakcheck;
	{
		OtlDeque<int> d(GROWTH);

		for (int i = 1; i <= 5; ++i)
			verify_success(d.PushBack(i));

		verify(d.GetSize() == 5);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);
		verify(d[4] == 5);

		d.Insert(0, 1337);
		verify(d.GetSize() == 6);
		verify(d[0] == 1337);
		verify(d[1] == 1);
		verify(d[2] == 2);
		verify(d[3] == 3);
		verify(d[4] == 4);
		verify(d[5] == 5);

		verify(CheckCapacity(d.GetCapacity(), 6, GROWTH));
	}

	test("OtlDeque<int>($(DISPLAY)) (front < back): Insert back")
		leakcheck;
	{
		OtlDeque<int> d(GROWTH);

		for (int i = 1; i <= 5; ++i)
			verify_success(d.PushBack(i));

		verify(d.GetSize() == 5);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);
		verify(d[4] == 5);

		d.Insert(5, 1337);
		verify(d.GetSize() == 6);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);
		verify(d[4] == 5);
		verify(d[5] == 1337);

		verify(CheckCapacity(d.GetCapacity(), 6, GROWTH));
	}


	test("OtlDeque<int>($(DISPLAY)) (front > back): Insert middle")
		leakcheck;
	{
		OtlDeque<int> d(GROWTH);

		for (int i = 5; i >= 1; --i)
			verify_success(d.PushFront(i));

		verify(d.GetSize() == 5);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);
		verify(d[4] == 5);

		d.Insert(2, 1337);
		verify(d.GetSize() == 6);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 1337);
		verify(d[3] == 3);
		verify(d[4] == 4);
		verify(d[5] == 5);

		verify(CheckCapacity(d.GetCapacity(), 6, GROWTH));
	}

	test("OtlDeque<int>($(DISPLAY)) (front > back): Insert front")
		leakcheck;
	{
		OtlDeque<int> d(GROWTH);

		for (int i = 5; i >= 1; --i)
			verify_success(d.PushFront(i));

		verify(d.GetSize() == 5);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);
		verify(d[4] == 5);

		d.Insert(0, 1337);
		verify(d.GetSize() == 6);
		verify(d[0] == 1337);
		verify(d[1] == 1);
		verify(d[2] == 2);
		verify(d[3] == 3);
		verify(d[4] == 4);
		verify(d[5] == 5);

		verify(CheckCapacity(d.GetCapacity(), 6, GROWTH));
	}

	test("OtlDeque<int>($(DISPLAY)) (front > back): Insert back")
		leakcheck;
	{
		OtlDeque<int> d(GROWTH);

		for (int i = 5; i >= 1; --i)
			verify_success(d.PushFront(i));

		verify(d.GetSize() == 5);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);
		verify(d[4] == 5);

		d.Insert(5, 1337);
		verify(d.GetSize() == 6);
		verify(d[0] == 1);
		verify(d[1] == 2);
		verify(d[2] == 3);
		verify(d[3] == 4);
		verify(d[4] == 5);
		verify(d[5] == 1337);

		verify(CheckCapacity(d.GetCapacity(), 6, GROWTH));
	}

	test("OtlDeque<int>($(DISPLAY)) (mixed): Insert")
		leakcheck;
	{
		OtlDeque<int> d(GROWTH);

		verify_success(d.PushFront(2));
		verify_success(d.PushBack(3));
		verify_success(d.PushFront(1));
		verify_success(d.PushBack(4));
		verify_success(d.PushBack(5));

		verify_success(d.Insert(1, 1337));

		verify(d.GetSize() == 6);
		verify(d[0] == 1);
		verify(d[1] == 1337);
		verify(d[2] == 2);
		verify(d[3] == 3);
		verify(d[4] == 4);
		verify(d[5] == 5);

		verify(CheckCapacity(d.GetCapacity(), 6, GROWTH));
	}

} // foreach

test("OtlDeque<int>: Erase sole middle element")
	leakcheck;
{
	OtlDeque<int> d(10);

	for (int i = 1; i <= 5; ++i)
		verify_success(d.PushBack(i));

	verify(d.GetSize() == 5);
	verify(d[0] == 1);
	verify(d[1] == 2);
	verify(d[2] == 3);
	verify(d[3] == 4);
	verify(d[4] == 5);

	for (int i = 0; i < 4; ++i)
		d.PopFront();

	verify(d.GetSize() == 1);
	d.Erase(0);
	verify(d.IsEmpty());

	// Use the deque again, after removing.

	for (int i = 1; i <= 5; ++i)
		verify_success(d.PushBack(i));

	verify(d.GetSize() == 5);
	verify(d[0] == 1);
	verify(d[1] == 2);
	verify(d[2] == 3);
	verify(d[3] == 4);
	verify(d[4] == 5);
}

test("OtlDeque<int>: Insert into sole middle element")
	leakcheck;
{
	OtlDeque<int> d(10);

	for (int i = 1; i <= 5; ++i)
		verify_success(d.PushBack(i));

	verify(d.GetSize() == 5);
	verify(d[0] == 1);
	verify(d[1] == 2);
	verify(d[2] == 3);
	verify(d[3] == 4);
	verify(d[4] == 5);

	for (int i = 0; i < 4; ++i)
		d.PopFront();

	verify(d.GetSize() == 1);
	d.Insert(0, 1337);
	verify(d.GetSize() == 2);

	verify(d[0] == 1337);
	verify(d[1] == 5);
}

test("OtlDeque<Point>: Example code")
	leakcheck;
{
	// Check that the main page example code actually works.

	OtlDeque<Point> deque;

	// Adding elements (Points are copied):
	verify_success(deque.PushBack(Point(13, 37)));
	verify_success(deque.PushBack(Point(18, 14)));
	verify_success(deque.PushFront(Point(19, 84)));

	// Random access:
	verify(deque[0].x == 19 && deque[0].y == 84);
	verify(deque[1].x == 13 && deque[1].y == 37);
	verify(deque[2].x == 18 && deque[2].y == 14);

	// Removing elements:
	deque.Erase(1); // Removes (13, 37).
	deque.Insert(1, Point(12, 34)); // Insert before item at index '1'.

	verify(deque[0].x == 19 && deque[0].y == 84);
	verify(deque[1].x == 12 && deque[1].y == 34);
	verify(deque[2].x == 18 && deque[2].y == 14);
}

subtest CheckGrowth(float growth, int size, const int* capacities)
{
	OtlDeque<int> v(growth);

	const int* c = capacities;

	do
	{
		verify(v.GetCapacity() == (size_t)*c);
		if (v.GetSize() & 1)
			verify_success(v.PushBack(1337));
		else
			verify_success(v.PushFront(-1337));
		if (v.GetSize() > static_cast<size_t>(*c))
			c++;
	} while (v.GetSize() < static_cast<size_t>(size) && *c != -1);

	verify(v.GetSize() == (size_t)size);
}

test("OtlDeque<int>(1.5f): Growth")
	leakcheck;
{
	const int capacities[] = {
		0,
		1,
		2,
		3,
		4,
		6,
		9,
		13,
		19,
		28,
		42,
		63,
		94,
		141,
		211,
		316,
		474,
		711,
		1066,
		1599,
		2398,
		3597,
		5395,
		8092,
		12138,
		-1
	};

	verify(CheckGrowth(1.5f, 10000, capacities));
}

test("OtlDeque<int>(2.0f): Growth")
	leakcheck;
{
	const int capacities[] = {
		0,
		1,
		2,
		4,
		8,
		16,
		32,
		64,
		128,
		256,
		512,
		1024,
		2048,
		4096,
		8192,
		16384,
		-1
	};

	verify(CheckGrowth(2.0f, 10000, capacities));
}

test("OtlDeque<int>(9.0f): Growth")
	leakcheck;
{
	const int capacities[] = {
		0,
		1,
		9,
		81,
		729,
		6561,
		59049,
		-1
	};

	verify(CheckGrowth(9.0f, 10000, capacities));
}

test("OtlDeque<int>(1.001f): Growth")
	leakcheck;
{
	OtlDeque<int> v(1.001f);

	for (int i = 0; i < 100; ++i)
	{
		verify(v.GetCapacity() == (size_t)i);
		verify_success(v.PushBack(i));
	}
}

test("OtlDeque<Dtor>: ~OtlDeque")
	leakcheck;
{
	int pcount = 0; // Number of times ~DtorParent is called.
	int dcount = 0; // Number of times ~Dtor is called.
	const int NUM_ELEMENTS = 17;

	{
		OtlDeque<Dtor> deque;

		for (int i = 0; i < NUM_ELEMENTS; ++i)
		{
			verify_success(deque.PushBack(Dtor(pcount, dcount)));

			/* Resize after each PushBack, so that each subsequent PushBack
			   always requires a reallocation. This verifies that destructors
			   are *not* called when Trimming. */
			verify_success(deque.Trim());

			/* The destructors should at this point have been called once for
			   each element insertion, because objects are copied as they
			   enter the OtlDeque. */
			verify(pcount == i+1 && dcount == i+1);
		}

		// ~OtlDeque is called ...
	}

	verify(pcount == NUM_ELEMENTS * 2);
	verify(dcount == NUM_ELEMENTS * 2);
}

test("OtlDeque<Dtor>: PopBack")
	leakcheck;
{
	int pcount = 0; // Number of times ~DtorParent is called.
	int dcount = 0; // Number of times ~Dtor is called.
	const int NUM_ELEMENTS = 17;

	OtlDeque<Dtor> deque;

	for (int i = 0; i < NUM_ELEMENTS; ++i)
		verify_success(deque.PushBack(Dtor(pcount, dcount)));

	// Check destructor calls for temporary objects.
	verify(pcount == NUM_ELEMENTS && dcount == NUM_ELEMENTS);

	for (int i = 0; i < NUM_ELEMENTS; ++i)
	{
		deque.PopBack();
		verify(pcount == NUM_ELEMENTS + i + 1);
		verify(dcount == NUM_ELEMENTS + i + 1);
	}
}

test("OtlDeque<Dtor>: Erase")
	leakcheck;
{
	int pcount = 0; // Number of times ~DtorParent is called.
	int dcount = 0; // Number of times ~Dtor is called.
	const int NUM_ELEMENTS = 17;

	OtlDeque<Dtor> deque;

	for (int i = 0; i < NUM_ELEMENTS; ++i)
		verify_success(deque.PushBack(Dtor(pcount, dcount)));

	// Check destructor calls for temporary objects.
	verify(pcount == NUM_ELEMENTS && dcount == NUM_ELEMENTS);

	for (int i = 0; i < NUM_ELEMENTS; ++i)
	{
		deque.Erase(0);
		verify(pcount == NUM_ELEMENTS + i + 1);
		verify(dcount == NUM_ELEMENTS + i + 1);
	}
}
