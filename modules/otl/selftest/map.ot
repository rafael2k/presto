/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2012 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "otl.map";

include "modules/otl/map.h";
include "modules/hardcore/base/opstatus.h";

global
{
	class ComplexValue
	{
	public:
		/* Value needs default c-tor. A compiler-generated one would do.
		A parametrized c-tor with default arguments is fine too. */
		ComplexValue(int val = 0) : m_val(val) {}

		/* Value must be copy-constructible. A compiler-generated copy c-tor would
		do as well.*/
		ComplexValue(const ComplexValue& other) : m_val(other.m_val) {}
		bool Equals(const ComplexValue& other) const { return m_val == other.m_val; }
	private:
		int m_val;
		bool operator<(const ComplexValue& other); // OtlMap shouldn't compare values.
		bool operator=(const ComplexValue& other); // Values don't need assignment.
	};

	class ComplexKey
	{
	public:
		// A non-default c-tor should suffice.
		ComplexKey(int val) : m_val(val) {}

		/* Keys must be copy-constructible. A compiler-generated copy c-tor would
		do as well.*/
		ComplexKey(const ComplexKey& other) : m_val(other.m_val) {}

		 // Custom ComplexKeyComparator will use this.
		int GetVal() const { return m_val; }
		bool Equals(const ComplexKey& other) const { return m_val == other.m_val; }
	private:
		int m_val;
		bool operator<(const ComplexKey& other); // We will use a custom comparator.
		bool operator=(const ComplexKey& other); // Keys don't need assignment.
	};

	struct ComplexKeyComparator
	{
		bool operator()(const ComplexKey& o1, const ComplexKey& o2) const
		{
			return o1.GetVal() < o2.GetVal();
		}
	};

	typedef OtlMap<ComplexKey, ComplexValue, ComplexKeyComparator> ComplexMap;
}

test("Initialize")
{
	OtlMap<int, float> map;
	verify(map.Empty());
	verify(map.Size() == 0);
	verify(map.Begin() == map.End());
}

test("Find in empty map")
{
	OtlMap<int, float> map;
	verify(map.Find(10) == map.End());
}

subtest insert(OtlMap<int, float>& map, int key, float value)
{
	OtlMap<int, float>::Iterator insertionPosition = map.End();
	verify_success(map.Insert(key, value, &insertionPosition));
	verify(insertionPosition != map.End());
	verify(insertionPosition->first == key);
	verify(insertionPosition->second == value);
}

subtest mappingInMap(OtlMap<int, float>& map, int key, float value)
{
	OtlMap<int, float>::Iterator found = map.Find(key);
	verify(found != map.End());
	verify(found->first == key);
	verify(found->second == value);
}

test("Insert single mapping")
{
	OtlMap<int, float> map;
	insert(map, 10, 1.5f);
	mappingInMap(map, 10, 1.5f);
}

test("Insert several mappings")
{
	OtlMap<int, float> map;
	float v = 0.f;
	for(int k = 0; k < 10; k++)
	{
		insert(map, k, v++);
	}
	verify(map.Size() == 10);

	v = 0.f;
	for(int k = 0; k < 10; k++)
	{
		mappingInMap(map, k, v++);
	}
}

test("Iterate over map")
{
	OtlMap<int, float> map;
	for(int k = 0; k < 10; k++)
	{
		insert(map, k, (float)(10 * k)); // Casting int to float for value.
	}

	int key = 0;
	for(OtlMap<int, float>::Iterator it = map.Begin(); it != map.End(); it++)
	{
		verify(it->first == key);
		verify(it->second == 10 * key);
		key++;
	}
}

test("Erase nonexistent mapping")
{
	OtlMap<int, float> map;
	verify(map.Erase(6) == 0);
}

subtest mappingNotInMap(OtlMap<int, float>& map, int key)
{
	verify(map.Find(key) == map.End());

	for(OtlMap<int, float>::Iterator it = map.Begin(); it != map.End(); it++)
		verify(it->first != key);
}

test("Insert and Erase mappings")
{
	OtlMap<int, float> map;
	verify(map.Count(10) == 0);
	insert(map, 10, 1.0f);
	verify(map.Count(10) == 1);
	insert(map, 15, 1.5f);
	insert(map, 20, 2.0f);
	verify(map.Erase(10) == 1);
	mappingNotInMap(map, 10);
	verify(map.Count(10) == 0);
	mappingInMap(map, 15, 1.5f); // Wasn't destroyed in the process.
	mappingInMap(map, 20, 2.0f);

	verify(map.Erase(15) == 1);
	verify(map.Erase(15) == 0); // Second deletion attempt.
	mappingNotInMap(map, 10);
	mappingNotInMap(map, 15);
	mappingInMap(map, 20, 2.0f);

	verify(map.Erase(20) == 1);
	verify(map.Erase(20) == 0);
	mappingNotInMap(map, 10);
	mappingNotInMap(map, 15);
	mappingNotInMap(map, 20);

	verify(map.Size() == 0);
	verify(map.Empty());
}

test("Overwrite mapping")
{
	OtlMap<int, float> map;
	insert(map, 10, 1.0f);
	insert(map, 10, 2.0f);

	mappingInMap(map, 10, 2.0f);
}

test("Modify value")
{
	OtlMap<int, float> map;
	insert(map, 10, 1.0f);

	OtlMap<int, float>::Iterator found = map.Find(10);
	verify(found != map.End());

	found->second = 2.0;

	mappingInMap(map, 10, 2.0f);
}

test("Clear")
{
	OtlMap<int, float> map;
	insert(map, 10, 1.0f);
	insert(map, 15, 1.5f);
	insert(map, 20, 2.0f);

	map.Clear();

	mappingNotInMap(map, 10);
	mappingNotInMap(map, 15);
	mappingNotInMap(map, 20);
}

subtest insertComplex(ComplexMap& map, int k, int v)
{
	ComplexMap::Iterator insertionPosition = map.End();

	ComplexKey key(k);
	ComplexValue value(v);
	verify_success(map.Insert(key, value, &insertionPosition));
	verify(insertionPosition->first.Equals(key));
	verify(insertionPosition->second.Equals(value));
}

subtest mappingInMapComplex(ComplexMap& map, int k, int v)
{
	ComplexMap::Iterator found = map.Find(ComplexKey(k));
	verify(found != map.End());
	verify(found->first.Equals(ComplexKey(k)));
	verify(found->second.Equals(ComplexValue(v)));
}

test("Complex types")
{
	typedef OtlMap<ComplexKey, ComplexValue, ComplexKeyComparator> ComplexMap;
	ComplexMap map;
	insertComplex(map, 5, 10);
	insertComplex(map, 6, 10); // Same value.
	insertComplex(map, 7, 10);
	insertComplex(map, 5, 15); // Overwrite.

	mappingInMapComplex(map, 5, 15);
	mappingInMapComplex(map, 6, 10);
	mappingInMapComplex(map, 7, 10);
}
