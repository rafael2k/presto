/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "otl.list";

include "modules/otl/list.h";

global
{
	struct MyPair { MyPair(int a, int b) : a(a), b(b) {} int a; int b; };
}

subtest CompareList(const OtlList<int>& list, const int array[], size_t array_len)
{
	OtlList<int>::ConstIterator itr;
	size_t i;
	for (i = 0, itr = list.Begin();
		 !list.IsAtEnd(itr) && i < array_len; ++itr, i++)
		verify(*itr == array[i]);
	verify(itr == list.End());
	verify(i == array_len);
}

test("Misc. OtlList interaction")
{
	OtlList<int> a;
	int i;

	verify(a.IsEmpty());
	verify(a.Count() == 0);
	verify(a.Begin() == a.End());

	for (i = 0; i < 10; i++)
		verify_success(a.Append(i));

	verify(!a.IsEmpty());
	verify(a.Count() == 10);
	verify(a.First() == 0);
	verify(a.Last() == 9);

	OtlList<int>::ConstIterator it = a.Begin();
	for (i = 0; it != a.End(); ++it, ++i)
		verify(*it == i);
	verify(i == 10);

	it = --(a.End());
	for (i = 9; it != a.End(); --it, --i)
		verify(*it == i);
	verify(i == -1);

	a.Last() = 10;
	a.First() = -1;

	verify(!a.IsEmpty());
	verify(a.Count() == 10);
	verify(a.First() == -1);
	verify(a.Last() == 10);

	verify(a.PopLast() == 10);
	verify(a.PopLast() == 8);
	verify(a.PopFirst() == -1);
	verify(a.PopFirst() == 1);

	verify(!a.IsEmpty());
	verify(a.Count() == 6);

	it = a.Begin();
	for (i = 2; it != a.End(); ++it, ++i)
		verify(*it == i);
	verify(i == 8);

	it = --(a.End());
	for (i = 7; it != a.End(); --it, --i)
		verify(*it == i);
	verify(i == 1);

	verify(a.Consume(3) == 3);
	verify(!a.IsEmpty());
	verify(a.Count() == 3);

	verify_success(a.Prepend(17));
	verify_success(a.Prepend(42));

	verify(!a.IsEmpty());
	verify(a.Count() == 5);
	verify(a.First() == 42);

	verify(a.Consume(17) == 5);
	verify(a.IsEmpty());
	verify(a.Count() == 0);

	verify_success(a.Append(1));
	verify_success(a.Append(2));
	verify_success(a.Append(3));
	verify_success(a.Append(4));
	verify_success(a.Append(5));
	it = a.Begin();
	verify(it != a.End());
	++(++it);
	verify(*it == 3);
	{
		// 1, 2, 3 <- it, 4, 5
		OtlList<int>::Iterator remove = a.Begin();
		while (remove != it) ++remove;
		++it;
		// 1, 2, 3 <- remove, 4 <- it, 5
		verify(a.Remove(remove) == 3);
		// 1, 2, (3 <- remove), 4 <- it, 5
		verify(*it == 4);
		verify(*(--it) == 2);
		// 1, 2 <- it, (3 <- remove), 4, 5
		verify(a.Count() == 4);
		verify_success(a.InsertBefore(17, remove));
		// 1, 2 <- it, 17, (3 <- remove), 4, 5
		verify_success(a.InsertAfter(42, remove));
		// 1, 2 <- it, 17, (3 <- remove), 42, 4, 5
		verify(a.Count() == 6);

		it = a.Begin();
		verify(it != a.End());
		verify(*it == 1);
		verify(++it != a.End());
		verify(*it == 2);
		verify(++it != a.End());
		verify(*it == 17);
		verify(++it != a.End());
		verify(*it == 42);
		verify(++it != a.End());
		verify(*it == 4);
		verify(++it != a.End());
		verify(*it == 5);
		verify(++it == a.End());

		verify(a.Remove(++remove) == 42);
		// 1, 2, 17, (42 <- remove), 4, 5
		verify(a.Count() == 5);
	}

	it = a.End();
	verify(--it != a.End());
	verify(*it == 5);
	verify(--it != a.End());
	verify(*it == 4);
	verify(--it != a.End());
	verify(*it == 17);
	verify(--it != a.End());
	verify(*it == 2);
	verify(--it != a.End());
	verify(*it == 1);
	verify(--it == a.End());
}

test("Misc. OtlCountedList interaction")
{
	OtlCountedList<int> a;
	int i;

	verify(a.IsEmpty());
	verify(a.Count() == 0);
	verify(a.Begin() == a.End());

	for (i = 0; i < 10; i++)
		verify_success(a.Append(i));

	verify(!a.IsEmpty());
	verify(a.Count() == 10);
	verify(a.First() == 0);
	verify(a.Last() == 9);

	OtlCountedList<int>::ConstIterator it = a.Begin();
	for (i = 0; it != a.End(); ++it, ++i)
		verify(*it == i);
	verify(i == 10);

	it = --(a.End());
	for (i = 9; it != a.End(); --it, --i)
		verify(*it == i);
	verify(i == -1);

	a.Last() = 10;
	a.First() = -1;

	verify(!a.IsEmpty());
	verify(a.Count() == 10);
	verify(a.First() == -1);
	verify(a.Last() == 10);

	verify(a.PopLast() == 10);
	verify(a.PopLast() == 8);
	verify(a.PopFirst() == -1);
	verify(a.PopFirst() == 1);

	verify(!a.IsEmpty());
	verify(a.Count() == 6);

	it = a.Begin();
	for (i = 2; it != a.End(); ++it, ++i)
		verify(*it == i);
	verify(i == 8);

	it = --(a.End());
	for (i = 7; it != a.End(); --it, --i)
		verify(*it == i);
	verify(i == 1);

	verify(a.Consume(3) == 3);
	verify(!a.IsEmpty());
	verify(a.Count() == 3);

	verify_success(a.Prepend(17));
	verify_success(a.Prepend(42));

	verify(!a.IsEmpty());
	verify(a.Count() == 5);
	verify(a.First() == 42);

	verify(a.Consume(17) == 5);
	verify(a.IsEmpty());
	verify(a.Count() == 0);

	verify_success(a.Append(1));
	verify_success(a.Append(2));
	verify_success(a.Append(3));
	verify_success(a.Append(4));
	verify_success(a.Append(5));
	it = a.Begin();
	verify(it != a.End());
	++(++it);
	verify(*it == 3);
	{
		// 1, 2, 3 <- it, 4, 5
		OtlList<int>::Iterator remove = a.Begin();
		while (remove != it) ++remove;
		++it;
		// 1, 2, 3 <- remove, 4 <- it, 5
		verify(a.Remove(remove) == 3);
		// 1, 2, (3 <- remove), 4 <- it, 5
		verify(*it == 4);
		verify(*(--it) == 2);
		// 1, 2 <- it, (3 <- remove), 4, 5
		verify(a.Count() == 4);
		verify_success(a.InsertBefore(17, remove));
		// 1, 2 <- it, 17, (3 <- remove), 4, 5
		verify_success(a.InsertAfter(42, remove));
		// 1, 2 <- it, 17, (3 <- remove), 42, 4, 5
		verify(a.Count() == 6);
		verify(a.Remove(++remove) == 42);
		// 1, 2, 17, (42 <- remove), 4, 5
		verify(a.Count() == 5);
	}

	it = a.End();
	verify(--it != a.End());
	verify(*it == 5);
	verify(--it != a.End());
	verify(*it == 4);
	verify(--it != a.End());
	verify(*it == 17);
	verify(--it != a.End());
	verify(*it == 2);
	verify(--it != a.End());
	verify(*it == 1);
	verify(--it == a.End());
}

test("Iterator survives list")
{
	/* Verify that you can still use an iterator and its value in a sensible way
	 * after the list was deleted. */

	/* First verify that a for (; itr != end; ++itr) loop will end if both the
	 * iterator and the end are available after the death of the list. */
	OtlList<int>::ConstIterator itr1;
	OtlList<int>::Iterator itr2;
	OtlList<int>::ConstIterator end;
	{
		OtlList<int> a;
		int i;

		for (i = 0; i < 4; i++)
			verify_success(a.Append(i));

		end = a.End();
		OtlList<int>::Iterator itr;
		for (itr = a.Begin(), i = 0; !a.IsAtEnd(itr); ++itr, ++i)
			verify(*itr == i);
		verify(i == 4);

		itr2 = a.Begin();
		verify(*(++itr2) == 1);
		itr1 = itr2++;
		verify(*itr1 == 1);
		verify(*itr2 == 2);
	}
	verify(*itr1 == 1);
	verify(*itr2 == 2);
	verify(++itr1 == itr2);
	verify(++itr1 == end);
	verify(++itr2 == end);
	verify(++itr2 == end);

	/* Now verify that a single node may survive as well, though in this case we
	 * have no end to compare with. */
	{
		OtlList<int> a;
		int i;

		for (i = 0; i < 4; i++)
			verify_success(a.Append(i));

		OtlList<int>::Iterator itr;
		for (itr = a.Begin(), i = 0; !a.IsAtEnd(itr); ++itr, ++i)
			verify(*itr == i);
		verify(i == 4);

		itr1 = a.Begin();
		verify(*itr1 == 0);
	}
	verify(*itr1 == 0);
	verify(*(++itr1) == 0);
}

test("OtlList::ReverseIterator")
{
	OtlList<int> a;
	int i;

	verify(a.IsEmpty());
	verify(a.Count() == 0);
	verify(a.RBegin() == a.REnd());

	for (i = 0; i < 10; i++)
		verify_success(a.Prepend(i));

	verify(!a.IsEmpty());
	verify(a.Count() == 10);
	verify(a.First() == 9);
	verify(a.Last() == 0);

	OtlList<int>::ReverseIterator it = a.RBegin();
	for (i = 0; it != a.REnd(); ++it, ++i)
	{
		verify(*it == i);
		*it += 1;
	}
	verify(--it == a.Begin());
	verify(i == 10);

	it = a.RBegin();
	verify(*it == 1);
	verify(++it != a.REnd());
	verify(*it == 2);
	verify(a.Remove(it) == 2);
	verify(a.Count() == 9);
	verify(++it != a.REnd());
	verify(*it == 3);
	OtlList<int>::ReverseIterator it2 = it++;
	verify(*it == 4);
	verify(*it2 == 3);
	verify(++it2 == it);
	verify(--(--it) != a.REnd());
	verify(*it == 1);
	verify(--it == a.REnd());

	verify(*it2 == 4);
	verify_success(a.InsertAfter(17, it2));
	verify(*it2 == 4);
	verify(++it2 != a.REnd());
	verify(*it2 == 17);
}

test("OtlList::ReverseConstIterator")
{
	OtlList<int> a;
	int i;

	verify(a.IsEmpty());
	verify(a.Count() == 0);
	verify(a.RBegin() == a.REnd());

	for (i = 0; i < 10; i++)
		verify_success(a.Prepend(i));

	verify(!a.IsEmpty());
	verify(a.Count() == 10);
	verify(a.First() == 9);
	verify(a.Last() == 0);

	OtlList<int>::ReverseConstIterator it = a.RBegin();
	for (i = 0; it != a.REnd(); ++it, ++i)
		verify(*it == i);
	verify(it == a.End());
	verify(i == 10);

	it = a.RBegin();
	verify(*it == 0);
	verify(++it != a.REnd());
	verify(*it == 1);
	OtlList<int>::ReverseConstIterator it2 = it++;
	verify(*it == 2);
	verify(*it2 == 1);
	verify(++it2 == it);
	verify(--(--it) != a.REnd());
	verify(*it == 0);
	verify(--it == a.REnd());
}

test("OtlList::FindItem")
{
	/* Verifies that OtlList::FindItem() works correctly and can be used with
	 * both a normal iterator (search from front to back) and the reverse
	 * iterator (searching in the other direction). */
	OtlList<int> a;
	int i;

	verify(a.IsEmpty());
	verify(a.Count() == 0);
	verify(a.RBegin() == a.REnd());
	for (i = 1; i <= 10; i++)
		verify_success(a.Append(i));

	verify(!a.IsEmpty());
	verify(a.Count() == 10);
	verify(a.First() == 1);
	verify(a.Last() == 10);

	// append another 2
	verify_success(a.Append(2));

	// searching from the front finds the first "2"
	OtlList<int>::ConstIterator it = a.FindItem(2, a.Begin());
	verify(it != a.End());
	verify(*it == 2);
	verify(++it != a.End());
	verify(*it == 3);

	// searching from the end finds the second "2"
	OtlList<int>::ReverseIterator rit = a.FindItem(2, a.RBegin());
	verify(rit != a.REnd());
	/* ... which is the same item as searching for another "2" starting at the
	 * item after the first "2" */
	verify(rit == a.FindItem(2, it));
	verify(*rit == 2);
	verify(++rit != a.REnd());
	verify(*rit == 10);

	// find all "2"
	size_t count = 0;
	for (it = a.Begin(); (it = a.FindItem(2, it)) != a.End(); ++it)
		++count;
	verify(count == 2);

	// find all "2" from the end
	count = 0;
	for (rit = a.RBegin(); (rit = a.FindItem(2, rit)) != a.REnd(); ++rit)
		++count;
	verify(count == 2);

	/* There is only one "1", so searching it from front and back shall point to
	 * the same value: */
	it = a.FindItem(1, a.Begin());
	verify(it == a.Begin());
	rit = a.FindItem(1, a.RBegin());
	verify(it == rit);
	*rit = 17;
	verify(*rit == 17);
	verify(*it == 17);
}

test("OtlList::Range")
{
	OtlList<int> a;
	int i;

	verify(a.IsEmpty());
	verify(a.Count() == 0);
	verify(a.RBegin() == a.REnd());

	for (i = 0; i < 10; i++)
		verify_success(a.Append(i));

	{
		OtlList<int>::ConstRange range;
		for (i = 0, range = a.ConstAll();
			 range; ++range, ++i)
			verify(*range == i);
		verify(i == 10);
	}

	{
		OtlList<int>::ReverseConstRange range;
		for (i = 0, range = a.RConstAll();
			 range; ++range, ++i)
			verify(*range == 9-i);
		verify(i == 10);
	}

	{
		OtlList<int>::Range range;
		for (i = 0, range = a.All(); range; ++range, ++i)
		{
			verify(*range == i);
			*range += 1;
		}
		verify(i == 10);
	}

	{
		OtlList<int>::ReverseRange range;
		for (i = 0, range = a.RAll(); range; ++range, ++i)
		{
			verify(*range == 10 - i);
			*range -= 1;
		}
		verify(i == 10);
	}

	verify(a.First() == 0);
	verify(a.Last() == 9);
}

test("OtlList::RemoveItem")
{
	OtlList<int> a;
	int i;
	for (i = 0; i < 4; i++)
		verify_success(a.Append(i));
	for (i = 0; i < 4; i++)
		verify_success(a.Append(i));

	verify(a.Count() == 8);
	verify(a.First() == 0);
	verify(a.RemoveItem(0));			// remove first 0
	verify(a.First() == 1);
	verify(a.FindItem(0) != a.End());	// second 0 is still in the list
	verify(a.RemoveItem(0));			// remove second 0
	verify(a.FindItem(0) == a.End());

	// test Remove() starting with an iterator != Begin()
	OtlList<int>::Iterator itr = a.FindItem(3);
	verify(itr != a.End());
	verify(a.RemoveItem(2, itr));		// remove the second 2
	verify(!a.RemoveItem(2, itr));		// no other 2 after itr

	// compare the list with the expected array:
	const size_t expected1_len = 5;
	const int expected1[expected1_len] = { 1, 2, 3, 1, 3 }; // ARRAY OK 2011-11-15 markuso
	verify(CompareList(a, expected1, expected1_len));

	// test RemoveItem() starting at RBegin(), i.e. removing from the end:
	verify(a.RemoveItem(3, a.RBegin()));
	const size_t expected2_len = 4;
	const int expected2[expected2_len] = { 1, 2, 3, 1 }; // ARRAY OK 2011-11-15 markuso
	verify(CompareList(a, expected2, expected2_len));
}

test("OtlList with struct")
{
	OtlList< struct MyPair > l;
	struct MyPair pair(1, 2);
	l.Append(pair);
	OtlList< struct MyPair >::Iterator it = l.Begin();
	verify(it->a == 1);
	verify(it->b == 2);
}

test("Comparing iterators")
{
	OtlList<int> list;
	list.Append(5);
	const OtlList<int>& clist = list;

	// Iterators and reverse iterators.
	verify(list.REnd() == --list.Begin());
	verify(list.REnd() != list.Begin());
	verify(--list.Begin() == list.REnd());
	verify(list.Begin() != list.REnd());

	// Const iterators and const reverse iterators.
	verify(clist.REnd() == --clist.Begin());
	verify(clist.REnd() != clist.Begin());
	verify(--clist.Begin() == clist.REnd());
	verify(clist.Begin() != clist.REnd());

	// Iterators and  const reverse iterators.
	verify(--list.Begin() == clist.REnd());
	verify(list.Begin() != clist.REnd());
	verify(clist.REnd() == --list.Begin());
	verify(clist.REnd() != list.Begin());

	// Const iterators and reverse iterators.
	verify(list.RBegin() == clist.Begin());
	verify(list.RBegin() != ++clist.Begin());
	verify(clist.Begin() == list.RBegin());
	verify(clist.Begin() != ++list.RBegin());

	// This should instantiate a reasonable number of comparison template functions.
}
