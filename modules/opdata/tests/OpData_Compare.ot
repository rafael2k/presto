/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "opdata.OpData.Compare";

include "modules/opdata/OpData.h";
include "modules/otl/list.h";
include "modules/opdata/OpDataFragmentIterator.h";

subtest SetupString(OpData& s, const char* string_setup[], const size_t* string_setup_len)
{
	if (string_setup_len)
		for (size_t i = 0; string_setup[i]; ++i)
			verify_success(s.AppendConstData(string_setup[i], string_setup_len[i]));
	else
		for (size_t i = 0; string_setup[i]; ++i)
			verify_success(s.AppendConstData(string_setup[i]));
}

test("OpData::StartsWith(const char *...)")
{
	// embedded mode
	OpData d;
	verify(d.StartsWith(NULL, 0));
	verify(d.StartsWith(""));
	verify(!d.StartsWith("x"));

	verify_success(d.SetConstData(""));
	verify(d.StartsWith(NULL, 0));
	verify(d.StartsWith(""));
	verify(!d.StartsWith("x"));

	verify_success(d.SetConstData("xyz"));
	verify(d.StartsWith(NULL, 0));
	verify(d.StartsWith(""));
	verify(d.StartsWith("x"));
	verify(d.StartsWith("xy"));
	verify(d.StartsWith("xyz"));
	verify(!d.StartsWith("xyzz"));
	verify(!d.StartsWith("abc"));
	verify(!d.StartsWith(" xyz"));

	// normal mode
	verify_success(d.SetConstData("012345678911234567892123456789312345678941"));
	verify_success(d.AppendConstData("012345678911234567892123456789312345678941"));
	verify(d.StartsWith(""));
	verify(d.StartsWith("0"));
	verify(d.StartsWith("01"));
	verify(d.StartsWith("012345678911234567892123456789312345678941"));
	verify(d.StartsWith("012345678911234567892123456789312345678941012345678911234567892123456789312345678941"));
	verify(!d.StartsWith("0123456789112345678921234567893123456789410123456789112345678921234567893123456789412"));
	verify(!d.StartsWith("123"));

	d.Consume(4);
	verify(d.StartsWith(""));
	verify(d.StartsWith("4"));
	verify(d.StartsWith("45"));
	verify(d.StartsWith("45678911234567892123456789312345678941012345678911234567892123456789312345678941"));
	verify(!d.StartsWith("456789112345678921234567893123456789410123456789112345678921234567893123456789412"));

	d.Trunc(72);
	verify(d.StartsWith(""));
	verify(d.StartsWith("4"));
	verify(d.StartsWith("45"));
	verify(d.StartsWith("456789112345678921234567893123456789410123456789112345678921234567893123"));
	verify(!d.StartsWith("4567891123456789212345678931234567894101234567891123456789212345678931234"));

	d.Consume(30);
	verify(d.StartsWith(""));
	verify(d.StartsWith("4"));
	verify(d.StartsWith("45"));
	verify(d.StartsWith("456789410123456789112345678921234567893123"));
	verify(!d.StartsWith("4567894101234567891123456789212345678931234"));

	d.Trunc(10);
	verify(d.StartsWith(""));
	verify(d.StartsWith("4"));
	verify(d.StartsWith("45"));
	verify(d.StartsWith("4567894101"));
	verify(!d.StartsWith("45678941012"));

	d.Consume(4);
	verify(d.StartsWith(""));
	verify(d.StartsWith("8"));
	verify(d.StartsWith("89"));
	verify(d.StartsWith("894101"));
	verify(!d.StartsWith("8941012"));

	d.Consume(6);
	verify(d.StartsWith(NULL, 0));
	verify(d.StartsWith(""));
	verify(!d.StartsWith("0"));
	verify(!d.StartsWith("1"));
	verify(!d.StartsWith("2"));
	verify(!d.StartsWith("3"));
	verify(!d.StartsWith("4"));
	verify(!d.StartsWith("5"));
	verify(!d.StartsWith("6"));
	verify(!d.StartsWith("7"));
	verify(!d.StartsWith("8"));
	verify(!d.StartsWith("9"));
}

test("OpData::StartsWith(const OpData& ...)")
{
	// compare embedded and embedded
	OpData a, b;
	verify(a.StartsWith(a));
	verify(a.StartsWith(b));
	verify(b.StartsWith(a));
	verify(a.StartsWith(b, 13));
	verify(b.StartsWith(a, 13));

	verify_success(b.SetConstData("foo"));
	verify(b.StartsWith(b));
	verify(!a.StartsWith(b));
	verify(b.StartsWith(a));
	verify(a.StartsWith(b, 0));
	verify(b.StartsWith(a, 13));

	verify_success(a.SetConstData("bar"));
	verify(a.StartsWith(a));
	verify(!a.StartsWith(b));
	verify(!b.StartsWith(a));
	verify(a.StartsWith(b, 0));
	verify(b.StartsWith(a, 0));

	verify_success(b.SetConstData("bar"));
	verify(b.StartsWith(b));
	verify(a.StartsWith(b));
	verify(b.StartsWith(a));
	verify(a.StartsWith(b, 13));
	verify(b.StartsWith(a, 14));

	verify_success(b.SetConstData("ba"));
	verify(b.StartsWith(b));
	verify(a.StartsWith(b));
	verify(!b.StartsWith(a));
	verify(a.StartsWith(b, 2));
	verify(b.StartsWith(a, 2));

	a.Trunc(2);
	verify(a == a);
	verify(b == b);
	verify(a == b);
	verify(b == a);

	// compare embedded and normal
	verify_success(b.SetConstData("This is a string long enough to force it into OpData's normal mode"));
	verify(b.StartsWith(b));
	verify(!a.StartsWith(b));
	verify(!b.StartsWith(a));
	verify(a.StartsWith(b, 0));
	verify(b.StartsWith(a, 0));

	verify_success(a.SetConstData("This"));
	verify(a.StartsWith(a));
	verify(!a.StartsWith(b));
	verify(b.StartsWith(a));
	verify(a.StartsWith(b, 4));
	verify(b.StartsWith(a, 4));
	verify(b.StartsWith(a, 10));
	verify(b.StartsWith(a, 100));

	b.Trunc(2); // a == "This", b = "Th"
	verify(b.StartsWith(b));
	verify(a.StartsWith(b));
	verify(!b.StartsWith(a));
	verify(b.StartsWith(a, 0));
	verify(b.StartsWith(a, 1));
	verify(b.StartsWith(a, 2));
	verify(!b.StartsWith(a, 3));
	verify(!b.StartsWith(a, 4));
	verify(a.StartsWith(b, 0));
	verify(a.StartsWith(b, 1));
	verify(a.StartsWith(b, 2));
	verify(a.StartsWith(b, 3));
	verify(a.StartsWith(b, 4));

	a.Trunc(2);
	verify(a == a);
	verify(b == b);
	verify(a == b);
	verify(b == a);

	// compare normal and normal
	verify_success(a.SetConstData("This is a string long enough to force it into OpData's normal mode"));
	verify_success(b.SetConstData("This is a string long enough to force it into "));
	verify_success(b.AppendConstData("OpData's normal mode"));
	verify(a.StartsWith(a));
	verify(b.StartsWith(b));
	verify(a.StartsWith(b));
	verify(b.StartsWith(a));

	verify(a == a);
	verify(b == b);
	verify(a == b);
	verify(b == a);
}

table opdata_startswithcase (
	const char* testname,
	const char** string_data, const size_t* string_data_len,
	const char** other_data, const size_t* other_data_len,
	size_t length, bool expected_result)
{
	// An empty string starts with an empty string:
	{ "empty",
		{ NULL }, { OpDataUnknownLength },
		{ NULL }, { OpDataUnknownLength }, OpDataUnknownLength, true },

	// Specifying the length does not change it
	{ "empty, length=17",
		{ NULL }, { OpDataUnknownLength },
		{ NULL }, { OpDataUnknownLength }, 17, true },

	// Any string starts with an empty string
	{ "foo starts with empty",
		{ "foo", NULL }, { OpDataUnknownLength },
		{ NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, true },

	{ "empty starts not with foo",
		{ NULL }, { OpDataUnknownLength },
		{ "foo", NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, false },

	// An empty string starts with the empty sub-string of "foo"
	{ "empty starts with foo,0",
		{ NULL }, { OpDataUnknownLength },
		{ "foo", NULL }, { OpDataUnknownLength }, 0, true },

	{ "foo does not start with bar",
		{ "foo", NULL }, { OpDataUnknownLength },
		{ "bar", NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, false },

	// First real match ignoring case in embedded mode:
	{ "foo compares with FOO",
		{ "foo", NULL }, { OpDataUnknownLength },
		{ "FOO", NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, true },
	{ "FOO compares with foo",
		{ "FOO", NULL }, { OpDataUnknownLength },
		{ "foo", NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, true },

	{ "foobar,3 compares with FOOfuz,3",
		{ "foobar", NULL }, { 3 },
		{ "FOOfuz", NULL }, { 3 },
		OpDataUnknownLength, true },

	// Compare embedded with normal mode: normal starting with embedded:
	{ "embedded and normal mode,1",
		{ "This is a string long enough to force it into OpData's normal mode", NULL }, { OpDataUnknownLength },
		{ "this IS", NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, true },

	// normal does not start with embedded if they differ:
	{ "embedded and normal mode,2",
		{ "This is a string long enough to force it into OpData's normal mode", NULL }, { OpDataUnknownLength },
		{ "this IS XXX", NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, false },
	// but it starts when the correct length is specified:
	{ "embedded and normal mode,3",
		{ "This is a string long enough to force it into OpData's normal mode", NULL }, { OpDataUnknownLength },
		{ "this IS XXX", NULL }, { OpDataUnknownLength },
		8, true },

	// Compare normal with embedded mode:
	{ "normal and embedded mode, 1",
		{ "this IS", NULL }, { OpDataUnknownLength },
		{ "This is a string long enough to force it into OpData's normal mode", NULL }, { OpDataUnknownLength },
		7, true },
	{ "normal and embedded mode, 2",
		{ "this IS", NULL }, { OpDataUnknownLength },
		{ "This is a string long enough to force it into OpData's normal mode", NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, false },

	{ "equal fragments",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam;foo",
				" egg bacon and spam;",
				" egg bacon sausage and spam;",
				" spam bacon sausage and spam;",
				" spam egg spam spam bacon and spam;",
				" spam sausage spam spam bacon spam tomato and spam.",
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, 14,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		{ "Well, THERE's Egg AND bacon;",
				" Egg sAUSAGE and BACON;",
				" egg and SPAM;fuz",
				" egg Bacon and spam;",
				" egg bacon SAUSAGE and spam;",
				" spam Bacon sausage and SPAM;",
				" spam egg SPAM spam bacon and spam;",
				" spam sausage Spam Spam BACON SPAM tomato AND spam.",
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, 14,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		OpDataUnknownLength, true },

	{ "equal fragments, sub-string,1",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam; balls",
				" egg bacon and spam;",
				" egg bacon sausage and spam;",
				" spam bacon sausage and spam;",
				" spam egg spam spam bacon and spam;",
				" spam sausage spam spam bacon spam tomato and spam.",
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, 14,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		{ "Well, THERE's Egg AND bacon; strawberries",
				" Egg sAUSAGE and BACON;",
				"Now for something completely different!",
				NULL },
		{ 28, OpDataUnknownLength, OpDataUnknownLength },
		28+23, true },

	{ "equal fragments, sub-string,2",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam;",
				" egg bacon and spam;",
				" egg bacon sausage and spam;",
				" spam bacon sausage and spam;",
				" spam egg spam spam bacon and spam;",
				" spam sausage spam spam bacon spam tomato and spam.",
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		{ "Well, THERE's Egg AND bacon;",
				" Egg sAUSAGE and BACON;",
				" Now for something completely different!",
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength },
		28+24, true },

	{ "fragments something different,1",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam;",
				" egg bacon and spam;",
				" egg bacon sausage and spam;",
				" spam bacon sausage and spam;",
				" spam egg spam spam bacon and spam;",
				" spam sausage spam spam bacon spam tomato and spam.",
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		{ "Well, THERE's Egg AND bacon; strawberries",
				" Egg sAUSAGE and BACON; egg and spam;",
				"Now for something completely different!",
				NULL },
		{ 28, 23, OpDataUnknownLength },
		28+24, false },

	{ "fragments, something different,2",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam;",
				" egg bacon and spam;",
				" egg bacon sausage and spam;",
				" spam bacon sausage and spam;",
				" spam egg spam spam bacon and spam;",
				" spam sausage spam spam bacon spam tomato and spam.",
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		{ "Well, THERE's Egg AND bacon;",
				" Egg sAUSAGE and BACON;",
				"Now for something completely different!",
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength },
		OpDataUnknownLength, false },

	{ "equal text, different fragments,1",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam;",
				" egg bacon and spam;",
				" egg bacon sausage and spam;",
				" spam bacon sausage and spam;",
				" spam egg spam spam bacon and spam;",
				" spam sausage spam spam bacon spam tomato and spam.",
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		{ "Well, THERE's Egg AND bacon; Egg sAUSAGE",
				" and BACON; egg a",
				"nd SPAM; egg Bacon and spam; egg bacon SAUSAGE and spa",
				"m; spam Bacon sausage and SPAM; spam egg SPAM spam bac",
				"on and spam; spam sausage Spam Spam BACON SPAM tomato ",
				"AND spam.",
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength },
		OpDataUnknownLength, true },

	{ "equal text, different fragments,2",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam;",
				" egg bacon and spam;",
				" egg bacon sausage and spam;",
				" spam bacon sausage and spam;",
				" spam egg spam spam bacon and spam;",
				" spam sausage spam spam bacon spam tomato and spam.",
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		{ "Well, THERE's Egg AND bacon; Egg sAUSAGE",
				" and BACON; egg a",
				"nd SPAM; egg Bacon and spam; egg bacon SAUSAGE and spa",
				"m; spam BaXon sausage and SPAM; spam egg SPAM spam bac",
				"on and spam; spam sausage Spam Spam BACON SPAM tomato ",
				"AND spam.",
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength },
		40+17+54+10, true },

	{ "equal text, different fragments,2",
		{ "Well, there's egg and bacon;AAAA",
				" egg sausage and bacon;BBBB",
				" egg and spam;CCCC",
				" egg bacon and spam;DDDD",
				" egg bacon sausage and spam;EEEE",
				" spam bacon sausage and spam;\0",
				" spam egg spam spam bacon and spam;FFFFFFFFFFFFFFFFFF",
				" spam sausage spam spam bacon spam tomato and spam.\0",
				NULL },
		{ 28, 23, 14, 20, 28, 29, 35, 51 },
		{ "Well, THERE's Egg AND bacon; Egg sAUSAGE1111",
				" and BACON; egg a2222",
				"nd SPAM; egg Bacon and spam; egg bacon SAUSAGE and spa",
				"m; spam BaXon sausage and SPAM; spam egg SPAM spam bac",
				"on and spam; spam sausage Spam Spam BACON SPAM tomato ",
				"AND spam.3333",
				NULL },
		{ 40, 17, 54, 54, 54, 9 },
		40+17+54+11, false },

	{ "equal text-embedded \\0",
		{ "Well, there's egg and bacon;",
				"\0 egg sausage and bacon;",
				" egg a\0nd spam;\0",
				" egg bacon\0 and spam;",
				" egg bacon sausage and spam;",
				" spam bacon sausage and spam;",
				" spam egg spam spam bacon and spam;",
				" spam sausage spam spam bacon spam tomato and spam.",
				NULL },
		{ 28, 24, 16, 21, 28, 29, 35, 51 },
		{ "Well, THERE's Egg AND bacon;\0 Egg sAUSAGE",
				" and BACON; egg a",
				"\0nd SPAM;\0 egg Bacon\0 and spam; egg bacon SAUSAGE a",
				"nd spam; spam BaXon sausage and SPAM; spam egg SPAM sp",
				"am bacon and spam; spam sausage Spam Spam BACON SPAM t",
				"omato AND spam.",
				NULL },
		{ 41, 17, 51, 54, 54, 15 },
		41+17+51+16, true },

	{ "different text-embedded \\0",
		{ "Well, there's egg and bacon;",
				"\0 egg sausage and bacon;",
				" egg a\0nd spam;\0",
				" egg bacon\0 and ginger ale;",
				" egg bacon sausage and spam;",
				" spam bacon sausage and spam;",
				" spam egg spam spam bacon and spam;",
				" spam sausage spam spam bacon spam tomato and spam.",
				NULL },
		{ 28, 24, 16, 27, 28, 29, 35, 51 },
		{ "Well, THERE's Egg AND bacon;\0 Egg sAUSAGE",
				" and BACON; egg a",
				"\0nd SPAM;\0 egg Bacon\0 and spam; egg bacon SAUSAGE a",
				"nd spam; spam BaXon sausage and SPAM; spam egg SPAM sp",
				"am bacon and spam; spam sausage Spam Spam BACON SPAM t",
				"omato AND spam.",
				NULL },
		{ 41, 17, 51, 54, 54, 15 },
		41+17+51+16, false },
}

foreach (testname,
		 string_data, string_data_len,
		 other_data, other_data_len,
		 length, expected_result) from opdata_startswithcase
{
	test("OpData::StartsWithCase(OpData) - " testname)
	{
		const char* string_setup[] = string_data;
		const size_t string_setup_len[] = string_data_len;
		OpData d;
		verify(SetupString(d, string_setup, string_setup_len));

		const char* other_setup[] = other_data;
		const size_t other_setup_len[] = other_data_len;
		OpData other;
		verify(SetupString(other, other_setup, other_setup_len));

		verify(d.StartsWithCase(other, length) == expected_result);
	}

	test("OpData::StartsWithCase(char*) - " testname)
	{
		const char* string_setup[] = string_data;
		const size_t string_setup_len[] = string_data_len;
		OpData d;
		verify(SetupString(d, string_setup, string_setup_len));

		const char* other_setup[] = other_data;
		const size_t other_setup_len[] = other_data_len;
		OpData other;
		verify(SetupString(other, other_setup, other_setup_len));
		verify(other.Data(true));
		verify(d.StartsWithCase(other.Data(true), MIN(length, other.Length())) == expected_result);
	}
}

table opdata_ends_with(const char* testname, const char** string, const char* other, size_t length, bool expected_result)
{
	// embedded mode:

	{ "empty - NULL",
		{ NULL }, NULL, 0, true, },
	{ "empty - \"\"",
		{ NULL }, "", OpDataUnknownLength, true, },
	{ "empty - \"x\"",
		{ NULL }, "x", OpDataUnknownLength, false, },

	{ "\"\" - NULL",
		{ "", NULL }, NULL, 0, true, },
	{ "\"\" - \"\"",
		{ "", NULL }, "", OpDataUnknownLength, true, },
	{ "\"\" - \"x\"",
		{ "", NULL }, "x", OpDataUnknownLength, false, },

	{ "\"xyz\" - NULL",
		{ "xyz", NULL }, NULL, 0, true, },
	{ "\"xyz\" - \"\"",
		{ "xyz", NULL }, "", OpDataUnknownLength, true, },
	{ "\"xyz\" - \"x\"",
		{ "xyz", NULL }, "x", OpDataUnknownLength, false, },
	{ "\"xyz\" - \"z\"",
		{ "xyz", NULL }, "z", OpDataUnknownLength, true, },
	{ "\"xyz\" - \"yz\"",
		{ "xyz", NULL }, "yz", OpDataUnknownLength, true, },
	{ "\"xyz\" - \"xyz\"",
		{ "xyz", NULL }, "xyz", OpDataUnknownLength, true, },
	{ "\"xyz\" - \"xxyz\"",
		{ "xyz", NULL }, "xxyz", OpDataUnknownLength, false, },
	{ "\"xyz\" - \" xyz\"",
		{ "xyz", NULL }, " xyz", OpDataUnknownLength, false, },
	{ "\"xyz\" - \"abc\"",
		{ "xyz", NULL }, "abc", OpDataUnknownLength, false, },
	{ "\"xyz\" - \"yzfoo\",2",
		{ "xyz", NULL }, "yzfoo", 2, true, },
	{ "\"xyz\" - \"yz \",2",
		{ "xyz", NULL }, "yz ", 2, true, },

	// normal mode:
	{ "spam, short",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam;",
				" egg bacon and spam;",
				" egg bacon sausage and spam;",
				" spam bacon sausage and spam;",
				" spam egg spam spam bacon and spam;",
				" spam sausage spam spam bacon spam tomato and spam.",
				" And foo.",
				NULL },
		"And foo.", OpDataUnknownLength, true
	},
	{ "spam, longer",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam;",
				" egg bacon and spam;",
				" egg bacon sausage and spam;",
				" spam bacon sausage and spam;",
				" spam egg spam spam bacon and spam;",
				" spam sausage spam spam bacon spam tomato and spam.",
				" And foo.",
				NULL },
		"spam; spam sausage spam spam bacon spam tomato and spam. And foo.",
		OpDataUnknownLength, true
	},
}

foreach (testname, string_data, other_data, length, expected_result) from opdata_ends_with
{
	test("OpData::EndsWith(" testname ")")
	{
		const char* string_setup[] = string_data;
		OpData d;
		size_t i;
		for (i = 0; string_setup[i]; ++i)
			verify_success(d.AppendConstData(string_setup[i]));
		const char* other = other_data;
		verify(d.EndsWith(other, length) == expected_result);
	}
}

table opdata_ends_with2(const char* testname, const char** string, const char** other, size_t length, bool expected_result)
{
	// embedded mode:

	{ "empty - NULL",
		{ NULL }, { NULL }, 0, true, },
	{ "empty - \"\"",
		{ NULL }, { "", NULL }, OpDataUnknownLength, true, },
	{ "empty - \"x\"",
		{ NULL }, { "x", NULL }, OpDataUnknownLength, false, },

	{ "\"\" - NULL",
		{ "", NULL }, { NULL }, 0, true, },
	{ "\"\" - \"\"",
		{ "", NULL }, { "", NULL },
		OpDataUnknownLength, true, },
	{ "\"\" - \"x\"",
		{ "", NULL }, { "x", NULL },
		OpDataUnknownLength, false, },

	{ "\"xyz\" - NULL",
		{ "xyz", NULL }, { NULL }, 0, true, },
	{ "\"xyz\" - \"\"",
		{ "xyz", NULL }, { "", NULL },
		OpDataUnknownLength, true, },
	{ "\"xyz\" - \"x\"",
		{ "xyz", NULL }, { "x", NULL },
		OpDataUnknownLength, false, },
	{ "\"xyz\" - \"z\"",
		{ "xyz", NULL }, { "z", NULL },
		OpDataUnknownLength, true, },
	{ "\"xyz\" - \"yz\"",
		{ "xyz", NULL }, { "yz", NULL },
		OpDataUnknownLength, true, },
	{ "\"xyz\" - \"xyz\"",
		{ "xyz", NULL }, { "xyz", NULL },
		OpDataUnknownLength, true, },
	{ "\"xyz\" - \"xxyz\"",
		{ "xyz", NULL }, { "xxyz", NULL },
		OpDataUnknownLength, false, },
	{ "\"xyz\" - \" xyz\"",
		{ "xyz", NULL }, { " xyz", NULL },
		OpDataUnknownLength, false, },
	{ "\"xyz\" - \"abc\"",
		{ "xyz", NULL }, { "abc", NULL },
		OpDataUnknownLength, false, },
	{ "\"xyz\" - \"yzfoo\",2",
		{ "xyz", NULL }, { "yzfoo", NULL }, 2, true, },
	{ "\"xyz\" - \"yz \",2",
		{ "xyz", NULL }, { "yz ", NULL }, 2, true, },

	// normal mode:
	{ "spam, short",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam;",
				" egg bacon and spam;",
				" egg bacon sausage and spam;",
				" spam bacon sausage and spam;",
				" spam egg spam spam bacon and spam;",
				" spam sausage spam spam bacon spam tomato and spam.",
				" And foo.",
				NULL },
		{ "And foo.", NULL }, OpDataUnknownLength, true
	},
	{ "spam, longer",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam;",
				" egg bacon and spam;",
				" egg bacon sausage and spam;",
				" spam bacon sausage and spam;",
				" spam egg spam spam bacon and spam;",
				" spam sausage spam spam bacon spam tomato and spam.",
				" And foo.",
				NULL },
		{ " egg sausage and bacon; egg",
				" and spam; egg bacon and spam; egg bacon",
				" sausage ",
				"and spam; spam bacon sausage",
				" and spam; spam egg spam spam bacon and spam; spam sau",
				"sage spam spam bacon spam tomato and spam. And fo",
				"o.",
				NULL },
		OpDataUnknownLength, true
	},
}

foreach (testname, string_data, other_data, length, expected_result) from opdata_ends_with2
{
	test("OpData::EndsWith(" testname " - OpData)")
	{
		const char* string_setup[] = string_data;
		OpData d;
		size_t i;
		for (i = 0; string_setup[i]; ++i)
			verify_success(d.AppendConstData(string_setup[i]));
		const char* other_setup[] = other_data;
		OpData other;
		for (i = 0; other_setup[i]; ++i)
			verify_success(other.AppendConstData(other_setup[i]));
		verify(d.EndsWith(other, length) == expected_result);
	}
}

table unistring_equals (const char* testname, const char* a, const char* b, size_t b_len, bool expected_result)
{
	{ "NULL == empty",	NULL, "", OpDataUnknownLength, true },
	{ "empty == NULL",	"", NULL, 0, true },
	{ "empty == empty",	"", "", OpDataUnknownLength, true },
	{ "empty != X",		"", "X", OpDataUnknownLength, false },
	{ "X != empty",		"X", "", OpDataUnknownLength, false },
	{ "X != Y",			"X", "Y", OpDataUnknownLength, false },
	{ "X == X",			"X", "X", OpDataUnknownLength, true },
	{ "X != Xx",		"X", "Xx", OpDataUnknownLength, false },
	{ "Xx != X",		"Xx", "X", OpDataUnknownLength, false },
	{ "X == Xx[:1]",	"X", "Xx", 1, true },
}

foreach (testname, a, b, b_len, expected_result) from unistring_equals
{
	test("OpData::Equals(" testname ")")
	{
		OpData str;
		if (a) verify_success(str.SetConstData(a));
		verify(str.Equals(b, b_len) == expected_result);
	}
}

table unistring_equalscase (const char* testname, const char** string_data, const char** other_data, size_t length, bool expected_result)
{
	// An empty string equals an empty string:
	{ "empty", { NULL }, { NULL }, OpDataUnknownLength, true },

	// Any non-empty string does not equal an empty string
	{ "\"foo\" != empty",
		{ "foo", NULL }, { NULL }, OpDataUnknownLength, false },

	{ "empty != \"foo\"",
		{ NULL }, { "foo", NULL }, OpDataUnknownLength, false },

	{ "foo != BAR",
		{ "foo", NULL }, { "BAR", NULL }, OpDataUnknownLength, false },

	// First real match ignoring case in embedded mode:
	{ "foo == FOO",
		{ "foo", NULL }, { "FOO", NULL }, OpDataUnknownLength, true },
	{ "FOO == foo",
		{ "FOO", NULL }, { "foo", NULL }, OpDataUnknownLength, true },

	// Compare non-ascii characters:
	{ "A(ring) != a(ring)",
		{ "\xc3\x85", NULL },
		{ "\xc3\xa5", NULL }, OpDataUnknownLength, false },

	// Compare normal with embedded mode:
	{ "normal and embedded mode",
		{ "this IS", NULL },
		{ "This is a string long enough to force it into OpData's normal mode", NULL },
		7, true },

	{ "equal fragments",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam;",
				" egg bacon and spam;",
				" egg bacon sausage and spam;",
				" spam bacon sausage and spam;",
				" spam egg spam spam bacon and spam;",
				" spam sausage spam spam bacon spam tomato and spam.",
				NULL },
		{ "Well, THERE's Egg AND bacon;",
				" Egg sAUSAGE and BACON;",
				" egg and SPAM;",
				" egg Bacon and spam;",
				" egg bacon SAUSAGE and spam;",
				" spam Bacon sausage and SPAM;",
				" spam egg SPAM spam bacon and spam;",
				" spam sausage Spam Spam BACON SPAM tomato AND spam.",
				NULL },
		OpDataUnknownLength, true },

	{ "equal fragments, sub-string,1",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				NULL },
		{ "Well, THERE's Egg AND bacon;",
				" Egg sAUSAGE and BACON;",
				"Now for something completely different!",
				NULL },
		28+23, true },

	{ "fragments something different",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam; egg bacon and spam; egg ",
				NULL },
		{ "Well, THERE's Egg AND bacon;",
				" Egg sAUSAGE and BACON;",
				"Now for something completely different!",
				NULL },
		28+24, false },

	{ "equal text, different fragments,1",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam;",
				" egg bacon and spam;",
				" egg bacon sausage and spam;",
				" spam bacon sausage and spam;",
				" spam egg spam spam bacon and spam;",
				" spam sausage spam spam bacon spam tomato and spam.",
				NULL },
		{ "Well, THERE's Egg AND bacon; Egg sAUSAGE",
				" and BACON; egg a",
				"nd SPAM; egg Bacon and spam; egg bacon SAUSAGE and spa",
				"m; spam Bacon sausage and SPAM; spam egg SPAM spam bac",
				"on and spam; spam sausage Spam Spam BACON SPAM tomato ",
				"AND spam.",
				NULL },
		OpDataUnknownLength, true },

	{ "equal text, different fragments,2",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam;",
				" egg bacon and spam;",
				" egg bacon sausage and spam;",
				" spam ba",
				NULL },
		{ "Well, THERE's Egg AND bacon; Egg sAUSAGE",
				" and BACON; egg a",
				"nd SPAM; egg Bacon and spam; egg bacon SAUSAGE and spa",
				"m; spam BaXon sausage and SPAM; spam egg SPAM spam bac",
				"on and spam; spam sausage Spam Spam BACON SPAM tomato ",
				"AND spam.",
				NULL },
		40+17+54+10, true },

	{ "equal text, different fragments,2",
		{ "Well, there's egg and bacon;",
				" egg sausage and bacon;",
				" egg and spam;",
				" egg bacon and spam;",
				" egg bacon sausage and spam;",
				" spam bac",
				NULL },
		{ "Well, THERE's Egg AND bacon; Egg sAUSAGE",
				" and BACON; egg a",
				"nd SPAM; egg Bacon and spam; egg bacon SAUSAGE and spa",
				"m; spam BaXon sausage and SPAM; spam egg SPAM spam bac",
				"on and spam; spam sausage Spam Spam BACON SPAM tomato ",
				"AND spam.",
				NULL },
		40+17+54+11, false },
}

foreach (testname, string_data, other_data, length, expected_result) from unistring_equalscase
{
	test("OpData::EqualsCase(OpData) - " testname)
	{
		const char* string_setup[] = string_data;
		OpData d;
		verify(SetupString(d, string_setup, NULL));

		const char* other_setup[] = other_data;
		OpData other;
		verify(SetupString(other, other_setup, NULL));

		verify(d.EqualsCase(OpData(other, 0, length)) == expected_result);
	}

	test("OpData::EqualsCase(char*) - " testname)
	{
		const char* string_setup[] = string_data;
		OpData d;
		verify(SetupString(d, string_setup, NULL));

		const char* other_setup[] = other_data;
		OpData other;
		verify(SetupString(other, other_setup, NULL));
		verify(other.Data(true));
		verify(d.EqualsCase(other.Data(true), MIN(length, other.Length())) == expected_result);
	}
}
