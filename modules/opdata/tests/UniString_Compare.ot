/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "opdata.UniString.Compare";

include "modules/opdata/UniString.h";
include "modules/otl/list.h";
include "modules/opdata/UniStringFragmentIterator.h";

subtest SetupString(UniString& s, const uni_char* string_setup[], const size_t* string_setup_len)
{
	if (string_setup_len)
		for (size_t i = 0; string_setup[i]; ++i)
			verify_success(s.AppendConstData(string_setup[i], string_setup_len[i]));
	else
		for (size_t i = 0; string_setup[i]; ++i)
			verify_success(s.AppendConstData(string_setup[i]));
}

test("UniString::StartsWith(const uni_char *...)")
{
	// embedded mode
	UniString d;
	verify(d.StartsWith(NULL, 0));
	verify(d.StartsWith(UNI_L("")));
	verify(!d.StartsWith(UNI_L("x")));

	verify_success(d.SetConstData(UNI_L("")));
	verify(d.StartsWith(NULL, 0));
	verify(d.StartsWith(UNI_L("")));
	verify(!d.StartsWith(UNI_L("x")));

	verify_success(d.SetConstData(UNI_L("xyz")));
	verify(d.StartsWith(NULL, 0));
	verify(d.StartsWith(UNI_L("")));
	verify(d.StartsWith(UNI_L("x")));
	verify(d.StartsWith(UNI_L("xy")));
	verify(d.StartsWith(UNI_L("xyz")));
	verify(!d.StartsWith(UNI_L("xyzz")));
	verify(!d.StartsWith(UNI_L("abc")));
	verify(!d.StartsWith(UNI_L(" xyz")));

	// normal mode
	verify_success(d.SetConstData(UNI_L("012345678911234567892123456789312345678941")));
	verify_success(d.AppendConstData(UNI_L("012345678911234567892123456789312345678941")));
	verify(d.StartsWith(UNI_L("")));
	verify(d.StartsWith(UNI_L("0")));
	verify(d.StartsWith(UNI_L("01")));
	verify(d.StartsWith(UNI_L("012345678911234567892123456789312345678941")));
	verify(d.StartsWith(UNI_L("012345678911234567892123456789312345678941012345678911234567892123456789312345678941")));
	verify(!d.StartsWith(UNI_L("0123456789112345678921234567893123456789410123456789112345678921234567893123456789412")));
	verify(!d.StartsWith(UNI_L("123")));

	d.Consume(4);
	verify(d.StartsWith(UNI_L("")));
	verify(d.StartsWith(UNI_L("4")));
	verify(d.StartsWith(UNI_L("45")));
	verify(d.StartsWith(UNI_L("45678911234567892123456789312345678941012345678911234567892123456789312345678941")));
	verify(!d.StartsWith(UNI_L("456789112345678921234567893123456789410123456789112345678921234567893123456789412")));

	d.Trunc(72);
	verify(d.StartsWith(UNI_L("")));
	verify(d.StartsWith(UNI_L("4")));
	verify(d.StartsWith(UNI_L("45")));
	verify(d.StartsWith(UNI_L("456789112345678921234567893123456789410123456789112345678921234567893123")));
	verify(!d.StartsWith(UNI_L("4567891123456789212345678931234567894101234567891123456789212345678931234")));

	d.Consume(30);
	verify(d.StartsWith(UNI_L("")));
	verify(d.StartsWith(UNI_L("4")));
	verify(d.StartsWith(UNI_L("45")));
	verify(d.StartsWith(UNI_L("456789410123456789112345678921234567893123")));
	verify(!d.StartsWith(UNI_L("4567894101234567891123456789212345678931234")));

	d.Trunc(10);
	verify(d.StartsWith(UNI_L("")));
	verify(d.StartsWith(UNI_L("4")));
	verify(d.StartsWith(UNI_L("45")));
	verify(d.StartsWith(UNI_L("4567894101")));
	verify(!d.StartsWith(UNI_L("45678941012")));

	d.Consume(4);
	verify(d.StartsWith(UNI_L("")));
	verify(d.StartsWith(UNI_L("8")));
	verify(d.StartsWith(UNI_L("89")));
	verify(d.StartsWith(UNI_L("894101")));
	verify(!d.StartsWith(UNI_L("8941012")));

	d.Consume(6);
	verify(d.StartsWith(NULL, 0));
	verify(d.StartsWith(UNI_L("")));
	verify(!d.StartsWith(UNI_L("0")));
	verify(!d.StartsWith(UNI_L("1")));
	verify(!d.StartsWith(UNI_L("2")));
	verify(!d.StartsWith(UNI_L("3")));
	verify(!d.StartsWith(UNI_L("4")));
	verify(!d.StartsWith(UNI_L("5")));
	verify(!d.StartsWith(UNI_L("6")));
	verify(!d.StartsWith(UNI_L("7")));
	verify(!d.StartsWith(UNI_L("8")));
	verify(!d.StartsWith(UNI_L("9")));
}

test("UniString::StartsWith(const UniString& ...)")
{
	// compare embedded and embedded
	UniString a, b;
	verify(a.StartsWith(a));
	verify(a.StartsWith(b));
	verify(b.StartsWith(a));
	verify(a.StartsWith(b, 13));
	verify(b.StartsWith(a, 13));

	verify_success(b.SetConstData(UNI_L("foo")));
	verify(b.StartsWith(b));
	verify(!a.StartsWith(b));
	verify(b.StartsWith(a));
	verify(a.StartsWith(b, 0));
	verify(b.StartsWith(a, 13));

	verify_success(a.SetConstData(UNI_L("bar")));
	verify(a.StartsWith(a));
	verify(!a.StartsWith(b));
	verify(!b.StartsWith(a));
	verify(a.StartsWith(b, 0));
	verify(b.StartsWith(a, 0));

	verify_success(b.SetConstData(UNI_L("bar")));
	verify(b.StartsWith(b));
	verify(a.StartsWith(b));
	verify(b.StartsWith(a));
	verify(a.StartsWith(b, 13));
	verify(b.StartsWith(a, 14));

	verify_success(b.SetConstData(UNI_L("ba")));
	verify(b.StartsWith(b));
	verify(a.StartsWith(b));
	verify(!b.StartsWith(a));
	verify(a.StartsWith(b, 2));
	verify(b.StartsWith(a, 2));

	a.Trunc(2);
	verify(a == a);
	verify(b == b);
	verify(a == b);
	verify(b == a);

	// compare embedded and normal
	verify_success(b.SetConstData(UNI_L("This is a string long enough to force it into UniString's normal mode")));
	verify(b.StartsWith(b));
	verify(!a.StartsWith(b));
	verify(!b.StartsWith(a));
	verify(a.StartsWith(b, 0));
	verify(b.StartsWith(a, 0));

	verify_success(a.SetConstData(UNI_L("This")));
	verify(a.StartsWith(a));
	verify(!a.StartsWith(b));
	verify(b.StartsWith(a));
	verify(a.StartsWith(b, 4));
	verify(b.StartsWith(a, 4));
	verify(b.StartsWith(a, 10));
	verify(b.StartsWith(a, 100));

	b.Trunc(2); // a == "This", b = "Th"
	verify(b.StartsWith(b));
	verify(a.StartsWith(b));
	verify(!b.StartsWith(a));
	verify(b.StartsWith(a, 0));
	verify(b.StartsWith(a, 1));
	verify(b.StartsWith(a, 2));
	verify(!b.StartsWith(a, 3));
	verify(!b.StartsWith(a, 4));
	verify(a.StartsWith(b, 0));
	verify(a.StartsWith(b, 1));
	verify(a.StartsWith(b, 2));
	verify(a.StartsWith(b, 3));
	verify(a.StartsWith(b, 4));

	a.Trunc(2);
	verify(a == a);
	verify(b == b);
	verify(a == b);
	verify(b == a);

	// compare normal and normal
	verify_success(a.SetConstData(UNI_L("This is a string long enough to force it into UniString's normal mode")));
	verify_success(b.SetConstData(UNI_L("This is a string long enough to force it into ")));
	verify_success(b.AppendConstData(UNI_L("UniString's normal mode")));
	verify(a.StartsWith(a));
	verify(b.StartsWith(b));
	verify(a.StartsWith(b));
	verify(b.StartsWith(a));

	verify(a == a);
	verify(b == b);
	verify(a == b);
	verify(b == a);
}

table unistring_startswithcase (
	const char* testname,
	const uni_char** string_data, const size_t* string_data_len,
	const uni_char** other_data, const size_t* other_data_len,
	size_t length, bool expected_result)
{
	// An empty string starts with an empty string:
	{ "empty",
		{ NULL }, { OpDataUnknownLength },
		{ NULL }, { OpDataUnknownLength }, OpDataUnknownLength, true },

	// Specifying the length does not change it
	{ "empty, length=17",
		{ NULL }, { OpDataUnknownLength },
		{ NULL }, { OpDataUnknownLength }, 17, true },

	// Any string starts with an empty string
	{ "foo starts with empty",
		{ UNI_L("foo"), NULL }, { OpDataUnknownLength },
		{ NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, true },

	{ "empty starts not with foo",
		{ NULL }, { OpDataUnknownLength },
		{ UNI_L("foo"), NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, false },

	// An empty string starts with the empty sub-string of "foo"
	{ "empty starts with foo,0",
		{ NULL }, { OpDataUnknownLength },
		{ UNI_L("foo"), NULL }, { OpDataUnknownLength }, 0, true },

	{ "foo does not start with bar",
		{ UNI_L("foo"), NULL }, { OpDataUnknownLength },
		{ UNI_L("bar"), NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, false },

	// First real match ignoring case in embedded mode:
	{ "foo compares with FOO",
		{ UNI_L("foo"), NULL }, { OpDataUnknownLength },
		{ UNI_L("FOO"), NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, true },
	{ "FOO compares with foo",
		{ UNI_L("FOO"), NULL }, { OpDataUnknownLength },
		{ UNI_L("foo"), NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, true },

	{ "foobar,3 compares with FOOfuz,3",
		{ UNI_L("foobar"), NULL }, { 3 },
		{ UNI_L("FOOfuz"), NULL }, { 3 },
		OpDataUnknownLength, true },

	// Compare embedded with normal mode: normal starting with embedded:
	{ "embedded and normal mode,1",
		{ UNI_L("This is a string long enough to force it into UniString's normal mode"), NULL }, { OpDataUnknownLength },
		{ UNI_L("this IS"), NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, true },

	// normal does not start with embedded if they differ:
	{ "embedded and normal mode,2",
		{ UNI_L("This is a string long enough to force it into UniString's normal mode"), NULL }, { OpDataUnknownLength },
		{ UNI_L("this IS XXX"), NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, false },
	// but it starts when the correct length is specified:
	{ "embedded and normal mode,3",
		{ UNI_L("This is a string long enough to force it into UniString's normal mode"), NULL }, { OpDataUnknownLength },
		{ UNI_L("this IS XXX"), NULL }, { OpDataUnknownLength },
		8, true },

	// Compare normal with embedded mode:
	{ "normal and embedded mode, 1",
		{ UNI_L("this IS"), NULL }, { OpDataUnknownLength },
		{ UNI_L("This is a string long enough to force it into UniString's normal mode"), NULL }, { OpDataUnknownLength },
		7, true },
	{ "normal and embedded mode, 2",
		{ UNI_L("this IS"), NULL }, { OpDataUnknownLength },
		{ UNI_L("This is a string long enough to force it into UniString's normal mode"), NULL }, { OpDataUnknownLength },
		OpDataUnknownLength, false },

	{ "equal fragments",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam;foo"),
				UNI_L(" egg bacon and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bacon sausage and spam;"),
				UNI_L(" spam egg spam spam bacon and spam;"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam."),
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, 14,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		{ UNI_L("Well, THERE's Egg AND bacon;"),
				UNI_L(" Egg sAUSAGE and BACON;"),
				UNI_L(" egg and SPAM;fuz"),
				UNI_L(" egg Bacon and spam;"),
				UNI_L(" egg bacon SAUSAGE and spam;"),
				UNI_L(" spam Bacon sausage and SPAM;"),
				UNI_L(" spam egg SPAM spam bacon and spam;"),
				UNI_L(" spam sausage Spam Spam BACON SPAM tomato AND spam."),
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, 14,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		OpDataUnknownLength, true },

	{ "equal fragments, sub-string,1",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam; balls"),
				UNI_L(" egg bacon and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bacon sausage and spam;"),
				UNI_L(" spam egg spam spam bacon and spam;"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam."),
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, 14,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		{ UNI_L("Well, THERE's Egg AND bacon; strawberries"),
				UNI_L(" Egg sAUSAGE and BACON;"),
				UNI_L("Now for something completely different!"),
				NULL },
		{ 28, OpDataUnknownLength, OpDataUnknownLength },
		28+23, true },

	{ "equal fragments, sub-string,2",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam;"),
				UNI_L(" egg bacon and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bacon sausage and spam;"),
				UNI_L(" spam egg spam spam bacon and spam;"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam."),
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		{ UNI_L("Well, THERE's Egg AND bacon;"),
				UNI_L(" Egg sAUSAGE and BACON;"),
				UNI_L(" Now for something completely different!"),
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength },
		28+24, true },

	{ "fragments something different,1",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam;"),
				UNI_L(" egg bacon and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bacon sausage and spam;"),
				UNI_L(" spam egg spam spam bacon and spam;"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam."),
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		{ UNI_L("Well, THERE's Egg AND bacon; strawberries"),
				UNI_L(" Egg sAUSAGE and BACON; egg and spam;"),
				UNI_L("Now for something completely different!"),
				NULL },
		{ 28, 23, OpDataUnknownLength },
		28+24, false },

	{ "fragments, something different,2",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam;"),
				UNI_L(" egg bacon and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bacon sausage and spam;"),
				UNI_L(" spam egg spam spam bacon and spam;"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam."),
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		{ UNI_L("Well, THERE's Egg AND bacon;"),
				UNI_L(" Egg sAUSAGE and BACON;"),
				UNI_L("Now for something completely different!"),
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength },
		OpDataUnknownLength, false },

	{ "equal text, different fragments,1",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam;"),
				UNI_L(" egg bacon and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bacon sausage and spam;"),
				UNI_L(" spam egg spam spam bacon and spam;"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam."),
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		{ UNI_L("Well, THERE's Egg AND bacon; Egg sAUSAGE"),
				UNI_L(" and BACON; egg a"),
				UNI_L("nd SPAM; egg Bacon and spam; egg bacon SAUSAGE and spa"),
				UNI_L("m; spam Bacon sausage and SPAM; spam egg SPAM spam bac"),
				UNI_L("on and spam; spam sausage Spam Spam BACON SPAM tomato "),
				UNI_L("AND spam."),
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength },
		OpDataUnknownLength, true },

	{ "equal text, different fragments,2",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam;"),
				UNI_L(" egg bacon and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bacon sausage and spam;"),
				UNI_L(" spam egg spam spam bacon and spam;"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam."),
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength },
		{ UNI_L("Well, THERE's Egg AND bacon; Egg sAUSAGE"),
				UNI_L(" and BACON; egg a"),
				UNI_L("nd SPAM; egg Bacon and spam; egg bacon SAUSAGE and spa"),
				UNI_L("m; spam BaXon sausage and SPAM; spam egg SPAM spam bac"),
				UNI_L("on and spam; spam sausage Spam Spam BACON SPAM tomato "),
				UNI_L("AND spam."),
				NULL },
		{ OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength,
				OpDataUnknownLength, OpDataUnknownLength, OpDataUnknownLength },
		40+17+54+10, true },

	{ "equal text, different fragments,2",
		{ UNI_L("Well, there's egg and bacon;AAAA"),
				UNI_L(" egg sausage and bacon;BBBB"),
				UNI_L(" egg and spam;CCCC"),
				UNI_L(" egg bacon and spam;DDDD"),
				UNI_L(" egg bacon sausage and spam;EEEE"),
				UNI_L(" spam bacon sausage and spam;\0"),
				UNI_L(" spam egg spam spam bacon and spam;FFFFFFFFFFFFFFFFFF"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam.\0"),
				NULL },
		{ 28, 23, 14, 20, 28, 29, 35, 51 },
		{ UNI_L("Well, THERE's Egg AND bacon; Egg sAUSAGE1111"),
				UNI_L(" and BACON; egg a2222"),
				UNI_L("nd SPAM; egg Bacon and spam; egg bacon SAUSAGE and spa"),
				UNI_L("m; spam BaXon sausage and SPAM; spam egg SPAM spam bac"),
				UNI_L("on and spam; spam sausage Spam Spam BACON SPAM tomato "),
				UNI_L("AND spam.3333"),
				NULL },
		{ 40, 17, 54, 54, 54, 9 },
		40+17+54+11, false },

	{ "equal text-embedded \\0",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L("\0 egg sausage and bacon;"),
				UNI_L(" egg a\0nd spam;\0"),
				UNI_L(" egg bacon\0 and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bacon sausage and spam;"),
				UNI_L(" spam egg spam spam bacon and spam;"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam."),
				NULL },
		{ 28, 24, 16, 21, 28, 29, 35, 51 },
		{ UNI_L("Well, THERE's Egg AND bacon;\0 Egg sAUSAGE"),
				UNI_L(" and BACON; egg a"),
				UNI_L("\0nd SPAM;\0 egg Bacon\0 and spam; egg bacon SAUSAGE a"),
				UNI_L("nd spam; spam BaXon sausage and SPAM; spam egg SPAM sp"),
				UNI_L("am bacon and spam; spam sausage Spam Spam BACON SPAM t"),
				UNI_L("omato AND spam."),
				NULL },
		{ 41, 17, 51, 54, 54, 15 },
		41+17+51+16, true },

	{ "different text-embedded \\0",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L("\0 egg sausage and bacon;"),
				UNI_L(" egg a\0nd spam;\0"),
				UNI_L(" egg bacon\0 and ginger ale;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bacon sausage and spam;"),
				UNI_L(" spam egg spam spam bacon and spam;"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam."),
				NULL },
		{ 28, 24, 16, 27, 28, 29, 35, 51 },
		{ UNI_L("Well, THERE's Egg AND bacon;\0 Egg sAUSAGE"),
				UNI_L(" and BACON; egg a"),
				UNI_L("\0nd SPAM;\0 egg Bacon\0 and spam; egg bacon SAUSAGE a"),
				UNI_L("nd spam; spam BaXon sausage and SPAM; spam egg SPAM sp"),
				UNI_L("am bacon and spam; spam sausage Spam Spam BACON SPAM t"),
				UNI_L("omato AND spam."),
				NULL },
		{ 41, 17, 51, 54, 54, 15 },
		41+17+51+16, false },
}

foreach (testname,
		 string_data, string_data_len,
		 other_data, other_data_len,
		 length, expected_result) from unistring_startswithcase
{
	test("UniString::StartsWithCase(UniString) - " testname)
	{
		const uni_char* string_setup[] = string_data;
		const size_t string_setup_len[] = string_data_len;
		UniString d;
		verify(SetupString(d, string_setup, string_setup_len));

		const uni_char* other_setup[] = other_data;
		const size_t other_setup_len[] = other_data_len;
		UniString other;
		verify(SetupString(other, other_setup, other_setup_len));

		verify(d.StartsWithCase(other, length) == expected_result);
	}

	test("UniString::StartsWithCase(uni_char*) - " testname)
	{
		const uni_char* string_setup[] = string_data;
		const size_t string_setup_len[] = string_data_len;
		UniString d;
		verify(SetupString(d, string_setup, string_setup_len));

		const uni_char* other_setup[] = other_data;
		const size_t other_setup_len[] = other_data_len;
		UniString other;
		verify(SetupString(other, other_setup, other_setup_len));
		verify(other.Data(true));
		verify(d.StartsWithCase(other.Data(true), MIN(length, other.Length())) == expected_result);
	}
}

table unistring_ends_with(const char* testname, const uni_char** string, const uni_char* other, size_t length, bool expected_result)
{
	// embedded mode:

	{ "empty - NULL",
		{ NULL }, NULL, 0, true, },
	{ "empty - \"\"",
		{ NULL }, UNI_L(""), OpDataUnknownLength, true, },
	{ "empty - \"x\"",
		{ NULL }, UNI_L("x"), OpDataUnknownLength, false, },

	{ "\"\" - NULL",
		{ UNI_L(""), NULL }, NULL, 0, true, },
	{ "\"\" - \"\"",
		{ UNI_L(""), NULL }, UNI_L(""), OpDataUnknownLength, true, },
	{ "\"\" - \"x\"",
		{ UNI_L(""), NULL }, UNI_L("x"), OpDataUnknownLength, false, },

	{ "\"xyz\" - NULL",
		{ UNI_L("xyz"), NULL }, NULL, 0, true, },
	{ "\"xyz\" - \"\"",
		{ UNI_L("xyz"), NULL }, UNI_L(""), OpDataUnknownLength, true, },
	{ "\"xyz\" - \"x\"",
		{ UNI_L("xyz"), NULL }, UNI_L("x"), OpDataUnknownLength, false, },
	{ "\"xyz\" - \"z\"",
		{ UNI_L("xyz"), NULL }, UNI_L("z"), OpDataUnknownLength, true, },
	{ "\"xyz\" - \"yz\"",
		{ UNI_L("xyz"), NULL }, UNI_L("yz"), OpDataUnknownLength, true, },
	{ "\"xyz\" - \"xyz\"",
		{ UNI_L("xyz"), NULL }, UNI_L("xyz"), OpDataUnknownLength, true, },
	{ "\"xyz\" - \"xxyz\"",
		{ UNI_L("xyz"), NULL }, UNI_L("xxyz"), OpDataUnknownLength, false, },
	{ "\"xyz\" - \" xyz\"",
		{ UNI_L("xyz"), NULL }, UNI_L(" xyz"), OpDataUnknownLength, false, },
	{ "\"xyz\" - \"abc\"",
		{ UNI_L("xyz"), NULL }, UNI_L("abc"), OpDataUnknownLength, false, },
	{ "\"xyz\" - \"yzfoo\",2",
		{ UNI_L("xyz"), NULL }, UNI_L("yzfoo"), 2, true, },
	{ "\"xyz\" - \"yz \",2",
		{ UNI_L("xyz"), NULL }, UNI_L("yz "), 2, true, },

	// normal mode:
	{ "spam, short",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam;"),
				UNI_L(" egg bacon and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bacon sausage and spam;"),
				UNI_L(" spam egg spam spam bacon and spam;"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam."),
				UNI_L(" And foo."),
				NULL },
		UNI_L("And foo."), OpDataUnknownLength, true
	},
	{ "spam, longer",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam;"),
				UNI_L(" egg bacon and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bacon sausage and spam;"),
				UNI_L(" spam egg spam spam bacon and spam;"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam."),
				UNI_L(" And foo."),
				NULL },
		UNI_L("spam; spam sausage spam spam bacon spam tomato and spam. And foo."),
		OpDataUnknownLength, true
	},
}

foreach (testname, string_data, other_data, length, expected_result) from unistring_ends_with
{
	test("UniString::EndsWith(" testname ")")
	{
		const uni_char* string_setup[] = string_data;
		UniString d;
		size_t i;
		for (i = 0; string_setup[i]; ++i)
			verify_success(d.AppendConstData(string_setup[i]));
		const uni_char* other = other_data;
		verify(d.EndsWith(other, length) == expected_result);
	}
}

table unistring_ends_with2(const char* testname, const uni_char** string, const uni_char** other, size_t length, bool expected_result)
{
	// embedded mode:

	{ "empty - NULL",
		{ NULL }, { NULL }, 0, true, },
	{ "empty - \"\"",
		{ NULL }, { UNI_L(""), NULL }, OpDataUnknownLength, true, },
	{ "empty - \"x\"",
		{ NULL }, { UNI_L("x"), NULL }, OpDataUnknownLength, false, },

	{ "\"\" - NULL",
		{ UNI_L(""), NULL }, { NULL }, 0, true, },
	{ "\"\" - \"\"",
		{ UNI_L(""), NULL }, { UNI_L(""), NULL },
		OpDataUnknownLength, true, },
	{ "\"\" - \"x\"",
		{ UNI_L(""), NULL }, { UNI_L("x"), NULL },
		OpDataUnknownLength, false, },

	{ "\"xyz\" - NULL",
		{ UNI_L("xyz"), NULL }, { NULL }, 0, true, },
	{ "\"xyz\" - \"\"",
		{ UNI_L("xyz"), NULL }, { UNI_L(""), NULL },
		OpDataUnknownLength, true, },
	{ "\"xyz\" - \"x\"",
		{ UNI_L("xyz"), NULL }, { UNI_L("x"), NULL },
		OpDataUnknownLength, false, },
	{ "\"xyz\" - \"z\"",
		{ UNI_L("xyz"), NULL }, { UNI_L("z"), NULL },
		OpDataUnknownLength, true, },
	{ "\"xyz\" - \"yz\"",
		{ UNI_L("xyz"), NULL }, { UNI_L("yz"), NULL },
		OpDataUnknownLength, true, },
	{ "\"xyz\" - \"xyz\"",
		{ UNI_L("xyz"), NULL }, { UNI_L("xyz"), NULL },
		OpDataUnknownLength, true, },
	{ "\"xyz\" - \"xxyz\"",
		{ UNI_L("xyz"), NULL }, { UNI_L("xxyz"), NULL },
		OpDataUnknownLength, false, },
	{ "\"xyz\" - \" xyz\"",
		{ UNI_L("xyz"), NULL }, { UNI_L(" xyz"), NULL },
		OpDataUnknownLength, false, },
	{ "\"xyz\" - \"abc\"",
		{ UNI_L("xyz"), NULL }, { UNI_L("abc"), NULL },
		OpDataUnknownLength, false, },
	{ "\"xyz\" - \"yzfoo\",2",
		{ UNI_L("xyz"), NULL }, { UNI_L("yzfoo"), NULL }, 2, true, },
	{ "\"xyz\" - \"yz \",2",
		{ UNI_L("xyz"), NULL }, { UNI_L("yz "), NULL }, 2, true, },

	// normal mode:
	{ "spam, short",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam;"),
				UNI_L(" egg bacon and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bacon sausage and spam;"),
				UNI_L(" spam egg spam spam bacon and spam;"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam."),
				UNI_L(" And foo."),
				NULL },
		{ UNI_L("And foo."), NULL }, OpDataUnknownLength, true
	},
	{ "spam, longer",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam;"),
				UNI_L(" egg bacon and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bacon sausage and spam;"),
				UNI_L(" spam egg spam spam bacon and spam;"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam."),
				UNI_L(" And foo."),
				NULL },
		{ UNI_L(" egg sausage and bacon; egg"),
				UNI_L(" and spam; egg bacon and spam; egg bacon"),
				UNI_L(" sausage "),
				UNI_L("and spam; spam bacon sausage"),
				UNI_L(" and spam; spam egg spam spam bacon and spam; spam sau"),
				UNI_L("sage spam spam bacon spam tomato and spam. And fo"),
				UNI_L("o."),
				NULL },
		OpDataUnknownLength, true
	},
}

foreach (testname, string_data, other_data, length, expected_result) from unistring_ends_with2
{
	test("UniString::EndsWith(" testname " - UniString)")
	{
		const uni_char* string_setup[] = string_data;
		UniString d;
		size_t i;
		for (i = 0; string_setup[i]; ++i)
			verify_success(d.AppendConstData(string_setup[i]));
		const uni_char* other_setup[] = other_data;
		UniString other;
		for (i = 0; other_setup[i]; ++i)
			verify_success(other.AppendConstData(other_setup[i]));
		verify(d.EndsWith(other, length) == expected_result);
	}
}

table unistring_equals (const char* testname, const uni_char* a, const uni_char* b, size_t b_len, bool expected_result)
{
	{ "NULL == empty",	NULL, UNI_L(""), OpDataUnknownLength, true },
	{ "empty == NULL",	UNI_L(""), NULL, 0, true },
	{ "empty == empty",	UNI_L(""), UNI_L(""), OpDataUnknownLength, true },
	{ "empty != X",		UNI_L(""), UNI_L("X"), OpDataUnknownLength, false },
	{ "X != empty",		UNI_L("X"), UNI_L(""), OpDataUnknownLength, false },
	{ "X != Y",			UNI_L("X"), UNI_L("Y"), OpDataUnknownLength, false },
	{ "X == X",			UNI_L("X"), UNI_L("X"), OpDataUnknownLength, true },
	{ "X != Xx",		UNI_L("X"), UNI_L("Xx"), OpDataUnknownLength, false },
	{ "Xx != X",		UNI_L("Xx"), UNI_L("X"), OpDataUnknownLength, false },
	{ "X == Xx[:1]",	UNI_L("X"), UNI_L("Xx"), 1, true },
	{ "A(ring) != a(ring)",	UNI_L("\xc5"), UNI_L("\xe5"), OpDataUnknownLength, false },
}

foreach (testname, a, b, b_len, expected_result) from unistring_equals
{
	test("UniString::Equals(" testname ")")
	{
		UniString str;
		if (a) verify_success(str.SetConstData(a));
		verify(str.Equals(b, b_len) == expected_result);
	}
}

table unistring_equalscase (const char* testname, const uni_char** string_data, const uni_char** other_data, size_t length, bool expected_result)
{
	// An empty string equals an empty string:
	{ "empty", { NULL }, { NULL }, OpDataUnknownLength, true },

	// Any non-empty string does not equal an empty string
	{ "\"foo\" != empty",
		{ UNI_L("foo"), NULL }, { NULL }, OpDataUnknownLength, false },

	{ "empty != \"foo\"",
		{ NULL }, { UNI_L("foo"), NULL }, OpDataUnknownLength, false },

	{ "foo != BAR",
		{ UNI_L("foo"), NULL }, { UNI_L("BAR"), NULL }, OpDataUnknownLength, false },

	// First real match ignoring case in embedded mode:
	{ "foo == FOO",
		{ UNI_L("foo"), NULL }, { UNI_L("FOO"), NULL }, OpDataUnknownLength, true },
	{ "FOO == foo",
		{ UNI_L("FOO"), NULL }, { UNI_L("foo"), NULL }, OpDataUnknownLength, true },

	// Compare non-ascii characters:
	{ "A(ring) == a(ring)",
		{ UNI_L("\xc5"), NULL },
		{ UNI_L("\xe5"), NULL }, OpDataUnknownLength, true },

	{ "U+01C5 latin capital letter D with small letter z with caron.1",
		{ UNI_L("\x01C5"), NULL },
		{ UNI_L("\x01C4"), NULL }, OpDataUnknownLength, true },
	{ "U+01C5 latin capital letter D with small letter z with caron.2",
		{ UNI_L("\x01C5"), NULL },
		{ UNI_L("\x01C6"), NULL }, OpDataUnknownLength, true },
	{ "U+01C5 latin capital letter D with small letter z with caron.3",
		{ UNI_L("\x01C6"), NULL },
		{ UNI_L("\x01C4"), NULL }, OpDataUnknownLength, true },

	{ "U+01C8 latin capital letter L with small letter j.1",
		{ UNI_L("\x01C8"), NULL },
		{ UNI_L("\x01C7"), NULL }, OpDataUnknownLength, true },
	{ "U+01C8 latin capital letter L with small letter j.2",
		{ UNI_L("\x01C8"), NULL },
		{ UNI_L("\x01C9"), NULL }, OpDataUnknownLength, true },
	{ "U+01C8 latin capital letter L with small letter j.3",
		{ UNI_L("\x01C9"), NULL },
		{ UNI_L("\x01C7"), NULL }, OpDataUnknownLength, true },
	{ "U+01C8 latin capital letter L with small letter j.3",
		{ UNI_L("\x01C9"), NULL },
		{ UNI_L("\x01C7"), NULL }, OpDataUnknownLength, true },

	// Compare normal with embedded mode:
	{ "normal and embedded mode",
		{ UNI_L("this IS"), NULL },
		{ UNI_L("This is a string long enough to force it into UniString's normal mode"), NULL },
		7, true },

	{ "equal fragments",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam;"),
				UNI_L(" egg bacon and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bacon sausage and spam;"),
				UNI_L(" spam egg spam spam bacon and spam;"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam."),
				NULL },
		{ UNI_L("Well, THERE's Egg AND bacon;"),
				UNI_L(" Egg sAUSAGE and BACON;"),
				UNI_L(" egg and SPAM;"),
				UNI_L(" egg Bacon and spam;"),
				UNI_L(" egg bacon SAUSAGE and spam;"),
				UNI_L(" spam Bacon sausage and SPAM;"),
				UNI_L(" spam egg SPAM spam bacon and spam;"),
				UNI_L(" spam sausage Spam Spam BACON SPAM tomato AND spam."),
				NULL },
		OpDataUnknownLength, true },

	{ "equal fragments, sub-string,1",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				NULL },
		{ UNI_L("Well, THERE's Egg AND bacon;"),
				UNI_L(" Egg sAUSAGE and BACON;"),
				UNI_L("Now for something completely different!"),
				NULL },
		28+23, true },

	{ "fragments something different",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam; egg bacon and spam; egg "),
				NULL },
		{ UNI_L("Well, THERE's Egg AND bacon;"),
				UNI_L(" Egg sAUSAGE and BACON;"),
				UNI_L("Now for something completely different!"),
				NULL },
		28+24, false },

	{ "equal text, different fragments,1",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam;"),
				UNI_L(" egg bacon and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bacon sausage and spam;"),
				UNI_L(" spam egg spam spam bacon and spam;"),
				UNI_L(" spam sausage spam spam bacon spam tomato and spam."),
				NULL },
		{ UNI_L("Well, THERE's Egg AND bacon; Egg sAUSAGE"),
				UNI_L(" and BACON; egg a"),
				UNI_L("nd SPAM; egg Bacon and spam; egg bacon SAUSAGE and spa"),
				UNI_L("m; spam Bacon sausage and SPAM; spam egg SPAM spam bac"),
				UNI_L("on and spam; spam sausage Spam Spam BACON SPAM tomato "),
				UNI_L("AND spam."),
				NULL },
		OpDataUnknownLength, true },

	{ "equal text, different fragments,2",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam;"),
				UNI_L(" egg bacon and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam ba"),
				NULL },
		{ UNI_L("Well, THERE's Egg AND bacon; Egg sAUSAGE"),
				UNI_L(" and BACON; egg a"),
				UNI_L("nd SPAM; egg Bacon and spam; egg bacon SAUSAGE and spa"),
				UNI_L("m; spam BaXon sausage and SPAM; spam egg SPAM spam bac"),
				UNI_L("on and spam; spam sausage Spam Spam BACON SPAM tomato "),
				UNI_L("AND spam."),
				NULL },
		40+17+54+10, true },

	{ "equal text, different fragments,2",
		{ UNI_L("Well, there's egg and bacon;"),
				UNI_L(" egg sausage and bacon;"),
				UNI_L(" egg and spam;"),
				UNI_L(" egg bacon and spam;"),
				UNI_L(" egg bacon sausage and spam;"),
				UNI_L(" spam bac"),
				NULL },
		{ UNI_L("Well, THERE's Egg AND bacon; Egg sAUSAGE"),
				UNI_L(" and BACON; egg a"),
				UNI_L("nd SPAM; egg Bacon and spam; egg bacon SAUSAGE and spa"),
				UNI_L("m; spam BaXon sausage and SPAM; spam egg SPAM spam bac"),
				UNI_L("on and spam; spam sausage Spam Spam BACON SPAM tomato "),
				UNI_L("AND spam."),
				NULL },
		40+17+54+11, false },
}

foreach (testname, string_data, other_data, length, expected_result) from unistring_equalscase
{
	test("UniString::EqualsCase(UniString) - " testname)
	{
		const uni_char* string_setup[] = string_data;
		UniString d;
		verify(SetupString(d, string_setup, NULL));

		const uni_char* other_setup[] = other_data;
		UniString other;
		verify(SetupString(other, other_setup, NULL));

		verify(d.EqualsCase(UniString(other, 0, length)) == expected_result);
	}

	test("UniString::EqualsCase(uni_char*) - " testname)
	{
		const uni_char* string_setup[] = string_data;
		UniString d;
		verify(SetupString(d, string_setup, NULL));

		const uni_char* other_setup[] = other_data;
		UniString other;
		verify(SetupString(other, other_setup, NULL));
		verify(other.Data(true));
		verify(d.EqualsCase(other.Data(true), MIN(length, other.Length())) == expected_result);
	}
}
