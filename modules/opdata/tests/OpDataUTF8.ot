/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "opdata.UTF8";

include "modules/opdata/OpDataUTF8.h";

table opdata_uni (const char* testname, const char* utf8, const uni_char* utf16)
{

	{ "ascii embedded 32",
			/* Assuming OPDATA_UNI_CHAR_ALIGNMENT is enabled, an OpData can
			 * store 18 characters in embedded mode on a 32bit machine: */
			"The quick brown fo", UNI_L("The quick brown fo") }

	{ "ascii embedded 64",
			/* Assuming OPDATA_UNI_CHAR_ALIGNMENT is enabled, an OpData can
			 * store 38 characters in embedded mode on a 64bit machine: */
			"The quick brown fox jumps over the laz",
			UNI_L("The quick brown fox jumps over the laz") }

	{ "ascii longer",
			/* Use a string that is no longer stored in embedded mode: */
			"The quick brown fox jumps over the lazy dog. 1234567890",
			UNI_L("The quick brown fox jumps over the lazy dog. 1234567890") }

	{ "Danish",
			/* "Quiz contestants were eating strawbery with cream while Wolther
			 * the circus clown played on xylophone." */
			"Quizdeltagerne spiste jordb\xC3\xA6r med fl\xC3\xB8\x64\x65, mens "
			"cirkusklovnen Wolther spillede p\xC3\xA5 xylofon.",
			// The utf8 length is 91 char and the utf16 length is 88 uni_char.
			UNI_L("Quizdeltagerne spiste jordb\xE6r med fl\xF8\x64\x65, mens cirkusklovnen Wolther spillede p\xE5 xylofon.") }

	{ "French",
			"Portez ce vieux whisky au juge blond qui fume sur son \xC3\xAEle "
			"int\xC3\xA9rieure, \xC3\xA0 c\xC3\xB4t\xC3\xA9 de l'alc\xC3\xB4ve"
			" ovo\xC3\xAF\x64\x65, o\xC3\xB9 les b\xC3\xBB\x63hes se consument"
			" dans l'\xC3\xA2tre, ce qui lui permet de penser \xC3\xA0 la "
			"c\xC3\xA6nogen\xC3\xA8se de l'\xC3\xAAtre dont il est question "
			"dans la cause ambigu\xC3\xAB entendue \xC3\xA0 Mo\xC3\xBF, dans"
			" un capharna\xC3\xBCm qui, pense-t-il, diminue \xC3\xA7\xC3\xA0"
			" et l\xC3\xA0 la qualit\xC3\xA9 de son \xC5\x93uvre.",
			// The utf8 length is 350 char and the utf16 length is 327 uni_char.
			UNI_L("Portez ce vieux whisky au juge blond qui fume sur son \xEEle int\xE9rieure, \xE0 c\xF4t\xE9 de l'alc\xF4ve ovo\xEF\x64\x65, o\xF9 les b\xFB\x63hes se consument dans l'\xE2tre, ce qui lui permet de penser \xE0 la c\xE6nogen\xE8se de l'\xEAtre dont il est question dans la cause ambigu\xEB entendue \xE0 Mo\xFF, dans un capharna\xFCm qui, pense-t-il, diminue \xE7\xE0 et l\xE0 la qualit\xE9 de son \x0153uvre.") }

	{ "French 2",
			"Le c\xC5\x93ur d\xC3\xA9\xC3\xA7u mais l'\xC3\xA2me plut\xC3\xB4t"
			" na\xC3\xAFve, Lou\xC3\xBFs r\xC3\xAAva de crapa\xC3\xBCter en "
			"cano\xC3\xAB au del\xC3\xA0 des \xC3\xAEles, pr\xC3\xA8s du "
			"m\xC3\xA4lstr\xC3\xB6m o\xC3\xB9 br\xC3\xBBlent les nov\xC3\xA6.",
			// The utf8 length is 144 char and the utf16 length is 126 uni_char.
			UNI_L("Le c\x0153ur d\xE9\xE7u mais l'\xE2me plut\xF4t na\xEFve, Lou\xFFs r\xEAva de crapa\xFCter en cano\xEB au del\xE0 des \xEEles, pr\xE8s du m\xE4lstr\xF6m o\xF9 br\xFBlent les nov\xE6.") }

	{ "German",
			/* "Wrongful practicing of xylophone music tortures every larger
			 * dwarf." */
			"Falsches \xC3\x9C\x62\x65n von Xylophonmusik qu\xC3\xA4lt jeden "
			"gr\xC3\xB6\xC3\x9F\x65ren Zwerg.",
			// The utf8 length is 63 char and the utf16 length is 59 uni_char.
			UNI_L("Falsches \xDC\x62\x65n von Xylophonmusik qu\xE4lt jeden gr\xF6\xDF\x65ren Zwerg.") }

	{ "Greek",
			// "No more shall I see acacias or myrtles in the golden clearing"
			"\xCE\x93\xCE\xB1\xCE\xB6\xCE\xAD\xCE\xB5\xCF\x82 \xCE\xBA\xCE"
			"\xB1\xE1\xBD\xB6 \xCE\xBC\xCF\x85\xCF\x81\xCF\x84\xCE\xB9\xE1"
			"\xBD\xB2\xCF\x82 \xCE\xB4\xE1\xBD\xB2\xCE\xBD \xCE\xB8\xE1"
			"\xBD\xB0 \xCE\xB2\xCF\x81\xE1\xBF\xB6 \xCF\x80\xCE\xB9\xE1"
			"\xBD\xB0 \xCF\x83\xCF\x84\xE1\xBD\xB8 \xCF\x87\xCF\x81\xCF"
			"\x85\xCF\x83\xCE\xB1\xCF\x86\xE1\xBD\xB6 \xCE\xBE\xCE\xAD\xCF"
			"\x86\xCF\x89\xCF\x84\xCE\xBF",
			// The utf8 length is 103 char and the utf16 length is 52 uni_char.
			UNI_L("\x0393\x03B1\x03B6\x03AD\x03B5\x03C2 \x03BA\x03B1\x1f76 \x03BC\x03C5\x03C1\x03C4\x03B9\x1F72\x03C2 \x03B4\x1F72\x03BD \x03B8\x1F70 \x03B2\x03C1\x1FF6 \x03C0\x03B9\x1F70 \x03C3\x03C4\x1F78 \x03C7\x03C1\x03C5\x03C3\x03B1\x03C6\x1F76 \x03BE\x03AD\x03C6\x03C9\x03C4\x03BF") }

	{ "Hebrew",
			"\xD7\x93\xD7\x92 \xD7\xA1\xD7\xA7\xD7\xA8\xD7\x9F \xD7\xA9"
			"\xD7\x98 \xD7\x91\xD7\x99\xD7\x9D \xD7\x9E\xD7\x90\xD7\x95"
			"\xD7\x9B\xD7\x96\xD7\x91 \xD7\x95\xD7\x9C\xD7\xA4\xD7\xAA\xD7"
			"\xA2 \xD7\x9E\xD7\xA6\xD7\x90 \xD7\x9C\xD7\x95 \xD7\x97"
			"\xD7\x91\xD7\xA8\xD7\x94 \xD7\x90\xD7\x99\xD7\x9A \xD7\x94"
			"\xD7\xA7\xD7\x9C\xD7\x99\xD7\x98\xD7\x94",
			// The utf8 length is 90 char and the utf16 length is 50 uni_char.
			UNI_L("\x05D3\x05D2 \x05E1\x05E7\x05E8\x05DF \x05E9\x05D8 \x05D1\x05D9\x05DD \x05DE\x05D0\x05D5\x05DB\x05D6\x05D1 \x05D5\x05DC\x05E4\x05EA\x05E2 \x05DE\x05E6\x05D0 \x05DC\x05D5 \x05D7\x05D1\x05E8\x05D4 \x05D0\x05D9\x05DA \x05D4\x05E7\x05DC\x05D9\x05D8\x05D4") }

	{ "Hungarian",
			"\xC3\x81rv\xC3\xADzt\xC5\xB1r\xC5\x91 "
			"t\xC3\xBCk\xC3\xB6rf\xC3\xBAr\xC3\xB3g\xC3\xA9p",
			// The utf8 length is 31 char and the utf16 length is 22 uni_char.
			UNI_L("\xC1rv\xEDzt\x0171r\x0151 t\xFCk\xF6rf\xFAr\xF3g\xE9p") }

	{ "Icelandic",
			"K\xC3\xA6mi n\xC3\xBD \xC3\xB6xi h\xC3\xA9r ykist "
			"\xC3\xBEj\xC3\xB3\x66um n\xC3\xBA b\xC3\xA6\xC3\xB0i "
			"v\xC3\xADl og \xC3\xA1\x64repa",
			// The utf8 length is 61 char and the utf16 length is 50 uni_char.
			UNI_L("K\xE6mi n\xFD \xF6xi h\xE9r ykist \xFEj\xF3\x66um n\xFA b\xE6\xF0i v\xEDl og \xE1\x64repa") }

	{ "Icelandic 2",
			"S\xC3\xA6v\xC3\xB6r gr\xC3\xA9t \xC3\xA1\xC3\xB0\x61n "
			"\xC3\xBEv\xC3\xAD \xC3\xBAlpan var \xC3\xB3n\xC3\xBDt",
			// The utf8 length is 44 char and the utf16 length is 34 uni_char.
			UNI_L("S\xE6v\xF6r gr\xE9t \xE1\xF0\x61n \xFEv\xED \xFAlpan var \xF3n\xFDt") }

	{ "Irish Gaelic",
			"D'fhuascail \xC3\x8Dosa, \xC3\x9Armhac na h\xC3\x93ighe "
			"Beannaithe, p\xC3\xB3r \xC3\x89\x61va agus \xC3\x81\x64haimh",
			// The utf8 length is 74 char and the utf16 length is 68 uni_char.
			UNI_L("D'fhuascail \xCDosa, \xDArmhac na h\xD3ighe Beannaithe, p\xF3r \xC9\x61va agus \xC1\x64haimh") }

	{ "Japanese Hiragana",
			"\xE3\x81\x84\xE3\x82\x8D\xE3\x81\xAF\xE3\x81\xAB\xE3\x81\xBB\xE3"
			"\x81\xB8\xE3\x81\xA8\xE3\x81\xA1\xE3\x82\x8A\xE3\x81\xAC\xE3\x82"
			"\x8B\xE3\x82\x92\xE3\x82\x8F\xE3\x81\x8B\xE3\x82\x88\xE3\x81\x9F"
			"\xE3\x82\x8C\xE3\x81\x9D\xE3\x81\xA4\xE3\x81\xAD\xE3\x81\xAA\xE3"
			"\x82\x89\xE3\x82\x80\xE3\x81\x86\xE3\x82\x90\xE3\x81\xAE\xE3\x81"
			"\x8A\xE3\x81\x8F\xE3\x82\x84\xE3\x81\xBE\xE3\x81\x91\xE3\x81\xB5"
			"\xE3\x81\x93\xE3\x81\x88\xE3\x81\xA6\xE3\x81\x82\xE3\x81\x95\xE3"
			"\x81\x8D\xE3\x82\x86\xE3\x82\x81\xE3\x81\xBF\xE3\x81\x97\xE3\x82"
			"\x91\xE3\x81\xB2\xE3\x82\x82\xE3\x81\x9B\xE3\x81\x99\xE3\x82\xA4"
			"\xE3\x83\xAD\xE3\x83\x8F\xE3\x83\x8B\xE3\x83\x9B\xE3\x83\x98\xE3"
			"\x83\x88 \xE3\x83\x81\xE3\x83\xAA\xE3\x83\x8C\xE3\x83\xAB\xE3"
			"\x83\xB2 \xE3\x83\xAF\xE3\x82\xAB\xE3\x83\xA8\xE3\x82\xBF\xE3"
			"\x83\xAC\xE3\x82\xBD \xE3\x83\x84\xE3\x83\x8D\xE3\x83\x8A\xE3"
			"\x83\xA9\xE3\x83\xA0",
			// The utf8 length is 213 char and the utf16 length is 73 uni_char.
			UNI_L("\x3044\x308D\x306F\x306B\x307B\x3078\x3068\x3061\x308A\x306C\x308B\x3092\x308F\x304B\x3088\x305F\x308C\x305D\x3064\x306D\x306A\x3089\x3080\x3046\x3090\x306E\x304A\x304F\x3084\x307E\x3051\x3075\x3053\x3048\x3066\x3042\x3055\x304D\x3086\x3081\x307F\x3057\x3091\x3072\x3082\x305B\x3059\x30A4\x30ED\x30CF\x30CB\x30DB\x30D8\x30C8 \x30C1\x30EA\x30CC\x30EB\x30F2 \x30EF\x30AB\x30E8\x30BF\x30EC\x30BD \x30C4\x30CD\x30CA\x30E9\x30E0") }

	{ "Japanese Katakana",
			"\xE3\x82\xA6\xE3\x83\xB0\xE3\x83\x8E\xE3\x82\xAA\xE3\x82\xAF\xE3"
			"\x83\xA4\xE3\x83\x9E \xE3\x82\xB1\xE3\x83\x95\xE3\x82\xB3\xE3"
			"\x82\xA8\xE3\x83\x86 \xE3\x82\xA2\xE3\x82\xB5\xE3\x82\xAD\xE3"
			"\x83\xA6\xE3\x83\xA1\xE3\x83\x9F\xE3\x82\xB7 \xE3\x83\xB1\xE3"
			"\x83\x92\xE3\x83\xA2\xE3\x82\xBB\xE3\x82\xB9\xE3\x83\xB3",
			// The utf8 length is 78 char and the utf16 length is 28 uni_char.
			UNI_L("\x30A6\x30F0\x30CE\x30AA\x30AF\x30E4\x30DE \x30B1\x30D5\x30B3\x30A8\x30C6 \x30A2\x30B5\x30AD\x30E6\x30E1\x30DF\x30B7 \x30F1\x30D2\x30E2\x30BB\x30B9\x30F3") }

	{ "Polish",
			"Pchn\xC4\x85\xC4\x87 w t\xC4\x99 \xC5\x82\xC3\xB3\x64\xC5\xBA "
			"je\xC5\xBC\x61 lub o\xC5\x9Bm skrzy\xC5\x84 fig",
			// The utf8 length is 49 char and the utf16 length is 40 uni_char.
			UNI_L("Pchn\x0105\x0107 w t\x0119 \x0142\xF3\x64\x017A je\x017C\x61 lub o\x015Bm skrzy\x0144 fig") }

	{ "Russian",
			"\xD0\x92 \xD1\x87\xD0\xB0\xD1\x89\xD0\xB0\xD1\x85 \xD1\x8E"
			"\xD0\xB3\xD0\xB0 \xD0\xB6\xD0\xB8\xD0\xBB \xD0\xB1\xD1\x8B"
			" \xD1\x86\xD0\xB8\xD1\x82\xD1\x80\xD1\x83\xD1\x81? \xD0"
			"\x94\xD0\xB0, \xD0\xBD\xD0\xBE \xD1\x84\xD0\xB0\xD0\xBB"
			"\xD1\x8C\xD1\x88\xD0\xB8\xD0\xB2\xD1\x8B\xD0\xB9 \xD1\x8D\xD0"
			"\xBA\xD0\xB7\xD0\xB5\xD0\xBC\xD0\xBF\xD0\xBB\xD1\x8F\xD1\x80!",
			// The utf8 length is 96 char and the utf16 length is 54 uni_char.
			UNI_L("\x0412 \x0447\x0430\x0449\x0430\x0445 \x044E\x0433\x0430 \x0436\x0438\x043B \x0431\x044B \x0446\x0438\x0442\x0440\x0443\x0441? \x0414\x0430, \x43D\x043E \x0444\x0430\x043B\x044C\x0448\x0438\x0432\x044B\x0439 \x044D\x043A\x0437\x0435\x043C\x043F\x043B\x044F\x0440!") }

	{ "Russian 2",
			"\xD0\xA1\xD1\x8A\xD0\xB5\xD1\x88\xD1\x8C \xD0\xB6\xD0\xB5 "
			"\xD0\xB5\xD1\x89\xD1\x91 \xD1\x8D\xD1\x82\xD0\xB8\xD1\x85 "
			"\xD0\xBC\xD1\x8F\xD0\xB3\xD0\xBA\xD0\xB8\xD1\x85 \xD1\x84\xD1"
			"\x80\xD0\xB0\xD0\xBD\xD1\x86\xD1\x83\xD0\xB7\xD1\x81\xD0\xBA\xD0"
			"\xB8\xD1\x85 \xD0\xB1\xD1\x83\xD0\xBB\xD0\xBE\xD0\xBA \xD0"
			"\xB4\xD0\xB0 \xD0\xB2\xD1\x8B\xD0\xBF\xD0\xB5\xD0\xB9 \xD1"
			"\x87\xD0\xB0\xD1\x8E",
			// The utf8 length is 101 char and the utf16 length is 55 uni_char.
			UNI_L("\x0421\x044A\x0435\x0448\x044C \x0436\x0435 \x0435\x0449\x0451 \x044D\x0442\x0438\x0445 \x043C\x044F\x0433\x043A\x0438\x0445 \x0444\x0440\x0430\x043D\x0446\x0443\x0437\x0441\x043A\x0438\x0445 \x0431\x0443\x043B\x043E\x043A \x0434\x0430 \x0432\x044B\x043F\x0435\x0439 \x447\x430\x44E") }

	{ "SMP (mathematical script)",
			"mathematical script small l: \"\xF0\x9D\x93\x81\" (U+1D4C1) has "
			"a possibly similar-looking character at U+2113 \xE2\x84\x93 "
			"script small l.",
			UNI_L("mathematical script small l: \"\xD835\xDCC1\" (U+1D4C1) has a possibly similar-looking character at U+2113 \x2113 script small l.") }

	{ "Spanish",
			"El ping\xC3\xBCino Wenceslao hizo kil\xC3\xB3metros bajo "
			"exhaustiva lluvia y fr\xC3\xADo, a\xC3\xB1oraba a su querido "
			"cachorro.",
			// The utf8 length is 103 char and the utf16 length is 99 uni_char.
			UNI_L("El ping\xFCino Wenceslao hizo kil\xF3metros bajo exhaustiva lluvia y fr\xEDo, a\xF1oraba a su querido cachorro.") }
}

test("UTF8OpData::ToUniString(ASCII)")
{
	char ascii[0x80];			// ARRAY OK 2011-11-25 markuso
	uni_char ascii_uni[0x80];	// ARRAY OK 2011-11-25 markuso
	for (unsigned char c = 0; c < 0x7F; c++)
	{
		ascii[c] = c+1;
		ascii_uni[c] = static_cast<uni_char>(c+1);
	}
	ascii[0x7F] = 0;
	ascii_uni[0x7F] = 0;
	verify_string(ascii, ascii_uni);
	OpData source;
	verify_success(source.SetConstData(ascii));
	verify(source.Length() == 0x7F);
	verify_string(source, ascii);
	UniString dest;
	verify_success(UTF8OpData::ToUniString(source, dest));
	verify(dest.Length() == 0x7F);
	verify_string(dest, ascii_uni);
	verify_status(OpBoolean::IS_TRUE, UTF8OpData::CompareWith(source, dest));
}

foreach (testname, utf8, utf16) from opdata_uni
{
	test("UTF8OpData::ToUniString(" testname ")")
	{
		OpData source;
		verify_success(source.SetConstData(utf8));
		verify(source.Length() == op_strlen(utf8));
		verify_string(source, utf8);
		UniString dest;
		verify_success(UTF8OpData::ToUniString(source, dest));
		verify(dest.Length() == uni_strlen(utf16));
		verify_string(dest, utf16);
		verify_status(OpBoolean::IS_TRUE, UTF8OpData::CompareWith(source, dest));
	}
}

foreach (testname, utf8, utf16) from opdata_uni
{
	test("UTF8OpData::ToUniString multiple chunks(" testname ")")
	{
		OpData source;
		// Append utf8 in multiple chunks to the source:
		const char* source_utf8 = utf8;
		size_t source_len = op_strlen(source_utf8);
		size_t source_step = source_len / 4;
		while (source_len)
		{
			verify_success(source.AppendCopyData(source_utf8, source_step));
			source_utf8 += source_step;
			source_len -= source_step;
			if (source_len < source_step)
				source_step = source_len;
		}
		verify(source.Length() == op_strlen(utf8));
		verify_string(source, utf8);

		UniString dest;
		verify_success(UTF8OpData::ToUniString(source, dest));
		verify(dest.Length() == uni_strlen(utf16));
		verify_string(dest, utf16);
		verify_status(OpBoolean::IS_TRUE, UTF8OpData::CompareWith(source, dest));
	}
}


foreach (testname, utf8, utf16) from opdata_uni
{
	test("UTF8OpData::FromUniString(" testname ")")
	{
		UniString source;
		verify_success(source.SetConstData(utf16));
		verify(source.Length() == uni_strlen(utf16));
		verify_string(source, utf16);
		OpData dest;
		verify_success(UTF8OpData::FromUniString(source, dest));
		verify(dest.Length() == op_strlen(utf8));
		verify_string(dest, utf8);
		verify_status(OpBoolean::IS_TRUE, UTF8OpData::CompareWith(dest, source));
	}
}

foreach (testname, utf8, utf16) from opdata_uni
{
	test("UTF8OpData::FromUniString multiple chunks(" testname ")")
	{
		UniString source;
		// Append utf16 in multiple chunks to the source:
		const uni_char* source_utf16 = utf16;
		size_t source_len = uni_strlen(source_utf16);
		size_t source_step = source_len / 4;
		while (source_len)
		{
			verify_success(source.AppendCopyData(source_utf16, source_step));
			source_utf16 += source_step;
			source_len -= source_step;
			if (source_len < source_step)
				source_step = source_len;
		}
		verify(source.Length() == uni_strlen(utf16));
		verify_string(source, utf16);

		OpData dest;
		verify_success(UTF8OpData::FromUniString(source, dest));
		verify(dest.Length() == op_strlen(utf8));
		verify_string(dest, utf8);
		verify_status(OpBoolean::IS_TRUE, UTF8OpData::CompareWith(dest, source));
	}
}

/* This table contains incomplete UTF-8 sequences. */
table opdata_uni_incomplete_utf8 (const char* testname, const char* utf8, const uni_char* utf16, OP_STATUS expected_status)
{
	{ "incomplete UTF-8 multi-byte at end",
			"Quizdeltagerne spiste jordb\xC3\xA6r med fl\xC3",
			UNI_L("Quizdeltagerne spiste jordb\xE6r med fl"),
			OpStatus::ERR_OUT_OF_RANGE }
	{ "incomplete UTF-8 multi-byte in the middle",
			/* A valid (non-ASCII) UTF-8 sequence starts with byte which of
			 * (binary) format 1+0.+, the number of 1-bits determine the length
			 * of the sequence (including the first byte:).
			 * 110xxxxx means there are two bytes in this sequence,
			 * 1111110x means there are six bytes in this sequence.
			 * Each following byte in the sequence uses 10xxxxxx.
			 * So 11101111 10111111 01000000 is an invalid sequence. In this
			 * case the converter inserts the NOT_A_CHARACTER/0xFFFD and
			 * continues. */
			"Invalid UTF-8: \xEF\xBF\x40 in the middle of the string.",
			UNI_L("Invalid UTF-8: \xFFFD\x0040 in the middle of the string."),
			OpStatus::OK }
}

foreach (testname, utf8, utf16, expected_status) from opdata_uni_incomplete_utf8
{
	test("UTF8OpData::ToUniString(" testname ")")
	{
		OpData source;
		verify_success(source.SetConstData(utf8));
		verify(source.Length() == op_strlen(utf8));
		verify_string(source, utf8);
		UniString dest;
		verify_status(expected_status, UTF8OpData::ToUniString(source, dest));
		verify(dest.Length() == uni_strlen(utf16));
		verify_string(dest, utf16);
	}
}

/* This table contains incomplete UTF-16 sequences. */
table opdata_uni_incomplete_utf16 (const char* testname, const uni_char* utf16, const char* utf8)
{
	{ "incomplete SMP (mathematical script)",
			UNI_L("mathematical script small l: \"\xD835"),
			"mathematical script small l: \"" }
}

foreach (testname, utf16, utf8) from opdata_uni_incomplete_utf16
{
	test("UTF8OpData::FromUniString(" testname ")")
	{
		UniString source;
		verify_success(source.SetConstData(utf16));
		verify(source.Length() == uni_strlen(utf16));
		verify_string(source, utf16);
		OpData dest;
		verify_success(UTF8OpData::FromUniString(source, dest));
		verify(dest.Length() == op_strlen(utf8));
		verify_string(dest, utf8);
	}
}

table opdata_compare (const char* testname, const char* utf8, const uni_char* utf16, OP_BOOLEAN expected_result)
{
	{ "empty == empty", "", UNI_L(""), OpBoolean::IS_TRUE }
	{ "empty != X", "", UNI_L("X"), OpBoolean::IS_FALSE }
	{ "X != empty", "X", UNI_L(""), OpBoolean::IS_FALSE }
	{ "X != Y", "X", UNI_L("Y"), OpBoolean::IS_FALSE }
	{ "X == X", "X", UNI_L("X"), OpBoolean::IS_TRUE }
	{ "Japanese",
			"\xE3\x82\xA6\xE3\x83\xB0\xE3\x83\x8E\xE3\x82\xAA\xE3\x82\xAF\xE3"
			"\x83\xA4\xE3\x83\x9E \xE3\x82\xB1\xE3\x83\x95\xE3\x82\xB3\xE3"
			"\x82\xA8\xE3\x83\x86 \xE3\x82\xA2\xE3\x82\xB5\xE3\x82\xAD\xE3"
			"\x83\xA6\xE3\x83\xA1\xE3\x83\x9F\xE3\x82\xB7 \xE3\x83\xB1\xE3"
			"\x83\x92\xE3\x83\xA2\xE3\x82\xBB\xE3\x82\xB9\xE3\x83\xB3 X",
			UNI_L("\x30A6\x30F0\x30CE\x30AA\x30AF\x30E4\x30DE \x30B1\x30D5\x30B3\x30A8\x30C6 \x30A2\x30B5\x30AD\x30E6\x30E1\x30DF\x30B7 \x30F1\x30D2\x30E2\x30BB\x30B9\x30F3 Y"), OpBoolean::IS_FALSE }
#ifdef ENCODINGS_HAVE_CHECK_ENDSTATE
	{ "incomplete UTF-8 multi-byte at end",
			"Quizdeltagerne spiste jordb\xC3\xA6r med fl\xC3",
			UNI_L("Quizdeltagerne spiste jordb\xE6r med fl"),
			OpBoolean::IS_FALSE }
	{ "incomplete UTF-8 multi-byte at end matching 0xFFFD",
			"Quizdeltagerne spiste jordb\xC3\xA6r med fl\xC3",
			UNI_L("Quizdeltagerne spiste jordb\xE6r med fl\xFFFD"),
			OpBoolean::IS_TRUE }
	{ "incomplete UTF-8 multi-byte at end 2",
			"Quizdeltagerne spiste jordb\xC3\xA6r med fl\xC3",
			UNI_L("Quizdeltagerne spiste jordb\xE6r med fl\xFFFDx"),
			OpBoolean::IS_FALSE }
#endif // ENCODINGS_HAVE_CHECK_ENDSTATE
	{ "incomplete UTF-8 multi-byte in the middle",
			"Invalid UTF-8: \xEF\xBF\x40 in the middle of the string.",
			UNI_L("Invalid UTF-8: \xFFFD\x0040 in the middle of the string."),
			OpBoolean::IS_TRUE }
}

foreach (testname, utf8, utf16, expected_result) from opdata_compare
{
	test("UTF8OpData::CompareWith(" testname ")")
	{
		OpData data;
		verify_success(data.SetConstData(utf8));
		UniString str;
		verify_success(str.SetConstData(utf16));
		verify_status(expected_result, UTF8OpData::CompareWith(data, str));
	}
}

table opdata_compare2 (const char* testname, const char* utf8, const uni_char* utf16, OP_BOOLEAN expected_result)
{
	{ "diff at end",
			"\xE3\x82\xA6\xE3\x83\xB0\xE3\x83\x8E\xE3\x82\xAA\xE3\x82\xAF\xE3"
			"\x83\xA4\xE3\x83\x9E \xE3\x82\xB1\xE3\x83\x95\xE3\x82\xB3\xE3"
			"\x82\xA8\xE3\x83\x86 \xE3\x82\xA2\xE3\x82\xB5\xE3\x82\xAD\xE3"
			"\x83\xA6\xE3\x83\xA1\xE3\x83\x9F\xE3\x82\xB7 \xE3\x83\xB1\xE3"
			"\x83\x92\xE3\x83\xA2\xE3\x82\xBB\xE3\x82\xB9\xE3\x83\xB3 X",
			UNI_L("\x30A6\x30F0\x30CE\x30AA\x30AF\x30E4\x30DE \x30B1\x30D5\x30B3\x30A8\x30C6 \x30A2\x30B5\x30AD\x30E6\x30E1\x30DF\x30B7 \x30F1\x30D2\x30E2\x30BB\x30B9\x30F3 Y"), OpBoolean::IS_FALSE }
}

foreach (testname, utf8, utf16, expected_result) from opdata_compare2
{
	test("UTF8OpData::CompareWith(multiple chunks: " testname ")")
	{
		OpData data;
		const char* source_utf8 = utf8;
		size_t source_len = op_strlen(source_utf8);
		size_t source_step = source_len / 4;
		while (source_len)
		{
			verify_success(data.AppendCopyData(source_utf8, source_step));
			source_utf8 += source_step;
			source_len -= source_step;
			if (source_len < source_step)
				source_step = source_len;
		}
		UniString str;
		const uni_char* source_utf16 = utf16;
		source_len = uni_strlen(source_utf16);
		source_step = source_len / 4;
		while (source_len)
		{
			verify_success(str.AppendCopyData(source_utf16, source_step));
			source_utf16 += source_step;
			source_len -= source_step;
			if (source_len < source_step)
				source_step = source_len;
		}
		verify_status(expected_result, UTF8OpData::CompareWith(data, str));
	}
}
