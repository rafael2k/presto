/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "opdata.ASCII";

include "modules/opdata/OpDataASCII.h";

table opdata_uni (const char* testname, const char* ascii, const uni_char* utf16)
{
	{ "empty string", "", UNI_L("") }

	{ "ascii embedded 32",
			/* Assuming OPDATA_UNI_CHAR_ALIGNMENT is enabled, an OpData can
			 * store 18 characters in embedded mode on a 32bit machine: */
			"The quick brown fo", UNI_L("The quick brown fo") }

	{ "ascii embedded 64",
			/* Assuming OPDATA_UNI_CHAR_ALIGNMENT is enabled, an OpData can
			 * store 38 characters in embedded mode on a 64bit machine: */
			"The quick brown fox jumps over the laz",
			UNI_L("The quick brown fox jumps over the laz") }

	{ "ascii longer",
			/* Use a string that is no longer stored in embedded mode: */
			"The quick brown fox jumps over the lazy dog. 1234567890",
			UNI_L("The quick brown fox jumps over the lazy dog. 1234567890") }
}

foreach (testname, ascii, utf16) from opdata_uni
{
	test("ASCIIOpData::ToUniString(" testname ")")
	{
		OpData source;
		verify_success(source.SetConstData(ascii));
		verify(source.Length() == op_strlen(ascii));
		verify_string(source, ascii);
		UniString dest;
		verify_success(ASCIIOpData::ToUniString(source, dest));
		verify(dest.Length() == uni_strlen(utf16));
		verify_string(dest, utf16);
		verify_status(OpBoolean::IS_TRUE, ASCIIOpData::CompareWith(source, dest));
	}
}

foreach (testname, ascii, utf16) from opdata_uni
{
	test("ASCIIOpData::ToUniString multiple chunks(" testname ")")
	{
		OpData source;
		// Append ascii in multiple chunks to the source:
		const char* source_ascii = ascii;
		size_t source_len = op_strlen(source_ascii);
		size_t source_step = source_len / 4;
		while (source_len)
		{
			verify_success(source.AppendCopyData(source_ascii, source_step));
			source_ascii += source_step;
			source_len -= source_step;
			if (source_len < source_step)
				source_step = source_len;
		}
		verify(source.Length() == op_strlen(ascii));
		verify_string(source, ascii);

		UniString dest;
		verify_success(ASCIIOpData::ToUniString(source, dest));
		verify(dest.Length() == uni_strlen(utf16));
		verify_string(dest, utf16);
		verify_status(OpBoolean::IS_TRUE, ASCIIOpData::CompareWith(source, dest));
	}
}


foreach (testname, ascii, utf16) from opdata_uni
{
	test("ASCIIOpData::FromUniString(" testname ")")
	{
		UniString source;
		verify_success(source.SetConstData(utf16));
		verify(source.Length() == uni_strlen(utf16));
		verify_string(source, utf16);
		OpData dest;
		verify_success(ASCIIOpData::FromUniString(source, dest));
		verify(dest.Length() == op_strlen(ascii));
		verify_string(dest, ascii);
		verify_status(OpBoolean::IS_TRUE, ASCIIOpData::CompareWith(dest, source));
	}
}

foreach (testname, ascii, utf16) from opdata_uni
{
	test("ASCIIOpData::FromUniString multiple chunks(" testname ")")
	{
		UniString source;
		// Append utf16 in multiple chunks to the source:
		const uni_char* source_utf16 = utf16;
		size_t source_len = uni_strlen(source_utf16);
		size_t source_step = source_len / 4;
		while (source_len)
		{
			verify_success(source.AppendCopyData(source_utf16, source_step));
			source_utf16 += source_step;
			source_len -= source_step;
			if (source_len < source_step)
				source_step = source_len;
		}
		verify(source.Length() == uni_strlen(utf16));
		verify_string(source, utf16);

		OpData dest;
		verify_success(ASCIIOpData::FromUniString(source, dest));
		verify(dest.Length() == op_strlen(ascii));
		verify_string(dest, ascii);
		verify_status(OpBoolean::IS_TRUE, ASCIIOpData::CompareWith(dest, source));
	}
}

/* This table contains invalid ASCII strings. */
table opdata_invalid_ascii_char (const char* testname, const char* ascii, const uni_char* utf16)
{
	{ "non-ASCII mixed with ASCII",
			"Quizdeltagerne spiste jordb\xC3\xA6r",
			UNI_L("Quizdeltagerne spiste jordbr") }
	{ "non-ASCII at end",
			"Quizdeltagerne spiste jordb\xC3\xA6",
			UNI_L("Quizdeltagerne spiste jordb") }
	{ "non-ASCII only", "\xFF\xC3\xA6\x80", UNI_L("") }
}

foreach (testname, ascii, utf16) from opdata_invalid_ascii_char
{
	test("ASCIIOpData::ToUniString(" testname ")")
	{
		OpData source;
		verify_success(source.SetConstData(ascii));
		verify(source.Length() == op_strlen(ascii));
		verify_string(source, ascii);
		UniString dest;
		verify_status(OpStatus::ERR_OUT_OF_RANGE, ASCIIOpData::ToUniString(source, dest));
		verify(dest.Length() == uni_strlen(utf16));
		verify_string(dest, utf16);
	}
}

/* This table contains invalid ASCII strings. */
table opdata_invalid_ascii_uni_char (const char* testname, const char* ascii, const uni_char* utf16)
{
	{ "non-ASCII mixed with ASCII",
			"ASCII",
			UNI_L("ASC\x0100\x0080\x00A3II") }
	{ "non-ASCII only", "", UNI_L("\x0100\x0080\x00A3") }
}

foreach (testname, ascii, utf16) from opdata_invalid_ascii_uni_char
{
	test("ASCIIOpData::FromUniString(" testname ")")
	{
		UniString source;
		verify_success(source.SetConstData(utf16));
		verify(source.Length() == uni_strlen(utf16));
		verify_string(source, utf16);
		OpData dest;
		verify_status(OpStatus::ERR_OUT_OF_RANGE, ASCIIOpData::FromUniString(source, dest));
		verify(dest.Length() == op_strlen(ascii));
		verify_string(dest, ascii);
	}
}

table opdata_compare (const char* testname, const char* ascii, const uni_char* utf16, OP_BOOLEAN expected_result)
{
	{ "empty == empty", "", UNI_L(""), OpBoolean::IS_TRUE }
	{ "empty != X", "", UNI_L("X"), OpBoolean::IS_FALSE }
	{ "X != empty", "X", UNI_L(""), OpBoolean::IS_FALSE }
	{ "X != Y", "X", UNI_L("Y"), OpBoolean::IS_FALSE }
	{ "X == X", "X", UNI_L("X"), OpBoolean::IS_TRUE }
	{ "invalid ASCII in both",
			"Non-ASCII: \x80", UNI_L("Non-ASCII: \x80"),
			OpStatus::ERR_OUT_OF_RANGE }
	{ "uni_char with same ASCII part",
			"ASCII: \x7F", UNI_L("ASCII: \x127F"),
			OpBoolean::IS_FALSE }
	{ "char with same ASCII part",
			"ASCII: \x8A", UNI_L("ASCII: \x0A"),
			OpStatus::ERR_OUT_OF_RANGE }
}

foreach (testname, ascii, utf16, expected_result) from opdata_compare
{
	test("ASCIIOpData::CompareWith(" testname ")")
	{
		OpData data;
		verify_success(data.SetConstData(ascii));
		UniString str;
		verify_success(str.SetConstData(utf16));
		verify_status(expected_result, ASCIIOpData::CompareWith(data, str));
	}
}
