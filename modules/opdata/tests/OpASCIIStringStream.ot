/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2012 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "opdata.OpASCIIStringStream";

require OPDATA_STRINGSTREAM;
include "modules/opdata/OpStringStream.h";

test("Default c-tor")
{
	OpASCIIStringStream ss;
	verify_string(ss.Str(), "");
}

test("Parameterized c-tor")
{
	OpASCIIStringStream ss("test input");
	verify_string(ss.Str(), "test input");
}

test("Length() and Size()")
{
	OpASCIIStringStream ss("This is 16 chars");
	verify(ss.Length() == 16);
	verify(ss.Size() == 16 * sizeof(char));
}

test("Parameterized c-tor - NULL argument")
{
	OpASCIIStringStream ss(NULL);
	verify_string(ss.Str(), "");
}

test("Copy c-tor")
{
	OpASCIIStringStream ss("test input");
	OpASCIIStringStream ss_copy(ss);
	verify_string(ss.Str(), "test input"); // Source still has data.
	verify_string(ss_copy.Str(), "test input"); // Destination has same data.
}

test("Copy c-tor - deep copy")
{
	OpASCIIStringStream* ss = OP_NEW(OpASCIIStringStream, ("test input"));
	OpASCIIStringStream* ss_copy = OP_NEW(OpASCIIStringStream, (*ss));
	verify_string(ss->Str(), "test input"); // Source still has data.
	verify_string(ss_copy->Str(), "test input"); // Destination has same data.
	OP_DELETE(ss);
	ss = NULL;
	verify_string(ss_copy->Str(), "test input"); // Destination still has data.
}
finally
{
	OP_DELETE(ss);
	OP_DELETE(ss_copy);
}

test("operator<< (const char* val)")
{
	OpASCIIStringStream ss("test input");
	ss << ", extra data";
	verify_string(ss.Str(), "test input, extra data");
}

test("operator<< (const char* val) with empty initial value")
{
	OpASCIIStringStream ss;
	ss << ", extra data";
	verify_string(ss.Str(), ", extra data");
}

test("operator<< (int val)")
{
	OpASCIIStringStream ss("test input ");
	ss << -54431567;
	verify_string(ss.Str(), "test input -54431567");
}

test("operator<< (double val)")
{
	OpASCIIStringStream ss("test input ");
	ss << -2.12345;
	verify_string(ss.Str(), "test input -2.12345");
}

test("operator<< (double val) - large number ")
{
	OpASCIIStringStream ss("test input ");
	ss << -2.12345e50;
	verify_string(ss.Str(), "test input -2.12345e+50");
}

test("operator<< (unsigned int val)")
{
	OpASCIIStringStream ss("test input ");
	ss << 3000000000U; // Over signed int range for a 32 bit int.
	verify_string(ss.Str(), "test input 3000000000");
}

test("operator<< (bool val)")
{
	OpASCIIStringStream ssTrue;
	ssTrue << true;
	verify_string(ssTrue.Str(), "true");

	OpASCIIStringStream ssFalse;
	ssFalse << false;
	verify_string(ssFalse.Str(), "false");
}

test("Operator chaining int + string")
{
	OpASCIIStringStream ss;
	ss << 5 << " five";
	verify_string(ss.Str(), "5 five");
}

test("Operator chaining bool + string")
{
	OpASCIIStringStream ss;
	ss << true << " true";
	verify_string(ss.Str(), "true true");
}

test("Operator chaining bool + int + string")
{
	OpASCIIStringStream ss;
	ss << true << 5 << " true";
	verify_string(ss.Str(), "true5 true");
}

test("Operator chaining int + string + double")
{
	OpASCIIStringStream ss;
	ss << 5 <<" "<< -2.12345;
	verify_string(ss.Str(), "5 -2.12345");
}

test("Operator chaining int + string + double + bool")
{
	OpASCIIStringStream ss;
	ss << "int = " << 5
	   << ", double = " << -2.12345
	   << ", bool = " << false;
	verify_string(ss.Str(), "int = 5, double = -2.12345, bool = false");
}
