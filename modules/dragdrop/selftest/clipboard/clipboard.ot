/* -*- mode: c++; tab-width: 4; c-basic-offset: 4 -*- */

group "clipboard";
require init;
require USE_OP_CLIPBOARD;
include "modules/dragdrop/clipboard_manager.h";
include "modules/pi/OpClipboard.h";
include "modules/doc/frm_doc.h";
include "modules/doc/html_doc.h";
include "modules/logdoc/htm_elm.h";
include "modules/logdoc/logdoc.h";
include "modules/forms/piforms.h";
include "modules/widgets/OpWidget.h";

language C++;

global
{
	HTML_Element* GetElement(const uni_char* id)
	{
		LogicalDocument* logdoc = state.doc->GetLogicalDocument();
		NamedElementsIterator el_iterator;
		int found = logdoc->SearchNamedElements(el_iterator, NULL, id, TRUE, TRUE);
		if (found)
			if (HTML_Element* named_element = el_iterator.GetNextElement())
				return named_element;

		return NULL;
	}

	class TestClipboardListener : public ClipboardListener
	{
	public:
		TestClipboardListener()
			: string_matches(FALSE)
			, clipboard_string(NULL)
		{}

		BOOL string_matches;
		const uni_char* clipboard_string;
		void OnCopy(OpClipboard* clipboard)
		{
			clipboard->PlaceText(clipboard_string);
		}

		void OnCut(OpClipboard* clipboard)
		{
			clipboard->PlaceText(clipboard_string);
		}

		void OnPaste(OpClipboard* clipboard)
		{
			OpString clipboard_content;
			clipboard->GetText(clipboard_content);
			string_matches = clipboard_content.CStr() != NULL && uni_str_eq(clipboard_content.CStr(), clipboard_string);
		}

		void OnEnd()
		{
		}
	};

	TestClipboardListener test_listener;
}

test("Clipboard fully operational")
{
	test_listener.string_matches = FALSE;
	test_listener.clipboard_string = UNI_L("foobarbaz");
	verify_success(g_clipboard_manager->Copy(&test_listener));
	verify_success(g_clipboard_manager->Paste(&test_listener));
	BOOL is_clipboard_working = test_listener.string_matches;
	test_listener.string_matches = FALSE;
	verify_success(g_clipboard_manager->Cut(&test_listener));
	verify_success(g_clipboard_manager->Paste(&test_listener));
	is_clipboard_working = is_clipboard_working && test_listener.string_matches;

	if (!is_clipboard_working)
	{
		output(
		"\nThese tests depend on platform's clipboard\nand it seems it isn't working.\n"
		"If your project does not implement the clipboard\nbecause it's customers' job to do so\n"
		"disregard this failure. Otherwise take a look into\nplatform's clipboard impelmentation.\n"
		"The rest of the tests will be skipped.\n"
		);
	}

	verify(is_clipboard_working);
}

html {
	//! <!DOCTYPE html>
	//! <input type='text' value='Input text' id='receiver' autofocus onfocus="this.select()"/>
}

test("copy")
require success "Clipboard fully operational";
{
	HTML_Element* elm = GetElement(UNI_L("receiver"));
	verify(elm);
	test_listener.string_matches = FALSE;
	test_listener.clipboard_string = UNI_L("Input text");
	verify_success(g_clipboard_manager->Copy(&test_listener, 0, state.doc, elm));
	verify_success(g_clipboard_manager->Paste(&test_listener));
	verify(test_listener.string_matches);
}

html {
	//!	<!DOCTYPE html>
	//! <input type='text' value='Input text #2' id='receiver' autofocus onfocus="this.select()"/>
}

test("cut")
require success "Clipboard fully operational";
{
	HTML_Element* elm = GetElement(UNI_L("receiver"));
	verify(elm);
	test_listener.string_matches = FALSE;
	test_listener.clipboard_string = UNI_L("Input text #2");
	verify_success(g_clipboard_manager->Cut(&test_listener, 0, state.doc, elm));
	verify_success(g_clipboard_manager->Paste(&test_listener));
	verify(test_listener.string_matches);
}

html {
	//! <!DOCTYPE html>
	//! <input type='text' value='' id='receiver' autofocus/>
}

test("paste")
require success "Clipboard fully operational";
{
	HTML_Element* elm = GetElement(UNI_L("receiver"));
	verify(elm);
	test_listener.clipboard_string = UNI_L("Input text");
	verify_success(g_clipboard_manager->Copy(&test_listener));
	verify_success(g_clipboard_manager->Paste(&test_listener, state.doc, elm));
	FormObject* object = elm->GetFormObject();
	verify(object);
	OpWidget* widget = object->GetWidget();
	verify(widget);
	OpString input_text;
	verify_success(widget->GetText(input_text));
	verify(uni_str_eq(input_text.CStr(), test_listener.clipboard_string));
}

html {
	//! <!DOCTYPE html>
	//! <input type='text' value='Input text #2' id='receiver' autofocus onfocus="this.select()"/>
}

test("double cut, one paste")
require success "Clipboard fully operational";
{
	HTML_Element* elm = GetElement(UNI_L("receiver"));
	verify(elm);
	test_listener.string_matches = FALSE;
	test_listener.clipboard_string = UNI_L("Input text #2");
	verify_success(g_clipboard_manager->Cut(&test_listener, 0, state.doc, elm));
	verify_success(g_clipboard_manager->Cut(&test_listener, 0, state.doc, elm));
	verify_success(g_clipboard_manager->Paste(&test_listener));
	verify(test_listener.string_matches);
}

html {
	//! <!DOCTYPE html>
	//! <input type='text' value='Input text #3' id='receiver' autofocus onfocus="this.select()"/>
}

test("copy/paste when nothing to be copied")
require success "Clipboard fully operational";
{
	HTML_Element* elm = GetElement(UNI_L("receiver"));
	verify(elm);
	test_listener.string_matches = FALSE;
	test_listener.clipboard_string = UNI_L("Input text #3");
	verify_success(g_clipboard_manager->Cut(&test_listener, 0, state.doc, elm));
	verify_success(g_clipboard_manager->Paste(&test_listener));
	verify(test_listener.string_matches);
	verify_success(g_clipboard_manager->Copy(&test_listener, 0, state.doc, elm));
	verify_success(g_clipboard_manager->Paste(&test_listener));
	verify(test_listener.string_matches);
}

test("copy/paste non-ascii")
require success "Clipboard fully operational";
{
	HTML_Element* elm = GetElement(UNI_L("receiver"));
	verify(elm);
	test_listener.string_matches = FALSE;
	test_listener.clipboard_string = UNI_L("\x4ED6\x5011\x7232\x4EC0\x9EBD\x4E0D\x8AAA\x4E2D\x6587");
	verify_success(g_clipboard_manager->Copy(&test_listener));
	verify_success(g_clipboard_manager->Paste(&test_listener));
	verify(test_listener.string_matches);
}

html {
	//! <!DOCTYPE html>
	//! <input type='password' value='secret password' id='receiver' autofocus onfocus="this.selectAll()"/>
}

test("copy from password input")
require success "Clipboard fully operational";
{
	HTML_Element* elm = GetElement(UNI_L("receiver"));
	verify(elm);
	test_listener.string_matches = FALSE;
	test_listener.clipboard_string = UNI_L("secret password");
	verify_success(g_clipboard_manager->Copy(&test_listener, 0, state.doc, elm));
	verify_success(g_clipboard_manager->Paste(&test_listener));
	verify(!test_listener.string_matches);
}

html {
	//! <!DOCTYPE html>
	//! <input type='file' id='receiver' />
}

test("copy from file input")
require success "Clipboard fully operational";
{
	const uni_char* test_file_path = UNI_L("C:\\my_private_file.txt");
	HTML_Element* elm = GetElement(UNI_L("receiver"));
	verify(elm);
	FormValue* form_value = elm->GetFormValue();
	verify(form_value);
	form_value->SetValueFromText(elm, test_file_path);

	state.doc->GetHtmlDocument()->FocusElement(elm, HTML_Document::FOCUS_ORIGIN_DOM, FALSE);

	test_listener.string_matches = FALSE;
	test_listener.clipboard_string = test_file_path;
	verify_success(g_clipboard_manager->Copy(&test_listener, 0, state.doc, elm));
	verify_success(g_clipboard_manager->Paste(&test_listener));
	verify(!test_listener.string_matches);
}

html {
	//! <!DOCTYPE html>
	//! <textarea id='receiver'>Textarea text</textarea>
	//! <script>var ta = document.getElementById('receiver'); ta.focus(); ta.select();</script>
}

test("copy from textarea")
require success "Clipboard fully operational";
{
	HTML_Element* elm = GetElement(UNI_L("receiver"));
	verify(elm);
	test_listener.string_matches = FALSE;
	test_listener.clipboard_string = UNI_L("Textarea text");
	verify_success(g_clipboard_manager->Copy(&test_listener, 0, state.doc, elm));
	verify_success(g_clipboard_manager->Paste(&test_listener));
	verify(test_listener.string_matches);
}


