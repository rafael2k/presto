/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "util.ophashtable";

include "modules/util/OpHashTable.h";
include "modules/util/simset.h";

global
{
#define ADD_TABLE    1
#define GET_TABLE    2
#define REMOVE_TABLE 3

#define NUMBER_OF_STRINGS 50

	class StringHashFunctions : public OpHashFunctions
	{
		UINT32 Hash(const void* key)
		{
			UINT32 retval = 0;
			const char* keyptr = (const char*)key;
			while (*keyptr)
			{
				retval += (UINT32)*keyptr;
				keyptr++;
			}
			return retval;
		}

		BOOL KeysAreEqual(const void* key1, const void* key2)
		{
			return (op_strcmp((const char*)key1, (const char*)key2) == 0);
		}
	};

	class KeyLink : public Link
	{
	public:
		KeyLink(void* key, void* data) : key(key), data(data) {}
		void* key;
		void* data;
	};

	class StringList
	{
	public:
		StringList(OpHashFunctions* hashFunctions = NULL,
			BOOL useChainedHashing = TRUE) : hash_functions(hashFunctions)
		{
		}

		~StringList()
		{
			string_list.Clear();
		}

		OP_STATUS Add(void* key, void* data)
		{
			void* res = NULL;
			OP_STATUS ret_val = GetData(key, &res);
			if (ret_val == OpStatus::OK)
			{
				return OpStatus::ERR;
			}
			KeyLink* link = OP_NEW(KeyLink, (key, data));
			link->Into(&string_list);
			return OpStatus::OK;
		}

		OP_STATUS GetData(void* key, void** data)
		{
			return GetOrRemoveData(key, data, FALSE);
		}

		OP_STATUS Remove(void* key, void** data)
		{
			return GetOrRemoveData(key, data, TRUE);
		}

	private:
		
		OP_STATUS GetOrRemoveData(void* key, void** data, BOOL remove)
		{
			for (KeyLink* link = (KeyLink*)string_list.First(); link; link = (KeyLink*)link->Suc())
			{
				if (hash_functions)
				{
					if (hash_functions->KeysAreEqual(key, link->key))
					{
						GetOrRemoveInternal(key, data, remove, link);
						return OpStatus::OK;
					}
				}
				else
				{
					if (key == link->key)
					{
						GetOrRemoveInternal(key, data, remove, link);
						return OpStatus::OK;
					}
				}
			}
			return OpStatus::ERR;
		}

		void GetOrRemoveInternal(void* key, void** data, BOOL remove, KeyLink* link)
		{
			*data = link->data;
			if (remove)
			{
				link->Out();
				OP_DELETE(link);
			}
		}

		OpHashFunctions* hash_functions;
		Head string_list;

	};

	OpHashTable* hash_table_chained;
	OpHashTable* hash_table_flat;
	OpHashTable* hash_table_chained_string;
	OpHashTable* hash_table_flat_string;

	StringList* string_table_chained;
	StringList* string_table_flat;
	StringList* string_table_chained_string;
	StringList* string_table_flat_string;

	StringHashFunctions* string_hash_functions;

	char** strings_array;
}

table Table1(int,int,int)  
{
	{ ADD_TABLE, 0, 1 },
	{ ADD_TABLE, 1, 2 },
	{ GET_TABLE, 1, 2 },
	{ GET_TABLE, 2, 0 },
	{ REMOVE_TABLE, 1, 2 },
	{ GET_TABLE, 1, 0 },
	{ ADD_TABLE, 1, 5 },
	{ GET_TABLE, 1, 5 },
	{ ADD_TABLE, 3, 2 },
	{ ADD_TABLE, 4, 1 },
	{ ADD_TABLE, 5, 10 },
	{ ADD_TABLE, 6, 12 },
	{ ADD_TABLE, 7, 13 },
	{ ADD_TABLE, 8, 14 },
	{ ADD_TABLE, 9, 15 },
	{ ADD_TABLE, 10, 17 },
	{ ADD_TABLE, 11, 18 },
	{ ADD_TABLE, 12, 20 },
	{ ADD_TABLE, 13, 21 },
	{ ADD_TABLE, 14, 22 },
	{ ADD_TABLE, 15, 23 },
	{ ADD_TABLE, 16, 25 },
	{ ADD_TABLE, 17, 27 },
	{ ADD_TABLE, 18, 28 },
	{ ADD_TABLE, 19, 29 },
	{ ADD_TABLE, 20, 30 },
	{ ADD_TABLE, 21, 31 },
	{ ADD_TABLE, 22, 34 },
	{ ADD_TABLE, 23, 36 },
	{ ADD_TABLE, 24, 37 },
	{ GET_TABLE, 24, 37 },
	{ GET_TABLE, 23, 36 },
	{ GET_TABLE, 22, 34 },
	{ GET_TABLE, 21, 31 },
	{ GET_TABLE, 20, 30 },
	{ GET_TABLE, 19, 29 },
	{ GET_TABLE, 18, 28 },
	{ GET_TABLE, 17, 27 },
	{ GET_TABLE, 16, 25 },
	{ GET_TABLE, 15, 23 },
	{ GET_TABLE, 14, 22 },
	{ GET_TABLE, 13, 21 },
	{ GET_TABLE, 12, 20 },
	{ GET_TABLE, 11, 18 },
	{ GET_TABLE, 10, 17 },
	{ GET_TABLE, 9, 15 },
	{ GET_TABLE, 8, 14 },
	{ GET_TABLE, 7, 13 },
	{ GET_TABLE, 6, 12 },
	{ GET_TABLE, 5, 10 },
	{ GET_TABLE, 4, 1 },
	{ GET_TABLE, 3, 2 },
	{ GET_TABLE, 2, 0 },
	{ GET_TABLE, 1, 5 },
	// Remove some tables.
	{ REMOVE_TABLE, 16, 25 },
	{ REMOVE_TABLE, 15, 23 },
	{ REMOVE_TABLE, 14, 22 },
	{ REMOVE_TABLE, 13, 21 },
	{ REMOVE_TABLE, 12, 20 },
	{ REMOVE_TABLE, 11, 18 },
	{ REMOVE_TABLE, 10, 17 },
	{ REMOVE_TABLE, 9, 15 },
	{ REMOVE_TABLE, 8, 14 },
	{ REMOVE_TABLE, 7, 13 },
	{ REMOVE_TABLE, 6, 12 },
	{ REMOVE_TABLE, 5, 10 },
	{ REMOVE_TABLE, 4, 1 },
	{ REMOVE_TABLE, 3, 2 },
	{ REMOVE_TABLE, 1, 5 },
	// See if the right tables are still there.
	{ GET_TABLE, 24, 37 },
	{ GET_TABLE, 23, 36 },
	{ GET_TABLE, 22, 34 },
	{ GET_TABLE, 21, 31 },
	{ GET_TABLE, 20, 30 },
	{ GET_TABLE, 19, 29 },
	{ GET_TABLE, 18, 28 },
	{ GET_TABLE, 17, 27 },
	{ GET_TABLE, 16, 0 },
	{ GET_TABLE, 15, 0 },
	{ GET_TABLE, 14, 0 },
	{ GET_TABLE, 13, 0 },
	{ GET_TABLE, 12, 0 },
	{ GET_TABLE, 11, 0 },
	{ GET_TABLE, 10, 0 },
	{ GET_TABLE, 9, 0 },
	{ GET_TABLE, 8, 0 },
	{ GET_TABLE, 7, 0 },
	{ GET_TABLE, 6, 0 },
	{ GET_TABLE, 5, 0 },
	{ GET_TABLE, 4, 0 },
	{ GET_TABLE, 3, 0 },
	{ GET_TABLE, 2, 0 },
	{ GET_TABLE, 1, 0 },
	// Add all 50 values.
	{ ADD_TABLE, 1, 51 },
	{ ADD_TABLE, 2, 52 },
	{ ADD_TABLE, 3, 53 },
	{ ADD_TABLE, 4, 54 },
	{ ADD_TABLE, 5, 55 },
	{ ADD_TABLE, 6, 56 },
	{ ADD_TABLE, 7, 57 },
	{ ADD_TABLE, 8, 58 },
	{ ADD_TABLE, 9, 59 },
	{ ADD_TABLE, 10, 60 },
	{ ADD_TABLE, 11, 61 },
	{ ADD_TABLE, 12, 62 },
	{ ADD_TABLE, 13, 63 },
	{ ADD_TABLE, 14, 64 },
	{ ADD_TABLE, 15, 65 },
	{ ADD_TABLE, 16, 66 },
	{ ADD_TABLE, 25, 75 },
	{ ADD_TABLE, 26, 76 },
	{ ADD_TABLE, 27, 77 },
	{ ADD_TABLE, 28, 78 },
	{ ADD_TABLE, 29, 79 },
	{ ADD_TABLE, 30, 80 },
	{ ADD_TABLE, 31, 81 },
	{ ADD_TABLE, 32, 82 },
	{ ADD_TABLE, 33, 83 },
	{ ADD_TABLE, 34, 84 },
	{ ADD_TABLE, 35, 85 },
	{ ADD_TABLE, 36, 86 },
	{ ADD_TABLE, 37, 87 },
	{ ADD_TABLE, 38, 88 },
	{ ADD_TABLE, 39, 89 },
	{ ADD_TABLE, 40, 90 },
	{ ADD_TABLE, 41, 91 },
	{ ADD_TABLE, 42, 92 },
	{ ADD_TABLE, 43, 93 },
	{ ADD_TABLE, 44, 94 },
	{ ADD_TABLE, 45, 95 },
	{ ADD_TABLE, 46, 96 },
	{ ADD_TABLE, 47, 97 },
	{ ADD_TABLE, 48, 98 },
	{ ADD_TABLE, 49, 99 },
	// Test if it is the right content.
	{ GET_TABLE, 0, 1 },
	{ GET_TABLE, 1, 51 },
	{ GET_TABLE, 2, 52 },
	{ GET_TABLE, 3, 53 },
	{ GET_TABLE, 4, 54 },
	{ GET_TABLE, 5, 55 },
	{ GET_TABLE, 6, 56 },
	{ GET_TABLE, 7, 57 },
	{ GET_TABLE, 8, 58 },
	{ GET_TABLE, 9, 59 },
	{ GET_TABLE, 10, 60 },
	{ GET_TABLE, 11, 61 },
	{ GET_TABLE, 12, 62 },
	{ GET_TABLE, 13, 63 },
	{ GET_TABLE, 14, 64 },
	{ GET_TABLE, 15, 65 },
	{ GET_TABLE, 16, 66 },
	{ GET_TABLE, 17, 27 },
	{ GET_TABLE, 18, 28 },
	{ GET_TABLE, 19, 29 },
	{ GET_TABLE, 20, 30 },
	{ GET_TABLE, 21, 31 },
	{ GET_TABLE, 22, 34 },
	{ GET_TABLE, 23, 36 },
	{ GET_TABLE, 24, 37 },
	{ GET_TABLE, 25, 75 },
	{ GET_TABLE, 26, 76 },
	{ GET_TABLE, 27, 77 },
	{ GET_TABLE, 28, 78 },
	{ GET_TABLE, 29, 79 },
	{ GET_TABLE, 30, 80 },
	{ GET_TABLE, 31, 81 },
	{ GET_TABLE, 32, 82 },
	{ GET_TABLE, 33, 83 },
	{ GET_TABLE, 34, 84 },
	{ GET_TABLE, 35, 85 },
	{ GET_TABLE, 36, 86 },
	{ GET_TABLE, 37, 87 },
	{ GET_TABLE, 38, 88 },
	{ GET_TABLE, 39, 89 },
	{ GET_TABLE, 40, 90 },
	{ GET_TABLE, 41, 91 },
	{ GET_TABLE, 42, 92 },
	{ GET_TABLE, 43, 93 },
	{ GET_TABLE, 44, 94 },
	{ GET_TABLE, 45, 95 },
	{ GET_TABLE, 46, 96 },
	{ GET_TABLE, 47, 97 },
	{ GET_TABLE, 48, 98 },
	{ GET_TABLE, 49, 99 },
	// Remove most of the tests
	{ REMOVE_TABLE, 0, 1 },
	{ REMOVE_TABLE, 2, 52 },
	{ REMOVE_TABLE, 3, 53 },
	{ REMOVE_TABLE, 4, 54 },
	{ REMOVE_TABLE, 5, 55 },
	{ REMOVE_TABLE, 6, 56 },
	{ REMOVE_TABLE, 7, 57 },
	{ REMOVE_TABLE, 8, 58 },
	{ REMOVE_TABLE, 9, 59 },
	{ REMOVE_TABLE, 10, 60 },
	{ REMOVE_TABLE, 12, 62 },
	{ REMOVE_TABLE, 13, 63 },
	{ REMOVE_TABLE, 14, 64 },
	{ REMOVE_TABLE, 15, 65 },
	{ REMOVE_TABLE, 16, 66 },
	{ REMOVE_TABLE, 17, 27 },
	{ REMOVE_TABLE, 18, 28 },
	{ REMOVE_TABLE, 19, 29 },
	{ REMOVE_TABLE, 20, 30 },
	{ REMOVE_TABLE, 22, 34 },
	{ REMOVE_TABLE, 23, 36 },
	{ REMOVE_TABLE, 24, 37 },
	{ REMOVE_TABLE, 25, 75 },
	{ REMOVE_TABLE, 26, 76 },
	{ REMOVE_TABLE, 27, 77 },
	{ REMOVE_TABLE, 28, 78 },
	{ REMOVE_TABLE, 29, 79 },
	{ REMOVE_TABLE, 30, 80 },
	{ REMOVE_TABLE, 32, 82 },
	{ REMOVE_TABLE, 33, 83 },
	{ REMOVE_TABLE, 34, 84 },
	{ REMOVE_TABLE, 35, 85 },
	{ REMOVE_TABLE, 36, 86 },
	{ REMOVE_TABLE, 37, 87 },
	{ REMOVE_TABLE, 38, 88 },
	{ REMOVE_TABLE, 39, 89 },
	{ REMOVE_TABLE, 40, 90 },
	{ REMOVE_TABLE, 42, 92 },
	{ REMOVE_TABLE, 43, 93 },
	{ REMOVE_TABLE, 44, 94 },
	{ REMOVE_TABLE, 45, 95 },
	{ REMOVE_TABLE, 46, 96 },
	{ REMOVE_TABLE, 47, 97 },
	{ REMOVE_TABLE, 48, 98 },
	{ REMOVE_TABLE, 49, 99 },
	// Test if it is the right content.
	{ GET_TABLE, 0, 0 },
	{ GET_TABLE, 1, 51 },
	{ GET_TABLE, 2, 0 },
	{ GET_TABLE, 3, 0 },
	{ GET_TABLE, 4, 0 },
	{ GET_TABLE, 5, 0 },
	{ GET_TABLE, 6, 0 },
	{ GET_TABLE, 7, 0 },
	{ GET_TABLE, 8, 0 },
	{ GET_TABLE, 9, 0 },
	{ GET_TABLE, 10, 0 },
	{ GET_TABLE, 11, 61 },
	{ GET_TABLE, 12, 0 },
	{ GET_TABLE, 13, 0 },
	{ GET_TABLE, 14, 0 },
	{ GET_TABLE, 15, 0 },
	{ GET_TABLE, 16, 0 },
	{ GET_TABLE, 17, 0 },
	{ GET_TABLE, 18, 0 },
	{ GET_TABLE, 19, 0 },
	{ GET_TABLE, 20, 0 },
	{ GET_TABLE, 21, 31 },
	{ GET_TABLE, 22, 0 },
	{ GET_TABLE, 23, 0 },
	{ GET_TABLE, 24, 0 },
	{ GET_TABLE, 25, 0 },
	{ GET_TABLE, 26, 0 },
	{ GET_TABLE, 27, 0 },
	{ GET_TABLE, 28, 0 },
	{ GET_TABLE, 29, 0 },
	{ GET_TABLE, 30, 0 },
	{ GET_TABLE, 31, 81 },
	{ GET_TABLE, 32, 0 },
	{ GET_TABLE, 33, 0 },
	{ GET_TABLE, 34, 0 },
	{ GET_TABLE, 35, 0 },
	{ GET_TABLE, 36, 0 },
	{ GET_TABLE, 37, 0 },
	{ GET_TABLE, 38, 0 },
	{ GET_TABLE, 39, 0 },
	{ GET_TABLE, 40, 0 },
	{ GET_TABLE, 41, 91 },
	{ GET_TABLE, 42, 0 },
	{ GET_TABLE, 43, 0 },
	{ GET_TABLE, 44, 0 },
	{ GET_TABLE, 45, 0 },
	{ GET_TABLE, 46, 0 },
	{ GET_TABLE, 47, 0 },
	{ GET_TABLE, 48, 0 },
	{ GET_TABLE, 49, 0 },
};

foreach ( hash_table, string_table ) from
		{
			{ hash_table_chained:"chained hash table", string_table_chained },
			{ hash_table_flat:"flat hash table", string_table_flat },
			{ hash_table_chained_string:"chained hash table with strings", string_table_chained_string },
			{ hash_table_flat_string:"flat hash table with strings", string_table_flat_string }
		}
{
	test("Compare with StringList in $(hash_table)")
	{
		iterate(command, stringpos, val) from Table1
		{
			switch (command)
			{
			case ADD_TABLE:
			{
				OP_STATUS hash_ret_val = hash_table->Add((void*)strings_array[stringpos], &val);
				OP_STATUS string_ret_val = string_table->Add((void*)strings_array[stringpos], &val);
				verify(hash_ret_val == string_ret_val);
				break;
			}

			case GET_TABLE:
			{
				void* hash_res = NULL;
				void* string_res = NULL;
				OP_STATUS hash_ret_val = hash_table->GetData((void*)strings_array[stringpos], &hash_res);
				OP_STATUS string_ret_val = string_table->GetData((void*)strings_array[stringpos], &string_res);
				verify(hash_ret_val == string_ret_val);
				if (val == 0)
					verify(hash_ret_val == OpStatus::ERR);
				else
					verify(*(reinterpret_cast<int*>(hash_res)) == val);
				if (hash_ret_val == OpStatus::OK)
					verify(*(reinterpret_cast<int*>(hash_res)) == *(reinterpret_cast<int*>(string_res)));
				break;
			}

			case REMOVE_TABLE:
			{
				void* hash_res = NULL;
				void* string_res = NULL;
				OP_STATUS hash_ret_val = hash_table->Remove((void*)strings_array[stringpos], &hash_res);
				OP_STATUS string_ret_val = string_table->Remove((void*)strings_array[stringpos], &string_res);
				verify(hash_ret_val == string_ret_val);
				if (val == 0)
					verify(hash_ret_val == OpStatus::ERR);
				else
					verify(*(reinterpret_cast<int*>(hash_res)) == val);
				if (hash_ret_val == OpStatus::OK)
					verify(*(reinterpret_cast<int*>(hash_res)) == *(reinterpret_cast<int*>(string_res)));
				break;
			}
			}
		}
	}
}

test("Copy to OpHashTable and OpVector")
{
	OpHashTable dest_t;
	verify_success(hash_table_chained_string->CopyAllToHashTable(*(reinterpret_cast<OpHashTable*>(&dest_t))));
	verify(dest_t.GetCount() == hash_table_chained_string->GetCount());

	OpVector<int> dest_v;
	verify_success(hash_table_chained_string->CopyAllToVector(*(reinterpret_cast<OpGenericVector*>(&dest_v))));
	verify(static_cast<INT32>(dest_v.GetCount()) == hash_table_chained_string->GetCount());

	/* Verify that the copied content is correct and remove the entries of dest_t successively. */
	unsigned int i = 0;
	OpStackAutoPtr<OpHashIterator> iter(hash_table_chained_string->GetIterator());
	OpStackAutoPtr<OpHashIterator> iter_dest(dest_t.GetIterator());
	verify(iter.get());
	verify(iter_dest.get());
	verify_success(iter->First());
	verify_success(iter_dest->First());
	verify(*(reinterpret_cast<int*>(iter->GetData())) == *(reinterpret_cast<int*>(iter_dest->GetData())));
	verify(*(dest_v.Get(i++)) == *(reinterpret_cast<int*>(iter_dest->GetData())));
	verify_success(dest_t.Remove((void*)(iter_dest->GetKey()), reinterpret_cast<void**>(iter_dest->GetData())));
	while (OpStatus::IsSuccess(iter->Next()) && OpStatus::IsSuccess(iter_dest->Next()))
	{
		verify(*(reinterpret_cast<int*>(iter->GetData())) == *(reinterpret_cast<int*>(iter_dest->GetData())));
		verify(*(dest_v.Get(i++)) == *(reinterpret_cast<int*>(iter_dest->GetData())));
		verify_success(dest_t.Remove((void*)(iter_dest->GetKey()), reinterpret_cast<void**>(iter_dest->GetData())));
	}

	/* Verify that all the content of dest_v has been compared. */
	verify(dest_v.GetCount() == i);
	/* Verify that all the content of dest_t has been removed. */
	verify(dest_t.GetCount() == 0);
}

subtest inner_traversal(OpHashTable* ht)
{
	ht->Add((void*)1, (void*)1);
	ht->Add((void*)2, (void*)2);

	OpHashIterator* iterator = ht->GetIterator();
	OP_STATUS ret_val = iterator->First();
	verify(ret_val == OpStatus::OK);

	const void* first_key = iterator->GetKey();
	void* data = iterator->GetData();
	verify((first_key == (void*)1 && data == (void*)1) ||
		   (first_key == (void*)2 && data == (void*)2));

	ret_val = iterator->Next();
	verify(ret_val == OpStatus::OK);

	const void* next_key = iterator->GetKey();
	data = iterator->GetData();

	verify(first_key != next_key);
	verify(next_key == data);

	ret_val = iterator->Next();
	verify(ret_val != OpStatus::OK);

	OP_DELETE(iterator);
}

test("Testing content traversal")
{
	OpHashTable* ht_chained = OP_NEW(OpHashTable, ());
	verify(inner_traversal(ht_chained));
	OP_DELETE(ht_chained);
	OpHashTable* ht_flat = OP_NEW(OpHashTable, (NULL, FALSE));
	verify(inner_traversal(ht_flat));
	OP_DELETE(ht_flat);
}

test("Testing comparisons of strings")
{
	OpHashTable* t = OP_NEW(OpHashTable, (string_hash_functions));
	char* str1 = OP_NEWA(char, 4);
	char* str2 = OP_NEWA(char, 4);
	op_strcpy(str1, "Hej");
	op_strcpy(str2, "Hej");
	verify(t->Add(str1, (void*)1) == OpStatus::OK);
	verify(t->Add(str2, (void*)2) == OpStatus::ERR);
	OP_DELETEA(str1);
	OP_DELETEA(str2);
	OP_DELETE(t);
}

subtest VerifyCombinations(UINT32 hempty_cs, UINT32 hOpera_cs, UINT32 hOPERA_cs,
		UINT32 hempty_ci, UINT32 hOpera_ci, UINT32 hOPERA_ci,
		UINT32 hempty_cs_0, UINT32 hOpera_cs_0, UINT32 hOPERA_cs_0,
		UINT32 hempty_cs_5, UINT32 hOpera_cs_5, UINT32 hOPERA_cs_5,
		UINT32 hempty_ci_0, UINT32 hOpera_ci_0, UINT32 hOPERA_ci_0,
		UINT32 hempty_ci_5, UINT32 hOpera_ci_5, UINT32 hOPERA_ci_5)
{
	/* Many of the input hash table values are equal.
	   There are 5 groups of equal hash values.
	   Each group value will be verified as equal.
	   After that, the group values will be verified as different.
	   CORE-44906 is reported for the current implementation, i.e. various
	   length-limited hashes, when applied to empty strings, are yielding
	   distinct answers. Hence the following differences are not tested:
	   - E0 and Es
	   - E0 and Ei
	   - Es and Ei

	E0: hempty_cs, hempty_ci, hempty_cs_0, hempty_ci_0
	    hOpera_cs_0, hOpera_ci_0, hOPERA_cs_0, hOPERA_ci_0
	Es: hempty_cs_5
	Ei: hempty_ci_5
	Oc: hOpera_cs, hOpera_cs_5
	O5: hOpera_ci, hOpera_ci_5, hOPERA_cs, hOPERA_ci, hOPERA_cs_5, hOPERA_ci_5
	*/

	/* Verify the equality of E0 members. */
	verify(hempty_cs == hempty_ci);
	verify(hempty_cs == hempty_cs_0);
	verify(hempty_cs == hempty_ci_0);
	verify(hempty_cs == hOpera_cs_0);
	verify(hempty_cs == hOpera_ci_0);
	verify(hempty_cs == hOPERA_cs_0);
	verify(hempty_cs == hOPERA_ci_0);

	/* Verify the equality of Oc members. */
	verify(hOpera_cs == hOpera_cs_5);

	/* Verify the equality of O5 members. */
	verify(hOpera_ci == hOpera_ci_5);
	verify(hOpera_ci == hOPERA_cs);
	verify(hOpera_ci == hOPERA_ci);
	verify(hOpera_ci == hOPERA_cs_5);
	verify(hOpera_ci == hOPERA_ci_5);

	/* Verify that E0 differs from Oc. */
	verify(hempty_cs != hOpera_cs);

	/* Verify that E0 differs from O5. */
	verify(hempty_cs != hOpera_ci);

	/* Verify that Es differs from Oc. */
	verify(hempty_cs_5 != hOpera_cs);

	/* Verify that Es differs from O5. */
	verify(hempty_cs_5 != hOpera_ci);

	/* Verify that Ei differs from Oc. */
	verify(hempty_ci_5 != hOpera_cs);

	/* Verify that Ei differs from O5. */
	verify(hempty_ci_5 != hOpera_ci);

	/* Verify that Oc differs from O5. */
	verify(hOpera_cs != hOpera_ci);
}

test("OpGenericString8HashTable::HashString")
{
	const char* empty = "";
	const char* Opera = "Opera";
	const char* OPERA = "OPERA";

	/* With case sensitive input parameter. */

	UINT32 hempty_cs = OpGenericString8HashTable::HashString(empty, TRUE);
	UINT32 hOpera_cs = OpGenericString8HashTable::HashString(Opera, TRUE);
	UINT32 hOPERA_cs = OpGenericString8HashTable::HashString(OPERA, TRUE);

	/* With case insensitive input parameter. */

	UINT32 hempty_ci = OpGenericString8HashTable::HashString(empty, FALSE);
	UINT32 hOPERA_ci = OpGenericString8HashTable::HashString(OPERA, FALSE);
	UINT32 hOpera_ci = OpGenericString8HashTable::HashString(Opera, FALSE);

	/* With case sensitive input parameter and added strlen parameter. */

	UINT32 hempty_cs_0 = OpGenericString8HashTable::HashString(empty, 0, TRUE);
	UINT32 hOpera_cs_0 = OpGenericString8HashTable::HashString(Opera, 0, TRUE);
	UINT32 hOPERA_cs_0 = OpGenericString8HashTable::HashString(OPERA, 0, TRUE);
	UINT32 hempty_cs_5 = OpGenericString8HashTable::HashString(empty, 5, TRUE);
	UINT32 hOpera_cs_5 = OpGenericString8HashTable::HashString(Opera, 5, TRUE);
	UINT32 hOPERA_cs_5 = OpGenericString8HashTable::HashString(OPERA, 5, TRUE);

	/* With case insensitive input parameter and added strlen parameter. */

	UINT32 hempty_ci_0 = OpGenericString8HashTable::HashString(empty, 0, FALSE);
	UINT32 hOpera_ci_0 = OpGenericString8HashTable::HashString(Opera, 0, FALSE);
	UINT32 hOPERA_ci_0 = OpGenericString8HashTable::HashString(OPERA, 0, FALSE);
	UINT32 hempty_ci_5 = OpGenericString8HashTable::HashString(empty, 5, FALSE);
	UINT32 hOpera_ci_5 = OpGenericString8HashTable::HashString(Opera, 5, FALSE);
	UINT32 hOPERA_ci_5 = OpGenericString8HashTable::HashString(OPERA, 5, FALSE);

	VerifyCombinations(hempty_cs, hOpera_cs, hOPERA_cs,
		hempty_ci, hOpera_ci, hOPERA_ci,
		hempty_cs_0, hOpera_cs_0, hOPERA_cs_0,
		hempty_cs_5, hOpera_cs_5, hOPERA_cs_5,
		hempty_ci_0, hOpera_ci_0, hOPERA_ci_0,
		hempty_ci_5, hOpera_ci_5, hOPERA_ci_5);
}

test("OpGenericStringHashTable::HashString")
{
	const uni_char* empty = UNI_L("");
	const uni_char* Opera = UNI_L("Opera");
	const uni_char* OPERA = UNI_L("OPERA");

	/* With case sensitive input parameter. */

	UINT32 hempty_cs = OpGenericStringHashTable::HashString(empty, TRUE);
	UINT32 hOpera_cs = OpGenericStringHashTable::HashString(Opera, TRUE);
	UINT32 hOPERA_cs = OpGenericStringHashTable::HashString(OPERA, TRUE);

	/* With case insensitive input parameter. */

	UINT32 hempty_ci = OpGenericStringHashTable::HashString(empty, FALSE);
	UINT32 hOPERA_ci = OpGenericStringHashTable::HashString(OPERA, FALSE);
	UINT32 hOpera_ci = OpGenericStringHashTable::HashString(Opera, FALSE);

	/* With case sensitive input parameter and added strlen parameter. */

	UINT32 hempty_cs_0 = OpGenericStringHashTable::HashString(empty, 0, TRUE);
	UINT32 hOpera_cs_0 = OpGenericStringHashTable::HashString(Opera, 0, TRUE);
	UINT32 hOPERA_cs_0 = OpGenericStringHashTable::HashString(OPERA, 0, TRUE);
	UINT32 hempty_cs_5 = OpGenericStringHashTable::HashString(empty, 5, TRUE);
	UINT32 hOpera_cs_5 = OpGenericStringHashTable::HashString(Opera, 5, TRUE);
	UINT32 hOPERA_cs_5 = OpGenericStringHashTable::HashString(OPERA, 5, TRUE);

	/* With case insensitive input parameter and added strlen parameter. */

	UINT32 hempty_ci_0 = OpGenericStringHashTable::HashString(empty, 0, FALSE);
	UINT32 hOpera_ci_0 = OpGenericStringHashTable::HashString(Opera, 0, FALSE);
	UINT32 hOPERA_ci_0 = OpGenericStringHashTable::HashString(OPERA, 0, FALSE);
	UINT32 hempty_ci_5 = OpGenericStringHashTable::HashString(empty, 5, FALSE);
	UINT32 hOpera_ci_5 = OpGenericStringHashTable::HashString(Opera, 5, FALSE);
	UINT32 hOPERA_ci_5 = OpGenericStringHashTable::HashString(OPERA, 5, FALSE);

	VerifyCombinations(hempty_cs, hOpera_cs, hOPERA_cs,
		hempty_ci, hOpera_ci, hOPERA_ci,
		hempty_cs_0, hOpera_cs_0, hOPERA_cs_0,
		hempty_cs_5, hOpera_cs_5, hOPERA_cs_5,
		hempty_ci_0, hOpera_ci_0, hOPERA_ci_0,
		hempty_ci_5, hOpera_ci_5, hOPERA_ci_5);
}

setup
{
	string_hash_functions = OP_NEW(StringHashFunctions, ());

	hash_table_chained = OP_NEW(OpHashTable, ());
	hash_table_flat = OP_NEW(OpHashTable, (NULL, FALSE));
	hash_table_chained_string = OP_NEW(OpHashTable, (string_hash_functions));
	hash_table_flat_string = OP_NEW(OpHashTable, (string_hash_functions));

	string_table_chained = OP_NEW(StringList, ());
	string_table_flat = OP_NEW(StringList, (NULL, FALSE));
	string_table_chained_string = OP_NEW(StringList, (string_hash_functions));
	string_table_flat_string = OP_NEW(StringList, (string_hash_functions));

	strings_array = OP_NEWA(char*, NUMBER_OF_STRINGS);
	for (int i = 0; i < NUMBER_OF_STRINGS; i++)
	{
		char* thestring = OP_NEWA(char, 20);
		op_sprintf(thestring, "String%d", i);
		strings_array[i] = thestring;
	}
}

exit
{
	OP_DELETE(string_hash_functions);

	OP_DELETE(hash_table_flat);
	OP_DELETE(hash_table_chained_string);
	OP_DELETE(hash_table_flat_string);
	OP_DELETE(hash_table_chained);

	OP_DELETE(string_table_chained);
	OP_DELETE(string_table_flat);
	OP_DELETE(string_table_chained_string);
	OP_DELETE(string_table_flat_string);

	for (int i = 0; i < NUMBER_OF_STRINGS; i++)
	{
		OP_DELETEA(strings_array[i]);
		strings_array[i] = NULL;
	}

	OP_DELETEA(strings_array);
}
