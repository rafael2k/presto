# Hey, emacs, please use -*- tab-width: 4; fill-column: 80; -*- thanks.
# Hey, developers - please add new entries in *alphabetic order*.

API_UTIL_ADVANCED_OPINT32VECTOR			markus
	Enables (in adt/opvector.h) an extended API to OpINT32Vector which
	allows Sort(), Search(), Add(), Subtract() and Intersect().

	Defines: ADVANCED_OPINT32VECTOR

API_UTIL_ADVANCED_ROUND					markus
	Exports (from gen_math.h) the function:

	double Round(double num, int nDigitsAfterComma, ROUND_KIND roundKind);

	Defines: UTIL_ADVANCED_ROUND

API_UTIL_ASYNC_FILEMAN					adame
	Exports (from opasyncfileman.h) the class OpAsyncFileMan.

	Defines: UTIL_HAVE_ASYNC_FILEMAN

API_UTIL_ASYNC_FILE_OP					johanh
	OpFile supports asynchronous file operations.
	OpFileListener is available.

	Defines: UTIL_ASYNC_FILE_OP

API_UTIL_CHECKED_STRFTIME				adame
	Exports (from datefun.h) the function CheckedStrftime which checks time
	and date values before calling op_strftime.

	Defines: UTIL_CHECKED_STRFTIME

API_UTIL_CHECK_KEYWORD_INDEX			eddy
	Exports (from str.h) functions used for searching for a string in a list
	of keywords, case-insensitively:

	int CheckKeywordsIndex(const char *string, const KeywordIndex *keys, int count);
	int CheckKeywordsIndex(const char *string, int len, const KeywordIndex *keys, int count);
	int CheckStartsWithKeywordIndex(const char *string, const KeywordIndex *keys, int count);

	Defines: UTIL_CHECK_KEYWORD_INDEX

API_UTIL_CHECK_KEYWORD_INDEX_CASE		peter

	Exports (from str.h) function used for searching for a string in a list
	of keywords, case-sensitively:

	int CheckStartsWithKeywordIndexCase(const char *string, const KeywordIndex *keys, int count, int &offset);

	Defines: UTIL_CHECK_KEYWORD_CASE

API_UTIL_CREATE_UNIQUE_FILENAME			markus
	Exports (from filefun.h) the function:

	OP_STATUS CreateUniqueFilename(OpString& filename);

	Defines: CREATE_UNIQUE_FILENAME

API_UTIL_CUSTOM_FOLDERS					adamm
	Exports (from opfile/opfolder.h) the OPFILE_x_CUSTOM_FOLDER
	defines. Used to define the locations of custom resources used for both
	official and user created customised builds.  e.g. T-Online, Composer
	builds etc.

	Defines: UTIL_HAVE_CUSTOM_FOLDERS

API_UTIL_DOWNLOAD_FOLDER				adame
	Exports (from opfile/opfolder.h) the OPFILE_DOWNLOAD_FOLDER.

	Defines: UTIL_HAVE_DOWNLOAD_FOLDER

API_UTIL_DYNAMIC_FOLDERS				markus
	Makes it possible to extend the OpFileFolder enum using
	OpFolderManager::AddFolder().

	Defines: DYNAMIC_FOLDER_SUPPORT

API_UTIL_EXTENDED_OP_REGION				ed

        API for exporting some extensions to the OpRegion API.

        Defines: SVG_EXTENDED_OP_REGION_API

API_UTIL_EXTRACT_FILE_NAME				markus
	Exports (from str.h) the function:

	void ExtractFileName(const uni_char *orgname, uni_char *extracted, int extracted_buffer_size, uni_char *formatted_ext, int formatted_buffer_size);

	Defines: UTIL_EXTRACT_FILE_NAME

API_UTIL_FIND_FILE_EXT					markus
	Exports (from str.h) the function:

	const uni_char *FindFileExtension(const uni_char *name)

	Defines: UTIL_FIND_FILE_EXT

API_UTIL_FMAKE_DATE						markus
	Exports (from datefun.h) the function:

	BOOL 	FMakeDate(struct tm gt, const char* format, uni_char* buf, short buf_len);

	Defines: UTIL_FMAKE_DATE

API_UTIL_GENERATE_GUID					peter
	Exports (from opguid.h) the OpGUIDManager class, which supports
	generating {universally|globally} unique identifiers ({UUID|GUUID}s). If
	the system has declared that it has library functions for generating
	them, importing this API will automatically enable a porting interface
	for that, otherwise a local implementation will be used.

	Defines: UTIL_GUID_GENERATE_SUPPORT

API_UTIL_GENERIC_LANGUAGE_FOLDER		peter
	Exports (from opfile/opfolder.h) the OPFILE_GENERIC_LANGUAGE_FOLDER,
	which is similar to OPFILE_LANGUAGE_FOLDER, but holds the generic
	version of the localized files.

	Code that looks for files in OPFILE_LANGUAGE_FOLDER for localized
	versions, such as search definitions, should also look in the
	OPFILE_GENERIC_LANGUAGE_FOLDER if it fails to find it in the first one,
	if this folder is enabled.

	Platforms that use localized resources and need support for fallbacks
	should import this API, core modules should not, they should check for
	the preprocessor definition.

	Defines: OPFILE_HAVE_GENERIC_LANGUAGE_FOLDER

API_UTIL_GET_DATE						markus
	Exports (from datefun.h) the functions:

        time_t	GetDate(const char* date_str);
        time_t	GetDate(const uni_char* date_str);

	Defines: UTIL_GET_DATE

API_UTIL_GET_THIS_YEAR					markus
	Exports (from datefun.h) the function:

	int	GetThisYear(unsigned int *month = NULL);

	Defines: UTIL_GET_THIS_YEAR

API_UTIL_GET_TM_DATE					markus
	Exports (from datefun.h) the function:

        BOOL GetTmDate(const uni_char* date_str, struct tm &gmt_time);

	This API shall be retired.  Please do not add new uses of it.

	Defines: UTIL_GET_TM_DATE

API_UTIL_GLOB							markus
	Exports (from glob.h) the function:

	BOOL OpGlob( const uni_char *str, const uni_char *pat, BOOL slash_is_special, BOOL brackets_enabled );

	Defines: OP_GLOB_SUPPORT

API_UTIL_LISTENERS						markus
	Exports (from adt/oplisteners.h) the OpListeners<> class.

	Defines: UTIL_LISTENERS

API_UTIL_LOCALE_FOLDERS					markuso
	Makes it possible to add a list of locale folders to the
	OpFolderManager instance using the method
	OpFolderManager::AddLocaleFolder(). The methods
	OpFolderManager::GetLocaleFoldersCount() and
	OpFolderManager::GetLocaleFolder() can be used to iterate over
	the list of locale folder names.

	Defines: FOLDER_MANAGER_LOCALE_FOLDER_SUPPORT

API_UTIL_LOCAL_FILE_CRYPTO				adame
	Exports (from opcrypt_xp2.h) OPC_Crypt and OPC_DeCrypt.

	Defines: _LOCAL_FILE_CRYPTO_

API_UTIL_LOCAL_HOME_FOLDER				adame
	Exports (from opfile/opfolder.h) the OPFILE_LOCAL_HOME_FOLDER.  Location
	of user profile (a.k.a. "home folder" or "write directory") that is not
	part of the roaming profile.

	Defines: UTIL_HAVE_LOCAL_HOME_FOLDER

API_UTIL_MAKE_DATE3						markus
	Exports (from datefun.h) the function:

	BOOL 	MakeDate3(time_t* t, uni_char* buf, short buf_len);

	Defines: UTIL_MAKE_DATE3

API_UTIL_METRIC_STRING_TO_INT			markus
	Exports (from str.h) the function:

	int MetricStringToInt(const char *str);

	Defines: UTIL_METRIC_STRING_TO_INT

API_UTIL_MYUNISTRTOK					markus
	Exports (from from str.h) the function:

	uni_char *MyUniStrTok(uni_char *str, const uni_char *dividers, short &pos, BOOL &done);

	Defines: UTIL_MYUNISTRTOK

API_UTIL_NETWORK_TYPE					eddy
	Exports (from network/network_type.h) the IPv4type(UINT8 addr[4])
	function, for use by platform implementations of
	OpSocketAddress::GetNetType().

	Defines: UTIL_HAVE_NET_TYPE

API_UTIL_NETWORK_TYPE_IPV6				eddy
	Exports (from network/network_type.h) the IPv6type(UINT8 addr[16])
	function (which depends on its IPv4 sibling, which is imported if this
	one is) for implementations of OpSocketAddress::GetNetType() which also
	support IP version 6.

	Defines: UTIL_HAVE_NET_TYPE_IPV6

API_UTIL_OPERATOR_SUPPORT				johanh
	Exports the operator[](unsigned int) methods needed on Brew.

	Defines: UTIL_OPERATOR_SUPPORT

API_UTIL_OPFILE_PRINT					markus
	Enables OpFile::Print() which works similar to the Stdio function
	fprintf().

	Defines: OPFILE_PRINT_SUPPORT

API_UTIL_OP_FILTERED_VECTOR				psmaas
	Enables (in adt/OpFilteredVector.h) OpFilteredVector interface.

	Defines: UTIL_OP_FILTERED_VECTOR
	Depends on : API_UTIL_ADVANCED_OPINT32VECTOR

API_UTIL_OP_SLOTFILE					danielh
	Exports (from opfile/opslotfile.h) the class OpSlotFile

	Defines: UTIL_HAVE_OP_SLOTFILE

API_UTIL_OPSTRING_LIST					markus
	Enables class OpString_list which is a list of OpString objects. Using
	OpVector<OpString> instead is prefered.

	Defines: USE_UTIL_OPSTRING_LIST

API_UTIL_PATH							markus
	Exports (from path.h) various path utility functions like:

	OpPathDirFileCombine, OpPathAddSubdir, OpPathAppend,
	OpPathRemoveFileName, OpPathGetFileName

	This API shall be deleted; you should use the relevant methods of OpFile
	instead.

	Defines: UTIL_PATH_FUNCTIONS

API_UTIL_POINTER_OVERLAP				peter
	Exports (from str.h) the IsPointerOverlapping() function, which checks
	if two pointers point to overlapping memory areas.

	Defines: UTIL_POINTER_OVERLAP

API_UTIL_REMOVE_CHARS					markus
	Exports (from str.h) the function:

	OP_STATUS RemoveChars(OpString& str, const OpStringC& charstoremove);

	Defines: UTIL_REMOVE_CHARS

API_UTIL_SCRIPT_FOLDER					peter
	Exports (from opfile/opfolder.h) the OPFILE_SCRIPT_FOLDER, which is used
	for internal scripts, similar to OPFILE_STYLE_FOLDER and
	OPFILE_IMAGE_FOLDER.

	Defines: OPFILE_HAVE_SCRIPT_FOLDER

API_UTIL_SET_NEW_CAT_STR				markus
	Exports (from str.h) the SetNewCatStr functions: a char* variant (taking
	up to six inputs) and a uni_char* variant (taking up to four) and
	returning the result of concatenating its inputs into a
	freshly-allocated new string of the same type.

	This API shall be retired.  Please do not add new uses of it.

	Defines: UTIL_SET_NEW_CAT_STR

API_UTIL_SKIN_CUSTOM_FOLDERS			adamm
	Exports (from opfile/opfolder.h) the OPFILE_x_SKIN_CUSTOM_FOLDER
	defines. Used to define the locations of custom resources used for both
	official and user created customised builds.  e.g. T-Online, Composer
	builds etc.

	Defines: UTIL_HAVE_SKIN_CUSTOM_FOLDERS

API_UTIL_SPLIT_FILENAME_INTO_COMPONENTS	markus

	Exports (from filefun.h) the function:

	void SplitFilenameIntoComponentsL( const OpString& candidate, OpString *path, OpString *filename, OpString *extension );

	Defines: UTIL_SPLIT_FILENAME_INTO_COMPONENTS

API_UTIL_STRCATSPRINTFUNI				markus
	Exports (from str.h) the function:

	int StrCatSprintf(uni_char *target,  const uni_char *format, ...);

	Defines: UTIL_STRCATSPRINTFUNI

API_UTIL_STRING_STREAM					peter
	Exports (from unistream.h) the class UnicodeStringOutputStream, which
	implements the UnicodeOutputStream API writing to an OpString instead of
	an OpFileDescriptor.

	Defines: UTIL_STRING_STREAM

API_UTIL_STRTRIMCHARS					markus
	Exports (from str.h) StrTrimChars, StrTrimLeft, StrTrimRight and
	StrTrimLeftAndRight, StrTrimLeftStrings.

	Defines: UTIL_STRTRIMCHARS

API_UTIL_THREADSAFEQUEUE				arjanl
	Export the ThreadSafeQueue class.

	Defines: UTIL_THREADSAFEQUEUE

API_UTIL_UI_INI_FOLDER					adamm
	Exports (from opfile/opfolder.h) the OPFILE_UI_INI_FOLDER.  Location of
	UI ini files seperate from all other default ini files

	Defines: UTIL_HAVE_UI_INI_FOLDER

API_UTIL_URL_QUERY_TOKENIZER			joaoe
	Exports (from url_query_tkn.h) the small utility class UrlQueryTokenizer
	that splits the query part of a url (a=b&c=d) into name/value pairs

	Defines: URL_QUERY_TOKENIZER_SUPPORT

API_UTIL_VPS_FOLDER						adame

	Exports the OPFILE_VPS_FOLDER, which is used for visited pages
	index files.

	Defines: UTIL_VPS_FOLDER
	Depends on: FEATURE_VISITED_PAGES_SEARCH

# Deprecated APIs, also in alphabetic order, but after all others:

API_UTIL_ADVANCED_OPVECTOR				deprecated
	This API has been replaced with API_UTIL_ADVANCED_OPINT32VECTOR, which
	is the same, minus the Substract() misspelling.  This API has been
	removed, as was promised would happen.

API_UTIL_OVERRIDE_NEW					deprecated
	The operator new() is no longer provided by the util module.

API_UTIL_UTF32_CODECS					deprecated
	This API has been replaced by API_UC_UTF32_CODECS in the unicode module.

API_UTIL_WRITINGSYSTEMDETECTOR			deprecated
	Exports the WritingSystemDetector class for conveniently determining the
	most probable writing system from a set of hints

API_UTIL_WRITINGSYSTEM_FROM_UNICODE		deprecated
	Exports methods for detecting WritingSystem from Unicode text.

# See second line: alphabetic order !
# If everyone adds everything here, every merge gets conflicts.
