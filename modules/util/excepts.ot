group "util.excepts";

include "modules/util/excepts.h";

setup
{
	used = 0;
}

global
{
	int used;

	class Container
	{
		int m_size, *used;
		char *m_buf;

		void Init(int size, int *_used)
		{
			m_size = size;
			m_buf = OP_NEWA(char, size);
			used = _used;
			*used += size;
		};

	public:
		Container(int size, int *used)
		{
			Init(size, used);
		}
		Container(const Container &c)
		{
			Init(c.m_size, c.used);
		};
		~Container()
		{
			*used -= m_size;
			OP_DELETEA(m_buf);
			m_size = 0;
			m_buf = NULL;
		}
	};

	int e(int i, Container c)
	{
		ANCHOR(Container, c);
		OpStackAutoPtr<Container> A(OP_NEW(Container, (1,&used)));
		if (0 != i)
			LEAVE(OpStatus::ERR);
		return i;
	}

	int f(int i)
	{
		OpStackAutoPtr<Container> A(OP_NEW(Container, (1,&used)));
		Container box(10,&used);
		OpStackAnchor<Container> box_anchor(&box);
		return e(i, box);
	}

	int g(int i)
	{
		int OP_MEMORY_VAR j = i;
		OpStackAutoPtr<Container> A(OP_NEW(Container, (1,&used)));
		OpStackAutoPtr<Container> B(OP_NEW(Container, (2,&used)));
		A.reset(0);
		int error;
		TRAP(error, j = f(j));
		if (error)
			LEAVE(error);
		return j;
	}
}

test("No leave") leakcheck;
{
	TRAPD(error, g(0));
	verify(error == OpStatus::OK);
	verify(used == 0);
}

test("Leave") leakcheck;
{
	TRAPD(error, g(1));
	verify(error != OpStatus::OK);
	verify(used == 0);
}
