/* Test the ByteBuffer type.    -*- Mode: C++; tab-width: 4; -*- */

group "util.adt.bytebuffer";

language c++;
include "modules/util/adt/bytebuffer.h";

global {
	ByteBuffer *b;
}

setup {
	b = OP_NEW_L(ByteBuffer, ());
}

exit {
	OP_DELETE(b);
}

test("Appending and extracting single bytes")
{
	int i, errors;

	b->FreeStorage();
	errors = 0;

	for ( i=0 ; i < 8500 ; i++ )
		b->Append1(i & 255);
	for ( i=0 ; i < 8500 ; i++ )
		errors += (b->Extract1(i) != (i&255));
	verify( errors == 0 );

	// Do it again, this time with storage preallocated

	b->Clear();
	errors = 0;

	for ( i=0 ; i < 8500 ; i++ )
		b->Append1(i & 255);
	for ( i=0 ; i < 8500 ; i++ )
		errors += (b->Extract1(i) != (i&255));
	verify( errors == 0 );
}

test("Appending and extracting strings that cross buffer boundaries")
{
	int i, errors;

	b->FreeStorage();
	errors=0;

	for ( i=0 ; i < 8500 ; i+=13 )
		b->AppendBytes( "ABCDEFGHIJKLM", 13 );
	for ( i=0 ; i < 8500 ; i+= 13 )
	{
		char buf[13]; /* ARRAY OK 2009-04-03 adame */
		b->Extract(i, 13, buf);
		errors += (op_memcmp( buf, "ABCDEFGHIJKLM", 13) != 0);
	}
	verify( errors == 0 );

	// Do it again, this time with storage preallocated

	b->Clear();
	errors=0;

	for ( i=0 ; i < 8500 ; i+=13 )
		b->AppendBytes( "ABCDEFGHIJKLM", 13 );
	for ( i=0 ; i < 8500 ; i+= 13 )
	{
		char buf[13]; /* ARRAY OK 2009-04-03 adame */
		b->Extract(i, 13, buf);
		errors += (op_memcmp( buf, "ABCDEFGHIJKLM", 13) != 0);
	}
	verify( errors == 0 );
}

test("Appending a really long string")
{
	unsigned int i, errors;
	char buf[2*BYTEBUFFER_CHUNKSIZE + BYTEBUFFER_CHUNKSIZE/3]; /* ARRAY OK 2009-04-03 adame */

	b->FreeStorage();
	errors=0;

	for ( i=0 ; i < sizeof(buf) ; i++ )
		buf[i] = 'A' + (i % 26);

	for ( i=0 ; i < 7 ; i++ )
		b->AppendBytes( buf, sizeof(buf) );

	for ( i=0 ; i < 7 ; i++ )
	{
		char nbuf[sizeof(buf)]; /* ARRAY OK 2009-04-03 adame */
		b->Extract(i*sizeof(nbuf), sizeof(nbuf), nbuf);
		errors += (op_memcmp( buf, nbuf, sizeof(nbuf)) != 0);
	}
	verify( errors == 0 );
}

test("Inserting and extracting in network byte order")
{
	unsigned int x=0x01234567;

	b->FreeStorage();

	b->Append4(x);
	verify( b->Length() == 4 );
	verify( b->Extract1(0) == 0x01 );
	verify( b->Extract1(1) == 0x23 );
	verify( b->Extract1(2) == 0x45 );
	verify( b->Extract1(3) == 0x67 );
	verify( b->Extract4(0) == 0x01234567 );

	unsigned short y = 0xABCD;
	b->Append2(y);
	verify( b->Length() == 6 );
	verify( b->Extract1(4) == 0xAB );
	verify( b->Extract1(5) == 0xCD );
	verify( b->Extract2(4) == 0xABCD );
}

test("Appending and consuming single bytes")
{
	int i, errors;

	b->FreeStorage();
	errors = 0;

	for ( i=0 ; i < 8500 ; i++ )
		b->Append1(i & 255);
	for ( i=0 ; i < 8500 ; i++ )
	{
		errors += (b->Extract1(0) != (i&255));
		b->Consume(1);
	}
	verify( errors == 0 );
	verify( b->Length() == 0 );
}

test("Appending and consuming strings that cross buffer boundaries")
{
	int i, errors;

	b->FreeStorage();
	errors=0;

	for ( i=0 ; i < 8500 ; i+=13 )
		b->AppendBytes( "ABCDEFGHIJKLM", 13 );
	for ( i=0 ; i < 8500 ; i+= 13 )
	{
		char buf[13]; /* ARRAY OK 2009-04-03 adame */
		b->Extract(0, 13, buf);
		errors += (op_memcmp( buf, "ABCDEFGHIJKLM", 13) != 0);
		b->Consume(13);
	}
	verify( errors == 0 );
	verify( b->Length() == 0 );
}

test("Appending and consuming strings that cross buffer boundaries (mixed)")
{
	int i, errors;

	b->FreeStorage();
	errors=0;

	for ( i=0 ; i < 8500 ; i+=13 )
	{
		b->AppendBytes( "ABCDEFGHIJKLM", 13 );
		b->Consume( 5 );
		char buf[13]; /* ARRAY OK 2009-04-03 adame */
		b->Extract(0, 8, buf);
		errors += (op_memcmp( buf, "FGHIJKLM", 8) != 0);
		b->AppendBytes( "ABCDEFGHIJKLM", 13 );
		b->Consume( 8 );
		b->Extract(0, 13, buf);
		errors += (op_memcmp( buf, "ABCDEFGHIJKLM", 13) != 0);
	}
	verify( errors == 0 );
}

test("Adding bytes with GetNewChunk/AddBytes")
{
	b->FreeStorage();

	char *chunk1, *chunk2;
	unsigned int nbytes1, nbytes2;

	b->GetNewChunk( &chunk1, &nbytes1 );
	verify( chunk1 != NULL );
	verify( nbytes1 == BYTEBUFFER_CHUNKSIZE );

	b->GetNewChunk( &chunk2, &nbytes2 );
	verify( chunk2 == chunk1 );
	verify( nbytes2 == nbytes1 );

	b->AddBytes( BYTEBUFFER_CHUNKSIZE - 10 );
	b->GetNewChunk( &chunk2, &nbytes2 );
	verify( chunk2 == chunk1 + BYTEBUFFER_CHUNKSIZE - 10 );
	verify( nbytes2 == 10 );

	b->AddBytes( 10 );
	b->GetNewChunk( &chunk2, &nbytes2 );
	verify( chunk2 && chunk2 != chunk1 );
	verify( nbytes2 == BYTEBUFFER_CHUNKSIZE );
}

test("Bug#247800: Data length is divisible by chunk size")
{
	ByteBuffer bug;

	char *testdata = OP_NEWA(char, BYTEBUFFER_CHUNKSIZE);
	verify(testdata);
	for (size_t i = 0; i < BYTEBUFFER_CHUNKSIZE; ++ i)
	{
		testdata[i] = i & 0xFF;
	}

	verify(OpStatus::IsSuccess(bug.AppendBytes(testdata, BYTEBUFFER_CHUNKSIZE)));
	verify(OpStatus::IsSuccess(bug.AppendBytes(testdata, BYTEBUFFER_CHUNKSIZE)));

	unsigned int len = 0, total = 0;
	unsigned int count = bug.GetChunkCount();
	for (unsigned int j = 0; j < count; ++ j)
	{
		bug.GetChunk(j, &len);
		total += len;
	}

	verify(total == BYTEBUFFER_CHUNKSIZE * 2);
}
finally
{
	OP_DELETEA(testdata);
}

test("Bug CORE-20882: Adding and consuming data sizes equal to chunksize")
{
	char testdata[BYTEBUFFER_CHUNKSIZE*2] = {42};

	ByteBuffer b1;
	verify(OpStatus::IsSuccess(b1.AppendBytes(testdata, BYTEBUFFER_CHUNKSIZE)));
	b1.Consume(BYTEBUFFER_CHUNKSIZE);
	verify(b1.Length() == 0);

	verify(OpStatus::IsSuccess(b1.Append1(0x55)));
	verify(b1.Length() == 1);

	ByteBuffer b2;
	verify(OpStatus::IsSuccess(b2.AppendBytes(testdata, BYTEBUFFER_CHUNKSIZE*2)));
	b2.Consume(BYTEBUFFER_CHUNKSIZE*2);
	verify(b2.Length() == 0);

	verify(OpStatus::IsSuccess(b2.Append1(0x55)));
	verify(b2.Length() == 1);

	ByteBuffer b3;
	unsigned int i = 0;
	for (i = 0; i < BYTEBUFFER_CHUNKSIZE; ++i)
		verify(OpStatus::IsSuccess(b3.AppendBytes(testdata, 1)));
	for (i = 0; i < BYTEBUFFER_CHUNKSIZE; ++i)
		b3.Consume(1);
	verify(b3.Length() == 0);

	verify(OpStatus::IsSuccess(b3.Append1(0x55)));
	verify(b3.Length() == 1);
}

test("Bug CORE-23456 : ByteBuffer.Copy() with size equal to chunksize")
{
	char testdata[BYTEBUFFER_CHUNKSIZE*2];
	char *tmp = NULL;

	size_t i;
	for (i = 0; i < sizeof(testdata); ++i)
		testdata[i] = i + 1;

	ByteBuffer b1;

	verify(OpStatus::IsSuccess(b1.AppendBytes(testdata, 1)));
	verify(b1.Length() == 1);

	tmp = b1.Copy();
	verify(tmp != NULL);
	verify(tmp[0] == testdata[0]); // no need to iterate over length 1 ...

	verify(OpStatus::IsSuccess(b1.AppendBytes(testdata + 1, BYTEBUFFER_CHUNKSIZE - 1)));
	verify(b1.Length() == BYTEBUFFER_CHUNKSIZE);

	OP_DELETEA(tmp);
	tmp = b1.Copy();
	verify(tmp != NULL);
	for (i = 0; i < BYTEBUFFER_CHUNKSIZE; ++i)
		verify(tmp[i] == testdata[i]);

	verify(OpStatus::IsSuccess(b1.AppendBytes(testdata + BYTEBUFFER_CHUNKSIZE, 1)));
	verify(b1.Length() == BYTEBUFFER_CHUNKSIZE + 1);

	OP_DELETEA(tmp);
	tmp = b1.Copy();
	verify(tmp != NULL);
	for (i = 0; i < BYTEBUFFER_CHUNKSIZE + 1; ++i)
		verify(tmp[i] == testdata[i]);

	verify(OpStatus::IsSuccess(b1.AppendBytes(testdata + BYTEBUFFER_CHUNKSIZE + 1, BYTEBUFFER_CHUNKSIZE - 1)));
	verify(b1.Length() == BYTEBUFFER_CHUNKSIZE*2);

	OP_DELETEA(tmp);
	tmp = b1.Copy();
	verify(tmp != NULL);
	for (i = 0; i < BYTEBUFFER_CHUNKSIZE*2; ++i)
		verify(tmp[i] == testdata[i]);
}
finally
{
	OP_DELETEA(tmp);
}

test("Bug CORE-23456 : Consume and ByteBuffer.Copy() with size equal to chunksize")
{
	char testdata[BYTEBUFFER_CHUNKSIZE*2];
	char *tmp = NULL;

	size_t i;
	for (i = 0; i < sizeof(testdata); ++i)
		testdata[i] = i + 1;

	ByteBuffer b1;

	verify(OpStatus::IsSuccess(b1.AppendBytes(testdata, 1)));
	verify(OpStatus::IsSuccess(b1.AppendBytes(testdata, 1)));
	verify(b1.Length() == 2);
	b1.Consume(1);
	verify(b1.Length() == 1);

	tmp = b1.Copy();
	verify(tmp != NULL);
	for (i = 0; i < 1; ++i)
		verify(tmp[i] == testdata[i]);

	verify(OpStatus::IsSuccess(b1.AppendBytes(testdata + 1, BYTEBUFFER_CHUNKSIZE - 1)));
	verify(b1.Length() == BYTEBUFFER_CHUNKSIZE);

	OP_DELETEA(tmp);
	tmp = b1.Copy();
	verify(tmp != NULL);
	for (i = 0; i < BYTEBUFFER_CHUNKSIZE; ++i)
		verify(tmp[i] == testdata[i]);

	verify(OpStatus::IsSuccess(b1.AppendBytes(testdata + BYTEBUFFER_CHUNKSIZE, 1)));
	verify(b1.Length() == BYTEBUFFER_CHUNKSIZE + 1);

	OP_DELETEA(tmp);
	tmp = b1.Copy();
	verify(tmp != NULL);
	for (i = 0; i < BYTEBUFFER_CHUNKSIZE + 1; ++i)
		verify(tmp[i] == testdata[i]);

	verify(OpStatus::IsSuccess(b1.AppendBytes(testdata + BYTEBUFFER_CHUNKSIZE + 1, BYTEBUFFER_CHUNKSIZE - 1)));
	verify(b1.Length() == BYTEBUFFER_CHUNKSIZE*2);

	OP_DELETEA(tmp);
	tmp = b1.Copy();
	verify(tmp != NULL);
	for (i = 0; i < BYTEBUFFER_CHUNKSIZE*2; ++i)
		verify(tmp[i] == testdata[i]);
}
finally
{
	OP_DELETEA(tmp);
}


test("Bug CORE-37673 : Consuming one byte up to chunksize")
{
	char testdata[BYTEBUFFER_CHUNKSIZE * 2];

	// Set all to 'a', then make the characters at the boundry different
	unsigned int i;
	for (i = 0; i < BYTEBUFFER_CHUNKSIZE * 2; ++i)
		testdata[i] = 'a';

	testdata[BYTEBUFFER_CHUNKSIZE - 1] = 'b';
	testdata[BYTEBUFFER_CHUNKSIZE    ] = 'c';
	testdata[BYTEBUFFER_CHUNKSIZE + 1] = 'd';

	ByteBuffer b1;

	verify(OpStatus::IsSuccess(b1.AppendBytes(testdata, BYTEBUFFER_CHUNKSIZE)));
	verify(b1.Length() == (BYTEBUFFER_CHUNKSIZE));
	verify(OpStatus::IsSuccess(b1.AppendBytes(testdata + BYTEBUFFER_CHUNKSIZE, BYTEBUFFER_CHUNKSIZE)));
	verify(b1.Length() == (BYTEBUFFER_CHUNKSIZE * 2));

	b1.Consume(BYTEBUFFER_CHUNKSIZE - 1);
	verify(b1.Length() == BYTEBUFFER_CHUNKSIZE + 1);
	verify(b1.Extract1(0) == 'b');

	// This operation crosses the boundry
	b1.Consume(1);
	verify(b1.Length() == BYTEBUFFER_CHUNKSIZE);
	verify(b1.Extract1(0) == 'c');

	b1.Consume(1);
	verify(b1.Length() == BYTEBUFFER_CHUNKSIZE - 1);
	verify(b1.Extract1(0) == 'd');
}

test("Construct and truncate ByteBuffer")
{
	char testdata[BYTEBUFFER_CHUNKSIZE * 2];
	ByteBuffer* b1 = OP_NEW(ByteBuffer, ());
	verify_not_oom(b1);

	// Set all to 'a'.
	for (unsigned int i = 0; i < BYTEBUFFER_CHUNKSIZE * 2; ++i)
		testdata[i] = 'a';

	verify_success(b1->AppendBytes(testdata, BYTEBUFFER_CHUNKSIZE * 2));
	verify(b1->Length() == (BYTEBUFFER_CHUNKSIZE * 2));

	// Truncate to half the buffer size.
	b1->Truncate(BYTEBUFFER_CHUNKSIZE);
	verify(b1->Length() == BYTEBUFFER_CHUNKSIZE);

	// Truncate to 0.
	b1->Truncate(0);
	verify(b1->Length() == 0);
}
finally
{
	OP_DELETE(b1);
}
