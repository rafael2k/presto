/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2006 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "util.adt.optree";

include "modules/util/adt/optree.h";

global
{
    class TreeTest : public OpGenericTree {
	static int cmp(const void *a, const void *b)
	{
	    int p = *((int *)a);
	    int q = *((int *)b);
	    return p<q;
	}
    public:
	void set_size(UINT32 step) { SetAllocationStepSize(step); };
	OP_STATUS af(INT32 pi, int *d, INT32 *gi) { return AddFirst(pi, d, gi); };
	OP_STATUS al(INT32 pi, int *d, INT32 *gi) { return AddLast(pi, d, gi); };
	int* get(INT32 index) { return (int*)Get(index); };
	OP_STATUS sort() { return Sort(cmp); };
// 		OP_STATUS		InsertBefore(INT32 sibling_index, void* item, INT32* got_index = NULL);
// 		OP_STATUS		InsertAfter(INT32 sibling_index, void* item, INT32* got_index = NULL);


// 		void*			Remove(INT32 index, BOOL all_children = TRUE);
// 		void			Clear();

// 		INT32			Find(void* item) const;

// 		INT32			GetParent(INT32 index) const;
// 		INT32			GetChild(INT32 index) const;
// 		INT32			GetSibling(INT32 index) const;

// 		INT32			GetCount() const { return m_tree_nodes.GetCount(); }
// 		INT32			GetSubtreeSize(INT32 index) const;

    };
}

test("OpTree")
{
    int *data[3], root, l, r;
    TreeTest tree;

    data[0] = OP_NEW(int, ());
    data[1] = OP_NEW(int, ());
    data[2] = OP_NEW(int, ());

    *data[0] = 2;
    *data[1] = 1;
    *data[2] = 3;

    tree.set_size(sizeof(int));
    tree.af(-1, data[0], &root);
    tree.af(root, data[1], &l);
    tree.af(root, data[2], &r);

    verify(*tree.get(0) == *data[0]);
    verify(*tree.get(2) == *data[1]);
    verify(*tree.get(1) == *data[2]);

    OP_DELETE(data[0]);
    OP_DELETE(data[1]);
    OP_DELETE(data[2]);
}
