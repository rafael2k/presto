/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2012 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "util.OpFilteredVector";
require init;
require UTIL_OP_FILTERED_VECTOR;
include "modules/util/adt/OpFilteredVector.h";

global
{
	typedef const int payload;
	class Value : public OpFilteredVectorItem<Value>
	{
		payload *const m_burden;
	public:
		Value(payload* p, BOOL filtered) : OpFilteredVectorItem<Value>(filtered), m_burden(p) {}
		bool Carries(payload* p) const { return p == m_burden; }
	};
}

test("OpFilteredVector")
{
	OpFilteredVector<Value> seq;
	Value *two = NULL;
	int i;
	// All declarations above need to precede all verify()s
	payload data[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

	verify(ARRAY_SIZE(data) % 2 == 0); // assumed by tests below.
	for (i = 0; i < int(ARRAY_SIZE(data)); i++)
	{
		verify(seq.GetCount(CompleteVector) == i);
		Value * obj = OP_NEW(Value, (data + i, 0 == i % 2));
		if (i == 2) two = obj;
		verify_not_oom(obj);
		verify_success(seq.Add(obj));
	}
	verify(seq.GetCount(CompleteVector) == i);

	// Only the odd entries are visible.
	for (i = ARRAY_SIZE(data) / 2; i-- > 0; )
	{
		payload * const base = data + 2 * i;
		Value *obj = seq.Get(i, InvisibleVector);
		verify(obj == seq.Get(2 * i, CompleteVector));
		verify(obj && obj->Carries(base));
		obj = seq.Get(i);
		verify(obj == seq.Get(2 * i + 1, CompleteVector));
		verify(obj == seq.Get(i, VisibleVector));
		verify(obj && obj->Carries(base + 1));
	}

	/* Bug fixed in March 2012, as part of clean-up: RemoveByItem() would find
	 * the item's index and delete the item at that index, but only applied its
	 * visibility mode to the look-up; it let the removal use its default mode,
	 * visible, instead of the actually specified mode.
	 */
	verify_success(seq.RemoveByItem(two, CompleteVector));
	/* That should remove the 2, at actual index 2, not the 5 at visible index
	 * 2.  It then causes the visible mask to be adjusted to accommodate its
	 * removal.
	 */
	for (i = ARRAY_SIZE(data) / 2; i-- > 0; )
	{
		payload * const base = data + 2 * i;
		const int off = i > 0 ? 1 : 0;
		Value *obj = seq.Get(i, InvisibleVector);
		verify(obj == seq.Get(2 * i + off, CompleteVector));
		verify(obj ? obj->Carries(base + 2 * off) : (i + 1 == ARRAY_SIZE(data) / 2));
		obj = seq.Get(i);
		verify(obj == seq.Get(2 * i + 1 - off, CompleteVector));
		verify(obj == seq.Get(i, VisibleVector));
		verify(obj && obj->Carries(base + 1));
	}
}
finally
{
	if (seq.Find(two, CompleteVector) == -1)
		OP_DELETE(two);
	for (i = seq.GetCount(CompleteVector); i-- > 0; )
		OP_DELETE(seq.Get(i, CompleteVector));
}
