/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "util.adt.opvector";

include "modules/util/adt/opvector.h";

global
{
	#define NR_OF_STRINGS 53
	char** strings_array;

	#ifdef ADVANCED_OPVECTOR
	#define ADVANCED_OPINT32VECTOR
	#endif

	extern "C" int util_test_OpVector_QSort_intcmp(const int **a, const int **b);

	/** Class used for testing OpAutoVector. */
	class AutoVectorTester
	{
	public:
		AutoVectorTester(int *refcounter)
			: m_refcounter(refcounter)
			{ ++ *m_refcounter; }
		~AutoVectorTester()
			{ -- *m_refcounter; }
	private:
		int *m_refcounter;
	};
}

test("DuplicateOf") leakcheck;
{
	OpVector<char> vector;
	for (int i = 0; i < NR_OF_STRINGS; i++)
	{
		verify(vector.Add(strings_array[i])== OpStatus::OK);
	}
	OpVector<char> vector_copy;
	verify(vector_copy.DuplicateOf(vector) == OpStatus::OK);
	for (int j = 0; j < NR_OF_STRINGS; j++)
	{
		verify(vector_copy.Get(j) == strings_array[j]);
	}
	verify(vector_copy.GetCount() == NR_OF_STRINGS);
}

test("Add and removebyitem") leakcheck;
{
	OpVector<char> vector;
	for (int i = 0; i < NR_OF_STRINGS; i++)
	{
		verify(vector.Add(strings_array[i]) == OpStatus::OK);
	}
	verify(vector.GetCount() == NR_OF_STRINGS);
	for (UINT32 j = 0; j < NR_OF_STRINGS; j++)
	{
		verify(vector.RemoveByItem(strings_array[j]) == OpStatus::OK);
	}
	verify(vector.GetCount() == 0);
}

test("Add and remove") leakcheck;
{
	OpVector<char> vector;
	for (int i = 0; i < NR_OF_STRINGS; i++)
	{
		verify(vector.Add(strings_array[i]) == OpStatus::OK);
	}
	verify(vector.GetCount() == NR_OF_STRINGS);
	for (UINT32 j = 0; j < NR_OF_STRINGS; j++)
	{
		verify(vector.Remove(0) == strings_array[j]);
	}
	verify(vector.GetCount() == 0);
}

test("Add, replace and get") leakcheck;
{
	OpVector<char> vector;
	verify(vector.GetCount() == 0);
	for (int i = NR_OF_STRINGS - 1; i >= 0; i--)
	{
		verify(vector.Add(strings_array[i])== OpStatus::OK);
	}
	verify(vector.GetCount() == NR_OF_STRINGS);
	for (int j = 0; j < NR_OF_STRINGS; j++)
	{
		verify(vector.Replace(j, strings_array[j])== OpStatus::OK);
		verify(vector.GetCount() == NR_OF_STRINGS);
	}
	for (int k = 0; k < NR_OF_STRINGS; k++)
	{
		verify(vector.Get(k) == strings_array[k]);
	}
	verify(vector.GetCount() == NR_OF_STRINGS);
}

test("Inserting and getting elements") leakcheck;
{
	OpVector<char> vector;
	for (int i = NR_OF_STRINGS - 1; i >= 0; i--)
	{
		verify(vector.Insert(0, strings_array[i])== OpStatus::OK);
	}
	for (int j = 0; j < NR_OF_STRINGS; j++)
	{
		verify(vector.Get(j) == strings_array[j]);
	}
	verify(vector.GetCount() == NR_OF_STRINGS);
}

test("Adding and getting elements") leakcheck;
{
	OpVector<char> vector;
	for (int i = 0; i < NR_OF_STRINGS; i++)
	{
		verify(vector.Add(strings_array[i])== OpStatus::OK);
	}
	for (int j = 0; j < NR_OF_STRINGS; j++)
	{
		verify(vector.Get(j) == strings_array[j]);
	}
	verify(vector.GetCount() == NR_OF_STRINGS);
}

test("Adding and finding elements") leakcheck;
{
	OpVector<char> vector;
	for (int i = 0; i < NR_OF_STRINGS; i++)
	{
		verify(vector.Add(strings_array[i])== OpStatus::OK);
	}
	for (int j = 0; j < NR_OF_STRINGS; j++)
	{
		verify(vector.Find(strings_array[j]) == j);
	}
	verify(vector.GetCount() == NR_OF_STRINGS);
}

test("MergeSort") require ADVANCED_OPINT32VECTOR;
{
	unsigned int i, j;
	OpINT32Vector v;
	int value;

	for (i = 1; i < 70; ++i)
	{
		v.Clear();
		for (j = 0; j < i; ++j)
		{
			value = op_rand() % 12;
			v.Add(value);
			if ((op_rand() & 3) == 3)
				v.Add(value);
		}
		v.Sort();
		verify(v.GetCount() <= i);

		verify(v.Search(v.Get(0)) == 0);
		for (j = 1; j < v.GetCount(); ++j)
		{
			verify(v.Get(j - 1) < v.Get(j));
			verify(v.Search(v.Get(j)) == j);
		}
	}
}

test("QSort") leakcheck;
{
	unsigned int i, j;
	OpVector<int> v;

	for (i = 2; i < 72; ++i)
	{
		for (j = 0; j < i; ++j)
		{
			int *val = OP_NEW(int, ());
			verify(val);
			*val = op_rand() % 12;
			v.Add(val);
		}
		v.QSort(util_test_OpVector_QSort_intcmp);
		verify(v.GetCount() == i);

		for (j = 1; j < v.GetCount(); ++j)
		{
			verify(*(v.Get(j - 1)) <= *(v.Get(j)));
		}
		v.DeleteAll();
	}
}

test("Set addition") require ADVANCED_OPINT32VECTOR;
{
	OpINT32Vector v1, v2, v3, v4;
	int j;

	v1.Add(1);
	v1.Add(5);
	v1.Add(8);
	v1.Add(16);
	v1.Add(18);
	v1.Add(0);
	v1.Add(0);
	v1.Add(0);
	v1.Add(0);
	v1.Remove(5, 4);

	v2.Add(1);
	v2.Add(5);
	v2.Add(10);
	v2.Add(11);

	v1.Add(v2);

	v3.Add(5);
	v3.Add(6);
	v3.Add(7);
	v3.Add(27);

	OpINT32Vector::Add(v4, v1, v3);

	verify(v4.GetCount() == 10);

	for (j = 1; j < (int)v4.GetCount(); ++j)
	{
		verify(v4.Get(j - 1) < v4.Get(j));
	}
}

test("Add out of range bug") require ADVANCED_OPINT32VECTOR;
{
	OpINT32Vector v1, v2;
	int j;

	v1.Add(1);
	v1.Add(4);
	v1.Add(6);
	v1.Add(2);
	v1.Add(3);
	v1.Remove(3, 2);

	v2.Add(1);
	v2.Add(3);
	v2.Add(5);

	v1.Add(v2);

	for (j = 1; j < (int)v1.GetCount(); ++j)
	{
		verify(v1.Get(j - 1) < v1.Get(j));
	}

	v1.Clear();
	v2.Clear();

	for (j = 0; j < 512; ++j)
	{
		v1.Add((j << 1) + ((j & 3) ^ 2));
		v2.Add(j + (j << 1) + (j & 3));
	}
	v1.Sort();
	v2.Sort();

	v1.Add(v2);

	for (j = 1; j < (int)v1.GetCount(); ++j)
	{
		verify(v1.Get(j - 1) < v1.Get(j));
	}

	v1.Clear();
	v2.Clear();

	v1.SetAllocationStepSize(2048);

	for (j = 0; j < 512; ++j)
	{
		v1.Add((j << 1) + ((j & 3) ^ 2));
		v2.Add(j + (j << 1) + (j & 3));
	}
	v1.Sort();
	v2.Sort();

	v1.Add(v2);

	for (j = 1; j < (int)v1.GetCount(); ++j)
	{
		verify(v1.Get(j - 1) < v1.Get(j));
	}
}


test("Set subtraction") require ADVANCED_OPINT32VECTOR;
{
	OpINT32Vector v1, v2, v4;

	v2.Add(1);
	v2.Add(5);
	v2.Add(10);
	v2.Add(11);
	v2.Insert(0, 0);
	v2.Insert(3, 9);
	v2.Add(30);

	v4.Add(1);
	v4.Add(5);
	v4.Add(6);
	v4.Add(7);
	v4.Add(8);
	v4.Add(10);
	v4.Add(11);
	v4.Add(16);
	v4.Add(18);
	v4.Add(27);

#ifdef ADVANCED_OPINT32VECTOR
	v4.Subtract(v2);
#else
	v4.Substract(v2);
#endif

	verify(v4.GetCount() == 6);

	v2.Clear();

	v2.Add(27);
	v2.Add(28);

#ifdef ADVANCED_OPINT32VECTOR
	v4.Subtract(v2);
#else
	v4.Substract(v2);
#endif

	verify(v4.GetCount() == 5);

	v2.Clear();

	v2.Add(7);
	v2.Add(9);
	v2.Add(18);

#ifdef ADVANCED_OPINT32VECTOR
	OpINT32Vector::Subtract(v1, v4, v2);
#else
	OpINT32Vector::Substract(v1, v4, v2);
#endif

	verify(v1.GetCount() == 3);

	v2.Clear();

	v2.Add(6);
	v2.Add(7);
	v2.Add(8);

#ifdef ADVANCED_OPINT32VECTOR
	v1.Subtract(v2);
#else
	v1.Substract(v2);
#endif

	verify(v1.GetCount() == 1);

	v1.Add(18);
	v2.Clear();
	v2.Add(18);

#ifdef ADVANCED_OPINT32VECTOR
	v1.Subtract(v2);
#else
	v1.Substract(v2);
#endif

	verify(v1.GetCount() == 1);
}

test("Set intersection") require ADVANCED_OPINT32VECTOR;
{
	OpINT32Vector v1, v2, v3, v4;

	v1.Add(1);
	v1.Add(5);
	v1.Add(8);
	v1.Add(16);
	v1.Add(18);

	v2.Add(1);
	v2.Add(5);
	v2.Add(16);

	v1.Intersect(v2);

	verify(v1.GetCount() == 3);

	v3.Add(16);

	v1.Intersect(v3);

	verify(v1.GetCount() == 1);

	v1.Insert(0, 5);
	v1.Add(18);

	OpINT32Vector::Intersect(v4, v1, v3);

	verify(v4.GetCount() == 1);

	v1.Clear();

	v1.Add(1);
	v1.Add(5);
	v1.Add(8);
	v1.Add(16);
	v1.Add(18);
	v1.Add(21);
	v1.Add(25);
	v1.Add(28);
	v1.Add(116);
	v1.Add(118);
	v1.Add(221);
	v1.Add(225);
	v1.Add(228);
	v1.Add(316);
	v1.Add(318);

	v2.Clear();

	v2.Add(1);
	v2.Add(5);

	v1.Intersect(v2);

	verify(v1.GetCount() == 2);

	v3.Clear();
	v3.Intersect(v1);
	verify(v3.GetCount() == 0);

	OpINT32Vector::Intersect(v2, v1, v3);
	verify(v2.GetCount() == 0);

	OpINT32Vector::Intersect(v2, v3, v1);
	verify(v2.GetCount() == 0);

	v1.Intersect(v3);
	verify(v1.GetCount() == 0);

	v1.Add(1);
	v1.Add(2);

	v2.Add(1);
	v2.Add(2);

	v1.Intersect(v2);

	verify(v1.GetCount() == 2);

	OpINT32Vector::Intersect(v3, v1, v2);

	verify(v3.GetCount() == 2);

	v1.Clear();
	v1.Add(1);
	v1.Add(2);
	v2.Clear();
	v2.Add(2);

	v1.Intersect(v2);

	verify(v1.GetCount() == 1);
}

test("Delete") leakcheck;
{
	OpVector<char> v1, v2;
	char tst[4], *items[5];
	OpAutoPtr<char> tmp[5];

	items[0] = OP_NEW(char, ());
	verify(items[0]);
	tmp[0].reset(items[0]);
	*items[0] = 1;
	verify(OpStatus::IsSuccess(v1.Add(items[0])));

	items[1] = OP_NEW(char, ());
	verify(items[1]);
	tmp[1].reset(items[1]);
	*items[1] = 2;
	verify(OpStatus::IsSuccess(v1.Add(items[1])));

	items[2] = OP_NEW(char, ());
	verify(items[2]);
	tmp[2].reset(items[2]);
	*items[2] = 3;
	verify(OpStatus::IsSuccess(v1.Add(items[2])));

	items[3] = OP_NEW(char, ());
	verify(items[3]);
	tmp[3].reset(items[3]);
	*items[3] = 4;
	verify(OpStatus::IsSuccess(v1.Add(items[3])));

	items[4] = OP_NEW(char, ());
	verify(items[4]);
	tmp[4].reset(items[4]);
	*items[4] = 1;
	verify(OpStatus::IsSuccess(v1.Add(items[4])));

	tmp[0].release();
	tmp[1].release();
	tmp[2].release();
	tmp[3].release();
	tmp[4].release();

	v1.Delete(items[0]);
	tst[0] = *v1.Get(0);
	tst[1] = *v1.Get(1);
	tst[2] = *v1.Get(2);
	tst[3] = *v1.Get(3);
	verify(tst[0] == 2 && tst[1] == 3 && tst[2] == 4 && tst[3] == 1);

	v1.Delete(1, 2);
	tst[0] = *v1.Get(0);
	tst[1] = *v1.Get(1);
	verify(tst[0] == 2 && tst[1] == 1);

	v1.DeleteAll();
	verify(v1.GetCount() == 0);
}

test("Insert and Replace")
{
	OpVector<char> v1;
	char *items[2], tst[2];
	OpAutoPtr<char> tmp[2];

	items[0] = OP_NEW(char, ());
	verify(items[0]);
	*items[0] = 1;
	tmp[0].reset(items[0]);

	items[1] = OP_NEW(char, ());
	verify(items[1]);
	tmp[1].reset(items[1]);
	*items[1] = 2;

	verify(OpStatus::IsSuccess(v1.Insert(0, items[0])));
	verify(OpStatus::IsSuccess(v1.Replace(0, items[1])));
	verify(OpStatus::IsSuccess(v1.Insert(1, items[0])));
	tst[0] = *v1.Get(0);
	tst[1] = *v1.Get(1);
	verify(v1.GetCount() == 2);
	verify(tst[0] == 2 && tst[1] == 1);
}

test("Empty")
{
	OpINT32Vector v1;

	verify(OpStatus::IsSuccess(v1.Add(13)));
	verify(OpStatus::IsSuccess(v1.Add(4)));
	verify(OpStatus::IsSuccess(v1.Add(-64)));

	verify(v1.GetCount() == 3);

	v1.Empty();

	verify(v1.GetCount() == 0);
	verify(v1.Get(0) == 0);

	verify(OpStatus::IsSuccess(v1.Add(20)));
	verify(v1.GetCount() == 1);
	verify(v1.Get(0) == 20);
}

test("OpAutoVector")
{
	int refcounter = 0;

	OpAutoVector<AutoVectorTester> *v = NULL;
	AutoVectorTester *p1 = NULL, *p2 = NULL, *p3 = NULL;
	p1 = OP_NEW(AutoVectorTester, (&refcounter));
	p2 = OP_NEW(AutoVectorTester, (&refcounter));
	p3 = OP_NEW(AutoVectorTester, (&refcounter));
	v  = OP_NEW(OpAutoVector<AutoVectorTester>, ());
	verify_not_oom(p1);
	verify_not_oom(p2);
	verify_not_oom(p3);
	verify_not_oom(v);
	verify(refcounter == 3);

	verify_success(v->Add(p1));
	p1 = NULL; // Now owned by v
	verify_success(v->Add(p2));
	p2 = NULL; // Now owned by v
	verify_success(v->Add(p3));
	p3 = NULL; // Now owned by v
	verify(v->GetCount() == 3);

	OP_DELETE(v);
	v = NULL;

	verify(refcounter == 0);
}
finally
{
	OP_DELETE(p1);
	OP_DELETE(p2);
	OP_DELETE(p3);
	OP_DELETE(v);
}

setup
{
	strings_array = OP_NEWA(char*, NR_OF_STRINGS);
	for (int i = 0; i < NR_OF_STRINGS; i++)
	{
		char* thestring = OP_NEWA(char, 20);
		op_sprintf(thestring, "String%d", i);
		strings_array[i] = thestring;
	}
}

exit
{
	for (int i = 0; i < NR_OF_STRINGS; i++)
	{
		OP_DELETEA(strings_array[i]);
	}
	OP_DELETEA(strings_array);
}
