/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "util.gen_str";

include "modules/util/gen_str.h";

test("StrFileExt(char)")
{
	verify_string(StrFileExt("abc.def"), "def");
	verify_string(StrFileExt("abc.def.ghi"), "ghi");
	verify_string(StrFileExt("abc.def.g"), "g");
	verify(StrFileExt(".abc") == NULL);
	verify(StrFileExt("abc") == NULL);
	verify(StrFileExt("..") == NULL);
	verify(StrFileExt("abc..") == NULL);
	verify(StrFileExt("abc.") == NULL);
	verify(StrFileExt(".abc.") == NULL);
	verify(StrFileExt(".") == NULL);
	verify(StrFileExt("") == NULL);
}

test("StrFileExt(uni_char)")
{
	verify_string(StrFileExt(UNI_L("abc.def")), "def");
	verify_string(StrFileExt(UNI_L("abc.def.ghi")), "ghi");
	verify_string(StrFileExt(UNI_L("abc.def.g")), "g");
	verify(StrFileExt(UNI_L(".abc")) == NULL);
	verify(StrFileExt(UNI_L("abc")) == NULL);
	verify(StrFileExt(UNI_L("..")) == NULL);
	verify(StrFileExt(UNI_L("abc..")) == NULL);
	verify(StrFileExt(UNI_L("abc.")) == NULL);
	verify(StrFileExt(UNI_L(".abc.")) == NULL);
	verify(StrFileExt(UNI_L(".")) == NULL);
	verify(StrFileExt(UNI_L("")) == NULL);
}

test("StrFilterOutChars(char)")
{
	/* Remove character set from string. */
	char buf[] = { 'o', 'p', 'e', 'r', 'a', 0 };

	StrFilterOutChars(buf, NULL);
	verify_string(buf, "opera");

	StrFilterOutChars(buf, "");
	verify_string(buf, "opera");

	StrFilterOutChars(buf, "b");
	verify_string(buf, "opera");

	StrFilterOutChars(buf, "oa");
	verify_string(buf, "per");

	buf[0] = 0;
	StrFilterOutChars(buf, "");
	verify_string(buf, "");

	StrFilterOutChars(NULL, "");
}

test("StrFilterOutChars(uni_char)")
{
	/* Remove character set from unicode string. */
	uni_char buf[] = { 'o', 'p', 'e', 'r', 'a', 0 };

	StrFilterOutChars(buf, NULL);
	verify_string(buf, "opera");

	StrFilterOutChars(buf, UNI_L(""));
	verify_string(buf, "opera");

	StrFilterOutChars(buf, UNI_L("b"));
	verify_string(buf, "opera");

	StrFilterOutChars(buf, UNI_L("oa"));
	verify_string(buf, "per");

	uni_strcpy(buf, UNI_L(""));
	verify_string(buf, "");

	StrFilterOutChars(buf, UNI_L(""));
	verify_string(buf, "");

	StrFilterOutChars(NULL, UNI_L(""));
}

test("GetStrTokens")
{
	/* Fills an array of pointers to tokens found in the 'value' string.
	   Input parameters are delimiter and characters to remove from tokens.
	   The maximum number of tokens is given (5).
	   The number of found tokens is returned.
	*/
	uni_char* tokens[10]; /* ARRAY OK 2012-01-31 hela */
	OpString value;

	// Basic case
	verify_success(value.Set("a:b:c"));
	verify(GetStrTokens(value.CStr(), UNI_L(":"), UNI_L(""), tokens, 5) == 3);
	verify_string(tokens[0], "a");
	verify_string(tokens[1], "b");
	verify_string(tokens[2], "c");

	// Same as above but with maxTokens less than actual tokens
	verify_success(value.Set("a:b:c"));
	verify(GetStrTokens(value.CStr(), UNI_L(":"), UNI_L(""), tokens, 2) == 2);
	verify_string(tokens[0], "a");
	verify_string(tokens[1], "b:c");

	// Same as above but additionally strip the remaining tokens
	verify_success(value.Set("a:b:c"));
	verify(GetStrTokens(value.CStr(), UNI_L(":"), UNI_L(""), tokens, 2, TRUE) == 2);
	verify_string(tokens[0], "a");
	verify_string(tokens[1], "b");

	// Multiple separators
	verify_success(value.Set("a|b:c"));
	verify(GetStrTokens(value.CStr(), UNI_L(":|"), UNI_L(""), tokens, 5) == 3);
	verify_string(tokens[0], "a");
	verify_string(tokens[1], "b");
	verify_string(tokens[2], "c");

	// Missing token, should evaluate to empty string
	verify_success(value.Set("a::b"));
	verify(GetStrTokens(value.CStr(), UNI_L(":"), UNI_L(""), tokens, 5) == 3);
	verify_string(tokens[0], "a");
	verify_string(tokens[1], "");
	verify_string(tokens[2], "b");

	verify_success(value.Set("a:b:"));
	verify(GetStrTokens(value.CStr(), UNI_L(":"), UNI_L(""), tokens, 5) == 3);
	verify_string(tokens[0], "a");
	verify_string(tokens[1], "b");
	verify_string(tokens[2], "");

	verify_success(value.Set("::"));
	verify(GetStrTokens(value.CStr(), UNI_L(":"), UNI_L(""), tokens, 5) == 3);
	verify_string(tokens[0], "");
	verify_string(tokens[1], "");
	verify_string(tokens[2], "");

	verify_success(value.Set("::a"));
	verify(GetStrTokens(value.CStr(), UNI_L(":"), UNI_L(""), tokens, 5) == 3);
	verify_string(tokens[0], "");
	verify_string(tokens[1], "");
	verify_string(tokens[2], "a");

	verify_success(value.Set(":"));
	verify(GetStrTokens(value.CStr(), UNI_L(":"), UNI_L(""), tokens, 5) == 2);
	verify_string(tokens[0], "");
	verify_string(tokens[1], "");

	// Trimming chars
	verify_success(value.Set("a#:b:c##"));
	verify(GetStrTokens(value.CStr(), UNI_L(":"), UNI_L("#"), tokens, 5) == 3);
	verify_string(tokens[0], "a");
	verify_string(tokens[1], "b");
	verify_string(tokens[2], "c");

	// Trimming multiple chars
	verify_success(value.Set("#aa#:$b$#$:#$cc##"));
	verify(GetStrTokens(value.CStr(), UNI_L(":"), UNI_L("$#"), tokens, 5) == 3);
	verify_string(tokens[0], "aa");
	verify_string(tokens[1], "b");
	verify_string(tokens[2], "cc");

	// Don't remove trimming chars from the middle of tokens
	verify_success(value.Set(" a a:b: c  c"));
	verify(GetStrTokens(value.CStr(), UNI_L(":"), UNI_L(" "), tokens, 5) == 3);
	verify_string(tokens[0], "a a");
	verify_string(tokens[1], "b");
	verify_string(tokens[2], "c  c");

	// Splitting on multiple chars and trimming multiple chars
	verify_success(value.Set(" #$#a $a#$:b  : c  c"));
	verify(GetStrTokens(value.CStr(), UNI_L("::"), UNI_L("$# "), tokens, 5) == 3);
	verify_string(tokens[0], "a $a");
	verify_string(tokens[1], "b");
	verify_string(tokens[2], "c  c");

	// No tokens and whitespace trimming
	verify_success(value.Set("    "));
	verify(GetStrTokens(value.CStr(), UNI_L(":"), UNI_L(" "), tokens, 5) == 1);
	verify_string(tokens[0], "");

	// "Empty" input
	verify(GetStrTokens(NULL, UNI_L(":"), UNI_L("#"), tokens, 5) == 0);
	verify(GetStrTokens(value.CStr(), UNI_L(":"), UNI_L("#"), tokens, 0) == 0);
}
