/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2005 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/
group "util.opregion";

include "modules/util/OpRegion.h";
include "modules/util/OpRegion.h"; // Testing double inclusion

require init;

language C++;

test("Creation")
{
	OpRegion region_stack; // On the stack
	OpRegion* region_heap = OP_NEW(OpRegion, ());
	OP_DELETE(region_heap);
}

test("Including rect")
{
	OpRegion region1;
	verify(region1.IncludeRect(OpRect(10,10,10,10)));
	verify(region1.Includes(10,10));
	verify(region1.Includes(19,10));
	verify(region1.Includes(10,19));
	verify(region1.Includes(19,19));
	verify(!region1.Includes(9,10));
	verify(!region1.Includes(10,9));
	verify(!region1.Includes(9,9));
	verify(region1.Includes(15,15));
	verify(!region1.Includes(19,20));
	verify(!region1.Includes(20,19));
	verify(!region1.Includes(20,20));

	verify(region1.IncludeRect(OpRect(8, 8, 3, 3)));
	verify(region1.Includes(8, 8));
	verify(!region1.Includes(8, 11));
	verify(!region1.Includes(11, 8));
	verify(region1.Includes(10, 10));

	// This is totally inside the others
	verify(region1.IncludeRect(OpRect(12, 12, 5, 5)));
	verify(region1.Includes(12, 12));
	verify(region1.Includes(12, 11));
	verify(region1.Includes(11, 12));
	verify(region1.Includes(17, 17));
	verify(region1.Includes(18, 18));

	verify(region1.IncludeRect(OpRect(14, 5, 3, 20)));
	verify(region1.Includes(14, 5));
	verify(region1.Includes(16, 5));
	verify(!region1.Includes(13, 5));
	verify(!region1.Includes(17, 5));
	verify(!region1.Includes(14, 4));
	verify(!region1.Includes(16, 4));
	verify(region1.Includes(14, 24));
	verify(region1.Includes(16, 24));
	verify(!region1.Includes(13, 24));
	verify(!region1.Includes(17, 24));
	verify(!region1.Includes(14, 25));
	verify(!region1.Includes(16, 25));

	// This overwhelms everything
	verify(region1.IncludeRect(OpRect(0, 0, 50, 50)));
	verify(region1.Includes(0,0));
	verify(region1.Includes(49,0));
	verify(region1.Includes(0,49));
	verify(region1.Includes(49,49));
	verify(!region1.Includes(-1,0));
	verify(!region1.Includes(0,-1));
	verify(!region1.Includes(-1,-1));
	verify(region1.Includes(25,25));
	verify(!region1.Includes(49,50));
	verify(!region1.Includes(50,49));
	verify(!region1.Includes(50,50));
}

test("Subtract rect")
{
	OpRegion region1;
	verify(region1.IncludeRect(OpRect(10,10,10,10)));

	verify(region1.RemoveRect(OpRect(0,0,10,10))); // Does nothing
	verify(region1.Includes(10,10));
	verify(region1.Includes(19,10));
	verify(region1.Includes(10,19));
	verify(region1.Includes(19,19));
	verify(!region1.Includes(9,10));
	verify(!region1.Includes(10,9));
	verify(!region1.Includes(9,9));
	verify(region1.Includes(15,15));
	verify(!region1.Includes(19,20));
	verify(!region1.Includes(20,19));
	verify(!region1.Includes(20,20));

	verify(region1.RemoveRect(OpRect(13, 13, 4, 4)));
	verify(region1.Includes(10,10));
	verify(region1.Includes(19,10));
	verify(region1.Includes(10,19));
	verify(region1.Includes(19,19));
	verify(!region1.Includes(9,10));
	verify(!region1.Includes(10,9));
	verify(!region1.Includes(9,9));
	verify(!region1.Includes(15,15));
	verify(!region1.Includes(19,20));
	verify(!region1.Includes(20,19));
	verify(!region1.Includes(20,20));

	verify(!region1.Includes(13, 13));
	verify(!region1.Includes(13, 16));
	verify(!region1.Includes(16, 13));
	verify(!region1.Includes(16, 16));
	verify(region1.Includes(12, 13));
	verify(region1.Includes(13, 12));
	verify(region1.Includes(16, 17));
	verify(region1.Includes(17, 16));
}

test("IsEmpty()")
{
	OpRegion region1;

	verify(region1.IsEmpty());

	verify(region1.IncludeRect(OpRect(0,10, 12, 13)));

	verify(!region1.IsEmpty());

	verify(region1.RemoveRect(OpRect(0,10, 12, 13)));

	verify(region1.IsEmpty());

	verify(region1.IncludeRect(OpRect(0,10, 12, 13)));
	region1.Empty();
	verify(region1.IsEmpty());

}

test("GetUnionOf{Intersecting,}Rects()")
{
	OpRegion region1;

	verify(region1.IsEmpty());
	verify(region1.IncludeRect(OpRect(0,0,10,10)));
	verify(region1.IncludeRect(OpRect(20,0,10,10)));
	verify(region1.IncludeRect(OpRect(0,20,10,10)));
	verify(region1.IncludeRect(OpRect(20,20,10,10)));

#ifndef SVG_OPTIMIZE_RENDER_MULTI_PASS
	verify(region1.GetUnionOfIntersectingRects(OpRect(5,5,20,20)).Equals(OpRect(5,5,20,20)));
	verify(region1.GetUnionOfIntersectingRects(OpRect(5,5,10,20)).Equals(OpRect(5,5,5,20)));
#endif // !SVG_OPTIMIZE_RENDER_MULTI_PASS

	verify(region1.GetUnionOfRects().Equals(OpRect(0,0,30,30)));
}

test("Translate()")
{
	OpRegion region1;

	verify(region1.IsEmpty());
	verify(region1.IncludeRect(OpRect(0,0,10,10)));
	verify(region1.IncludeRect(OpRect(20,0,10,10)));
	verify(region1.IncludeRect(OpRect(0,20,10,10)));
	verify(region1.IncludeRect(OpRect(20,20,10,10)));

	verify(region1.GetUnionOfRects().Equals(OpRect(0,0,30,30)));

	region1.Translate(10, 10);

	verify(region1.GetUnionOfRects().Equals(OpRect(10,10,30,30)));

	region1.Translate(-10, -10);

	verify(region1.GetUnionOfRects().Equals(OpRect(0,0,30,30)));
}


test("Duplicate()")
	require SVG_EXTENDED_OP_REGION_API;
{
	// Duplication of empty region:
	OpRegion r;
	OpRegion* rdup = NULL;
	verify(r.Duplicate(rdup) == OpStatus::OK);
	verify(rdup != NULL);
	verify(rdup->IsEmpty() == TRUE);
	OP_DELETE(rdup);
	rdup = NULL;

	// Duplication of filled region
	r.IncludeRect(OpRect(0,0,10,10));
	r.IncludeRect(OpRect(20,0,10,10));
	r.IncludeRect(OpRect(0,20,10,10));
	verify(r.Duplicate(rdup) == OpStatus::OK);
	verify(rdup != NULL);
	verify(!rdup->IsEmpty());
	rdup->RemoveRect(OpRect(0,0,10,10));
	verify(!rdup->IsEmpty());
	rdup->RemoveRect(OpRect(20,0,10,10));
	verify(!rdup->IsEmpty());
	rdup->RemoveRect(OpRect(0,20,10,10));
	verify(rdup->IsEmpty());
	OP_DELETE(rdup);
}

test("IntersectWith()")
	require SVG_EXTENDED_OP_REGION_API;
{
	OpRegion r;

	// Empty test:
	r.IntersectWith(OpRect(10,10,10,10));
	verify(r.IsEmpty());

	// Non-empty test:
	r.IncludeRect(OpRect(0,0,10,10));
	r.IncludeRect(OpRect(20,0,10,10));
	r.IncludeRect(OpRect(0,20,10,10));
	// All inside region:
	verify(r.Includes(3,3));
	verify(r.Includes(27,3));
	verify(r.Includes(3,27));
	verify(r.Includes(7,7));
	verify(r.Includes(23,7));
	verify(r.Includes(7,23));
	// Only inside intersected rect
	verify(!r.Includes(13,13));
	
	// Hashes=old rects, stars=intersecting rect:
	//
	// ##  ##
	// #****#
	//  ****
	//  ****
	// #****
	// ##

	r.IntersectWith(OpRect(5,5,20,20));
	// Outside intersected rect:
	verify(!r.Includes(3,3));
	verify(!r.Includes(27,3));
	verify(!r.Includes(3,27));
	// Intersected:
	verify(r.Includes(7,7));
	verify(r.Includes(23,7));
	verify(r.Includes(7,23));
	// Only inside intersected rect:
	verify(!r.Includes(13,13));
}

