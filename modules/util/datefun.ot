/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2012 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "util.datefun";

include "modules/util/datefun.h";

test("GetTmDate") require UTIL_GET_TM_DATE;
{
    int ret;
	struct tm gmt_time;

	//ret = GetTmDate(NULL, gmt_time);
	//verify(ret == FALSE);

	ret = GetTmDate(UNI_L(""), gmt_time);
	verify(!ret);

	ret = GetTmDate(UNI_L("26 Aug 76 14:30 EDT"), gmt_time); // RFC 822
	verify(ret);
	verify(gmt_time.tm_mday==26 && gmt_time.tm_hour==14 && gmt_time.tm_min == 30 &&
		   gmt_time.tm_sec==0 && gmt_time.tm_mon==7 && gmt_time.tm_year==76);

	ret = GetTmDate(UNI_L("26 Sep 89 14:30:25 EDT"), gmt_time); // RFC 822
	verify(ret);
	verify(gmt_time.tm_mday==26 && gmt_time.tm_hour==14 && gmt_time.tm_min == 30 &&
		   gmt_time.tm_sec==25 && gmt_time.tm_mon==8 && gmt_time.tm_year==89);

	ret = GetTmDate(UNI_L("Friday, 19-Nov-82 16:14:55 EST"), gmt_time); // RFC 850
	verify(ret);
	verify(gmt_time.tm_mday==19 && gmt_time.tm_hour==16 && gmt_time.tm_min == 14 &&
		   gmt_time.tm_sec==55 && gmt_time.tm_mon==10 && gmt_time.tm_year==82 &&
		   gmt_time.tm_wday==5);

	ret = GetTmDate(UNI_L("Monday, 21-10-06 08:37:10 EST"), gmt_time); // RFC 850
	verify(ret);
	verify(gmt_time.tm_mday==21 && gmt_time.tm_hour==8 && gmt_time.tm_min==37 &&
		   gmt_time.tm_sec==10 && gmt_time.tm_mon==9 && gmt_time.tm_year==106 &&
		   gmt_time.tm_wday==1);

// 	ret = GetTmDate(UNI_L("Jan 1 11:22:44 2006"), gmt_time); // ANSI
// 	verify(ret == TRUE);
// 	verify(gmt_time.tm_mday==1 && gmt_time.tm_hour==11 && gmt_time.tm_min==22 &&
// 		   gmt_time.tm_sec==44 && gmt_time.tm_mon==0 && gmt_time.tm_year==106);

	ret = GetTmDate(UNI_L("Not a date"), gmt_time); // RFC 850
	verify(!ret);

}

test("GetDate") require UTIL_GET_DATE;
{
	time_t ret1, ret2;

	ret1 = GetDate("26 Aug 76 14:30 EDT");
	verify(ret1 != 0);

	ret2 = GetDate("Wednesday 26-Aug-76 14:30:00 EDT");
	verify(ret2 != 0);

	verify(ret1 == ret2);
}

test("GetDate overflow") require UTIL_GET_DATE;
{
	time_t ret1 = GetDate("1 Jan 2037 00:00 GMT");
	verify(ret1 != 0);

	time_t ret2 = GetDate("1 Jan 2038 00:00 GMT");
	if (sizeof (time_t) == 4)
		verify(ret2 == ret1);
	else
	{
		verify(ret2 > ret1);

		time_t ret3 = GetDate("1 Jan 9999 00:00 GMT");
		verify(ret3 > ret2);

		time_t ret4 = GetDate("1 Jan 19999 00:00 GMT");
		verify(ret4 > ret3);
	}
}

test("FMakeDate") require UTIL_FMAKE_DATE;
{
	BOOL ret;
	struct tm gt;
	uni_char buf[32]; /* ARRAY OK 2009-04-03 adame */

	gt.tm_year = 106;
	gt.tm_mon = 10;
	gt.tm_wday = 3;
	gt.tm_mday = 29;
	gt.tm_hour = 15;
	gt.tm_min = 50;
	gt.tm_sec = 17;

	ret = FMakeDate(gt, "\247w \247D/\247M-\247y \247h:\247m:\247s", buf, 32);
	verify(ret==TRUE);
	verify(uni_strncmp(buf, UNI_L("Wed 29/11-06 15:50:17"), 24) == 0);
}

test("MakeDate3") require UTIL_MAKE_DATE3;
{
	BOOL ret;
	uni_char buf[32]; /* ARRAY OK 2009-04-03 adame */
	time_t t=0;

	ret = MakeDate3(&t, buf, 32);
	verify(ret==TRUE);
	verify(uni_strncmp(buf, UNI_L("Thu, 01 Jan 1970 00:00:00"), 24) == 0);
}

test("GetThisYear") require UTIL_GET_THIS_YEAR;
{
	int year;
	unsigned int month;
	struct tm *gmt_time;

	// Will work as long as not run 23:59:59 the last day of a month.
	time_t now = op_time(NULL);

	gmt_time = op_localtime(&now);

	year = GetThisYear(&month);

	verify((int)month == gmt_time->tm_mon+1);
	verify(year == gmt_time->tm_year+1900);
}
