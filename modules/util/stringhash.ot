/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2012 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "util.stringhash";

include "modules/util/stringhash.h";

test("Testing StringHash")
{
	StringHash<int> sh;
	int value, value2;

	// Basic functionality testing

	verify(sh.count() == 0);

	verify_success(sh.set("one", 1));
	verify_success(sh.set("two", 2));
	verify_success(sh.set("three", 3));
	verify_success(sh.set("update_me", 10));

	verify(sh.count() == 4);

	verify(sh.get("update_me", value));
	verify(value == 10);
	verify_success(sh.set("update_me", 11));
	value = 0;
	verify(sh.get("update_me", value));
	verify(value == 11);

	verify(sh.count() == 4);

	verify(sh.get("one", value));
	verify(value == 1);
	verify(sh.get("two", value));
	verify(value == 2);
	verify(sh.get("three", value));
	verify(value == 3);

	verify(sh.contains("one"));
	verify(!sh.contains("four"));
	value = 100;
	// Should not modify 'value' since "six" is not in the table
	verify(!sh.get("six", value));
	verify(value == 100);

	// Verify that things don't break when the key is modified after insertion

	char key_array[] = "foo_XY";

	for (int i = 1; i <= 20; ++i)
	{
		key_array[4] = i;
		for (int j = 1; j <= 20; ++j)
		{
			key_array[5] = j;
			verify_success(sh.set(key_array, i + j));
		}
	}
	for (int i = 1; i <= 20; ++i)
	{
		key_array[4] = i;
		for (int j = 1; j <= 20; ++j)
		{
			key_array[5] = j;
			verify(sh.get(key_array, value));
			verify(value == i + j);
		}
	}

	verify(sh.count() == 4 + 20*20);

	/* Update the associated values for the keys above and read back
	   and verify in a separate pass */

	for (int i = 1; i <= 20; ++i)
	{
		key_array[4] = i;
		for (int j = 1; j <= 20; ++j)
		{
			key_array[5] = j;
			verify(sh.contains(key_array));
			verify_success(sh.set(key_array, i + j + 747));
		}
	}
	for (int i = 1; i <= 20; ++i)
	{
		key_array[4] = i;
		for (int j = 1; j <= 20; ++j)
		{
			key_array[5] = j;
			verify(sh.get(key_array, value));
			verify(value == i + j + 747);
		}
	}

	// Verify that copying works

	StringHash<int> *sh_copy;
	verify_success(sh.copy(sh_copy));

	/* Iterate through table and confirm that each key/value pair appears in
	   the copy */

	StringHash<int>::Iterator iter = sh.get_iterator();

	const char *key;
	unsigned count = 0;
	while (iter.get_next(key, value))
	{
		verify(sh_copy->get(key, value2));
		verify(value == value2);
		++count;
	}

	verify(count == 4 + 20*20);
	verify(sh_copy->count() == 4 + 20*20);
	OP_DELETE(sh_copy);

	sh.clear();
	verify(sh.count() == 0);
	verify(!sh.get("one", value));
}
