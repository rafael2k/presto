/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2012 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "util.str";

include "modules/util/str.h";

test("StrEnd")
{
	const char* empty = "";
	const char* one = "a";

	const char* s1 = StrEnd(empty);
	verify(s1 == empty);

	s1 = StrEnd(one);
	verify(s1 == one + 1);

	const uni_char* empty_u = UNI_L("");
	const uni_char* one_u = UNI_L("a");

	const uni_char* s2 = StrEnd(empty_u);
	verify(s2 == empty_u);

	s2 = StrEnd(one_u);
	verify(s2 == one_u + 1);
}

test("IsStr")
{
	BOOL res = IsStr((const char*)NULL);
	verify(!res);

	res = IsStr((const uni_char*)NULL);
	verify(!res);

	res = IsStr("");
	verify(!res);

	res = IsStr("a");
	verify(res);

	res = IsStr(UNI_L(""));
	verify(!res);

	res = IsStr(UNI_L("a"));
	verify(res);
}

test("IsPointerOverlapping")
	require UTIL_POINTER_OVERLAP;
{
	const char* first = "first";
	const char* second = "second";

	BOOL res = IsPointerOverlapping(first, op_strlen(first), second,
	op_strlen(second));
	verify(!res);

	res = IsPointerOverlapping(first, 1, first+1, 1);
	verify(!res);

	res = IsPointerOverlapping(first, 2, first+1, 2);
	verify(res);

	res = IsPointerOverlapping(first, 0, first, 0);
	verify(res);

	res = IsPointerOverlapping(first, 0, first+1, 0);
	verify(!res);
}

test("stripdup")
{
	const char* str[6]; /* ARRAY OK 2009-04-03 adame */
	str[0] = "  \t  stripped  \t  ";
	str[1] = "\t  \tstripped\t  \t";
	str[2] = " stripped ";
	str[3] = "stripped ";
	str[4] = " stripped";
	str[5] = "stripped";

	for (int i=0; i < 6; ++i)
	{
		char* s = stripdup(str[i]);
		verify(op_strcmp(s, "stripped") == 0);
		OP_DELETEA(s);
	}

	char* s = stripdup("");
	verify(*s == 0);
	OP_DELETEA(s);

	s = stripdup(" ");
	verify(*s == 0);
	OP_DELETEA(s);
}

test("uni_stripdup")
{
	const uni_char* str[6]; /* ARRAY OK 2009-04-03 adame */
	str[0] = UNI_L("  \t  stripped  \t  ");
	str[1] = UNI_L("\t  \tstripped\t  \t");
	str[2] = UNI_L(" stripped ");
	str[3] = UNI_L("stripped ");
	str[4] = UNI_L(" stripped");
	str[5] = UNI_L("stripped");

	for (int i=0; i < 6; ++i)
	{
		uni_char* s = uni_stripdup(str[i]);
		verify(uni_strcmp(s, UNI_L("stripped")) == 0);
		OP_DELETEA(s);
	}

	uni_char* s = uni_stripdup(UNI_L(""));
	verify(*s == 0);
	OP_DELETEA(s);

	s = uni_stripdup(UNI_L(" "));
	verify(*s == 0);
	OP_DELETEA(s);
}

test("StrMultiCat")
{
	char s[100]; /* ARRAY OK 2009-04-03 adame */
	*s = 0;

	char* res = StrMultiCat(s, "base", "more", "more");
	verify(res == s);
	verify(op_strcmp(s, "basemoremore") == 0);
	*s = 0;

	res = StrMultiCat(s, "base", "", "", "more");
	verify(res == s);
	verify(op_strcmp(s, "basemore") == 0);
	*s = 0;

	res = StrMultiCat(s, "", "", "", "", "", "", "");
	verify(res == s);
	verify(*s == 0);

	uni_char us[100]; /* ARRAY OK 2009-04-03 adame */
	*us = 0;
	uni_char* resu = StrMultiCat(us, UNI_L("base"), UNI_L("more"),
	UNI_L("more"));
	verify(resu == us);
	verify(uni_strcmp(us, UNI_L("basemoremore")) == 0);
	*us = 0;

	resu = StrMultiCat(us, UNI_L("base"), UNI_L(""), UNI_L(""), UNI_L("more"));
	verify(resu == us);
	verify(uni_strcmp(us, UNI_L("basemore")) == 0);
	*us = 0;

	resu = StrMultiCat(us, UNI_L(""), UNI_L(""), UNI_L(""), UNI_L(""),
	UNI_L(""), UNI_L(""), UNI_L(""));
	verify(resu == us);
	verify(*us == 0);
}

test("StrCatSnprintf")
{
	char buf[10] = "hej"; /* ARRAY OK 2012-02-29 hela */

	int res = StrCatSnprintf(buf, 4+3, "1%d%s", 2, "3");
	verify(res == 3);
	verify_string(buf, "hej123");

	*buf = 0;
	res = StrCatSnprintf(buf, 1+3, "1%d%s", 2, "3");
	verify(res == 3);
	verify_string(buf, "123");
}

test("UniSetStr")
{
	uni_char* buf = NULL;
	OP_STATUS res = UniSetStr(buf, UNI_L("a"));
	verify(OpStatus::IsSuccess(res));
	verify(uni_strcmp(buf, UNI_L("a")) == 0);
	OP_DELETEA(buf); buf = NULL;

	res = UniSetStr(buf, UNI_L(""));
	verify(OpStatus::IsSuccess(res));
	verify(*buf == 0);
	OP_DELETEA(buf); buf = NULL;

	res = UniSetStr(buf, (const uni_char*)NULL);
	verify(OpStatus::IsSuccess(res));
	verify(buf == NULL);
	OP_DELETEA(buf); buf = NULL;
}

test("UniSetStrN")
{
	uni_char* buf = NULL;
	OP_STATUS res = UniSetStrN(buf, UNI_L("opera"), 2);
	verify(OpStatus::IsSuccess(res));
	verify(uni_strcmp(buf, UNI_L("op")) == 0);
	OP_DELETEA(buf); buf = NULL;

	res = UniSetStrN(buf, UNI_L(""), 1);
	verify(OpStatus::IsSuccess(res));
	verify(buf && *buf == 0);
	OP_DELETEA(buf); buf = NULL;

	res = UniSetStrN(buf, (const uni_char*)NULL, 0);
	verify(OpStatus::IsSuccess(res));
	verify(buf == NULL);
	OP_DELETEA(buf); buf = NULL;

	res = UniSetStrN(buf, UNI_L(""), 0);
	verify(OpStatus::IsSuccess(res));
	verify(!buf);
}

test("UniSetStr_NotEmpty") leakcheck;
{
	uni_char* buf = NULL;
	int len = 0;
	OP_STATUS res = UniSetStr_NotEmpty(buf, UNI_L("opera"), &len);
	verify(OpStatus::IsSuccess(res));
	verify(uni_strcmp(buf, UNI_L("opera")) == 0);
	verify(len == 5);
	OP_DELETEA(buf); buf = NULL;

	len = 0;
	res = UniSetStr_NotEmpty(buf, NULL, &len);
	verify(OpStatus::IsSuccess(res));
	verify(buf && *buf == 0);
	verify(len == 0);
	OP_DELETEA(buf); buf = NULL;

	len = 0;
	res = UniSetStr_NotEmpty(buf, UNI_L(""), &len);
	verify(OpStatus::IsSuccess(res));
	verify(buf && *buf == 0);
	verify(len == 0);
	OP_DELETEA(buf); buf = NULL;
}

test("UniSetNewStr") leakcheck;
{
	uni_char* s = UniSetNewStr(UNI_L("opera"));
	verify(uni_strcmp(s, UNI_L("opera")) == 0);
	OP_DELETEA(s);

	s = UniSetNewStr(UNI_L(""));
	verify(s && *s == 0);
	OP_DELETEA(s);

	s = UniSetNewStr((const uni_char*)NULL);
	verify(s == NULL);
}

test("UniSetNewStrN") leakcheck;
{
	uni_char* s = UniSetNewStrN(UNI_L("opera"), 2);
	verify(uni_strcmp(s, UNI_L("op")) == 0);
	OP_DELETEA(s);

	s = UniSetNewStrN(UNI_L(""), 1);
	verify(s && *s == 0);
	OP_DELETEA(s);

	s = UniSetNewStrN((const uni_char*)NULL, 0);
	verify(s == NULL);

	s = UniSetNewStrN((const uni_char*)NULL, 1);
	verify(s == NULL);
}

test("UniSetNewStr_NotEmpty") leakcheck;
{
	uni_char* buf = UniSetNewStr_NotEmpty(UNI_L("opera"));
	verify(uni_strcmp(buf, UNI_L("opera")) == 0);
	OP_DELETEA(buf); buf = NULL;

	buf = UniSetNewStr_NotEmpty((const uni_char*)NULL);
	verify(buf && *buf == 0);
	OP_DELETEA(buf); buf = NULL;

	buf = UniSetNewStr_NotEmpty(UNI_L(""));
	verify(buf && *buf == 0);
	OP_DELETEA(buf); buf = NULL;
}

test("SetStr") leakcheck;
{
	char* buf = NULL;
	OP_STATUS res = SetStr(buf, "a");
	verify(OpStatus::IsSuccess(res));
	verify(op_strcmp(buf, "a") == 0);
	OP_DELETEA(buf); buf = NULL;

	res = SetStr(buf, "");
	verify(OpStatus::IsSuccess(res));
	verify(*buf == 0);
	OP_DELETEA(buf); buf = NULL;

	res = SetStr(buf, (const char*)NULL);
	verify(OpStatus::IsSuccess(res));
	verify(buf == NULL);
	OP_DELETEA(buf); buf = NULL;

	uni_char* ubuf = NULL;
	res = SetStr(ubuf, "a");
	verify(OpStatus::IsSuccess(res));
	verify(uni_strcmp(ubuf, UNI_L("a")) == 0);
	OP_DELETEA(ubuf); ubuf = NULL;

	res = SetStr(ubuf, "");
	verify(OpStatus::IsSuccess(res));
	verify(*ubuf == 0);
	OP_DELETEA(ubuf); ubuf = NULL;

	res = SetStr(ubuf, (const char*)NULL);
	verify(OpStatus::IsSuccess(res));
	verify(ubuf == NULL);
	OP_DELETEA(ubuf); ubuf = NULL;

	ubuf = NULL;
	res = SetStr(ubuf, UNI_L("a"));
	verify(OpStatus::IsSuccess(res));
	verify(uni_strcmp(ubuf, UNI_L("a")) == 0);
	OP_DELETEA(ubuf); ubuf = NULL;

	res = SetStr(ubuf, UNI_L(""));
	verify(OpStatus::IsSuccess(res));
	verify(*ubuf == 0);
	OP_DELETEA(ubuf); ubuf = NULL;

	res = SetStr(ubuf, (const uni_char*)NULL);
	verify(OpStatus::IsSuccess(res));
	verify(ubuf == NULL);
	OP_DELETEA(ubuf); ubuf = NULL;

	res = SetStr(buf, "a", 1);
	verify(OpStatus::IsSuccess(res));
	verify(op_strcmp(buf, "a") == 0);
	OP_DELETEA(buf); buf = NULL;

	res = SetStr(buf, "", 1);
	verify(OpStatus::IsSuccess(res));
	verify(buf && *buf == 0);
	OP_DELETEA(buf); buf = NULL;
}

test("SetNewStr") leakcheck;
{
	char* s = SetNewStr("opera");
	verify(op_strcmp(s, "opera") == 0);
	OP_DELETEA(s);

	s = SetNewStr("");
	verify(s && *s == 0);
	OP_DELETEA(s);

	s = SetNewStr((const char*)NULL);
	verify(s == NULL);

	uni_char* u = SetNewStr(UNI_L("opera"));
	verify(uni_strcmp(u, UNI_L("opera")) == 0);
	OP_DELETEA(u);

	u = SetNewStr(UNI_L(""));
	verify(u && *u == 0);
	OP_DELETEA(u);

	u = SetNewStr((const uni_char*)NULL);
	verify(u == NULL);
}

test("SetNewStr_NotEmpty") leakcheck;
{
	char* buf = SetNewStr_NotEmpty("opera");
	verify(op_strcmp(buf, "opera") == 0);
	OP_DELETEA(buf); buf = NULL;

	buf = SetNewStr_NotEmpty((const char*)NULL);
	verify(buf && *buf == 0);
	OP_DELETEA(buf); buf = NULL;

	buf = SetNewStr_NotEmpty("");
	verify(buf && *buf == 0);
	OP_DELETEA(buf); buf = NULL;
}

test("SetStr_NotEmpty")
{
	/* Set the content of a string and return
	   the length of the returned string. */
	char* buf = NULL;

	int len = op_strlen("a");
	verify_success(SetStr_NotEmpty(buf, "a", &len));
	verify_string(buf, "a");
	verify(static_cast<int>(op_strlen(buf)) == len);
	OP_DELETEA(buf);
	buf = NULL;

	verify_success(SetStr_NotEmpty(buf, "opera"));
	verify_string(buf, "opera");
	OP_DELETEA(buf);
	buf = NULL;

	len = op_strlen("");
	verify_success(SetStr_NotEmpty(buf, "", &len));
	verify(buf && *buf == 0);
	verify(static_cast<int>(op_strlen(buf)) == len);
	OP_DELETEA(buf);
	buf = NULL;

	verify_success(SetStr_NotEmpty(buf, NULL, &len));
	verify(buf && *buf == 0);
	verify(static_cast<int>(op_strlen(buf)) == len);
}
finally
{
	OP_DELETEA(buf);
}

test("MatchExpr")
{
	/* Check if a string equals or contains a substring.
	   Input parameter decides "equals or contains".
	   Default value is "contains". */
	verify(MatchExpr(UNI_L("opera"), UNI_L("opera"), TRUE));
	verify(MatchExpr(UNI_L("opera"), UNI_L("opera"), FALSE));
	verify(!MatchExpr(UNI_L("opera"), UNI_L("o"), TRUE));
	verify(MatchExpr(UNI_L("opera"), UNI_L("o")));
	verify(MatchExpr(UNI_L("opera"), UNI_L("o"), FALSE));
	verify(!MatchExpr(UNI_L("o"), UNI_L("opera"), TRUE));
	verify(!MatchExpr(UNI_L("o"), UNI_L("opera"), FALSE));
	verify(!MatchExpr(UNI_L("opera"), NULL, TRUE));
	verify(!MatchExpr(UNI_L("opera"), NULL, FALSE));
	verify(!MatchExpr(NULL, UNI_L("opera"), TRUE));
	verify(!MatchExpr(NULL, UNI_L("opera"), FALSE));
	verify(!MatchExpr(NULL, NULL, TRUE));
	verify(!MatchExpr(NULL, NULL));
	verify(!MatchExpr(UNI_L(""), UNI_L("opera"), TRUE));
	verify(!MatchExpr(UNI_L(""), UNI_L("opera"), FALSE));
	verify(!MatchExpr(UNI_L("opera"), UNI_L(""), TRUE));
	verify(MatchExpr(UNI_L("opera"), UNI_L(""), FALSE));
	verify(!MatchExpr(UNI_L(""), UNI_L(" "), TRUE));
	verify(!MatchExpr(UNI_L(""), UNI_L(" "), FALSE));
	verify(!MatchExpr(UNI_L(" "), UNI_L(""), TRUE));
	verify(MatchExpr(UNI_L(" "), UNI_L(""), FALSE));
}

test("strnstr")
{
	/* Search for the first occurrence of a substring in a string. */
	unsigned char buf[] = { 'o', 'p', 'e', 'r', 'a', 0 };
	verify_string((const char*)strnstr(buf, 5, (const unsigned char*)""), "opera");
	verify(strnstr(buf, 4, (const unsigned char*)"a") == NULL); // Shorter length than the position of 'a'.
	verify(strnstr(buf, 0, (const unsigned char*)"a") == NULL); // Shorter length than the position of 'a'.
	verify_string((const char*)strnstr(buf, 5, (const unsigned char*)"op"), "opera");
	verify_string((const char*)strnstr(buf, 5, (const unsigned char*)"pe"), "pera");
	verify_string((const char*)strnstr(buf, 5, (const unsigned char*)"a"), "a");
	verify_string((const char*)strnstr(buf, 6, (const unsigned char*)"a"), "a");
	verify_string((const char*)strnstr(buf, 7, (const unsigned char*)"a"), "a");
	verify(strnstr(buf, 5, (const unsigned char*)"b") == NULL);
}

test("StrReplaceChars")
{
	/* Replace all occurences of a character in 'buf' with a new character. */
	uni_char buf[] = { 'o', 'p', 'e', 'r', 'a', 0 };
	verify(StrReplaceChars(NULL, 'o', 'i') == NULL);
	verify_string(StrReplaceChars(buf, 'a', 'e'), "opere");
	verify_string(StrReplaceChars(buf, 'e', 'e'), "opere");
	verify_string(StrReplaceChars(buf, 'e', 'o'), "oporo");
	verify_string(StrReplaceChars(buf, 'o', '\\'), "\\p\\r\\");
	verify_string(StrReplaceChars(buf, '\\', '\t'), "\tp\tr\t");
}

test("ExtractFileName") require UTIL_EXTRACT_FILE_NAME;
{
	uni_char fn[32], ext[32]; /* ARRAY OK 2009-04-03 adame */
	ExtractFileName(UNI_L("http://www.opera.com/index.html"), fn, 6, ext, 6);

	verify(uni_strcmp(fn, UNI_L("index")) == 0);
	verify(uni_strcmp(ext, "*.") == 0);
	verify(uni_strcmp(ext + uni_strlen(ext) + 1, "*.") == 0);

	ExtractFileName(UNI_L("http://www.opera.com/index.html"), fn, 32, ext, 32);

	verify(uni_strcmp(fn, UNI_L("index.html")) == 0);
	verify(uni_strcmp(ext, "*.html") == 0);
	verify(uni_strcmp(ext + uni_strlen(ext) + 1, "*.html") == 0);

	ExtractFileName(UNI_L("http://www.opera.com/index.html?foo=bar"), fn, 32, ext, 32);

	verify(uni_strcmp(fn, UNI_L("index.html")) == 0);
	verify(uni_strcmp(ext, "*.html") == 0);
	verify(uni_strcmp(ext + uni_strlen(ext) + 1, "*.html") == 0);

	ExtractFileName(UNI_L("http://www.opera.com/image.jpe"), fn, 32, ext, 32);

	verify(uni_strcmp(fn, UNI_L("image.jpg")) == 0);
	verify(uni_strcmp(ext, "*.jpg") == 0);
	verify(uni_strcmp(ext + uni_strlen(ext) + 1, "*.jpg") == 0);

	ExtractFileName(UNI_L("/usr/include/stdio.h"), fn, 5, ext, 1);
	verify(uni_strcmp(fn, UNI_L("stdi")) == 0);
	verify(uni_strcmp(ext, UNI_L("")) == 0);
}

test("StrTrimLeftStrings") require UTIL_STRTRIMCHARS;
{
	uni_char **rm, str[11]; /* ARRAY OK 2009-04-03 adame */

	rm = OP_NEWA(uni_char*, 2);

	rm[0] = OP_NEWA(uni_char, 4);
	rm[1] = OP_NEWA(uni_char, 4);

	uni_strcpy(str, UNI_L("Foobarrest"));
	uni_strcpy(rm[0], UNI_L("foo"));
	uni_strcpy(rm[1], UNI_L("bar"));

	StrTrimLeftStrings(str, (const uni_char **)rm, 2, 1);
	verify(uni_strcmp(str, UNI_L("Foobarrest")) == 0);
	StrTrimLeftStrings(str, (const uni_char **)rm, 2, 0);
	verify(uni_strcmp(str, UNI_L("rest")) == 0);

	OP_DELETEA(rm[0]);
	OP_DELETEA(rm[1]);
	OP_DELETEA(rm);
}

test("RemoveChars") require UTIL_REMOVE_CHARS;
{
	OpString str1;
	str1.Set(UNI_L("foobar"), 6);
	OpStringC str2(UNI_L("ao")), str3(UNI_L("c"));

	RemoveChars(str1, str2);
	verify(str1.Compare(UNI_L("fbr")) == 0);

	str1.Set(UNI_L("foobar"), 6);
	RemoveChars(str1, str3);
	verify(str1.Compare(UNI_L("foobar")) == 0);
}

test("SetNewCatStr") require UTIL_SET_NEW_CAT_STR;
{
	char *ret;
	uni_char *uni_ret;

	ret = SetNewCatStr("foo", "bar");
	uni_ret = SetNewCatStr(UNI_L("foo"), UNI_L("bar"));

	verify(op_strcmp(ret, "foobar") == 0);
	verify(uni_strcmp(uni_ret, UNI_L("foobar")) == 0);

	OP_DELETEA(ret);
	OP_DELETEA(uni_ret);
}

test("FindFileExtension") require UTIL_FIND_FILE_EXT;
{
	uni_char path[32]; /* ARRAY OK 2009-04-03 adame */
	const uni_char *ret;

	uni_strcpy(path, UNI_L("http://www.opera.com/index.htm"));
	ret = FindFileExtension(path);
	verify(uni_strcmp(ret, UNI_L("htm")) == 0);
}

test("CheckKeywordsIndex") require UTIL_CHECK_KEYWORD_INDEX;
{
	int ret;
	KeywordIndex keywords[5];

	keywords[0].keyword = "else";
	keywords[0].index = 17;

	keywords[1].keyword = "for";
	keywords[1].index = 1;

	keywords[2].keyword = "if";
	keywords[2].index = 2;

	keywords[3].keyword = "int";
	keywords[3].index = 3;

	keywords[4].keyword = "while";
	keywords[4].index = 4;

	ret = CheckKeywordsIndex("else", keywords, 5);
	verify(ret == 17);

	ret = CheckKeywordsIndex("while", keywords, 5);
	verify(ret == 4);

	ret = CheckKeywordsIndex("keyword", keywords, 5);
	verify(ret == 17);

	ret = CheckKeywordsIndex(NULL, keywords, 5);
	verify(ret == 17);

	ret = CheckKeywordsIndex("while", NULL, 0);
	verify(ret == -1);

	/* Test with parameter "len" of keyword string. */
	verify(CheckKeywordsIndex("i", 1, keywords, 5) == 2); // First "i".
	verify(CheckKeywordsIndex("in", 2, keywords, 5) == 3); // First "in".
	verify(CheckKeywordsIndex("in", 1, keywords, 5) == 2); // First "i".
	verify(CheckKeywordsIndex("in", 2, keywords, 3) == 17); // Not found.
	verify(CheckKeywordsIndex("i", 1, NULL, 0) == -1); // No search.
}

test("CheckStartsWithKeywordIndex") require UTIL_CHECK_KEYWORD_INDEX;
{
	KeywordIndex keywords[5];

	keywords[0].keyword = "if";
	keywords[0].index = 17;

	keywords[1].keyword = "int";
	keywords[1].index = 1;

	keywords[2].keyword = "i";
	keywords[2].index = 2;

	keywords[3].keyword = "for";
	keywords[3].index = 3;

	keywords[4].keyword = "else";
	keywords[4].index = 4;

	verify(CheckStartsWithKeywordIndex("else", keywords, 5) == 4); // First "else".
	verify(CheckStartsWithKeywordIndex("keyword", keywords, 5) == 17); // Not found.
	verify(CheckStartsWithKeywordIndex("i", keywords, 5) == 2); // First "i".
	verify(CheckStartsWithKeywordIndex("int", keywords, 5) == 1); // First "int".
	verify(CheckStartsWithKeywordIndex("for", keywords, 5) == 3); // First "for".
	verify(CheckStartsWithKeywordIndex("for", keywords, 3) == 17); // Not found.
	verify(CheckStartsWithKeywordIndex("for", keywords, 0) == 17); // Not found.
	verify(CheckStartsWithKeywordIndex("for", NULL, 0) == -1); // No search.
	verify(CheckStartsWithKeywordIndex(NULL, keywords, 5) == 17); // Not found.
}

table uni_snprintf_s_tests(const char* test_name, size_t buf_len, const uni_char* format, const uni_char* arg, const char* expected_result)
{
	{ " one ", 256, UNI_L(" %1 "), UNI_L("ONE"), " ONE " },
	{ "one %2", 256, UNI_L("%1 %2"), UNI_L("ONE"), "ONE %2" },
	{ "NULL", 256, UNI_L("%1"), NULL, "%1" },
	{ "short-buf", 8, UNI_L("some%1"), UNI_L("one23"), "someone" },
	{ "%%1 one", 256, UNI_L("%%1 %1"), UNI_L("ONE"), "%1 ONE" }
}

foreach (test_name, buf_len, format, arg, expected_result) from uni_snprintf_s_tests
{
	test("uni_snprintf_s(" test_name ")")
	{
		uni_char buf[buf_len]; /* ARRAY OK 2011-05-31 markuso */
		uni_snprintf_s(buf, buf_len, format, arg);
		verify_string(buf, expected_result);
	}
}

table uni_snprintf_ss_tests(const char* test_name, size_t buf_len, const uni_char* format, const uni_char* arg1, const uni_char* arg2, const char* expected_result)
{
	{ "one two", 256, UNI_L("%1 %2"), UNI_L("ONE"), UNI_L("TWO"), "ONE TWO" },
	{ "two one", 256, UNI_L("%2 %1"), UNI_L("ONE"), UNI_L("TWO"), "TWO ONE" },
	{ "short-buf", 4, UNI_L("%1 %2"), UNI_L("ONE"), UNI_L("TWO"), "ONE" },
	{ "one two %3", 256, UNI_L("%1 %2 %3"), UNI_L("ONE"), UNI_L("TWO"), "ONE TWO %3" },
	{ "one %% two", 256, UNI_L("%1 %% %2"), UNI_L("ONE"), UNI_L("TWO"), "ONE % TWO" },
	{ "one %s two", 256, UNI_L("%1 %s %2"), UNI_L("ONE"), UNI_L("TWO"), "ONE %s TWO" },
	{ "%1 two", 256, UNI_L("%1 %2"), NULL, UNI_L("TWO"), "%1 TWO" },
	{ "one %2", 256, UNI_L("%1 %2"), UNI_L("ONE"), NULL, "ONE %2" }
}

foreach (test_name, buf_len, format, arg1, arg2, expected_result) from uni_snprintf_ss_tests
{
	test("uni_snprintf_ss(" test_name ")")
	{
		uni_char buf[buf_len]; /* ARRAY OK 2011-05-27 markuso */
		uni_snprintf_ss(buf, buf_len, format, arg1, arg2);
		verify_string(buf, expected_result);
	}
}

table uni_snprintf_si_tests(const char* test_name, size_t buf_len, const uni_char* format, const char* expected_result)
{
	{ "one 2", 256, UNI_L("%1 %2"), "ONE 2" },
	{ "2 one", 256, UNI_L("%2 %1"), "2 ONE" },
	{ "short-buf", 4, UNI_L("%1 %2"), "ONE" },
	{ "one 2 %3", 256, UNI_L("%1 %2 %3"), "ONE 2 %3" }
	{ "one %% 2", 256, UNI_L("%1 %% %2"), "ONE % 2" },
	{ "one %s 2", 256, UNI_L("%1 %s %2"), "ONE %s 2" }
}

foreach (test_name, buf_len, format, expected_result) from uni_snprintf_si_tests
{
	test("uni_snprintf_si(" test_name ")")
	{
		uni_char buf[buf_len]; /* ARRAY OK 2011-05-27 markuso */
		uni_snprintf_si(buf, buf_len, format, UNI_L("ONE"), 2);
		verify_string(buf, expected_result);
	}
}

table uni_snprintf_sss_tests(const char* test_name, size_t buf_len, const uni_char* format, const uni_char* arg1, const uni_char* arg2, const uni_char* arg3, const char* expected_result)
{
	{ "one two three", 256, UNI_L("%1 %2 %3"), UNI_L("ONE"), UNI_L("TWO"), UNI_L("THREE"), "ONE TWO THREE" },
	{ "two three one", 256, UNI_L("%2 %3 %1"), UNI_L("ONE"), UNI_L("TWO"), UNI_L("THREE"), "TWO THREE ONE" },
	{ "two two two", 256, UNI_L("%2 %2 %2"), UNI_L("ONE"), UNI_L("TWO"), UNI_L("THREE"), "TWO TWO TWO" },
	{ "short-buf", 6, UNI_L("%1 %2 %3"), UNI_L("ONE"), UNI_L("TWO"), UNI_L("THREE"), "ONE T" },
	{ "one two three %4", 256, UNI_L("%1 %2 %3 %4"), UNI_L("ONE"), UNI_L("TWO"), UNI_L("THREE"), "ONE TWO THREE %4" },
	{ "three %%1 two", 256, UNI_L("%3 %%1 %2"), UNI_L("ONE"), UNI_L("TWO"), UNI_L("THREE"), "THREE %1 TWO" },
	{ "one two NULL", 256, UNI_L("%1 %2 %3"), UNI_L("ONE"), UNI_L("TWO"), NULL, "ONE TWO %3" },
	{ "one NULL three", 256, UNI_L("%1 %2 %3"), UNI_L("ONE"), NULL, UNI_L("THREE"), "ONE %2 THREE" },
	{ "NULL two three", 256, UNI_L("%1 %2 %3"), NULL, UNI_L("TWO"), UNI_L("THREE"), "%1 TWO THREE" }
}

foreach (test_name, buf_len, format, arg1, arg2, arg3, expected_result) from uni_snprintf_sss_tests
{
	test("uni_snprintf_sss(" test_name ")")
	{
		uni_char buf[buf_len]; /* ARRAY OK 2011-05-31 markuso */
		uni_snprintf_sss(buf, buf_len, format, arg1, arg2, arg3);
		verify_string(buf, expected_result);
	}
}

test("IsWhiteSpaceOnly()")
{
	verify( IsWhiteSpaceOnly(UNI_L(" ")));
	verify(!IsWhiteSpaceOnly(UNI_L("     f")));
	verify(!IsWhiteSpaceOnly(UNI_L("\x2000\x2000\x2000\x2001")));
	verify(!IsWhiteSpaceOnly(UNI_L("\x2000\x2000\x2000\x2001...foo")));
	verify(!IsWhiteSpaceOnly(UNI_L("\x2000\x2000\x2000\x2001\x3000")));
}

test("StrToOpFileLength testing 0")
{
	const char *number_string = "0";

	OpFileLength length = 1;

	verify(StrToOpFileLength(number_string, &length) == OpStatus::OK);
	verify(length == 0);
}

test("StrToOpFileLength testing leading zero")
{
	const char *number_string = "000012345689";

	OpFileLength length = 1;

	verify(StrToOpFileLength(number_string, &length) == OpStatus::OK);
	verify(length == 12345689);
}

test("StrToOpFileLength just number decimal")
{
	const char *number_string = "1073741824";

	OpFileLength length = 1;

	verify(StrToOpFileLength(number_string, &length) == OpStatus::OK);
	verify(length == 1073741824);

	const char *number_string2 = " \t1073741824";

	length = 1;

	verify(StrToOpFileLength(number_string2, &length) == OpStatus::OK);
	verify(length == 1073741824);
}

test("StrToOpFileLength no number")
{
	const char *number_string = " this is no number";
	OpFileLength length = 1;

	verify(StrToOpFileLength(number_string, &length) == OpStatus::ERR);
	verify(length == 0);
}

test("StrToOpFileLength ERR_OUT_OF_RANGE")
{
	OpFileLength length = 1;
	if (sizeof(OpFileLength) == 8)
	{
		verify(StrToOpFileLength(" 18446744073709551616", &length) == OpStatus::ERR_OUT_OF_RANGE); // 2^64
		verify(length == 0);
	}
	else if (sizeof(OpFileLength) == 4)
	{
		verify(StrToOpFileLength(" 4294967296", &length) == OpStatus::ERR_OUT_OF_RANGE); // 2^32
		verify(length == 0);
	}

}


test("StrToOpFileLength !OPFILE_LENGTH_IS_SIGNED")
	require undefined OPFILE_LENGTH_IS_SIGNED;
{
	OpFileLength length = 1;
	if (sizeof(OpFileLength) == 8)
	{
		verify(StrToOpFileLength(" 18446744073709551615", &length) == OpStatus::OK); // 2^64 -1
		verify(length ==  ~(OpFileLength)0); // 2^64 - 1
	}
	else if (sizeof(OpFileLength) == 4)
	{
		verify(StrToOpFileLength(" 4294967295", &length) == OpStatus::OK); // 2^32 - 1
		verify(length == ~(OpFileLength)0); // 2^32 - 1
	}

	verify(sizeof(OpFileLength) == 4 || sizeof(OpFileLength) == 8);
}

test("StrToOpFileLength OPFILE_LENGTH_IS_SIGNED and ERR_OUT_OF_RANGE")
	require OPFILE_LENGTH_IS_SIGNED;
{
	OpFileLength length = 1;
	if (sizeof(OpFileLength) == 8)
	{
		verify(StrToOpFileLength("9223372036854775808", &length) == OpStatus::ERR_OUT_OF_RANGE); // 2^63
		verify(length == 0);

	}
	else if (sizeof(OpFileLength) == 4)
	{
		verify(StrToOpFileLength("2147483648", &length) == OpStatus::ERR_OUT_OF_RANGE); // 2^31
		verify(length == 0);
	}

	verify(sizeof(OpFileLength) == 4 || sizeof(OpFileLength) == 8);
}

test("StrToOpFileLength !OPFILE_LENGTH_IS_SIGNED")
	require undefined OPFILE_LENGTH_IS_SIGNED;
{
	OpFileLength length = 1;
	if (sizeof(OpFileLength) == 8)
	{
		verify(StrToOpFileLength("9223372036854775808", &length) == OpStatus::OK);  // 2^63
		verify(length == ((OpFileLength)1) << 63 );

	}

	verify(StrToOpFileLength("2147483648", &length) == OpStatus::OK); // 2^31
	verify(length == ((OpFileLength)1) << 31 );

	verify(sizeof(OpFileLength) == 4 || sizeof(OpFileLength) == 8);

}

test("StrToOpFileLength OPFILE_LENGTH_IS_SIGNED || !OPFILE_LENGTH_IS_SIGNED")
{
	OpFileLength length = 1;
	if (sizeof(OpFileLength) == 8)
	{
		verify(StrToOpFileLength(" 9223372036854775807", &length) == OpStatus::OK);  // 2^63 - 1
		verify(length == (((OpFileLength)1) << 62 ) - 1  + ((OpFileLength)1 << 62)) ; // Hack to avoid overflow warning

	}
	else if (sizeof(OpFileLength) == 4)
	{
		verify(StrToOpFileLength(" 2147483647", &length) == OpStatus::OK);  // 2^31 - 1
		verify(length == 2147483647);

	}
	verify(sizeof(OpFileLength) == 4 || sizeof(OpFileLength) == 8);
}

test("StrToOpFileLength - not accepted")
{
	const char *number_string = "-1"; // 2^63 - 1
	OpFileLength length = 1;
	verify(StrToOpFileLength(number_string, &length) == OpStatus::ERR);
	verify(length == 0);
}

test("StrToOpFileLength different base conversion")
{
	OpFileLength length;
	verify(StrToOpFileLength("0xabab", &length, 0) == OpStatus::OK);
	verify(length == 0xabab);

	verify(StrToOpFileLength("0xgggg", &length, 0) == OpStatus::ERR);
	verify(StrToOpFileLength("0xgggg", &length, 16) == OpStatus::ERR);
	verify(StrToOpFileLength("0xffff", &length, 0) == OpStatus::OK);
	verify(length == 0xffff);

	verify(StrToOpFileLength("0xffff", &length, 16) == OpStatus::OK);
	verify(length == 0xffff);

	verify(StrToOpFileLength("00xffff", &length, 0) == OpStatus::OK); // autodected to base 8, and parses up to the 'x'
	verify(length == 0);

	verify(StrToOpFileLength("00xffff", &length, 16) == OpStatus::OK); // Parses up to 'x'
	verify(length == 0);


	verify(StrToOpFileLength("8888", &length, 8) == OpStatus::ERR); // 8 is not a digit in 8-base, no number found.
	verify(StrToOpFileLength("08888", &length, 8) == OpStatus::OK); // 8 is not a digit in 8-base, but 0 is parsed and result is ok.
	verify(StrToOpFileLength("08888", &length, 0) == OpStatus::OK);
	verify(StrToOpFileLength("07777", &length, 0) == OpStatus::OK);
	verify(length == 4095);

	verify(StrToOpFileLength("1111", &length, 2) == OpStatus::OK);
	verify(length == 0x0f);
}

/* string, expected result, should the test pass */
table FileLengths (char*, OpFileLength, BOOL)
{
	{ "13tusen200", 13, TRUE },
	{ "0000000", 0, TRUE },
	{ "0 zero", 0, TRUE }, // also valid
	{ "0", 0, TRUE }, // special case handled because _atoi64() return 0 on error on Windows
	{ "  0000", 0, TRUE }, // special case handled because _atoi64() return 0 on error on Windows
	{ "  0000 ", 0, TRUE }, // special case handled because _atoi64() return 0 on error on Windows
	{ " 0000  ", 0, TRUE }, // special case handled because _atoi64() return 0 on error on Windows
	{ "0000017", 17, TRUE }, // *not* (octal)017 == (decimal)15
	{ "0x11", 0, TRUE }, // *not* (hex)11 == (decimal)17
	{ "\t4711 4712  ", 4711, TRUE }, // only the first number counts
	{ "0 42", 0, TRUE }, // even if it's zero
	{ "17abcd  ", 17, TRUE },
	// { "\v\f\r\n\t 17  ", 17, TRUE }, // see CORE-28389; uncomment when it's fixed.
	{ "  1", 1, TRUE },
	{ "  1 ", 1, TRUE },
	{ "ab17cd  ", 0, FALSE },
	{ "", 0, FALSE },
	{ "   ", 0, FALSE },
		// See bug DSK-168238 for the next three:
	{ " -42", 0, FALSE }, // but see TWEAK_POSIX_NEGATIVE_FILELENGTH; treats as (1<<32)-42
	{ " 42 - meaningful", 42, TRUE }, // but don't be too eager when "fixing" it
	{ "-12884901905", 0, FALSE }, // -17 -3*(1<<32); *must* fail, not give (1<<32)-17.
		// See DSK-285993 for why we have the next five tests:
	{ "18446744073709551617", 0, FALSE}, // 2**64 + 1 (assumes sizeof(OpFileLength) <= 8)
	{ "3336402735171707160320", 0, FALSE},
	{ "999999999999999999999999999999999999999999999999999999999999", 0, FALSE },
	{},
}

foreach (str, number, shouldpass) from FileLengths
{
	test("StrToOpFileLength stress test: " str) leakcheck;
	{
		// initialize to some value that could not be returned by StrToOpFileLength
		OpFileLength result = static_cast<OpFileLength>(~0) - 16;
		verify(OpStatus::IsSuccess(StrToOpFileLength(str, &result)) == shouldpass);
		if (shouldpass && result != number)
			output("expected: %d, got: %d\n", number, result);

		verify(!shouldpass || result == number);
	}
}

test("StrToOpFileLength stress test: large (but not too large) value") leakcheck;
{
	// Avoid compile errors for different definitions of OpFileLength on
	// various platforms.
#if FILE_LENGTH_MAX > 0xffffffffu
	// OpFileLength is greater than 32-bit.
	const char *TEST_STRING = "1234567890123456789";
	const OpFileLength TEST_LENGTH = OP_INT64(1234567890123456789);
#else
	// OpFileLength is 32-bit.
	const char *TEST_STRING = "1234567890";
	const OpFileLength TEST_LENGTH = 1234567890;
#endif // FILE_LENGTH_MAX > 0xffffffffu

	OpFileLength result = 0;
	verify_success(StrToOpFileLength(TEST_STRING, &result));
	verify(result == TEST_LENGTH);
}

test("ConvertHexToUnicode")
{
	int i = 0;
	verify(ConvertHexToUnicode(0, 6, i, UNI_L("10FFFF")) == 0x10FFFF);
	verify(i == 0);
	verify(ConvertHexToUnicode(1, 6, i, UNI_L("10FFFF")) == 0xFFFF);
	verify(i == 1);
	verify(ConvertHexToUnicode(0, 6, i, UNI_L("20FFFF")) == 0xFFFF);
	verify(i == 2);
	verify(ConvertHexToUnicode(0, 6, i, UNI_L("XXXXFF")) == 0xFF);
	verify(i == 4);
	verify(ConvertHexToUnicode(0, 6, i, UNI_L("XXXXXX")) == 0);
	verify(i == 6);
}
