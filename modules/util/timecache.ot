/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2003-2004 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Karlsson
*/

group "util.timecache";
require init;
require HAVE_TIMECACHE;

include "modules/util/timecache.h";
include "modules/hardcore/timer/optimer.h";

// -- Global variables ---------------------------------------------------

global
{
	class OpTimer *timer = NULL;

	class myTimerListener : public OpTimerListener
	{
	public:
		myTimerListener()
		{
			m_start_time = g_timecache->CurrentTime();
		}

	private:
		void OnTimeOut(OpTimer *timer)
		{
			// All OK.
			if (m_start_time != g_timecache->CurrentTime())
			{
				ST_passed();
			}
			else
			{
				ST_failed("Time has not changed");
			}
		}
		time_t m_start_time;
	};
}

// -- Tests --------------------------------------------------------------

test("Testing that TimeCache exists")
{
	verify(g_timecache != NULL);
}

test("TimeCache::CurrentTime")
	require success "Testing that TimeCache exists";
	async;
{
	timer = OP_NEW(OpTimer, ());
	if (!timer)
	{
		ST_failed("Failed to create timer");
	}
	else
	{
		myTimerListener *notifier = OP_NEW(myTimerListener, ());
		if (notifier)
		{
			// The listener in the global section will call ST_passed(). 
			timer->SetTimerListener(notifier); 
			timer->Start(3000);
		}
		else
		{
			ST_failed("Failed to create timer listener");
		}
	}
}

// -- Global cleanup -----------------------------------------------------

exit
{
	OP_DELETE(timer);
}
