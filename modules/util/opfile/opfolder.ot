/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "util.opfile.opfolder";
include "modules/util/opfile/opfolder.h";

global
{
#ifdef SYS_CAP_FILESYSTEM_HAS_DRIVES
#define ST_OPFOLDER_ABS_PATH_PREFIX "C:\\"
#else
#define ST_OPFOLDER_ABS_PATH_PREFIX "/"
#endif

	OP_STATUS setup_basic_foldermanager(OpFolderManager ** ret_fm)
	{
		OpFolderManager *fm = OP_NEW(OpFolderManager, ());
		fm->InitL();

		// UtilModule first sets all absolute folders...
		OpString s;
		RETURN_IF_ERROR(s.Set(ST_OPFOLDER_ABS_PATH_PREFIX "usr" PATHSEP "share" PATHSEP "opera" PATHSEP));
		RETURN_IF_ERROR(fm->SetFolderPath(OPFILE_RESOURCES_FOLDER, s, OPFILE_ABSOLUTE_FOLDER));
		RETURN_IF_ERROR(s.Set(ST_OPFOLDER_ABS_PATH_PREFIX "home" PATHSEP "user" PATHSEP ".opera"));
		RETURN_IF_ERROR(fm->SetFolderPath(OPFILE_HOME_FOLDER, s, OPFILE_ABSOLUTE_FOLDER));

#ifdef FOLDER_PARENT_SUPPORT
		// ...And after the absolute folders, it sets the non-absolute ones
		RETURN_IF_ERROR(s.Set("styles" PATHSEP "user"));
		RETURN_IF_ERROR(fm->SetFolderPath(OPFILE_TEMP_FOLDER, s, OPFILE_HOME_FOLDER));
		RETURN_IF_ERROR(s.Set("defaults"));
		RETURN_IF_ERROR(fm->SetFolderPath(OPFILE_INI_FOLDER, s, OPFILE_RESOURCES_FOLDER));
		RETURN_IF_ERROR(s.Set("styles"));
		RETURN_IF_ERROR(fm->SetFolderPath(OPFILE_STYLE_FOLDER, s, OPFILE_RESOURCES_FOLDER));
		RETURN_IF_ERROR(s.Set("user"));
		RETURN_IF_ERROR(fm->SetFolderPath(OPFILE_USERSTYLE_FOLDER, s, OPFILE_STYLE_FOLDER));
#endif // FOLDER_PARENT_SUPPORT
		*ret_fm = fm;
		return OpStatus::OK;
	}

	void teardown_basic_foldermanager(OpFolderManager *fm)
	{
		OP_DELETE(fm);
	}
}


test("GetFolderPath: Absolute folder")
{
	OpFolderManager *fm;
	verify_success(setup_basic_foldermanager(&fm));
	OpString path;
	verify_success(fm->GetFolderPath(OPFILE_RESOURCES_FOLDER, path));
	verify_string(path, ST_OPFOLDER_ABS_PATH_PREFIX "usr" PATHSEP "share" PATHSEP "opera" PATHSEP);
	verify_success(fm->GetFolderPath(OPFILE_HOME_FOLDER, path));
	verify_string(path, ST_OPFOLDER_ABS_PATH_PREFIX "home" PATHSEP "user" PATHSEP ".opera" PATHSEP);
}
finally
{
	teardown_basic_foldermanager(fm);
};

test("GetFolderPath: Relative folder")
	require FOLDER_PARENT_SUPPORT;
{
	OpFolderManager *fm;
	verify_success(setup_basic_foldermanager(&fm));

	OpString path;

	// 1 parent
	verify_success(fm->GetFolderPath(OPFILE_STYLE_FOLDER, path));
	verify_string(path, ST_OPFOLDER_ABS_PATH_PREFIX "usr" PATHSEP "share" PATHSEP "opera" PATHSEP "styles" PATHSEP);
	// 2 parents
	verify_success(fm->GetFolderPath(OPFILE_USERSTYLE_FOLDER, path));
	verify_string(path, ST_OPFOLDER_ABS_PATH_PREFIX "usr" PATHSEP "share" PATHSEP "opera" PATHSEP "styles" PATHSEP "user" PATHSEP);
	// multiple components in non-parent
	verify_success(fm->GetFolderPath(OPFILE_TEMP_FOLDER, path));
	verify_string(path, ST_OPFOLDER_ABS_PATH_PREFIX "home" PATHSEP "user" PATHSEP ".opera" PATHSEP "styles" PATHSEP "user" PATHSEP);
}
finally
{
	teardown_basic_foldermanager(fm);
};

test("GetFolderPath: Invalid folder")
{
	OpFolderManager *fm;
	verify_success(setup_basic_foldermanager(&fm));

	OpString path;
	OP_STATUS err = fm->GetFolderPath(OPFILE_FOLDER_BIG_ENOUGH, path);
	verify(err == OpStatus::ERR);
}
finally
{
	teardown_basic_foldermanager(fm);
};

test("GetFolderPath: Replace parent folder name and structure")
	require FOLDER_PARENT_SUPPORT;
{
	OpFolderManager *fm;
	verify_success(setup_basic_foldermanager(&fm));

	OpString s;
	OpString path;

	// Change the middle component
	verify_success(s.Set("modified"));
	verify_success(fm->SetFolderPath(OPFILE_STYLE_FOLDER, s, OPFILE_RESOURCES_FOLDER));
	verify_success(fm->GetFolderPath(OPFILE_USERSTYLE_FOLDER, path));
	verify_string(path, ST_OPFOLDER_ABS_PATH_PREFIX "usr" PATHSEP "share" PATHSEP "opera" PATHSEP "modified" PATHSEP "user" PATHSEP);

	// Change the chain in the middle
	verify_success(s.Set("different"));
	verify_success(fm->SetFolderPath(OPFILE_STYLE_FOLDER, s, OPFILE_HOME_FOLDER));
	verify_success(fm->GetFolderPath(OPFILE_USERSTYLE_FOLDER, path));
	verify_string(path, ST_OPFOLDER_ABS_PATH_PREFIX "home" PATHSEP "user" PATHSEP ".opera" PATHSEP "different" PATHSEP "user" PATHSEP);

	// Change the chain length, add a link
	verify_success(s.Set("middle"));
	verify_success(fm->SetFolderPath(OPFILE_HOME_FOLDER, s, OPFILE_RESOURCES_FOLDER));
	verify_success(fm->GetFolderPath(OPFILE_USERSTYLE_FOLDER, path));
	verify_string(path, ST_OPFOLDER_ABS_PATH_PREFIX "usr" PATHSEP "share" PATHSEP "opera" PATHSEP "middle" PATHSEP "different" PATHSEP "user" PATHSEP);

	// Change the chain length, drop links
	verify_success(s.Set(ST_OPFOLDER_ABS_PATH_PREFIX "base"));
	verify_success(fm->SetFolderPath(OPFILE_STYLE_FOLDER, s, OPFILE_ABSOLUTE_FOLDER));
	verify_success(fm->GetFolderPath(OPFILE_STYLE_FOLDER, path));
	verify_string(path, ST_OPFOLDER_ABS_PATH_PREFIX "base" PATHSEP);
	verify_success(fm->GetFolderPath(OPFILE_USERSTYLE_FOLDER, path));
	verify_string(path, ST_OPFOLDER_ABS_PATH_PREFIX "base" PATHSEP "user" PATHSEP);
}
finally
{
	teardown_basic_foldermanager(fm);
};
