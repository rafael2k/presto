/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2012 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "util.opfile.opfile";
require init;

include "modules/pi/OpSystemInfo.h";
include "modules/util/opfile/opfile.h";

global
{
	OpFile* tf;
}

setup
{
	tf = NULL;
	tf = OP_NEW(OpFile, ());
	if (tf)
	{
		tf->Construct(UNI_L("util_opfile_selftest_created"), OPFILE_SELFTEST_DATA_FOLDER);
		tf->Delete();
		OP_DELETE(tf);
		tf = OP_NEW(OpFile, ());
	}
}

test("Exists")
{
	OpFile file;
	verify(OpStatus::IsSuccess(file.Construct(UNI_L(""))));
	BOOL exists;
	verify(OpStatus::IsSuccess(file.Exists(exists)));
	verify(!exists);
}

test("Construct")
{
	verify(tf);
	verify(OpStatus::IsSuccess(tf->Construct(UNI_L("util_opfile_selftest_created"), OPFILE_SELFTEST_DATA_FOLDER)));
	BOOL exists;
	verify(OpStatus::IsSuccess(tf->Exists(exists)));
	verify(!exists);
}

test("Open")
{
	verify(tf);
	verify(OpStatus::IsSuccess(tf->Open(OPFILE_WRITE)));

	BOOL exists;
	verify(OpStatus::IsSuccess(tf->Exists(exists)));
	verify(exists);
	verify(tf->IsOpen());
	tf->Close();
	verify(!tf->IsOpen());

	verify(OpStatus::IsSuccess(tf->Open(OPFILE_READ)));
	verify(OpStatus::IsSuccess(tf->Exists(exists)));
	verify(exists);
	verify(tf->IsOpen());
}

test("Close")
	require success "Open";
{
	tf->Close();
	verify(!tf->IsOpen());
}

test("Read empty file")
{
	verify(tf);
	// If previous two tests failed, close the file before reopening
	if (tf->IsOpen()) tf->Close();

	verify(OpStatus::IsSuccess(tf->Open(OPFILE_READ)));
	verify(tf->IsOpen());

	char data[10]; /* ARRAY OK 2011-01-17 johanh */
	OpFileLength bytes_read;
	verify(OpStatus::IsSuccess(tf->Read(data, 10, &bytes_read)));
	verify(bytes_read == 0);
	verify(tf->Eof());

	OpString8 data_string;
	verify(OpStatus::IsSuccess(tf->ReadLine(data_string)));
	verify(data_string.IsEmpty());
	verify(tf->Eof());
}
finally
{
	if (tf)
		tf->Close();
}

test("Write to file")
{
	verify(tf);
	verify(OpStatus::IsSuccess(tf->Open(OPFILE_WRITE)));
	verify(tf->IsOpen());

	const char* data = "she sells sea shells";
	verify(OpStatus::IsSuccess(tf->Write(data, op_strlen(data))));
}
finally
{
	if (tf)
		tf->Close();
}

test("Read from file with bytes_read == NULL fails")
{
	verify(tf);
	verify(OpStatus::IsSuccess(tf->Open(OPFILE_READ)));
	verify(tf->IsOpen());

	char data[100]; /* ARRAY OK 2011-01-17 johanh */
	verify_status(tf->Read(data, 99, NULL), OpStatus::ERR_NULL_POINTER);
}
finally
{
	if (tf)
		tf->Close();
}

test("Read from file")
{
	verify(tf);
	verify(OpStatus::IsSuccess(tf->Open(OPFILE_READ)));
	verify(tf->IsOpen());

	char data[100]; /* ARRAY OK 2011-01-17 johanh */
	op_memset(data, 0, 100);
	OpFileLength bytes_read;
	verify(OpStatus::IsSuccess(tf->Read(data, 99, &bytes_read)));
	verify_string(data, "she sells sea shells");
	verify(bytes_read == 20);
}
finally
{
	if (tf)
		tf->Close();
}

test("Write UTF8 line")
{
	verify(tf);
	verify(OpStatus::IsSuccess(tf->Open(OPFILE_WRITE)));
	verify(tf->IsOpen());

	OpString data;
	data.Set(UNI_L("\xC5ke \xE4ter \xF6kenr\xE5ttor"));
	verify(OpStatus::IsSuccess(tf->WriteUTF8Line(data)));
}
finally
{
	if (tf)
		tf->Close();
}

test("Read UTF8 line")
{
	verify(tf);
	verify(OpStatus::IsSuccess(tf->Open(OPFILE_READ)));
	verify(tf->IsOpen());

	OpString data;
	verify(OpStatus::IsSuccess(tf->ReadUTF8Line(data)));
	verify(data.Compare(UNI_L("\xC5ke \xE4ter \xF6kenr\xE5ttor")) == 0);
}
finally
{
	if (tf)
		tf->Close();
}

test("Write short")
{
	verify(tf);
	verify(OpStatus::IsSuccess(tf->Open(OPFILE_WRITE)));
	verify(tf->IsOpen());

	verify(OpStatus::IsSuccess(tf->WriteShort(0)));
	verify(OpStatus::IsSuccess(tf->WriteShort(-1)));
	UINT16 value_to_write = 0xFFFF;
	verify(OpStatus::IsSuccess(tf->WriteShort((short)value_to_write)));
}
finally
{
	if (tf)
		tf->Close();
}

test("Read short")
{
	verify(tf);
	verify(OpStatus::IsSuccess(tf->Open(OPFILE_READ)));
	verify(tf->IsOpen());
	short data;
	verify(OpStatus::IsSuccess(tf->ReadShort(data)));
	verify(data == 0);
	verify(OpStatus::IsSuccess(tf->ReadShort(data)));
	verify(data == -1);
	verify(OpStatus::IsSuccess(tf->ReadShort(data)));
	UINT16 expected_value = 0xFFFF;
	verify(data == (short)expected_value);
}
finally
{
	if (tf)
		tf->Close();
}

test("File position")
{
	verify(tf);
	verify(OpStatus::IsSuccess(tf->Open(OPFILE_WRITE)));
	verify(tf->IsOpen());

	OpFileLength pos;
	verify(OpStatus::IsSuccess(tf->GetFilePos(pos)));
	verify(pos == 0);

	verify(OpStatus::IsSuccess(tf->Write("testing", 7)));
	verify(OpStatus::IsSuccess(tf->GetFilePos(pos)));
	verify(pos == 7);
	tf->Close();

	verify(OpStatus::IsSuccess(tf->Open(OPFILE_READ)));
	verify(tf->IsOpen());

	verify(OpStatus::IsSuccess(tf->GetFilePos(pos)));
	verify(pos == 0);

	char data[100]; /* ARRAY OK 2011-01-17 johanh */
	OpFileLength bytes_read;
	verify(OpStatus::IsSuccess(tf->Read(data, 100, &bytes_read)));
	verify(OpStatus::IsSuccess(tf->GetFilePos(pos)));
	verify(pos == 7);
	verify(bytes_read == 7);
}
finally
{
	if (tf)
		tf->Close();
}

test("File length")
{
	verify(tf);
	verify(OpStatus::IsSuccess(tf->Open(OPFILE_WRITE)));
	verify(tf->IsOpen());

	OpFileLength len;
	verify(OpStatus::IsSuccess(tf->GetFileLength(len)) && len == 0);

	verify(OpStatus::IsSuccess(tf->Write("testing", 7)));
	tf->Close();
	verify(OpStatus::IsSuccess(tf->GetFileLength(len)) && len == 7);

	verify(OpStatus::IsSuccess(tf->Open(OPFILE_READ)));
	verify(tf->IsOpen());
	verify(OpStatus::IsSuccess(tf->GetFileLength(len)) && len == 7);
}
finally
{
	if (tf)
		tf->Close();
}

test("ReadLine")
{
	verify(tf);
	verify(OpStatus::IsSuccess(tf->Open(OPFILE_WRITE)));
	verify(tf->IsOpen());
	for (int i=0; i < 100 * 1024; ++i)
		tf->Write("a", 1);
	tf->Write("\n", 1);
	tf->Close();
	tf->Open(OPFILE_READ);
	verify(tf->IsOpen());

	OpString8 result;
	verify(OpStatus::IsSuccess(tf->ReadLine(result)));
	tf->Close();
	verify(result.Length() == (100 * 1024));
}

finally
{
	if (tf)
		tf->Close();
}

test("Construct OpFile in folder with name that looks like zip file")
{
	OpFile* testfile = NULL;
	OpString filepath;
	verify_success(filepath.Set("something.zip"));
	verify_success(filepath.Append(PATHSEP));
	verify_success(filepath.Append("somefile"));
	testfile = OP_NEW(OpFile, ());
	verify(testfile);
	verify_success(testfile->Construct(filepath, OPFILE_TEMP_FOLDER));
}
finally
{
	if (testfile)
	{
		testfile->Delete();
		OP_DELETE(testfile);
	}
}

test("CopyContents - all OK")
file uni test_file_dir "tests";
file uni test_file "tests/test_file.txt";
{
	OpString srcfilepath;
	OpString dstfilepath;
	OpFile src_file;
	OpFile dst_file;

	verify_success(srcfilepath.Set(test_file));
	verify_success(dstfilepath.Set(test_file_dir));
	verify_success(dstfilepath.Append(UNI_L("/test_file_copy.txt")));

	verify_success(src_file.Construct(srcfilepath));
	verify_success(dst_file.Construct(dstfilepath));

	verify_success(dst_file.CopyContents(&src_file, FALSE));

	verify_success(src_file.Open(OPFILE_READ));
	verify_success(dst_file.Open(OPFILE_READ));

	char src_data[100]; /* ARRAY OK 2011-01-17 johanh */
	char dst_data[100]; /* ARRAY OK 2011-01-17 johanh */
	op_memset(src_data, 0, 100);
	op_memset(dst_data, 0, 100);
	OpFileLength src_bytes_read, dst_bytes_read;
	verify_success(src_file.Read(src_data, 99, &src_bytes_read));
	verify_success(dst_file.Read(dst_data, 99, &dst_bytes_read));
	verify(op_memcmp(src_data, dst_data, 99) == 0);
	verify(src_bytes_read == dst_bytes_read);
}
finally
{
	if (src_file.IsOpen())
		src_file.Close();

	if (dst_file.IsOpen())
		dst_file.Close();

	dst_file.Delete();
}

test("CopyContents - dst file exists")
file uni test_file_dir "tests";
file uni test_file "tests/test_file.txt";
file uni test_file2 "tests/test_file2.txt";
{
	BOOL delete_dest = FALSE;
	OpString srcfilepath;
	OpString dstfilepath;
	OpFile src_file;
	OpFile dst_file;

	verify_success(srcfilepath.Set(test_file));
	verify_success(dstfilepath.Set(test_file2));
	verify_success(src_file.Construct(srcfilepath));
	verify_success(dst_file.Construct(dstfilepath));
	// Should fail as destination file exists and fail_if_exists is TRUE
	verify_status(dst_file.CopyContents(&src_file, TRUE), OpStatus::ERR);
	verify_success(dstfilepath.Set(test_file_dir));
	verify_success(dstfilepath.Append(UNI_L("/test_file2_copy.txt")));
	verify_success(dst_file.Construct(dstfilepath));
	verify_success(dst_file.CopyContents(&src_file, TRUE));
	delete_dest = TRUE;
	// Must not fail even as destination file exists but fail_if_exists is FALSE
	verify_success(dst_file.CopyContents(&src_file, FALSE));
}
finally
{
	if (delete_dest)
		dst_file.Delete();
}

test("CopyContents - src file doesn't exist")
file uni test_file_dir "tests";
file uni test_file "tests/test_file.txt";
{
	OpString srcfilepath;
	OpString dstfilepath;
	OpFile src_file;
	OpFile dst_file;

	verify_success(srcfilepath.Set(test_file_dir));
	verify_success(srcfilepath.Append(UNI_L("/non_existing_file.txt")));
	verify_success(dstfilepath.Set(test_file_dir));
	verify_success(dstfilepath.Append(UNI_L("test_file_copy.txt")));
	verify_success(src_file.Construct(srcfilepath));
	verify_success(dst_file.Construct(dstfilepath));
	verify_status(dst_file.CopyContents(&src_file, TRUE), OpStatus::ERR_FILE_NOT_FOUND);
}

test("CopyContents - src file is opened")
file uni test_file_dir "tests";
file uni test_file "tests/test_file.txt";
{
	OpString srcfilepath;
	OpString dstfilepath;
	OpFile src_file;
	OpFile dst_file;

	verify_success(srcfilepath.Set(test_file));
	verify_success(dstfilepath.Set(test_file_dir));
	verify_success(dstfilepath.Append(UNI_L("/test_file_copy.txt")));

	verify_success(src_file.Construct(srcfilepath));
	verify_success(dst_file.Construct(dstfilepath));
	verify_success(src_file.Open(OPFILE_READ));
	verify_status(dst_file.CopyContents(&src_file, FALSE), OpStatus::ERR);
}
finally
{
	if (src_file.IsOpen())
		src_file.Close();
}

test("CopyContents - dst file is opened")
file uni test_file "tests/test_file.txt";
file uni test_file2 "tests/test_file2.txt";
require success "CopyContents - dst file exists";
{
	OpString srcfilepath;
	OpString dstfilepath;
	OpFile src_file;
	OpFile dst_file;

	verify_success(srcfilepath.Set(test_file));
	verify_success(dstfilepath.Set(test_file2));

	verify_success(src_file.Construct(srcfilepath));
	verify_success(dst_file.Construct(dstfilepath));
	verify_success(dst_file.Open(OPFILE_READ));
	// As this test requires "CopyContents - dst file exists" success, if the below line fails we might be sure
	// it's because a dst file is open and not because wrong behavior when fail_is_exist = FALSE
	verify_status(dst_file.CopyContents(&src_file, FALSE), OpStatus::ERR);
}
finally
{
	if (dst_file.IsOpen())
		dst_file.Close();
}


test("CopyContents - directory structure")
file uni test_file_dir "tests";
file uni test_file "tests/test_file.txt";
{
	OpString srcfilepath;
	OpString dstfilepath;
	OpString cleanup_dir;
	OpFile src_file;
	OpFile dst_file;

	verify_success(srcfilepath.Set(test_file));
	verify_success(dstfilepath.Set(test_file_dir));
	verify_success(dstfilepath.Append(UNI_L("/dir/dir/dir/test_file_copy.txt")));
	verify_success(cleanup_dir.Set(test_file_dir));
	verify_success(cleanup_dir.Append(UNI_L("/dir")));
	verify_success(src_file.Construct(srcfilepath));
	verify_success(dst_file.Construct(dstfilepath));
	verify_success(dst_file.CopyContents(&src_file, FALSE));
	BOOL exists;
	verify_success(dst_file.Exists(exists));
	// directory structure should be created
	verify(exists);
}
finally
{
	// Clean up
	dst_file.Construct(cleanup_dir);
	dst_file.Delete(TRUE);
}

test("CopyContents - copying from archive")
file uni test_file_dir "tests";
file uni test_archive "tests/test_archive.zip";
require ZIPFILE_DIRECT_ACCESS_SUPPORT;
{
	OpString srcfilepath;
	OpString dstfilepath;
	OpFile src_file;
	OpFile dst_file;

	verify_success(srcfilepath.Set(test_archive));
	verify_success(srcfilepath.Append(UNI_L("/nonemptydir/plaintext-40b.txt")));
	verify_success(dstfilepath.Set(test_file_dir));
	verify_success(dstfilepath.Append(UNI_L("/copied-plaintext-40b.txt")));
	verify_success(src_file.Construct(srcfilepath));
	verify_success(dst_file.Construct(dstfilepath));
	verify_success(dst_file.CopyContents(&src_file, FALSE));
	verify_success(src_file.Open(OPFILE_READ));
	verify_success(dst_file.Open(OPFILE_READ));
	char src_data[100]; /* ARRAY OK 2011-01-17 johanh */
	char dst_data[100]; /* ARRAY OK 2011-01-17 johanh */
	op_memset(src_data, 0, 100);
	op_memset(dst_data, 0, 100);
	OpFileLength src_bytes_read, dst_bytes_read;
	verify_success(src_file.Read(src_data, 99, &src_bytes_read));
	verify_success(dst_file.Read(dst_data, 99, &dst_bytes_read));
	verify(op_memcmp(src_data, dst_data, 99) == 0);
	verify(src_bytes_read == dst_bytes_read);
}
finally
{
	if (src_file.IsOpen())
		src_file.Close();
	if (dst_file.IsOpen())
		dst_file.Close();

	dst_file.Delete();
}

test("GetName of a directory with trailing separator")
	file uni testdir_path "";	// This selftest must be present in opfile directory
{
	OpString testdir_path_without_trailing_slash;
	OpString testdir_path_with_trailing_slash;
	verify_success(testdir_path_with_trailing_slash.Set(testdir_path));
	verify(!testdir_path_with_trailing_slash.IsEmpty());
	if (testdir_path_with_trailing_slash[testdir_path_with_trailing_slash.Length() - 1] != PATHSEPCHAR)
	{
		verify_success(testdir_path_without_trailing_slash.Set(testdir_path));
		verify_success(testdir_path_with_trailing_slash.Append(PATHSEP));
	}
	else
	{
		verify_success(testdir_path_without_trailing_slash.Set(testdir_path, testdir_path_with_trailing_slash.Length() - 1));
	}

	OpFile testdir_without_trailing_slash;
	verify_success(testdir_without_trailing_slash.Construct(testdir_path_without_trailing_slash.CStr()));

	OpFile testdir_with_trailing_slash;
	verify_success(testdir_with_trailing_slash.Construct(testdir_path_with_trailing_slash.CStr()));

	verify_string(testdir_without_trailing_slash.GetName(), testdir_with_trailing_slash.GetName());
	verify_string(UNI_L("opfile"), testdir_without_trailing_slash.GetName());
}


test("GetName of a nonexistent directory with trailing separator")
	file uni uni_testdir_path "";
{
	OpString testdir_path;
	verify_success(testdir_path.Set(uni_testdir_path));
	verify(!testdir_path.IsEmpty());
	if (testdir_path[testdir_path.Length() - 1] == PATHSEPCHAR)
		verify_success(testdir_path.AppendFormat(UNI_L("nonexistent%c"), PATHSEPCHAR));
	else
		verify_success(testdir_path.AppendFormat(UNI_L("%cnonexistent%c"), PATHSEPCHAR, PATHSEPCHAR));

	OpFile testdir;
	verify_success(testdir.Construct(testdir_path));

	verify_string(UNI_L("nonexistent"), testdir.GetName());
}

test("GetName of a directory with trailing separator - disk root")
	require SYS_CAP_FILESYSTEM_HAS_MULTIPLE_DRIVES;
{
	OpString drive_letters;
	const uni_char drive_letter = g_op_system_info->GetCurrentDriveLetter();
	verify(drive_letter != 0);

	OpString path;
	verify_success(path.AppendFormat(UNI_L("%c:%c"), drive_letter, PATHSEPCHAR));

	OpFile file;
	verify_success(file.Construct(path));

	verify_string(UNI_L(""), file.GetName());
}

test("GetName of a directory with trailing separator - root")
	require undefined SYS_CAP_FILESYSTEM_HAS_MULTIPLE_DRIVES;
{
	OpFile file;
	verify_success(file.Construct(UNI_L(PATHSEP)));

	verify_string(UNI_L(""), file.GetName());
}

test("OpFile with empty file name")
{
	OpFile file;
	verify_success(file.Construct(UNI_L("")));
}

test("OpFile MakeDirectory and GetDirectory")
{
	OpFile dir;
	BOOL exists = FALSE;
	verify_success(dir.Construct(UNI_L("util_opfile_selftest"), OPFILE_SELFTEST_DATA_FOLDER));
	verify_success(dir.Exists(exists));
	if (exists)
	{
		verify_success(dir.Delete());
		verify_success(dir.Exists(exists));
		verify(!exists);
	}
	verify_success(dir.MakeDirectory());
	verify_success(dir.Exists(exists));
	verify(exists);
	verify(dir.GetMode() == OpFileInfo::DIRECTORY);

	OpString name, d;
	verify_success(name.Set(dir.GetFullPath()));
	verify_success(dir.GetDirectory(d));
	verify_success(d.Append(UNI_L("util_opfile_selftest")));
	verify_string(name, d);
}
finally
{
	dir.Delete();
}

test("OpFile GetMode")
{
	OpFile f;
	verify_success(f.Construct(UNI_L("util_opfile_selftest_created"), OPFILE_SELFTEST_DATA_FOLDER));
	verify(f.GetMode() == OpFileInfo::FILE);
}
finally
{
	f.Delete();
}

/* Based on modules/pi/selftest/OpLowLevelFile.ot */

test("OpFile GetLocalizedPath")
{
	OpFile f;
	verify_success(f.Construct(UNI_L("util_opfile_selftest_created"), OPFILE_SELFTEST_DATA_FOLDER));
	OpString text;
	verify_success(text.Set("unmodified"));
	verify_success(f.GetLocalizedPath(&text));
	verify(text.Compare("unmodified"));
}
finally
{
	f.Delete();
}

test("OpFile Print")
{
	OpFile f;
	verify_success(f.Construct(UNI_L("util_opfile_selftest_created"), OPFILE_SELFTEST_DATA_FOLDER));
	const char* data = "she sells sea shells";
	char read_data[100]; /* ARRAY OK 2012-01-16 hela */
	OpFileLength length = 0;
	verify_success(f.Open(OPFILE_WRITE));
	verify_success(f.Print(data, op_strlen(data)));
	verify_success(f.Close());
	verify_success(f.Open(OPFILE_READ));
	verify(f.IsOpen());
	op_memset(read_data, 0, 100);
	verify_success(f.Read(read_data, 99, &length));
	verify(length == 20);
	for (int i = 20; i < 100; i++)
		verify(read_data[i] == 0);
	verify_string(read_data, "she sells sea shells");
	length = 0;
	verify_success(f.GetFileLength(length));
	verify(length == 20);
	verify_success(f.Close());
}
finally
{
	if (f.IsOpen())
		f.Close();
	f.Delete();
}

test("OpFile SafeClose")
{
	OpFile f;
	OpFileLength length = 0;
	char c = 0;
	verify_success(f.Construct(UNI_L("util_opfile_selftest_created"), OPFILE_SELFTEST_DATA_FOLDER));
	verify_success(f.Open(OPFILE_WRITE));
	verify(f.IsOpen());
	verify_success(f.Write(&c, 1));
	verify_success(f.SafeClose());
	verify(!f.IsOpen());
	verify_success(f.GetFileLength(length));
	verify(length == 1);
}
finally
{
	if (f.IsOpen())
		f.Close();
	f.Delete();
}

test("SafeReplace")
{
	OpFile moved, source;
	verify_success(moved.Construct(UNI_L("moved.bin"), OPFILE_SELFTEST_DATA_FOLDER));
	verify_success(moved.Open(OPFILE_WRITE));
	char c = 0;
	verify_success(moved.Write(&c, 1));
	verify_success(moved.Close());

	verify_success(source.Construct(UNI_L("source.bin"), OPFILE_SELFTEST_DATA_FOLDER));
	verify_success(source.Open(OPFILE_WRITE));
	const unsigned int record_count = 10000;
	const char data[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ12";
	unsigned int i;
	for (i = 0; i < record_count; i++)
		verify_success(source.Write(data, sizeof(data)));
	verify_success(source.Close());

	verify_success(moved.SafeReplace(&source));

	BOOL exists;
	verify_success(source.Exists(exists));
	verify(!exists);
	verify_success(moved.Exists(exists));
	verify(exists);
	verify_success(moved.Open(OPFILE_READ));
	char* buf[sizeof(data)];
	const unsigned int bufsize = sizeof(data);
	OpFileLength bytes_read = 0;
	for (i = 0; i < record_count; i++)
	{
		verify_success(moved.Read(buf, bufsize, &bytes_read));
		verify(bytes_read == bufsize);
		verify(op_memcmp(buf, data, bufsize) == 0);
		bytes_read = 0;
	}
	verify_success(moved.Read(buf, 1, &bytes_read));
	verify(bytes_read == 0);
	verify(moved.Eof());
}
finally
{
	if (moved.IsOpen())
		moved.Close();
	if (source.IsOpen())
		source.Close();
	moved.Delete();
	source.Delete();
}

test("SetFileLength")
{
	OpFile f;
	verify_success(f.Construct(UNI_L("file.bin"), OPFILE_SELFTEST_DATA_FOLDER));
	verify_success(f.Open(OPFILE_WRITE | OPFILE_READ));
	signed char c = 0;
	for (unsigned int i = 0; i < 96; ++i)
		verify_success(f.Write(&c, 1));

	OpFileLength len = 0;
	verify_success(f.GetFileLength(len));
	verify(len == 96);
	verify_success(f.Flush());
	verify_success(f.SetFileLength(128));
	verify_success(f.GetFileLength(len));
	verify(len == 128);
	verify_success(f.SetFilePos(127));
	verify(!f.Eof());
	verify_success(f.Read(&c, 1, &len));
	verify(len == 1);
	verify_success(f.Read(&c, 1, &len));
	verify(len == 0);
	verify(f.Eof());
	verify_success(f.SetFileLength(64));
	verify_success(f.GetFileLength(len));
	verify(len == 64);
	verify_success(f.SetFilePos(63));
	verify_success(f.Read(&c, 1, &len));
	verify(len == 1);
	verify_success(f.Read(&c, 1, &len));
	verify(len == 0);
	verify(f.Eof());
}
finally
{
	if (f.IsOpen())
		f.Close();
	f.Delete();
}

test("BinByte")
{
	OpFile f;
	verify_success(f.Construct(UNI_L("file.bin"), OPFILE_SELFTEST_DATA_FOLDER));
	verify_success(f.Open(OPFILE_WRITE | OPFILE_READ));
	char c = 0;
	verify_success(f.WriteBinByte('B'));
	verify_success(f.WriteBinByte('G'));
	verify_success(f.WriteBinByte('R'));
	verify_success(f.Flush());
	verify_success(f.SetFilePos(0));
	OpFileLength len = 0;
	verify_success(f.GetFileLength(len));
	verify(len == 3);
	verify_success(f.ReadBinByte(c));
	verify(c == 'B');
	verify_success(f.ReadBinByte(c));
	verify(c == 'G');
	verify_success(f.ReadBinByte(c));
	verify(c == 'R');
}
finally
{
	if (f.IsOpen())
		f.Close();
	f.Delete();
}

test("BinShort")
{
	OpFile f;
	verify_success(f.Construct(UNI_L("file.bin"), OPFILE_SELFTEST_DATA_FOLDER));
	verify_success(f.Open(OPFILE_WRITE | OPFILE_READ));
	for (short i = 0; i < 10; ++i)
		verify_success(f.WriteBinShort(i));
	verify_success(f.Flush());
	verify_success(f.SetFilePos(0));
	OpFileLength len = 0;
	verify_success(f.GetFileLength(len));
	verify(len == (sizeof(short) * 10));
	short s = 0;
	for (short i = 0; i < 10; ++i)
	{
		verify_success(f.ReadBinShort(s));
		verify(s == i);
	}
}
finally
{
	if (f.IsOpen())
		f.Close();
	f.Delete();
}

test("BinLong")
{
	OpFile f;
	verify_success(f.Construct(UNI_L("file.bin"), OPFILE_SELFTEST_DATA_FOLDER));
	verify_success(f.Open(OPFILE_WRITE | OPFILE_READ));
	for (long i = 0; i < 10; ++i)
		verify_success(f.WriteBinLong(i));
	verify_success(f.Flush());
	verify_success(f.SetFilePos(0));
	OpFileLength len = 0;
	verify_success(f.GetFileLength(len));
	verify(len == 40); // See CORE-44920 for explanation of this result value.
	long l = 0;
	for (long i = 0; i < 10; ++i)
	{
		verify_success(f.ReadBinLong(l));
		verify(l == i);
	}
}
finally
{
	if (f.IsOpen())
		f.Close();
	f.Delete();
}

test("WriteBinLongLH")
{
	OpFile f;
	verify_success(f.Construct(UNI_L("file.bin"), OPFILE_SELFTEST_DATA_FOLDER));
	verify_success(f.Open(OPFILE_WRITE | OPFILE_READ));
	verify_success(f.WriteBinLongLH(0x21345678));
	verify_success(f.Flush());
	verify_success(f.SetFilePos(0));
	char b = 0;
	verify_success(f.ReadBinByte(b));
	verify(b == 0x78);
	verify_success(f.ReadBinByte(b));
	verify(b == 0x56);
	verify_success(f.ReadBinByte(b));
	verify(b == 0x34);
	verify_success(f.ReadBinByte(b));
	verify(b == 0x21);
}
finally
{
	if (f.IsOpen())
		f.Close();
	f.Delete();
}

test("WriteBinShortLH")
{
	OpFile f;
	verify_success(f.Construct(UNI_L("file.bin"), OPFILE_SELFTEST_DATA_FOLDER));
	verify_success(f.Open(OPFILE_WRITE | OPFILE_READ));
	verify_success(f.WriteBinShortLH(0x5678));
	verify_success(f.Flush());
	verify_success(f.SetFilePos(0));
	char b = 0;
	verify_success(f.ReadBinByte(b));
	verify(b == 0x78);
	verify_success(f.ReadBinByte(b));
	verify(b == 0x56);
}
finally
{
	if (f.IsOpen())
		f.Close();
	f.Delete();
}

exit
{
	if (tf)
	{
		tf->Delete();
		OP_DELETE(tf);
	}
}

test("GetFolderLister() should work on ZIP files")
	require ZIPFILE_DIRECT_ACCESS_SUPPORT;
	file uni zip_file "tests/test_archive.zip";
{
	OpFolderLister *lister1 = NULL, *lister2 = NULL;
	lister1 = OpFile::GetFolderLister(OPFILE_ABSOLUTE_FOLDER, UNI_L("*.*"), zip_file);
	verify(lister1);

	OpString path;
	verify_success(path.SetConcat(zip_file, UNI_L(PATHSEP), UNI_L("nonemptydir")));
	lister2 = OpFile::GetFolderLister(OPFILE_ABSOLUTE_FOLDER, UNI_L("*.*"), path.CStr());
	verify(lister2);
}
finally
{
	OP_DELETE(lister1);
	OP_DELETE(lister2);
}
