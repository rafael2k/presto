/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2004 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "util.opfile.opslotfile";
require init;
require UTIL_HAVE_OP_SLOTFILE;

include "modules/util/opfile/opslotfile.h";

global
{
	OpSlotFile* tf;

	enum
	{
		SLOTSIZE_1 = 10,
	};

	char* slotdata[11][2] = {
		{"slot01", "data000000"},
		{"slot02", "data111111"},
		{"slot03", "data222222"},
		{"slot04", "data333333"},
		{"slot05", "data444444"},
		{"slot06", "data555555"},
		{"slot07", "data666666"},
		{"slot08", "data777777"},
		{"slot09", "data888888"},
		{"slot10", "data888888"},
		{"slot11", "dataaaaaaa"}};
}

setup
{
	tf = NULL;
	tf = OP_NEW(OpSlotFile, ());
	if (tf)
	{
		tf->Construct(UNI_L("testslot.dat"), UNI_L("testslot.info"), -1, OPFILE_HOME_FOLDER);
		tf->Delete();
		OP_DELETE(tf);
		tf = OP_NEW(OpSlotFile, ());
	}
}

test("Construct")
{
	verify(tf);
	verify(OpStatus::IsSuccess(tf->Construct(UNI_L("testslot.dat"), UNI_L("testslot.info"), -1, OPFILE_HOME_FOLDER)));
	BOOL exists;
	exists = tf->Exists();
	verify(!exists);
}

test("Init, size 1 slots")
{
	verify(OpStatus::IsSuccess(tf->Init(SLOTSIZE_1, 1)));

	BOOL exists;
	exists = tf->Exists();
	verify(exists);
}

test("Read, write and remove, size 1 slots")
{
	OP_DELETE(tf);
	tf = OP_NEW(OpSlotFile, ());
	verify(tf != NULL);
	verify(OpStatus::IsSuccess(tf->Construct(UNI_L("testslot.dat"), UNI_L("testslot.info"), -1, OPFILE_HOME_FOLDER)));

	verify(OpStatus::IsSuccess(tf->Open()));

	char buf1[SLOTSIZE_1]; /* ARRAY OK 2009-04-24 johanh */
	char buf2[SLOTSIZE_1]; /* ARRAY OK 2009-04-24 johanh */
	
	// Read an un-written slot
	op_memset(buf1, 0, SLOTSIZE_1);
	op_memset(buf2, 0, SLOTSIZE_1);
	verify(OpStatus::IsError(tf->ReadSlotData("slot01", buf1, SLOTSIZE_1)));
	verify(0 == op_memcmp(buf1, buf2, SLOTSIZE_1));

	// Write 1 slot, then try to write one more
	char* data1 = "data000000";
	char* data2 = "data2.....";
	verify(OpStatus::IsSuccess(tf->WriteSlotData("slot01", data1, SLOTSIZE_1)));
	verify(OpStatus::IsError(tf->WriteSlotData("slot02", data2, SLOTSIZE_1)));

	// Try to move the slot
	verify(OpStatus::IsError(tf->MoveEntryAfter("slot01", "slot02")));

	verify(OpStatus::IsSuccess(tf->Close()));
	
	// Read previously written slot, and try to read not existing slot
	op_memset(buf1, 0, SLOTSIZE_1);
	verify(OpStatus::IsSuccess(tf->Open()));
	verify(OpStatus::IsSuccess(tf->ReadSlotData("slot01", buf1, SLOTSIZE_1)));
	verify(OpStatus::IsError(tf->ReadSlotData("slot02", buf1, SLOTSIZE_1)));
	verify(0 == op_memcmp(data1, buf1, SLOTSIZE_1));

	// Check that read function does't write outside buffer boundaries
	char buf3[8 + SLOTSIZE_1]; /* ARRAY OK 2009-04-24 johanh */
	char buf3_orig[8 + SLOTSIZE_1]; /* ARRAY OK 2009-04-24 johanh */
	op_memset(buf3, 7, 8 + SLOTSIZE_1);
	op_memcpy(buf3_orig, buf3, 8 + SLOTSIZE_1);
	verify(OpStatus::IsError(tf->ReadSlotData("slot01", buf3 + 4, SLOTSIZE_1 + 8)));
	verify(0 == op_memcmp(buf3, buf3_orig, 8 + SLOTSIZE_1));
	verify(OpStatus::IsSuccess(tf->ReadSlotData("slot01", buf3 + 4, SLOTSIZE_1)));
	verify(0 == op_memcmp(buf3, buf3_orig, 4) && 0 == op_memcmp(buf3 + 4, data1, SLOTSIZE_1) && 0 == op_memcmp(buf3 + 4 + SLOTSIZE_1, buf3_orig + 4 + SLOTSIZE_1, 4));

	verify(OpStatus::IsSuccess(tf->Close()));
}

test("Init, size 10 slots")
{
	verify(OpStatus::IsSuccess(tf->Init(SLOTSIZE_1, 10)));

	BOOL exists;
	exists = tf->Exists();
	verify(exists);
}

test("Read, write and remove, size 10 slots")
{
	// Write 10 slots and try an 11th
	verify(OpStatus::IsSuccess(tf->Open()));
	int ix = 0;
	for (ix = 0; ix < 10; ix++)
	{
		verify(OpStatus::IsSuccess(tf->WriteSlotData(slotdata[ix][0], slotdata[ix][1], SLOTSIZE_1)));
	}
	verify(OpStatus::IsError(tf->WriteSlotData(slotdata[ix][0], slotdata[ix][1], SLOTSIZE_1)));
	verify(OpStatus::IsSuccess(tf->Close()));

	// Read 10 slots and try an 11th
	verify(OpStatus::IsSuccess(tf->Open()));
	char buf[SLOTSIZE_1]; /* ARRAY OK 2009-04-24 johanh */
	for (ix = 0; ix < 10; ix++)
	{
		verify(OpStatus::IsSuccess(tf->ReadSlotData(slotdata[ix][0], buf, SLOTSIZE_1)));
		verify(0 == op_memcmp(buf, slotdata[ix][1], SLOTSIZE_1));
	}
	char buf2[SLOTSIZE_1]; /* ARRAY OK 2009-04-24 johanh */
	op_memset(buf, 0, SLOTSIZE_1);
	op_memset(buf2, 0, SLOTSIZE_1);
	verify(OpStatus::IsError(tf->ReadSlotData(slotdata[ix][0], buf, SLOTSIZE_1)));
	verify(0 == op_memcmp(buf, buf2, SLOTSIZE_1));
	verify(OpStatus::IsSuccess(tf->Close()));

	// Overwrite some slots in the middle and verify data integrity
	char* newdata1 = "XXXXXXXXXX";
	char* newdata2 = "YYYYYYYYYY";
	verify(OpStatus::IsSuccess(tf->Open()));
	verify(OpStatus::IsSuccess(tf->WriteSlotData(slotdata[3][0], newdata1, SLOTSIZE_1)));
	verify(OpStatus::IsSuccess(tf->WriteSlotData(slotdata[6][0], newdata2, SLOTSIZE_1)));
	verify(OpStatus::IsSuccess(tf->Close()));
	verify(OpStatus::IsSuccess(tf->Open()));
	op_memset(buf, 0, SLOTSIZE_1);
	for (ix = 0; ix < 10; ix++)
	{
		verify(OpStatus::IsSuccess(tf->ReadSlotData(slotdata[ix][0], buf, SLOTSIZE_1)));
		if (ix == 3)
		{
			verify(0 == op_memcmp(buf, newdata1, SLOTSIZE_1));
		}
		else if (ix == 6)
		{
			verify(0 == op_memcmp(buf, newdata2, SLOTSIZE_1));
		}
		else
		{
			verify(0 == op_memcmp(buf, slotdata[ix][1], SLOTSIZE_1));
		}
	}	
	verify(OpStatus::IsSuccess(tf->Close()));

	// Move some entries around
	verify(OpStatus::IsSuccess(tf->Open()));
	verify(OpStatus::IsSuccess(tf->MoveEntryAfter(slotdata[0][0], slotdata[9][0])));
	verify(OpStatus::IsSuccess(tf->MoveEntryAfter(slotdata[4][0], slotdata[2][0])));
	verify(OpStatus::IsSuccess(tf->MoveEntryAfter(slotdata[6][0], slotdata[1][0])));
	verify(OpStatus::IsSuccess(tf->MoveEntryAfter(slotdata[2][0], NULL)));
	verify(OpStatus::IsError(tf->MoveEntryAfter(slotdata[3][0], "noslot")));

	char idbuf[6]; /* ARRAY OK 2009-04-24 johanh */
	verify(0 != tf->GetSlotId(0, idbuf, 6) && 0 == op_strncmp(slotdata[2][0], idbuf, 6));
	verify(0 != tf->GetSlotId(1, idbuf, 6) && 0 == op_strncmp(slotdata[1][0], idbuf, 6));
	verify(0 != tf->GetSlotId(2, idbuf, 6) && 0 == op_strncmp(slotdata[6][0], idbuf, 6));
	verify(0 != tf->GetSlotId(3, idbuf, 6) && 0 == op_strncmp(slotdata[4][0], idbuf, 6));
	verify(0 != tf->GetSlotId(4, idbuf, 6) && 0 == op_strncmp(slotdata[3][0], idbuf, 6));
	verify(0 != tf->GetSlotId(5, idbuf, 6) && 0 == op_strncmp(slotdata[5][0], idbuf, 6));
	verify(0 != tf->GetSlotId(6, idbuf, 6) && 0 == op_strncmp(slotdata[7][0], idbuf, 6));
	verify(0 != tf->GetSlotId(7, idbuf, 6) && 0 == op_strncmp(slotdata[8][0], idbuf, 6));
	verify(0 != tf->GetSlotId(8, idbuf, 6) && 0 == op_strncmp(slotdata[9][0], idbuf, 6));
	verify(0 != tf->GetSlotId(9, idbuf, 6) && 0 == op_strncmp(slotdata[0][0], idbuf, 6));

	verify(OpStatus::IsSuccess(tf->Close()));
	
	// Remove two slots an add a new one
	verify(OpStatus::IsSuccess(tf->Open()));
	verify(OpStatus::IsError(tf->RemoveSlot(slotdata[10][0])));
	verify(OpStatus::IsSuccess(tf->RemoveSlot(slotdata[4][0])));
	verify(OpStatus::IsSuccess(tf->RemoveSlot(slotdata[7][0])));
	verify(OpStatus::IsSuccess(tf->ReadSlotData(slotdata[0][0], buf, SLOTSIZE_1)));
	verify(OpStatus::IsError(tf->ReadSlotData(slotdata[4][0], buf, SLOTSIZE_1)));
	verify(OpStatus::IsError(tf->ReadSlotData(slotdata[7][0], buf, SLOTSIZE_1)));
	verify(OpStatus::IsSuccess(tf->WriteSlotData(slotdata[10][0], slotdata[10][1], SLOTSIZE_1)));
	verify(OpStatus::IsSuccess(tf->Close()));
}

test("CRC")
{
	verify(OpStatus::IsSuccess(tf->Init(SLOTSIZE_1, 10)));
	verify(OpStatus::IsSuccess(tf->Open()));
	for (int ix = 0; ix < 10; ix++)
	{
		verify(OpStatus::IsSuccess(tf->WriteSlotData(slotdata[ix][0], slotdata[ix][1], SLOTSIZE_1)));
	}
	verify(OpStatus::IsSuccess(tf->Close()));

	OpFile tmp;
	char* newdata = "foo";
	verify(OpStatus::IsSuccess(tmp.Construct(UNI_L("testslot.dat"), OPFILE_HOME_FOLDER)));
	verify(OpStatus::IsSuccess(tmp.Open(OPFILE_UPDATE)));
	verify(OpStatus::IsSuccess(tmp.SetFilePos(13)));
	verify(OpStatus::IsSuccess(tmp.Write(newdata, op_strlen(newdata))));
	verify(OpStatus::IsSuccess(tmp.SetFilePos(65)));
	verify(OpStatus::IsSuccess(tmp.Write(newdata, op_strlen(newdata))));
	verify(OpStatus::IsSuccess(tmp.Close()));

	verify(OpStatus::IsError(tf->CheckValidity(10, SLOTSIZE_1)));
	verify(OpStatus::IsSuccess(tf->RemoveCorruptSlots()));

	verify(OpStatus::IsSuccess(tf->Open()));
	for (int ix = 0; ix < 10; ix++)
	{
		char idbuf[11]; /* ARRAY OK 2009-04-24 johanh */
		char readbuf[SLOTSIZE_1]; /* ARRAY OK 2009-04-24 johanh */
		int idlen;
		op_memset(idbuf, 0, 11);
		idlen = tf->GetSlotId(ix, idbuf, 10);
		OP_STATUS result = tf->ReadSlotData(idbuf, readbuf, SLOTSIZE_1);
			
		switch(ix)
		{
		case 0:
			verify(idlen > 0);
			verify(0 == op_strncmp(readbuf, slotdata[0][1], 6));
			verify(OpStatus::IsSuccess(result));
			break;
		case 1:
			verify(idlen > 0);
			verify(0 == op_strncmp(readbuf, slotdata[2][1], 6));
			verify(OpStatus::IsSuccess(result));
			break;
		case 2:
			verify(idlen > 0);
			verify(0 == op_strncmp(readbuf, slotdata[3][1], 6));
			verify(OpStatus::IsSuccess(result));
			break;
		case 3:
			verify(idlen > 0);
			verify(0 == op_strncmp(readbuf, slotdata[4][1], 6));
			verify(OpStatus::IsSuccess(result));
			break;
		case 4:
			verify(idlen > 0);
			verify(0 == op_strncmp(readbuf, slotdata[5][1], 6));
			verify(OpStatus::IsSuccess(result));
			break;
		case 5:
			verify(idlen > 0);
			verify(0 == op_strncmp(readbuf, slotdata[7][1], 6));
			verify(OpStatus::IsSuccess(result));
			break;
		case 6:
			verify(idlen > 0);
			verify(0 == op_strncmp(readbuf, slotdata[8][1], 6));
			verify(OpStatus::IsSuccess(result));
			break;
		case 7:
			verify(idlen > 0);
			verify(0 == op_strncmp(readbuf, slotdata[9][1], 6));
			verify(OpStatus::IsSuccess(result));
			break;
		case 8:
			verify(idlen == 0);
			verify(OpStatus::IsError(result));
			break;
		case 9:
			verify(idlen == 0);
			verify(OpStatus::IsError(result));
			break;
		}
	}
	verify(OpStatus::IsSuccess(tf->Close()));
}

test("Init, size 1000 slots")
{
	verify(OpStatus::IsSuccess(tf->Init(SLOTSIZE_1, 1000)));

	BOOL exists;
	exists = tf->Exists();
	verify(exists);
}

test("Read, write and remove, 1000 slots")
{
	verify(OpStatus::IsSuccess(tf->Open()));
	char slot[32 + 1]; /* ARRAY OK 2009-04-24 johanh */
	char data[SLOTSIZE_1]; /* ARRAY OK 2009-04-24 johanh */
	for (int ix = 0; ix < 1000; ix++)
	{
		op_snprintf(slot, 33, "slot%028d", ix);
		op_snprintf(data, SLOTSIZE_1, "data%05d", ix);
		verify(OpStatus::IsSuccess(tf->WriteSlotData(slot, data, SLOTSIZE_1)));
	}
	verify(OpStatus::IsSuccess(tf->Close()));

	verify(OpStatus::IsSuccess(tf->Open()));
	for (int ix = 0; ix < 1000; ix++)
	{
		char data2[SLOTSIZE_1]; /* ARRAY OK 2009-04-24 johanh */
		op_snprintf(slot, 33, "slot%028d", ix);
		op_snprintf(data, SLOTSIZE_1, "data%05d", ix);
		verify(OpStatus::IsSuccess(tf->ReadSlotData(slot, data2, SLOTSIZE_1)));
		verify(0 == op_memcmp(data, data2, SLOTSIZE_1));
	}
	verify(OpStatus::IsSuccess(tf->Close()));
}

exit
{
	if (tf)
	{
		//tf->Delete();
		OP_DELETE(tf);
	}
}
