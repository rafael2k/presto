/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2007-2012 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "util.unicode.unistream";

include "modules/util/opfile/opfile.h";
include "modules/util/opfile/opmemfile.h";
include "modules/util/opfile/unistream.h";

// -- Global variables ---------------------------------------------------

global
{
	static const char lng[] =
		//![Info]
		//!Charset="utf-8"
		"\xC3\xA5" // U+00E5
		;
};

// -- Tests --------------------------------------------------------------

test("Reading language file")
	require PREFS_HAS_LNG;
	require undefined HAVE_NO_OPMEMFILE;
{
	// Read
	OpMemFile *mf = NULL;
	UnicodeFileInputStream *ufis = NULL;

	mf = OpMemFile::Create(reinterpret_cast<const unsigned char *>(lng), op_strlen(lng));
	verify(mf);

	ufis = OP_NEW(UnicodeFileInputStream, ());
	verify(ufis);
	verify(OpStatus::IsSuccess(ufis->Construct(mf, UnicodeFileInputStream::LANGUAGE_FILE)));

	int length;
	bool success = false;
	while (ufis->has_more_data())
	{
		const uni_char *buffer = ufis->get_block(length);
		for (int i = length / 2 - 1; i >= 0; -- i)
		{
			// Make sure we get the correct encoding
			if (buffer[i] == 0x00E5)
			{
				success = true;
				break;
			}
		}
	}
	verify(success);
}
finally
{
	OP_DELETE(ufis);
	OP_DELETE(mf);
}

// TODO: Test reading other file formats

test("Writing file")
{
	// Write
	OpFile *of = NULL;
	UnicodeFileOutputStream *ufos = NULL;

	of = OP_NEW(OpFile, ());
	verify(of);
	verify(OpStatus::IsSuccess(of->Construct(UNI_L("created.txt"), OPFILE_HOME_FOLDER)));

	ufos = OP_NEW(UnicodeFileOutputStream, ());
	verify(ufos);
	verify(OpStatus::IsSuccess(ufos->Construct(of->GetFullPath(), "utf-8")));
	TRAPD(rc, ufos->WriteStringL(UNI_L("\x00E5")));
	verify(OpStatus::IsSuccess(rc));
	verify(OpStatus::IsSuccess(ufos->Close()));

	// Check what was written
	OpFileLength filelen = 0;
	verify(OpStatus::IsSuccess(of->GetFileLength(filelen)));
	verify(filelen == 2);

	verify(OpStatus::IsSuccess(of->Open(OPFILE_READ | OPFILE_TEXT)));
	char data[2]; /* ARRAY OK 2012-02-08 peter */
	OpFileLength bytesread = 0;
	verify(OpStatus::IsSuccess(of->Read(data, 2, &bytesread)));
	verify(bytesread == 2);
	verify(op_strncmp(data, "\xC3\xA5", 2) == 0);
	of->Close();
}
finally
{
	OP_DELETE(ufos);
	if (of) of->Delete();
	OP_DELETE(of);
}

test("Writing string")
	require UTIL_STRING_STREAM;
{
	// Write
	OpString s;
	UnicodeStringOutputStream *usos = OP_NEW(UnicodeStringOutputStream, ());
	verify(usos);
	verify(OpStatus::IsSuccess(usos->Construct(&s)));
	TRAPD(rc, usos->WriteStringL(UNI_L("\x00E5")));
	verify(OpStatus::IsSuccess(rc));
	verify(OpStatus::IsSuccess(usos->Close()));

	// Check what was written
	verify(s.Compare(UNI_L("\x00E5")) == 0);
}
finally
{
	OP_DELETE(usos);
}
