/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "util.opfile.opmemfile";
require undefined HAVE_NO_OPMEMFILE;

include "modules/util/opstring.h";
include "modules/util/opfile/opmemfile.h";

test("Eof")
{
	OpMemFile* memfile = OpMemFile::Create((const unsigned char*)"test", 5);
	verify(memfile);
	OP_STATUS err = memfile->Open(OPFILE_READ | OPFILE_WRITE);
	verify(OpStatus::IsSuccess(err));
	char buf[5]; /* ARRAY OK 2009-04-03 adame */
	OpFileLength bytes_read = 0;
	err = memfile->Read(buf, 5, &bytes_read);
	verify(OpStatus::IsSuccess(err));
	verify(bytes_read == 5);
	verify(memfile->Eof());
	err = memfile->Read(buf, 1, &bytes_read);
	verify(memfile->Eof());
	OpFileLength pos;
	verify(OpStatus::IsSuccess(memfile->GetFilePos(pos)));
	verify(pos == 5);
	BOOL exists;
	verify(OpStatus::IsSuccess(memfile->Exists(exists)));
	verify(exists);
}
finally
{
	OP_DELETE(memfile);
}

test("Writing/Reading")
{
	OpMemFile memfile;

	// prepare random data
	char input_data[1458]; /* ARRAY OK msimonides 2010-09-3 */
	size_t i;
	for (i = 0; i < sizeof(input_data); ++i) // fill it with 0123... pattern
		input_data[i] = '0' + i % 10;

	// test writing
	const char* cur_ptr = input_data;
	verify_success(memfile.Open(OPFILE_WRITE));

	while(cur_ptr < input_data + sizeof(input_data)) // write it in multiple operations
	{
		size_t bytes_to_write = MIN(sizeof(input_data) / 10,  static_cast<size_t>(input_data + sizeof(input_data) - cur_ptr));
		verify_success(memfile.Write(cur_ptr, bytes_to_write));
		cur_ptr += bytes_to_write;
	}
	memfile.Close();

	// test reading
	char read_buffer[324]; /* ARRAY OK msimonides 2010-09-3 */
	cur_ptr = input_data;
	verify_success(memfile.Open(OPFILE_READ));

	OpFileLength bytes_read, total_bytes_read = 0;

	do
	{
		verify_success(memfile.Read(read_buffer, sizeof(read_buffer), &bytes_read));
		verify(bytes_read <= (OpFileLength)sizeof(read_buffer));
		total_bytes_read += bytes_read;
		verify(total_bytes_read <= (OpFileLength)sizeof(input_data));
		verify(op_memcmp(cur_ptr, read_buffer, static_cast<size_t>(bytes_read)) == 0);
		cur_ptr += bytes_read;

	} while (bytes_read == sizeof(read_buffer));
	verify(total_bytes_read == sizeof(input_data));
	memfile.Close();
}

test("ReadStringL")
{
	// A simple file with two lines of text
	static const unsigned char file[] =
	//!Line 1
	//!Line 2
	;

	OpMemFile *mf = OpMemFile::Create(NULL, 0);
	OpMemFile *ofp = OpMemFile::Create(file, long(sizeof file));
	verify(ofp != NULL);

	// Read first line
	OpString8 s;
	OP_STATUS err = ofp->ReadLine(s);
	verify(OpStatus::IsSuccess(err));
	verify(s.Compare("Line 1") == 0);

	// Read second line
	err = ofp->ReadLine(s);
	verify(OpStatus::IsSuccess(err));
	verify(s.Compare("Line 2") == 0);

	err = mf->Copy(ofp);
	verify(err == OpStatus::OK);

	err = mf->ReadLine(s);
	verify(err == OpStatus::OK);
	verify(s.Compare("Line 1") == 0);

	err = mf->ReadLine(s);
	verify(err == OpStatus::OK);
	verify(s.Compare("Line 2") == 0);
}
finally
{
	OP_DELETE(ofp);
	OP_DELETE(mf);
}
