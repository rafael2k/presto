group "util.opautoptr";

include "modules/util/opautoptr.h";

global
{
	struct foo {
		char a, b;
	};

}

test("OpAutoPtr") leakcheck;
{
	char *a = OP_NEW(char, ()), *b = OP_NEW(char, ());
	OpAutoPtr<char> p(a);
	OpAutoPtr<foo> q;
	foo *c = OP_NEW(foo, ());

	*p = 2;

	verify(*p == 2);
	verify(p.get() == a);

	p = b;
	*p = 3;

	verify(*p == 3);
	verify(p.get() == b);

	p.reset();

	q = c;
	q->a = 1;
	q->b = 2;

	verify(q->a == (*q).a && q->b == 2 && c->a == 1);
}

test("OpAutoArray") leakcheck;
{
	char *a = OP_NEWA(char, 13), *b = OP_NEWA(char, 17);
	verify(a && b);
	OpAutoArray<char> p(a);
	OpAutoArray<foo> q;
	foo *c = OP_NEWA(foo, 123);
	verify(c);

	p[7] = 2;

	verify(p[7] == 2);
	verify(p.get() == a);

	p = b;
	p[12] = 3;

	verify(p[12] == 3);
	verify(p.get() == b);

	p.reset();

	q = c;
	q[5].a = 1;
	q[5].b = 2;

	verify(q[5].a == (q.get() + 5)->a && q[5].b == 2 && c[5].a == 1);
}
