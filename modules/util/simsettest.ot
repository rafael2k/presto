/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "util.simset";

include "modules/util/simset.h";

global
{
	class MyLink : public Link {
	public:
		int *m_counter;
		MyLink(int *counter)
		: Link(), m_counter(counter) { (*m_counter)++; }
		~MyLink()                    { (*m_counter)--; }
	};

	class MyListElement : public ListElement<MyListElement> {
	public:
		int *m_counter;
		MyListElement(int *counter)
		: ListElement<MyListElement>(), m_counter(counter) { (*m_counter)++; }
		~MyListElement()                                   { (*m_counter)--; }
	};

	class MyCountedListElement
	: public CountedListElement<MyCountedListElement> {
	public:
		int *m_counter;
		MyCountedListElement(int *counter)
		: CountedListElement<MyCountedListElement>(), m_counter(counter)
		{ (*m_counter)++; }
		~MyCountedListElement() { (*m_counter)--; }
	};

	class MyListElmWithNumber : public ListElement<MyListElmWithNumber> {
	public:
		int number;
		MyListElmWithNumber(int n) : number(n){}
		MyListElmWithNumber(const MyListElmWithNumber& o) : number(o.number){}

		static int Compare(const MyListElmWithNumber* lhs, const MyListElmWithNumber* rhs)
		{
			return lhs->number - rhs->number;
		}
	};
	class MyListElmWithNumberList : public List<MyListElmWithNumber> {
	public:
		~MyListElmWithNumberList() { RemoveAll(); }
	};
}

test("Test Link and Head") leakcheck;
{
	int counter = 0;
	Head list;
	MyLink *e;

	e = OP_NEW(MyLink, (&counter));
	verify(e);
	verify(counter == 1);
	verify(list.Cardinal() == 0);

	e->Into(&list);
	verify(counter == 1);
	verify(list.Cardinal() == 1);
	verify(0 != list.Last());
	verify(list.Last() == list.First());
	verify(!list.First()->Precedes(list.Last()));
	verify(!list.Last()->Precedes(list.First()));

	e->Out();
	verify(counter == 1);
	verify(list.Cardinal() == 0);

	OP_DELETE(e);
	verify(counter == 0);
	verify(list.Cardinal() == 0);

	e = OP_NEW(MyLink, (&counter));
	verify(e);
	verify(counter == 1);
	verify(list.Cardinal() == 0);

	e->Into(&list);
	verify(counter == 1);
	verify(list.Cardinal() == 1);

	e = OP_NEW(MyLink, (&counter));
	verify(e);
	verify(counter == 2);
	verify(list.Cardinal() == 1);

	e->Into(&list);
	verify(counter == 2);
	verify(list.Cardinal() == 2);
	verify(list.Last() != list.First());
	verify(list.First()->Precedes(list.Last()));
	verify(!list.Last()->Precedes(list.First()));

	list.Clear();
	verify(list.Empty());
	verify(counter == 0);
	verify(list.Cardinal() == 0);
}

test("Test ListElement and List") leakcheck;
{
	int counter = 0;
	List<MyListElement> list;
	MyListElement *e;

	e = OP_NEW(MyListElement, (&counter));
	verify(e);
	verify(counter == 1);
	verify(list.Cardinal() == 0);

	e->Into(&list);
	verify(counter == 1);
	verify(list.Cardinal() == 1);
	verify(0 != list.Last());
	verify(list.Last() == list.First());

	e->Out();
	verify(counter == 1);
	verify(list.Cardinal() == 0);

	OP_DELETE(e);
	verify(counter == 0);
	verify(list.Cardinal() == 0);

	e = OP_NEW(MyListElement, (&counter));
	verify(e);
	verify(counter == 1);
	verify(list.Cardinal() == 0);

	e->Into(&list);
	verify(counter == 1);
	verify(list.Cardinal() == 1);

	e = OP_NEW(MyListElement, (&counter));
	verify(e);
	verify(counter == 2);
	verify(list.Cardinal() == 1);

	e->Into(&list);
	verify(counter == 2);
	verify(list.Cardinal() == 2);
	verify(list.Last() != list.First());

	list.Clear();
	verify(list.Empty());
	verify(counter == 0);
	verify(list.Cardinal() == 0);
}

test("Test AutoDeleteList") leakcheck;
{
	int counter = 0;
	AutoDeleteList<MyListElement> *list;
	MyListElement *e;

	list = OP_NEW(AutoDeleteList<MyListElement>, ());

	e = OP_NEW(MyListElement, (&counter));
	verify(e);
	verify(counter == 1);
	verify(list->Cardinal() == 0);

	e->Into(list);
	verify(counter == 1);
	verify(list->Cardinal() == 1);

	e = OP_NEW(MyListElement, (&counter));
	verify(e);
	verify(counter == 2);
	verify(list->Cardinal() == 1);

	e->Into(list);
	verify(counter == 2);
	verify(list->Cardinal() == 2);

	e = OP_NEW(MyListElement, (&counter));
	verify(e);
	verify(counter == 3);
	verify(list->Cardinal() == 2);

	e->Into(list);
	verify(counter == 3);
	verify(list->Cardinal() == 3);

	OP_DELETE(list);
	verify(counter == 0);
}

test("Test CountedListElement and CountedList") leakcheck;
{
	int counter = 0;
	CountedList<MyCountedListElement> list;
	MyCountedListElement *e;

	e = OP_NEW(MyCountedListElement, (&counter));
	verify(e);
	verify(counter == 1);
	verify(list.Cardinal() == 0);

	e->Into(&list);
	verify(counter == 1);
	verify(list.Cardinal() == 1);
	verify(0 != list.Last());
	verify(list.Last() == list.First());

	e->Out();
	verify(counter == 1);
	verify(list.Cardinal() == 0);

	OP_DELETE(e);
	verify(counter == 0);
	verify(list.Cardinal() == 0);

	e = OP_NEW(MyCountedListElement, (&counter));
	verify(e);
	verify(counter == 1);
	verify(list.Cardinal() == 0);

	e->Into(&list);
	verify(counter == 1);
	verify(list.Cardinal() == 1);

	e = OP_NEW(MyCountedListElement, (&counter));
	verify(e);
	verify(counter == 2);
	verify(list.Cardinal() == 1);

	e->Into(&list);
	verify(counter == 2);
	verify(list.Cardinal() == 2);
	verify(list.Last() != list.First());

	list.Clear();
	verify(list.Empty());
	verify(counter == 0);
	verify(list.Cardinal() == 0);
}

test("Test CountedAutoDeleteList") leakcheck;
{
	int counter = 0;
	CountedAutoDeleteList<MyCountedListElement> *list;
	MyCountedListElement *e;

	list = OP_NEW(CountedAutoDeleteList<MyCountedListElement>, ());

	e = OP_NEW(MyCountedListElement, (&counter));
	verify(e);
	verify(counter == 1);
	verify(list->Cardinal() == 0);

	e->Into(list);
	verify(counter == 1);
	verify(list->Cardinal() == 1);

	e = OP_NEW(MyCountedListElement, (&counter));
	verify(e);
	verify(counter == 2);
	verify(list->Cardinal() == 1);

	e->Into(list);
	verify(counter == 2);
	verify(list->Cardinal() == 2);

	e = OP_NEW(MyCountedListElement, (&counter));
	verify(e);
	verify(counter == 3);
	verify(list->Cardinal() == 2);

	e->Into(list);
	verify(counter == 3);
	verify(list->Cardinal() == 3);

	OP_DELETE(list);
	verify(counter == 0);
}

subtest testsort(MyListElmWithNumber *elements, unsigned quantity)
{
	MyListElmWithNumberList list;
	for (unsigned k = 0; k < quantity; k++)
		elements[k].Into(&list);

	list.Sort(MyListElmWithNumber::Compare);

	for (MyListElmWithNumber *n = list.First(); n && n->Suc(); n = n->Suc())
	{
		int lhs = n->number, rhs = n->Suc()->number;
		verify(lhs <= rhs);
	}
}

test("sorting")
{
	// Empty list
	verify(testsort(NULL, 0));

	// Single element list
	MyListElmWithNumber n(1);
	verify(testsort(&n, 1));

	// Two element list
	MyListElmWithNumber elements0[2] = {2, 1};
	verify(testsort(elements0, ARRAY_SIZE(elements0)));

	// With duplicates
	MyListElmWithNumber elements1[10] = { 8, 1, 1, 6, 0, 9, 9, 4, 2, 3 };
	verify(testsort(elements1, ARRAY_SIZE(elements1)));

	// Without duplicates
	MyListElmWithNumber elements2[10] = { 2, 0, 6, 3, 1, 4, 5, 9, 8, 7 };
	verify(testsort(elements2, ARRAY_SIZE(elements2)));

	// Sorted inversely
	MyListElmWithNumber elements3[4] = { 2, 1, 0, -1 };
	verify(testsort(elements3, ARRAY_SIZE(elements3)));

	// Sorted
	MyListElmWithNumber elements4[4] = { 0, 0, 1, 2 };
	verify(testsort(elements4, ARRAY_SIZE(elements4)));
}
