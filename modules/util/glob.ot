/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "util.glob";

require OP_GLOB_SUPPORT;

include "modules/util/glob.h";

table tests_no_slash_brackets
{	// pattern,  string,  result
	{ "",          "",       TRUE },
	{ "a?c",    "abc",       TRUE },
	{ "a?c",    "abbc",     FALSE },
	{ "?",      "abc",      FALSE },
	{ "?",      "",         FALSE },
	{ "a?",     "a",        FALSE },
	{ "a?",     "ab",        TRUE },
	{ "a*",     "a",         TRUE },
	{ "case",   "case",      TRUE },
	{ "case",   "CASE",     FALSE },

	{ "*",      "",          TRUE },
	{ "*",      "*",         TRUE },
	{ "*",      "anything",  TRUE },

	{ "**",     "",          TRUE },
	{ "**",     "*",         TRUE },
	{ "**",     "anything",  TRUE },

	{ "***",    "",          TRUE },
	{ "***",    "*",         TRUE },
	{ "***",    "anything",  TRUE },

	{ "\\*",    "",         FALSE },
	{ "\\*",    "*",         TRUE },
	{ "\\*",    "anything", FALSE },

	{ "\\**",   "",         FALSE },
	{ "\\**",   "*",         TRUE },
	{ "\\**",   "a",        FALSE },
	{ "\\**",   "*a",        TRUE },
	{ "\\**",   "a*",       FALSE },
	{ "\\**",   "a*a",      FALSE },

	{ "*\\*",   "",         FALSE },
	{ "*\\*",   "*",         TRUE },
	{ "*\\*",   "a",        FALSE },
	{ "*\\*",   "*a",       FALSE },
	{ "*\\*",   "a*",        TRUE },
	{ "*\\*",   "a*a",      FALSE },

	{ "a",      "",         FALSE },
	{ "a",      "a",         TRUE },
	{ "a",      "b",        FALSE },
	{ "a",      "*",        FALSE },
	{ "a",      "aa",       FALSE },
	{ "a",      "ab",       FALSE },
	{ "a",      "ba",       FALSE },

	{ "*a",     "",         FALSE },
	{ "*a",     "*" ,       FALSE },
	{ "*a",     "a",         TRUE },
	{ "*a",     "b",        FALSE },
	{ "*a",     "aa",        TRUE },
	{ "*a",     "b",        FALSE },
	{ "*a",     "bb",       FALSE },
	{ "*a",     "ab",       FALSE },
	{ "*a",     "ba",        TRUE },
	{ "*a",     "abba",      TRUE },
	{ "*a",     "samba",     TRUE },

	{ "a*",     "",         FALSE },
	{ "a*",     "*" ,       FALSE },
	{ "a*",     "a",         TRUE },
	{ "a*",     "b",        FALSE },
	{ "a*",     "aa",        TRUE },
	{ "a*",     "b",        FALSE },
	{ "a*",     "bb",       FALSE },
	{ "a*",     "ab",        TRUE },
	{ "a*",     "ba",       FALSE },
	{ "a*",     "abba",      TRUE },
	{ "a*",     "samba",    FALSE },

	{ "*a*",    "",         FALSE },
	{ "*a*",    "*" ,       FALSE },
	{ "*a*",    "a",         TRUE },
	{ "*a*",    "b",        FALSE },
	{ "*a*",    "aa",        TRUE },
	{ "*a*",    "b",        FALSE },
	{ "*a*",    "bb",       FALSE },
	{ "*a*",    "ab",        TRUE },
	{ "*a*",    "ba",        TRUE },
	{ "*a*",    "abba",      TRUE },
	{ "*a*",    "samba",     TRUE },

	{ "a*b*",   "",         FALSE },
	{ "a*b*",   "*",        FALSE },
	{ "a*b*",   "a",        FALSE },
	{ "a*b*",   "b",        FALSE },
	{ "a*b*",   "aa",       FALSE },
	{ "a*b*",   "b",        FALSE },
	{ "a*b*",   "bb",       FALSE },
	{ "a*b*",   "ab",        TRUE },
	{ "a*b*",   "ba",       FALSE },
	{ "a*b*",   "abba",      TRUE },
	{ "a*b*",   "samba",    FALSE },

	{ "*b*a",   "",         FALSE },
	{ "*b*a",   "*",        FALSE },
	{ "*b*a",   "a",        FALSE },
	{ "*b*a",   "b",        FALSE },
	{ "*b*a",   "aa",       FALSE },
	{ "*b*a",   "b",        FALSE },
	{ "*b*a",   "bb",       FALSE },
	{ "*b*a",   "ab",       FALSE },
	{ "*b*a",   "ba",        TRUE },
	{ "*b*a",   "abba",      TRUE },
	{ "*b*a",   "samba",     TRUE },

	{ "?b?a",   "",         FALSE },
	{ "?b?a",   "ba",       FALSE },
	{ "?b?a",   "bxa",      FALSE },
	{ "?b?a",   "xbxa",      TRUE },
	{ "?b?a",   "xxbxa",    FALSE },

	{ "\\?",    "?",         TRUE },
	{ "?\\?",   "x?",        TRUE },
	{ "\\?\\?", "??",        TRUE },
	{ "\\??",   "?",        FALSE },
	{ "\\??",   "x?",       FALSE },

	{ "a[b]c",  "",         FALSE },
	{ "a[b]c",  "ac",       FALSE },
	{ "a[b]c",  "abc",       TRUE },
	{ "a[b]c",  "abbc",     FALSE },

	{ "a[bcd]e", "",        FALSE },
	{ "a[bcd]e", "ae",      FALSE },
	{ "a[bcd]e", "aae",     FALSE },
	{ "a[bcd]e", "abe",      TRUE },
	{ "a[bcd]e", "ace",      TRUE },
	{ "a[bcd]e", "ade",      TRUE },
	{ "a[bcd]e", "abcde",   FALSE },

	{ "a[!bcd]e", "ace",    FALSE },
	{ "a[!bcd]e", "axe",     TRUE },

	// Note: slash_is_special == FALSE
	{ "a[b/d]e", "a/e",      TRUE },
	{ "/a/*/c", "/a/b/b/c",  TRUE }
}

foreach (pattern, string, expected_result) from tests_no_slash_brackets
{
	test("OpGlob, brackets_enabled, \"" pattern "\" ~= \"" string "\"")
	{
		BOOL result = OpGlob(UNI_L(string), UNI_L(pattern), FALSE, TRUE);
		verify(result == expected_result);
	}
}

table tests_slash_brackets
{	// pattern,          string,  result
	{ "/a/b/c",        "/a/b/c",    TRUE },
	{ "/a/*/c",        "/a/b/c",    TRUE },
	{ "/a/*/c",      "/a/b/b/c",   FALSE },
	{ "/a/*/b",        "/a///b",   FALSE },

	{ "/a/[abc]/c",    "/a/b/c",    TRUE },
	{ "/a/[abc]/c",    "/a/d/c",   FALSE },
	{ "/a/[abc]/c",    "/a/ab/c",  FALSE },
	{ "/a/[abc/]/c",   "/a///c",   FALSE },
	{ "/a[]bc]",          "/a]",    TRUE },
	{ "/a[!]bc]",         "/a]",   FALSE },
	{ "/a[!]bc]",         "/ad",    TRUE },
	{ "a[\\\\a]",         "a\\",    TRUE }
}

foreach (pattern, string, expected_result) from tests_slash_brackets
{
	test("OpGlob, slash_is_special, brackets_enabled, \"" pattern "\" ~= \"" string "\"")
	{
		BOOL result = OpGlob(UNI_L(string), UNI_L(pattern), TRUE, TRUE);
		verify(result == expected_result);
	}
}

table tests_no_slash_no_brackets
{	// pattern,      string,  result
	{ "a[abc]c",      "abc",   FALSE },
	{ "a[abc]c",  "a[abc]c",    TRUE },
	{ "a][b",        "a][b",    TRUE },
	{ "a[]b",        "a[]b",    TRUE },
	{ "[]",            "[]",    TRUE },
	{ "[*",            "[]",    TRUE },
	{ "[*",          "[abc",    TRUE },
	{ "[?",          "[abc",   FALSE },
	{ "[?",            "[]",    TRUE },
	{ "[?",            "[a",    TRUE },
	{ "]",              "]",    TRUE },
	{ "[",              "[",    TRUE },
	{ "[",              "x",   FALSE },
	{ "?",              "[",    TRUE },
}

foreach (pattern, string, expected_result) from tests_no_slash_no_brackets
{
	test("OpGlob, \"" pattern "\" ~= \"" string "\"")
	{
		BOOL result = OpGlob(UNI_L(string), UNI_L(pattern), FALSE, FALSE);
		verify(result == expected_result);
	}
}
