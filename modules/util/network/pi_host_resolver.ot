/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "util.network.pi_host_resolver";

require PI_HOST_RESOLVER;

include "modules/util/network/pi_host_resolver.h";
include "modules/url/url_socket_wrapper.h";

global
{
	class TestListener : public OpHostResolverListener
	{
	public:
		void OnHostResolved(OpHostResolver* host_resolver)
		{
			if (host_resolver->GetAddressCount())
				ST_passed();
			else
				ST_failed("Got OnHostResolved but no results."); 
			OP_DELETE(this);
			OP_DELETE(host_resolver);
		}
		void OnHostResolverError(OpHostResolver* host_resolver,
								 OpHostResolver::Error error)
		{
			ST_failed("Got OnHostResolverError");
			OP_DELETE(this);
			OP_DELETE(host_resolver);
		}
	};
}

test("PiOpHostResolverManager - limits")
{
	PiOpHostResolverManager* m = OP_NEW(PiOpHostResolverManager, ());
	verify(OpStatus::IsError(m->MakeNewQuery(NULL, NULL)));
	OP_DELETE(m);
}

test("PiOpHostResolver")
	async;
{
	TestListener* tl = OP_NEW(TestListener, ());
	OpHostResolver* r;
	SocketWrapper::CreateHostResolver(&r, tl);
	if (OpStatus::IsError(r->Resolve(UNI_L("www.opera.com"))))
		ST_failed("Resovle returned error.");
}

test("PiOpHostResolver - limits")
	async;
{
	uni_char large[4100]; /* ARRAY OK 2009-04-03 adame */
	for (int i=0; i < 4100; ++i)
		large[i] = 'a';
	large[4100-1] = 0;

	TestListener* tl = OP_NEW(TestListener, ());
	OpHostResolver* r;
	SocketWrapper::CreateHostResolver(&r, tl);
	if (OpStatus::IsError(r->Resolve(large)))
	{
		OP_DELETE(tl);
		OP_DELETE(r);
		ST_passed();
	}
}
