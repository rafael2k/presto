/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2006 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "util.ophashtable2";

include "modules/util/OpHashTable.h";

global
{
	class Function : public OpHashFunctions {
	public:
		virtual UINT32 Hash(const void* key)
		{ 
			char *str = (char*)key;
			UINT32 val=0; 
			while (*str) 
				val+=*str++; 
			return val%3; 
		};

		static void add(const void * /* key */, void *data)
		{
			int *p = (int*)data;
			(*p)++;
		};

		virtual BOOL KeysAreEqual(const void *key1, const void *key2)
		{ 
			char *str1 = (char*)key1, *str2 = (char*)key2;
			return op_strcmp(str1, str2)==0;
		};
	};
}

test("GetData")
{
	OP_STATUS ret;
	OpHashTable h;
	Function hf;
	const char *key1 = "foo";
	int data1=10;
	const char *key2 = "bar";
	int data2=20;
	const char *key3 = "baz";
	int data3=30;
	const char *key4 = "fie";
	int data4=40;
	const char *key5 = "fum";
	int data5=50;
	void *data;

	h.SetHashFunctions(((Function*)(&hf)));

	ret = h.Add(key1, &data1);
	verify(ret == OpStatus::OK);

	ret = h.Add(key2, &data2);
	verify(ret == OpStatus::OK);

	ret = h.Add(key3, &data3);
	verify(ret == OpStatus::OK);

	ret = h.Add(key4, &data4);
	verify(ret == OpStatus::OK);

	ret = h.Add(key5, &data5);
	verify(ret == OpStatus::OK);

	ret = h.GetData(key1, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 10);

	ret = h.GetData(key2, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 20);

	ret = h.GetData(key3, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 30);

	ret = h.GetData(key4, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 40);

	ret = h.GetData(key5, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 50);

	verify(h.GetCount() == 5);
}

test("ForEach")
{
	OP_STATUS ret;
	OpHashTable h;
	Function hf;
	const char *key1 = "foo";
	int data1=10;
	const char *key2 = "bar";
	int data2=20;
	const char *key3 = "baz";
	int data3=30;
	const char *key4 = "fie";
	int data4=40;
	const char *key5 = "fum";
	int data5=50;
	void *data;

	h.SetHashFunctions(((Function*)(&hf)));

	ret = h.Add(key1, &data1);
	verify(ret == OpStatus::OK);

	ret = h.Add(key2, &data2);
	verify(ret == OpStatus::OK);

	ret = h.Add(key3, &data3);
	verify(ret == OpStatus::OK);

	ret = h.Add(key4, &data4);
	verify(ret == OpStatus::OK);

	ret = h.Add(key5, &data5);
	verify(ret == OpStatus::OK);

	h.ForEach(Function::add);

	ret = h.GetData(key1, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 11);

	ret = h.GetData(key2, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 21);

	ret = h.GetData(key3, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 31);

	ret = h.GetData(key4, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 41);

	ret = h.GetData(key5, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 51);
}

test("Remove")
{
	OP_STATUS ret;
	OpHashTable h;
	Function hf;
	const char *key1 = "foo";
	int data1=10;
	const char *key2 = "bar";
	int data2=20;
	const char *key3 = "baz";
	int data3=30;
	const char *key4 = "fie";
	int data4=40;
	const char *key5 = "fum";
	int data5=50;
	void *data;

	h.SetHashFunctions(((Function*)(&hf)));

	ret = h.Add(key1, &data1);
	verify(ret == OpStatus::OK);

	ret = h.Add(key2, &data2);
	verify(ret == OpStatus::OK);

	ret = h.Add(key3, &data3);
	verify(ret == OpStatus::OK);

	ret = h.Add(key4, &data4);
	verify(ret == OpStatus::OK);

	ret = h.Add(key5, &data5);
	verify(ret == OpStatus::OK);

	ret = h.Remove(key3, &data);
	verify(ret == OpStatus::OK);
	verify(*(int*)data == 30);

	ret = h.GetData(key1, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 10);

	ret = h.GetData(key2, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 20);

	ret = h.GetData(key3, &data);
	verify(ret == OpStatus::ERR);

	ret = h.GetData(key4, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 40);

	ret = h.GetData(key5, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 50);

	verify(h.GetCount() == 4);

	ret = h.Remove(key5, &data);
	verify(ret == OpStatus::OK);
	verify(*(int*)data == 50);

	ret = h.GetData(key1, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 10);

	ret = h.GetData(key2, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 20);

	ret = h.GetData(key3, &data);
	verify(ret == OpStatus::ERR);

	ret = h.GetData(key4, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 40);

	ret = h.GetData(key5, &data);
	verify(ret == OpStatus::ERR);

	ret = h.Remove(key1, &data);
	verify(ret == OpStatus::OK);
	verify(*(int*)data == 10);

	ret = h.GetData(key1, &data);
	verify(ret == OpStatus::ERR);

	ret = h.GetData(key2, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 20);

	ret = h.GetData(key3, &data);
	verify(ret == OpStatus::ERR);

	ret = h.GetData(key4, &data);
	verify(ret == OpStatus::OK);
	verify(*(int *)data == 40);

	ret = h.GetData(key5, &data);
	verify(ret == OpStatus::ERR);

	ret = h.Remove(key1, &data);
	verify(ret == OpStatus::ERR);

	h.RemoveAll();

	verify(h.GetCount() == 0);
}

test("Contains")
{
	OP_STATUS ret;
	OpHashTable h;
	Function hf;
	const char *key1 = "foo";
	int data1=10;
	const char *key2 = "bar";
	int data2=20;
	const char *key3 = "baz";
	int data3=30;

	h.SetHashFunctions(((Function*)(&hf)));

	ret = h.Add(key1, &data1);
	verify(ret == OpStatus::OK);

	ret = h.Add(key2, &data2);
	verify(ret == OpStatus::OK);

	ret = h.Add(key3, &data3);
	verify(ret == OpStatus::OK);

	verify(h.Contains(key1));
	verify(h.Contains(key2));
	verify(h.Contains(key3));

	verify(h.Contains(key1, &data1));
	verify(h.Contains(key2, &data2));
	verify(h.Contains(key3, &data3));

	verify(!h.Contains("fie", &data1));
}

test("Update")
{
	OpHashTable h;
	void *data;
	void *old_data;
	BOOL had_key;

	/* Add new value using Update(). Verify had_key == FALSE, that old_data
	   is unmodified afterwards, that the item count is 1, and read back and
	   verify the value. */

	had_key = TRUE;
	old_data = INT_TO_PTR(123);
	verify_success(h.Update(INT_TO_PTR(10), INT_TO_PTR(10), &old_data, &had_key));
	verify(!had_key);
	verify(PTR_TO_INT(old_data) == 123);
	verify(h.GetCount() == 1);
	verify_success(h.GetData(INT_TO_PTR(10), &data));
	verify(PTR_TO_INT(data) == 10);

	/* Update the same key. Verify had_key == TRUE, that old_data gets the
	   old value, that the item count is still 1, and read back and verify the
	   new value. */

	had_key = FALSE;
	old_data = INT_TO_PTR(0);
	verify_success(h.Update(INT_TO_PTR(10), INT_TO_PTR(11), &old_data, &had_key));
	verify(had_key);
	verify(PTR_TO_INT(old_data) == 10);
	verify(h.GetCount() == 1);
	verify_success(h.GetData(INT_TO_PTR(10), &data));
	verify(PTR_TO_INT(data) == 11);
}

test("Testing OpGenericHashTable")
{
	OpGenericHashTable<UINT32, UINT32> uint32_to_uint32;
	OpGenericHashTable<INT32, INT32>   int32_to_int32;
	OpGenericHashTable<UINT8, UINT8>   uint8_to_uint8;
	OpGenericHashTable<INT8, INT8>     int8_to_int8;
	UINT32 data_u32;
	INT32  data_i32;
	UINT8  data_u8;
	INT8   data_i8;

	//
	// Test Add(), Contains(), GetData(), and Remove()
	//

	// UINT32 -> UINT32

	// Add
	for (UINT32 i = 0; i < 32; ++i)
		verify_success(uint32_to_uint32.Add(i, 2*i));
	for (UINT32 i = 0; i < 32; ++i)
	{
		verify(uint32_to_uint32.Contains(i));

		// Retrieve
		verify_success(uint32_to_uint32.GetData(i, &data_u32));
		verify(data_u32 == 2*i);

		// Remove
		data_u32 = 0xFFFFFFFFu;
		verify_success(uint32_to_uint32.Remove(i, &data_u32));
		verify(data_u32 == 2*i);
		verify(!uint32_to_uint32.Contains(i));
	}

	// UINT8 -> UINT8 (smaller than a void*)

	// Add
	for (UINT8 i = 0; i < 32; ++i)
		verify_success(uint8_to_uint8.Add(i, 2*i));
	for (UINT8 i = 0; i < 32; ++i)
	{
		verify(uint8_to_uint8.Contains(i));

		// Retrieve
		verify_success(uint8_to_uint8.GetData(i, &data_u8));
		verify(data_u8 == 2*i);

		// Remove
		data_u8 = 0xFFu;
		verify_success(uint8_to_uint8.Remove(i, &data_u8));
		verify(data_u8 == 2*i);
		verify(!uint8_to_uint8.Contains(i));
	}

	// INT32 -> INT32 / INT8 -> INT8 (ensure sign is preserved)

	// Add
	for (INT32 i = -16; i < 16; ++i)
		verify_success(int32_to_int32.Add(i, -i));
	for (INT32 i = -16; i < 16; ++i)
	{
		verify(int32_to_int32.Contains(i));

		// Retrieve
		verify_success(int32_to_int32.GetData(i, &data_i32));
		verify(data_i32 == -i);

		// Remove
		data_i32 = 0x7FFFFFFF;
		verify_success(int32_to_int32.Remove(i, &data_i32));
		verify(data_i32 == -i);
		verify(!int32_to_int32.Contains(i));
	}

	// Add
	for (INT8 i = -16; i < 16; ++i)
		verify_success(int8_to_int8.Add(i, -i));
	for (INT8 i = -16; i < 16; ++i)
	{
		verify(int8_to_int8.Contains(i));

		// Retrieve
		verify_success(int8_to_int8.GetData(i, &data_i8));
		verify(data_i8 == -i);

		// Remove
		data_i8 = 0x7F;
		verify_success(int8_to_int8.Remove(i, &data_i8));
		verify(data_i8 == -i);
		verify(!int8_to_int8.Contains(i));
	}

	//
	// Test Update() and RemoveAll()
	//

	// Add
	for (INT8 i = -16; i < 16; ++i)
		verify_success(int8_to_int8.Add(i, -i));
	// Update
	for (INT8 i = -16; i < 16; ++i)
	{
		verify_success(int8_to_int8.Update(i, i*2, &data_i8));
		verify(data_i8 == -i);
	}
	verify(int8_to_int8.GetCount() == 32);
	// Retrieve
	for (INT8 i = -16; i < 16; ++i)
	{
		verify_success(int8_to_int8.GetData(i, &data_i8));
		verify(data_i8 == i*2);
	}
	// Update without retrieving old value
	verify_success(int8_to_int8.Update(0, 80));
	// Remove
	int8_to_int8.RemoveAll();
	verify(int8_to_int8.GetCount() == 0);

	//
	// Bonus test:
	// Store floats as values. Not sure if this is a good idea still.
	//

	if (sizeof(float) <= sizeof(void*))
	{
		OpGenericHashTable<UINT32, float> uint32_to_float;
		float data_float;
		const float epsilon = 0.1f;

		for (UINT32 i = 0; i < 32; ++i)
			verify_success(uint32_to_float.Add(i, i + 0.5f));
		for (UINT32 i = 0; i < 32; ++i)
		{
			const float high = i + 0.5f + epsilon;
			const float low = i + 0.5f - epsilon;
			verify_success(uint32_to_float.GetData(i, &data_float));
			verify(low <= data_float && data_float <= high);
		}
	}
}
