// <copyright header>

// <autogenerated modules/libcrypto/selftests/gadget_signing_ocsp.ot.generator.py>

group "crypto_gadget_signing_ocsp";

language c++;

require SIGNED_GADGET_SUPPORT;
require CRYPTO_OCSP_SUPPORT;

include "modules/libcrypto/selftest/GadgetSignatureVerifierTester.h";


global
{
	GadgetSignatureVerifierTester* g_signature_verifying_tester = NULL;
}

setup
{
	g_signature_verifying_tester = OP_NEW(GadgetSignatureVerifierTester, ());
	OP_ASSERT(g_signature_verifying_tester);
}

exit
{
	OP_DELETE(g_signature_verifying_tester);
}

table gadget_signing_ocsp_tests(const char* name, const char* filename, const char* sig_filename, CryptoXmlSignature::VerifyError expected_error)
{
// <testcases>
}


foreach (name, filename, sig_filename, expected_error) from gadget_signing_ocsp_tests
{
	test("Gadget signing, OCSP test " name)
		async;
		file gadget filename;
	{
		if (!StartGadgetSigningTest(
				g_signature_verifying_tester, gadget, sig_filename, expected_error))
			ST_failed("Failed to start gadget signature verification.");
	}
}
