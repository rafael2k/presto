/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2008 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "crypto hmac test";
include "modules/libcrypto/include/CryptoHMAC.h";

require init;
require CRYPTO_HMAC_SUPPORT;

/* Check vectors from http://www.faqs.org/rfcs/rfc2104.html */

test("basic hmac vector test 1")
{
	const byte key[16] = { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b };
	int key_len = 16;
	const byte digest_check[16] = { 0x92, 0x94, 0x72, 0x7a, 0x36, 0x38, 0xbb, 0x1c, 0x13, 0xf4, 0x8e, 0xf8, 0x15, 0x8b, 0xfc, 0x9d };
	
	CryptoHash *hash = CryptoHash::CreateMD5();
	verify(hash);

	byte *output_digest = OP_NEWA(byte, hash->Size());
	verify(output_digest);
	ANCHOR_ARRAY(byte, output_digest);
	
	OpAutoPtr<CryptoHMAC> hmac(CryptoHMAC::CreateHMAC(hash, key, key_len));
	verify(hmac.get());
	
	hmac->InitHash();
	hmac->CalculateHash("Hi There");
	hmac->ExtractHash(output_digest);
	
	verify(!op_memcmp(output_digest, digest_check,  hash->Size()));
}

test("basic hmac vector test 2")
{
	const byte *key = (const byte *) "Jefe";
	int key_len = 4;
	const byte digest_check[16] = { 0x75, 0x0c, 0x78, 0x3e, 0x6a, 0xb0, 0xb5, 0x03, 0xea, 0xa8, 0x6e, 0x31, 0x0a, 0x5d, 0xb7, 0x38 };
	
	CryptoHash *hash = CryptoHash::CreateMD5();
	verify(hash);

	byte *output_digest = OP_NEWA(byte, hash->Size());
	verify(output_digest);
	ANCHOR_ARRAY(byte, output_digest);
	
	OpAutoPtr<CryptoHMAC> hmac(CryptoHMAC::CreateHMAC(hash, key, key_len));
	verify(hmac.get());
	
	hmac->InitHash();
	hmac->CalculateHash("what do ya want for nothing?");
	hmac->ExtractHash(output_digest);
	
	verify(!op_memcmp(output_digest, digest_check,  hash->Size()));
}

test("basic hmac vector test 2")
{
	const byte key[16] = { 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA };
	int key_len = 16;
	const byte digest_check[16] = { 0x56, 0xbe, 0x34, 0x52, 0x1d, 0x14, 0x4c, 0x88, 0xdb, 0xb8, 0xc7, 0x33, 0xf0, 0xe8, 0xb3, 0xf6};

	byte *data = OP_NEWA(byte, 50);
	verify(data);
	ANCHOR_ARRAY(byte, data);

	op_memset(data, 0xdd, 50);
	
	CryptoHash *hash = CryptoHash::CreateMD5();
	verify(hash);

	byte *output_digest = OP_NEWA(byte, hash->Size());
	verify(output_digest);
	ANCHOR_ARRAY(byte, output_digest);
	
	OpAutoPtr<CryptoHMAC> hmac(CryptoHMAC::CreateHMAC(hash, key, key_len));
	verify(hmac.get());
	
	hmac->InitHash();
	hmac->CalculateHash(data, 50);
	hmac->ExtractHash(output_digest);
	
	verify(!op_memcmp(output_digest, digest_check,  hash->Size()));
}
