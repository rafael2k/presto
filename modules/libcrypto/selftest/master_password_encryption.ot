/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "crypto.master_password_encryption";
include "modules/libcrypto/include/CryptoMasterPasswordEncryption.h";
include "modules/windowcommander/src/SSLSecurtityPasswordCallbackImpl.h";
include "modules/libssl/ssl_api.h";
include "modules/libcrypto/include/CryptoUtility.h";

require init;
require CRYPTO_MASTER_PASSWORD_SUPPORT;

// Test table created using the old libsl encryption api
table encryption_examples(const char* plain, const char* password,  const char* cipher_text_base_64, int cipher_text_length)
{
	{	"hemmelighet",
		"password",
		"AAAACG4YplmAMIciAAAAEKlZMoHiJQF6835CyuA+Fmc=",
		32
	}

	{	"7 bytes",
		"blagg",
		"AAAACPhWF77HdkFuAAAACDTegjZPP84h",
		24
	}

	{	"8 bytes*",
		"paaefaehfrd",
		"AAAACIwwQrGy8wFBAAAAEArgsHcMxMcY78VAcgPbeYA=",
		32
	}

	{	"9 bytes**",
		"passaefaefea",
		"AAAACC/YXiioSUT3AAAAEDoP5+8E4gzFF40fhuM2XCw=",
		32
	}

	{	"15 bytes*******",
		"paaefaed",
		"AAAACAz5IgwrJBpOAAAAEBgBAlIjT9qVUM3SrtxaHjg=",
		32
	}

	{	"16 bytes********",
		"rd",
		"AAAACLmhT01uj+ZzAAAAGNbvURK3IeqqPVV5BdEIfTe54RIDRsA8ug==",
		40
	}

	{	"17 bytes*********",
		"paefaef",
		"AAAACPEu2Na/1nykAAAAGA9dAZrC6MGZ0z/4aXhcWh8ehLUs6uBBsA==",
		40
	}

	{	"",
		"",
		"AAAACMyXuY8htD74AAAACNs1Fv3+LMVp",
		24
	}

	{	"",
		"password",
		"AAAACCHJ3ggS1I+uAAAACG/DfvnsYneQ",
		24
	}
}

subtest EncryptAndDecryptBlob(const char *plain_text, const char *password_text, const UINT8 *verified_cipher_text, int cipher_text_length)
{
	const UINT8* plain = (UINT8*)plain_text;
	const UINT8* password = (UINT8*)password_text;

	int plain_length = op_strlen(plain_text);
	int password_length = op_strlen(password_text);

	CryptoMasterPasswordEncryption encryptor;
	encryptor.InitL();
	
	int ciphertext_length;
	UINT8 *ciphertext;
	OP_STATUS status = encryptor.EncryptPasswordWithSecurityMasterPassword(ciphertext, ciphertext_length, (const UINT8*)plain, plain_length, (const UINT8*)password, password_length);
	verify_success(status);
	ANCHOR_ARRAY(UINT8, ciphertext);

	verify(ciphertext);
	verify(ciphertext_length == cipher_text_length);
	verify(op_memcmp(verified_cipher_text, ciphertext, ciphertext_length) == 0);
	
	UINT8 *decrypted_master_password;
	int decrypted_master_password_length;
	verify_success(encryptor.DecryptPasswordWithSecurityMasterPassword(decrypted_master_password, decrypted_master_password_length, ciphertext, ciphertext_length, (const UINT8*)password, password_length));
	ANCHOR_ARRAY(UINT8, decrypted_master_password);

	verify(decrypted_master_password);
	verify(decrypted_master_password_length == plain_length);
	verify(op_memcmp(plain, decrypted_master_password, decrypted_master_password_length) == 0);
}


foreach (plain, password, cipher_text_base64, cipher_text_length) from encryption_examples
{
	test("Encrypt and decrypt " plain)
	{
		UINT8 *decoded_cipher_text;
		int decoded_cipher_text_length;
		verify_success(CryptoUtility::ConvertFromBase64(cipher_text_base64, decoded_cipher_text, decoded_cipher_text_length));
		ANCHOR_ARRAY(UINT8, decoded_cipher_text);

		verify(cipher_text_length == decoded_cipher_text_length);

		verify_success(EncryptAndDecryptBlob(plain, password, decoded_cipher_text, cipher_text_length));
	}
}
