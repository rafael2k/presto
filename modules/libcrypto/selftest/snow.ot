group "crypto snow stream cipher encrypted data test";
include "modules/libcrypto/src/CryptoStreamCipherSnow.h";

require init;

setup
{

}

exit
{

}


global
{
	UINT8 iv1[16] = {     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	UINT8 key1[16] = { 0x80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	UINT32 test_stream1[16]=
	{
		0x8D590AE9
		,0xA74A7D05
		,0x6DC9CA74
		,0xB72D1A45
		,0x99B0A083
		,0xFB45D13F
		,0xCF9411BD
		,0x9A503783
		,0xA98265AE
		,0xBF2DC77F
		,0xF2EB41E4
		,0xAA896508
		,0x19D8AB8F
		,0x2EB8077F
		,0x78F8C1F1
		,0x9D4C5CE2
	};
	
	UINT8 iv2[16] = {   0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0 };
	UINT8 key2[16] = { 0xAA, 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA, 0xAA };
	UINT32 test_stream2[16]=
	{
		0xE00982F5
		,0x25F02054
		,0x214992D8
		,0x706F2B20
		,0xDA585E5B
		,0x85E2746D
		,0x09F22681
		,0xB2749407
		,0x1D120231
		,0x82D9CCDF
		,0x7562671C
		,0xA19B884F
		,0x89572EAB
		,0x9EBBB511
		,0x85F42F7D
		,0xD5D4B51C
	};
	
	UINT8 iv3[16] = {   0,0,0,4, 0,0,0,3, 0,0,0,2, 0,0,0,1 };
	UINT8 key3[16] = { 0x80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	UINT32 test_stream3[16]=
	{
		0xD6403358
		,0xE0354A69
		,0x57F43FCE
		,0x44B4B13F
		,0xF78E24C2
		,0x46618A07
		,0x67AC83C1
		,0x0BFC45F0
		,0x726E7903
		,0xF29C8A09
		,0x25FF3EFF
		,0xB00B4819
		,0xE163BBE1
		,0xACA590CE
		,0x999D9AB1
		,0x9FF2D7B9
	};
	
	UINT8 iv4[16] = {   0,0,0,4, 0,0,0,3, 0,0,0,2, 0,0,0,1 };
	UINT8 key4[16] = { 0xAA, 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA, 0xAA };
	UINT32 test_stream4[16]=
	{
		0xC355385D
		,0xB31D6CBD
		,0xF774AF53
		,0x66C2E877
		,0x4DEADAC7
		,0xDC7229DF
		,0xED171D7B
		,0xB35D54CC
		,0xBC946376
		,0xFBC316BA
		,0x906FE918
		,0x1B8619D5
		,0x7FC1D6FC
		,0x75CC452A
		,0x55AE5978
		,0x44A4F13E
	};	

	UINT8 iv5[16] = {   0,0,0,4, 0,0,0,3, 0,0,0,2, 0,0,0,1 };
	UINT8 key5[32] = { 0x80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   };
	UINT32 test_stream5[16]=
	{
		0x7861080D
		,0x5755E90B
		,0x736F1091
		,0x6ED519B1
		,0x2C1A3A42
		,0x55297FC2
		,0x246AB7FA
		,0x6C089526
		,0x6199747D
		,0x75CEF3C2
		,0x5AAAC49C
		,0xFD210C77
		,0x8FB709CF
		,0x578B3CED
		,0xEB824586
		,0xFB3C76CC
	};	

	
	
	UINT8 iv6[16] = {   0,0,0,4, 0,0,0,3, 0,0,0,2, 0,0,0,1 };
	UINT8 key6[32] = { 0xAA, 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA, 0xAA,  0xAA, 0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA, 0xAA  };
	UINT32 test_stream6[16]=
	{
		0x29261FCE
		,0x5ED03820
		,0x1D6AFAF8
		,0xB87E74FE
		,0xD49ECB10
		,0x197EAC02
		,0x5D024EB4
		,0x5E0C7655
		,0x3792345F
		,0x391914D2
		,0xD1BEB523
		,0x7A8DC97A
		,0xD5F258EE
		,0xD8389970
		,0xEDB821F2
		,0xBD9BE5EA
	};	

}

test("streamcipher snow output stream check")
{
	int i = 0;
	OpAutoPtr<CryptoStreamCipherSnow> alg(CryptoStreamCipherSnow::CreateSnow());
	verify(alg.get() != NULL);

	verify(OpStatus::IsSuccess(alg->SetKey(key1, 16, iv1)));
	for (i = 0; i < 16; i++)
	{
		verify(test_stream1[i] == alg->ClockCipher());
	}

	verify(OpStatus::IsSuccess(alg->SetKey(key2, 16, iv2)));
	for (i = 0; i < 16; i++)
	{
		verify(test_stream2[i] == alg->ClockCipher());
	}
	
	verify(OpStatus::IsSuccess(alg->SetKey(key3, 16, iv3)));
	for (i = 0; i < 16; i++)
	{
		verify(test_stream3[i] == alg->ClockCipher());
	}

	verify(OpStatus::IsSuccess(alg->SetKey(key4, 16, iv4)));	
	for (i = 0; i < 16; i++)
	{
		verify(test_stream4[i] == alg->ClockCipher());
	}

	/* 256 bit */
	verify(OpStatus::IsSuccess(alg->SetKey(key5, 32, iv5)));	
	for (i = 0; i < 16; i++)
	{
		verify(test_stream5[i] == alg->ClockCipher());
	}

	verify(OpStatus::IsSuccess(alg->SetKey(key6, 32, iv6)));	
	for (i = 0; i < 16; i++)
	{
		verify(test_stream6[i] == alg->ClockCipher());
	}	
}

test("streamcipher snow add entropy check")
{
	int i = 0;
	OpAutoPtr<CryptoStreamCipherSnow> alg(CryptoStreamCipherSnow::CreateSnow());

	verify(alg.get() != NULL);

	UINT8 *data_array = OP_NEWA(UINT8, 16);
	ANCHOR_ARRAY(UINT8, data_array);
	
	verify(OpStatus::IsSuccess(alg->SetKey(key1, 16, iv1)));
	for (i = 0; i < 16; i++)
	{
		verify(test_stream1[i] == alg->ClockCipher());
	}
	
	verify(OpStatus::IsSuccess(alg->SetKey(key1, 16, iv1)));
	UINT8 e = 1;
	alg->AddEntropy(&e, 1);
	for (i = 0; i < 16; i++)
	{
		verify(test_stream1[i] != (data_array[i] = alg->ClockCipher()));
	}

	verify(OpStatus::IsSuccess(alg->SetKey(key1, 16, iv1)));
	e = 2; 
	alg->AddEntropy(&e, 1);
	for (i = 0; i < 16; i++)
	{
		verify(data_array[i] != alg->ClockCipher());
	}
}
