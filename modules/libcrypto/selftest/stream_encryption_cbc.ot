/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2008 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "crypto.stream_encryption_cbc";
include "modules/libcrypto/include/CryptoStreamEncryptionCBC.h";

require init;
require CRYPTO_STREAM_ENCRYPTION_CBC_SUPPORT;

setup
{

}

exit
{

}


global
{
}

test("stream cbc encrypt Encryped and decrypt")
require CRYPTO_STREAM_ENCRYPTION_CBC_SUPPORT;
{
	OpAutoPtr<CryptoSymmetricAlgorithm> symmetric_alg(CryptoSymmetricAlgorithm::CreateAES(16)); 
	verify(symmetric_alg.get());

	CryptoStreamEncryptionCBC *alg = CryptoStreamEncryptionCBC::Create(symmetric_alg.get());
	verify(alg);

	// Now alg owns symmetric_alg.get(). Release symmetric_alg.get().
	symmetric_alg.release();

	int block_size = alg->GetBlockSize();
	int key_size = alg->GetKeySize();

	const char *data = "Dette skal krypteres. 32 bytes.";
	int data_len = op_strlen(data) + 1 ; // We also encrypt the '0/'

	byte *target = OP_NEWA(byte, data_len);
	byte *decrypted_target = OP_NEWA(byte, data_len);
	byte *key = OP_NEWA(byte, key_size);
	byte *iv = OP_NEWA(byte, block_size);

	int i;
	for (i = 0; i < block_size; i++)
	{
		iv[i] = (byte)i; 		 // create an bogus iv
	}

	for (i = 0; i < key_size; i++)
	{
		key[i] = ((byte)i)^255;  // create a bogus key
	}

	verify(alg->SetKey(key) == OpStatus::OK);

	alg->SetIV(iv);

	alg->Encrypt(reinterpret_cast<const byte *>(data), target, data_len);  

	alg->SetIV(iv);
	alg->Decrypt(target, decrypted_target, data_len);

	verify(op_memcmp(decrypted_target, data, data_len) == 0); // Check that decrypt(encrypt(data)) == data

	OP_DELETEA(iv);
	OP_DELETEA(target);
	OP_DELETEA(decrypted_target);
	OP_DELETEA(key);

	OP_DELETE(alg);
}
