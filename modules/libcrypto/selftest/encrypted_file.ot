/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2008-2012 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "crypto encrypted files test";
include "modules/libcrypto/include/OpEncryptedFile.h";
include "modules/util/opfile/opfile.h";
include "modules/util/opfile/opfolder.h";

require init;
require CRYPTO_ENCRYPTED_FILE_SUPPORT;

setup
{
	OpString tmp_storage;
	temporary_file.Set(g_folder_manager->GetFolderPathIgnoreErrors(OPFILE_TEMP_FOLDER, tmp_storage));
	temporary_file.Append("/encrypted_file");
}

exit
{
}


global
{
	OpString temporary_file;
	
}

test("Encrypt and decrypt file")
{
	OpFile write_file;
	
	const byte key[16] = {1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8};
	
	verify(write_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	

	verify(write_file.Open(OPFILE_WRITE) == OpStatus::OK);
	
	const char *text = "testing of the encrypted file feature. This should work now. ";
	unsigned int len = op_strlen(text);
	
	verify(write_file.Write(text, len) == OpStatus::OK);
	
	verify(write_file.Close() == OpStatus::OK);

	OpFile read_file;
	char read_text[1000]; /* ARRAY OK 2009-06-16 alexeik */
	verify(read_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	
	verify(read_file.Open(OPFILE_READ) == OpStatus::OK);	
	OpFileLength file_length_check;	
	verify(read_file.GetFileLength(file_length_check) == OpStatus::OK);
	verify(file_length_check == len);
	
	OpFileLength bytes_read = 0;
	verify(read_file.Read(read_text, len, &bytes_read) == OpStatus::OK);
	
	OpString8 plaintext;
	plaintext.Set(text);

	verify(bytes_read == len);
	verify(op_strncmp(read_text, plaintext.CStr(), plaintext.Length()) == 0);
}

test("wrong key check")
{
	OpFile write_file;
	
	const byte key[16] = {1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8};
	const byte wrong_key[16] = {6,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8};
	
	verify(write_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	

	verify(write_file.Open(OPFILE_WRITE) == OpStatus::OK);
	
	const char *text = "testing of the encrypted file feature. This should work now. ";
	unsigned int len = op_strlen(text);
	
	verify(write_file.Write(text, len) == OpStatus::OK);
	
	verify(write_file.Close() == OpStatus::OK);

	OpFile read_file;
	verify(read_file.ConstructEncrypted(temporary_file.CStr(), wrong_key, 16) == OpStatus::OK);
	
	verify(read_file.Open(OPFILE_READ) == OpStatus::ERR_NO_ACCESS);	
}

test("encrypt file, append to file, and decrypt")
{
	OpFile write_file;
	
	const byte key[16] = {1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8};
	
	verify(write_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
 
	verify(write_file.Open(OPFILE_WRITE) == OpStatus::OK);
	
	const char *text = "testing of the encrypted file feature. This should work now. ";
	unsigned int len = op_strlen(text);
	
	verify(write_file.Write(text, len) == OpStatus::OK);
	
	verify(write_file.Close() == OpStatus::OK);

	OpFile write_file2;
		
	verify(write_file2.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	

	verify(write_file2.Open(OPFILE_APPEND) == OpStatus::OK);
	
	const char *text2 = "Ab";
	unsigned int len2 = op_strlen(text2);
	
	verify(write_file2.Write(text2, len2) == OpStatus::OK);

	const char *text3 = "B.";
	unsigned int len3 = op_strlen(text3);
	verify(write_file2.Write(text3, len3) == OpStatus::OK);

	const char *text4 = "And a little more.";
	unsigned int len4 = op_strlen(text4);
	verify(write_file2.Write(text4, len4) == OpStatus::OK);
	
	
	verify(write_file2.Close() == OpStatus::OK);	

	OpFile read_file;
	char read_text[1000]; /* ARRAY OK 2009-06-16 alexeik */
	verify(read_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	
	verify(read_file.Open(OPFILE_READ) == OpStatus::OK);	

	OpFileLength file_length_check;	
	verify(read_file.GetFileLength(file_length_check) == OpStatus::OK);
	verify(file_length_check == len + len2 + len3 + len4);
	
	OpFileLength bytes_read = 0;
	verify(read_file.Read(read_text, len + len2 + len3 + len4, &bytes_read) == OpStatus::OK);
	read_text[bytes_read] = '\0';
	
	OpString8 plaintext;
	plaintext.Set(text);
	plaintext.Append(text2);
	plaintext.Append(text3);
	plaintext.Append(text4);
	verify(bytes_read == len + len2 + len3 + len4);
	verify(op_strncmp(read_text, plaintext.CStr(), plaintext.Length()) == 0);	
}

test("encrypt file, append to file, and decrypt-boundary2")
{
	OpFile write_file;
	
	const byte key[16] = {1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8};
	
	verify(write_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
 
	verify(write_file.Open(OPFILE_WRITE) == OpStatus::OK);

	const char *text = "testing of the encrypted file feature. This should work now. ";
	unsigned int len = op_strlen(text);
	
	verify(write_file.Write(text, len) == OpStatus::OK);
	
	verify(write_file.Close() == OpStatus::OK);

	OpFile write_file2;
		
	verify(write_file2.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	

	verify(write_file2.Open(OPFILE_APPEND) == OpStatus::OK);
	
	const char *text2 = "Abc";
	unsigned int len2 = op_strlen(text2);
	
	verify(write_file2.Write(text2, len2) == OpStatus::OK);

	const char *text3 = "B.";
	unsigned int len3 = op_strlen(text3);
	verify(write_file2.Write(text3, len3) == OpStatus::OK);

	const char *text4 = "And a little more.";
	unsigned int len4 = op_strlen(text4);
	verify(write_file2.Write(text4, len4) == OpStatus::OK);
	
	
	verify(write_file2.Close() == OpStatus::OK);	

	OpFile read_file;
	char read_text[1000]; /* ARRAY OK 2009-06-16 alexeik */
	verify(read_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	
	verify(read_file.Open(OPFILE_READ) == OpStatus::OK);	
	
	OpFileLength bytes_read = 0;
	verify(read_file.Read(read_text, len + len2 + len3 + len4, &bytes_read) == OpStatus::OK);
	read_text[bytes_read] = '\0';
	
	OpString8 plaintext;
	plaintext.Set(text);
	plaintext.Append(text2);
	plaintext.Append(text3);
	plaintext.Append(text4);

	verify(op_strncmp(read_text, plaintext.CStr(), plaintext.Length()) == 0);	
}

test("encrypt file, append to file, and decrypt-boundary3")
{
	OpFile write_file;
	
	const byte key[16] = {1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8};
	
	verify(write_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
 
	verify(write_file.Open(OPFILE_WRITE) == OpStatus::OK);

	const char *text = "This should work now. ";
	unsigned int len = op_strlen(text);
	
	verify(write_file.Write(text, len) == OpStatus::OK);
	
	verify(write_file.Close() == OpStatus::OK);

	OpFile write_file2;
		
	verify(write_file2.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	

	verify(write_file2.Open(OPFILE_APPEND) == OpStatus::OK);
	
	const char *text2 = "Abc";
	unsigned int len2 = op_strlen(text2);
	
	verify(write_file2.Write(text2, len2) == OpStatus::OK);

	const char *text3 = "B.";
	unsigned int len3 = op_strlen(text3);
	verify(write_file2.Write(text3, len3) == OpStatus::OK);

	const char *text4 = "And a little more.";
	unsigned int len4 = op_strlen(text4);
	verify(write_file2.Write(text4, len4) == OpStatus::OK);
	
	
	verify(write_file2.Close() == OpStatus::OK);	

	OpFile read_file;
	char read_text[1000]; /* ARRAY OK 2009-06-16 alexeik */
	verify(read_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	
	verify(read_file.Open(OPFILE_READ) == OpStatus::OK);	
	
	OpFileLength bytes_read = 0;
	verify(read_file.Read(read_text, len + len2 + len3 + len4, &bytes_read) == OpStatus::OK);
	read_text[bytes_read] = '\0';
	
	OpString8 plaintext;
	plaintext.Set(text);
	plaintext.Append(text2);
	plaintext.Append(text3);
	plaintext.Append(text4);

	verify(op_strncmp(read_text, plaintext.CStr(), plaintext.Length()) == 0);	
}

test("encrypt file, append to file, and decrypt-boundary4")
{
	OpFile write_file;
	
	const byte key[16] = {1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8};
	
	verify(write_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
 
	verify(write_file.Open(OPFILE_WRITE) == OpStatus::OK);

	const char *text = "Testing of the encrypted file feature. ";
	unsigned int len = op_strlen(text);
	
	verify(write_file.Write(text, len) == OpStatus::OK);
	
	verify(write_file.Close() == OpStatus::OK);

	OpFile write_file2;
		
	verify(write_file2.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	

	verify(write_file2.Open(OPFILE_APPEND) == OpStatus::OK);
	
	const char *text2 = " This should work now.";
	unsigned int len2 = op_strlen(text2);
	
	verify(write_file2.Write(text2, len2) == OpStatus::OK);

	const char *text3 = "B.";
	unsigned int len3 = op_strlen(text3);
	verify(write_file2.Write(text3, len3) == OpStatus::OK);

	const char *text4 = "And a little more.";
	unsigned int len4 = op_strlen(text4);
	verify(write_file2.Write(text4, len4) == OpStatus::OK);
	
	
	verify(write_file2.Close() == OpStatus::OK);	

	OpFile read_file;
	char read_text[1000]; /* ARRAY OK 2009-06-16 alexeik */
	verify(read_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	
	verify(read_file.Open(OPFILE_READ) == OpStatus::OK);	
	
	OpFileLength bytes_read = 0;
	verify(read_file.Read(read_text, len + len2 + len3 + len4, &bytes_read) == OpStatus::OK);
	read_text[bytes_read] = '\0';
	
	OpString8 plaintext;
	plaintext.Set(text);
	plaintext.Append(text2);
	plaintext.Append(text3);
	plaintext.Append(text4);

	verify(op_strncmp(read_text, plaintext.CStr(), plaintext.Length()) == 0);	
}

test("encrypt file, append to file, and decrypt-boundary5")
{
	OpFile write_file;
	
	const byte key[16] = {1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8};
	
	verify(write_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
 
	verify(write_file.Open(OPFILE_WRITE) == OpStatus::OK);

	const char *text = "Testing. ";
	unsigned int len = op_strlen(text);
	
	verify(write_file.Write(text, len) == OpStatus::OK);
	
	verify(write_file.Close() == OpStatus::OK);

	OpFile write_file2;
		
	verify(write_file2.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	

	verify(write_file2.Open(OPFILE_APPEND) == OpStatus::OK);
	
	const char *text2 = " This should work now.";
	unsigned int len2 = op_strlen(text2);
	
	verify(write_file2.Write(text2, len2) == OpStatus::OK);

	const char *text3 = "B.";
	unsigned int len3 = op_strlen(text3);
	verify(write_file2.Write(text3, len3) == OpStatus::OK);

	const char *text4 = "And a little more.";
	unsigned int len4 = op_strlen(text4);
	verify(write_file2.Write(text4, len4) == OpStatus::OK);
	
	
	verify(write_file2.Close() == OpStatus::OK);	

	OpFile read_file;
	char read_text[1000]; /* ARRAY OK 2009-06-16 alexeik */
	verify(read_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	
	verify(read_file.Open(OPFILE_READ) == OpStatus::OK);	
	
	OpFileLength bytes_read = 0;
	verify(read_file.Read(read_text, len + len2 + len3 + len4, &bytes_read) == OpStatus::OK);
	read_text[bytes_read] = '\0';
	
	OpString8 plaintext;
	plaintext.Set(text);
	plaintext.Append(text2);
	plaintext.Append(text3);
	plaintext.Append(text4);

	verify(op_strncmp(read_text, plaintext.CStr(), plaintext.Length()) == 0);	
}

test("encrypt file, append to file, and decrypt-boundary6")
{
	OpFile write_file;
	
	const byte key[16] = {1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8};
	
	verify(write_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
 
	verify(write_file.Open(OPFILE_WRITE) == OpStatus::OK);

	const char *text = "Testing. ";
	unsigned int len = op_strlen(text);
	
	verify(write_file.Write(text, len) == OpStatus::OK);
	
	verify(write_file.Close() == OpStatus::OK);

	OpFile write_file2;
		
	verify(write_file2.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	

	verify(write_file2.Open(OPFILE_APPEND) == OpStatus::OK);
	
	const char *text2 = " This";
	unsigned int len2 = op_strlen(text2);
	
	verify(write_file2.Write(text2, len2) == OpStatus::OK);

	const char *text3 = "  should work now.B.";
	unsigned int len3 = op_strlen(text3);
	verify(write_file2.Write(text3, len3) == OpStatus::OK);

	const char *text4 = "And a little more.";
	unsigned int len4 = op_strlen(text4);
	verify(write_file2.Write(text4, len4) == OpStatus::OK);
	
	
	verify(write_file2.Close() == OpStatus::OK);	

	OpFile read_file;
	char read_text[1000]; /* ARRAY OK 2009-06-16 alexeik */
	verify(read_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	
	verify(read_file.Open(OPFILE_READ) == OpStatus::OK);	
	
	OpFileLength bytes_read = 0;
	verify(read_file.Read(read_text, len + len2 + len3 + len4, &bytes_read) == OpStatus::OK);
	read_text[bytes_read] = '\0';
	
	OpString8 plaintext;
	plaintext.Set(text);
	plaintext.Append(text2);
	plaintext.Append(text3);
	plaintext.Append(text4);

	verify(op_strncmp(read_text, plaintext.CStr(), plaintext.Length()) == 0);	
}

test("encrypt file, changing file position test")
{
	OpFile write_file;

	const byte key[16] = {1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8};

	verify(write_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);

	verify(write_file.Open(OPFILE_WRITE) == OpStatus::OK);

	const char *text = "testing of the encrypted file feature. This should work now. ";
	unsigned int len = op_strlen(text);

	verify(write_file.Write(text, len) == OpStatus::OK);

	verify(write_file.Close() == OpStatus::OK);

	OpFile read_file;
	char read_text[1000]; /* ARRAY OK 2009-06-16 alexeik */
	verify(read_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);

	verify(read_file.Open(OPFILE_READ) == OpStatus::OK);
	OpFileLength file_length_check;
	verify(read_file.GetFileLength(file_length_check) == OpStatus::OK);
	verify(file_length_check == len);

	OpFileLength test_pos = 26;
	verify(read_file.SetFilePos(test_pos) == OpStatus::OK);

	test_pos = FILE_LENGTH_NONE;
	verify(read_file.GetFilePos(test_pos) == OpStatus::OK);
	verify(test_pos == 26);

	OpFileLength bytes_read = 0;
	verify(read_file.Read(read_text, len - test_pos, &bytes_read) == OpStatus::OK);

	verify(bytes_read == len - test_pos);
	verify(op_strncmp(read_text, text + test_pos, (unsigned int)(len - test_pos)) == 0);

	test_pos = 16;
	verify(read_file.SetFilePos(test_pos) == OpStatus::OK);

	test_pos = FILE_LENGTH_NONE;
	verify(read_file.GetFilePos(test_pos) == OpStatus::OK);
	verify(test_pos == 16);

	bytes_read = 0;
	verify(read_file.Read(read_text, len - test_pos, &bytes_read) == OpStatus::OK);

	verify(bytes_read == len - test_pos);
	verify(op_strncmp(read_text, text + test_pos, (unsigned int)(len - test_pos)) == 0);

	test_pos = 0;
	verify(read_file.SetFilePos(test_pos) == OpStatus::OK);

	test_pos = FILE_LENGTH_NONE;
	verify(read_file.GetFilePos(test_pos) == OpStatus::OK);
	verify(test_pos == 0);

	bytes_read = 0;
	verify(read_file.Read(read_text, len - test_pos, &bytes_read) == OpStatus::OK);

	verify(bytes_read == len - test_pos);
	verify(op_strncmp(read_text, text + test_pos, (unsigned int)(len - test_pos)) == 0);
}

test("Create a copy")
{
	OpFile write_file;
	
	const byte key[16] = {1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8};
	
	verify(write_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);

	verify(write_file.Open(OPFILE_WRITE) == OpStatus::OK);
	
	const char *text = "testing of the encrypted file feature. This should work now. ";
	unsigned int len = op_strlen(text);
	
	verify(write_file.Write(text, len) == OpStatus::OK);
	
	verify(write_file.Close() == OpStatus::OK);

	OpFile orig_read_file;
	char read_text[1000]; /* ARRAY OK 2009-06-16 alexeik */
	verify(orig_read_file.ConstructEncrypted(temporary_file.CStr(), key, 16) == OpStatus::OK);
	
	OpAutoPtr<OpFileDescriptor> read_file(orig_read_file.CreateCopy());
	
	
	verify(read_file->Open(OPFILE_READ) == OpStatus::OK);	
	OpFileLength file_length_check;	
	verify(read_file->GetFileLength(file_length_check) == OpStatus::OK);
	verify(file_length_check == len);
	
	OpFileLength bytes_read = 0;
	verify(read_file->Read(read_text, len, &bytes_read) == OpStatus::OK);
	
	OpString8 plaintext;
	plaintext.Set(text);

	verify(bytes_read == len);
	verify(op_strncmp(read_text, plaintext.CStr(), plaintext.Length()) == 0);
}



