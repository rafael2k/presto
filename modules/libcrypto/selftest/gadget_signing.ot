/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "crypto_gadget_signing";

language c++;

require SIGNED_GADGET_SUPPORT;

include "modules/libcrypto/selftest/GadgetSignatureVerifierTester.h";


global
{
	class GadgetSignatureW3CTest29a_part2 : public GadgetSignatureVerifierTester
	{
	public:
		virtual ~GadgetSignatureW3CTest29a_part2() {}
		virtual void OnGadgetSignatureVerificationFinished()
		{
			const GadgetSignatureStorage& storage = m_signature_storage;
			const GadgetSignature* signature = storage.GetDistributorSignature(0);
			if (!signature)
			{
				ST_failed("Distributor signature is NULL.");
				return;
			}

			OP_ASSERT(signature->GetSignatureFilename() == UNI_L("signature1.xml"));

			CryptoXmlSignature::VerifyError verify_error = signature->GetVerifyError();
			CryptoXmlSignature::VerifyError expected_verify_error =
				CryptoXmlSignature::WIDGET_SIGNATURE_VERIFYING_FAILED_ALL_FILES_NOT_SIGNED;

			if (verify_error != expected_verify_error)
			{
				ST_failed("Unexpected distributor signature verify error: %s instead of %s.",
						  CryptoXmlSignature::VerifyErrorName(verify_error),
						  CryptoXmlSignature::VerifyErrorName(expected_verify_error));
				return;
			}

			ST_passed();
		}
	};

	class GadgetSignatureW3CTest40a_part2 : public GadgetSignatureVerifierTester
	{
	public:
		virtual ~GadgetSignatureW3CTest40a_part2() {}
		virtual void OnGadgetSignatureVerificationFinished()
		{
			const GadgetSignatureStorage& storage = m_signature_storage;
			if (storage.GetAuthorSignatureCount() != 1 ||
				storage.GetAuthorSignature() == NULL ||
				storage.GetAuthorSignature()->GetSignatureFilename().Compare(UNI_L("author-signature.xml"))
				)
			{
				ST_failed("author-signature.xml is not detected.");
				return;
			}

			const unsigned int expected_distributor_signature_count = 3;
			const char* expected_signature_filenames[expected_distributor_signature_count] =
				{ "signature987654321.xml", "signature2.xml", "signature1.xml" };

			const unsigned int distributor_signature_count = storage.GetDistributorSignatureCount();
			if (distributor_signature_count != expected_distributor_signature_count)
			{
				ST_failed("Wrong distributor signature count: %iu instead of %iu.",
						  distributor_signature_count, expected_distributor_signature_count);
				return;
			}

			for (unsigned int signature_idx = 0; signature_idx < distributor_signature_count; signature_idx++)
			{
				const GadgetSignature* signature = storage.GetDistributorSignature(signature_idx);
				if (!signature)
				{
					ST_failed("Distributor signature %iu is NULL.", signature_idx);
					return;
				}

				const char* expected_filename =	expected_signature_filenames[signature_idx];
				const OpStringC& filename = signature->GetSignatureFilename();

				if (filename.Compare(expected_filename))
				{
					OpString8 filename_utf8;
					filename_utf8.SetUTF8FromUTF16(filename);
					const char* filename_cstr = filename_utf8.CStr();
					if (!filename_cstr)
						filename_cstr = "(NULL)";

					ST_failed("Distributor signature %iu: unexpected name: %s instead of %s.",
							  signature_idx, filename_cstr, expected_filename);
					return;
				}
			}

			ST_passed();
		}
	};

	GadgetSignatureVerifierTester*  g_signature_verifying_tester = NULL;
}

setup
{
	g_signature_verifying_tester = OP_NEW(GadgetSignatureVerifierTester, ());
	OP_ASSERT(g_signature_verifying_tester);
}

exit
{
	OP_DELETE(g_signature_verifying_tester);
}


test("Gadget signing, gadget file does not exist")
	async;
{
	if (!StartGadgetSigningTest(
			g_signature_verifying_tester,
			"some_name_of_non_existing_file.wgt", "",
			CryptoXmlSignature::WIDGET_ERROR_ZIP_FILE_NOT_FOUND))
		ST_failed("Failed to start gadget signature verification.");
}

table gadget_signing_tests(const char* name, const char* filename, CryptoXmlSignature::VerifyError expected_error)
{
	{ "not a zip file",
			"data/not_zip_format.wgt",
			CryptoXmlSignature::WIDGET_ERROR_NOT_A_ZIPFILE }
	{ "self signed certificate",
			"data/selfsigned.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test  3a is not supported",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-3/3a/3a.wgt",
			/* The expected result should be changed if we start supporting
			 * enforcing of minimum key size. */
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test  4a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-4/4a/4a.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test  5a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-5/5a/5a.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test  7a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-7/7a/7a.wgt",
			CryptoXmlSignature::SIGNATURE_FILE_XML_PARSE_ERROR }
	{ "W3C test  7b",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-7/7b/7b.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test  8a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-8/8a/8a.wgt",
			CryptoXmlSignature::SIGNATURE_FILE_MISSING }
	{ "W3C test 11a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-11/11a/11a.wgt",
			CryptoXmlSignature::SIGNATURE_FILE_XML_MISSING_ARGS }
	{ "W3C test 11b",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-11/11b/11b.wgt",
			CryptoXmlSignature::SIGNATURE_VERIFYING_WRONG_PROPERTIES }
	{ "W3C test 12a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-12/12a/12a.wgt",
			CryptoXmlSignature::SIGNATURE_FILE_XML_MISSING_ARGS }
	{ "W3C test 12b",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-12/12b/12b.wgt",
			CryptoXmlSignature::SIGNATURE_VERIFYING_WRONG_PROPERTIES }
	{ "W3C test 13a is not supported",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-13/13a/13a.wgt",
			/* The expected result can be changed if we start supporting CRL
			 * for gadget signing. */
			CryptoXmlSignature::CERTIFICATE_INVALID_CERTIFICATE_CHAIN }
	{ "W3C test 13b is not supported",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-13/13b/13b.wgt",
			/* The expected result can be changed if we start supporting CRL
			 * for gadget signing. */
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test 14a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-14/14a/14a.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test 15a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-15/15a/15a.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test 16c",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-16/16c/16c.wgt",
			CryptoXmlSignature::SIGNATURE_VERIFYING_WRONG_PROPERTIES }
	{ "W3C test 16e",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-16/16e/16e.wgt",
			CryptoXmlSignature::SIGNATURE_VERIFYING_WRONG_PROPERTIES }
	{ "W3C test 16f",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-16/16f/16f.wgt",
			CryptoXmlSignature::SIGNATURE_FILE_XML_MISSING_ARGS }
	{ "W3C test 16g",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-16/16g/16g.wgt",
			CryptoXmlSignature::SIGNATURE_FILE_XML_GENERIC_ERROR }
	{ "W3C test 17a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-17/17a/17a.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test 19rsa",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-19/19rsa/19rsa.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test 19dsa is not supported",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-19/19dsa/19dsa.wgt",
			// DSA is not supported. Only RSA is supported so far.
			CryptoXmlSignature::SIGNATURE_FILE_XML_WRONG_ALGORITHM }
	{ "W3C test 20a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-20/20a/20a.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test 21a is not supported",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-21/21a/21a.wgt",
			// DSA is not supported. Only RSA is supported so far.
			CryptoXmlSignature::SIGNATURE_FILE_XML_WRONG_ALGORITHM }
	{ "W3C test 24a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-24/24a/24a.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test 25a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-25/25a/25a.wgt",
			CryptoXmlSignature::WIDGET_SIGNATURE_VERIFYING_FAILED_ALL_FILES_NOT_SIGNED }
	{ "W3C test 28a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-28/28a/28a.wgt",
			CryptoXmlSignature::WIDGET_SIGNATURE_VERIFYING_FAILED_ALL_FILES_NOT_SIGNED }
	{ "W3C test 29a, part 1",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-29/29a/29a.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test 30a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-30/30a/30a.wgt",
			CryptoXmlSignature::SIGNATURE_FILE_XML_GENERIC_ERROR }
	{ "W3C test 31a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-31/31a/31a.wgt",
			CryptoXmlSignature::SIGNATURE_FILE_XML_WRONG_ALGORITHM }
	{ "W3C test 32a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-32/32a/32a.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test 32b",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-32/32b/32b.wgt",
			CryptoXmlSignature::SIGNATURE_FILE_XML_GENERIC_ERROR }
	{ "W3C test 33a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-33/33a/33a.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test 34a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-34/34a/34a.wgt",
			CryptoXmlSignature::SIGNATURE_FILE_XML_MISSING_ARGS }
	{ "W3C test 34b",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-34/34b/34b.wgt",
			CryptoXmlSignature::SIGNATURE_FILE_XML_MISSING_ARGS }
	{ "W3C test 35a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-35/35a/35a.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test 36a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-36/36a/36a.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test 37a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-37/37a/37a.wgt",
			CryptoXmlSignature::SIGNATURE_FILE_XML_MISSING_ARGS }
	{ "W3C test 37b",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-37/37b/37b.wgt",
			CryptoXmlSignature::SIGNATURE_FILE_XML_MISSING_ARGS }
	{ "W3C test 38rsa",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-38/38rsa/38rsa.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test 38dsa is not supported",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-38/38dsa/38dsa.wgt",
			// DSA is not supported. Only RSA is supported so far.
			CryptoXmlSignature::SIGNATURE_FILE_XML_WRONG_ALGORITHM }
	{ "W3C test 39a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-39/39a/39a.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test 40a, part 1",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-40/40a/40a.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
	{ "W3C test 41a",
			"data/w3c-widgets-digsig-test-suite/test-cases/ta-41/41a/41a.wgt",
			CryptoXmlSignature::OK_CHECKED_LOCALLY }
}

foreach (name, filename, expected_error) from gadget_signing_tests
{
	test("Gadget signing, " name)
		async;
		file gadget filename;
	{
		if (!StartGadgetSigningTest(
				g_signature_verifying_tester, gadget, "", expected_error))
			ST_failed("Failed to start gadget signature verification.");
	}
}


test("Gadget signing, W3C test 29a, part 2")
	async;
	file gadget "data/w3c-widgets-digsig-test-suite/test-cases/ta-29/29a/29a.wgt";
{
	GadgetSignatureW3CTest29a_part2* tester =
		OP_NEW(GadgetSignatureW3CTest29a_part2, ());
	ST_delete_after_group(tester);
	if (!StartGadgetSigningTest(
			tester, gadget, "", CryptoXmlSignature::OK_CHECKED_LOCALLY))
		ST_failed("Failed to start gadget signature verification.");
}

test("Gadget signing, W3C test 40a, part 2")
	async;
	file gadget "data/w3c-widgets-digsig-test-suite/test-cases/ta-40/40a/40a.wgt";
{
	GadgetSignatureW3CTest40a_part2* tester =
		OP_NEW(GadgetSignatureW3CTest40a_part2, ());
	ST_delete_after_group(tester);
	if (!StartGadgetSigningTest(
			tester, gadget, "", CryptoXmlSignature::OK_CHECKED_LOCALLY))
		ST_failed("Failed to start gadget signature verification.");
}
