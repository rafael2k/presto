/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2008 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "crypto.rc4_encrypted_data_test";
include "modules/libcrypto/include/CryptoStreamEncryptionRC4.h";

require init;
require CRYPTO_STREAM_ENCRYPTION_RC4_SUPPORT;

setup
{

}

exit
{

}


global
{
}

test("stream encrypt Encryped and decrypt")
{
	const byte data[8] = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
	
	int data_len = 8;
	
	byte *target = OP_NEWA(byte, data_len);
	byte *decrypted_target = OP_NEWA(byte, data_len);
	const byte key[8] = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
	int key_len = 8;
	const byte expected_encrypted_text[8] = {0x75, 0xb7, 0x87, 0x80, 0x99, 0xe0, 0xc5, 0x96 };

	CryptoStreamEncryptionRC4 *alg;	
	verify((alg = CryptoStreamEncryptionRC4::CreateRC4(key_len)) != NULL);
	alg->Init(key);
	
	alg->Encrypt(data , target, data_len);
	
	verify(op_memcmp(expected_encrypted_text, target, data_len) == 0); // Check that decrypt(encrypt(data)) == data
	
	alg->Init(key);
	alg->Decrypt(target, decrypted_target, data_len);

	
	verify(op_memcmp(decrypted_target, data, data_len) == 0); // Check that decrypt(encrypt(data)) == data
	
	OP_DELETEA(target);
	OP_DELETEA(decrypted_target);
	
	OP_DELETE(alg);
}
