/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2008 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "crypto.blob_encryption";
include "modules/libcrypto/include/CryptoBlob.h";
include "modules/libcrypto/include/CryptoSymmetricAlgorithm.h";

require init;
require CRYPTO_BLOB_ENCRYPTION_SUPPORT;


global
{
	const uni_char *uni_password1 = UNI_L("my_secret_password12342222222");
	const uni_char *uni_password2 = UNI_L("my_secret_password123422222222");
	const uni_char *uni_password3 = UNI_L("my_secret_password1234222222222");
	const uni_char *uni_password4 = UNI_L("my_secret_password12342222222222");
	const uni_char *uni_password5 = UNI_L("my_secret_password123422222222222");
	const uni_char *uni_password6 = UNI_L("");
	const uni_char *uni_password7=  UNI_L("a");
	const uni_char *uni_password8 = UNI_L("my_secresalrigjapsjgposjgpsahgisaurhgpiusapuhgpisaurhgpaisuhgpaisurhgt_password123422222222222");
	
	const char *password1 = "my_secret_password12342222222";
	const char *password2 = "my_secret_password123422222222";
	const char *password3 = "my_secret_password1234222222222";
	const char *password4 = "my_secret_password12342222222222";
	const char *password5 = "my_secret_password123422222222222";
	const char *password6 = "";
	const char *password7=  "a";
	const char *password8 = "my_secresalrigjapsjgposjgpsahgisaurhgpiusapuhgpisaurhgpaisuhgpaisurhgt_password123422222222222";

}

subtest EncryptAndDecryptBlob(const UINT8 *plain, int plain_length, const char *blob_password, UINT8 *fixed_salt, BOOL secret_salt)
{
	output("Encrypting %s\n", plain);

	OpAutoPtr<CryptoHash> hash(CryptoHash::CreateSHA256());
	RETURN_OOM_IF_NULL(hash.get());

	// Create encryption key from blob password
	hash->InitHash();
	hash->CalculateHash(blob_password);
	UINT8 hashed_blob_password[256];
	hash->ExtractHash(hashed_blob_password);

	OpAutoPtr<CryptoBlobEncryption> blob(CryptoBlobEncryption::Create());
	RETURN_OOM_IF_NULL(blob.get());

	blob->SetKey(hashed_blob_password); // will only use the 16 bytes (128 bits) of the hashed password
	blob->SetFixedSalt(fixed_salt, secret_salt);

	UINT8 *target = NULL;
	int blob_length = 0;
	OP_STATUS result = blob->Encrypt(plain, plain_length, target, blob_length);
	ANCHOR_ARRAY(UINT8, target);
	verify(OpStatus::IsSuccess(result));

	UINT8 *decrypted_blob;
	int target_length = 0;
	result = blob->Decrypt(target, blob_length, decrypted_blob, target_length);
	ANCHOR_ARRAY(UINT8, decrypted_blob);

	verify(OpStatus::IsSuccess(result));

	verify(target_length == plain_length);
	verify(!op_memcmp(decrypted_blob, plain, target_length));
}

subtest EncryptAndDecryptBlobBase64(const uni_char* plain, const char *blob_password, UINT8 *fixed_salt, BOOL secret_salt)
{
	OpString8 output8;
	RETURN_IF_ERROR(output8.SetUTF8FromUTF16(plain));
	output("Encrypting %s\n", output8.CStr());

	OpAutoPtr<CryptoHash> hash(CryptoHash::CreateSHA256());
	RETURN_OOM_IF_NULL(hash.get());

	// Create encryption key from blob password
	hash->InitHash();
	hash->CalculateHash(blob_password);
	UINT8 hashed_blob_password[256];
	hash->ExtractHash(hashed_blob_password);

	OpAutoPtr<CryptoBlobEncryption> blob(CryptoBlobEncryption::Create());
	RETURN_OOM_IF_NULL(blob.get());
	blob->SetFixedSalt(fixed_salt, secret_salt);
	
	blob->SetKey(hashed_blob_password); // will only use the 16 bytes (128 bits) of the hashed password

	OpString target;
	OP_STATUS result = blob->EncryptBase64(plain, target);
	verify(OpStatus::IsSuccess(result));

	OpString decrypted_blob;

	result = blob->DecryptBase64(target.CStr(), decrypted_blob);

	verify(OpStatus::IsSuccess(result));

	verify(!uni_strcmp(decrypted_blob.CStr(), plain));
}


test("base64 blob encrypt Encryped and decrypt")
{
	output("\n");

	verify(EncryptAndDecryptBlobBase64(uni_password1, "mymaster", NULL, FALSE));
	verify(EncryptAndDecryptBlobBase64(uni_password2, "mymaster2", NULL, FALSE));
	verify(EncryptAndDecryptBlobBase64(uni_password3, "somessemymaster", NULL, FALSE));
	verify(EncryptAndDecryptBlobBase64(uni_password4, "mymassrgsrgsrter", NULL, FALSE));
	verify(EncryptAndDecryptBlobBase64(uni_password5, "mymastsrger", NULL, FALSE));
	verify(EncryptAndDecryptBlobBase64(uni_password6, "mymastesgr", NULL, FALSE));
	verify(EncryptAndDecryptBlobBase64(uni_password7, "mymastsrgsrgsarigjsporjgsger", NULL, FALSE));
	verify(EncryptAndDecryptBlobBase64(uni_password8, "mymasgrster", NULL, FALSE));
}

test("base64 blob encrypt Encryped and decrypt with fixed and secret salt")
{
	output("\n");

	UINT8 salt[8] = {0,1,2,3,4,5,6,7};
	
	verify(EncryptAndDecryptBlobBase64(uni_password1, "mymaster", salt, TRUE));
	verify(EncryptAndDecryptBlobBase64(uni_password2, "mymaster2", salt, TRUE));
	verify(EncryptAndDecryptBlobBase64(uni_password3, "somessemymaster", salt, TRUE));
	verify(EncryptAndDecryptBlobBase64(uni_password4, "mymassrgsrgsrter", salt, TRUE));
	verify(EncryptAndDecryptBlobBase64(uni_password5, "mymastsrger", salt, TRUE));
	verify(EncryptAndDecryptBlobBase64(uni_password6, "mymastesgr", salt, TRUE));
	verify(EncryptAndDecryptBlobBase64(uni_password7, "mymastsrgsrgsarigjsporjgsger", salt, TRUE));
	verify(EncryptAndDecryptBlobBase64(uni_password8, "mymasgrster", salt, TRUE));
}

test("blob encrypt Encryped and decrypt")
{
	output("\n");

	verify(EncryptAndDecryptBlob(reinterpret_cast<const UINT8*>(password1), op_strlen(password1) + 1, "mymaster", NULL, FALSE));
	verify(EncryptAndDecryptBlob(reinterpret_cast<const UINT8*>(password2), op_strlen(password2) + 1, "mymaster2", NULL, FALSE));
	verify(EncryptAndDecryptBlob(reinterpret_cast<const UINT8*>(password3), op_strlen(password3) + 1, "somessemymaster", NULL, FALSE));
	verify(EncryptAndDecryptBlob(reinterpret_cast<const UINT8*>(password4), op_strlen(password4) + 1, "mymassrgsrgsrter", NULL, FALSE));
	verify(EncryptAndDecryptBlob(reinterpret_cast<const UINT8*>(password5), op_strlen(password5) + 1, "mymastsrger", NULL, FALSE));
	verify(EncryptAndDecryptBlob(reinterpret_cast<const UINT8*>(password6), op_strlen(password6) + 1, "mymastesgr", NULL, FALSE));
	verify(EncryptAndDecryptBlob(reinterpret_cast<const UINT8*>(password7), op_strlen(password7) + 1, "mymastsrgsrgsarigjsporjgsger", NULL, FALSE));
	verify(EncryptAndDecryptBlob(reinterpret_cast<const UINT8*>(password8), op_strlen(password8) + 1, "mymasgrster", NULL, FALSE));
}
