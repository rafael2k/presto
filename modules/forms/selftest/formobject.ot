/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "Forms.FormObject";
require init;

language C++;

include "modules/forms/piforms.h";
include "modules/forms/form.h";
include "modules/logdoc/htm_elm.h";
include "modules/doc/frm_doc.h";
include "modules/widgets/OpMultiEdit.h";

global
{
	extern HTML_Element* FindDefButtonInternal(FramesDocument* frames_doc, HTML_Element* helm, HTML_Element* form_elm);
	/**
		Check whether widget is OpScrollbar and its parent is OpMultilineEdit
		and the parent has properly shown/hidden caret.
		@param [in] widget An widget which should be OpScrollbar whose parent is to be checked.
		@param [in] should_be_shown If TRUE, the function makes sure caret is shown.
		            If FALSE, the function makes sure caret is hidden.
		@return TRUE if all checkes passed succesfully, FALSE otherwise.
	*/
	BOOL CheckScrollbarParentCaret(OpWidget* widget, BOOL should_be_shown)
	{
		if (widget->GetType() != OpTypedObject::WIDGET_TYPE_SCROLLBAR)
			return FALSE;
		OpInputContext* after_parent = widget->GetParentInputContext();
		if (after_parent->GetType() != OpTypedObject::WIDGET_TYPE_MULTILINE_EDIT)
			return FALSE;
		OpMultilineEdit* after_parent_me = static_cast<OpMultilineEdit*>(after_parent);
		if (after_parent_me->TCGetInfo()->show_caret != should_be_shown)
			return FALSE;
		return TRUE;
	}

}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="submittext" type="text" value="thing">
	//! <input name="submitpassword" type="password" value="thing">
	//! <input name="submitcheckbox" type="checkbox" value="thing">
	//! <input name="submitradio" type="radio" value="thing">
	//! <input name="submitreset" type="reset" value="thing">
	//! <input name="submitfile" type="file" value="thing">
	//! <input name="submithidden" type="hidden" value="thing">
	//! <input name="submitimage" type="image" value="thing">
	//! <input name="submitbutton1" type="button" value="thing">
	//! <input name="submitsubmit" type="submit" value="thing">
	//! <button name="submitbutton2" value="thing">Stuffy</button>
	//! <select name="submitselect">
	//!   <option>Ett</option>
	//!   <option>Tvaa</option>
	//! </select>
	//! <textarea name="submitarea">Text</textarea>
	//! </form></body></html>
}

test("FormObjectExists")
{
	HTML_Element* form_elm = find_element("form");
	HTML_Element* text_elm = find_element("input", 1);
	HTML_Element* pwd_elm = find_element("input", 2);
	HTML_Element* check_elm = find_element("input", 3);
	HTML_Element* radio_elm = find_element("input", 4);
	HTML_Element* reset_elm = find_element("input", 5);
	HTML_Element* file_elm = find_element("input", 6);
	HTML_Element* hidden_elm = find_element("input", 7);
	HTML_Element* image_elm = find_element("input", 8);
	HTML_Element* button1_elm = find_element("input", 9);
	HTML_Element* submit_elm = find_element("input", 10);
	HTML_Element* button2_elm = find_element("button", 1);
	HTML_Element* select_elm = find_element("select", 1);
	HTML_Element* textarea_elm = find_element("textarea", 1);

	verify(form_elm);
	verify(text_elm);
	verify(pwd_elm);
	verify(check_elm);
	verify(radio_elm);
	verify(reset_elm);
	verify(file_elm);
	verify(hidden_elm);
	verify(image_elm);
	verify(button1_elm);
	verify(submit_elm);
	verify(button2_elm);
	verify(select_elm);
	verify(textarea_elm);

	verify(form_elm->Type() == HE_FORM);
	verify(text_elm->Type() == HE_INPUT);
	verify(text_elm->GetInputType() == INPUT_TEXT);
	verify(pwd_elm->Type() == HE_INPUT);
	verify(pwd_elm->GetInputType() == INPUT_PASSWORD);
	verify(check_elm->Type() == HE_INPUT);
	verify(check_elm->GetInputType() == INPUT_CHECKBOX);
	verify(radio_elm->Type() == HE_INPUT);
	verify(radio_elm->GetInputType() == INPUT_RADIO);
	verify(reset_elm->Type() == HE_INPUT);
	verify(reset_elm->GetInputType() == INPUT_RESET);
	verify(file_elm->Type() == HE_INPUT);
	verify(file_elm->GetInputType() == INPUT_FILE);
	verify(hidden_elm->Type() == HE_INPUT);
	verify(hidden_elm->GetInputType() == INPUT_HIDDEN);
	verify(image_elm->Type() == HE_INPUT);
	verify(image_elm->GetInputType() == INPUT_IMAGE);
	verify(button1_elm->Type() == HE_INPUT);
	verify(button1_elm->GetInputType() == INPUT_BUTTON);
	verify(submit_elm->Type() == HE_INPUT);
	verify(submit_elm->GetInputType() == INPUT_SUBMIT);
	verify(button2_elm->Type() == HE_BUTTON);
	verify(select_elm->Type() == HE_SELECT);
	verify(textarea_elm->Type() == HE_TEXTAREA);

	verify(text_elm->GetFormObject());
	verify(pwd_elm->GetFormObject());
	verify(check_elm->GetFormObject());
	verify(radio_elm->GetFormObject());
	verify(reset_elm->GetFormObject());
	verify(file_elm->GetFormObject());
	verify(!hidden_elm->GetFormObject());
	verify(!image_elm->GetFormObject());
	verify(button1_elm->GetFormObject());
	verify(submit_elm->GetFormObject());
	verify(!button2_elm->GetFormObject());
	verify(select_elm->GetFormObject());
	verify(textarea_elm->GetFormObject());
}


test("TextFormObject")
{
	HTML_Element* text_elm = find_element("input", 1);
	verify(text_elm);
	verify(text_elm->Type() == HE_INPUT);
	verify(text_elm->GetInputType() == INPUT_TEXT);
	FormObject* text_form_obj = text_elm->GetFormObject();
	verify(text_form_obj);
	// Must be a InputObject
	InputObject* text_form = (InputObject*)text_form_obj;
	// This uses a method that's not in FormObject
	text_form->SetDefaultCheck(text_form->GetDefaultCheck());

	verify(text_form->GetWidget());
	int width = text_form->Width();
	verify (width > 10); // 10 pixels should be a minimum
	int height = text_form->Height();
	verify (height > 5); // 5 pixels should be a minimum
	AffinePos doc_pos;
	text_form->GetPosInDocument(&doc_pos);
	OpPoint doc_pt = doc_pos.GetTranslation();
	verify(doc_pt.x > 0);
	verify(doc_pt.x < 10000);
	verify(doc_pt.y > 0);
	verify(doc_pt.y < 10000);
	OpString value;
	verify(OpStatus::IsSuccess(text_form->GetFormWidgetValue(value)));
	const uni_char* expected_val = UNI_L("thing");
	// value = "thing"
	verify(uni_strlen(expected_val) == 5);
	verify(value.Length() == 5);
	verify(value.Compare(expected_val) == 0);

	const uni_char* new_val = UNI_L("This is a new value kind of liksom\345\366\344. R\304ksm\366rg\345s");
	verify(OpStatus::IsSuccess(text_form->SetFormWidgetValue(new_val)));
	value.Empty();
	verify(OpStatus::IsSuccess(text_form->GetFormWidgetValue(value)));
	verify((unsigned)value.Length() == uni_strlen(new_val));
	verify(value.Compare(new_val) == 0);

	const uni_char* empty_val = UNI_L("");
	verify(OpStatus::IsSuccess(text_form->SetFormWidgetValue(empty_val)));
	value.Empty();
	verify(OpStatus::IsSuccess(text_form->GetFormWidgetValue(value)));
	verify(value.Length() == 0);
	// Not sure this should be demanded
	verify(value.CStr());
	verify(*value.CStr() == '\0');
}

test("PasswordFormObject")
{
	HTML_Element* pwd_elm = find_element("input", 2);
	verify(pwd_elm);
	verify(pwd_elm->Type() == HE_INPUT);
	verify(pwd_elm->GetInputType() == INPUT_PASSWORD);
	FormObject* pwd_form_obj = pwd_elm->GetFormObject();
	verify(pwd_form_obj);
	// Must be a InputObject
	InputObject* pwd_form = (InputObject*)pwd_form_obj;
	// This uses a method that's not in FormObject
	pwd_form->SetDefaultCheck(pwd_form->GetDefaultCheck());

	verify(pwd_form->GetWidget());
	int width = pwd_form->Width();
	verify (width > 10); // 10 pixels should be a minimum
	int height = pwd_form->Height();
	verify (height > 5); // 5 pixels should be a minimum
	AffinePos doc_pos;
	pwd_form->GetPosInDocument(&doc_pos);
	OpPoint doc_pt = doc_pos.GetTranslation();
	verify(doc_pt.x > 0);
	verify(doc_pt.x < 10000);
	verify(doc_pt.y > 0);
	verify(doc_pt.y < 10000);
	OpString value;
	verify(OpStatus::IsSuccess(pwd_form->GetFormWidgetValue(value)));
	const uni_char* expected_val = UNI_L("thing");
	// value = "thing"
	verify(uni_strlen(expected_val) == 5);
	verify(value.Length() == 5);
	verify(value.Compare(expected_val) == 0);

	const uni_char* new_val = UNI_L("This is a new value kind of liksom\345\366\344. R\304ksm\366rg\345s");
	verify(OpStatus::IsSuccess(pwd_form->SetFormWidgetValue(new_val)));
	value.Empty();
	verify(OpStatus::IsSuccess(pwd_form->GetFormWidgetValue(value)));
	verify((unsigned)value.Length() == uni_strlen(new_val));
	verify(value.Compare(new_val) == 0);

	const uni_char* empty_val = UNI_L("");
	verify(OpStatus::IsSuccess(pwd_form->SetFormWidgetValue(empty_val)));
	value.Empty();
	verify(OpStatus::IsSuccess(pwd_form->GetFormWidgetValue(value)));
	verify(value.Length() == 0);
	// Not sure this should be demanded
	verify(value.CStr());
	verify(*value.CStr() == '\0');
}

html
{
	//! <html>
	//! <head><title>Knappar</title></head>
	//! <body>
	//! <form>
	//! <h1>Input</h1>
	//! type=reset: <input type="reset"><br>
	//! type=submit: <input type="submit"><br>
	//! <br>
	//! type=submit, value="Skicka": <input type="submit" value="skicka"><br>
	//!
	//! <h1>Button</h1>
	//! type=reset: <button type="reset">Button text</button><br>
	//! type=submit: <button type="submit">Button text</button><br>
	//! type=button: <button type="button">Button text</button><br>
	//! No type <button>Button text</button><br>
	//! </form>
	//! </body>
	//! </html>
}

test("Button texts")
{
	HTML_Element* reset_button = find_element("input", 1);
	verify(reset_button);
	verify(reset_button->Type() == HE_INPUT);
	verify(reset_button->GetInputType() == INPUT_RESET);
	FormObject* form_object = reset_button->GetFormObject();
	verify(form_object);
	OpWidget* widget = form_object->GetWidget();
	verify(widget);
	// Should be button. How to check?
	OpString value;
	verify(OpStatus::IsSuccess(widget->GetText(value)));
	// has to have some text for the button
	verify(!value.IsEmpty());

	HTML_Element* submit_button = find_element("input", 2);
	verify(submit_button);
	verify(submit_button->Type() == HE_INPUT);
	verify(submit_button->GetInputType() == INPUT_SUBMIT);
	form_object = submit_button->GetFormObject();
	verify(form_object);
	widget = form_object->GetWidget();
	verify(widget);
	// Should be button. How to check?
	value.Empty();
	verify(OpStatus::IsSuccess(widget->GetText(value)));
	// has to have some text for the button
	verify(!value.IsEmpty());

	submit_button = find_element("input", 3);
	verify(submit_button);
	verify(submit_button->Type() == HE_INPUT);
	verify(submit_button->GetInputType() == INPUT_SUBMIT);
	form_object = submit_button->GetFormObject();
	verify(form_object);
	widget = form_object->GetWidget();
	verify(widget);
	// Should be button. How to check?
	value.Empty();
	verify(OpStatus::IsSuccess(widget->GetText(value)));
	// has to have some text for the button
	verify(!value.IsEmpty());
	verify(value.Compare(UNI_L("skicka")) == 0);
}

// Taken (and modified) from the testcase in bug 131596
html
{
	//!<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
	//!<html><head><title>Remove borders from INPUT</title>
	//!    <style type="text/css">
	//!      #id1,#id6 {  border: 0; }
	//!      #id2,#id7 {  border: 0 solid; }
	//!      #id3,#id8 {  border: none; }
	//!      #id4,#id9 {  border-style: none; }
	//!      #id5,#id10 {  border-width: 0; }
	//!    </style></head>
	//!<body>
	//!<p>This page should be green and there should be nothing else on the page.</p>
	//!<p><input type="text" id="id1"></p>
	//!<p><input type="text" id="id2"></p>
	//!<p><input type="text" id="id3"></p>
	//!<p><input type="text" id="id4"></p>
	//!<p><input type="text" id="id5"></p>
	//!<p><input type="text"></p>
	//!<p><button id="id6">Foo</button></p>
	//!<p><button id="id7">Foo</button></p>
	//!<p><button id="id8">Foo</button></p>
	//!<p><button id="id9">Foo</button></p>
	//!<p><button id="id10">Foo</button></p>
	//!<p><button>Foo</button></p>
	//!</body></html>
}

test("FormObject.Input.Borders (bug 131596) border 0")
{
	HTML_Element* input = find_element("input", 1);
	verify (input);
	FormObject* obj = input->GetFormObject();
	verify(obj);
	OpWidget* widget = obj->GetWidget();
	verify(widget);
	verify(widget->HasCssBorder());
}

test("FormObject.Input.Borders (bug 131596) border 0 solid")
{
	HTML_Element* input = find_element("input", 2);
	verify (input);
	FormObject* obj = input->GetFormObject();
	verify(obj);
	OpWidget* widget = obj->GetWidget();
	verify(widget);
	verify(widget->HasCssBorder());
}

test("FormObject.Input.Borders (bug 131596) border none")
{
	HTML_Element* input = find_element("input", 3);
	verify (input);
	FormObject* obj = input->GetFormObject();
	verify(obj);
	OpWidget* widget = obj->GetWidget();
	verify(widget);
	verify(widget->HasCssBorder());
}

test("FormObject.Input.Borders (bug 131596) border-style none")
{
	HTML_Element* input = find_element("input", 4);
	verify (input);
	FormObject* obj = input->GetFormObject();
	verify(obj);
	OpWidget* widget = obj->GetWidget();
	verify(widget);
	verify(widget->HasCssBorder());
}

test("FormObject.Input.Borders (bug 131596) border-width 0")
{
	HTML_Element* input = find_element("input", 5);
	verify (input);
	FormObject* obj = input->GetFormObject();
	verify(obj);
	OpWidget* widget = obj->GetWidget();
	verify(widget);
	verify(widget->HasCssBorder());
}

test("FormObject.Input.Borders (bug 131596) normal border")
{
	HTML_Element* input = find_element("input", 6);
	verify (input);
	FormObject* obj = input->GetFormObject();
	verify(obj);
	OpWidget* widget = obj->GetWidget();
	verify(widget);
	verify(!widget->HasCssBorder());
}

/*
test("FormObject.Button.Borders (bug 131596) border 0")
{
	HTML_Element* button = find_element("button", 1);
	verify (button);
	FormObject* obj = button->GetFormObject();
	verify(obj);
	OpWidget* widget = obj->GetWidget();
	verify(widget);
	verify(widget->HasCssBorder());
}

test("FormObject.Button.Borders (bug 131596) border 0 solid")
{
	HTML_Element* button = find_element("button", 2);
	verify (button);
	FormObject* obj = button->GetFormObject();
	verify(obj);
	OpWidget* widget = obj->GetWidget();
	verify(widget);
	verify(widget->HasCssBorder());
}

test("FormObject.Button.Borders (bug 131596) border none")
{
	HTML_Element* button = find_element("button", 3);
	verify (button);
	FormObject* obj = button->GetFormObject();
	verify(obj);
	OpWidget* widget = obj->GetWidget();
	verify(widget);
	verify(widget->HasCssBorder());
}

test("FormObject.Button.Borders (bug 131596) border-style none")
{
	HTML_Element* button = find_element("button", 4);
	verify (button);
	FormObject* obj = button->GetFormObject();
	verify(obj);
	OpWidget* widget = obj->GetWidget();
	verify(widget);
	verify(widget->HasCssBorder());
}

test("FormObject.Button.Borders (bug 131596) border-width 0")
{
	HTML_Element* button = find_element("button", 5);
	verify (button);
	FormObject* obj = button->GetFormObject();
	verify(obj);
	OpWidget* widget = obj->GetWidget();
	verify(widget);
	verify(widget->HasCssBorder());
}

test("FormObject.Button.Borders (bug 131596) normal border")
{
	HTML_Element* button = find_element("button", 6);
	verify (button);
	FormObject* obj = button->GetFormObject();
	verify(obj);
	OpWidget* widget = obj->GetWidget();
	verify(widget);
	verify(!widget->HasCssBorder());
}

*/

html
{
	//! <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
	//! <html>
	//! <head>
	//! 	<title>Submitting form with several submit inputs</title>
	//! </head>
	//! <body>
	//! 	<p>Press Enter key</p>
	//! 	<p>Result should display here (JavaScript must be enabled)</p>
	//! 	<form action="#" onsubmit="runtest('PASS');return false;">
	//! 		<input type="submit" value="">
	//! 		<input type="submit" value="" onclick="runtest('FAIL');return false;">
	//! 		<input type="text">
	//! 	</form>
	//! </body>
	//! </html>
}

test("Activating right button on enter - bug 207294")
{
	HTML_Element* input = find_element("input", 3);
	verify(input);
	HTML_Element* form = find_element("form");
	verify(form);
	HTML_Element* expected_button = find_element("input", 1);
	HTML_Element* button = FindDefButtonInternal(state.doc, state.doc->GetDocRoot(), form);
	verify(button);
	verify(button == expected_button);
}

html
{
	//! <html><body><textarea id="empty"></textarea>
	//! <textarea id="high">
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! Foo
	//! </textarea>
}
test("textarea.scrollheight.empty")
{
	HTML_Element* textarea = find_element("textarea", 1);
	verify(textarea);
	FormObject* obj = textarea->GetFormObject();
	verify(obj);
	TextAreaObject* textarea_obj = static_cast<TextAreaObject*>(textarea->GetFormObject());
	int top, left, width, height;
	textarea_obj->GetWidgetScrollPosition(left, top);
	textarea_obj->GetScrollableSize(width, height);

	verify(left == 0);
	verify(top == 0);
	verify(width > 0);
	verify(height == 32);
}

test("textarea.scrollheight.high")
{
	HTML_Element* textarea = find_element("textarea", 2);
	verify(textarea);

	FormObject* obj = textarea->GetFormObject();
	verify(obj);
	TextAreaObject* textarea_obj = static_cast<TextAreaObject*>(textarea->GetFormObject());
	int top, left, width, height;
	textarea_obj->GetWidgetScrollPosition(left, top);
	textarea_obj->GetScrollableSize(width, height);

	verify(left == 0);
	verify(top == 0);
	verify(width > 0);
	verify(height > 0);
	// 35 lines ~ 200-700 pixels or so
	verify(height < 700);
	verify(height > 200);
}


// Following tests are mirroring tests from widgets/selftest/ime.ot
// without checking IME.
html
{
	//!<script>
	//!function loaded()  {
	//!	document.querySelector('body').style.height = window.innerHeight * 2;
	//!}
	//!</script>
	//!<style>
	//!	body { padding: 0px; margin: 0px; }
	//!	textarea { margin: 0px; padding: 0px; width: 100px; height: 100px; overflow-wrap: normal; }
	//!</style>
	//!<body onload="loaded()">
	//!<textarea>ac nibh id diam feugiat consectetur at a dolor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec accumsan ullamcorper dapibus. Vestibulum nec mauris a neque bibendum tempor at vitae odio. Quisque dui enim, malesuada vel pellentesque suscipit, blandit sed felis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sed mattis nunc. Maecenas eu dolor dolor, sed tempor urna. Pellentesque turpis mi, gravida a rutrum vel, venenatis adipiscing lorem. Quisque aliquam dignissim libero vitae dapibus. Nunc hendrerit libero eu lorem mollis faucibus. Fusce vitae quam tortor, eget blandit tellus. Sed nec nunc sapien. Ut accumsan imperdiet orci et condimentum. Morbi rutrum tempus lorem, quis gravida felis sodales quis. In aliquam feugiat ante, a porta tortor fermentum id. Etiam mattis consectetur dolor, a luctus sem sodales ut.
	//!
	//!In tristique, nibh ac accumsan lacinia, metus dolor sollicitudin nisi, sed aliquet nibh mauris non quam. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque tincidunt tristique purus, non pretium est dapibus ac. Quisque quis velit ipsum, id volutpat nibh. Fusce commodo orci vitae sem sollicitudin fermentum. Aenean ut tortor sed mauris laoreet molestie sit amet quis mi. Duis posuere sem in magna imperdiet pellentesque. Praesent quis luctus nisi. Duis luctus turpis nec nisi euismod gravida. Nulla nisl sem, vestibulum eget semper a, mollis in nulla. Sed sit amet ligula purus. Donec volutpat, justo a gravida blandit, odio lacus mollis sem, non posuere tortor erat non sem. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed non sapien vel nisi interdum vehicula. Sed neque augue, vehicula sed posuere egestas, congue ut erat. Donec in ligula tortor, accumsan tincidunt lacus.
	//!
	//!Pellentesque tellus risus, dapibus at volutpat ut, consequat ac sem. Sed pulvinar hendrerit aliquet. Nunc sollicitudin erat ornare turpis tincidunt dictum sit amet non ipsum. Nam porta nibh vel felis condimentum vel accumsan quam molestie. Nulla facilisi. Vestibulum a iaculis purus. Cras euismod dolor eu purus viverra vestibulum. Vestibulum interdum lobortis urna quis vehicula. Aliquam ut diam sed massa malesuada tristique cursus nec orci. Nullam in purus velit, nec mattis lacus. Etiam sed purus vel orci aliquam porta. Duis posuere arcu a elit eleifend et tempus turpis blandit. Nulla ut risus nec leo venenatis vulputate a ut quam. Pellentesque lobortis mauris et est condimentum aliquam. Vivamus ac libero ligula, nec adipiscing augue. Vivamus sit amet feugiat risus. Vestibulum iaculis bibendum turpis. Sed interdum semper orci id faucibus.</textarea>
	//!</body>
}

test("textarea.scrollbar.click")
require undefined MOUSELESS;
{
	VisualDevice *vd = state.doc->GetVisualDevice();
	CoreView *top_view = vd->GetContainerView();

	// 1. Click on the scrollbar up arrow - focus OpMultilineWidget,
	// set input context into OpScrollbar (and not TextAreaObject).
	OpPoint p(3, 100-3);
	top_view->MouseMove(p, SHIFTKEY_NONE);
	top_view->MouseDown(p, MOUSE_BUTTON_1, 1, SHIFTKEY_NONE);
	top_view->MouseUp(p, MOUSE_BUTTON_1, SHIFTKEY_NONE);

	OpWidget* after = OpWidget::GetFocused();
	verify(after);
	verify(CheckScrollbarParentCaret(after, FALSE));
}

test("textarea.scrollbar.move")
require undefined MOUSELESS;
require success "textarea.scrollbar.click";
{
	g_input_manager->InvokeKeyPressed(OP_KEY_DOWN, SHIFTKEY_NONE);
	OpWidget* after = OpWidget::GetFocused();
	verify(after);
	verify(CheckScrollbarParentCaret(after, FALSE));
}

test("textarea.scrollbar.mouseenter")
require undefined MOUSELESS;
require success "textarea.scrollbar.move";
{
	VisualDevice *vd = state.doc->GetVisualDevice();
	CoreView *top_view = vd->GetContainerView();
	OpWidget* before = OpWidget::GetFocused();
	// 3. Click text inside textarea - set input context into TextAreaObject,
	// show caret.
	OpPoint p(3, 50);
	top_view->MouseMove(p, SHIFTKEY_NONE);
	top_view->MouseDown(p, MOUSE_BUTTON_1, 1, SHIFTKEY_NONE);
	top_view->MouseUp(p, MOUSE_BUTTON_1, SHIFTKEY_NONE);
	OpWidget* after = OpWidget::GetFocused();
	verify(after);
	verify(after->GetType() == OpTypedObject::WIDGET_TYPE_MULTILINE_EDIT);
	verify(CheckScrollbarParentCaret(before, TRUE));
}

test("textarea.scrollbar.click 2")
require undefined MOUSELESS;
{
	VisualDevice *vd = state.doc->GetVisualDevice();
	CoreView *top_view = vd->GetContainerView();

	// 0. Click outside textarea to unfocus it
	// (clear state from previous selftests).
	OpPoint p0(3, 200);
	top_view->MouseMove(p0, SHIFTKEY_NONE);
	top_view->MouseDown(p0, MOUSE_BUTTON_1, 1, SHIFTKEY_NONE);
	top_view->MouseUp(p0, MOUSE_BUTTON_1, SHIFTKEY_NONE);
	OpWidget* before = OpWidget::GetFocused();

	// 1. Click on the scrollbar up arrow - focus OpMultilineWidget,
	// set input context into OpScrollbar (and not TextAreaObject).
	OpPoint p(3, 100-3);
	top_view->MouseMove(p, SHIFTKEY_NONE);
	top_view->MouseDown(p, MOUSE_BUTTON_1, 1, SHIFTKEY_NONE);
	top_view->MouseUp(p, MOUSE_BUTTON_1, SHIFTKEY_NONE);
	OpWidget* after = OpWidget::GetFocused();

	verify(after);
	verify(before != after);
	verify(CheckScrollbarParentCaret(after, FALSE));
}

test("textarea.scrollbar.enter")
require undefined MOUSELESS;
require success "textarea.scrollbar.click 2";
{
	OpWidget* before = OpWidget::GetFocused();
	// 2. Hit enter key - put focus inside TextAreaObject, show caret.
	g_input_manager->InvokeKeyPressed(OP_KEY_ENTER, SHIFTKEY_NONE);
	OpWidget* after = OpWidget::GetFocused();
	verify(after);
	verify(CheckScrollbarParentCaret(before, TRUE));
}

test("textarea.scrollbar.click 3")
require undefined MOUSELESS;
{
	VisualDevice *vd = state.doc->GetVisualDevice();
	CoreView *top_view = vd->GetContainerView();

	// 0. Click outside textarea to unfocus it
	// (clear state from previous selftests).
	OpPoint p0(3, 200);
	top_view->MouseMove(p0, SHIFTKEY_NONE);
	top_view->MouseDown(p0, MOUSE_BUTTON_1, 1, SHIFTKEY_NONE);
	top_view->MouseUp(p0, MOUSE_BUTTON_1, SHIFTKEY_NONE);
	OpWidget* before = OpWidget::GetFocused();

	// 1. Click on the scrollbar up arrow - focus OpMultilineWidget,
	// set input context into OpScrollbar (and not TextAreaObject).
	OpPoint p(3, 100-3);
	top_view->MouseMove(p, SHIFTKEY_NONE);
	top_view->MouseDown(p, MOUSE_BUTTON_1, 1, SHIFTKEY_NONE);
	top_view->MouseUp(p, MOUSE_BUTTON_1, SHIFTKEY_NONE);
	OpWidget* after = OpWidget::GetFocused();

	verify(after);
	verify(before != after);
	verify(CheckScrollbarParentCaret(after, FALSE));
}

test("textarea.scrollbar.esc")
require undefined MOUSELESS;
require success "textarea.scrollbar.click 3";
{
	OpScrollbar* scroll_x;
	OpScrollbar* scroll_y;
	VisualDevice *vd = state.doc->GetVisualDevice();
	vd->GetScrollbarObjects(&scroll_x, &scroll_y);
	verify (scroll_y->GetValue() == 0);
	OpWidget* before = OpWidget::GetFocused();
	// 2. Hit escape key - put focus in document, don't show caret.
	g_input_manager->InvokeKeyPressed(OP_KEY_ESCAPE, SHIFTKEY_NONE);
	OpWidget* after = OpWidget::GetFocused();
	verify(!after);
	verify(CheckScrollbarParentCaret(before, FALSE));

	// 3. Hit down key - focus stays in document, document is scrolled.
	g_input_manager->InvokeKeyPressed(OP_KEY_DOWN, SHIFTKEY_NONE);
	vd->GetScrollbarObjects(&scroll_x, &scroll_y);
	verify (scroll_y->GetValue() != 0);
}

html // Bug 348872
{
	//! <table>
	//! <input size="999999999">
	//! <input size="0">
	//! <input size="-1">
}
