/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "Forms.History";
require init;

language ecmascript;

// While we would like to test history, walking in history between
// script generated pages (selftests use document.write to create the
// test pages) isn't guaranteed to work. If the document cache is full
// for instance, the previous document will be deleted. See CT-1360 for
// a longer description.
disabled;

html
{
	//! <html><body onload="document.pip=true;">
	//! <form><input name="outerpw" type="password">
	//! <input name="outertxt" type="text"></form>
	//! <iframe id="idoc" width=100 height=100 xsrc="data:text/plain,Hej"></iframe>
	//! </body></html>
}

test("Forms.History.Clear.Pwd - part #0")
	async;
	disabled; // Not needed
{
	function waitForDocument()
	{
		if (document.rounds)
		{
			document.rounds = 0;
		}
		document.rounds++;

		if (document.pip)
		{
			ST_passed();
		}
		else
		{
			if (document.rounds > 20)
			{
				ST_failed("Document was never loaded", "forms.history.ot", 0);
			}
			else
			{
				setTimeout(waitForDocument, 10);
			}
		}
	}

	waitForDocument();
}

test("Forms.History.Clear.Pwd - part #1")
{
	verify(document);
	var idoc = document.getElementById("idoc");
	verify(idoc);

	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0].outerpw);
	document.forms[0].outerpw.value = "text1";
	verify(document.forms[0].outerpw.value == "text1");
	document.forms[0].outertxt.value = "text2";
	verify(document.forms[0].outertxt.value == "text2");

	// write first document
	verify(idoc.contentDocument);
	idoc.contentDocument.open();
	idoc.contentDocument.write("<html><body><form><input name='innerpw' type='password'><input name='innertxt' type='text'></form></body></html>");
	idoc.contentDocument.close();

	verify(document.forms[0].outerpw.value == "text1");
	verify(document.forms[0].outertxt.value == "text2");

	var innerDoc = idoc.contentDocument;
	verify(innerDoc.forms[0]);
	verify(innerDoc.forms[0].innerpw);
	innerDoc.forms[0].innerpw.value = "text3";
	verify(innerDoc.forms[0].innerpw.value == "text3");
	verify(innerDoc.forms[0].innertxt);
	innerDoc.forms[0].innertxt.value = "text4";
	verify(innerDoc.forms[0].innertxt.value == "text4");

	// write new inner document
	idoc.contentDocument.open();
	var innerDoc = idoc.contentDocument;
	innerDoc.write("<html><body><div id='tmp'>Dummy</div></body></html>");
	innerDoc.close();

	verify(innerDoc.getElementById("tmp"));

	document.firstparthistoryclearpwd = true;

}

test("Forms.History.Clear.Pwd - part #2")
	require success "Forms.History.Clear.Pwd - part #1";
	async;
{
	//	alert('beep1');
	if (!document.firstparthistoryclearpwd)
	{
		ST_failed("Setup has not completed successfully", "forms.history.ot", 0);
		return;
	}

	//	alert('beep2');
	function testPart2() {
		try
		{
			if (document.forms[0].outerpw.value != "text1")
			{
				ST_failed("outerpw has lost its value", "forms.history.ot", 0);
				return;
			}
			if (document.forms[0].outertxt.value != "text2")
			{
				ST_failed("outertxt has lost its value", "forms.history.ot", 0);
				return;
			}
			//	alert('beep3');
			var idoc = document.getElementById("idoc");
			if (!idoc)
			{
				ST_failed("There is no iframe? Where did it go?", "forms.history.ot", 0);
				return;
			}
			//	alert('beep3a');
			var innerDoc = idoc.contentDocument;
			if (!innerDoc)
			{
				ST_failed("There is no inner document", "forms.history.ot", 0);
				return;
			}

			if (!innerDoc.documentElement)
			{
				ST_failed("There are no contents in the inner document, see bug 181807", "forms.history.ot", 0);
				return;
			}

			//	alert('beep3b');
			if (innerDoc.getElementById("tmp"))
			{
				ST_failed("The new document isn't replaced by the old", "forms.history.ot", 0);
				return;
			}
			//	alert('beep3c');
			if (!innerDoc.forms)
			{
				ST_failed("There is no forms array in the inner document", "forms.history.ot", 0);
				return;
			}
			//	alert('beep3c2');
			var f = innerDoc.forms[0];
			if (!f)
			{
				ST_failed("There is no form in the inner document", "forms.history.ot", 0);
				return;
			}
			//	alert('beep3d');
			if (!f.innerpw > 0)
			{
				ST_failed("Missing innerpw form element", "forms.history.ot", 0);
				return;
			}
			//	alert('beep4');
			if (f.innerpw.value.length > 0)
			{
				ST_failed("The password is left after the back. It should be gone: "+f.innerpw.value, "forms.history.ot", 0);
				return;
			}
			if (!f.innertxt > 0)
			{
				ST_failed("Missing innertxt form element", "forms.history.ot", 0);
				return;
			}
			if (f.innertxt.value != "text4")
			{
				ST_failed("The text in the old document's text field is lost", "forms.history.ot", 0);
				return;
			}
			//	alert('beep5');
			ST_passed();
		}
		catch(e)
		{
			//	alert('beep7');
			var es = e.toString();
			var bti = es.indexOf('Backtrace:');
			ST_failed('Exception: ' + (bti == -1 ? es : es.substring(0, bti) + 'Backtrace: <skipped>'),"forms_history, uud" ,0);
		}
	}
	// We must give the js environment a pause to change history
	// things. We can not do it directly after this test because
	// scripts will be stopped from starting after the history
	// operation.
	//	alert("hopp2");
	var id = setTimeout(testPart2, 1000);
	if (!id)
	{
		ST_failed("setTimeout call failed", "forms.history.ot", 0);
		return;
	}
	//	alert("hopp3");

	history.go(-1); // Go back to the previous document
	//	alert("hopp4");

	// Now we have to let the document "load"
}
