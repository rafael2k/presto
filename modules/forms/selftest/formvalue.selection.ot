/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "Forms.FormValue.Selection";
require init;

language C++;

include "modules/logdoc/htm_elm.h";
include "modules/forms/formvalue.h";

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="submittext" type="text" value="thing">
	//! </form></body></html>
}

test("FormValue.Selection.Text")
{
	HTML_Element* text_elm = find_element("input", 1);
	verify(text_elm);
	FormValue* text_value = text_elm->GetFormValue();
	verify(text_value);

	INT32 caret_pos = text_value->GetCaretOffset(text_elm);
	verify(caret_pos == 0);
	INT32 start_sel = -1;
	INT32 end_sel = -1;
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);

	text_value->SetCaretOffset(text_elm, 2);
	verify(text_value->GetCaretOffset(text_elm) == 2);

	text_value->SetCaretOffset(text_elm, 0);
	verify(text_value->GetCaretOffset(text_elm) == 0);

	text_value->SetCaretOffset(text_elm, -121);
	verify(text_value->GetCaretOffset(text_elm) == 0);

	text_value->SetCaretOffset(text_elm, 3);
	verify(text_value->GetCaretOffset(text_elm) == 3);

	text_value->SetCaretOffset(text_elm, -1213);
	verify(text_value->GetCaretOffset(text_elm) == 0);

	text_value->SetCaretOffset(text_elm, 5325121);
	verify(text_value->GetCaretOffset(text_elm) == 5); // strlen("thing")

	text_value->SetSelection(text_elm, 0, 0);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);

	text_value->SetSelection(text_elm, 1, 2);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 1);
	verify(end_sel == 2);

	text_value->SetSelection(text_elm, 0, 5);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, -1, 5);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, 0, 6);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, -323, 2321);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, 134214, -21213);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);
}

html
{
	//! <html><body>
	//! <form style="display:none" action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="submittext" type="text" value="thing">
	//! </form></body></html>
}

test("FormValue.Selection display=none")
{
	HTML_Element* text_elm = find_element("input", 1);
	verify(text_elm);
	FormValue* text_value = text_elm->GetFormValue();
	verify(text_value);

	INT32 caret_pos = text_value->GetCaretOffset(text_elm);
	verify(caret_pos == 0);
	INT32 start_sel = -1;
	INT32 end_sel = -1;
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);

	text_value->SetCaretOffset(text_elm, 2);
	verify(text_value->GetCaretOffset(text_elm) == 2);

	text_value->SetCaretOffset(text_elm, 0);
	verify(text_value->GetCaretOffset(text_elm) == 0);

	text_value->SetCaretOffset(text_elm, -121);
	verify(text_value->GetCaretOffset(text_elm) == 0);

	text_value->SetCaretOffset(text_elm, 3);
	verify(text_value->GetCaretOffset(text_elm) == 3);

	text_value->SetCaretOffset(text_elm, -1213);
	verify(text_value->GetCaretOffset(text_elm) == 0);

	text_value->SetCaretOffset(text_elm, 5325121);
	verify(text_value->GetCaretOffset(text_elm) == 5); // strlen("thing")

	text_value->SetSelection(text_elm, 0, 0);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);

	text_value->SetSelection(text_elm, 1, 2);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 1);
	verify(end_sel == 2);

	text_value->SetSelection(text_elm, 0, 5);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, -1, 5);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, 0, 6);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, -323, 2321);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, 134214, -21213);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);
}


html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <textarea>thing</textarea>
	//! </form></body></html>
}

test("FormValue.Selection.Textarea")
{
	HTML_Element* text_elm = find_element("textarea", 1);
	verify(text_elm);
	FormValue* text_value = text_elm->GetFormValue();
	verify(text_value);

	verify(text_elm->GetFormObject() || !"the initial caret pos is set by the widget so we need that for the tests to work");
	INT32 caret_pos = text_value->GetCaretOffset(text_elm);
	verify(caret_pos == 5);
	INT32 start_sel = -1;
	INT32 end_sel = -1;
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);

	text_value->SetCaretOffset(text_elm, 2);
	verify(text_value->GetCaretOffset(text_elm) == 2);

	text_value->SetCaretOffset(text_elm, 0);
	verify(text_value->GetCaretOffset(text_elm) == 0);

	text_value->SetCaretOffset(text_elm, -121);
	verify(text_value->GetCaretOffset(text_elm) == 0);

	text_value->SetCaretOffset(text_elm, 3);
	verify(text_value->GetCaretOffset(text_elm) == 3);

	text_value->SetCaretOffset(text_elm, -1213);
	verify(text_value->GetCaretOffset(text_elm) == 0);

	text_value->SetCaretOffset(text_elm, 5325121);
	verify(text_value->GetCaretOffset(text_elm) == 5); // strlen("thing")

	text_value->SetSelection(text_elm, 0, 0);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);

	text_value->SetSelection(text_elm, 1, 2);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 1);
	verify(end_sel == 2);

	text_value->SetSelection(text_elm, 0, 5);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, -1, 5);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, 0, 6);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, -323, 2321);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, 134214, -21213);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);
}

html
{
	//! <html><body>
	//! <form style="display:none" action="http://localhost:8080/lek.jsp" method="post">
	//! <textarea>thing</textarea>
	//! </form></body></html>
}

test("FormValue.Selection.Textarea display=none")
{
	HTML_Element* text_elm = find_element("textarea", 1);
	verify(text_elm);
	FormValue* text_value = text_elm->GetFormValue();
	verify(text_value);

	INT32 caret_pos = text_value->GetCaretOffset(text_elm);
	verify(caret_pos == 5);
	INT32 start_sel = -1;
	INT32 end_sel = -1;
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);

	text_value->SetCaretOffset(text_elm, 2);
	verify(text_value->GetCaretOffset(text_elm) == 2);

	text_value->SetCaretOffset(text_elm, 0);
	verify(text_value->GetCaretOffset(text_elm) == 0);

	text_value->SetCaretOffset(text_elm, -121);
	verify(text_value->GetCaretOffset(text_elm) == 0);

	text_value->SetCaretOffset(text_elm, 3);
	verify(text_value->GetCaretOffset(text_elm) == 3);

	text_value->SetCaretOffset(text_elm, -1213);
	verify(text_value->GetCaretOffset(text_elm) == 0);

	text_value->SetCaretOffset(text_elm, 5325121);
	verify(text_value->GetCaretOffset(text_elm) == 5); // strlen("thing")

	text_value->SetSelection(text_elm, 0, 0);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);

	text_value->SetSelection(text_elm, 1, 2);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 1);
	verify(end_sel == 2);

	text_value->SetSelection(text_elm, 0, 5);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, -1, 5);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, 0, 6);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, -323, 2321);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	text_value->SetSelection(text_elm, 134214, -21213);
	text_value->GetSelection(text_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input type="number" value="12345" />
	//! </form></body></html>
}

test("FormValue.Selection.Number")
{
	HTML_Element* number_elm = find_element("input", 1);
	verify(number_elm);
	FormValue* number_value = number_elm->GetFormValue();
	verify(number_value);

	verify(number_elm->GetFormObject() || !"the initial caret pos is set by the widget so we need that for the tests to work");
	INT32 caret_pos = number_value->GetCaretOffset(number_elm);
	verify(caret_pos == 5);
	INT32 start_sel = -1;
	INT32 end_sel = -1;
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);

	number_value->SetCaretOffset(number_elm, 2);
	verify(number_value->GetCaretOffset(number_elm) == 2);

	number_value->SetCaretOffset(number_elm, 0);
	verify(number_value->GetCaretOffset(number_elm) == 0);

	number_value->SetCaretOffset(number_elm, -121);
	verify(number_value->GetCaretOffset(number_elm) == 0);

	number_value->SetCaretOffset(number_elm, 3);
	verify(number_value->GetCaretOffset(number_elm) == 3);

	number_value->SetCaretOffset(number_elm, -1213);
	verify(number_value->GetCaretOffset(number_elm) == 0);

	number_value->SetCaretOffset(number_elm, 5325121);
	verify(number_value->GetCaretOffset(number_elm) == 5); // strlen("12345")

	number_value->SetSelection(number_elm, 0, 0);
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);

	number_value->SetSelection(number_elm, 1, 2);
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 1);
	verify(end_sel == 2);

	number_value->SetSelection(number_elm, 0, 5);
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	number_value->SetSelection(number_elm, -1, 5);
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	number_value->SetSelection(number_elm, 0, 6);
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	number_value->SetSelection(number_elm, -323, 2321);
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	number_value->SetSelection(number_elm, 134214, -21213);
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);
}

html
{
	//! <html><body>
	//! <form style="display:none" action="http://localhost:8080/lek.jsp" method="post">
	//! <input type="number" value="12345" />
	//! </form></body></html>
}

test("FormValue.Selection.Number display=none")
{
	HTML_Element* number_elm = find_element("input", 1);
	verify(number_elm);
	FormValue* number_value = number_elm->GetFormValue();
	verify(number_value);

	INT32 caret_pos = number_value->GetCaretOffset(number_elm);
	verify(caret_pos == 5);
	INT32 start_sel = -1;
	INT32 end_sel = -1;
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);

	number_value->SetCaretOffset(number_elm, 2);
	verify(number_value->GetCaretOffset(number_elm) == 2);

	number_value->SetCaretOffset(number_elm, 0);
	verify(number_value->GetCaretOffset(number_elm) == 0);

	number_value->SetCaretOffset(number_elm, -121);
	verify(number_value->GetCaretOffset(number_elm) == 0);

	number_value->SetCaretOffset(number_elm, 3);
	verify(number_value->GetCaretOffset(number_elm) == 3);

	number_value->SetCaretOffset(number_elm, -1213);
	verify(number_value->GetCaretOffset(number_elm) == 0);

	number_value->SetCaretOffset(number_elm, 5325121);
	verify(number_value->GetCaretOffset(number_elm) == 5); // strlen("12345")

	number_value->SetSelection(number_elm, 0, 0);
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);

	number_value->SetSelection(number_elm, 1, 2);
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 1);
	verify(end_sel == 2);

	number_value->SetSelection(number_elm, 0, 5);
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	number_value->SetSelection(number_elm, -1, 5);
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	number_value->SetSelection(number_elm, 0, 6);
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	number_value->SetSelection(number_elm, -323, 2321);
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 5);

	number_value->SetSelection(number_elm, 134214, -21213);
	number_value->GetSelection(number_elm, start_sel, end_sel);
	verify(start_sel == 0);
	verify(end_sel == 0);
}

