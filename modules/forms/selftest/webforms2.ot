/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "WebForms2.General";
require init;

language ecmascript;

include "modules/forms/selftest/testhelpers.h";
include "modules/forms/formvalue.h";
include "modules/forms/webforms2support.h";
include "modules/logdoc/htm_elm.h";
include "modules/url/url_ds.h";

subtest SetFileValue(HTML_Element* file_input, const OpString& file_name)
{
	FormValue* form_value = file_input->GetFormValue();
	verify(form_value);
	form_value->SetValueFromText(file_input, file_name.CStr());
}

subtest ComparePostSubmitData(Form& form_submitter, FramesDocument* frames_doc,
							  const char* expected, const char* expected_charset)
//	language C++;
{
	OP_STATUS status;
	URL submit_url = form_submitter.GetURL(frames_doc, status);
	verify_success(status);
	verify(!submit_url.IsEmpty());
	verify(submit_url.GetAttribute(URL::KHTTPIsFormsRequest));

	// This only works for Posted URL Encoded data
	URL_Rep* rep = submit_url.GetRep();
	verify(rep);
	URL_DataStorage* storage = rep->GetDataStorage();
	verify(storage);
	URL_HTTP_ProtocolData* http_protocol_data = storage->GetHTTPProtocolData();
	verify(http_protocol_data);

	if (expected_charset)
	{
		OpStringC8 content_type = http_protocol_data->GetAttribute(URL::KHTTP_ContentType);
		verify(!content_type.IsEmpty());
		const char* charset = op_strstr(content_type.CStr(), "charset=");
		if (!charset)
		{
			output("Missing charset in '%s'", content_type.CStr());
		}
		verify(charset);
		charset += sizeof("charset=")-1;
		verify_string(charset, expected_charset);
	}

	const char* data = http_protocol_data->sendinfo.http_data.CStr();
	verify_string(data, expected);
}


html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <table><tr><th>Type</th><th>Field</th></tr>
	//! <tr><td>Date</td><td><input name="datum" type="date"></td></tr>
	//! <tr><td>Tel</td><td><input name="telefon" type="tel"></td></tr>
	//! <tr><td>URI</td><td><input name="webbadress" type="url"></td></tr>
	//! <tr><td>Week</td><td><input name="vecka" type="week"></td></tr>
	//! <tr><td>Time</td><td><input name="tid" type="time"></td></tr>
	//! <tr><td>Email</td><td><input name="epost" type="email"></td></tr>
	//! <tr><td>Number</td><td><input name="nummer" type="number"></td></tr>
	//! <tr><td>Month</td><td><input name="Utgangsdatum" type="month"></td></tr>
	//! <tr><td>DateTime</td><td><input name="DatumTid" type="datetime"></td></tr>
	//! <tr><td>Local DateTime</td><td><input name="LokalDatumTid" type="datetime-local"></td></tr>
	//! <tr><td>Range</td><td><input name="Lokation" type="range"></td></tr>
	//! <tr><td>Color</td><td><input name="Farg" type="color"></td></tr>
	//! <tr><td>Search</td><td><input name="Leta" type="search"></td></tr>
	//! </table>
	//! <input type="submit" name="knappen" value="Submit">
	//! </form></body></html>
}

test("WebForms2.FormValue.GetFormValueTypeString")
	language C++;
{
	HTML_Element* form_elm = find_element("form");
	HTML_Element* date_elm = find_element("input", 1);
	HTML_Element* tel_elm = find_element("input", 2);
	HTML_Element* url_elm = find_element("input", 3);
	HTML_Element* week_elm = find_element("input", 4);
	HTML_Element* time_elm = find_element("input", 5);
	HTML_Element* email_elm = find_element("input", 6);
	HTML_Element* number_elm = find_element("input", 7);
	HTML_Element* month_elm = find_element("input", 8);
	HTML_Element* datetime_elm = find_element("input", 9);
	HTML_Element* datetime_local_elm = find_element("input", 10);
	HTML_Element* range_elm = find_element("input", 11);
	HTML_Element* color_elm = find_element("input", 12);
	HTML_Element* search_elm = find_element("input", 13);

	verify(form_elm);
	verify(date_elm);
	verify(tel_elm);
	verify(url_elm);
	verify(week_elm);
	verify(time_elm);
	verify(email_elm);
	verify(number_elm);
	verify(month_elm);
	verify(datetime_elm);
	verify(datetime_local_elm);
	verify(range_elm);
	verify(color_elm);
	verify(search_elm);

	verify(form_elm->Type() == HE_FORM);
	verify(date_elm->Type() == HE_INPUT);
	verify(date_elm->GetInputType() == INPUT_DATE);
	verify(tel_elm->Type() == HE_INPUT);
	verify(tel_elm->GetInputType() == INPUT_TEL);
	verify(url_elm->Type() == HE_INPUT);
	verify(url_elm->GetInputType() == INPUT_URI);
	verify(week_elm->Type() == HE_INPUT);
	verify(week_elm->GetInputType() == INPUT_WEEK);
	verify(time_elm->Type() == HE_INPUT);
	verify(time_elm->GetInputType() == INPUT_TIME);
	verify(email_elm->Type() == HE_INPUT);
	verify(email_elm->GetInputType() == INPUT_EMAIL);
	verify(number_elm->Type() == HE_INPUT);
	verify(number_elm->GetInputType() == INPUT_NUMBER);
	verify(month_elm->Type() == HE_INPUT);
	verify(month_elm->GetInputType() == INPUT_MONTH);
	verify(datetime_elm->Type() == HE_INPUT);
	verify(datetime_elm->GetInputType() == INPUT_DATETIME);
	verify(datetime_local_elm->Type() == HE_INPUT);
	verify(datetime_local_elm->GetInputType() == INPUT_DATETIME_LOCAL);
	verify(range_elm->Type() == HE_INPUT);
	verify(range_elm->GetInputType() == INPUT_RANGE);
	verify(color_elm->Type() == HE_INPUT);
	verify(color_elm->GetInputType() == INPUT_COLOR);
	verify(search_elm->Type() == HE_INPUT);
	verify(search_elm->GetInputType() == INPUT_SEARCH);

	verify(date_elm->ElementHasFormValue());
	verify(date_elm->GetFormValue());
	verify(uni_str_eq(date_elm->GetFormValue()->GetFormValueTypeString(date_elm), UNI_L("date")));
	verify(tel_elm->ElementHasFormValue());
	verify(tel_elm->GetFormValue());
	verify(uni_str_eq(tel_elm->GetFormValue()->GetFormValueTypeString(tel_elm), UNI_L("text")));
	verify(url_elm->ElementHasFormValue());
	verify(url_elm->GetFormValue());
	verify(uni_str_eq(url_elm->GetFormValue()->GetFormValueTypeString(url_elm), UNI_L("url")) ||
		uni_str_eq(url_elm->GetFormValue()->GetFormValueTypeString(url_elm), UNI_L("text")));
	verify(week_elm->ElementHasFormValue());
	verify(week_elm->GetFormValue());
	verify(uni_str_eq(week_elm->GetFormValue()->GetFormValueTypeString(week_elm), UNI_L("week")));
	verify(time_elm->ElementHasFormValue());
	verify(time_elm->GetFormValue());
	verify(uni_str_eq(time_elm->GetFormValue()->GetFormValueTypeString(time_elm), UNI_L("time")));
	verify(email_elm->ElementHasFormValue());
	verify(email_elm->GetFormValue());
	verify(uni_str_eq(email_elm->GetFormValue()->GetFormValueTypeString(email_elm), UNI_L("email")) ||
		uni_str_eq(email_elm->GetFormValue()->GetFormValueTypeString(email_elm), UNI_L("text")));
	verify(number_elm->ElementHasFormValue());
	verify(number_elm->GetFormValue());
	verify(uni_str_eq(number_elm->GetFormValue()->GetFormValueTypeString(number_elm), UNI_L("number")));
	verify(month_elm->ElementHasFormValue());
	verify(month_elm->GetFormValue());
	verify(uni_str_eq(month_elm->GetFormValue()->GetFormValueTypeString(month_elm), UNI_L("month")) ||
		uni_str_eq(email_elm->GetFormValue()->GetFormValueTypeString(email_elm), UNI_L("text")));
	verify(datetime_elm->ElementHasFormValue());
	verify(datetime_elm->GetFormValue());
	verify(uni_str_eq(datetime_elm->GetFormValue()->GetFormValueTypeString(datetime_elm), UNI_L("datetime")));
	verify(datetime_local_elm->ElementHasFormValue());
	verify(datetime_local_elm->GetFormValue());
	verify(uni_str_eq(datetime_local_elm->GetFormValue()->GetFormValueTypeString(datetime_local_elm), UNI_L("datetime-local")));
	verify(range_elm->ElementHasFormValue());
	verify(range_elm->GetFormValue());
	verify(uni_str_eq(range_elm->GetFormValue()->GetFormValueTypeString(range_elm), UNI_L("range")) ||
		   uni_str_eq(range_elm->GetFormValue()->GetFormValueTypeString(range_elm), UNI_L("number")));
	verify(color_elm->ElementHasFormValue());
	verify(color_elm->GetFormValue());
	verify_string(color_elm->GetFormValue()->GetFormValueTypeString(color_elm), "color");
}

test("WebForms2.SimpleParse.HTML")
{
	var f = document.forms[0];
	verify(f.datum);
	verify(f.telefon);
	verify(f.webbadress);
	verify(f.vecka);
	verify(f.tid);
	verify(f.epost);
	verify(f.nummer);
	verify(f.Utgangsdatum);
	verify(f.DatumTid);
	verify(f.LokalDatumTid);
	verify(f.Farg);
	verify(f.Leta);

	verify(f.datum.type == 'date');
	verify(f.telefon.type == 'tel');
	verify(f.webbadress.type == 'url');
	verify(f.vecka.type == 'week');
	verify(f.tid.type == 'time');
	verify(f.epost.type == 'email');
	verify(f.nummer.type == 'number');
	verify(f.Utgangsdatum.type == 'month');
	verify(f.DatumTid.type == 'datetime');
	verify(f.LokalDatumTid.type == 'datetime-local');
	verify(f.Farg.type == 'color');
	verify(f.Leta.type == 'search');

	// How to check that the correct are correct? Even in C++?
}

xhtml
{
	//! <?xml version="1.0" ?>
	//! <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
	//! <html xmlns="http://www.w3.org/1999/xhtml"><head><title>Test</title></head><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <table><tr><th>Type</th><th>Field</th></tr>
	//! <tr><td>Date</td><td><input name="datum" type="date"/></td></tr>
	//! <tr><td>Tel</td><td><input name="telefon" type="tel" /></td></tr>
	//! <tr><td>URI</td><td><input name="webbadress" type="url" /></td></tr>
	//! <tr><td>Week</td><td><input name="vecka" type="week" /></td></tr>
	//! <tr><td>Time</td><td><input name="tid" type="time" /></td></tr>
	//! <tr><td>Email</td><td><input name="epost" type="email" /></td></tr>
	//! <tr><td>Number</td><td><input name="nummer" type="number" /></td></tr>
	//! <tr><td>Month</td><td><input name="Utgangsdatum" type="month"/></td></tr>
	//! <tr><td>DateTime</td><td><input name="DatumTid" type="datetime"/></td></tr>
	//! <tr><td>Local DateTime</td><td><input name="LokalDatumTid" type="datetime-local"/></td></tr>
	//! <tr><td>Color</td><td><input name="Farg" type="color"/></td></tr>
	//! <tr><td>Search</td><td><input name="Leta" type="search"/></td></tr>
	//! </table>
	//! <input type="submit" name="knappen" value="Submit"/>
	//! </form></body></html>
}

test("WebForms2.SimpleParse.XHTML")
{
	verify(document);
	verify(document.forms);
	var f = document.forms[0];
	verify(f);
	verify(f.datum);
	verify(f.telefon);
	verify(f.webbadress);
	verify(f.vecka);
	verify(f.tid);
	verify(f.epost);
	verify(f.nummer);
	verify(f.Utgangsdatum);
	verify(f.DatumTid);
	verify(f.LokalDatumTid);
	verify(f.Farg);
	verify(f.Leta);

	verify(f.datum.type == 'date');
	verify(f.telefon.type == 'tel');
	verify(f.webbadress.type == 'url');
	verify(f.vecka.type == 'week');
	verify(f.tid.type == 'time');
	verify(f.epost.type == 'email');
	verify(f.nummer.type == 'number');
	verify(f.Utgangsdatum.type == 'month');
	verify(f.DatumTid.type == 'datetime');
	verify(f.LokalDatumTid.type == 'datetime-local');
	verify(f.Farg.type == 'color');
	verify(f.Leta.type == 'search');

	// How to check that the correct are correct? Even in C++?
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="nummer" type="number" min="3" max="7" value="4">
	//! </form></body></html>
}

test("WebForms2.ValidityState")
{
	var f = document.forms[0];
	verify(f.nummer);
	var n = f.nummer;
	verify("validity" in n);
	verify(n.validity);
	var val = n.validity;
	verify("typeMismatch" in val);
	verify("stepMismatch" in val);
	verify("rangeUnderflow" in val);
	verify("rangeOverflow" in val);
	verify("tooLong" in val);
	verify("patternMismatch" in val);
	verify("valueMissing" in val);
	verify("customError" in val);
	verify("valid" in val);
}

test("WebForms2.MinMaxTypeNumber")
{
	var f = document.forms[0];
	verify(f.nummer);
	var n = f.nummer;
	verify(n.min == 3);
	verify(n.value == 4);
	verify(n.max == 7);
	verify(n.checkValidity());
   	verify(!n.validity.rangeOverflow);
	verify(!n.validity.underFlow);
	n.value = 3;
	verify(false == 0); // Or I will have to rewrite the tests
	verify(true != 0); // Or I will have to rewrite the tests
	verify(!(false != 0)); // Or I will have to rewrite the tests
	verify(!(true == 0)); // Or I will have to rewrite the tests
	verify((n.validity.rangeUnderflow) == 0);
	var oldValue = n.value;
	n.value = 2;
	if (n.value == oldValue)
	{
		verify((n.validity.rangeUnderflow) != 0);
	}
	oldValue = n.value;
	n.value = 7;
	if (n.value != oldValue)
	{
		verify((n.validity.rangeUnderflow) == 0);
		verify((n.validity.rangeOverflow) == 0);
	}
	oldValue = n.value;
	n.value = 8;
	if (n.value != oldValue)
	{
		verify(n.value == 8);
		verify(n.validity.rangeOverflow);
	}
	oldValue = n.value;
	n.value = "";
	verify(n.value == "");
	verify((n.validity.rangeUnderflow) == 0);
	verify((n.validity.rangeOverflow) == 0);
	n.value = 5;
	verify(n.value == 5);
	n.value = "kalle";
	verify(n.value == "");

	n.value = 10;
	n.max = "hjfhfd"; // broken max

	verify((n.validity.rangeOverflow) == 0);
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="vecka" type="week" min="1974-W01" max="1992-W52" value="1984-W12">
	//! </form></body></html>
}

test("WebForms2.MinMaxTypeWeek")
{
	var f = document.forms[0];
	verify(f.vecka);
	var n = f.vecka;
	verify(n.min == "1974-W01");
	verify(n.value == "1984-W12");
	verify(n.max == "1992-W52");
	verify(n.checkValidity());
   	verify((n.validity.rangeOverflow) == 0);
	verify((n.validity.rangeUnderflow) == 0);
	n.value = "1977-W17";
	verify(n.value == "1977-W17");
	verify((n.validity.rangeUnderflow) == 0);
	var oldValue = n.value;
	n.value = "1971-W43";
	if (n.value != oldValue)
	{
		verify(n.value == "1971-W43");
		verify((n.validity.rangeUnderflow) != 0);
	}
	oldValue = n.value;
	n.value = "1989-W29";
	if (n.value != oldValue)
	{
		verify(n.value == "1989-W29");
		verify((n.validity.rangeUnderflow) == 0);
		verify((n.validity.rangeOverflow) == 0);
	}
	oldValue = n.value;
	n.value = "2032-W11";
	if (n.value != oldValue)
	{
		verify(n.value == "2032-W11");
		verify((n.validity.rangeOverflow) != 0);
	}
	oldValue = n.value;
	n.value = "";
	verify (n.value == "");
	verify((n.validity.rangeUnderflow) == 0);
	verify((n.validity.rangeOverflow) == 0);
	n.value = "1981-W42";
	verify(n.value == "1981-W42");
	try
	{
		n.value = "kalle";
		if (n.value != "1981-W42")
		{
			verify(n.value == 'kalle');
			verify((n.validity.typeMismatch) != 0);
		}
	}
	catch (e)
	{
		// Somewhat expected
	}

	n.value = "2024-W12";
	n.max = "hjfhfd"; // broken max

	verify((n.validity.rangeOverflow) == 0);
}


html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="mytext" type="text" maxlength="10" pattern="op[eE]r*a">
	//! </form></body></html>
}

test("WebForms2.TextPatternAndLength")
{
	var f = document.forms[0];
	verify(f.mytext);
	var n = f.mytext;
	verify(n);
	n.value = "operaq";
	verify((n.validity.patternMismatch) != 0);
	n.value = "opera";
	verify(n.validity.valid);
	n.value = "opErra";
	verify(n.validity.valid);
	n.value = "opErrrrrrrrrra";
	verify((n.validity.patternMismatch) == 0);
	verify((n.validity.tooLong) != 0);
}



html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="datum" type="date" min="2000-01-18" value="4">
	//! </form></body></html>
}

test("WebForms2.MinMaxTypeDate")
{
	var f = document.forms[0];
	verify(f.datum);
	var n = f.datum;
	verify(n);
	verify(n.min == '2000-01-18');
	if (n.value)
	{
		verify(n.value == 4);
		verify((n.validity.typeMismatch) != 0);
	}

	n.value = "2002-05-21";
	verify((n.validity.typeMismatch) == 0);
	verify((n.validity.rangeOverflow) == 0);
	verify((n.validity.rangeUnderflow) == 0);

	n.max = "2001-05-22";
	verify((n.validity.rangeOverflow) != 0);

	n.value = "2000-02-29";
	verify((n.validity.typeMismatch) == 0);
	verify((n.validity.rangeOverflow) == 0);
	verify((n.validity.rangeUnderflow) == 0);

	var oldValue = n.value;
	n.value = "1999-02-29";
	if (n.value != oldValue)
	{
		verify((n.validity.typeMismatch) != 0);
	}

	oldValue = n.value;
	n.value = "1999-02-28";
	if (oldValue != n.value)
	{
		verify((n.validity.typeMismatch) == 0);
		verify((n.validity.rangeOverflow) == 0);
		verify((n.validity.rangeUnderflow) != 0);
	}

	oldValue = n.value;
	n.value = "3422-12-23";
	if (oldValue != n.value)
	{
		verify((n.validity.typeMismatch) == 0);
		verify((n.validity.rangeOverflow) != 0);
		verify((n.validity.rangeUnderflow) == 0);
	}

	n.max = "4432-01-21";
	n.value = "3422-12-23";
	verify((n.validity.typeMismatch) == 0);
	verify((n.validity.rangeOverflow) == 0);
	verify((n.validity.rangeUnderflow) == 0);

	n.max = "";
	verify(n.max == "");
	n.value = "4622-12-23";
	verify(n.value == "4622-12-23");
	verify((n.validity.typeMismatch) == 0);
	verify((n.validity.rangeOverflow) == 0);
	verify((n.validity.rangeUnderflow) == 0);

	oldValue = n.value;
	n.value = "1066-01-18";
	if (n.value != oldValue)
	{
		verify((n.validity.typeMismatch) == 0);
		verify((n.validity.rangeOverflow) == 0);
		verify((n.validity.rangeUnderflow) != 0);
	}

	n.min = "1045-02-02";
	verify (n.min == "1045-02-02");
	n.value = "1066-01-18";
	verify((n.validity.typeMismatch) == 0);
	verify((n.validity.rangeOverflow) == 0);
	verify((n.validity.rangeUnderflow) == 0);
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="datum" type="time" max="18:30" value="17:21">
	//! </form></body></html>
}

test("WebForms2.MinMaxTypeTime")
{
	var f = document.forms[0];
	verify(f.datum);
	var n = f.datum;
	verify(n);
	verify(n.max == '18:30');
	if (n.value.length == 5)
	{
		verify(n.value == '17:21');
	}
	else
	{
		verify(n.value == '17:21:00');
	}

	verify(!(n.min));
	verify((n.validity.typeMismatch) == 0);
	verify((n.validity.rangeOverflow) == 0);
	verify((n.validity.rangeUnderflow) == 0);

	try
	{
		var oldValue = n.value;
		n.value = "18:30Z";
		if (n.value != oldValue)
		{
			verify((n.validity.typeMismatch) != 0);
		}
	}
	catch (e)
	{
		// Somewhat expected
	}

	try
	{
		var oldValue = n.value;
		n.value = "18:30:12Z";
		if (n.value != oldValue)
		{
			verify((n.validity.typeMismatch) != 0);
		}
	}
	catch (e)
	{
		// Somewhat expected
	}

	n.value = "18:30";
	verify((n.validity.typeMismatch) == 0);
	verify((n.validity.rangeOverflow) == 0);

	n.min = '17:20';
	n.value = '17:20';
	verify((n.validity.typeMismatch) == 0);
	verify((n.validity.rangeUnderflow) == 0);

	n.min = '17:20';
	n.value = '17:20';
	verify((n.validity.typeMismatch) == 0);
	verify((n.validity.rangeUnderflow) == 0);

	var oldValue = n.value;
	n.min = '17:21';
	if (n.value == oldValue)
	{
		verify((n.validity.rangeUnderflow) != 0);
	}
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="datum" type="datetime" min="2001-12-24T18:30Z" value="2002-01-01T00:00Z">
	//! </form></body></html>
}

test("WebForms2.MinMaxTypeDateTime")
{
	var f = document.forms[0];
	verify(f.datum);
	var n = f.datum;
	verify(n);
	verify(n.min == '2001-12-24T18:30Z');
	verify(n.value == '2002-01-01T00:00Z');
	verify(!(n.max));
	verify((n.validity.typeMismatch) == 0);
	verify((n.validity.rangeOverflow) == 0);
	verify((n.validity.rangeUnderflow) == 0);

	// broken values
	try
	{
		var oldValue = n.value;
		n.value = "2002-01-01";
		if (n.value != oldValue)
		{
			verify((n.validity.typeMismatch) != 0);
		}
	}
	catch (e)
	{
		// Somewhat expected
	}

	try
	{
		var oldValue = n.value;
		n.value = "2002-01-01 00:01Z";
		if (n.value != oldValue)
		{
			verify((n.validity.typeMismatch) != 0);
		}
	}
	catch (e)
	{
		// Somewhat expected
	}

	try
	{
		var oldValue = n.value;
		n.value = "2002-01-01T00:02";
		if (n.value != oldValue)
		{
			verify((n.validity.typeMismatch) != 0);
		}
	}
	catch (e)
	{
		// Somewhat expected
	}

	try
	{
		var oldValue = n.value;
		n.value = "2001-12-24T18:30Y";
		if (n.value != oldValue)
		{
			verify((n.validity.typeMismatch) != 0);
		}
	}
	catch (e)
	{
		// Somewhat expected
	}

	verify((n.validity.rangeUnderflow) == 0);

	var oldValue = n.value;
	n.value = "2001-12-24T18:29Z";
	if (n.value != oldValue)
	{
		verify((n.validity.typeMismatch) == 0);
		verify((n.validity.rangeUnderflow) != 0);

		n.max = "2001-01-02T17:23Z";
		verify((n.validity.rangeUnderflow) != 0);
		verify((n.validity.rangeOverflow) != 0);
	}
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="datum" type="datetime-local" min="2001-12-24T18:30" value="2002-01-01T00:00">
	//! </form></body></html>
}

test("WebForms2.MinMaxTypeLocalDateTime")
{
	var f = document.forms[0];
	verify(f.datum);
	var n = f.datum;
	verify(n);
	verify(n.min == '2001-12-24T18:30');
	verify(n.value == '2002-01-01T00:00');
	verify(!(n.max));
	verify((n.validity.typeMismatch) == 0);
	verify((n.validity.rangeOverflow) == 0);
	verify((n.validity.rangeUnderflow) == 0);

	// broken values
	try
	{
		var oldValue = n.value;
		n.value = "2002-01-01";
		if (n.value != oldValue)
		{
			verify((n.validity.typeMismatch) != 0);
		}
	}
	catch (e)
	{
		// Somewhat expected
	}

	try
	{
		var oldValue = n.value;
		n.value = "2002-01-01 00:01";
		if (n.value != oldValue)
		{
			verify((n.validity.typeMismatch) != 0);
		}
	}
	catch (e)
	{
		// Somewhat expected
	}

	try
	{
		var oldValue = n.value;
		n.value = "2002-01-01T00:02Z";
		if (n.value != oldValue)
		{
			verify((n.validity.typeMismatch) != 0);
		}
	}
	catch (e)
	{
		// Somewhat expected
	}

	try
	{
		var oldValue = n.value;
		n.value = "2001-12-24T18:30Y";
		if (n.value != oldValue)
		{
			verify((n.validity.typeMismatch) != 0);
		}
	}
	catch (e)
	{
		// Somewhat expected
	}

	verify((n.validity.rangeUnderflow) == 0);

	var oldValue = n.value;
	n.value = "2001-12-24T18:29";
	if (n.value != oldValue)
	{
		verify((n.validity.typeMismatch) == 0);
		verify((n.validity.rangeUnderflow) != 0);

		n.max = "2001-01-02T17:23";
		verify((n.validity.rangeUnderflow) != 0);
		verify((n.validity.rangeOverflow) != 0);
	}
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="datum" type="email" maxlength="20">
	//! </form></body></html>
}

test("WebForms2.TypeEmail")
{
	var f = document.forms[0];
	verify(f.datum);
	var n = f.datum;
	verify(n);
	var val = n.value;
	if (val)
	{
		verify(val == '');
	}

	n.value = "hejsan";
	verify((n.validity.typeMismatch) != 0);
	n.value = "hejsan@gooki.tk";
	verify(n.validity.valid);

// 	// maxlength doesn't have any effect on mail and URL:s. - Yes, now it does!
// 	n.value = "hejsan@gooooooooooooooooooooooooooooooooki.tk";
// 	verify(n.validity.valid);
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="datum" type="url" maxlength="21">
	//! </form></body></html>
}

test("WebForms2.TypeURL")
{
	var f = document.forms[0];
	verify(f.datum);
	var n = f.datum;
	verify(n);
	var val = n.value;
	verify(val == '');
	verify(!n.validity.typeMismatch); // empty values are only checked against "required"

	n.value = "fsldfk";
	verify(n.validity.typeMismatch);
	n.value = "http://www.opera.com/"; // 21 chars
	verify(n.validity.valid);
	n.value = "http://www.\u00E5pera.com/"; // An IRI
	verify(!n.validity.typeMismatch);
	verify(n.validity.valid);
	n.value = "http://www.kopera.com/"; // 22 chars
 	verify(!n.validity.valid);
	verify(!n.validity.typeMismatch);
	n.value = "http://w.a.co/?fq=dq";
	verify(!n.validity.typeMismatch);
	verify(n.validity.valid);
	n.value = "http://w.e.co/?f=d#ds";
	verify(!n.validity.typeMismatch);
	verify(n.validity.valid);
	n.value = "http://w.e.com/#ds";
	verify(!n.validity.typeMismatch);
	verify(n.validity.valid);
}

global
{
	//	void display_string_diff(const char* got, const char* expected)
	void calculate_string_diff(const char* got, const char* expected, OpString8& diff)
	{
		const char* got_p = got;
		const char* expected_p = expected;
		while (*got_p++ == *expected_p++)
		{
			// Continue
		}

		got_p--;
		expected_p--;
		size_t str_size = 1000+op_strlen(got)+op_strlen(expected);
		char* diff_p = diff.Reserve(str_size);
		int got_char = *got_p;
		if (!got_char)
		{
			got_char = '.';
		}
		char expected_char = *expected_p;
		if (!expected_char)
		{
			expected_char = '.';
		}
		op_sprintf(diff_p, "got (len = %d):\n"
				"----------------\n"
				"%s\n"
				"----------------\n"
				"expected (len = %d):\n"
				"----------------\n"
				"%s\n"
				"----------------\n"
			   "The strings differ at pos %d where we got 0x%X ('%c') when we expected 0x%X ('%c')\n",
				   (int)op_strlen(got),
				   got,
				   (int)op_strlen(expected),
				   expected,
				   int((expected_p-expected)+1),
				   (int)(unsigned char)*got_p,
				   got_char,
				   (int)(unsigned char)*expected_p,
				   expected_char);
	}
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post"
	//!       enctype="text/plain">
	//! <input name="submit-name" type="text" value="thing">
	//! <input name="stamp" type="date" value="2001-04-05">
	//! <input name="dt" type="datetime">
	//! <input name="t" type="time">
	//! <input name="epost" type="email">
	//! <input name="_charset_" type="hidden">
	//! <input name="t" type="time">
	//! <input name="web" type="url">
	//! <input name="knapp" type="submit" value="Submit">
	//! </form></body></html>
}

include "modules/forms/form.h";
include "modules/url/url_sn.h";
include "modules/url/url_pd.h";
include "modules/upload/upload.h";

test("WebForms2.SubmitFormatTextPlain") language C++;
{
	URL parent_url;
	HTML_Element* form_elm = find_element("form");
	HTML_Element* submit_elm = find_element("input", 9);
	verify(submit_elm);
	verify(submit_elm->GetInputType() == INPUT_SUBMIT);
	int x = 0;
	int y = 0;
	Form form_submitter(parent_url, form_elm, submit_elm, x, y);
	FramesDocument* frames_doc = state.doc;
	const char* expected_data =
		"submit-name=thing\r\n"
		"stamp=2001-04-05\r\n"
		"dt=\r\nt=\r\n"
		"epost=\r\n"
		"_charset_=windows-1252\r\n"
		"t=\r\n"
		"web=\r\n"
		"knapp=Submit\r\n";
	verify(ComparePostSubmitData(form_submitter, frames_doc,
								 expected_data, NULL));
}

html
{
	//! <html><body><form><input type="week"></form></body></html>
}

manual("WebForms2.WeekWidget", "Do you see a week widget?");

html
{
	//! <html><body><form><input type="date"></form></body></html>
}

manual("WebForms2.DateWidget", "Do you see a date widget?");

html
{
	//! <html><body><form><input type="datetime"></form></body></html>
}

manual("WebForms2.DateTimeWidget", "Do you see a datetime widget?");

html
{
	//! <html><body><form><input type="time"></form></body></html>
}

manual("WebForms2.TimeWidget", "Do you see a time widget?");

html
{
	//! <html><body><form><input type="number"></form></body></html>
}

manual("WebForms2.NumberWidget", "Do you see a number widget?");

html
{
	//! <html><body><form><input type="url"></form></body></html>
}

manual("WebForms2.URLWidget", "Do you see a URL widget?");

html
{
	//! <html><body><form><input type="email"></form></body></html>
}

manual("WebForms2.EmailWidget", "Do you see an email widget?");

html
{
	//! <html><body><form><input type="month"></form></body></html>
}

manual("WebForms2.MonthWidget", "Do you see a month widget?");

html
{
	//! <html><body><form><input type="range"></form></body></html>
}

manual("WebForms2.RangeWidget", "Do you see a range widget?");

html
{
	//! <html><body><form><input type="location"></form></body></html>
}

manual("WebForms2.LocationWidget", "Do you see a location widget?");

html
{
	//! <html><head>
	//! <form action="http://localhost:8080/lek.jsp" method="POST" enctype="text/plain">
	//! </form>
	//! </body></html>
}

test("WebForms2.Submit empty form text/plain - POST")
	language C++;
{
	URL parent_url;
	HTML_Element* form_elm = find_element("form");
	HTML_Element* submit_elm = NULL;
	int x = 0;
	int y = 0;
	Form form_submitter(parent_url, form_elm, submit_elm, x, y);
	FramesDocument* frames_doc = state.doc;
	const char* expected_data =	"";
	verify(ComparePostSubmitData(form_submitter, frames_doc,
								 expected_data, NULL));
}

html
{
	//! <html><head>
	//! <form action="http://localhost:8080/lek.jsp" method="POST" enctype="application/x-www-form+xml">
	//! <input type="text" maxlength="4" value="longtext">
	//! <textarea maxlength="4">longtext</textarea>
	//! <input type="email" maxlength="4" value="long@mail">
	//! <input type="url" maxlength="4" value="http://long.long">
	//! <input type="tel" maxlength="4" value="+46372873827">
	//! </form>
	//! </body></html>
}


test("WebForms2.MaxLength.InitialValue")
{
	// Max length should not affect the initial value
	verify(document.forms[0]);
	var f = document.forms[0];
	verify(f[0]);
	verify(f[1]);
	verify(f[2]);
	verify(f[3]);
	verify(f[4]);

	verify(f[0].maxLength == 4);
	verify(f[1].maxLength == 4);
	verify(f[2].maxLength == 4);
	verify(f[3].maxLength == 4);
	verify(f[4].maxLength == 4);

	verify(f[0].type == "text");
	verify(f[0].value == "longtext");
	verify(f[1].type == "textarea");
	verify(f[1].value == "longtext");
	verify(f[2].type == "email");
	verify(f[2].value == "long@mail");
	verify(f[3].type == "url");
	verify(f[3].value == "http://long.long");
	verify(f[4].type == "tel");
	verify(f[4].value == "+46372873827");
}

html
{
	//! <html><body><form><input type="radio" name="hej">
	//! <input type="radio" name="hej"></form></body></html>
}

test("WebForms2.Radio.AllUnchecked")
{
	// No radio button should "automagically" be selected. Breaks
	// RFC1866 but is what's implemented everywhere and is in WF2
	// spec.
	verify(document.forms[0]);
	var f = document.forms[0];
	verify(f[0]);
	verify(f[1]);

	verify(f[0].type == "radio");
	verify(f[1].type == "radio");

	verify(!f[0].checked);
	verify(!f[1].checked);
}

// Test that we don't crash or misbehave for the location tag
html
{
	//! <html><body><form><input type="location" name="hej">
	//! </form></body></html>
}

test("WebForms2.Location.TreatAsText")
{
	verify(document.forms[0]);
	var f = document.forms[0];
	verify(f[0]);
	verify(f[0].type == "text");
}


html
{
	//! <html>
	//!		<body>
	//!			<form id='myform' action='http://localhost:8080/lek.jsp' method='post'>
	//!				<object id="grej">tom<object>
	//!			</form>
	//!		</body>
	//! </html>
}

test("WebForms2.Object")
{
	verify(document);
	verify(document.getElementById);
	var object = document.getElementById("grej");
	verify(object);
	verify(!("labels" in object));
	verify("form" in object);
	var form = document.forms[0];
	verify(form);
	verify(object.form == form);
}

// Test that we dispatch formchange on the output tag
html
{
	//! <html><body
	//! onformchange="document.bodyreceivedformchange = true;">
	//! <form onformchange="document.formreceivedformchange = true;">
	//! <input type="checkbox" id="checkbox" name="hej"
	//!     onformchange="document.checkboxreceivedformchange = true;"
	//!     onchange="document.checkboxreceivedchange = true;">
	//! <div onformchange="document.divreceivedformchange = true;">
	//! <output onformchange="document.outputreceivedformchange = true;">
	//! </div>
	//! </form>
	//! <script>
	//! document.step1 = true;
	//! var event = document.createEvent('HTMLEvents');
	//! document.step2 = true;
	//! event.initEvent('change',true,true);
	//! document.step3 = true;
	//! var checkbox = document.getElementById('checkbox');
	//! document.step4 = true;
	//! checkbox.dispatchEvent( event );
	//! document.step5 = true;
	//! </script>
	//! </body></html>
}

test("WebForms2.DispatchFormChange Bug 198156")
{
	verify("step1" in document);
	verify("step2" in document);
	verify("step3" in document);
	verify("step4" in document);
	verify("step5" in document);
	verify("checkboxreceivedchange" in document);
	verify("checkboxreceivedformchange" in document);
	verify("outputreceivedformchange" in document);
	verify("formreceivedformchange" in document);
	verify(!("divreceivedformchange" in document)); // it shouldn't bubble
	verify(!("bodyreceivedformchange" in document)); // it shouldn't bubble
}
