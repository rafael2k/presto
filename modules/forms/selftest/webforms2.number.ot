/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "WebForms2.Number";
require init;

language C++;

include "modules/forms/webforms2number.h";
include "modules/doc/html_doc.h";
include "modules/forms/formvalue.h";

test("WebForms2.NumberParser")
	language C++;
{
	double number;
	BOOL res;
	res = WebForms2Number::StringToDouble(UNI_L("1.0"), number);
	verify(res);
	verify(number == 1.0); // double comparison, vulnerable

	res = WebForms2Number::StringToDouble(UNI_L("+1.0"), number);
	verify(!res);

	res = WebForms2Number::StringToDouble(UNI_L("1."), number);
	verify(!res);

	res = WebForms2Number::StringToDouble(UNI_L(".0"), number);
	verify(!res);

	res = WebForms2Number::StringToDouble(UNI_L("+.0"), number);
	verify(!res);

	res = WebForms2Number::StringToDouble(UNI_L("+0"), number);
	verify(!res);

	res = WebForms2Number::StringToDouble(UNI_L("1a"), number);
	verify(!res);

	res = WebForms2Number::StringToDouble(UNI_L("1e"), number);
	verify(!res);

	res = WebForms2Number::StringToDouble(UNI_L("2e2.2"), number);
	verify(!res);

	res = WebForms2Number::StringToDouble(UNI_L("e1"), number);
	verify(!res);

	res = WebForms2Number::StringToDouble(UNI_L("--12"), number);
	verify(!res);

	res = WebForms2Number::StringToDouble(UNI_L("-12e--12"), number);
	verify(!res);

	res = WebForms2Number::StringToDouble(UNI_L("-12.-19"), number);
	verify(!res);

	res = WebForms2Number::StringToDouble(UNI_L(""), number);
	verify(!res);

	res = WebForms2Number::StringToDouble(UNI_L("-1.0"), number);
	verify(res);
	verify(number == -1.0); // double comparison, vulnerable

	res = WebForms2Number::StringToDouble(UNI_L("1"), number);
	verify(res);
	verify(number == 1.0); // double comparison, vulnerable

	res = WebForms2Number::StringToDouble(UNI_L("1.5"), number);
	verify(res);
	verify(number == 1.5); // double comparison, vulnerable

	res = WebForms2Number::StringToDouble(UNI_L("-1.5"), number);
	verify(res);
	verify(number == -1.5); // double comparison, vulnerable

	res = WebForms2Number::StringToDouble(UNI_L("1.0e1"), number);
	verify(res);
	verify(number == 10); // double comparison, sensitive
	res = WebForms2Number::StringToDouble(UNI_L("5.0e-1"), number);
	verify(res);
	verify(number == 0.5); // double comparison, sensitive

	res = WebForms2Number::StringToDouble(UNI_L("1.0e5"), number);
	verify(res);
	verify(number == 100000.0); // double comparison, sensitive

	res = WebForms2Number::StringToDouble(UNI_L("2.0e+5"), number);
	verify(res);
	verify(number == 200000.0); // double comparison, sensitive

	res = WebForms2Number::StringToDouble(UNI_L("1.0e-5"), number);
	verify(res);
	verify(op_fabs(number-0.00001) < 0.000000001 /* use eps instead? */);
//	verify(number == 0.00001); // double comparison, sensitive

	res = WebForms2Number::StringToDouble(UNI_L("-123.45"), number);
	verify(res);
	verify(number == -123.45); // double comparison, sensitive

	res = WebForms2Number::StringToDouble(UNI_L("87.0e0"), number);
	verify(res);
	verify(number == 87.0); // double comparison, sensitive

	res = WebForms2Number::StringToDouble(UNI_L("0e+0"), number);
	verify(res);
	verify(number == 0.0);
}




html
{
	//! <html><form><input type="number" value=".0"></form></html>
}

test("WebForms2.Number.BadNumber#1 (bug 176185)")
	language ecmascript;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	var f = document.forms[0];
	verify(f[0]);
	var input = f[0];

	// For value attributes that are invalid according to the type
	// attribute:
	// The attribute must be ignored. It will appear in the
	// DOM for the defaultValue attribute, but will not be used as the
	// value of the control. The control will therefore initially have
	// no value selected.

	verify(input.value == "");
	verify(input.defaultValue == ".0");
}

html
{
	//! <html><form><input type="number" value="+2"></form></html>
}

test("WebForms2.Number.BadNumber#2 (bug 176182-1)")
	language ecmascript;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	var f = document.forms[0];
	verify(f[0]);
	var input = f[0];

	// For value attributes that are invalid according to the type
	// attribute:
	// The attribute must be ignored. It will appear in the
	// DOM for the defaultValue attribute, but will not be used as the
	// value of the control. The control will therefore initially have
	// no value selected.

	verify(input.value == "");
	verify(input.defaultValue == "+2");
}

html
{
	//! <html><form><input type="number" value="+2e+2"></form></html>
}

test("WebForms2.Number.BadNumber#3 (bug 176182-2)")
	language ecmascript;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	var f = document.forms[0];
	verify(f[0]);
	var input = f[0];

	// For value attributes that are invalid according to the type
	// attribute:
	// The attribute must be ignored. It will appear in the
	// DOM for the defaultValue attribute, but will not be used as the
	// value of the control. The control will therefore initially have
	// no value selected.

	verify(input.value == "");
	verify(input.defaultValue == "+2e+2");
}

html
{
	//! <html><form><input type="number" value="3"></form></html>
}

test("WebForms2.Number.valueAsNumber")
	language ecmascript;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	var f = document.forms[0];
	verify(f[0]);
	var input = f[0];

	verify(input.value == "3");
	verify(input.valueAsNumber == 3);
}

html
{
	//! <html><form>
	//! <input type="number" value="3" step="1" max="5" min="1">
	//! </form></html>
}

test("WebForms2.Number.stepUpDown#1")
	language ecmascript;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	var f = document.forms[0];
	verify(f[0]);
	var input = f[0];

	verify("stepUp" in input);
	verify("stepDown" in input);

	verify("valueAsNumber" in input);

	verify(input.valueAsNumber == 3);
	input.stepUp(1);
	verify(input.valueAsNumber == 4);
	input.stepDown(2);
	verify(input.valueAsNumber == 2);
	input.stepUp(3);
	verify(input.valueAsNumber == 5);
	input.stepDown(3);
	verify(input.valueAsNumber == 2);

	try
	{
		input.stepDown(2);
		verify(!"The line above should have thrown an execption");
	}
	catch (e)
	{
		verify (e.code == DOMException.INVALID_STATE_ERR);
	}
	verify(input.valueAsNumber == 2);

	input.value = 5;
	verify(input.valueAsNumber == 5);
	try
	{
		input.stepUp(1);
		verify(!"The line above should have thrown an execption");
	}
	catch (e)
	{
		verify (e.code == DOMException.INVALID_STATE_ERR);
	}
	verify(input.valueAsNumber == 5);

	input.stepDown(0);
	verify(input.valueAsNumber == 5);
	input.stepUp(0);
	verify(input.valueAsNumber == 5);
}



html
{
	//! <html><form>
	//! <input type="number" value="3" step="any" max="5" min="1">
	//! </form></html>
}

test("WebForms2.Number.stepUpDown#2")
	language ecmascript;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	var f = document.forms[0];
	verify(f[0]);
	var input = f[0];

	verify("stepUp" in input);
	verify("stepDown" in input);

	verify("valueAsNumber" in input);

	verify(input.step == "any");
	try
	{
		// step == "any"
		input.stepDown(1);
		verify(!"The line above should have thrown an execption");
	}
	catch (e)
	{
		verify (e.code == DOMException.INVALID_STATE_ERR);
	}
}


html
{
	//! <html><form>
	//! <input type="number" value="2.5" step="1" max="5" min="1">
	//! </form></html>
}

test("WebForms2.Number.stepUpDown#3")
	language ecmascript;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	var f = document.forms[0];
	verify(f[0]);
	var input = f[0];

	verify("stepUp" in input);
	verify("stepDown" in input);

	verify("valueAsNumber" in input);

	verify(input.valueAsNumber == "2.5");
	input.stepUp(1);
	verify(input.value == 3);
	input.stepDown(1);
	verify(input.value == 2);
	try {
		input.stepDown(2);
		verify(!"The line above should have thrown an execption");
	}
	catch (e)
	{
		verify (e.code == DOMException.INVALID_STATE_ERR);
	}
}

html
{
	//! <html><form>
	//! <input type="number" step="1" max="5" min="1">
	//! </form></html>
}

test("WebForms2.Number.stepUpDown#4")
	language ecmascript;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	var f = document.forms[0];
	verify(f[0]);
	var input = f[0];

	verify("stepUp" in input);
	verify("stepDown" in input);

	verify("valueAsNumber" in input);

	verify(input.value == "");
	try
	{
		// No value
		input.stepDown(1);
		verify(!"The line above should have thrown an execption");
	}
	catch (e)
	{
		verify (e.code == DOMException.INVALID_STATE_ERR);
	}
	try
	{
		// No value
		input.stepUp(1);
		verify(!"The line above should have thrown an execption");
	}
	catch (e)
	{
		verify (e.code == DOMException.INVALID_STATE_ERR);
	}
}

test("WebForms2.Number.stepUpDown#5")
	language ecmascript;
{
	verify(document);
	verify("createElement" in document);
	var e = document.createElement("input");
	verify(e);
	e.type = "number";
	e.step = 3;
	e.value = 5;
	e.stepUp();
	verify(e.value == 6);
}

html
{
	//! <DOCTYPE html>
	//! <html lang="en">
	//!  <body>
	//!   <p><input type="number" value="0.00" step="0.01"></p>
	//!  </body>
	//! </html>
}

test("WebForms2.Number.Annoying decimals (bug 200503)")
	language ecmascript;
{
	var input = document.getElementsByTagName('input')[0];
	verify(input);
	input.stepUp(1);

	verify(input.value == "0.01");
}
