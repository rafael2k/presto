/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "WebForms2.Color";
require init;

language C++;

include "modules/forms/formvaluecolor.h";
include "modules/logdoc/htm_elm.h";

html
{
	//! <input type="color">
	//! <div style="display:none"><input type="color"></div>
}

test("Simple, visible")
{
	HTML_Element* input = find_element("input");
	verify(input);
	FormValue* value = input->GetFormValue();
	verify(value->GetType() == FormValue::VALUE_COLOR);
	FormValueColor* color = FormValueColor::GetAs(value);
	OpString str;
	verify_success(color->GetValueAsText(input, str));
	verify_string(str, "#000000");

	verify_success(color->SetValueFromText(input, UNI_L("foo")));
	verify_success(color->GetValueAsText(input, str));
	verify_string(str, "#000000");

	verify_success(color->SetValueFromText(input, UNI_L("rgb(1, 2, 3)")));
	verify_success(color->GetValueAsText(input, str));
	verify_string(str, "#000000");

	verify_success(color->SetValueFromText(input, UNI_L("#123bcD")));
	verify_success(color->GetValueAsText(input, str));
	verify_string(str, "#123bcd");

	verify(color->HasMeaningfulTextRepresentation());
}

test("Simple, invisible")
{
	HTML_Element* input = find_element("input", 2);
	verify(input);
	FormValue* value = input->GetFormValue();
	verify(value->GetType() == FormValue::VALUE_COLOR);
	FormValueColor* color = FormValueColor::GetAs(value);
	OpString str;
	verify_success(color->GetValueAsText(input, str));
	verify_string(str, "#000000");

	verify_success(color->SetValueFromText(input, UNI_L("foo")));
	verify_success(color->GetValueAsText(input, str));
	verify_string(str, "#000000");

	verify_success(color->SetValueFromText(input, UNI_L("rgb(1, 2, 3)")));
	verify_success(color->GetValueAsText(input, str));
	verify_string(str, "#000000");

	verify_success(color->SetValueFromText(input, UNI_L("#123bcD")));
	verify_success(color->GetValueAsText(input, str));
	verify_string(str, "#123bcd");

	verify(color->HasMeaningfulTextRepresentation());
}
