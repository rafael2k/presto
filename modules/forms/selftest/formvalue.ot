/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "Forms.FormValue";
require init;

language C++;

include "modules/logdoc/htm_elm.h";
include "modules/forms/formmanager.h";
include "modules/forms/formvalue.h";
include "modules/forms/formvaluetext.h";
include "modules/forms/formvaluetextarea.h";
include "modules/forms/formvalueradiocheck.h";
include "modules/formats/argsplit.h";

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="submittext" type="text" value="thing">
	//! </form></body></html>
}

test("FormValue.FormValueText#1")
{
	HTML_Element* text_elm = find_element("input", 1);
	verify(text_elm);
	FormValue* text_value = text_elm->GetFormValue();
	verify(text_value);
	verify(text_value->GetType() == FormValue::VALUE_TEXT);
	FormValueText* text_text_value = FormValueText::GetAs(text_value);
	verify(text_text_value);
	OpString text;
	verify(OpStatus::IsSuccess(text_value->GetValueAsText(text_elm, text)));
	verify(text.CStr());
	verify(uni_str_eq(text.CStr(), "thing"));
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="submittext" type="text">
	//! </form></body></html>
}

test("FormValue.FormValueText#2")
{
	HTML_Element* text_elm = find_element("input", 1);
	verify(text_elm);
	FormValue* text_value = text_elm->GetFormValue();
	verify(text_value);
	verify(text_value-> GetType() == FormValue::VALUE_TEXT);
	FormValueText* text_text_value = FormValueText::GetAs(text_value);
	verify(text_text_value);
	OpString text;
	verify(OpStatus::IsSuccess(text_value->GetValueAsText(text_elm, text)));
	verify(!text.CStr() || !*text.CStr());
}


html
{
	"<form action='' name='form1'>"
	"<input type='text' name=ett value='2"
	"'>"
	"<input type='hidden' name=tva value='2\n"
	"'>"
	"<input style='display:none' type='text' name=tre value='2"
	"'></form>"
}

test("FormValue.FormValueText.LinebreakFilter.Bug#211033")
	language ecmascript;
{
	verify(document.forms[0]);
	verify(document.forms[0][0]);
	verify(document.forms[0][0].value == "2");
	document.forms[0][0].value == "2\n\r";
	verify(document.forms[0][0].value == "2");

	verify(document.forms[0][1]);
	verify(document.forms[0][1].value != "2");
	document.forms[0][1].value == "2\n\r";
	verify(document.forms[0][1].value != "2");

	verify(document.forms[0][2]);
	verify(document.forms[0][2].value == "2");
	document.forms[0][2].value == "2\n\r";
	verify(document.forms[0][2].value == "2");
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="submittext" type="text" value="thing">
	//! <input name="submitpassword" type="password" value="thing">
	//! <input name="submitcheckbox" type="checkbox" value="thing">
	//! <input name="submitradio" type="radio" value="thing">
	//! <input name="submitreset" type="reset" value="thing">
	//! <input name="submitfile" type="file" value="thing">
	//! <input name="submithidden" type="hidden" value="thing">
	//! <input name="submitimage" type="image" value="thing">
	//! <input name="submitbutton1" type="button" value="thing">
	//! <input name="submitsubmit" type="submit" value="thing">
	//! <button name="submitbutton2" value="thing">Stuffy</button>
	//! </form></body></html>
}

test("FormValue.FormvalueExists.HTML")
{
	HTML_Element* form_elm = find_element("form");
	HTML_Element* text_elm = find_element("input", 1);
	HTML_Element* pwd_elm = find_element("input", 2);
	HTML_Element* check_elm = find_element("input", 3);
	HTML_Element* radio_elm = find_element("input", 4);
	HTML_Element* reset_elm = find_element("input", 5);
	HTML_Element* file_elm = find_element("input", 6);
	HTML_Element* hidden_elm = find_element("input", 7);
	HTML_Element* image_elm = find_element("input", 8);
	HTML_Element* button1_elm = find_element("input", 9);
	HTML_Element* submit_elm = find_element("input", 10);
	HTML_Element* button2_elm = find_element("button", 1);

	verify(form_elm);
	verify(text_elm);
	verify(pwd_elm);
	verify(check_elm);
	verify(radio_elm);
	verify(reset_elm);
	verify(file_elm);
	verify(hidden_elm);
	verify(image_elm);
	verify(button1_elm);
	verify(submit_elm);
	verify(button2_elm);

	verify(form_elm->Type() == HE_FORM);
	verify(text_elm->Type() == HE_INPUT);
	verify(text_elm->GetInputType() == INPUT_TEXT);
	verify(pwd_elm->Type() == HE_INPUT);
	verify(pwd_elm->GetInputType() == INPUT_PASSWORD);
	verify(check_elm->Type() == HE_INPUT);
	verify(check_elm->GetInputType() == INPUT_CHECKBOX);
	verify(radio_elm->Type() == HE_INPUT);
	verify(radio_elm->GetInputType() == INPUT_RADIO);
	verify(reset_elm->Type() == HE_INPUT);
	verify(reset_elm->GetInputType() == INPUT_RESET);
	verify(file_elm->Type() == HE_INPUT);
	verify(file_elm->GetInputType() == INPUT_FILE);
	verify(hidden_elm->Type() == HE_INPUT);
	verify(hidden_elm->GetInputType() == INPUT_HIDDEN);
	verify(image_elm->Type() == HE_INPUT);
	verify(image_elm->GetInputType() == INPUT_IMAGE);
	verify(button1_elm->Type() == HE_INPUT);
	verify(button1_elm->GetInputType() == INPUT_BUTTON);
	verify(submit_elm->Type() == HE_INPUT);
	verify(submit_elm->GetInputType() == INPUT_SUBMIT);
	verify(button2_elm->Type() == HE_BUTTON);

	verify(text_elm->ElementHasFormValue());
	verify(text_elm->GetFormValue());
	verify(pwd_elm->ElementHasFormValue());
	verify(pwd_elm->GetFormValue());
	verify(check_elm->ElementHasFormValue());
	verify(check_elm->GetFormValue());
	verify(radio_elm->ElementHasFormValue());
	verify(radio_elm->GetFormValue());
	verify(reset_elm->ElementHasFormValue());
	verify(reset_elm->GetFormValue());
	verify(file_elm->ElementHasFormValue());
	verify(file_elm->GetFormValue());
	verify(hidden_elm->ElementHasFormValue());
	verify(hidden_elm->GetFormValue());
	verify(image_elm->ElementHasFormValue());
	verify(image_elm->GetFormValue());
	verify(button1_elm->ElementHasFormValue());
	verify(button1_elm->GetFormValue());
	verify(submit_elm->ElementHasFormValue());
	verify(submit_elm->GetFormValue());
	verify(button2_elm->ElementHasFormValue());
	verify(button2_elm->GetFormValue());
}

test("FormValue.FormvalueSetToNull")
{
	HTML_Element* form_elm = find_element("form");
	HTML_Element* text_elm = find_element("input", 1);
	HTML_Element* pwd_elm = find_element("input", 2);
	HTML_Element* check_elm = find_element("input", 3);
	HTML_Element* radio_elm = find_element("input", 4);
	HTML_Element* reset_elm = find_element("input", 5);
	HTML_Element* file_elm = find_element("input", 6);
	HTML_Element* hidden_elm = find_element("input", 7);
	HTML_Element* image_elm = find_element("input", 8);
	HTML_Element* button1_elm = find_element("input", 9);
	HTML_Element* submit_elm = find_element("input", 10);
	HTML_Element* button2_elm = find_element("button", 1);

	verify(form_elm);
	verify(text_elm);
	verify(pwd_elm);
	verify(check_elm);
	verify(radio_elm);
	verify(reset_elm);
	verify(file_elm);
	verify(hidden_elm);
	verify(image_elm);
	verify(button1_elm);
	verify(submit_elm);
	verify(button2_elm);

	verify(form_elm->Type() == HE_FORM);
	verify(text_elm->Type() == HE_INPUT);
	verify(text_elm->GetInputType() == INPUT_TEXT);
	verify(pwd_elm->Type() == HE_INPUT);
	verify(pwd_elm->GetInputType() == INPUT_PASSWORD);
	verify(check_elm->Type() == HE_INPUT);
	verify(check_elm->GetInputType() == INPUT_CHECKBOX);
	verify(radio_elm->Type() == HE_INPUT);
	verify(radio_elm->GetInputType() == INPUT_RADIO);
	verify(reset_elm->Type() == HE_INPUT);
	verify(reset_elm->GetInputType() == INPUT_RESET);
	verify(file_elm->Type() == HE_INPUT);
	verify(file_elm->GetInputType() == INPUT_FILE);
	verify(hidden_elm->Type() == HE_INPUT);
	verify(hidden_elm->GetInputType() == INPUT_HIDDEN);
	verify(image_elm->Type() == HE_INPUT);
	verify(image_elm->GetInputType() == INPUT_IMAGE);
	verify(button1_elm->Type() == HE_INPUT);
	verify(button1_elm->GetInputType() == INPUT_BUTTON);
	verify(submit_elm->Type() == HE_INPUT);
	verify(submit_elm->GetInputType() == INPUT_SUBMIT);
	verify(button2_elm->Type() == HE_BUTTON);

	verify(text_elm->ElementHasFormValue());
	verify(text_elm->GetFormValue());
	verify(pwd_elm->ElementHasFormValue());
	verify(pwd_elm->GetFormValue());
	verify(check_elm->ElementHasFormValue());
	verify(check_elm->GetFormValue());
	verify(radio_elm->ElementHasFormValue());
	verify(radio_elm->GetFormValue());
	verify(reset_elm->ElementHasFormValue());
	verify(reset_elm->GetFormValue());
	verify(file_elm->ElementHasFormValue());
	verify(file_elm->GetFormValue());
	verify(hidden_elm->ElementHasFormValue());
	verify(hidden_elm->GetFormValue());
	verify(image_elm->ElementHasFormValue());
	verify(image_elm->GetFormValue());
	verify(button1_elm->ElementHasFormValue());
	verify(button1_elm->GetFormValue());
	verify(submit_elm->ElementHasFormValue());
	verify(submit_elm->GetFormValue());
	verify(button2_elm->ElementHasFormValue());
	verify(button2_elm->GetFormValue());

	FormValue* val = text_elm->GetFormValue();
	verify(val);
	val->SetValueFromText(text_elm, NULL);

	val = pwd_elm->GetFormValue();
	verify(val);
	val->SetValueFromText(pwd_elm, NULL);

// SetValueFromText is without meaning on a radio button.
//	val = check_elm->GetFormValue();
//	verify(val);
//	val->SetValueFromText(check_elm, NULL);

// SetValueFromText is without meaning on a radio button.
//	val = radio_elm->GetFormValue();
//	verify(val);
//	val->SetValueFromText(radio_elm, NULL);

	val = reset_elm->GetFormValue();
	verify(val);
	val->SetValueFromText(reset_elm, NULL);

	val = file_elm->GetFormValue();
	verify(val);
	val->SetValueFromText(file_elm, NULL);

	val = hidden_elm->GetFormValue();
	verify(val);
	val->SetValueFromText(hidden_elm, NULL);

	val = image_elm->GetFormValue();
	verify(val);
	val->SetValueFromText(image_elm, NULL);

	val = button1_elm->GetFormValue();
	verify(val);
	val->SetValueFromText(button1_elm, NULL);

	val = submit_elm->GetFormValue();
	verify(val);
	val->SetValueFromText(submit_elm, NULL);
}

xhtml
{
	//! <?xml version="1.0" ?>
	//! <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
	//! <html xmlns="http://www.w3.org/1999/xhtml"><head><title>Test</title></head><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="submittext" type="text" value="thing"/>
	//! <input name="submitpassword" type="password" value="thing"/>
	//! <input name="submitcheckbox" type="checkbox" value="thing"/>
	//! <input name="submitradio" type="radio" value="thing"/>
	//! <input name="submitreset" type="reset" value="thing"/>
	//! <input name="submitfile" type="file" value="thing"/>
	//! <input name="submithidden" type="hidden" value="thing"/>
	//! <input name="submitimage" type="image" value="thing"/>
	//! <input name="submitbutton1" type="button" value="thing"/>
	//! <input name="submitsubmit" type="submit" value="thing"/>
	//! <button name="submitbutton2" value="thing">Stuffy</button>
	//! </form></body></html>
}

test("FormValue.FormvalueExists.XHTML")
{
	HTML_Element* form_elm = find_element("form");
	HTML_Element* text_elm = find_element("input", 1);
	HTML_Element* pwd_elm = find_element("input", 2);
	HTML_Element* check_elm = find_element("input", 3);
	HTML_Element* radio_elm = find_element("input", 4);
	HTML_Element* reset_elm = find_element("input", 5);
	HTML_Element* file_elm = find_element("input", 6);
	HTML_Element* hidden_elm = find_element("input", 7);
	HTML_Element* image_elm = find_element("input", 8);
	HTML_Element* button1_elm = find_element("input", 9);
	HTML_Element* submit_elm = find_element("input", 10);
	HTML_Element* button2_elm = find_element("button", 1);

	verify(form_elm);
	verify(text_elm);
	verify(pwd_elm);
	verify(check_elm);
	verify(radio_elm);
	verify(reset_elm);
	verify(file_elm);
	verify(hidden_elm);
	verify(image_elm);
	verify(button1_elm);
	verify(submit_elm);
	verify(button2_elm);

	verify(form_elm->Type() == HE_FORM);
	verify(text_elm->Type() == HE_INPUT);
	verify(text_elm->GetInputType() == INPUT_TEXT);
	verify(pwd_elm->Type() == HE_INPUT);
	verify(pwd_elm->GetInputType() == INPUT_PASSWORD);
	verify(check_elm->Type() == HE_INPUT);
	verify(check_elm->GetInputType() == INPUT_CHECKBOX);
	verify(radio_elm->Type() == HE_INPUT);
	verify(radio_elm->GetInputType() == INPUT_RADIO);
	verify(reset_elm->Type() == HE_INPUT);
	verify(reset_elm->GetInputType() == INPUT_RESET);
	verify(file_elm->Type() == HE_INPUT);
	verify(file_elm->GetInputType() == INPUT_FILE);
	verify(hidden_elm->Type() == HE_INPUT);
	verify(hidden_elm->GetInputType() == INPUT_HIDDEN);
	verify(image_elm->Type() == HE_INPUT);
	verify(image_elm->GetInputType() == INPUT_IMAGE);
	verify(button1_elm->Type() == HE_INPUT);
	verify(button1_elm->GetInputType() == INPUT_BUTTON);
	verify(submit_elm->Type() == HE_INPUT);
	verify(submit_elm->GetInputType() == INPUT_SUBMIT);
	verify(button2_elm->Type() == HE_BUTTON);

	verify(text_elm->ElementHasFormValue());
	verify(text_elm->GetFormValue());
	verify(pwd_elm->ElementHasFormValue());
	verify(pwd_elm->GetFormValue());
	verify(check_elm->ElementHasFormValue());
	verify(check_elm->GetFormValue());
	verify(radio_elm->ElementHasFormValue());
	verify(radio_elm->GetFormValue());
	verify(reset_elm->ElementHasFormValue());
	verify(reset_elm->GetFormValue());
	verify(file_elm->ElementHasFormValue());
	verify(file_elm->GetFormValue());
	verify(hidden_elm->ElementHasFormValue());
	verify(hidden_elm->GetFormValue());
	verify(image_elm->ElementHasFormValue());
	verify(image_elm->GetFormValue());
	verify(button1_elm->ElementHasFormValue());
	verify(button1_elm->GetFormValue());
	verify(submit_elm->ElementHasFormValue());
	verify(submit_elm->GetFormValue());
	verify(button2_elm->ElementHasFormValue());
	verify(button2_elm->GetFormValue());
}

html
{
	//! <html><body>
	//! <form name="hej" action="http://localhost:8080/lek.jsp" method="post">
	//! </form></body></html>
}

test("DOMCreated setup")
	language ecmascript;
{
	verify(document);
	verify(document.forms);
	verify(document.forms["hej"]);
	var f = document.forms["hej"];
	verify('name' in f);
	verify(document.createElement);
	
	var text_field = document.createElement("INPUT");
	verify(text_field);
	text_field.type = "text";
	verify(text_field.type == "text");
	text_field.setAttribute("id", "text_field");

	// text_field.setAttribute("type", "text");
	f.appendChild(text_field);

	var checkbox_field = document.createElement('INPUT');
	verify(checkbox_field);
	checkbox_field.type = "checkbox";
	verify(checkbox_field.type == "checkbox");
	checkbox_field.setAttribute("id", "checkbox_field");
	f.appendChild(checkbox_field);
}

test("DOMCreated test")
	require success "DOMCreated setup";
{
	HTML_Element* text_field = find_element("input", 1);
	verify(text_field);
	FormValue* text_value = text_field->GetFormValue();
	verify(text_value);
	verify(text_value->GetType() == FormValue::VALUE_TEXT);

	HTML_Element* checkbox_field = find_element("input", 2);
	verify(checkbox_field);
	verify(checkbox_field->GetInputType() == INPUT_CHECKBOX);
	FormValue* checkbox_value = checkbox_field->GetFormValue();
	verify(checkbox_value);
	verify(checkbox_value->GetType() == FormValue::VALUE_RADIOCHECK);
}


html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="submittext" type="text" value="thing">
	//! <input name="submitpassword" type="password" value="thing">
	//! <input name="submitcheckbox" type="checkbox" value="thing">
	//! <input name="submitradio" type="radio" value="thing">
	//! <input name="submitreset" type="reset" value="thing">
	//! <input name="submitfile" type="file" value="thing">
	//! <input name="submithidden" type="hidden" value="thing">
	//! <input name="submitimage" type="image" value="thing">
	//! <input name="submitbutton1" type="button" value="thing">
	//! <input name="submitsubmit" type="submit" value="thing">
	//! <button name="submitbutton2" value="thing">Stuffy</button>
	//! </form></body></html>
}

test("FormValue.FormvalueGetSetAndReset")
{
	HTML_Element* form_elm = find_element("form");
	HTML_Element* text_elm = find_element("input", 1);
	HTML_Element* pwd_elm = find_element("input", 2);
	HTML_Element* check_elm = find_element("input", 3);
	HTML_Element* radio_elm = find_element("input", 4);
	HTML_Element* reset_elm = find_element("input", 5);
	HTML_Element* file_elm = find_element("input", 6);
	HTML_Element* hidden_elm = find_element("input", 7);
	HTML_Element* image_elm = find_element("input", 8);
	HTML_Element* button1_elm = find_element("input", 9);
	HTML_Element* submit_elm = find_element("input", 10);
	HTML_Element* button2_elm = find_element("button", 1);

	verify(form_elm);
	verify(text_elm);
	verify(pwd_elm);
	verify(check_elm);
	verify(radio_elm);
	verify(reset_elm);
	verify(file_elm);
	verify(hidden_elm);
	verify(image_elm);
	verify(button1_elm);
	verify(submit_elm);
	verify(button2_elm);

	verify(form_elm->Type() == HE_FORM);
	verify(text_elm->Type() == HE_INPUT);
	verify(text_elm->GetInputType() == INPUT_TEXT);
	verify(pwd_elm->Type() == HE_INPUT);
	verify(pwd_elm->GetInputType() == INPUT_PASSWORD);
	verify(check_elm->Type() == HE_INPUT);
	verify(check_elm->GetInputType() == INPUT_CHECKBOX);
	verify(radio_elm->Type() == HE_INPUT);
	verify(radio_elm->GetInputType() == INPUT_RADIO);
	verify(reset_elm->Type() == HE_INPUT);
	verify(reset_elm->GetInputType() == INPUT_RESET);
	verify(file_elm->Type() == HE_INPUT);
	verify(file_elm->GetInputType() == INPUT_FILE);
	verify(hidden_elm->Type() == HE_INPUT);
	verify(hidden_elm->GetInputType() == INPUT_HIDDEN);
	verify(image_elm->Type() == HE_INPUT);
	verify(image_elm->GetInputType() == INPUT_IMAGE);
	verify(button1_elm->Type() == HE_INPUT);
	verify(button1_elm->GetInputType() == INPUT_BUTTON);
	verify(submit_elm->Type() == HE_INPUT);
	verify(submit_elm->GetInputType() == INPUT_SUBMIT);
	verify(button2_elm->Type() == HE_BUTTON);

	verify(text_elm->ElementHasFormValue());
	verify(text_elm->GetFormValue());
	verify(pwd_elm->ElementHasFormValue());
	verify(pwd_elm->GetFormValue());
	verify(check_elm->ElementHasFormValue());
	verify(check_elm->GetFormValue());
	verify(radio_elm->ElementHasFormValue());
	verify(radio_elm->GetFormValue());
	verify(reset_elm->ElementHasFormValue());
	verify(reset_elm->GetFormValue());
	verify(file_elm->ElementHasFormValue());
	verify(file_elm->GetFormValue());
	verify(hidden_elm->ElementHasFormValue());
	verify(hidden_elm->GetFormValue());
	verify(image_elm->ElementHasFormValue());
	verify(image_elm->GetFormValue());
	verify(button1_elm->ElementHasFormValue());
	verify(button1_elm->GetFormValue());
	verify(submit_elm->ElementHasFormValue());
	verify(submit_elm->GetFormValue());
	verify(button2_elm->ElementHasFormValue());
	verify(button2_elm->GetFormValue());

	OpString text_val;
	FormValue* val = text_elm->GetFormValue();
	verify(val);
	val->GetValueAsText(text_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->SetValueFromText(text_elm, UNI_L("doh"));
	text_val.Empty();
	val->GetValueAsText(text_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->ResetToDefault(text_elm);
	text_val.Empty();
	val->GetValueAsText(text_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));

	val = pwd_elm->GetFormValue();
	verify(val);
	text_val.Empty();
	val->GetValueAsText(pwd_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->SetValueFromText(pwd_elm, UNI_L("doh"));
	text_val.Empty();
	val->GetValueAsText(pwd_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->ResetToDefault(pwd_elm);
	text_val.Empty();
	val->GetValueAsText(pwd_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));

	val = check_elm->GetFormValue();
	verify(val);
	FormValueRadioCheck* check_val = FormValueRadioCheck::GetAs(val);
	verify(!check_val->IsChecked(check_elm));
	check_val->SetIsChecked(check_elm, FALSE, NULL, FALSE);
	verify(!check_val->IsChecked(check_elm));
	check_val->SetIsChecked(check_elm, TRUE, NULL, FALSE);
	verify(check_val->IsChecked(check_elm));
	text_val.Empty();
	val->GetValueAsText(check_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->ResetToDefault(check_elm);
	verify(!check_val->IsChecked(check_elm));

	val = radio_elm->GetFormValue();
	verify(val);
	FormValueRadioCheck* radio_val = FormValueRadioCheck::GetAs(val);
	verify(!radio_val->IsChecked(radio_elm));
	radio_val->SetIsChecked(radio_elm, FALSE, NULL, FALSE);
	verify(!radio_val->IsChecked(radio_elm));
	radio_val->SetIsChecked(radio_elm, TRUE, NULL, FALSE);
	verify(radio_val->IsChecked(radio_elm));
	text_val.Empty();
	val->GetValueAsText(radio_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->ResetToDefault(radio_elm);
	verify(!radio_val->IsChecked(radio_elm));

	val = reset_elm->GetFormValue();
	verify(val);
	text_val.Empty();
	val->GetValueAsText(reset_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->SetValueFromText(reset_elm, UNI_L("doh"));
	text_val.Empty();
	val->GetValueAsText(reset_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->ResetToDefault(reset_elm);
	text_val.Empty();
	val->GetValueAsText(reset_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));

	val = file_elm->GetFormValue();
	verify(val);
	text_val.Empty();
	val->GetValueAsText(file_elm, text_val);
	verify(text_val.IsEmpty());
	val->SetValueFromText(file_elm, UNI_L("doh"));
	text_val.Empty();
	val->GetValueAsText(file_elm, text_val);
#ifdef _FILE_UPLOAD_SUPPORT_ // File widget is a little too stupid when we don't have file upload enabled
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
#endif // _FILE_UPLOAD_SUPPORT_
	val->ResetToDefault(file_elm);
	text_val.Empty();
	val->GetValueAsText(file_elm, text_val);
	verify(text_val.IsEmpty());

	val = hidden_elm->GetFormValue();
	verify(val);
	text_val.Empty();
	val->GetValueAsText(hidden_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->SetValueFromText(hidden_elm, UNI_L("doh"));
	text_val.Empty();
	val->GetValueAsText(hidden_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->ResetToDefault(hidden_elm);
	text_val.Empty();
	val->GetValueAsText(hidden_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->SetValueFromText(hidden_elm, NULL);

	val = image_elm->GetFormValue();
	verify(val);
	val->ResetToDefault(image_elm); // XXX How to test?
	
	val = button1_elm->GetFormValue();
	verify(val);
	text_val.Empty();
	val->GetValueAsText(button1_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->SetValueFromText(button1_elm, UNI_L("doh"));
	text_val.Empty();
	val->GetValueAsText(button1_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->ResetToDefault(button1_elm);
	text_val.Empty();
	val->GetValueAsText(button1_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->SetValueFromText(button1_elm, NULL);

	val = submit_elm->GetFormValue();
	verify(val);
	text_val.Empty();
	val->GetValueAsText(submit_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->SetValueFromText(submit_elm, UNI_L("doh"));
	text_val.Empty();
	val->GetValueAsText(submit_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->ResetToDefault(submit_elm);
	text_val.Empty();
	val->GetValueAsText(submit_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->SetValueFromText(submit_elm, NULL);
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post"
	//!   style="display:none">
	//! <input name="submittext" type="text" value="thing">
	//! <input name="submitpassword" type="password" value="thing">
	//! <input name="submitcheckbox" type="checkbox" value="thing">
	//! <input name="submitradio" type="radio" value="thing">
	//! <input name="submitreset" type="reset" value="thing">
	//! <input name="submitfile" type="file" value="thing">
	//! <input name="submithidden" type="hidden" value="thing">
	//! <input name="submitimage" type="image" value="thing">
	//! <input name="submitbutton1" type="button" value="thing">
	//! <input name="submitsubmit" type="submit" value="thing">
	//! <button name="submitbutton2" value="thing">Stuffy</button>
	//! </form></body></html>
}

test("FormValue.FormvalueGetSetAndReset - display=none")
{
	HTML_Element* form_elm = find_element("form");
	HTML_Element* text_elm = find_element("input", 1);
	HTML_Element* pwd_elm = find_element("input", 2);
	HTML_Element* check_elm = find_element("input", 3);
	HTML_Element* radio_elm = find_element("input", 4);
	HTML_Element* reset_elm = find_element("input", 5);
	HTML_Element* file_elm = find_element("input", 6);
	HTML_Element* hidden_elm = find_element("input", 7);
	HTML_Element* image_elm = find_element("input", 8);
	HTML_Element* button1_elm = find_element("input", 9);
	HTML_Element* submit_elm = find_element("input", 10);
	HTML_Element* button2_elm = find_element("button", 1);

	verify(form_elm);
	verify(text_elm);
	verify(pwd_elm);
	verify(check_elm);
	verify(radio_elm);
	verify(reset_elm);
	verify(file_elm);
	verify(hidden_elm);
	verify(image_elm);
	verify(button1_elm);
	verify(submit_elm);
	verify(button2_elm);

	verify(form_elm->Type() == HE_FORM);
	verify(text_elm->Type() == HE_INPUT);
	verify(text_elm->GetInputType() == INPUT_TEXT);
	verify(pwd_elm->Type() == HE_INPUT);
	verify(pwd_elm->GetInputType() == INPUT_PASSWORD);
	verify(check_elm->Type() == HE_INPUT);
	verify(check_elm->GetInputType() == INPUT_CHECKBOX);
	verify(radio_elm->Type() == HE_INPUT);
	verify(radio_elm->GetInputType() == INPUT_RADIO);
	verify(reset_elm->Type() == HE_INPUT);
	verify(reset_elm->GetInputType() == INPUT_RESET);
	verify(file_elm->Type() == HE_INPUT);
	verify(file_elm->GetInputType() == INPUT_FILE);
	verify(hidden_elm->Type() == HE_INPUT);
	verify(hidden_elm->GetInputType() == INPUT_HIDDEN);
	verify(image_elm->Type() == HE_INPUT);
	verify(image_elm->GetInputType() == INPUT_IMAGE);
	verify(button1_elm->Type() == HE_INPUT);
	verify(button1_elm->GetInputType() == INPUT_BUTTON);
	verify(submit_elm->Type() == HE_INPUT);
	verify(submit_elm->GetInputType() == INPUT_SUBMIT);
	verify(button2_elm->Type() == HE_BUTTON);

	verify(text_elm->ElementHasFormValue());
	verify(text_elm->GetFormValue());
	verify(pwd_elm->ElementHasFormValue());
	verify(pwd_elm->GetFormValue());
	verify(check_elm->ElementHasFormValue());
	verify(check_elm->GetFormValue());
	verify(radio_elm->ElementHasFormValue());
	verify(radio_elm->GetFormValue());
	verify(reset_elm->ElementHasFormValue());
	verify(reset_elm->GetFormValue());
	verify(file_elm->ElementHasFormValue());
	verify(file_elm->GetFormValue());
	verify(hidden_elm->ElementHasFormValue());
	verify(hidden_elm->GetFormValue());
	verify(image_elm->ElementHasFormValue());
	verify(image_elm->GetFormValue());
	verify(button1_elm->ElementHasFormValue());
	verify(button1_elm->GetFormValue());
	verify(submit_elm->ElementHasFormValue());
	verify(submit_elm->GetFormValue());
	verify(button2_elm->ElementHasFormValue());
	verify(button2_elm->GetFormValue());

	OpString text_val;
	FormValue* val = text_elm->GetFormValue();
	verify(val);
	text_val.Empty();
	val->GetValueAsText(text_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->SetValueFromText(text_elm, UNI_L("doh"));
	text_val.Empty();
	val->GetValueAsText(text_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->ResetToDefault(text_elm);
	text_val.Empty();
	val->GetValueAsText(text_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));

	val = pwd_elm->GetFormValue();
	verify(val);
	text_val.Empty();
	val->GetValueAsText(pwd_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->SetValueFromText(pwd_elm, UNI_L("doh"));
	text_val.Empty();
	val->GetValueAsText(pwd_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->ResetToDefault(pwd_elm);
	text_val.Empty();
	val->GetValueAsText(pwd_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));

	val = check_elm->GetFormValue();
	verify(val);
	FormValueRadioCheck* check_val = FormValueRadioCheck::GetAs(val);
	verify(!check_val->IsChecked(check_elm));
	check_val->SetIsChecked(check_elm, FALSE, NULL, FALSE);
	verify(!check_val->IsChecked(check_elm));
	check_val->SetIsChecked(check_elm, TRUE, NULL, FALSE);
	verify(check_val->IsChecked(check_elm));
	text_val.Empty();
	val->GetValueAsText(check_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->ResetToDefault(check_elm);
	verify(!check_val->IsChecked(check_elm));

	val = radio_elm->GetFormValue();
	verify(val);
	FormValueRadioCheck* radio_val = FormValueRadioCheck::GetAs(val);
	verify(!radio_val->IsChecked(radio_elm));
	radio_val->SetIsChecked(radio_elm, FALSE, state.doc, TRUE);
	verify(!radio_val->IsChecked(radio_elm));
	radio_val->SetIsChecked(radio_elm, TRUE, state.doc, TRUE);
	verify(radio_val->IsChecked(radio_elm));
	text_val.Empty();
	val->GetValueAsText(radio_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->ResetToDefault(radio_elm);
	verify(!radio_val->IsChecked(radio_elm));

	val = reset_elm->GetFormValue();
	verify(val);
	text_val.Empty();
	val->GetValueAsText(reset_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->SetValueFromText(reset_elm, UNI_L("doh"));
	text_val.Empty();
	val->GetValueAsText(reset_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->ResetToDefault(reset_elm);
	text_val.Empty();
	val->GetValueAsText(reset_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));

	val = file_elm->GetFormValue();
	verify(val);
	text_val.Empty();
	val->GetValueAsText(file_elm, text_val);
	verify(text_val.IsEmpty());
	val->SetValueFromText(file_elm, UNI_L("doh"));
	text_val.Empty();
	val->GetValueAsText(file_elm, text_val);
#ifdef _FILE_UPLOAD_SUPPORT_ // File widget is a little too stupid when we don't have file upload enabled
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
#endif // _FILE_UPLOAD_SUPPORT_
	val->ResetToDefault(file_elm);
	text_val.Empty();
	val->GetValueAsText(file_elm, text_val);
	verify(text_val.IsEmpty());

	val = hidden_elm->GetFormValue();
	verify(val);
	text_val.Empty();
	val->GetValueAsText(hidden_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->SetValueFromText(hidden_elm, UNI_L("doh"));
	text_val.Empty();
	val->GetValueAsText(hidden_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->ResetToDefault(hidden_elm);
	text_val.Empty();
	val->GetValueAsText(hidden_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->SetValueFromText(hidden_elm, NULL);

	val = image_elm->GetFormValue();
	verify(val);
	val->ResetToDefault(image_elm); // XXX How to test?

	val = button1_elm->GetFormValue();
	verify(val);
	text_val.Empty();
	val->GetValueAsText(button1_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->SetValueFromText(button1_elm, UNI_L("doh"));
	text_val.Empty();
	val->GetValueAsText(button1_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->ResetToDefault(button1_elm);
	text_val.Empty();
	val->GetValueAsText(button1_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->SetValueFromText(button1_elm, NULL);

	val = submit_elm->GetFormValue();
	verify(val);
	text_val.Empty();
	val->GetValueAsText(submit_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("thing")));
	val->SetValueFromText(submit_elm, UNI_L("doh"));
	text_val.Empty();
	val->GetValueAsText(submit_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->ResetToDefault(submit_elm);
	text_val.Empty();
	val->GetValueAsText(submit_elm, text_val);
	verify(!text_val.IsEmpty());
	verify(uni_str_eq(text_val.CStr(), UNI_L("doh")));
	val->SetValueFromText(submit_elm, NULL);
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post"
	//!   style="display:none">
	//! <input name="submithidden" type="hidden" value="thing">
	//! </form></body></html>
}

test("FormValue.InputHidden attribute is changed - setup")
	language ecmascript;
{
	verify(document);
	verify(document.forms);
	verify(document.forms[0]);
	verify(document.forms[0].submithidden);
	document.forms[0].submithidden.setAttribute("value", "doh");
}

test("FormValue.InputHidden attribute is changed - test")
	require success "FormValue.InputHidden attribute is changed - setup";
	language C++;
{
	HTML_Element* hidden = find_element("input");
	verify(hidden);
	FormValue* val = hidden->GetFormValue();
	verify(val);
	OpString value;
	verify(OpStatus::IsSuccess(val->GetValueAsText(hidden, value)));
	verify(value.Compare(UNI_L("doh")) == 0);
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="submitcheckbox" type="checkbox" checked>
	//! <input name="submitradio" type="radio" checked>
	//! </form></body></html>
}

// It's illegal to not have a value on check boxes and radio but if 
//they're missing MSIE defaults to "on" so we should too.
test("FormValue.FormvalueCheckRadioMissingValue")
	language C++;
{
	HTML_Element* check = find_element("input", 1);
	verify(check);
	FormValue* check_val = check->GetFormValue();
	verify(check_val);
	OpString value;
	verify(OpStatus::IsSuccess(check_val->GetValueAsText(check, value)));
	
	verify(!value.IsEmpty());
	verify(uni_str_eq(value.CStr(), UNI_L("on")));
	
	HTML_Element* radio = find_element("input", 2);
	verify(radio);
	FormValue* radio_val = radio->GetFormValue();
	verify(radio_val);
	verify(OpStatus::IsSuccess(radio_val->GetValueAsText(radio, value)));
	
	verify(!value.IsEmpty());
	verify(uni_str_eq(value.CStr(), UNI_L("on")));
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="submitcheckbox" type="checkbox" checked value="">
	//! <input name="submitradio" type="radio" checked value="">
	//! </form></body></html>
}

test("FormValue.FormvalueCheckRadioMissingValue2.Bug175546")
	language C++;
{
	HTML_Element* check = find_element("input", 1);
	verify(check);
	FormValue* check_val = check->GetFormValue();
	verify(check_val);
	OpString value;
	verify(OpStatus::IsSuccess(check_val->GetValueAsText(check, value)));
	
	verify(value.CStr());
	verify(!*value.CStr()); // == ""
	
	HTML_Element* radio = find_element("input", 2);
	verify(radio);
	FormValue* radio_val = radio->GetFormValue();
	verify(radio_val);
	verify(OpStatus::IsSuccess(radio_val->GetValueAsText(radio, value)));
	
	verify(value.CStr());
	verify(!*value.CStr()); // == ""
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <input name="submitcheckbox" type="checkbox" checked>
	//! <input name="submitradio" type="radio">
	//! <input name="submittext">
	//! </form></body></html>
}

// It's illegal to not have a value on check boxes and radio but if 
//they're missing MSIE defaults to "on" so we should too.
test("FormValue.FormvalueHasChanged")
	require WAND_SUPPORT;
	language C++;
disabled; // The IsChangedFromOriginal function have changed to only trigger by changes from UI or DOM.
{
	HTML_Element* check = find_element("input", 1);
	HTML_Element* radio = find_element("input", 2);
	HTML_Element* text = find_element("input", 3);
	
	verify(check);
	verify(radio);
	verify(text);
	
	FormValue* val = check->GetFormValue();
	verify(val);
	verify(!val->IsChangedFromOriginal(check));
	
	val = radio->GetFormValue();
	verify(val);
	verify(!val->IsChangedFromOriginal(radio));

	val = text->GetFormValue();
	verify(val);
	verify(!val->IsChangedFromOriginal(text));
	
	val = check->GetFormValue();
	verify(val);
	FormValueRadioCheck* radio_check = FormValueRadioCheck::GetAs(val);
	radio_check->SetIsChecked(check, TRUE);
	verify(!val->IsChangedFromOriginal(check));
	radio_check->SetIsChecked(check, FALSE);
	verify(val->IsChangedFromOriginal(check));
	
	val = radio->GetFormValue();
	verify(val);
	radio_check = FormValueRadioCheck::GetAs(val);
	radio_check->SetIsChecked(radio, FALSE);
	verify(!val->IsChangedFromOriginal(radio));
	radio_check->SetIsChecked(radio, TRUE);
	verify(val->IsChangedFromOriginal(radio));

	val = text->GetFormValue();
	verify(val);
	val->SetValueFromText(text, UNI_L(""));
	verify(!val->IsChangedFromOriginal(text));
	val->SetValueFromText(text, UNI_L("gurka"));
	verify(val->IsChangedFromOriginal(text));
}

html
{
	//! <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
	//! <html lang="en">
	//!  <head>
	//!   <title>HTML Forms: Radio buttons</title>
	//!  </head>
	//!  <body>
	//!   <p>The following two rows should be identical.</p>
	//!   <div> TEST:
	//!    <input type="radio" name="test1" checked="checked">
	//!    <input type="radio" name="test1" checked="checked">
	//!    <input type="radio" name="test1" checked="checked">
	//!   </div>
	//!   <div> TEST:
	//!    <input type="radio" name="test2">
	//!    <input type="radio" name="test2">
	//!    <input type="radio" name="test2" checked="checked">
	//!   </div>
	//!  </body>
	//! </html>
}

test("FormValue.OnlyOneRadioButtonSelected.Bug170663")
	language C++;
{
	HTML_Element* radio1a = find_element("input", 1);
	HTML_Element* radio1b = find_element("input", 2);
	HTML_Element* radio1c = find_element("input", 3);
	HTML_Element* radio2a = find_element("input", 4);
	HTML_Element* radio2b = find_element("input", 5);
	HTML_Element* radio2c = find_element("input", 6);

	verify(radio1a && radio1b && radio1c && radio2a && radio2b && radio2c);

	FormValue* val = radio1a->GetFormValue();
	verify(val);
	FormValueRadioCheck* radio = FormValueRadioCheck::GetAs(val);
	verify(radio);
	verify(!radio->IsChecked(radio1a));

	val = radio1b->GetFormValue();
	verify(val);
	radio = FormValueRadioCheck::GetAs(val);
	verify(radio);
	verify(!radio->IsChecked(radio1b));

	val = radio1c->GetFormValue();
	verify(val);
	radio = FormValueRadioCheck::GetAs(val);
	verify(radio);
	verify(radio->IsChecked(radio1c));

	val = radio2a->GetFormValue();
	verify(val);
	radio = FormValueRadioCheck::GetAs(val);
	verify(radio);
	verify(!radio->IsChecked(radio2a));

	val = radio2b->GetFormValue();
	verify(val);
	radio = FormValueRadioCheck::GetAs(val);
	verify(radio);
	verify(!radio->IsChecked(radio2b));

	val = radio2c->GetFormValue();
	verify(val);
	radio = FormValueRadioCheck::GetAs(val);
	verify(radio);
	verify(radio->IsChecked(radio2c));
}

test("FormManager.ConfigureForFileSplit")
	language C++;
{
	UniParameterList list;
	const uni_char* value = UNI_L("Fails if split");
	verify(OpStatus::IsSuccess(FormManager::ConfigureForFileSplit(list, value)));
	UniParameters* file = list.First();
	verify(file);
	const uni_char* file_name = file->Name();
	verify(file_name);
	verify(uni_str_eq(file_name, "Fails if split"));
	verify(!file->Suc());
}

test("FormValue - setting type - bug 230975")
	language ecmascript;
{
	var i = document.createElement('input');
	i.value = 'PASS';
	i.type = 'text'; // Setting type may lose the value, but shouldn't
					 // in this common scenario
	verify(i.value == 'PASS');
}

test("FormValue - setting type security")
	language ecmascript;
{
	var i = document.createElement('input');
	i.value = 'PASS';
	i.type = 'text'; // Setting type may lose the value, but shouldn't
					 // in this common scenario
	verify(i.value == 'PASS');
	i.type = 'file'; // Setting type may lose the value, but shouldn't
					 // in this common scenario
	verify(i.value == '');

	i = document.createElement('input');
	i.value = 'FAIL';
	i.type = 'file'; // Setting type may lose the value, but shouldn't
					 // in this common scenario
	verify(i.value == '');
}
