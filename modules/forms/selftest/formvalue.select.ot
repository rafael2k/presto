/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "Forms.FormValue.Select";
require init;

language C++;

include "modules/logdoc/htm_elm.h";
include "modules/forms/formvalue.h";
include "modules/forms/formvaluelist.h";
include "modules/forms/piforms.h";
include "modules/doc/frm_doc.h";
include "modules/display/vis_dev.h";

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <select name="submitselect">
	//!   <option>Ett</option>
	//!   <option>Tvaa</option>
	//! </select>
	//! </form></body></html>
}

test("FormValue.Select.FormvalueExists.HTML")
{
	HTML_Element* select_elm = find_element("select", 1);
	verify(select_elm);
	verify(select_elm->Type() == HE_SELECT);
	verify(select_elm->ElementHasFormValue());
	verify(select_elm->GetFormValue());
}

test("FormValue.Select.FormvalueSetToNull")
{
	HTML_Element* select_elm = find_element("select", 1);
	verify(select_elm);
	verify(select_elm->Type() == HE_SELECT);
	verify(select_elm->ElementHasFormValue());
	verify(select_elm->GetFormValue());
	FormValue* val = select_elm->GetFormValue();
	verify(val);
	verify (!val->HasMeaningfulTextRepresentation());
	// val->SetValueFromText(select_elm, NULL);
}


xhtml
{
	//! <?xml version="1.0" ?>
	//! <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
	//! <html xmlns="http://www.w3.org/1999/xhtml"><head><title>Test</title></head><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <select name="submitselect">
	//!   <option>Ett</option>
	//!   <option>Tvaa</option>
	//! </select>
	//! </form></body></html>
}

test("FormValue.Select.FormvalueExists.XHTML")
{
	HTML_Element* select_elm = find_element("select", 1);
	verify(select_elm);
	verify(select_elm->Type() == HE_SELECT);
	verify(select_elm->ElementHasFormValue());
	verify(select_elm->GetFormValue());
}

html
{
	//! <html><body>
	//! <form name="hej" action="http://localhost:8080/lek.jsp" method="post">
	//! </form></body></html>
}

test("FormValue.Select - DOMCreated setup")
	language ecmascript;
{
	verify(document);
	verify(document.forms);
	verify(document.forms["hej"]);
	var f = document.forms["hej"];
	verify('name' in f);
	verify(document.createElement);

	var select_field = document.createElement('SELECT');
	verify(select_field);
	//	select_field.type = "text";
	//	verify(select_field.type == "text");
	select_field.setAttribute("id", "select_field");
	f.appendChild(select_field);
}

test("FormValue.Select - DOMCreated test")
	require success "FormValue.Select - DOMCreated setup";
{
	HTML_Element* select_field = find_element("select", 1);
	verify(select_field);
	FormValue* select_value = select_field->GetFormValue();
	verify(select_value);
	verify(select_value->GetType() == FormValue::VALUE_LIST_SELECTION);
}


html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post">
	//! <select name="submitselect">
	//!   <option>Ett</option>
	//!   <option selected>Tvaa</option>
	//! </select>
	//! </form></body></html>
}

test("FormValue.Select.GetSetAndReset")
{
	HTML_Element* select_elm = find_element("select", 1);
	verify(select_elm);
	verify(select_elm->Type() == HE_SELECT);
	verify(select_elm->ElementHasFormValue());
	verify(select_elm->GetFormValue());

	FormValue* val = select_elm->GetFormValue();
	verify(val);
	verify(val->GetType() == FormValue::VALUE_LIST_SELECTION);
	FormValueList* list_val = FormValueList::GetAs(val);
	verify(!list_val->IsSelected(select_elm, 0));
	verify(list_val->IsSelected(select_elm, 1));
	list_val->SelectValue(select_elm, 0, TRUE);
	verify(list_val->IsSelected(select_elm, 0));
	verify(!list_val->IsSelected(select_elm, 1));
	list_val->ResetToDefault(select_elm);
	verify(!list_val->IsSelected(select_elm, 0));
	verify(list_val->IsSelected(select_elm, 1));
}

html
{
	//! <html><body>
	//! <form action="http://localhost:8080/lek.jsp" method="post"
	//!   style="display:none">
	//! <select name="submitselect">
	//!   <option>Ett</option>
	//!   <option selected>Tvaa</option>
	//! </select>
	//! </form></body></html>
}

test("FormValue.Select.GetSetAndReset - display=none")
{
	HTML_Element* select_elm = find_element("select", 1);
	verify(select_elm);
	verify(select_elm->Type() == HE_SELECT);
	verify(select_elm->ElementHasFormValue());
	verify(select_elm->GetFormValue());

	FormValue* val = select_elm->GetFormValue();
	verify(val);
	verify(val->GetType() == FormValue::VALUE_LIST_SELECTION);
	FormValueList* list_val = FormValueList::GetAs(val);
	verify(!list_val->IsSelected(select_elm, 0));
	verify(list_val->IsSelected(select_elm, 1));
	list_val->SelectValue(select_elm, 0, TRUE);
	verify(list_val->IsSelected(select_elm, 0));
	verify(!list_val->IsSelected(select_elm, 1));
	list_val->ResetToDefault(select_elm);
	verify(!list_val->IsSelected(select_elm, 0));
	verify(list_val->IsSelected(select_elm, 1));
}

html
{
	//! <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
	//! <html><body>
	//! 	<form action="" name="form1">
	//! 		<select>
	//! 		</select>
	//! 	</form>
	//! </body></html>
}

test("FormValue.Select.InsertingIntoEmpty (bug 177359#2)")
	language ecmascript;
{
	var sel = document.forms[0].elements[0];
	verify(sel);
	var s = 'This is filler text';
	verify(sel.options.length == 0);
	sel.options.length=0;
	verify(sel.options.length == 0);
	verify(sel.selectedIndex == -1);
	sel.options[0] = new Option(s,s); // This should set this as
									  // selected automatically
	verify(sel.selectedIndex == 0);
	sel.options[1] = new Option(s,s)
	verify(sel.selectedIndex == 0);
}

html
{
	//! <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
	//! <html>
	//! <head>
	//!   <title>Multiple selected items in OPTION elements</title>
	//! </head>
	//! <body>
	//!   <p>
	//!     <select>
	//!       <option selected>FAIL</option>
	//!       <option selected>PASS</option>
	//!     </select>
	//!   </p>
	//! </body>
	//! </html>
}

test("FormValue.Select.InitialMultipleSelected (bug 188423)")
{
	HTML_Element* select_elm = find_element("select", 1);
	verify(select_elm);
	verify(select_elm->Type() == HE_SELECT);
	verify(select_elm->ElementHasFormValue());
	verify(select_elm->GetFormValue());

	FormValue* val = select_elm->GetFormValue();
	verify(val);
	verify(val->GetType() == FormValue::VALUE_LIST_SELECTION);
	FormValueList* list_val = FormValueList::GetAs(val);
	verify(!list_val->IsSelected(select_elm, 0));
	verify(list_val->IsSelected(select_elm, 1));
}

html
{
	//! <!DOCTYPE html>
	//! <title>value DOM attribute and select control (part two)</title>
	//! <p>Nothing should be submitted and you should see no FAIL below:
	//! <form method="get">
	//!  <p><select name="test"><option selected="selected">FAIL</select>
	//!  <p><button type="submit">Submit</button>
	//! </form>
	//! <script>
	//! var sel = document.getElementsByTagName('select')[0];
	//! sel.value = "PASS";
	//! </script>
}

test("FormValue.Select.KeepingUnselected (bug 191945)")
	disabled; // Unable to recreate the widget with content after the Reflow without getting a true paint event with Painter
{
	HTML_Element* select_elm = find_element("select", 1);
	verify(select_elm);
	verify(select_elm->Type() == HE_SELECT);
	verify(select_elm->ElementHasFormValue());
	verify(select_elm->GetFormValue());

	select_elm->DisableContent(state.doc);
	select_elm->RemoveLayoutBox(state.doc);
	select_elm->DestroyFormObjectBackup();
	// This should leave the slate clean
	verify(!select_elm->GetFormObject());
	select_elm->EnableContent(state.doc);
	state.doc->Reflow(TRUE, TRUE);
	VisualDevice* vis_dev = state.doc->GetVisualDevice();
	verify(vis_dev);
	RECT rect = { 0, 0, 200, 200 }; // Should include the select box
	state.doc->Display(rect, vis_dev); // Crashes or atleast fails

	FormObject* form_obj = select_elm->GetFormObject();
	verify(form_obj);
	SelectionObject* sel = static_cast<SelectionObject*>(form_obj);
	verify(!sel->IsSelected(0));
}

html
{
	//! <!DOCTYPE html>
	//! <html>
	//! <head>
	//! <title>select::before</title>
	//! <style type="text/css">
	//! @import 'nonexistent.css';
	//! select::before {
	//! 	content: "";
	//! }
	//! </style>
	//! </head>
	//! <body>
	//! <div>
	//! 	<select>
	//! 		<option>pass if no crash</option>
	//! 	</select>
	//! </div>
	//! </body>
	//! </html>
}

test("Bug 250309 - don't crash for generated content in selects")
{
	verify(TRUE); // if we get here
}

html
{
	//! <html><body>
	//! <select size="2">
	//! <option selected>&nbsp;</option>
	//! <option selected>&nbsp;</option>
	//! </select>
	//! </body></html>
}

test("Bug 348644 - multiple select in a non multiple listbox")
language ecmascript;
{
	var sel = document.getElementsByTagName('select')[0];
	verify(sel);
	verify(sel.selectedIndex == 1);
	verify(sel[0].selected == false);
	verify(sel[1].selected == true);
}


html
{
	//! <!DOCTYPE html>
	//! <title>first non disabled option should be initially selected (part three)</title>
	//! <link rel="help" href="http://whatwg.org/specs/web-forms/current-work/#changes">
	//! <p>Nothing should be selected in the widget below:
	//! <p><select><option disabled>FAIL<option disabled>FAIL<option disabled>FAIL</select></p>
	//! </html>
}

test("FormValue.Select.AllDisabled")
{
	HTML_Element* select_elm = find_element("select");
	verify(select_elm);
	verify(select_elm->Type() == HE_SELECT);
	verify(select_elm->ElementHasFormValue());
	verify(select_elm->GetFormValue());
	FormValueList* list_val = FormValueList::GetAs(select_elm->GetFormValue());
	unsigned selected_index;
	OP_STATUS status = list_val->GetIndexOfFirstSelected(select_elm, selected_index);
	verify(status == OpStatus::ERR);
}

html
{
	//! <html><body>
	//! <select>
	//! <option>&nbsp;</option>
	//! <option selected>&nbsp;</option>
	//! </select>
	//! </body></html>
}

test("selectedIndex/selected after adding/removing a selected option to/from the single selection <select>")
language ecmascript;
{
	var sel = document.getElementsByTagName('select')[0];
	verify(sel);
	verify(sel.selectedIndex == 1);
	verify(sel[0].selected == false);
	verify(sel[1].selected == true);
	sel.selectedIndex = 0;
	verify(sel.selectedIndex == 0);
	verify(sel[0].selected == true);
	verify(sel[1].selected == false);
	sel[2] = new Option('Added by script', 'Added by script', false, true);
	verify(sel[2]);
	verify(sel.selectedIndex == 2);
	verify(sel[0].selected == false);
	verify(sel[1].selected == false);
	verify(sel[2].selected == true);
	sel[3] = new Option('Added by script', 'Added by script', true, false);
	verify(sel[3]);
	verify(sel.selectedIndex == 2);
	verify(sel[0].selected == false);
	verify(sel[1].selected == false);
	verify(sel[2].selected == true);
	verify(sel[3].selected == false);
	sel[4] = new Option('Added by script', 'Added by script', true, true);
	verify(sel[4]);
	verify(sel.selectedIndex == 4);
	verify(sel[0].selected == false);
	verify(sel[1].selected == false);
	verify(sel[2].selected == false);
	verify(sel[3].selected == false);
	verify(sel[4].selected == true);
	sel[2] = null;
	verify(sel.selectedIndex == 3);
	verify(sel[0].selected == false);
	verify(sel[1].selected == false);
	verify(sel[2].selected == false);
	verify(sel[3].selected == true);
	sel[1] = null;
	verify(sel.selectedIndex == 2);
	verify(sel[0].selected == false);
	verify(sel[1].selected == false);
	verify(sel[2].selected == true);
	sel[3] = new Option('Added by script', 'Added by script', false, false);
	verify(sel[3]);
	verify(sel.selectedIndex == 2);
	verify(sel[0].selected == false);
	verify(sel[1].selected == false);
	verify(sel[2].selected == true);
	verify(sel[3].selected == false);
	sel[2] = null;
	verify(sel.selectedIndex == 0);
	verify(sel[0].selected == true);
	verify(sel[1].selected == false);
	verify(sel[2].selected == false);
}

html
{
	//! <html><body>
	//! <select><option>A<option>B</select>
	//! <select><option>C<option>D</select>
	//! <script>document.getElementsByTagName("select")[0].insertBefore(document.getElementsByTagName("select")[1], document.getElementsByTagName("option")[0])</script>
	//! </body></html>
}
test("Selects inside selects")
{
	HTML_Element* sel1 = find_element("select", 1);
	verify(sel1);
	HTML_Element* sel2 = find_element("select", 2);
	verify(sel2);
	verify(sel2->Parent() == sel1);
	verify(sel2->Pred() == NULL);

	FormValueList* list_val = FormValueList::GetAs(sel1->GetFormValue());
	verify(list_val->GetOptionCount(sel1) == 2);
}
