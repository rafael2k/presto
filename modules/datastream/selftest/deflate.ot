group "datastream deflate";
require DATASTREAM_BYTEARRAY_ENABLED;
require DATASTREAM_DECOMPRESSION_ENABLED;

include "modules/datastream/fl_lib.h";
include "modules/datastream/fl_zip.h";

// Imported from zlib.ot
table compress_data(int, const char*, int, const char*) {
    /* compressed size, compressed data, uncompressed size, uncompressed data */
    { 8, "x\332\3\0\0\0\0\1", 0, "" }
    { 11, "x\332K\313\317\7\0\2\202\1E", 3, "foo" }
    { 14, "x\332K\313\317OJ,\2\0\b\253\2z", 6, "foobar" }
    { 14, "x\332K\313\317WHC\140\0+k\5q", 15, "foo foo foo foo" }
    { 23, "x\332K\313\317Wpr\14Rp\363\367WHJ,\2\0$\251\4\223", 15, "foo BAR FOO bar" }
    { 14, "x\332;\274\364\360\222\303\333\0\17\5\4I", 6, "\303\245\303\244\303\266" }
    { 11, "x\332c\140\300\17\0\0 \0\1", 32, "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0" }
};


test("Decompress")
{
    iterate(compressed_size,compressed,uncompressed_size,uncompressed) from compress_data
	{
		do{
			DataStream_ByteArray input, output, output_expected;
			TRAPD(op_err, input.AddContentL((const byte *)compressed, compressed_size));
			verify(OpStatus::IsSuccess(op_err));
			
			TRAP(op_err, output_expected.AddContentL((const byte *)uncompressed, uncompressed_size));
			verify(OpStatus::IsSuccess(op_err));
			
			DataStream_Compression decompressor(DataStream_Deflate, FALSE, &input, FALSE);
			TRAP(op_err, decompressor.InitL());
			verify(OpStatus::IsSuccess(op_err));

			TRAP(op_err, output.AddContentL(&decompressor));
			verify(OpStatus::IsSuccess(op_err));

			verify(output == output_expected);
						
		}while(0);
	}
}

test("Compress and Decompress")
{
    iterate(compressed_size,compressed,uncompressed_size,uncompressed) from compress_data
	{
		do{
			DataStream_ByteArray input, output1, output2, output_expected;
			
			TRAPD(op_err, input.AddContentL((const byte *)uncompressed, uncompressed_size));
			verify(OpStatus::IsSuccess(op_err));
			
			TRAP(op_err, output_expected.AddContentL((const byte *)uncompressed, uncompressed_size));
			verify(OpStatus::IsSuccess(op_err));
			
			DataStream_Compression compressor(DataStream_Deflate, TRUE, &output1, FALSE);
			TRAP(op_err, compressor.InitL());
			verify(OpStatus::IsSuccess(op_err));

			TRAP(op_err, compressor.AddContentL(&input));
			verify(OpStatus::IsSuccess(op_err));
			
			TRAP(op_err, compressor.FlushL());
			verify(OpStatus::IsSuccess(op_err));

			output1.ResetRead();
			
			DataStream_Compression decompressor(DataStream_Deflate, FALSE, &output1, FALSE);
			TRAP(op_err, decompressor.InitL());
			verify(OpStatus::IsSuccess(op_err));

			TRAP(op_err, output2.AddContentL(&decompressor));
			verify(OpStatus::IsSuccess(op_err));

			verify(output2 == output_expected);
						
		}while(0);
	}
}
