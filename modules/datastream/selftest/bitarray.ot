group "datastream.bitarray";
require DATASTREAM_BITARRAY;

include "modules/datastream/fl_lib.h";
include "modules/datastream/fl_bitarray.h";

global {
	int test_result(byte* correct, uint32 array_len, DataStream_BitArray& bit_array)
	{
		uint32 buffer_len = (array_len <128 ? 128+16 : array_len+16);
		byte *result = OP_NEWA(unsigned char, buffer_len);
		bit_array.PadAndFlushL();

		unsigned long read_len = bit_array.ReadDataL(result, buffer_len);
		if (read_len != array_len)
		{
			OP_DELETEA(result);
			return FALSE;
		}

		for (unsigned i = 0; i < array_len; i++)
		{
			if (correct[i] != result[i])
			{
				OP_DELETEA(result);
				return FALSE;
			}
		}
		
		OP_DELETEA(result);

		return TRUE;
	}
}

test("bitarray")
{
	DataStream_BitArray test_array;

	byte correct_01_result[] = { 0, 0, 0, 0, 1, 0xff, 0xff, 0xff, 0xfe };

	test_array.Add0sL(1);
	test_array.Add0sL(9);
	test_array.Add0sL(29);

	test_array.Add1sL(3);
	test_array.Add1sL(22);
	test_array.Add1sL(7);

	verify(test_result(correct_01_result, ARRAY_SIZE(correct_01_result), test_array));


	byte correct_add_result[] = { 0xC1, 0x9F, 0x86, 0x06, 0xCF, 0xEB, 0xEE, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0 };

	test_array.AddBitsL(0x1, 1);
	test_array.AddBitsL(0x20, 6);
	test_array.AddBitsL(51, 6);
	test_array.AddBitsL(0x1e1, 9);
	test_array.AddBitsL(0x103, 9);
	test_array.AddBitsL(0x0cfebeef, 29);
	test_array.AddBitsL(UINT_MAX, 32);

	verify(test_result(correct_add_result, ARRAY_SIZE(correct_add_result), test_array));
}
