/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2003-2007 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Karlsson
*/

group "prefs.prefsmanager";
require init;

include "modules/prefs/prefsmanager/prefsmanager.h";
include "modules/prefs/prefsmanager/collections/pc_app.h";
include "modules/prefs/prefsmanager/collections/pc_core.h";
include "modules/prefs/prefsmanager/collections/pc_display.h";
include "modules/prefs/prefsmanager/collections/pc_doc.h";
include "modules/prefs/prefsmanager/collections/pc_files.h";
include "modules/prefs/prefsmanager/collections/pc_fontcolor.h";
include "modules/prefs/prefsmanager/collections/pc_geoloc.h";
include "modules/prefs/prefsmanager/collections/pc_js.h";
include "modules/prefs/prefsmanager/collections/pc_m2.h";
include "modules/prefs/prefsmanager/collections/pc_macos.h";
include "modules/prefs/prefsmanager/collections/pc_mswin.h";
include "modules/prefs/prefsmanager/collections/pc_network.h";
include "modules/prefs/prefsmanager/collections/pc_print.h";
include "modules/prefs/prefsmanager/collections/pc_tools.h";
include "modules/prefs/prefsmanager/collections/pc_ui.h";
include "modules/prefs/prefsmanager/collections/pc_unix.h";
include "modules/prefs/prefsmanager/collections/pc_webserver.h";
include if(defined PREFS_HAVE_COREGOGI) "platforms/core/prefscollectioncoregogi.h";

include "modules/display/styl_man.h";

// -- Global variables ---------------------------------------------------

global
{
	OpString original_scale, original_color, original_file, original_serif;
}

// -- Tests --------------------------------------------------------------

test("Testing that g_prefsManager exists")
{
	verify(g_prefsManager != NULL);
}

test("Testing that the OpPrefsCollection objects exist")
{
	verify(g_pcapp != NULL);
	verify(g_pccore != NULL);
	verify(g_pcdisplay != NULL);
	verify(g_pcdoc != NULL);
	verify(g_pcfiles != NULL);
	verify(g_pcfontscolors != NULL);
#if defined GEOLOCATION_SUPPORT
	verify(g_pcgeolocation != NULL);
#endif
	verify(g_pcjs != NULL);
#ifdef M2_SUPPORT
	verify(g_pcm2 != NULL);
#endif
#ifdef PREFS_HAVE_MAC
	verify(g_pcmacos != NULL);
#endif
#ifdef PREFS_HAVE_MSWIN
	verify(g_pcmswin != NULL);
#endif
	verify(g_pcnet != NULL);
#ifdef _PRINT_SUPPORT_
	verify(g_pcprint != NULL);
#endif
#if defined SCOPE_SUPPORT || defined SUPPORT_DEBUGGING_SHELL
	verify(g_pctools != NULL);
#endif
#ifdef PREFS_HAVE_DESKTOP_UI
	verify(g_pcui != NULL);
#endif
#ifdef PREFS_HAVE_UNIX
	verify(g_pcunix != NULL);
#endif
#ifdef WEBSERVER_SUPPORT
	verify(g_pcwebserver != NULL);
#endif
#ifdef NAT_TRAVERSAL_SUPPORT
	verify(g_pcnat_traversal != NULL);
#endif
}

test("Testing PrefsManager::GetPreferenceL (integer)")
	require PREFS_HAVE_STRING_API;
{
	verify(g_prefsManager->GetPreferenceL("User Prefs", "Scale", original_scale));
}

test("Testing PrefsManager::WritePreferenceL (integer)")
	require PREFS_HAVE_STRING_API;
	require PREFS_WRITE;
{
	// Change the value to something else
	const uni_char *new_value;
	if (original_scale.Compare(UNI_L("100")) == 0)
		new_value = UNI_L("200");
	else
		new_value = UNI_L("100");

	verify(g_prefsManager->WritePreferenceL("User Prefs", "Scale", new_value));

	OpString s;
	verify(g_prefsManager->GetPreferenceL("User Prefs", "Scale", s));
	verify(s.Compare(new_value) == 0);
	verify(g_pcdisplay->GetIntegerPref(PrefsCollectionDisplay::Scale) == uni_atoi(new_value));
}
finally
{
	// Restore original value
	g_prefsManager->WritePreferenceL("User Prefs", "Scale", original_scale);
}

test("Testing PrefsManager::GetPreferenceL (string)")
	require PREFS_HAVE_STRING_API;
{
	verify(g_prefsManager->GetPreferenceL("CSS Generic Font Family", "Serif", original_serif));
}

test("Testing PrefsManager::WritePreferenceL (string)")
	require PREFS_HAVE_STRING_API;
	require PREFS_WRITE;
{
	// Change the value to something else
	const uni_char *new_value = styleManager->GetFontFace(0);
	if (original_serif.Compare(new_value) == 0)
	{
		for (int i = 1;
		     original_serif.Compare(new_value) == 0 && styleManager->HasFont(i);
		     ++ i)
		{
			new_value = styleManager->GetFontFace(i);
		}
	}

	verify(g_prefsManager->WritePreferenceL("CSS Generic Font Family", "Serif", new_value));

	OpString s;
	verify(g_prefsManager->GetPreferenceL("CSS Generic Font Family", "Serif", s));
	verify(s.Compare(new_value) == 0);
	verify(g_pcdisplay->GetStringPref(PrefsCollectionDisplay::CSSFamilySerif).Compare(new_value) == 0);
}
finally
{
	// Restore original value
	g_prefsManager->WritePreferenceL("CSS Generic Font Family", "Serif", original_serif);
}

test("Testing PrefsManager::GetPreferenceL (colour)")
	require PREFS_HAVE_STRING_API;
{
	verify(g_prefsManager->GetPreferenceL("Colors", "Background", original_color));
}

test("Testing PrefsManager::WritePreferenceL (colour)")
	require PREFS_HAVE_STRING_API;
	require PREFS_WRITE;
{
	// Change the value to something else
	const uni_char *new_value;
	COLORREF new_value_rgb;
	if (original_color.Compare(UNI_L("#ffffff")) == 0)
	{
		new_value = UNI_L("#808080");
		new_value_rgb = OP_RGB(0x80, 0x80, 0x80);
	}
	else
	{
		new_value = UNI_L("#ffffff");
		new_value_rgb = OP_RGB(0xFF, 0xFF, 0xFF);
	}

	verify(g_prefsManager->WritePreferenceL("Colors", "Background", new_value));

	OpString s;
	verify(g_prefsManager->GetPreferenceL("Colors", "Background", s));
	verify(s.Compare(new_value) == 0);
	verify(g_pcfontscolors->GetColor(OP_SYSTEM_COLOR_DOCUMENT_BACKGROUND) == new_value_rgb);
}
finally
{
	// Restore original value
	g_prefsManager->WritePreferenceL("Colors", "Background", original_color);
}

test("Testing PrefsManager::GetPreferenceL (file)")
	require PREFS_HAVE_STRING_API;
{
	verify(g_prefsManager->GetPreferenceL("User Prefs", "Browser CSS File", original_file));
}

test("Testing PrefsManager::WritePreferenceL (file)")
	require PREFS_HAVE_STRING_API;
	require PREFS_WRITE;
{
	// Change the value to something else
	const uni_char *new_value;
#ifdef SYS_CAP_FILESYSTEM_HAS_DRIVES
	if (original_file.Compare(UNI_L("c:\\a.css")) == 0)
		new_value = UNI_L("c:\\b.css");
	else
		new_value = UNI_L("c:\\a.css");
#else
	if (original_file.Compare(UNI_L("/a.css")) == 0)
		new_value = UNI_L("/b.css");
	else
		new_value = UNI_L("/a.css");
#endif

	verify(g_prefsManager->WritePreferenceL("User Prefs", "Browser CSS File", new_value));

	OpString s;
	verify(g_prefsManager->GetPreferenceL("User Prefs", "Browser CSS File", s));
	verify(s.Compare(new_value) == 0);

	OpFile f;
	g_pcfiles->GetFileL(PrefsCollectionFiles::BrowserCSSFile, f);
	verify(uni_str_eq(f.GetFullPath(), s.CStr()));

	const OpFile *f2;
	f2 = g_pcfiles->GetFile(PrefsCollectionFiles::BrowserCSSFile);
	verify(f2);
	verify(uni_str_eq(f2->GetFullPath(), s.CStr()));
}
finally
{
	// Restore original value
	g_prefsManager->WritePreferenceL("User Prefs", "Browser CSS File", original_file);
}

test("Testing PrefsManager::GetPreferenceL (error handling)")
	require PREFS_HAVE_STRING_API;
{
	OpString s;
	TRAPD(rc, g_prefsManager->GetPreferenceL(NULL, NULL, s, FALSE));
	verify(OpStatus::IsError(rc));
	TRAP (rc, g_prefsManager->GetPreferenceL("User Prefs", NULL, s, FALSE));
	verify(OpStatus::IsError(rc));
	TRAP (rc, g_prefsManager->GetPreferenceL(NULL, "Scale", s, FALSE));
	verify(OpStatus::IsError(rc));

	BOOL found = TRUE;
	TRAP (rc, found = g_prefsManager->GetPreferenceL("Foo", "Bar", s, FALSE));
	verify(OpStatus::IsError(rc) || !found);
}

test("Testing PrefsManager::WritePreferenceL (error handling)")
	require PREFS_HAVE_STRING_API;
	require PREFS_WRITE;
{
	TRAPD(rc, g_prefsManager->WritePreferenceL(NULL, NULL, NULL));
	verify(OpStatus::IsError(rc));
	TRAP (rc, g_prefsManager->WritePreferenceL("User Prefs", NULL, NULL));
	verify(OpStatus::IsError(rc));
	TRAP (rc, g_prefsManager->WritePreferenceL(NULL, "Scale", NULL));
	verify(OpStatus::IsError(rc));

	BOOL found = TRUE;
	TRAP (rc, found = g_prefsManager->WritePreferenceL("Foo", "Bar", UNI_L("Baz")));
	verify(OpStatus::IsError(rc) || !found);
}

test("Testing PrefsManager::GetPreferenceL (case insensitive)")
	require PREFS_HAVE_STRING_API;
	require undefined PREFS_STRING_API_CASE_SENSITIVE;
{
	verify(g_prefsManager->GetPreferenceL("USER PREFS", "scale", original_scale));
}

test("Testing PrefsManager::WritePreferenceL (case insensitive)")
	require PREFS_HAVE_STRING_API;
	require PREFS_WRITE;
	require undefined PREFS_STRING_API_CASE_SENSITIVE;
{
	// Change the value to something else
	const uni_char *new_value;
	if (original_scale.Compare(UNI_L("100")) == 0)
		new_value = UNI_L("200");
	else
		new_value = UNI_L("100");

	verify(g_prefsManager->WritePreferenceL("USER PREFS", "scale", new_value));

	OpString s;
	verify(g_prefsManager->GetPreferenceL("user prefs", "SCALE", s));
	verify(s.Compare(new_value) == 0);
	verify(g_pcdisplay->GetIntegerPref(PrefsCollectionDisplay::Scale) == uni_atoi(new_value));
}
finally
{
	// Restore original value
	g_prefsManager->WritePreferenceL("USER PREFS", "SCALE", original_scale);
}

test("Testing PrefsManager::GetPreferencesL")
	require PREFS_ENUMERATE;
{
	unsigned int length1, length2;

	// Unsorted and sorted list should have same length
	prefssetting *unsorted = g_prefsManager->GetPreferencesL(FALSE, length1);
	verify(unsorted);
	verify(length1);
	OP_DELETEA(unsorted);

	prefssetting *sorted = g_prefsManager->GetPreferencesL(TRUE, length2);
	verify(sorted);
	verify(length1 == length2);
	OP_DELETEA(sorted);
}
