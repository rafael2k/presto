/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2004-2012 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

group "prefs.prefsmanager.collections.pcdisplay";

include "modules/prefs/prefsmanager/collections/pc_display.h";

// -- Global variables ---------------------------------------------------

global
{
	bool intprefs[PCDISPLAY_NUMBEROFINTEGERPREFS];
}

setup
{
	op_memset(intprefs, 0, sizeof intprefs);
}

// -- Tests --------------------------------------------------------------

test("Checking GetPrefFor integrity (css modes)")
{
	for (int i = int(PrefsCollectionDisplay::EnableAuthorCSS);
	     i <= int(PrefsCollectionDisplay::EnableUserLinkSettings); i ++)
	{
		PrefsCollectionDisplay::integerpref off =
			PrefsCollectionDisplay::GetPrefFor(CSS_NONE, PrefsCollectionDisplay::csssetting(i));
		verify(int(off) >= 0 && int(off) <= PCDISPLAY_NUMBEROFINTEGERPREFS);
		verify(!intprefs[off]);
		intprefs[off] = true;

		PrefsCollectionDisplay::integerpref on =
			PrefsCollectionDisplay::GetPrefFor(CSS_FULL, PrefsCollectionDisplay::csssetting(i));
		verify(int(on) >= 0 && int(on) <= PCDISPLAY_NUMBEROFINTEGERPREFS);
		verify(!intprefs[on]);
		intprefs[on] = true;
	}
}

test("Checking GetPrefFor integrity (ERA)")
{
	for (int i = int(PrefsCollectionDisplay::SSR);
#ifdef TV_RENDERING
	     i <= int(PrefsCollectionDisplay::TVR);
#else
	     i <= int(PrefsCollectionDisplay::MSR);
#endif
		 i ++)
	{
		for (int j = int(PrefsCollectionDisplay::FlexibleFonts);
		     j <= int(PrefsCollectionDisplay::AbsolutePositioning); j ++)
		{
			PrefsCollectionDisplay::integerpref k =
				PrefsCollectionDisplay::GetPrefFor(PrefsCollectionDisplay::RenderingModes(i), PrefsCollectionDisplay::RenderingModeSettings(j));
			verify(int(k) >= 0 && int(k) <= PCDISPLAY_NUMBEROFINTEGERPREFS);
			verify(!intprefs[k]);
			intprefs[k] = true;
		}
	}
}

test("Checking that font family defaults are retrieved")
	require initialization;
{
	for (int i = int(PrefsCollectionDisplay::CSSFamilySerif);
	     i <= int(PrefsCollectionDisplay::CSSFamilyMonospace); i ++)
	{
		const uni_char *defstr =
			g_pcdisplay->GetDefaultStringPref(PrefsCollectionDisplay::stringpref(i));
		verify(defstr != NULL);
		verify(*defstr != 0);
	}
}

test("Resetting integer preference to default")
	require initialization;
	require PREFS_WRITE;
{
	int default_zoom = g_pcdisplay->GetDefaultIntegerPref(PrefsCollectionDisplay::Scale);
	OP_MEMORY_VAR OP_STATUS rc2 = OpStatus::ERR;
	TRAPD(rc, rc2 = g_pcdisplay->WriteIntegerL(PrefsCollectionDisplay::Scale, 990));
	verify(OpStatus::IsSuccess(rc));
	verify(OpStatus::IsSuccess(rc2));
	verify(g_pcdisplay->GetIntegerPref(PrefsCollectionDisplay::Scale) == 990);

	OP_MEMORY_VAR BOOL success = FALSE;
	TRAP(rc, success = g_pcdisplay->ResetIntegerL(PrefsCollectionDisplay::Scale));
	verify(OpStatus::IsSuccess(rc));
	verify(success);
	verify(g_pcdisplay->GetIntegerPref(PrefsCollectionDisplay::Scale) == default_zoom);
}

test("Resetting string preference to default")
	require initialization;
	require PREFS_WRITE;
{
	const uni_char *default_serif =
		g_pcdisplay->GetDefaultStringPref(PrefsCollectionDisplay::CSSFamilySerif);
	verify(default_serif != NULL);

	// Need a real font name for the setting to "take"
	const uni_char * OP_MEMORY_VAR new_font = default_serif;
	for (int i = 0; new_font; ++ i)
	{
		new_font = styleManager->GetFontFace(i);
		if (new_font && uni_strcmp(new_font, default_serif) != 0)
			break;
	}

	if (!new_font)
	{
		// Didn't find a font, so just overwrite with the same value; this
		// will not catch errors as good :-(
		new_font = default_serif;
	}

	OP_MEMORY_VAR OP_STATUS rc2 = OpStatus::ERR;
	TRAPD(rc, rc2 = g_pcdisplay->WriteStringL(PrefsCollectionDisplay::CSSFamilySerif, new_font));
	verify(OpStatus::IsSuccess(rc));
	verify(OpStatus::IsSuccess(rc2));
	verify(g_pcdisplay->GetStringPref(PrefsCollectionDisplay::CSSFamilySerif).Compare(new_font) == 0);

	OP_MEMORY_VAR BOOL success = FALSE;
	TRAP(rc, success = g_pcdisplay->ResetStringL(PrefsCollectionDisplay::CSSFamilySerif));
	verify(OpStatus::IsSuccess(rc));
	verify(success);
	verify(g_pcdisplay->GetStringPref(PrefsCollectionDisplay::CSSFamilySerif).Compare(default_serif) == 0);
}

test("Single-byte representation of forced encoding")
	require PREFS_WRITE;
{
	OpString old_forced_encoding;
	TRAPD(rc, g_pcdisplay->GetStringPref(PrefsCollectionDisplay::ForceEncoding, old_forced_encoding));
	verify_success(rc);

	TRAP(rc, g_pcdisplay->WriteStringL(PrefsCollectionDisplay::ForceEncoding, UNI_L("iso-2022-jp-1")));
	verify_success(rc);
	verify_string(g_pcdisplay->GetForceEncoding(), "iso-2022-jp-1");
}
finally
{
	TRAP(rc, g_pcdisplay->WriteStringL(PrefsCollectionDisplay::ForceEncoding, old_forced_encoding));
	OpStatus::Ignore(rc);
}

test("Single-byte representation of fallback encoding")
	require PREFS_WRITE;
{
	OpString old_default_encoding;
	TRAPD(rc, g_pcdisplay->GetStringPref(PrefsCollectionDisplay::DefaultEncoding, old_default_encoding));
	verify_success(rc);

	TRAP(rc, g_pcdisplay->WriteStringL(PrefsCollectionDisplay::DefaultEncoding, UNI_L("iso-2022-jp-1")));
	verify_success(rc);
	verify_string(g_pcdisplay->GetDefaultEncoding(), "iso-2022-jp-1");
}
finally
{
	TRAP(rc, g_pcdisplay->WriteStringL(PrefsCollectionDisplay::DefaultEncoding, old_default_encoding));
	OpStatus::Ignore(rc);
}
