/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

group "prefs.prefsmanager.collections.pcfontcolor";

include "modules/prefs/prefsmanager/collections/pc_fontcolor.h";
include "modules/prefs/prefsmanager/prefsmanager.h";

require PREFS_WRITE;

// -- Tests --------------------------------------------------------------

test("Make sure system and custom colors are not mixed up")
{
	COLORREF orig_cus = 0;
	if (PCFONTCOLORS_NUMBEROFCUSTOMCOLORPREFS > 0)
	{
		// This test assumes OP_SYSTEM_COLOR_DOCUMENT_NORMAL is the first
		// color defined in the system color list
		COLORREF orig_sys = g_pcfontscolors->GetColor(OP_SYSTEM_COLOR_DOCUMENT_NORMAL);
		orig_cus = g_pcfontscolors->GetColor(static_cast<PrefsCollectionFontsAndColors::customcolorpref>(0));

		if (orig_sys == orig_cus)
		{
			// They may very well be the same, so rewrite one and make
			// sure the other one stays the same
			TRAPD(rc, g_pcfontscolors->WriteColorL(static_cast<PrefsCollectionFontsAndColors::customcolorpref>(0), orig_cus + 1));
			verify_success(rc);
			COLORREF new_cus = g_pcfontscolors->GetColor(static_cast<PrefsCollectionFontsAndColors::customcolorpref>(0));
			verify(new_cus != orig_cus);
			COLORREF new_sys = g_pcfontscolors->GetColor(OP_SYSTEM_COLOR_DOCUMENT_NORMAL);
			verify(new_sys == orig_sys);
		}
		else
		{
			verify(orig_sys != orig_cus);
		}
	}
	else
	{
		output("(untestable) ");
	}
}
finally
{
		TRAPD(rc, g_pcfontscolors->WriteColorL(static_cast<PrefsCollectionFontsAndColors::customcolorpref>(0), orig_cus));
}

test("Overriding system font(OP_SYSTEM_COLOR which, URL &host)")
{
	const uni_char* host;
	URL base_url;
	
	base_url=g_url_api->GetURL("http://www.example.com");
	host=base_url.GetAttribute(URL::KUniHostName).CStr();
	
	FontAtt overrided_fontatt;
	FontAtt fontatt;
	FontAtt old_fontatt;
	FontAtt old_fontatt1;
	
	overrided_fontatt.SetHeight(50);
	overrided_fontatt.SetFontNumber(styleManager->GetFontNumber(UNI_L("serif")));

	g_pcfontscolors->GetFont(OP_SYSTEM_FONT_DOCUMENT_NORMAL,old_fontatt);

	// Write an override for the host
	verify_trap(g_pcfontscolors->OverridePrefL(host, OP_SYSTEM_FONT_DOCUMENT_NORMAL, overrided_fontatt, TRUE));
	verify(g_pcfontscolors->IsPreferenceOverridden(OP_SYSTEM_FONT_DOCUMENT_NORMAL, base_url)); 

	// Read it back
	g_pcfontscolors->GetFont(OP_SYSTEM_FONT_DOCUMENT_NORMAL, fontatt, host);
	verify(overrided_fontatt == fontatt);

	// Make sure the normal value did not change
	g_pcfontscolors->GetFont(OP_SYSTEM_FONT_DOCUMENT_NORMAL,old_fontatt1);
	verify(old_fontatt == old_fontatt1);

	// Check IsHostOverridden
	verify(g_pcfontscolors->IsHostOverridden(host, TRUE) == HostOverrideActive);
	verify(g_prefsManager->IsHostOverridden(host, TRUE) == HostOverrideActive);
}
finally
{
	g_prefsManager->RemoveOverridesL(host, TRUE);
}

test("Reset custom color")
require PREFS_WRITE;
require PREFS_READ;
{
     if (PCFONTCOLORS_NUMBEROFCUSTOMCOLORPREFS > 0)
		{
        // Get the standard value
        COLORREF default_val =
            g_pcfontscolors->GetColor(static_cast<PrefsCollectionFontsAndColors::customcolorpref>(0));
        COLORREF new_val = OP_RGB(123,198,153);
            
        // Write a new color
        TRAPD(rc, g_pcfontscolors->WriteColorL(static_cast<PrefsCollectionFontsAndColors::customcolorpref>(0), new_val));
        verify_success(rc);

        // Read it back
        COLORREF written_val =
            g_pcfontscolors->GetColor(static_cast<PrefsCollectionFontsAndColors::customcolorpref>(0));
        verify(written_val == new_val);

        // Reset the color
        TRAPD(rc1, g_pcfontscolors->ResetColorL(static_cast<PrefsCollectionFontsAndColors::customcolorpref>(0)));
        verify_success(rc1);
        
        //Read the value after the reset and verify that it is the default one
        COLORREF written_val_after_reset =
            g_pcfontscolors->GetColor(static_cast<PrefsCollectionFontsAndColors::customcolorpref>(0));
        
        verify(written_val_after_reset == default_val);
    }
    else
	{
		output("(untestable) ");
	}   
}

test("Reset system font")
{

	FontAtt new_fontatt;
	FontAtt written_fontatt;
	FontAtt def_fontatt;
	FontAtt written_fontatt_after_reset;
	
	new_fontatt.SetHeight(50);
	new_fontatt.SetFontNumber(styleManager->GetFontNumber(UNI_L("serif")));

	g_pcfontscolors->GetFont(OP_SYSTEM_FONT_DOCUMENT_NORMAL,def_fontatt);

	// Write a new font
	verify_trap(g_pcfontscolors->WriteFontL(OP_SYSTEM_FONT_DOCUMENT_NORMAL, new_fontatt));
	
	// Read it back
	g_pcfontscolors->GetFont(OP_SYSTEM_FONT_DOCUMENT_NORMAL, written_fontatt);
	verify(new_fontatt == written_fontatt);

	//Reset the font
	TRAPD(rc, g_pcfontscolors->ResetFontL(OP_SYSTEM_FONT_DOCUMENT_NORMAL));
	verify_success(rc);

	// Read the value after the reset and verify that it is the default one
	g_pcfontscolors->GetFont(OP_SYSTEM_FONT_DOCUMENT_NORMAL,written_fontatt_after_reset);
	verify(written_fontatt_after_reset == def_fontatt);

}