/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; -*-
**
** Copyright (C) 2008-2009 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Frode Gill
*/

group "inputmanager.context";
require initialization;

include "modules/inputmanager/inputcontext.h";
include "modules/inputmanager/inputmanager.h";

global
{
	OpInputManager* g_test_input_manager;
}

setup
{
	g_test_input_manager = OP_NEW(OpInputManager, ());
}

exit
{
	OP_DELETE(g_test_input_manager);
}

test("Testing OpInputContext")
{
	OpInputContext test_context1;
	OpInputContext test_context2;
	test_context2.SetParentInputContext(&test_context1);
	verify(test_context2.GetParentInputContext() == &test_context1);
	verify(test_context2.IsParentInputContextOf(&test_context1)==FALSE);
	verify(test_context1.IsParentInputContextOf(&test_context2)==TRUE);
	verify(test_context1.IsParentInputContextOf(&test_context1)==FALSE);
	verify(test_context2.IsChildInputContextOf(&test_context1)==TRUE);
	verify(test_context1.IsChildInputContextOf(&test_context2)==FALSE);
	verify(test_context1.IsChildInputContextOf(&test_context1)==FALSE);
}

test("Testing OpInputManager construct")
{
	verify(g_test_input_manager != NULL);
}

test("Testing local keyboard context")
require success "Testing OpInputManager construct";
{
	verify(g_test_input_manager->GetKeyboardInputContext() == NULL);

	OpInputContext test_context1;
	OpInputContext test_context2;

	g_test_input_manager->SetKeyboardInputContext(&test_context2, FOCUS_REASON_KEYBOARD);
	verify(g_test_input_manager->GetKeyboardInputContext() == &test_context2);
	g_test_input_manager->SetKeyboardInputContext(&test_context1, FOCUS_REASON_KEYBOARD);
	verify(g_test_input_manager->GetKeyboardInputContext() == &test_context1);
	g_test_input_manager->LockKeyboardInputContext(TRUE);
	g_test_input_manager->SetKeyboardInputContext(&test_context2, FOCUS_REASON_KEYBOARD);
	verify(g_test_input_manager->GetKeyboardInputContext() != &test_context2);
	g_test_input_manager->LockKeyboardInputContext(FALSE);
	g_test_input_manager->SetKeyboardInputContext(&test_context2, FOCUS_REASON_KEYBOARD);
	verify(g_test_input_manager->GetKeyboardInputContext() == &test_context2);
}

test("Testing local mouse context")
require success "Testing OpInputManager construct";
require undefined MOUSELESS;
{
	verify(g_test_input_manager->GetMouseInputContext() == NULL);

	OpInputContext test_context1;
	OpInputContext test_context2;

	g_test_input_manager->SetMouseInputContext(&test_context2);
	verify(g_test_input_manager->GetMouseInputContext() == &test_context2);
	g_test_input_manager->SetMouseInputContext(&test_context1);
	verify(g_test_input_manager->GetMouseInputContext() == &test_context1);
	g_test_input_manager->LockMouseInputContext(TRUE);
	g_test_input_manager->SetMouseInputContext(&test_context2);
	verify(g_test_input_manager->GetMouseInputContext() != &test_context2);
	g_test_input_manager->LockMouseInputContext(FALSE);
	g_test_input_manager->SetMouseInputContext(&test_context2);
	verify(g_test_input_manager->GetMouseInputContext() == &test_context2);

	OpKey::Code back_button, forward_button;
	g_test_input_manager->GetFlipButtons(back_button, forward_button);
	verify(back_button==OP_KEY_MOUSE_BUTTON_1 || back_button==OP_KEY_MOUSE_BUTTON_2);
	verify(forward_button==OP_KEY_MOUSE_BUTTON_1 || forward_button==OP_KEY_MOUSE_BUTTON_2);
	verify(forward_button!=back_button);
}

test("Testing global keyboard context")
require undefined MOUSELESS;
require OP_KEY_F11_ENABLED;
{
	verify(g_input_manager != NULL);

	OpInputContext* keyboard_context = g_input_manager->GetKeyboardInputContext();
	OpInputContext* mouse_context = g_input_manager->GetMouseInputContext();

	//Abuse F11 for some testing
	OpString test_string;
	OpInputManager::OpKeyToLanguageString(OP_KEY_F11, test_string);
	verify(test_string.Compare(UNI_L("F11")) == 0);

	ShortcutContextList* shortcut_context_list = g_input_manager->GetShortcutContextListFromActionMethod(OpInputAction::METHOD_KEYBOARD);
	ShortcutContext* shortcut_context = g_input_manager->GetShortcutContextFromActionMethodAndName(OpInputAction::METHOD_KEYBOARD, "Application");

	verify(shortcut_context_list != NULL);
	verify(shortcut_context != NULL);
	verify(shortcut_context == shortcut_context_list->GetShortcutContextFromName("Application"));

	verify(g_input_manager->GetActionMethodFromKey(OP_KEY_F11)==OpInputAction::METHOD_KEYBOARD);
	verify(g_input_manager->GetInputContextFromKey(OP_KEY_F11)==keyboard_context);

	//Switch to fullscreen and back
	g_input_manager->InvokeKeyPressed(OP_KEY_F11, SHIFTKEY_NONE);
	g_input_manager->InvokeKeyPressed(OP_KEY_F11, SHIFTKEY_NONE);

	verify(keyboard_context == g_input_manager->GetKeyboardInputContext());
	verify(mouse_context == g_input_manager->GetMouseInputContext());
}
