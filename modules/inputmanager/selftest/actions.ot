/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; -*-
**
** Copyright (C) 2008-2012 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Marcus Cromnow
*/

group "inputmanager.OpInfoText";

include "modules/inputmanager/inputaction.h";

test ("Status text")
{
	const uni_char* test_data = UNI_L("testing");
	
	OpInfoText info_text;
	
	verify(!info_text.HasStatusText());
	verify(OpStatus::IsSuccess(info_text.SetStatusText(test_data)));
	
	verify(!info_text.GetStatusText().Compare(test_data));
}

test ("Set Tooltip text")
{
	const uni_char* test_data = UNI_L("testing");
	
	OpInfoText info_text;
	
	verify(!info_text.HasTooltipText());
	verify(OpStatus::IsSuccess(info_text.SetTooltipText(test_data)));
	 	
	verify(!info_text.GetTooltipText().Compare(test_data));
}

test ("Add Tooltip text")
{
	const uni_char* text = UNI_L("testing");
	const uni_char* label = UNI_L("label");
	
	OpInfoText info_text;
	
	verify(!info_text.HasTooltipText());
	verify(OpStatus::IsSuccess(info_text.AddTooltipText(label,text)));	 	
	verify(info_text.GetTooltipText()=="label: testing");
}



group "inputmanager.OpInputAction";

require ACTION_GO_ENABLED;

include "modules/inputmanager/inputaction.h";
include "modules/locale/locale-enum.h";
 

table StringConversions_Data(const uni_char*)
{
	{ UNI_L("Go") },
	{ UNI_L("Go | Go > Go") }
}

test ("String conversion")
{
	iterate (str) from StringConversions_Data
	{
		OpInputAction *action = NULL;

		verify(OpStatus::IsSuccess(OpInputAction::CreateInputActionsFromString(str, action)));
		verify(action);
		OpAutoPtr<OpInputAction> action_anchor(action);

		OpString res;
		verify(OpStatus::IsSuccess(action->ConvertToString(res)));

		verify(!res.CompareI(str));
	}			
}

test ("String conversion with a default value")
{
	const uni_char* string = UNI_L("Go");
	const INTPTR default_value = 123456;
	OpInputAction* action = 0;

	verify(OpStatus::IsSuccess(OpInputAction::CreateInputActionsFromString(string, action, default_value)));
	verify(action);
	OpAutoPtr<OpInputAction> action_anchor(action);

	verify(action->GetActionData() == default_value);
}

test ("String conversion with a default value when action data is 0 (DSK-283428)")
{
	const uni_char* string = UNI_L("Go, 0");
	const INTPTR default_value = 123456;
	OpInputAction* action = 0;

	verify(OpStatus::IsSuccess(OpInputAction::CreateInputActionsFromString(string, action, default_value)));
	verify(action);
	OpAutoPtr<OpInputAction> action_anchor(action);

	verify(action->GetActionData() == 0);
}

test("Testing get string from action")
{
	OpString8 string;
	verify_success(OpInputAction::GetStringFromAction(OpInputAction::ACTION_GO, string));
	verify_string(string, "Go");
	verify_string(OpInputAction::GetStringFromAction(OpInputAction::ACTION_GO), "Go");
}

table test_IsMoveAction(const char* test_name, define, int action, BOOL expected)
{
	{"ACTION_GO", ACTION_GO_ENABLED, OpInputAction::ACTION_GO, FALSE}
	{"ACTION_GO_TO_START", ACTION_GO_TO_START_ENABLED, OpInputAction::ACTION_GO_TO_START, TRUE}
	{"ACTION_GO_TO_END", ACTION_GO_TO_END_ENABLED, OpInputAction::ACTION_GO_TO_END, TRUE}
	{"ACTION_GO_TO_CONTENT_MAGIC", ACTION_GO_TO_CONTENT_MAGIC_ENABLED, OpInputAction::ACTION_GO_TO_CONTENT_MAGIC, TRUE}
	{"ACTION_GO_TO_TOP_CM_BOTTOM", ACTION_GO_TO_TOP_CM_BOTTOM_ENABLED, OpInputAction::ACTION_GO_TO_TOP_CM_BOTTOM, TRUE}
	{"ACTION_GO_TO_LINE_START", ACTION_GO_TO_LINE_START_ENABLED, OpInputAction::ACTION_GO_TO_LINE_START, TRUE}
	{"ACTION_GO_TO_LINE_END", ACTION_GO_TO_LINE_END_ENABLED, OpInputAction::ACTION_GO_TO_LINE_END, TRUE}
	{"ACTION_PAGE_UP", ACTION_PAGE_UP_ENABLED, OpInputAction::ACTION_PAGE_UP, TRUE}
	{"ACTION_PAGE_DOWN", ACTION_PAGE_DOWN_ENABLED, OpInputAction::ACTION_PAGE_DOWN, TRUE}
	{"ACTION_PAGE_LEFT", ACTION_PAGE_LEFT_ENABLED, OpInputAction::ACTION_PAGE_LEFT, TRUE}
	{"ACTION_PAGE_RIGHT", ACTION_PAGE_RIGHT_ENABLED, OpInputAction::ACTION_PAGE_RIGHT, TRUE}
	{"ACTION_NEXT_ITEM", ACTION_NEXT_ITEM_ENABLED, OpInputAction::ACTION_NEXT_ITEM, TRUE}
	{"ACTION_PREVIOUS_ITEM", ACTION_PREVIOUS_ITEM_ENABLED, OpInputAction::ACTION_PREVIOUS_ITEM, TRUE}
	{"ACTION_NEXT_CHARACTER", ACTION_NEXT_CHARACTER_ENABLED, OpInputAction::ACTION_NEXT_CHARACTER, TRUE}
	{"ACTION_PREVIOUS_CHARACTER", ACTION_PREVIOUS_CHARACTER_ENABLED, OpInputAction::ACTION_PREVIOUS_CHARACTER, TRUE}
	{"ACTION_NEXT_WORD", ACTION_NEXT_WORD_ENABLED, OpInputAction::ACTION_NEXT_WORD, TRUE}
	{"ACTION_PREVIOUS_WORD", ACTION_PREVIOUS_WORD_ENABLED, OpInputAction::ACTION_PREVIOUS_WORD, TRUE}
	{"ACTION_NEXT_LINE", ACTION_NEXT_LINE_ENABLED, OpInputAction::ACTION_NEXT_LINE, TRUE}
	{"ACTION_PREVIOUS_LINE", ACTION_PREVIOUS_LINE_ENABLED, OpInputAction::ACTION_PREVIOUS_LINE, TRUE}
}

foreach (test_name, define, action, expected) from test_IsMoveAction
{
	test("Testing IsMoveAction(" test_name ")")
	require define;
	{
 		OpInputAction test_action(action);
 		verify(test_action.IsMoveAction() == expected);	
 	}
}

table test_IsRangeAction(const char* test_name, define, int action, BOOL expected)
{
	{"ACTION_GO", ACTION_GO_ENABLED, OpInputAction::ACTION_GO, FALSE}
	{"ACTION_RANGE_GO_TO_START", ACTION_RANGE_GO_TO_START_ENABLED, OpInputAction::ACTION_RANGE_GO_TO_START, TRUE}
	{"ACTION_RANGE_GO_TO_END", ACTION_RANGE_GO_TO_END_ENABLED, OpInputAction::ACTION_RANGE_GO_TO_END, TRUE}
	{"ACTION_RANGE_GO_TO_LINE_START", ACTION_RANGE_GO_TO_LINE_START_ENABLED, OpInputAction::ACTION_RANGE_GO_TO_LINE_START, TRUE}
	{"ACTION_RANGE_GO_TO_LINE_END", ACTION_RANGE_GO_TO_LINE_END_ENABLED, OpInputAction::ACTION_RANGE_GO_TO_LINE_END, TRUE}
	{"ACTION_RANGE_PAGE_UP", ACTION_RANGE_PAGE_UP_ENABLED, OpInputAction::ACTION_RANGE_PAGE_UP, TRUE}
	{"ACTION_RANGE_PAGE_DOWN", ACTION_RANGE_PAGE_DOWN_ENABLED, OpInputAction::ACTION_RANGE_PAGE_DOWN, TRUE}
	{"ACTION_RANGE_PAGE_LEFT", ACTION_RANGE_PAGE_LEFT_ENABLED, OpInputAction::ACTION_RANGE_PAGE_LEFT, TRUE}
	{"ACTION_RANGE_PAGE_RIGHT", ACTION_RANGE_PAGE_RIGHT_ENABLED, OpInputAction::ACTION_RANGE_PAGE_RIGHT, TRUE}
	{"ACTION_RANGE_NEXT_ITEM", ACTION_RANGE_NEXT_ITEM_ENABLED, OpInputAction::ACTION_RANGE_NEXT_ITEM, TRUE}
	{"ACTION_RANGE_PREVIOUS_ITEM", ACTION_RANGE_PREVIOUS_ITEM_ENABLED, OpInputAction::ACTION_RANGE_PREVIOUS_ITEM, TRUE}
	{"ACTION_RANGE_NEXT_CHARACTER", ACTION_RANGE_NEXT_CHARACTER_ENABLED, OpInputAction::ACTION_RANGE_NEXT_CHARACTER, TRUE}
	{"ACTION_RANGE_PREVIOUS_CHARACTER", ACTION_RANGE_PREVIOUS_CHARACTER_ENABLED, OpInputAction::ACTION_RANGE_PREVIOUS_CHARACTER, TRUE}
	{"ACTION_RANGE_NEXT_WORD", ACTION_RANGE_NEXT_WORD_ENABLED, OpInputAction::ACTION_RANGE_NEXT_WORD, TRUE}
	{"ACTION_RANGE_PREVIOUS_WORD", ACTION_RANGE_PREVIOUS_WORD_ENABLED, OpInputAction::ACTION_RANGE_PREVIOUS_WORD, TRUE}
	{"ACTION_RANGE_NEXT_LINE", ACTION_RANGE_NEXT_LINE_ENABLED, OpInputAction::ACTION_RANGE_NEXT_LINE, TRUE}
	{"ACTION_RANGE_PREVIOUS_LINE", ACTION_RANGE_PREVIOUS_LINE_ENABLED, OpInputAction::ACTION_RANGE_PREVIOUS_LINE, TRUE}

}


foreach (test_name, define, action, expected) from test_IsRangeAction
{
	test("Testing IsRangeAction(" test_name ")")
	require define;
	{
 		OpInputAction test_action(action);
 		verify(test_action.IsRangeAction() == expected);	
 	}
}

table test_IsLowlevelAction(const char* test_name, int action, BOOL expected)
{
	{"ACTION_GO", OpInputAction::ACTION_GO, FALSE}
	{"ACTION_LOWLEVEL_KEY_DOWN", OpInputAction::ACTION_LOWLEVEL_KEY_DOWN, TRUE}
	{"ACTION_LOWLEVEL_KEY_UP", OpInputAction::ACTION_LOWLEVEL_KEY_UP, TRUE}
	{"ACTION_LOWLEVEL_KEY_PRESSED", OpInputAction::ACTION_LOWLEVEL_KEY_PRESSED, TRUE}
	{"ACTION_LOWLEVEL_NEW_KEYBOARD_CONTEXT", OpInputAction::ACTION_LOWLEVEL_NEW_KEYBOARD_CONTEXT, TRUE}
	{"ACTION_LOWLEVEL_NEW_MOUSE_CONTEXT", OpInputAction::ACTION_LOWLEVEL_NEW_MOUSE_CONTEXT, TRUE}
	{"ACTION_LOWLEVEL_PREFILTER_ACTION", OpInputAction::ACTION_LOWLEVEL_PREFILTER_ACTION, TRUE}
}


foreach (test_name, action, expected) from test_IsLowlevelAction
{
	test("Testing IsLowlevelAction(" test_name ")")
	{
 		OpInputAction test_action(action);
 		verify(test_action.IsLowlevelAction() == expected);	
 	}
}

test ("Testing GetActionTestID()")
{	
    OpInputAction test_action(OpInputAction::ACTION_GO);
 	test_action.SetActionTextID(Str::M_KEY_BACKSPACE);
 	verify(test_action.GetActionTextID() == Str::M_KEY_BACKSPACE);
}


table test_GetLocaleString(const char* test_name, define, int action, Str::LocaleString expected)
{
	{"ACTION_BACK", ACTION_BACK_ENABLED, OpInputAction::ACTION_BACK, Str::SI_PREV_BUTTON_TEXT}
	{"ACTION_FORWARD", ACTION_FORWARD_ENABLED, OpInputAction::ACTION_FORWARD, Str::SI_NEXT_BUTTON_TEXT}
	{"ACTION_GO", ACTION_GO_ENABLED, OpInputAction::ACTION_GO, "Go"}
}


foreach (test_name, define, action, expected) from test_GetLocaleString
{
	test("Testing GetLocaleStringFromAction(" test_name ")")
	require define;
	{
 		OpString string;
 		verify_success(OpInputAction::GetLocaleStringFromAction(action, string));
 		verify_string(string, expected);	
 	}
}

test ("Testing GetStringFromAction")
{	
	OpString8 string;
	verify_success(OpInputAction::GetStringFromAction(OpInputAction::ACTION_GO, string));
	verify_string(string, "Go");
	verify_string(OpInputAction::GetStringFromAction(OpInputAction::ACTION_GO), "Go");	
}

test ("Testing Equals")
{	
	OpInputAction* test_action3 = NULL;
	OpInputAction* test_action4 = NULL; 
	OpInputAction* test_action5 = NULL;
	const uni_char* string = UNI_L("Go | Next");
	
	OpInputAction test_action1(OpInputAction::ACTION_GO);
	OpInputAction test_action2(OpInputAction::ACTION_BACK);
	verify(!test_action1.Equals(NULL));
	verify(!test_action1.Equals(&test_action2));
	
	test_action3 = OpInputAction::CreateToggleAction(OpInputAction::ACTION_GO,OpInputAction::ACTION_NEXT_ITEM);
	verify(test_action3);
	test_action4 = OpInputAction::CreateToggleAction(OpInputAction::ACTION_GO,OpInputAction::ACTION_FORWARD);
	verify(test_action4);
	
	verify(!test_action3->Equals(test_action4));
	verify(!test_action3->Equals(&test_action1));
	
	verify(OpStatus::IsSuccess(OpInputAction::CreateInputActionsFromString(string, test_action5)));
	verify(!test_action3->Equals(test_action5));

	OpRect m_action_position;
	
}
finally
{
	OP_DELETE(test_action3);
	OP_DELETE(test_action4);
	OP_DELETE(test_action5);
}

test ("Testing GetActionPositon(OpRect)")
{	
	OpRect rec;
	OpRect rec1;

    rec.x=100;
	rec.y=100;
	
    OpInputAction test_action(OpInputAction::ACTION_ZOOM_IN);
 	test_action.SetActionPosition(rec);
 	test_action.GetActionPosition(rec1);
 	verify(rec1.x==100);
 	verify(rec1.y==100);
} 

test ("Testing two actions GetActionPositon(OpRect)")
{
	OpInputAction *test_action1 = NULL;
	OpInputAction *test_action2 = NULL;
	const uni_char* string = UNI_L("Go | Back");
	
	OpRect rec;
	OpRect rec1;

    rec.x=100;
	rec.y=100;
	
    verify(OpStatus::IsSuccess(OpInputAction::CreateInputActionsFromString(string, test_action1)));
    test_action1->SetActionPosition(rec);
    
    test_action1->GetActionPosition(rec1);
    verify(rec1.x==100);
 	verify(rec1.y==100);
 	
 	verify(test_action1->GetAction() == OpInputAction::ACTION_GO);
 	
 	verify(test_action1->GetActionOperator() == OpInputAction::OPERATOR_OR);
 	test_action2 = test_action1->GetNextInputAction(OpInputAction::OPERATOR_OR);
 	
    test_action2->GetActionPosition(rec1);
    verify(rec1.x==100);
    verify(rec1.y==100);
 	
 	verify(test_action2->GetAction() == OpInputAction::ACTION_BACK);
 	
}

test ("Testing GetActionPositon(OpPoint)")
{	
	OpRect rec;
	
    OpInputAction test_action(OpInputAction::ACTION_ZOOM_IN);
 	test_action.SetActionPosition(OpPoint(100,100));
 	test_action.GetActionPosition(rec);
 	verify(rec.x==100);
 	verify(rec.y==100);
} 

test ("Testing two actions GetActionPositon(OpPoint)")
{
	OpInputAction *test_action1 = NULL;
	OpInputAction *test_action2 = NULL;
	const uni_char* string = UNI_L("Go | Back");
	
	OpRect rec;

    verify(OpStatus::IsSuccess(OpInputAction::CreateInputActionsFromString(string, test_action1)));
    test_action1->SetActionPosition(OpPoint(100,100));
    
    test_action1->GetActionPosition(rec);
    verify(rec.x==100);
 	verify(rec.y==100);
 	
 	verify(test_action1->GetAction() == OpInputAction::ACTION_GO);
 	
 	verify(test_action1->GetActionOperator() == OpInputAction::OPERATOR_OR);
 	test_action2 = test_action1->GetNextInputAction(OpInputAction::OPERATOR_OR);
 	
    test_action2->GetActionPosition(rec);
    verify(rec.x==100);
    verify(rec.y==100);
 	
 	verify(test_action2->GetAction() == OpInputAction::ACTION_BACK);
 	
}

test ("Testing SetAttention")
{	
	
    OpInputAction test_action(OpInputAction::ACTION_BACK);
 	test_action.SetAttention(true);
 	verify((test_action.GetActionState() & OpInputAction::STATE_ATTENTION) == OpInputAction::STATE_ATTENTION);
 	verify((test_action.GetActionState() & OpInputAction::STATE_INATTENTION) == 0);
 	    
 	test_action.SetAttention(false);
 	verify((test_action.GetActionState() & OpInputAction::STATE_INATTENTION) == OpInputAction::STATE_INATTENTION);
 	verify((test_action.GetActionState() & OpInputAction::STATE_ATTENTION) == 0);
} 

test ("Testing SetSelected")
{	
	
    OpInputAction test_action(OpInputAction::ACTION_BACK);
 	test_action.SetSelected(true);
 	verify((test_action.GetActionState() & OpInputAction::STATE_SELECTED) == OpInputAction::STATE_SELECTED);
 	verify((test_action.GetActionState() & OpInputAction::STATE_UNSELECTED) == 0);
 	
 	    
 	test_action.SetSelected(false);
 	verify((test_action.GetActionState() & OpInputAction::STATE_UNSELECTED) == OpInputAction::STATE_UNSELECTED);
 	verify((test_action.GetActionState() & OpInputAction::STATE_SELECTED) == 0);
} 

test ("Testing SetEnabled")
{	
	
    OpInputAction test_action(OpInputAction::ACTION_BACK);
 	test_action.SetEnabled(true);
 	verify((test_action.GetActionState() & OpInputAction::STATE_ENABLED) == OpInputAction::STATE_ENABLED);
 	verify((test_action.GetActionState() & OpInputAction::STATE_DISABLED) == 0);
 	
 	test_action.SetEnabled(false);
 	verify((test_action.GetActionState() & OpInputAction::STATE_DISABLED) == OpInputAction::STATE_DISABLED);
 	verify((test_action.GetActionState() & OpInputAction::STATE_ENABLED) == 0);
} 

test ("Testing SetSelectedByToggleAction")
{	
	//testing if when toggle=true
    OpInputAction test_action(OpInputAction::ACTION_BACK);
 	test_action.SetSelectedByToggleAction(OpInputAction::ACTION_BACK,true);
 	verify((test_action.GetActionState() & OpInputAction::STATE_SELECTED) == OpInputAction::STATE_SELECTED);
 	verify((test_action.GetActionState() & OpInputAction::STATE_UNSELECTED) == 0);
 	
 	//testing if when toggle=false
 	test_action.SetSelectedByToggleAction(OpInputAction::ACTION_BACK,false);
 	verify((test_action.GetActionState() & OpInputAction::STATE_UNSELECTED) == OpInputAction::STATE_UNSELECTED);
 	verify((test_action.GetActionState() & OpInputAction::STATE_SELECTED) == 0);
 	
 	//testing else when toggle=true
 	OpInputAction test_action1(OpInputAction::ACTION_BACKSPACE);
 	test_action1.SetSelectedByToggleAction(OpInputAction::ACTION_BACK,true);
 	verify((test_action1.GetActionState() & OpInputAction::STATE_UNSELECTED) == OpInputAction::STATE_UNSELECTED);
 	verify((test_action1.GetActionState() & OpInputAction::STATE_SELECTED) == 0);
 	
 	//testing else when toggle=false
 	test_action1.SetSelectedByToggleAction(OpInputAction::ACTION_BACK,false);
 	verify((test_action1.GetActionState() & OpInputAction::STATE_SELECTED) == OpInputAction::STATE_SELECTED);
 	verify((test_action1.GetActionState() & OpInputAction::STATE_UNSELECTED) == 0);
 	
} 

test ("Testing OpInputAction(OpInputAction*)")
{	
	const uni_char* test_data = UNI_L("testing");
	
    OpInputAction test_action(OpInputAction::ACTION_BACK);
 	test_action.SetSelected(true);
 	test_action.SetActionText(test_data);
	test_action.SetActionTextID(Str::M_KEY_BACKSPACE);
	
	OpInputAction test_action1(test_action);
	verify((test_action1.GetActionState() & OpInputAction::STATE_SELECTED) == OpInputAction::STATE_SELECTED);
	verify(test_action1.GetActionTextID() == Str::M_KEY_BACKSPACE);
	verify_string(test_action1.GetActionText(),test_data);
	
} 
