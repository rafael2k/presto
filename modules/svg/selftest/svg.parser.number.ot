/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2007 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/
group "svg.parser.number";

require SVG_SUPPORT;
require init;

include "modules/svg/src/svgpch.h";
include "modules/svg/src/parser/svgnumberparser.h";

language c++;

table Numbers(const char*, double)
{
	{ "12" , 12.0 },
	{ "12.1", 12.1 },
	{ "0.4", 0.4 },
	{ "2342343", 2342343 },
	{ "0", 0 },
	{ "+22123", 22123 },
	{ "-335353822", -335353822 },
	{ "-3353.53822", -3353.53822 },
	{ "-1.5e3", -1500 },
	{ "-12.3e2", -1230 }
}

foreach (cstr, val) from Numbers
{
	test("Number '" cstr "'")
	{
		const uni_char* test = UNI_L(cstr);
		SVGNumberParser parser;
		SVGNumber res;
		verify(OpStatus::IsSuccess(parser.ParseNumber(test, uni_strlen(test), res)));

		verify(res.Close(val));
	}
}

// <range>, expected to pass, range start, range end
table UniRanges(const char*, BOOL, unsigned, unsigned)
{
	{"U+42", TRUE, 0x42, 0x42},
	{"U+0-7f", TRUE, 0x0, 0x7f},
	{"U+6??", TRUE, 0x0600, 0x06ff},
	{"U+00000060?", TRUE, 0x0600, 0x060f},
	{"U+600-6ff", TRUE, 0x600, 0x6ff},
	{"U+6?0", FALSE, 0x0, 0x0}
}

foreach (cstr, expect_res, start, end) from UniRanges
{
	test("Unicode range '" cstr "'")
	{
		const uni_char* test = UNI_L(cstr);
		SVGNumberParser parser;
		unsigned s, e;
		OP_STATUS status = parser.ParseUnicodeRange(test, uni_strlen(test), s, e);

		if (OpStatus::IsSuccess(status))
		{
			verify(expect_res);
			verify(s == start);
			verify(e == end);
		}
		else
		{
			verify(!expect_res);
		}
	}
}
