/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2005 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

// This test test the different calculation modes for an
// 'animate'-element

group "svg.animation.schedule";

require init;
require SVG_SUPPORT;

include "modules/svg/src/animation/svganimationschedule.h";
include "modules/svg/src/AttrValueStore.h";
include "modules/svg/src/SVGTimedElementContext.h";
include "modules/svg/src/animation/svganimationinterval.h";

svg
{
//! <svg xmlns="http://www.w3.org/2000/svg">
//!   <animate attributeName="fill" from="blue" to="yellow"
//!            dur="2s"/>
//! </svg>
}
test("Active duration: simple duration")
{
    HTML_Element *animate_elm = find_element("animate", 1);
    verify(animate_elm);

    SVGTimingInterface* animate_timing_interface = AttrValueStore::GetSVGTimingInterface(animate_elm);
    verify(animate_timing_interface);

    SVGAnimationSchedule& schedule = animate_timing_interface->AnimationSchedule();
    SVGAnimationInterval* interval = schedule.GetActiveInterval(0);
    verify(interval);

    verify(interval->Begin() == 0);
    verify(interval->End() == 2000);
    verify(interval->SimpleDuration() == 2000);
    verify(interval->RepeatingDuration() == 2000);
}

svg
{
//! <svg xmlns="http://www.w3.org/2000/svg">
//!   <animate attributeName="fill" from="blue" to="yellow"
//!            end="2s"/>
//! </svg>
}
test("Active duration: specified end")
{
    HTML_Element *animate_elm = find_element("animate", 1);
    verify(animate_elm);

    SVGTimingInterface* animate_timing_interface = AttrValueStore::GetSVGTimingInterface(animate_elm);
    verify(animate_timing_interface);

    SVGAnimationSchedule& schedule = animate_timing_interface->AnimationSchedule();
    SVGAnimationInterval* interval = schedule.GetActiveInterval(0);
    verify(interval);

    verify(interval->Begin() == 0);
    verify(interval->End() == 2000);
    verify(interval->SimpleDuration() == SVGAnimationTime::Indefinite());
    verify(interval->RepeatingDuration() == SVGAnimationTime::Indefinite());
}

svg
{
//! <svg xmlns="http://www.w3.org/2000/svg">
//!   <animate attributeName="fill" from="blue" to="yellow"
//!            />
//! </svg>
}
test("Active duration: unspecified end")
{
    HTML_Element *animate_elm = find_element("animate", 1);
    verify(animate_elm);

    SVGTimingInterface* animate_timing_interface = AttrValueStore::GetSVGTimingInterface(animate_elm);
    verify(animate_timing_interface);

    SVGAnimationSchedule& schedule = animate_timing_interface->AnimationSchedule();
    SVGAnimationInterval* interval = schedule.GetActiveInterval(0);
    verify(interval);

    verify(interval->Begin() == 0);
    verify(interval->End() == SVGAnimationTime::Indefinite());
    verify(interval->SimpleDuration() == SVGAnimationTime::Indefinite());
    verify(interval->RepeatingDuration() == SVGAnimationTime::Indefinite());
}

svg
{
//! <svg xmlns="http://www.w3.org/2000/svg">
//!   <animate attributeName="fill" from="blue" to="yellow"
//!            end="indefinite"/>
//! </svg>
}
test("Active duration: indefinite end")
{
    HTML_Element *animate_elm = find_element("animate", 1);
    verify(animate_elm);

    SVGTimingInterface* animate_timing_interface = AttrValueStore::GetSVGTimingInterface(animate_elm);
    verify(animate_timing_interface);

    SVGAnimationSchedule& schedule = animate_timing_interface->AnimationSchedule();
    SVGAnimationInterval* interval = schedule.GetActiveInterval(0);
    verify(interval);

    verify(interval->Begin() == 0);
    verify(interval->End() == SVGAnimationTime::Indefinite());
    verify(interval->SimpleDuration() == SVGAnimationTime::Indefinite());
    verify(interval->RepeatingDuration() == SVGAnimationTime::Indefinite());
}

svg
{
//! <svg xmlns="http://www.w3.org/2000/svg">
//!   <animate attributeName="fill" from="blue" to="yellow"
//!            end="onclick"/>
//! </svg>
}
test("Active duration: unresolved end")
{
    HTML_Element *animate_elm = find_element("animate", 1);
    verify(animate_elm);

    SVGTimingInterface* animate_timing_interface = AttrValueStore::GetSVGTimingInterface(animate_elm);
    verify(animate_timing_interface);

    SVGAnimationSchedule& schedule = animate_timing_interface->AnimationSchedule();
    SVGAnimationInterval* interval = schedule.GetActiveInterval(0);
    verify(interval);

    verify(interval->Begin() == 0);
    verify(interval->End() == SVGAnimationTime::Indefinite());  // The spec says unresolved but it doesn't matter in practice, AFAIK.
    verify(interval->SimpleDuration() == SVGAnimationTime::Indefinite());
    verify(interval->RepeatingDuration() == SVGAnimationTime::Indefinite());
}

svg
{
//! <svg xmlns="http://www.w3.org/2000/svg">
//!   <animate attributeName="fill" from="blue" to="yellow"
//!            dur="2s" end="3s"/>
//! </svg>
}
test("Active duration: end - B > dur")
{
    HTML_Element *animate_elm = find_element("animate", 1);
    verify(animate_elm);

    SVGTimingInterface* animate_timing_interface = AttrValueStore::GetSVGTimingInterface(animate_elm);
    verify(animate_timing_interface);

    SVGAnimationSchedule& schedule = animate_timing_interface->AnimationSchedule();
    SVGAnimationInterval* interval = schedule.GetActiveInterval(0);
    verify(interval);

    verify(interval->Begin() == 0);
    verify(interval->End() == 2000);
    verify(interval->SimpleDuration() == 2000);
    verify(interval->RepeatingDuration() == 2000);
}

svg
{
//! <svg xmlns="http://www.w3.org/2000/svg">
//!   <animate attributeName="fill" from="blue" to="yellow"
//!            dur="2s" end="1s"/>
//! </svg>
}
test("Active duration: end - B < dur")
{
    HTML_Element *animate_elm = find_element("animate", 1);
    verify(animate_elm);

    SVGTimingInterface* animate_timing_interface = AttrValueStore::GetSVGTimingInterface(animate_elm);
    verify(animate_timing_interface);

    SVGAnimationSchedule& schedule = animate_timing_interface->AnimationSchedule();
    SVGAnimationInterval* interval = schedule.GetActiveInterval(0);
    verify(interval);

    verify(interval->Begin() == 0);
    verify(interval->End() == 1000);
    verify(interval->SimpleDuration() == 2000);
    verify(interval->RepeatingDuration() == 2000);
}

svg
{
//! <svg xmlns="http://www.w3.org/2000/svg">
//!   <animate attributeName="fill" from="blue" to="yellow"
//!            dur="2s" end="1s" min="3s"/>
//! </svg>
}
test("Active duration: end - B < dur < min")
{
    HTML_Element *animate_elm = find_element("animate", 1);
    verify(animate_elm);

    SVGTimingInterface* animate_timing_interface = AttrValueStore::GetSVGTimingInterface(animate_elm);
    verify(animate_timing_interface);

    SVGAnimationSchedule& schedule = animate_timing_interface->AnimationSchedule();
    SVGAnimationInterval* interval = schedule.GetActiveInterval(0);
    verify(interval);

    verify(interval->Begin() == 0);
    verify(interval->End() == 3000);
    verify(interval->SimpleDuration() == 2000);
    verify(interval->RepeatingDuration() == 2000);
}

svg
{
//! <svg xmlns="http://www.w3.org/2000/svg">
//!   <animate attributeName="fill" from="blue" to="yellow"
//!            dur="1s" end="1s" min="3s" repeatCount="2"/>
//! </svg>
}
test("Active duration: end - B < repeat dur < min")
{
    HTML_Element *animate_elm = find_element("animate", 1);
    verify(animate_elm);

    SVGTimingInterface* animate_timing_interface = AttrValueStore::GetSVGTimingInterface(animate_elm);
    verify(animate_timing_interface);

    SVGAnimationSchedule& schedule = animate_timing_interface->AnimationSchedule();
    SVGAnimationInterval* interval = schedule.GetActiveInterval(0);
    verify(interval);

    verify(interval->Begin() == 0);
    verify(interval->End() == 3000);
    verify(interval->SimpleDuration() == 1000);
    verify(interval->RepeatingDuration() == 2000);
}

svg
{
//! <svg xmlns="http://www.w3.org/2000/svg">
//!   <animate attributeName="fill" from="blue" to="yellow"
//!            dur="1s" end="1s" min="3s" repeatDur="2s"/>
//! </svg>
}
test("Active duration: end - B < repeat dur#2 < min")
{
    HTML_Element *animate_elm = find_element("animate", 1);
    verify(animate_elm);

    SVGTimingInterface* animate_timing_interface = AttrValueStore::GetSVGTimingInterface(animate_elm);
    verify(animate_timing_interface);

    SVGAnimationSchedule& schedule = animate_timing_interface->AnimationSchedule();
    SVGAnimationInterval* interval = schedule.GetActiveInterval(0);
    verify(interval);

    verify(interval->Begin() == 0);
    verify(interval->End() == 3000);
    verify(interval->SimpleDuration() == 1000);
    verify(interval->RepeatingDuration() == 2000);
}

svg
{
//! <svg xmlns="http://www.w3.org/2000/svg">
//!   <animate attributeName="fill" from="blue" to="yellow"
//!            max="2s" dur="1s" end="1s" min="3s" repeatDur="2s"/>
//! </svg>
}
test("Active duration: max < min")
{
    HTML_Element *animate_elm = find_element("animate", 1);
    verify(animate_elm);

    SVGTimingInterface* animate_timing_interface = AttrValueStore::GetSVGTimingInterface(animate_elm);
    verify(animate_timing_interface);

    SVGAnimationSchedule& schedule = animate_timing_interface->AnimationSchedule();
    SVGAnimationInterval* interval = schedule.GetActiveInterval(0);
    verify(interval);

    verify(interval->Begin() == 0);
    verify(interval->End() == 1000); // if max < min, both attributes should be ignored
    verify(interval->SimpleDuration() == 1000);
    verify(interval->RepeatingDuration() == 2000);
}

svg
{
//! <svg xmlns="http://www.w3.org/2000/svg">
//!   <animate attributeName="fill" from="blue" to="yellow"
//!            max="2s" dur="1s" end="3s" repeatDur="2s"/>
//! </svg>
}
test("Active duration: repeat dur <= max < end")
{
    HTML_Element *animate_elm = find_element("animate", 1);
    verify(animate_elm);

    SVGTimingInterface* animate_timing_interface = AttrValueStore::GetSVGTimingInterface(animate_elm);
    verify(animate_timing_interface);

    SVGAnimationSchedule& schedule = animate_timing_interface->AnimationSchedule();
    SVGAnimationInterval* interval = schedule.GetActiveInterval(0);
    verify(interval);

    verify(interval->Begin() == 0);
    verify(interval->End() == 2000); // if max < min, both attributes should be ignored
    verify(interval->SimpleDuration() == 1000);
    verify(interval->RepeatingDuration() == 2000);
}
