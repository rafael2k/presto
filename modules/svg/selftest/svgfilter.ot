group "svg.filter";

require SVG_SUPPORT;
require SVG_SUPPORT_FILTERS;
require init;

include "modules/svg/src/SVGTurbulenceGenerator.h";
include "modules/svg/src/SVGRect.h";
include "modules/svg/svg_number.h";
include "modules/svg/src/SVGDocumentContext.h";
include "modules/svg/src/SVGImageImpl.h";
include "modules/svg/src/SVGAttributeParser.h";

global
{
	BOOL VerifyPixel(UINT32 val, UINT32 ref)
	{
		for (unsigned i = 0; i < 4; ++i)
		{
			int c1 = val & 0xffu;
			int c2 = ref & 0xffu;
			if (op_abs(c2 - c1) > 1)
				return FALSE;

			val >>= 8;
			ref >>= 8;
		}
		return TRUE;
	}
}

test("Turbulence Generator")
{
	SVGTurbulenceGenerator turb;

	SVGRect region(0, 0, 4, 1);

	turb.Init(0);
	turb.SetParameters(0.01 /* baseFreqX */, 0.01/* baseFreqY */, 4 /* octaves */,
					   TRUE /* fractalNoise */, FALSE /* noStitch */, region);

	UINT32 dstbuf[4];
	SVGNumber pt[2];

	turb.TurbulenceScanline(pt, 1.0, dstbuf, 4);

#ifdef USE_PREMULTIPLIED_ALPHA
	verify(VerifyPixel(dstbuf[0], 0x7f3f3f3f));
	verify(VerifyPixel(dstbuf[1], 0x81413f40));
	verify(VerifyPixel(dstbuf[2], 0x83423e41));
	verify(VerifyPixel(dstbuf[3], 0x85443d43));
#else
	verify(VerifyPixel(dstbuf[0], 0x7f7f7f7f));
	verify(VerifyPixel(dstbuf[1], 0x81807d7f));
	verify(VerifyPixel(dstbuf[2], 0x8381797f));
	verify(VerifyPixel(dstbuf[3], 0x85827680));
#endif // USE_PREMULTIPLIED_ALPHA
}

xml {
//!<?xml version="1.0"?>
//!<svg xmlns="http://www.w3.org/2000/svg"
//!     xmlns:xlink="http://www.w3.org/1999/xlink"
//!     viewBox="0 0 400 400" width="480" height="360">
//!  <defs>
//!    <svg viewBox="0 0 1 1" id="img1">
//!      <circle cx="0.25" cy="0.25" r="0.25" fill="red"/>
//!      <circle cx="0.75" cy="0.25" r="0.25" fill="green"/>
//!      <circle cx="0.5" cy="0.75" r="0.25" fill="blue"/>
//!    </svg>
//!    <filter id="f1">
//!      <!-- Drop shadow -->
//!      <feGaussianBlur stdDeviation="5"/>
//!      <feOffset dx="4" dy="4" result="shadow"/>
//!      <!-- Funky shit -->
//!      <feTurbulence baseFrequency="0.1" numOctaves="8" type="turbulence"
//!		    result="dispmap"/>
//!      <feTurbulence baseFrequency="0.1" numOctaves="2" type="fractalNoise"/>
//!      <feDisplacementMap in2="dispmap" scale="5"
//!			 xChannelSelector="R" yChannelSelector="B"/>
//!      <feComponentTransfer result="tex1">
//!	<feFuncG type="discrete" tableValues="0.25 0.75"/>
//!	<feFuncB type="table" tableValues="0.25 0.75"/>
//!      </feComponentTransfer>
//!      <!-- More funky shit -->
//!      <feTurbulence baseFrequency="0.1" numOctaves="2" type="turbulence"/>
//!      <feColorMatrix type="hueRotate" values="45"/>
//!      <feConvolveMatrix order="3"
//!			kernelMatrix="1 1 1; 1 -8 1; 1 1 1"
//!			preserveAlpha="true"
//!			result="tex2"/>
//!      <!-- Bleeding image -->
//!      <feImage xlink:href="#img1"/>
//!      <feMorphology operator="dilate" radius="20"/>
//!      <feGaussianBlur stdDeviation="10" result="dilimg"/>
//!      <feFlood flood-color="crimson" flood-opacity="0.25"/>
//!      <feBlend mode="multiply" in2="dilimg" result="dilimg"/>
//!      <!-- Put it all together, light it and stuff -->
//!      <feComposite operator="xor" in="tex1" in2="tex2" result="tex3"/>
//!      <feComposite operator="in" in="SourceAlpha" in2="tex3"/>
//!      <feSpecularLighting specularConstant="0.8"
//!			  specularExponent="2.2"
//!			  surfaceScale="100"
//!			  lighting-color="crimson"
//!			  result="littexshapes">
//!	<feDistantLight azimuth="45" elevation="45"/>
//!      </feSpecularLighting>
//!      <feComposite operator="arithmetic"
//!		   in="littexshapes" in2="SourceGraphic"
//!		   k1="0" k2="0.3" k3="0.7" k4="0"/>
//!      <feMerge>
//!	<feMergeNode in="dilimg"/>
//!	<feMergeNode in="shadow"/>
//!	<feMergeNode/>
//!      </feMerge>
//!    </filter>
//!  </defs>
//!  <g filter="url(#f1)">
//!    <rect x="50" y="50" width="200" height="200" fill="red"/>
//!    <circle r="75" cx="150" cy="100" fill="yellow"/>
//!    <polygon points="50,350 250,300 200,100" fill="blue"/>
//!  </g>
//!</svg>
};

test("General filter and PaintToBuffer test")
{
	SVG_DOCUMENT_CLASS* doc = state.doc;
	LogicalDocument* logdoc = doc->GetLogicalDocument();
	verify(logdoc);
	SVGWorkplace* workplace = logdoc->GetSVGWorkplace();
	verify(workplace);
	SVGImageImpl* item = static_cast<SVGImageImpl*>(workplace->GetFirstSVG());
	verify(item);
	verify(!workplace->GetNextSVG(item));
	SVGDocumentContext* doc_ctx = item->GetSVGDocumentContext();
	verify(doc_ctx);

	OpBitmap* bm = NULL;
	verify(OpStatus::IsSuccess(item->PaintToBuffer(bm, 0, 480, 360)));
	OP_DELETE(bm);
}

test("Parsing enable-background")
{
	SVGEnableBackgroundObject* ebobj = NULL;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParseEnableBackground(UNI_L("accumulate"), 10,
																		 &ebobj)));
	verify(ebobj);
	verify(ebobj->GetType() == SVGEnableBackground::SVGENABLEBG_ACCUMULATE);
	verify(ebobj->IsRectValid() == FALSE);
	OP_DELETE(ebobj); ebobj = NULL;

	verify(OpStatus::IsSuccess(SVGAttributeParser::ParseEnableBackground(UNI_L("new"), 3,
																		 &ebobj)));
	verify(ebobj);
	verify(ebobj->GetType() == SVGEnableBackground::SVGENABLEBG_NEW);
	verify(ebobj->IsRectValid() == FALSE);
	OP_DELETE(ebobj); ebobj = NULL;

	verify(OpStatus::IsSuccess(SVGAttributeParser::ParseEnableBackground(UNI_L("new 120 0 480 360"), 17,
																		 &ebobj)));
	verify(ebobj);
	verify(ebobj->GetType() == SVGEnableBackground::SVGENABLEBG_NEW);
	verify(ebobj->IsRectValid() == TRUE);
	SVGRect ebrect = ebobj->GetRect();
	verify(ebrect.x == SVGNumber(120));
	verify(ebrect.y == SVGNumber(0));
	verify(ebrect.width == SVGNumber(480));
	verify(ebrect.height == SVGNumber(360));
	OP_DELETE(ebobj); ebobj = NULL;
}

svg {
//! <svg width="700" xmlns:xlink="http://www.w3.org/1999/xlink" id="root" height="500"
//!    xmlns="http://www.w3.org/2000/svg">
//!   <title>Filter, Opacity and Events</title>
//!   <text x="100" y="50">Click on yellow box. After click it should become green</text>
//!   <rect id="pass" x="400" y="100" width="100" height="100" onclick="this.setAttribute('fill','green')" fill="yellow"/>
//!   <g>
//! 	<defs>
//! 	  <filter width="200%" height="200%" id="filter"/>
//! 	</defs>
//! 	<rect id="fail" x="100" y="100" height="100" width="300" fill-opacity="0.01" filter="url(#filter)" />
//!   </g>
//! </svg>
};

test("Mouse events on filtered element")
{
  // This test is for making sure filters don't affect mouse events - CORE-2145
  HTML_Element* root = find_element("svg", 1);
  HTML_Element* expected_target = find_element("rect", 1);
  verify(root);
  HTML_Element* target = NULL;
  int offsetx, offsety;
  SVG_DOCUMENT_CLASS* doc = state.doc;
  OP_BOOLEAN result = g_svg_manager->FindSVGElement(root, doc, 450, 150, &target, offsetx, offsety);
  verify(result == OpBoolean::IS_TRUE);
  verify(target);
  verify(target == expected_target);
}
