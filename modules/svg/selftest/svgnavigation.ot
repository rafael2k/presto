/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2005-2007 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.	It may not be distributed
** under any circumstances.
*/

group "svg.navigation";

require SVG_SUPPORT;
require init;

include "modules/svg/SVGManager.h";
include "modules/svg/svg_tree_iterator.h";
include "modules/svg/src/SVGDocumentContext.h";
include "modules/svg/src/SVGManagerImpl.h";
include "modules/svg/src/SVGImageImpl.h";
include "modules/svg/src/SVGUtils.h";

xml {
//! <?xml version="1.0"?>
//! <svg xmlns="http://www.w3.org/2000/svg"
//!      id="svgroot" version="1.1"
//!      width="100" height="100"
//!      viewBox="0 0 280 100">
//!   <circle id="c1" cx="30" cy="30" r="10"/>
//!   <circle id="c2" cx="60" cy="30" r="10"/>
//!   <circle id="c3" cx="90" cy="30" r="10"/>
//!   <a><rect width="1" height="1"/></a>
//!   <circle id="c4" cx="120" cy="30" r="10"/>
//!   <circle id="c5" cx="30" cy="60" r="10"/>
//!   <circle id="c6" cx="60" cy="60" r="10"/>
//!   <a><rect width="1" height="1"/></a>
//!   <circle id="c7" cx="90" cy="60" r="10"/>
//!   <circle id="c8" cx="120" cy="60" r="10"/>
//!   <circle focusable="true" id="start" cx="75" cy="45" r="10"
//!	          nav-next="url(#c5)" nav-prev="url(#c4)"
//!           nav-up-left="url(#c1)" nav-up="url(#c2)"
//!           nav-up-right="url(#c3)" nav-right="url(#c4)"
//!           nav-down-right="url(#c8)" nav-down="url(#c7)"
//!           nav-down-left="url(#c6)" nav-left="url(#c5)"/>
//! </svg>
};

subtest verify_nav(HTML_Element* start, int dir, int nway, const uni_char* expected)
{
	HTML_Element* candidate = NULL;
	verify(g_svg_manager->HasNavTargetInDirection(start, dir, nway, candidate));
	verify(candidate && candidate->GetId() && uni_strcmp(candidate->GetId(), expected) == 0);
}

test("Navigation: Two-way")
{
	SVG_DOCUMENT_CLASS* doc = state.doc;
	LogicalDocument* logdoc = doc->GetLogicalDocument();
	verify(logdoc);
	SVGWorkplaceImpl* workplace = static_cast<SVGWorkplaceImpl*>(logdoc->GetSVGWorkplace());
	verify(workplace);
	SVGImageImpl* item = static_cast<SVGImageImpl*>(workplace->GetFirstSVG());
	verify(item);
	verify(!workplace->GetNextSVG(item));
	SVGDocumentContext* doc_ctx = item->GetSVGDocumentContext();
	verify(doc_ctx);

	HTML_Element* start = SVGUtils::FindElementById(doc_ctx->GetLogicalDocument(), UNI_L("start"));

	verify(verify_nav(start, 270, 2, UNI_L("c5")));
	verify(verify_nav(start, 315, 2, UNI_L("c5")));
	verify(verify_nav(start, 225, 2, UNI_L("c5")));

	verify(verify_nav(start, 90, 2, UNI_L("c4")));
	verify(verify_nav(start, 135, 2, UNI_L("c4")));
	verify(verify_nav(start, 45, 2, UNI_L("c4")));
}

test("Navigation: Four-way")
{
	SVG_DOCUMENT_CLASS* doc = state.doc;
	LogicalDocument* logdoc = doc->GetLogicalDocument();
	verify(logdoc);
	SVGWorkplaceImpl* workplace = static_cast<SVGWorkplaceImpl*>(logdoc->GetSVGWorkplace());
	verify(workplace);
	SVGImageImpl* item = static_cast<SVGImageImpl*>(workplace->GetFirstSVG());
	verify(item);
	verify(!workplace->GetNextSVG(item));
	SVGDocumentContext* doc_ctx = item->GetSVGDocumentContext();
	verify(doc_ctx);

	HTML_Element* start = SVGUtils::FindElementById(doc_ctx->GetLogicalDocument(), UNI_L("start"));

	verify(verify_nav(start, 0, 4, UNI_L("c4")));
	verify(verify_nav(start, 40, 4, UNI_L("c4")));
	verify(verify_nav(start, 320, 4, UNI_L("c4")));

	verify(verify_nav(start, 90, 4, UNI_L("c2")));
	verify(verify_nav(start, 130, 4, UNI_L("c2")));
	verify(verify_nav(start, 50, 4, UNI_L("c2")));

	verify(verify_nav(start, 180, 4, UNI_L("c5")));
	verify(verify_nav(start, 220, 4, UNI_L("c5")));
	verify(verify_nav(start, 140, 4, UNI_L("c5")));

	verify(verify_nav(start, 270, 4, UNI_L("c7")));
	verify(verify_nav(start, 310, 4, UNI_L("c7")));
	verify(verify_nav(start, 230, 4, UNI_L("c7")));
}

test("Navigation: Eight-way")
{
	SVG_DOCUMENT_CLASS* doc = state.doc;
	LogicalDocument* logdoc = doc->GetLogicalDocument();
	verify(logdoc);
	SVGWorkplaceImpl* workplace = static_cast<SVGWorkplaceImpl*>(logdoc->GetSVGWorkplace());
	verify(workplace);
	SVGImageImpl* item = static_cast<SVGImageImpl*>(workplace->GetFirstSVG());
	verify(item);
	verify(!workplace->GetNextSVG(item));
	SVGDocumentContext* doc_ctx = item->GetSVGDocumentContext();
	verify(doc_ctx);

	HTML_Element* start = SVGUtils::FindElementById(doc_ctx->GetLogicalDocument(), UNI_L("start"));

	verify(verify_nav(start, 0, 8, UNI_L("c4")));
	verify(verify_nav(start, 45, 8, UNI_L("c3")));
	verify(verify_nav(start, 90, 8, UNI_L("c2")));
	verify(verify_nav(start, 135, 8, UNI_L("c1")));
	verify(verify_nav(start, 180, 8, UNI_L("c5")));
	verify(verify_nav(start, 225, 8, UNI_L("c6")));
	verify(verify_nav(start, 270, 8, UNI_L("c7")));
	verify(verify_nav(start, 315, 8, UNI_L("c8")));
}

test("Focus iteration")
{
	SVG_DOCUMENT_CLASS* doc = state.doc;
	LogicalDocument* logdoc = doc->GetLogicalDocument();
	verify(logdoc);
	SVGWorkplaceImpl* workplace = static_cast<SVGWorkplaceImpl*>(logdoc->GetSVGWorkplace());
	verify(workplace);
	SVGImageImpl* item = static_cast<SVGImageImpl*>(workplace->GetFirstSVG());
	verify(item);
	verify(!workplace->GetNextSVG(item));
	SVGDocumentContext* doc_ctx = item->GetSVGDocumentContext();
	verify(doc_ctx);

    // Needs a layout pass to be able to work properly so we force one
    // with a specified size
	{
		const int svg_width = 480;
		const int svg_height = 360;

		SVGRenderer *renderer = doc_ctx->GetRenderingState();
		if (renderer)
		{
			g_svg_manager_impl->GetCache()->Remove(SVGCache::RENDERER, doc_ctx);
			renderer = NULL;
		}

		OpAutoPtr<SVGRenderer> rend(OP_NEW(SVGRenderer, ()));
		verify(rend.get());
		verify_success(rend->Create(doc_ctx, svg_width, svg_height, svg_width, svg_height, 1.0f));
		verify_success(g_svg_manager_impl->GetCache()->Add(SVGCache::RENDERER, doc_ctx, rend.get()));

		renderer = rend.release();

		doc_ctx->ForceSize(svg_width, svg_height);
		item->UpdateState(SVGImageImpl::UPDATE_LAYOUT);
	}

	SVGTreeIterator* navigator = NULL;
	verify(OpStatus::IsSuccess(g_svg_manager->GetNavigationIterator(doc_ctx->GetSVGRoot(),
																	NULL, NULL,
																	&navigator)));

	int num_focusable = 0;
	HTML_Element* nav_next = navigator->Next();
	while (nav_next)
	{
		num_focusable++;
		nav_next = navigator->Next();
	}

	// Two svg:a and one circle with focusable="true"
	verify(num_focusable == 3);

	num_focusable = 0;
	nav_next = navigator->Prev();
	while (nav_next)
	{
		num_focusable++;
		nav_next = navigator->Prev();
	}

	verify(num_focusable == 3);

	g_svg_manager->ReleaseIterator(navigator);
}
