/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2007 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/
group "svg.depgraph";

require SVG_SUPPORT;
require init;

include "modules/svg/src/svgpch.h";
include "modules/svg/src/SVGDependencyGraph.h";

language c++;

global
{
#define NODE(v) ((HTML_Element*)(v))

	SVGDependencyGraph dgraph;
}

test("Simple dependency")
{
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(2), NODE(1))));
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(3), NODE(1))));
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(4), NODE(1))));
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(5), NODE(1))));

	NodeSet* nodeset = NULL;
	verify(OpStatus::IsSuccess(dgraph.GetDependencies(NODE(1), &nodeset)));
	verify(nodeset != NULL);
	verify(nodeset->GetCount() == 4);

	verify(nodeset->Contains(NODE(2)));
	verify(nodeset->Contains(NODE(3)));
	verify(nodeset->Contains(NODE(4)));
	verify(nodeset->Contains(NODE(5)));

	dgraph.Clear();
}

test("RemoveNode")
{
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(2), NODE(1))));
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(3), NODE(1))));
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(4), NODE(1))));
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(5), NODE(1))));

	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(1), NODE(6))));
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(2), NODE(6))));
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(3), NODE(6))));

	verify(OpStatus::IsSuccess(dgraph.RemoveNode(NODE(1))));

	NodeSet* nodeset = NULL;
	verify(dgraph.GetDependencies(NODE(1), &nodeset) == OpStatus::ERR);

	verify(dgraph.GetDependencies(NODE(6), &nodeset) == OpStatus::OK);
	verify(nodeset != NULL);
	verify(nodeset->GetCount() == 2);

	verify(nodeset->Contains(NODE(2)));
	verify(nodeset->Contains(NODE(3)));

	dgraph.Clear();
}

test("RemoveTargetNode")
{
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(2), NODE(1))));
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(3), NODE(1))));
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(4), NODE(1))));
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(5), NODE(1))));

	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(1), NODE(6))));
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(2), NODE(6))));
	verify(OpStatus::IsSuccess(dgraph.AddDependency(NODE(3), NODE(6))));

	verify(OpStatus::IsSuccess(dgraph.RemoveTargetNode(NODE(1))));

	NodeSet* nodeset = NULL;
	verify(dgraph.GetDependencies(NODE(1), &nodeset) == OpStatus::ERR);

	verify(dgraph.GetDependencies(NODE(6), &nodeset) == OpStatus::OK);
	verify(nodeset != NULL);
	verify(nodeset->GetCount() == 3);

	verify(nodeset->Contains(NODE(1)));
	verify(nodeset->Contains(NODE(2)));
	verify(nodeset->Contains(NODE(3)));

	dgraph.Clear();
}
