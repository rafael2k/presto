/* -*- mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style: "stroustrup" -*-
 *
 * THIS FILE IS AUTO-GENERATED BY A SCRIPT. DO NOT EDIT THIS FILE DIRECTLY!
 */
group "svg.enums";
require SVG_SUPPORT;

include "modules/svg/src/SVGInternalEnum.h";

test("Enum to string 'SVGENUM_SPREAD_METHOD_TYPE::SVGSPREAD_PAD'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_SPREAD_METHOD_TYPE, SVGSPREAD_PAD);
	verify(string_rep);
	verify(op_strcmp(string_rep, "pad") == 0);
}
test("Enum to string 'SVGENUM_SPREAD_METHOD_TYPE::SVGSPREAD_REFLECT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_SPREAD_METHOD_TYPE, SVGSPREAD_REFLECT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "reflect") == 0);
}
test("Enum to string 'SVGENUM_SPREAD_METHOD_TYPE::SVGSPREAD_REPEAT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_SPREAD_METHOD_TYPE, SVGSPREAD_REPEAT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "repeat") == 0);
}
test("Enum to string 'SVGENUM_UNITS_TYPE::SVGUNITS_USERSPACEONUSE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_UNITS_TYPE, SVGUNITS_USERSPACEONUSE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "userSpaceOnUse") == 0);
}
test("Enum to string 'SVGENUM_UNITS_TYPE::SVGUNITS_OBJECTBBOX'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_UNITS_TYPE, SVGUNITS_OBJECTBBOX);
	verify(string_rep);
	verify(op_strcmp(string_rep, "objectBoundingBox") == 0);
}
test("Enum to string 'SVGENUM_TRANSFORM_TYPE::SVGTRANSFORM_MATRIX'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TRANSFORM_TYPE, SVGTRANSFORM_MATRIX);
	verify(string_rep);
	verify(op_strcmp(string_rep, "matrix") == 0);
}
test("Enum to string 'SVGENUM_TRANSFORM_TYPE::SVGTRANSFORM_TRANSLATE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TRANSFORM_TYPE, SVGTRANSFORM_TRANSLATE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "translate") == 0);
}
test("Enum to string 'SVGENUM_TRANSFORM_TYPE::SVGTRANSFORM_ROTATE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TRANSFORM_TYPE, SVGTRANSFORM_ROTATE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "rotate") == 0);
}
test("Enum to string 'SVGENUM_TRANSFORM_TYPE::SVGTRANSFORM_SCALE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TRANSFORM_TYPE, SVGTRANSFORM_SCALE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "scale") == 0);
}
test("Enum to string 'SVGENUM_TRANSFORM_TYPE::SVGTRANSFORM_SKEWX'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TRANSFORM_TYPE, SVGTRANSFORM_SKEWX);
	verify(string_rep);
	verify(op_strcmp(string_rep, "skewX") == 0);
}
test("Enum to string 'SVGENUM_TRANSFORM_TYPE::SVGTRANSFORM_SKEWY'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TRANSFORM_TYPE, SVGTRANSFORM_SKEWY);
	verify(string_rep);
	verify(op_strcmp(string_rep, "skewY") == 0);
}
test("Enum to string 'SVGENUM_ATTRIBUTE_TYPE::SVGATTRIBUTE_CSS'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ATTRIBUTE_TYPE, SVGATTRIBUTE_CSS);
	verify(string_rep);
	verify(op_strcmp(string_rep, "CSS") == 0);
}
test("Enum to string 'SVGENUM_ATTRIBUTE_TYPE::SVGATTRIBUTE_XML'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ATTRIBUTE_TYPE, SVGATTRIBUTE_XML);
	verify(string_rep);
	verify(op_strcmp(string_rep, "XML") == 0);
}
test("Enum to string 'SVGENUM_ATTRIBUTE_TYPE::SVGATTRIBUTE_AUTO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ATTRIBUTE_TYPE, SVGATTRIBUTE_AUTO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "auto") == 0);
}
test("Enum to string 'SVGENUM_CALCMODE::SVGCALCMODE_DISCRETE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CALCMODE, SVGCALCMODE_DISCRETE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "discrete") == 0);
}
test("Enum to string 'SVGENUM_CALCMODE::SVGCALCMODE_LINEAR'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CALCMODE, SVGCALCMODE_LINEAR);
	verify(string_rep);
	verify(op_strcmp(string_rep, "linear") == 0);
}
test("Enum to string 'SVGENUM_CALCMODE::SVGCALCMODE_SPLINE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CALCMODE, SVGCALCMODE_SPLINE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "spline") == 0);
}
test("Enum to string 'SVGENUM_CALCMODE::SVGCALCMODE_PACED'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CALCMODE, SVGCALCMODE_PACED);
	verify(string_rep);
	verify(op_strcmp(string_rep, "paced") == 0);
}
test("Enum to string 'SVGENUM_VISIBILITY::SVGVISIBILITY_VISIBLE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_VISIBILITY, SVGVISIBILITY_VISIBLE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "visible") == 0);
}
test("Enum to string 'SVGENUM_VISIBILITY::SVGVISIBILITY_HIDDEN'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_VISIBILITY, SVGVISIBILITY_HIDDEN);
	verify(string_rep);
	verify(op_strcmp(string_rep, "hidden") == 0);
}
test("Enum to string 'SVGENUM_VISIBILITY::SVGVISIBILITY_COLLAPSE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_VISIBILITY, SVGVISIBILITY_COLLAPSE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "collapse") == 0);
}
test("Enum to string 'SVGENUM_ANIMATEFILLTYPE::SVGANIMATEFILL_FREEZE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ANIMATEFILLTYPE, SVGANIMATEFILL_FREEZE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "freeze") == 0);
}
test("Enum to string 'SVGENUM_ANIMATEFILLTYPE::SVGANIMATEFILL_REMOVE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ANIMATEFILLTYPE, SVGANIMATEFILL_REMOVE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "remove") == 0);
}
test("Enum to string 'SVGENUM_ADDITIVE::SVGADDITIVE_REPLACE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ADDITIVE, SVGADDITIVE_REPLACE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "replace") == 0);
}
test("Enum to string 'SVGENUM_ADDITIVE::SVGADDITIVE_SUM'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ADDITIVE, SVGADDITIVE_SUM);
	verify(string_rep);
	verify(op_strcmp(string_rep, "sum") == 0);
}
test("Enum to string 'SVGENUM_ACCUMULATE::SVGACCUMULATE_NONE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ACCUMULATE, SVGACCUMULATE_NONE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "none") == 0);
}
test("Enum to string 'SVGENUM_ACCUMULATE::SVGACCUMULATE_SUM'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ACCUMULATE, SVGACCUMULATE_SUM);
	verify(string_rep);
	verify(op_strcmp(string_rep, "sum") == 0);
}
test("Enum to string 'SVGENUM_FILL_RULE::SVGFILL_EVEN_ODD'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FILL_RULE, SVGFILL_EVEN_ODD);
	verify(string_rep);
	verify(op_strcmp(string_rep, "evenodd") == 0);
}
test("Enum to string 'SVGENUM_FILL_RULE::SVGFILL_NON_ZERO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FILL_RULE, SVGFILL_NON_ZERO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "nonzero") == 0);
}
test("Enum to string 'SVGENUM_STROKE_LINECAP::SVGCAP_BUTT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_STROKE_LINECAP, SVGCAP_BUTT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "butt") == 0);
}
test("Enum to string 'SVGENUM_STROKE_LINECAP::SVGCAP_ROUND'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_STROKE_LINECAP, SVGCAP_ROUND);
	verify(string_rep);
	verify(op_strcmp(string_rep, "round") == 0);
}
test("Enum to string 'SVGENUM_STROKE_LINECAP::SVGCAP_SQUARE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_STROKE_LINECAP, SVGCAP_SQUARE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "square") == 0);
}
test("Enum to string 'SVGENUM_STROKE_LINEJOIN::SVGJOIN_MITER'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_STROKE_LINEJOIN, SVGJOIN_MITER);
	verify(string_rep);
	verify(op_strcmp(string_rep, "miter") == 0);
}
test("Enum to string 'SVGENUM_STROKE_LINEJOIN::SVGJOIN_ROUND'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_STROKE_LINEJOIN, SVGJOIN_ROUND);
	verify(string_rep);
	verify(op_strcmp(string_rep, "round") == 0);
}
test("Enum to string 'SVGENUM_STROKE_LINEJOIN::SVGJOIN_BEVEL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_STROKE_LINEJOIN, SVGJOIN_BEVEL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "bevel") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_INLINE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_INLINE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "inline") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_BLOCK'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_BLOCK);
	verify(string_rep);
	verify(op_strcmp(string_rep, "block") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_LISTITEM'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_LISTITEM);
	verify(string_rep);
	verify(op_strcmp(string_rep, "list-item") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_RUNIN'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_RUNIN);
	verify(string_rep);
	verify(op_strcmp(string_rep, "run-in") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_COMPACT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_COMPACT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "compact") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_MARKER'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_MARKER);
	verify(string_rep);
	verify(op_strcmp(string_rep, "marker") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_TABLE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_TABLE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "table") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_INLINETABLE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_INLINETABLE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "inline-table") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_TABLEROWGROUP'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_TABLEROWGROUP);
	verify(string_rep);
	verify(op_strcmp(string_rep, "table-row-group") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_TABLEHEADERGROUP'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_TABLEHEADERGROUP);
	verify(string_rep);
	verify(op_strcmp(string_rep, "table-header-group") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_TABLEFOOTERGROUP'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_TABLEFOOTERGROUP);
	verify(string_rep);
	verify(op_strcmp(string_rep, "table-footer-group") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_TABLEROW'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_TABLEROW);
	verify(string_rep);
	verify(op_strcmp(string_rep, "table-row") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_TABLECOLUMNGROUP'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_TABLECOLUMNGROUP);
	verify(string_rep);
	verify(op_strcmp(string_rep, "table-column-group") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_TABLECOLUMN'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_TABLECOLUMN);
	verify(string_rep);
	verify(op_strcmp(string_rep, "table-column") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_TABLECELL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_TABLECELL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "table-cell") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_TABLECAPTION'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_TABLECAPTION);
	verify(string_rep);
	verify(op_strcmp(string_rep, "table-caption") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY::SVGDISPLAY_NONE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY, SVGDISPLAY_NONE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "none") == 0);
}
test("Enum to string 'SVGENUM_ZOOM_AND_PAN::SVGZOOMANDPAN_DISABLE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ZOOM_AND_PAN, SVGZOOMANDPAN_DISABLE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "disable") == 0);
}
test("Enum to string 'SVGENUM_ZOOM_AND_PAN::SVGZOOMANDPAN_MAGNIFY'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ZOOM_AND_PAN, SVGZOOMANDPAN_MAGNIFY);
	verify(string_rep);
	verify(op_strcmp(string_rep, "magnify") == 0);
}
test("Enum to string 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_NORMAL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_WEIGHT, SVGFONTWEIGHT_NORMAL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "normal") == 0);
}
test("Enum to string 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_BOLD'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_WEIGHT, SVGFONTWEIGHT_BOLD);
	verify(string_rep);
	verify(op_strcmp(string_rep, "bold") == 0);
}
test("Enum to string 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_BOLDER'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_WEIGHT, SVGFONTWEIGHT_BOLDER);
	verify(string_rep);
	verify(op_strcmp(string_rep, "bolder") == 0);
}
test("Enum to string 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_LIGHTER'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_WEIGHT, SVGFONTWEIGHT_LIGHTER);
	verify(string_rep);
	verify(op_strcmp(string_rep, "lighter") == 0);
}
test("Enum to string 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_100'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_WEIGHT, SVGFONTWEIGHT_100);
	verify(string_rep);
	verify(op_strcmp(string_rep, "100") == 0);
}
test("Enum to string 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_200'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_WEIGHT, SVGFONTWEIGHT_200);
	verify(string_rep);
	verify(op_strcmp(string_rep, "200") == 0);
}
test("Enum to string 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_300'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_WEIGHT, SVGFONTWEIGHT_300);
	verify(string_rep);
	verify(op_strcmp(string_rep, "300") == 0);
}
test("Enum to string 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_400'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_WEIGHT, SVGFONTWEIGHT_400);
	verify(string_rep);
	verify(op_strcmp(string_rep, "400") == 0);
}
test("Enum to string 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_500'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_WEIGHT, SVGFONTWEIGHT_500);
	verify(string_rep);
	verify(op_strcmp(string_rep, "500") == 0);
}
test("Enum to string 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_600'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_WEIGHT, SVGFONTWEIGHT_600);
	verify(string_rep);
	verify(op_strcmp(string_rep, "600") == 0);
}
test("Enum to string 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_700'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_WEIGHT, SVGFONTWEIGHT_700);
	verify(string_rep);
	verify(op_strcmp(string_rep, "700") == 0);
}
test("Enum to string 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_800'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_WEIGHT, SVGFONTWEIGHT_800);
	verify(string_rep);
	verify(op_strcmp(string_rep, "800") == 0);
}
test("Enum to string 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_900'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_WEIGHT, SVGFONTWEIGHT_900);
	verify(string_rep);
	verify(op_strcmp(string_rep, "900") == 0);
}
test("Enum to string 'SVGENUM_FONT_STYLE::SVGFONTSTYLE_NORMAL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_STYLE, SVGFONTSTYLE_NORMAL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "normal") == 0);
}
test("Enum to string 'SVGENUM_FONT_STYLE::SVGFONTSTYLE_ITALIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_STYLE, SVGFONTSTYLE_ITALIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "italic") == 0);
}
test("Enum to string 'SVGENUM_FONT_STYLE::SVGFONTSTYLE_OBLIQUE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_STYLE, SVGFONTSTYLE_OBLIQUE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "oblique") == 0);
}
test("Enum to string 'SVGENUM_TEXT_ANCHOR::SVGTEXTANCHOR_START'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXT_ANCHOR, SVGTEXTANCHOR_START);
	verify(string_rep);
	verify(op_strcmp(string_rep, "start") == 0);
}
test("Enum to string 'SVGENUM_TEXT_ANCHOR::SVGTEXTANCHOR_MIDDLE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXT_ANCHOR, SVGTEXTANCHOR_MIDDLE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "middle") == 0);
}
test("Enum to string 'SVGENUM_TEXT_ANCHOR::SVGTEXTANCHOR_END'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXT_ANCHOR, SVGTEXTANCHOR_END);
	verify(string_rep);
	verify(op_strcmp(string_rep, "end") == 0);
}
test("Enum to string 'SVGENUM_FONT_VARIANT::SVGFONTVARIANT_NORMAL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_VARIANT, SVGFONTVARIANT_NORMAL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "normal") == 0);
}
test("Enum to string 'SVGENUM_FONT_VARIANT::SVGFONTVARIANT_SMALLCAPS'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FONT_VARIANT, SVGFONTVARIANT_SMALLCAPS);
	verify(string_rep);
	verify(op_strcmp(string_rep, "small-caps") == 0);
}
test("Enum to string 'SVGENUM_RESTART::SVGRESTART_ALWAYS'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_RESTART, SVGRESTART_ALWAYS);
	verify(string_rep);
	verify(op_strcmp(string_rep, "always") == 0);
}
test("Enum to string 'SVGENUM_RESTART::SVGRESTART_WHENNOTACTIVE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_RESTART, SVGRESTART_WHENNOTACTIVE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "whenNotActive") == 0);
}
test("Enum to string 'SVGENUM_RESTART::SVGRESTART_NEVER'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_RESTART, SVGRESTART_NEVER);
	verify(string_rep);
	verify(op_strcmp(string_rep, "never") == 0);
}
test("Enum to string 'SVGENUM_RESTART::SVGRESTART_UNKNOWN'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_RESTART, SVGRESTART_UNKNOWN);
	verify(string_rep);
	verify(op_strcmp(string_rep, "unknown") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVG'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_SVG);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#SVG") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVGDOM'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_SVGDOM);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#SVGDOM") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVGSTATIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_SVGSTATIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#SVG-static") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVGDOMSTATIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_SVGDOMSTATIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#SVGDOM-static") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVGANIMATION'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_SVGANIMATION);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#SVG-animation") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVGDOMANIMATION'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_SVGDOMANIMATION);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#SVGDOM-animation") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVGDYNAMIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_SVGDYNAMIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#SVG-dynamic") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVGDOMDYNAMIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_SVGDOMDYNAMIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#SVGDOM-dynamic") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_COREATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_COREATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#CoreAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_STRUCTURE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_STRUCTURE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Structure") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_CONTAINERATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_CONTAINERATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#ContainerAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_CONDITIONALPROCESSING'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_CONDITIONALPROCESSING);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#ConditionalProcessing") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_IMAGE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_IMAGE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Image") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_STYLE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_STYLE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Style") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_VIEWPORTATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_VIEWPORTATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#ViewportAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SHAPE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_SHAPE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Shape") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_TEXT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_TEXT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Text") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_PAINTATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_PAINTATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#PaintAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_OPACITYATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_OPACITYATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#OpacityAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_GRAPHICSATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_GRAPHICSATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#GraphicsAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_MARKER'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_MARKER);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Marker") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_COLORPROFILE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_COLORPROFILE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#ColorProfile") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_GRADIENT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_GRADIENT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Gradient") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_PATTERN'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_PATTERN);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Pattern") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_CLIP'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_CLIP);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Clip") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_MASK'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_MASK);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Mask") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_FILTER'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_FILTER);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Filter") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_DOCUMENTEVENTSATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_DOCUMENTEVENTSATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#DocumentEventsAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_GRAPHICALEVENTSATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_GRAPHICALEVENTSATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#GraphicalEventsAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_ANIMATIONEVENTSATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_ANIMATIONEVENTSATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#AnimationEventsAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_CURSOR'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_CURSOR);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Cursor") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_HYPERLINKING'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_HYPERLINKING);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Hyperlinking") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_XLINKATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_XLINKATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#XlinkAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_EXTERNALRESOURCESREQUIRED'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_EXTERNALRESOURCESREQUIRED);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#ExternalResourcesRequired") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_VIEW'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_VIEW);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#View") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SCRIPT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_SCRIPT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Script") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_ANIMATION'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_ANIMATION);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Animation") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_FONT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_FONT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Font") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_EXTENSIBILITY'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_EXTENSIBILITY);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#Extensibility") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_TINY_BASE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_TINY_BASE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#base") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_TINY_INTERACTIVITY'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_TINY_INTERACTIVITY);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#interactivity") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_TINY_ALL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_TINY_ALL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#all") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_ALL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_BASIC_ALL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVGMobile/Basic/feature#all") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_BASE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_BASIC_BASE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVGMobile/Basic/feature#base") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_CLIP'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_BASIC_CLIP);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#BasicClip") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_CSS'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_BASIC_CSS);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVGMobile/Basic/feature#css") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_DOMCORE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_BASIC_DOMCORE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVGMobile/Basic/feature#SVGBasicDomCore") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_DOMEXTENDED'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_BASIC_DOMEXTENDED);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVGMobile/Basic/feature#SVGBasicDomExtended") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_FILTER'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_BASIC_FILTER);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#BasicFilter") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_FONT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_BASIC_FONT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#BasicFont") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_GRAPHICSATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_BASIC_GRAPHICSATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#BasicGraphicsAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_INTERACTIVITY'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_BASIC_INTERACTIVITY);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVGMobile/Basic/feature#interactivity") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_PAINTATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_BASIC_PAINTATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#BasicPaintAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_STRUCTURE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_BASIC_STRUCTURE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#BasicStructure") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_TEXT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_BASIC_TEXT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/TR/SVG11/feature#BasicText") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_0);
	verify(string_rep);
	verify(op_strcmp(string_rep, "org.w3c.svg") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_STATIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_0_STATIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "org.w3c.svg.static") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_DYNAMIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_0_DYNAMIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "org.w3c.svg.dynamic") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_ANIMATION'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_0_ANIMATION);
	verify(string_rep);
	verify(op_strcmp(string_rep, "org.w3c.svg.animation") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_ALL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_0_ALL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "org.w3c.svg.all") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_DOM'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_0_DOM);
	verify(string_rep);
	verify(op_strcmp(string_rep, "org.w3c.dom.svg") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_DOM_STATIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_0_DOM_STATIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "org.w3c.dom.svg.static") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_DOM_DYNAMIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_0_DOM_DYNAMIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "org.w3c.dom.svg.dynamic") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_DOM_ANIMATION'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_0_DOM_ANIMATION);
	verify(string_rep);
	verify(op_strcmp(string_rep, "org.w3c.dom.svg.animation") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_DOM_ALL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_0_DOM_ALL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "org.w3c.dom.svg.all") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SVGSTATIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_SVGSTATIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#SVG-static") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SVGSTATICDOM'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_SVGSTATICDOM);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#SVG-static-DOM") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SVGANIMATED'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_SVGANIMATED);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#SVG-animated") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SVGINTERACTIVE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_SVGINTERACTIVE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#SVG-interactive") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SVGALL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_SVGALL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#SVG-all") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_CORE_ATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_CORE_ATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#CoreAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_NAVIGATION_ATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_NAVIGATION_ATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#NavigationAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_STRUCTURE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_STRUCTURE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Structure") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_CONDITIONAL_PROCESSING'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_CONDITIONAL_PROCESSING);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#ConditionalProcessing") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_CONDITIONAL_PROCESSING_ATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_CONDITIONAL_PROCESSING_ATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#ConditionalProcessingAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_IMAGE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_IMAGE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Image") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_PREFETCH'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_PREFETCH);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Prefetch") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_DISCARD'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_DISCARD);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Discard") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SHAPE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_SHAPE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Shape") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_TEXT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_TEXT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Text") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_PAINT_ATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_PAINT_ATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#PaintAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_OPACITY_ATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_OPACITY_ATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#OpacityAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_GRAPHICS_ATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_GRAPHICS_ATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#GraphicsAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_GRADIENT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_GRADIENT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Gradient") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SOLID_COLOR'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_SOLID_COLOR);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#SolidColor") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_HYPERLINKING'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_HYPERLINKING);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Hyperlinking") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_XLINK_ATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_XLINK_ATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#XlinkAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_EXTERNALRESOURCESREQUIRED'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_EXTERNALRESOURCESREQUIRED);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#ExternalResourcesRequired") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SCRIPTING'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_SCRIPTING);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Scripting") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_HANDLER'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_HANDLER);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Handler") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_LISTENER'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_LISTENER);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Listener") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_TIMEDANIMATION'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_TIMEDANIMATION);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#TimedAnimation") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_ANIMATION'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_ANIMATION);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Animation") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_AUDIO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_AUDIO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Audio") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_VIDEO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_VIDEO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Video") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_FONT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_FONT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Font") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_EXTENSIBILITY'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_EXTENSIBILITY);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#Extensibility") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_MEDIA_ATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_MEDIA_ATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#MediaAttribute") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_TEXTFLOW'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_TEXTFLOW);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#TextFlow") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_TRANSFORMEDVIDEO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_TRANSFORMEDVIDEO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#TransformedVideo") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_COMPOSEDVIDEO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_COMPOSEDVIDEO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#ComposedVideo") == 0);
}
test("Enum to string 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_EDITABLE_ATTRIBUTE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_REQUIREDFEATURES, SVGFEATURE_1_2_EDITABLE_ATTRIBUTE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "http://www.w3.org/Graphics/SVG/feature/1.2/#EditableTextAttribute") == 0);
}
test("Enum to string 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_VISIBLEPAINTED'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_POINTER_EVENTS, SVGPOINTEREVENTS_VISIBLEPAINTED);
	verify(string_rep);
	verify(op_strcmp(string_rep, "visiblePainted") == 0);
}
test("Enum to string 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_VISIBLEFILL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_POINTER_EVENTS, SVGPOINTEREVENTS_VISIBLEFILL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "visibleFill") == 0);
}
test("Enum to string 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_VISIBLESTROKE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_POINTER_EVENTS, SVGPOINTEREVENTS_VISIBLESTROKE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "visibleStroke") == 0);
}
test("Enum to string 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_VISIBLE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_POINTER_EVENTS, SVGPOINTEREVENTS_VISIBLE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "visible") == 0);
}
test("Enum to string 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_PAINTED'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_POINTER_EVENTS, SVGPOINTEREVENTS_PAINTED);
	verify(string_rep);
	verify(op_strcmp(string_rep, "painted") == 0);
}
test("Enum to string 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_FILL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_POINTER_EVENTS, SVGPOINTEREVENTS_FILL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "fill") == 0);
}
test("Enum to string 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_STROKE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_POINTER_EVENTS, SVGPOINTEREVENTS_STROKE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "stroke") == 0);
}
test("Enum to string 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_ALL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_POINTER_EVENTS, SVGPOINTEREVENTS_ALL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "all") == 0);
}
test("Enum to string 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_NONE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_POINTER_EVENTS, SVGPOINTEREVENTS_NONE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "none") == 0);
}
test("Enum to string 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_BOUNDINGBOX'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_POINTER_EVENTS, SVGPOINTEREVENTS_BOUNDINGBOX);
	verify(string_rep);
	verify(op_strcmp(string_rep, "boundingBox") == 0);
}
test("Enum to string 'SVGENUM_METHOD::SVGMETHOD_ALIGN'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_METHOD, SVGMETHOD_ALIGN);
	verify(string_rep);
	verify(op_strcmp(string_rep, "align") == 0);
}
test("Enum to string 'SVGENUM_METHOD::SVGMETHOD_STRETCH'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_METHOD, SVGMETHOD_STRETCH);
	verify(string_rep);
	verify(op_strcmp(string_rep, "stretch") == 0);
}
test("Enum to string 'SVGENUM_STITCHTILES::SVGSTITCH_STITCH'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_STITCHTILES, SVGSTITCH_STITCH);
	verify(string_rep);
	verify(op_strcmp(string_rep, "stitch") == 0);
}
test("Enum to string 'SVGENUM_STITCHTILES::SVGSTITCH_NOSTITCH'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_STITCHTILES, SVGSTITCH_NOSTITCH);
	verify(string_rep);
	verify(op_strcmp(string_rep, "noStitch") == 0);
}
test("Enum to string 'SVGENUM_DISPLACEMENTSELECTOR::SVGDISPLACEMENT_R'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLACEMENTSELECTOR, SVGDISPLACEMENT_R);
	verify(string_rep);
	verify(op_strcmp(string_rep, "R") == 0);
}
test("Enum to string 'SVGENUM_DISPLACEMENTSELECTOR::SVGDISPLACEMENT_G'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLACEMENTSELECTOR, SVGDISPLACEMENT_G);
	verify(string_rep);
	verify(op_strcmp(string_rep, "G") == 0);
}
test("Enum to string 'SVGENUM_DISPLACEMENTSELECTOR::SVGDISPLACEMENT_B'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLACEMENTSELECTOR, SVGDISPLACEMENT_B);
	verify(string_rep);
	verify(op_strcmp(string_rep, "B") == 0);
}
test("Enum to string 'SVGENUM_DISPLACEMENTSELECTOR::SVGDISPLACEMENT_A'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLACEMENTSELECTOR, SVGDISPLACEMENT_A);
	verify(string_rep);
	verify(op_strcmp(string_rep, "A") == 0);
}
test("Enum to string 'SVGENUM_CONVOLVEEDGEMODE::SVGCONVOLVEEDGEMODE_DUPLICATE'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CONVOLVEEDGEMODE, SVGCONVOLVEEDGEMODE_DUPLICATE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "duplicate") == 0);
}
test("Enum to string 'SVGENUM_CONVOLVEEDGEMODE::SVGCONVOLVEEDGEMODE_WRAP'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CONVOLVEEDGEMODE, SVGCONVOLVEEDGEMODE_WRAP);
	verify(string_rep);
	verify(op_strcmp(string_rep, "wrap") == 0);
}
test("Enum to string 'SVGENUM_CONVOLVEEDGEMODE::SVGCONVOLVEEDGEMODE_NONE'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CONVOLVEEDGEMODE, SVGCONVOLVEEDGEMODE_NONE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "none") == 0);
}
test("Enum to string 'SVGENUM_COMPOSITEOPERATOR::SVGCOMPOSITEOPERATOR_OVER'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_COMPOSITEOPERATOR, SVGCOMPOSITEOPERATOR_OVER);
	verify(string_rep);
	verify(op_strcmp(string_rep, "over") == 0);
}
test("Enum to string 'SVGENUM_COMPOSITEOPERATOR::SVGCOMPOSITEOPERATOR_IN'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_COMPOSITEOPERATOR, SVGCOMPOSITEOPERATOR_IN);
	verify(string_rep);
	verify(op_strcmp(string_rep, "in") == 0);
}
test("Enum to string 'SVGENUM_COMPOSITEOPERATOR::SVGCOMPOSITEOPERATOR_OUT'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_COMPOSITEOPERATOR, SVGCOMPOSITEOPERATOR_OUT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "out") == 0);
}
test("Enum to string 'SVGENUM_COMPOSITEOPERATOR::SVGCOMPOSITEOPERATOR_ATOP'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_COMPOSITEOPERATOR, SVGCOMPOSITEOPERATOR_ATOP);
	verify(string_rep);
	verify(op_strcmp(string_rep, "atop") == 0);
}
test("Enum to string 'SVGENUM_COMPOSITEOPERATOR::SVGCOMPOSITEOPERATOR_XOR'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_COMPOSITEOPERATOR, SVGCOMPOSITEOPERATOR_XOR);
	verify(string_rep);
	verify(op_strcmp(string_rep, "xor") == 0);
}
test("Enum to string 'SVGENUM_COMPOSITEOPERATOR::SVGCOMPOSITEOPERATOR_ARITHMETIC'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_COMPOSITEOPERATOR, SVGCOMPOSITEOPERATOR_ARITHMETIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "arithmetic") == 0);
}
test("Enum to string 'SVGENUM_MORPHOLOGYOPERATOR::SVGMORPHOPERATOR_ERODE'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_MORPHOLOGYOPERATOR, SVGMORPHOPERATOR_ERODE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "erode") == 0);
}
test("Enum to string 'SVGENUM_MORPHOLOGYOPERATOR::SVGMORPHOPERATOR_DILATE'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_MORPHOLOGYOPERATOR, SVGMORPHOPERATOR_DILATE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "dilate") == 0);
}
test("Enum to string 'SVGENUM_BLENDMODE::SVGBLENDMODE_NORMAL'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_BLENDMODE, SVGBLENDMODE_NORMAL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "normal") == 0);
}
test("Enum to string 'SVGENUM_BLENDMODE::SVGBLENDMODE_MULTIPLY'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_BLENDMODE, SVGBLENDMODE_MULTIPLY);
	verify(string_rep);
	verify(op_strcmp(string_rep, "multiply") == 0);
}
test("Enum to string 'SVGENUM_BLENDMODE::SVGBLENDMODE_SCREEN'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_BLENDMODE, SVGBLENDMODE_SCREEN);
	verify(string_rep);
	verify(op_strcmp(string_rep, "screen") == 0);
}
test("Enum to string 'SVGENUM_BLENDMODE::SVGBLENDMODE_DARKEN'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_BLENDMODE, SVGBLENDMODE_DARKEN);
	verify(string_rep);
	verify(op_strcmp(string_rep, "darken") == 0);
}
test("Enum to string 'SVGENUM_BLENDMODE::SVGBLENDMODE_LIGHTEN'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_BLENDMODE, SVGBLENDMODE_LIGHTEN);
	verify(string_rep);
	verify(op_strcmp(string_rep, "lighten") == 0);
}
test("Enum to string 'SVGENUM_TURBULENCETYPE::SVGTURBULENCE_FRACTALNOISE'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TURBULENCETYPE, SVGTURBULENCE_FRACTALNOISE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "fractalNoise") == 0);
}
test("Enum to string 'SVGENUM_TURBULENCETYPE::SVGTURBULENCE_TURBULENCE'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TURBULENCETYPE, SVGTURBULENCE_TURBULENCE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "turbulence") == 0);
}
test("Enum to string 'SVGENUM_COLORMATRIXTYPE::SVGCOLORMATRIX_MATRIX'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_COLORMATRIXTYPE, SVGCOLORMATRIX_MATRIX);
	verify(string_rep);
	verify(op_strcmp(string_rep, "matrix") == 0);
}
test("Enum to string 'SVGENUM_COLORMATRIXTYPE::SVGCOLORMATRIX_SATURATE'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_COLORMATRIXTYPE, SVGCOLORMATRIX_SATURATE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "saturate") == 0);
}
test("Enum to string 'SVGENUM_COLORMATRIXTYPE::SVGCOLORMATRIX_HUEROTATE'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_COLORMATRIXTYPE, SVGCOLORMATRIX_HUEROTATE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "hueRotate") == 0);
}
test("Enum to string 'SVGENUM_COLORMATRIXTYPE::SVGCOLORMATRIX_LUMINANCETOALPHA'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_COLORMATRIXTYPE, SVGCOLORMATRIX_LUMINANCETOALPHA);
	verify(string_rep);
	verify(op_strcmp(string_rep, "luminanceToAlpha") == 0);
}
test("Enum to string 'SVGENUM_FUNCTYPE::SVGFUNC_IDENTITY'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FUNCTYPE, SVGFUNC_IDENTITY);
	verify(string_rep);
	verify(op_strcmp(string_rep, "identity") == 0);
}
test("Enum to string 'SVGENUM_FUNCTYPE::SVGFUNC_TABLE'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FUNCTYPE, SVGFUNC_TABLE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "table") == 0);
}
test("Enum to string 'SVGENUM_FUNCTYPE::SVGFUNC_DISCRETE'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FUNCTYPE, SVGFUNC_DISCRETE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "discrete") == 0);
}
test("Enum to string 'SVGENUM_FUNCTYPE::SVGFUNC_LINEAR'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FUNCTYPE, SVGFUNC_LINEAR);
	verify(string_rep);
	verify(op_strcmp(string_rep, "linear") == 0);
}
test("Enum to string 'SVGENUM_FUNCTYPE::SVGFUNC_GAMMA'")
		require SVG_SUPPORT_FILTERS;
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FUNCTYPE, SVGFUNC_GAMMA);
	verify(string_rep);
	verify(op_strcmp(string_rep, "gamma") == 0);
}
test("Enum to string 'SVGENUM_BOOLEAN::FALSE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_BOOLEAN, FALSE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "false") == 0);
}
test("Enum to string 'SVGENUM_BOOLEAN::TRUE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_BOOLEAN, TRUE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "true") == 0);
}
test("Enum to string 'SVGENUM_LENGTHADJUST::SVGLENADJUST_SPACING'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_LENGTHADJUST, SVGLENADJUST_SPACING);
	verify(string_rep);
	verify(op_strcmp(string_rep, "spacing") == 0);
}
test("Enum to string 'SVGENUM_LENGTHADJUST::SVGLENADJUST_SPACINGANDGLYPHS'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_LENGTHADJUST, SVGLENADJUST_SPACINGANDGLYPHS);
	verify(string_rep);
	verify(op_strcmp(string_rep, "spacingAndGlyphs") == 0);
}
test("Enum to string 'SVGENUM_TEXTDECORATION::SVGTEXTDECORATION_NONE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXTDECORATION, SVGTEXTDECORATION_NONE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "none") == 0);
}
test("Enum to string 'SVGENUM_TEXTDECORATION::SVGTEXTDECORATION_UNDERLINE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXTDECORATION, SVGTEXTDECORATION_UNDERLINE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "underline") == 0);
}
test("Enum to string 'SVGENUM_TEXTDECORATION::SVGTEXTDECORATION_OVERLINE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXTDECORATION, SVGTEXTDECORATION_OVERLINE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "overline") == 0);
}
test("Enum to string 'SVGENUM_TEXTDECORATION::SVGTEXTDECORATION_LINETHROUGH'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXTDECORATION, SVGTEXTDECORATION_LINETHROUGH);
	verify(string_rep);
	verify(op_strcmp(string_rep, "line-through") == 0);
}
test("Enum to string 'SVGENUM_TEXTDECORATION::SVGTEXTDECORATION_BLINK'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXTDECORATION, SVGTEXTDECORATION_BLINK);
	verify(string_rep);
	verify(op_strcmp(string_rep, "blink") == 0);
}
test("Enum to string 'SVGENUM_SPACING::SVGSPACING_AUTO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_SPACING, SVGSPACING_AUTO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "auto") == 0);
}
test("Enum to string 'SVGENUM_SPACING::SVGSPACING_EXACT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_SPACING, SVGSPACING_EXACT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "exact") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_URI'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_URI);
	verify(string_rep);
	verify(op_strcmp(string_rep, "auto") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_CROSSHAIR'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_CROSSHAIR);
	verify(string_rep);
	verify(op_strcmp(string_rep, "crosshair") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_DEFAULT_ARROW'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_DEFAULT_ARROW);
	verify(string_rep);
	verify(op_strcmp(string_rep, "default") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_CUR_POINTER'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_CUR_POINTER);
	verify(string_rep);
	verify(op_strcmp(string_rep, "pointer") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_MOVE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_MOVE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "move") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_E_RESIZE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_E_RESIZE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "e-resize") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_NE_RESIZE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_NE_RESIZE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "ne-resize") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_NW_RESIZE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_NW_RESIZE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "nw-resize") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_N_RESIZE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_N_RESIZE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "n-resize") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_SE_RESIZE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_SE_RESIZE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "se-resize") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_SW_RESIZE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_SW_RESIZE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "sw-resize") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_S_RESIZE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_S_RESIZE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "s-resize") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_W_RESIZE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_W_RESIZE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "w-resize") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_TEXT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_TEXT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "text") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_WAIT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_WAIT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "wait") == 0);
}
test("Enum to string 'SVGENUM_CURSOR::CURSOR_HELP'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_CURSOR, CURSOR_HELP);
	verify(string_rep);
	verify(op_strcmp(string_rep, "help") == 0);
}
test("Enum to string 'SVGENUM_OVERFLOW::CSS_VALUE_visible'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_OVERFLOW, CSS_VALUE_visible);
	verify(string_rep);
	verify(op_strcmp(string_rep, "visible") == 0);
}
test("Enum to string 'SVGENUM_OVERFLOW::CSS_VALUE_hidden'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_OVERFLOW, CSS_VALUE_hidden);
	verify(string_rep);
	verify(op_strcmp(string_rep, "hidden") == 0);
}
test("Enum to string 'SVGENUM_OVERFLOW::CSS_VALUE_scroll'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_OVERFLOW, CSS_VALUE_scroll);
	verify(string_rep);
	verify(op_strcmp(string_rep, "scroll") == 0);
}
test("Enum to string 'SVGENUM_OVERFLOW::CSS_VALUE_auto'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_OVERFLOW, CSS_VALUE_auto);
	verify(string_rep);
	verify(op_strcmp(string_rep, "auto") == 0);
}
test("Enum to string 'SVGENUM_UNICODE_BIDI::CSS_VALUE_normal'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_UNICODE_BIDI, CSS_VALUE_normal);
	verify(string_rep);
	verify(op_strcmp(string_rep, "normal") == 0);
}
test("Enum to string 'SVGENUM_UNICODE_BIDI::CSS_VALUE_embed'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_UNICODE_BIDI, CSS_VALUE_embed);
	verify(string_rep);
	verify(op_strcmp(string_rep, "embed") == 0);
}
test("Enum to string 'SVGENUM_UNICODE_BIDI::CSS_VALUE_bidi_override'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_UNICODE_BIDI, CSS_VALUE_bidi_override);
	verify(string_rep);
	verify(op_strcmp(string_rep, "bidi-override") == 0);
}
test("Enum to string 'SVGENUM_WRITING_MODE::SVGWRITINGMODE_LR_TB'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_WRITING_MODE, SVGWRITINGMODE_LR_TB);
	verify(string_rep);
	verify(op_strcmp(string_rep, "lr-tb") == 0);
}
test("Enum to string 'SVGENUM_WRITING_MODE::SVGWRITINGMODE_RL_TB'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_WRITING_MODE, SVGWRITINGMODE_RL_TB);
	verify(string_rep);
	verify(op_strcmp(string_rep, "rl-tb") == 0);
}
test("Enum to string 'SVGENUM_WRITING_MODE::SVGWRITINGMODE_TB_RL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_WRITING_MODE, SVGWRITINGMODE_TB_RL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "tb-rl") == 0);
}
test("Enum to string 'SVGENUM_WRITING_MODE::SVGWRITINGMODE_LR'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_WRITING_MODE, SVGWRITINGMODE_LR);
	verify(string_rep);
	verify(op_strcmp(string_rep, "lr") == 0);
}
test("Enum to string 'SVGENUM_WRITING_MODE::SVGWRITINGMODE_RL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_WRITING_MODE, SVGWRITINGMODE_RL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "rl") == 0);
}
test("Enum to string 'SVGENUM_WRITING_MODE::SVGWRITINGMODE_TB'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_WRITING_MODE, SVGWRITINGMODE_TB);
	verify(string_rep);
	verify(op_strcmp(string_rep, "tb") == 0);
}
test("Enum to string 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_AUTO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ALIGNMENT_BASELINE, SVGALIGNMENTBASELINE_AUTO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "auto") == 0);
}
test("Enum to string 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_BASELINE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ALIGNMENT_BASELINE, SVGALIGNMENTBASELINE_BASELINE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "baseline") == 0);
}
test("Enum to string 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_BEFORE_EDGE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ALIGNMENT_BASELINE, SVGALIGNMENTBASELINE_BEFORE_EDGE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "before-edge") == 0);
}
test("Enum to string 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_TEXT_BEFORE_EDGE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ALIGNMENT_BASELINE, SVGALIGNMENTBASELINE_TEXT_BEFORE_EDGE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "text-before-edge") == 0);
}
test("Enum to string 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_MIDDLE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ALIGNMENT_BASELINE, SVGALIGNMENTBASELINE_MIDDLE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "middle") == 0);
}
test("Enum to string 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_CENTRAL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ALIGNMENT_BASELINE, SVGALIGNMENTBASELINE_CENTRAL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "central") == 0);
}
test("Enum to string 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_AFTER_EDGE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ALIGNMENT_BASELINE, SVGALIGNMENTBASELINE_AFTER_EDGE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "after-edge") == 0);
}
test("Enum to string 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_TEXT_AFTER_EDGE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ALIGNMENT_BASELINE, SVGALIGNMENTBASELINE_TEXT_AFTER_EDGE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "text-after-edge") == 0);
}
test("Enum to string 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_IDEOGRAPHIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ALIGNMENT_BASELINE, SVGALIGNMENTBASELINE_IDEOGRAPHIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "ideographic") == 0);
}
test("Enum to string 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_ALPHABETIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ALIGNMENT_BASELINE, SVGALIGNMENTBASELINE_ALPHABETIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "alphabetic") == 0);
}
test("Enum to string 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_HANGING'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ALIGNMENT_BASELINE, SVGALIGNMENTBASELINE_HANGING);
	verify(string_rep);
	verify(op_strcmp(string_rep, "hanging") == 0);
}
test("Enum to string 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_MATHEMATICAL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ALIGNMENT_BASELINE, SVGALIGNMENTBASELINE_MATHEMATICAL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "mathematical") == 0);
}
test("Enum to string 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_AUTO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DOMINANT_BASELINE, SVGDOMINANTBASELINE_AUTO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "auto") == 0);
}
test("Enum to string 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_USE_SCRIPT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DOMINANT_BASELINE, SVGDOMINANTBASELINE_USE_SCRIPT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "use-script") == 0);
}
test("Enum to string 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_NO_CHANGE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DOMINANT_BASELINE, SVGDOMINANTBASELINE_NO_CHANGE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "no-change") == 0);
}
test("Enum to string 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_RESET_SIZE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DOMINANT_BASELINE, SVGDOMINANTBASELINE_RESET_SIZE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "reset-size") == 0);
}
test("Enum to string 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_IDEOGRAPHIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DOMINANT_BASELINE, SVGDOMINANTBASELINE_IDEOGRAPHIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "ideographic") == 0);
}
test("Enum to string 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_ALPHABETIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DOMINANT_BASELINE, SVGDOMINANTBASELINE_ALPHABETIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "alphabetic") == 0);
}
test("Enum to string 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_HANGING'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DOMINANT_BASELINE, SVGDOMINANTBASELINE_HANGING);
	verify(string_rep);
	verify(op_strcmp(string_rep, "hanging") == 0);
}
test("Enum to string 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_MATHEMATICAL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DOMINANT_BASELINE, SVGDOMINANTBASELINE_MATHEMATICAL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "mathematical") == 0);
}
test("Enum to string 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_CENTRAL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DOMINANT_BASELINE, SVGDOMINANTBASELINE_CENTRAL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "central") == 0);
}
test("Enum to string 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_MIDDLE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DOMINANT_BASELINE, SVGDOMINANTBASELINE_MIDDLE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "middle") == 0);
}
test("Enum to string 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_TEXT_AFTER_EDGE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DOMINANT_BASELINE, SVGDOMINANTBASELINE_TEXT_AFTER_EDGE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "text-after-edge") == 0);
}
test("Enum to string 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_TEXT_BEFORE_EDGE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DOMINANT_BASELINE, SVGDOMINANTBASELINE_TEXT_BEFORE_EDGE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "text-before-edge") == 0);
}
test("Enum to string 'SVGENUM_ARABIC_FORM::SVGARABICFORM_INITIAL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ARABIC_FORM, SVGARABICFORM_INITIAL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "initial") == 0);
}
test("Enum to string 'SVGENUM_ARABIC_FORM::SVGARABICFORM_MEDIAL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ARABIC_FORM, SVGARABICFORM_MEDIAL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "medial") == 0);
}
test("Enum to string 'SVGENUM_ARABIC_FORM::SVGARABICFORM_TERMINAL'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ARABIC_FORM, SVGARABICFORM_TERMINAL);
	verify(string_rep);
	verify(op_strcmp(string_rep, "terminal") == 0);
}
test("Enum to string 'SVGENUM_ARABIC_FORM::SVGARABICFORM_ISOLATED'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_ARABIC_FORM, SVGARABICFORM_ISOLATED);
	verify(string_rep);
	verify(op_strcmp(string_rep, "isolated") == 0);
}
test("Enum to string 'SVGENUM_DIRECTION::CSS_VALUE_ltr'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DIRECTION, CSS_VALUE_ltr);
	verify(string_rep);
	verify(op_strcmp(string_rep, "ltr") == 0);
}
test("Enum to string 'SVGENUM_DIRECTION::CSS_VALUE_rtl'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DIRECTION, CSS_VALUE_rtl);
	verify(string_rep);
	verify(op_strcmp(string_rep, "rtl") == 0);
}
test("Enum to string 'SVGENUM_IMAGE_RENDERING::SVGIMAGERENDERING_AUTO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_IMAGE_RENDERING, SVGIMAGERENDERING_AUTO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "auto") == 0);
}
test("Enum to string 'SVGENUM_IMAGE_RENDERING::SVGIMAGERENDERING_OPTIMIZESPEED'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_IMAGE_RENDERING, SVGIMAGERENDERING_OPTIMIZESPEED);
	verify(string_rep);
	verify(op_strcmp(string_rep, "optimizeSpeed") == 0);
}
test("Enum to string 'SVGENUM_IMAGE_RENDERING::SVGIMAGERENDERING_OPTIMIZEQUALITY'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_IMAGE_RENDERING, SVGIMAGERENDERING_OPTIMIZEQUALITY);
	verify(string_rep);
	verify(op_strcmp(string_rep, "optimizeQuality") == 0);
}
test("Enum to string 'SVGENUM_MARKER_UNITS::SVGMARKERUNITS_STROKEWIDTH'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_MARKER_UNITS, SVGMARKERUNITS_STROKEWIDTH);
	verify(string_rep);
	verify(op_strcmp(string_rep, "strokeWidth") == 0);
}
test("Enum to string 'SVGENUM_MARKER_UNITS::SVGMARKERUNITS_USERSPACEONUSE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_MARKER_UNITS, SVGMARKERUNITS_USERSPACEONUSE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "userSpaceOnUse") == 0);
}
test("Enum to string 'SVGENUM_TEXT_RENDERING::SVGTEXTRENDERING_AUTO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXT_RENDERING, SVGTEXTRENDERING_AUTO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "auto") == 0);
}
test("Enum to string 'SVGENUM_TEXT_RENDERING::SVGTEXTRENDERING_OPTIMIZESPEED'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXT_RENDERING, SVGTEXTRENDERING_OPTIMIZESPEED);
	verify(string_rep);
	verify(op_strcmp(string_rep, "optimizeSpeed") == 0);
}
test("Enum to string 'SVGENUM_TEXT_RENDERING::SVGTEXTRENDERING_OPTIMIZELEGIBILITY'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXT_RENDERING, SVGTEXTRENDERING_OPTIMIZELEGIBILITY);
	verify(string_rep);
	verify(op_strcmp(string_rep, "optimizeLegibility") == 0);
}
test("Enum to string 'SVGENUM_TEXT_RENDERING::SVGTEXTRENDERING_GEOMETRICPRECISION'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXT_RENDERING, SVGTEXTRENDERING_GEOMETRICPRECISION);
	verify(string_rep);
	verify(op_strcmp(string_rep, "geometricPrecision") == 0);
}
test("Enum to string 'SVGENUM_COLOR_INTERPOLATION::SVGCOLORINTERPOLATION_AUTO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_COLOR_INTERPOLATION, SVGCOLORINTERPOLATION_AUTO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "auto") == 0);
}
test("Enum to string 'SVGENUM_COLOR_INTERPOLATION::SVGCOLORINTERPOLATION_SRGB'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_COLOR_INTERPOLATION, SVGCOLORINTERPOLATION_SRGB);
	verify(string_rep);
	verify(op_strcmp(string_rep, "sRGB") == 0);
}
test("Enum to string 'SVGENUM_COLOR_INTERPOLATION::SVGCOLORINTERPOLATION_LINEARRGB'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_COLOR_INTERPOLATION, SVGCOLORINTERPOLATION_LINEARRGB);
	verify(string_rep);
	verify(op_strcmp(string_rep, "linearRGB") == 0);
}
test("Enum to string 'SVGENUM_FOCUSABLE::SVGFOCUSABLE_TRUE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FOCUSABLE, SVGFOCUSABLE_TRUE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "true") == 0);
}
test("Enum to string 'SVGENUM_FOCUSABLE::SVGFOCUSABLE_FALSE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FOCUSABLE, SVGFOCUSABLE_FALSE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "false") == 0);
}
test("Enum to string 'SVGENUM_FOCUSABLE::SVGFOCUSABLE_AUTO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FOCUSABLE, SVGFOCUSABLE_AUTO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "auto") == 0);
}
test("Enum to string 'SVGENUM_VECTOR_EFFECT::SVGVECTOREFFECT_NONE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_VECTOR_EFFECT, SVGVECTOREFFECT_NONE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "none") == 0);
}
test("Enum to string 'SVGENUM_VECTOR_EFFECT::SVGVECTOREFFECT_NON_SCALING_STROKE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_VECTOR_EFFECT, SVGVECTOREFFECT_NON_SCALING_STROKE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "non-scaling-stroke") == 0);
}
test("Enum to string 'SVGENUM_FOCUSHIGHLIGHT::SVGFOCUSHIGHLIGHT_NONE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FOCUSHIGHLIGHT, SVGFOCUSHIGHLIGHT_NONE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "none") == 0);
}
test("Enum to string 'SVGENUM_FOCUSHIGHLIGHT::SVGFOCUSHIGHLIGHT_AUTO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_FOCUSHIGHLIGHT, SVGFOCUSHIGHLIGHT_AUTO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "auto") == 0);
}
test("Enum to string 'SVGENUM_INITIALVISIBILITY::SVGINITIALVISIBILITY_WHENSTARTED'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_INITIALVISIBILITY, SVGINITIALVISIBILITY_WHENSTARTED);
	verify(string_rep);
	verify(op_strcmp(string_rep, "whenStarted") == 0);
}
test("Enum to string 'SVGENUM_INITIALVISIBILITY::SVGINITIALVISIBILITY_ALWAYS'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_INITIALVISIBILITY, SVGINITIALVISIBILITY_ALWAYS);
	verify(string_rep);
	verify(op_strcmp(string_rep, "always") == 0);
}
test("Enum to string 'SVGENUM_TRANSFORMBEHAVIOR::SVGTRANSFORMBEHAVIOR_GEOMETRIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TRANSFORMBEHAVIOR, SVGTRANSFORMBEHAVIOR_GEOMETRIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "geometric") == 0);
}
test("Enum to string 'SVGENUM_TRANSFORMBEHAVIOR::SVGTRANSFORMBEHAVIOR_PINNED'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TRANSFORMBEHAVIOR, SVGTRANSFORMBEHAVIOR_PINNED);
	verify(string_rep);
	verify(op_strcmp(string_rep, "pinned") == 0);
}
test("Enum to string 'SVGENUM_TRANSFORMBEHAVIOR::SVGTRANSFORMBEHAVIOR_PINNED90'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TRANSFORMBEHAVIOR, SVGTRANSFORMBEHAVIOR_PINNED90);
	verify(string_rep);
	verify(op_strcmp(string_rep, "pinned90") == 0);
}
test("Enum to string 'SVGENUM_TRANSFORMBEHAVIOR::SVGTRANSFORMBEHAVIOR_PINNED180'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TRANSFORMBEHAVIOR, SVGTRANSFORMBEHAVIOR_PINNED180);
	verify(string_rep);
	verify(op_strcmp(string_rep, "pinned180") == 0);
}
test("Enum to string 'SVGENUM_TRANSFORMBEHAVIOR::SVGTRANSFORMBEHAVIOR_PINNED270'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TRANSFORMBEHAVIOR, SVGTRANSFORMBEHAVIOR_PINNED270);
	verify(string_rep);
	verify(op_strcmp(string_rep, "pinned270") == 0);
}
test("Enum to string 'SVGENUM_OVERLAY::SVGOVERLAY_TOP'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_OVERLAY, SVGOVERLAY_TOP);
	verify(string_rep);
	verify(op_strcmp(string_rep, "top") == 0);
}
test("Enum to string 'SVGENUM_OVERLAY::SVGOVERLAY_NONE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_OVERLAY, SVGOVERLAY_NONE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "none") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY_ALIGN::SVGDISPLAYALIGN_AUTO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY_ALIGN, SVGDISPLAYALIGN_AUTO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "auto") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY_ALIGN::SVGDISPLAYALIGN_BEFORE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY_ALIGN, SVGDISPLAYALIGN_BEFORE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "before") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY_ALIGN::SVGDISPLAYALIGN_CENTER'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY_ALIGN, SVGDISPLAYALIGN_CENTER);
	verify(string_rep);
	verify(op_strcmp(string_rep, "center") == 0);
}
test("Enum to string 'SVGENUM_DISPLAY_ALIGN::SVGDISPLAYALIGN_AFTER'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_DISPLAY_ALIGN, SVGDISPLAYALIGN_AFTER);
	verify(string_rep);
	verify(op_strcmp(string_rep, "after") == 0);
}
test("Enum to string 'SVGENUM_EDITABLE::SVGEDITABLE_NONE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_EDITABLE, SVGEDITABLE_NONE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "none") == 0);
}
test("Enum to string 'SVGENUM_EDITABLE::SVGEDITABLE_SIMPLE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_EDITABLE, SVGEDITABLE_SIMPLE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "simple") == 0);
}
test("Enum to string 'SVGENUM_TEXT_ALIGN::CSS_VALUE_start'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXT_ALIGN, CSS_VALUE_start);
	verify(string_rep);
	verify(op_strcmp(string_rep, "start") == 0);
}
test("Enum to string 'SVGENUM_TEXT_ALIGN::CSS_VALUE_center'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXT_ALIGN, CSS_VALUE_center);
	verify(string_rep);
	verify(op_strcmp(string_rep, "center") == 0);
}
test("Enum to string 'SVGENUM_TEXT_ALIGN::CSS_VALUE_end'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXT_ALIGN, CSS_VALUE_end);
	verify(string_rep);
	verify(op_strcmp(string_rep, "end") == 0);
}
test("Enum to string 'SVGENUM_TEXT_OVERFLOW::CSS_VALUE_clip'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXT_OVERFLOW, CSS_VALUE_clip);
	verify(string_rep);
	verify(op_strcmp(string_rep, "clip") == 0);
}
test("Enum to string 'SVGENUM_TEXT_OVERFLOW::CSS_VALUE_ellipsis'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TEXT_OVERFLOW, CSS_VALUE_ellipsis);
	verify(string_rep);
	verify(op_strcmp(string_rep, "ellipsis") == 0);
}
test("Enum to string 'SVGENUM_AUTO::SVGAUTO_AUTO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_AUTO, SVGAUTO_AUTO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "auto") == 0);
}
test("Enum to string 'SVGENUM_SYNCBEHAVIOR::SVGSYNCBEHAVIOR_CANSLIP'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_SYNCBEHAVIOR, SVGSYNCBEHAVIOR_CANSLIP);
	verify(string_rep);
	verify(op_strcmp(string_rep, "canSlip") == 0);
}
test("Enum to string 'SVGENUM_SYNCBEHAVIOR::SVGSYNCBEHAVIOR_LOCKED'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_SYNCBEHAVIOR, SVGSYNCBEHAVIOR_LOCKED);
	verify(string_rep);
	verify(op_strcmp(string_rep, "locked") == 0);
}
test("Enum to string 'SVGENUM_SYNCBEHAVIOR::SVGSYNCBEHAVIOR_INDEPENDENT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_SYNCBEHAVIOR, SVGSYNCBEHAVIOR_INDEPENDENT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "independent") == 0);
}
test("Enum to string 'SVGENUM_SYNCBEHAVIOR::SVGSYNCBEHAVIOR_DEFAULT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_SYNCBEHAVIOR, SVGSYNCBEHAVIOR_DEFAULT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "default") == 0);
}
test("Enum to string 'SVGENUM_SYNCBEHAVIOR::SVGSYNCBEHAVIOR_INHERIT'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_SYNCBEHAVIOR, SVGSYNCBEHAVIOR_INHERIT);
	verify(string_rep);
	verify(op_strcmp(string_rep, "inherit") == 0);
}
test("Enum to string 'SVGENUM_NONE::SVGSNAPSHOTTIME_NONE'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_NONE, SVGSNAPSHOTTIME_NONE);
	verify(string_rep);
	verify(op_strcmp(string_rep, "none") == 0);
}
test("Enum to string 'SVGENUM_SHAPE_RENDERING::SVGSHAPERENDERING_AUTO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_SHAPE_RENDERING, SVGSHAPERENDERING_AUTO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "auto") == 0);
}
test("Enum to string 'SVGENUM_SHAPE_RENDERING::SVGSHAPERENDERING_OPTIMIZESPEED'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_SHAPE_RENDERING, SVGSHAPERENDERING_OPTIMIZESPEED);
	verify(string_rep);
	verify(op_strcmp(string_rep, "optimizeSpeed") == 0);
}
test("Enum to string 'SVGENUM_SHAPE_RENDERING::SVGSHAPERENDERING_CRISPEDGES'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_SHAPE_RENDERING, SVGSHAPERENDERING_CRISPEDGES);
	verify(string_rep);
	verify(op_strcmp(string_rep, "crispEdges") == 0);
}
test("Enum to string 'SVGENUM_SHAPE_RENDERING::SVGSHAPERENDERING_GEOMETRICPRECISION'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_SHAPE_RENDERING, SVGSHAPERENDERING_GEOMETRICPRECISION);
	verify(string_rep);
	verify(op_strcmp(string_rep, "geometricPrecision") == 0);
}
test("Enum to string 'SVGENUM_BUFFERED_RENDERING::SVGBUFFEREDRENDERING_AUTO'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_BUFFERED_RENDERING, SVGBUFFEREDRENDERING_AUTO);
	verify(string_rep);
	verify(op_strcmp(string_rep, "auto") == 0);
}
test("Enum to string 'SVGENUM_BUFFERED_RENDERING::SVGBUFFEREDRENDERING_STATIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_BUFFERED_RENDERING, SVGBUFFEREDRENDERING_STATIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "static") == 0);
}
test("Enum to string 'SVGENUM_BUFFERED_RENDERING::SVGBUFFEREDRENDERING_DYNAMIC'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_BUFFERED_RENDERING, SVGBUFFEREDRENDERING_DYNAMIC);
	verify(string_rep);
	verify(op_strcmp(string_rep, "dynamic") == 0);
}
test("Enum to string 'SVGENUM_TIMELINEBEGIN::SVGTIMELINEBEGIN_ONLOAD'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TIMELINEBEGIN, SVGTIMELINEBEGIN_ONLOAD);
	verify(string_rep);
	verify(op_strcmp(string_rep, "onLoad") == 0);
}
test("Enum to string 'SVGENUM_TIMELINEBEGIN::SVGTIMELINEBEGIN_ONSTART'")
{
	const char* string_rep = SVGEnumUtils::GetEnumName(SVGENUM_TIMELINEBEGIN, SVGTIMELINEBEGIN_ONSTART);
	verify(string_rep);
	verify(op_strcmp(string_rep, "onStart") == 0);
}
test("String to enum 'SVGENUM_SPREAD_METHOD_TYPE::SVGSPREAD_PAD'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_SPREAD_METHOD_TYPE, UNI_L("pad"), 3);
	verify(int_val != -1);
	verify(int_val == SVGSPREAD_PAD);
}
test("String to enum 'SVGENUM_SPREAD_METHOD_TYPE::SVGSPREAD_REFLECT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_SPREAD_METHOD_TYPE, UNI_L("reflect"), 7);
	verify(int_val != -1);
	verify(int_val == SVGSPREAD_REFLECT);
}
test("String to enum 'SVGENUM_SPREAD_METHOD_TYPE::SVGSPREAD_REPEAT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_SPREAD_METHOD_TYPE, UNI_L("repeat"), 6);
	verify(int_val != -1);
	verify(int_val == SVGSPREAD_REPEAT);
}
test("String to enum 'SVGENUM_UNITS_TYPE::SVGUNITS_USERSPACEONUSE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_UNITS_TYPE, UNI_L("userSpaceOnUse"), 14);
	verify(int_val != -1);
	verify(int_val == SVGUNITS_USERSPACEONUSE);
}
test("String to enum 'SVGENUM_UNITS_TYPE::SVGUNITS_OBJECTBBOX'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_UNITS_TYPE, UNI_L("objectBoundingBox"), 17);
	verify(int_val != -1);
	verify(int_val == SVGUNITS_OBJECTBBOX);
}
test("String to enum 'SVGENUM_TRANSFORM_TYPE::SVGTRANSFORM_MATRIX'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TRANSFORM_TYPE, UNI_L("matrix"), 6);
	verify(int_val != -1);
	verify(int_val == SVGTRANSFORM_MATRIX);
}
test("String to enum 'SVGENUM_TRANSFORM_TYPE::SVGTRANSFORM_TRANSLATE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TRANSFORM_TYPE, UNI_L("translate"), 9);
	verify(int_val != -1);
	verify(int_val == SVGTRANSFORM_TRANSLATE);
}
test("String to enum 'SVGENUM_TRANSFORM_TYPE::SVGTRANSFORM_ROTATE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TRANSFORM_TYPE, UNI_L("rotate"), 6);
	verify(int_val != -1);
	verify(int_val == SVGTRANSFORM_ROTATE);
}
test("String to enum 'SVGENUM_TRANSFORM_TYPE::SVGTRANSFORM_SCALE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TRANSFORM_TYPE, UNI_L("scale"), 5);
	verify(int_val != -1);
	verify(int_val == SVGTRANSFORM_SCALE);
}
test("String to enum 'SVGENUM_TRANSFORM_TYPE::SVGTRANSFORM_SKEWX'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TRANSFORM_TYPE, UNI_L("skewX"), 5);
	verify(int_val != -1);
	verify(int_val == SVGTRANSFORM_SKEWX);
}
test("String to enum 'SVGENUM_TRANSFORM_TYPE::SVGTRANSFORM_SKEWY'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TRANSFORM_TYPE, UNI_L("skewY"), 5);
	verify(int_val != -1);
	verify(int_val == SVGTRANSFORM_SKEWY);
}
test("String to enum 'SVGENUM_ATTRIBUTE_TYPE::SVGATTRIBUTE_CSS'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ATTRIBUTE_TYPE, UNI_L("CSS"), 3);
	verify(int_val != -1);
	verify(int_val == SVGATTRIBUTE_CSS);
}
test("String to enum 'SVGENUM_ATTRIBUTE_TYPE::SVGATTRIBUTE_XML'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ATTRIBUTE_TYPE, UNI_L("XML"), 3);
	verify(int_val != -1);
	verify(int_val == SVGATTRIBUTE_XML);
}
test("String to enum 'SVGENUM_ATTRIBUTE_TYPE::SVGATTRIBUTE_AUTO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ATTRIBUTE_TYPE, UNI_L("auto"), 4);
	verify(int_val != -1);
	verify(int_val == SVGATTRIBUTE_AUTO);
}
test("String to enum 'SVGENUM_CALCMODE::SVGCALCMODE_DISCRETE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CALCMODE, UNI_L("discrete"), 8);
	verify(int_val != -1);
	verify(int_val == SVGCALCMODE_DISCRETE);
}
test("String to enum 'SVGENUM_CALCMODE::SVGCALCMODE_LINEAR'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CALCMODE, UNI_L("linear"), 6);
	verify(int_val != -1);
	verify(int_val == SVGCALCMODE_LINEAR);
}
test("String to enum 'SVGENUM_CALCMODE::SVGCALCMODE_SPLINE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CALCMODE, UNI_L("spline"), 6);
	verify(int_val != -1);
	verify(int_val == SVGCALCMODE_SPLINE);
}
test("String to enum 'SVGENUM_CALCMODE::SVGCALCMODE_PACED'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CALCMODE, UNI_L("paced"), 5);
	verify(int_val != -1);
	verify(int_val == SVGCALCMODE_PACED);
}
test("String to enum 'SVGENUM_VISIBILITY::SVGVISIBILITY_VISIBLE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_VISIBILITY, UNI_L("visible"), 7);
	verify(int_val != -1);
	verify(int_val == SVGVISIBILITY_VISIBLE);
}
test("String to enum 'SVGENUM_VISIBILITY::SVGVISIBILITY_HIDDEN'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_VISIBILITY, UNI_L("hidden"), 6);
	verify(int_val != -1);
	verify(int_val == SVGVISIBILITY_HIDDEN);
}
test("String to enum 'SVGENUM_VISIBILITY::SVGVISIBILITY_COLLAPSE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_VISIBILITY, UNI_L("collapse"), 8);
	verify(int_val != -1);
	verify(int_val == SVGVISIBILITY_COLLAPSE);
}
test("String to enum 'SVGENUM_ANIMATEFILLTYPE::SVGANIMATEFILL_FREEZE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ANIMATEFILLTYPE, UNI_L("freeze"), 6);
	verify(int_val != -1);
	verify(int_val == SVGANIMATEFILL_FREEZE);
}
test("String to enum 'SVGENUM_ANIMATEFILLTYPE::SVGANIMATEFILL_REMOVE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ANIMATEFILLTYPE, UNI_L("remove"), 6);
	verify(int_val != -1);
	verify(int_val == SVGANIMATEFILL_REMOVE);
}
test("String to enum 'SVGENUM_ADDITIVE::SVGADDITIVE_REPLACE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ADDITIVE, UNI_L("replace"), 7);
	verify(int_val != -1);
	verify(int_val == SVGADDITIVE_REPLACE);
}
test("String to enum 'SVGENUM_ADDITIVE::SVGADDITIVE_SUM'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ADDITIVE, UNI_L("sum"), 3);
	verify(int_val != -1);
	verify(int_val == SVGADDITIVE_SUM);
}
test("String to enum 'SVGENUM_ACCUMULATE::SVGACCUMULATE_NONE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ACCUMULATE, UNI_L("none"), 4);
	verify(int_val != -1);
	verify(int_val == SVGACCUMULATE_NONE);
}
test("String to enum 'SVGENUM_ACCUMULATE::SVGACCUMULATE_SUM'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ACCUMULATE, UNI_L("sum"), 3);
	verify(int_val != -1);
	verify(int_val == SVGACCUMULATE_SUM);
}
test("String to enum 'SVGENUM_FILL_RULE::SVGFILL_EVEN_ODD'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FILL_RULE, UNI_L("evenodd"), 7);
	verify(int_val != -1);
	verify(int_val == SVGFILL_EVEN_ODD);
}
test("String to enum 'SVGENUM_FILL_RULE::SVGFILL_NON_ZERO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FILL_RULE, UNI_L("nonzero"), 7);
	verify(int_val != -1);
	verify(int_val == SVGFILL_NON_ZERO);
}
test("String to enum 'SVGENUM_STROKE_LINECAP::SVGCAP_BUTT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_STROKE_LINECAP, UNI_L("butt"), 4);
	verify(int_val != -1);
	verify(int_val == SVGCAP_BUTT);
}
test("String to enum 'SVGENUM_STROKE_LINECAP::SVGCAP_ROUND'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_STROKE_LINECAP, UNI_L("round"), 5);
	verify(int_val != -1);
	verify(int_val == SVGCAP_ROUND);
}
test("String to enum 'SVGENUM_STROKE_LINECAP::SVGCAP_SQUARE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_STROKE_LINECAP, UNI_L("square"), 6);
	verify(int_val != -1);
	verify(int_val == SVGCAP_SQUARE);
}
test("String to enum 'SVGENUM_STROKE_LINEJOIN::SVGJOIN_MITER'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_STROKE_LINEJOIN, UNI_L("miter"), 5);
	verify(int_val != -1);
	verify(int_val == SVGJOIN_MITER);
}
test("String to enum 'SVGENUM_STROKE_LINEJOIN::SVGJOIN_ROUND'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_STROKE_LINEJOIN, UNI_L("round"), 5);
	verify(int_val != -1);
	verify(int_val == SVGJOIN_ROUND);
}
test("String to enum 'SVGENUM_STROKE_LINEJOIN::SVGJOIN_BEVEL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_STROKE_LINEJOIN, UNI_L("bevel"), 5);
	verify(int_val != -1);
	verify(int_val == SVGJOIN_BEVEL);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_INLINE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("inline"), 6);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_INLINE);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_BLOCK'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("block"), 5);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_BLOCK);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_LISTITEM'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("list-item"), 9);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_LISTITEM);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_RUNIN'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("run-in"), 6);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_RUNIN);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_COMPACT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("compact"), 7);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_COMPACT);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_MARKER'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("marker"), 6);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_MARKER);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_TABLE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("table"), 5);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_TABLE);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_INLINETABLE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("inline-table"), 12);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_INLINETABLE);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_TABLEROWGROUP'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("table-row-group"), 15);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_TABLEROWGROUP);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_TABLEHEADERGROUP'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("table-header-group"), 18);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_TABLEHEADERGROUP);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_TABLEFOOTERGROUP'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("table-footer-group"), 18);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_TABLEFOOTERGROUP);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_TABLEROW'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("table-row"), 9);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_TABLEROW);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_TABLECOLUMNGROUP'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("table-column-group"), 18);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_TABLECOLUMNGROUP);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_TABLECOLUMN'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("table-column"), 12);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_TABLECOLUMN);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_TABLECELL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("table-cell"), 10);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_TABLECELL);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_TABLECAPTION'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("table-caption"), 13);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_TABLECAPTION);
}
test("String to enum 'SVGENUM_DISPLAY::SVGDISPLAY_NONE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY, UNI_L("none"), 4);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAY_NONE);
}
test("String to enum 'SVGENUM_ZOOM_AND_PAN::SVGZOOMANDPAN_DISABLE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ZOOM_AND_PAN, UNI_L("disable"), 7);
	verify(int_val != -1);
	verify(int_val == SVGZOOMANDPAN_DISABLE);
}
test("String to enum 'SVGENUM_ZOOM_AND_PAN::SVGZOOMANDPAN_MAGNIFY'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ZOOM_AND_PAN, UNI_L("magnify"), 7);
	verify(int_val != -1);
	verify(int_val == SVGZOOMANDPAN_MAGNIFY);
}
test("String to enum 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_NORMAL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_WEIGHT, UNI_L("normal"), 6);
	verify(int_val != -1);
	verify(int_val == SVGFONTWEIGHT_NORMAL);
}
test("String to enum 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_BOLD'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_WEIGHT, UNI_L("bold"), 4);
	verify(int_val != -1);
	verify(int_val == SVGFONTWEIGHT_BOLD);
}
test("String to enum 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_BOLDER'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_WEIGHT, UNI_L("bolder"), 6);
	verify(int_val != -1);
	verify(int_val == SVGFONTWEIGHT_BOLDER);
}
test("String to enum 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_LIGHTER'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_WEIGHT, UNI_L("lighter"), 7);
	verify(int_val != -1);
	verify(int_val == SVGFONTWEIGHT_LIGHTER);
}
test("String to enum 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_100'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_WEIGHT, UNI_L("100"), 3);
	verify(int_val != -1);
	verify(int_val == SVGFONTWEIGHT_100);
}
test("String to enum 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_200'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_WEIGHT, UNI_L("200"), 3);
	verify(int_val != -1);
	verify(int_val == SVGFONTWEIGHT_200);
}
test("String to enum 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_300'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_WEIGHT, UNI_L("300"), 3);
	verify(int_val != -1);
	verify(int_val == SVGFONTWEIGHT_300);
}
test("String to enum 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_400'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_WEIGHT, UNI_L("400"), 3);
	verify(int_val != -1);
	verify(int_val == SVGFONTWEIGHT_400);
}
test("String to enum 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_500'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_WEIGHT, UNI_L("500"), 3);
	verify(int_val != -1);
	verify(int_val == SVGFONTWEIGHT_500);
}
test("String to enum 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_600'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_WEIGHT, UNI_L("600"), 3);
	verify(int_val != -1);
	verify(int_val == SVGFONTWEIGHT_600);
}
test("String to enum 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_700'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_WEIGHT, UNI_L("700"), 3);
	verify(int_val != -1);
	verify(int_val == SVGFONTWEIGHT_700);
}
test("String to enum 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_800'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_WEIGHT, UNI_L("800"), 3);
	verify(int_val != -1);
	verify(int_val == SVGFONTWEIGHT_800);
}
test("String to enum 'SVGENUM_FONT_WEIGHT::SVGFONTWEIGHT_900'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_WEIGHT, UNI_L("900"), 3);
	verify(int_val != -1);
	verify(int_val == SVGFONTWEIGHT_900);
}
test("String to enum 'SVGENUM_FONT_STYLE::SVGFONTSTYLE_NORMAL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_STYLE, UNI_L("normal"), 6);
	verify(int_val != -1);
	verify(int_val == SVGFONTSTYLE_NORMAL);
}
test("String to enum 'SVGENUM_FONT_STYLE::SVGFONTSTYLE_ITALIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_STYLE, UNI_L("italic"), 6);
	verify(int_val != -1);
	verify(int_val == SVGFONTSTYLE_ITALIC);
}
test("String to enum 'SVGENUM_FONT_STYLE::SVGFONTSTYLE_OBLIQUE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_STYLE, UNI_L("oblique"), 7);
	verify(int_val != -1);
	verify(int_val == SVGFONTSTYLE_OBLIQUE);
}
test("String to enum 'SVGENUM_TEXT_ANCHOR::SVGTEXTANCHOR_START'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXT_ANCHOR, UNI_L("start"), 5);
	verify(int_val != -1);
	verify(int_val == SVGTEXTANCHOR_START);
}
test("String to enum 'SVGENUM_TEXT_ANCHOR::SVGTEXTANCHOR_MIDDLE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXT_ANCHOR, UNI_L("middle"), 6);
	verify(int_val != -1);
	verify(int_val == SVGTEXTANCHOR_MIDDLE);
}
test("String to enum 'SVGENUM_TEXT_ANCHOR::SVGTEXTANCHOR_END'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXT_ANCHOR, UNI_L("end"), 3);
	verify(int_val != -1);
	verify(int_val == SVGTEXTANCHOR_END);
}
test("String to enum 'SVGENUM_FONT_VARIANT::SVGFONTVARIANT_NORMAL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_VARIANT, UNI_L("normal"), 6);
	verify(int_val != -1);
	verify(int_val == SVGFONTVARIANT_NORMAL);
}
test("String to enum 'SVGENUM_FONT_VARIANT::SVGFONTVARIANT_SMALLCAPS'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FONT_VARIANT, UNI_L("small-caps"), 10);
	verify(int_val != -1);
	verify(int_val == SVGFONTVARIANT_SMALLCAPS);
}
test("String to enum 'SVGENUM_RESTART::SVGRESTART_ALWAYS'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_RESTART, UNI_L("always"), 6);
	verify(int_val != -1);
	verify(int_val == SVGRESTART_ALWAYS);
}
test("String to enum 'SVGENUM_RESTART::SVGRESTART_WHENNOTACTIVE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_RESTART, UNI_L("whenNotActive"), 13);
	verify(int_val != -1);
	verify(int_val == SVGRESTART_WHENNOTACTIVE);
}
test("String to enum 'SVGENUM_RESTART::SVGRESTART_NEVER'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_RESTART, UNI_L("never"), 5);
	verify(int_val != -1);
	verify(int_val == SVGRESTART_NEVER);
}
test("String to enum 'SVGENUM_RESTART::SVGRESTART_UNKNOWN'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_RESTART, UNI_L("unknown"), 7);
	verify(int_val != -1);
	verify(int_val == SVGRESTART_UNKNOWN);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVG'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#SVG"), 38);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_SVG);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVGDOM'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#SVGDOM"), 41);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_SVGDOM);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVGSTATIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#SVG-static"), 45);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_SVGSTATIC);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVGDOMSTATIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#SVGDOM-static"), 48);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_SVGDOMSTATIC);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVGANIMATION'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#SVG-animation"), 48);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_SVGANIMATION);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVGDOMANIMATION'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#SVGDOM-animation"), 51);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_SVGDOMANIMATION);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVGDYNAMIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#SVG-dynamic"), 46);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_SVGDYNAMIC);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SVGDOMDYNAMIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#SVGDOM-dynamic"), 49);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_SVGDOMDYNAMIC);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_COREATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#CoreAttribute"), 48);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_COREATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_STRUCTURE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Structure"), 44);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_STRUCTURE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_CONTAINERATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#ContainerAttribute"), 53);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_CONTAINERATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_CONDITIONALPROCESSING'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#ConditionalProcessing"), 56);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_CONDITIONALPROCESSING);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_IMAGE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Image"), 40);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_IMAGE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_STYLE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Style"), 40);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_STYLE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_VIEWPORTATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#ViewportAttribute"), 52);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_VIEWPORTATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SHAPE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Shape"), 40);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_SHAPE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_TEXT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Text"), 39);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_TEXT);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_PAINTATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#PaintAttribute"), 49);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_PAINTATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_OPACITYATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#OpacityAttribute"), 51);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_OPACITYATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_GRAPHICSATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#GraphicsAttribute"), 52);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_GRAPHICSATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_MARKER'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Marker"), 41);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_MARKER);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_COLORPROFILE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#ColorProfile"), 47);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_COLORPROFILE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_GRADIENT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Gradient"), 43);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_GRADIENT);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_PATTERN'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Pattern"), 42);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_PATTERN);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_CLIP'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Clip"), 39);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_CLIP);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_MASK'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Mask"), 39);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_MASK);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_FILTER'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Filter"), 41);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_FILTER);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_DOCUMENTEVENTSATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#DocumentEventsAttribute"), 58);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_DOCUMENTEVENTSATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_GRAPHICALEVENTSATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#GraphicalEventsAttribute"), 59);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_GRAPHICALEVENTSATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_ANIMATIONEVENTSATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#AnimationEventsAttribute"), 59);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_ANIMATIONEVENTSATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_CURSOR'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Cursor"), 41);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_CURSOR);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_HYPERLINKING'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Hyperlinking"), 47);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_HYPERLINKING);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_XLINKATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#XlinkAttribute"), 49);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_XLINKATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_EXTERNALRESOURCESREQUIRED'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#ExternalResourcesRequired"), 60);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_EXTERNALRESOURCESREQUIRED);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_VIEW'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#View"), 39);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_VIEW);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_SCRIPT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Script"), 41);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_SCRIPT);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_ANIMATION'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Animation"), 44);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_ANIMATION);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_FONT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Font"), 39);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_FONT);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_EXTENSIBILITY'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#Extensibility"), 48);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_EXTENSIBILITY);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_TINY_BASE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#base"), 39);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_TINY_BASE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_TINY_INTERACTIVITY'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#interactivity"), 48);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_TINY_INTERACTIVITY);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_TINY_ALL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#all"), 38);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_TINY_ALL);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_ALL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVGMobile/Basic/feature#all"), 48);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_BASIC_ALL);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_BASE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVGMobile/Basic/feature#base"), 49);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_BASIC_BASE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_CLIP'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#BasicClip"), 44);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_BASIC_CLIP);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_CSS'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVGMobile/Basic/feature#css"), 48);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_BASIC_CSS);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_DOMCORE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVGMobile/Basic/feature#SVGBasicDomCore"), 60);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_BASIC_DOMCORE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_DOMEXTENDED'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVGMobile/Basic/feature#SVGBasicDomExtended"), 64);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_BASIC_DOMEXTENDED);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_FILTER'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#BasicFilter"), 46);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_BASIC_FILTER);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_FONT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#BasicFont"), 44);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_BASIC_FONT);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_GRAPHICSATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#BasicGraphicsAttribute"), 57);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_BASIC_GRAPHICSATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_INTERACTIVITY'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVGMobile/Basic/feature#interactivity"), 58);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_BASIC_INTERACTIVITY);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_PAINTATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#BasicPaintAttribute"), 54);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_BASIC_PAINTATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_STRUCTURE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#BasicStructure"), 49);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_BASIC_STRUCTURE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_BASIC_TEXT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/TR/SVG11/feature#BasicText"), 44);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_BASIC_TEXT);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("org.w3c.svg"), 11);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_0);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_STATIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("org.w3c.svg.static"), 18);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_0_STATIC);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_DYNAMIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("org.w3c.svg.dynamic"), 19);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_0_DYNAMIC);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_ANIMATION'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("org.w3c.svg.animation"), 21);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_0_ANIMATION);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_ALL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("org.w3c.svg.all"), 15);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_0_ALL);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_DOM'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("org.w3c.dom.svg"), 15);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_0_DOM);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_DOM_STATIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("org.w3c.dom.svg.static"), 22);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_0_DOM_STATIC);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_DOM_DYNAMIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("org.w3c.dom.svg.dynamic"), 23);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_0_DOM_DYNAMIC);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_DOM_ANIMATION'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("org.w3c.dom.svg.animation"), 25);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_0_DOM_ANIMATION);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_0_DOM_ALL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("org.w3c.dom.svg.all"), 19);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_0_DOM_ALL);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SVGSTATIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#SVG-static"), 54);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_SVGSTATIC);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SVGSTATICDOM'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#SVG-static-DOM"), 58);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_SVGSTATICDOM);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SVGANIMATED'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#SVG-animated"), 56);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_SVGANIMATED);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SVGINTERACTIVE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#SVG-interactive"), 59);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_SVGINTERACTIVE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SVGALL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#SVG-all"), 51);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_SVGALL);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_CORE_ATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#CoreAttribute"), 57);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_CORE_ATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_NAVIGATION_ATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#NavigationAttribute"), 63);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_NAVIGATION_ATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_STRUCTURE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Structure"), 53);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_STRUCTURE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_CONDITIONAL_PROCESSING'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#ConditionalProcessing"), 65);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_CONDITIONAL_PROCESSING);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_CONDITIONAL_PROCESSING_ATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#ConditionalProcessingAttribute"), 74);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_CONDITIONAL_PROCESSING_ATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_IMAGE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Image"), 49);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_IMAGE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_PREFETCH'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Prefetch"), 52);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_PREFETCH);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_DISCARD'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Discard"), 51);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_DISCARD);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SHAPE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Shape"), 49);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_SHAPE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_TEXT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Text"), 48);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_TEXT);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_PAINT_ATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#PaintAttribute"), 58);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_PAINT_ATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_OPACITY_ATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#OpacityAttribute"), 60);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_OPACITY_ATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_GRAPHICS_ATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#GraphicsAttribute"), 61);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_GRAPHICS_ATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_GRADIENT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Gradient"), 52);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_GRADIENT);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SOLID_COLOR'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#SolidColor"), 54);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_SOLID_COLOR);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_HYPERLINKING'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Hyperlinking"), 56);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_HYPERLINKING);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_XLINK_ATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#XlinkAttribute"), 58);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_XLINK_ATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_EXTERNALRESOURCESREQUIRED'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#ExternalResourcesRequired"), 69);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_EXTERNALRESOURCESREQUIRED);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_SCRIPTING'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Scripting"), 53);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_SCRIPTING);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_HANDLER'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Handler"), 51);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_HANDLER);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_LISTENER'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Listener"), 52);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_LISTENER);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_TIMEDANIMATION'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#TimedAnimation"), 58);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_TIMEDANIMATION);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_ANIMATION'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Animation"), 53);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_ANIMATION);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_AUDIO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Audio"), 49);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_AUDIO);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_VIDEO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Video"), 49);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_VIDEO);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_FONT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Font"), 48);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_FONT);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_EXTENSIBILITY'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#Extensibility"), 57);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_EXTENSIBILITY);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_MEDIA_ATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#MediaAttribute"), 58);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_MEDIA_ATTRIBUTE);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_TEXTFLOW'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#TextFlow"), 52);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_TEXTFLOW);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_TRANSFORMEDVIDEO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#TransformedVideo"), 60);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_TRANSFORMEDVIDEO);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_COMPOSEDVIDEO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#ComposedVideo"), 57);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_COMPOSEDVIDEO);
}
test("String to enum 'SVGENUM_REQUIREDFEATURES::SVGFEATURE_1_2_EDITABLE_ATTRIBUTE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_REQUIREDFEATURES, UNI_L("http://www.w3.org/Graphics/SVG/feature/1.2/#EditableTextAttribute"), 65);
	verify(int_val != -1);
	verify(int_val == SVGFEATURE_1_2_EDITABLE_ATTRIBUTE);
}
test("String to enum 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_VISIBLEPAINTED'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_POINTER_EVENTS, UNI_L("visiblePainted"), 14);
	verify(int_val != -1);
	verify(int_val == SVGPOINTEREVENTS_VISIBLEPAINTED);
}
test("String to enum 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_VISIBLEFILL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_POINTER_EVENTS, UNI_L("visibleFill"), 11);
	verify(int_val != -1);
	verify(int_val == SVGPOINTEREVENTS_VISIBLEFILL);
}
test("String to enum 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_VISIBLESTROKE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_POINTER_EVENTS, UNI_L("visibleStroke"), 13);
	verify(int_val != -1);
	verify(int_val == SVGPOINTEREVENTS_VISIBLESTROKE);
}
test("String to enum 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_VISIBLE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_POINTER_EVENTS, UNI_L("visible"), 7);
	verify(int_val != -1);
	verify(int_val == SVGPOINTEREVENTS_VISIBLE);
}
test("String to enum 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_PAINTED'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_POINTER_EVENTS, UNI_L("painted"), 7);
	verify(int_val != -1);
	verify(int_val == SVGPOINTEREVENTS_PAINTED);
}
test("String to enum 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_FILL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_POINTER_EVENTS, UNI_L("fill"), 4);
	verify(int_val != -1);
	verify(int_val == SVGPOINTEREVENTS_FILL);
}
test("String to enum 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_STROKE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_POINTER_EVENTS, UNI_L("stroke"), 6);
	verify(int_val != -1);
	verify(int_val == SVGPOINTEREVENTS_STROKE);
}
test("String to enum 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_ALL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_POINTER_EVENTS, UNI_L("all"), 3);
	verify(int_val != -1);
	verify(int_val == SVGPOINTEREVENTS_ALL);
}
test("String to enum 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_NONE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_POINTER_EVENTS, UNI_L("none"), 4);
	verify(int_val != -1);
	verify(int_val == SVGPOINTEREVENTS_NONE);
}
test("String to enum 'SVGENUM_POINTER_EVENTS::SVGPOINTEREVENTS_BOUNDINGBOX'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_POINTER_EVENTS, UNI_L("boundingBox"), 11);
	verify(int_val != -1);
	verify(int_val == SVGPOINTEREVENTS_BOUNDINGBOX);
}
test("String to enum 'SVGENUM_METHOD::SVGMETHOD_ALIGN'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_METHOD, UNI_L("align"), 5);
	verify(int_val != -1);
	verify(int_val == SVGMETHOD_ALIGN);
}
test("String to enum 'SVGENUM_METHOD::SVGMETHOD_STRETCH'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_METHOD, UNI_L("stretch"), 7);
	verify(int_val != -1);
	verify(int_val == SVGMETHOD_STRETCH);
}
test("String to enum 'SVGENUM_STITCHTILES::SVGSTITCH_STITCH'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_STITCHTILES, UNI_L("stitch"), 6);
	verify(int_val != -1);
	verify(int_val == SVGSTITCH_STITCH);
}
test("String to enum 'SVGENUM_STITCHTILES::SVGSTITCH_NOSTITCH'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_STITCHTILES, UNI_L("noStitch"), 8);
	verify(int_val != -1);
	verify(int_val == SVGSTITCH_NOSTITCH);
}
test("String to enum 'SVGENUM_DISPLACEMENTSELECTOR::SVGDISPLACEMENT_R'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLACEMENTSELECTOR, UNI_L("R"), 1);
	verify(int_val != -1);
	verify(int_val == SVGDISPLACEMENT_R);
}
test("String to enum 'SVGENUM_DISPLACEMENTSELECTOR::SVGDISPLACEMENT_G'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLACEMENTSELECTOR, UNI_L("G"), 1);
	verify(int_val != -1);
	verify(int_val == SVGDISPLACEMENT_G);
}
test("String to enum 'SVGENUM_DISPLACEMENTSELECTOR::SVGDISPLACEMENT_B'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLACEMENTSELECTOR, UNI_L("B"), 1);
	verify(int_val != -1);
	verify(int_val == SVGDISPLACEMENT_B);
}
test("String to enum 'SVGENUM_DISPLACEMENTSELECTOR::SVGDISPLACEMENT_A'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLACEMENTSELECTOR, UNI_L("A"), 1);
	verify(int_val != -1);
	verify(int_val == SVGDISPLACEMENT_A);
}
test("String to enum 'SVGENUM_CONVOLVEEDGEMODE::SVGCONVOLVEEDGEMODE_DUPLICATE'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CONVOLVEEDGEMODE, UNI_L("duplicate"), 9);
	verify(int_val != -1);
	verify(int_val == SVGCONVOLVEEDGEMODE_DUPLICATE);
}
test("String to enum 'SVGENUM_CONVOLVEEDGEMODE::SVGCONVOLVEEDGEMODE_WRAP'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CONVOLVEEDGEMODE, UNI_L("wrap"), 4);
	verify(int_val != -1);
	verify(int_val == SVGCONVOLVEEDGEMODE_WRAP);
}
test("String to enum 'SVGENUM_CONVOLVEEDGEMODE::SVGCONVOLVEEDGEMODE_NONE'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CONVOLVEEDGEMODE, UNI_L("none"), 4);
	verify(int_val != -1);
	verify(int_val == SVGCONVOLVEEDGEMODE_NONE);
}
test("String to enum 'SVGENUM_COMPOSITEOPERATOR::SVGCOMPOSITEOPERATOR_OVER'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_COMPOSITEOPERATOR, UNI_L("over"), 4);
	verify(int_val != -1);
	verify(int_val == SVGCOMPOSITEOPERATOR_OVER);
}
test("String to enum 'SVGENUM_COMPOSITEOPERATOR::SVGCOMPOSITEOPERATOR_IN'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_COMPOSITEOPERATOR, UNI_L("in"), 2);
	verify(int_val != -1);
	verify(int_val == SVGCOMPOSITEOPERATOR_IN);
}
test("String to enum 'SVGENUM_COMPOSITEOPERATOR::SVGCOMPOSITEOPERATOR_OUT'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_COMPOSITEOPERATOR, UNI_L("out"), 3);
	verify(int_val != -1);
	verify(int_val == SVGCOMPOSITEOPERATOR_OUT);
}
test("String to enum 'SVGENUM_COMPOSITEOPERATOR::SVGCOMPOSITEOPERATOR_ATOP'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_COMPOSITEOPERATOR, UNI_L("atop"), 4);
	verify(int_val != -1);
	verify(int_val == SVGCOMPOSITEOPERATOR_ATOP);
}
test("String to enum 'SVGENUM_COMPOSITEOPERATOR::SVGCOMPOSITEOPERATOR_XOR'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_COMPOSITEOPERATOR, UNI_L("xor"), 3);
	verify(int_val != -1);
	verify(int_val == SVGCOMPOSITEOPERATOR_XOR);
}
test("String to enum 'SVGENUM_COMPOSITEOPERATOR::SVGCOMPOSITEOPERATOR_ARITHMETIC'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_COMPOSITEOPERATOR, UNI_L("arithmetic"), 10);
	verify(int_val != -1);
	verify(int_val == SVGCOMPOSITEOPERATOR_ARITHMETIC);
}
test("String to enum 'SVGENUM_MORPHOLOGYOPERATOR::SVGMORPHOPERATOR_ERODE'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_MORPHOLOGYOPERATOR, UNI_L("erode"), 5);
	verify(int_val != -1);
	verify(int_val == SVGMORPHOPERATOR_ERODE);
}
test("String to enum 'SVGENUM_MORPHOLOGYOPERATOR::SVGMORPHOPERATOR_DILATE'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_MORPHOLOGYOPERATOR, UNI_L("dilate"), 6);
	verify(int_val != -1);
	verify(int_val == SVGMORPHOPERATOR_DILATE);
}
test("String to enum 'SVGENUM_BLENDMODE::SVGBLENDMODE_NORMAL'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_BLENDMODE, UNI_L("normal"), 6);
	verify(int_val != -1);
	verify(int_val == SVGBLENDMODE_NORMAL);
}
test("String to enum 'SVGENUM_BLENDMODE::SVGBLENDMODE_MULTIPLY'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_BLENDMODE, UNI_L("multiply"), 8);
	verify(int_val != -1);
	verify(int_val == SVGBLENDMODE_MULTIPLY);
}
test("String to enum 'SVGENUM_BLENDMODE::SVGBLENDMODE_SCREEN'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_BLENDMODE, UNI_L("screen"), 6);
	verify(int_val != -1);
	verify(int_val == SVGBLENDMODE_SCREEN);
}
test("String to enum 'SVGENUM_BLENDMODE::SVGBLENDMODE_DARKEN'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_BLENDMODE, UNI_L("darken"), 6);
	verify(int_val != -1);
	verify(int_val == SVGBLENDMODE_DARKEN);
}
test("String to enum 'SVGENUM_BLENDMODE::SVGBLENDMODE_LIGHTEN'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_BLENDMODE, UNI_L("lighten"), 7);
	verify(int_val != -1);
	verify(int_val == SVGBLENDMODE_LIGHTEN);
}
test("String to enum 'SVGENUM_TURBULENCETYPE::SVGTURBULENCE_FRACTALNOISE'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TURBULENCETYPE, UNI_L("fractalNoise"), 12);
	verify(int_val != -1);
	verify(int_val == SVGTURBULENCE_FRACTALNOISE);
}
test("String to enum 'SVGENUM_TURBULENCETYPE::SVGTURBULENCE_TURBULENCE'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TURBULENCETYPE, UNI_L("turbulence"), 10);
	verify(int_val != -1);
	verify(int_val == SVGTURBULENCE_TURBULENCE);
}
test("String to enum 'SVGENUM_COLORMATRIXTYPE::SVGCOLORMATRIX_MATRIX'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_COLORMATRIXTYPE, UNI_L("matrix"), 6);
	verify(int_val != -1);
	verify(int_val == SVGCOLORMATRIX_MATRIX);
}
test("String to enum 'SVGENUM_COLORMATRIXTYPE::SVGCOLORMATRIX_SATURATE'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_COLORMATRIXTYPE, UNI_L("saturate"), 8);
	verify(int_val != -1);
	verify(int_val == SVGCOLORMATRIX_SATURATE);
}
test("String to enum 'SVGENUM_COLORMATRIXTYPE::SVGCOLORMATRIX_HUEROTATE'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_COLORMATRIXTYPE, UNI_L("hueRotate"), 9);
	verify(int_val != -1);
	verify(int_val == SVGCOLORMATRIX_HUEROTATE);
}
test("String to enum 'SVGENUM_COLORMATRIXTYPE::SVGCOLORMATRIX_LUMINANCETOALPHA'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_COLORMATRIXTYPE, UNI_L("luminanceToAlpha"), 16);
	verify(int_val != -1);
	verify(int_val == SVGCOLORMATRIX_LUMINANCETOALPHA);
}
test("String to enum 'SVGENUM_FUNCTYPE::SVGFUNC_IDENTITY'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FUNCTYPE, UNI_L("identity"), 8);
	verify(int_val != -1);
	verify(int_val == SVGFUNC_IDENTITY);
}
test("String to enum 'SVGENUM_FUNCTYPE::SVGFUNC_TABLE'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FUNCTYPE, UNI_L("table"), 5);
	verify(int_val != -1);
	verify(int_val == SVGFUNC_TABLE);
}
test("String to enum 'SVGENUM_FUNCTYPE::SVGFUNC_DISCRETE'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FUNCTYPE, UNI_L("discrete"), 8);
	verify(int_val != -1);
	verify(int_val == SVGFUNC_DISCRETE);
}
test("String to enum 'SVGENUM_FUNCTYPE::SVGFUNC_LINEAR'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FUNCTYPE, UNI_L("linear"), 6);
	verify(int_val != -1);
	verify(int_val == SVGFUNC_LINEAR);
}
test("String to enum 'SVGENUM_FUNCTYPE::SVGFUNC_GAMMA'")
		require SVG_SUPPORT_FILTERS;
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FUNCTYPE, UNI_L("gamma"), 5);
	verify(int_val != -1);
	verify(int_val == SVGFUNC_GAMMA);
}
test("String to enum 'SVGENUM_BOOLEAN::FALSE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_BOOLEAN, UNI_L("false"), 5);
	verify(int_val != -1);
	verify(int_val == FALSE);
}
test("String to enum 'SVGENUM_BOOLEAN::TRUE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_BOOLEAN, UNI_L("true"), 4);
	verify(int_val != -1);
	verify(int_val == TRUE);
}
test("String to enum 'SVGENUM_LENGTHADJUST::SVGLENADJUST_SPACING'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_LENGTHADJUST, UNI_L("spacing"), 7);
	verify(int_val != -1);
	verify(int_val == SVGLENADJUST_SPACING);
}
test("String to enum 'SVGENUM_LENGTHADJUST::SVGLENADJUST_SPACINGANDGLYPHS'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_LENGTHADJUST, UNI_L("spacingAndGlyphs"), 16);
	verify(int_val != -1);
	verify(int_val == SVGLENADJUST_SPACINGANDGLYPHS);
}
test("String to enum 'SVGENUM_TEXTDECORATION::SVGTEXTDECORATION_NONE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXTDECORATION, UNI_L("none"), 4);
	verify(int_val != -1);
	verify(int_val == SVGTEXTDECORATION_NONE);
}
test("String to enum 'SVGENUM_TEXTDECORATION::SVGTEXTDECORATION_UNDERLINE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXTDECORATION, UNI_L("underline"), 9);
	verify(int_val != -1);
	verify(int_val == SVGTEXTDECORATION_UNDERLINE);
}
test("String to enum 'SVGENUM_TEXTDECORATION::SVGTEXTDECORATION_OVERLINE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXTDECORATION, UNI_L("overline"), 8);
	verify(int_val != -1);
	verify(int_val == SVGTEXTDECORATION_OVERLINE);
}
test("String to enum 'SVGENUM_TEXTDECORATION::SVGTEXTDECORATION_LINETHROUGH'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXTDECORATION, UNI_L("line-through"), 12);
	verify(int_val != -1);
	verify(int_val == SVGTEXTDECORATION_LINETHROUGH);
}
test("String to enum 'SVGENUM_TEXTDECORATION::SVGTEXTDECORATION_BLINK'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXTDECORATION, UNI_L("blink"), 5);
	verify(int_val != -1);
	verify(int_val == SVGTEXTDECORATION_BLINK);
}
test("String to enum 'SVGENUM_SPACING::SVGSPACING_AUTO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_SPACING, UNI_L("auto"), 4);
	verify(int_val != -1);
	verify(int_val == SVGSPACING_AUTO);
}
test("String to enum 'SVGENUM_SPACING::SVGSPACING_EXACT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_SPACING, UNI_L("exact"), 5);
	verify(int_val != -1);
	verify(int_val == SVGSPACING_EXACT);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_URI'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("auto"), 4);
	verify(int_val != -1);
	verify(int_val == CURSOR_URI);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_CROSSHAIR'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("crosshair"), 9);
	verify(int_val != -1);
	verify(int_val == CURSOR_CROSSHAIR);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_DEFAULT_ARROW'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("default"), 7);
	verify(int_val != -1);
	verify(int_val == CURSOR_DEFAULT_ARROW);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_CUR_POINTER'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("pointer"), 7);
	verify(int_val != -1);
	verify(int_val == CURSOR_CUR_POINTER);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_MOVE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("move"), 4);
	verify(int_val != -1);
	verify(int_val == CURSOR_MOVE);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_E_RESIZE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("e-resize"), 8);
	verify(int_val != -1);
	verify(int_val == CURSOR_E_RESIZE);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_NE_RESIZE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("ne-resize"), 9);
	verify(int_val != -1);
	verify(int_val == CURSOR_NE_RESIZE);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_NW_RESIZE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("nw-resize"), 9);
	verify(int_val != -1);
	verify(int_val == CURSOR_NW_RESIZE);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_N_RESIZE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("n-resize"), 8);
	verify(int_val != -1);
	verify(int_val == CURSOR_N_RESIZE);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_SE_RESIZE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("se-resize"), 9);
	verify(int_val != -1);
	verify(int_val == CURSOR_SE_RESIZE);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_SW_RESIZE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("sw-resize"), 9);
	verify(int_val != -1);
	verify(int_val == CURSOR_SW_RESIZE);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_S_RESIZE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("s-resize"), 8);
	verify(int_val != -1);
	verify(int_val == CURSOR_S_RESIZE);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_W_RESIZE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("w-resize"), 8);
	verify(int_val != -1);
	verify(int_val == CURSOR_W_RESIZE);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_TEXT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("text"), 4);
	verify(int_val != -1);
	verify(int_val == CURSOR_TEXT);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_WAIT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("wait"), 4);
	verify(int_val != -1);
	verify(int_val == CURSOR_WAIT);
}
test("String to enum 'SVGENUM_CURSOR::CURSOR_HELP'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_CURSOR, UNI_L("help"), 4);
	verify(int_val != -1);
	verify(int_val == CURSOR_HELP);
}
test("String to enum 'SVGENUM_OVERFLOW::CSS_VALUE_visible'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_OVERFLOW, UNI_L("visible"), 7);
	verify(int_val != -1);
	verify(int_val == CSS_VALUE_visible);
}
test("String to enum 'SVGENUM_OVERFLOW::CSS_VALUE_hidden'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_OVERFLOW, UNI_L("hidden"), 6);
	verify(int_val != -1);
	verify(int_val == CSS_VALUE_hidden);
}
test("String to enum 'SVGENUM_OVERFLOW::CSS_VALUE_scroll'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_OVERFLOW, UNI_L("scroll"), 6);
	verify(int_val != -1);
	verify(int_val == CSS_VALUE_scroll);
}
test("String to enum 'SVGENUM_OVERFLOW::CSS_VALUE_auto'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_OVERFLOW, UNI_L("auto"), 4);
	verify(int_val != -1);
	verify(int_val == CSS_VALUE_auto);
}
test("String to enum 'SVGENUM_UNICODE_BIDI::CSS_VALUE_normal'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_UNICODE_BIDI, UNI_L("normal"), 6);
	verify(int_val != -1);
	verify(int_val == CSS_VALUE_normal);
}
test("String to enum 'SVGENUM_UNICODE_BIDI::CSS_VALUE_embed'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_UNICODE_BIDI, UNI_L("embed"), 5);
	verify(int_val != -1);
	verify(int_val == CSS_VALUE_embed);
}
test("String to enum 'SVGENUM_UNICODE_BIDI::CSS_VALUE_bidi_override'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_UNICODE_BIDI, UNI_L("bidi-override"), 13);
	verify(int_val != -1);
	verify(int_val == CSS_VALUE_bidi_override);
}
test("String to enum 'SVGENUM_WRITING_MODE::SVGWRITINGMODE_LR_TB'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_WRITING_MODE, UNI_L("lr-tb"), 5);
	verify(int_val != -1);
	verify(int_val == SVGWRITINGMODE_LR_TB);
}
test("String to enum 'SVGENUM_WRITING_MODE::SVGWRITINGMODE_RL_TB'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_WRITING_MODE, UNI_L("rl-tb"), 5);
	verify(int_val != -1);
	verify(int_val == SVGWRITINGMODE_RL_TB);
}
test("String to enum 'SVGENUM_WRITING_MODE::SVGWRITINGMODE_TB_RL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_WRITING_MODE, UNI_L("tb-rl"), 5);
	verify(int_val != -1);
	verify(int_val == SVGWRITINGMODE_TB_RL);
}
test("String to enum 'SVGENUM_WRITING_MODE::SVGWRITINGMODE_LR'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_WRITING_MODE, UNI_L("lr"), 2);
	verify(int_val != -1);
	verify(int_val == SVGWRITINGMODE_LR);
}
test("String to enum 'SVGENUM_WRITING_MODE::SVGWRITINGMODE_RL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_WRITING_MODE, UNI_L("rl"), 2);
	verify(int_val != -1);
	verify(int_val == SVGWRITINGMODE_RL);
}
test("String to enum 'SVGENUM_WRITING_MODE::SVGWRITINGMODE_TB'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_WRITING_MODE, UNI_L("tb"), 2);
	verify(int_val != -1);
	verify(int_val == SVGWRITINGMODE_TB);
}
test("String to enum 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_AUTO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ALIGNMENT_BASELINE, UNI_L("auto"), 4);
	verify(int_val != -1);
	verify(int_val == SVGALIGNMENTBASELINE_AUTO);
}
test("String to enum 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_BASELINE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ALIGNMENT_BASELINE, UNI_L("baseline"), 8);
	verify(int_val != -1);
	verify(int_val == SVGALIGNMENTBASELINE_BASELINE);
}
test("String to enum 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_BEFORE_EDGE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ALIGNMENT_BASELINE, UNI_L("before-edge"), 11);
	verify(int_val != -1);
	verify(int_val == SVGALIGNMENTBASELINE_BEFORE_EDGE);
}
test("String to enum 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_TEXT_BEFORE_EDGE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ALIGNMENT_BASELINE, UNI_L("text-before-edge"), 16);
	verify(int_val != -1);
	verify(int_val == SVGALIGNMENTBASELINE_TEXT_BEFORE_EDGE);
}
test("String to enum 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_MIDDLE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ALIGNMENT_BASELINE, UNI_L("middle"), 6);
	verify(int_val != -1);
	verify(int_val == SVGALIGNMENTBASELINE_MIDDLE);
}
test("String to enum 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_CENTRAL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ALIGNMENT_BASELINE, UNI_L("central"), 7);
	verify(int_val != -1);
	verify(int_val == SVGALIGNMENTBASELINE_CENTRAL);
}
test("String to enum 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_AFTER_EDGE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ALIGNMENT_BASELINE, UNI_L("after-edge"), 10);
	verify(int_val != -1);
	verify(int_val == SVGALIGNMENTBASELINE_AFTER_EDGE);
}
test("String to enum 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_TEXT_AFTER_EDGE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ALIGNMENT_BASELINE, UNI_L("text-after-edge"), 15);
	verify(int_val != -1);
	verify(int_val == SVGALIGNMENTBASELINE_TEXT_AFTER_EDGE);
}
test("String to enum 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_IDEOGRAPHIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ALIGNMENT_BASELINE, UNI_L("ideographic"), 11);
	verify(int_val != -1);
	verify(int_val == SVGALIGNMENTBASELINE_IDEOGRAPHIC);
}
test("String to enum 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_ALPHABETIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ALIGNMENT_BASELINE, UNI_L("alphabetic"), 10);
	verify(int_val != -1);
	verify(int_val == SVGALIGNMENTBASELINE_ALPHABETIC);
}
test("String to enum 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_HANGING'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ALIGNMENT_BASELINE, UNI_L("hanging"), 7);
	verify(int_val != -1);
	verify(int_val == SVGALIGNMENTBASELINE_HANGING);
}
test("String to enum 'SVGENUM_ALIGNMENT_BASELINE::SVGALIGNMENTBASELINE_MATHEMATICAL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ALIGNMENT_BASELINE, UNI_L("mathematical"), 12);
	verify(int_val != -1);
	verify(int_val == SVGALIGNMENTBASELINE_MATHEMATICAL);
}
test("String to enum 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_AUTO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DOMINANT_BASELINE, UNI_L("auto"), 4);
	verify(int_val != -1);
	verify(int_val == SVGDOMINANTBASELINE_AUTO);
}
test("String to enum 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_USE_SCRIPT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DOMINANT_BASELINE, UNI_L("use-script"), 10);
	verify(int_val != -1);
	verify(int_val == SVGDOMINANTBASELINE_USE_SCRIPT);
}
test("String to enum 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_NO_CHANGE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DOMINANT_BASELINE, UNI_L("no-change"), 9);
	verify(int_val != -1);
	verify(int_val == SVGDOMINANTBASELINE_NO_CHANGE);
}
test("String to enum 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_RESET_SIZE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DOMINANT_BASELINE, UNI_L("reset-size"), 10);
	verify(int_val != -1);
	verify(int_val == SVGDOMINANTBASELINE_RESET_SIZE);
}
test("String to enum 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_IDEOGRAPHIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DOMINANT_BASELINE, UNI_L("ideographic"), 11);
	verify(int_val != -1);
	verify(int_val == SVGDOMINANTBASELINE_IDEOGRAPHIC);
}
test("String to enum 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_ALPHABETIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DOMINANT_BASELINE, UNI_L("alphabetic"), 10);
	verify(int_val != -1);
	verify(int_val == SVGDOMINANTBASELINE_ALPHABETIC);
}
test("String to enum 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_HANGING'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DOMINANT_BASELINE, UNI_L("hanging"), 7);
	verify(int_val != -1);
	verify(int_val == SVGDOMINANTBASELINE_HANGING);
}
test("String to enum 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_MATHEMATICAL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DOMINANT_BASELINE, UNI_L("mathematical"), 12);
	verify(int_val != -1);
	verify(int_val == SVGDOMINANTBASELINE_MATHEMATICAL);
}
test("String to enum 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_CENTRAL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DOMINANT_BASELINE, UNI_L("central"), 7);
	verify(int_val != -1);
	verify(int_val == SVGDOMINANTBASELINE_CENTRAL);
}
test("String to enum 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_MIDDLE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DOMINANT_BASELINE, UNI_L("middle"), 6);
	verify(int_val != -1);
	verify(int_val == SVGDOMINANTBASELINE_MIDDLE);
}
test("String to enum 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_TEXT_AFTER_EDGE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DOMINANT_BASELINE, UNI_L("text-after-edge"), 15);
	verify(int_val != -1);
	verify(int_val == SVGDOMINANTBASELINE_TEXT_AFTER_EDGE);
}
test("String to enum 'SVGENUM_DOMINANT_BASELINE::SVGDOMINANTBASELINE_TEXT_BEFORE_EDGE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DOMINANT_BASELINE, UNI_L("text-before-edge"), 16);
	verify(int_val != -1);
	verify(int_val == SVGDOMINANTBASELINE_TEXT_BEFORE_EDGE);
}
test("String to enum 'SVGENUM_ARABIC_FORM::SVGARABICFORM_INITIAL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ARABIC_FORM, UNI_L("initial"), 7);
	verify(int_val != -1);
	verify(int_val == SVGARABICFORM_INITIAL);
}
test("String to enum 'SVGENUM_ARABIC_FORM::SVGARABICFORM_MEDIAL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ARABIC_FORM, UNI_L("medial"), 6);
	verify(int_val != -1);
	verify(int_val == SVGARABICFORM_MEDIAL);
}
test("String to enum 'SVGENUM_ARABIC_FORM::SVGARABICFORM_TERMINAL'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ARABIC_FORM, UNI_L("terminal"), 8);
	verify(int_val != -1);
	verify(int_val == SVGARABICFORM_TERMINAL);
}
test("String to enum 'SVGENUM_ARABIC_FORM::SVGARABICFORM_ISOLATED'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_ARABIC_FORM, UNI_L("isolated"), 8);
	verify(int_val != -1);
	verify(int_val == SVGARABICFORM_ISOLATED);
}
test("String to enum 'SVGENUM_DIRECTION::CSS_VALUE_ltr'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DIRECTION, UNI_L("ltr"), 3);
	verify(int_val != -1);
	verify(int_val == CSS_VALUE_ltr);
}
test("String to enum 'SVGENUM_DIRECTION::CSS_VALUE_rtl'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DIRECTION, UNI_L("rtl"), 3);
	verify(int_val != -1);
	verify(int_val == CSS_VALUE_rtl);
}
test("String to enum 'SVGENUM_IMAGE_RENDERING::SVGIMAGERENDERING_AUTO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_IMAGE_RENDERING, UNI_L("auto"), 4);
	verify(int_val != -1);
	verify(int_val == SVGIMAGERENDERING_AUTO);
}
test("String to enum 'SVGENUM_IMAGE_RENDERING::SVGIMAGERENDERING_OPTIMIZESPEED'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_IMAGE_RENDERING, UNI_L("optimizeSpeed"), 13);
	verify(int_val != -1);
	verify(int_val == SVGIMAGERENDERING_OPTIMIZESPEED);
}
test("String to enum 'SVGENUM_IMAGE_RENDERING::SVGIMAGERENDERING_OPTIMIZEQUALITY'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_IMAGE_RENDERING, UNI_L("optimizeQuality"), 15);
	verify(int_val != -1);
	verify(int_val == SVGIMAGERENDERING_OPTIMIZEQUALITY);
}
test("String to enum 'SVGENUM_MARKER_UNITS::SVGMARKERUNITS_STROKEWIDTH'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_MARKER_UNITS, UNI_L("strokeWidth"), 11);
	verify(int_val != -1);
	verify(int_val == SVGMARKERUNITS_STROKEWIDTH);
}
test("String to enum 'SVGENUM_MARKER_UNITS::SVGMARKERUNITS_USERSPACEONUSE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_MARKER_UNITS, UNI_L("userSpaceOnUse"), 14);
	verify(int_val != -1);
	verify(int_val == SVGMARKERUNITS_USERSPACEONUSE);
}
test("String to enum 'SVGENUM_TEXT_RENDERING::SVGTEXTRENDERING_AUTO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXT_RENDERING, UNI_L("auto"), 4);
	verify(int_val != -1);
	verify(int_val == SVGTEXTRENDERING_AUTO);
}
test("String to enum 'SVGENUM_TEXT_RENDERING::SVGTEXTRENDERING_OPTIMIZESPEED'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXT_RENDERING, UNI_L("optimizeSpeed"), 13);
	verify(int_val != -1);
	verify(int_val == SVGTEXTRENDERING_OPTIMIZESPEED);
}
test("String to enum 'SVGENUM_TEXT_RENDERING::SVGTEXTRENDERING_OPTIMIZELEGIBILITY'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXT_RENDERING, UNI_L("optimizeLegibility"), 18);
	verify(int_val != -1);
	verify(int_val == SVGTEXTRENDERING_OPTIMIZELEGIBILITY);
}
test("String to enum 'SVGENUM_TEXT_RENDERING::SVGTEXTRENDERING_GEOMETRICPRECISION'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXT_RENDERING, UNI_L("geometricPrecision"), 18);
	verify(int_val != -1);
	verify(int_val == SVGTEXTRENDERING_GEOMETRICPRECISION);
}
test("String to enum 'SVGENUM_COLOR_INTERPOLATION::SVGCOLORINTERPOLATION_AUTO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_COLOR_INTERPOLATION, UNI_L("auto"), 4);
	verify(int_val != -1);
	verify(int_val == SVGCOLORINTERPOLATION_AUTO);
}
test("String to enum 'SVGENUM_COLOR_INTERPOLATION::SVGCOLORINTERPOLATION_SRGB'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_COLOR_INTERPOLATION, UNI_L("sRGB"), 4);
	verify(int_val != -1);
	verify(int_val == SVGCOLORINTERPOLATION_SRGB);
}
test("String to enum 'SVGENUM_COLOR_INTERPOLATION::SVGCOLORINTERPOLATION_LINEARRGB'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_COLOR_INTERPOLATION, UNI_L("linearRGB"), 9);
	verify(int_val != -1);
	verify(int_val == SVGCOLORINTERPOLATION_LINEARRGB);
}
test("String to enum 'SVGENUM_FOCUSABLE::SVGFOCUSABLE_TRUE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FOCUSABLE, UNI_L("true"), 4);
	verify(int_val != -1);
	verify(int_val == SVGFOCUSABLE_TRUE);
}
test("String to enum 'SVGENUM_FOCUSABLE::SVGFOCUSABLE_FALSE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FOCUSABLE, UNI_L("false"), 5);
	verify(int_val != -1);
	verify(int_val == SVGFOCUSABLE_FALSE);
}
test("String to enum 'SVGENUM_FOCUSABLE::SVGFOCUSABLE_AUTO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FOCUSABLE, UNI_L("auto"), 4);
	verify(int_val != -1);
	verify(int_val == SVGFOCUSABLE_AUTO);
}
test("String to enum 'SVGENUM_VECTOR_EFFECT::SVGVECTOREFFECT_NONE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_VECTOR_EFFECT, UNI_L("none"), 4);
	verify(int_val != -1);
	verify(int_val == SVGVECTOREFFECT_NONE);
}
test("String to enum 'SVGENUM_VECTOR_EFFECT::SVGVECTOREFFECT_NON_SCALING_STROKE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_VECTOR_EFFECT, UNI_L("non-scaling-stroke"), 18);
	verify(int_val != -1);
	verify(int_val == SVGVECTOREFFECT_NON_SCALING_STROKE);
}
test("String to enum 'SVGENUM_FOCUSHIGHLIGHT::SVGFOCUSHIGHLIGHT_NONE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FOCUSHIGHLIGHT, UNI_L("none"), 4);
	verify(int_val != -1);
	verify(int_val == SVGFOCUSHIGHLIGHT_NONE);
}
test("String to enum 'SVGENUM_FOCUSHIGHLIGHT::SVGFOCUSHIGHLIGHT_AUTO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_FOCUSHIGHLIGHT, UNI_L("auto"), 4);
	verify(int_val != -1);
	verify(int_val == SVGFOCUSHIGHLIGHT_AUTO);
}
test("String to enum 'SVGENUM_INITIALVISIBILITY::SVGINITIALVISIBILITY_WHENSTARTED'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_INITIALVISIBILITY, UNI_L("whenStarted"), 11);
	verify(int_val != -1);
	verify(int_val == SVGINITIALVISIBILITY_WHENSTARTED);
}
test("String to enum 'SVGENUM_INITIALVISIBILITY::SVGINITIALVISIBILITY_ALWAYS'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_INITIALVISIBILITY, UNI_L("always"), 6);
	verify(int_val != -1);
	verify(int_val == SVGINITIALVISIBILITY_ALWAYS);
}
test("String to enum 'SVGENUM_TRANSFORMBEHAVIOR::SVGTRANSFORMBEHAVIOR_GEOMETRIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TRANSFORMBEHAVIOR, UNI_L("geometric"), 9);
	verify(int_val != -1);
	verify(int_val == SVGTRANSFORMBEHAVIOR_GEOMETRIC);
}
test("String to enum 'SVGENUM_TRANSFORMBEHAVIOR::SVGTRANSFORMBEHAVIOR_PINNED'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TRANSFORMBEHAVIOR, UNI_L("pinned"), 6);
	verify(int_val != -1);
	verify(int_val == SVGTRANSFORMBEHAVIOR_PINNED);
}
test("String to enum 'SVGENUM_TRANSFORMBEHAVIOR::SVGTRANSFORMBEHAVIOR_PINNED90'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TRANSFORMBEHAVIOR, UNI_L("pinned90"), 8);
	verify(int_val != -1);
	verify(int_val == SVGTRANSFORMBEHAVIOR_PINNED90);
}
test("String to enum 'SVGENUM_TRANSFORMBEHAVIOR::SVGTRANSFORMBEHAVIOR_PINNED180'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TRANSFORMBEHAVIOR, UNI_L("pinned180"), 9);
	verify(int_val != -1);
	verify(int_val == SVGTRANSFORMBEHAVIOR_PINNED180);
}
test("String to enum 'SVGENUM_TRANSFORMBEHAVIOR::SVGTRANSFORMBEHAVIOR_PINNED270'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TRANSFORMBEHAVIOR, UNI_L("pinned270"), 9);
	verify(int_val != -1);
	verify(int_val == SVGTRANSFORMBEHAVIOR_PINNED270);
}
test("String to enum 'SVGENUM_OVERLAY::SVGOVERLAY_TOP'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_OVERLAY, UNI_L("top"), 3);
	verify(int_val != -1);
	verify(int_val == SVGOVERLAY_TOP);
}
test("String to enum 'SVGENUM_OVERLAY::SVGOVERLAY_NONE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_OVERLAY, UNI_L("none"), 4);
	verify(int_val != -1);
	verify(int_val == SVGOVERLAY_NONE);
}
test("String to enum 'SVGENUM_DISPLAY_ALIGN::SVGDISPLAYALIGN_AUTO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY_ALIGN, UNI_L("auto"), 4);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAYALIGN_AUTO);
}
test("String to enum 'SVGENUM_DISPLAY_ALIGN::SVGDISPLAYALIGN_BEFORE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY_ALIGN, UNI_L("before"), 6);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAYALIGN_BEFORE);
}
test("String to enum 'SVGENUM_DISPLAY_ALIGN::SVGDISPLAYALIGN_CENTER'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY_ALIGN, UNI_L("center"), 6);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAYALIGN_CENTER);
}
test("String to enum 'SVGENUM_DISPLAY_ALIGN::SVGDISPLAYALIGN_AFTER'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_DISPLAY_ALIGN, UNI_L("after"), 5);
	verify(int_val != -1);
	verify(int_val == SVGDISPLAYALIGN_AFTER);
}
test("String to enum 'SVGENUM_EDITABLE::SVGEDITABLE_NONE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_EDITABLE, UNI_L("none"), 4);
	verify(int_val != -1);
	verify(int_val == SVGEDITABLE_NONE);
}
test("String to enum 'SVGENUM_EDITABLE::SVGEDITABLE_SIMPLE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_EDITABLE, UNI_L("simple"), 6);
	verify(int_val != -1);
	verify(int_val == SVGEDITABLE_SIMPLE);
}
test("String to enum 'SVGENUM_TEXT_ALIGN::CSS_VALUE_start'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXT_ALIGN, UNI_L("start"), 5);
	verify(int_val != -1);
	verify(int_val == CSS_VALUE_start);
}
test("String to enum 'SVGENUM_TEXT_ALIGN::CSS_VALUE_center'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXT_ALIGN, UNI_L("center"), 6);
	verify(int_val != -1);
	verify(int_val == CSS_VALUE_center);
}
test("String to enum 'SVGENUM_TEXT_ALIGN::CSS_VALUE_end'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXT_ALIGN, UNI_L("end"), 3);
	verify(int_val != -1);
	verify(int_val == CSS_VALUE_end);
}
test("String to enum 'SVGENUM_TEXT_OVERFLOW::CSS_VALUE_clip'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXT_OVERFLOW, UNI_L("clip"), 4);
	verify(int_val != -1);
	verify(int_val == CSS_VALUE_clip);
}
test("String to enum 'SVGENUM_TEXT_OVERFLOW::CSS_VALUE_ellipsis'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TEXT_OVERFLOW, UNI_L("ellipsis"), 8);
	verify(int_val != -1);
	verify(int_val == CSS_VALUE_ellipsis);
}
test("String to enum 'SVGENUM_AUTO::SVGAUTO_AUTO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_AUTO, UNI_L("auto"), 4);
	verify(int_val != -1);
	verify(int_val == SVGAUTO_AUTO);
}
test("String to enum 'SVGENUM_SYNCBEHAVIOR::SVGSYNCBEHAVIOR_CANSLIP'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_SYNCBEHAVIOR, UNI_L("canSlip"), 7);
	verify(int_val != -1);
	verify(int_val == SVGSYNCBEHAVIOR_CANSLIP);
}
test("String to enum 'SVGENUM_SYNCBEHAVIOR::SVGSYNCBEHAVIOR_LOCKED'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_SYNCBEHAVIOR, UNI_L("locked"), 6);
	verify(int_val != -1);
	verify(int_val == SVGSYNCBEHAVIOR_LOCKED);
}
test("String to enum 'SVGENUM_SYNCBEHAVIOR::SVGSYNCBEHAVIOR_INDEPENDENT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_SYNCBEHAVIOR, UNI_L("independent"), 11);
	verify(int_val != -1);
	verify(int_val == SVGSYNCBEHAVIOR_INDEPENDENT);
}
test("String to enum 'SVGENUM_SYNCBEHAVIOR::SVGSYNCBEHAVIOR_DEFAULT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_SYNCBEHAVIOR, UNI_L("default"), 7);
	verify(int_val != -1);
	verify(int_val == SVGSYNCBEHAVIOR_DEFAULT);
}
test("String to enum 'SVGENUM_SYNCBEHAVIOR::SVGSYNCBEHAVIOR_INHERIT'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_SYNCBEHAVIOR, UNI_L("inherit"), 7);
	verify(int_val != -1);
	verify(int_val == SVGSYNCBEHAVIOR_INHERIT);
}
test("String to enum 'SVGENUM_NONE::SVGSNAPSHOTTIME_NONE'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_NONE, UNI_L("none"), 4);
	verify(int_val != -1);
	verify(int_val == SVGSNAPSHOTTIME_NONE);
}
test("String to enum 'SVGENUM_SHAPE_RENDERING::SVGSHAPERENDERING_AUTO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_SHAPE_RENDERING, UNI_L("auto"), 4);
	verify(int_val != -1);
	verify(int_val == SVGSHAPERENDERING_AUTO);
}
test("String to enum 'SVGENUM_SHAPE_RENDERING::SVGSHAPERENDERING_OPTIMIZESPEED'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_SHAPE_RENDERING, UNI_L("optimizeSpeed"), 13);
	verify(int_val != -1);
	verify(int_val == SVGSHAPERENDERING_OPTIMIZESPEED);
}
test("String to enum 'SVGENUM_SHAPE_RENDERING::SVGSHAPERENDERING_CRISPEDGES'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_SHAPE_RENDERING, UNI_L("crispEdges"), 10);
	verify(int_val != -1);
	verify(int_val == SVGSHAPERENDERING_CRISPEDGES);
}
test("String to enum 'SVGENUM_SHAPE_RENDERING::SVGSHAPERENDERING_GEOMETRICPRECISION'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_SHAPE_RENDERING, UNI_L("geometricPrecision"), 18);
	verify(int_val != -1);
	verify(int_val == SVGSHAPERENDERING_GEOMETRICPRECISION);
}
test("String to enum 'SVGENUM_BUFFERED_RENDERING::SVGBUFFEREDRENDERING_AUTO'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_BUFFERED_RENDERING, UNI_L("auto"), 4);
	verify(int_val != -1);
	verify(int_val == SVGBUFFEREDRENDERING_AUTO);
}
test("String to enum 'SVGENUM_BUFFERED_RENDERING::SVGBUFFEREDRENDERING_STATIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_BUFFERED_RENDERING, UNI_L("static"), 6);
	verify(int_val != -1);
	verify(int_val == SVGBUFFEREDRENDERING_STATIC);
}
test("String to enum 'SVGENUM_BUFFERED_RENDERING::SVGBUFFEREDRENDERING_DYNAMIC'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_BUFFERED_RENDERING, UNI_L("dynamic"), 7);
	verify(int_val != -1);
	verify(int_val == SVGBUFFEREDRENDERING_DYNAMIC);
}
test("String to enum 'SVGENUM_TIMELINEBEGIN::SVGTIMELINEBEGIN_ONLOAD'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TIMELINEBEGIN, UNI_L("onLoad"), 6);
	verify(int_val != -1);
	verify(int_val == SVGTIMELINEBEGIN_ONLOAD);
}
test("String to enum 'SVGENUM_TIMELINEBEGIN::SVGTIMELINEBEGIN_ONSTART'")
{
	int int_val = SVGEnumUtils::GetEnumValue(SVGENUM_TIMELINEBEGIN, UNI_L("onStart"), 7);
	verify(int_val != -1);
	verify(int_val == SVGTIMELINEBEGIN_ONSTART);
}
