/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2010- Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

// This test test the different calculation modes for an
// 'animate'-element

group "svg.animation.dom";

require init;
require SVG_SUPPORT;

include "modules/svg/SVGManager.h";
include "modules/svg/src/SVGDocumentContext.h";
include "modules/svg/src/SVGManagerImpl.h";
include "modules/svg/src/SVGImageImpl.h";
include "modules/svg/src/SVGUtils.h";

language ecmascript;

svg {
//! <svg xmlns="http://www.w3.org/2000/svg">
//! 	<rect id="r" width="100%" height="100%" fill="red">
//!     <set attributeName="fill"
//!          begin="1000s"
//!          to="lime"
//!          fill="freeze"/>
//!   </rect>
//! </svg>
};

test("Test pauseAnimations")
{
  var svg = document.documentElement;
  svg.pauseAnimations();
  verify(svg.animationsPaused());
}

test("Test unpauseAnimations")
{
	var svg = document.documentElement;
	if (!svg.animationsPaused())
	{
		svg.pauseAnimations();
		verify(svg.animationsPaused());
	}

	svg.unpauseAnimations();
	verify(!svg.animationsPaused());
}

test("Test setCurrentTime/getCurrentTime")
{
	var svg = document.documentElement;
	var time1 = svg.getCurrentTime();
	svg.setCurrentTime(1000);
	var time2 = svg.getCurrentTime();
	verify(time1 != time2);
	verify(time2 == 1000);
}

svg {
//! <svg xmlns="http://www.w3.org/2000/svg">
//! 	<rect id="r" width="100%" height="100%" fill="red">
//!     <set attributeName="fill"
//!          begin="1000s"
//!          to="lime"
//!          fill="freeze"/>
//!   </rect>
//! </svg>
};

test("Test pauseAnimations + setCurrentTime #1")
{
	var svg = document.documentElement;
	svg.pauseAnimations();
	verify(svg.animationsPaused());
	svg.setCurrentTime(1000);
	verify(svg.animationsPaused());
}

test("Test pauseAnimations + setCurrentTime #2")
	require success "Test pauseAnimations + setCurrentTime #1";
	require SVG_TINY_12;
{
	var r = document.getElementById("r");
	verify(r);
	var fillcolor = r.getRGBColorPresentationTrait("fill");
	verify(fillcolor.red == 0);
	verify(fillcolor.green == 255);
	verify(fillcolor.blue == 0);
}

svg {
//! <svg xmlns="http://www.w3.org/2000/svg" onload="this.pauseAnimations()">
//!     <rect id="r" width="100%" height="100%" fill="lime">
//!     <set attributeName="fill"
//!          begin="0.5s"
//!          to="red"
//!          fill="freeze"/>
//!   </rect>
//! </svg>
};

test("Setup#1")
  language c++;
  delay pre 1;
{
}

test("pauseAnimations and timeline begin race")
    require SVG_TINY_12;
	require success "Setup#1";
{
    var svg = document.documentElement;
    verify(svg.animationsPaused());
    var r = document.getElementById("r");
    verify(r);
    var fillcolor = r.getRGBColorPresentationTrait("fill");
    verify(fillcolor.red == 0);
    verify(fillcolor.green == 255);
    verify(fillcolor.blue == 0);
}

svg {
//! <svg xmlns="http://www.w3.org/2000/svg" onload="this.pauseAnimations()">
//!   <rect id="r" width="100%" height="100%" fill="lime">
//!     <set attributeName="width"
//!          begin="0.5s"
//!          to="0"
//!          fill="freeze"/>
//!   </rect>
//! </svg>
};

test("Setup#2")
  language c++;
  delay pre 1;
{
}

test("pauseAnimations and timeline begin race #2")
    require SVG_FULL_11;
	require success "Setup#2";
{
    var svg = document.documentElement;
    verify(svg.animationsPaused());
    var r = document.getElementById("r");
    verify(r);
    var width = r.width.animVal.valueInSpecifiedUnits;
    verify(width == 100);
}

svg {
//! <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 100 100">
//!  <rect id="ref" x="0" y="0" width="0" height="10" fill="#00F">
//!   <animate attributeName="width" from="1" to="100" dur="60s" fill="freeze"/>
//!  </rect>
//! </svg>
}

test("Pause and unpause timeline")
  async;
{
	var svg = document.documentElement;
	var t_before = svg.getCurrentTime();
	var t_afterpause = -1;
	var t_afterresume = -1;

    var pause = function()
    {
      svg.pauseAnimations();
	  t_afterpause = svg.getCurrentTime();
    }
    var resume = function()
    {
      document.documentElement.unpauseAnimations();
	  t_afterresume = svg.getCurrentTime();

	  if (t_before >= 0 &&
		  t_afterpause >= 0 &&
		  t_afterpause != t_before &&
		  t_afterresume == t_afterpause)
		ST_passed();
	  else
		ST_failed("t_before: " + t_before + " t_afterpause: " + t_afterpause + " t_afterresume: " + t_afterresume, "svg.animation.dom.ot", 0);
    }

    setTimeout(pause, 300);
    setTimeout(resume, 600);
}

svg {
//! <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 100 100" timelineBegin="onStart">
//!  <rect id="r" x="0" y="0" width="0" height="10" fill="#00F">
//!  </rect>
//! </svg>
}

test("Pause, append anim, resume")
  async;
{
	var svg = document.documentElement;
	var t_before = svg.getCurrentTime();
	var t_afterpause = -1;
	var t_afterresume = -1;
	var t_afterinsert = -1;
	var real_time = 0;

    var pause = function()
    {
      svg.pauseAnimations();
	  t_afterpause = svg.getCurrentTime();
      var a = document.createElementNS("http://www.w3.org/2000/svg", "animate");
      a.setAttribute("attributeName", "width");
      a.setAttribute("from", "1");
      a.setAttribute("to", "100");
      a.setAttribute("dur", "30s");
      a.setAttribute("fill", "freeze");
      document.getElementById("r").appendChild(a);
	  t_afterinsert = svg.getCurrentTime();
    };

    var resume = function()
    {
      document.documentElement.unpauseAnimations();
	  t_afterresume = svg.getCurrentTime();
	  real_time = new Date().getTime();
    };

	var test = function()
	{
	  var t_after_resume_delta = svg.getCurrentTime();
	  var elapsed_time = new Date().getTime() - real_time;
	  if (t_before >= 0 &&
		  t_before == t_afterpause == t_afterinsert == t_afterresume &&
		  t_after_resume_delta > t_afterresume &&
		  t_after_resume_delta - t_afterresume <= elapsed_time)
		ST_passed();
	  else
		ST_failed("t_before: " + t_before + " t_afterpause: " + t_afterpause + " t_afterinsert: " + t_afterinsert + " t_afterresume: " + t_afterresume, "svg.animation.dom.ot", 0);
	};

    setTimeout(pause, 200);
    setTimeout(resume, 400);
	setTimeout(test, 1000);
}

svg {
//! <svg xmlns="http://www.w3.org/2000/svg" timelineBegin="onStart">
//! <script>
//! 	var t_before_onload = document.documentElement.getCurrentTime();
//! 	var t_after_onload = -1;
//! 	window.addEventListener("load", function() {
//!			t_after_onload = document.documentElement.getCurrentTime();
//! 	}, false);
//! </script>
//!   <rect id="r" width="0" height="100%" fill="lime">
//!     <set attributeName="width"
//!          to="100%"
//!          fill="freeze"/>
//!   </rect>
//! </svg>
};

test("timelineBegin=onStart")
{
  verify(t_before_onload >= 0);
  verify(t_after_onload >= 0);
  verify(t_after_onload >= t_before_onload);
}

svg {
//! <svg xmlns="http://www.w3.org/2000/svg">
//! <script>
//! 	var t_before_onload = document.documentElement.getCurrentTime();
//! 	var t_after_onload = -1;
//! 	window.addEventListener("load", function() {
//!			t_after_onload = document.documentElement.getCurrentTime();
//! 	}, false);
//! </script>
//!   <rect id="r" width="0" height="100%" fill="lime">
//!     <set attributeName="width"
//!          to="100%"
//!          fill="freeze"/>
//!   </rect>
//! </svg>
};

test("timelineBegin=onLoad")
{
  verify(t_before_onload == 0);
  verify(t_after_onload == 0);
}

svg {
//! <svg xmlns="http://www.w3.org/2000/svg">
//!   <rect id="r" width="0" height="100%" fill="lime">
//!     <animate attributeName="width"
//!          from="0" to="100" dur="30s"
//!          fill="freeze"/>
//!   </rect>
//! </svg>
};

test("pause, setCurrentTime, read values")
{
	var svg = document.documentElement;
	var rect = document.getElementById("r");

	svg.pauseAnimations();
	var t_before = svg.getCurrentTime();

	var beforevalue = rect.width.animVal.value;
	svg.setCurrentTime(15);
	verify(svg.animationsPaused);
	var t_after = svg.getCurrentTime();
	verify(t_after == 15);
	verify(t_after > t_before);

	var aftervalue = rect.width.animVal.value;
	verify(aftervalue == 50);
	verify(beforevalue < aftervalue);
}

svg {
//! <svg xmlns="http://www.w3.org/2000/svg" timelineBegin="onStart">
//!   <rect id="r" width="0" height="100%" fill="lime">
//!     <animate attributeName="width"
//!          from="0" to="100" dur="30s"
//!          fill="freeze"/>
//!   </rect>
//! </svg>
};

test("onStart: pause, setCurrentTime, read values")
{
	var svg = document.documentElement;
	var rect = document.getElementById("r");

	svg.pauseAnimations();
	var t_before = svg.getCurrentTime();

	var beforevalue = rect.width.animVal.value;
	svg.setCurrentTime(15);
	verify(svg.animationsPaused);
	var t_after = svg.getCurrentTime();
	verify(t_after == 15);
	verify(t_after > t_before);

	var aftervalue = rect.width.animVal.value;
	verify(aftervalue == 50);
	verify(beforevalue < aftervalue);
}

svg {
//! <svg xmlns="http://www.w3.org/2000/svg">
//!     <rect id="r" width="0" height="100%" fill="lime"/>
//! </svg>
};

test("DOM: pause, setCurrentTime, read values")
{
	var svg = document.documentElement;
	var rect = document.getElementById("r");

	svg.pauseAnimations();
	var t_before = svg.getCurrentTime();

	var a = document.createElementNS("http://www.w3.org/2000/svg", "animate");
	a.setAttribute("attributeName", "width");
	a.setAttribute("from", "0");
	a.setAttribute("to", "100");
	a.setAttribute("dur", "30s");
	a.setAttribute("fill", "freeze");
	rect.appendChild(a);

	var beforevalue = rect.width.animVal.value;
	svg.setCurrentTime(15);
	verify(svg.animationsPaused);
	var t_after = svg.getCurrentTime();
	verify(t_after == 15);
	verify(t_after > t_before);

	var aftervalue = rect.width.animVal.value;
	verify(aftervalue == 50);
	verify(beforevalue < aftervalue);
}

svg {
//! <svg xmlns="http://www.w3.org/2000/svg">
//!   <script>document.documentElement.pauseAnimations();</script>
//!   <rect id="r" width="0" height="100%" fill="lime">
//!     <animate attributeName="width"
//!          from="0" to="100" dur="30s"
//!          fill="freeze"/>
//!   </rect>
//! </svg>
};

test("DOM#2: pause, setCurrentTime, read values")
{
	var svg = document.documentElement;
	var rect = document.getElementById("r");
	var t_before = svg.getCurrentTime();

	var beforevalue = rect.width.animVal.value;
	svg.setCurrentTime(15);
	verify(svg.animationsPaused);
	var t_after = svg.getCurrentTime();
	verify(t_after == 15);
	verify(t_after > t_before);

	var aftervalue = rect.width.animVal.value;
	verify(aftervalue == 50);
	verify(beforevalue < aftervalue);
}
