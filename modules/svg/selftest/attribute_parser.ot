/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2005 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/
group "svg.parser.parser";

require SVG_SUPPORT;
require init;

include "modules/svg/src/SVGManagerImpl.h";
include "modules/svg/src/SVGLength.h";
include "modules/svg/src/svgpch.h";
include "modules/svg/src/SVGAttributeParser.h";
include "modules/svg/src/SVGPaint.h";
include "modules/svg/src/SVGUtils.h";

language c++;

table Lengths(const char*, double, int)
{
	{ "12px" , 12.0, CSS_PX },
	{ "12.1", 12.1, CSS_PX },
	{ "0.4cm", 0.4, CSS_CM }
	{ "40.3%", 40.3, CSS_PERCENTAGE },
	{ "4em", 4, CSS_EM },
	{ "4ex", 4, CSS_EX },
	{ "4pt", 4, CSS_PT },
	{ "4pc", 4, CSS_PC },
	{ "4mm", 4, CSS_MM }
}

test("Parse a view box")
{
	const uni_char* test = UNI_L("0 254 256 1000");
	SVGRectObject* parsed_rectobj = NULL;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParseViewBox(test, uni_strlen(test), &parsed_rectobj)));
	SVGRect* r = SVGRectObject::p(parsed_rectobj);
	verify(r->x.Close(0));
	verify(r->y.Close(254));
	verify(r->width.Close(256));
	verify(r->height.Close(1000));
}
finally
{
	OP_DELETE(parsed_rectobj);
}

test("Parse a navigational reference 'self'")
{
	const uni_char* test = UNI_L("self");
	SVGNavRef* navref = NULL;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParseNavRef(test, uni_strlen(test), &navref)));
	verify(navref->GetNavType() == SVGNavRef::SELF);
}
finally
{
	OP_DELETE(navref);
}

test("Parse a navigational reference 'auto'")
{
	const uni_char* test = UNI_L("auto");
	SVGNavRef* navref = NULL;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParseNavRef(test, uni_strlen(test), &navref)));
	verify(navref->GetNavType() == SVGNavRef::AUTO);
}
finally
{
	OP_DELETE(navref);
}

test("Parse a navigational reference 'url(#foo)'")
{
	const uni_char* test = UNI_L("url(#foo)");
	SVGNavRef* navref = NULL;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParseNavRef(test, uni_strlen(test), &navref)));
	verify(navref->GetNavType() == SVGNavRef::URI);
	verify(uni_strcmp(navref->GetURI(), UNI_L("#foo")) == 0);
}
finally
{
	OP_DELETE(navref);
}

test("Parse a errornous navigational reference '#foo'")
{
	const uni_char* test = UNI_L("#foo");
	SVGNavRef* navref = NULL;
	verify(SVGAttributeParser::ParseNavRef(test, uni_strlen(test), &navref) == OpSVGStatus::ATTRIBUTE_ERROR);
}
finally
{
	OP_DELETE(navref);
}

setup
{
}

exit
{
}

