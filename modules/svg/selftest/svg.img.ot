// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
group "svg.img";
require init;
require SVG_SUPPORT;

include "modules/svg/SVGManager.h";
include "modules/svg/svg_workplace.h";
include "modules/svg/src/SVGImageImpl.h";
include "modules/doc/frm_doc.h";
include "modules/dochand/fdelm.h";
include "modules/layout/box/box.h";
include "modules/layout/content/content.h";
include "modules/ecmascript_utils/esasyncif.h";
include "modules/dochand/win.h";
include "modules/hardcore/timer/optimer.h";

language c++;

global
{
	class CheckDocLoaded : public OpTimerListener,
						   public ES_AsyncCallback
	{
		enum State {
			BEFORE_LOADED,
			DONE
		};

	public:

		enum  {
			SLICE_DELAY = 30,
			TIMEOUT_LIMIT = 10000 // This is requested time, not wallclock time
		};

		CheckDocLoaded(FramesDocument* doc)
		{
		   state = BEFORE_LOADED;
		   OpTimer *timer = OP_NEW(OpTimer, ());
		   timer->SetTimerListener(this);
		   timer->Start(SLICE_DELAY);
		}
		~CheckDocLoaded() {}

	private:
		virtual void OnTimeOut(OpTimer *timer)
		{
			Window * window = g_selftest.utils->GetWindow();
			FramesDocument *doc = NULL;
			DocumentManager *doc_man = window ? window->DocManager( ) : NULL;
		
			if (!doc_man)
			{
				ST_failed("Failed to get document manager\n");
				OP_DELETE(this);
				return;
			}
		
			doc = doc_man->GetCurrentDoc( );
			LogicalDocument *logdoc = doc ? doc->GetLogicalDocument() : NULL;
		
			if (!doc || !logdoc)
			{
				ST_failed("Failed to get document\n");
				OP_DELETE(this);
				return;
			}
		
			if (state == BEFORE_LOADED)
			{
				BOOL doc_man_is_stable = doc && (doc_man->GetLoadStatus() == NOT_LOADING ||
												 doc_man->GetLoadStatus() == DOC_CREATED);
				if (doc->IsLoaded(FALSE) && doc_man_is_stable)
				{
					state = DONE;
				}
			}
				
			if (state == DONE)
			{
				ST_passed();
		
				OP_DELETE(timer);
				OP_DELETE(this); // Note!
				return;
			}
		
			if (test_duration > TIMEOUT_LIMIT)
			{
				ST_failed("Test timed out\n");
			}
			else
			{
				test_duration += SLICE_DELAY;
				timer->Start(SLICE_DELAY);
			}
		}

		virtual OP_STATUS HandleCallback(ES_AsyncOperation operation,
										 ES_AsyncStatus status,
										 const ES_Value &result) { return OpStatus::OK; }

		State state;
		int test_duration;
	};
}

html
{
//! <html><body>
//!   <script>
//!		var svgArr = new Array;
//!		function onloadCalled(id, subdoc)
//!		{
//!			var fireOnThis = subdoc.getElementById("circle");
//!			var evObj = document.createEvent('MouseEvents');
//!			evObj.initMouseEvent('click', true, true,
//!						window, 1, 
//!						50,40, 
//!						50,40, 
//!						false, false, false, false, 0, null );
//!			fireOnThis.dispatchEvent(evObj);
//!			svgArr[id] = subdoc;
//!		}
//!   </script>
//!   <object id="o" data="data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%0D%0A%20%20%20%20%20xmlns%3Axlink%3D%22http%3A//www.w3.org/1999/xlink%22%20%0D%0A%20%20%20%20%20viewBox%3D%220%200%20100%20120%22%20%0D%0A%20%20%20%20%20width%3D%22100%22%20%0D%0A%20%20%20%20%20height%3D%22100%22%20%0D%0A%20%20%20%20%20id%3D%22svg-root%22%20onload%3D%22document.getElementById%28%27text%27%29.textContent%3D%27onload%27%3Btop.onloadCalled%28window.frameElement.id%2C%20document%29%3B%22%3E%0D%0A%20%20%3Ccircle%20id%3D%22circle%22%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2249%22%20fill%3D%22green%22%20onclick%3D%22evt.target.setAttribute%28%27fill%27%2C%27red%27%29%3B%22%3E%0D%0A%09%3Canimate%20attributeName%3D%22r%22%20values%3D%2210%3B50%3B10%22%20repeatCount%3D%22indefinite%22%20begin%3D%220s%22%20dur%3D%223s%22/%3E%0D%0A%20%20%3C/circle%3E%0D%0A%20%20%3Ctext%20id%3D%22text%22%20x%3D%2250%22%20y%3D%22110%22%20font-size%3D%2220%22%20text-anchor%3D%22middle%22%3Enoscript%3C/text%3E%0D%0A%3C/svg%3E" 
//!		width="100" height="100"></object>
//!   <img id="i" src="data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%0D%0A%20%20%20%20%20xmlns%3Axlink%3D%22http%3A//www.w3.org/1999/xlink%22%20%0D%0A%20%20%20%20%20viewBox%3D%220%200%20100%20120%22%20%0D%0A%20%20%20%20%20width%3D%22100%22%20%0D%0A%20%20%20%20%20height%3D%22100%22%20%0D%0A%20%20%20%20%20id%3D%22svg-root%22%20onload%3D%22document.getElementById%28%27text%27%29.textContent%3D%27onload%27%3Btop.onloadCalled%28window.frameElement.id%2C%20document%29%3B%22%3E%0D%0A%20%20%3Ccircle%20id%3D%22circle%22%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2249%22%20fill%3D%22green%22%20onclick%3D%22evt.target.setAttribute%28%27fill%27%2C%27red%27%29%3B%22%3E%0D%0A%09%3Canimate%20attributeName%3D%22r%22%20values%3D%2210%3B50%3B10%22%20repeatCount%3D%22indefinite%22%20begin%3D%220s%22%20dur%3D%223s%22/%3E%0D%0A%20%20%3C/circle%3E%0D%0A%20%20%3Ctext%20id%3D%22text%22%20x%3D%2250%22%20y%3D%22110%22%20font-size%3D%2220%22%20text-anchor%3D%22middle%22%3Enoscript%3C/text%3E%0D%0A%3C/svg%3E" 
//!		width="100" height="100"></img>
//!   <embed id="e" src="data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%0D%0A%20%20%20%20%20xmlns%3Axlink%3D%22http%3A//www.w3.org/1999/xlink%22%20%0D%0A%20%20%20%20%20viewBox%3D%220%200%20100%20120%22%20%0D%0A%20%20%20%20%20width%3D%22100%22%20%0D%0A%20%20%20%20%20height%3D%22100%22%20%0D%0A%20%20%20%20%20id%3D%22svg-root%22%20onload%3D%22document.getElementById%28%27text%27%29.textContent%3D%27onload%27%3Btop.onloadCalled%28window.frameElement.id%2C%20document%29%3B%22%3E%0D%0A%20%20%3Ccircle%20id%3D%22circle%22%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2249%22%20fill%3D%22green%22%20onclick%3D%22evt.target.setAttribute%28%27fill%27%2C%27red%27%29%3B%22%3E%0D%0A%09%3Canimate%20attributeName%3D%22r%22%20values%3D%2210%3B50%3B10%22%20repeatCount%3D%22indefinite%22%20begin%3D%220s%22%20dur%3D%223s%22/%3E%0D%0A%20%20%3C/circle%3E%0D%0A%20%20%3Ctext%20id%3D%22text%22%20x%3D%2250%22%20y%3D%22110%22%20font-size%3D%2220%22%20text-anchor%3D%22middle%22%3Enoscript%3C/text%3E%0D%0A%3C/svg%3E" 
//!		width="100" height="100"></embed>
//! </body></html>
}

test("CheckDocLoaded") 
	async;
{
	OP_NEW(CheckDocLoaded, (state.doc));
}

test("Test that scripting is disabled in html:img SVG:s")
	require IMG_SUPPORTS_SVG_DIRECTLY;
{
	SVG_DOCUMENT_CLASS* doc = state.doc;
	verify(doc);

	HTML_Element* img = find_element("img", 1);
	verify(img);

	Box* layoutbox = img->GetLayoutBox();
	verify(layoutbox);
	
	Content* content = layoutbox->GetContent();
	verify(content);
	
	verify(content->IsIFrame());
	
	IFrameContent* ifcontent = static_cast<IFrameContent*>(content);
	
	FramesDocElm *frames_doc_elm = ifcontent->GetFramesDocElm();
	verify(frames_doc_elm);
	
	FramesDocument *subdoc = frames_doc_elm->GetCurrentDoc();
	verify(subdoc);
	LogicalDocument* logdoc = subdoc->GetLogicalDocument();
	verify(logdoc);
	SVGWorkplaceImpl* workplace = static_cast<SVGWorkplaceImpl*>(logdoc->GetSVGWorkplace());
	verify(workplace);

	SVGImage* svgimage = workplace->GetFirstSVG();
	verify(svgimage);
	verify(!svgimage->IsEcmaScriptEnabled(doc));
	verify(!svgimage->IsEcmaScriptEnabled(subdoc));
}

test("Test that events are disabled in html:img SVG:s")
	language ecmascript;
{
	var root = svgArr["i"];
	if(root)
	{
		var c = root.getElementById("circle");
		verify(c);
		verify(c.getAttribute("fill") != "red");
	}
}

test("Test that scripting is enabled in html:object SVG:s")
{
	SVG_DOCUMENT_CLASS* doc = state.doc;
	verify(doc);

	HTML_Element* img = find_element("object", 1);
	verify(img);

	Box* layoutbox = img->GetLayoutBox();
	verify(layoutbox);
	
	Content* content = layoutbox->GetContent();
	verify(content);
	
	verify(content->IsIFrame());
	
	IFrameContent* ifcontent = static_cast<IFrameContent*>(content);
	
	FramesDocElm *frames_doc_elm = ifcontent->GetFramesDocElm();
	verify(frames_doc_elm);
	
	FramesDocument *subdoc = frames_doc_elm->GetCurrentDoc();
	verify(subdoc);
	LogicalDocument* logdoc = subdoc->GetLogicalDocument();
	verify(logdoc);
	SVGWorkplaceImpl* workplace = static_cast<SVGWorkplaceImpl*>(logdoc->GetSVGWorkplace());
	verify(workplace);

	SVGImage* svgimage = workplace->GetFirstSVG();
	verify(svgimage);
	verify(svgimage->IsEcmaScriptEnabled(doc));
	verify(svgimage->IsEcmaScriptEnabled(subdoc));
}

test("Test that events are enabled in html:object SVG:s")
	language ecmascript;
{
	var root = svgArr["o"];
	verify(root);
	var c = root.getElementById("circle");
	verify(c);
	verify(c.getAttribute("fill") == "red");
}

test("Test that scripting is enabled in html:embed SVG:s")
{
	SVG_DOCUMENT_CLASS* doc = state.doc;
	verify(doc);

	HTML_Element* img = find_element("embed", 1);
	verify(img);

	Box* layoutbox = img->GetLayoutBox();
	verify(layoutbox);
	
	Content* content = layoutbox->GetContent();
	verify(content);
	
	verify(content->IsIFrame());
	
	IFrameContent* ifcontent = static_cast<IFrameContent*>(content);
	
	FramesDocElm *frames_doc_elm = ifcontent->GetFramesDocElm();
	verify(frames_doc_elm);
	
	FramesDocument *subdoc = frames_doc_elm->GetCurrentDoc();
	verify(subdoc);
	LogicalDocument* logdoc = subdoc->GetLogicalDocument();
	verify(logdoc);
	SVGWorkplaceImpl* workplace = static_cast<SVGWorkplaceImpl*>(logdoc->GetSVGWorkplace());
	verify(workplace);

	SVGImage* svgimage = workplace->GetFirstSVG();
	verify(svgimage);
	verify(svgimage->IsEcmaScriptEnabled(doc));
	verify(svgimage->IsEcmaScriptEnabled(subdoc));
}

test("Test that events are enabled in html:embed SVG:s")
	language ecmascript;
{
	var root = svgArr["e"];
	verify(root);
	var c = root.getElementById("circle");
	verify(c);
	verify(c.getAttribute("fill") == "red");
}
