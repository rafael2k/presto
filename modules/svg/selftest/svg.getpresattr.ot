/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "svg.getpresattr";

require SVG_SUPPORT;
require SVG_GET_PRESENTATIONAL_ATTRIBUTES;
require init;

include "modules/style/css.h";
include "modules/style/css_all_properties.h";
include "modules/style/css_property_list.h";
include "modules/svg/SVGManager.h";
include "modules/doc/frm_doc.h";

global
{
	BOOL IsBlue(CSS_decl *decl)
	{
		TempBuffer value;
		CSS::FormatDeclarationL(&value, decl, FALSE, CSS_FORMAT_CURRENT_STYLE);

		BOOL ret = uni_str_eq(value.GetStorage(), "rgb(0, 0, 255)");
		ret = ret || uni_str_eq(value.GetStorage(), "#0000ff");
		ret = ret || uni_str_eq(value.GetStorage(), "blue");

		return ret;
	}

	BOOL IsValueEqual(CSS_decl *decl, const char *val)
	{
		if (op_strcmp(val, "blue") == 0)
			return IsBlue(decl);

		TempBuffer value;
		CSS::FormatDeclarationL(&value, decl, FALSE, CSS_FORMAT_CURRENT_STYLE);

		return (value.GetStorage() && uni_str_eq(value.GetStorage(), val));
	}
}

svg {
	//! <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
	//! 	<rect x="10" y="10" width="50" height="50" fill="blue" />
	//! </svg>
};

test("One attribute")
{
	verify(state.doc);

	HLDocProfile *hldp = state.doc->GetHLDocProfile();
	verify(hldp);

	HTML_Element *elm = find_element("rect");
	verify(elm);

	CSS_property_list list;
	verify(g_svg_manager->GetPresentationalAttributes(elm, hldp, &list) == OpStatus::OK);
	
	verify(list.GetLength() == 1);

	CSS_decl *decl = list.GetFirstDecl();
	verify(decl->GetProperty() == CSS_PROPERTY_fill);
}

svg {
	//! <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
	//! 	<rect x="10" y="10" width="50" height="50" fill="blue" stroke="red" stroke-opacity="0.5" />
	//! </svg>
};

test("Three attributes")
{
	verify(state.doc);

	HLDocProfile *hldp = state.doc->GetHLDocProfile();
	verify(hldp);

	HTML_Element *elm = find_element("rect");
	verify(elm);

	CSS_property_list list;
	verify(g_svg_manager->GetPresentationalAttributes(elm, hldp, &list) == OpStatus::OK);
	
	verify(list.GetLength() == 3);

	CSS_decl *decl = list.GetFirstDecl();
	verify(decl->GetProperty() == CSS_PROPERTY_fill);

	decl = decl->Suc();
	verify(decl->GetProperty() == CSS_PROPERTY_stroke);

	decl = decl->Suc();
	verify(decl->GetProperty() == CSS_PROPERTY_stroke_opacity);
}

svg {
	//! <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
	//! 	<style> rect { fill: lime; stroke: black; } </style>
	//! 	<rect x="10" y="10" width="50" height="50" fill="blue" />
	//! </svg>
};

test("One attribute, plus inline style")
{
	verify(state.doc);

	HLDocProfile *hldp = state.doc->GetHLDocProfile();
	verify(hldp);

	HTML_Element *elm = find_element("rect");
	verify(elm);

	CSS_property_list list;
	verify(g_svg_manager->GetPresentationalAttributes(elm, hldp, &list) == OpStatus::OK);
	
	verify(list.GetLength() == 1);

	CSS_decl *decl = list.GetFirstDecl();
	verify(decl->GetProperty() == CSS_PROPERTY_fill);
	verify(IsBlue(decl));
}

svg {
	//! <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
	//! 	<rect x="10" y="10" width="50" height="50" fill="blue" style="fill: lime; stroke: black;" />
	//! </svg>
};

test("One attribute, plus element style")
{
	verify(state.doc);

	HLDocProfile *hldp = state.doc->GetHLDocProfile();
	verify(hldp);

	HTML_Element *elm = find_element("rect");
	verify(elm);

	CSS_property_list list;
	verify(g_svg_manager->GetPresentationalAttributes(elm, hldp, &list) == OpStatus::OK);
	
	verify(list.GetLength() == 1);

	CSS_decl *decl = list.GetFirstDecl();
	verify(decl->GetProperty() == CSS_PROPERTY_fill);
	verify(IsBlue(decl));
}

svg {
	//! <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
	//! 	<style> rect { display: inline; stroke: black; } </style>
	//! 	<rect x="10" y="10" width="50" height="50" display="block" />
	//! </svg>
};

test("One attribute, plus inline shared property")
{
	verify(state.doc);

	HLDocProfile *hldp = state.doc->GetHLDocProfile();
	verify(hldp);

	HTML_Element *elm = find_element("rect");
	verify(elm);

	CSS_property_list list;
	verify(g_svg_manager->GetPresentationalAttributes(elm, hldp, &list) == OpStatus::OK);
	
	verify(list.GetLength() == 1);

	CSS_decl *decl = list.GetFirstDecl();
	verify(decl->GetProperty() == CSS_PROPERTY_display);
	verify(IsValueEqual(decl, "block"));
}

table AttributesTable
{
	{ alignment-baseline, CSS_PROPERTY_alignment_baseline },
	// { animated-marker-prop, CSS_PROPERTY_animated_marker_prop }, //< Unsupported.
	{ audio-level, CSS_PROPERTY_audio_level },
	{ baseline-shift, CSS_PROPERTY_baseline_shift },
	{ buffered-rendering, CSS_PROPERTY_buffered_rendering },
	{ clip, CSS_PROPERTY_clip },
	{ clip-path, CSS_PROPERTY_clip_path },
	{ clip-rule, CSS_PROPERTY_clip_rule },
	{ color, CSS_PROPERTY_color },
	// { color-interpolation, CSS_PROPERTY_color_interpolation }, //< Unsupported.
	{ color-interpolation-filters, CSS_PROPERTY_color_interpolation_filters },
	// { color-profile, CSS_PROPERTY_color_profile }, //< Unsupported.
	// { color-rendering, CSS_PROPERTY_color_rendering }, //< Unsupported.
	{ cursor, CSS_PROPERTY_cursor },
	{ direction, CSS_PROPERTY_direction },
	{ display, CSS_PROPERTY_display },
	{ display-align, CSS_PROPERTY_display_align },
	{ dominant-baseline, CSS_PROPERTY_dominant_baseline },
	{ enable-background, CSS_PROPERTY_enable_background },
	{ fill, CSS_PROPERTY_fill },
	{ fill-opacity, CSS_PROPERTY_fill_opacity },
	{ fill-rule, CSS_PROPERTY_fill_rule },
	{ filter, CSS_PROPERTY_filter },
	{ flood-color, CSS_PROPERTY_flood_color },
	{ flood-opacity, CSS_PROPERTY_flood_opacity },
	// { font, CSS_PROPERTY_font }, // Font is not a presentation attribute.
	{ font-family, CSS_PROPERTY_font_family },
	{ font-size, CSS_PROPERTY_font_size },
	{ font-size-adjust, CSS_PROPERTY_font_size_adjust },
	{ font-stretch, CSS_PROPERTY_font_stretch },
	{ font-style, CSS_PROPERTY_font_style },
	{ font-variant, CSS_PROPERTY_font_variant },
	{ font-weight, CSS_PROPERTY_font_weight },
	{ glyph-orientation-horizontal, CSS_PROPERTY_glyph_orientation_horizontal },
	{ glyph-orientation-vertical, CSS_PROPERTY_glyph_orientation_vertical },
	{ image-rendering, CSS_PROPERTY_image_rendering },
	// { kerning, CSS_PROPERTY_kerning }, //< Unsupported.
	{ letter-spacing, CSS_PROPERTY_letter_spacing },
	{ lighting-color, CSS_PROPERTY_lighting_color },
	{ line-increment, CSS_PROPERTY_line_increment },
	{ marker-end, CSS_PROPERTY_marker_end },
	{ marker-mid, CSS_PROPERTY_marker_mid },
	{ marker-start, CSS_PROPERTY_marker_start },
	{ mask, CSS_PROPERTY_mask },
	{ opacity, CSS_PROPERTY_opacity },
	// { overflow, CSS_PROPERTY_overflow }, // overflow is a shorthand. Handled separately.
	{ pointer-events, CSS_PROPERTY_pointer_events },
	{ shape-rendering, CSS_PROPERTY_shape_rendering },
	{ solid-color, CSS_PROPERTY_solid_color },
	{ solid-opacity, CSS_PROPERTY_solid_opacity },
	{ stop-color, CSS_PROPERTY_stop_color },
	{ stop-opacity, CSS_PROPERTY_stop_opacity },
	{ stroke, CSS_PROPERTY_stroke },
	{ stroke-dasharray, CSS_PROPERTY_stroke_dasharray },
	{ stroke-dashoffset, CSS_PROPERTY_stroke_dashoffset },
	{ stroke-linecap, CSS_PROPERTY_stroke_linecap },
	{ stroke-linejoin, CSS_PROPERTY_stroke_linejoin },
	{ stroke-miterlimit, CSS_PROPERTY_stroke_miterlimit },
	{ stroke-opacity, CSS_PROPERTY_stroke_opacity },
	{ stroke-width, CSS_PROPERTY_stroke_width },
	{ text-align, CSS_PROPERTY_text_align },
	{ text-anchor, CSS_PROPERTY_text_anchor },
	{ text-decoration, CSS_PROPERTY_text_decoration },
	{ text-rendering, CSS_PROPERTY_text_rendering },
	{ unicode-bidi, CSS_PROPERTY_unicode_bidi },
	{ vector-effect, CSS_PROPERTY_vector_effect },
	{ viewport-fill, CSS_PROPERTY_viewport_fill },
	{ viewport-fill-opacity, CSS_PROPERTY_viewport_fill_opacity },
	{ visibility, CSS_PROPERTY_visibility },
	{ word-spacing, CSS_PROPERTY_word_spacing },
	{ writing-mode, CSS_PROPERTY_writing_mode }
}

foreach (PROP, CSSPROP) from AttributesTable
{
	svg {
		//! <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
		//! 	<g $(PROP)="inherit">
		//! 		<rect x="10" y="10" width="50" height="50" />
		//! 	</g>
		//! </svg>
	};

	test("$(PROP)")
	{
		verify(state.doc);

		HLDocProfile *hldp = state.doc->GetHLDocProfile();
		verify(hldp);

		HTML_Element *elm = find_element("g");
		verify(elm);

		CSS_property_list list;
		verify(g_svg_manager->GetPresentationalAttributes(elm, hldp, &list) == OpStatus::OK);
	
		verify(list.GetLength() == 1);

		CSS_decl *decl = list.GetFirstDecl();
		verify(decl->GetProperty() == CSSPROP);
	}
}

svg {
	//! <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
	//! 	<g overflow="inherit">
	//! 		<rect x="10" y="10" width="50" height="50" fill="blue" style="fill: lime; stroke: black;" />
	//! 	</g>
	//! </svg>
};

test("overflow")
{
	verify(state.doc);

	HLDocProfile *hldp = state.doc->GetHLDocProfile();
	verify(hldp);

	HTML_Element *elm = find_element("g");
	verify(elm);

	CSS_property_list list;
	verify(g_svg_manager->GetPresentationalAttributes(elm, hldp, &list) == OpStatus::OK);
	
	verify(list.GetLength() == 2);

	CSS_decl *decl = list.GetFirstDecl();
	verify(decl->GetProperty() == CSS_PROPERTY_overflow_x);

	decl = decl->Suc();
	verify(decl->GetProperty() == CSS_PROPERTY_overflow_y);
}
