/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2005 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/
group "svg.parser.time";

require SVG_SUPPORT;
require init;

include "modules/svg/src/svgpch.h";
include "modules/svg/src/SVGTimeValue.h";
include "modules/svg/src/SVGVector.h";
include "modules/svg/src/SVGAttributeParser.h";
include "modules/svg/src/animation/svganimationtime.h";

language c++;

table OffsetTimeValues(const uni_char*, SVG_ANIMATION_TIME)
{
	{ UNI_L("0s"), 0},
	{ UNI_L("0.5s"), 500},
	{ UNI_L("0.9"), 900 },
	{ UNI_L("1"), 1000 },
	{ UNI_L("1ms"), 1 },
	{ UNI_L("123761238ms"), 123761238 },
	{ UNI_L("123min"), 123*60*1000 },
	{ UNI_L("12.5min"), 12*60*1000 + 30*1000},
	{ UNI_L("123h"), 123*60*60*1000 },
	{ UNI_L("123.5h"), 123*60*60*1000 + 30*60*1000},
	{ UNI_L("01:00"),  1*60*1000 + 0*1000 },
	{ UNI_L("01:12"),  1*60*1000 + 12*1000 },
	{ UNI_L("12:12"),  12*60*1000 + 12*1000 },
	{ UNI_L("12:12.5"),  12*60*1000 + 12*1000 + 500 },
	{ UNI_L("23:12:12.5"),  23*60*60*1000 + 12*60*1000 + 12*1000 + 500 },
	{ UNI_L("25ms"), 25 },
	{ UNI_L("25min"), 25*60*1000 },
	{ UNI_L("0000.005s"), 5 }
	{ UNI_L("1h"), 60*60*1000 },
	{ UNI_L("02:30:03"), 2*60*60*1000 + 30*60*1000 + 3*1000 },
	{ UNI_L("0000.005s"), 5 }
}

test("OffsetValue")
{
	iterate (str, atime) from OffsetTimeValues
	{
		size_t strlen = uni_strlen(str);
		SVGVector vec(SVGOBJECT_TIME);
		verify(SVGAttributeParser::ParseVector(str, strlen, &vec) == OpStatus::OK);
		verify(vec.GetCount() == 1);
		SVGTimeObject* val = (SVGTimeObject*) vec.Get(0);
		verify(val->TimeType() == SVGTIME_OFFSET);
		verify(val->GetOffset() == atime);
	}
}

table Trash(const uni_char*)
{
	{ UNI_L("asdlkasjdlkajs") },
	{ UNI_L("234werkjh425") },
	{ UNI_L("%dsfl43207$%@#$%SD"), },
	{ UNI_L("\"'$#%asdasd\"") },
	{ UNI_L("_") }
	{ UNI_L("asdkjasfljhdfljghdslhsadljhwsfjhasdf83q48o5r83yghoalksdhga8347ytalku;sgha48y9t32uh4gak38ty9") }
	{ UNI_L("12:60") },
	{ UNI_L("12:20:60") },
	{ UNI_L("12:2200:60") },
	{ UNI_L("12.2:2200:60") },
	{ UNI_L("begin") },
	{ UNI_L("end") },
}

test("Invalid")
{
	iterate (str) from Trash
	{
		size_t strlen = uni_strlen(str);
		SVGVector vec(SVGOBJECT_TIME);
		verify(SVGAttributeParser::ParseVector(str, strlen, &vec) == OpSVGStatus::ATTRIBUTE_ERROR);
	}
}

table EventTimeValues(const uni_char *, DOM_EventType, SVG_ANIMATION_TIME)
{
	{ UNI_L("focusin"), DOMFOCUSIN, 0 },
	{ UNI_L("focusout"), DOMFOCUSOUT, 0 },
	{ UNI_L("activate"), DOMACTIVATE, 0 },
	{ UNI_L("mouseover"), ONMOUSEOVER, 0 },
	{ UNI_L("click"), ONCLICK, 0 },
	{ UNI_L("mousedown"), ONMOUSEDOWN, 0 },
	{ UNI_L("mouseup"), ONMOUSEUP, 0 },
	{ UNI_L("mouseover"), ONMOUSEOVER, 0 },
	{ UNI_L("mousemove"), ONMOUSEMOVE, 0 },
	{ UNI_L("mouseout"), ONMOUSEOUT, 0 },
	{ UNI_L("SVGLoad"), SVGLOAD, 0 },
	{ UNI_L("SVGUnload"), SVGUNLOAD, 0 },
	{ UNI_L("SVGAbort"), SVGABORT, 0 },
	{ UNI_L("SVGError"), SVGERROR, 0 },
	{ UNI_L("SVGResize"), SVGRESIZE, 0 },
	{ UNI_L("SVGScroll"), SVGSCROLL, 0 },
	{ UNI_L("SVGZoom"), SVGZOOM, 0 },
	{ UNI_L("beginEvent"), BEGINEVENT, 0 },
	{ UNI_L("endEvent"), ENDEVENT, 0 },
	{ UNI_L("repeatEvent"), REPEATEVENT, 0 },
	{ UNI_L("mouseover.repeatEvent"), REPEATEVENT, 0 },
	{ UNI_L("mouseover\\.repeatEvent.mouseover"), ONMOUSEOVER, 0 },
	{ UNI_L("mouseover\\.repeatEvent.mouseover+2:02:12.9"), ONMOUSEOVER, 2*60*60*1000 + 2*60 *1000 + 12*1000 + 900 },
	{ UNI_L("  mouseover\\.repeatEvent.mouseover+0.1  "), ONMOUSEOVER, 100 },
}

test("Event")
{
	iterate (str, event_type, offset) from EventTimeValues
	{
		size_t strlen = uni_strlen(str);
		SVGVector vec(SVGOBJECT_TIME);
		verify(SVGAttributeParser::ParseVector(str, strlen, &vec) == OpStatus::OK);
		verify(vec.GetCount() == 1);

		SVGTimeObject* val = (SVGTimeObject*) vec.Get(0);
		verify(val->TimeType() == SVGTIME_EVENT);
		verify(val->GetEventType() == event_type);
		verify(val->GetOffset() == offset);
	}
}

test("MultipleTimeValueList")
{
    const uni_char* test = UNI_L("\t10s ; 20s \t; 30s;0.5s");
    size_t test_len = uni_strlen(test);
    SVGVector vec(SVGOBJECT_TIME);

    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseVector(test, test_len, &vec)));
    verify(vec.GetCount() == 4);
    verify(static_cast<SVGTimeObject*>(vec.Get(0))->TimeType() == SVGTIME_OFFSET);
    verify(static_cast<SVGTimeObject*>(vec.Get(1))->TimeType() == SVGTIME_OFFSET);
    verify(static_cast<SVGTimeObject*>(vec.Get(2))->TimeType() == SVGTIME_OFFSET);
    verify(static_cast<SVGTimeObject*>(vec.Get(3))->TimeType() == SVGTIME_OFFSET);
    verify(static_cast<SVGTimeObject*>(vec.Get(0))->GetOffset() == 10000);
    verify(static_cast<SVGTimeObject*>(vec.Get(1))->GetOffset() == 20000);
    verify(static_cast<SVGTimeObject*>(vec.Get(2))->GetOffset() == 30000);
    verify(static_cast<SVGTimeObject*>(vec.Get(3))->GetOffset() == 500);
}

test("IndefiniteValue")
{
    const uni_char* test = UNI_L("\tindefinite    ");
	size_t test_len = uni_strlen(test);
    SVGVector vec(SVGOBJECT_TIME);
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseVector(test, test_len, &vec)));
    verify(vec.GetCount() == 1);

	SVGTimeObject *time_val = static_cast<SVGTimeObject *>(vec.Get(0));
    verify(time_val->TimeType() == SVGTIME_INDEFINITE);
}

table SyncbaseValues(const uni_char *, const uni_char *, SVGSyncbaseEvent, SVG_ANIMATION_TIME)
{
	{ UNI_L("apa.begin"), UNI_L("apa"), SVGSYNCBASE_BEGIN, 0 },
	{ UNI_L("apa.end"), UNI_L("apa"), SVGSYNCBASE_END, 0 },
	{ UNI_L("apa\\.end.begin"), UNI_L("apa.end"), SVGSYNCBASE_BEGIN, 0 },
	{ UNI_L("apa\\.begin.begin"), UNI_L("apa.begin"), SVGSYNCBASE_BEGIN, 0 },
	{ UNI_L("\xD7A3\x20DC:.begin"), UNI_L("\xD7A3\x20DC:"), SVGSYNCBASE_BEGIN, 0 },
	{ UNI_L("\xD7A3\x20DC:.end"), UNI_L("\xD7A3\x20DC:"), SVGSYNCBASE_END, 0 },
	{ UNI_L(":_\\.\xD7A3\x20DC:.end"), UNI_L(":_.\xD7A3\x20DC:"), SVGSYNCBASE_END, 0 },
	{ UNI_L(":_\\.\xD7A3\x20DC:.end+0.2s"), UNI_L(":_.\xD7A3\x20DC:"), SVGSYNCBASE_END, 200 },
	{ UNI_L(":_\\.\xD7A3\x20DC:.end+0.2s ; "), UNI_L(":_.\xD7A3\x20DC:"), SVGSYNCBASE_END, 200 },
	{ UNI_L("\t:_\\.\xD7A3\x20DC:.end+02:20.2 ; "), UNI_L(":_.\xD7A3\x20DC:"), SVGSYNCBASE_END, 2*60*1000 + 20*1000 + 200 },
	{ UNI_L("phase7.end-0.2s"), UNI_L("phase7"), SVGSYNCBASE_END, -200 }
}

test("SyncbaseValue")
{
	iterate (test, id_value, syncbase_type, offset) from SyncbaseValues
	{
		size_t test_len = uni_strlen(test);
		SVGVector vec(SVGOBJECT_TIME);
		verify(OpStatus::IsSuccess(SVGAttributeParser::ParseVector(test, test_len, &vec)));
		verify(vec.GetCount() == 1);
		verify(vec.Get(0)->Type() == SVGOBJECT_TIME);
		SVGTimeObject* time_value = static_cast<SVGTimeObject*>(vec.Get(0));
		verify(time_value->GetSyncbaseEvent() == syncbase_type);
		const uni_char *parsed_id_value = time_value->GetElementId();
		verify(parsed_id_value != NULL);
		verify(uni_strcmp(id_value, parsed_id_value) == 0);
		verify(time_value->GetOffset() == offset);
	}
}

table AccessKeyValues(const uni_char *, const uni_char *, uni_char, SVG_ANIMATION_TIME)
{
	{ UNI_L("accessKey(b) +3s"), NULL, 'b', 3000 },
}

test("AccessKey")
{
	iterate (test, id_value, access_key, offset) from AccessKeyValues
	{
		size_t test_len = uni_strlen(test);
		SVGVector vec(SVGOBJECT_TIME);
		verify(OpStatus::IsSuccess(SVGAttributeParser::ParseVector(test, test_len, &vec)));
		verify(vec.GetCount() == 1);
		verify(vec.Get(0)->Type() == SVGOBJECT_TIME);
		SVGTimeObject* time_value = static_cast<SVGTimeObject*>(vec.Get(0));
		verify(time_value->GetAccessKey() == access_key);
		const uni_char *parsed_id_value = time_value->GetElementId();
		if (id_value != NULL)
		{
			verify(parsed_id_value != NULL);
			verify(uni_strcmp(id_value, parsed_id_value) == 0);
		}
		else
		{
			verify(parsed_id_value == NULL);
		}
		verify(time_value->GetOffset() == offset);
	}
}

