/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2005-2006 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.	It may not be distributed
** under any circumstances.
*/
group "svg.dom.angle";

require SVG_SUPPORT;
require SVG_DOM;
require init;
require SVG_FULL_11;

include "modules/svg/src/svgpch.h";
include "modules/svg/src/svgdom/svgdomangleimpl.h";
include "modules/svg/src/SVGValue.h";
include "modules/svg/src/AttrValueStore.h";
include "modules/svg/svg_number.h";
include "modules/svg/svg_dominterfaces.h";

language c++;

// double: exact value, SVGAngleType, SVGDOMAngle::UnitType, string: what tostring on exact value is expected to return, double: value in degrees, double: inexact value matching the string
table svg_angle_table
{
	{ 3.14159265358979323846,		SVGANGLE_RAD,			SVGDOMAngle::SVG_ANGLETYPE_RAD,		"3.14159rad",	180,	3.14159},
	{ 3.4,			SVGANGLE_UNSPECIFIED,	SVGDOMAngle::SVG_ANGLETYPE_UNSPECIFIED,	"3.4",		3.4,	3.4},
	{ -42.123,		SVGANGLE_DEG,			SVGDOMAngle::SVG_ANGLETYPE_DEG,		"-42.123deg",	-42.123, -42.123 },
	{ 1e-21,		SVGANGLE_RAD,			SVGDOMAngle::SVG_ANGLETYPE_RAD,		"1e-21rad",	0,		1e-21 }, //(1e-21 * 180) / SVGNumber::pi()},
	{ 0.2334,		SVGANGLE_DEG,			SVGDOMAngle::SVG_ANGLETYPE_DEG,		"0.2334deg",	0.2334, 0.2334},
	{ 90,			SVGANGLE_DEG,			SVGDOMAngle::SVG_ANGLETYPE_DEG,		"90deg",		90,		90},
	{ 180,			SVGANGLE_DEG,			SVGDOMAngle::SVG_ANGLETYPE_DEG,		"180deg",		180,	180},
	{ 270,			SVGANGLE_DEG,			SVGDOMAngle::SVG_ANGLETYPE_DEG,		"270deg",		270,	270},
	{ 360,			SVGANGLE_DEG,			SVGDOMAngle::SVG_ANGLETYPE_DEG,		"360deg",		360,	360 },
	{ 400,			SVGANGLE_GRAD,			SVGDOMAngle::SVG_ANGLETYPE_GRAD,	"400grad",		360,	400 }
}

global
{
}

subtest TestSVGNumbersNotClose(double a, double b)
{
    verify(!SVGNumber(a).Close(SVGNumber(b)));
}

subtest TestSVGNumbersClose(double a, double b)
{
    verify(SVGNumber(a).Close(SVGNumber(b)));
}

foreach( refval, angletype, domangletype, str, refval_in_deg, inexact_refval) from svg_angle_table
{
	test("Test SVGDOMAngleImpl dom name(" + str + ")")
	{
		SVGAngle* angle = OP_NEW(SVGAngle, (refval,angletype));
		SVGDOMAngleImpl* impl = OP_NEW(SVGDOMAngleImpl, (angle));
		verify(impl);
		angle = NULL;
		verify_string(impl->GetDOMName(), "SVGAngle");
	}
	finally
	{
		OP_DELETE(angle);
		OP_DELETE(impl);
	}

	test("Test SVGDOMAngleImpl::GetUnitType(" + str + ")")
	{
		SVGAngle* angle = OP_NEW(SVGAngle, (refval,angletype));
		SVGDOMAngleImpl* impl = OP_NEW(SVGDOMAngleImpl, (angle));
		verify(impl);
		angle = NULL;
		SVGDOMAngle::UnitType type = impl->GetUnitType();
		verify(type == domangletype);
	}
	finally
	{
		OP_DELETE(angle);
		OP_DELETE(impl);
	}

	test("Test SVGDOMAngleImpl::GetValueInSpecifiedUnits(" + str + ")")
	{
		SVGAngle* angle = OP_NEW(SVGAngle, (refval,angletype));
		SVGDOMAngleImpl* impl = OP_NEW(SVGDOMAngleImpl, (angle));
		verify(impl);
		angle = NULL;
		double val = impl->GetValueInSpecifiedUnits();

		verify(TestSVGNumbersClose(val, refval));
	}
	finally
	{
		OP_DELETE(angle);
		OP_DELETE(impl);
	}

	test("Test SVGDOMAngleImpl::GetValueAsString(" + str + ")")
	{
		SVGAngle* angle = OP_NEW(SVGAngle, (refval,angletype));
		SVGDOMAngleImpl* impl = OP_NEW(SVGDOMAngleImpl, (angle));
		verify(impl);
		angle = NULL;
		verify_string(impl->GetValueAsString(), str);
	}
	finally
	{
		OP_DELETE(angle);
		OP_DELETE(impl);
	}

	test("Test SVGDOMAngleImpl::GetValue(" + str + ")")
	{
		SVGAngle* angle = OP_NEW(SVGAngle, (refval,angletype));
		SVGDOMAngleImpl* impl = OP_NEW(SVGDOMAngleImpl, (angle));
		verify(impl);
		angle = NULL;
		double val = impl->GetValue();

		verify(TestSVGNumbersClose(val, refval_in_deg));
	}
	finally
	{
		OP_DELETE(angle);
		OP_DELETE(impl);
	}

	test("Test SVGDOMAngleImpl::SetValue") leakcheck;
	{
		SVGAngle* angle = OP_NEW(SVGAngle, (refval,angletype));
		SVGDOMAngleImpl* impl = OP_NEW(SVGDOMAngleImpl, (angle));
		verify(impl);
		angle = NULL;
		double new_val = 43.532;
		impl->SetValue(new_val);

		double real_new_val = impl->GetValue();

		verify(TestSVGNumbersClose(new_val, real_new_val));
	}
	finally
	{
		OP_DELETE(angle);
		OP_DELETE(impl);
	}

	test("Test SVGDOMAngleImpl::SetValueByString(" + str + ")")
	{
		SVGAngle* ref_angle = NULL;
		SVGAngle* angle = NULL;
		SVGDOMAngleImpl* ref_impl = NULL;
		SVGDOMAngleImpl* impl = NULL;
		ref_angle = OP_NEW(SVGAngle, (inexact_refval,angletype));
		verify(ref_angle);
		ref_impl = OP_NEW(SVGDOMAngleImpl, (ref_angle));
		verify(ref_impl);
		ref_angle = NULL;

		angle = OP_NEW(SVGAngle, ());
		verify(angle);
		impl = OP_NEW(SVGDOMAngleImpl, (angle));
		verify(impl);
		angle = NULL;
		impl->SetValueAsString(UNI_L(str));

		verify(TestSVGNumbersClose(impl->GetValueInSpecifiedUnits(), ref_impl->GetValueInSpecifiedUnits()));
		verify(impl->GetUnitType() == ref_impl->GetUnitType());

		verify_string(impl->GetValueAsString(), str);
	}
	finally
	{
		OP_DELETE(ref_angle);
		OP_DELETE(ref_impl);
		OP_DELETE(angle);
		OP_DELETE(impl);
	}
}

// value, unit, ref_value, ref_unit, dom_ref_unit, ref_str
table svg_conversion_table
{
	{ 45,						SVGANGLE_UNSPECIFIED,	45,					SVGANGLE_DEG,	SVGDOMAngle::SVG_ANGLETYPE_DEG,			"45deg" }
	{ 45,						SVGANGLE_DEG,			0.785398163,		SVGANGLE_RAD,	SVGDOMAngle::SVG_ANGLETYPE_RAD,			"0.785398rad" }
	{ 45,						SVGANGLE_DEG,			50,					SVGANGLE_GRAD,	SVGDOMAngle::SVG_ANGLETYPE_GRAD,		"50grad" }
	
	{ 3.14159265358979323846,	SVGANGLE_RAD,			200,				SVGANGLE_GRAD,	SVGDOMAngle::SVG_ANGLETYPE_GRAD,		"200grad" }
	{ 3.14159265358979323846,	SVGANGLE_RAD,			180,				SVGANGLE_DEG,	SVGDOMAngle::SVG_ANGLETYPE_DEG,			"180deg" }
	{ 3.14159265358979323846,	SVGANGLE_RAD,			180,				SVGANGLE_UNSPECIFIED, SVGDOMAngle::SVG_ANGLETYPE_UNSPECIFIED,	"180" }
	
	{ 100,						SVGANGLE_GRAD,			90,					SVGANGLE_DEG,	SVGDOMAngle::SVG_ANGLETYPE_DEG,			"90deg" }
	{ 100,						SVGANGLE_GRAD,			90,					SVGANGLE_UNSPECIFIED, SVGDOMAngle::SVG_ANGLETYPE_UNSPECIFIED,	"90" }
	{ 77.5,						SVGANGLE_GRAD,			1.21736715326604,	SVGANGLE_RAD,	SVGDOMAngle::SVG_ANGLETYPE_RAD,			"1.21737rad" }
	{ -55,						SVGANGLE_GRAD,			-0.863937979737,	SVGANGLE_RAD,	SVGDOMAngle::SVG_ANGLETYPE_RAD,			"-0.863938rad" }
}

foreach(value, unit, ref_value, ref_unit, dom_ref_unit, ref_str) from svg_conversion_table
{
	test("Test SVGDOMAngleImpl::ConvertToSpecifiedUnits(" + ref_str + ")")
	{
		SVGAngle* ref_angle = NULL;
		SVGAngle* angle = NULL;
		SVGDOMAngleImpl* ref_impl = NULL;
		SVGDOMAngleImpl* impl = NULL;

		ref_angle = OP_NEW(SVGAngle, (ref_value,ref_unit));
		verify(ref_angle);
		ref_impl = OP_NEW(SVGDOMAngleImpl, (ref_angle));
		verify(ref_impl);
		ref_angle = NULL;

		angle = OP_NEW(SVGAngle, (value, unit));
		verify(angle);
		impl = OP_NEW(SVGDOMAngleImpl, (angle));
		verify(impl);
		angle = NULL;

		// This call should only change the unit, not affect the value
		impl->ConvertToSpecifiedUnits(dom_ref_unit);

		verify(impl->GetUnitType() == ref_impl->GetUnitType());

		verify(TestSVGNumbersClose(impl->GetValueInSpecifiedUnits(), ref_impl->GetValueInSpecifiedUnits()));

		verify_string(impl->GetValueAsString(), ref_str);
	}
	finally
	{
		OP_DELETE(ref_angle);
		OP_DELETE(ref_impl);
		OP_DELETE(angle);
		OP_DELETE(impl);
	}
}

xml {
	//!<svg xmlns="http://www.w3.org/2000/svg"><marker orient="auto"/></svg>
}

test("Orient object")
{
	SVGOrient* orient = NULL;
	SVGOrient* new_orient = NULL;
	AttrValueStore::GetOrientObject(find_element("marker"), orient);
	verify(orient);
	verify(orient->GetEnum());
	verify(orient->GetEnum()->EnumType() == SVGENUM_UNKNOWN);
	verify(orient->GetEnum()->EnumValue() == SVGORIENT_AUTO);

	new_orient = static_cast<SVGOrient*>(orient->Clone());
	verify(new_orient);

	new_orient->Copy(*orient);
	verify(new_orient->GetEnum());
	verify(new_orient->GetEnum()->EnumType() == SVGENUM_UNKNOWN);
	verify(new_orient->GetEnum()->EnumValue() == SVGORIENT_AUTO);

	verify(OpStatus::IsSuccess(new_orient->SetToAngleInDeg(190)));
	verify(new_orient->GetEnum());
	verify(new_orient->GetEnum()->EnumValue() == SVGORIENT_ANGLE);
	SVGAngle* orient_angle = new_orient->GetAngle();
	verify(orient_angle);
	verify(orient_angle->GetAngleValue() == SVGNumber(190));

	verify(SVGAngle::QuantizeAngle90Deg(orient_angle->GetAngleInUnits(SVGANGLE_DEG).GetFloatValue()) == 2 /* 180 deg */);

	verify(OpStatus::IsSuccess(orient->SetAngle(*orient_angle)));
	verify(orient->GetAngle());
	verify(orient->GetAngle()->GetAngleValue() == SVGNumber(190));
}
finally
{
	OP_DELETE(new_orient);
}

exit
{
}
