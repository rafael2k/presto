// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
group "svg.animation.element";
require init;
require SVG_SUPPORT;
require SVG_TINY_12;

include "modules/ecmascript_utils/esasyncif.h";
include "modules/doc/frm_doc.h";
include "modules/dochand/docman.h";
include "modules/dochand/win.h";
include "modules/hardcore/timer/optimer.h";

language c++;

global
{
	class CheckDocLoaded : public OpTimerListener,
						   public ES_AsyncCallback
	{
		enum State {
			BEFORE_LOADED,
			DONE
		};

	public:

		enum  {
			SLICE_DELAY = 30,
			TIMEOUT_LIMIT = 10000 // This is requested time, not wallclock time
		};

		CheckDocLoaded(FramesDocument* doc)
		{
		   state = BEFORE_LOADED;
		   OpTimer *timer = OP_NEW(OpTimer, ());
		   timer->SetTimerListener(this);
		   timer->Start(SLICE_DELAY);
		}
		~CheckDocLoaded() {}

	private:
		virtual void OnTimeOut(OpTimer *timer)
		{
			Window * window = g_selftest.utils->GetWindow();
			FramesDocument *doc = NULL;
			DocumentManager *doc_man = window ? window->DocManager( ) : NULL;
		
			if (!doc_man)
			{
				ST_failed("Failed to get document manager\n");
				OP_DELETE(this);
				return;
			}
		
			doc = doc_man->GetCurrentDoc( );
			LogicalDocument *logdoc = doc ? doc->GetLogicalDocument() : NULL;
		
			if (!doc || !logdoc)
			{
				ST_failed("Failed to get document\n");
				OP_DELETE(this);
				return;
			}
		
			if (state == BEFORE_LOADED)
			{
				BOOL doc_man_is_stable = doc && (doc_man->GetLoadStatus() == NOT_LOADING ||
												 doc_man->GetLoadStatus() == DOC_CREATED);
				if (doc->IsLoaded(FALSE) && doc_man_is_stable)
				{
					state = DONE;
				}
			}
				
			if (state == DONE)
			{
				ST_passed();		
				OP_DELETE(timer);
				OP_DELETE(this); // Note!
				return;
			}
		
			if (test_duration > TIMEOUT_LIMIT)
			{
				ST_failed("Test timed out\n");
			}
			else
			{
				test_duration += SLICE_DELAY;
				timer->Start(SLICE_DELAY);
			}
		}

		virtual OP_STATUS HandleCallback(ES_AsyncOperation operation,
										 ES_AsyncStatus status,
										 const ES_Value &result) { return OpStatus::OK; }

		State state;
		int test_duration;
	};
}

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 480 360" id="svgroot">
//!    <animation id="anim" 
//!     width="480" height="360"
//!		xlink:href="data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%201%201%22%20onload%3D%22document.getElementById('c').setAttribute('fill'%2C'green')%3B%22%3E%0D%0A%09%3Ccircle%20id%3D%22c%22%20cx%3D%22.5%22%20cy%3D%22.5%22%20r%3D%22.5%22%20fill%3D%22red%22%2F%3E%0D%0A%3C%2Fsvg%3E"/>
//!    <circle id="c" cx="20" cy="20" r="10" fill="blue"/>
//! </svg>
}

test("CheckDocLoaded") 
	async;
{
	OP_NEW(CheckDocLoaded, (state.doc));
}

test("Test that animation elements run scripts")
	language ecmascript;
	require SVG_FULL_11; // contentDocument and getSVGDocument are not in 1.2T
	require success "CheckDocLoaded";
{
	var animation = document.getElementById("anim");
	verify(animation);
	
	verify(animation.contentDocument);
	verify(animation.getSVGDocument());
	verify(animation.contentDocument == animation.getSVGDocument());

	verify(animation.contentDocument.getElementById("c"));
	verify(animation.contentDocument.getElementById("c").getAttribute("fill") == "green");
}

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 480 360" id="svgroot">
//!		 <script type="text/ecmascript">
//!			window.test1 = 0;
//!		 </script>
//!    <animation id="anim" 
//!     width="480" height="360"
//!		xlink:href="data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20%0D%0A%09%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20%0D%0A%09%20viewBox%3D%220%200%20100%20100%22%20%0D%0A%09%20width%3D%22100%22%20%0D%0A%09%20height%3D%22100%22%20%0D%0A%09%20id%3D%22svg-root%22%3E%0D%0A%09%3Ccircle%20id%3D%22circle%22%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2250%22%20fill%3D%22green%22%20stroke%3D%22lime%22%3E%0D%0A%09%09%3Canimate%20attributeName%3D%22r%22%20values%3D%220%3B20000%22%20%0D%0Afill%3D%22freeze%22%20dur%3D%2210s%22%20onbegin%3D%22parent.test1%3D1%22%2F%3E%0D%0A%09%3C%2Fcircle%3E%0D%0A%3C%2Fsvg%3E"/>
//! </svg>
}

test("CheckDocLoaded#2") 
	async;
{
	OP_NEW(CheckDocLoaded, (state.doc));
}

test("Test that animation elements animate subdocument")
	language ecmascript;
	require success "CheckDocLoaded#2";
	require SVG_FULL_11; // contentDocument and getSVGDocument are not in 1.2T
	async;
{
	var animation = document.getElementById("anim");
	verify(animation);

	var subdoc = animation.contentDocument;
	verify(subdoc);
			
	var circle = subdoc.getElementById("circle");
	verify(circle);

	if(window.test1 != 1)
	{
		ST_failed("Timeline not started.");
	}
	
	var r1 = circle.r.animVal.value;
	
	animTest = function()
	{ 
		var r2 = circle.r.animVal.value;
		if(Math.abs(r1-r2) < 0.00005)
		{
			ST_failed("The animation did not run. r1 == r2: " + r1 + " == " + r2, "svg.animation.element.ot", 0);
		}
		else
		{
			ST_passed();
		}
	};
	var id2 = setTimeout(animTest, 3000); // to get a reading of a new animated value
	verify(id2);
}
