/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2005-2006 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.	It may not be distributed
** under any circumstances.
*/
group "svg.udom";

require SVG_SUPPORT;
require SVG_DOM;
require init;
require SVG_TINY_12;

language ecmascript;

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <svg id="svgroot" viewBox="0 0 480 360" width="480" height="360" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
//! </svg>
};

test("Setup")
{
	compareFloats = function compareFloats(a, b, epsilon)
		{
			return (a <= b+epsilon && a >= b-epsilon);
		}

  getResultValue = function getResultValue(element, method, attr, ns)
    {
      try
      {
        if(ns)
          return element[method](ns, attr);
        else
          return element[method](attr);
      }
      catch(e)
      {
        return e.code;
      }
    }

	checkFunctions_HasProperty = function checkFunctions_HasProperty(node, properties)
		{
			for (var index = 0; index < properties.length; ++index)
			{
				if (!(properties[index] in node))
					throw "HasProperty: '" + properties[index] + "' not found";
				if (!(typeof(node[properties[index]]) == "function"))
					throw "HasProperty: '" + properties[index] + "' not a function";
			}
			return true;
		}

	checkFunctions_Enumerate = function checkFunctions_Enumerate(node, properties)
		{
			outer: for (var index = 0; index < properties.length; ++index)
			{
				for (var property in node)
					if (property == properties[index])
						continue outer;
				throw "Enumerate: '" + properties[index] + "' not found";
			}
			return true;
		}
    
  checkLacunaValue = function checkLacunaValue(method, element, interface)
    {
      var evalstring = "element." + method + "(\"" + interface.attrname + "\")";
			
			var res = getResultValue(element, method, interface.attrname);
			if(res != interface.defvalue && interface.defvalue != "depends-on-user-agent")
				throw element.nodeName + ": " + evalstring + " returned incorrect default value, should have been '" + interface.defvalue + "' but was '" + res + "'";
        
      return true;
    }
  
  checkLacunaValueNS = function checkLacunaValueNS(methodNS, element, interface)
    {
			var defns = (interface.valuesNS.length == 0 ? "http://www.w3.org/2000/svg" : interface.valuesNS[0]);
			var attr = (interface.attrname.indexOf(":") > 0 ? interface.attrname.substring(interface.attrname.indexOf(":")+1) : interface.attrname);

			var evalstring = "element." + methodNS + "(\"" + defns + "\", \"" + attr + "\")";
			
      var res = getResultValue(element, methodNS, attr, defns);      
      if(res != interface.defvalue && interface.defvalue != "depends-on-user-agent")
          throw element.nodeName + ": " + evalstring + " returned incorrect default value, should have been '" + interface.defvalue + "' but was '" + res + "'";
          
      return true;
    }
    
	checkFunction = function checkFunction(method, element, interface)
		{
			var evalstring = "element." + method + "(\"" + interface.attrname + "\")";
			var res = null;
      
			for(var index = 0; index < interface.values.length; ++index)
			{
				element.setAttribute(interface.attrname, interface.values[index]);
        
        res = getResultValue(element, method, interface.attrname);
        
				element.removeAttribute(interface.attrname);

				// any value allowed if "depends-on-user-agent" is set
				var failure = (interface.expectedvalues[index] != "depends-on-user-agent");
				if(failure)
				{
					if(method == "getFloatTrait" || method == "getFloatPresentationTrait")
					{
						failure = !compareFloats(res, interface.expectedvalues[index], 0.005);
					}
					else
					{
						failure = (res != interface.expectedvalues[index])
					}
				}

				if(failure)
					throw element.nodeName + " '" + interface.values[index] + "': " + evalstring + " returned incorrect value, should have been '" + interface.expectedvalues[index] + "' but was '" + res + "'";
			}
			
			if(method == "getTrait" || method == "getPresentationTrait")
				return checkFunctionNS(method+"NS", element, interface);
			else
				return true;
		}

	checkFunctionNS = function checkFunctionNS(methodNS, element, interface)
		{
			var defns = (interface.valuesNS.length == 0 ? "http://www.w3.org/2000/svg" : interface.valuesNS[0]);
			var attr = (interface.attrname.indexOf(":") > 0 ? interface.attrname.substring(interface.attrname.indexOf(":")+1) : interface.attrname);

			var evalstring = "element." + methodNS + "(\"" + defns + "\", \"" + attr + "\")";
      
			for(var index = 0; index < interface.values.length; ++index)
			{
				var ns = (interface.valuesNS.length == 0 ? "http://www.w3.org/2000/svg" : interface.valuesNS[index]);
				if(ns)
					element.setAttributeNS(ns, interface.attrname, interface.values[index]);
				else if(interface.attrname == "xlink:href") // special-case because exceptions are thrown on setting a qualified name without specifying NS
					element.setAttributeNS("http://www.w3.org/1999/xlink", interface.attrname, interface.values[index]);
					
				res = getResultValue(element, methodNS, attr, ns);
				
				if(ns)
					element.removeAttributeNS(ns, interface.attrname);
				else if(interface.attrname == "xlink:href") // special-case because exceptions are thrown for a qualified name without specifying NS
					element.removeAttributeNS("http://www.w3.org/1999/xlink", interface.attrname);

				// any value allowed if "depends-on-user-agent" is set
				var failure = (interface.expectedvalues[index] != "depends-on-user-agent");
				if(failure)
				{
					if(methodNS == "getFloatTraitNS" || methodNS == "getFloatPresentationTraitNS")
					{
						failure = !compareFloats(res, interface.expectedvalues[index], 0.005);
					}
					else
					{
						failure = (res != interface.expectedvalues[index])
					}
				}

				if(failure)
					throw element.nodeName + " '" + interface.values[index] + "': " + evalstring + " returned incorrect value, should have been '" + interface.expectedvalues[index] + "' but was '" + res + "'";
			}

			return true;
		}

	checkInterfaceNS = function checkInterfaceNS(interface)
		{
			for(var elmindex = 0; elmindex < interface.elements.length; elmindex++)
			{
				var element = document.createElementNS("http://www.w3.org/2000/svg", interface.elements[elmindex]);
				var parent = document.getElementById("svgroot");
				var container = null;
				
				if(interface.elements[elmindex] == "discard")
				{
					container = document.createElementNS("http://www.w3.org/2000/svg", "g");
					parent.appendChild(container);
					parent = container;
				}

				parent.appendChild(element);

				checkFunctions_HasProperty(element, interface.methods);
				checkFunctions_Enumerate(element, interface.methods);

				for (var index = 0; index < interface.methods.length; ++index)
				{
          checkLacunaValueNS(interface.methods[index]+"NS", element, interface);
					checkFunctionNS(interface.methods[index]+"NS", element, interface);
				}
				
				parent.removeChild(element);
			}
			return true;
		}

	checkInterface = function checkInterface(interface)
		{
			for(var elmindex = 0; elmindex < interface.elements.length; elmindex++)
			{
				var element = document.createElementNS("http://www.w3.org/2000/svg", interface.elements[elmindex]);
				var parent = document.getElementById("svgroot");
				
				if(interface.elements[elmindex] == "discard")
				{
					var container = document.createElementNS("http://www.w3.org/2000/svg", "g");
					parent.appendChild(container);
					parent = container;
				}
					
				parent.appendChild(element);

				checkFunctions_HasProperty(element, interface.methods);
				checkFunctions_Enumerate(element, interface.methods);

				for (var index = 0; index < interface.methods.length; ++index)
				{
          checkLacunaValue(interface.methods[index], element, interface);
					checkFunction(interface.methods[index], element, interface);
				}
				
				parent.removeChild(element);
			}
			return true;
		}

	function Interface(attrname, values, expectedvalues, defvalue, elements, unsupported_elements, methods, valuesNS)
	{
		this.attrname = attrname;
		this.values = values;
		this.expectedvalues = expectedvalues;
		this.defvalue = defvalue;
		this.elements = elements;
		this.unsupported_elements = elements;
		this.methods = methods;
		this.valuesNS = valuesNS;
	}
		
	accumulateInterface = new Interface("accumulate", 
									["none", "sum"],
									["none", "sum"], 
									"none", 
									["animate", "animateColor", "animateMotion", "animateTransform"],
									["g", "path"],
									["getTrait", "getPresentationTrait"],
									[]);

	additiveInterface = new Interface("additive",
									["replace", "sum"],
									["replace", "sum"],
									"replace", 
									["animate", "animateColor", "animateMotion", "animateTransform"],
									["rect", "polyline", "symbol"],
									["getTrait", "getPresentationTrait"],
									[]);

	attributeNameInterface = new Interface("attributeName",
									["hello", "r", "x", "xlink:href"], // this can be any string
									["hello", "r", "x", "xlink:href"],
									DOMException.TYPE_MISMATCH_ERR, 
									["animate", "animateColor", "animateTransform", "set"],
									["svg", "defs", "line"],
									["getTrait", "getPresentationTrait"],
									[]);

	audioLevelInterface = new Interface("audio-level",
									["1", "0.5", "0", "-1", "47"], 
									[1, 0.5, 0, 1, 1], 
									1, 
									["svg", "path", "defs"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);

	baseProfileInterface = new Interface("baseProfile",
									["full", "tiny", "basic", "none", "foobar"], 
									["full", "tiny", "basic", "none", "foobar"], 
									"none",
									["svg", "path", "defs"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getTrait", "getPresentationTrait"],
[]);

	// begin doesn't have allow get* from TraitAccess, only set
	beginInterface = new Interface("begin",
									["myid.end+5s", "0s", "yesterday"],
									[],
									null,
									["animate", "animateColor", "animateMotion", "animateTransform", "animation", "audio", "discard", "set", "video"],
									["svg", "text", "textPath"],
									[]);
									
									
	calcModeInterface = new Interface("calcMode",
									["discrete", "linear", "paced", "spline", "fsdfsdf"],
									["discrete", "linear", "paced", "spline", "linear"],
									"linear",
									["animate", "animateColor", "animateTransform"],
									["svg", "text", "use"],
									["getTrait", "getPresentationTrait"],
									[]);
	
	// this is for testing the default value for animateMotion
	calcModeInterface2 = new Interface("calcMode",
									["discrete", "linear", "paced", "spline", "fsdfsdf"],
									["discrete", "linear", "paced", "spline", "paced"],
									"paced",
									["animateMotion"],
									[],
									["getTrait", "getPresentationTrait"],
									[]);

	colorInterface = new Interface("color",
									["rgb(0,1,2)", "#fab", "rgb(10%,20%,30%)", "red"],
									["rgb(0, 1, 2)", "rgb(255, 170, 187)", "rgb(25, 51, 76)", "rgb(255, 0, 0)"],
									"rgb(0, 0, 0)",
									["svg", "path", "defs"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getTrait", "getPresentationTrait"],
									[]);

	colorInterface2 = new Interface("color",
									["rgb(0,1,2)", "#fab", "rgb(10%,20%,30%)", "red"],
									["[object SVGRGBColor]", "[object SVGRGBColor]", "[object SVGRGBColor]", "[object SVGRGBColor]"],
									"[object SVGRGBColor]",
									["svg", "path", "defs"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getRGBColorTrait", "getRGBColorPresentationTrait"],
									[]);


	cxInterface = new Interface("cx",
									["0.0", "1.5", "2e1", "-10", "asfdsdf"],
									[0, 1.5, 20, -10, 0],
									0,
									["circle", "ellipse", "radialGradient"],
									["svg", "text", "use"],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
	
	cyInterface = new Interface("cy",
									["0.0", "1.5", "2e1", "-10", "asfdsdf"],
									[0, 1.5, 20, -10, 0],
									0,
									["circle", "ellipse", "radialGradient"],
									["svg", "text", "use"],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);

		// Should always return an SVGPath or null?
	dInterface = new Interface("d",
									["m10 10l20,20z", "qssfdsdf"],
									["[object SVGPath]", DOMException.TYPE_MISMATCH_ERR],
									DOMException.TYPE_MISMATCH_ERR,
									["glyph", "missing-glyph", "path"],
									["svg", "text", "use"],
									["getPathTrait", "getPathPresentationTrait"],
									[]);

	displayInterface = new Interface("display",
									['inline', 'block', 'list-item', 'run-in', 'compact', 'marker', 'table', 'inline-table',
									 'table-row-group', 'table-header-group', 'table-footer-group', 'table-row', 'table-column-group',
									 'table-column', 'table-cell', 'table-caption', 'none', 'inherit'],
									['inline', 'inline', 'inline', 'inline', 'inline', 'inline', 'inline', 'inline', 
									 'inline', 'inline', 'inline', 'inline', 'inline', 
									 'inline', 'inline', 'inline', 'none', 'inline'],
									"inline",
									["glyph", "missing-glyph", "path"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getTrait", "getPresentationTrait"],
									[]);

	// dur doesn't have allow get* from TraitAccess, only set
	durInterface = new Interface("dur",
									["5s", "begin+2s", "indefinite", "eternity"],
									[],
									null,
									["animate", "animateColor", "animateMotion", "animateTransform", "animation", "audio", "discard", "set", "video"],
									["svg", "text", "textPath"],
									[]);
									
	editableInterface = new Interface("editable",
									["simple", "none", "fasfas"],
									["simple", "none", "none"],
									"none",
									["text", "textArea"],
									["font", "glyph", "g"],
									["getTrait", "getPresentationTrait"],
									[]);

	fillInterface = new Interface("fill",
									["url(#gradient)", "url(#gradient) red", "none", "#abc", "rgb(10%,20%,30%)", "inherit", "sfsdfsdkl"],
									["url(\"#gradient\")", "url(\"#gradient\")", "none", "rgb(170, 187, 204)", "rgb(25, 51, 76)", "rgb(0, 0, 0)", "rgb(0, 0, 0)"],
									"rgb(0, 0, 0)",
									["text", "textArea"], // This is a presentation property, so really it can be on any element (this tests just a few)
									["font", "glyph", "g"],
									["getTrait", "getPresentationTrait"],
									[]);

	fillInterface2 = new Interface("fill",
									["url(#gradient)", "url(#gradient) red", "none", "#abc", "rgb(10%,20%,30%)", "inherit", "sfsdfsdkl"],
									[DOMException.TYPE_MISMATCH_ERR, DOMException.TYPE_MISMATCH_ERR, DOMException.TYPE_MISMATCH_ERR, "[object SVGRGBColor]", "[object SVGRGBColor]", "[object SVGRGBColor]", "[object SVGRGBColor]"],
									"[object SVGRGBColor]",
									["text", "textArea"], // This is a presentation property, so really it can be on any element (this tests just a few)
									["font", "glyph", "g"],
									["getRGBColorTrait", "getRGBColorPresentationTrait"],
									[]);

	// this is animation fill
	animationFillInterface = new Interface("fill",
									["freeze", "remove", "sfsdfsdkl"],
									["freeze", "remove", "remove"],
									"remove",
									["animate", "animateColor", "animateMotion", "animateTransform", "animation", "audio", "set", "video"], 
									[],
									["getTrait", "getPresentationTrait"],
									[]);

	fillOpacityInterface = new Interface("fill-opacity",
									["1", "0", "0.5", "2e+100", "-12.36"],
									[1, 0, 0.5, 1, 0],
									1,
									["animate", "svg", "defs", "use"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
	
	fillRuleInterface = new Interface("fill-rule",
									["nonzero", "evenodd", "inherit", "sfsdfsdkl"],
									["nonzero", "evenodd", "nonzero", "nonzero"],
									"nonzero",
									["animate", "g", "path"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getTrait", "getPresentationTrait"],
									[]);

	focusableInterface = new Interface("focusable",
									["auto", "true", "false", "sfsdfsdkl"],
									["auto", "true", "false", "auto"],
									"auto",
									["a", "animation", "circle", "ellipse", "foreignObject", "g", "image", "line", "path", "polygon", "polyline", "rect", "svg", "switch", "text", "textArea", "tspan", "use", "video"], 
									["set", "animateMotion", "audio"],
									["getTrait", "getPresentationTrait"],
									[]);
									
	navRightInterface = new Interface("nav-right",
									["auto", "self", "url(#svgroot)", "url(http://www.opera.com/)", "url(http://www.opera.com/foo.svg)", "url(http://www.opera.com/foo.svg#bar)", "sfsdfsdkl"],
									["auto", "self", "url(#svgroot)", "auto", "auto", "auto", "auto"],
									"auto",
									["a", "animation", "circle", "ellipse", "foreignObject", "g", "image", "line", "path", "polygon", "polyline", "rect", "svg", "switch", "text", "textArea", "tspan", "use", "video"], 
									["set", "animateMotion", "audio"],
									["getTrait", "getPresentationTrait"],
									[]);
	
	navNextInterface = new Interface("nav-next",
									["auto", "self", "url(#svgroot)", "url(http://www.opera.com/)", "url(http://www.opera.com/foo.svg)", "url(http://www.opera.com/foo.svg#bar)", "sfsdfsdkl"],
									["auto", "self", "url(#svgroot)", "auto", "auto", "auto", "auto"],
									"auto",
									["a", "animation", "circle", "ellipse", "foreignObject", "g", "image", "line", "path", "polygon", "polyline", "rect", "svg", "switch", "text", "textArea", "tspan", "use", "video"], 
									["set", "animateMotion", "audio"],
									["getTrait", "getPresentationTrait"],
									[]);

	navUpInterface = new Interface("nav-up",
									["auto", "self", "url(#svgroot)", "url(http://www.opera.com/)", "url(http://www.opera.com/foo.svg)", "url(http://www.opera.com/foo.svg#bar)", "sfsdfsdkl"],
									["auto", "self", "url(#svgroot)", "auto", "auto", "auto", "auto"],
									"auto",
									["a", "animation", "circle", "ellipse", "foreignObject", "g", "image", "line", "path", "polygon", "polyline", "rect", "svg", "switch", "text", "textArea", "tspan", "use", "video"], 
									["set", "animateMotion", "audio"],
									["getTrait", "getPresentationTrait"],
									[]);

	navUpRightInterface = new Interface("nav-up-right",
									["auto", "self", "url(#svgroot)", "url(http://www.opera.com/)", "url(http://www.opera.com/foo.svg)", "url(http://www.opera.com/foo.svg#bar)", "sfsdfsdkl"],
									["auto", "self", "url(#svgroot)", "auto", "auto", "auto", "auto"],
									"auto",
									["a", "animation", "circle", "ellipse", "foreignObject", "g", "image", "line", "path", "polygon", "polyline", "rect", "svg", "switch", "text", "textArea", "tspan", "use", "video"], 
									["set", "animateMotion", "audio"],
									["getTrait", "getPresentationTrait"],
									[]);

	navUpLeftInterface = new Interface("nav-up-left",
									["auto", "self", "url(#svgroot)", "url(http://www.opera.com/)", "url(http://www.opera.com/foo.svg)", "url(http://www.opera.com/foo.svg#bar)", "sfsdfsdkl"],
									["auto", "self", "url(#svgroot)", "auto", "auto", "auto", "auto"],
									"auto",
									["a", "animation", "circle", "ellipse", "foreignObject", "g", "image", "line", "path", "polygon", "polyline", "rect", "svg", "switch", "text", "textArea", "tspan", "use", "video"], 
									["set", "animateMotion", "audio"],
									["getTrait", "getPresentationTrait"],
									[]);

	navPrevInterface = new Interface("nav-prev",
									["auto", "self", "url(#svgroot)", "url(http://www.opera.com/)", "url(http://www.opera.com/foo.svg)", "url(http://www.opera.com/foo.svg#bar)", "sfsdfsdkl"],
									["auto", "self", "url(#svgroot)", "auto", "auto", "auto", "auto"],
									"auto",
									["a", "animation", "circle", "ellipse", "foreignObject", "g", "image", "line", "path", "polygon", "polyline", "rect", "svg", "switch", "text", "textArea", "tspan", "use", "video"], 
									["set", "animateMotion", "audio"],
									["getTrait", "getPresentationTrait"],
									[]);

	navDownInterface = new Interface("nav-down",
									["auto", "self", "url(#svgroot)", "url(http://www.opera.com/)", "url(http://www.opera.com/foo.svg)", "url(http://www.opera.com/foo.svg#bar)", "sfsdfsdkl"],
									["auto", "self", "url(#svgroot)", "auto", "auto", "auto", "auto"],
									"auto",
									["a", "animation", "circle", "ellipse", "foreignObject", "g", "image", "line", "path", "polygon", "polyline", "rect", "svg", "switch", "text", "textArea", "tspan", "use", "video"], 
									["set", "animateMotion", "audio"],
									["getTrait", "getPresentationTrait"],
									[]);

	navDownRightInterface = new Interface("nav-down-right",
									["auto", "self", "url(#svgroot)", "url(http://www.opera.com/)", "url(http://www.opera.com/foo.svg)", "url(http://www.opera.com/foo.svg#bar)", "sfsdfsdkl"],
									["auto", "self", "url(#svgroot)", "auto", "auto", "auto", "auto"],
									"auto",
									["a", "animation", "circle", "ellipse", "foreignObject", "g", "image", "line", "path", "polygon", "polyline", "rect", "svg", "switch", "text", "textArea", "tspan", "use", "video"], 
									["set", "animateMotion", "audio"],
									["getTrait", "getPresentationTrait"],
									[]);

	navDownLeftInterface = new Interface("nav-down-left",
									["auto", "self", "url(#svgroot)", "url(http://www.opera.com/)", "url(http://www.opera.com/foo.svg)", "url(http://www.opera.com/foo.svg#bar)", "sfsdfsdkl"],
									["auto", "self", "url(#svgroot)", "auto", "auto", "auto", "auto"],
									"auto",
									["a", "animation", "circle", "ellipse", "foreignObject", "g", "image", "line", "path", "polygon", "polyline", "rect", "svg", "switch", "text", "textArea", "tspan", "use", "video"], 
									["set", "animateMotion", "audio"],
									["getTrait", "getPresentationTrait"],
									[]);

	navLeftInterface = new Interface("nav-left",
									["auto", "self", "url(#svgroot)", "url(http://www.opera.com/)", "url(http://www.opera.com/foo.svg)", "url(http://www.opera.com/foo.svg#bar)", "sfsdfsdkl"],
									["auto", "self", "url(#svgroot)", "auto", "auto", "auto", "auto"],
									"auto",
									["a", "animation", "circle", "ellipse", "foreignObject", "g", "image", "line", "path", "polygon", "polyline", "rect", "svg", "switch", "text", "textArea", "tspan", "use", "video"], 
									["set", "animateMotion", "audio"],
									["getTrait", "getPresentationTrait"],
									[]);

	focusHighlightInterface = new Interface("focusHighlight",
									["auto", "none", "sfsdfsdkl"],
									["auto", "none", "auto"],
									"auto",
									["a", "animation", "circle", "ellipse", "foreignObject", "g", "image", "line", "path", "polygon", "polyline", "rect", "svg", "switch", "text", "textArea", "tspan", "use", "video"], 
									["set", "animateMotion", "audio"],
									["getTrait", "getPresentationTrait"],
									[]);

	fontFamilyInterface = new Interface("font-family",
									["sans-serif", "Arial, Helvetica", "sfsdfsdkl"],
									["depends-on-user-agent", "depends-on-user-agent", "depends-on-user-agent"],
									"depends-on-user-agent",
									["a", "animation", "circle", "ellipse", "foreignObject", "g", "image", "line", "path", "polygon", "polyline", "rect", "svg", "switch", "text", "textArea", "tspan", "use", "video"], 
									["set", "animateMotion", "audio"],
									["getTrait", "getPresentationTrait"],
									[]);

	fontFamilyInterface2 = new Interface("font-family",
									["afasff", "Arial", "sfsdfsdkl"],
									["afasff", "Arial", "sfsdfsdkl"],
									DOMException.TYPE_MISMATCH_ERR,
									["font-face"], 
									[],
									["getTrait", "getPresentationTrait"],
									[]);
									
	fontSizeInterface = new Interface("font-size",
									["23", "-1", "0", "12px"],
									[23, "depends-on-user-agent", 0, 12],
									"depends-on-user-agent",
									["animate", "g", "path"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
									
	fontStyleInterface = new Interface("font-style",
									["mooo", "normal", "italic", "oblique"],
									["normal", "normal", "italic", "oblique"],
									"normal",
									["animate", "g", "path"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getTrait", "getPresentationTrait"],
									[]);

	fontWeightInterface = new Interface("font-weight",
									["100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "normal"],
									["100", "200", "300", "400", "500", "600", "700", "800", "900", "400", "400"],
									"400",
									["animate", "g", "path"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getTrait", "getPresentationTrait"],
									[]);
									
	gradientUnitsInterface = new Interface("gradientUnits",
									["userSpaceOnUse", "objectBoundingBox", "normal"],
									["userSpaceOnUse", "objectBoundingBox", "objectBoundingBox"],
									"objectBoundingBox",
									["linearGradient", "radialGradient"],
									[],
									["getTrait", "getPresentationTrait"],
									[]);
	
	heightInterface = new Interface("height",
									["0", "100", "10%", "-20", "auto"],
									[0, 100, "depends-on-user-agent", 0, 0], // should be an exception for 10%
									0,
									["animation", "foreignObject", "image", "rect", "svg", "video", "textArea"],
									["path", "g"],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
	
	// special case, "id" gets "xml:id"
	idInterface = new Interface("id",
									["lala"],
									["lala"],
									"depends-on-user-agent", // there is no value per default
									["a", "animate", "animateColor", "animateMotion", "animateTransform", "animation", "audio", "circle", "defs", "desc", "discard", "ellipse", "font", "font-face", "font-face-src", 
									 "font-face-uri", "foreignObject", "g", "glyph", "handler", "hkern", "image", "line", "linearGradient", "metadata", "missing-glyph", "mpath", "path", "polygon", 
									 "polyline", "radialGradient", "rect", "script", "set", "solidColor", "stop", "svg", "switch", "tbreak", "text", "textArea", "title", "tspan", "use", "video"],
									[],
									["getTrait", "getPresentationTrait"],
									[]);
	
	offsetInterface = new Interface("offset",
									["0", "100", "-1", "0.5", "auto"],
									[0, 1, 0, 0.5, 0],
									0,
									["stop"],
									["path", "g", "linearGradient"],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
	
	opacityInterface = new Interface("opacity",
									["0", "100", "-1", "0.5", "auto", "inherit"],
									[0, 1, 0, 0.5, 1, 1],
									1,
									["stop", "svg", "image", "g"],
									[],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
									
	// Should always return an SVGPath or null?
	pathInterface = new Interface("path",
									["m10 10l20,20z", "qssfdsdf"],
									["[object SVGPath]", DOMException.TYPE_MISMATCH_ERR],
									DOMException.TYPE_MISMATCH_ERR,
									["animateMotion"],
									["svg", "text", "use"],
									["getPathTrait", "getPathPresentationTrait"],
									[]);

	rInterface = new Interface("r",
									["0.0", "1.5", "2e1", "-10", "asfdsdf"],
									[0, 1.5, 20, -10, 0],
									0,
									["circle", "radialGradient"],
									["svg", "text", "use"],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
	
	restartInterface = new Interface("restart",
									["always", "whenNotActive", "never", "asfdsdf"],
									["always", "whenNotActive", "never", "always"],
									"always",
									["animate", "animateColor", "animateMotion", "animateTransform", "animation", "audio", "set", "video"],
									["svg", "text", "use"],
									["getTrait", "getPresentationTrait"],
									[]);
									
	rxInterface = new Interface("rx",
									["0.0", "1.5", "2e1", "-10", "asfdsdf"],
									[0, 1.5, 20, -10, 0],
									0,
									["ellipse", "rect"],
									["svg", "text", "use"],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
									
	ryInterface = new Interface("ry",
									["0.0", "1.5", "2e1", "-10", "asfdsdf"],
									[0, 1.5, 20, -10, 0],
									0,
									["ellipse", "rect"],
									["svg", "text", "use"],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
									
	snapshotTimeInterface = new Interface("snapshotTime",
									["none", "1.5s", "2e1", "-10", ".2s", "200ms", "asfdsdf"],
									[0, 1.5, 0, 0, 0, 0.2, 0],
									0,
									["ellipse", "rect"],
									["svg", "text", "use"],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
	
	solidColorInterface = new Interface("solid-color",
									["rgb(0,1,2)", "#fab", "rgb(10%,20%,30%)", "red", "currentColor", "inherit"],
									["rgb(0, 1, 2)", "rgb(255, 170, 187)", "rgb(25, 51, 76)", "rgb(255, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)"],
									"rgb(0, 0, 0)",
									["svg", "path", "defs", "solidColor"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getTrait", "getPresentationTrait"],
									[]);

	solidColorInterface2 = new Interface("solid-color",
									["rgb(0,1,2)", "#fab", "rgb(10%,20%,30%)", "red", "currentColor", "inherit"],
									["[object SVGRGBColor]", "[object SVGRGBColor]", "[object SVGRGBColor]", "[object SVGRGBColor]", "[object SVGRGBColor]", "[object SVGRGBColor]"],
									"[object SVGRGBColor]",
									["svg", "path", "defs", "solidColor"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getRGBColorTrait", "getRGBColorPresentationTrait"],
									[]);

	solidOpacityInterface = new Interface("solid-opacity",
									["1", "0", "0.5", "2e+100", "-12.36"],
									[1, 0, 0.5, 1, 0],
									1,
									["animate", "svg", "defs", "use", "solidColor"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
									
	stopColorInterface = new Interface("stop-color",
									["rgb(0,1,2)", "#fab", "rgb(10%,20%,30%)", "red", "currentColor", "inherit"],
									["rgb(0, 1, 2)", "rgb(255, 170, 187)", "rgb(25, 51, 76)", "rgb(255, 0, 0)", "rgb(0, 0, 0)", "rgb(0, 0, 0)"],
									"rgb(0, 0, 0)",
									["svg", "path", "defs", "stop"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getTrait", "getPresentationTrait"],
									[]);


	stopColorInterface2 = new Interface("stop-color",
									["rgb(0,1,2)", "#fab", "rgb(10%,20%,30%)", "red", "currentColor", "inherit"],
									["[object SVGRGBColor]", "[object SVGRGBColor]", "[object SVGRGBColor]", "[object SVGRGBColor]", "[object SVGRGBColor]", "[object SVGRGBColor]"],
									"[object SVGRGBColor]",
									["svg", "path", "defs", "stop"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getRGBColorTrait", "getRGBColorPresentationTrait"],
									[]);

	stopOpacityInterface = new Interface("stop-opacity",
									["1", "0", "0.5", "2e+100", "-12.36"],
									[1, 0, 0.5, 1, 0],
									1,
									["animate", "svg", "defs", "use", "stop"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
	
	strokeInterface = new Interface("stroke",
									["url(#gradient)", "url(#gradient) red", "none", "#abc", "rgb(10%,20%,30%)", "inherit", "sfsdfsdkl"],
									["url(#gradient)", "url(#gradient) red", "none", "rgb(170, 187, 204)", "rgb(25, 51, 76)", "none", "none"],
									"none",
									["text", "textArea"], // This is a presentation property, so really it can be on any element (this tests just a few)
									["font", "glyph", "g"],
									["getTrait", "getPresentationTrait"],
									[]);

	strokeInterface = new Interface("stroke",
									["url(#gradient)", "url(#gradient) red", "none", "#abc", "rgb(10%,20%,30%)", "inherit", "sfsdfsdkl"],
									[DOMException.TYPE_MISMATCH_ERR, DOMException.TYPE_MISMATCH_ERR, DOMException.TYPE_MISMATCH_ERR, "[object SVGRGBColor]", "[object SVGRGBColor]", DOMException.TYPE_MISMATCH_ERR, DOMException.TYPE_MISMATCH_ERR],
									DOMException.TYPE_MISMATCH_ERR,
									["text", "textArea"], // This is a presentation property, so really it can be on any element (this tests just a few)
									["font", "glyph", "g"],
									["getRGBColorTrait", "getRGBColorPresentationTrait"],
									[]);
									
	strokeDashOffsetInterface = new Interface("stroke-dashoffset",
									["1", "0", "0.5", "2e+1", "-12.36"],
									[1, 0, 0.5, 20, -12.36],
									0,
									["animate", "svg", "defs", "use", "stop"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
	
	strokeLineCapInterface = new Interface("stroke-linecap",
									["butt", "round", "square", "sasfassad"],
									["butt", "round", "square", "butt"],
									"butt",
									["animate", "svg", "line", "use", "rect"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getTrait", "getPresentationTrait"],
									[]);

	strokeLineJoinInterface = new Interface("stroke-linejoin",
									["miter", "round", "bevel", "sasfassad"],
									["miter", "round", "bevel", "miter"],
									"miter",
									["polyline", "svg", "line", "use", "rect"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getTrait", "getPresentationTrait"],
									[]);

	strokeMiterLimitInterface = new Interface("stroke-miterlimit",
									["1", "0", "0.5", "2e+1", "-12.36", "17", "inherit"],
									[1, 4, 4, 20, 4, 17, 4],
									4,
									["animate", "svg", "defs", "use", "stop"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
									
	strokeOpacityInterface = new Interface("stroke-opacity",
									["1", "0", "0.5", "2e+100", "-12.36"],
									[1, 0, 0.5, 1, 0],
									1,
									["image", "svg", "defs", "g", "font"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);

	strokeWidthInterface = new Interface("stroke-width",
									["1", "0", "0.5", "2e+1", "-12.36"],
									[1, 0, 0.5, 20, 1],
									1,
									["polygon", "svg", "defs", "g", "font"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
	
	targetInterface = new Interface("target",
									["_replace", "_self", "_parent", "_top", "_blank", "foobar"],
									["_replace", "_self", "_parent", "_top", "_blank", "foobar"],
									"_self",
									["a"],
									["polyline", "svg", "line", "use", "rect"],
									["getTrait", "getPresentationTrait"],
									[]);


	// this needs specific test...
	//textInterface = new Interface("#text",
	//								["_replace", "_self", "_parent", "_top", "_blank", "foobar"],
	//								["_replace", "_self", "_parent", "_top", "_blank", "foobar"],
	//								"_self",
	//								["a"],
	//								["polyline", "svg", "line", "use", "rect"],
	//								["getTrait", "getPresentationTrait"],
	//								[]);
	

	textAnchorInterface = new Interface("text-anchor",
									["start", "middle", "end", "auto"],
									["start", "middle", "end", "start"],
									"start",
									["polygon", "svg", "defs", "g", "font", "text", "textArea", "tspan"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[], 
									["getTrait", "getPresentationTrait"],
									[]);

	transformInterface = new Interface("transform",
									["ref(svg)", "none", "ref(svg 50 60)", "translate(20 20)", "fasjsdf"],
									["ref(svg)", "none", "ref(svg 50 60)", "translate(20 20)", "matrix(1 0 0 1 0 0)"],
									"matrix(1 0 0 1 0 0)",
									["a", "animation", "circle", "ellipse", "foreignObject", "g", "image", "line", "path", "polygon", "polyline", "rect", "switch", "text", "textArea", "use", "video"],
									["animateMotion", "set", "tspan"],
									["getTrait", "getPresentationTrait"],
									[]);

	transformInterface2 = new Interface("transform",
									["ref(svg)", "none", "ref(svg 50 60)", "translate(20 20)", "fasjsdf"],
									["[object SVGMatrix]", "[object SVGMatrix]", "[object SVGMatrix]", "[object SVGMatrix]", "[object SVGMatrix]"],
									"[object SVGMatrix]",
									["a", "animation", "circle", "ellipse", "foreignObject", "g", "image", "line", "path", "polygon", "polyline", "rect", "switch", "text", "textArea", "use", "video"],
									["animateMotion", "set", "tspan"],
									["getMatrixTrait", "getMatrixPresentationTrait"],
									[]);
									
	typeInterface = new Interface("type",
									["translate", "scale", "rotate", "skewX", "skewY", "foo", "ref(svg)"],
									["translate", "scale", "rotate", "skewX", "skewY", "depends-on-user-agent", "depends-on-user-agent"],
									"depends-on-user-agent",
									["animateTransform"],
									["animateMotion", "svg", "g"],
									["getTrait", "getPresentationTrait"],
									[]);

	vectorEffectInterface = new Interface("vector-effect",
									["none", "non-scaling-stroke", "fafksfas", "inherit"],
									["none", "non-scaling-stroke", "none", "none"],
									"none",
									["animateTransform", "g", "path", "line", "symbol"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getTrait", "getPresentationTrait"],
									[]);
	
	// default value is under debate...
	versionInterface = new Interface("version",
									["1.0", "1.1", "1.2", "1.3", "2.0", "4711"],
									["1.0", "1.1", "1.2", "1.3", "2.0", "4711"],
									"1.2",
									["svg"],
									["animateMotion", "path", "metadata"],
									["getTrait", "getPresentationTrait"],
									[]);

	viewBoxInterface = new Interface("viewBox",
									["0 0 1 1", "0 0 1 1 1", "none", "-200 -212.34, 700e1,   18", "fnasdas"],
									["[object SVGRect]", DOMException.TYPE_MISMATCH_ERR, DOMException.TYPE_MISMATCH_ERR, "[object SVGRect]", DOMException.TYPE_MISMATCH_ERR],
									DOMException.TYPE_MISMATCH_ERR,
									["svg"],
									["animateMotion", "path", "metadata"],
									["getRectTrait", "getRectPresentationTrait"],
									[]);
									
	viewportFillInterface = new Interface("viewport-fill",
									["rgb(0,1,2)", "#fab", "rgb(10%,20%,30%)", "red", "currentColor", "inherit", "none"],
									["rgb(0, 1, 2)", "rgb(255, 170, 187)", "rgb(25, 51, 76)", "rgb(255, 0, 0)", "rgb(0, 0, 0)", "none", "none"],
									"none",
									["svg", "path", "defs", "animation", "symbol"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getTrait", "getPresentationTrait"],
									[]);
									
	viewportFillInterface2 = new Interface("viewport-fill",
									["rgb(0,1,2)", "#fab", "rgb(10%,20%,30%)", "red", "currentColor", "inherit", "none"],
									["[object SVGRGBColor]", "[object SVGRGBColor]", "[object SVGRGBColor]", "[object SVGRGBColor]", "[object SVGRGBColor]", DOMException.TYPE_MISMATCH_ERR, DOMException.TYPE_MISMATCH_ERR],
									DOMException.TYPE_MISMATCH_ERR,
									["svg", "path", "defs", "animation", "symbol"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getRGBColorTrait", "getRGBColorPresentationTrait"],
									[]);
	
	viewportFillOpacityInterface = new Interface("viewport-fill-opacity",
									["1", "0", "0.5", "2e+100", "-12.36"],
									[1, 0, 0.5, 1, 0],
									1,
									["animate", "svg", "defs", "use", "solidColor"], // This is a presentation property, so really it can be on any element (this tests just a few)
									[],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
									
	visibilityInterface = new Interface("visibility",
									["hidden", "visible", "4711"],
									["hidden", "visible", "visible"],
									"visible",
									["svg"],
									["animateMotion", "path", "metadata", "text", "tspan"],
									["getTrait", "getPresentationTrait"],
									[]);
	
	widthInterface = new Interface("width",
									["0", "100", "10%", "-20", "auto"],
									[0, 100, "depends-on-user-agent", 0, 0], // should be an exception for 10%
									0,
									["animation", "foreignObject", "image", "rect", "svg", "video", "textArea"],
									["path", "g"],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
	
	xInterface = new Interface("x",
									["0.0", "1.5", "2e1", "-10", "1 2 3 4 5", "asfdsdf"],
									[0, 1.5, 20, -10, 0, 0],
									0,
									["animation", "foreignObject", "image", "rect", "textArea", "use", "video"],
									["polyline", "g", "animateMotion"],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);

	x1Interface = new Interface("x1",
									["0.0", "1.5", "2e1", "-10", "1 2 3 4 5", "asfdsdf"],
									[0, 1.5, 20, -10, 0, 0],
									0,
									["line", "linearGradient"],
									["polyline", "g", "animateMotion"],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);

	x2Interface = new Interface("x2",
									["0.0", "1.5", "2e1", "-10", "1 2 3 4 5", "asfdsdf"],
									[0, 1.5, 20, -10, 0, 0],
									0,
									["line", "linearGradient"],
									["polyline", "g", "animateMotion"],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);

	xlinkHrefInterface = new Interface("xlink:href",
									["#foo", "http://www.opera.com/", "mailto:ed@opera.com", "#f00"],
									["#foo", "http://www.opera.com/", "mailto:ed@opera.com", "depends-on-user-agent"], // last one should be an exception
									"",
									["a", "animate", "animateColor", "animateMotion", "animateTransform", "animation", "audio", "discard", "font-face-uri", "foreignObject", "handler", "image", "mpath", 
									 "prefetch", "script", "set", "use", "video"],
									["polyline", "g"],
									["getTrait", "getPresentationTrait"],
									["http://www.w3.org/1999/xlink", "http://www.w3.org/1999/xlink", "http://www.w3.org/1999/xlink", null]);
	
	yInterface = new Interface("y",
									["0.0", "1.5", "2e1", "-10", "1 2 3 4 5", "asfdsdf"],
									[0, 1.5, 20, -10, 0, 0],
									0,
									["animation", "foreignObject", "image", "rect", "textArea", "use", "video"],
									["polyline", "g", "animateMotion"],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);

	y1Interface = new Interface("y1",
									["0.0", "1.5", "2e1", "-10", "1 2 3 4 5", "asfdsdf"],
									[0, 1.5, 20, -10, 0, 0],
									0,
									["line", "linearGradient"],
									["polyline", "g", "animateMotion"],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);

	y2Interface = new Interface("y2",
									["0.0", "1.5", "2e1", "-10", "1 2 3 4 5", "asfdsdf"],
									[0, 1.5, 20, -10, 0, 0],
									0,
									["line", "linearGradient"],
									["polyline", "g", "animateMotion"],
									["getFloatTrait", "getFloatPresentationTrait"],
									[]);
									
	zoomAndPanInterface = new Interface("zoomAndPan",
									["disable", "magnify", "4711"],
									["disable", "magnify", "magnify"],
									"magnify",
									["svg"],
									["animateMotion", "path", "metadata", "text", "tspan"],
									["getTrait", "getPresentationTrait"],
									[]);
}

test("Test TraitAccess: xlink:href")
	require success "Setup";
{
	checkInterfaceNS(xlinkHrefInterface);
}

test("Test TraitAccess: accumulate")
	require success "Setup";
{
	checkInterface(accumulateInterface);
}

test("Test TraitAccess: additive")
	require success "Setup";
{
	checkInterface(additiveInterface);
}

test("Test TraitAccess: attributeName")
	require success "Setup";
{
	checkInterface(attributeNameInterface);
}

test("Test TraitAccess: audio-level")
	require success "Setup";
{
	checkInterface(audioLevelInterface);
}

test("Test TraitAccess: baseProfile")
	require success "Setup";
{
	checkInterface(baseProfileInterface);
}

test("Test TraitAccess: begin")
	require success "Setup";
{
	checkInterface(beginInterface);
}

test("Test TraitAccess: calcMode")
	require success "Setup";
{
	checkInterface(calcModeInterface);
}

test("Test TraitAccess: calcMode #2")
	require success "Setup";
{
	checkInterface(calcModeInterface2);
}

test("Test TraitAccess: color")
	require success "Setup";
{
	checkInterface(colorInterface);
}

test("Test TraitAccess: color #2")
	require success "Setup";
{
	checkInterface(colorInterface2);
}

test("Test TraitAccess: cx")
	require success "Setup";
{
	checkInterface(cxInterface);
}

test("Test TraitAccess: cy")
	require success "Setup";
{
	checkInterface(cyInterface);
}

test("Test TraitAccess: d")
	require success "Setup";
{
	checkInterface(dInterface);
}

test("Test TraitAccess: display")
	require success "Setup";
{
	checkInterface(displayInterface);
}

test("Test TraitAccess: dur")
	require success "Setup";
{
	checkInterface(durInterface);
}

test("Test TraitAccess: editable")
	require success "Setup";
{
	checkInterface(editableInterface);
}

test("Test TraitAccess: fill")
	require success "Setup";
{
	checkInterface(fillInterface);
}

test("Test TraitAccess: fill #2")
	require success "Setup";
{
	checkInterface(fillInterface2);
}

test("Test TraitAccess: (animation) fill")
	require success "Setup";
{
	checkInterface(animationFillInterface);
}

test("Test TraitAccess: fill-opacity")
	require success "Setup";
{
	checkInterface(fillOpacityInterface);
}

test("Test TraitAccess: fill-rule")
	require success "Setup";
{
	checkInterface(fillRuleInterface);
}

test("Test TraitAccess: focusable")
	require success "Setup";
{
	checkInterface(focusableInterface);
}

test("Test TraitAccess: nav-right")
	require success "Setup";
{
	checkInterface(navRightInterface);
}

test("Test TraitAccess: nav-next")
	require success "Setup";
{
	checkInterface(navNextInterface);
}

test("Test TraitAccess: nav-up")
	require success "Setup";
{
	checkInterface(navUpInterface);
}

test("Test TraitAccess: nav-up-right")
	require success "Setup";
{
	checkInterface(navUpRightInterface);
}

test("Test TraitAccess: nav-up-left")
	require success "Setup";
{
	checkInterface(navUpLeftInterface);
}

test("Test TraitAccess: nav-prev")
	require success "Setup";
{
	checkInterface(navPrevInterface);
}

test("Test TraitAccess: nav-down")
	require success "Setup";
{
	checkInterface(navDownInterface);
}

test("Test TraitAccess: nav-down-right")
	require success "Setup";
{
	checkInterface(navDownRightInterface);
}

test("Test TraitAccess: nav-down-left")
	require success "Setup";
{
	checkInterface(navDownLeftInterface);
}

test("Test TraitAccess: nav-left")
	require success "Setup";
{
	checkInterface(navLeftInterface);
}

test("Test TraitAccess: focusHighlight")
	require success "Setup";
{
	checkInterface(focusHighlightInterface);
}

test("Test TraitAccess: font-family")
	require success "Setup";
{
	checkInterface(fontFamilyInterface);
}

test("Test TraitAccess: (font-face) font-family")
	require success "Setup";
{
	checkInterface(fontFamilyInterface2);
}

test("Test TraitAccess: font-size")
	require success "Setup";
{
	checkInterface(fontSizeInterface);
}

test("Test TraitAccess: font-style")
	require success "Setup";
	fails;
{
	checkInterface(fontStyleInterface);
}

test("Test TraitAccess: font-weight")
	require success "Setup";
{
	checkInterface(fontWeightInterface);
}

test("Test TraitAccess: gradientUnits")
	require success "Setup";
{
	checkInterface(gradientUnitsInterface);
}

test("Test TraitAccess: height")
	require success "Setup";
{
	checkInterface(heightInterface);
}

test("Test TraitAccess: id")
	require success "Setup";
{
	checkInterface(idInterface);
}

test("Test TraitAccess: offset")
	require success "Setup";
{
	checkInterface(offsetInterface);
}

test("Test TraitAccess: opacity")
	require success "Setup";
{
	checkInterface(opacityInterface);
}

test("Test TraitAccess: path")
	require success "Setup";
{
	checkInterface(pathInterface);
}

test("Test TraitAccess: r")
	require success "Setup";
{
	checkInterface(rInterface);
}

test("Test TraitAccess: restart")
	require success "Setup";
{
	checkInterface(restartInterface);
}

test("Test TraitAccess: rx")
	require success "Setup";
{
	checkInterface(rxInterface);
}

test("Test TraitAccess: ry")
	require success "Setup";
{
	checkInterface(ryInterface);
}

test("Test TraitAccess: snapshotTime")
	require success "Setup";
{
	checkInterface(snapshotTimeInterface);
}

test("Test TraitAccess: solid-color")
	require success "Setup";
{
	checkInterface(solidColorInterface);
}

test("Test TraitAccess: solid-color #2")
	require success "Setup";
{
	checkInterface(solidColorInterface2);
}

test("Test TraitAccess: solid-opacity")
	require success "Setup";
{
	checkInterface(solidOpacityInterface);
}

test("Test TraitAccess: stop-color")
	require success "Setup";
{
	checkInterface(stopColorInterface);
}

test("Test TraitAccess: stop-color #2")
	require success "Setup";
{
	checkInterface(stopColorInterface2);
}

test("Test TraitAccess: stop-opacity")
	require success "Setup";
{
	checkInterface(stopOpacityInterface);
}

test("Test TraitAccess: stroke")
	require success "Setup";
{
	checkInterface(strokeInterface);
}

test("Test TraitAccess: stroke-dashoffset")
	require success "Setup";
{
	checkInterface(strokeDashOffsetInterface);
}

test("Test TraitAccess: stroke-linecap")
	require success "Setup";
{
	checkInterface(strokeLineCapInterface);
}

test("Test TraitAccess: stroke-linejoin")
	require success "Setup";
{
	checkInterface(strokeLineJoinInterface);
}


test("Test TraitAccess: stroke-miterlimit")
	require success "Setup";
{
	checkInterface(strokeMiterLimitInterface);
}


test("Test TraitAccess: stroke-opacity")
	require success "Setup";
{
	checkInterface(strokeOpacityInterface);
}


test("Test TraitAccess: stroke-width")
	require success "Setup";
{
	checkInterface(strokeWidthInterface);
}


test("Test TraitAccess: target")
	require success "Setup";
{
	checkInterface(targetInterface);
}


test("Test TraitAccess: text-anchor")
	require success "Setup";
{
	checkInterface(textAnchorInterface);
}


test("Test TraitAccess: transform")
	require success "Setup";
{
	checkInterface(transformInterface);
}


test("Test TraitAccess: transform #2")
	require success "Setup";
{
	checkInterface(transformInterface2);
}


test("Test TraitAccess: (animateTransform) type")
	require success "Setup";
{
	checkInterface(typeInterface);
}


test("Test TraitAccess: vector-effect")
	require success "Setup";
{
	checkInterface(vectorEffectInterface);
}


test("Test TraitAccess: version")
	require success "Setup";
{
	checkInterface(versionInterface);
}


test("Test TraitAccess: viewBox")
	require success "Setup";
{
	checkInterface(viewBoxInterface);
}


test("Test TraitAccess: viewport-fill")
	require success "Setup";
{
	checkInterface(viewportFillInterface);
}


test("Test TraitAccess: viewport-fill #2")
	require success "Setup";
{
	checkInterface(viewportFillInterface2);
}


test("Test TraitAccess: viewport-fill-opacity")
	require success "Setup";
{
	checkInterface(viewportFillOpacityInterface);
}


test("Test TraitAccess: visibility")
	require success "Setup";
{
	checkInterface(visibilityInterface);
}


test("Test TraitAccess: width")
	require success "Setup";
{
	checkInterface(widthInterface);
}


test("Test TraitAccess: x")
	require success "Setup";
{
	checkInterface(xInterface);
}


test("Test TraitAccess: x1")
	require success "Setup";
{
	checkInterface(x1Interface);
}


test("Test TraitAccess: x2")
	require success "Setup";
{
	checkInterface(x2Interface);
}


test("Test TraitAccess: y")
	require success "Setup";
{
	checkInterface(yInterface);
}


test("Test TraitAccess: y1")
	require success "Setup";
{
	checkInterface(y1Interface);
}


test("Test TraitAccess: y2")
	require success "Setup";
{
	checkInterface(y2Interface);
}


test("Test TraitAccess: zoomAndPan")
	require success "Setup";
{
	checkInterface(zoomAndPanInterface);
}

svg {
	//! <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
	//! 	<g>
	//! 		<rect x="10" y="10" width="50" height="50" buffered-rendering="dynamic" />
	//! 	</g>
	//! </svg>
};

test("Test TraitAccess: buffered-rendering")
{
	var g = document.querySelector("g");
	verify(g);
	verify(g.getTrait("buffered-rendering") == "auto");

	var rect = document.querySelector("rect");
	verify(rect);
	verify(rect.getTrait("buffered-rendering") == "dynamic");
}

svg {
	//! <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
	//! 	<g>
	//! 		<textArea x="10" y="10" width="50" height="50" line-increment="2">
	//! 			This text should be long enough to wrap
	//! 			inside the text area.
	//! 		</textArea>
	//! 	</g>
	//! </svg>
};

test("Test TraitAccess: line-increment")
{
	var g = document.querySelector("g");
	verify(g);
	verify(g.getTrait("line-increment") == "auto");

	var textArea = document.querySelector("textArea");
	verify(textArea);
	verify(textArea.getTrait("line-increment") == "2");
}
