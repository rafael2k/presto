/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2007 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/
group "svg.parser.angle";

require SVG_SUPPORT;
require init;

include "modules/svg/src/svgpch.h";
include "modules/svg/src/SVGAttributeParser.h";
include "modules/svg/src/SVGValue.h";

language c++;

test("Orientation: auto")
{
	SVGOrient* orient = NULL;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParseOrient(UNI_L("auto"), 4, orient)));

	verify(orient->GetOrientType() == SVGORIENT_AUTO);

	OP_DELETE(orient);
}

test("Rotate: auto/auto-reverse")
{
	SVGRotate* rotate = NULL;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParseRotate(UNI_L("auto"), 4, rotate)));
	verify(rotate->GetRotateType() == SVGROTATE_AUTO);

	OP_DELETE(rotate);
	rotate = NULL;

	verify(OpStatus::IsSuccess(SVGAttributeParser::ParseRotate(UNI_L("auto-reverse"), 12, rotate)));
	verify(rotate->GetRotateType() == SVGROTATE_AUTOREVERSE);

	OP_DELETE(rotate);
}

table AngleVals(const char*, double, int)
{
	{"30 deg", 30, SVGANGLE_DEG},
	{"60 rad", 60, SVGANGLE_RAD},
	{"90 grad", 90, SVGANGLE_GRAD},
	{"30", 30, SVGANGLE_UNSPECIFIED}
}

foreach (cstr, ang_val, ang_unit) from AngleVals
{
	test("Orientation: angle '" cstr "'")
	{
		const uni_char* test = UNI_L(cstr);
		SVGOrient* orient = NULL;
		verify(OpStatus::IsSuccess(SVGAttributeParser::ParseOrient(test, uni_strlen(test), orient)));

		verify(orient->GetOrientType() == SVGORIENT_ANGLE);

		verify(orient->GetAngle() != NULL);
		verify(orient->GetAngle()->GetAngleValue().Close(ang_val));
		verify(orient->GetAngle()->GetAngleType() == ang_unit);

		OP_DELETE(orient);
	}
	test("Rotate: angle '" cstr "'")
	{
		const uni_char* test = UNI_L(cstr);
		SVGRotate* rotate = NULL;
		verify(OpStatus::IsSuccess(SVGAttributeParser::ParseRotate(test, uni_strlen(test), rotate)));

		verify(rotate->GetRotateType() == SVGROTATE_ANGLE);

		verify(rotate->GetAngle() != NULL);
		verify(rotate->GetAngle()->GetAngleValue().Close(ang_val));
		verify(rotate->GetAngle()->GetAngleType() == ang_unit);

		OP_DELETE(rotate);
	}
}
