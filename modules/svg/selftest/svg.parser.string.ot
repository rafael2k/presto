/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2005 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/
group "svg.parser.string";

require SVG_SUPPORT;
require init;

include "modules/svg/src/svgpch.h";
include "modules/svg/src/SVGAttributeParser.h";
include "modules/svg/src/SVGVector.h";

table StringLists (const char *, const char *, const char *, SVGVectorSeparator)
{
    { "apa,banan", "apa", "banan", SVGVECTORSEPARATOR_COMMA_OR_WSP },
    { "apa ,banan", "apa", "banan", SVGVECTORSEPARATOR_COMMA_OR_WSP },
    { "apa , banan", "apa", "banan", SVGVECTORSEPARATOR_COMMA_OR_WSP },
    { "apa, banan", "apa", "banan", SVGVECTORSEPARATOR_COMMA_OR_WSP },
    { "apa banan", "apa", "banan", SVGVECTORSEPARATOR_COMMA_OR_WSP },
    { "apa    banan", "apa", "banan", SVGVECTORSEPARATOR_COMMA_OR_WSP },
    { "   apa    banan   ", "apa", "banan", SVGVECTORSEPARATOR_COMMA_OR_WSP },
    { "apa;banan", "apa", "banan", SVGVECTORSEPARATOR_SEMICOLON },
    { "apa ;  banan", "apa", "banan", SVGVECTORSEPARATOR_SEMICOLON },
    { "apa \t;  banan ; ", "apa", "banan", SVGVECTORSEPARATOR_SEMICOLON },
    { "apa tomat  ;  banan ; ", "apa tomat", "banan", SVGVECTORSEPARATOR_SEMICOLON },
    { "'apa tomat'  ;  banan ; ", "apa tomat", "banan", SVGVECTORSEPARATOR_SEMICOLON },
    { "'apa tomat', 'banan' , ", "apa tomat", "banan", SVGVECTORSEPARATOR_COMMA_OR_WSP },
    { "\"apa tomat\", \"banan\" , ", "apa tomat", "banan", SVGVECTORSEPARATOR_COMMA_OR_WSP },
    { "\"apa \\\"tomat\", \"banan\" , ", "apa \\\"tomat", "banan", SVGVECTORSEPARATOR_COMMA_OR_WSP },
    { "\"apa 'tomat\", \"banan\" , ", "apa 'tomat", "banan", SVGVECTORSEPARATOR_COMMA_OR_WSP },
    { "'apa \"tomat', 'banan' , ", "apa \"tomat", "banan", SVGVECTORSEPARATOR_COMMA_OR_WSP },
    { "'apa \\'tomat', 'banan ' , ", "apa \\'tomat", "banan ", SVGVECTORSEPARATOR_COMMA_OR_WSP },
}

foreach(str, str0, str1, sep) from StringLists
{
    test("StringList='" str "'")
    {
		SVGVector vector(SVGOBJECT_STRING);
		vector.SetSeparator(sep);

		const uni_char *uni_str = UNI_L(str);
		verify(OpStatus::IsSuccess(SVGAttributeParser::ParseVector(uni_str, uni_strlen(uni_str),
																   &vector)));
		verify(vector.GetCount() == 2);
		verify(vector.Get(0)->Type() == SVGOBJECT_STRING);
		verify(vector.Get(1)->Type() == SVGOBJECT_STRING);

		SVGString *str_val_0 = static_cast<SVGString *>(vector.Get(0));
		SVGString *str_val_1 = static_cast<SVGString *>(vector.Get(1));
		verify(str_val_0);
		verify(str_val_1);
		verify(uni_str_eq(str_val_0->GetString(), UNI_L(str0)));
		verify(uni_str_eq(str_val_1->GetString(), UNI_L(str1)));
    }
}

table InvalidStringLists (const char *, SVGVectorSeparator)
{
    { "'apa 'to", SVGVECTORSEPARATOR_COMMA_OR_WSP }
}

foreach(str, sep) from InvalidStringLists
{
    test("InvalidStringList='" str "'")
    {
		SVGVector vector(SVGOBJECT_STRING);
		vector.SetSeparator(sep);

		const uni_char *uni_str = UNI_L(str);
		verify(SVGAttributeParser::ParseVector(uni_str, uni_strlen(uni_str),
											   &vector) == OpSVGStatus::ATTRIBUTE_ERROR);
    }
}
