group "svg.editable";

require init;
require SVG_SUPPORT;
require SVG_DOM;
require SVG_TINY_12;
require SVG_SUPPORT_EDITABLE;

include "modules/inputmanager/inputmanager.h";
include "modules/svg/src/AttrValueStore.h";
include "modules/svg/src/SVGEditable.h";
include "modules/svg/src/SVGElementStateContext.h";
include "modules/svg/SVGManager.h";
include "modules/svg/src/SVGTextElementStateContext.h";
include "modules/svg/src/SVGTextSelection.h";
include "modules/svg/src/SVGUtils.h";
include "modules/logdoc/src/textdata.h";
include "modules/ecmascript_utils/esasyncif.h";
include "modules/dochand/win.h";
include "modules/hardcore/timer/optimer.h";

language c++;

global
{
	HTML_Element* t;
	HTML_Element* ts;
	HTML_Element* nt;
	HTML_Element* nts;
	HTML_Element* ta;

	SVGTextRootContainer* troot;
	SVGEditable* e;


	class CheckDocLoaded : public OpTimerListener,
						   public ES_AsyncCallback
	{
		enum State {
			BEFORE_LOADED,
			DONE
		};

	public:

		enum  {
			SLICE_DELAY = 30,
			TIMEOUT_LIMIT = 10000 // This is requested time, not wallclock time
		};

		CheckDocLoaded(FramesDocument* doc)
		{
		   state = BEFORE_LOADED;
		   OpTimer *timer = OP_NEW(OpTimer, ());
		   timer->SetTimerListener(this);
		   timer->Start(SLICE_DELAY);
		}
		~CheckDocLoaded() {}

	private:
		virtual void OnTimeOut(OpTimer *timer)
		{
			Window * window = g_selftest.utils->GetWindow();
			FramesDocument *doc = NULL;
			DocumentManager *doc_man = window ? window->DocManager( ) : NULL;
		
			if (!doc_man)
			{
				ST_failed("Failed to get document manager\n");
				OP_DELETE(this);
				return;
			}
		
			doc = doc_man->GetCurrentDoc( );
			LogicalDocument *logdoc = doc ? doc->GetLogicalDocument() : NULL;
		
			if (!doc || !logdoc)
			{
				ST_failed("Failed to get document\n");
				OP_DELETE(this);
				return;
			}
		
			SVGImage* svg_image = g_svg_manager->GetSVGImage(logdoc, logdoc->GetDocRoot());
			if (!svg_image)
			{
				ST_failed("Only stand-alone SVGs supported\n");
				OP_DELETE(this);
				return;
			}
		
			if (state == BEFORE_LOADED)
			{
				BOOL doc_man_is_stable = doc && (doc_man->GetLoadStatus() == NOT_LOADING ||
												 doc_man->GetLoadStatus() == DOC_CREATED);
				if (doc->IsLoaded(FALSE) && doc_man_is_stable)
				{
					state = DONE;
				}
			}
				
			if (state == DONE)
			{
				ST_passed();		
				OP_DELETE(timer);
				OP_DELETE(this); // Note!
				return;
			}
		
			if (test_duration > TIMEOUT_LIMIT)
			{
				ST_failed("Test timed out\n");
			}
			else
			{
				test_duration += SLICE_DELAY;
				timer->Start(SLICE_DELAY);
			}
		}

		virtual OP_STATUS HandleCallback(ES_AsyncOperation operation,
										 ES_AsyncStatus status,
										 const ES_Value &result) { return OpStatus::OK; }

		State state;
		int test_duration;
	};
}

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 480 360" id="svgroot">
//!   <text id="t" x="10" y="10" editable="simple">editable text <tspan id="ts">editable tspan</tspan></text>
//!   <text id="nt" x="10" y="30">non-editable text <tspan id="nts">non-editable tspan</tspan></text>
//!   <textArea id="ta" x="10" y="50" width="400" height="auto" editable="simple">textarea text<tbreak/>line 2<tbreak/>line 3</textArea>
//! </svg>
}

test("CheckDocLoaded") 
	async;
{
	OP_NEW(CheckDocLoaded, (state.doc));
}

test("Setup")
	require success "CheckDocLoaded";
{
	t = find_element("text", 1);
	ts = find_element("tspan", 1);
	nt = find_element("text", 2);
	nts = find_element("tspan", 2);
	ta = find_element("textArea", 1);

	verify(t);
	verify(ts);
	verify(nt);
	verify(nts);
	verify(ta);
	
	verify(NS_SVG == t->GetNsType());
	verify(NS_SVG == ts->GetNsType());
	verify(NS_SVG == nt->GetNsType());
	verify(NS_SVG == nts->GetNsType());
	verify(NS_SVG == ta->GetNsType());
}

test("Test SVGUtils::IsEditable")
	require success "Setup";
{
	verify(SVGUtils::IsEditable(t));
	verify(SVGUtils::IsEditable(ts));
	verify(!SVGUtils::IsEditable(nt));
	verify(!SVGUtils::IsEditable(nts));
}

test("Test SVGUtils::GetTextRootElement")
	require success "Setup";
{	
	verify(SVGUtils::GetTextRootElement(t) == t);
	verify(SVGUtils::GetTextRootElement(ts) == t);
	verify(SVGUtils::GetTextRootElement(nt) == nt);
	verify(SVGUtils::GetTextRootElement(nts) == nt);
}

test("Setup #2")
	require success "Setup";
{
	SVGElementContext* elmctx = AttrValueStore::AssertSVGElementContext(t);
	verify(elmctx);
	troot = elmctx->GetAsTextRootContainer();
	verify(troot);
	e = troot->GetEditable();
	verify(e);
	verify(op_strcmp(e->GetInputContextName(), "SVG Editable") == 0);
}

test("Test SVGTextElementStateContext::IsEditing")
	require success "Setup #2";
{
	//verify(!troot->IsEditing());
	//verify(troot->GetEditable());
	//verify(!troot->IsEditing());
	g_svg_manager->BeginEditing(state.doc, t, FOCUS_REASON_ACTION);
	verify(troot->IsEditing());
	g_svg_manager->BeginEditing(state.doc, nt, FOCUS_REASON_ACTION);
	verify(troot->IsEditing());
	g_input_manager->ReleaseInputContext(troot->GetEditable());
	verify(!troot->IsEditing());
}

test("Test SVGEditable simple methods")
	require success "Setup #2";
{
	verify(e->GetDocument() == state.doc);
	verify(e->GetEditRoot() == t);
	verify(!e->IsMultiLine());
	verify(!e->HasSelectedText());
}

test("Test SVGEditable selections")
	require success "Setup #2";
	require SVG_SUPPORT_TEXTSELECTION;
{
	g_svg_manager->BeginEditing(state.doc, t, FOCUS_REASON_ACTION);
	SVGTextSelection* tsel = e->GetTextSelection();
	verify(tsel);
	SVGCaretPoint cp;
	cp.elm = ts;
	e->SelectToCaret(cp);
	verify(e->HasSelectedText());
	e->SelectNothing();
	verify(!e->HasSelectedText());
	verify(OpStatus::IsSuccess(tsel->DOMSetSelection(t, 0, 4)));
	verify(e->HasSelectedText());
}

test("Test SVGEditableCaret")
	require success "Setup #2";
{
	SVGEditableCaret& c = e->m_caret;
	c.PlaceFirst(ta);
	c.BlinkNow();
	c.RestartBlink();
	c.StopBlink();
	c.Paint(NULL);
	c.StickToDummy();
	c.StickToPreceding();
	SVGCaretPoint cp;
	c.Set(cp);
	c.Place(SVGEditableCaret::PLACE_START);
	c.Place(SVGEditableCaret::PLACE_END);
	c.Place(SVGEditableCaret::PLACE_LINESTART);
	c.Place(SVGEditableCaret::PLACE_LINEEND);
	c.Place(SVGEditableCaret::PLACE_LINEPREVIOUS);
	c.Place(SVGEditableCaret::PLACE_LINENEXT);
	int i = 0;
	for(i = 0; i < 100; i++)
	{
		c.Move(TRUE);
	}
	for(i = 0; i < 110; i++)
	{
		c.Move(FALSE);
	}
	for(i = 0; i < 10; i++)
	{
		c.MoveWord(TRUE);
	}
	for(i = 0; i < 15; i++)
	{
		c.MoveWord(FALSE);
	}
}

test("Setup #3")
	require success "Setup";
{
	SVGElementContext* elmctx = AttrValueStore::AssertSVGElementContext(ta);
	verify(elmctx);
	troot = elmctx->GetAsTextRootContainer();
	verify(troot);
	e = troot->GetEditable();
	verify(e);
	verify(op_strcmp(e->GetInputContextName(), "SVG Editable") == 0);
}

test("Test SVGEditable simple methods (textArea)")
	require success "Setup #3";
{
	verify(e->GetDocument() == state.doc);
	verify(e->GetEditRoot() == ta);
	verify(e->IsMultiLine());
	verify(!e->HasSelectedText());
}

test("Test SVGEditableCaret (textArea)")
	require success "Setup #3";
{
	SVGEditableCaret& c = e->m_caret;
	c.PlaceFirst(ta);
	c.BlinkNow();
	c.RestartBlink();
	c.StopBlink();
	c.Paint(NULL);
	c.StickToDummy();
	c.StickToPreceding();
	SVGCaretPoint cp;
	c.Set(cp);
	c.Place(SVGEditableCaret::PLACE_START);
	c.Place(SVGEditableCaret::PLACE_END);
	c.Place(SVGEditableCaret::PLACE_LINESTART);
	c.Place(SVGEditableCaret::PLACE_LINEEND);
	c.Place(SVGEditableCaret::PLACE_LINEPREVIOUS);
	c.Place(SVGEditableCaret::PLACE_LINENEXT);
	int i = 0;
	for(i = 0; i < 100; i++)
	{
		c.Move(TRUE);
	}
	for(i = 0; i < 110; i++)
	{
		c.Move(FALSE);
	}
	for(i = 0; i < 10; i++)
	{
		c.MoveWord(TRUE);
	}
	for(i = 0; i < 15; i++)
	{
		c.MoveWord(FALSE);
	}
}

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 480 360" id="svgroot">
//!   <text id="t" x="10" y="10" editable="simple">editable text <tspan id="ts">editable tspan</tspan></text>
//! </svg>
}

test("Element manipulation")
{
	t = find_element("text", 1);	
	verify(t);
	verify(NS_SVG == t->GetNsType());
	SVGElementContext* elmctx = AttrValueStore::AssertSVGElementContext(t);
	verify(elmctx);
	troot = elmctx->GetAsTextRootContainer();
	verify(troot);
	e = troot->GetEditable();
	verify(e);
	verify(op_strcmp(e->GetInputContextName(), "SVG Editable") == 0);

	HTML_Element* text_elm = find_element("text");
	verify(NS_SVG == text_elm->GetNsType());
	HTML_Element* tspan_elm = find_element("tspan");
	verify(NS_SVG == tspan_elm->GetNsType());
	
	verify(e->FindElementAfterOfType(text_elm, Markup::SVGE_TSPAN) == tspan_elm);

	// Tear down 'tspan'
	SVGEditPoint ep;
	HTML_Element* tspan_content = tspan_elm->FirstChildActual();
	ep.elm = tspan_content;
	verify(e->DeleteTextInElement(ep, 9));

	TextData* textdata = tspan_content->GetTextData();
	verify(textdata->GetTextLen() == 5);
	verify(uni_strcmp(textdata->GetText(), "tspan") == 0);

	e->DeleteElement(tspan_elm, FALSE);
	verify(e->FindElementAfterOfType(text_elm, Markup::SVGE_TSPAN) == NULL);

	// Reconstruct 'tspan'
	SVGCaretPoint cp;
	cp.elm = text_elm->FirstChild();
	cp.ofs = 14;
	e->m_caret.Set(cp);
	HTML_Element* new_tspan_elm = e->NewElement(Markup::SVGE_TSPAN);
	verify(new_tspan_elm);
	e->InsertElement(new_tspan_elm);

	HTML_Element* new_text_content = e->NewTextElement(UNI_L("editable "), 9);
	verify(new_text_content);
	// Here I wanted to insert text _into_ the 'tspan' - but it seems I can't?
	new_text_content->Under(new_tspan_elm);

	cp.elm = new_text_content;
	cp.ofs = 9;
	e->m_caret.Set(cp);
	e->InsertText(UNI_L("tspan"), 5);

	TempBuffer buf;
	unsigned int len = text_elm->GetTextContentLength();
	verify(len == 14 + 14); // Same length as before?
	verify(OpStatus::IsSuccess(buf.Expand(len + 1))); // Enough room to fit the text
	text_elm->GetTextContent(buf.GetStorage(), buf.GetCapacity());

	verify(uni_strcmp(buf.GetStorage(), "editable text editable tspan") == 0);
}

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 480 360" id="svgroot">
//!   <g id="g0">
//!     <text id="t0" x="10" y="10" editable="simple">editable text <tspan id="ts">editable tspan</tspan></text>
//!   </g>
//!   <text id="t1" x="10" y="10" editable="simple">editable text <tspan id="ts">editable tspan</tspan></text>
//!   <text id="t2" x="10" y="10" editable="simple">editable text <tspan id="ts">editable tspan</tspan></text>
//! </svg>
}

test("Garbage collection of editable elements")
	language ecmascript;
{
	root = document.getElementById("svgroot");
	g0 = document.getElementById("g0");
	t0 = document.getElementById("t0");
	t1 = document.getElementById("t1");
	t2 = document.getElementById("t2");
	root.setFocus(t0);
	root.setFocus(t1);
	root.setFocus(t2);
	
	t1.parentNode.removeChild(t1);
	g0.parentNode.removeChild(g0);
	
	opera.collect();
}
