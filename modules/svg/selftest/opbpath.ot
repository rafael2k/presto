/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2005-2006 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.	It may not be distributed
** under any circumstances.
*/
group "svg.path";

include "modules/svg/src/svgpch.h";
include "modules/svg/src/OpBpath.h";

require SVG_SUPPORT;
require init;

language c++;

global
{
}

test("Test comparison function for paths negative")
{
	OpBpath* path1;
	OpBpath::Make(path1);
	path1->MoveTo(100, 100, FALSE);
	path1->LineTo(SVGNumberPair(300, 100), FALSE);
	path1->LineTo(200, 300, FALSE);
	path1->MoveTo(SVGNumberPair(100, 100), FALSE);
	path1->LineTo(300, 100, FALSE); // <---- "ERROR" HERE
	path1->LineTo(200, 300, FALSE);
	path1->Close();

	OpBpath* path2;
	OpBpath::Make(path2);
	path2->MoveTo(100, 100, FALSE);
	path2->LineTo(300, 100, FALSE);
	path2->LineTo(200, 300, FALSE);
	path2->MoveTo(100, 100, FALSE);
	path2->LineTo(200, 100, FALSE); // <---- "ERROR" HERE
	path2->LineTo(200, 300, FALSE);
	path2->Close();

	verify(!(path1->IsEqual(*path2)));
	OP_DELETE(path1);
	OP_DELETE(path2);
}

test("Test comparison function for paths positive")
{
	OpBpath* path;
	OpBpath::Make(path);
	path->MoveTo(100, 100, FALSE);
	path->LineTo(300, 100, FALSE);
	path->LineTo(200, 300, FALSE);
	path->MoveTo(100, 100, FALSE);
	path->LineTo(300, 100, FALSE);
	path->LineTo(200, 300, FALSE);
	path->Close();

	verify(path->IsEqual(*path));
	OP_DELETE(path);
}

test("Interpolate a path (used for path-morphing)")
{
	OpBpath* from_path;
	OpBpath::Make(from_path, FALSE);
	from_path->MoveTo(10,10, FALSE);
	from_path->LineTo(20,20, FALSE);
	from_path->MoveTo(10,10, FALSE);
	from_path->LineTo(20,20, FALSE);
	from_path->MoveTo(10,10, FALSE);
	from_path->LineTo(20,20, FALSE);
	from_path->Close();

	OpBpath* to_path;
	OpBpath::Make(to_path, FALSE);
	to_path->MoveTo(20,20, FALSE);
	to_path->LineTo(30,30, FALSE);
	to_path->MoveTo(20,20, FALSE);
	to_path->LineTo(30,30, FALSE);
	to_path->MoveTo(20,20, FALSE);
	to_path->LineTo(30,30, FALSE);
	to_path->Close();

	OpBpath* expected_path;
	OpBpath::Make(expected_path, FALSE);
	expected_path->MoveTo(15,15, FALSE);
	expected_path->LineTo(25,25, FALSE);
	expected_path->MoveTo(15,15, FALSE);
	expected_path->LineTo(25,25, FALSE);
	expected_path->MoveTo(15,15, FALSE);
	expected_path->LineTo(25,25, FALSE);
	expected_path->Close();

	OpBpath* interpolated_path;
	verify(OpStatus::IsSuccess(OpBpath::Make(interpolated_path, FALSE, 6)));
	verify(OpStatus::IsSuccess(interpolated_path->Interpolate(*from_path, *to_path, 0.5)));
	verify(expected_path->IsEqual(*interpolated_path));
	OP_DELETE(from_path);
	OP_DELETE(to_path);
	OP_DELETE(interpolated_path);
	OP_DELETE(expected_path);
}

test("Bezierize")
{
	OpBpath* orig_path;
	OpBpath::Make(orig_path, FALSE);
	orig_path->MoveTo(10,10, FALSE);
	orig_path->LineTo(20,20, FALSE);
	orig_path->LineTo(0,25, FALSE);
	orig_path->LineTo(10,20, FALSE);
	orig_path->Close();

	OpBpath* bez_path;
	verify(OpStatus::IsSuccess(orig_path->Bezierize(&bez_path)));

	PathSegListIterator* iter = bez_path->GetPathIterator(TRUE);
	verify(iter);
	for (unsigned int i = 0; i < bez_path->GetCount(); ++i)
	{
		const SVGPathSeg* seg = iter->GetNext();

		verify(seg->info.type == SVGPathSeg::SVGP_CURVETO_CUBIC_ABS ||
			   seg->info.type == SVGPathSeg::SVGP_MOVETO_ABS ||
			   seg->info.type == SVGPathSeg::SVGP_CLOSE);
	}
	OP_DELETE(iter);

	OP_DELETE(orig_path);
	OP_DELETE(bez_path);
}

test("Copy")
{
	OpBpath* orig_path;
	OpBpath::Make(orig_path, FALSE);
	orig_path->MoveTo(10,10, FALSE);
	orig_path->LineTo(20,20, FALSE);
	orig_path->LineTo(0,25, FALSE);
	orig_path->LineTo(10,20, FALSE);
	orig_path->Close();

	OpBpath* path_copy;
	OpBpath::Make(path_copy, FALSE);

	path_copy->Copy(*orig_path);

	verify(path_copy->IsEqual(*orig_path));
	verify(orig_path->IsEqual(*path_copy));

	OP_DELETE(orig_path);
	OP_DELETE(path_copy);
}

data "image/svg+xml"
{
	//!<?xml version="1.0" encoding="UTF-8" standalone="no"?>
	//!<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
	//!<svg id="svgsvg" version="1.1" width="100" height="100"
	//!  viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg"
	//!  xmlns:xlink="http://www.w3.org/1999/xlink"
	//!  >
	//! <path id='p1' d="M17,8 L17,17 L8,17 L15,15 Z"/>
	//! <path id='p2' d=""/>
	//! <path id='p3' d="Z"/>
	//! <path id='p4' d="foobar hejsan M17,8 L17,17 L8,17 L15,15 Z"/>
	//! <path id='p5' d="&#x6543;hej"/>
	//!</svg>
}

test("String representation")
	language ecmascript;
{
	var pathstr = document.getElementById('p1').getAttributeNS(null, 'd');
	verify(pathstr);
	verify(pathstr == "M17,8 L17,17 L8,17 L15,15 Z");

	pathstr = document.getElementById('p2').getAttributeNS(null, 'd');
	verify(pathstr == "");

	pathstr = document.getElementById('p3').getAttributeNS(null, 'd');
	verify(pathstr);
	verify(pathstr == "Z");

	pathstr = document.getElementById('p4').getAttributeNS(null, 'd');
	verify(pathstr);
	verify(pathstr == "foobar hejsan M17,8 L17,17 L8,17 L15,15 Z");

	pathstr = document.getElementById('p5').getAttributeNS(null, 'd');
	verify(pathstr);
	verify(pathstr == "\u6543hej");
}

setup
{
}

exit
{
}

