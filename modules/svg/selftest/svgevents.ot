/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "svg.events";
require init;
require SVG_SUPPORT;

language ecmascript;

disabled; // Until it's not full of failing tests.

include "modules/display/vis_dev.h";
include "modules/doc/frm_doc.h";

subtest RenderSVG(FramesDocument* frames_doc)
{
	HTML_Element* doc_root = frames_doc->GetDocRoot();
	verify(doc_root);
	HTML_Element* svg_elm = doc_root->FirstChild();
	while (svg_elm && ! svg_elm->IsMatchingType(Markup::SVGE_SVG, NS_SVG))
	{
		svg_elm = svg_elm->Suc();
	}
	verify(svg_elm);
	verify(svg_elm->IsMatchingType(Markup::SVGE_SVG, NS_SVG));

	g_svg_manager->Render(svg_elm, frames_doc, NULL, 100, 100, 1.0f);
}

data "image/svg+xml"
{
	//!<?xml version="1.0" encoding="UTF-8" standalone="no"?>
	//!<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
	//!<svg id="svgsvg" version="1.1" width="100" height="100"
	//!  viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg"
	//!  xmlns:xlink="http://www.w3.org/1999/xlink"
	//!  onload="document.load_was_called = true">
	//!</svg>
}

test("SVGEvent.SVGLoad")
{
	verify(document);
	verify(document.documentElement);
	verify("load_was_called" in document);
	verify(document.load_was_called);
}

data "image/svg+xml"
{
	//!<?xml version="1.0" encoding="UTF-8" standalone="no"?>
	//!<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
	//!<svg id="svgsvg" version="1.1" width="100" height="100"
	//!  viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg"
	//!  xmlns:xlink="http://www.w3.org/1999/xlink"
	//!  onunload="document.unload_was_called = true">
	//!</svg>
}

test("SVGEvent.SVGUnload")
{
	verify(document);
	verify(document.documentElement);
	verify(!("unload_was_called" in document));

	var old_document = document;
	location.href="about:blank";

	verify("unload_was_called" in old_document);
	verify(old_document.unload_was_called);
}


data "image/svg+xml"
{
	//!<?xml version="1.0" standalone="no"?>
	//!<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
	//!   "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
	//!<svg width="5cm" height="3cm"  viewBox="0 0 500 300"
	//!      xmlns="http://www.w3.org/2000/svg" version="1.1"
	//!      xmlns:xlink="http://www.w3.org/1999/xlink" >
	//!   <rect x="1" y="1" width="498" height="298"
	//!         fill="none" stroke="blue" stroke-width="2" />
	//!   <!-- Draw the outline of the motion path in blue, along
	//!           with three small circles at the start, middle and end. -->
	//!   <path id="path1" d="M100,250 C 100,50 400,50 400,250"
	//!         fill="none" stroke="blue" stroke-width="7.06"  />
	//!   <circle cx="100" cy="250" r="17.64" fill="blue"  />
	//!   <circle cx="250" cy="100" r="17.64" fill="blue"  />
	//!   <circle cx="400" cy="250" r="17.64" fill="blue"  />
	//!   <!-- Here is a triangle which will be moved about the motion path.
	//!        It is defined with an upright orientation with the base of
	//!        the triangle centered horizontally just above the origin. -->
	//!   <path d="M-25,-12.5 L25,-12.5 L 0,-87.5 z"
	//!         fill="yellow" stroke="red" stroke-width="7.06"
	//!     onbegin="if (!('pathbegincount' in document)) document.pathbegincount = 1; else document.pathbegincount++;"
	//!     onend="if (!('pathendcount' in document)) document.pathendcount = 1; else document.pathendcount++;"
	//!     onrepeat="if (!('pathrepeatcount' in document)) document.pathrepeatcount = 1; else document.pathrepeatcount++;"
	//!     >
	//!     <!-- Define the motion path animation -->
	//!     <animateMotion dur="0.6s" repeatCount="1" rotate="auto"
	//!       onbegin="if (!('animatemotionbegincount' in document)) document.animatemotionbegincount = 1; else document.animatemotionbegincount++;"
	//!       onend="if (!('animatemotionendcount' in document)) document.animatemotionendcount = 1; else document.animatemotionendcount++;"
	//!       onrepeat="if (!('animatemotionrepeatcount' in document)) document.animatemotionrepeatcount = 1; else document.animatemotionrepeatcount++;"
	//! >
	//!        <mpath xlink:href="#path1"
	//!           onbegin="if (!('mpathbegincount' in document)) document.mpathbegincount = 1; else document.mpathbegincount++;"
	//!           onend="if (!('mpathendcount' in document)) document.mpathendcount = 1; else document.mpathendcount++;"
	//!           onrepeat="if (!('mpathrepeatcount' in document)) document.mpathrepeatcount = 1; else document.mpathrepeatcount++;"
	//!         />
	//!     </animateMotion>
	//!   </path>
	//! </svg>
}

test("SVGEvent.setup+delay")
	language C++;
	delay post 2;
{
	verify(state.doc);
	/*	HTML_Element* doc_root = state.doc->GetDocRoot();
	verify(doc_root);
	verify(doc_root->IsMatching(Markup::SVGE_SVG, NS_SVG));
	g_svg_manager->Render/*
	/*	VisualDevice* vis_dev = state.doc->GetVisualDevice();
	verify(vis_dev);
	OpView* view = vis_dev->GetOpView();
	verify(view);
	OpRect rect(0,0,1000,1000);
	OpPainter* painter = view->GetPainter(rect);
	vis_dev->OnPaint(rect, painter);
	view->ReleasePainter(rect); */

	//vis_dev->Paint(OpRect(0, 0, 10000, 10000), vis_dev);

	/*	Window* win = state.doc->GetWindow();
	win->Raise();
	*/

	/*	HTML_Element* doc_root = state.doc->GetDocRoot();
	verify(doc_root);
	HTML_Element* svg_elm = doc_root->FirstChild();
	while (svg_elm && ! svg_elm->IsMatchingType(Markup::SVGE_SVG, NS_SVG))
	{
		svg_elm = svg_elm->Suc();
	}
	verify(svg_elm);
	verify(svg_elm->IsMatchingType(Markup::SVGE_SVG, NS_SVG));
	g_svg_manager->Render(svg_elm, state.doc, NULL, 100, 100, 1.0f);
	*/
	verify(RenderSVG(state.doc));
}

test("SVGEvent.beginEvent")
{
	verify(document);
	verify(document.documentElement);
	// I'm not sure the animation has even started but I hope it has.
	verify("animatemotionbegincount" in document);
	verify(document.animatemotionbegincount == 1);

	// verify("mpathbegincount" in document);
	// verify(document.mpathbegincount == 1);
	verify(!("mpathbegincount" in document)); // Shouldn't receive any event, or?
	verify("pathbegincount" in document);
	verify(document.pathbegincount == 1);
	//	verify(!("pathbegincount" in document)); // Shouldn't receive any event, or?
}

test("SVGEvent.endevent-setup+delay#2")
	delay pre 0.5;
	delay post 0.5;
	language C++;
{
	verify(RenderSVG(state.doc)); // posts animation message
}

test("SVGEvent.endevent-setup+delay#3")
	delay pre 0.5;
	language C++;
{
	verify(RenderSVG(state.doc)); // Handles animation message (and posts a new one)
}

test("SVGEvent.endEvent#1")
{
	verify(document);
	verify(document.documentElement);
	// I'm not sure the animation has even started but I hope it has.
	verify("animatemotionendcount" in document);
	verify(document.animatemotionendcount == 1);

	// verify("mpathendcount" in document);
	// verify(document.mpathendcount == 1);
	verify(!("mpathendcount" in document)); // Shouldn't receive any event, or?

	//	verify(!("pathendcount" in document)); // Shouldn't receive any event, or?
	verify("pathendcount" in document);
	verify(document.pathendcount == 1);
}

test("SVGEvent.repeatEvent#1")
{
	verify(document);
	verify(document.documentElement);

	// Shouldn't receive any event since it doesn't repeat
	verify(!("animatemotionrepeatcount" in document));
	verify(!("mpathrepeatcount" in document));
	verify(!("pathrepeatcount" in document));
}


data "image/svg+xml"
{
	//!<?xml version="1.0" standalone="no"?>
	//!<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
	//!   "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
	//!<svg width="5cm" height="3cm"  viewBox="0 0 500 300"
	//!      xmlns="http://www.w3.org/2000/svg" version="1.1"
	//!      xmlns:xlink="http://www.w3.org/1999/xlink" >
	//!   <rect x="1" y="1" width="498" height="298"
	//!         fill="none" stroke="blue" stroke-width="2" />
	//!   <!-- Draw the outline of the motion path in blue, along
	//!           with three small circles at the start, middle and end. -->
	//!   <path id="path1" d="M100,250 C 100,50 400,50 400,250"
	//!         fill="none" stroke="blue" stroke-width="7.06"  />
	//!   <circle cx="100" cy="250" r="17.64" fill="blue"  />
	//!   <circle cx="250" cy="100" r="17.64" fill="blue"  />
	//!   <circle cx="400" cy="250" r="17.64" fill="blue"  />
	//!   <!-- Here is a triangle which will be moved about the motion path.
	//!        It is defined with an upright orientation with the base of
	//!        the triangle centered horizontally just above the origin. -->
	//!   <path d="M-25,-12.5 L25,-12.5 L 0,-87.5 z"
	//!         fill="yellow" stroke="red" stroke-width="7.06"
	//!     onbegin="if (!('pathbegincount' in document)) document.pathbegincount = 1; else document.pathbegincount++;"
	//!     onend="if (!('pathendcount' in document)) document.pathendcount = 1; else document.pathendcount++;"
	//!     onrepeat="if (!('pathrepeatcount' in document)) document.pathrepeatcount = 1; else document.pathrepeatcount++;"
	//!     >
	//!     <!-- Define the motion path animation -->
	//!     <animateMotion dur="1.6s" repeatCount="indefinite" rotate="auto"
	//!       onbegin="if (!('animatemotionbegincount' in document)) document.animatemotionbegincount = 1; else document.animatemotionbegincount++;"
	//!       onend="if (!('animatemotionendcount' in document)) document.animatemotionendcount = 1; else document.animatemotionendcount++;"
	//!       onrepeat="if (!('animatemotionrepeatcount' in document)) document.animatemotionrepeatcount = 1; else document.animatemotionrepeatcount++;"
	//! >
	//!        <mpath xlink:href="#path1"
	//!           onbegin="if (!('mpathbegincount' in document)) document.mpathbegincount = 1; else document.mpathbegincount++;"
	//!           onend="if (!('mpathendcount' in document)) document.mpathendcount = 1; else document.mpathendcount++;"
	//!           onrepeat="if (!('mpathrepeatcount' in document)) document.mpathrepeatcount = 1; else document.mpathrepeatcount++;"
	//!         />
	//!     </animateMotion>
	//!   </path>
	//! </svg>
}

test("SVGEvent.repeatevent-setup+delay#1")
	delay post 0.5;
	language C++;
{
	verify(state.doc);
	/*	HTML_Element* doc_root = state.doc->GetDocRoot();
	verify(doc_root);
	HTML_Element* svg_elm = doc_root->FirstChild();
	while (svg_elm && ! svg_elm->IsMatchingType(Markup::SVGE_SVG, NS_SVG))
	{
		svg_elm = svg_elm->Suc();
	}
	verify(svg_elm);
	verify(svg_elm->IsMatchingType(Markup::SVGE_SVG, NS_SVG));
	g_svg_manager->Render(svg_elm, state.doc, NULL, 100, 100, 1.0f); */
	verify(RenderSVG(state.doc));
}

test("SVGEvent.repeatevent-setup+delay#2")
	delay post 0.5;
	language C++;
{
	verify(RenderSVG(state.doc));
}

test("SVGEvent.repeatevent-setup+delay#3")
	delay post 0.5;
	language C++;
{
	verify(RenderSVG(state.doc));
}

test("SVGEvent.repeatevent-setup+delay#4")
	delay post 0.5;
	language C++;
{
	verify(RenderSVG(state.doc));
}

test("SVGEvent.repeatevent-setup+delay#5")
	delay post 0.5;
	language C++;
{
	verify(RenderSVG(state.doc));
}

test("SVGEvent.repeatevent-setup+delay#6")
	delay post 0.5;
	language C++;
{
	verify(RenderSVG(state.doc));
}

test("SVGEvent.endEvent#2") delay pre 8.0;
{
	verify(document);
	verify(document.documentElement);
	// I'm not sure the animation has even started but I hope it has.
	verify(!("animatemotionendcount" in document));
	verify(!("mpathendcount" in document));
	verify(!("pathendcount" in document)); // Shouldn't receive any event, or?
}

test("SVGEvent.repeatEvent#2")
{
	verify(document);
	verify(document.documentElement);
	// I'm not sure the animation has even started but I hope it has.
	verify("animatemotionrepeatcount" in document);
	verify(document.animatemotionrepeatcount > 0);

	verify(!("mpathrepeatcount" in document));
// 	verify("mpathrepeatcount" in document);
// 	verify(document.mpathrepeatcount > 0);

	verify("pathrepeatcount" in document);
	verify(document.pathrepeatcount > 0);
}

test("SVGEvent.SVGAbort")
	disabled; // Feature not implemented yet
{
	verify(false); // Test not implemented yet
}
test("SVGEvent.SVGError")
	disabled; // Feature not implemented yet
{
	verify(false); // Test not implemented yet
}
test("SVGEvent.SVGResize")
	disabled; // Seems to work but hasn't found a way to selftest it
{
	verify(false); // Test not implemented yet
}
test("SVGEvent.SVGScroll")
	disabled; // Not implemented yet
{
	verify(false); // Test not implemented yet
}
test("SVGEvent.SVGZoom")
	disabled; // Seems to work but hasn't found a way to selftest it
{
	verify(false); // Test not implemented yet
}
