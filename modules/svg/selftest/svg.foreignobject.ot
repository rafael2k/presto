// svgtext.ot
group "svg.fo";

require SVG_SUPPORT;
require SVG_DOM;
require SVG_FULL_11;
require init;

include "modules/svg/src/svgpch.h";
include "modules/display/vis_dev.h";
include "modules/svg/src/SVGManagerImpl.h";
include "modules/svg/src/AttrValueStore.h";
include "modules/svg/src/SVGImageImpl.h";
include "modules/doc/frm_doc.h";
include "modules/doc/html_doc.h";

language ecmascript;

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <svg id="svgroot" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="480" height="360" viewBox="0 0 600 1000" preserveAspectRatio="none" onmousemove="document.getElementById('status').firstChild.data='pos: ['+evt.clientX+', '+evt.clientY+']';">
//! 	<foreignObject id="fo1" x="0" y="0" width="360" height="250">
//! 		<html id="root" xmlns="http://www.w3.org/1999/xhtml">
//! 			<body bgcolor="red" id="b1">
//!					<h1 id="h1"><a href="moo" id="red">Hello red!</a></h1>
//! 			</body>
//! 		</html>
//! 	</foreignObject>
//! 	<foreignObject id="fo2" transform="translate(0 300)" width="360" height="250">
//! 		<html id="root2" xmlns="http://www.w3.org/1999/xhtml">
//! 			<body bgcolor="blue" id="b2">
//!					<h1 id="h2"><a href="moo" id="blue">Hello blue!</a></h1>
//! 			</body>
//! 		</html>
//! 	</foreignObject>
//! 	<foreignObject id="fo3" transform="rotate(35) translate(500 300)" width="360" height="250">
//! 		<html id="root3" xmlns="http://www.w3.org/1999/xhtml">
//! 			<body bgcolor="green" id="b3">
//!					<h1 id="h3"><a href="moo" id="green">Hello green!</a></h1>
//! 			</body>
//! 		</html>
//! 	</foreignObject>
//! 	<foreignObject id="fo4" x="400" width="360" height="250">
//! 		<html id="root4" xmlns="http://www.w3.org/1999/xhtml">
//! 			<body bgcolor="yellow" id="b4">
//!					<h1 id="h4"><a href="moo" id="yellow">Hello yellow!</a></h1>
//! 			</body>
//! 		</html>
//! 	</foreignObject>
//!	    <text id="status" x="400" y="400" font-size="25">pos</text>
//! </svg>
};

test("Test finding child elements of foreignObject")
	language c++;
{
	HTML_Element* root = find_element("svg", 1);
	HTML_Element* target = find_element("a", 1);
	HTML_Element* found = NULL;
	
	verify(root != NULL);
	verify(target != NULL);

	int offsetx = 0;
	int offsety = 0;
	verify(OpBoolean::IS_TRUE == g_svg_manager->FindSVGElement(root, state.doc, 104, 14, &found, offsetx, offsety));
	if(target != found)
		output("\n%p(%s) %p(%s)\n", target, ST_down(target->GetId()), found, (found && found->GetId()) ? ST_down(found->GetId()) : "n/a");
	verify(target == found);
	

	offsetx = 0;
	offsety = 0;
	target = find_element("a", 2);
	verify(target != NULL);
	found = NULL;
	verify(OpBoolean::IS_TRUE == g_svg_manager->FindSVGElement(root, state.doc, 120, 118, &found, offsetx, offsety));
	if(target != found)
		output("\n%p(%s) %p(%s)\n", target, ST_down(target->GetId()), found, (found && found->GetId()) ? ST_down(found->GetId()) : "n/a");
	verify(target == found);

	offsetx = 0;
	offsety = 0;
	target = find_element("a", 3);
	verify(target != NULL);
	verify(OpBoolean::IS_TRUE == g_svg_manager->FindSVGElement(root, state.doc, 277, 231, &found, offsetx, offsety));
	if(target != found)
		output("\n%p(%s) %p(%s)\n", target, ST_down(target->GetId()), found, (found && found->GetId()) ? ST_down(found->GetId()) : "n/a");
	verify(target == found);

	offsetx = 0;
	offsety = 0;
	target = find_element("a", 4);
	verify(target != NULL);
	verify(OpBoolean::IS_TRUE == g_svg_manager->FindSVGElement(root, state.doc, 460, 10, &found, offsetx, offsety));
	if(target != found)
		output("\n%p(%s) %p(%s)\n", target, ST_down(target->GetId()), found, (found && found->GetId()) ? ST_down(found->GetId()) : "n/a");
	verify(target == found);
}

test("Test finding foreignObject child hovered elements")
	language c++;
	disabled;
{
	HTML_Element* root = find_element("svg", 1);
	HTML_Element* target = NULL;
	HTML_Element* found = NULL;
	
	verify(root != NULL);

	int x = 104;
	int y = 14;
	target = find_element("a", 1);
	verify(target != NULL);
	state.doc->MouseAction(ONMOUSEMOVE, x, y, 1, FALSE, FALSE, FALSE, TRUE);
	found = state.doc->GetHtmlDocument()->GetHoverHTMLElement();
	if(target != found)
		output("\n%p(%s) %p(%s)\n", target, ST_down(target->GetId()), found, (found && found->GetId()) ? ST_down(found->GetId()) : "n/a");
	//verify(target == found);

	x = 120;
	y = 123;
	target = find_element("a", 2);
	verify(target != NULL);
	state.doc->MouseAction(ONMOUSEMOVE, x, y, 1, FALSE, FALSE, FALSE, TRUE);
	found = state.doc->GetHtmlDocument()->GetHoverHTMLElement();
	if(target != found)
		output("\n%p(%s) %p(%s)\n", target, ST_down(target->GetId()), found, (found && found->GetId()) ? ST_down(found->GetId()) : "n/a");
	//verify(target == found);

	x = 277;
	y = 239;
	target = find_element("a", 3);
	verify(target != NULL);
	state.doc->MouseAction(ONMOUSEMOVE, x, y, 1, FALSE, FALSE, FALSE, TRUE);
	found = state.doc->GetHtmlDocument()->GetHoverHTMLElement();
	if(target != found)
		output("\n%p(%s) %p(%s)\n", target, ST_down(target->GetId()), found, (found && found->GetId()) ? ST_down(found->GetId()) : "n/a");
	//verify(target == found);

	x = 460;
	y = 17;
	target = find_element("a", 4);
	verify(target != NULL);
	state.doc->MouseAction(ONMOUSEMOVE, x, y, 1, FALSE, FALSE, FALSE, TRUE);
	found = state.doc->GetHtmlDocument()->GetHoverHTMLElement();
	if(target != found)
		output("\n%p(%s) %p(%s)\n", target, ST_down(target->GetId()), found, (found && found->GetId()) ? ST_down(found->GetId()) : "n/a");
	//verify(target == found);
}
