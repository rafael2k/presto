/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2005 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/
group "svg.parser.path";

require SVG_SUPPORT;
require init;

include "modules/svg/src/svgpch.h";
include "modules/svg/src/SVGAttributeParser.h";
include "modules/svg/src/OpBpath.h";

language c++;

test("Incorrect implicit command")
{
	const uni_char* test = UNI_L("M1,1Z3172.970 1");

    OpBpath* path = NULL;
    verify(OpStatus::IsError(SVGAttributeParser::ParseToNewPath(test, uni_strlen(test), FALSE, path)));
}
finally
{
	OP_DELETE(path);
}

test("Empty")
{
    const uni_char* test = UNI_L("");

    OpBpath* path;
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseToNewPath(test, uni_strlen(test), TRUE, path)));
    verify(path && path->GetCount() == 0);

	OP_DELETE(path);
}

test("Simple")
{
    const uni_char* test = UNI_L("M 100 100 L 300 100 L 200 300 z");

    OpBpath* path1;
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseToNewPath(test, uni_strlen(test), TRUE, path1)));
    verify(path1);

    OpBpath *path2;
    verify(OpStatus::IsSuccess(OpBpath::Make(path2, TRUE, 4)));
    path2->MoveTo(100, 100, FALSE);
    path2->LineTo(300, 100, FALSE);
    path2->LineTo(200, 300, FALSE);
    path2->Close();

    verify(path1->IsEqual(*path2));

    OP_DELETE(path1);
    OP_DELETE(path2);
}

test("ImplicitLineTo")
{
    const uni_char* test = UNI_L("M 100 100 300 100 L 200 300 z");
    OpBpath* path1;
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseToNewPath(test, uni_strlen(test), TRUE, path1)));

    OpBpath* path2;
    verify(OpStatus::IsSuccess(OpBpath::Make(path2, TRUE, 4)));
    path2->MoveTo(100, 100, FALSE);
    path2->LineTo(300, 100, FALSE);
    path2->LineTo(200, 300, FALSE);
    path2->Close();

    verify(path1->IsEqual(*path2));

    OP_DELETE(path1);
    OP_DELETE(path2);
}

test("ImplicitLineToRel")
{
    const uni_char* test = UNI_L("m 100 100 200 0 L 0 100 z");
    OpBpath* path1;
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseToNewPath(test, uni_strlen(test), TRUE, path1)));

    OpBpath* path2;
    verify(OpStatus::IsSuccess(OpBpath::Make(path2, TRUE, 4)));
    path2->MoveTo(100, 100, TRUE);
    path2->LineTo(200, 0, TRUE);
    path2->LineTo(0, 100, FALSE);
    path2->Close();

    verify(path1->IsEqual(*path2));

    OP_DELETE(path1);
    OP_DELETE(path2);
}

test("HorizontalLine")
{
    const uni_char* test = UNI_L("M 100 100 h 100 z");
    OpBpath* path1;
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseToNewPath(test, uni_strlen(test), TRUE, path1)));

    OpBpath* path2;
    verify(OpStatus::IsSuccess(OpBpath::Make(path2, TRUE, 3)));
    path2->MoveTo(100, 100, FALSE);
    path2->HLineTo(100, TRUE);
    path2->Close();

    path1->IsEqual(*path2);

    OP_DELETE(path1);
    OP_DELETE(path2);
}

test("VerticalLine")
{
    const uni_char* test = UNI_L("m 0 0 V 200 z");
    OpBpath* path1;
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseToNewPath(test, uni_strlen(test), TRUE, path1)));

    OpBpath* path2;
    verify(OpStatus::IsSuccess(OpBpath::Make(path2, TRUE, 3)));
    path2->MoveTo(0, 0, FALSE);
    path2->VLineTo(200, FALSE);
    path2->Close();

    path1->IsEqual(*path2);

    OP_DELETE(path1);
    OP_DELETE(path2);
}

test("Cubic")
{
    const uni_char* test = UNI_L("m 0 0 C 10 20 30 40 50 60 z");
    OpBpath* path1;
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseToNewPath(test, uni_strlen(test), TRUE, path1)));

    OpBpath* path2;
    verify(OpStatus::IsSuccess(OpBpath::Make(path2, TRUE, 3)));
    path2->MoveTo(0, 0, TRUE);
    path2->CubicCurveTo(10, 20, 30, 40, 50, 60, FALSE, FALSE);
    path2->Close();

    path1->IsEqual(*path2);

    OP_DELETE(path1);
    OP_DELETE(path2);
}

test("SmoothCubic")
{
    const uni_char* test = UNI_L("m 0 0 C 10 20 30 40 50 60 S 70 80 90 100 z");
    OpBpath* path1;
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseToNewPath(test, uni_strlen(test), TRUE, path1)));

    OpBpath* path2;
    verify(OpStatus::IsSuccess(OpBpath::Make(path2, TRUE, 4)));
    path2->MoveTo(0, 0, TRUE);
    path2->CubicCurveTo(10, 20, 30, 40, 50, 60, FALSE, FALSE);
    path2->CubicCurveTo(0, 0, 70, 80, 90,100, TRUE, FALSE);
    path2->Close();

    path1->IsEqual(*path2);

    OP_DELETE(path1);
    OP_DELETE(path2);
}

test("SmoothQuadratic")
{
    const uni_char* test = UNI_L("m 0 0 Q 10 20 30 40 T 90 100 z");
    OpBpath* path1;
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseToNewPath(test, uni_strlen(test), TRUE, path1)));

    OpBpath* path2;
    verify(OpStatus::IsSuccess(OpBpath::Make(path2, TRUE, 4)));
    path2->MoveTo(0, 0, TRUE);
    path2->QuadraticCurveTo(10, 20, 30, 40, FALSE, FALSE);
    path2->QuadraticCurveTo(0, 0, 90,100, TRUE, FALSE);
    path2->Close();

    path1->IsEqual(*path2);

    OP_DELETE(path1);
    OP_DELETE(path2);
}

test("BigPath")
{
    OpString test;

    test.Append("M8.367,10.962c0,5.832,4.745,10.574,10.579,10.574c1.702,0,3.356-0.52,4.948-1.398");
    test.Append("c0.483,0.25,1.815,0.934,1.815,0.934c5.393,2.7,17.674,8.471,19.04,8.898c0.665,0.222,1.45,0.081,2.286-0.217");
    test.Append("c0.495,0.244,2.146,1.052,2.146,1.052c0.008,0.005,0.843,0.398,0.843,0.398c-0.001-0.001,0.302,0.114,0.302,0.114");
    test.Append("c0.63,0.186,1.299,0.127,1.958-0.124c0.239,0.332,0.406,0.668,0.406,0.986l-0.032,0.314c-0.091,0.452-0.378,0.848-0.854,1.164");
    test.Append("c-0.776,0.518-1.911,0.777-3.369,0.777c-6.028,0-10.257-2.682-14.346-5.276c-4.564-2.897-8.872-5.632-15.352-5.632");
    test.Append("c-3.272,0-6.172,0.824-8.621,2.451c-2.548,1.689-4,3.861-4.768,5.383c-0.3,0.591-0.35,1.27-0.14,1.902");
    test.Append("c0.208,0.634,0.652,1.149,1.245,1.449c0.125,0.062,0.282,0.101,0.422,0.108l1.068,0.085c0.282,0.022,0.563-0.068,0.778-0.256");
    test.Append("l0.832-0.716c0.105-0.095,0.193-0.202,0.254-0.327c0.498-0.983,1.433-2.385,3.069-3.47c1.616-1.071,3.588-1.615,5.862-1.615");
    test.Append("c5.034,0,8.74,2.354,12.663,4.846c4.696,2.977,9.551,6.058,17.036,6.058c2.465,0,4.53-0.542,6.137-1.611");
    test.Append("c1.603-1.07,2.638-2.576,2.989-4.355l0.119-1.255c0-1.954-0.945-3.858-2.5-5.25c-0.013-1.001-0.506-1.77-1.221-2.302");
    test.Append("c0.01,0.017,0.005,0.036,0.015,0.051c-0.349-0.375-1.27-0.91-3.2-2.001c-0.369-1.23-1.099-1.851-1.7-2.128");
    test.Append("c0.21,0.096,0.364,0.263,0.47,0.455c-0.327-0.377-1.196-0.895-3.299-2.148c-0.036-0.019-6.097-3.612-7.609-4.507");
    test.Append("c-0.091-0.175-0.304-0.612-0.304-0.612c0.001,0.001-0.468-0.471-0.468-0.471c-0.066-0.067-0.143-0.124-0.223-0.172l-4.808-2.77");
    test.Append("c-0.654-0.378-1.147-0.287-1.565-0.166c-0.062-0.04-0.079-0.083-0.15-0.123l-1.611-0.874c-0.021-0.01,0.265,0.193,0.245,0.183");
    test.Append("c0,0-0.24-0.111-0.48-0.221c-0.875-5.032-5.186-8.764-10.326-8.764C13.11,0.388,8.367,5.132,8.367,10.962z");

    OpBpath* path1;
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseToNewPath(test.CStr(), test.Length(), TRUE, path1)));

    OpBpath* path2;
    verify(OpStatus::IsSuccess(OpBpath::Make(path2, TRUE)));

    path2->MoveTo(8.367, 10.962, FALSE);
    path2->CubicCurveTo(0, 5.832, 4.745, 10.574, 10.579, 10.574, FALSE, TRUE);
    path2->CubicCurveTo(1.702, 0, 3.356, -0.52, 4.948, -1.398, FALSE, TRUE);

    path2->CubicCurveTo(0.483, 0.25, 1.815, 0.934, 1.815, 0.934, FALSE, TRUE);
    path2->CubicCurveTo(5.393, 2.7, 17.674, 8.471, 19.04, 8.898, FALSE, TRUE);
    path2->CubicCurveTo(0.665, 0.222, 1.45, 0.081, 2.286, -0.217, FALSE, TRUE);

    path2->CubicCurveTo(0.495, 0.244, 2.146, 1.052, 2.146, 1.052, FALSE, TRUE);
    path2->CubicCurveTo(0.008, 0.005, 0.843, 0.398, 0.843, 0.398, FALSE, TRUE);
    path2->CubicCurveTo(-0.001, -0.001, 0.302, 0.114, 0.302, 0.114, FALSE, TRUE);

    path2->CubicCurveTo(0.63, 0.186, 1.299, 0.127, 1.958, -0.124, FALSE, TRUE);
    path2->CubicCurveTo(0.239,0.332,0.406,0.668,0.406,0.986, FALSE, TRUE);
    path2->LineTo(-0.032, 0.314, TRUE);
    path2->CubicCurveTo(-0.091, 0.452, -0.378, 0.848, -0.854, 1.164, FALSE, TRUE);

    path2->CubicCurveTo(-0.776, 0.518, -1.911, 0.777, -3.369, 0.777, FALSE, TRUE);
    path2->CubicCurveTo(-6.028, 0, -10.257, -2.682, -14.346, -5.276, FALSE, TRUE);
    path2->CubicCurveTo(-4.564, -2.897, -8.872, -5.632, -15.352, -5.632, FALSE, TRUE);

    path2->CubicCurveTo(-3.272, 0, -6.172, 0.824, -8.621, 2.451, FALSE, TRUE);
    path2->CubicCurveTo(-2.548, 1.689, -4, 3.861, -4.768, 5.383, FALSE, TRUE);
    path2->CubicCurveTo(-0.3, 0.591, -0.35, 1.27, -0.14, 1.902, FALSE, TRUE);

    path2->CubicCurveTo(0.208, 0.634, 0.652, 1.149, 1.245, 1.449, FALSE, TRUE);
    path2->CubicCurveTo(0.125, 0.062, 0.282, 0.101, 0.422, 0.108, FALSE, TRUE);
    path2->LineTo(1.068,0.085, TRUE);
    path2->CubicCurveTo(0.282, 0.022, 0.563, -0.068, 0.778, -0.256, FALSE, TRUE);
    path2->LineTo(0.832, -0.716, TRUE);
    path2->CubicCurveTo(0.105, -0.095, 0.193, -0.202, 0.254, -0.327, FALSE, TRUE);
    path2->CubicCurveTo(0.498, -0.983, 1.433, -2.385, 3.069, -3.47, FALSE, TRUE);
    path2->CubicCurveTo(1.616, -1.071, 3.588, -1.615, 5.862, -1.615, FALSE, TRUE);
    path2->CubicCurveTo(5.034, 0, 8.74, 2.354, 12.663, 4.846, FALSE, TRUE);
    path2->CubicCurveTo(4.696, 2.977, 9.551, 6.058, 17.036, 6.058, FALSE, TRUE);
    path2->CubicCurveTo(2.465, 0, 4.53, -0.542, 6.137, -1.611, FALSE, TRUE);

    path2->CubicCurveTo(1.603, -1.07, 2.638, -2.576, 2.989, -4.355, FALSE, TRUE);
    path2->LineTo(0.119, -1.255, TRUE);
    path2->CubicCurveTo(0, -1.954, -0.945, -3.858, -2.5, -5.25, FALSE, TRUE);
    path2->CubicCurveTo(-0.013, -1.001, -0.506, -1.77, -1.221, -2.302, FALSE, TRUE);
    path2->CubicCurveTo(0.01, 0.017, 0.005, 0.036, 0.015, 0.051, FALSE, TRUE);
    path2->CubicCurveTo(-0.349, -0.375, -1.27, -0.91, -3.2, -2.001, FALSE, TRUE);
    path2->CubicCurveTo(-0.369, -1.23, -1.099, -1.851, -1.7, -2.128, FALSE, TRUE);
    path2->CubicCurveTo(0.21, 0.096, 0.364, 0.263, 0.47, 0.455, FALSE, TRUE);
    path2->CubicCurveTo(-0.327, -0.377, -1.196, -0.895, -3.299, -2.148, FALSE, TRUE);
    path2->CubicCurveTo(-0.036, -0.019, -6.097, -3.612, -7.609, -4.507, FALSE, TRUE);
    path2->CubicCurveTo(-0.091, -0.175, -0.304, -0.612, -0.304, -0.612, FALSE, TRUE);
    path2->CubicCurveTo(0.001, 0.001, -0.468, -0.471, -0.468, -0.471, FALSE, TRUE);
    path2->CubicCurveTo(-0.066, -0.067, -0.143, -0.124, -0.223, -0.172, FALSE, TRUE);
    path2->LineTo(-4.808, -2.77, TRUE);
    path2->CubicCurveTo(-0.654, -0.378, -1.147, -0.287, -1.565, -0.166, FALSE, TRUE);
    path2->CubicCurveTo(-0.062, -0.04, -0.079, -0.083, -0.15, -0.123, FALSE, TRUE);
    path2->LineTo(-1.611, -0.874, TRUE);
    path2->CubicCurveTo(-0.021, -0.01, 0.265, 0.193, 0.245, 0.183, FALSE, TRUE);
    path2->CubicCurveTo(0, 0, -0.24, -0.111, -0.48, -0.221, FALSE, TRUE);
    path2->CubicCurveTo(-0.875, -5.032, -5.186, -8.764, -10.326, -8.764, FALSE, TRUE);
    path2->CubicCurveTo(13.11, 0.388, 8.367, 5.132, 8.367, 10.962, FALSE, FALSE);
    path2->Close();

    verify(path1->IsEqual(*path2));

    OP_DELETE(path1);
    OP_DELETE(path2);
}

