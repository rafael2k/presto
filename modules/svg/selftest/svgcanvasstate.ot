// svgcanvasstate.ot
group "svg.canvasstate";

disabled;

include "modules/svg/src/svgpch.h";
include "modules/svg/src/SVGManagerImpl.h";
include "modules/svg/src/SVGCanvasState.h";
include "modules/svg/src/SVGAttributeParser.h";
include "modules/svg/src/SVGList.h";
include "modules/svg/src/SVGObject.h";

require SVG_SUPPORT;
require init;

language c++;

global
{
	SVGCanvasState* state;
}

table FontFamilies(const uni_char*)
{
	{ UNI_L("Helvetica") },
	{ UNI_L("Times New Roman") },
	{ UNI_L("Sans-serif") },
	{ UNI_L("Fantasy") },
	{ UNI_L("Serif") }
}

test("Test Save/RestoreState")
{
	SVGVector* ffm[5];	
	OP_STATUS err = OpStatus::OK;
	int i = 0;
	
	iterate (ffmname) from FontFamilies
	{
		ffm[i] = OP_NEW(SVGVector, (SVGOBJECT_STRING, SVGVECTORSEPARATOR_COMMA));
		verify(ffm[i]);
		ffm[i]->OwnObjects(TRUE);
		err = g_svg_manager_impl->Parser()->ParseVector(ffmname,
														uni_strlen(ffmname),
														ffm[i]);
		verify(OpStatus::IsSuccess(err));
		i++;
	}
	
	state->SetFontFamily(ffm[0]);
	verify(OpStatus::IsSuccess(state->SaveState()));
	verify(state->GetFontFamily() == ffm[0]);
	
	state->SetFontFamily(ffm[1]);
	verify(OpStatus::IsSuccess(state->SaveState()));
	verify(state->GetFontFamily() == ffm[1]);	
	
	state->RestoreState();
	verify(state->GetFontFamily() == ffm[1]);
	
	state->RestoreState();
	verify(state->GetFontFamily() == ffm[0]);
}
finally
{
	for(int i2 = 0; i2 < 5; i2++)
		OP_DELETE(ffm[i2]);
}

setup
{
	state = OP_NEW(SVGCanvasState, ());
}

exit
{
	OP_DELETE(state);
}
