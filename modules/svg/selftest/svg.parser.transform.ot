/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2005 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/
group "svg.parser.transform";

require SVG_SUPPORT;
require init;

include "modules/svg/src/svgpch.h";
include "modules/svg/src/SVGAttributeParser.h";
include "modules/svg/src/SVGVector.h";
include "modules/svg/src/SVGMatrix.h";
include "modules/svg/src/SVGTransform.h";

language c++;

test("MatrixComma")
{
    const uni_char* test = UNI_L("matrix(1,2,3,4,5,6)");
    SVGVector vector(SVGOBJECT_TRANSFORM);
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseVector(test, uni_strlen(test), &vector)));

    verify(vector.GetCount() == 1);
    verify(vector.Get(0));

    SVGTransform *transform = static_cast<SVGTransform *>(vector.Get(0));
    verify(transform->GetTransformType() == SVGTRANSFORM_MATRIX);

    SVGMatrix matrix;
    transform->GetMatrix(matrix);

    verify(matrix[0] == 1.0);
    verify(matrix[1] == 2.0);
    verify(matrix[2] == 3.0);
    verify(matrix[3] == 4.0);
    verify(matrix[4] == 5.0);
    verify(matrix[5] == 6.0);
}

test("MatrixSpace")
{
    const uni_char* test = UNI_L("matrix(0.84 0 0 0.84 100 80)");
    SVGVector vector(SVGOBJECT_TRANSFORM);
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseVector(test, uni_strlen(test), &vector)));

    verify(vector.GetCount() == 1);
    verify(vector.Get(0));

    SVGTransform *transform = static_cast<SVGTransform *>(vector.Get(0));
    verify(transform->GetTransformType() == SVGTRANSFORM_MATRIX);

    SVGMatrix matrix;
    transform->GetMatrix(matrix);

    verify(matrix[0] == 0.84);
    verify(matrix[1] == 0.0);
    verify(matrix[2] == 0.0);
    verify(matrix[3] == 0.84);
    verify(matrix[4] == 100.0);
    verify(matrix[5] == 80.0);
}

test("MatrixCommaSpace")
{
    const uni_char* test = UNI_L("matrix(0.84, 0, 0, 0.84, 100, 80)");
    SVGVector vector(SVGOBJECT_TRANSFORM);
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseVector(test, uni_strlen(test), &vector)));

    verify(vector.GetCount() == 1);
    verify(vector.Get(0));

    SVGTransform *transform = static_cast<SVGTransform *>(vector.Get(0));
    verify(transform->GetTransformType() == SVGTRANSFORM_MATRIX);

    SVGMatrix matrix;
    transform->GetMatrix(matrix);

    verify(matrix[0] == 0.84);
    verify(matrix[1] == 0.0);
    verify(matrix[2] == 0.0);
    verify(matrix[3] == 0.84);
    verify(matrix[4] == 100.0);
    verify(matrix[5] == 80.0);
}

test("TransformList")
{
    const uni_char* test = UNI_L("matrix(0.666667 0 0 0.666667 -8.66667 110.667), scale(0.5 0.5) , translate(-800 -7.61232) ,skewX(1) skewY(29.2)  rotate(12) rotate(45.34 23 23) rotate(23.1,23,23)");
    SVGVector vector(SVGOBJECT_TRANSFORM);
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseVector(test, uni_strlen(test), &vector)));
    verify(vector.GetCount() == 8);
}

test("TransformListII")
{
    const uni_char* test = UNI_L("translate(0,300) scale(0.05)\" and a bunch of other attributes");
    SVGVector vector(SVGOBJECT_TRANSFORM);

	size_t len = 28;
    verify(OpStatus::IsSuccess(SVGAttributeParser::ParseVector(test, len, &vector)));
    verify(vector.GetCount() == 2);
}

test("animateTransformValueScaleShort")
{
    const uni_char* test = UNI_L("0.2");
    SVGTransform *transform;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParseTransformFromToByValue(test, uni_strlen(test), SVGTRANSFORM_SCALE, &transform)));
    verify(transform->GetTransformType() == SVGTRANSFORM_SCALE);

    SVGMatrix matrix;
    transform->GetMatrix(matrix);
    verify(matrix[0] == 0.2);
    verify(matrix[1] == 0.0);
    verify(matrix[2] == 0.0);
    verify(matrix[3] == 0.2);
    verify(matrix[4] == 0.0);
    verify(matrix[5] == 0.0);

	OP_DELETE(transform);
}

test("animateTransformValueScale")
{
	const uni_char* test = UNI_L("0.2, 0.3");
    SVGTransform *transform;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParseTransformFromToByValue(test, uni_strlen(test), SVGTRANSFORM_SCALE, &transform)));
    verify(transform->GetTransformType() == SVGTRANSFORM_SCALE);

    SVGMatrix matrix;
    transform->GetMatrix(matrix);
    verify(matrix[0] == 0.2);
    verify(matrix[1] == 0.0);
    verify(matrix[2] == 0.0);
    verify(matrix[3] == 0.3);
    verify(matrix[4] == 0.0);
    verify(matrix[5] == 0.0);

	OP_DELETE(transform);
}

