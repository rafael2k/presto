/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2007 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/
group "svg.parser.length";

require SVG_SUPPORT;
require init;

include "modules/svg/src/svgpch.h";
include "modules/svg/src/SVGAttributeParser.h";
include "modules/svg/src/SVGValue.h";
include "modules/svg/src/SVGRect.h";
include "modules/svg/src/SVGFontSize.h";
include "modules/svg/src/parser/svglengthparser.h";

language c++;

table ClipShapeTbl(const char*,double,double,double,double)
{
	{"auto", 0, 0, 0, 0},
	{"rect(auto auto auto auto)", 0, 0, 0, 0},
	{"rect(auto 10px 90px 12px)", 0, 10, 90, 12},
	{"rect(42  , auto 84px , auto)", 42, 0, 84, 0},
	{"rect(42 42 42 42)", 42, 42, 42, 42}
}

foreach (cstr, x_val, y_val, width_val, height_val) from ClipShapeTbl
{
	test("Clip shape '" cstr "'")
	{
		const uni_char* test = UNI_L(cstr);
		SVGRectObject* cshape = NULL;
		verify(OpStatus::IsSuccess(SVGAttributeParser::ParseClipShape(test, uni_strlen(test),
																	  &cshape)));

		verify(cshape);
		verify(cshape->rect.x == SVGNumber(x_val));
		verify(cshape->rect.y == SVGNumber(y_val));
		verify(cshape->rect.width == SVGNumber(width_val));
		verify(cshape->rect.height == SVGNumber(height_val));
	}
	finally
	{
		OP_DELETE(cshape);
	}
}

table CoordinatePairTbl(const char*,double,int,double,int)
{
	{"42, 42", 42, CSS_NUMBER, 42, CSS_NUMBER},
	{"42px, 42", 42, CSS_PX, 42, CSS_NUMBER},
	{"42  42em", 42, CSS_NUMBER, 42, CSS_EM},
	{"42ex 42em", 42, CSS_EX, 42, CSS_EM},
	{"42rem, 42em", 42, CSS_REM, 42, CSS_EM},
	{"42in, 42cm", 42, CSS_IN, 42, CSS_CM},
	{"42%  ,42pc", 42, CSS_PERCENTAGE, 42, CSS_PC},
	{"42mm , 42pt", 42, CSS_MM, 42, CSS_PT}
}

foreach (cstr, x_val, x_unit, y_val, y_unit) from CoordinatePairTbl
{
	test("Coordinate pair '" cstr "'")
	{
		const uni_char* test = UNI_L(cstr);
		SVGLength x, y;
		SVGLengthParser lenparser;
		verify(OpStatus::IsSuccess(lenparser.ParseCoordinatePair(test, uni_strlen(test), x, y)));

		verify(x.GetScalar() == SVGNumber(x_val));
		verify(x.GetUnit() == x_unit);

		verify(y.GetScalar() == SVGNumber(y_val));
		verify(y.GetUnit() == y_unit);
	}
}

table BaselineShiftEnums
{
	{"baseline", SVGBaselineShift::SVGBASELINESHIFT_BASELINE},
	{"super", SVGBaselineShift::SVGBASELINESHIFT_SUPER},
	{"sub", SVGBaselineShift::SVGBASELINESHIFT_SUB}
}

table BaselineShiftValues
{
	{"-70%", SVGBaselineShift::SVGBASELINESHIFT_VALUE, -70, CSS_PERCENTAGE },
	{"10", SVGBaselineShift::SVGBASELINESHIFT_VALUE, 10, CSS_NUMBER }
}

foreach (cstr, blstype) from BaselineShiftEnums
{
	test("Parse a baseline shift '" cstr "'")
	{
		const uni_char* test = UNI_L(cstr);
		SVGBaselineShiftObject* blso = NULL;
		verify(OpStatus::IsSuccess(SVGAttributeParser::ParseBaselineShift(test, uni_strlen(test), &blso)));
		verify(blso->GetShiftType() == blstype);
	}
	finally
	{
		OP_DELETE(blso);
	}
}

foreach (cstr, blstype, blsval, blsunit) from BaselineShiftValues
{
	test("Parse a baseline shift '" cstr "'")
	{
		const uni_char* test = UNI_L(cstr);
		SVGBaselineShiftObject* blso = NULL;
		verify(OpStatus::IsSuccess(SVGAttributeParser::ParseBaselineShift(test, uni_strlen(test), &blso)));
		verify(blso->GetShiftType() == blstype);
		verify(blso->GetValue().GetScalar() == SVGNumber(blsval));
		verify(blso->GetValue().GetUnit() == blsunit);
	}
	finally
	{
		OP_DELETE(blso);
	}
}

test("Parse length fontsize")
{
	const uni_char* test = UNI_L("12px");
	SVGFontSizeObject* font_size;
	OP_STATUS status = SVGAttributeParser::ParseFontSize(test, uni_strlen(test), &font_size);

	verify(status == OpStatus::OK);
	verify(font_size != NULL);
	verify(font_size->font_size.Mode() == SVGFontSize::MODE_LENGTH);
	const SVGLength& length = font_size->font_size.Length();
	verify(length.GetScalar() == 12.0);
	verify(length.GetUnit() == CSS_PX);
}
finally
{
	OP_DELETE(font_size);
}

test("Parse absolute fontsize")
{
	const uni_char* test = UNI_L("xx-small");
	SVGFontSizeObject* font_size;
	OP_STATUS status = SVGAttributeParser::ParseFontSize(test, uni_strlen(test), &font_size);

	verify(status == OpStatus::OK);
	verify(font_size != NULL);
	verify(font_size->font_size.Mode() == SVGFontSize::MODE_ABSOLUTE);
	verify(font_size->font_size.AbsoluteFontSize() == SVGABSOLUTEFONTSIZE_XXSMALL);
}
finally
{
	OP_DELETE(font_size);
}

test("Parse relative fontsize")
{
	const uni_char* test = UNI_L("smaller");
	SVGFontSizeObject* font_size;
	OP_STATUS status = SVGAttributeParser::ParseFontSize(test, uni_strlen(test), &font_size);

	verify(status == OpStatus::OK);
	verify(font_size != NULL);
	verify(font_size->font_size.Mode() == SVGFontSize::MODE_RELATIVE);
	verify(font_size->font_size.RelativeFontSize() == SVGRELATIVEFONTSIZE_SMALLER);
}
finally
{
	OP_DELETE(font_size);
}
