/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2005 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/
group "svg.parser.paint";

require SVG_SUPPORT;
require init;

include "modules/svg/src/svgpch.h";
include "modules/svg/src/SVGAttributeParser.h";
include "modules/svg/src/SVGCanvasState.h";
include "modules/svg/src/SVGPaint.h";

language c++;

table ColorValsRGB(const char* cstr, UINT8, UINT8, UINT8)
{
	{"#FF3300", 0xff, 0x33, 0x00},
	{"FF3300", 0xff, 0x33, 0x00},
	{"#fff", 0xff, 0xff, 0xff},
	{"eee", 0xee, 0xee, 0xee},
	{"e4e", 0xee, 0x44, 0xee},
	{"64e", 0x66, 0x44, 0xee},
	{"tan", 0xd2, 0xb4, 0x8c},
	{"white", 0xff, 0xff, 0xff},
	{"cadetblue", 0x5f, 0x9e, 0xa0},
	{"rgb(127,127,127)", 0x7f, 0x7f, 0x7f},
	{"rgb(255,255,255)", 0xff, 0xff, 0xff},
	{"rgb(0,0,0)", 0x00, 0x00, 0x00},
	{"rgb(255,0,0)", 0xff, 0x00, 0x00},
	{"#2d8700", 0x2d, 0x87, 0x00},
	{"rgb(50%,50%,50%)", 0x7f, 0x7f, 0x7f},
	{"rgb( 127 , 127 , 127 )", 0x7f, 0x7f, 0x7f}
}

foreach (cstr, col_r, col_g, col_b) from ColorValsRGB
{
	test("RGBColor='" cstr "'")
	{
		const uni_char* test = UNI_L(cstr);
		SVGColorObject* cval = NULL;
		verify(OpStatus::IsSuccess(SVGAttributeParser::ParseColorValue(test, uni_strlen(test), &cval)));
		verify(cval->GetColor().GetColorType() == SVGColor::SVGCOLOR_RGBCOLOR);

		UINT32 c = cval->GetColor().GetRGBColor();
		verify(GetSVGColorRValue(c) == col_r);
		verify(GetSVGColorGValue(c) == col_g);
		verify(GetSVGColorBValue(c) == col_b);
	}
	finally
	{
		OP_DELETE(cval);
	}
}

foreach (cstr, col_r, col_g, col_b) from ColorValsRGB
{
	test("Paint='" cstr "'")
	{
		const uni_char* test = UNI_L(cstr);
		SVGPaintObject* paint_object = NULL;
		verify(OpStatus::IsSuccess(SVGAttributeParser::ParsePaint(test, uni_strlen(test), &paint_object)));
		verify(paint_object->GetPaint().GetPaintType() == SVGPaint::RGBCOLOR);

		UINT32 c = paint_object->GetPaint().GetRGBColor();
		verify(GetSVGColorRValue(c) == col_r);
		verify(GetSVGColorGValue(c) == col_g);
		verify(GetSVGColorBValue(c) == col_b);
	}
	finally
	{
		OP_DELETE(paint_object);
	}
}

table PaintURLs(const char* cstr, const char *uri, SVGPaint::PaintType)
{
	{ "url(#apa)", "#apa", SVGPaint::URI },
	{ "url(\"#apa\")", "#apa", SVGPaint::URI },
}

test("Parse paint #ff0080")
{
	const uni_char* test = UNI_L("#ff0080");
	SVGPaintObject p(SVGPaint::RGBCOLOR);
	p.GetPaint().SetRGBColor(0xff, 0x00, 0x80);
	SVGPaintObject* parsedp = NULL;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParsePaint(test, uni_strlen(test), &parsedp)));
	verify(parsedp->GetPaint().IsEqual(p.GetPaint()));
}
finally
{
	OP_DELETE(parsedp);
}

test("Parse paint currentColor")
{
	const uni_char* test = UNI_L("currentColor");
	SVGPaintObject p(SVGPaint::CURRENT_COLOR);
	SVGPaintObject* parsedp = NULL;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParsePaint(test, uni_strlen(test), &parsedp)));
	verify(parsedp->GetPaint().GetPaintType() == p.GetPaint().GetPaintType());
}
finally
{
	OP_DELETE(parsedp);
}

test("Parse paint none")
{
	const uni_char* test = UNI_L("none");
	SVGPaintObject p(SVGPaint::NONE);
	SVGPaintObject* parsedp = NULL;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParsePaint(test, uni_strlen(test), &parsedp)));
	verify(parsedp->GetPaint().IsEqual(p.GetPaint()));
}
finally
{
	OP_DELETE(parsedp);
}

test("Parse paint url(#uri)")
{
	const uni_char* test = UNI_L("url(#_u%32ri_[asd]f)");
	SVGPaintObject p(SVGPaint::URI);
	const uni_char* cmp = UNI_L("#_u%32ri_[asd]f");
	p.GetPaint().SetURI(cmp, uni_strlen(cmp));
	SVGPaintObject* parsedp = NULL;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParsePaint(test, uni_strlen(test), &parsedp)));
	verify(parsedp->GetPaint().IsEqual(p.GetPaint()));
}
finally
{
	OP_DELETE(parsedp);
}

test("Parse paint url(#uri) none")
{
	const uni_char* test = UNI_L("url(#uri) none");
	SVGPaintObject p(SVGPaint::URI_NONE);
	const uni_char* cmp = UNI_L("#uri");
	p.GetPaint().SetURI(cmp, uni_strlen(cmp));
	SVGPaintObject* parsedp = NULL;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParsePaint(test, uni_strlen(test), &parsedp)));
	verify(parsedp->GetPaint().IsEqual(p.GetPaint()));
}
finally
{
	OP_DELETE(parsedp);
}

test("Parse paint url(#uri) currentColor")
{
	const uni_char* test = UNI_L("url(#uri) currentColor");
	SVGPaintObject p(SVGPaint::URI_CURRENT_COLOR);
	p.GetPaint().SetURI(UNI_L("#uri"), 4);
	SVGPaintObject* parsedp = NULL;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParsePaint(test, uni_strlen(test), &parsedp)));
	verify(parsedp->GetPaint().IsEqual(p.GetPaint()));
}
finally
{
	OP_DELETE(parsedp);
}

test("Parse paint url(#aabbcc) #aabbcc")
{
	const uni_char* test = UNI_L("url(#aabbcc) #aabbcc");
	SVGPaintObject p(SVGPaint::URI_RGBCOLOR);
	p.GetPaint().SetURI(UNI_L("#aabbcc"), 7);
	p.GetPaint().SetRGBColor(0xaa, 0xbb, 0xcc);
	SVGPaintObject* parsedp = NULL;
	verify(OpStatus::IsSuccess(SVGAttributeParser::ParsePaint(test, uni_strlen(test), &parsedp)));
	verify(parsedp->GetPaint().IsEqual(p.GetPaint()));
}
finally
{
	OP_DELETE(parsedp);
}
