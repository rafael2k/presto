group "svg.text.selection";

require SVG_SUPPORT;
require init;

include "modules/svg/src/svgpch.h";
include "modules/svg/svg_dominterfaces.h";
include "modules/svg/src/SVGDocumentContext.h";
include "modules/svg/src/SVGTextSelection.h";
include "modules/svg/src/AttrValueStore.h";

language c++;

xml {
//! <?xml version="1.0"?>
//! <svg xmlns="http://www.w3.org/2000/svg" version="1.1">
//!   <desc>selectSubString with tspan testcase</desc>
//!   <text x="5" y="50">FAIL
//!     <tspan id="t">PASS</tspan>
//!   </text>
//! </svg>
};

test("Test selectSubString")
	require SVG_SUPPORT_TEXTSELECTION;
	require SVG_FULL_11;
{
	HTML_Element* ts = find_element("tspan", 1);
	HTML_Element* t = find_element("text", 1);
	verify(ts);
	verify(t);
	verify(OpStatus::IsSuccess(SVGDOM::SelectSubString(ts, state.doc, 0, 4)));
	
	SVGDocumentContext* doc_ctx = AttrValueStore::GetSVGDocumentContext(ts);
	verify(doc_ctx);
	
	TempBuffer buf;
	verify(4 == doc_ctx->GetTextSelection().GetText(&buf));
	
	verify(uni_str_eq("PASS", buf.GetStorage()));

	buf.Clear();
	
	verify(OpStatus::IsSuccess(SVGDOM::SelectSubString(t, state.doc, 0, 4)));
	verify(4 == doc_ctx->GetTextSelection().GetText(&buf));
	
	verify(uni_str_eq("FAIL", buf.GetStorage()));
}

xml {
//! <?xml version="1.0"?>
//! <svg xmlns="http://www.w3.org/2000/svg" version="1.1">
//!   <desc>Test multiline text selection</desc>
//!   <text>
//!     <tspan x="5" y="40">these lines of text are achieved by using one</tspan>
//!     <tspan x="5" y="65">'tspan' per line, all contained within the same</tspan>
//!     <tspan x="5" y="90">'text' element, so all text should be selectable</tspan>
//!   </text>
//! </svg>
};

test("select multiple lines")
	require SVG_SUPPORT_TEXTSELECTION;
	require SVG_FULL_11;
{
	HTML_Element* text = find_element("text");
	verify(text);
	// logical offsets - corresponds to 3 chars from start, select 50 chars
	verify(OpStatus::IsSuccess(SVGDOM::SelectSubString(text, state.doc, 8, 54)));
	
	SVGDocumentContext* doc_ctx = AttrValueStore::GetSVGDocumentContext(text);
	verify(doc_ctx);
	
	TempBuffer buf;
	const int n = doc_ctx->GetTextSelection().GetText(&buf);
	verify(50 == n);

	verify(uni_str_eq("se lines of text are achieved by using one 'tspan'", buf.GetStorage()));

	buf.Clear();
}

xml {
//! <?xml version="1.0"?>
//! <svg xmlns="http://www.w3.org/2000/svg" version="1.1">
//!   <desc>selectSubString with tspan testcase</desc>
//!   <text x="5" y="50">FAIL
//!     <tspan id="t">PASS</tspan>
//!   </text>
//! </svg>
};

test("Test text select (manager)")
	require SVG_SUPPORT_TEXTSELECTION;
	require SVG_FULL_11;
{
	HTML_Element* ts = find_element("tspan", 1);
	HTML_Element* t = find_element("text", 1);
	verify(ts);
	verify(t);
	verify(OpStatus::IsSuccess(SVGDOM::SelectSubString(ts, state.doc, 0, 4)));
	
	unsigned length = 0;
	verify(g_svg_manager->GetTextSelectionLength(ts, length));
	verify(length == 4);

	TempBuffer buf;
	verify(g_svg_manager->GetTextSelection(ts, buf));
	verify(uni_str_eq("PASS", buf.GetStorage()));

	g_svg_manager->ClearTextSelection(ts);
	verify(!g_svg_manager->GetTextSelectionLength(ts, length));
	verify(length == 4);
}
