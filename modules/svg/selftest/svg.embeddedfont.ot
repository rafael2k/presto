/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2005 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/
group "svg.embeddedfont";

require SVG_SUPPORT;
require SVG_SUPPORT_EMBEDDED_FONTS;
require undefined HAVE_NO_OPMEMFILE;
require init;

include "modules/svg/src/svgpch.h";
include "modules/svg/src/SVGEmbeddedSystemFont.h";
include "modules/svg/src/SVGFontImpl.h";
include "modules/util/opfile/opmemfile.h";
include "modules/svg/src/SVGManagerImpl.h";

language c++;

global
{
	SVGEmbeddedFontData* emb_font;
	SVGFontImpl* test_font;
};

test("Setup")
{
// 00000000  47 12 00 01 07 6d 00 00  fe 1d 00 00 00 00 08 00  |G....m..þ.......|
// 00000010  00 00 00 13 42 69 74 73  74 72 65 61 6d 20 56 65  |....Bitstream Ve|
// 00000020  72 61 20 53 61 6e 73 00  00 00 05 52 6f 6d 61 6e  |ra Sans....Roman|
// 00000030  00 02 09 92 00 00 00 08  00 20 02 8b 00 00 09 91  |......... ......|
// 00000040  09 92 00 00 00 50 00 21  03 35 00 00 00 00 01 35  |.....P.!.5.....5|
// 00000050  00 fe 00 01 02 00 00 fe  00 01 02 00 00 00 00 01  |.þ.....þ........|
// 00000060  01 35 00 00 00 01 01 35  00 fe 00 00 01 35 05 d5  |.5.....5.þ...5.Õ|
// 00000070  00 01 02 00 05 d5 00 01  02 00 03 46 00 01 01 ec  |.....Õ.....F...ì|
// 00000080  01 e1 00 01 01 4a 01 e1  00 01 01 35 03 46 00 01  |.á...J.á...5.F..|
// 00000090  01 35 05 d5 09 91

	SVGFontFile* font_file = NULL;
	OpMemFile* mem_file = NULL;
	emb_font = NULL;
	test_font = NULL;

	mem_file = OpMemFile::Create((const unsigned char*)
		"\x47\x12\x00\x01\x07\x6d\x00\x00\xfe\x1d\x00\x00\x00\x00\x08\x00"
		"\x00\x00\x00\x13\x42\x69\x74\x73\x74\x72\x65\x61\x6d\x20\x56\x65"
		"\x72\x61\x20\x53\x61\x6e\x73\x00\x00\x00\x05\x52\x6f\x6d\x61\x6e"
		"\x00\x02\x09\x92\x00\x00\x00\x08\x00\x20\x02\x8b\x00\x00\x09\x91"
		"\x09\x92\x00\x00\x00\x50\x00\x21\x03\x35\x00\x00\x00\x00\x01\x35"
		"\x00\xfe\x00\x01\x02\x00\x00\xfe\x00\x01\x02\x00\x00\x00\x00\x01"
		"\x01\x35\x00\x00\x00\x01\x01\x35\x00\xfe\x00\x00\x01\x35\x05\xd5"
		"\x00\x01\x02\x00\x05\xd5\x00\x01\x02\x00\x03\x46\x00\x01\x01\xec"
		"\x01\xe1\x00\x01\x01\x4a\x01\xe1\x00\x01\x01\x35\x03\x46\x00\x01"
		"\x01\x35\x05\xd5\x09\x91", 150);
	verify(mem_file);

	font_file = OP_NEW(SVGFontFile, (mem_file));
	verify(font_file);
	mem_file = NULL; // Owned by font_file

	emb_font = OP_NEW(SVGEmbeddedFontData, ());
	verify(emb_font);

	OP_STATUS status = emb_font->Load(font_file);
	if (OpStatus::IsSuccess(status))
	{
		font_file = NULL; // The font now owns the file
	}
	verify(OpStatus::IsSuccess(status));

	test_font = OP_NEW(SVGFontImpl, (emb_font, 16));
	verify(test_font);
}
finally
{
	OP_DELETE(mem_file);
	OP_DELETE(font_file);
}

test("Font metrics")
	require success "Setup";
{
	verify(test_font->Ascent() == 1901 * 16 / 2048);
	verify(test_font->Descent() == 483 * 16 / 2048);
	verify(test_font->Height() == 17);
}

test("StringWidth")
	require success "Setup";
{
	verify(test_font->StringWidth(UNI_L("! ! !"), 5) == (3*821 + 2*651)*16/2048);
}

subtest VerifySegment(PathSegListIterator* iter, unsigned type, int x, int y)
{
	const SVGPathSeg* pseg = iter->GetNext();
	verify(pseg);
	verify(pseg->info.type == type);
	verify(pseg->x.Close(SVGNumber(x) * 16 / 2048));
	verify(pseg->y.Close(SVGNumber(y) * 16 / 2048));
}

test("GetOutline")
	require success "Setup";
{
	UINT32 io_pos = 0;
	SVGNumber advance;
	SVGPath* glyph_outline = NULL;
	OP_STATUS status = test_font->GetOutline(UNI_L("!"), 1, io_pos, 0,
											 TRUE /* horizontal */,
											 advance, &glyph_outline);
	verify(OpStatus::IsSuccess(status));
	verify(io_pos == 1); // Should have consumed the char
	verify(advance.Close(SVGNumber(821) * 16 / 2048));

	OpBpath* path = static_cast<OpBpath*>(glyph_outline);

	// Verify that the path is correct
	OpAutoPtr<PathSegListIterator> iter(path->GetPathIterator(FALSE));
	verify(iter.get());

	// Expected path:
	// M 309,254 L 512,254 L 512,0 L 309,0 L 309,254
	// M 309,1493 L 512,1493 L 512,838 L 492,481 L 330,481 L 309,838 L 309,1493

	verify(VerifySegment(iter.get(), SVGPathSeg::SVGP_MOVETO_ABS, 309, 254));
	verify(VerifySegment(iter.get(), SVGPathSeg::SVGP_LINETO_ABS, 512, 254));
	verify(VerifySegment(iter.get(), SVGPathSeg::SVGP_LINETO_ABS, 512, 0));
	verify(VerifySegment(iter.get(), SVGPathSeg::SVGP_LINETO_ABS, 309, 0));
	verify(VerifySegment(iter.get(), SVGPathSeg::SVGP_LINETO_ABS, 309, 254));

	verify(VerifySegment(iter.get(), SVGPathSeg::SVGP_MOVETO_ABS, 309, 1493));
	verify(VerifySegment(iter.get(), SVGPathSeg::SVGP_LINETO_ABS, 512, 1493));
	verify(VerifySegment(iter.get(), SVGPathSeg::SVGP_LINETO_ABS, 512, 838));
	verify(VerifySegment(iter.get(), SVGPathSeg::SVGP_LINETO_ABS, 492, 481));
	verify(VerifySegment(iter.get(), SVGPathSeg::SVGP_LINETO_ABS, 330, 481));
	verify(VerifySegment(iter.get(), SVGPathSeg::SVGP_LINETO_ABS, 309, 838));
	verify(VerifySegment(iter.get(), SVGPathSeg::SVGP_LINETO_ABS, 309, 1493));

	verify(iter->GetNext() == NULL);
}
finally
{
	OP_DELETE(glyph_outline);
}

test("GetMatchingSystemFont")
{
	OpFont* font = NULL;
	const uni_char* str = UNI_L("abc");
	UINT32 len = 3;
	UINT32 iostrpos = 0;
	FontAtt fontatt;
	fontatt.SetHeight(50);
	fontatt.SetFontNumber(styleManager->GetFontNumber(UNI_L("serif")));
	SVGEmbeddedFontData* emb_font = g_svg_manager_impl->GetMatchingSystemFont(fontatt);
	verify(emb_font);
	font = OP_NEW(SVGFontImpl, (emb_font, fontatt.GetSize()));
	if(font)
	{
		SVGNumber adv;
		OP_STATUS err = font->GetOutline(str, len, iostrpos, 0, FALSE, adv, NULL);
		if (err == OpStatus::ERR_NOT_SUPPORTED)
		{
			output("(CreateFont must return an OpFont capable of getting outlines when the must_have_getoutline flag is set.)");
		}

		verify(err != OpStatus::ERR_NOT_SUPPORTED);
	}
}
finally
{
	OP_DELETE(font);
}

exit
{
	OP_DELETE(test_font);
}
