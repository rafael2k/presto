// svgtext.ot
group "svg.text";

require SVG_SUPPORT;
require SVG_DOM;
require SVG_FULL_11;
require init;

include "modules/svg/src/svgpch.h";
include "modules/display/vis_dev.h";
include "modules/svg/src/SVGManagerImpl.h";
include "modules/svg/src/AttrValueStore.h";
include "modules/svg/src/SVGImageImpl.h";
include "modules/doc/frm_doc.h";

language ecmascript;

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
//!          "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-basic.dtd">
//! <svg xmlns="http://www.w3.org/2000/svg"
//!      xmlns:xlink="http://www.w3.org/1999/xlink" font-size="36" id="svgroot">
//!		<defs>
//!			<text id="treftext">Hello<text xml:space="preserve"> World</text></text>
//!			<path id="tpath" d="M150,130l100,-100Z"/>
//!		</defs>
//!		<text x="20" id="one" y="50">String to measure</text>
//!		<text x="20" id="two" y="150">123
//!			<tspan id="tspan" dx="40" dy="30" fill="red">456</tspan>
//!			789
//!		</text>
//!		<text x="20" id="three" y="200">  1    2    3    </text>
//!		<text x="20" id="four" y="240"><tref xlink:href="#treftext" x="10"/></text>
//!		<text id="five"><textPath xlink:href="#tpath">ABC</textPath></text>
//!		<rect id="charextent" x="0" y="0" width="0" height="0" stroke="red" fill="none"/>
//!		<line id="textlength" x1="0" y1="0" x2="0" y2="0" stroke="blue"/>
//! </svg>
};

test("Setup")
{
	do_test = function do_test(func, should_throw, code) {
		try	{
			func();
		} catch(e) {
			return (should_throw && e.code == code);
		}
		return !should_throw;
	}
}

test("Test getNumberOfChars DOM method")
{
	var elm = document.getElementById("one");
	verify(elm.getNumberOfChars() == 17);
	elm = document.getElementById("two");
	verify(elm.getNumberOfChars() == 11); // 9 characters and 2 white-spaces
	elm = document.getElementById("tspan");
	verify(elm.getNumberOfChars() == 3);
	elm = document.getElementById("three");
	verify(elm.getNumberOfChars() == 5);
	elm = document.getElementById("four");
	verify(elm.getNumberOfChars() == 11);
	elm = document.getElementById("five");
	verify(elm.getNumberOfChars() == 3);
}

test("Test getStartPositionOfChar DOM method")
	require success "Setup";
{
	var elm = document.getElementById("one");
	var pos = elm.getStartPositionOfChar(0);
	verify(pos.x == 20);
	verify(pos.y == 50);
	elm = document.getElementById("four");
	pos = elm.getStartPositionOfChar(0);
	verify(pos.x == 10);
	verify(pos.y == 240);
	verify(do_test(function() {
					   elm.getStartPositionOfChar(-4711);
				   }, true, DOMException.INDEX_SIZE_ERR));
	verify(do_test(function() {
					   elm.getStartPositionOfChar(4711);
				   }, true, DOMException.INDEX_SIZE_ERR));
}

test("Test getEndPositionOfChar DOM method")
	require success "Setup";
{
	function WithinEpsilon(x, y)
	{
		var epsilon = 0.00005; // close enough?
		return (x + epsilon >= y - epsilon &&
				x - epsilon <= y + epsilon);
	}
	var elm = document.getElementById("one");
	var p1 = elm.getEndPositionOfChar(0);
	var p2 = elm.getStartPositionOfChar(1);
	verify(WithinEpsilon(p1.x, p2.x));
	verify(WithinEpsilon(p1.y, p2.y));
	verify(do_test(function() {
					   elm.getEndPositionOfChar(-4711);
				   }, true, DOMException.INDEX_SIZE_ERR));
	verify(do_test(function() {
					   elm.getEndPositionOfChar(4711);
				   }, true, DOMException.INDEX_SIZE_ERR));
}

test("Test getComputedTextLength DOM method")
	manual "The blue line represents the measured length of the string. Does it look correct?";
	require success "Test getStartPositionOfChar DOM method";
{
	var elm = document.getElementById("one");
	var len = elm.getComputedTextLength();
	var sp = elm.getStartPositionOfChar(0);
	var line = document.getElementById("textlength");
	line.x1.baseVal.value = sp.x;
	line.y1.baseVal.value = sp.y + 5;
	line.x2.baseVal.value = sp.x + len;
	line.y2.baseVal.value = sp.y + 5;
}

test("Test getSubStringLength DOM method")
	require success "Setup";
{
	var elm = document.getElementById("two");
	verify(do_test(function() {
					   elm.getSubStringLength(-4711, 2);
				   }, true, DOMException.INDEX_SIZE_ERR));
	verify(do_test(function() {
					   elm.getSubStringLength(2, -4711);
				   }, true, DOMException.INDEX_SIZE_ERR));
	verify(do_test(function() {
					   elm.getSubStringLength(-2, -4711);
				   }, true, DOMException.INDEX_SIZE_ERR));
				   
	verify(elm.getSubStringLength(0, 10) == elm.getSubStringLength(0, 11));
}

test ("Test getExtentOfChar DOM method")
	require success "Setup";
	manual "Is the letter 'i' enclosed in a red rect?";
{
	var elm = document.getElementById("one");
	var bbox = elm.getExtentOfChar(3);
	var rect = document.getElementById("charextent");
	rect.x.baseVal.value = bbox.x;
	rect.y.baseVal.value = bbox.y;
	rect.width.baseVal.value = bbox.width;
	rect.height.baseVal.value = bbox.height;
	verify(do_test(function() {
					   elm.getExtentOfChar(-4711);
				   }, true, DOMException.INDEX_SIZE_ERR));
	verify(do_test(function() {
					   elm.getExtentOfChar(4711);
				   }, true, DOMException.INDEX_SIZE_ERR));
	verify(do_test(function() {
					   elm.getExtentOfChar(17);
				   }, true, DOMException.INDEX_SIZE_ERR));
}

test("Test getExtentOfChar DOM method #2") 
	manual "Is the number '7' enclosed in a red rect?";
{
	var elm = document.getElementById("two");
	var bbox = elm.getExtentOfChar(6);
	var rect = document.getElementById("charextent");
	rect.x.baseVal.value = bbox.x;
	rect.y.baseVal.value = bbox.y;
	rect.width.baseVal.value = bbox.width;
	rect.height.baseVal.value = bbox.height;
}

test("Test getRotationOfChar DOM method")
	require success "Setup";
{
	var elm = document.getElementById("five");
	verify(do_test(function() {
					   elm.getRotationOfChar(-4711);
				   }, true, DOMException.INDEX_SIZE_ERR));
	verify(do_test(function() {
					   elm.getRotationOfChar(4711);
				   }, true, DOMException.INDEX_SIZE_ERR));
	verify(elm.getRotationOfChar(1) == -45);
}

test("Test getCharNumAtPosition DOM method")
	disabled;
{
	var root = document.getElementById("svgroot");
	var elm = document.getElementById("one");
	var pos = root.createSVGPoint();
	pos.x = 22;
	pos.y = 50;
	verify(elm.getCharNumAtPosition(pos) == 0);

	pos.x = 4711;
	pos.y = -4711;
	verify(elm.getCharNumAtPosition(pos) == -1);
	
	var sp2 = elm.getStartPositionOfChar(2);
	pos.x = sp2.x;
	pos.y = sp2.y;
	verify(elm.getCharNumAtPosition(pos) == 2);

	// test borders of bbox
	var bbox = elm.getExtentOfChar(0);
	pos.x = bbox.x;
	pos.y = bbox.y;
	verify(elm.getCharNumAtPosition(pos) == 0);
	pos.x = bbox.x + bbox.width;
	pos.y = bbox.y + bbox.height;
	verify(elm.getCharNumAtPosition(pos) == 0);
}

test("Test selectSubString DOM method") 
	disabled;
	manual "Is the substring '1234' selected?";
	require success "Setup";
{
	var elm = document.getElementById("two");
	verify(do_test(function() {
					   elm.selectSubString(0, -4711);
				   }, true, DOMException.INDEX_SIZE_ERR));
	verify(do_test(function() {
					   elm.selectSubString(1, 4711);
				   }, false, DOMException.INDEX_SIZE_ERR));
	verify(do_test(function() {
					   elm.selectSubString(-1, 5);
				   }, true, DOMException.INDEX_SIZE_ERR));
	elm.selectSubString(0,4);
}

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
//!          "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-basic.dtd">
//! <svg id="svgroot" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="480px" height="360px">
//! 	<text id="myText" font-size="12px" x="50" y="30">
//!			<tspan id="one" x="50" dy="15">This is the first line.</tspan>
//!			<tspan id="two" x="50" dy="20">It is followed by the second line.</tspan>
//!			<tspan id="three" x="50" dy="20">The third line should also be clickable.</tspan>
//!		</text>
//! </svg>
}

test("Test click on tspan elements")
	language c++;
{
	HTML_Element* root = find_element("svg", 1);
	HTML_Element* target = find_element("tspan", 1);
	HTML_Element* found = NULL;
	
	verify(root != NULL);
	verify(target != NULL);

	int offsetx;
	int offsety;
	verify(OpBoolean::IS_TRUE == g_svg_manager->FindSVGElement(root, state.doc, 75, 39, &found, offsetx, offsety));
	verify(target == found);
	
	target = find_element("tspan", 2);
	verify(target != NULL);
	verify(OpBoolean::IS_TRUE == g_svg_manager->FindSVGElement(root, state.doc, 75, 59, &found, offsetx, offsety));
	verify(target == found);

	target = find_element("tspan", 3);
	verify(target != NULL);
	verify(OpBoolean::IS_TRUE == g_svg_manager->FindSVGElement(root, state.doc, 75, 79, &found, offsetx, offsety));
	verify(target == found);
}
