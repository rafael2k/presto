/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2005 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

// This test test the different calculation modes for an
// 'animate'-element

group "svg.animation.basic";

require init;
require SVG_SUPPORT;

include "modules/svg/src/animation/svganimationworkplace.h";

require SVG_SUPPORT_ANIMATION_LISTENER;

include "modules/svg/src/animation/svganimationselftest.h";
include "modules/svg/src/SVGManagerImpl.h";
include "modules/svg/src/SVGElementStateContext.h";

language c++;

global
{
	class MySelftestAnimationListener : public SVGSelftestAnimationListener
	{
		virtual void Passed() { ST_passed(); }
		virtual void Failed(const char *message) { ST_failed(message); }
	};

	class SelftestAttributeInfoPacker : public SVGElementContext
	{
	public:
		SelftestAttributeInfoPacker(HTML_Element* element) : SVGElementContext(element) {}

		static BOOL TestAttributePacking()
		{
			Markup::AttrType attr_name = Markup::SVGA_X;
			int ns_idx = NS_IDX_SVG;
			SVGAttributeType attr_type = SVGATTRIBUTE_XML;

			INT32 packed_info = PackAttributeInfo(attr_name, ns_idx, attr_type);
			UnpackAttributeInfo(packed_info, attr_name, ns_idx, attr_type);
			return
				(attr_name == Markup::SVGA_X) &&
				(ns_idx == NS_IDX_SVG) &&
				(attr_type == SVGATTRIBUTE_XML);
		}
	};

	SVGAnimationSelftest animation_selftest;
	MySelftestAnimationListener listener;
	OpTimer *timer;
}

setup
{
	g_svg_manager_impl->RegisterAnimationListener(&listener);
	listener.animation_selftest = &animation_selftest;
	timer = NULL;
}

exit
{
	g_svg_manager_impl->UnregisterAnimationListener(&listener);
	OP_DELETE(timer);
}

table LinearInterpolationFunctionSamples(double, double)
	read "animation/linear_interpolation_function_samples.txt";

table LinearInterpolationKeyTimesFunctionSamples(double, double)
	read "animation/linear_interpolation_function_key_times_samples.txt";

table LinearInterpolationKeySplinesFunctionSamples(double, double)
	read "animation/linear_interpolation_function_key_splines_samples.txt";

test("Setup rules (circles.svg)")
{
	SVGAnimationSelftest::Rule rule;

	animation_selftest.ClearRules();

	SVGAnimationSelftest::SetupIntervalRule(rule, "anim1", 0, 5000, 5000);
	animation_selftest.InsertRule(rule);

	SVGAnimationValue animation_value;
	animation_value.value_type = SVGAnimationValue::VALUE_NUMBER;

	iterate(w, q) from LinearInterpolationFunctionSamples
 	{
		animation_value.value.number = (float)q;
		SVGAnimationSelftest::SetupValueRule(rule, "anim1", (SVG_ANIMATION_INTERVAL_POSITION)w, animation_value);
		animation_selftest.InsertRule(rule);
	}

	SVGAnimationSelftest::SetupIntervalRule(rule, "anim2", 0, 5000, 5000);
	animation_selftest.InsertRule(rule);

	animation_value.value_type = SVGAnimationValue::VALUE_NUMBER;

	iterate(w, q) from LinearInterpolationKeyTimesFunctionSamples
 	{
		animation_value.value.number = (float)q;
		SVGAnimationSelftest::SetupValueRule(rule, "anim2", (SVG_ANIMATION_INTERVAL_POSITION)w, animation_value);
		animation_selftest.InsertRule(rule);
	}

	SVGAnimationSelftest::SetupIntervalRule(rule, "anim3", 0, 5000, 5000);
	animation_selftest.InsertRule(rule);

	animation_value.value_type = SVGAnimationValue::VALUE_NUMBER;

	iterate(w, q) from LinearInterpolationKeySplinesFunctionSamples
 	{
		animation_value.value.number = (float)q;
		SVGAnimationSelftest::SetupValueRule(rule, "anim3", (SVG_ANIMATION_INTERVAL_POSITION)w, animation_value);
		animation_selftest.InsertRule(rule);
	}
}

xml {
//! <?xml version="1.0" encoding="UTF-8"?>
//! <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
//!          "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-basic.dtd">
//! <svg xmlns="http://www.w3.org/2000/svg"
//!      xmlns:xlink="http://www.w3.org/1999/xlink"
//!      width="50" height="50" id="svgroot">
//!   <g fill-opacity="0.6" stroke="#fff" stroke-width="1">
//!     <circle cx="100" cy="50" r="30" fill="#00f" transform="translate(0,0)">
//!      <animate id="anim1" attributeName="r" values="50;10;50" begin="0s" dur="5s"/>
//!     </circle>
//!     <circle cx="100" cy="50" r="30" fill="#ff0" transform="translate(30,50)">
//!      <animate id="anim2" attributeName="r" values="50;10;50" keyTimes="0.0;0.2;1.0" begin="0s" dur="5s"/>
//!     </circle>
//!     <circle cx="100" cy="50" r="30" fill="#f0f"
//!                     transform="translate(-30,50)">
//!      <animate id="anim3" attributeName="r" values="50;10;50" keyTimes="0.0;0.2;1.0"
//!               keySplines="0.7 0.0 1.0 0.3; 0.0 0.7 0.3 1.0" begin="0s" dur="5s"/>
//!     </circle>
//!   </g>
//! </svg>
};

test("circles.svg") async;
{
	OP_DELETE(timer);
	timer = listener.StartListening();
}

test("Attribute packing")
{
	verify(SelftestAttributeInfoPacker::TestAttributePacking());
}
