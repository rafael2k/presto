<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>SVG Animation</title>
    <link rel="stylesheet" href="../../coredoc/coredoc.css" type="text/css" media="all"/>
    <style type="text/css">
      @import url("style.css");
      div.svgexample { white-space: pre; font-family: monospace; font-size: smaller;}
      div.code { white-space: pre; }
      pre { font-family: monospace; font-size: smaller; }
    </style>
  </head>
  <body>

  <h1>Animation submodule</h1>

  <h2>Known issues</h2>

  <h3>To-animations and freeze</h3>
  <a href="https://bugs.opera.com/show_bug.cgi?id=185982">bug #185982</a>

  Read comments in bug for more information.

  <h3>Animation of lengths</h3>

  Lengths relative to font-size (ex, em) are always resolved at the
  target attribute and the location of the respective element.

  However, percentage lengths is not resolved at all before animations
  since the resolved value is not defined in all cases (filters and
  primitiveUnits="userSpaceOnUse" is one example). For this reason we
  does not allow interpolating between percentage value lengths and
  other lengths in any context.

  <h3>from/to/by animations and animateTransform</h3>

  <p>
    The semantics for by-animations and to-animations with
    animateTransform are pretty loose.
  </p>

  <p>
    We made a try to follow the 1.2 specification as tightly as
    possible, but got into trouble. Things we don't do as the spec (currently) says is:
  </p>

  <ul>
    <li>We do not use the identity transform as underlying value. We
      use the actual base value instead. In this case the underlying
      value is a list of transforms, and interpolation will only work if
      there are ONLY ONE ITEM in the list and that item type is
      interpolatable with the type of the animateTransform.

      There is a reason we do not support interpolation with multiple
      transforms in the base value, even if they are of the same
      type. The reason is that we can't multiply them together, and
      preserve the transform information. (Compare two scales and two
      translates for instance)</li>
  </ul>

  <p>
    First, it does not define how to add to transforms together. An
    addition is required because a from/by-animation is defined as a
    values-animations with the values (from;from+by).
  </p>

  This addition is defined as adding the arguments together, so:

  <div class="svgexample">
    &lt;animateTransform attributeName="transform"
		      from="1" by="1" type="scale"/&gt;
  </div>

  is equal to:

  <div class="svgexample">
    &lt;animateTransform attributeName="transform"
		    values="1;2" type="scale"/&gt;
  </div>

  expanded: <tt>scale(1) + scale(1) = scale(2)</tt>.

  Translation, rotation, skewX/Y and matrix all work in the same
  way.

  This addition may give unexpected results when used for
  accumulation in scale transforms.

  The accumulation formula is:
  <pre>
    fi(t) = (f(d) * i) + f(t - (i*d))
  </pre>
  so we must have a multiplication and a addition operation.

  If we would define multiplication based on the addition we had
  above, we would get these results:

  scale(1.3) * 3 = scale(1.3) + scale(1.3) + scale(1.3) = scale(1.3 +
  1.3 + 1.3) = scale(3.9)

  However, accumulation is meant for building upon the latest
  repetition, and clearly not correct in this aspect.

  <h3>Animation events and scripting</h3>

  We use the DOM_EventsAPI for events. Through this API things like
  propagation of events and integration with scripting is
  handled. When scripting is disabled this API is not available and we
  have our own fallback solution. This solution does not get any
  testing (except by Dr. Hoffman who regulary reports issues with
  this) and tends to break easily.

</body>
</html>
