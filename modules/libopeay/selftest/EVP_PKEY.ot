/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2011-2012 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

/**
 * @file EVP_PKEY.ot
 *
 * Selftests for OpenSSL EVP_PKEY functionality.
 *
 * @author Alexei Khlebnikov <alexeik@opera.com>
 *
 */

group "libopeay.evp_pkey";
require CRYPTO_CERTIFICATE_VERIFICATION_USE_CORE_IMPLEMENTATION;

language c++;

include "modules/libopeay/openssl/cryptlib.h";

include "modules/libopeay/addon/libopeay_util.h";
include "modules/libopeay/openssl/bn.h";
include "modules/libopeay/openssl/dh.h";
include "modules/libopeay/openssl/dsa.h";
include "modules/libopeay/openssl/evp.h";
include "modules/libopeay/openssl/rsa.h";


global
{
}

test("EVP_PKEY_new, EVP_PKEY_free")
{
	verify(!ERR_peek_error());

	EVP_PKEY* pkey = EVP_PKEY_new();
	verify(pkey);
	EVP_PKEY_free(pkey);

	verify(!ERR_peek_error());
}
finally
{
	ERR_clear_error();
}

test("EVP_PKEY_CTX_new_id, EVP_PKEY_CTX_free")
{
	verify(!ERR_peek_error());

	EVP_PKEY_CTX* ctx = EVP_PKEY_CTX_new_id(EVP_PKEY_RSA, NULL);
	verify(ctx);
	EVP_PKEY_CTX_free(ctx);

	verify(!ERR_peek_error());
}
finally
{
	ERR_clear_error();
}

test("EVP_PKEY_type(new EVP_PKEY)")
{
	verify(!ERR_peek_error());

	EVP_PKEY* pkey = EVP_PKEY_new();
	verify(pkey);

	int pkey_type = pkey->type;
	int pkey_type_complicated = EVP_PKEY_type(pkey->type);
	int pkey_type_id = EVP_PKEY_id(pkey);
	EVP_PKEY_free(pkey);

	output("EVP_PKEY_type() == %s ... ", EVP_PKEY_type_name(pkey_type));
	verify(pkey_type == EVP_PKEY_NONE);
	verify(pkey_type == pkey_type_complicated);
	verify(pkey_type == pkey_type_id);

	verify(!ERR_peek_error());
}
finally
{
	ERR_clear_error();
}


table evp_pkey_types(const char* pkey_type_name, int pkey_type)
{
	// This list is taken from modules/libopeay/crypto/evp/evp.h.
	{ "EVP_PKEY_RSA",  EVP_PKEY_RSA  },
	{ "EVP_PKEY_RSA2", EVP_PKEY_RSA2 },
	{ "EVP_PKEY_DSA",  EVP_PKEY_DSA  },
	{ "EVP_PKEY_DSA1", EVP_PKEY_DSA1 },
	{ "EVP_PKEY_DSA2", EVP_PKEY_DSA2 },
	{ "EVP_PKEY_DSA3", EVP_PKEY_DSA3 },
	{ "EVP_PKEY_DSA4", EVP_PKEY_DSA4 },
	{ "EVP_PKEY_DH",   EVP_PKEY_DH   },
	// Elliptic curves are not supported so far.
	// { "EVP_PKEY_EC",   EVP_PKEY_EC   },
	{ "EVP_PKEY_HMAC", EVP_PKEY_HMAC }
}

subtest find_pkey_type(int pkey_type)
{
	verify(!ERR_peek_error());
	const EVP_PKEY_ASN1_METHOD* ameth = EVP_PKEY_asn1_find(NULL, pkey_type);
	verify(ameth);
	verify(!ERR_peek_error());
}
finally
{
	ERR_clear_error();
}

foreach (pkey_type_name, pkey_type) from evp_pkey_types
{
	test("EVP_PKEY_asn1_find, " pkey_type_name)
	{
		find_pkey_type(pkey_type);
	}
}

test("EVP_PKEY_asn1_find, EVP_PKEY_EC is not supported")
{
	verify(!ERR_peek_error());
	const EVP_PKEY_ASN1_METHOD* ameth = EVP_PKEY_asn1_find(NULL, EVP_PKEY_EC);
	verify(!ameth);
	verify(!ERR_peek_error());
}


// This test shouldn't cause memleaks.
test("EVP_PKEY_free deallocates assigned RSA key")
{
	// Variables that are accessed in finally {} block,
	// must be declared in the first lines of the test().
	RSA*      rsa  = NULL;
	EVP_PKEY* pkey = NULL;

	verify(!ERR_peek_error());

	rsa = RSA_new();
	verify(rsa);

	rsa->n    = BN_new();
	rsa->e    = BN_new();
	rsa->d    = BN_new();
	rsa->p    = BN_new();
	rsa->q    = BN_new();
	rsa->dmp1 = BN_new();
	rsa->iqmp = BN_new();

	pkey = EVP_PKEY_new();
	verify(pkey);

	int err = EVP_PKEY_assign_RSA(pkey, rsa);
	verify(err == 1);
	// Now pkey owns rsa and must deallocate it.
	rsa = NULL;

	verify(pkey->type == EVP_PKEY_RSA);

	verify(!ERR_peek_error());
}
finally
{
	EVP_PKEY_free(pkey);
	RSA_free(rsa);
	ERR_clear_error();
}

// This test shouldn't cause memleaks.
test("EVP_PKEY_free deallocates assigned DSA key")
{
	// Variables that are accessed in finally {} block,
	// must be declared in the first lines of the test().
	DSA*      dsa  = NULL;
	EVP_PKEY* pkey = NULL;

	verify(!ERR_peek_error());

	dsa = DSA_new();
	verify(dsa);

	dsa->p        = BN_new();
	dsa->q        = BN_new();
	dsa->g        = BN_new();
	dsa->pub_key  = BN_new();
	dsa->priv_key = BN_new();

	pkey = EVP_PKEY_new();
	verify(pkey);

	int err = EVP_PKEY_assign_DSA(pkey, dsa);
	verify(err == 1);
	// Now pkey owns dsa and must deallocate it.
	dsa = NULL;

	verify(pkey->type == EVP_PKEY_DSA);

	verify(!ERR_peek_error());
}
finally
{
	EVP_PKEY_free(pkey);
	DSA_free(dsa);
	ERR_clear_error();
}

// This test shouldn't cause memleaks.
test("EVP_PKEY_free deallocates assigned DH  key")
{
	// Variables that are accessed in finally {} block,
	// must be declared in the first lines of the test().
	DH*       dh   = NULL;
	EVP_PKEY* pkey = NULL;

	verify(!ERR_peek_error());

	dh = DH_new();
	verify(dh);

	dh->p        = BN_new();
	dh->q        = BN_new();
	dh->pub_key  = BN_new();
	dh->priv_key = BN_new();

	pkey = EVP_PKEY_new();
	verify(pkey);

	int err = EVP_PKEY_assign_DH(pkey, dh);
	verify(err == 1);
	// Now pkey owns dh and must deallocate it.
	dh = NULL;

	verify(pkey->type == EVP_PKEY_DH);

	verify(!ERR_peek_error());
}
finally
{
	EVP_PKEY_free(pkey);
	DH_free(dh);
	ERR_clear_error();
}


test("EVP_PKEY_keygen, EVP_PKEY_RSA")
{
	EVP_PKEY_CTX* ctx = NULL;
	EVP_PKEY*    pkey = NULL;
	verify(!ERR_peek_error());

	ctx = EVP_PKEY_CTX_new_id(EVP_PKEY_RSA, NULL);
	verify(ctx);

	int err = EVP_PKEY_keygen_init(ctx);
	verify(err > 0);

	// 512 bit key length is chosen for speed.
	err = EVP_PKEY_CTX_set_rsa_keygen_bits(ctx, 512);
	verify(err > 0);

	// Generate the key.
	err = EVP_PKEY_keygen(ctx, &pkey);
	verify(err > 0);
	verify(pkey);
	verify(pkey->ameth);

	verify(!ERR_peek_error());
}
finally
{
	EVP_PKEY_free(pkey);
	EVP_PKEY_CTX_free(ctx);
	ERR_clear_error();
}
