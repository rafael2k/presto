/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2011-2011 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

/**
 * @file evp_test.ot
 *
 * Tests from OpenSSL's crypto/evp/evp_test.c.
 *
 * @author Alexei Khlebnikov <alexeik@opera.com>
 *
 */

group "libopeay.evp_test";
require _SSL_SUPPORT_;
language c++;

include "modules/libopeay/openssl/cryptlib.h";
include "modules/libopeay/openssl/evp.h";
include "modules/util/opfile/opfile.h";

global
{

/* Written by Ben Laurie, 2001 */
/*
 * Copyright (c) 2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

static void hexdump(const char *title,const unsigned char *s,int l)
    {
    int n=0;

    output("%s",title);
    for( ; n < l ; ++n)
	{
	if((n%16) == 0)
	    output("\n%04x",n);
	output(" %02x",s[n]);
	}
    output("\n");
    }

static int convert(unsigned char *s)
    {
    unsigned char *d;

    for(d=s ; *s ; s+=2,++d)
	{
	unsigned int n;

	if(!s[1])
	    {
	    output("Odd number of hex digits!");
	    return 0;
	    }
	op_sscanf((char *)s,"%2x",&n);
	*d=(unsigned char)n;
	}
    return s-d;
    }

static char *sstrsep(char **string, const char *delim)
    {
    char isdelim[256]; /* ARRAY OK 2011-12-14 alexeik */
    char *token = *string;

    if (**string == 0)
        return NULL;

    op_memset(isdelim, 0, 256);
    isdelim[0] = 1;

    while (*delim)
        {
        isdelim[(unsigned char)(*delim)] = 1;
        delim++;
        }

    while ((**string) && !isdelim[(unsigned char)(**string)])
        {
        (*string)++;
        }

    if (**string)
        {
        **string = 0;
        (*string)++;
        }

    return token;
    }

static unsigned char *ustrsep(char **p,const char *sep)
    { return (unsigned char *)sstrsep(p,sep); }

static int test1(const EVP_CIPHER *c,const unsigned char *key,int kn,
		  const unsigned char *iv,int in,
		  const unsigned char *plaintext,int pn,
		  const unsigned char *ciphertext,int cn,
		  int encdec)
    {
    EVP_CIPHER_CTX ctx;
    unsigned char out[4096]; /* ARRAY OK 2011-12-14 alexeik */
    int outl,outl2;

    if ((size_t)pn + EVP_MAX_BLOCK_LENGTH - 1 >= sizeof(out))
        return 0;

    output("Testing cipher %s%s\n",EVP_CIPHER_name(c),
	   (encdec == 1 ? "(encrypt)" : (encdec == 0 ? "(decrypt)" : "(encrypt/decrypt)")));
    hexdump("Key",key,kn);
    if(in)
	hexdump("IV",iv,in);
    hexdump("Plaintext",plaintext,pn);
    hexdump("Ciphertext",ciphertext,cn);
    
    if(kn != c->key_len)
	{
	output("Key length doesn't match, got %d expected %lu\n",kn,
		(unsigned long)c->key_len);
	return 0;
	}
    EVP_CIPHER_CTX_init(&ctx);
    if (encdec != 0)
        {
	if(!EVP_EncryptInit_ex(&ctx,c,NULL,key,iv))
	    {
	    output("EncryptInit failed\n");
	    return 0;
	    }
	EVP_CIPHER_CTX_set_padding(&ctx,0);

	if(!EVP_EncryptUpdate(&ctx,out,&outl,plaintext,pn))
	    {
	    output("Encrypt failed\n");
	    return 0;
	    }
	if(!EVP_EncryptFinal_ex(&ctx,out+outl,&outl2))
	    {
	    output("EncryptFinal failed\n");
	    return 0;
	    }

	if(outl+outl2 != cn)
	    {
	    output("Ciphertext length mismatch got %d expected %d\n",
		    outl+outl2,cn);
	    return 0;
	    }

	if(op_memcmp(out,ciphertext,cn))
	    {
	    output("Ciphertext mismatch\n");
	    hexdump("Got",out,cn);
	    hexdump("Expected",ciphertext,cn);
	    return 0;
	    }
	}

    if (encdec <= 0)
        {
	if(!EVP_DecryptInit_ex(&ctx,c,NULL,key,iv))
	    {
	    output("DecryptInit failed\n");
	    return 0;
	    }
	EVP_CIPHER_CTX_set_padding(&ctx,0);

	if(!EVP_DecryptUpdate(&ctx,out,&outl,ciphertext,cn))
	    {
	    output("Decrypt failed\n");
	    return 0;
	    }
	if(!EVP_DecryptFinal_ex(&ctx,out+outl,&outl2))
	    {
	    output("DecryptFinal failed\n");
	    return 0;
	    }

	if(outl+outl2 != pn)
	    {
	    output("Plaintext length mismatch got %d expected %d\n",
		    outl+outl2,pn);
	    return 0;
	    }

	if(op_memcmp(out,plaintext,pn))
	    {
	    output("Plaintext mismatch\n");
	    hexdump("Got",out,pn);
	    hexdump("Expected",plaintext,pn);
	    return 0;
	    }
	}

    EVP_CIPHER_CTX_cleanup(&ctx);

    output("\n");
    
    return 1;
    }

static int test_cipher(const char *cipher,const unsigned char *key,int kn,
		       const unsigned char *iv,int in,
		       const unsigned char *plaintext,int pn,
		       const unsigned char *ciphertext,int cn,
		       int encdec)
    {
    const EVP_CIPHER *c;

    c=EVP_get_cipherbyname(cipher);
    if(!c)
	return 1; // If cipher is not found - skip it.

    return test1(c,key,kn,iv,in,plaintext,pn,ciphertext,cn,encdec);
    }

static int test_digest(const char *digest,
		       const unsigned char *plaintext,int pn,
		       const unsigned char *ciphertext, unsigned int cn)
    {
    const EVP_MD *d;
    EVP_MD_CTX ctx;
    unsigned char md[EVP_MAX_MD_SIZE]; /* ARRAY OK 2011-12-14 alexeik */
    unsigned int mdn;

    d=EVP_get_digestbyname(digest);
    if(!d)
	return 0;

    output("Testing digest %s\n",EVP_MD_name(d));
    hexdump("Plaintext",plaintext,pn);
    hexdump("Digest",ciphertext,cn);

    EVP_MD_CTX_init(&ctx);
    if(!EVP_DigestInit_ex(&ctx,d, NULL))
	{
	output("DigestInit failed\n");
	return 0;
	}
    if(!EVP_DigestUpdate(&ctx,plaintext,pn))
	{
	output("DigestUpdate failed\n");
	return 0;
	}
    if(!EVP_DigestFinal_ex(&ctx,md,&mdn))
	{
	output("DigestFinal failed\n");
	return 0;
	}
    EVP_MD_CTX_cleanup(&ctx);

    if(mdn != cn)
	{
	output("Digest length mismatch, got %d expected %d\n",mdn,cn);
	return 0;
	}

    if(op_memcmp(md,ciphertext,cn))
	{
	output("Digest mismatch\n");
	hexdump("Got",md,cn);
	hexdump("Expected",ciphertext,cn);
	return 0;
	}

    output("\n");

    EVP_MD_CTX_cleanup(&ctx);

    return 1;
    }

} // global


test("Modified evp_test.c from OpenSSL")
	file evptests_txt "evptests.txt";
{
	BOOL test_result = true;

	do
	{
		OpString filename;
		OP_STATUS status = filename.SetFromUTF8(evptests_txt);
		if (OpStatus::IsError(status))
		{
			test_result = false;
			break;
		}

		OpFile test_file;
		status = test_file.Construct(filename, OPFILE_ABSOLUTE_FOLDER);
		if (OpStatus::IsError(status))
		{
			test_result = false;
			break;
		}

		status = test_file.Open(OPFILE_READ);
		if (OpStatus::IsError(status))
		{
			test_result = false;
			break;
		}

		output("\n"); 

		OpString8 line_str8;

		while (!test_file.Eof())
		{
			char line[4096]; /* ARRAY OK 2011-12-14 alexeik */
			char *p;
			char *cipher;
			unsigned char *iv,*key,*plaintext,*ciphertext;
			int encdec;
			int kn,in,pn,cn;

			status = test_file.ReadLine(line_str8);
			if (OpStatus::IsError(status))
			{
				test_result = false;
				break;
			}

			status = line_str8.Append("\n");
			if (OpStatus::IsError(status))
			{
				test_result = false;
				break;
			}

			op_strncpy(line, line_str8.CStr(), sizeof(line) - 1);
			line[sizeof(line) - 1] = '\0';

			if(line[0] == '#' || line[0] == '\n')
			    continue;

			p=line;
			cipher=sstrsep(&p,":");
			key=ustrsep(&p,":");
			iv=ustrsep(&p,":");
			plaintext=ustrsep(&p,":");
			ciphertext=ustrsep(&p,":");
			if (p[-1] == '\n') {
			    p[-1] = '\0';
			    encdec = -1;
			} else {
			    encdec = op_atoi(sstrsep(&p,"\n"));
			}

			kn=convert(key);
			in=convert(iv);
			pn=convert(plaintext);
			cn=convert(ciphertext);

			int cipher_ok = test_cipher(cipher,key,kn,iv,in,plaintext,pn,ciphertext,cn,encdec);
			int digest_ok = test_digest(cipher,plaintext,pn,ciphertext,cn);

			if(!cipher_ok && !digest_ok)
			{
				output("Problem with: %s\n",cipher);
				test_result = false;
				break;
			}
		} // while (!test_file.Eof())
	}
	while (false);

    verify(test_result);
}
