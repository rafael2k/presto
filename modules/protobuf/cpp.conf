# Configuration file for the cppgen code generator.
# cppgen is an code generator written in Python which generates cpp code
# from Protocol Buffer definitions defined in each module.
# Usage:
#   python modules/protobuf/cppgen/script.py [options]
# To see which files will be generated/updated:
#   python modules/protobuf/cppgen/script.py
# To see a diff of the changes:
#   python modules/protobuf/cppgen/script.py --diff
# To update files with the changes:
#   python modules/protobuf/cppgen/script.py -r
# The directory `cppgen` contains the python files which generates the cpp code.
# Requires Python 2.4 or higher.
#
# See modules/protobuf/documentation/customization.html for details on
# how to customize the generated code.

# General options for all proto files in the current module
[options]

# Custom types
# ------------
#
# To setup custom types add a section called <type-name>.custom.
# The section must contain:
# type - A string representing the type, e.g. "unsigned"
#
# The section may contain:
# to - An expression converting the internal storage type to 'type', defaults to a static_cast
# from - An expression converting the 'type' to the internal storage type, defaults to a static_cast
# return - A statement used to return the type, the default is "return %(expr)s"
# assign - An expression used to assign the type to the storage member, the default is "%(memberName)s = %(expr)s"
# includes - A comma separated list of extra c++ includes to add to the header file, leading/trailing whitespace is trimmed for each entry
#
# The following string substitutions are available:
# %(fieldTypeOuter)s - The type specified in the section
# %(memberName)s - The name of the member variable used for internal storage
# %(var)s - The name of the variable/argument containing the specified type
# %(dataType)s - The type used for the internal storage
#
# Full example using C-style casts
# [size_t.custom]
# type = size_t
# to = ((%(fieldTypeOuter)s)%(memberName)s)
# from = ((%(dataType)s)%(var)s)
# includes = system/size_t.h, common.h
