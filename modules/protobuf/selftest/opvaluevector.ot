/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2008 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Jan Borsodi
*/

group "protobuf.opvaluevector";

require PROTOBUF_SUPPORT;

include "modules/protobuf/src/opvaluevector.h";

// TODO: This selftest needs to better suit the valuevector rather than just emulating OpGenericVector behaviour.

global
{
	#define NR_OF_STRINGS 53
	char** strings_array;
	size_t* size_array;

	#ifdef ADVANCED_OPVECTOR
	#define ADVANCED_OPINT32VECTOR
	#endif
	
	struct VectorUtil
	{
		template<typename T>
		static OP_STATUS Copy(OpValueVector<T> &out, T *in, size_t count)
		{
			for (size_t i = 0; i < count; ++i)
				RETURN_IF_ERROR(out.Add(in[i]));
			return OpStatus::OK;
		}

		template<typename T>
		static BOOL Compare(const OpValueVector<T> &a, T *b, size_t count)
		{
			if (a.GetCount() != count)
				return FALSE;
			for (size_t i = 0; i < count; ++i)
				if (a.Get(i) != b[i])
					return FALSE;
			return TRUE;
		}
	};
}

test("DuplicateOf") leakcheck;
{
	for (int i = 0; i < NR_OF_STRINGS; i++)
	{
		OpValueVector<char> vector;
		verify(VectorUtil::Copy(vector, strings_array[i], size_array[i])== OpStatus::OK);
		OpValueVector<char> vector_copy;
		verify(vector_copy.DuplicateOf(vector) == OpStatus::OK);
		verify(VectorUtil::Compare(vector_copy, strings_array[i], size_array[i]));
	}
}

test("Add and removebyitem") leakcheck;
{
	OpValueVector<char *> vector;
	for (int i = 0; i < NR_OF_STRINGS; i++)
	{
		verify(vector.Add(strings_array[i]) == OpStatus::OK);
	}
	verify(vector.GetCount() == NR_OF_STRINGS);
	for (UINT32 j = 0; j < NR_OF_STRINGS; j++)
	{
		verify(vector.RemoveByItem(strings_array[j]) == OpStatus::OK);
	}
	verify(vector.GetCount() == 0);
}

test("Add and remove") leakcheck;
{
	OpValueVector<char *> vector;
	for (int i = 0; i < NR_OF_STRINGS; i++)
	{
		verify(vector.Add(strings_array[i]) == OpStatus::OK);
	}
	verify(vector.GetCount() == NR_OF_STRINGS);
	for (UINT32 j = 0; j < NR_OF_STRINGS; j++)
	{
		verify(OpStatus::IsSuccess(vector.Remove(0)));
	}
	verify(vector.GetCount() == 0);
}

test("Add, replace and get") leakcheck;
{
	OpValueVector<char *> vector;
	verify(vector.GetCount() == 0);
	for (int i = NR_OF_STRINGS - 1; i >= 0; i--)
	{
		verify(vector.Add(strings_array[i])== OpStatus::OK);
	}
	verify(vector.GetCount() == NR_OF_STRINGS);
	for (int j = 0; j < NR_OF_STRINGS; j++)
	{
		verify(vector.Replace(j, strings_array[j])== OpStatus::OK);
		verify(vector.GetCount() == NR_OF_STRINGS);
	}
	for (int k = 0; k < NR_OF_STRINGS; k++)
	{
		verify(vector.Get(k) == strings_array[k]);
	}
	verify(vector.GetCount() == NR_OF_STRINGS);
}

test("Inserting and getting elements") leakcheck;
{
	OpValueVector<char *> vector;
	for (int i = NR_OF_STRINGS - 1; i >= 0; i--)
	{
		verify(vector.Insert(0, strings_array[i])== OpStatus::OK);
	}
	for (int j = 0; j < NR_OF_STRINGS; j++)
	{
		verify(vector.Get(j) == strings_array[j]);
	}
	verify(vector.GetCount() == NR_OF_STRINGS);
}

test("Adding and getting elements") leakcheck;
{
	OpValueVector<char *> vector;
	for (int i = 0; i < NR_OF_STRINGS; i++)
	{
		verify(vector.Add(strings_array[i])== OpStatus::OK);
	}
	for (int j = 0; j < NR_OF_STRINGS; j++)
	{
		verify(vector.Get(j) == strings_array[j]);
	}
	verify(vector.GetCount() == NR_OF_STRINGS);
}

test("Adding and finding elements") leakcheck;
{
	OpValueVector<char *> vector;
	for (int i = 0; i < NR_OF_STRINGS; i++)
	{
		verify(vector.Add(strings_array[i])== OpStatus::OK);
	}
	for (int j = 0; j < NR_OF_STRINGS; j++)
	{
		verify(vector.Find(strings_array[j]) == j);
	}
	verify(vector.GetCount() == NR_OF_STRINGS);
}

/*test("MergeSort") require ADVANCED_OPINT32VECTOR;
{
	unsigned int i, j;
	OpINT32Vector v;
	int value;

	for (i = 1; i < 70; ++i)
	{
		v.Clear();
		for (j = 0; j < i; ++j)
		{
			value = op_rand() % 12;
			v.Add(value);
			if ((op_rand() & 3) == 3)
				v.Add(value);
		}
		v.Sort();
		verify(v.GetCount() <= i);

		verify(v.Search(v.Get(0)) == 0);
		for (j = 1; j < v.GetCount(); ++j)
		{
			verify(v.Get(j - 1) < v.Get(j));
			verify(v.Search(v.Get(j)) == j);
		}
	}
}*/

test("Set addition") require ADVANCED_OPINT32VECTOR;
{
	OpINT32Vector v1, v2, v3, v4;
	int j;

	v1.Add(1);
	v1.Add(5);
	v1.Add(8);
	v1.Add(16);
	v1.Add(18);
	v1.Add(0);
	v1.Add(0);
	v1.Add(0);
	v1.Add(0);
	v1.Remove(5, 4);

	v2.Add(1);
	v2.Add(5);
	v2.Add(10);
	v2.Add(11);

	v1.Add(v2);

	v3.Add(5);
	v3.Add(6);
	v3.Add(7);
	v3.Add(27);

	OpINT32Vector::Add(v4, v1, v3);

	verify(v4.GetCount() == 10);

	for (j = 1; j < (int)v4.GetCount(); ++j)
	{
		verify(v4.Get(j - 1) < v4.Get(j));
	}
}

/*test("Add out of range bug") require ADVANCED_OPINT32VECTOR;
{
	OpINT32Vector v1, v2;
	int j;

	v1.Add(1);
	v1.Add(4);
	v1.Add(6);
	v1.Add(2);
	v1.Add(3);
	v1.Remove(3, 2);

	v2.Add(1);
	v2.Add(3);
	v2.Add(5);

	v1.Add(v2);

	for (j = 1; j < (int)v1.GetCount(); ++j)
	{
		verify(v1.Get(j - 1) < v1.Get(j));
	}

	v1.Clear();
	v2.Clear();

	for (j = 0; j < 512; ++j)
	{
		v1.Add((j << 1) + ((j & 3) ^ 2));
		v2.Add(j + (j << 1) + (j & 3));
	}
	v1.Sort();
	v2.Sort();

	v1.Add(v2);

	for (j = 1; j < (int)v1.GetCount(); ++j)
	{
		verify(v1.Get(j - 1) < v1.Get(j));
	}

	v1.Clear();
	v2.Clear();

	v1.SetAllocationStepSize(2048);

	for (j = 0; j < 512; ++j)
	{
		v1.Add((j << 1) + ((j & 3) ^ 2));
		v2.Add(j + (j << 1) + (j & 3));
	}
	v1.Sort();
	v2.Sort();

	v1.Add(v2);

	for (j = 1; j < (int)v1.GetCount(); ++j)
	{
		verify(v1.Get(j - 1) < v1.Get(j));
	}
}*/


test("Set subtraction") require ADVANCED_OPINT32VECTOR;
{
	OpINT32Vector v1, v2, v4;

	v2.Add(1);
	v2.Add(5);
	v2.Add(10);
	v2.Add(11);
	v2.Insert(0, 0);
	v2.Insert(3, 9);
	v2.Add(30);

	v4.Add(1);
	v4.Add(5);
	v4.Add(6);
	v4.Add(7);
	v4.Add(8);
	v4.Add(10);
	v4.Add(11);
	v4.Add(16);
	v4.Add(18);
	v4.Add(27);

#ifdef ADVANCED_OPINT32VECTOR
	v4.Subtract(v2);
#else
	v4.Substract(v2);
#endif

	verify(v4.GetCount() == 6);

	v2.Clear();

	v2.Add(27);
	v2.Add(28);

#ifdef ADVANCED_OPINT32VECTOR
	v4.Subtract(v2);
#else
	v4.Substract(v2);
#endif

	verify(v4.GetCount() == 5);

	v2.Clear();

	v2.Add(7);
	v2.Add(9);
	v2.Add(18);

#ifdef ADVANCED_OPINT32VECTOR
	OpINT32Vector::Subtract(v1, v4, v2);
#else
	OpINT32Vector::Substract(v1, v4, v2);
#endif

	verify(v1.GetCount() == 3);

	v2.Clear();

	v2.Add(6);
	v2.Add(7);
	v2.Add(8);

#ifdef ADVANCED_OPINT32VECTOR
	v1.Subtract(v2);
#else
	v1.Substract(v2);
#endif

	verify(v1.GetCount() == 1);

	v1.Add(18);
	v2.Clear();
	v2.Add(18);

#ifdef ADVANCED_OPINT32VECTOR
	v1.Subtract(v2);
#else
	v1.Substract(v2);
#endif

	verify(v1.GetCount() == 1);
}

test("Set intersection") require ADVANCED_OPINT32VECTOR;
{
	OpINT32Vector v1, v2, v3, v4;

	v1.Add(1);
	v1.Add(5);
	v1.Add(8);
	v1.Add(16);
	v1.Add(18);

	v2.Add(1);
	v2.Add(5);
	v2.Add(16);

	v1.Intersect(v2);

	verify(v1.GetCount() == 3);

	v3.Add(16);

	v1.Intersect(v3);

	verify(v1.GetCount() == 1);

	v1.Insert(0, 5);
	v1.Add(18);

	OpINT32Vector::Intersect(v4, v1, v3);

	verify(v4.GetCount() == 1);

	v1.Clear();

	v1.Add(1);
	v1.Add(5);
	v1.Add(8);
	v1.Add(16);
	v1.Add(18);
	v1.Add(21);
	v1.Add(25);
	v1.Add(28);
	v1.Add(116);
	v1.Add(118);
	v1.Add(221);
	v1.Add(225);
	v1.Add(228);
	v1.Add(316);
	v1.Add(318);

	v2.Clear();

	v2.Add(1);
	v2.Add(5);

	v1.Intersect(v2);

	verify(v1.GetCount() == 2);

	v3.Clear();
	v3.Intersect(v1);
	verify(v3.GetCount() == 0);

	OpINT32Vector::Intersect(v2, v1, v3);
	verify(v2.GetCount() == 0);

	OpINT32Vector::Intersect(v2, v3, v1);
	verify(v2.GetCount() == 0);

	v1.Intersect(v3);
	verify(v1.GetCount() == 0);

	v1.Add(1);
	v1.Add(2);

	v2.Add(1);
	v2.Add(2);

	v1.Intersect(v2);

	verify(v1.GetCount() == 2);

	OpINT32Vector::Intersect(v3, v1, v2);

	verify(v3.GetCount() == 2);
}

/*test("Delete") leakcheck;
{
	OpValueVector<char *> v1, v2;
	char tst[4], *items[5];
	OpAutoPtr<char> tmp[5];

	items[0] = OP_NEW(char, ());
	verify(items[0]);
	tmp[0].reset(items[0]);
	*items[0] = 1;
	verify(OpStatus::IsSuccess(v1.Add(items[0])));

	items[1] = OP_NEW(char, ());
	verify(items[1]);
	tmp[1].reset(items[1]);
	*items[1] = 2;
	verify(OpStatus::IsSuccess(v1.Add(items[1])));

	items[2] = OP_NEW(char, ());
	verify(items[2]);
	tmp[2].reset(items[2]);
	*items[2] = 3;
	verify(OpStatus::IsSuccess(v1.Add(items[2])));

	items[3] = OP_NEW(char, ());
	verify(items[3]);
	tmp[3].reset(items[3]);
	*items[3] = 4;
	verify(OpStatus::IsSuccess(v1.Add(items[3])));

	items[4] = OP_NEW(char, ());
	verify(items[4]);
	tmp[4].reset(items[4]);
	*items[4] = 1;
	verify(OpStatus::IsSuccess(v1.Add(items[4])));

	tmp[0].release();
	tmp[1].release();
	tmp[2].release();
	tmp[3].release();
	tmp[4].release();

	v1.Delete(items[0]);
	tst[0] = *v1.Get(0);
	tst[1] = *v1.Get(1);
	tst[2] = *v1.Get(2);
	tst[3] = *v1.Get(3);
	verify(tst[0] == 2 && tst[1] == 3 && tst[2] == 4 && tst[3] == 1);

	v1.Delete(1, 2);
	tst[0] = *v1.Get(0);
	tst[1] = *v1.Get(1);
	verify(tst[0] == 2 && tst[1] == 1);

	v1.DeleteAll();
	verify(v1.GetCount() == 0);
}*/

test("Insert and Replace")
{
	OpValueVector<char *> v1;
	char *items[2], tst[2];
	OpAutoPtr<char> tmp[2];

	items[0] = OP_NEW(char, ());
	verify(items[0]);
	*items[0] = 1;
	tmp[0].reset(items[0]);

	items[1] = OP_NEW(char, ());
	verify(items[1]);
	tmp[1].reset(items[1]);
	*items[1] = 2;

	verify(OpStatus::IsSuccess(v1.Insert(0, items[0])));
	verify(OpStatus::IsSuccess(v1.Replace(0, items[1])));
	verify(OpStatus::IsSuccess(v1.Insert(1, items[0])));
	tst[0] = *v1.Get(0);
	tst[1] = *v1.Get(1);
	verify(v1.GetCount() == 2);
	verify(tst[0] == 2 && tst[1] == 1);
}


setup
{
	strings_array = OP_NEWA(char*, NR_OF_STRINGS);
	size_array = OP_NEWA(size_t, NR_OF_STRINGS);
	for (int i = 0; i < NR_OF_STRINGS; i++)
	{
		char* thestring = OP_NEWA(char, 20);
		op_sprintf(thestring, "String%d", i);
		strings_array[i] = thestring;
		size_array[i] = op_strlen(thestring);
	}
}

exit
{
	for (int i = 0; i < NR_OF_STRINGS; i++)
	{
		OP_DELETEA(strings_array[i]);
	}
	OP_DELETEA(strings_array);
	OP_DELETEA(size_array);
}
