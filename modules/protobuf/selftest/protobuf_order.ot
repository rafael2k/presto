/* -*- mode: c++; tab-width: 4 -*-
**
** Copyright (C) 2009 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Test for Protocol Buffer wire format and proto types.
**
** Jan Borsodi
*/

group "protobuf.order";

require init;
require PROTOBUF_SUPPORT;

language c++;

include "modules/protobuf/src/generated/g_proto_protobuf_order.h";
include "modules/protobuf/src/generated/g_message_protobuf_order.h";

// Tests the generated API for strings in protobuf messages.

test("TestOrder: Creation")
{
	// Use default values from .proto files
	{
		OpProtobufOrder_MessageSet::TestOrder order;

		verify(order.HasSize());
		verify(order.HasData());
		verify(!order.HasName());
		verify(order.HasOrderType());
		verify(order.HasKind());

		verify(order.GetSize() == 5);
		verify(order.GetData().Length() == 0);
		verify_string(order.GetOrderType(), UNI_L(""));
		verify_string(order.GetKind(), UNI_L(""));
	}

	// Constructor with mix of default and specific values
	{
		INT32 size = 50;
		UniString type = UniString::FromConstDataL(UNI_L("foo"));
		OpProtobufOrder_MessageSet::TestOrder order(size, OpData(), NULL, type);

		verify(order.HasSize());
		verify(order.HasData());
		verify(!order.HasName());
		verify(order.HasOrderType());
		verify(order.HasKind());

		verify(order.GetSize() == 50);
		verify(order.GetData().Length() == 0);
		verify_string(order.GetOrderType(), UNI_L("foo"));
		verify_string(order.GetKind(), UNI_L(""));
	}

	// Constructor with all fields
	{
		INT32 size = 50;
		OpData data = OpData::FromConstDataL("data");
		UniString name = UniString::FromConstDataL(UNI_L("woot"));
		UniString type = UniString::FromConstDataL(UNI_L("foo"));
		UniString kind = UniString::FromConstDataL(UNI_L("boo"));
		OpProtobufOrder_MessageSet::TestOrder order(size, data, &name, type, kind);

		verify(order.HasSize());
		verify(order.HasData());
		verify(order.HasName());
		verify(order.HasOrderType());
		verify(order.HasKind());

		verify(order.GetSize() == 50);
		verify(order.GetData().Length() == 4);
		verify(order.GetData()[0] == 'd');
		verify(order.GetData()[1] == 'a');
		verify(order.GetData()[2] == 't');
		verify(order.GetData()[3] == 'a');
		verify_string(order.GetName(), UNI_L("woot"));
		verify_string(order.GetOrderType(), UNI_L("foo"));
		verify_string(order.GetKind(), UNI_L("boo"));
	}

	// Default values, except for those sent to Construct()
	{
		OpProtobufOrder_MessageSet::TestOrder order;
		verify_success(order.Construct());

		verify(order.HasSize());
		verify(order.HasData());
		verify(!order.HasName());
		verify(order.HasOrderType());
		verify(order.HasKind());

		verify(order.GetSize() == 5);
		verify(order.GetData().Length() == 0);
		verify_string(order.GetName(), UNI_L(""));
		verify_string(order.GetOrderType(), UNI_L(""));
		verify_string(order.GetKind(), UNI_L(""));
	}
}

test("TestOpStringOrder: Creation")
{
	// Use default values from .proto files
	{
		OpProtobufOrder_MessageSet::TestOpStringOrder order;

		verify(order.HasSize());
		verify(order.HasData());
		verify(!order.HasName());
		verify(order.HasOrderType());
		verify(order.HasKind());

		verify(order.GetSize() == 5);
		verify(order.GetData().Length() == 0);
		verify(order.GetOrderType().Compare(UNI_L("")) == 0);
		verify(order.GetKind().Compare(UNI_L("")) == 0);
	}

	// Constructor with mix of default and specific values
	{
		INT32 size = 50;
		OpProtobufOrder_MessageSet::TestOpStringOrder order(size, OpData());

		verify(order.HasSize());
		verify(order.HasData());
		verify(!order.HasName());
		verify(order.HasOrderType());
		verify(order.HasKind());

		verify(order.GetSize() == 50);
		verify(order.GetData().Length() == 0);
		verify(order.GetOrderType().Compare(UNI_L("")) == 0);
		verify(order.GetKind().Compare(UNI_L("")) == 0);
	}

	// Constructor with all fields
	{
		INT32 size = 50;
		OpData data = OpData::FromConstDataL("data");
		OpProtobufOrder_MessageSet::TestOpStringOrder order(size, data);

		verify(order.HasSize());
		verify(order.HasData());
		verify(!order.HasName());
		verify(order.HasOrderType());
		verify(order.HasKind());

		verify(order.GetSize() == 50);
		verify(order.GetData().Length() == 4);
		verify(order.GetData()[0] == 'd');
		verify(order.GetData()[1] == 'a');
		verify(order.GetData()[2] == 't');
		verify(order.GetData()[3] == 'a');
		verify(order.GetOrderType().Compare(UNI_L("")) == 0);
		verify(order.GetKind().Compare(UNI_L("")) == 0);
	}

	// Default values, except for those sent to Construct()
	{
		OpString type;
		OpString kind;
		verify_success(type.Set(UNI_L("foo")));
		verify_success(kind.Set(UNI_L("boo")));
		OpProtobufOrder_MessageSet::TestOpStringOrder order;
		verify_success(order.Construct(type, kind));

		verify(order.HasSize());
		verify(order.HasData());
		verify(!order.HasName());
		verify(order.HasOrderType());
		verify(order.HasKind());

		verify(order.GetSize() == 5);
		verify(order.GetData().Length() == 0);
		verify_string(order.GetName(), UNI_L(""));
		verify_string(order.GetOrderType(), UNI_L("foo"));
		verify_string(order.GetKind(), UNI_L("boo"));
	}
}
