/* -*- mode: c++; tab-width: 4 -*-
**
** Copyright (C) 2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Test for Protocol Buffer wire format and proto types.
**
** Jan Borsodi
*/

group "protobuf.strings";

require init;
require PROTOBUF_SUPPORT;

language c++;

include "modules/protobuf/src/generated/g_proto_protobuf_strings.h";

// Tests the generated API for strings in protobuf messages.

test("TestString: Creation")
{
	// Initialize with empty strings
	{
		OpProtobufStrings_MessageSet::TestString strings;

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(!strings.HasName3());
		verify(!strings.HasName4());
		verify(!strings.HasName5());
		verify(!strings.HasName6());

		verify_string(strings.GetName1(), UNI_L(""));
		verify(strings.GetName2().Compare(UNI_L("")) == 0);
		verify(strings.GetName5().GetCount() == 0);
		verify(strings.GetName6().GetCount() == 0);
	}

	// Initialize strings via Construct()
	{
		UniString name1;
		OpString name2;
		verify_success(name1.SetCopyData(UNI_L("death rally")));
		verify_success(name2.Set(UNI_L("purple motion")));

		OpProtobufStrings_MessageSet::TestString strings(name1);
		verify_success(strings.Construct(name2));

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(!strings.HasName3());
		verify(!strings.HasName4());
		verify(!strings.HasName5());
		verify(!strings.HasName6());

		verify_string(strings.GetName1(), UNI_L("death rally"));
		verify_string(strings.GetName2(), UNI_L("purple motion"));
		verify(strings.GetName5().GetCount() == 0);
		verify(strings.GetName6().GetCount() == 0);
	}

	// Initialize strings via Construct(), include optional fields
	{
		UniString name1;
		OpString name2;
		UniString name3;
		OpString name4;
		verify_success(name1.SetCopyData(UNI_L("death rally")));
		verify_success(name2.Set(UNI_L("purple motion")));
		verify_success(name3.SetCopyData(UNI_L("2nd reality")));
		verify_success(name4.Set(UNI_L("skaven")));

		OpProtobufStrings_MessageSet::TestString strings(name1, &name3);
		verify_success(strings.Construct(name2, &name4));

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(strings.HasName3());
		verify(strings.HasName4());
		verify(!strings.HasName5());
		verify(!strings.HasName6());

		verify_string(strings.GetName1(), UNI_L("death rally"));
		verify_string(strings.GetName2(), UNI_L("purple motion"));
		verify_string(strings.GetName3(), UNI_L("2nd reality"));
		verify_string(strings.GetName4(), UNI_L("skaven"));
		verify(strings.GetName5().GetCount() == 0);
		verify(strings.GetName6().GetCount() == 0);
	}
}

test("TestString: Modification")
{
	// Modify strings using char pointers
	{
		OpProtobufStrings_MessageSet::TestString strings;

		verify_success(strings.SetName1("Hellmarch"));
		verify_success(strings.SetName2("Industrial"));

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(!strings.HasName3());
		verify(!strings.HasName4());
		verify(!strings.HasName5());
		verify(!strings.HasName6());

		verify_string(strings.GetName1(), UNI_L("Hellmarch"));
		verify_string(strings.GetName2(), UNI_L("Industrial"));
		verify(strings.GetName5().GetCount() == 0);
		verify(strings.GetName6().GetCount() == 0);

		verify_success(strings.SetName3("Crush"));
		verify_success(strings.SetName4("Smash"));

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(strings.HasName3());
		verify(strings.HasName4());
		verify(!strings.HasName5());
		verify(!strings.HasName6());

		verify_string(strings.GetName3(), UNI_L("Crush"));
		verify_string(strings.GetName4(), UNI_L("Smash"));
		verify(strings.GetName5().GetCount() == 0);
		verify(strings.GetName6().GetCount() == 0);

		// Set the same fields again, using char* and length
		const char *names = "Hellmarch Industrial Crush Smash";
		verify_success(strings.SetName1(names + 27, 5)); // Smash
		verify_success(strings.SetName2(names + 21, 5)); // Crush
		verify_success(strings.SetName3(names + 10, 10)); // Industrial
		verify_success(strings.SetName4(names, 9)); // Hellmarch

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(strings.HasName3());
		verify(strings.HasName4());
		verify(!strings.HasName5());
		verify(!strings.HasName6());

		verify_string(strings.GetName1(), UNI_L("Smash"));
		verify_string(strings.GetName2(), UNI_L("Crush"));
		verify_string(strings.GetName3(), UNI_L("Industrial"));
		verify_string(strings.GetName4(), UNI_L("Hellmarch"));
		verify(strings.GetName5().GetCount() == 0);
		verify(strings.GetName6().GetCount() == 0);
	}

	// Modifying strings using uni_char pointers
	{
		OpProtobufStrings_MessageSet::TestString strings;

		verify_success(strings.SetName1(UNI_L("Mechanical Man")));
		verify_success(strings.SetName2(UNI_L("On The Prowl")));

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(!strings.HasName3());
		verify(!strings.HasName4());
		verify(!strings.HasName5());
		verify(!strings.HasName6());

		verify_string(strings.GetName1(), UNI_L("Mechanical Man"));
		verify_string(strings.GetName2(), UNI_L("On The Prowl"));
		verify(strings.GetName5().GetCount() == 0);
		verify(strings.GetName6().GetCount() == 0);

		verify_success(strings.SetName3(UNI_L("Junktown")));
		verify_success(strings.SetName4(UNI_L("Necropolis")));

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(strings.HasName3());
		verify(strings.HasName4());
		verify(!strings.HasName5());
		verify(!strings.HasName6());

		verify_string(strings.GetName3(), UNI_L("Junktown"));
		verify_string(strings.GetName4(), UNI_L("Necropolis"));
		verify(strings.GetName5().GetCount() == 0);
		verify(strings.GetName6().GetCount() == 0);

		// Set the same fields again, using uni_char* and length
		const uni_char *names = UNI_L("Mechanical Man On The Prowl Junktown Necropolis");
		verify_success(strings.SetName1(names + 37, 10)); // Necropolis
		verify_success(strings.SetName2(names + 28, 8)); // Junktown
		verify_success(strings.SetName3(names + 15, 12)); // On The Prowl
		verify_success(strings.SetName4(names, 14)); // Mechanical Man

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(strings.HasName3());
		verify(strings.HasName4());
		verify(!strings.HasName5());
		verify(!strings.HasName6());

		verify_string(strings.GetName1(), UNI_L("Necropolis"));
		verify_string(strings.GetName2(), UNI_L("Junktown"));
		verify_string(strings.GetName3(), UNI_L("On The Prowl"));
		verify_string(strings.GetName4(), UNI_L("Mechanical Man"));
		verify(strings.GetName5().GetCount() == 0);
		verify(strings.GetName6().GetCount() == 0);
	}

	// Modifying strings using string objects
	{
		OpProtobufStrings_MessageSet::TestString strings;

		UniString name1;
		OpString name2;
		verify_success(name1.SetCopyData(UNI_L("Act On Instinct")));
		verify_success(name2.Set(UNI_L("No Mercy")));

		verify_success(strings.SetName1(name1));
		verify_success(strings.SetName2(name2));

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(!strings.HasName3());
		verify(!strings.HasName4());
		verify(!strings.HasName5());
		verify(!strings.HasName6());

		verify_string(strings.GetName1(), UNI_L("Act On Instinct"));
		verify_string(strings.GetName2(), UNI_L("No Mercy"));
		verify(strings.GetName5().GetCount() == 0);
		verify(strings.GetName6().GetCount() == 0);

		verify_success(strings.SetName3(name1));
		verify_success(strings.SetName4(name2));

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(strings.HasName3());
		verify(strings.HasName4());
		verify(!strings.HasName5());
		verify(!strings.HasName6());

		verify_string(strings.GetName3(), UNI_L("Act On Instinct"));
		verify_string(strings.GetName4(), UNI_L("No Mercy"));
		verify(strings.GetName5().GetCount() == 0);
		verify(strings.GetName6().GetCount() == 0);
	}

	// Modifying strings using references
	{
		OpProtobufStrings_MessageSet::TestString strings;

		verify_success(strings.GetName1Ref().SetCopyData(UNI_L("Drill")));
		verify_success(strings.GetName2Ref().Set(UNI_L("Rain In The Night")));

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(!strings.HasName3());
		verify(!strings.HasName4());
		verify(!strings.HasName5());
		verify(!strings.HasName6());

		verify_string(strings.GetName1(), UNI_L("Drill"));
		verify_string(strings.GetName2(), UNI_L("Rain In The Night"));
		verify(strings.GetName5().GetCount() == 0);
		verify(strings.GetName6().GetCount() == 0);

		verify_success(strings.GetName3Ref().SetCopyData(UNI_L("The Vats")));
		verify_success(strings.GetName4Ref().Set(UNI_L("Shady Sands")));

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(strings.HasName3());
		verify(strings.HasName4());
		verify(!strings.HasName5());
		verify(!strings.HasName6());

		verify_string(strings.GetName3(), UNI_L("The Vats"));
		verify_string(strings.GetName4(), UNI_L("Shady Sands"));
		verify(strings.GetName5().GetCount() == 0);
		verify(strings.GetName6().GetCount() == 0);
	}
}

test("TestString: Appending")
{
	// Appending strings using references
	{
		OpProtobufStrings_MessageSet::TestString strings;

		UniString name5;
		verify_success(name5.SetCopyData(UNI_L("Megaton")));
		OpAutoPtr<OpString> name6(OP_NEW(OpString, ()));
		verify(name6.get());
		verify_success(name6->Set(UNI_L("Jacobs Town")));

		verify_success(strings.GetName5Ref().Add(name5));
		verify_success(strings.GetName6Ref().Add(name6.get()));
		name6.release();

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(!strings.HasName3());
		verify(!strings.HasName4());
		verify(strings.HasName5());
		verify(strings.HasName6());

		verify_string(strings.GetName1(), UNI_L(""));
		verify(strings.GetName2().Compare(UNI_L("")) == 0);
		verify(strings.GetName5().GetCount() == 1);
		verify(strings.GetName6().GetCount() == 1);
		verify_string(strings.GetName5().Get(0), UNI_L("Megaton"));
		verify_string(*strings.GetName6().Get(0), UNI_L("Jacobs Town"));
	}

	// Appending strings using AppendTo helper methods
	{
		OpProtobufStrings_MessageSet::TestString strings;

		UniString name5;
		verify_success(name5.SetCopyData(UNI_L("Fire")));
		OpString name6;
		verify_success(name6.Set(UNI_L("Ice")));

		verify_success(strings.AppendToName5(name5));
		verify_success(strings.AppendToName6(name6));

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(!strings.HasName3());
		verify(!strings.HasName4());
		verify(strings.HasName5());
		verify(strings.HasName6());

		verify_string(strings.GetName1(), UNI_L(""));
		verify(strings.GetName2().Compare(UNI_L("")) == 0);
		verify(strings.GetName5().GetCount() == 1);
		verify(strings.GetName6().GetCount() == 1);
		verify_string(strings.GetName5().Get(0), UNI_L("Fire"));
		verify_string(*strings.GetName6().Get(0), UNI_L("Ice"));
	}

	// Appending strings using AppendTo(const uni_char *) helper methods
	{
		OpProtobufStrings_MessageSet::TestString strings;

		verify_success(strings.AppendToName5(UNI_L("Pinball")));
		verify_success(strings.AppendToName6(UNI_L("Dreams")));
		const uni_char *names = UNI_L("Pinball Dreams");
		verify_success(strings.AppendToName5(names, 7)); // Pinball
		verify_success(strings.AppendToName6(names + 8, 6)); // Dreams

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(!strings.HasName3());
		verify(!strings.HasName4());
		verify(strings.HasName5());
		verify(strings.HasName6());

		verify_string(strings.GetName1(), UNI_L(""));
		verify(strings.GetName2().Compare(UNI_L("")) == 0);
		verify(strings.GetName5().GetCount() == 2);
		verify(strings.GetName6().GetCount() == 2);
		verify_string(strings.GetName5().Get(0), UNI_L("Pinball"));
		verify_string(*strings.GetName6().Get(0), UNI_L("Dreams"));
		verify_string(strings.GetName5().Get(1), UNI_L("Pinball"));
		verify_string(*strings.GetName6().Get(1), UNI_L("Dreams"));
	}

	// Appending strings using AppendTo(const char *) helper methods
	{
		OpProtobufStrings_MessageSet::TestString strings;

		verify_success(strings.AppendToName5("Turrican"));
		verify_success(strings.AppendToName6("Huelsbeck"));
		const char *names = "Turrican Chris Huelsbeck";
		verify_success(strings.AppendToName5(names, 8)); // Turrican
		verify_success(strings.AppendToName6(names + 9, 5)); // Chris

		verify(strings.HasName1());
		verify(strings.HasName2());
		verify(!strings.HasName3());
		verify(!strings.HasName4());
		verify(strings.HasName5());
		verify(strings.HasName6());

		verify_string(strings.GetName1(), UNI_L(""));
		verify(strings.GetName2().Compare(UNI_L("")) == 0);
		verify(strings.GetName5().GetCount() == 2);
		verify(strings.GetName6().GetCount() == 2);
		verify_string(strings.GetName5().Get(0), UNI_L("Turrican"));
		verify_string(*strings.GetName6().Get(0), UNI_L("Huelsbeck"));
		verify_string(strings.GetName5().Get(1), UNI_L("Turrican"));
		verify_string(*strings.GetName6().Get(1), UNI_L("Chris"));
	}
}
