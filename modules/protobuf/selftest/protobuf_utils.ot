/* -*- mode: c++; tab-width: 4 -*-
**
** Copyright (C) 2009 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Test for scope utils.
** Jan Borsodi
*/

group "protobuf.utils";

require init;
require PROTOBUF_SUPPORT;

language c++;

include "modules/protobuf/src/protobuf_utils.h";

test("Bitfield initially set to 0s")
{
	OpProtobufBitField<32> bf;
	verify(bf.Field()[0] == 0x00);
	verify(bf.Field()[1] == 0x00);
	verify(bf.Field()[2] == 0x00);
	verify(bf.Field()[3] == 0x00);
}

test("Bitfield initially set to 1s")
{
	OpProtobufBitField<32> bf(TRUE);
	verify(bf.Field()[0] == 0xFF);
	verify(bf.Field()[1] == 0xFF);
	verify(bf.Field()[2] == 0xFF);
	verify(bf.Field()[3] == 0xFF);
}

test("Bitfield MSB")
{
	OpProtobufBitField<32> bf;
	OpProtobufBitFieldRef ref = bf.Reference();
	ref.SetBit(0);
	ref.SetBit(8);
	ref.SetBit(16);
	ref.SetBit(24);
	verify(bf.Field()[0] == 0x80);
	verify(bf.Field()[1] == 0x80);
	verify(bf.Field()[2] == 0x80);
	verify(bf.Field()[3] == 0x80);
}

test("Bitfield LSB")
{
	OpProtobufBitField<32> bf;
	OpProtobufBitFieldRef ref = bf.Reference();
	ref.SetBit(7);
	ref.SetBit(15);
	ref.SetBit(23);
	ref.SetBit(31);
	verify(bf.Field()[0] == 0x01);
	verify(bf.Field()[1] == 0x01);
	verify(bf.Field()[2] == 0x01);
	verify(bf.Field()[3] == 0x01);
}

test("Bitfield set even bits")
{
	OpProtobufBitField<8> bf;
	OpProtobufBitFieldRef ref = bf.Reference();
	ref.SetBit(0);
	ref.SetBit(2);
	ref.SetBit(4);
	ref.SetBit(6);
	verify(bf.Field()[0] == 0xAA);
}

test("Bitfield set odd bits")
{
	OpProtobufBitField<8> bf;
	OpProtobufBitFieldRef ref = bf.Reference();
	ref.SetBit(1);
	ref.SetBit(3);
	ref.SetBit(5);
	ref.SetBit(7);
	verify(bf.Field()[0] == 0x55);
}

test("Bitfield nibble")
{
	OpProtobufBitField<4> bf;
	OpProtobufBitFieldRef ref = bf.Reference();
	ref.SetBit(0);
	ref.SetBit(1);
	ref.SetBit(2);
	ref.SetBit(3);
	verify(bf.Field()[0] == 0xF0);
}

test("Bitfield clearing bits")
{
	OpProtobufBitField<16> bf(TRUE);
	OpProtobufBitFieldRef ref = bf.Reference();
	verify(bf.Field()[0] == 0xFF);
	ref.ClearBit(0);
	verify(bf.Field()[0] == 0x7F);
	ref.ClearBit(1);
	verify(bf.Field()[0] == 0x3F);
	ref.ClearBit(2);
	verify(bf.Field()[0] == 0x1F);
	ref.ClearBit(3);
	verify(bf.Field()[0] == 0x0F);
	ref.ClearBit(4);
	verify(bf.Field()[0] == 0x07);
	ref.ClearBit(5);
	verify(bf.Field()[0] == 0x03);
	ref.ClearBit(6);
	verify(bf.Field()[0] == 0x01);
	ref.ClearBit(7);
	verify(bf.Field()[0] == 0x00);

	verify(bf.Field()[1] == 0xFF);
	ref.ClearBit(8);
	verify(bf.Field()[1] == 0x7F);
	ref.ClearBit(9);
	verify(bf.Field()[1] == 0x3F);
	ref.ClearBit(10);
	verify(bf.Field()[1] == 0x1F);
	ref.ClearBit(11);
	verify(bf.Field()[1] == 0x0F);
	ref.ClearBit(12);
	verify(bf.Field()[1] == 0x07);
	ref.ClearBit(13);
	verify(bf.Field()[1] == 0x03);
	ref.ClearBit(14);
	verify(bf.Field()[1] == 0x01);
	ref.ClearBit(15);
	verify(bf.Field()[1] == 0x00);
}

test("Bitfield getting bits")
{
	unsigned char initial[] = {0xBE, 0xEF};
	OpProtobufBitField<16> bf(initial);
	OpProtobufBitFieldRef ref = bf.Reference();
	verify(bf.Field()[0] == 0xBE);
	verify(bf.Field()[1] == 0xEF);

	verify(ref.IsSet(0) == TRUE);
	verify(ref.IsSet(1) == FALSE);
	verify(ref.IsSet(2) == TRUE);
	verify(ref.IsSet(3) == TRUE);
	verify(ref.IsSet(4) == TRUE);
	verify(ref.IsSet(5) == TRUE);
	verify(ref.IsSet(6) == TRUE);
	verify(ref.IsSet(7) == FALSE);

	verify(ref.IsSet(8) == TRUE);
	verify(ref.IsSet(9) == TRUE);
	verify(ref.IsSet(10) == TRUE);
	verify(ref.IsSet(11) == FALSE);
	verify(ref.IsSet(12) == TRUE);
	verify(ref.IsSet(13) == TRUE);
	verify(ref.IsSet(14) == TRUE);
	verify(ref.IsSet(15) == TRUE);
}

test("Copy big string")
{
	uni_char long_string[1024*20 + 501 + 1];
	char long_string_expected[sizeof(long_string)];
	char    *tmp = NULL;
	unsigned int i;
	for (i = 0; i < ARRAY_SIZE(long_string) - 1; ++i)
	{
		char c = (char)('0' + (i % 43));
		long_string[i] = c;
		long_string_expected[i] = c;
	}
	long_string[i] = '\0';
	long_string_expected[i] = '\0';

	ByteBuffer out;
	TempBuffer in;
	verify(OpStatus::IsSuccess(in.Append(long_string)));
	verify(OpStatus::IsSuccess(OpProtobufUtils::Copy(in, out)));

	tmp = out.Copy(TRUE);
	verify(op_strncmp(tmp, long_string_expected, op_strlen(long_string_expected)) == 0);
}
finally
{
	OP_DELETEA(tmp);
}

test("Convert big string")
{
	uni_char long_string[1024*20 + 501 + 1];
	char long_string_expected[sizeof(long_string)];
	char    *tmp = NULL;
	unsigned int i;
	for (i = 0; i < ARRAY_SIZE(long_string) - 1; ++i)
	{
		char c = (char)('0' + (i % 43));
		long_string[i] = c;
		long_string_expected[i] = c;
	}
	long_string[i] = '\0';
	long_string_expected[i] = '\0';

	ByteBuffer out;
	verify(OpStatus::IsSuccess(OpProtobufUtils::Convert(out, long_string)));

	tmp = out.Copy(TRUE);
	verify(op_strncmp(tmp, long_string_expected, op_strlen(long_string_expected)) == 0);
}
finally
{
	OP_DELETEA(tmp);
}
