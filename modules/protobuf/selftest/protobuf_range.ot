/* -*- mode: c++; tab-width: 4 -*-
**
** Copyright (C) 2009 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Test for Protocol Buffer wire format and proto types.
**
** Jan Borsodi
*/

group "protobuf.range";

require init;
require PROTOBUF_SUPPORT;

language c++;

include "modules/protobuf/src/protobuf_data.h";
include "modules/util/adt/bytebuffer.h";

test ("ByteBufferChunkRange")
{
	ByteBuffer empty;
	{
		ByteBufferChunkRange in_empty(empty);
		verify(in_empty.IsEmpty());
	}

	ByteBuffer data1;
	verify_success(data1.AppendBytes("foo", 3));
	{
		ByteBufferChunkRange in_data1(data1);
		verify(!in_data1.IsEmpty());
		verify(in_data1.Front().GetLength() == 3);
		verify(in_data1.Front().GetData()[0] == 'f');
		verify(in_data1.Front().GetData()[1] == 'o');
		verify(in_data1.Front().GetData()[2] == 'o');
		in_data1.PopFront();
		verify(in_data1.IsEmpty());
	}

	ByteBuffer data2;
	char tmp[16] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
	for (int len = BYTEBUFFER_CHUNKSIZE; len > 0; len -= 16)
	{
		verify_success(data2.AppendBytes(tmp, 16));
	}
	// Append one more byte just to be sure we exceed the chunk boundary
	verify_success(data2.AppendBytes(tmp, 1));
	verify(data2.GetChunkCount() > 1);
	{
		ByteBufferChunkRange in_data2(data2);
		verify(!in_data2.IsEmpty());
		verify(in_data2.Front().GetLength() > 0);
		in_data2.PopFront();
		verify(!in_data2.IsEmpty());
		verify(in_data2.Front().GetLength() > 0);
		in_data2.PopFront();
		verify(in_data2.IsEmpty());
	}
}

test ("ByteBufferChunkRange: slice")
{
	ByteBuffer empty;
	{
		ByteBufferChunkRange in_empty(empty, 2, 0);
		verify(in_empty.IsEmpty());
	}
	{
		ByteBufferChunkRange in_empty(empty, 2, 5);
		verify(in_empty.IsEmpty());
	}

	ByteBuffer data1;
	verify_success(data1.AppendBytes("bar", 3));
	{
		ByteBufferChunkRange in_data1(data1, 2, 0);
		verify(!in_data1.IsEmpty());
		verify(in_data1.Front().GetLength() == 2);
		verify(in_data1.Front().GetData()[0] == 'b');
		verify(in_data1.Front().GetData()[1] == 'a');
		in_data1.PopFront();
		verify(in_data1.IsEmpty());
	}
	{
		ByteBufferChunkRange in_data1(data1, 3, 2);
		verify(!in_data1.IsEmpty());
		verify(in_data1.Front().GetLength() == 1);
		verify(in_data1.Front().GetData()[0] == 'r');
		in_data1.PopFront();
		verify(in_data1.IsEmpty());
	}
	{
		ByteBufferChunkRange in_data1(data1, 3, 5);
		verify(in_data1.IsEmpty());
	}

	ByteBuffer data2;
	char tmp[16] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
	for (int len = BYTEBUFFER_CHUNKSIZE; len > 0; len -= 16)
	{
		verify_success(data2.AppendBytes(tmp, 16));
	}
	// Append one more byte just to be sure we exceed the chunk boundary
	verify_success(data2.AppendBytes(tmp, 1));
	verify(data2.GetChunkCount() > 1);
	{
		ByteBufferChunkRange in_data2(data2, 16, 0);
		verify(!in_data2.IsEmpty());
		verify(in_data2.Front().GetLength() == 16);
		in_data2.PopFront();
		verify(in_data2.IsEmpty());
	}
	{
		ByteBufferChunkRange in_data2(data2, 16, 16);
		verify(!in_data2.IsEmpty());
		verify(in_data2.Front().GetLength() == 16);
		in_data2.PopFront();
		verify(in_data2.IsEmpty());
	}
	// Use an offset value that immediately moves it to the next chunk in the ByteBuffer
	// If ByteBuffer changes storage then this must be updated.
	{
		ByteBufferChunkRange in_data2(data2, 16, BYTEBUFFER_CHUNKSIZE);
		verify(!in_data2.IsEmpty());
		verify(in_data2.Front().GetLength() > 0);
		in_data2.PopFront();
		verify(in_data2.IsEmpty());
	}
}

test ("ByteBufferRange")
{
	ByteBuffer empty;
	{
		ByteBufferRange in_empty(empty);
		verify(in_empty.Length() == 0);
		verify(in_empty.IsEmpty());
	}

	ByteBuffer data1;
	verify_success(data1.AppendBytes("foo", 3));
	{
		ByteBufferRange in_data1(data1);
		verify(in_data1.Length() == 3);
		verify(!in_data1.IsEmpty());
		verify(in_data1.Front() == 'f');
		in_data1.PopFront();
		verify(!in_data1.IsEmpty());
		verify(in_data1.Length() == 2);
		verify(in_data1.Front() == 'o');
		in_data1.PopFront();
		verify(!in_data1.IsEmpty());
		verify(in_data1.Length() == 1);
		verify(in_data1.Front() == 'o');
		in_data1.PopFront();
		verify(in_data1.IsEmpty());
		verify(in_data1.Length() == 0);
	}

	ByteBuffer data2;
	char tmp[16] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
	for (int len = BYTEBUFFER_CHUNKSIZE; len > 0; len -= 16)
	{
		verify_success(data2.AppendBytes(tmp, 16));
	}
	// Append one more byte just to be sure we exceed the chunk boundary
	verify_success(data2.AppendBytes(tmp, 1));
	verify(data2.GetChunkCount() > 1);
	{
		ByteBufferRange in_data2(data2);
		verify(in_data2.Length() == data2.Length());
		for (unsigned i = 0; i < data2.Length(); ++i)
		{
			verify(!in_data2.IsEmpty());
			verify(in_data2.Length() == (data2.Length() - i));
			char c = in_data2.Front();
			verify(data2.Extract1(i) == c);
			in_data2.PopFront();
		}
		verify(in_data2.IsEmpty());
		verify(in_data2.Length() == 0);
	}
}

test ("OpProtobufByteBufferOutputRange")
{
	ByteBuffer out_buffer;
	OpProtobufByteBufferOutputRange out(out_buffer);
	verify_success(out.Put(OpProtobufDataChunk("foo", 3)));
	verify_success(out.Put(OpProtobufDataChunk("bar", 3)));
	verify(out.Length() == 6);
	verify(out_buffer.Length() == 6);
	verify(out_buffer.Extract1(0) == 'f');
	verify(out_buffer.Extract1(1) == 'o');
	verify(out_buffer.Extract1(2) == 'o');
	verify(out_buffer.Extract1(3) == 'b');
	verify(out_buffer.Extract1(4) == 'a');
	verify(out_buffer.Extract1(5) == 'r');
}

test ("OpProtobufOpDataOutputRange")
{
	OpData out_buffer;
	OpProtobufOpDataOutputRange out(out_buffer);
	verify_success(out.Put(OpProtobufDataChunk("foo", 3)));
	verify_success(out.Put(OpProtobufDataChunk("bar", 3)));
	verify(out.Length() == 6);
	verify(out_buffer.Length() == 6);
	verify(out_buffer.At(0) == 'f');
	verify(out_buffer.At(1) == 'o');
	verify(out_buffer.At(2) == 'o');
	verify(out_buffer.At(3) == 'b');
	verify(out_buffer.At(4) == 'a');
	verify(out_buffer.At(5) == 'r');
}

test ("OpProtobufStringOutputAdapter: from char *")
{
	ByteBuffer out_buffer;
	OpProtobufByteBufferOutputRange out(out_buffer);
	OpProtobufDataOutputAdapter adapter(&out);
	verify_success(adapter.Put(OpProtobufDataChunk("foo", 3)));
	verify_success(adapter.Put(OpProtobufDataChunk("bar", 3)));
	verify(out.Length() == 6);
	verify(out_buffer.Length() == 6);
	verify(out_buffer.Extract1(0) == 'f');
	verify(out_buffer.Extract1(1) == 'o');
	verify(out_buffer.Extract1(2) == 'o');
	verify(out_buffer.Extract1(3) == 'b');
	verify(out_buffer.Extract1(4) == 'a');
	verify(out_buffer.Extract1(5) == 'r');
}

test ("OpProtobufStringOutputAdapter: from ByteBuffer")
{
	ByteBuffer in_buffer;
	verify_success(in_buffer.AppendBytes("foobar", 6));
	ByteBuffer out_buffer;
	OpProtobufByteBufferOutputRange out(out_buffer);
	OpProtobufDataOutputAdapter adapter(&out);
	verify_success(adapter.Put(OpProtobufDataChunkRange(in_buffer)));
	verify(out.Length() == 6);
	verify(out_buffer.Length() == 6);
	verify(out_buffer.Extract1(0) == 'f');
	verify(out_buffer.Extract1(1) == 'o');
	verify(out_buffer.Extract1(2) == 'o');
	verify(out_buffer.Extract1(3) == 'b');
	verify(out_buffer.Extract1(4) == 'a');
	verify(out_buffer.Extract1(5) == 'r');
}

test ("OpProtobufStringOutputAdapter: from OpData")
{
	OpData in_buffer;
	verify_success(in_buffer.AppendConstData("foobar", 6));
	ByteBuffer out_buffer;
	OpProtobufByteBufferOutputRange out(out_buffer);
	OpProtobufDataOutputAdapter adapter(&out);
	verify_success(adapter.Put(OpProtobufDataChunkRange(in_buffer)));
	verify(out.Length() == 6);
	verify(out_buffer.Length() == 6);
	verify(out_buffer.Extract1(0) == 'f');
	verify(out_buffer.Extract1(1) == 'o');
	verify(out_buffer.Extract1(2) == 'o');
	verify(out_buffer.Extract1(3) == 'b');
	verify(out_buffer.Extract1(4) == 'a');
	verify(out_buffer.Extract1(5) == 'r');

	OpData out_buffer2;
	OpProtobufOpDataOutputRange out2(out_buffer2);
	OpProtobufDataOutputAdapter adapter2(&out2);
	verify_success(adapter2.Put(OpProtobufDataChunkRange(in_buffer)));
	verify(out2.Length() == 6);
	verify(out_buffer2.Length() == 6);
	verify(out_buffer2.At(0) == 'f');
	verify(out_buffer2.At(1) == 'o');
	verify(out_buffer2.At(2) == 'o');
	verify(out_buffer2.At(3) == 'b');
	verify(out_buffer2.At(4) == 'a');
	verify(out_buffer2.At(5) == 'r');
}

test ("InputRange: char *ptr")
{
	OpProtobufDataChunkRange in_null(NULL, 0);
	verify(in_null.IsEmpty()); // Length is 0 so it should be empty

	char ptr_empty[1];
	OpProtobufDataChunkRange in_empty(ptr_empty, 0);
	verify(in_empty.IsEmpty()); // Length is 0 so it should be empty

	char data_one[1] = {0x5a};
	char *ptr_one = &data_one[0];
	OpProtobufDataChunkRange in_one(ptr_one, 1);
	verify(!in_one.IsEmpty());
	verify(in_one.Front().GetLength() == 1);
	verify(in_one.Front().GetData() == ptr_one);
	in_one.PopFront();
	verify(in_one.IsEmpty());

	char data_long[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
	char *ptr_long = &data_long[0];
	{
		OpProtobufDataChunkRange in_long(ptr_long, 10);
		verify(!in_long.IsEmpty());
		verify(in_long.Front().GetLength() == 10);
		verify(in_long.Front().GetData() == ptr_long);
		in_long.PopFront();
		verify(in_long.IsEmpty());
	}
}

test ("InputRange: ByteBuffer")
{
	ByteBuffer buf_empty;
	OpProtobufDataChunkRange in_empty(buf_empty);
	verify(in_empty.IsEmpty()); // Length is 0 so it should be empty

	char data_one[1] = {0x5a};
	ByteBuffer buf_one;
	verify_success(buf_one.AppendBytes(data_one, 1));
	OpProtobufDataChunkRange in_one(buf_one);
	verify(!in_one.IsEmpty());
	verify(in_one.Front().GetLength() == 1);
	verify(in_one.Front().GetData() != 0);
	in_one.PopFront();
	verify(in_one.IsEmpty());

	// Add 10 bytes, ByteBuffer should still only use one chunk internally
	char data_long[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
	ByteBuffer buf_long;
	verify_success(buf_long.AppendBytes(data_long, 10));
	{
		OpProtobufDataChunkRange in_long(buf_long);
		verify(!in_long.IsEmpty());
		verify(in_long.Front().GetLength() == 10);
		verify(in_long.Front().GetData() != 0);
		in_long.PopFront();
		verify(in_long.IsEmpty());
	}
	{
		OpProtobufDataChunkRange in_long(buf_long, 5, 0);
		verify(!in_long.IsEmpty());
		verify(in_long.Front().GetLength() == 5);
		verify(in_long.Front().GetData() != 0);
		in_long.PopFront();
		verify(in_long.IsEmpty());
	}
	{
		OpProtobufDataChunkRange in_long(buf_long, 5, 8);
		verify(!in_long.IsEmpty());
		verify(in_long.Front().GetLength() == 2);
		verify(in_long.Front().GetData() != 0);
		in_long.PopFront();
		verify(in_long.IsEmpty());
	}

	ByteBuffer data2;
	char tmp[16] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
	for (int len = BYTEBUFFER_CHUNKSIZE; len > 0; len -= 16)
	{
		verify_success(data2.AppendBytes(tmp, 16));
	}
	// Append one more byte just to be sure we exceed the chunk boundary
	verify_success(data2.AppendBytes(tmp, 1));
	verify(data2.GetChunkCount() > 1);
	{
		OpProtobufDataChunkRange in_long(data2);
		verify(!in_long.IsEmpty());
		verify(in_long.Front().GetLength() == BYTEBUFFER_CHUNKSIZE);
		verify(in_long.Front().GetData() != 0);
		for (int i = 0; i < 16; ++i)
		{
			verify(in_long.Front().GetData()[i] == i);
			verify(in_long.Front().GetData()[i+16] == i);
		}
		in_long.PopFront();
		verify(!in_long.IsEmpty());
		in_long.PopFront();
		verify(in_long.IsEmpty());
	}
	{
		OpProtobufDataChunkRange in_long(data2, 5, 0);
		verify(!in_long.IsEmpty());
		verify(in_long.Front().GetLength() == 5);
		verify(in_long.Front().GetData() != 0);
		for (int i = 0; i < 5; ++i)
		{
			verify(in_long.Front().GetData()[i] == i);
		}
		in_long.PopFront();
		verify(in_long.IsEmpty());
	}
	{
		OpProtobufDataChunkRange in_long(data2, 5, BYTEBUFFER_CHUNKSIZE);
		verify(!in_long.IsEmpty());
		verify(in_long.Front().GetLength() <= 5);
		verify(in_long.Front().GetData() != 0);
		in_long.PopFront();
		verify(in_long.IsEmpty());
	}
}

test ("OpProtobufDataRange: char *: empty")
{
	char empty[1];
	{
		OpProtobufDataRange in_empty(empty, 0);
		verify(in_empty.IsEmpty());
		verify(in_empty.Length() == 0);
		verify(in_empty.DistanceTo(in_empty) == 0);
		OpProtobufDataChunkRange chunk_range = in_empty.ChunkRange();
		verify(chunk_range.IsEmpty());
	}
}

test ("OpProtobufDataRange: char *: moving range")
{
	char data1[7] = "foobar";
	{
		OpProtobufDataRange in_data1(data1, 6);
		verify(!in_data1.IsEmpty());
		verify(in_data1.Length() == 6);
		verify(in_data1.DistanceTo(in_data1) == 0);
		verify(in_data1.Front() == 'f');
		verify(in_data1.Back() == 'r');

		OpProtobufDataChunkRange chunk_range1 = in_data1.ChunkRange();
		verify(!chunk_range1.IsEmpty());

		// Make a copy and move one byte forward
		OpProtobufDataRange in_data2 = in_data1;
		verify(!in_data2.IsEmpty());
		verify(in_data2.Length() == 6);
		verify(in_data1.DistanceTo(in_data2) == 0);

		in_data2.PopFront();
		verify(!in_data2.IsEmpty());
		verify(in_data2.Length() == 5);
		verify(in_data1.DistanceTo(in_data2) == 1);
		verify(in_data2.Front() == 'o');
		verify(in_data2.Back() == 'r');

		OpProtobufDataChunkRange chunk_range2 = in_data2.ChunkRange();
		verify(!chunk_range2.IsEmpty());

		// Make a copy and move to the end
		OpProtobufDataRange in_data3 = in_data1;
		verify(!in_data3.IsEmpty());
		verify(in_data3.Length() == 6);
		verify(in_data1.DistanceTo(in_data3) == 0);

		in_data3.PopFront(6);
		verify(in_data3.IsEmpty());
		verify(in_data3.Length() == 0);
		verify(in_data1.DistanceTo(in_data3) == 6);

		OpProtobufDataChunkRange chunk_range3 = in_data3.ChunkRange();
		verify(chunk_range3.IsEmpty());

		// Make a copy and move back one byte backward
		OpProtobufDataRange in_data4 = in_data1;
		verify(!in_data4.IsEmpty());
		verify(in_data4.Length() == 6);
		verify(in_data1.DistanceTo(in_data4) == 0);

		in_data4.PopBack();
		verify(!in_data4.IsEmpty());
		verify(in_data4.Length() == 5);
		verify(in_data1.DistanceTo(in_data4) == 0);
		verify(in_data4.Front() == 'f');
		verify(in_data4.Back() == 'a');

		in_data4.PopFront();
		verify(!in_data4.IsEmpty());
		verify(in_data4.Length() == 4);
		verify(in_data1.DistanceTo(in_data4) == 1);
		verify(in_data4.Front() == 'o');
		verify(in_data4.Back() == 'a');

		OpProtobufDataChunkRange chunk_range4 = in_data4.ChunkRange();
		verify(!chunk_range4.IsEmpty());

	}
}

subtest VerifyRange(OpDataChunkRange &in_data, OpData &data, const char *expected_data)
{
	unsigned idx = 0;
	while (!in_data.IsEmpty())
	{
		verify(in_data.Front().GetLength() > 0);
		verify(in_data.Front().GetData() != NULL);
		for (unsigned i = 0; i < in_data.Front().GetLength(); ++i)
		{
			verify(in_data.Front().GetData()[i] == expected_data[idx++]);
		}
		verify(idx <= data.Length());
		in_data.PopFront();
	}
	verify(idx == data.Length());
}

subtest VerifyRepeatedRange(OpDataChunkRange &in_data, OpData &data, const char *expected_data, unsigned sublen)
{
	unsigned idx = 0, cur_idx = 0;
	while (!in_data.IsEmpty())
	{
		verify(in_data.Front().GetLength() > 0);
		verify(in_data.Front().GetData() != NULL);
		for (unsigned i = 0; i < in_data.Front().GetLength(); ++i)
		{
			verify(in_data.Front().GetData()[i] == expected_data[cur_idx]);
			cur_idx = ++idx % sublen;
		}
		verify(idx <= data.Length());
		in_data.PopFront();
	}
	verify(idx == data.Length());
}

test ("OpDataChunkRange")
{
	OpData empty;
	{
		OpDataChunkRange in_empty(empty);
		verify(in_empty.IsEmpty());
	}

	const char *expected_data1 = "foo bar";
	OpData data1;
	verify_success(data1.SetConstData(expected_data1, 3));
	{
		OpDataChunkRange in_data1(data1);
		verify(!in_data1.IsEmpty());
		VerifyRange(in_data1, data1, expected_data1);
	}

	OpData data2;
	char expected_data2[15] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};
	for (int len = 4096; len > 0; len -= 15)
	{
		verify_success(data2.AppendConstData(expected_data2, 15));
	}
	{
		OpDataChunkRange in_data2(data2);
		verify(!in_data2.IsEmpty());
		VerifyRepeatedRange(in_data2, data2, expected_data2, 15);
	}
}

test ("OpProtobufDataRange: OpData: empty")
{
	OpData empty;
	{
		OpProtobufDataRange in_empty(empty, 0);
		verify(in_empty.IsEmpty());
		verify(in_empty.Length() == 0);
		verify(in_empty.DistanceTo(in_empty) == 0);
		OpProtobufDataChunkRange chunk_range = in_empty.ChunkRange();
		verify(chunk_range.IsEmpty());
	}
}

test ("OpProtobufDataRange: OpData: moving range")
{
	OpData data1;
	verify_success(data1.SetConstData("foobar"));
	{
		OpProtobufDataRange in_data1(data1, 6);
		verify(!in_data1.IsEmpty());
		verify(in_data1.Length() == 6);
		verify(in_data1.DistanceTo(in_data1) == 0);
		verify(in_data1.Front() == 'f');
		verify(in_data1.Back() == 'r');

		OpProtobufDataChunkRange chunk_range1 = in_data1.ChunkRange();
		verify(!chunk_range1.IsEmpty());

		// Make a copy and move one byte forward
		OpProtobufDataRange in_data2 = in_data1;
		verify(!in_data2.IsEmpty());
		verify(in_data2.Length() == 6);
		verify(in_data1.DistanceTo(in_data2) == 0);

		in_data2.PopFront();
		verify(!in_data2.IsEmpty());
		verify(in_data2.Length() == 5);
		verify(in_data1.DistanceTo(in_data2) == 1);
		verify(in_data2.Front() == 'o');
		verify(in_data2.Back() == 'r');

		OpProtobufDataChunkRange chunk_range2 = in_data2.ChunkRange();
		verify(!chunk_range2.IsEmpty());

		// Make a copy and move to the end
		OpProtobufDataRange in_data3 = in_data1;
		verify(!in_data3.IsEmpty());
		verify(in_data3.Length() == 6);
		verify(in_data1.DistanceTo(in_data3) == 0);

		in_data3.PopFront(6);
		verify(in_data3.IsEmpty());
		verify(in_data3.Length() == 0);
		verify(in_data1.DistanceTo(in_data3) == 6);

		OpProtobufDataChunkRange chunk_range3 = in_data3.ChunkRange();
		verify(chunk_range3.IsEmpty());

		// Make a copy and move back one byte backward
		OpProtobufDataRange in_data4 = in_data1;
		verify(!in_data4.IsEmpty());
		verify(in_data4.Length() == 6);
		verify(in_data1.DistanceTo(in_data4) == 0);

		in_data4.PopBack();
		verify(!in_data4.IsEmpty());
		verify(in_data4.Length() == 5);
		verify(in_data1.DistanceTo(in_data4) == 0);
		verify(in_data4.Front() == 'f');
		verify(in_data4.Back() == 'a');

		in_data4.PopFront();
		verify(!in_data4.IsEmpty());
		verify(in_data4.Length() == 4);
		verify(in_data1.DistanceTo(in_data4) == 1);
		verify(in_data4.Front() == 'o');
		verify(in_data4.Back() == 'a');

		OpProtobufDataChunkRange chunk_range4 = in_data4.ChunkRange();
		verify(!chunk_range4.IsEmpty());

	}
}

test ("OpProtobufDataRange: OpData: consume")
{
	OpData data1;
	verify_success(data1.SetConstData("foobar"));
	{
		OpProtobufDataRange in_data1(data1, 6);
		verify(!in_data1.IsEmpty());
		verify(in_data1.Length() == 6);
		verify(in_data1.DistanceTo(in_data1) == 0);
		verify(in_data1.Front() == 'f');
		verify(in_data1.Back() == 'r');

		in_data1.PopFront();
		verify(in_data1.Length() == 5);
		verify(in_data1.DistanceTo(in_data1) == 0);
		verify(in_data1.Front() == 'o');
		verify(in_data1.Back() == 'r');
		OpProtobufDataChunkRange chunk_range1 = in_data1.ChunkRange();
		verify(!chunk_range1.IsEmpty());
		OpProtobufDataChunk chunk = chunk_range1.Front();
		verify(chunk.GetData()[0] == 'o');
		verify(chunk.GetLength() == 5);
	}
}

test ("OpProtobufDataRange: OpData: slice")
{
	OpData data1;
	verify_success(data1.SetConstData("foobar"));
	{
		OpProtobufDataRange in_data1(data1, 6);
		verify(!in_data1.IsEmpty());
		verify(in_data1.Length() == 6);
		verify(in_data1.DistanceTo(in_data1) == 0);
		verify(in_data1.Front() == 'f');
		verify(in_data1.Back() == 'r');

		OpProtobufDataRange in_data2(in_data1, 4);
		verify(!in_data2.IsEmpty());
		verify(in_data2.Length() == 4);
		verify(in_data2.DistanceTo(in_data1) == 0);
		verify(in_data2.Front() == 'f');
		verify(in_data2.Back() == 'b');

		in_data2.PopFront();
		verify(in_data2.Length() == 3);
		verify(in_data1.DistanceTo(in_data2) == 1);
		verify(in_data2.Front() == 'o');
		verify(in_data2.Back() == 'b');
		OpProtobufDataChunkRange chunk_range1 = in_data2.ChunkRange();
		verify(!chunk_range1.IsEmpty());
		{
			OpProtobufDataChunk chunk = chunk_range1.Front();
			verify(chunk.GetLength() == 3);
			verify(chunk.GetData()[0] == 'o');
			verify(chunk.GetData()[1] == 'o');
			verify(chunk.GetData()[2] == 'b');
		}
		in_data2.PopBack();
		verify(in_data2.Length() == 2);
		verify(in_data1.DistanceTo(in_data2) == 1);
		verify(in_data2.Front() == 'o');
		verify(in_data2.Back() == 'o');
		OpProtobufDataChunkRange chunk_range2 = in_data2.ChunkRange();
		verify(!chunk_range2.IsEmpty());
		{
			OpProtobufDataChunk chunk = chunk_range2.Front();
			verify(chunk.GetLength() == 2);
			verify(chunk.GetData()[0] == 'o');
			verify(chunk.GetData()[1] == 'o');
		}
	}
}
