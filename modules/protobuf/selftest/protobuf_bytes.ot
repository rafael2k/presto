/* -*- mode: c++; tab-width: 4 -*-
**
** Copyright (C) 2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Test for Protocol Buffer wire format and proto types.
**
** Jan Borsodi
*/

group "protobuf.bytes";

require init;
require PROTOBUF_SUPPORT;

language c++;

include "modules/protobuf/src/generated/g_proto_protobuf_bytes.h";

global
{
	static BOOL IsEqual(const char *a, const char *b, int len)
	{
		for (int i = 0; i < len; ++i)
			if (*a++ != *b++)
				return FALSE;
		return TRUE;
	}

	static BOOL IsEqual(const ByteBuffer &a, const char *b, unsigned int len)
	{
		if (a.Length() != len)
			return FALSE;
		OpHeapArrayAnchor<char> tmp(a.Copy(FALSE));
		if (tmp.Get() == NULL)
			return FALSE;
		return IsEqual(tmp.Get(), b, len);
	}

	static BOOL IsEqual(const ByteBuffer &a, const unsigned char *b, unsigned int len)
	{
		return IsEqual(a, reinterpret_cast<const char *>(b), len);
	}
}

// Tests the generated API for bytes in protobuf messages.

test("TestBytes: Creation")
{
	// Initialize with empty byte arrays
	{
		OpProtobufBytes_MessageSet::TestBytes test_bytes;

		verify(test_bytes.HasBytes1());
		verify(test_bytes.HasBytes2());
		verify(!test_bytes.HasBytes3());
		verify(!test_bytes.HasBytes4());
		verify(!test_bytes.HasBytes5());
		verify(!test_bytes.HasBytes6());

		verify(test_bytes.GetBytes1().Length() == 0);
		verify(test_bytes.GetBytes2().Length() == 0);
		verify(test_bytes.GetBytes5().GetCount() == 0);
		verify(test_bytes.GetBytes6().GetCount() == 0);
	}

	// Initialize bytes via Construct()
	{
		OpData bytes1;
		ByteBuffer bytes2;
		verify_success(bytes1.SetCopyData("death rally"));
		verify_success(bytes2.AppendBytes("purple motion", 13));

		OpProtobufBytes_MessageSet::TestBytes test_bytes(bytes1);
		verify_success(test_bytes.Construct(bytes2));

		verify(test_bytes.HasBytes1());
		verify(test_bytes.HasBytes2());
		verify(!test_bytes.HasBytes3());
		verify(!test_bytes.HasBytes4());
		verify(!test_bytes.HasBytes5());
		verify(!test_bytes.HasBytes6());

		verify_string(test_bytes.GetBytes1(), "death rally");
		verify(IsEqual(test_bytes.GetBytes2(), "purple motion", 13));
		verify(test_bytes.GetBytes5().GetCount() == 0);
		verify(test_bytes.GetBytes6().GetCount() == 0);
	}

	// Initialize bytes via Construct(), include optional fields
	{
		OpData bytes1;
		ByteBuffer bytes2;
		OpData bytes3;
		ByteBuffer bytes4;
		verify_success(bytes1.SetCopyData("death rally"));
		verify_success(bytes2.AppendBytes("purple motion", 13));
		verify_success(bytes3.SetCopyData("2nd reality"));
		verify_success(bytes4.AppendBytes("skaven", 6));

		OpProtobufBytes_MessageSet::TestBytes test_bytes(bytes1, &bytes3);
		verify_success(test_bytes.Construct(bytes2, &bytes4));

		verify(test_bytes.HasBytes1());
		verify(test_bytes.HasBytes2());
		verify(test_bytes.HasBytes3());
		verify(test_bytes.HasBytes4());
		verify(!test_bytes.HasBytes5());
		verify(!test_bytes.HasBytes6());

		verify_string(test_bytes.GetBytes1(), "death rally");
		verify(IsEqual(test_bytes.GetBytes2(), "purple motion", 13));
		verify_string(test_bytes.GetBytes3(), "2nd reality");
		verify(IsEqual(test_bytes.GetBytes4(), "skaven", 6));
		verify(test_bytes.GetBytes5().GetCount() == 0);
		verify(test_bytes.GetBytes6().GetCount() == 0);
	}
}

test("TestBytes: Modification")
{
	// Modify strings using char pointers
	{
		OpProtobufBytes_MessageSet::TestBytes test_bytes;

		verify_success(test_bytes.SetBytes1("Hellmarch", 9));
		verify_success(test_bytes.SetBytes2("Industrial", 10));

		verify(test_bytes.HasBytes1());
		verify(test_bytes.HasBytes2());
		verify(!test_bytes.HasBytes3());
		verify(!test_bytes.HasBytes4());
		verify(!test_bytes.HasBytes5());
		verify(!test_bytes.HasBytes6());

		verify_string(test_bytes.GetBytes1(), "Hellmarch");
		verify(IsEqual(test_bytes.GetBytes2(), "Industrial", 10));
		verify(test_bytes.GetBytes5().GetCount() == 0);
		verify(test_bytes.GetBytes6().GetCount() == 0);

		verify_success(test_bytes.SetBytes3("Crush", 5));
		verify_success(test_bytes.SetBytes4("Smash", 5));

		verify(test_bytes.HasBytes1());
		verify(test_bytes.HasBytes2());
		verify(test_bytes.HasBytes3());
		verify(test_bytes.HasBytes4());
		verify(!test_bytes.HasBytes5());
		verify(!test_bytes.HasBytes6());

		verify_string(test_bytes.GetBytes3(), "Crush");
		verify(IsEqual(test_bytes.GetBytes4(), "Smash", 5));
		verify(test_bytes.GetBytes5().GetCount() == 0);
		verify(test_bytes.GetBytes6().GetCount() == 0);
	}

	// Modifying bytes using objects
	{
		OpProtobufBytes_MessageSet::TestBytes test_bytes;

		OpData bytes1;
		ByteBuffer bytes2;
		verify_success(bytes1.SetCopyData("Act On Instinct"));
		verify_success(bytes2.AppendBytes("No Mercy", 8));

		verify_success(test_bytes.SetBytes1(bytes1));
		verify_success(test_bytes.SetBytes2(bytes2));

		verify(test_bytes.HasBytes1());
		verify(test_bytes.HasBytes2());
		verify(!test_bytes.HasBytes3());
		verify(!test_bytes.HasBytes4());
		verify(!test_bytes.HasBytes5());
		verify(!test_bytes.HasBytes6());

		verify_string(test_bytes.GetBytes1(), "Act On Instinct");
		verify(IsEqual(test_bytes.GetBytes2(), "No Mercy", 8));
		verify(test_bytes.GetBytes5().GetCount() == 0);
		verify(test_bytes.GetBytes6().GetCount() == 0);

		verify_success(test_bytes.SetBytes3(bytes1));
		verify_success(test_bytes.SetBytes4(bytes2));

		verify(test_bytes.HasBytes1());
		verify(test_bytes.HasBytes2());
		verify(test_bytes.HasBytes3());
		verify(test_bytes.HasBytes4());
		verify(!test_bytes.HasBytes5());
		verify(!test_bytes.HasBytes6());

		verify_string(test_bytes.GetBytes3(), "Act On Instinct");
		verify(IsEqual(test_bytes.GetBytes4(), "No Mercy", 8));
		verify(test_bytes.GetBytes5().GetCount() == 0);
		verify(test_bytes.GetBytes6().GetCount() == 0);
	}

	// Modifying strings using references
	{
		OpProtobufBytes_MessageSet::TestBytes test_bytes;

		verify_success(test_bytes.GetBytes1Ref().SetCopyData("Drill"));
		verify_success(test_bytes.GetBytes2Ref().AppendBytes("Rain In The Night", 17));

		verify(test_bytes.HasBytes1());
		verify(test_bytes.HasBytes2());
		verify(!test_bytes.HasBytes3());
		verify(!test_bytes.HasBytes4());
		verify(!test_bytes.HasBytes5());
		verify(!test_bytes.HasBytes6());

		verify_string(test_bytes.GetBytes1(), "Drill");
		verify(IsEqual(test_bytes.GetBytes2(), "Rain In The Night", 17));
		verify(test_bytes.GetBytes5().GetCount() == 0);
		verify(test_bytes.GetBytes6().GetCount() == 0);

		verify_success(test_bytes.GetBytes3Ref().SetCopyData("The Vats"));
		verify_success(test_bytes.GetBytes4Ref().AppendBytes("Shady Sands", 11));

		verify(test_bytes.HasBytes1());
		verify(test_bytes.HasBytes2());
		verify(test_bytes.HasBytes3());
		verify(test_bytes.HasBytes4());
		verify(!test_bytes.HasBytes5());
		verify(!test_bytes.HasBytes6());

		verify_string(test_bytes.GetBytes3(), "The Vats");
		verify(IsEqual(test_bytes.GetBytes4(), "Shady Sands", 11));
		verify(test_bytes.GetBytes5().GetCount() == 0);
		verify(test_bytes.GetBytes6().GetCount() == 0);
	}
}

test("TestBytes: Appending")
{
	// Appending test_bytes using references
	{
		OpProtobufBytes_MessageSet::TestBytes test_bytes;

		OpData bytes5;
		verify_success(bytes5.SetCopyData("Megaton"));
		OpAutoPtr<ByteBuffer> bytes6(OP_NEW(ByteBuffer, ()));
		verify(bytes6.get());
		verify_success(bytes6->AppendBytes("Jacobs Town", 11));

		verify_success(test_bytes.GetBytes5Ref().Add(bytes5));
		verify_success(test_bytes.GetBytes6Ref().Add(bytes6.get()));
		bytes6.release();

		verify(test_bytes.HasBytes1());
		verify(test_bytes.HasBytes2());
		verify(!test_bytes.HasBytes3());
		verify(!test_bytes.HasBytes4());
		verify(test_bytes.HasBytes5());
		verify(test_bytes.HasBytes6());

		verify(test_bytes.GetBytes1().Length() == 0);
		verify(test_bytes.GetBytes2().Length() == 0);
		verify(test_bytes.GetBytes5().GetCount() == 1);
		verify(test_bytes.GetBytes6().GetCount() == 1);
		verify_string(test_bytes.GetBytes5().Get(0), "Megaton");
		verify(IsEqual(*test_bytes.GetBytes6().Get(0), "Jacobs Town", 11));
	}

	// Appending test_bytes using AppendTo helper methods
	{
		OpProtobufBytes_MessageSet::TestBytes test_bytes;

		OpData bytes5;
		verify_success(bytes5.SetCopyData("Fire"));
		ByteBuffer bytes6;
		verify_success(bytes6.AppendBytes("Ice", 3));

		verify_success(test_bytes.AppendToBytes5(bytes5));
		verify_success(test_bytes.AppendToBytes6(bytes6));

		verify(test_bytes.HasBytes1());
		verify(test_bytes.HasBytes2());
		verify(!test_bytes.HasBytes3());
		verify(!test_bytes.HasBytes4());
		verify(test_bytes.HasBytes5());
		verify(test_bytes.HasBytes6());

		verify(test_bytes.GetBytes1().Length() == 0);
		verify(test_bytes.GetBytes2().Length() == 0);
		verify(test_bytes.GetBytes5().GetCount() == 1);
		verify(test_bytes.GetBytes6().GetCount() == 1);
		verify_string(test_bytes.GetBytes5().Get(0), "Fire");
		verify(IsEqual(*test_bytes.GetBytes6().Get(0), "Ice", 3));
	}

	// Appending test_bytes using AppendTo(const char *) helper methods
	{
		OpProtobufBytes_MessageSet::TestBytes test_bytes;

		verify_success(test_bytes.AppendToBytes5("Turrican", 8));
		verify_success(test_bytes.AppendToBytes6("Huelsbeck", 9));
		const char *bytes = "Turrican Chris Huelsbeck";
		verify_success(test_bytes.AppendToBytes5(bytes, 8)); // Turrican
		verify_success(test_bytes.AppendToBytes6(bytes + 9, 5)); // Chris

		verify(test_bytes.HasBytes1());
		verify(test_bytes.HasBytes2());
		verify(!test_bytes.HasBytes3());
		verify(!test_bytes.HasBytes4());
		verify(test_bytes.HasBytes5());
		verify(test_bytes.HasBytes6());

		verify(test_bytes.GetBytes1().Length() == 0);
		verify(test_bytes.GetBytes2().Length() == 0);
		verify(test_bytes.GetBytes5().GetCount() == 2);
		verify(test_bytes.GetBytes6().GetCount() == 2);
		verify_string(test_bytes.GetBytes5().Get(0), "Turrican");
		verify(IsEqual(*test_bytes.GetBytes6().Get(0), "Huelsbeck", 9));
		verify_string(test_bytes.GetBytes5().Get(1), "Turrican");
		verify(IsEqual(*test_bytes.GetBytes6().Get(1), "Chris", 5));
	}
}
