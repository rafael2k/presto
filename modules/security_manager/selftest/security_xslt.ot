/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2007 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "security_manager.security_xslt";

require XSLT_SUPPORT;

include "modules/security_manager/include/security_manager.h";
include "modules/url/url2.h";

table test_url_security(const char* testname, OpSecurityManager::Operation op, const uni_char* url1string, const uni_char* url2string, BOOL expected)
{
	{ "Import/Include: Same host: Allow",
			OpSecurityManager::XSLT_IMPORT_OR_INCLUDE,
			UNI_L("http://www.example.com/"),
			UNI_L("http://www.example.com/style.xsl"), TRUE },
	{ "Import/Include: Same host, different ports: Disallow",
			OpSecurityManager::XSLT_IMPORT_OR_INCLUDE,
			UNI_L("http://www.example.com/"),
			UNI_L("http://www.example.com:8080/style.xsl"), FALSE },
	{ "Import/Include: Different hosts: Disallow",
			OpSecurityManager::XSLT_IMPORT_OR_INCLUDE,
			UNI_L("http://www.example.com/"),
			UNI_L("http://foobar.example.com/style.xsl"), FALSE },
	{ "Import/Include: 'data' scheme: Allow",
			OpSecurityManager::XSLT_IMPORT_OR_INCLUDE,
			UNI_L("http://www.example.com/"),
			UNI_L("data:text/xml,foo"), TRUE },
	{ "Document: Same host: Allow",
			OpSecurityManager::XSLT_DOCUMENT,
			UNI_L("http://www.example.com/"),
			UNI_L("http://www.example.com/resource.xml"), TRUE },
	{ "Document: Same host, different ports: Disallow",
			OpSecurityManager::XSLT_DOCUMENT,
			UNI_L("http://www.example.com/"),
			UNI_L("http://www.example.com:8080/resource.xml"), FALSE },
	{ "Document: Different hosts: Disallow",
			OpSecurityManager::XSLT_DOCUMENT,
			UNI_L("http://www.example.com/"),
			UNI_L("http://foobar.example.com/resource.xml"), FALSE },
	{ "Document: 'data' scheme: Allow",
			OpSecurityManager::XSLT_DOCUMENT,
			UNI_L("http://www.example.com/"),
			UNI_L("data:text/xml,foo"), TRUE },
}

foreach (testname, op, url1string, url2string, expected) from test_url_security
{
	test(testname)
	{
		URL url1 = g_url_api->GetURL(url1string);
		URL url2 = g_url_api->GetURL(url2string);
		OpSecurityContext context1(url1);
		OpSecurityContext context2(url2);
		BOOL allowed = FALSE;
		verify_success(OpSecurityManager::CheckSecurity(op, context1, context2, allowed));
		verify(allowed == expected);
	}
}
