/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "security_manager.cors.manager";
require init;
require CORS_SUPPORT;

language c++;

include "modules/security_manager/src/cors/cors_request.h";
include "modules/security_manager/src/cors/cors_manager.h";
include "modules/url/url2.h";
include "modules/url/url_man.h";

global
{
	OpCrossOrigin_Request *request = NULL;
	const uni_char *origin_url_str = NULL;
	URL origin_url;
	URL request_url;
}

setup
{
	origin_url_str = UNI_L("http://www.a.com");
	origin_url = g_url_api->GetURL("http://www.a.com/path/somewhere/foo.txt", static_cast<const char *>(NULL), TRUE);
	request_url = g_url_api->GetURL("http://www.b.com/", static_cast<const char *>(NULL), TRUE);
}

exit
{
	origin_url = URL();
	request_url = URL();
}

test("Manager #1")
	language c++;
{
	OpCrossOrigin_Manager *manager = NULL;
	verify_success(OpCrossOrigin_Manager::Make(manager));

	const uni_char *method = UNI_L("POST");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));

	BOOL allowed;
	verify_success(manager->VerifyCrossOriginAccess(request, request_url, allowed));
	verify(!allowed);
}
finally
{
	OP_DELETE(manager);
	OP_DELETE(request);
	request = NULL;
}

test("Manager #2")
	language c++;
{
	OpCrossOrigin_Manager *manager = NULL;
	verify_success(OpCrossOrigin_Manager::Make(manager));

	const uni_char *method = UNI_L("GET");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));

	// Non-credentialled GET request (simple) => no preflight.
	verify(!manager->RequiresPreflight(*request));

	// Credentialled GET (simple) => no preflight.
	OP_DELETE(request);
	with_credentials = TRUE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));
	verify(!manager->RequiresPreflight(*request));

	// Credentialled custom method (non-simple & nothing in preflight cache) => preflight please.
	OP_DELETE(request);
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, UNI_L("XFOO"), with_credentials, is_anon));
	verify(manager->RequiresPreflight(*request));
}
finally
{
	OP_DELETE(manager);
	OP_DELETE(request);
	request = NULL;
}
