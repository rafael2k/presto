/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "security_manager.cors.preflight";
require init;
require CORS_SUPPORT;

language c++;

include "modules/security_manager/src/cors/cors_request.h";
include "modules/security_manager/src/cors/cors_loader.h";
include "modules/security_manager/src/cors/cors_preflight.h";
include "modules/url/url2.h";
include "modules/url/url_man.h";

global
{
	OpCrossOrigin_Request *request = NULL;
	const uni_char *origin_url_str = NULL;
	URL origin_url;
	URL request_url;
}

setup
{
	origin_url_str = UNI_L("http://www.a.com");
	origin_url = g_url_api->GetURL("http://www.a.com/path/somewhere/foo.txt", static_cast<const char *>(NULL), TRUE);
	request_url = g_url_api->GetURL("http://www.b.com/", static_cast<const char *>(NULL), TRUE);
}

exit
{
	origin_url = URL();
	request_url = URL();
}

test("Preflight max")
	language c++;
{
	unsigned default_max = 20;
	unsigned max_max = 40;
	OpCrossOrigin_PreflightCache *cache = NULL;
	verify_success(OpCrossOrigin_PreflightCache::Make(cache, default_max, max_max));
	verify(cache != NULL);
	verify(cache->GetDefaultMaxAge() == default_max);
	verify(cache->GetMaximumMaxAge() == max_max);
}
finally
{
	OP_DELETE(cache);
}

test("Preflight allow")
	language c++;
{
	unsigned default_max = 20;
	unsigned max_max = 40;
	OpCrossOrigin_PreflightCache *cache = NULL;
	verify_success(OpCrossOrigin_PreflightCache::Make(cache, default_max, max_max));
	verify(cache != NULL);

	const uni_char *method = UNI_L("GET");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));

	verify(cache->AllowUpdates(*request));
}
finally
{
	OP_DELETE(cache);
	OP_DELETE(request);
	request = NULL;
}

test("Preflight update")
	language c++;
{
	unsigned default_max = 20;
	unsigned max_max = 40000;
	OpCrossOrigin_PreflightCache *cache = NULL;
	verify_success(OpCrossOrigin_PreflightCache::Make(cache, default_max, max_max));
	verify(cache != NULL);

	const uni_char *method = UNI_L("POST");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));

	OpVector<OpString> methods;
	OpString method_str;
	verify_success(method_str.Set(method));
	verify_success(methods.Add(&method_str));

	verify_success(cache->UpdateMethodCache(methods, *request, 200));

	OpVector<OpString> headers;
	verify_success(cache->UpdateHeaderCache(headers, *request, 200));
}
finally
{
	OP_DELETE(cache);
	OP_DELETE(request);
	request = NULL;
}

test("Preflight lookup method #1")
	language c++;
{
	unsigned default_max = 20;
	unsigned max_max = 40000;
	OpCrossOrigin_PreflightCache *cache = NULL;
	verify_success(OpCrossOrigin_PreflightCache::Make(cache, default_max, max_max));
	verify(cache != NULL);

	const uni_char *method = UNI_L("POST");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));

	OpVector<OpString> methods;
	OpString method_str;
	verify_success(method_str.Set(method));
	verify_success(methods.Add(&method_str));

	verify_success(cache->UpdateMethodCache(methods, *request, 200));
	verify(cache->MethodMatch(*request));

	cache->InvalidateCache(TRUE);
	verify(!cache->MethodMatch(*request));

	verify_success(cache->UpdateMethodCache(methods, *request, 200));
	verify(cache->MethodMatch(*request));
}
finally
{
	OP_DELETE(cache);
	OP_DELETE(request);
	request = NULL;
}

test("Preflight lookup method #2")
	language c++;
{
	unsigned default_max = 20;
	unsigned max_max = 40000;
	OpCrossOrigin_PreflightCache *cache = NULL;
	verify_success(OpCrossOrigin_PreflightCache::Make(cache, default_max, max_max));
	verify(cache != NULL);

	const uni_char *method = UNI_L("POST");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));

	OpVector<OpString> methods;
	OpString method_str;
	verify_success(method_str.Set(UNI_L("GET")));
	verify_success(methods.Add(&method_str));

	verify_success(cache->UpdateMethodCache(methods, *request, 200));
	verify(!cache->MethodMatch(*request));

	cache->InvalidateCache(TRUE);
	verify(!cache->MethodMatch(*request));
}
finally
{
	OP_DELETE(cache);
	OP_DELETE(request);
	request = NULL;
}

test("Preflight lookup method #3")
	language c++;
{
	unsigned default_max = 20;
	unsigned max_max = 40000;
	OpCrossOrigin_PreflightCache *cache = NULL;
	verify_success(OpCrossOrigin_PreflightCache::Make(cache, default_max, max_max));
	verify(cache != NULL);

	const uni_char *method = UNI_L("POST");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));

	OpVector<OpString> methods;
	OpString method_str;
	verify_success(method_str.Set(method));
	verify_success(methods.Add(&method_str));

	verify_success(cache->UpdateMethodCache(methods, *request, 200));
	verify(cache->MethodMatch(*request));

	cache->InvalidateCache(TRUE);
	verify(!cache->MethodMatch(*request));
	verify_success(cache->UpdateMethodCache(methods, *request, 0));
	/* Should immediately expire. */
	verify(!cache->MethodMatch(*request));
}
finally
{
	OP_DELETE(cache);
	OP_DELETE(request);
	request = NULL;
}

test("Preflight lookup method #4")
	language c++;
{
	unsigned default_max = 20;
	unsigned max_max = 40000;
	OpCrossOrigin_PreflightCache *cache = NULL;
	verify_success(OpCrossOrigin_PreflightCache::Make(cache, default_max, max_max));
	verify(cache != NULL);

	const uni_char *method = UNI_L("POST");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));

	OpVector<OpString> methods;
	verify_success(cache->UpdateMethodCache(methods, *request, 200));
	verify(!cache->MethodMatch(*request));
	cache->InvalidateCache(TRUE);
	verify(!cache->MethodMatch(*request));
}
finally
{
	OP_DELETE(cache);
	OP_DELETE(request);
	request = NULL;
}

test("Preflight lookup header #1")
	language c++;
{
	unsigned default_max = 20;
	unsigned max_max = 40000;
	OpCrossOrigin_PreflightCache *cache = NULL;
	verify_success(OpCrossOrigin_PreflightCache::Make(cache, default_max, max_max));
	verify(cache != NULL);

	const uni_char *method = UNI_L("POST");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));

	const uni_char *header_1 = UNI_L("X-Extra-1");
	const uni_char *header_2 = UNI_L("X-Extra-2");
	const uni_char *header_3 = UNI_L("X-Extra");
	const uni_char *header_4 = UNI_L("X-Extra-3");

	OpVector<OpString> headers;
	OpString hdr_1;
	verify_success(hdr_1.Set(header_1));
	verify_success(headers.Add(&hdr_1));
	OpString hdr_2;
	verify_success(hdr_2.Set(header_2));
	verify_success(headers.Add(&hdr_2));

	verify_success(cache->UpdateHeaderCache(headers, *request, 200));
	verify(cache->HeaderMatch(*request, header_1));
	verify(cache->HeaderMatch(*request, header_2));
	verify(!cache->HeaderMatch(*request, header_3));
	verify(!cache->HeaderMatch(*request, header_4));

	cache->InvalidateCache(TRUE);
	verify(!cache->HeaderMatch(*request, header_1));
	verify(!cache->HeaderMatch(*request, header_2));
	verify(!cache->HeaderMatch(*request, header_3));
	verify(!cache->HeaderMatch(*request, header_4));
}
finally
{
	OP_DELETE(cache);
	OP_DELETE(request);
	request = NULL;
}

test("Preflight lookup header #2")
	language c++;
{
	unsigned default_max = 20;
	unsigned max_max = 40000;
	OpCrossOrigin_PreflightCache *cache = NULL;
	verify_success(OpCrossOrigin_PreflightCache::Make(cache, default_max, max_max));
	verify(cache != NULL);

	const uni_char *method = UNI_L("POST");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));

	const uni_char *header_1 = UNI_L("X-Extra-1");
	const uni_char *header_2 = UNI_L("X-Extra-2");
	const uni_char *header_3 = UNI_L("X-Extra");
	const uni_char *header_4 = UNI_L("X-Extra-3");

	OpVector<OpString> headers;
	OpString hdr_1;
	verify_success(hdr_1.Set(header_1));
	verify_success(headers.Add(&hdr_1));
	OpString hdr_2;
	verify_success(hdr_2.Set(header_2));
	verify_success(headers.Add(&hdr_2));

	verify_success(cache->UpdateHeaderCache(headers, *request, 200));
	verify(cache->HeaderMatch(*request, header_1));
	verify(cache->HeaderMatch(*request, header_2));
	verify(!cache->HeaderMatch(*request, header_3));
	verify(!cache->HeaderMatch(*request, header_4));

	// Update; with "0", the effect of that is invalidation.
	verify_success(cache->UpdateHeaderCache(headers, *request, 0));
	verify(!cache->HeaderMatch(*request, header_1));
	verify(!cache->HeaderMatch(*request, header_2));
	verify(!cache->HeaderMatch(*request, header_3));
	verify(!cache->HeaderMatch(*request, header_4));
}
finally
{
	OP_DELETE(cache);
	OP_DELETE(request);
	request = NULL;
}

test("Preflight remove requests #1")
	language c++;
{
	unsigned default_max = 20;
	unsigned max_max = 40000;
	OpCrossOrigin_PreflightCache *cache = NULL;
	verify_success(OpCrossOrigin_PreflightCache::Make(cache, default_max, max_max));
	verify(cache != NULL);

	const uni_char *method = UNI_L("POST");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));

	const uni_char *header_1 = UNI_L("X-Extra-1");
	const uni_char *header_2 = UNI_L("X-Extra-2");
	const uni_char *header_3 = UNI_L("X-Extra");
	const uni_char *header_4 = UNI_L("X-Extra-3");

	OpVector<OpString> headers;
	OpString hdr_1;
	verify_success(hdr_1.Set(header_1));
	verify_success(headers.Add(&hdr_1));
	OpString hdr_2;
	verify_success(hdr_2.Set(header_2));
	verify_success(headers.Add(&hdr_2));

	verify_success(cache->UpdateHeaderCache(headers, *request, 200));
	verify(cache->HeaderMatch(*request, header_1));
	verify(cache->HeaderMatch(*request, header_2));
	verify(!cache->HeaderMatch(*request, header_3));
	verify(!cache->HeaderMatch(*request, header_4));

	cache->RemoveOriginRequests(origin_url_str, request->GetURL());
	verify(!cache->HeaderMatch(*request, header_1));
	verify(!cache->HeaderMatch(*request, header_2));
	verify(!cache->HeaderMatch(*request, header_3));
	verify(!cache->HeaderMatch(*request, header_4));
}
finally
{
	OP_DELETE(cache);
	OP_DELETE(request);
	request = NULL;
}

test("Preflight remove requests #2")
	language c++;
{
	unsigned default_max = 20;
	unsigned max_max = 40000;
	OpCrossOrigin_PreflightCache *cache = NULL;
	verify_success(OpCrossOrigin_PreflightCache::Make(cache, default_max, max_max));
	verify(cache != NULL);

	const uni_char *method = UNI_L("POST");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));

	OpVector<OpString> methods;
	OpString method_str;
	verify_success(method_str.Set(method));
	verify_success(methods.Add(&method_str));

	verify_success(cache->UpdateMethodCache(methods, *request, 200));
	verify(cache->MethodMatch(*request));

	cache->RemoveOriginRequests(origin_url_str, request->GetURL());
	verify(!cache->MethodMatch(*request));
}
finally
{
	OP_DELETE(cache);
	OP_DELETE(request);
	request = NULL;
}

