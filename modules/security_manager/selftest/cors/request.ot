/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "security_manager.cors.request";
require init;
require CORS_SUPPORT;

language c++;

include "modules/security_manager/src/cors/cors_request.h";
include "modules/url/url2.h";
include "modules/url/url_man.h";

global
{
	OpCrossOrigin_Request *request = NULL;
	const uni_char *origin_url_str = NULL;
	const uni_char *request_url_str = NULL;
	const uni_char *request_url2_str = NULL;
	URL origin_url;
	URL request_url;
	URL request_url2;
}

setup
{
	origin_url_str = UNI_L("http://www.a.com");
	request_url_str = UNI_L("http://www.b.com");
	request_url2_str = UNI_L("http://www.c.com");
	origin_url = g_url_api->GetURL("http://www.a.com/path/somewhere/foo.txt", static_cast<const char *>(NULL), TRUE);
	request_url = g_url_api->GetURL("http://www.b.com/", static_cast<const char *>(NULL), TRUE);
	request_url2 = g_url_api->GetURL("http://www.c.com/", static_cast<const char *>(NULL), TRUE);
}

exit
{
	origin_url = URL();
	request_url = URL();
}

test("Request #1")
  language c++;
{
	foreach (METHOD) from
	{
	    { UNI_L("GET") }
	    { UNI_L("POST") }
	}
	{
		{
			verify(origin_url.IsValid());
			verify(request_url.IsValid());

			BOOL with_credentials = FALSE;
			BOOL is_anon = FALSE;
			verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, METHOD, with_credentials, is_anon));
			OpAutoPtr<OpCrossOrigin_Request> anchor_request(request);

			verify(request->GetStatus() == OpCrossOrigin_Request::Initial);
			verify(request->IsSimple());
			verify_string(request->GetMethod(), METHOD);
			verify_string(request->GetOrigin(), origin_url_str);
		}
	}
}

test("Request #2")
  language c++;
{
	verify(origin_url.IsValid());
	verify(request_url.IsValid());

	const uni_char *method = UNI_L("HEAD");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));

	verify(request->GetStatus() == OpCrossOrigin_Request::Initial);
	verify(request->IsSimple());
	verify_string(request->GetMethod(), method);
	verify_string(request->GetOrigin(), origin_url_str);
}
finally
{
	OP_DELETE(request);
	request = NULL;
}

test("Request #3")
  language c++;
{
	verify(origin_url.IsValid());
	verify(request_url.IsValid());

	const uni_char *method = UNI_L("DELETE");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));

	verify(request->GetStatus() == OpCrossOrigin_Request::Initial);
	verify(!request->IsSimple());
	verify_string(request->GetMethod(), method);
	verify_string(request->GetOrigin(), origin_url_str);
}
finally
{
	OP_DELETE(request);
	request = NULL;
}

test("Request #4")
  language c++;
{
	verify(origin_url.IsValid());
	verify(request_url.IsValid());

	const uni_char *method = UNI_L("GET");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));

	/* Accept, Accept-Language, Content-Language are simple request headers
	   (together with Content-Type: X (for some X.) */

	verify(request->GetStatus() == OpCrossOrigin_Request::Initial);
	verify(request->IsSimple());
	verify_success(request->AddHeader("AcCept"));
	verify(request->IsSimple());
	verify_success(request->AddHeader("Accept-Language"));
	verify(request->IsSimple());
	verify_success(request->AddHeader("Content-Language"));
	verify(request->IsSimple());
	verify_success(request->AddHeader("Content-Language", "application/x-www-form-urlencoded"));
	verify(request->IsSimple());
	verify_success(request->AddHeader("Content-Language", "multipart/form-data"));
	verify(request->IsSimple());
	verify_success(request->AddHeader("Content-Language", "text/plain"));
	verify(request->IsSimple());
	verify_success(request->AddHeader("Accept-languager"));
	verify(!request->IsSimple());
	/* Verify that request 'simplicity' is not reset by adding a simple */
	verify_success(request->AddHeader("Content-Language"));
	verify(!request->IsSimple());
	verify_string(request->GetMethod(), method);
	verify_string(request->GetOrigin(), origin_url_str);
}
finally
{
	OP_DELETE(request);
	request = NULL;
}

test("Request Origin")
  language c++;
{
	verify(origin_url.IsValid());
	verify(request_url.IsValid());

	verify(origin_url.IsValid());
	verify(request_url.IsValid());

	const uni_char *method = UNI_L("GET");
	BOOL with_credentials = FALSE;
	BOOL is_anon = FALSE;
	verify_success(OpCrossOrigin_Request::Make(request, origin_url, request_url, method, with_credentials, is_anon));
	OpAutoPtr<OpCrossOrigin_Request> anchor_request(request);
	OpAutoPtr<OpString> origin_str(OP_NEW(OpString, ()));
	verify_success(request->ToOriginString(*origin_str.get()));
	verify(origin_str->Compare(origin_url_str) == 0);

	// Adding a redirect extends the Origin: string.
	verify_success(request->AddRedirect(request_url));
	verify_success(request->ToOriginString(*origin_str.get()));

	OpString expected;
	verify_success(expected.Set(origin_url_str));
	verify(origin_str->Compare(expected) == 0);

	// Adding a same-origin redirect should not be
	// included in the Origin: list, successive duplicates
	// should not be present.
	verify_success(request->AddRedirect(request_url));
	verify_success(request->ToOriginString(*origin_str.get()));
	verify(origin_str->Compare(expected) == 0);

	verify_success(request->AddRedirect(request_url2));
	verify_success(request->ToOriginString(*origin_str.get()));
	verify(origin_str->Compare("null") == 0);
}
