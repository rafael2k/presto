/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "security_manager.security_utilities";

include "modules/security_manager/include/security_manager.h";
include "modules/security_manager/src/security_utilities.h";

global
{
	IPv4Address CreateIPv4(unsigned a, unsigned b, unsigned c, unsigned d)
	{
		return ((a & 0xff) << 24) | ((b & 0xff) << 16) | ((c & 0xff) << 8) | (d & 0xff);
	}

	void CreateIPv6(IPv6Address &addr, unsigned input[8])
	{
		for (unsigned i = 0; i < 8; ++i)
		{
			addr[i*2] = (input[i] >> 8) & 0xff;
			addr[i*2 + 1] = input[i] & 0xff;
		}
	}

	class TestSocketAddressIPv6
		: public OpSocketAddress
	{
	private:
		const uni_char *literal;
	public:
		TestSocketAddressIPv6(const uni_char *addr)
			: literal(addr)
		{
		}

		virtual ~TestSocketAddressIPv6()
		{
		}

		virtual OP_STATUS ToString(OpString *result)
		{
			return result->Set(literal);
		}

		virtual OP_STATUS FromString(const uni_char *address_string)
		{
			return OpStatus::OK;
		}

		virtual BOOL IsValid()
		{
			return TRUE;
		}

		virtual void SetPort(UINT port)
		{
		}

		virtual UINT Port()
		{
			return 80;
		}

		virtual OP_STATUS Copy(OpSocketAddress *socket_address)
		{
			return OpStatus::ERR;
		}

		virtual BOOL IsEqual(OpSocketAddress *s)
		{
			return (this == s);
		}

		virtual BOOL IsHostEqual(OpSocketAddress *s)
		{
			return (this == s);
		}
		virtual OpSocketAddress::Family GetAddressFamily() const
		{
			return UnknownFamily;
		}
		virtual OpSocketAddressNetType GetNetType()
		{
			return NETTYPE_UNDETERMINED;
		}
	};
}

foreach (OUTPUT, INPUT) from
{
	{ "127.0.0.1", {127, 0, 0, 1} }
	{ "0.0.0.0", {0, 0, 0, 0} }
	{ "255.255.255.255", {255, 255, 255, 255} }
	{ "192.168.1.2", {192, 168, 1, 2} }
}
{
	test("Export IPv4 address: " OUTPUT)
	{
		unsigned input[4] = INPUT;
		IPv4Address addr = CreateIPv4(input[0], input[1], input[2], input[3]);
		OpString text;
		verify_success(IPAddress::Export(addr, text));
		const uni_char *expected = UNI_L(OUTPUT);
		verify_string(text, expected);
	}
}

foreach (OUTPUT, INPUT) from
{
	{ "0:0:0:0:0:0:0:1", {0, 0, 0, 0, 0, 0, 0, 1} }
	{ "0:0:0:0:0:0:0:0", {0, 0, 0, 0, 0, 0, 0, 0} }
	{ "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", {0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff} }
	{ "2001:db8:1f70:0:999:de8:7648:6e8", {0x2001, 0xdb8, 0x1f70, 0x0, 0x999, 0xde8, 0x7648, 0x6e8} }
}
{
	test("Export IPv6 address #1: " OUTPUT)
	{
		unsigned input[8] = INPUT;
		IPv6Address addr;
		CreateIPv6(addr, input);
		OpString text;
		verify_success(IPAddress::Export(addr, text));
		const uni_char *expected = UNI_L(OUTPUT);
		verify_string(text, expected);
	}
}

foreach (OUTPUT, INPUT) from
{
	{ "::1", {0, 0, 0, 0, 0, 0, 0, 1} }
	{ "::", {0, 0, 0, 0, 0, 0, 0, 0} }
	{ "2::", {2, 0, 0, 0, 0, 0, 0, 0} }
	{ "2::2", {2, 0, 0, 0, 0, 0, 0, 2} }
	{ "2:2::2", {2, 2, 0, 0, 0, 0, 0, 2} }
	{ "2:2::", {2, 2, 0, 0, 0, 0, 0, 0} }
	{ "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", {0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff} }
	{ "2001:db8:1f70::de8:7648:6e8", {0x2001, 0xdb8, 0x1f70, 0x0, 0x0, 0xde8, 0x7648, 0x6e8} }
}
{
	test("Export IPv6 address #2: " OUTPUT)
	{
		unsigned input[8] = INPUT;
		IPv6Address addr;
		CreateIPv6(addr, input);
		OpString text;
		verify_success(IPAddress::Export(addr, text, TRUE));
		const uni_char *expected = UNI_L(OUTPUT);
		verify_string(text, expected);
	}
}

foreach (OUTPUT1, OUTPUT2, INPUT1, INPUT2) from
{
	 { "127.0.0.1", "127.0.0.1", {127, 0, 0, 1}, {127, 0, 0, 1} }
	 { "0.0.0.0", "255.255.255.255", {0, 0, 0, 0}, {255, 255, 255, 255} }
}
{
	test("Export IPv4 range #1: " OUTPUT1 " - " OUTPUT2)
	{
		unsigned input1[4] = INPUT1;
		unsigned input2[4] = INPUT2;
		IPRange range;
		range.is_ipv4 = TRUE;
		range.u.ipv4.from = CreateIPv4(input1[0], input1[1], input1[2], input1[3]);
		range.u.ipv4.to	  = CreateIPv4(input2[0], input2[1], input2[2], input2[3]);
		OpString from, to;
		verify_success(IPRange::Export(range, from, to));
		const uni_char *expected1 = UNI_L(OUTPUT1);
		const uni_char *expected2 = UNI_L(OUTPUT2);
		verify_string(from, expected1);
		verify_string(to, expected2);
	}
}

foreach (EXPECTED, INPUT1, INPUT2) from
{
	{ "127.0.0.1-127.0.0.1", {127, 0, 0, 1}, {127, 0, 0, 1} }
	{ "10.0.10.1-10.0.10.2", {10, 0, 10, 1}, {10, 0, 10, 2} }
	{ "0.0.0.0-255.255.255.255", {0, 0, 0, 0}, {255, 255, 255, 255} }
}
{
	test("Export IPv4 range #2: " EXPECTED)
	{
		unsigned input1[4] = INPUT1;
		unsigned input2[4] = INPUT2;
		IPRange range;
		range.is_ipv4 = TRUE;
		range.u.ipv4.from = CreateIPv4(input1[0], input1[1], input1[2], input1[3]);
		range.u.ipv4.to	  = CreateIPv4(input2[0], input2[1], input2[2], input2[3]);
		OpString output;
		verify_success(IPRange::Export(range, output));
		const uni_char *expected = UNI_L(EXPECTED);
		verify_string(output, expected);
	}
}

foreach (OUTPUT1, OUTPUT2, INPUT1, INPUT2) from
{
	 { "0:0:0:0:0:0:0:0", "0:0:0:0:0:0:0:1", {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 1} }
	 { "2001:db8:1f70:0:999:de8:7648:6e8", "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", {0x2001, 0xdb8, 0x1f70, 0x0, 0x999, 0xde8, 0x7648, 0x6e8}, {0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff} }
}
{
	test("Export IPv6 range: " OUTPUT1 " - " OUTPUT2)
	{
		unsigned input1[8] = INPUT1;
		unsigned input2[8] = INPUT2;
		IPRange range;
		range.is_ipv4 = FALSE;
		CreateIPv6(range.u.ipv6.from, input1);
		CreateIPv6(range.u.ipv6.to, input2);
		OpString from, to;
		verify_success(IPRange::Export(range, from, to));
		const uni_char *expected1 = UNI_L(OUTPUT1);
		const uni_char *expected2 = UNI_L(OUTPUT2);
		verify_string(from, expected1);
		verify_string(to, expected2);
	}
}

foreach (OPERATION, ADDR1, ADDR2, EXPECTED) from
{
	{ "<", { 0x2001, 0xdb8, 0x1f70, 0x0, 0x999, 0xde8, 0x7648, 0x6e8 }, { 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff }, -1 }
	{ ">", { 0x2001, 0xdb8, 0x1f70, 0x0, 0x999, 0xde8, 0x7648, 0x6e8 }, { 0, 0, 0, 0, 0, 0, 0, 0 }, 1 }
	{ "<", { 0, 0, 0, 0, 0, 0, 0, 0 }, { 0x2001, 0xdb8, 0x1f70, 0x0, 0x999, 0xde8, 0x7648, 0x6e8 }, -1 }
	{ "==", { 0xee, 0xff, 0xaa, 0xbb, 0xcc, 0xdd, 0x22, 0x11 }, { 0xee, 0xff, 0xaa, 0xbb, 0xcc, 0xdd, 0x22, 0x11 }, 0 }
}
{
	test("Compare IPv6 addresses: " OPERATION)
	{
		unsigned input1[8] = ADDR1;
		unsigned input2[8] = ADDR2;

		IPv6Address addr1;
		CreateIPv6(addr1, input1);

		IPv6Address addr2;
		CreateIPv6(addr2, input2);

		verify(IPAddress::Compare(addr1, addr2) == EXPECTED);
	}
}

foreach (INPUT1) from
{
	{ "0:0:0:0:0:0:0:0" }
	{ "2001:db8:1f70:f12:999:de8:7648:6e8" }
	{ "f001:a124:20a:f0:9229:de8:a910:a8" }
	{ "0.0.0.0" }
	{ "127.0.0.1" }
	{ "192.168.0.0" }
	{ "192.168.0.2" }
	{ "192.168.0.255" }
}
{
	test("Parse IP address #1: " INPUT1)
	{
		const uni_char *input1 = UNI_L(INPUT1);
		IPAddress addr;
		verify_success(addr.Parse(input1));

		OpString text;
		verify_success(addr.Export(text));
		verify_string(text, input1);
	}
}

foreach (INPUT1, IS_IPV4) from
{
	{ "0:0:0:0:0:0:0:0", FALSE}
	{ "127.0.0.1", TRUE }
}
{
	test("Parse IP address #2: " INPUT1)
	{
		const uni_char *input1 = UNI_L(INPUT1);
		IPAddress addr;
		addr.is_ipv4 = !IS_IPV4;
		verify_status(OpStatus::ERR, addr.Parse(input1, TRUE));
	}

}

foreach (INPUT1) from
{
	{ "0:0:0:ff:0:0:fe:0" }
	{ "45:0:0:ff:0:0:fe:22" }
	{ "189.1.3.1" }
	{ "10.1.0.0" }
}
{
	test("IPRange FromAddress: " INPUT1)
	{
		const uni_char *input1 = UNI_L(INPUT1);
		IPAddress addr;
		verify_success(addr.Parse(input1));
		IPRange range;
		range.FromAddress(addr);

		int result = -1;
		verify_success(range.Compare(addr, result));
		verify(result == 0);

		if (range.is_ipv4)
			verify(range.Compare(range.u.ipv4.from) == 0);
		else
			verify(range.Compare(range.u.ipv6.from) == 0);

		if (range.is_ipv4)
			verify(range.Compare(range.u.ipv4.to) == 0);
		else
			verify(range.Compare(range.u.ipv6.to) == 0);
	}
}

foreach (LOW, HIGH, ADDR, EXPECTED) from
{
	{ "0:0:0:ff:0:0:fe:0", "0:0:0:ff:0:0:fe:ffff", "0:0:0:ff:0:0:fd:0", -1 }
	{ "45:0:0:ff:0:0:fe:22", "45:0:0:ff:0:0:fe:22ff", "a0:0:0:ff:0:0:fe:22ff", 1 }
	{ "189.1.3.1", "189.1.3.240", "192.168.1.0", 1 }
	{ "10.1.0.0", "192.168.1.0", "4.2.4.3", -1 }
}
{
	test("IPRange WithRange #1: " LOW "-" HIGH)
	{
		const uni_char *input1 = UNI_L(LOW);
		IPAddress addr1;
		verify_success(addr1.Parse(input1));

		const uni_char *input2 = UNI_L(HIGH);
		IPAddress addr2;
		verify_success(addr2.Parse(input2));

		const uni_char *input3 = UNI_L(ADDR);
		IPAddress addr3;
		verify_success(addr3.Parse(input3));

		IPRange range;
		verify_success(range.WithRange(addr1, addr2));

		int result = -1;
		verify_success(range.Compare(addr1, result));
		verify(result == 0);

		if (range.is_ipv4)
			verify(range.Compare(range.u.ipv4.from) == 0);
		else
			verify(range.Compare(range.u.ipv6.from) == 0);

		if (range.is_ipv4)
			verify(range.Compare(range.u.ipv4.to) == 0);
		else
			verify(range.Compare(range.u.ipv6.to) == 0);

		result = -1;
		verify_success(range.Compare(addr3, result));
		verify(result == EXPECTED);
	}
}

foreach (LOW, HIGH) from
{
	{ "0:0:0:ff:0:0:fe:0", "0:0:0:ff:0:0:fe:ffff" }
	{ "45:0:0:ff:0:0:fe:22", "45:0:0:ff:0:0:fe:22ff" }
	{ "189.1.3.1", "189.1.3.240" }
	{ "10.1.0.0", "192.168.1.0" }
}
{
	test("IPRange WithRange #2: " LOW "-" HIGH)
	{
		const uni_char *input1 = UNI_L(LOW);
		IPAddress addr1;
		verify_success(addr1.Parse(input1));

		const uni_char *input2 = UNI_L(HIGH);
		IPAddress addr2;
		verify_success(addr2.Parse(input2));

		IPRange range;
		range.is_ipv4 = addr1.is_ipv4;
		op_memset(&range.u, 0, sizeof(range.u));

		verify_status(OpStatus::ERR, range.WithRange(addr2, addr1));

		int result = -1;
		verify_success(range.Compare(addr1, result));
		verify(result == 1);
	}
}

foreach (INPUT1) from
{
	{ "0:0:0:0:0:0:0:0" }
	{ "2001:db8:1f70:f12:999:de8:7648:6e8" }
	{ "f001:a124:20a:f0:9229:de8:a910:a8" }
	{ "0.0.0.0" }
	{ "127.0.0.1" }
	{ "192.168.0.0" }
	{ "192.168.0.2" }
	{ "192.168.0.255" }
}
{
	test("Extract/Export IP address: " INPUT1)
	{
		const uni_char *input1 = UNI_L(INPUT1);
		TestSocketAddressIPv6 sa(input1);

		IPAddress addr;
		addr.is_ipv4 = FALSE;
		verify_success(OpSecurityUtilities::ExtractIPAddress(&sa, addr));

		OpString text;
		verify_success(addr.Export(text));

		const uni_char *expected1 = UNI_L(INPUT1);
		verify_string(text, expected1);
	}

}

foreach (INPUT, OUTPUT) from
{
	{ "0:0:0:0:0:0:0:1", {0, 0, 0, 0, 0, 0, 0, 1} }
	{ "0:0:0:0:0:0:0:0", {0, 0, 0, 0, 0, 0, 0, 0} }
	{ "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", {0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff} }
	{ "2001:db8:1f70:0:999:de8:7648:6e8", {0x2001, 0xdb8, 0x1f70, 0x0, 0x999, 0xde8, 0x7648, 0x6e8} }
}
{
	test("Parse IPv6 address: " INPUT)
	{
		IPAddress addr;
		addr.is_ipv4 = FALSE;
		const uni_char *input1 = UNI_L(INPUT);
		verify_success(addr.Parse(input1));

		unsigned expected[8] = OUTPUT;
		IPRange expected_range;
		expected_range.is_ipv4 = FALSE;
		CreateIPv6(expected_range.u.ipv6.from, expected);
		CreateIPv6(expected_range.u.ipv6.to, expected);

		int result = -1;
		verify_success(expected_range.Compare(addr, result));
		verify(result == 0);
	}
}

foreach (RANGE, OUTPUT1, OUTPUT2) from
{
	{ "0:0:0:0:0:0:0:0-0:0:0:0:0:0:0:1", {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 1} }
	{ "2001:db8:1f70:0:999:de8:7648:6e8-ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", {0x2001, 0xdb8, 0x1f70, 0x0, 0x999, 0xde8, 0x7648, 0x6e8}, {0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff} }
}
{
	test("Parse IPv6 range: " RANGE)
	{
		unsigned output1[8] = OUTPUT1;
		unsigned output2[8] = OUTPUT2;
		IPRange expected_range;
		expected_range.is_ipv4 = FALSE;
		CreateIPv6(expected_range.u.ipv6.from, output1);
		CreateIPv6(expected_range.u.ipv6.to, output2);

		IPAddress addr;
		addr.is_ipv4 = FALSE;
		const uni_char *input1 = UNI_L(RANGE);
		verify_success(addr.Parse(input1));

		int result = -1;
		verify_success(expected_range.Compare(addr, result));
		verify(result == 0);
	}
}

foreach (ADDR, OPERATION, RANGE, EXPECTED) from
{
	 { "0:0:0:0:0:0:0:0", "<=>", "0:0:0:0:0:0:0:0-0:0:0:0:0:0:0:1", 0 }
	 { "0:0:0:0:0:0:0:1", "<=>", "0:0:0:0:0:0:0:0-0:0:0:0:0:0:0:1", 0 }
	 { "1:0:0:0:0:0:0:1", ">", "0:0:0:0:0:0:0:0-0:0:0:0:0:0:0:1", 1 }
	 { "0:0:0:0:0:0:0:0", "<=>", "::-::1", 0 }
	 { "0:0:0:0:0:0:0:1", "<=>", "::-::1", 0 }
	 { "1:0:0:0:0:0:0:1", ">", "::-::1", 1 }
	 { "::", "<=>", "::-::1", 0 }
	 { "::1", "<=>", "::-::1", 0 }
	 { "1::1", ">", "::-::1", 1 }
	 { "2001:db8:1f70:0:999:de8:7648:6e8", "<=>", "2001:db8:1f70:0:999:de8:7648:6e8-ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", 0}
	 { "2000:db8:1f70:0:999:de8:7648:6e8", "<", "2001:db8:1f70:0:999:de8:7648:6e8-ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", -1}
	 { "2000:db8:3f70:0:999:de8:7648:6e8", "<", "2001:db8:1f70:0:999:de8:7648:6e8-ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", -1}
	 { "2001:db8:1f70:0:999:de8:7648:6e8", "<=>", "2001:db8:1f70:0:999:de8:7648:6e8-efff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", 0}
	 { "efff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", "<=>", "2001:db8:1f70:0:999:de8:7648:6e8-efff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", 0}
	 { "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", ">", "2001:db8:1f70:0:999:de8:7648:6e8-efff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", 1}
	 { "efff:ffff:ffff:ffff:ffff:ffff:ffff:fff0", "<=>", "2001:db8:1f70:0:999:de8:7648:6e8- efff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", 0}
	 { "efff:ffff:ffff:ffff:ffff:ff0f:ffff:ffff", "<=>", "2001:db8:1f70:0:999:de8:7648:6e8 -efff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", 0}
}
{
	test("Compare IPv6 address range: " ADDR " " OPERATION " " RANGE)
	{
		IPAddress addr;
		addr.is_ipv4 = FALSE;
		const uni_char *input1 = UNI_L(ADDR);
		verify_success(addr.Parse(input1));

		IPRange range;
		range.is_ipv4 = FALSE;
		const uni_char *input2 = UNI_L(RANGE);
		verify_success(range.Parse(input2));

		int result = -1;
		verify_success(range.Compare(addr, result));
		verify(result == EXPECTED);
	}
}

foreach (ADDR, OPERATION, RANGE, EXPECTED) from
{
	 { "0.0.0.0", "<", "192.168.0.1-192.168.0.240", -1 }
	 { "127.0.0.1", "<", "192.168.0.1-192.168.0.240", -1 }

	 { "192.168.0.0", "<",	"192.168.0.1-192.168.0.240", -1 }
	 { "192.168.0.2", "<=>", "192.168.0.1-192.168.0.240", 0 }
	 { "192.168.0.255", ">", "192.168.0.1-192.168.0.240", 1 }

	 { "192.168.1.0", ">", "192.168.0.1-192.168.0.240", 1 }
	 { "192.168.1.2", ">", "192.168.0.1-192.168.0.240", 1 }
	 { "192.168.1.241", ">", "192.168.0.1-192.168.0.240", 1 }

	 { "120.168.1.0", "<", "192.168.0.1-192.168.0.240", -1 }
	 { "120.168.1.2", "<", "192.168.0.1-192.168.0.240", -1 }
	 { "120.168.1.241", "<", "192.168.0.1-192.168.0.240", -1 }

	 { "194.168.1.239", ">", "192.168.0.1-192.168.0.240", 1 }
	 { "194.168.1.240", ">", "192.168.0.1-192.168.0.240", 1 }
	 { "194.168.1.241", ">", "192.168.0.1-192.168.0.240", 1 }

	 { "192.168.0.1", "<=>", "192.168.0.1-192.168.0.240", 0 }
	 { "192.168.0.99", "<=>", "192.168.0.1-192.168.0.240", 0 }
	 { "192.168.0.128", "<=>", "192.168.0.1 - 192.168.0.240", 0 }
	 { "192.168.0.240", "<=>", "192.168.0.1 -192.168.0.240", 0 }
}
{
	test("Compare IPv4 address range: " ADDR " " OPERATION " " RANGE)
	{
		IPAddress addr;
		addr.is_ipv4 = TRUE;
		const uni_char *input1 = UNI_L(ADDR);
		verify_success(addr.Parse(input1));

		IPRange range;
		range.is_ipv4 = TRUE;
		const uni_char *input2 = UNI_L(RANGE);
		verify_success(range.Parse(input2));

		int result = -1;
		verify_success(range.Compare(addr, result));
		verify(result == EXPECTED);
	}
}

foreach (INPUT1, EXPECTED) from
{
	{ "0.0.0.0", TRUE }
	{ "0.0.0:0", FALSE }
	{ "0.0.0.0.2", FALSE }
	{ "0.0.0.2-0.0.0.0", TRUE }
	{ "foo.com", FALSE}
	{ "2:3:4:5:1:ff:ee:8e00", TRUE}
	{ "2:3:4:5:1:ff:ee", FALSE}
	{ "2:3:4:5:1:ff:ee:8e00:2", FALSE}
	{ "2:3:4:5:1:ff:ee:8g00", FALSE}
	{ "2:3:4:5:1:ff:ee.8e00", FALSE}
	{ "2:3:4:5:1:ff:ee:8e00-4:3:4:5:1:ff:ee:8e00", TRUE}
	{ "::1-::2", TRUE}
	{ "::-::1", TRUE}
	{ "1::2-3::4", TRUE}
	{ "::", TRUE}
	{ "::1", TRUE}
}
{
	test("IsIPAddressOrRange: " INPUT1)
	{
		const uni_char *input1 = UNI_L(INPUT1);
		verify(OpSecurityUtilities::IsIPAddressOrRange(input1) == EXPECTED);
	}
}

foreach (RANGE, LOW, HIGH, SHOULD_PARSE) from
{
	{ "80-100", 80, 100, TRUE }
	{ "180-10", 0, 0, FALSE }
	{ "80-80", 80, 80, TRUE }
	{ "80 -180", 80, 180, TRUE }
	{ "200 -  210", 200, 210, TRUE }
}
{
	test("ParsePortRange: " RANGE)
	{
		const uni_char *input1 = UNI_L(RANGE);
		unsigned low = 0;
		unsigned high = 0;
		if (SHOULD_PARSE)
		{
			verify_success(OpSecurityUtilities::ParsePortRange(input1, low, high));
			verify(low == LOW);
			verify(high == HIGH);
		}
		else
			verify_status(OpStatus::ERR, OpSecurityUtilities::ParsePortRange(input1, low, high));
	}
}
