/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2009-2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "security_manager.security_unite";
require WEBSERVER_SUPPORT;

include "modules/security_manager/include/security_manager.h";
include "modules/url/url2.h";
include "modules/webserver/webserver-api.h";
include "modules/prefs/prefsmanager/collections/pc_webserver.h";

setup
{
	WebserverListeningMode listeningMode = WEBSERVER_LISTEN_LOCAL;

	if(g_webserver->IsRunning())
	{
		listeningMode = g_webserver->GetCurrentMode();
		g_webserver->Stop();
	}
	OpString8 device, user;

	device.Set(g_pcwebserver->GetStringPref(PrefsCollectionWebserver::WebserverDevice).CStr());
	user.Set(g_pcwebserver->GetStringPref(PrefsCollectionWebserver::WebserverUser).CStr());

	g_webserver->Start(listeningMode, g_pcwebserver->GetIntegerPref(PrefsCollectionWebserver::WebserverPort));
}

table test_url_security(const char* testname, const uni_char* url1string, const uni_char* url2string, BOOL expected)
{
	{ "Same service: Allow",
			UNI_L("http://localhost/service1"),
			UNI_L("http://localhost/service1"), TRUE }
	{ "Same service: Allow (slash 1)",
			UNI_L("http://localhost/service1/"),
			UNI_L("http://localhost/service1"), TRUE }
	{ "Same service: Allow (slash 2)",
			UNI_L("http://localhost/service1"),
			UNI_L("http://localhost/service1/"), TRUE },
	{ "Different services: Disallow",
			UNI_L("http://localhost/service1"),
			UNI_L("http://localhost/service2"), FALSE },
	{ "Different services: Disallow (slash 1)",
			UNI_L("http://localhost/service1/"),
			UNI_L("http://localhost/service2"), FALSE },
	{ "Different services: Disallow (slash 2)",
			UNI_L("http://localhost/service1"),
			UNI_L("http://localhost/service2/"), FALSE },
	{ "Same root service, one using _root: Allow",
			UNI_L("http://localhost"),
			UNI_L("http://localhost/_root"), TRUE },
	{ "Same root service, one using _root: Allow (slash)",
			UNI_L("http://localhost/"),
			UNI_L("http://localhost/_root"), TRUE },
	{ "Service vs root service: Allow",
			UNI_L("http://localhost/service"),
			UNI_L("http://localhost/"), TRUE },
	{ "Service vs root service: Allow (_root)",
			UNI_L("http://localhost/service"),
			UNI_L("http://localhost/_root"), TRUE },
	{ "Root Service vs service: Disallow",
			UNI_L("http://localhost/"),
			UNI_L("http://localhost/service"), FALSE },
	{ "Root Service vs service: Disallow (_root)",
			UNI_L("http://localhost/_root"),
			UNI_L("http://localhost/service"), FALSE },
}

foreach (testname, url1string, url2string, expected) from test_url_security
{
	test(testname)
	{
		URL url1 = g_url_api->GetURL(url1string);
		URL url2 = g_url_api->GetURL(url2string);
		OpSecurityContext context1(url1);
		OpSecurityContext context2(url2);
		BOOL allowed = FALSE;
		verify_success(OpSecurityManager::CheckSecurity(OpSecurityManager::UNITE_STANDARD, context1, context2, allowed));
		verify(allowed == expected);
	}
}
