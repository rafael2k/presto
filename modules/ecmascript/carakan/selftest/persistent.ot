/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "ecmascript.carakan.persistent";
require init;
require ES_PERSISTENT_SUPPORT;

include "modules/ecmascript/ecmascript.h";
include "modules/doc/frm_doc.h";
include "modules/dochand/fdelm.h";

global
{
  OP_STATUS Clone(FramesDocument *document, ES_Runtime::CloneStatus &clone_status)
  {
    ES_Runtime *source_runtime = state.doc->GetESRuntime();
    ES_Runtime *target_runtime = state.doc->GetIFrmRoot()->FirstChild()->GetCurrentDoc()->GetESRuntime();
    ES_Value value;
    ES_PersistentValue *pvalue;

    RETURN_IF_ERROR(source_runtime->GetName(source_runtime->GetGlobalObject(), UNI_L("original"), &value));
    RETURN_IF_ERROR(source_runtime->CloneToPersistent(value, pvalue));
    RETURN_IF_ERROR(target_runtime->CloneFromPersistent(pvalue, value, TRUE));
    RETURN_IF_ERROR(source_runtime->PutName(source_runtime->GetGlobalObject(), UNI_L("clone"), value));

    return OpStatus::OK;
  }
}

html
{
  "<!DOCTYPE html><iframe src='data:text/html,<script>void(parent.document);</script>'></iframe><canvas id='canvas'></canvas>"
}

// ========================================================================

test("null (setup)")
  language ecmascript;
{
  original = { x: null };
}

test("null (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("null (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);
  verify(clone.x === null);
}

// ========================================================================

test("undefined (setup)")
  language ecmascript;
{
  original = { x: undefined };
}

test("null (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("null (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);
  verify(clone.x === undefined);
}

// ========================================================================

test("numbers (setup)")
  language ecmascript;
{
  original = { pzero: 0, nzero: -0, one: 1, pinf: Infinity, ninf: -Infinity, nan: NaN };
}

test("numbers (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("numbers (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);
  verify(clone.pzero === 0 && (1 / clone.pzero) === Infinity);
  verify(clone.nzero === 0 && (1 / clone.nzero) === -Infinity);
  verify(clone.one === 1);
  verify(clone.pinf === Infinity);
  verify(clone.ninf === -Infinity);
  verify(clone.nan !== clone.nan);
}

// ========================================================================

test("strings (setup)")
  language ecmascript;
{
  original = { empty: "", foo: "foo" };
}

test("strings (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("strings (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);
  verify(clone.empty === "");
  verify(clone.foo === "foo");
}

// ========================================================================

test("object: Boolean (setup)")
  language ecmascript;
{
  original = { t: new Boolean(true), f: new Boolean(false) };
}

test("object: Boolean (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: Boolean (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);
  verify(typeof clone.t == "object");
  verify(clone.t.__proto__ === frames[0].Boolean.prototype);
  verify(clone.t.valueOf() === true);
  verify(typeof clone.f == "object");
  verify(clone.f.__proto__ === frames[0].Boolean.prototype);
  verify(clone.f.valueOf() === false);
}

// ========================================================================

test("object: Number (setup)")
  language ecmascript;
{
  original = { zero: new Number(0), one: new Number(1) };
}

test("object: Number (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: Number (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);
  verify(typeof clone.zero == "object");
  verify(clone.zero.__proto__ === frames[0].Number.prototype);
  verify(clone.zero.valueOf() === 0);
  verify(typeof clone.one == "object");
  verify(clone.one.__proto__ === frames[0].Number.prototype);
  verify(clone.one.valueOf() === 1);
}

// ========================================================================

test("object: String (setup)")
  language ecmascript;
{
  original = { empty: new String(""), foo: new String("foo") };
}

test("object: String (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: String (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);
  verify(typeof clone.empty == "object");
  verify(clone.empty.__proto__ === frames[0].String.prototype);
  verify(clone.empty.valueOf() === "");
  verify(typeof clone.foo == "object");
  verify(clone.foo.__proto__ === frames[0].String.prototype);
  verify(clone.foo.valueOf() === "foo");
}

// ========================================================================

test("object: Date (setup)")
  language ecmascript;
{
  original = { now: new Date("2011-02-26 16:06:24") };
}

test("object: Date (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: Date (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);
  verify(typeof clone.now == "object");
  verify(clone.now.__proto__ === frames[0].Date.prototype);
  verify(clone.now.getTime() === 1298732784000);
}

// ========================================================================

test("object: RegExp (setup)")
  language ecmascript;
{
  original = { r1: new RegExp("a/b"),
               r2: new RegExp("x", "g"),
               r3: new RegExp("x", "i"),
               r4: new RegExp("x", "m"),
               r5: new RegExp("x", "gi"),
               r6: new RegExp("x", "gm"),
               r7: new RegExp("x", "im"),
               r8: new RegExp("x", "gim") };
}

test("object: RegExp (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: RegExp (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.r1 == "object");
  verify(clone.r1.__proto__ === frames[0].RegExp.prototype);
  verify(clone.r1.source === "a\\/b");
  verify(clone.r1.global === false);
  verify(clone.r1.ignoreCase === false);
  verify(clone.r1.multiline === false);

  verify(typeof clone.r2 == "object");
  verify(clone.r2.__proto__ === frames[0].RegExp.prototype);
  verify(clone.r2.source === "x");
  verify(clone.r2.global === true);
  verify(clone.r2.ignoreCase === false);
  verify(clone.r2.multiline === false);

  verify(typeof clone.r3 == "object");
  verify(clone.r3.__proto__ === frames[0].RegExp.prototype);
  verify(clone.r3.source === "x");
  verify(clone.r3.global === false);
  verify(clone.r3.ignoreCase === true);
  verify(clone.r3.multiline === false);

  verify(typeof clone.r4 == "object");
  verify(clone.r4.__proto__ === frames[0].RegExp.prototype);
  verify(clone.r4.source === "x");
  verify(clone.r4.global === false);
  verify(clone.r4.ignoreCase === false);
  verify(clone.r4.multiline === true);

  verify(typeof clone.r5 == "object");
  verify(clone.r5.__proto__ === frames[0].RegExp.prototype);
  verify(clone.r5.source === "x");
  verify(clone.r5.global === true);
  verify(clone.r5.ignoreCase === true);
  verify(clone.r5.multiline === false);

  verify(typeof clone.r6 == "object");
  verify(clone.r6.__proto__ === frames[0].RegExp.prototype);
  verify(clone.r6.source === "x");
  verify(clone.r6.global === true);
  verify(clone.r6.ignoreCase === false);
  verify(clone.r6.multiline === true);

  verify(typeof clone.r7 == "object");
  verify(clone.r7.__proto__ === frames[0].RegExp.prototype);
  verify(clone.r7.source === "x");
  verify(clone.r7.global === false);
  verify(clone.r7.ignoreCase === true);
  verify(clone.r7.multiline === true);

  verify(typeof clone.r8 == "object");
  verify(clone.r8.__proto__ === frames[0].RegExp.prototype);
  verify(clone.r8.source === "x");
  verify(clone.r8.global === true);
  verify(clone.r8.ignoreCase === true);
  verify(clone.r8.multiline === true);
}

// ========================================================================

test("object: Array (setup)")
  language ecmascript;
{
  var compact = ["a", "b", "c"];
  var sparse = [];

  sparse[0] = "a";
  sparse[1000000] = "b";
  sparse[1000000000] = "c";

  original = { compact: compact,
               sparse: sparse };
}

test("object: Array (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: Array (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.compact == "object");
  verify(clone.compact.__proto__ === frames[0].Array.prototype);
  verify(clone.compact.length === 3);
  verify(clone.compact[0] === "a");
  verify(clone.compact[1] === "b");
  verify(clone.compact[2] === "c");

  verify(typeof clone.sparse == "object");
  verify(clone.sparse.__proto__ === frames[0].Array.prototype);
  verify(clone.sparse.length === 1000000001);
  verify(clone.sparse[0] === "a");
  verify(clone.sparse[1000000] === "b");
  verify(clone.sparse[1000000000] === "c");
}

// ========================================================================

test("object: Object/repeat (setup)")
  language ecmascript;
{
  var repeated = {};

  original = { a: repeated,
               b: { x: repeated, y: repeated },
               c: repeated };
}

test("object: Object/repeat (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: Object/repeat (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.a == "object");
  verify(clone.a.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.b == "object");
  verify(clone.b.__proto__ === frames[0].Object.prototype);
  verify(clone.b !== clone.a);

  verify(typeof clone.b.x == "object");
  verify(clone.b.x.__proto__ === frames[0].Object.prototype);
  verify(clone.b.x === clone.a);

  verify(typeof clone.b.y == "object");
  verify(clone.b.y.__proto__ === frames[0].Object.prototype);
  verify(clone.b.y === clone.a);

  verify(typeof clone.c == "object");
  verify(clone.c.__proto__ === frames[0].Object.prototype);
  verify(clone.c === clone.a);
}

// ========================================================================

test("object: Object/cyclic (setup)")
  language ecmascript;
{
  var cyclic = { children: [{ children: [{}, {}]}] };

  cyclic.children[0].parent = cyclic;
  cyclic.children[0].children[0].parent = cyclic.children[0];
  cyclic.children[0].children[1].parent = cyclic.children[0];

  original = { root: cyclic };
}

test("object: Object/cyclic (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: Object/cyclic (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.root == "object");
  verify(clone.root.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.root.children == "object");
  verify(clone.root.children.__proto__ === frames[0].Array.prototype);
  verify(clone.root.children.length === 1);

  verify(typeof clone.root.children[0] == "object");
  verify(clone.root.children[0].__proto__ === frames[0].Object.prototype);
  verify(clone.root.children[0].parent === clone.root);

  verify(typeof clone.root.children[0].children == "object");
  verify(clone.root.children[0].children.__proto__ === frames[0].Array.prototype);
  verify(clone.root.children[0].children.length === 2);

  verify(typeof clone.root.children[0].children[0] == "object");
  verify(clone.root.children[0].children[0].__proto__ === frames[0].Object.prototype);
  verify(clone.root.children[0].children[0].parent === clone.root.children[0]);

  verify(typeof clone.root.children[0].children[1] == "object");
  verify(clone.root.children[0].children[1].__proto__ === frames[0].Object.prototype);
  verify(clone.root.children[0].children[1].parent === clone.root.children[0]);
}

// ========================================================================

test("object: ImageData (setup)")
  language ecmascript;
{
  var imagedata = document.getElementById("canvas").getContext("2d").createImageData(128, 128);

  for (var index = 0; index < imagedata.data.length; ++index)
    imagedata.data[index] = index & 0xff;

  original = { imagedata: imagedata, duplicate: imagedata };
}

test("object: ImageData (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: ImageData (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.imagedata == "object");
  verify(Object.prototype.toString.call(clone.imagedata) == "[object ImageData]");
  verify(clone.imagedata.__proto__ === frames[0].ImageData.prototype);

  verify(clone.imagedata.width === 128);
  verify(clone.imagedata.height === 128);
  verify(clone.imagedata.data.length === 128 * 128 * 4);

  for (var index = 0; index < clone.imagedata.data.length; ++index)
    verify(clone.imagedata.data[index] === (index & 0xff));

  verify(clone.duplicate === clone.imagedata);
}

// ========================================================================

test("object: ArrayBuffer (setup)")
  language ecmascript;
{
  var buffer = new ArrayBuffer(128);
  for (var i = 0; i < 128; i++)
	  buffer[i] = i;
  original = { abuffer: buffer, duplicate: buffer };
}

test("object: ArrayBuffer (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: ArrayBuffer (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.abuffer == "object");
  verify(Object.prototype.toString.call(clone.abuffer) == "[object ArrayBuffer]");
  verify(clone.abuffer.__proto__ === frames[0].ArrayBuffer.prototype);

  verify(clone.abuffer.length === 128);
  for (var index = 0; index < clone.abuffer.length; ++index)
	  verify(clone.abuffer[index] === index);

  verify(clone.duplicate === clone.abuffer);
}

// ========================================================================

test("object: Int8Array (setup)")
  language ecmascript;
{
  var array_buffer = new ArrayBuffer(130);
  var buffer = new Int8Array(array_buffer, 2);
  original = { abuffer: buffer, duplicate: buffer };
}

test("object: Int8Array (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: Int8Array (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.abuffer == "object");
  verify(Object.prototype.toString.call(clone.abuffer) == "[object Int8Array]");
  verify(clone.abuffer.__proto__ === frames[0].Int8Array.prototype);

  verify(clone.abuffer.length === 128);
  verify(clone.abuffer.buffer.length === 130);
  for (var index = 0; index < clone.abuffer.length; ++index)
	  verify(clone.abuffer[index] === 0);

  verify(clone.duplicate === clone.abuffer);
}

// ========================================================================

test("object: Int16Array (setup)")
  language ecmascript;
{
  var array_buffer = new ArrayBuffer(130);
  var buffer = new Int16Array(array_buffer, 2, 10);
  original = { abuffer: buffer, duplicate: buffer };
}

test("object: Int16Array (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: Int16Array (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.abuffer == "object");
  verify(Object.prototype.toString.call(clone.abuffer) == "[object Int16Array]");
  verify(clone.abuffer.__proto__ === frames[0].Int16Array.prototype);

  verify(clone.abuffer.length === 10);
  verify(clone.abuffer.byteLength === 20);
  verify(clone.abuffer.buffer.length === 130);
  for (var index = 0; index < clone.abuffer.length; ++index)
	  verify(clone.abuffer[index] === 0);

  verify(clone.duplicate === clone.abuffer);
  verify(clone.duplicate.buffer === clone.abuffer.buffer);
}

// ========================================================================

test("object: Int32Array (setup)")
  language ecmascript;
{
  var buffer = new Int32Array(128);
  original = { abuffer: buffer, duplicate: buffer };
}

test("object: Int32Array (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: Int32Array (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.abuffer == "object");
  verify(Object.prototype.toString.call(clone.abuffer) == "[object Int32Array]");
  verify(clone.abuffer.__proto__ === frames[0].Int32Array.prototype);

  verify(clone.abuffer.length === 128);
  for (var index = 0; index < clone.abuffer.length; ++index)
	  verify(clone.abuffer[index] === 0);

  verify(clone.duplicate === clone.abuffer);
}

// ========================================================================

test("object: Uint8Array (setup)")
  language ecmascript;
{
  var buffer = new Uint8Array(128);
  original = { abuffer: buffer, duplicate: buffer };
}

test("object: Uint8Array (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: Uint8Array (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.abuffer == "object");
  verify(Object.prototype.toString.call(clone.abuffer) == "[object Uint8Array]");
  verify(clone.abuffer.__proto__ === frames[0].Uint8Array.prototype);

  verify(clone.abuffer.length === 128);
  for (var index = 0; index < clone.abuffer.length; ++index)
	  verify(clone.abuffer[index] === 0);

  verify(clone.duplicate === clone.abuffer);
}

// ========================================================================

test("object: Uint16Array (setup)")
  language ecmascript;
{
  var buffer = new Uint16Array(128);
  original = { abuffer: buffer, duplicate: buffer };
}

test("object: Uint16Array (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: Uint16Array (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.abuffer == "object");
  verify(Object.prototype.toString.call(clone.abuffer) == "[object Uint16Array]");
  verify(clone.abuffer.__proto__ === frames[0].Uint16Array.prototype);

  verify(clone.abuffer.length === 128);
  for (var index = 0; index < clone.abuffer.length; ++index)
	  verify(clone.abuffer[index] === 0);

  verify(clone.duplicate === clone.abuffer);
}

// ========================================================================

test("object: Uint32Array (setup)")
  language ecmascript;
{
  var buffer = new Uint32Array(128);
  original = { abuffer: buffer, duplicate: buffer };
}

test("object: Uint32Array (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: Uint32Array (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.abuffer == "object");
  verify(Object.prototype.toString.call(clone.abuffer) == "[object Uint32Array]");
  verify(clone.abuffer.__proto__ === frames[0].Uint32Array.prototype);

  verify(clone.abuffer.length === 128);
  for (var index = 0; index < clone.abuffer.length; ++index)
	  verify(clone.abuffer[index] === 0);

  verify(clone.duplicate === clone.abuffer);
}

// ========================================================================

test("object: Float32Array (setup)")
  language ecmascript;
{
  var buffer = new Float32Array(128);
  original = { abuffer: buffer, duplicate: buffer };
}

test("object: Float32Array (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: Float32Array (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.abuffer == "object");
  verify(Object.prototype.toString.call(clone.abuffer) == "[object Float32Array]");
  verify(clone.abuffer.__proto__ === frames[0].Float32Array.prototype);

  verify(clone.abuffer.length === 128);
  for (var index = 0; index < clone.abuffer.length; ++index)
	  verify(clone.abuffer[index] === 0);

  verify(clone.duplicate === clone.abuffer);
}

// ========================================================================

test("object: Float64Array (setup)")
  language ecmascript;
{
  var buffer = new Float64Array(128);
  original = { abuffer: buffer, duplicate: buffer };
}

test("object: Float64Array (clone)")
  language c++;
{
  ES_Runtime::CloneStatus clone_status;

  verify_success(Clone(state.doc, clone_status));
  verify(clone_status.fault_reason == ES_Runtime::CloneStatus::OK);
  verify(clone_status.fault_object == NULL);
}

test("object: Float64Array (check)")
  language ecmascript;
{
  verify(clone.__proto__ === frames[0].Object.prototype);

  verify(typeof clone.abuffer == "object");
  verify(Object.prototype.toString.call(clone.abuffer) == "[object Float64Array]");
  verify(clone.abuffer.__proto__ === frames[0].Float64Array.prototype);

  verify(clone.abuffer.length === 128);
  for (var index = 0; index < clone.abuffer.length; ++index)
	  verify(clone.abuffer[index] === 0);

  verify(clone.duplicate === clone.abuffer);
}
