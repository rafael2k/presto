/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "ecmascript.carakan.PutName";
require init;

include "modules/ecmascript/ecmascript.h";
include "modules/doc/frm_doc.h";

global
{
  class PutNameTester
    : public EcmaScript_Object
  {
    ES_Value status_value;
    BOOL convert_requested;

  public:
    PutNameTester()
      : convert_requested(FALSE)
    {
    }

    virtual ES_GetState GetName(const uni_char* property_name, int property_code, ES_Value* value, ES_Runtime* origining_runtime)
    {
      if (uni_str_eq(property_name, "convertSuccessful"))
      {
        convert_requested = FALSE;
        if (value)
          *value = status_value;
        return GET_SUCCESS;
      }

      return GET_FAILED;
    }

    virtual ES_PutState PutName(const uni_char* property_name, int property_code, ES_Value* value, ES_Runtime* origining_runtime)
    {
      if (uni_str_eq(property_name, "convertBoolean"))
      {
        if (!convert_requested)
        {
          convert_requested = TRUE;
          return PUT_NEEDS_BOOLEAN;
        }
        status_value.type = VALUE_BOOLEAN;
        status_value.value.boolean = value->type == VALUE_BOOLEAN;
        return PUT_SUCCESS;
      }
      else if (uni_str_eq(property_name, "convertNumber"))
      {
        if (!convert_requested)
        {
          convert_requested = TRUE;
          return PUT_NEEDS_NUMBER;
        }
        status_value.type = VALUE_BOOLEAN;
        status_value.value.boolean = value->type == VALUE_NUMBER;
        return PUT_SUCCESS;
      }
      else if (uni_str_eq(property_name, "convertString"))
      {
        if (!convert_requested)
        {
          convert_requested = TRUE;
          return PUT_NEEDS_STRING;
        }
        status_value.type = VALUE_BOOLEAN;
        status_value.value.boolean = value->type == VALUE_STRING;
        return PUT_SUCCESS;
      }
      else if (uni_str_eq(property_name, "convertStringWithLength"))
      {
        if (!convert_requested)
        {
          convert_requested = TRUE;
          return PUT_NEEDS_STRING_WITH_LENGTH;
        }
        status_value.type = VALUE_BOOLEAN;
        status_value.value.boolean = value->type == VALUE_STRING_WITH_LENGTH;
        return PUT_SUCCESS;
      }
      else
        return PUT_FAILED;
    }
  };
}

html
{
  "<html><body><script>document.write('foo');</script></body></html>"
}

test("Setup")
{
  ES_Runtime *runtime = state.doc->GetESRuntime();
  verify(runtime != NULL);

  PutNameTester *tester = OP_NEW(PutNameTester, ());

  verify(tester != NULL);
  verify_success(tester->SetObjectRuntime(runtime, runtime->GetObjectPrototype(), "PutNameTester"));

  ES_Value value;
  value.type = VALUE_OBJECT;
  value.value.object = *tester;
  
  verify_success(runtime->PutName(runtime->GetGlobalObject(), UNI_L("tester"), value));
}

test("PUT_NEEDS_BOOLEAN")
  language ecmascript;
{
  tester.convertBoolean = 1;
  verify(tester.convertSuccessful === true);
}

test("PUT_NEEDS_NUMBER")
  language ecmascript;
{
  tester.convertNumber = "17";
  verify(tester.convertSuccessful === true);
}

test("PUT_NEEDS_STRING")
  language ecmascript;
{
  tester.convertString = 17;
  verify(tester.convertSuccessful === true);
}

test("PUT_NEEDS_STRING_WITH_LENGTH")
  language ecmascript;
{
  tester.convertStringWithLength = 17;
  verify(tester.convertSuccessful === true);
}
