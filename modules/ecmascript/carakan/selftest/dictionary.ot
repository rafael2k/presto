/* -*- Mode: c++; indent-tabs-mode: nil; c-basic-offset: 4 -*-
**
** Copyright (C) 2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "ecmascript.carakan.dictionary";
require init;

include "modules/ecmascript/ecmascript.h";
include "modules/doc/frm_doc.h";

require ES_DICTIONARY_CONVERSION_SUPPORT;

global
{
    class DictionaryTester
        : public EcmaScript_Object
    {
    public:
        virtual int Call(ES_Object* this_object, ES_Value* argv, int argc, ES_Value* return_value, ES_Runtime* origining_runtime)
        {
            return_value->type = VALUE_STRING;

            if (argv[0].type != VALUE_NUMBER)
            {
                return_value->value.string = UNI_L("argv[0] is not a number");
                return ES_VALUE;
            }

            for (int index = 1; index < argc; ++index)
                if (argv[index].type != VALUE_OBJECT)
                {
                    return_value->value.string = UNI_L("argv[N] is not an object");
                    return ES_VALUE;
                }
                else
                {
                    unsigned mask = static_cast<unsigned>(argv[0].value.number);
                    ES_Object *dictionary = argv[index].value.object;

                    OP_BOOLEAN result;
                    ES_Value value;

                    result = origining_runtime->GetName(dictionary, UNI_L("boolean"), &value);

                    if (mask & 1)
                    {
                        if (result != OpBoolean::IS_TRUE)
                        {
                            return_value->value.string = UNI_L("argv[N].boolean not readable, or doesn't exist");
                            return ES_VALUE;
                        }
                        else if (value.type != VALUE_BOOLEAN)
                        {
                            return_value->value.string = UNI_L("argv[N].boolean is not a boolean");
                            return ES_VALUE;
                        }
                        else if (!value.value.boolean)
                        {
                            return_value->value.string = UNI_L("argv[N].boolean is not true");
                            return ES_VALUE;
                        }
                    }
                    else if (result != OpBoolean::IS_FALSE)
                    {
                        return_value->value.string = UNI_L("argv[N].boolean not readable, or exists unexpectedly");
                        return ES_VALUE;
                    }

                    result = origining_runtime->GetName(dictionary, UNI_L("number"), &value);

                    if (mask & 2)
                    {
                        if (result != OpBoolean::IS_TRUE)
                        {
                            return_value->value.string = UNI_L("argv[N].number not readable, or doesn't exist");
                            return ES_VALUE;
                        }
                        else if (value.type != VALUE_NUMBER)
                        {
                            return_value->value.string = UNI_L("argv[N].number is not a number");
                            return ES_VALUE;
                        }
                        else if (value.value.number != 3.14)
                        {
                            return_value->value.string = UNI_L("argv[N].number is not 3.14");
                            return ES_VALUE;
                        }
                    }
                    else if (result != OpBoolean::IS_FALSE)
                    {
                        return_value->value.string = UNI_L("argv[N].boolean not readable, or exists unexpectedly");
                        return ES_VALUE;
                    }

                    result = origining_runtime->GetName(dictionary, UNI_L("string"), &value);

                    if (mask & 4)
                    {
                        if (result != OpBoolean::IS_TRUE)
                        {
                            return_value->value.string = UNI_L("argv[N].string not readable, or doesn't exist");
                            return ES_VALUE;
                        }
                        else if (value.type != VALUE_STRING)
                        {
                            return_value->value.string = UNI_L("argv[N].string is not a string");
                            return ES_VALUE;
                        }
                        else if (!uni_str_eq(value.value.string, "foo"))
                        {
                            return_value->value.string = UNI_L("argv[N].string is not \"foo\"");
                            return ES_VALUE;
                        }
                    }
                    else if (result != OpBoolean::IS_FALSE)
                    {
                        return_value->value.string = UNI_L("argv[N].boolean not readable, or exists unexpectedly");
                        return ES_VALUE;
                    }
                }

            return_value->value.string = UNI_L("ok");
            return ES_VALUE;
        }
    };

    class DictionaryObject
        : public EcmaScript_Object
    {
    public:
        virtual ES_GetState GetName(const uni_char* property_name, int property_code, ES_Value* value, ES_Runtime* origining_runtime)
        {
            if (uni_str_eq(property_name, "boolean") ||
                uni_str_eq(property_name, "number") ||
                uni_str_eq(property_name, "string"))
                if (value)
                {
                    value->type = VALUE_OBJECT;
                    value->value.object = *this;
                    return GET_SUSPEND;
                }
                else
                    return GET_SUCCESS;
            else
                return GET_FAILED;
        }

        virtual ES_GetState GetNameRestart(const uni_char* property_name, int property_code, ES_Value* value, ES_Runtime* origining_runtime, ES_Object* restart_object)
        {
            if (uni_str_eq(property_name, "boolean"))
            {
                value->type = VALUE_BOOLEAN;
                value->value.boolean = TRUE;
                return GET_SUCCESS;
            }
            else if (uni_str_eq(property_name, "number"))
            {
                value->type = VALUE_NUMBER;
                value->value.number = 3.14;
                return GET_SUCCESS;
            }
            else /* if (uni_str_eq(property_name, "string")) */
            {
                value->type = VALUE_STRING;
                value->value.string = UNI_L("foo");
                return GET_SUCCESS;
            }
        }
    };

    class ConversionTester
        : public EcmaScript_Object
    {
    public:
        /* Ad-hoc tester object of on-demand argument conversion - the call
           expects the following:

              converter(arity, expected_object, converted_value, conversion_specifier);

           The fourth argument instructing the engine how the arguments should be converted.
           The implicit assumption is that it will perform some interesting conversion of
           the third argument, which post-conversion is then compared by property with the
           second. 'arity' property names are expected, labelled "a", "b", ... */
        ConversionTester()
        {
        }

        virtual int Call(ES_Object* this_object, ES_Value* argv, int argc, ES_Value* return_value, ES_Runtime* origining_runtime)
        {
            BOOL has_converted = ES_CONVERSION_COMPLETED(argc);
            if (has_converted)
                argc = ES_CONVERSION_ARGC(argc);

            return_value->type = VALUE_STRING;

            if (argv[0].type != VALUE_NUMBER)
            {
                return_value->value.string = UNI_L("argv[0] is not a number");
                return ES_VALUE;
            }
            if (argv[1].type != VALUE_OBJECT)
            {
                return_value->value.string = UNI_L("argv[1] is not an object");
                return ES_VALUE;
            }
            if (argv[2].type != VALUE_OBJECT)
            {
                return_value->value.string = UNI_L("argv[2] is not an object");
                return ES_VALUE;
            }
            if (argv[3].type != VALUE_STRING)
            {
                return_value->value.string = UNI_L("argv[3] is not a string");
                return ES_VALUE;
            }
            if (has_converted)
            {
                unsigned arity = static_cast<unsigned>(argv[0].value.number);
                ES_Object *expected_object = argv[1].value.object;
                ES_Object *converted_object = argv[2].value.object;
                uni_char property_name[2];
                property_name[0] = property_name[1] = 0;
                for (unsigned i = 0; i < arity; i++)
                {
                    property_name[0] = 'a' + static_cast<uni_char>(i);
                    ES_Value expected_value;
                    ES_Value converted_value;
                    OP_BOOLEAN result;
                    CALL_FAILED_IF_ERROR(result = origining_runtime->GetName(expected_object, property_name, &expected_value));
                    if (result != OpBoolean::IS_TRUE)
                    {
                        return_value->value.string = UNI_L("Expected property missing");
                        return ES_VALUE;
                    }
                    CALL_FAILED_IF_ERROR(result = origining_runtime->GetName(converted_object, property_name, &converted_value));
                    if (result != OpBoolean::IS_TRUE)
                    {
                        return_value->value.string = UNI_L("Converted property missing");
                        return ES_VALUE;
                    }
                    if (expected_value.type != converted_value.type)
                    {
                        return_value->value.string = UNI_L("Converted type does not match expected");
                        return ES_VALUE;
                    }
                    else if (expected_value.type == VALUE_NUMBER && expected_value.value.number != converted_value.value.number)
                    {
                        return_value->value.string = UNI_L("Converted numeric value not equal to expected");
                        return ES_VALUE;
                    }
                    else if (expected_value.type == VALUE_BOOLEAN && expected_value.value.boolean != converted_value.value.boolean)
                    {
                        return_value->value.string = UNI_L("Converted boolean value not equal to expected");
                        return ES_VALUE;
                    }
                    else if (expected_value.type == VALUE_STRING && !uni_str_eq(expected_value.value.string, converted_value.value.string))
                    {
                        return_value->value.string = UNI_L("Converted string value not equal to expected");
                        return ES_VALUE;
                    }
                }
                return_value->value.string = UNI_L("ok");
                return ES_VALUE;
            }
            else
            {
                static char ascii_buffer[255]; // ARRAY OK 2012-01-15 sof
                const uni_char *conv_string = argv[3].value.string;
                OP_ASSERT(uni_strlen(conv_string) < ARRAY_SIZE(ascii_buffer));
                unsigned i;
                for (i = 0; i < uni_strlen(conv_string); i++)
                {
                    OP_ASSERT(conv_string[i] < 0x7f);
                    ascii_buffer[i] = static_cast<char>(conv_string[i]);
                }
                ascii_buffer[i] = 0;
                ES_CONVERT_ARGUMENTS_AS(return_value, ascii_buffer);
                return ES_NEEDS_CONVERSION;
            }
        }
    };
}

html
{
    "<html><body><script>document.write('bar');</script></body></html>"
}

test("Setup")
{
    ES_Runtime *runtime = state.doc->GetESRuntime();
    verify(runtime != NULL);

    ES_Value value;
    DictionaryTester *tester;

    value.type = VALUE_OBJECT;

    tester = OP_NEW(DictionaryTester, ());
    verify(tester != NULL);
    verify_success(tester->SetFunctionRuntime(runtime, runtime->GetFunctionPrototype(), "DictionaryTester", "n{boolean:b,number:n,string:s}"));
    value.value.object = *tester;
    verify_success(runtime->PutName(runtime->GetGlobalObject(), UNI_L("tester"), value));

    tester = OP_NEW(DictionaryTester, ());
    verify(tester != NULL);
    verify_success(tester->SetFunctionRuntime(runtime, runtime->GetFunctionPrototype(), "DictionaryTester", "n?{boolean:b,number:n,string:s}"));
    value.value.object = *tester;
    verify_success(runtime->PutName(runtime->GetGlobalObject(), UNI_L("testerOptional"), value));

    DictionaryObject *object = OP_NEW(DictionaryObject, ());

    verify(object != NULL);
    verify_success(object->SetObjectRuntime(runtime, runtime->GetObjectPrototype(), "DictionaryObject"));

    value.type = VALUE_OBJECT;
    value.value.object = *object;

    verify_success(runtime->PutName(runtime->GetGlobalObject(), UNI_L("hostDictionary"), value));
}

test("Dictionary: none (-)")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       get last() { throw "invalid read"; } };

    verify(tester(0, dictionary) == "ok");
}

test("Dictionary: boolean")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       boolean: true,
                       get last() { throw "invalid read"; } };

    verify(tester(1, dictionary) == "ok");
}

test("Dictionary: boolean (converted)")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       boolean: { valueOf: function () { throw "invalid call to valueOf"; } },
                       get last() { throw "invalid read"; } };

    verify(tester(1, dictionary) == "ok");
}

test("Dictionary: boolean (getter)")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       get boolean() { return true; },
                       get last() { throw "invalid read"; } };

    verify(tester(1, dictionary) == "ok");
}

test("Dictionary: boolean (getter + converted)")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       get boolean() { return { valueOf: function () { throw "invalid call to valueOf"; } }; },
                       get last() { throw "invalid read"; } };

    verify(tester(1, dictionary) == "ok");
}

test("Dictionary: number")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       number: 3.14,
                       get last() { throw "invalid read"; } };

    verify(tester(2, dictionary) == "ok");
}

test("Dictionary: number (converted)")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       number: { valueOf: function () { return 3.14; } },
                       get last() { throw "invalid read"; } };

    verify(tester(2, dictionary) == "ok");
}

test("Dictionary: number (getter)")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       get number() { return 3.14; },
                       get last() { throw "invalid read"; } };

    verify(tester(2, dictionary) == "ok");
}

test("Dictionary: number (getter + converted)")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       get number() { return { valueOf: function () { return 3.14; } }; },
                       get last() { throw "invalid read"; } };

    verify(tester(2, dictionary) == "ok");
}

test("Dictionary: string")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       string: "foo",
                       get last() { throw "invalid read"; } };

    verify(tester(4, dictionary) == "ok");
}

test("Dictionary: string (converted)")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       string: { toString: function () { return "foo"; } },
                       get last() { throw "invalid read"; } };

    verify(tester(4, dictionary) == "ok");
}

test("Dictionary: string (getter)")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       get string() { return "foo"; },
                       get last() { throw "invalid read"; } };

    verify(tester(4, dictionary) == "ok");
}

test("Dictionary: string (getter + converted)")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       get string() { return { toString: function () { return "foo"; } }; },
                       get last() { throw "invalid read"; } };

    verify(tester(4, dictionary) == "ok");
}

test("Dictionary: all")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
	                   boolean: true,
					   number: 3.14,
                       string: "foo",
                       get last() { throw "invalid read"; } };

    verify(tester(7, dictionary) == "ok");
}

test("Dictionary: all (converted)")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
	                   boolean: { valueOf: function () { throw "invalid call to valueOf"; } },
					   number: { valueOf: function () { return 3.14; } },
                       string: { toString: function () { return "foo"; } },
                       get last() { throw "invalid read"; } };

    verify(tester(7, dictionary) == "ok");
}

test("Dictionary: all (getter)")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       get boolean() { return true; },
                       get number() { return 3.14; },
                       get string() { return "foo"; },
                       get last() { throw "invalid read"; } };

    verify(tester(7, dictionary) == "ok");
}

test("Dictionary: all (getter + converted)")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       get boolean() { return { valueOf: function () { throw "invalid call to valueOf"; } }; },
                       get number() { return { valueOf: function () { return 3.14; } }; },
                       get string() { return { toString: function () { return "foo"; } }; },
                       get last() { throw "invalid read"; } };

    verify(tester(7, dictionary) == "ok");
}

test("Dictionary: multiple (getter + converted)")
    language ecmascript;
{
    var dictionary = { get first() { throw "invalid read"; },
                       get boolean() { return { valueOf: function () { throw "invalid call to valueOf"; } }; },
                       get number() { return { valueOf: function () { return 3.14; } }; },
                       get string() { return { toString: function () { return "foo"; } }; },
                       get last() { throw "invalid read"; } };

    verify(tester(7, dictionary, dictionary, dictionary) == "ok");
}

test("Dictionary: host object")
    language ecmascript;
{
    verify(tester(7, hostDictionary) == "ok");
}

test("Dictionary: null -> TypeError")
    language ecmascript;
{
    try
    {
        tester(0, null);
        verify(!"not reached");
    }
    catch (e)
    {
        verify(e instanceof TypeError);
    }
}

test("Dictionary: undefined -> TypeError")
    language ecmascript;
{
    try
    {
        tester(0, void 0);
        verify(!"not reached");
    }
    catch (e)
    {
        verify(e instanceof TypeError);
    }
}

test("Dictionary: not object -> TypeError")
    language ecmascript;
{
    try
    {
        tester(0, "foo");
        verify(!"not reached");
    }
    catch (e)
    {
        verify(e instanceof TypeError);
    }
}

test("Dictionary: null/undefined (optional)")
    language ecmascript;
{
    testerOptional(0, null);
    testerOptional(0, void 0);
}

test("Dictionary: not object -> TypeError (optional)")
    language ecmascript;
{
    try
    {
        testerOptional(0, "foo");
        verify(!"not reached");
    }
    catch (e)
    {
        verify(e instanceof TypeError);
    }
}

test("Dictionary: exception propagated from getter")
    language ecmascript;
{
    try
    {
        tester(0, { get boolean() { throw new RangeError; } });
        verify(!"not reached");
    }
    catch (e)
    {
        verify(e instanceof RangeError);
    }
}

test("Dictionary: exception propagated from valueOf")
    language ecmascript;
{
    try
    {
        tester(0, { number: { valueOf: function () { throw new RangeError; } } });
        verify(!"not reached");
    }
    catch (e)
    {
        verify(e instanceof RangeError);
    }
}

test("Setup conversion")
{
    ES_Runtime *runtime = state.doc->GetESRuntime();
    verify(runtime != NULL);

    ES_Value value;
    ConversionTester *converter;

    value.type = VALUE_OBJECT;

    converter = OP_NEW(ConversionTester, ());
    verify(converter != NULL);
    verify_success(converter->SetFunctionRuntime(runtime, runtime->GetFunctionPrototype(), "ConversionTester", "noos-"));
    value.value.object = *converter;
    verify_success(runtime->PutName(runtime->GetGlobalObject(), UNI_L("converter"), value));
}

test("Host function conversion")
    language ecmascript;
{
    verify(converter(2,{a: 3, b: 4}, {a: 3, b: (2+2)}, "n-{a:n,b:n}-") == "ok");
    verify(converter(2,{a: 3, b: 4}, {a: 3, b: {valueOf: function () { return (1+3);}}}, "n-{a:n,b:n}-") == "ok");
    verify(converter(2,{a: 3, b: 4}, {a: 3, b: "4"}, "n-{a:n,b:n}-") == "ok");
    verify(converter(2,{a: 3, b: true}, {a: 3, b: "1"}, "n-{a:n,b:b}-") == "ok");
    verify(converter(2,{a: false, b: true}, {a: "", b: 1}, "n-{a:b,b:b}-") == "ok");
}
