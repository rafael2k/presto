/* -*- Mode: c++; indent-tabs-mode: nil; c-basic-offset: 4 -*-
**
** Copyright (C) 2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "ecmascript.carakan.conversion.alternatives";
require init;

include "modules/ecmascript/ecmascript.h";
include "modules/doc/frm_doc.h";

global
{
    class AlternativesTester
        : public EcmaScript_Object
    {
    public:
        virtual int Call(ES_Object* this_object, ES_Value* argv, int argc, ES_Value* return_value, ES_Runtime* origining_runtime)
        {
            *return_value = argv[0];
            return ES_VALUE;
        }

        virtual int Construct(ES_Value* argv, int argc, ES_Value* return_value, ES_Runtime* origining_runtime)
        {
            AlternativesTester *tester = OP_NEW(AlternativesTester, ());
            if (!tester)
                return ES_NO_MEMORY;
            if (OpStatus::IsMemoryError(tester->format.Set(argv[0].value.string)) ||
                OpStatus::IsMemoryError(tester->SetFunctionRuntime(origining_runtime, origining_runtime->GetFunctionPrototype(), "ArrayTester", tester->format.CStr())))
            {
                OP_DELETE(tester);
                return ES_NO_MEMORY;
            }
            return_value->type = VALUE_OBJECT;
            return_value->value.object = *tester;
            return ES_VALUE;
        }

        OpString8 format;
    };
}

html
{
    "<html><body><script>document.write('bar');</script></body></html>"
}

test("Setup")
{
    ES_Runtime *runtime = state.doc->GetESRuntime();
    verify(runtime != NULL);

    AlternativesTester *tester = OP_NEW(AlternativesTester, ());
    verify(tester != NULL);
    verify_success(tester->SetFunctionRuntime(runtime, runtime->GetFunctionPrototype(), "AlternativesTester", "s-"));

    ES_Value value;
    value.type = VALUE_OBJECT;
    value.value.object = *tester;
    verify_success(runtime->PutName(runtime->GetGlobalObject(), UNI_L("AlternativesTester"), value));
}

test("Alternatives: (s|n)")
    language ecmascript;
{
    var tester = new AlternativesTester("(s|n)");

    verify(tester(true) === 1);
    verify(tester("foo") === "foo");
    verify(tester(3.14) === 3.14);
    verify(tester({ toString: function () { throw "invaild call to toString"; }, valueOf: function () { return 3.14; } }) === 3.14);
}

test("Alternatives: (n|s)")
    language ecmascript;
{
    var tester = new AlternativesTester("(n|s)");

    verify(tester(true) === "true");
    verify(tester("foo") === "foo");
    verify(tester(3.14) === 3.14);
    verify(tester({ toString: function () { return "foo"; }, valueOf: function () { throw "invaild call to valueOf"; } }) === "foo");
}

test("Alternatives: (#String|{length:s})")
    language ecmascript;
{
    var tester = new AlternativesTester("(#String|{length:s})");

    var string = new String("foo");
    verify(tester(string) === string);
    verify(tester(string).length === 3);

    var array = new Array(3);
    verify(tester(array) !== array);
    verify(tester(array).length === "3");
}
