/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "ecmascript.carakan.atan2";
require init;

include "modules/ecmascript/carakan/src/builtins/es_math_builtins_support.h";

global
{
  double zero = 0;
}

// Case 1: "If either x or y is NaN, the result is NaN."
test("atan2(NaN, 0) and atan2(0, NaN)")
{
  double r1 = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), op_nan(0), 0);
  double r2 = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), 0, op_nan(0));

  // Expected: NaN
  verify(op_isnan(r1));
  verify(op_isnan(r2));
}

// Case 2: "If y>0 and x is +0, the result is an implementation-dependent approximation to +PI/2."
test("atan2(1, 0)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), 1, 0);

  // Expected: positive PI / 2
  verify(op_fabs(2 * r - 3.14) < 0.01);
  verify(op_signbit(r) == 0);
}

// Case 3: "If y>0 and x is -0, the result is an implementation-dependent approximation to +PI/2."
test("atan2(1, -0)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), 1, op_copysign(0, -1));

  // Expected: positive PI / 2
  verify(op_fabs(2 * r - 3.14) < 0.01);
  verify(op_signbit(r) == 0);
}

// Case 4: "If y is +0 and x>0, the result is +0."
test("atan2(0, 1)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), 0, 1);

  // Expected: positive zero
  verify(r == 0);
  verify(op_signbit(r) == 0);
}

// Case 5: "If y is +0 and x is +0, the result is +0."
test("atan2(0, 0)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), 0, 0);

  // Expected: positive zero
  verify(r == 0);
  verify(op_signbit(r) == 0);
}

// Case 6: "If y is +0 and x is -0, the result is an implementation-dependent approximation to +PI."
test("atan2(0, -0)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), 0, op_copysign(0, -1));

  // Expected: positive PI
  verify(op_fabs(r - 3.14) < 0.01);
  verify(op_signbit(r) == 0);
}

// Case 7: "If y is +0 and x<0, the result is an implementation-dependent approximation to +PI."
test("atan2(0, -1)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), 0, -1);

  // Expected: positive PI
  verify(op_fabs(r - 3.14) < 0.01);
  verify(op_signbit(r) == 0);
}

// Case 8: "If y is -0 and x>0, the result is -0."
test("atan2(-0, 1)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), op_copysign(0, -1), 1);

  // Expected: negative zero
  verify(r == 0);
  verify(op_signbit(r) == 1);
}

// Case 9: "If y is -0 and x is +0, the result is -0."
test("atan2(-0, 0)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), op_copysign(0, -1), 0);

  // Expected: negative zero
  verify(r == 0);
  verify(op_signbit(r) == 1);
}

// Case 10: "If y is -0 and x is -0, the result is an implementation-dependent approximation to -PI."
test("atan2(-0, -0)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), op_copysign(0, -1), op_copysign(0, -1));

  // Expected: negative PI
  verify(op_fabs(r + 3.14) < 0.01);
  verify(op_signbit(r) == 1);
}

// Case 11: "If y is -0 and x<0, the result is an implementation-dependent approximation to -PI."
test("atan2(-0, -1)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), op_copysign(0, -1), -1);

  // Expected: negative PI
  verify(op_fabs(r + 3.14) < 0.01);
  verify(op_signbit(r) == 1);
}

// Case 12: "If y<0 and x is +0, the result is an implementation-dependent approximation to -PI/2."
test("atan2(-1, 0)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), -1, 0);

  // Expected: negative PI / 2
  verify(op_fabs(2 * r + 3.14) < 0.01);
  verify(op_signbit(r) == 1);
}

// Case 13: "If y<0 and x is -0, the result is an implementation-dependent approximation to -PI/2."
test("atan2(-1, -0)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), -1, op_copysign(0, -1));

  // Expected: negative PI / 2
  verify(op_fabs(2 * r + 3.14) < 0.01);
  verify(op_signbit(r) == 1);
}

// Case 14: "If y>0 and y is finite and x is +Inf, the result is +0."
test("atan2(1, Inf)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), 1, 1 / zero);

  // Expected: positive zero
  verify(r == 0);
  verify(op_signbit(r) == 0);
}

// Case 15: "If y>0 and y is finite and x is -Inf, the result if an implementation-dependent approximation to +PI."
test("atan2(1, -Inf)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), 1, -1 / zero);

  // Expected: positive PI
  verify(op_fabs(r - 3.14) < 0.01);
  verify(op_signbit(r) == 0);
}

// Case 16: "If y<0 and y is finite and x is +Inf, the result is -0."
test("atan2(-1, Inf)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), -1, 1 / zero);

  // Expected: negative zero
  verify(r == 0);
  verify(op_signbit(r) == 1);
}

// Case 17: "If y<0 and y is finite and x is -Inf, the result is an implementation-dependent approximation to -PI."
test("atan2(-1, -Inf)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), -1, -1 / zero);

  // Expected: negative PI
  verify(op_fabs(r + 3.14) < 0.01);
  verify(op_signbit(r) == 1);
}

// Case 18: "If y is +Inf and x is finite, the result is an implementation-dependent approximation to +PI/2."
test("atan2(Inf, 1)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), 1 / zero, 1);

  // Expected: positive PI / 2
  verify(op_fabs(2 * r - 3.14) < 0.01);
  verify(op_signbit(r) == 0);
}

// Case 19: "If y is -Inf and x is finite, the result is an implementation-dependent approximation to -PI/2."
test("atan2(-Inf, 1)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), -1 / zero, 1);

  // Expected: positive PI / 2
  verify(op_fabs(2 * r + 3.14) < 0.01);
  verify(op_signbit(r) == 1);
}

// Case 20: "If y is +Inf and x is +Inf, the result is an implementation-dependent approximation to +PI/4."
test("atan2(Inf, Inf)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), 1 / zero, 1 / zero);

  // Expected: positive PI / 4
  verify(op_fabs(4 * r - 3.14) < 0.01);
  verify(op_signbit(r) == 0);
}

// Case 21: "If y is +Inf and x is -Inf, the result is an implementation-dependent approximation to +3PI/4."
test("atan2(Inf, -Inf)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), 1 / zero, -1 / zero);

  // Expected: positive 3PI / 4
  verify(op_fabs(4 * (r / 3) - 3.14) < 0.01);
  verify(op_signbit(r) == 0);
}

// Case 22: "If y is -Inf and x is +Inf, the result is an implementation-dependent approximation to -PI/4."
test("atan2(-Inf, Inf)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), -1 / zero, 1 / zero);

  // Expected: negative PI / 4
  verify(op_fabs(4 * r + 3.14) < 0.01);
  verify(op_signbit(r) == 1);
}

// Case 23: "If y is -Inf and x is -Inf, the result is an implementation-dependent approximation to -3PI/4."
test("atan2(Inf, -Inf)")
{
  double r = ES_MathBuiltinSupport::HandleAtan2Special(op_nan(0), -1 / zero, -1 / zero);

  // Expected: negative 3PI / 4
  verify(op_fabs(4 * (r / 3) + 3.14) < 0.01);
  verify(op_signbit(r) == 1);
}
