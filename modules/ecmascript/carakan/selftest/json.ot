/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "ecmascript.carakan.json";
require init;

include "modules/ecmascript/ecmascript.h";
include "modules/doc/frm_doc.h";

// ========================================================================

test("parse (null) [script]")
  language ecmascript;
{
	verify(JSON.parse("null") === null);
}

test("parse (true) [script]")
  language ecmascript;
{
	verify(JSON.parse("true") === true);
}

test("parse (false) [script]")
  language ecmascript;
{
	verify(JSON.parse("false") === false);
}

test("parse (int32) [script]")
  language ecmascript;
{
	verify(JSON.parse("4711") === 4711);
}

test("parse (double) [script]")
  language ecmascript;
{
	verify(JSON.parse("0.5") === 0.5);
}

test("parse (string) [script]")
  language ecmascript;
{
	verify(JSON.parse("\"this is a string\"") === "this is a string");
}

test("parse (object) [script]")
  language ecmascript;
{
	var object = JSON.parse("{ \"name1\": 4711, \"name2\": \"value\" }");

	verify(typeof object === "object");
	verify("name1" in object);
	verify(object.name1 === 4711);
	verify("name2" in object);
	verify(object.name2 === "value");
}

test("parse (array) [script]")
  language ecmascript;
{
	var object = JSON.parse("[ null, true, false, 4711, 0.5, \"this is a string\" ]");

	verify(typeof object === "object");
	verify(object instanceof Array);
	verify(object.length === 6);

	verify(object[0] === null);
	verify(object[1] === true);
	verify(object[2] === false);
	verify(object[3] === 4711);
	verify(object[4] === 0.5);
	verify(object[5] === "this is a string");
}

test("stringify [script]")
  language ecmascript;
{
	var value = JSON.parse("{ \"array\": [ null, true, false, 4711, 0.5, \"this is a string\" ] }");

	verify(JSON.stringify(value) === "{\"array\":[null,true,false,4711,0.5,\"this is a string\"]}");
}

test("parse (null) [C++]")
{
	ES_Value value;
	ES_Runtime *runtime = state.doc->GetESRuntime();

	verify_success(runtime->ParseJSON(value, UNI_L("null")););
	verify(value.type == VALUE_NULL);
}

test("parse (true) [C++]")
{
	ES_Value value;
	ES_Runtime *runtime = state.doc->GetESRuntime();

	verify_success(runtime->ParseJSON(value, UNI_L("true")););
	verify(value.type == VALUE_BOOLEAN);
	verify(value.value.boolean == TRUE);
}

test("parse (false) [C++]")
{
	ES_Value value;
	ES_Runtime *runtime = state.doc->GetESRuntime();

	verify_success(runtime->ParseJSON(value, UNI_L("false")););
	verify(value.type == VALUE_BOOLEAN);
	verify(value.value.boolean == FALSE);
}

test("parse (int32) [C++]")
{
	ES_Value value;
	ES_Runtime *runtime = state.doc->GetESRuntime();

	verify_success(runtime->ParseJSON(value, UNI_L("4711")););
	verify(value.type == VALUE_NUMBER);
	verify(value.value.number == 4711);
}

test("parse (double) [C++]")
{
	ES_Value value;
	ES_Runtime *runtime = state.doc->GetESRuntime();

	verify_success(runtime->ParseJSON(value, UNI_L("0.5")););
	verify(value.type == VALUE_NUMBER);
	verify(value.value.number == 0.5);
}

test("parse (string) [C++]")
{
	ES_Value value;
	ES_Runtime *runtime = state.doc->GetESRuntime();

	verify_success(runtime->ParseJSON(value, UNI_L("\"this is a string\"")););
	verify(value.type == VALUE_STRING);
	verify_string(value.value.string, "this is a string");
}

test("parse (object) [C++]")
{
	ES_Value object_value, value;
	ES_Runtime *runtime = state.doc->GetESRuntime();

	verify_success(runtime->ParseJSON(object_value, UNI_L("{ \"name1\": 4711, \"name2\": \"value\" }")));
	verify(object_value.type == VALUE_OBJECT);
	verify(runtime->GetName(object_value.value.object, UNI_L("name1"), &value) == OpBoolean::IS_TRUE);
	verify(value.type == VALUE_NUMBER);
	verify(value.value.number == 4711);
	verify(runtime->GetName(object_value.value.object, UNI_L("name2"), &value) == OpBoolean::IS_TRUE);
	verify(value.type == VALUE_STRING);
	verify_string(value.value.string, "value");
}

test("parse (array) [C++]")
{
	ES_Value object_value, value;
	ES_Runtime *runtime = state.doc->GetESRuntime();

	verify_success(runtime->ParseJSON(object_value, UNI_L("[ null, true, false, 4711, 0.5, \"this is a string\" ]")));
	verify(object_value.type == VALUE_OBJECT);
	verify(runtime->GetName(object_value.value.object, UNI_L("length"), &value) == OpBoolean::IS_TRUE);
	verify(value.type == VALUE_NUMBER);
	verify(value.value.number == 6);

	verify(runtime->GetIndex(object_value.value.object, 0, &value) == OpBoolean::IS_TRUE);
	verify(value.type == VALUE_NULL);

	verify(runtime->GetIndex(object_value.value.object, 1, &value) == OpBoolean::IS_TRUE);
	verify(value.type == VALUE_BOOLEAN);
	verify(value.value.boolean == TRUE);

	verify(runtime->GetIndex(object_value.value.object, 2, &value) == OpBoolean::IS_TRUE);
	verify(value.type == VALUE_BOOLEAN);
	verify(value.value.boolean == FALSE);

	verify(runtime->GetIndex(object_value.value.object, 3, &value) == OpBoolean::IS_TRUE);
	verify(value.type == VALUE_NUMBER);
	verify(value.value.number == 4711);

	verify(runtime->GetIndex(object_value.value.object, 4, &value) == OpBoolean::IS_TRUE);
	verify(value.type == VALUE_NUMBER);
	verify(value.value.number == 0.5);

	verify(runtime->GetIndex(object_value.value.object, 5, &value) == OpBoolean::IS_TRUE);
	verify(value.type == VALUE_STRING);
	verify_string(value.value.string, "this is a string");
}

test("stringify [C++]")
{
	ES_Value value;
	ES_Runtime *runtime = state.doc->GetESRuntime();
	TempBuffer buffer;

	verify_success(runtime->ParseJSON(value, UNI_L("{ \"array\": [ null, true, false, 4711, 0.5, \"this is a string\" ] }")));
	verify_success(runtime->SerializeJSON(buffer, value));

	verify_string(buffer.GetStorage(), UNI_L("{\"array\":[null,true,false,4711,0.5,\"this is a string\"]}"));
}

test("parse (length) [C++]")
{
	ES_Value object_value, value;
	ES_Runtime *runtime = state.doc->GetESRuntime();


	unsigned length = 15;
	verify_success(runtime->ParseJSON(object_value, UNI_L("{\"name1\": 4711}, \"name2\": \"value\" }"), length));
	verify(object_value.type == VALUE_OBJECT);
	verify(runtime->GetName(object_value.value.object, UNI_L("name1"), &value) == OpBoolean::IS_TRUE);
	verify(value.type == VALUE_NUMBER);
	verify(value.value.number == 4711);
}
