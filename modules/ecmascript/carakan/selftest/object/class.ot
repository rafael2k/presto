/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4; c-file-style: "stroustrup" -*-
**
** Copyright (C) 2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "ecmascript.carakan.object.class";
require init;

include "modules/ecmascript/ecmascript.h";
include "modules/ecmascript/carakan/src/es_pch.h";
include "modules/ecmascript/carakan/src/object/es_class.h";
include "modules/ecmascript/carakan/src/kernel/es_string.h";

global
{
    ES_Runtime *runtime;
    ES_Context *context;
    JString *x, *y, *z;
    ES_Global_Object *global_object;
}

setup
{
    runtime = new ES_Runtime();
    runtime->Construct();
    context = runtime->CreateContext(NULL);
    global_object = context->GetExecutionContext()->GetGlobalObject();

    x = JString::Make(context, "x");
    y = JString::Make(context, "y");
    z = JString::Make(context, "z");
}

exit
{
    runtime->DeleteContext(context);
    runtime->Detach();
}

subtest UpdateTypeInPlace(ES_Class *root)
{
    ES_Class *node1 = root;
    ES_Property_Info info;

    node1 = ES_Class::ExtendWithL(context, node1, x, info, ES_STORAGE_OBJECT, ES_LayoutIndex(0));
    node1 = ES_Class::ExtendWithL(context, node1, y, info, ES_STORAGE_OBJECT, ES_LayoutIndex(1));
    node1 = ES_Class::ExtendWithL(context, node1, z, info, ES_STORAGE_OBJECT, ES_LayoutIndex(2));

    ES_Class *node2 = root;

    node2 = ES_Class::ExtendWithL(context, node2, x, info, ES_STORAGE_OBJECT, ES_LayoutIndex(0));
    node2 = ES_Class::ExtendWithL(context, node2, y, info, ES_STORAGE_NULL, ES_LayoutIndex(1));
    node2 = ES_Class::ExtendWithL(context, node2, z, info, ES_STORAGE_OBJECT, ES_LayoutIndex(2));

    verify(node1->GetLayoutInfoAtIndex(ES_LayoutIndex(1)).GetStorageType() == ES_STORAGE_OBJECT_OR_NULL);
    verify(node1 == node2);
}

test("Inplace type conversion")
{
    verify(UpdateTypeInPlace(ES_Class::MakeRoot(context, global_object->GetObjectPrototype(), "NodeClass1")));
    verify(UpdateTypeInPlace(ES_Class::MakeCompactRoot(context, global_object->GetObjectPrototype(), "CompactNodeClass1")));
}

subtest ChangeTypeInPlace(ES_Class *root, BOOL with_private)
{
    ES_Class *node = root;
    ES_Property_Info info;
    unsigned p = 0;

    node = ES_Class::ExtendWithL(context, node, x, info, ES_STORAGE_OBJECT, ES_LayoutIndex(p++));
    if (with_private)
        node = ES_Class::ExtendWithL(context, node, ES_STORAGE_SPECIAL_PRIVATE, ES_LayoutIndex(p++));
    node = ES_Class::ExtendWithL(context, node, y, info, ES_STORAGE_OBJECT, ES_LayoutIndex(p++));
    node = ES_Class::ExtendWithL(context, node, z, info, ES_STORAGE_OBJECT, ES_LayoutIndex(p++));

    BOOL needs_conversion = FALSE;
    node = ES_Class::ChangeType(context, node, node->IndexOf(x), ES_STORAGE_NULL, p, needs_conversion);

    verify(!needs_conversion);
    verify(node->GetLayoutInfoAtInfoIndex(node->IndexOf(x)).GetStorageType() == ES_STORAGE_OBJECT_OR_NULL);
}

test("Inplace type change")
{
    verify(ChangeTypeInPlace(ES_Class::MakeRoot(context, global_object->GetObjectPrototype(), "NodeClass2"), FALSE));
    verify(ChangeTypeInPlace(ES_Class::MakeCompactRoot(context, global_object->GetObjectPrototype(), "CompactNodeClass2"), FALSE));
    verify(ChangeTypeInPlace(ES_Class::MakeRoot(context, global_object->GetObjectPrototype(), "NodeClass3"), TRUE));
    verify(ChangeTypeInPlace(ES_Class::MakeCompactRoot(context, global_object->GetObjectPrototype(), "CompactNodeClass3"), TRUE));
}

subtest AreSiblings(ES_Class *klass1, ES_Class *klass2, BOOL expected)
{
    ES_Class *s = klass1->sibling;
    while (s)
    {
        if (s == klass2)
            return TRUE == expected;
        s = s->sibling;
    }

    s = klass2->sibling;

    while (s)
    {
        if (s == klass1)
            return TRUE == expected;
        s = s->sibling;
    }

    return FALSE == expected;
}

test("Special private and siblings")
{
    ES_Class *root = ES_Class::MakeRoot(context, global_object->GetObjectPrototype(), "NodeClass5");
    ES_Class *node1 = root;
    ES_Class *node2 = root;
    ES_Class *node3 = root;
    ES_Property_Info info;
    unsigned p = 0;

    node2 = ES_Class::ExtendWithL(context, node2, x, info, ES_STORAGE_OBJECT, ES_LayoutIndex(p++));
    node2 = ES_Class::ExtendWithL(context, node2, y, info, ES_STORAGE_OBJECT, ES_LayoutIndex(p++));

    p = 0;
    node1 = ES_Class::ExtendWithL(context, node1, x, info, ES_STORAGE_OBJECT, ES_LayoutIndex(p++));
    node1 = ES_Class::ExtendWithL(context, node1, ES_STORAGE_SPECIAL_PRIVATE, ES_LayoutIndex(p++));

    p = 0;
    node3 = ES_Class::ExtendWithL(context, node3, x, info, ES_STORAGE_OBJECT, ES_LayoutIndex(p++));
    node3 = ES_Class::ExtendWithL(context, node3, z, info, ES_STORAGE_OBJECT, ES_LayoutIndex(p++));
}

test("Special private, hash table classes, and changing type")
{
    ES_Class *node = ES_Class::MakeRoot(context, global_object->GetObjectPrototype(), "NodeClass6");
    ES_Property_Info info;
    unsigned p = 0;

    node = ES_Class::ExtendWithL(context, node, x, info, ES_STORAGE_INT32, ES_LayoutIndex(p++));
    node = ES_Class::ExtendWithL(context, node, y, info, ES_STORAGE_INT32, ES_LayoutIndex(p++));
    node = ES_Class::ExtendWithL(context, node, z, info, ES_STORAGE_INT32, ES_LayoutIndex(p++));
    node = ES_Class::ExtendWithL(context, node, ES_STORAGE_SPECIAL_PRIVATE, ES_LayoutIndex(p++));

    ES_Class *hash = ES_Class::MakeHash(context, node, 0);

    BOOL needs_conversion = FALSE;

    hash = ES_Class::ChangeType(context, hash, ES_PropertyIndex(0), ES_STORAGE_WHATEVER, 4, needs_conversion);

    node = static_cast<ES_Class_Hash *>(hash)->klass;
    verify(needs_conversion);
    verify(hash->extra == node->extra);
}

test("Delete on singleton with internal property")
{
    ES_Property_Info info;

    ES_Class *k = ES_Class::MakeSingleton(context, global_object->GetObjectPrototype());
    k = ES_Class::ExtendWithL(context, k, ES_STORAGE_SPECIAL_PRIVATE, ES_LayoutIndex(0));
    k = ES_Class::ExtendWithL(context, k, x, info, ES_STORAGE_OBJECT, ES_LayoutIndex(1));
    k = ES_Class::ExtendWithL(context, k, y, info, ES_STORAGE_OBJECT, ES_LayoutIndex(2));
    k = ES_Class::ExtendWithL(context, k, z, info, ES_STORAGE_OBJECT, ES_LayoutIndex(3));

    ES_LayoutIndex i = k->GetPropertyInfoAtIndex(ES_PropertyIndex(2)).Index();
    BOOL needs_conversion;
    k = ES_Class::DeleteL(context, k, y, 4, needs_conversion);
    ES_LayoutIndex j = k->GetPropertyInfoAtIndex(ES_PropertyIndex(1)).Index();

    verify(!needs_conversion);
    verify(i == 3);
    verify(j == 2);
}

test("Change type on singleton property that also changes its alignment")
{
    ES_Property_Info info;

    ES_Class *k = ES_Class::MakeSingleton(context, global_object->GetObjectPrototype());
    k = ES_Class::ExtendWithL(context, k, x, info, ES_STORAGE_INT32, ES_LayoutIndex(0));
    k = ES_Class::ExtendWithL(context, k, y, info, ES_STORAGE_INT32, ES_LayoutIndex(1));
    k = ES_Class::ExtendWithL(context, k, z, info, ES_STORAGE_INT32, ES_LayoutIndex(2));

    verify(k->GetLayoutInfoAtIndex(ES_LayoutIndex(2)).GetOffset() == 0x8);

    BOOL needs_conversion;
    k = ES_Class::ChangeType(context, k, ES_PropertyIndex(2), ES_STORAGE_DOUBLE, 3, needs_conversion);

    verify(!needs_conversion);
    verify(k->GetLayoutInfoAtIndex(ES_LayoutIndex(2)).GetOffset() == 0xc);
}

test("Private property")
{
    ES_Class *root = ES_Class::MakeRoot(context, global_object->GetObjectPrototype(), "NodeClass7");
    ES_Property_Info info;
    unsigned p = 0;

    ES_Class *node0 = ES_Class::ExtendWithL(context, root, ES_STORAGE_SPECIAL_PRIVATE, ES_LayoutIndex(p));
    ES_Class *node1 = ES_Class::ExtendWithL(context, root, ES_STORAGE_SPECIAL_PRIVATE, ES_LayoutIndex(p));

    verify(node0 == node1);
}

test("More than one ES_Class_Extra")
    disabled;
{
    ES_Class *root = ES_Class::MakeRoot(context, global_object->GetObjectPrototype(), "NodeClass8");
    ES_Property_Info info;
    unsigned p = 0;

    ES_Class::ExtendWithL(context, root, ES_STORAGE_SPECIAL_PADDING, 4, ES_LayoutIndex(p));
    ES_Class::ExtendWithL(context, root, ES_STORAGE_SPECIAL_PADDING, 8, ES_LayoutIndex(p));
    ES_Class::ExtendWithL(context, root, ES_STORAGE_SPECIAL_PADDING, 12, ES_LayoutIndex(p));

    ES_Class *node0 = ES_Class::ExtendWithL(context, root, ES_STORAGE_SPECIAL_PRIVATE, 0, ES_LayoutIndex(p++));

    node0 = ES_Class::ExtendWithL(context, node0, x, info, ES_STORAGE_INT32, ES_LayoutIndex(p++));

    verify(node0->LayoutLevel() == 2);
    verify(node0->Level() == 1);
}

test("Need limit check")
{
    ES_Class *root = ES_Class::MakeCompactRoot(context, global_object->GetObjectPrototype(), "CompactNodeClass4");

    ES_Property_Info info;
    unsigned p = 0;

    const char *names = "abcdefghijklmno";

    ES_Class *node = root;
    for (; p < 15; ++p)
        node = ES_Class::ExtendWithL(context, node, JString::Make(context, names + p, 1), info, ES_STORAGE_INT32, ES_LayoutIndex(p));

    ES_Class *node0 = node;

    node = ES_Class::ExtendWithL(context, node, x, info, ES_STORAGE_INT32, ES_LayoutIndex(p++));
    node = ES_Class::ExtendWithL(context, node, y, info, ES_STORAGE_INT32, ES_LayoutIndex(p++));
    node = ES_Class::ExtendWithL(context, node, z, info, ES_STORAGE_INT32, ES_LayoutIndex(p++));

    /* verify that we indeed have a compact class that is compact, if
     * this doesn't holde we've tweaked branching and selftest should
     * be updated */
    verify(node0->LayoutLevel() == node->LayoutLevel());

    ES_Class *node1 = node->GetParent();

    /* positives */
    verify(!node->NeedLimitCheck(ES_LayoutIndex(node1->LayoutLevel()), FALSE));
    verify(node->NeedLimitCheck(ES_LayoutIndex(node->LayoutLevel()), FALSE));

    /* negatives */
    verify(!node1->NeedLimitCheck(ES_LayoutIndex(node1->LayoutLevel() + 1), TRUE));
    verify(node->NeedLimitCheck(ES_LayoutIndex(p), TRUE));
}
