/* -*- Mode: c++; indent-tabs-mode: nil; c-basic-offset: 4 -*-
**
** Copyright (C) 2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "ecmascript.carakan.conversion.array";
require init;

include "modules/ecmascript/ecmascript.h";
include "modules/doc/frm_doc.h";

global
{
    class ArrayTester
        : public EcmaScript_Object
    {
    public:
        enum ElementType
        {
            ELEMENT_TYPE_WHATEVER,
            ELEMENT_TYPE_BOOLEAN,
            ELEMENT_TYPE_NUMBER,
            ELEMENT_TYPE_STRING,
            ELEMENT_TYPE_PRIMITIVE,
            NOLENGTH_ARRAY,
            ELEMENT_TYPE_DICTIONARY
        };

        ArrayTester(ElementType element_type)
            : element_type(element_type)
        {
        }

        virtual int Call(ES_Object* this_object, ES_Value* argv, int argc, ES_Value* return_value, ES_Runtime* origining_runtime)
        {
            return_value->type = VALUE_STRING;

            for (int argi = 0; argi < argc; ++argi)
                if (argv[argi].type != VALUE_OBJECT)
                {
                    if (element_type != ELEMENT_TYPE_WHATEVER)
                    {
                        return_value->value.string = UNI_L("argv[N] is not an object");
                        return ES_VALUE;
                    }
                    else if (argv[argi].type != VALUE_NULL && argv[argi].type != VALUE_UNDEFINED)
                    {
                        return_value->value.string = UNI_L("argv[N] is not an object, null or undefined");
                        return ES_VALUE;
                    }
                }
                else if (element_type == NOLENGTH_ARRAY)
                {
                    ES_Value value;
                    ES_Object *array = argv[argi].value.object;

                    if (origining_runtime->GetName(array, UNI_L("length"), &value) == OpBoolean::IS_TRUE)
                    {
                        return_value->value.string = UNI_L("argv[N].length is readable while it shouldn't");
                        return ES_VALUE;
                    }
                }
                else
                {
                    ES_Object *array = argv[argi].value.object;

                    OP_BOOLEAN result;
                    ES_Value value;

                    result = origining_runtime->GetName(array, UNI_L("length"), &value);

                    if (result != OpBoolean::IS_TRUE)
                    {
                        return_value->value.string = UNI_L("argv[N].length not readable");
                        return ES_VALUE;
                    }
                    else if (value.type != VALUE_NUMBER)
                    {
                        return_value->value.string = UNI_L("argv[N].length is not a number");
                        return ES_VALUE;
                    }

                    unsigned length = op_double2uint32(value.value.number);

                    if (length != value.value.number)
                    {
                        return_value->value.string = UNI_L("argv[N].length is not an integer in the range [0, UINT_MAX]");
                        return ES_VALUE;
                    }

                    for (unsigned index = 0; index < length; ++index)
                    {
                        result = origining_runtime->GetIndex(array, index, &value);

                        if (result == OpBoolean::IS_TRUE)
                            switch (element_type)
                            {
                            case ELEMENT_TYPE_BOOLEAN:
                                if (value.type != VALUE_BOOLEAN)
                                {
                                    return_value->value.string = UNI_L("argv[N][N] is not a boolean");
                                    return ES_VALUE;
                                }
                                else if (!value.value.boolean)
                                {
                                    return_value->value.string = UNI_L("argv[N][N] is not true");
                                    return ES_VALUE;
                                }
                                break;

                            case ELEMENT_TYPE_NUMBER:
                                if (value.type != VALUE_NUMBER)
                                {
                                    return_value->value.string = UNI_L("argv[N][N] is not a number");
                                    return ES_VALUE;
                                }
                                else if (value.value.number != 3.14)
                                {
                                    return_value->value.string = UNI_L("argv[N][N] is not 3.14");
                                    return ES_VALUE;
                                }
                                break;

                            case ELEMENT_TYPE_STRING:
                                if (value.type != VALUE_STRING)
                                {
                                    return_value->value.string = UNI_L("argv[N][N] is not a string");
                                    return ES_VALUE;
                                }
                                else if (!uni_str_eq(value.value.string, "foo"))
                                {
                                    return_value->value.string = UNI_L("argv[N][N] is not \"foo\"");
                                    return ES_VALUE;
                                }
                                break;

                            case ELEMENT_TYPE_PRIMITIVE:
                                if (value.type == VALUE_OBJECT)
                                {
                                    return_value->value.string = UNI_L("argv[N][N] is not a primitive value");
                                    return ES_VALUE;
                                }

                                // [null, undefined, false, "foo", 3.14]
                                switch (index)
                                {
                                case 0:
                                    if (value.type != VALUE_NULL)
                                    {
                                        return_value->value.string = UNI_L("argv[N][N] is not null");
                                        return ES_VALUE;
                                    }
                                    break;

                                case 1:
                                    if (value.type != VALUE_UNDEFINED)
                                    {
                                        return_value->value.string = UNI_L("argv[N][N] is not undefined");
                                        return ES_VALUE;
                                    }
                                    break;

                                case 2:
                                    if (value.type != VALUE_BOOLEAN)
                                    {
                                        return_value->value.string = UNI_L("argv[N][N] is not a boolean");
                                        return ES_VALUE;
                                    }
                                    else if (value.value.boolean != FALSE)
                                    {
                                        return_value->value.string = UNI_L("argv[N][N] is not false");
                                        return ES_VALUE;
                                    }
                                    break;

                                case 3:
                                    if (value.type != VALUE_STRING)
                                    {
                                        return_value->value.string = UNI_L("argv[N][N] is not a string");
                                        return ES_VALUE;
                                    }
                                    else if (uni_strcmp(value.value.string, "foo") != 0)
                                    {
                                        return_value->value.string = UNI_L("argv[N][N] is not \"foo\"");
                                        return ES_VALUE;
                                    }
                                    break;

                                case 4:
                                    if (value.type != VALUE_NUMBER)
                                    {
                                        return_value->value.string = UNI_L("argv[N][N] is not a number");
                                        return ES_VALUE;
                                    }
                                    else if (value.value.number != 3.14)
                                    {
                                        return_value->value.string = UNI_L("argv[N][N] is not 3.14");
                                        return ES_VALUE;
                                    }
                                    break;

                                default:
                                    return_value->value.string = UNI_L("argv[N][N] is out of bounds");
                                    return ES_VALUE;
                                }
                                break;

                            case ELEMENT_TYPE_DICTIONARY:
                                if (value.type != VALUE_OBJECT)
                                {
                                    return_value->value.string = UNI_L("argv[N][N] is not an object");
                                    return ES_VALUE;
                                }

                                ES_Object *dictionary = value.value.object;

                                result = origining_runtime->GetName(dictionary, UNI_L("boolean"), &value);
                                if (result != OpBoolean::IS_TRUE)
                                {
                                    return_value->value.string = UNI_L("argv[N][N].boolean can't be read, or doesn't exist");
                                    return ES_VALUE;
                                }
                                else if (value.type != VALUE_BOOLEAN)
                                {
                                    return_value->value.string = UNI_L("argv[N][N].boolean is not a boolean");
                                    return ES_VALUE;
                                }
                                else if (!value.value.boolean)
                                {
                                    return_value->value.string = UNI_L("argv[N][N].boolean is not true");
                                    return ES_VALUE;
                                }

                                result = origining_runtime->GetName(dictionary, UNI_L("number"), &value);
                                if (result != OpBoolean::IS_TRUE)
                                {
                                    return_value->value.string = UNI_L("argv[N][N].number can't be read, or doesn't exist");
                                    return ES_VALUE;
                                }
                                else if (value.type != VALUE_NUMBER)
                                {
                                    return_value->value.string = UNI_L("argv[N][N].number is not a number");
                                    return ES_VALUE;
                                }
                                else if (value.value.number != 3.14)
                                {
                                    return_value->value.string = UNI_L("argv[N][N].number is not 3.14");
                                    return ES_VALUE;
                                }

                                result = origining_runtime->GetName(dictionary, UNI_L("string"), &value);
                                if (result != OpBoolean::IS_TRUE)
                                {
                                    return_value->value.string = UNI_L("argv[N][N].string can't be read, or doesn't exist");
                                    return ES_VALUE;
                                }
                                else if (value.type != VALUE_STRING)
                                {
                                    return_value->value.string = UNI_L("argv[N][N].string is not a string");
                                    return ES_VALUE;
                                }
                                else if (!uni_str_eq(value.value.string, "foo"))
                                {
                                    return_value->value.string = UNI_L("argv[N][N].string is not \"foo\"");
                                    return ES_VALUE;
                                }
                                break;
                            }
                    }
                }

            return_value->value.string = UNI_L("ok");
            return ES_VALUE;
        }

        ElementType element_type;
    };

    class DictionaryObject
        : public EcmaScript_Object
    {
    public:
        virtual ES_GetState GetName(const uni_char* property_name, int property_code, ES_Value* value, ES_Runtime* origining_runtime)
        {
            if (uni_str_eq(property_name, "boolean") ||
                uni_str_eq(property_name, "number") ||
                uni_str_eq(property_name, "string"))
                if (value)
                {
                    value->type = VALUE_OBJECT;
                    value->value.object = *this;
                    return GET_SUSPEND;
                }
                else
                    return GET_SUCCESS;
            else
                return GET_FAILED;
        }

        virtual ES_GetState GetNameRestart(const uni_char* property_name, int property_code, ES_Value* value, ES_Runtime* origining_runtime, ES_Object* restart_object)
        {
            if (uni_str_eq(property_name, "boolean"))
            {
                value->type = VALUE_BOOLEAN;
                value->value.boolean = TRUE;
                return GET_SUCCESS;
            }
            else if (uni_str_eq(property_name, "number"))
            {
                value->type = VALUE_NUMBER;
                value->value.number = 3.14;
                return GET_SUCCESS;
            }
            else /* if (uni_str_eq(property_name, "string")) */
            {
                value->type = VALUE_STRING;
                value->value.string = UNI_L("foo");
                return GET_SUCCESS;
            }
        }
    };
}

html
{
    "<html><body><script>document.write('bar');</script></body></html>"
}

test("Setup")
{
    ES_Runtime *runtime = state.doc->GetESRuntime();
    verify(runtime != NULL);

    ES_Value value;
    ArrayTester *tester;

    value.type = VALUE_OBJECT;

    tester = OP_NEW(ArrayTester, (ArrayTester::ELEMENT_TYPE_WHATEVER));
    verify(tester != NULL);
    verify_success(tester->SetFunctionRuntime(runtime, runtime->GetFunctionPrototype(), "ArrayTester", "?[-]"));
    value.value.object = *tester;
    verify_success(runtime->PutName(runtime->GetGlobalObject(), UNI_L("whatever"), value));

    tester = OP_NEW(ArrayTester, (ArrayTester::ELEMENT_TYPE_BOOLEAN));
    verify(tester != NULL);
    verify_success(tester->SetFunctionRuntime(runtime, runtime->GetFunctionPrototype(), "ArrayTester", "[b]"));
    value.value.object = *tester;
    verify_success(runtime->PutName(runtime->GetGlobalObject(), UNI_L("boolean"), value));

    tester = OP_NEW(ArrayTester, (ArrayTester::ELEMENT_TYPE_NUMBER));
    verify(tester != NULL);
    verify_success(tester->SetFunctionRuntime(runtime, runtime->GetFunctionPrototype(), "ArrayTester", "[n]"));
    value.value.object = *tester;
    verify_success(runtime->PutName(runtime->GetGlobalObject(), UNI_L("number"), value));

    tester = OP_NEW(ArrayTester, (ArrayTester::ELEMENT_TYPE_STRING));
    verify(tester != NULL);
    verify_success(tester->SetFunctionRuntime(runtime, runtime->GetFunctionPrototype(), "ArrayTester", "[s]"));
    value.value.object = *tester;
    verify_success(runtime->PutName(runtime->GetGlobalObject(), UNI_L("string"), value));

    tester = OP_NEW(ArrayTester, (ArrayTester::ELEMENT_TYPE_PRIMITIVE));
    verify(tester != NULL);
    verify_success(tester->SetFunctionRuntime(runtime, runtime->GetFunctionPrototype(), "ArrayTester", "[p]"));
    value.value.object = *tester;
    verify_success(runtime->PutName(runtime->GetGlobalObject(), UNI_L("primitive"), value));

    tester = OP_NEW(ArrayTester, (ArrayTester::NOLENGTH_ARRAY));
    verify(tester != NULL);
    verify_success(tester->SetFunctionRuntime(runtime, runtime->GetFunctionPrototype(), "ArrayTester", "[-]"));
    value.value.object = *tester;
    verify_success(runtime->PutName(runtime->GetGlobalObject(), UNI_L("nolength"), value));

    tester = OP_NEW(ArrayTester, (ArrayTester::ELEMENT_TYPE_DICTIONARY));
    verify(tester != NULL);
    verify_success(tester->SetFunctionRuntime(runtime, runtime->GetFunctionPrototype(), "ArrayTester", "[{boolean:b,number:n,string:s}]"));
    value.value.object = *tester;
    verify_success(runtime->PutName(runtime->GetGlobalObject(), UNI_L("dictionary"), value));

    DictionaryObject *object = OP_NEW(DictionaryObject, ());

    verify(object != NULL);
    verify_success(object->SetObjectRuntime(runtime, runtime->GetObjectPrototype(), "DictionaryObject"));

    value.type = VALUE_OBJECT;
    value.value.object = *object;

    verify_success(runtime->PutName(runtime->GetGlobalObject(), UNI_L("hostDictionary"), value));
}

test("Array: empty array")
    language ecmascript;
{
    verify(whatever([]) == "ok");
    verify(whatever({length: 0}) == "ok");
    verify(whatever({length: {valueOf:function(){ return 0; }}}) == "ok");
}

test("Array: whatever")
    language ecmascript;
{
    var array = [ true, 3.14, "foo", { toString: function () { throw "invalid call to toString"; },
                                       valueOf: function () { throw "invalid call to valueOf"; } } ];

    verify(whatever(array) == "ok");
}

test("Array: whatever (null/undefined)")
    language ecmascript;
{
    verify(whatever(null) == "ok");
    verify(whatever(undefined) == "ok");
}

test("Array: boolean")
    language ecmascript;
{
    var array = [ true, true, true, true ];
    verify(boolean(array) == "ok");
}

test("Array: boolean (converted)")
    language ecmascript;
{
    var array = [ true, 3.14, "foo", { foo: 3.14 } ];
    verify(boolean(array) == "ok");
}

test("Array: boolean (getter)")
    language ecmascript;
{
    var array = { get length() { return 3; },
                  get 0() { return true; },
                  get 1() { return true; },
                  get 2() { return true; } };

    verify(boolean(array) == "ok");
}

test("Array: boolean (getter + converted)")
    language ecmascript;
{
    var array = { get length() { return { valueOf: function () { return 3; } }; },
                  get 0() { return { valueOf: function () { throw "invalid call to valueOf"; } }; },
                  get 1() { return { valueOf: function () { throw "invalid call to valueOf"; } }; },
                  get 2() { return { valueOf: function () { throw "invalid call to valueOf"; } }; } };

    verify(boolean(array) == "ok");
}

test("Array: number")
    language ecmascript;
{
    var array = [ 3.14, 3.14, 3.14 ];
    verify(number(array) == "ok");
}

test("Array: number (converted)")
    language ecmascript;
{
    var array = [ "3.14", { valueOf: function () { return 3.14; } } ];
    verify(number(array) == "ok");
}

test("Array: number (getter)")
    language ecmascript;
{
    var array = { get length() { return 3; },
                  get 0() { return 3.14; },
                  get 1() { return 3.14; },
                  get 2() { return 3.14; } };

    verify(number(array) == "ok");
}

test("Array: number (getter + converted)")
    language ecmascript;
{
    var array = { get length() { return { valueOf: function () { return 3; } }; },
                  get 0() { return { valueOf: function () { return 3.14; } }; },
                  get 1() { return { valueOf: function () { return 3.14; } }; },
                  get 2() { return { valueOf: function () { return 3.14; } }; } };

    verify(number(array) == "ok");
}

test("Array: string")
    language ecmascript;
{
    var array = [ "foo", "foo" ];
    verify(string(array) == "ok");
}

test("Array: string (converted)")
    language ecmascript;
{
    var array = [ { toString: function () { return "foo"; } } ];
    verify(string(array) == "ok");
}

test("Array: string (getter)")
    language ecmascript;
{
    var array = { get length() { return 3; },
                  get 0() { return "foo"; },
                  get 1() { return "foo"; },
                  get 2() { return "foo"; } };

    verify(string(array) == "ok");
}

test("Array: string (getter + converted)")
    language ecmascript;
{
    var array = { get length() { return { valueOf: function () { return 3; } }; },
                  get 0() { return { toString: function () { return "foo"; } }; },
                  get 1() { return { toString: function () { return "foo"; } }; },
                  get 2() { return { toString: function () { return "foo"; } }; } };

    verify(string(array) == "ok");
}

test("Array: primitive")
    language ecmascript;
{
    var array = [null, undefined, new Boolean(false), new String("foo"), new Number(3.14)];
    verify(primitive(array) == "ok");
}

test("Array: primitive (converted)")
    language ecmascript;
{
    var array = [
        { valueOf: function () { return null; } },
        { valueOf: function () { return undefined; } },
        { valueOf: function () { return false; } },
        { valueOf: function () { return "foo"; } },
        { valueOf: function () { return 3.14; } }
    ];
    verify(primitive(array) == "ok");
}

test("Array: primitive (getter)")
    language ecmascript;
{
    var array = {
        get length() { return 5; },
        get 0() { return { valueOf: function () { return null; } }; },
        get 1() { return { valueOf: function () { return undefined; } }; },
        get 2() { return { valueOf: function () { return false; } }; },
        get 3() { return { valueOf: function () { return "foo"; } }; },
        get 4() { return { valueOf: function () { return 3.14; } }; }
    };

    verify(primitive(array) == "ok");
}

test("Array: primitive error")
    language ecmascript;
{
    try
    {
        var o = {
            valueOf: function(){ return o; },
            toString: function(){ return o; }
        };
        verify(primitive([o]) == "ok");
        verify(!"not reached");
    }
    catch (e)
    {
        verify(e instanceof TypeError);
    }
}

test("Array: dictionary")
    language ecmascript;
{
    var array = [ hostDictionary, hostDictionary, hostDictionary ];
    verify(dictionary(array) == "ok");
}

test("Array: non-integer length")
    language ecmascript;
{
    var array = { length: 3.5, 0: true, 1: true, 2: true, 3: false };
    verify(boolean(array) == "ok");
}

test("Array: sparse")
    language ecmascript;
{
    var array = { length: 3, 0: true, 2: true };
    verify(boolean(array) == "ok");
}

test("Array: null")
    language ecmascript;
{
    try
    {
        boolean(null);
        verify(!"not reached");
    }
    catch (e)
    {
        verify(e instanceof TypeError);
    }
}

test("Array: lengthless object")
    language ecmascript;
{
    // No length, 0 is assumed
    verify(nolength({}) == 'ok');
    verify(nolength({0:'2', 1:'b'}) == 'ok');
}

test("Array: undefined")
    language ecmascript;
{
    try
    {
        boolean(void 0);
        verify(!"not reached");
    }
    catch (e)
    {
        verify(e instanceof TypeError);
    }
}

test("Array: infinite recursion")
    language ecmascript;
{
    try
    {
        function do_it(){
            number([ { valueOf: function () { do_it(); } } ]);
        }
        do_it();
        verify(!"not reached");
    }
    catch (e) {}
}

test("Array: exception propagated from getter for length")
    language ecmascript;
{
    try
    {
        whatever({ get length() { throw new RangeError; } });
        verify(!"not reached");
    }
    catch (e)
    {
        verify(e instanceof RangeError);
    }
}

test("Array: exception propagated from getter for element")
    language ecmascript;
{
    try
    {
        whatever({ length: 1, get 0() { throw new RangeError; } });
        verify(!"not reached");
    }
    catch (e)
    {
        verify(e instanceof RangeError);
    }
}

test("Array: exception propagated from valueOf")
    language ecmascript;
{
    try
    {
        number([ { valueOf: function () { throw new RangeError; } } ]);
        verify(!"not reached");
    }
    catch (e)
    {
        verify(e instanceof RangeError);
    }
}
