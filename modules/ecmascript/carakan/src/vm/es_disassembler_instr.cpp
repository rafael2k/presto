/* Generated by src/tables/gen_disassembler.js */

#include "core/pch.h"

#include "modules/ecmascript/carakan/src/es_pch.h"

#ifdef ECMASCRIPT_DISASSEMBLER

ES_CONST_ARRAY(simple_operations, char*, 256)
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("APPLY"),
    ES_CONST_ENTRY("RETURN"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("TRIED"),
    ES_CONST_ENTRY("THROW"),
    ES_CONST_ENTRY("CATCH"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("RTS"),
    ES_CONST_ENTRY("POPR"),
    ES_CONST_ENTRY("PUSHSCOPE"),
    ES_CONST_ENTRY("POPSCOPE"),
    ES_CONST_ENTRY("DUP"),
    ES_CONST_ENTRY("DUP2"),
    ES_CONST_ENTRY("DROP"),
    ES_CONST_ENTRY("SWAP"),
    ES_CONST_ENTRY("UNDER2"),
    ES_CONST_ENTRY("UNDER3"),
    ES_CONST_ENTRY("OVER2"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("CUNDEFINED"),
    ES_CONST_ENTRY("CNULL"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("MKOBJECT"),
    ES_CONST_ENTRY("MKARRAY"),
    ES_CONST_ENTRY("MKREGEX"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("ENUMERATE"),
    ES_CONST_ENTRY("GETENUM"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("GET_INDIR"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("PUT_INDIR"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("FINDRIB_INDIR"),
    ES_CONST_ENTRY("GETPROP"),
    ES_CONST_ENTRY("PUTPROP"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("TOBOOLEAN"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("TOOBJECTNOW"),
    ES_CONST_ENTRY("TOPROPERTYNAME"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("NOT"),
    ES_CONST_ENTRY("NEG"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("ADD"),
    ES_CONST_ENTRY("SUB"),
    ES_CONST_ENTRY("MUL"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("DIV"),
    ES_CONST_ENTRY("REM"),
    ES_CONST_ENTRY("BITSHL"),
    ES_CONST_ENTRY("BITSHR"),
    ES_CONST_ENTRY("BITSHRU"),
    ES_CONST_ENTRY("BITAND"),
    ES_CONST_ENTRY("BITIOR"),
    ES_CONST_ENTRY("BITXOR"),
    ES_CONST_ENTRY("BITNOT"),
    ES_CONST_ENTRY("INSTANCEOF"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("IN"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("LT"),
    ES_CONST_ENTRY("LE"),
    ES_CONST_ENTRY("GT"),
    ES_CONST_ENTRY("GE"),
    ES_CONST_ENTRY("EQ"),
    ES_CONST_ENTRY("NEQ"),
    ES_CONST_ENTRY("EQV"),
    ES_CONST_ENTRY("NEQV"),
    ES_CONST_ENTRY("DELETEPROP"),
    ES_CONST_ENTRY("TYPEOF"),
    ES_CONST_ENTRY("THIS"),
    ES_CONST_ENTRY("TESTEVAL"),
    ES_CONST_ENTRY("TESTEVALCALL"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("GETFN_INDIR"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("STR_PARSEINT"),
    ES_CONST_ENTRY("STR_PARSEFLOAT"),
    ES_CONST_ENTRY("STR_ENCODE"),
    ES_CONST_ENTRY("STR_DECODE"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("STR_LOWER"),
    ES_CONST_ENTRY("STR_UPPER"),
    ES_CONST_ENTRY("STR_LENGTH"),
    ES_CONST_ENTRY("STR_CHARAT"),
    ES_CONST_ENTRY("STR_CHARCODEAT"),
    ES_CONST_ENTRY("STR_INDEXOF"),
    ES_CONST_ENTRY("STR_LASTINDEXOF"),
    ES_CONST_ENTRY("STR_SUBSTRING"),
    ES_CONST_ENTRY("STR_FROMCHARCODE"),
    ES_CONST_ENTRY("STR_COMPARE"),
    ES_CONST_ENTRY("CHAR_INESCAPABLE"),
    ES_CONST_ENTRY("DECOMPILE"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("RE_COMPILE"),
    ES_CONST_ENTRY("NUM_TOINTEGER"),
    ES_CONST_ENTRY("NUM_TOINT32"),
    ES_CONST_ENTRY("NUM_TOUINT32"),
    ES_CONST_ENTRY("NUM_TOPRECISION"),
    ES_CONST_ENTRY("NUM_TOFIXED"),
    ES_CONST_ENTRY("NUM_TOEXPONENTIAL"),
    ES_CONST_ENTRY("NUM_INTTOSTRING"),
    ES_CONST_ENTRY("MATH_MAX"),
    ES_CONST_ENTRY("MATH_MIN"),
    ES_CONST_ENTRY("MATH_ABS"),
    ES_CONST_ENTRY("MATH_FLOOR"),
    ES_CONST_ENTRY("MATH_ACOS"),
    ES_CONST_ENTRY("MATH_ASIN"),
    ES_CONST_ENTRY("MATH_ATAN"),
    ES_CONST_ENTRY("MATH_ATAN2"),
    ES_CONST_ENTRY("MATH_CEIL"),
    ES_CONST_ENTRY("MATH_COS"),
    ES_CONST_ENTRY("MATH_EXP"),
    ES_CONST_ENTRY("MATH_LOG"),
    ES_CONST_ENTRY("MATH_POW"),
    ES_CONST_ENTRY("MATH_RANDOM"),
    ES_CONST_ENTRY("MATH_ROUND"),
    ES_CONST_ENTRY("MATH_SIN"),
    ES_CONST_ENTRY("MATH_SQRT"),
    ES_CONST_ENTRY("MATH_TAN"),
    ES_CONST_ENTRY("MATH_COPYSIGN"),
    ES_CONST_ENTRY("DATE_NOW"),
    ES_CONST_ENTRY("DATE_UTC"),
    ES_CONST_ENTRY("DATE_MAKEDATE"),
    ES_CONST_ENTRY("DATE_MAKEDAY"),
    ES_CONST_ENTRY("DATE_MAKETIME"),
    ES_CONST_ENTRY("DATE_PARSE"),
    ES_CONST_ENTRY("DATE_LOCALTIME"),
    ES_CONST_ENTRY("DATE_YEARFROMTIME"),
    ES_CONST_ENTRY("DATE_MONTHFROMTIME"),
    ES_CONST_ENTRY("DATE_DATEFROMTIME"),
    ES_CONST_ENTRY("DATE_WEEKDAY"),
    ES_CONST_ENTRY("DATE_HOURFROMTIME"),
    ES_CONST_ENTRY("DATE_MINFROMTIME"),
    ES_CONST_ENTRY("DATE_SECFROMTIME"),
    ES_CONST_ENTRY("DATE_MSFROMTIME"),
    ES_CONST_ENTRY("DATE_TIMECLIP"),
    ES_CONST_ENTRY("DATE_DAY"),
    ES_CONST_ENTRY("DATE_TIMEWITHINDAY"),
    ES_CONST_ENTRY("DATE_STRINGFROMTIME"),
    ES_CONST_ENTRY("DATE_UTCSTRINGFROMTIME"),
    ES_CONST_ENTRY("DATE_DATESTRINGFROMTIME"),
    ES_CONST_ENTRY("DATE_TIMESTRINGFROMTIME"),
    ES_CONST_ENTRY("DATE_LOCALESTRINGFROMTIME"),
    ES_CONST_ENTRY("DATE_LOCALEDATESTRINGFROMTIME"),
    ES_CONST_ENTRY("DATE_LOCALETIMESTRINGFROMTIME"),
    ES_CONST_ENTRY("ARGC"),
    ES_CONST_ENTRY("ARG"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY("WRITESTRING"),
    ES_CONST_ENTRY("READSTRING"),
    ES_CONST_ENTRY("READFILE"),
    ES_CONST_ENTRY("DEFGETTER"),
    ES_CONST_ENTRY("DEFSETTER"),
    ES_CONST_ENTRY("GETGETTER"),
    ES_CONST_ENTRY("GETSETTER"),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL),
    ES_CONST_ENTRY(NULL)
ES_CONST_END(simple_operations)

void ES_Disassembler::DisassembleTheInstructions()
{
    unsigned int limit = desc->codesize;
    if (prune)
    {
        while (limit > 0 && desc->code_and_debuginfo[limit-1] == (IM_NOP(0)))
            --limit;
        OP_ASSERT(limit > 0);
    }
    for (unsigned int here=0 ; here < limit ; here++)
    {
        SetLoc(here);
        int instr = desc->code_and_debuginfo[here];
        unsigned uinstr = (unsigned)instr;
        int op = instr & 255;
        if (simple_operations[op] != NULL)
        {
             PutInstr("%s", simple_operations[op]);
             continue;
        }
        switch (op)
        {
        case I_NOP         : PutInstr("%s " "%u","NOP",  uinstr >> 8); break;
        case I_BRANCHF_F   : PutInstr("%s " "%d %d","BRANCHF_F",  uinstr>>8, here + 1 + (uinstr>>8)); break;
        case I_BRANCHF_B   : PutInstr("%s " "%d %d","BRANCHF_B",  uinstr>>8, here + 1 - (uinstr>>8)); break;
        case I_BRANCHT_F   : PutInstr("%s " "%d %d","BRANCHT_F",  uinstr>>8, here + 1 + (uinstr>>8)); break;
        case I_BRANCHT_B   : PutInstr("%s " "%d %d","BRANCHT_B",  uinstr>>8, here + 1 - (uinstr>>8)); break;
        case I_BRANCH_F    : PutInstr("%s " "%d %d","BRANCH_F",  uinstr>>8, here + 1 + (uinstr>>8)); break;
        case I_BRANCH_B    : PutInstr("%s " "%d %d","BRANCH_B",  uinstr>>8, here + 1 - (uinstr>>8)); break;
        case I_CALL        : PutInstr("%s " "%d %d","CALL",  (instr>>24)&255, (instr>>8)&65535); break;
        case I_TRY         : PutInstr("%s " "%d %d","TRY",  uinstr>>8, here + 1 + (uinstr>>8)); break;
        case I_JSR_F       : PutInstr("%s " "%d %d","JSR_F",  uinstr>>8, here + 1 + (uinstr>>8)); break;
        case I_JSR_B       : PutInstr("%s " "%d %d","JSR_B",  uinstr>>8, here + 1 - (uinstr>>8)); break;
        case I_COBJECT     : PutInstr("%s " "%o","COBJECT",  uinstr>>8); break;
        case I_CSTRING     : PutInstr("%s " "%c","CSTRING",  uinstr>>8); break;
        case I_CREGEX      : PutInstr("%s " "%r","CREGEX",  uinstr>>8); break;
        case I_CBOOL       : PutInstr("%s " "%d","CBOOL",  uinstr>>8); break;
        case I_CSMALLINT   : PutInstr("%s " "%d","CSMALLINT",  instr>>8); break;
        case I_CNUMBERX    : PutInstr("%s " "%u","CNUMBERX",  uinstr>>8); break;
        case I_CFLOAT      : PutInstr("%s " "%d","CFLOAT",  uinstr>>8); break;
        case I_MKSTORAGE   : PutInstr("%s " "%d","MKSTORAGE",  uinstr>>8); break;
        case I_MKERROR     : PutInstr("%s " "%d %d","MKERROR",  (instr>>24)&255, (instr>>8)&65535); break;
        case I_LAMBDA      : PutInstr("%s " "\n%l","LAMBDA",  uinstr>>8); break;
        case I_GETLEX      : PutInstr("%s " "%d %d","GETLEX",  (instr>>24)&255, (instr>>8)&65535); break;
        case I_PUTLEX      : PutInstr("%s " "%d %d","PUTLEX",  (instr>>24)&255, (instr>>8)&65535); break;
        case I_GET         : PutInstr("%s " "%d %y","GET",  (instr>>24)&255, (instr>>8)&65535); break;
        case I_PUT         : PutInstr("%s " "%d %y","PUT",  (instr>>24)&255, (instr>>8)&65535); break;
        case I_GETSPECIAL  : PutInstr("%s " "%d","GETSPECIAL",  uinstr>>8); break;
        case I_PUTSPECIAL  : PutInstr("%s " "%d","PUTSPECIAL",  uinstr>>8); break;
        case I_FINDRIB     : PutInstr("%s " "%d %y","FINDRIB",  (instr>>24)&255, (instr>>8)&65535); break;
        case I_GETPROPI    : PutInstr("%s " "%y","GETPROPI",  uinstr>>8); break;
        case I_PUTPROPI    : PutInstr("%s " "%y","PUTPROPI",  uinstr>>8); break;
        case I_PUTPROPA    : PutInstr("%s " "%d","PUTPROPA",  uinstr>>8); break;
        case I_DEFVAR      : PutInstr("%s " "%d %d %y","DEFVAR",  (instr>>25)&1, (instr>>24)&1, (instr>>8)&65535); break;
        case I_DEFVAR_INDIR: PutInstr("%s " "%d %d","DEFVAR_INDIR",  (instr>>25)&1, (instr>>24)&1); break;
        case I_TOSTRING    : PutInstr("%s " "%d","TOSTRING",  uinstr>>8); break;
        case I_TONUMBER    : PutInstr("%s " "%d","TONUMBER",  uinstr>>8); break;
        case I_TOPRIMITIVE : PutInstr("%s " "%d","TOPRIMITIVE",  uinstr>>8); break;
        case I_CHECKTYPE   : PutInstr("%s " "%d","CHECKTYPE",  uinstr>>8); break;
        case I_TESTTYPE    : PutInstr("%s " "%d","TESTTYPE",  uinstr>>8); break;
        case I_ADDSMALLINT : PutInstr("%s " "%d","ADDSMALLINT",  instr>>8); break;
        case I_HASPROP     : PutInstr("%s " "%d","HASPROP",  uinstr>>8); break;
        case I_INI         : PutInstr("%s " "%y","INI",  uinstr>>8); break;
        case I_EVAL        : PutInstr("%s " "%d","EVAL",  (instr>>8)&3); break;
        case I_GETFN       : PutInstr("%s " "%d %y","GETFN",  (instr>>24)&255, (instr>>8)&65535); break;
        case I_GETFN_LEX   : PutInstr("%s " "%d %d","GETFN_LEX",  (instr>>24)&255, (instr>>8)&65535); break;
        case I_DEBUG       : PutInstr("%s " "%d %d","DEBUG",  (instr>>29)&7, (instr>>8)&2097151); break;
        case I_RE_EXEC     : PutInstr("%s " "%d","RE_EXEC",  uinstr>>8); break;
        case I_IBRANCHF    : PutInstr("%s " "%d","IBRANCHF",  uinstr >> 8); break;
        case I_IBRANCHT    : PutInstr("%s " "%d","IBRANCHT",  uinstr >> 8); break;
        case I_IBRANCH     : PutInstr("%s " "%d","IBRANCH",  uinstr >> 8); break;
        case I_CHECKSTACK  : PutInstr("%s " "%d","CHECKSTACK",  uinstr >> 8); break;
        case I_IJSR        : PutInstr("%s " "%d","IJSR",  uinstr >> 8); break;
        case I_ITRY        : PutInstr("%s " "%d","ITRY",  uinstr >> 8); break;
        case I_GETTEMP     : PutInstr("%s " "%d","GETTEMP",  uinstr >> 8); break;
        case I_PUTTEMP     : PutInstr("%s " "%d","PUTTEMP",  uinstr >> 8); break;
        case I_DELETETEMP  : PutInstr("%s " "%d","DELETETEMP",  uinstr >> 8); break;
        case I_GET_SAFE    : PutInstr("%s " "%d %y","GET_SAFE",  (instr>>24)&255, (instr>>8)&65535); break;
        case I_DELETEVAR   : PutInstr("%s " "%d %y","DELETEVAR",  (instr>>24)&255, (instr>>8)&65535); break;
        case I_EVENT       : PutInstr("%s " "%d","EVENT",  instr>>8); break;
        case I_XMLOP1      : PutInstr("%s " "%d","XMLOP1",  uinstr>>8); break;
        case I_XMLOP2      : PutInstr("%s " "%d","XMLOP2",  uinstr>>8); break;
        case I_GETLEX0     : PutInstr("%s " "%d","GETLEX0",  (instr>>16)&65535); break;
        case I_HALT        : PutInstr("%s " "%u","HALT",  uinstr>>8); break;
        default: OP_ASSERT(!"Missing support for an instruction");
        }
    }
}

#endif
