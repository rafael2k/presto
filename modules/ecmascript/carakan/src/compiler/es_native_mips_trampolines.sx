
# This file was used to generate the code vectors in es_native_mips.cpp.

	.gnu_attribute 4, 1
	.abicalls
	.option	pic0
	.text

	.set	nomips16
	.set	nomicromips
	.set	noreorder
	.set	nomacro

	.align	2
	.globl	cv_BytecodeToNativeTrampoline
	.globl	cv_BytecodeToNativeTrampoline_end
	.ent	cv_BytecodeToNativeTrampoline
	.type	cv_BytecodeToNativeTrampoline, @function

# Function signature:
# BOOL cv_BytecodeToNativeTrampoline (void *pointers [], unsigned arguments_count);

cv_BytecodeToNativeTrampoline:

# Stack frame
	addiu	$sp, $sp, -80

# Store callee saved registers.
	sw	$s0, 40($sp)
	sw	$s1, 44($sp)
	sw	$s2, 48($sp)
	sw	$s3, 52($sp)
	sw	$s4, 56($sp)
	sw	$s5, 60($sp)
	sw	$s6, 64($sp)
	sw	$s7, 68($sp)
	sw	$fp, 72($sp)
	sw	$ra, 76($sp)

# Save pointers argument.
	sw	$a0, 80($sp)

# Load pointers[DATA_SECTION] into s6
	lw	$s6, 36($a0)

# Load pointers[CONTEXT] into s7
	lw	$s7,  0($a0)

# Load pointers[REGISTER_FRAME] into fp
	lw	$fp, 16($a0)

# Save original *pointers[CONTEXT_STACK_PTR] value
	lw	$t0, 12($a0)
	lw	$t1,  0($t0)
	sw	$t1, 32($sp)

# Store current stack pointer in *pointers[CONTEXT_STACK_PTR]
	sw	$sp,  0($t0)

# Create terminating JIT stackframe (return address, next stack frame, register frame, es code).
	sw	$zero, 28($sp)
	sw	$zero, 24($sp)

	lw	$t0,  4($a0)
	sw	$t0, 20($sp)

	sw	$zero, 16($sp)

# Store terminating frame address in *pointers[CONTEXT_NATIVE_STACK_FRAME]
	lw	$t0,  8($a0)
	addiu	$t1, $sp, 24
	sw	$t1,  0($t0)

# Call pointers[TRAMPOLINE_DISPATCHER]
	lw	$t9, 20($a0)
	jalr	$t9
	nop

# Restore pointers.
	lw	$a0, 80($sp)

# Clear *pointers[CONTEXT_NATIVE_STACK_FRAME]
	lw	$t0,  8($a0)
	sw	$zero, 0($t0)

# Restore original *pointers[CONTEXT_STACK_PTR] value
	lw	$t0, 12($a0)
	lw	$t1, 32($sp)
	sw	$t1,  0($t0)

# Restore callee saved registers.
	lw	$s0, 40($sp)
	lw	$s1, 44($sp)
	lw	$s2, 48($sp)
	lw	$s3, 52($sp)
	lw	$s4, 56($sp)
	lw	$s5, 60($sp)
	lw	$s6, 64($sp)
	lw	$s7, 68($sp)
	lw	$fp, 72($sp)
	lw	$ra, 76($sp)

# Set return value.
	ori	$v0, $zero, 1

# Return
	jr	$ra

# Unlink stack frame
	addiu	$sp, $sp, 80

cv_BytecodeToNativeTrampoline_end:
	.end	cv_BytecodeToNativeTrampoline
	.size	cv_BytecodeToNativeTrampoline, .-cv_BytecodeToNativeTrampoline

###############################################################################

    .align  2
    .globl  cv_BytecodeToNativeTrampoline_fpu
    .globl  cv_BytecodeToNativeTrampoline_fpu_end
    .ent    cv_BytecodeToNativeTrampoline_fpu
    .type   cv_BytecodeToNativeTrampoline_fpu, @function

# Function signature:
# BOOL cv_BytecodeToNativeTrampoline_fpu (void *pointers [], unsigned arguments_count);

cv_BytecodeToNativeTrampoline_fpu:

# Stack frame
#if _MIPS_FPSET == 32
    addiu   $sp, $sp, -160
#else
    addiu   $sp, $sp, -128
#endif

# Store callee saved registers.
    sw  $s0, 40($sp)
    sw  $s1, 44($sp)
    sw  $s2, 48($sp)
    sw  $s3, 52($sp)
    sw  $s4, 56($sp)
    sw  $s5, 60($sp)
    sw  $s6, 64($sp)
    sw  $s7, 68($sp)
    sw  $fp, 72($sp)
    sw  $ra, 76($sp)

#if _MIPS_FPSET == 32
    sdc1 $f20, 80($sp)
    sdc1 $f21, 88($sp)
    sdc1 $f22, 96($sp)
    sdc1 $f23, 104($sp)
    sdc1 $f24, 112($sp)
    sdc1 $f25, 120($sp)
    sdc1 $f26, 128($sp)
    sdc1 $f27, 136($sp)
    sdc1 $f28, 144($sp)
# not used because f28 is used as a scratch register for both 32 and 64 bit
#   sdc1 $f29, xxx($sp)
    sdc1 $f30, 152($sp)
# not used because f30 is used as a scratch register for both 32 and 64 bit
#   sdc1 $f31, xxx($sp)

# Save pointers argument.
    sw  $a0, 160($sp)
#else
    sdc1 $f20, 80($sp)
    sdc1 $f22, 88($sp)
    sdc1 $f24, 96($sp)
    sdc1 $f26, 104($sp)
    sdc1 $f28, 112($sp)
    sdc1 $f30, 120($sp)

# Save pointers argument.
    sw  $a0, 128($sp)
#endif

# Load pointers[DATA_SECTION] into s6
    lw  $s6, 36($a0)

# Load pointers[CONTEXT] into s7
    lw  $s7,  0($a0)

# Load pointers[REGISTER_FRAME] into fp
    lw  $fp, 16($a0)

# Save original *pointers[CONTEXT_STACK_PTR] value
    lw  $t0, 12($a0)
    lw  $t1,  0($t0)
    sw  $t1, 32($sp)

# Store current stack pointer in *pointers[CONTEXT_STACK_PTR]
    sw  $sp,  0($t0)

# Create terminating JIT stackframe (return address, next stack frame, register frame, es code).
    sw  $zero, 28($sp)
    sw  $zero, 24($sp)

    lw  $t0,  4($a0)
    sw  $t0, 20($sp)

    sw  $zero, 16($sp)

# Store terminating frame address in *pointers[CONTEXT_NATIVE_STACK_FRAME]
    lw  $t0,  8($a0)
    addiu   $t1, $sp, 24
    sw  $t1,  0($t0)

# Call pointers[TRAMPOLINE_DISPATCHER]
    lw  $t9, 20($a0)
    jalr    $t9
    nop

#if _MIPS_FPSET == 32
# Restore pointers.
    lw  $a0, 160($sp)
#else
# Restore pointers.
    lw  $a0, 128($sp)
#endif

# Clear *pointers[CONTEXT_NATIVE_STACK_FRAME]
    lw  $t0,  8($a0)
    sw  $zero, 0($t0)

# Restore original *pointers[CONTEXT_STACK_PTR] value
    lw  $t0, 12($a0)
    lw  $t1, 32($sp)
    sw  $t1,  0($t0)

# Restore callee saved registers.
    lw  $s0, 40($sp)
    lw  $s1, 44($sp)
    lw  $s2, 48($sp)
    lw  $s3, 52($sp)
    lw  $s4, 56($sp)
    lw  $s5, 60($sp)
    lw  $s6, 64($sp)
    lw  $s7, 68($sp)
    lw  $fp, 72($sp)
    lw  $ra, 76($sp)

#if _MIPS_FPSET == 32
    ldc1 $f20, 80($sp)
    ldc1 $f21, 88($sp)
    ldc1 $f22, 96($sp)
    ldc1 $f23, 104($sp)
    ldc1 $f24, 112($sp)
    ldc1 $f25, 120($sp)
    ldc1 $f26, 128($sp)
    ldc1 $f27, 136($sp)
    ldc1 $f28, 144($sp)
# not used because f28 is used as a scratch register for both 32 and 64 bit
#   sdc1 $f29, xxx($sp)
    sdc1 $f30, 152($sp)
# not used because f30 is used as a scratch register for both 32 and 64 bit
#   sdc1 $f31, xxx($sp)
#else
    ldc1 $f20, 80($sp)
    ldc1 $f22, 88($sp)
    ldc1 $f24, 96($sp)
    ldc1 $f26, 104($sp)
    ldc1 $f28, 112($sp)
    ldc1 $f30, 120($sp)
#endif

# Set return value.
    ori $v0, $zero, 1

# Return
    jr  $ra

# Unlink stack frame
#if _MIPS_FPSET == 32
    addiu   $sp, $sp, 160
#else
    addiu   $sp, $sp, 128
#endif

cv_BytecodeToNativeTrampoline_end_fpu:
    .end    cv_BytecodeToNativeTrampoline_fpu
    .size   cv_BytecodeToNativeTrampoline_fpu, .-cv_BytecodeToNativeTrampoline_fpu

###############################################################################
	.align	2
	.globl	cv_ReconstructNativeStackTrampoline1
	.ent	cv_ReconstructNativeStackTrampoline1
	.type	cv_ReconstructNativeStackTrampoline1, @function

# Function signature:
# BOOL cv_ReconstructNativeStackTrampoline1 (void *pointers [], unsigned arguments_count);

cv_ReconstructNativeStackTrampoline1:

# Preserve incoming register arguments.
	addu	$s0, $a0, $zero
	addu	$s1, $a1, $zero

# Parameters for pointers[RECONSTRUCT_NATIVE_STACK] call.
	addu	$a0, $s7, $zero
	addiu	$a1, $sp, 12		# Remove 16-byte outgoing parameter area for C/C++ calls.
	sw		$ra, 0($a1)			# Stash return address to use in reconstruction.

# Move sp to bottom of stack.
	lw	$sp, 32($s0)

# Create 16-byte outgoing parameter area for C/C++ calls.
	addiu $sp, $sp, -16

# Call pointers[RECONSTRUCT_NATIVE_STACK]
	lw	$t9, 28($s0)
	jalr	$t9
	nop

# Restore incoming register arguments.
	addu	$a1, $s1, $zero

# Pick up return address.
	lw		$ra, 0($v0)

# Jump to pointers[NATIVE_DISPATCHER]
	lw	$t0, 24($s0)
	jr	$t0

# New stack location after reconstruction
# Create 16-byte outgoing parameter area for C/C++ calls.
	addiu	$sp, $v0, -12

	.set	macro
	.set	reorder
	.end	cv_ReconstructNativeStackTrampoline1
	.size	cv_ReconstructNativeStackTrampoline1, .-cv_ReconstructNativeStackTrampoline1

###############################################################################

	.align	2
	.globl	cv_ReconstructNativeStackTrampoline2
	.ent	cv_ReconstructNativeStackTrampoline2
	.type	cv_ReconstructNativeStackTrampoline2, @function

# Function signature:
# BOOL cv_ReconstructNativeStackTrampoline1 (void *pointers [], unsigned arguments_count);

cv_ReconstructNativeStackTrampoline2:
	.set	noreorder
	.set	nomacro

# Preserve incoming register arguments.
	addu	$s0, $a0, $zero
	addu	$s1, $a1, $zero

# Parameters for pointers[RECONSTRUCT_NATIVE_STACK] call.
	addu	$a0, $s7, $zero
	addiu	$a1, $sp, 12		# Remove 16-byte outgoing parameter area for C/C++ calls.
	sw		$ra, 0($a1)			# Stash return address to use in reconstruction.

# Move sp to bottom of stack.
	lw	$sp, 32($s0)

# Create 16-byte outgoing parameter area for C/C++ calls.
	addiu $sp, $sp, -16

# Call pointers[RECONSTRUCT_NATIVE_STACK]
	lw	$t9, 28($s0)
	jalr	$t9
	nop

# Restore incoming register arguments.
	addu	$a1, $s1, $zero

# Jump to pointers[NATIVE_DISPATCHER]
	lw	$t0, 24($s0)
	jr	$t0

# New stack location after reconstruction
# Create 16-byte outgoing parameter area for C/C++ calls.
	addiu	$sp, $v0, -16

	.end	cv_ReconstructNativeStackTrampoline2
	.size	cv_ReconstructNativeStackTrampoline2, .-cv_ReconstructNativeStackTrampoline2

###############################################################################

	.align	2
	.globl	cv_ThrowFromMachineCode
	.ent	cv_ThrowFromMachineCode
	.type	cv_ThrowFromMachineCode, @function

# Function signature:
# BOOL cv_ThrowFromMachineCode (void *pointers []);

cv_ThrowFromMachineCode:

# Clear *pointers[CONTEXT_NATIVE_STACK_FRAME]
	lw	$t0, 4($a0)
	sw	$zero, 0($t0)

# Restore sp from *pointers[CONTEXT_STACK_PTR]
	lw	$t0, 8($a0)
	lw	$sp, 0($t0)

# Restore original *pointers[CONTEXT_STACK_PTR] value
	lw	$t1, 32($sp)
	sw	$t1,  0($t0)

# Restore callee saved registers.
	lw	$s0, 40($sp)
	lw	$s1, 44($sp)
	lw	$s2, 48($sp)
	lw	$s3, 52($sp)
	lw	$s4, 56($sp)
	lw	$s5, 60($sp)
	lw	$s6, 64($sp)
	lw	$s7, 68($sp)
	lw	$fp, 72($sp)
	lw	$ra, 76($sp)

# Set return value.
	ori	$v0, $zero, 0

# Return
	jr	$ra

# Unlink stack frame
	addiu	$sp, $sp, 80

	.end	cv_ThrowFromMachineCode
	.size	cv_ThrowFromMachineCode, .-cv_ThrowFromMachineCode

###############################################################################

    .align  2
    .globl  cv_ThrowFromMachineCode_fpu
    .ent    cv_ThrowFromMachineCode_fpu
    .type   cv_ThrowFromMachineCode_fpu, @function

# Function signature:
# BOOL cv_ThrowFromMachineCode_fpu (void *pointers []);

cv_ThrowFromMachineCode_fpu:

# Clear *pointers[CONTEXT_NATIVE_STACK_FRAME]
    lw  $t0, 4($a0)
    sw  $zero, 0($t0)

# Restore sp from *pointers[CONTEXT_STACK_PTR]
    lw  $t0, 8($a0)
    lw  $sp, 0($t0)

# Restore original *pointers[CONTEXT_STACK_PTR] value
    lw  $t1, 32($sp)
    sw  $t1,  0($t0)

# Restore callee saved registers.
    lw  $s0, 40($sp)
    lw  $s1, 44($sp)
    lw  $s2, 48($sp)
    lw  $s3, 52($sp)
    lw  $s4, 56($sp)
    lw  $s5, 60($sp)
    lw  $s6, 64($sp)
    lw  $s7, 68($sp)
    lw  $fp, 72($sp)
    lw  $ra, 76($sp)

#if _MIPS_FPSET == 32
    ldc1 $f20, 80($sp)
    ldc1 $f21, 88($sp)
    ldc1 $f22, 96($sp)
    ldc1 $f23, 104($sp)
    ldc1 $f24, 112($sp)
    ldc1 $f25, 120($sp)
    ldc1 $f26, 128($sp)
    ldc1 $f27, 136($sp)
    ldc1 $f28, 144($sp)
# not used because f28 is used as a scratch register for both 32 and 64 bit
#   sdc1 $f29, xxx($sp)
    sdc1 $f30, 152($sp)
# not used because f30 is used as a scratch register for both 32 and 64 bit
#   sdc1 $f31, xxx($sp)
#else
    ldc1 $f20, 80($sp)
    ldc1 $f22, 88($sp)
    ldc1 $f24, 96($sp)
    ldc1 $f26, 104($sp)
    ldc1 $f28, 112($sp)
    ldc1 $f30, 120($sp)
#endif

# Set return value.
    ori $v0, $zero, 0

# Return
    jr  $ra

# Unlink stack frame
#if _MIPS_FPSET == 32
    addiu   $sp, $sp, 160
#else
    addiu   $sp, $sp, 128
#endif

    .end    cv_ThrowFromMachineCode_fpu
    .size   cv_ThrowFromMachineCode_fpu, .-cv_ThrowFromMachineCode_fpu
