# -*- Mode: text; tab-width: 4; indent-tabs-mode: t -*-
#
# ECMAScript engine tweaks.
#
# Please observe that the defaults are chosen to be appropriate for
# smartphone-sized systems.  Desktop and very tiny devices may wish
# to adjust these values.  Suggestions are provided below.

TWEAK_ES_SMALLEST_HEAP_SIZE							chrispi

	This is the smallest allowable size of the ECMAScript heap.  If
	the inverse load factor (see below) dictates a heap smaller than
	this, then the inverse load factor is ignored.  The purpose of
	this parameter is to prevent frequent garbage collections when
	there are little live data.  In normal situations it has little
	impact because the standard ECMAscript libraries will populate
	the heap with enough objects to bring it up above normal settings
	for the parameter.

	For small systems: 64KB - 128KB
	For large systems: 512KB or more

	Category   : memory, performance
	Define     : ES_PARM_SMALLEST_HEAP_SIZE
	Value      : (128*1024)
	Value for desktop : (512*1024)
	Depends on : nothing
	Disabled for: smartphone, tv, minimal, mini


TWEAK_ES_MAX_PARSER_STACK							deprecated

	Used to depend on TWEAK_ES_FUTHARK, which has been discontinued.


TWEAK_ES_CARAKAN_MAX_PARSER_STACK					sof

	The Carakan parser will on certain pathological inputs consume
	large amounts of stack space. Use this parameter to limit the
	stack consumption allowed. If exceeded, a script compilation
	error of too complex input will be reported.

	The default setting is much lower than the max stack sizes
	supported by many platforms, but high enough to handle all
	relevant inputs.

	Category          : memory
	Define            : ES_CARAKAN_PARM_MAX_PARSER_STACK
	Value             : (900*1024)
	Depends on        : nothing
	Disabled for	  : desktop, smartphone, tv, minimal, mini


TWEAK_ES_SMALLEST_GROWTH_BETWEEN_GCS				chrispi

	This is the smallest amount of allocation (measured in bytes) that is
	required following a garbage collection before the engine will honor an
	explicit collection request.  It acts as a throttle on garbage
	collections: there is no sense in collecting when there is no garbage.

	Note that explicit collection requests will still be honored in some
	cases when this parameter says they should not, notably, collections
	triggered by OOM handling.  Also, certain events (like the destruction
	of contexts and ES_Runtime objects) will allow explicit collections
	to go ahead even if this parameter says they should not.

	The default value is probably appropriate for all system sizes.

	Category    : memory, performance
	Define      : ES_PARM_SMALLEST_GROWTH_BETWEEN_GCS
	Value       : (32*1024)
	Depends on  : nothing
	Disabled for: desktop, smartphone, tv, minimal, mini


TWEAK_ES_LARGEST_GROWTH_BETWEEN_GCS					chrispi

	This is the largest amount of allocation (measured in bytes) that is
	allowed between garbage collections.  It acts as a throttle on the
	inverse load factor: once the heap gets to be quite large, collection
	frequency will be determined by this parameter and not by the inverse
	load factor.

	You do not want to allow this to be very small, but you probably want
	it to be smaller on embedded systems than on desktop systems.

	On large system it is best to set this to a high number and let the
	maintenance gc do the cleaning.

	For small systems: 1 MB
	For large systems: A lot

	Category   : memory, performance
	Define     : ES_PARM_LARGEST_GROWTH_BETWEEN_GCS
	Value             : (4*1024*1024)
	Value for desktop : (1024*1024*1024)
	Depends on : nothing
	Disabled for:  smartphone, tv, minimal, mini


TWEAK_ES_INVERSE_LOAD_FACTOR						chrispi

	This is the inverse ratio between live memory and allocated memory that
	the collector tries to stay within.  For example, if INVERSE_LOAD_FACTOR
	is 2.0 then the heap size should normally never be larger than the amount of
	live memory by a factor of 2.

	The larger the value, the less the GC overhead (normally).  Values
	below 1.5 have not been tested and are not recommended.

	For small systems: 1.5-2.0
	For large systems: 2.0 or more

	Category   : memory, performance
	Define     : ES_PARM_INVERSE_LOAD_FACTOR
	Value	          : 1.5
	Value for desktop : 4.0
	Value for mini    : 4.0
	Disabled for      : smartphone, tv, minimal
	Depends on : nothing


TWEAK_ES_INVERSE_OFFLINE_LOAD_FACTOR						danielsp

	Same as TWEAK_ES_INVERSE_LOAD_FACTOR but used during a offline garbage collect
	(i.e., when no context is running).

	For small systems: 1.5-2.0
	For large systems: 2.0

	Category   : memory, performance
	Define     : ES_PARM_INVERSE_OFFLINE_LOAD_FACTOR
	Value	          : 1.5
	Value for desktop : 2.0
	Value for mini    : 2.0
	Disabled for      : smartphone, tv, minimal
	Depends on : nothing


TWEAK_ES_STRICT_LANGUAGE							deprecated

	Deprecated.


TWEAK_ES_MEMCLEANUP_RATION							deprecated

	Deprecated.


TWEAK_ES_FORCE_GC_ON_DETACH							deprecated

	Deprecated.


TWEAK_ES_NATIVE_SUPPORT								jl

	Enables machine code generation, AKA "JIT".  Only supported on selected
	architectures (x86, 32- and 64-bit).

	Category		: memory, performance
	Define			: ECMASCRIPT_NATIVE_SUPPORT
	Enabled for		: desktop, smartphone, tv
	Disabled for		: minimal, mini
	Depends on		: ARCHITECTURE_IA32 || ARCHITECTURE_ARM || ARCHITECTURE_MIPS


TWEAK_ES_NATIVE_STACK_ALIGNMENT							jl

	Defines the required alignment of the stack pointer when executing a
	CALL instruction, or in other words, the required alignment of the first
	argument on the stack.

	If untweaked it defaults to 8 in 32-bit builds and 16 in 64-bit builds.

	Category		: memory, performance
	Define			: ES_STACK_ALIGNMENT
	Value			: 0
	Disabled for		: desktop, smartphone, tv, minimal
	Depends on		: ARCHITECTURE_IA32, TWEAK_ES_NATIVE_SUPPORT


TWEAK_ES_GCC_STACK_REALIGNMENT							jl

	Enable use of __attribute__((force_align_arg_pointer)) on all C++
	functions called by JIT code to make the C++ compiler emit instructions
	that aligns the stack pointer.  Only usable with GCC on x86, and not in
	64-bit builds (where GCC instead warns about ignoring the attribute.)

	Category		: memory, performance
	Define			: ES_GCC_STACK_REALIGNMENT
	Disabled for		: desktop, smartphone, tv, minimal
	Depends on		: ARCHITECTURE_IA32, TWEAK_ES_NATIVE_SUPPORT


TWEAK_ES_MAINTENANCE_GC_INTERVAL						danielsp

	Describes how often (in ms) maintenance garbage collector
	mechanism should be invoked.

	Category		: memory
	Define			: ES_PARM_MAINTENANCE_GC_INTERVAL
	Value			: 1000
	Disabled for		: desktop, smartphone, tv, minimal, mini


TWEAK_ES_MAINTENANCE_GC_RATION							danielsp

	Specifies what fraction of the inactive heaps (satisfying the timeing
	constraints below) that should be collected each time the maintenance
	collector runs. A value of 10 means that 1/10 of the inactive heaps are
	collected.

	Category		: memory
	Define			: ES_PARM_MAINTENANCE_GC_RATION
	Value			: 10
	Disabled for		: desktop, smartphone, tv, minimal, mini


TWEAK_ES_MAINTENANCE_GC_SINCE_LAST_GC						danielsp

	Specifies how long (in ms) since the last gc the heap is considered for
	maintenance gc.

	Category		: memory
	Define			: ES_PARM_MAINTENANCE_GC_SINCE_LAST_GC
	Value			: 10000
	Disabled for		: desktop, smartphone, tv, minimal, mini


TWEAK_ES_MAINTENANCE_GC_HEAP_INACTIVE_TIME					danielsp

	Specifies how long (in ms) the heap must have been inactive
	before native dispatchers are flushed.

	Category		: memory
	Define			: ES_PARM_MAINTENANCE_GC_HEAP_INACTIVE_TIME
	Value			: 10000
	Disabled for		: desktop, smartphone, tv, minimal, mini


TWEAK_ES_USE_ALIGNED_SEGMENTS							danielsp

	Use aligned memory segments via OpMemory::CreateAlignedSegment() when
	allocating the ECMAScript heap instead of allocating it on the common
	heap.  This makes it possible to release the allocated memory easily
	back to the operating system.  It also saves at least virtual address
	space, and possible actual memory, since alignment is otherwise
	achieved by allocating larger blocks of memory than is used.

	Disable if OpMemory::CreateAlignedSegment() can't be implemented by
	the platform.

	Category		: memory
	Define                  : ES_USE_ALIGNED_SEGMENTS
	Depends on              : nothing
	Enabled for		: desktop, smartphone, tv, minimal, mini
	Disabled for		:


TWEAK_ES_HARDCORE_GC_MODE							jl

	Enable support for a special GC mode where instead of using sane
	heuristics, the GC runs at every possibly point where it might have
	otherwise been triggered by the normal heuristics.  This is very useful
	for triggering certain types of GC related crash bugs that are otherwise
	very elusive.  It also makes Opera run extremely slowly, so do not
	enable this in builds meant for anything but testing.

	Category		: memory
	Define			: ES_HARDCORE_GC_MODE
	Enabled for		:
	Disabled for		: desktop, smartphone, tv, minimal, mini


TWEAK_ES_HEAP_DEBUGGER								jl

	Enables simple ECMAScript heap debugger.

	Category		: memory
	Define			: ES_HEAP_DEBUGGER
	Enabled for		:
	Disabled for		: desktop, smartphone, tv, minimal, mini


TWEAK_ES_OVERRIDE_FPMODE							jl

	Enables preference for overriding floating point math mode to use in JIT
	code.  The alternatives are SSE2 (preferred) and x87 (barely working.)

	Category		: performance
	Define			: ES_OVERRIDE_FPMODE
	Enabled for		:
	Disabled for		: desktop, smartphone, tv, minimal
	Depends on		: ARCHITECTURE_IA32


TWEAK_ES_FUTHARK								deprecated

	The Futhark engine has been removed.

TWEAK_ES_CARAKAN								deprecated

	The Carakan engine is unconditionally enabled.

TWEAK_ES_MINIMUM_STACK_REMAINING						jl

	Limit that determines how aggressively we allocate a larger stack
	during recursions.

	Every recursion in the ECMAScript engine includes a check of how much
	of the current OpPseudoThread stack block remains.  If the remaining
	amount is lower than this limit, a new stack block is allocated before
	recursing further, and the remainder of the current block is not used.
	This limit thus needs to be higher than the highest peak stack usage
	in any code path executed by the ECMAScript engine between recursion
	points.

	The appropriate value of this tweak is inherently CPU architecture and
	compiler dependent.  A value that worked before might not work if the
	compiler is upgraded or the compiler settings are changed.  A very high
	value will avoid stack overflow issues, but also waste a lot of stack
	memory and increase memory usage while executing scripts.

	In debug builds (#ifdef _DEBUG) this setting has no effect: instead a
	very conservative value is dynamically calculated by running a dummy
	recursion and recording the stack usage.  This way of calcaulating
	stack usage is probablyy unreliable if the compiler optimizes the code
	which is why it is not used in release builds.  The reason why debug
	builds do this is that compilers tend to use much more stack when not
	optimizing, and in some cases drastically much more stack due to stack
	error detection mechanisms in the generated code.

	Category		: memory
	Define			: ES_MINIMUM_STACK_REMAINING
	Value			: (3 * 1024)
	Value for tv	: (4 * 1024)
	Disabled for	: desktop, smartphone, minimal, mini
	Depends on		: nothing

TWEAK_ES_GCC_BROKEN_ALWAYS_INLINE               andersh

	On some platforms (read: Android) using "__attribute__ ((always_inline))"
	will cause an error, presumably due to the platform/compiler not being able
	to inline functions within inlined functions. This works around that
	problem by defining ALWAYS_INLINE as "inline".

	Category		: workaround
	Define			: ES_GCC_BROKEN_ALWAYS_INLINE
	Enabled for		:
	Disabled for	: desktop, smartphone, tv, minimal, mini
	Depends on		: nothing

TWEAK_ES_PROPERTY_CACHE_PROFILING					jl

	Profile property cache behavior (misses and such) while executing scripts
	and output diagnostics messages to the error console.

	Category		: performance
	Define			: ES_PROPERTY_CACHE_PROFILING
	Enabled for		:
	Disabled for	: desktop, smartphone, tv, minimal, mini
	Depends on		: nothing

TWEAK_ES_NATIVE_TYPEDARRAY					deprecated

	The typed array support is unconditonally enabled.

TWEAK_OPPSEUDOTHREAD_THREADED					jl

	Use system threading APIs instead of manual stack switching to
	implement context switching in the ECMAScript engine. This is a
	development and debugging feature; it plays nicer with profiling
	tools and the like to use native threads. The thread usage and
	overhead is however considered too high to be usable in production
	builds.

	The implementation has currently two native thread backends;
	pthreads and Win32. Automatic backend selection	is only
	supported for GOGI builds. For non-GOGI builds, see
	oppseudothread/oppseudothread.h for the defines to manually
	provide.

	Category		: setting
	Define			: OPPSEUDOTHREAD_THREADED
	Enabled for		:
	Disabled for	: desktop, smartphone, tv, minimal, mini
	Depends on		: ES_OPPSEUDOTHREAD

TWEAK_ES_USE_UINT64_IN_DOUBLE_CONVERSION		dagon

	Control if string to double conversion should attempt to
	convert the string to a UINT64 for integral values, before
	casting the result to a double. If HAVE_UINT64 is provided,
	there ought to be no reason not to take advantage of this
	fast path _except_ if the platform is unable to reliably
	perform the conversion of a UINT64 to a double. Disable
	this tweak if that is the case, stepping around a compiler
	or libc issue beyond our control.

	Category		: workaround
	Define			: ES_USE_UINT64_IN_DOUBLE_CONVERSION
	Enabled for		: desktop, smartphone, tv, minimal, mini
	Disabled for	:
	Depends on		: HAVE_UINT64
