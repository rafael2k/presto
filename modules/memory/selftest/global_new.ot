/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2008 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.  It may not be distributed
 * under any circumstances.
 */

group "memory.global_new";

language C++;

test("operator new[] on zero sized arrays")
{
	//
	// The C++ specification requires an allocation to always return a
	// unique pointer, if it succeeds.  This means that returning NULL
	// from the below test is not allowed unless we are out of memory.
	// On systems where op_lowlevel_malloc(0) returns NULL (as it may),
	// a wrapper function will have to be provided by the platform,
	// that e.g. does a op_lowlevel_malloc(1) instead.  This will
	// cause a unique address to be returned.
	//
	void* a = op_malloc(1);
	void* b = op_malloc(1);
	int zero = (a==b);  // Don't let smart compilers figure out the value...
	char* array = new char[zero];
	verify(zero == 0);
	verify(array != 0);
}
finally
{
	delete[] array;
	op_free(a);
	op_free(b);
}

test("Destructors run on array delete")
{
	//
	// This is a sanity test to catch misbehaving C++ implementations and/or
	// support libraries.
	//

	int dtors = 0;

	class Test {
	public:
		Test(void) { value = 42; }
		virtual ~Test(void) { (*dtor_count)++; }
		int value;
	    int* dtor_count;
	};

	Test* array = new Test[10];
	verify(array != 0);
	for ( int k = 0; k < 10; k++ )
	{
		verify(array[k].value == 42);
		array[k].dtor_count = &dtors;
	}

	delete[] array;
	verify(dtors == 10);
}

test("sizeof(empty class) should be nonzero")
{
	//
	// According to the C++ specification, it looks like any structure/class
	// should have nonzero-size.  If this test fails, it may have
	// implications for how a regular 'operator new' deals with zero-sized
	// allocations (which should return unique addresses, and not NULL).
	//
	struct foobar { };
	class gazonk { };

	foobar* foo = 0;
	gazonk* gaz = 0;

	verify(sizeof(foobar) > 0);
	verify(sizeof(gazonk) > 0);

	foo = new foobar;
	verify(foo != 0);

	gaz = new gazonk;
	verify(gaz != 0);
}
finally
{
	delete foo;
	delete gaz;
}
