/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2007 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.  It may not be distributed
 * under any circumstances.
 */

group "memory.blockalloc";

language C++;

require ARCHITECTS_API_APPROVAL;
require MEMORY_POOLING_ALLOCATORS;

include "modules/memory/src/memory_debug.h";

global
{
	OpMemPools* test;
}

setup
{
	// Create a temporary pooling infrastructure we can test against
	test = OP_NEW(OpMemPools,());
	test->PlatformInit();
	test->Install();
}

exit
{
	// We don't need it any more
	test->Uninstall();
	OP_DELETE(test);
}

test("Allocate raw blocks")
{
	// Allocate a single block, and make sure it can be accessed correctly
	unsigned int n1 = test->AllocBlock();
	verify(n1 != 0);
	char* a1 = (char*)test->BlocknumToAddr(n1);
	verify(a1 != 0);
	verify(test->AddrToBlocknum((void*)a1) == n1);
	verify(test->AddrToBlocknum((void*)(a1 + MEMORY_BLOCKSIZE - 1)) == n1);
	verify(test->AddrToBlocknum((void*)(a1 - 1)) == 0);
	verify(test->AddrToBlocknum((void*)(a1 + MEMORY_BLOCKSIZE)) == 0);

	// Allocate a new block, and do the same tests
	unsigned int n2 = test->AllocBlock();
	verify(n2 != 0);
	char* a2 = (char*)test->BlocknumToAddr(n2);
	verify(a2 != 0);
	verify(n1 != n2);
	verify(test->AddrToBlocknum((void*)a2) == n2);
	verify(test->AddrToBlocknum((void*)(a2 + MEMORY_BLOCKSIZE - 1)) == n2);
	verify(test->AddrToBlocknum((void*)(a2 - 1)) != n2);
	verify(test->AddrToBlocknum((void*)(a2 + MEMORY_BLOCKSIZE)) != n2);
}
