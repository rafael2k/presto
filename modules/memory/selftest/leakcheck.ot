/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2008 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.  It may not be distributed
 * under any circumstances.
 */

/*
 * These tests verify that the functionality used by the self-test system
 * to detect leaks from individual self-tests are working as it should.
 */

group "memory.leakcheck";

language C++;

require ENABLE_MEMORY_DEBUGGING;

include "modules/memory/src/memory_debug.h";

test("Leakcheck M3 marking")
{
	void* a = 0;
	void* b = 0;

	// Set the M3 bit for all currently live allocations, and verify that
	// this causes the MEMORY_ACTION_COUNT_NOT_M3 action to signal no leaks:
	g_mem_debug->Action(MEMORY_ACTION_SET_MARKER_M3_ALL);
	verify(g_mem_debug->Action(MEMORY_ACTION_COUNT_NOT_M3) == 0);

	// This allocation will not have M3 bit set; it should count as leaked
	a = op_malloc(10);
	verify(g_mem_debug->Action(MEMORY_ACTION_COUNT_NOT_M3) == 1);

	// Another one:
	b = op_malloc(20);
	verify(g_mem_debug->Action(MEMORY_ACTION_COUNT_NOT_M3) == 2);

	// Free 'a' to bring the leaked total down by one allocation:
	op_free(a);
	a = 0;
	verify(g_mem_debug->Action(MEMORY_ACTION_COUNT_NOT_M3) == 1);

	// ... And down to zero by cleaning up 'b'
	op_free(b);
	b = 0;
	verify(g_mem_debug->Action(MEMORY_ACTION_COUNT_NOT_M3) == 0);
}
finally
{
	op_free(a);
	op_free(b);
}

test("Leakcheck M3 marking exceptions")
{
	void* a = 0;

	// Set the M3 bit for all currently live allocations
	g_mem_debug->Action(MEMORY_ACTION_SET_MARKER_M3_ALL);
	verify(g_mem_debug->Action(MEMORY_ACTION_COUNT_NOT_M3) == 0);

	// This allocation will not have M3 bit set; it should counts as leaked
	a = op_malloc(10);
	verify(g_mem_debug->Action(MEMORY_ACTION_COUNT_NOT_M3) == 1);

	// Don't include this allocation among leaked ones after all:
	g_mem_debug->Action(MEMORY_ACTION_SET_MARKER_M3_SINGLE, a);
	verify(g_mem_debug->Action(MEMORY_ACTION_COUNT_NOT_M3) == 0);
}
finally
{
	op_free(a);
}

test("Automarking M3")
{
	void* a = 0;
	void* b = 0;

	// Set the M3 bit for all currently live allocations
	g_mem_debug->Action(MEMORY_ACTION_SET_MARKER_M3_ALL);
	verify(g_mem_debug->Action(MEMORY_ACTION_COUNT_NOT_M3) == 0);

	// Disable leakchecking for a while to do "maintenance" stuff
	g_mem_debug->Action(MEMORY_ACTION_SET_MARKER_M3_AUTO);

	// The following allocation should not be counted as leaked
	a = op_malloc(10);
	verify(a != 0);
	verify(g_mem_debug->Action(MEMORY_ACTION_COUNT_NOT_M3) == 0);

	// Re-enable leakchecking (e.g. when returning to the selftest)
	g_mem_debug->Action(MEMORY_ACTION_SET_MARKER_M3_NOAUTO);

	// This should now be marked as a leak.
	b = op_malloc(20);
	verify(b != 0);
	verify(g_mem_debug->Action(MEMORY_ACTION_COUNT_NOT_M3) == 1);
}
finally
{
	op_free(a);
	op_free(b);
}

test("Proper NULL handeling")
{
	// Don't crash if supplying a NULL pointer:
	g_mem_debug->Action(MEMORY_ACTION_SET_MARKER_M3_SINGLE, 0);
	g_mem_debug->Action(MEMORY_ACTION_SET_MARKER_M3_SINGLE);
}
