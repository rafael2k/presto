/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2008-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.  It may not be distributed
 * under any circumstances.
 */


//
// These tests are designed to make sure the correct reporting is used
// in case of OOM.  However, this test can only be run for memory debugging
// enabled builds, and the code in question is different for release builds,
// so the accuracy of this test is not good for production builds.
//

group "memory.oom";

language C++;

require ENABLE_MEMORY_DEBUGGING;

global
{
	class Foo
	{
	public:
		Foo(void) { val = 17; }
		Foo(int v) { val = v; }
		~Foo(void) { val = -69; }

		int pad1;
		int val;
		int pad2;
	};
}

test("OP_NEW fails") leakcheck;
{
	//
	// Allocate on regular heap with OP_NEW, and expect failure
	//
	Foo* a = 0;

	OpMemDebug_OOM(1);
	a = OP_NEW(Foo,(42));
	OpMemDebug_OOM(0);
	verify(a == 0);
}

test("OP_NEW_L fails") leakcheck;
{
	//
	// Expect OOM
	//
	Foo* a = 0;
	TRAPD(status, (OpMemDebug_OOM(1), a = OP_NEW_L(Foo,(42))));
	OpMemDebug_OOM(0);
	verify(status == OpStatus::ERR_NO_MEMORY);
}

test("OP_NEWA fails") leakcheck;
{
	Foo* a = 0;
	OpMemDebug_OOM(1);
	a = OP_NEWA(Foo, 10);
	OpMemDebug_OOM(0);
	verify(a == 0);
}

test("OP_NEWA_L fails") leakcheck;
{
	Foo* a = 0;
	OP_STATUS status = OpStatus::OK;
	TRAP(status, (OpMemDebug_OOM(1), a = OP_NEWA_L(Foo, 10)));
	OpMemDebug_OOM(0);
	verify(status == OpStatus::ERR_NO_MEMORY);
}

test("OP_NEWAA fails") leakcheck;
{
	Foo (*a)[3] = 0;
	OpMemDebug_OOM(1);
	a = OP_NEWAA(Foo, 10, 3);
	OpMemDebug_OOM(0);
	verify(a == 0);
}

test("OP_NEWAA_L fails") leakcheck;
{
	Foo (*a)[3] = 0;
	OP_STATUS status = OpStatus::OK;
	TRAP(status, (OpMemDebug_OOM(1), a = OP_NEWAA_L(Foo, 10, 3)));
	OpMemDebug_OOM(0);
	verify(status == OpStatus::ERR_NO_MEMORY);
}

test("OP_NEWA_WH fails") leakcheck;
{
	Foo* a = 0;
	OpMemDebug_OOM(1);
	a = OP_NEWA_WH(Foo, 10, 5);
	OpMemDebug_OOM(0);
	verify(a == 0);
}

test("OP_NEWA_WH_L fails") leakcheck;
{
	Foo* a = 0;
	OP_STATUS status = OpStatus::OK;
	TRAP(status, (OpMemDebug_OOM(1), a = OP_NEWA_WH_L(Foo, 10, 5)));
	OpMemDebug_OOM(0);
	verify(status == OpStatus::ERR_NO_MEMORY);
}

test("OP_NEWA_WHD fails") leakcheck;
{
	Foo* a = 0;
	OpMemDebug_OOM(1);
	a = OP_NEWA_WHD(Foo, 10, 5, 2);
	OpMemDebug_OOM(0);
	verify(a == 0);
}

test("OP_NEWA_WHD_L fails") leakcheck;
{
	Foo* a = 0;
	OP_STATUS status = OpStatus::OK;
	TRAP(status, (OpMemDebug_OOM(1), a = OP_NEWA_WHD_L(Foo, 10, 5, 2)));
	OpMemDebug_OOM(0);
	verify(status == OpStatus::ERR_NO_MEMORY);
}

test("OP_NEWGRO fails") leakcheck;
{
	OpMemGroup arena;
	Foo* a;
	OpMemDebug_OOM(1);
	a = OP_NEWGRO(Foo, (), &arena);
	OpMemDebug_OOM(0);
	verify(a == 0);
}

test("OP_NEWGRO_L fails") leakcheck;
{
	OpMemGroup arena;
	Foo* a = 0;
	OP_STATUS status = OpStatus::OK;
	TRAP(status, (OpMemDebug_OOM(1), a = OP_NEWGRO_L(Foo, (), &arena)));
	OpMemDebug_OOM(0);
	verify(status == OpStatus::ERR_NO_MEMORY);
}

test("OP_NEWGROA fails") leakcheck;
{
	OpMemGroup arena;
	Foo* a;
	OpMemDebug_OOM(1);
	a = OP_NEWGROA(Foo, 10, &arena);
	OpMemDebug_OOM(0);
	verify(a == 0);
}

test("OP_NEWGROA_L fails") leakcheck;
{
	OpMemGroup arena;
	Foo* a = 0;
	OP_STATUS status = OpStatus::OK;
	TRAP(status, (OpMemDebug_OOM(1), a = OP_NEWGROA_L(Foo, 10, &arena)));
	OpMemDebug_OOM(0);
	verify(status == OpStatus::ERR_NO_MEMORY);
}
