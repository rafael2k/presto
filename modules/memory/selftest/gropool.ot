/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.  It may not be distributed
 * under any circumstances.
 *
 * Morten Rolland, mortenro@opera.com
 */

group "memory.gropool";

language C++;

include "modules/memory/src/memory_pilayer.h";

require defined(MEMORY_GROPOOL_ALLOCATOR);

test("Simple OP_NEWGRO() allocations")
{
	struct Foobar { int a; int b; };

	Foobar* tmp[10000]; // ARRAY OK 2009-05-27 mortenro

	{
		OpMemGroup arena;

		for ( int k = 0; k < 10000; k++ )
		{
			tmp[k] = OP_NEWGRO(Foobar, (), &arena);
			verify(tmp[k] != 0);
			tmp[k]->a = k;
			tmp[k]->b = k*33;
		}

		for ( int m = 0; m < 10000; m++ )
		{
			verify(tmp[m]->a == m);
			verify(tmp[m]->b == m*33);
		}

		// Everything should be deleted when 'arena' goes out of scope
	}

#ifdef ENABLE_MEMORY_DEBUGGING
	// With memory debugging enabled, the memory is scrambled when released
	// unless valgrind is used.
#ifdef VALGRIND
	if ( ! op_valgrind_used() )
#endif
		for ( int p = 0; p < 10000; p++ )
		{
			verify(tmp[p]->a != p);
			verify(tmp[p]->b != p*33);
		}
#endif
}

test("Simple OP_NEWGRO_L() allocations")
{
	struct Foobar { int a; int b; };
	Foobar* tmp[10]; // ARRAY OK 2012-02-06 hela
	OP_STATUS status = OpStatus::OK;
	{
		OpMemGroup arena;
		for (int k = 0; k < 10; k++)
		{
			TRAP(status, tmp[k] = OP_NEWGRO_L(Foobar, (), &arena));
			verify_success(status);
			verify(tmp[k]);
			tmp[k]->a = k;
			tmp[k]->b = k*33;
		}
		for (int m = 0; m < 10; m++)
		{
			verify(tmp[m]->a == m);
			verify(tmp[m]->b == m*33);
		}
		// Everything should be deleted when 'arena' goes out of scope.
	}

#ifdef ENABLE_MEMORY_DEBUGGING
	// With memory debugging enabled, the memory is scrambled when released
	// unless valgrind is used.
#ifdef VALGRIND
	if (!op_valgrind_used())
#endif // VALGRIND
		for (int p = 0; p < 10; p++)
		{
			verify(tmp[p]->a != p);
			verify(tmp[p]->b != p*33);
		}
#endif // ENABLE_MEMORY_DEBUGGING
}

test("Simple OP_NEWGROA() allocations")
{
	struct Foobar { int a; int b; };

	Foobar* tmp[400]; // ARRAY OK 2009-05-27 mortenro

	{
		OpMemGroup arena;

		Foobar* a = OP_NEWGROA(Foobar, 400, &arena);
		verify(a != 0);

		for ( int k = 0; k < 400; k++ )
		{
			a->a = k;
			a->b = k*33;
			tmp[k] = a++;
		}

		for ( int m = 0; m < 400; m++ )
		{
			verify(tmp[m]->a == m);
			verify(tmp[m]->b == m*33);
		}

		// Array should be deleted when 'arena' goes out of scope
	}

#ifdef ENABLE_MEMORY_DEBUGGING
	// With memory debugging enabled, the memory is scrambled when released
	// unless valgrind is used.
#ifdef VALGRIND
	if ( ! op_valgrind_used() )
#endif
		for ( int p = 0; p < 400; p++ )
		{
			verify(tmp[p]->a != p);
			verify(tmp[p]->b != p*33);
		}
#endif
}

test("OpMemGroup alignment") leakcheck;
{
	OpMemGroup group;
	char* ptr[300]; // ARRAY OK 2009-05-27 mortenro
	size_t size;

	for ( size = 1; size < 300; size++ )
	{
		char* tmp = ptr[size] = OP_NEWGROA(char, size, &group);
		UINTPTR tmpval = (UINTPTR)tmp;
		verify((tmpval & (MEMORY_ALIGNMENT-1)) == 0);
		for ( size_t k = 0; k < size; k++ )
			tmp[k] = (size + k) & 0xff;
	}

	for ( size = 1; size < 300; size++ )
	{
		char* tmp = ptr[size];
		for ( size_t k = 0; k < size; k++ )
		{
			char c = (char)((size + k) & 0xff);
			verify(tmp[k] == c);
		}
	}
}

test("OpMemGroup predictable strides") leakcheck;
//	require !ENABLE_MEMORY_DEBUGGING;
{
	OpMemGroup group;

	char* a = OP_NEWGROA(char, 1, &group);
	char* b = OP_NEWGROA(char, 1, &group);
	verify(a != 0);
	verify(b != 0);
	verify(a < b);
	verify((b - a) == MEMORY_ALIGNMENT);

	a = OP_NEWGROA(char, MEMORY_ALIGNMENT-1, &group);
	b = OP_NEWGROA(char, MEMORY_ALIGNMENT-1, &group);
	verify(a != 0);
	verify(b != 0);
	verify(a < b);
	verify((b - a) == MEMORY_ALIGNMENT);

	a = OP_NEWGROA(char, MEMORY_ALIGNMENT, &group);
	b = OP_NEWGROA(char, MEMORY_ALIGNMENT, &group);
	verify(a != 0);
	verify(b != 0);
	verify(a < b);
	verify((b - a) == MEMORY_ALIGNMENT);

	a = OP_NEWGROA(char, MEMORY_ALIGNMENT+1, &group);
	b = OP_NEWGROA(char, MEMORY_ALIGNMENT+1, &group);
	verify(a != 0);
	verify(b != 0);
	verify(a < b);
	verify((b - a) == (2*MEMORY_ALIGNMENT));
}

// Fixme: Test(and implement) forcing OOM after a certain number of
//        GROPOOL allocations.

test("Create virtual segment and destroy segment")
	require OPMEMORY_VIRTUAL_MEMORY;
{
	// Create a segment with minimum 1024 pages.

	verify(op_get_mempagesize() > 0);
	const OpMemory::OpMemSegment* mseg = OpMemory_CreateVirtualSegment(1024 * op_get_mempagesize());
	verify(mseg != NULL);
	verify(mseg->type == OpMemory::MEMORY_SEGMENT_VIRTUAL);
	verify(mseg->address);
	verify(mseg->size > 0);
	OpMemory_DestroySegment(mseg);
	verify(mseg->type == OpMemory::MEMORY_SEGMENT_UNUSED);
}

