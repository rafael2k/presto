/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2007-2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "memory.api";

language C++;

global
{
#ifdef MEMORY_POOLING_ALLOCATORS
	OpMemPoolManager* test;
#endif

	int variable_which_is_zero;

	class Foo
	{
	public:
		Foo(void) { val = 17; }
		Foo(int v) { val = v; }
		~Foo(void) { val = -69; }

		int pad1;
		int val;
		int pad2;
	};

	struct Bar
	{
		int blah;
		long meh;
	};
}

setup
{
#ifdef MEMORY_POOLING_ALLOCATORS
	// Create a temporary pooling infrastructure we can test against
	test = OP_NEW(OpMemPoolManager,());
	//	test->PlatformInit();
	//	test->Install();
#endif

	variable_which_is_zero = 0;
}

exit
{
#ifdef MEMORY_POOLING_ALLOCATORS
	// We don't need it any more
	//	test->Uninstall();
	OP_DELETE(test);
#endif
}

test("OP_NEW succeeds") leakcheck;
{
	//
	// Allocate on regular heap with OP_NEW, and expect success
	//
	Foo* a = 0;
	Foo* b = 0;

	a = OP_NEW(Foo,(42));
	verify(a != 0);
	verify(a->val == 42);
	OP_DELETE(a);
	a = 0;

	b = OP_NEW(Foo,());
	verify(b != 0);
	verify(b->val == 17);
	OP_DELETE(b);
	b = 0;
}
finally
{
	OP_DELETE(a);
	OP_DELETE(b);
}

test("OP_NEW_L succeeds") leakcheck;
{
	//
	// This uses the regular heap through OP_NEW_L macro.
	//
	Foo* a = 0;
	Foo* b = 0;

	a = OP_NEW_L(Foo,(42));
	verify(a != 0);
	verify(a->val == 42);
	OP_DELETE(a);
	a = 0;

	b = OP_NEW_L(Foo,());
	verify(b != 0);
	verify(b->val == 17);
	OP_DELETE(b);
	b = 0;
}
finally
{
	OP_DELETE(a);
	OP_DELETE(b);
}

test("OP_NEWA succeeds") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWA macro.
	//
	Foo* array;
	int* ints = 0;

	array = OP_NEWA(Foo,10);
	for ( int k = 0; k < 10; k++ )
		verify(array[k].val == 17);

	verify(variable_which_is_zero == 0);
	ints = OP_NEWA(int, variable_which_is_zero);
	verify(ints != 0);  // Should not return NULL (except for OOM)
}
finally
{
	OP_DELETEA(array);
	OP_DELETEA(ints);
}

test("OP_NEWA_L succeeds") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWA_L macro.
	//
	Foo* array;
	int* ints = 0;

	array = OP_NEWA_L(Foo,10);
	for ( int k = 0; k < 10; k++ )
		verify(array[k].val == 17);

	verify(variable_which_is_zero == 0);
	ints = OP_NEWA_L(int, variable_which_is_zero);
	verify(ints != 0);	// Should not return NULL (except for OOM)
}
finally
{
	OP_DELETEA(array);
	OP_DELETEA(ints);
}

test("OP_NEWAA succeeds") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWAA macro.
	//
	Foo (*array)[5];
	int (*ints)[7] = 0;

	array = OP_NEWAA(Foo,10,5);
	for ( int k = 0; k < 10; k++ ) {
		verify(array[k][0].val == 17);
		verify(array[k][1].val == 17);
		verify(array[k][2].val == 17);
		verify(array[k][3].val == 17);
		verify(array[k][4].val == 17);
	}

	verify(variable_which_is_zero == 0);
	ints = OP_NEWAA(int, variable_which_is_zero, 7);
	verify(ints != 0);  // Should not return NULL (except for OOM)
}
finally
{
	OP_DELETEA(array);
	OP_DELETEA(ints);
}

test("OP_NEWAA_L succeeds") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWAA_L macro.
	//
	Foo (*array)[5];
	int (*ints)[7] = 0;

	array = OP_NEWAA_L(Foo,10,5);
	for ( int k = 0; k < 10; k++ ) {
		verify(array[k][0].val == 17);
		verify(array[k][1].val == 17);
		verify(array[k][2].val == 17);
		verify(array[k][3].val == 17);
		verify(array[k][4].val == 17);
	}

	verify(variable_which_is_zero == 0);
	ints = OP_NEWAA_L(int, variable_which_is_zero, 7);
	verify(ints != 0);  // Should not return NULL (except for OOM)
}
finally
{
	OP_DELETEA(array);
	OP_DELETEA(ints);
}

test("OP_NEWA_WH succeeds") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWA_WH macro.
	//
	Foo* array;
	struct Bar *array2 = 0;
	int* ints = 0;
	int* ints2 = 0;

	array = OP_NEWA_WH(Foo,10,5);
	for ( int k = 0; k < 10*5; k++ )
		verify(array[k].val == 17);

	array2 = OP_NEWA_WH(struct Bar,5,10);
	verify(array2 != 0);  // Should not return NULL (except for OOM)

	verify(variable_which_is_zero == 0);
	ints = OP_NEWA_WH(int, 100, variable_which_is_zero);
	verify(ints != 0);  // Should not return NULL (except for OOM)
	ints2 = OP_NEWA_WH(int, variable_which_is_zero, 100);
	verify(ints2 != 0);  // Should not return NULL (except for OOM)
}
finally
{
	OP_DELETEA(array);
	OP_DELETEA(array2);
	OP_DELETEA(ints);
	OP_DELETEA(ints2);
}

test("OP_NEWA_WH_L succeeds") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWA_WH_L macro.
	//
	Foo* array;
	struct Bar *array2 = 0;
	int* ints = 0;
	int* ints2 = 0;

	array = OP_NEWA_WH_L(Foo,10,5);
	for ( int k = 0; k < 10*5; k++ )
		verify(array[k].val == 17);

	array2 = OP_NEWA_WH_L(struct Bar,5,10);
	verify(array2 != 0);  // Should not return NULL (except for OOM)

	verify(variable_which_is_zero == 0);
	ints = OP_NEWA_WH_L(int, 100, variable_which_is_zero);
	verify(ints != 0);  // Should not return NULL (except for OOM)
	ints2 = OP_NEWA_WH_L(int, variable_which_is_zero, 100);
	verify(ints2 != 0);  // Should not return NULL (except for OOM)
}
finally
{
	OP_DELETEA(array);
	OP_DELETEA(array2);
	OP_DELETEA(ints);
	OP_DELETEA(ints2);
}

test("OP_NEWA_WHD succeeds") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWA_WHD macro.
	//
	Foo *array;
	struct Bar *array2 = 0;
	int *ints = 0, *ints2 = 0, *ints3 = 0;

	array = OP_NEWA_WHD(Foo,10,5,2);
	for ( int k = 0; k < 10*5*2; k++ )
		verify(array[k].val == 17);

	array2 = OP_NEWA_WHD(struct Bar,2,5,10);
	verify(array2 != 0);  // Should not return NULL (except for OOM)

	verify(variable_which_is_zero == 0);
	ints = OP_NEWA_WHD(int, variable_which_is_zero, 10, 10);
	verify(ints != 0);  // Should not return NULL (except for OOM)
	ints2 = OP_NEWA_WHD(int, 10, variable_which_is_zero, 10);
	verify(ints2 != 0);  // Should not return NULL (except for OOM)
	ints3 = OP_NEWA_WHD(int, 10, 10, variable_which_is_zero);
	verify(ints3 != 0);  // Should not return NULL (except for OOM)
}
finally
{
	OP_DELETEA(array);
	OP_DELETEA(array2);
	OP_DELETEA(ints);
	OP_DELETEA(ints2);
	OP_DELETEA(ints3);
}

test("OP_NEWA_WHD_L succeeds") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWA_WHD_L macro.
	//
	Foo *array;
	struct Bar *array2 = 0;
	int *ints = 0, *ints2 = 0, *ints3 = 0;

	array = OP_NEWA_WHD(Foo,10,5,2);
	for ( int k = 0; k < 10*5*2; k++ )
		verify(array[k].val == 17);

	array2 = OP_NEWA_WHD_L(struct Bar,2,5,10);
	verify(array2 != 0);  // Should not return NULL (except for OOM)

	verify(variable_which_is_zero == 0);
	ints = OP_NEWA_WHD_L(int, variable_which_is_zero, 10, 10);
	verify(ints != 0);  // Should not return NULL (except for OOM)
	ints2 = OP_NEWA_WHD_L(int, 10, variable_which_is_zero, 10);
	verify(ints2 != 0);  // Should not return NULL (except for OOM)
	ints3 = OP_NEWA_WHD_L(int, 10, 10, variable_which_is_zero);
	verify(ints3 != 0);  // Should not return NULL (except for OOM)
}
finally
{
	OP_DELETEA(array);
	OP_DELETEA(array2);
	OP_DELETEA(ints);
	OP_DELETEA(ints2);
	OP_DELETEA(ints3);
}

test("OP_NEWA fails on absurd inputs") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWA macro.
	//
	Foo *array = 0;
	size_t big_num = ((size_t)-1) / (sizeof(Foo) / 2);
	array = OP_NEWA(Foo,big_num); // sizeof(Foo) * big_num overflows size_t
	verify(array == 0);
}
finally
{
	if (array) OP_DELETEA(array);
}

test("OP_NEWA_L fails on absurd inputs") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWA_L macro.
	//
	Foo *array = 0;
	size_t big_num = ((size_t)-1) / (sizeof(Foo) / 2);
	TRAPD(status, array = OP_NEWA_L(Foo,big_num)); // sizeof(Foo) * big_num overflows size_t
	verify(status == OpStatus::ERR_NO_MEMORY);
}
finally
{
	if (array) OP_DELETEA(array);
}

test("OP_NEWAA fails on absurd inputs") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWAA macro.
	//
	Foo (*array)[3] = 0, (*array2)[5] = 0;

	size_t big_num = ((size_t)-1) / 2;
	array = OP_NEWAA(Foo,big_num,3); // size_t overflow
	verify(array == 0);

	big_num = ((size_t)-1) / (5 * (sizeof(Foo) / 2));
	array2 = OP_NEWAA(Foo,big_num,5); // size_t overflow
	verify(array2 == 0);
}
finally
{
	if (array) OP_DELETEA(array);
	if (array2) OP_DELETEA(array2);
}

test("OP_NEWAA_L fails on absurd inputs") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWAA_L macro.
	//
	Foo (* OP_MEMORY_VAR array)[7] = 0, (* OP_MEMORY_VAR array2)[5] = 0;
	size_t big_num = ((size_t)-1) / 2;
	TRAPD(status, array = OP_NEWAA_L(Foo,big_num,7)); // size_t overflow
	verify(status == OpStatus::ERR_NO_MEMORY);

	big_num = ((size_t)-1) / (5 * (sizeof(Foo) / 2));
	TRAPD(status2, array2 = OP_NEWAA_L(Foo,big_num,5)); // size_t overflow
	verify(status2 == OpStatus::ERR_NO_MEMORY);
}
finally
{
	if (array) OP_DELETEA(array);
	if (array2) OP_DELETEA(array2);
}

test("OP_NEWA_WH fails on absurd inputs") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWA_WH macro.
	//
	Foo *array1 = 0, *array2 = 0, *array3 = 0, *array4 = 0;
	size_t big_num = ((size_t)-1) / 2;

	array1 = OP_NEWA_WH(Foo,big_num,3); // size_t overflow
	verify(array1 == 0);

	array2 = OP_NEWA_WH(Foo,3,big_num); // size_t overflow
	verify(array2 == 0);

	array3 = OP_NEWA_WH(Foo,big_num,big_num); // size_t overflow
	verify(array3 == 0);

	big_num = ((size_t)-1) / (4 * (sizeof(Foo) / 2));
	array4 = OP_NEWA_WH(Foo,big_num,4); // sizeof(Foo) * big_num * 4 overflows size_t
	verify(array4 == 0);
}
finally
{
	if (array1) OP_DELETEA(array1);
	if (array2) OP_DELETEA(array2);
	if (array3) OP_DELETEA(array3);
	if (array4) OP_DELETEA(array4);
}

test("OP_NEWA_WH_L fails on absurd inputs") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWA_WH_L macro.
	//
	Foo * OP_MEMORY_VAR array1 = 0, * OP_MEMORY_VAR array2 = 0, * OP_MEMORY_VAR array3 = 0, * OP_MEMORY_VAR array4 = 0;
	size_t big_num = ((size_t)-1) / 2;

	TRAPD(status1, array1 = OP_NEWA_WH_L(Foo,big_num,3)); // size_t overflow
	verify(status1 == OpStatus::ERR_NO_MEMORY);

	TRAPD(status2, array2 = OP_NEWA_WH_L(Foo,3,big_num)); // size_t overflow
	verify(status2 == OpStatus::ERR_NO_MEMORY);

	TRAPD(status3, array3 = OP_NEWA_WH_L(Foo,big_num,big_num)); // size_t overflow
	verify(status3 == OpStatus::ERR_NO_MEMORY);

	big_num = ((size_t)-1) / (4 * (sizeof(Foo) / 2));
	TRAPD(status4, array4 = OP_NEWA_WH_L(Foo,big_num,4)); // sizeof(Foo) * big_num * 4 overflows size_t
	verify(status4 == OpStatus::ERR_NO_MEMORY);
}
finally
{
	if (array1) OP_DELETEA(array1);
	if (array2) OP_DELETEA(array2);
	if (array3) OP_DELETEA(array3);
	if (array4) OP_DELETEA(array4);
}

test("OP_NEWA_WHD fails on absurd inputs") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWA_WHD macro.
	//
	Foo *array1 = 0, *array2 = 0, *array3 = 0, *array4 = 0, *array5 = 0;
	size_t big_num = ((size_t)-1) / 3;

	array1 = OP_NEWA_WHD(Foo,big_num,2,2); // size_t overflow
	verify(array1 == 0);

	array2 = OP_NEWA_WHD(Foo,2,big_num,2); // size_t overflow
	verify(array2 == 0);

	array3 = OP_NEWA_WHD(Foo,2,2,big_num); // size_t overflow
	verify(array3 == 0);

	array4 = OP_NEWA_WHD(Foo,big_num,big_num,big_num); // size_t overflow
	verify(array4 == 0);

	big_num = ((size_t)-1) / (4 * 8 * (sizeof(Foo) / 2));
	array5 = OP_NEWA_WHD(Foo,big_num,4,8); // sizeof(Foo) * big_num * 4 * 8 overflows size_t
	verify(array5 == 0);
}
finally
{
	if (array1) OP_DELETEA(array1);
	if (array2) OP_DELETEA(array2);
	if (array3) OP_DELETEA(array3);
	if (array4) OP_DELETEA(array4);
	if (array5) OP_DELETEA(array5);
}

test("OP_NEWA_WHD_L fails on absurd inputs") leakcheck;
{
	//
	// This uses the regular heap through OP_NEWA_WHD_L macro.
	//
	Foo * OP_MEMORY_VAR array1 = 0, * OP_MEMORY_VAR array2 = 0, * OP_MEMORY_VAR array3 = 0, * OP_MEMORY_VAR array4 = 0, * OP_MEMORY_VAR array5 = 0;
	size_t big_num = ((size_t)-1) / 3;

	TRAPD(status1, array1 = OP_NEWA_WHD_L(Foo,big_num,2,2)); // size_t overflow
	verify(status1 == OpStatus::ERR_NO_MEMORY);

	TRAPD(status2, array2 = OP_NEWA_WHD_L(Foo,2,big_num,2)); // size_t overflow
	verify(status2 == OpStatus::ERR_NO_MEMORY);

	TRAPD(status3, array3 = OP_NEWA_WHD_L(Foo,2,2,big_num)); // size_t overflow
	verify(status3 == OpStatus::ERR_NO_MEMORY);

	TRAPD(status4, array4 = OP_NEWA_WHD_L(Foo,big_num,big_num,big_num)); // size_t overflow
	verify(status4 == OpStatus::ERR_NO_MEMORY);

	big_num = ((size_t)-1) / (4 * 8 * (sizeof(Foo) / 2));
	TRAPD(status5, array5 = OP_NEWA_WHD_L(Foo,big_num,4,8)); // sizeof(Foo) * big_num * 4 * 8 overflows size_t
	verify(status5 == OpStatus::ERR_NO_MEMORY);
}
finally
{
	if (array1) OP_DELETEA(array1);
	if (array2) OP_DELETEA(array2);
	if (array3) OP_DELETEA(array3);
	if (array4) OP_DELETEA(array4);
	if (array5) OP_DELETEA(array5);
}
