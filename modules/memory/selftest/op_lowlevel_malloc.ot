/* -*- Mode: c; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2004-2009 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 * Tests of standard memory management infrastructure, including stuff
 * we take for granted that the standard doesn't actually promise.
 */
group "memory.op_lowlevel_malloc";

language C++;

test("op_lowlevel_malloc basics")
{
	op_lowlevel_free(0); // Legal, should not crash

	// malloc works:
	void* p = op_lowlevel_malloc(37);
	verify(p != 0);
}
finally
{
	op_lowlevel_free(p);
}

test("op_lowlevel_malloc zero size allocations")
{
	/* malloc, free, calloc, realloc
	 *
	 * ANSI X3.159-1989, 4.10.3: If the size of the space requested is zero,
	 * the behavior is implementation-defined; the value returned shall be
	 * either a null pointer or a unique pointer.
	 */
	void* p = op_lowlevel_malloc(0);
	void* q = op_lowlevel_malloc(0);

	// That should get us either two NULLs or two distinct non-NULLs:
	if ( p == 0 )
	{
		verify(q == 0);
	}
	else
	{
		verify(q != 0);
		verify(p != q);
	}
}
finally
{
	op_lowlevel_free(q);
	op_lowlevel_free(p);
}

test("op_lowlevel_malloc fails on (size_t)-1")
	require undefined(WINGOGI);
{
	//
	// Some systems (e.g. Windows) use the maximum size_t (0xfffffff on
	// 32-bit, 0xffffffffffffffff on 64-bit) to signal an allocation that
	// should always fail. Typically these will fail because adding the
	// allocation overhead will cause overflow.
	//
	// Test that op_lowlevel_malloc() indeed returns 0 in this case.
	// Failure in this selftest is an indication that op_lowlevel_malloc()
	// does not detect overflow correctly.
	//
	// Note that on some systems (observed on WinGogi Debug Desktop profile),
	// this selftest crashes.
	//
	// See SYSTEM_NEWA_CHECKS_OVERFLOW and CORE-34984 for more details.
	//
	void* p = op_lowlevel_malloc((size_t)-1);
	verify(p == 0);
}
finally
{
	op_lowlevel_free(p);
}

test("op_lowlevel_calloc")
{
	void* p = 0;

	//
	// Allocate different sizes twise with a free inbetween. This tests
	// that quicklists and mmap'ed memory gets zeroed before reuse.
	//
	// Select sizes so they follow the pattern: 1.mmm * 2^e for various
	// values of e and all combinations of 'mmm'.
	//
	unsigned int size = 2*1024*1024; // Must be a power of two
	unsigned int high = size;
	unsigned int mask = high + (high>>1) + (high>>2) + (high>>3);
	unsigned int step = (high>>3);

	while ( size > 8 )
	{
		for ( int m = 0; m < 2; m++ )
		{
			// Break up the size into v1 and v2 parameters to specify the size
			unsigned int v1 = 1;
			unsigned int v2 = size;

			while ( (v2 & 1) == 0 && v1 < v2 )
			{
				v1 <<= 1;
				v2 >>= 1;
			}

			OP_ASSERT((v1*v2) == size);
			void* p = op_lowlevel_calloc(v1, v2);
			verify(p != 0); // In case of OOM here, reduce blocksize

			unsigned char* c = (unsigned char*)p;
			for ( unsigned int i = 0; i < size; i++ )
				verify(c[i] == 0);

			op_memset(p, 17, size); // non-zero contents for next time around

			op_lowlevel_free(p);
		}

		if ( (size & mask) == high ) {
			high >>= 1;
			mask >>= 1;
			step >>= 1;
		}

		size -= step;
	}
}
finally
{
	op_lowlevel_free(p);
}

test("op_lowlevel_calloc security") require OPTIONAL_MEMORY_SELFTESTS;
{
#if defined(THIRTY_TWO_BIT)
	// 641 * 6700417 => 2^32 + 1
	void* p = op_lowlevel_calloc(641, 6700417);
	unsigned long check_size = 2000000000;
	unsigned long check_remainder = 641 * 6700417; // Verify expected overflow
	verify(check_remainder == 1);
#elif defined(SIXTY_FOUR_BIT)
	// 30 * 614891469123651721 => 2^64 + 14
	void* p = op_lowlevel_calloc(30, 614891469123651721);
	unsigned long check_size = 8000000000;
	unsigned long check_remainder = 30 * 614891469123651721;
	verify(check_remainder == 14);
#else
#  error "This test only designed for 32 or 64 bit machines."
#endif

	if ( p != 0 )
	{
		/*
		 * The extremely huge allocation succeeded, which is very
		 * suspicious.  Verify that quite a lot of the bytes in the
		 * allocation are actually zero, because there is probably
		 * an overflow and a small allocation if not all the bytes
		 * are zero.
		 */
		unsigned char* ptr = reinterpret_cast<unsigned char*>(p);
		for ( unsigned int t = 0; t < check_size; t++ )
			verify(ptr[t] == 0);
	}
	else
	{
		// The allocation failed, which is the sensible thing to do...
	}
}

test("op_lowlevel_realloc")
{
	// realloc works:
	void* p = op_lowlevel_malloc(10);
	verify(p != 0);

	p = op_lowlevel_realloc(p, 20);
	verify(p != 0);

	p = op_lowlevel_realloc(p, 5);
	verify(p != 0);
}
finally
{
	op_lowlevel_free( p );
}

test("op_lowlevel_realloc data")
{
	/* [ANSI X3.159-1989/4.10.3.4] The contents of the object shall be
	 * unchanged up to the lesser of the new and old sizes.
	 */
	static const char text[] = "The quick brown fox jumps over the lazy dog.";
	char* p = (char*)op_lowlevel_malloc(sizeof(text));
	verify(p != 0);
	op_strcpy(p, text);

	p = (char*)op_lowlevel_realloc(p, 19);
	verify(p != 0);
	verify(op_strncmp("The quick brown fox", p, 19) == 0);
	p = (char*)op_lowlevel_realloc(p, sizeof(text));
	verify(p != 0);
	verify(op_strncmp("The quick brown fox", p, 19) == 0);
}
finally
{
	op_lowlevel_free(p);
}

test("op_lowlevel_realloc zero alloc consistency")
	require OPTIONAL_MEMORY_SELFTESTS;
{
	void* p = op_lowlevel_realloc(0, 17);
	verify(p != 0);

	/* The standard leaves implementation-defined whether each of malloc(0)
	 * and realloc(p, 0) returns a unique zero-sized allocation or NULL;
	 * but we expect that the two should agree; Of course, if platform
	 * op_lowlevel_* wrapping violates this, we'll fail this test.
	 * See bug 291136 for further details.  The memory module should cope
	 * if the lowlevel methods fail this test: however, those implicated in
	 * bug 291136 would like to know about any platform that does fail it.
	 */

	p = op_lowlevel_realloc(p, 0);
	void* q = op_lowlevel_malloc(0);

	if ( q != 0 ) // Unique zero-sized allocations:
	{
		op_lowlevel_free(q);
		verify(p != 0);
	}
	else // NULL returns:
		verify(p == 0);
}
finally
{
	op_lowlevel_free(p);
}
