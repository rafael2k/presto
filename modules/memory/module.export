# APIs exported by the memory module

API_MEM_SMOPOOL						mortenro

	Export the SMOPOOL allocator.  This allocator is used to
	allocate small to medium sised objects in large quantities.
	Objects are densely packed in arrays of size equal to, or
	smaller than the memory blocksize.

	WARNING: This API is currently experimental, and should
	not be enabled for deliveries.

	Defines:     MEMORY_SMOPOOL_ALLOCATOR
	Depends on:  nothing


API_MEM_ELOPOOL						mortenro

	Export the ELOPOOL allocator.  This allocator is used to
	allocate objects and strings of exact same lifetime (same
	destruction time).  Objects are packed densly together
	with little overhead and efficient release operation.

	Objects allocated with ELOPOOL will still have to be
	deallocated with OP_DELETE. The storage will be released
	when all objects packed together in one storage unit
	is released.

	WARNING: This API is currently experimental, and should
	not be enabled for deliveries.

	Defines:     MEMORY_ELOPOOL_ALLOCATOR
	Depends on:  nothing

API_MEM_GROPOOL						mortenro

	Export the GROPOOL allocator. This allocator is similar
	to ELOPOOL, but releasing the memory must not be done
	with OP_DELETE or similar explicit freeing of memory.

	Rather, all allocations done with a given OpMemGroup object
	is released when the OpMemGroup object is destroyed, or
	when its ReleaseAll() method is called.

	This is a typical "Arena" allocator, or a "Group allocator"
	as it is called in Opera.

	WARNING: It is a hard error to try free objects allocated
	with this allocator explicitly.

	Defines:	MEMORY_GROPOOL_ALLOCATOR
	Depends on:	nothing

API_MEM_OPERA_MMAP_SEGMENT				mortenro

	Export functionality similar to UNIX mmap()/munmap() which is
	implemented by Opera. Important: This functionality depends on
	the virtual memory segment porting interface found in
	pi/system/OpMemory.h which may not always be available, so
	this API can't be expected to be universally available.

	Class: OpMmapSegment in memory/src/memory_mmap.h

	This functionality may be used by e.g. lea_malloc on platforms
	where the system mmap functionality is not very good.

	Defines:	ENABLE_OPERA_MMAP_SEGMENT
	Depends on:	nothing

API_MEM_OPERA_MMAP					mortenro

	Export emulation functions for UNIX mmap()/munmap() for use by
	e.g. lea_malloc and others. This API is implemented internally
	in the memory module by means of API_MEM_OPERA_MMAP_SEGMENT.

	Important: This API can't be expected to be universally
	available, and it is not thread-safe. It can thus only be used
	by the core thread, and only when lea_malloc doesn't have to
	be thread-safe (i.e. no locking needed for lea_malloc).

	void* op_mmap(void* ptr, size_t size, int prot, int flags)
	int   op_munmap(void* ptr, size_t size)

	Some notable differences are worth mentioning: The 'prot' and
	'flags' arguments are ignored. All mmap'ed regions are given
	read-write protection (no executable permission), and the flags
	will assume a private and anonymous mapping.

	Important: Allocations and deallocations must be performed on
	complete mmap units. Traditional UNIX 'mmap()' allows changing
	e.g. the protection of individual pages, but this is not
	supported in this implementation. If the 'ptr' argument to
	'op_mmap()' is non-zero, an assert will be given and the
	result is undefined.

	Also: An assert will be given if the 'size' argument to
	'op_munmap()' is not of the same size as that of the
	corresponding call to mmap(), or if the address given was not
	allocated by mmap(). Such operations are illegal.

	Defines:       ENABLE_OPERA_MMAP
	Depends on:    nothing

API_MEM_OPERA_HEAP_SEGMENT				mortenro

	Export functionality similar to UNIX sbrk() which is
	implemented by Opera. Important: This functionality depends on
	the virtual memory segment porting interface found in
	pi/system/OpMemory.h which may not always be available, so
	this API can't be expected to be universally available.

	Class: OpHeapSegment in memory/src/memory_heap.h

	This functionality is primarily intended to be used by
	lea_malloc on platforms where the concept of a "heap" is not
	very well supported (the sbrk() function which lea_malloc
	depends on to a large degree). This API should not be used by
	lea_malloc directly, but rather API_MEM_OPERA_SBRK instead,
	which is a wrapper layer that emulates UNIX sbrk() more
	directly.

	Defines:	ENABLE_OPERA_HEAP_SEGMENT
	Depends on:	nothing

API_MEM_OPERA_SBRK					mortenro

	This API provides a global function that can be used by
	lea_malloc to allocate memory on a 'heap'.

	extern "C" void* op_sbrk(long increment);

	This function will return (void*)-1 on out-of memory or other
	errors, and generally behave similar to the UNIX 'sbrk()'
	function.

	This API (the op_sbrk() function) should *only* be used
	by lea_malloc, since competing users of op_sbrk() would
	generally be a very bad idea. It breaks lea_malloc's
	assumption that the heap is contigous, and op_sbrk() is
	not itself threadsafe (it relies on lea_malloc to use
	locks to prevent multiple threads from calling this
	function at the same time).

	Defines:	ENABLE_OPERA_SBRK
	Depends on:	nothing

API_MEM_EXECUTABLE_MEMORY_MANAGER			mortenro

	The executable memory manager provides an API that can be used
	to allocate arbitrary sized chunks of memory intended to hold
	machine instructions that can later be executed.

	The API is defined in modules/memory/src/memory_executable.h
	and consists of the public classes OpExecMemoryManager and
	OpExecMemory.

	This API relies upon the executable memory segment API in the
	porting interface for its operation.

	Defines:	EXECUTABLE_MEMORY_MANAGER
	Depends on:	nothing

API_MEM_DEBUGGING_ALLOCATOR				mortenro

	Export the debugging allocator.  This allocator is
	special in that the allocations done with this allocator
	are not counted against the limited heap - i.e. the
	allocation is done outside the limited heap.

	This allows much better debugging support in the face of
	a limited heap - as only the "real" allocations are placed
	on the limited heap, with the consequences of OOM.

	The debugging allocator is:

		void* op_debug_malloc(size_t size);
		char* op_debug_strdup(const char* str);
		void  op_debug_free(void* ptr);

	C++ objects that needs to be created with this allocator
	will have to overload their own operators new and delete
	to achieve this.

	Note 1: Ordinary op_free or delete/delete[] can't be used
	to free data/objects created by op_debug_malloc().

	Note 2: Memory allocated with op_debug_malloc() will not
	have any memory guards or other corruption detection.

	Note 3: On devices with limited memory, a separate heap
	may be used for op_debug_malloc(), to be able to guarantee
	a ceratin ammount of debugging allocation, even in face of
	OOM on the regular heap.

	Note 4: Don't use this allocator unless you are absolutely
	sure this is the right thing to do, and preferably
	discuss this with the memory module owner first.

	Defines:	MEMORY_DEBUGGING_ALLOCATOR
	Depends on:	nothing
