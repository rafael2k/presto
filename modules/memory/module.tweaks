#
# NOTE: Many of the tweaks in this file has '#if' semantics, not '#ifdef'.
#       This means that MEMORY_ macros originating from such tweaks
#       will have a value of 1 or 0 to denote active or not.
#       This means you should apply the tweak if you don't like the
#       default value, which may be either 0 or 1.  This is done to
#       allow changing defaults more easilly, and to obtain coherent
#       naming of the MEMORY_ tweak macros.
#
# NOTE: This tweaks file is divided into two sections:  Section 1 which
#       deals with settings that affects all configurations, and
#       section 2 which deals with how memory debugging is performed.
#


#######################################################################
#                                                                     #
#       Section 1                                                     #
#                                                                     #
#       TWEAKS FOR CONFIGURING GENERAL MEMORY FUNCTIONALITY           #
#                                                                     #
#       All tweaks in this section apply to all configurations.       #
#                                                                     #
#       It is important to understand that configuring the            #
#       memory module successfully requires detailed knowledge        #
#       about the target platform, and *all* tweaks in this           #
#       section should be reviewed for a new port.                    #
#                                                                     #
#######################################################################

TWEAK_MEMORY_USE_LOCKING			mortenro

	Whenever the allocation functions may be called from more than
	a single thread, this tweak should be applied.

	Keep in mind that even though Opera is single threaded by nature,
	the platform code and/or library code may use threading to
	implement e.g. asynchronous DNS lookups, disk-I/O slaves or
	independent user interface.  This may cause the allocator(s) to
	be called on different threads and this tweak should be applied.

	When applying this tweak, the locking mechanism(s) must be
	implemented in the platform.  See modules/pi/system/OpMemory.h
	for more details.

	NOTE: Even when using the native system allocator directly,
	the memory module needs to know about the need for locking and
	how to do it to support memory debugging correctly.

	Category  : setting
	Define    : MEMORY_USE_LOCKING
	Depends on: nothing

TWEAK_MEMORY_EXTERNAL_DECLARATIONS		mortenro

        Defines the name for the header file used to declare alternative
	macros used by / provided by the memory module.  This is usefull
	when a platform needs to have its own OP_NEW macros etc. due to
	compiler strangeness, special debugging facilities or other.

        When this tweak is enabled, the provided header file can declare
        the externally visible macros in the memory module.

	All macros will be given default values by the memory module
	if they are not defined, i.e. you can define only a subset of
	the macros in your own header file.

        Category  : workaround
        Define    : MEMORY_EXTERNAL_DECLARATIONS
        Value     : "modules/memory/src/memory_macros.h"
        Depends on: nothing


TWEAK_MEMORY_NAMESPACE_OP_NEW			mortenro

	By default, OP_NEW, OP_NEWA, OP_NEW_L etc. will use global
	operator new for allocations (And the Symbian ELeave
	versions).  With this tweak, a separate "namespace" for the
	new operators are used that does not interfere with the
	platform global versions.  This is achieved by supplying an
	Opera specific dummy enum argument to new.

	Note that this will only be the case for builds without memory
	debugging enabled (the debugging versions of new have huge
	signatures, moving them far away from the system version
	regardless).

	This tweak affects the "leaving" versions of new and new[] in
	the sense that the ELeave signature will not be used when this
	tweak is enabled.  They will get their own (Opera specific)
	namespace in this case.

	If the dummy argument is a performance concern, investigating
	the use of inlined operator new may help with the performance.

	For true namespace separation, operator delete may have to be
	changed in some way: Inlining it may keep it out of reach of
	the platform code, or symbol rewriting of the Opera object
	files may be needed.  But keep in mind that allocations and
	de-allocations needs to be done with the same allocator.

	Valid values for MEMORY_NAMESPACE_OP_NEW are 0 and 1.

        Category  : workaround
        Define    : MEMORY_NAMESPACE_OP_NEW
        Value     : 0
        Depends on: nothing


TWEAK_MEMORY_REGULAR_OP_NEW			mortenro

	This tweak controls whether or not do declare regular
	'operator new' which is needed by the OP_NEW set of macros.
	The default is to declare these operators.  To implement these
	'operator new' methods, see TWEAK_MEMORY_IMPLEMENT_OP_NEW.
	See TWEAK_MEMORY_INLINED_OP_NEW for an alternative strategy.

	Valid values for MEMORY_REGULAR_OP_NEW are 0 and 1.

        Category  : workaround
        Define    : MEMORY_REGULAR_OP_NEW
        Value     : 1
        Depends on: nothing


TWEAK_MEMORY_IMPLEMENT_OP_NEW			mortenro

	This tweak will cause default implementations of 'operator new'
	methods to be used.  This tweak usually	follows
	TWEAK_MEMORY_REGULAR_OP_NEW, but some platforms may want
	to provide their own implementation, and not let the memory
	module implement them.  The default is to implement these
	operators.

	Valid values for MEMORY_IMPLEMENT_OP_NEW are 0 and 1.

        Category  : workaround
        Define    : MEMORY_IMPLEMENT_OP_NEW
        Value     : 1
        Depends on: nothing


TWEAK_MEMORY_INLINED_OP_NEW			mortenro

	Inlined 'operator new' may be used to implement the OP_NEW set of
	macros.  This is not the default, and may be activated instead of
	TWEAK_MEMORY_REGULAR_OP_NEW and TWEAK_MEMORY_IMPLEMENT_OP_NEW.

	An alternative is to disable both regular declaration, implementation
	and inlined declarations, and provide them by the platformt through
	the TWEAK_MEMORY_EXTERNAL_DECLARATIONS tweak.

	Enabeling this tweak without at the same time disabeling
	TWEAK_MEMORY_REGULAR_OP_NEW is an error.

	Valid values for MEMORY_INLINED_OP_NEW are 0 and 1.

        Category  : workaround
        Define    : MEMORY_INLINED_OP_NEW
        Value     : 0
        Depends on: nothing


TWEAK_MEMORY_REGULAR_GLOBAL_NEW			mortenro

	This tweak controls whether Opera should declare the global
	operator new or not.  The default is to declare the global
	operator new.  See TWEAK_MEMORY_IMPLEMENT_GLOBAL_NEW and
	TWEAK_MEMORY_INLINED_GLOBAL_NEW below for more information.

	At some later point, we may avoid the global operator new
	in favor of OP_NEW macros, at which point we may not want
	to mess with the global operator new any more (and leave it
	alone).

	Valid values for MEMORY_REGULAR_GLOBAL_NEW are 0 and 1.

        Category  : workaround
        Define    : MEMORY_REGULAR_GLOBAL_NEW
        Value     : 1
        Depends on: nothing


TWEAK_MEMORY_IMPLEMENT_GLOBAL_NEW		mortenro

	This tweak will cause the global 'operator new' to be
	implemented by the memory module.  This tweak usually
	follows TWEAK_MEMORY_REGULAR_GLOBAL_NEW, but some platforms
	may want to provide their own implementationi, and not let
	the memory module implement them.  The default is to
	implement global 'operator new' in the memory module.

	Valid values for MEMORY_IMPLEMENT_GLOBAL_NEW are 0 and 1.

        Category  : workaround
        Define    : MEMORY_IMPLEMENT_GLOBAL_NEW
        Value     : 1
        Depends on: nothing


TWEAK_MEMORY_INLINED_GLOBAL_NEW			mortenro

	This tweak controls whether an inlined declaration of the
	global operator new is needed or not.  The default is not to
	declare an inlined version of global operator new.

	See the module documentation for details on this tweak
	and how it can be used (An inlined global operator new is
	typically needed to avoid interfering with the platforms
	native version).

	Valid values for MEMORY_INLINED_GLOBAL_NEW are 0 and 1.

        Category  : workaround
        Define    : MEMORY_INLINED_GLOBAL_NEW
        Value     : 0
        Depends on: nothing


TWEAK_MEMORY_REGULAR_NEW_ELEAVE			mortenro

	This decides if an 'operator new (ELeave)' is to be
	declared.  This is the default.

	Valid values for MEMORY_REGULAR_NEW_ELEAVE are 0 and 1.

        Category  : workaround
        Define    : MEMORY_REGULAR_NEW_ELEAVE
        Value     : 1
        Depends on: nothing


TWEAK_MEMORY_IMPLEMENT_NEW_ELEAVE		mortenro

	This decides if an 'operator new (ELeave)' is to be
	implemented by the memory module or not.  The default is
	to implement it.

	Valid values for MEMORY_IMPLEMENT_NEW_ELEAVE are 0 and 1.

        Category  : workaround
        Define    : MEMORY_IMPLEMENT_NEW_ELEAVE
        Value     : 1
        Depends on: nothing


TWEAK_MEMORY_INLINED_NEW_ELEAVE			mortenro

	This decides if an inlined 'operator new (ELeave)' is to be
	declared.  This is not the default.

	Valid values for MEMORY_INLINED_NEW_ELEAVE are 0 and 1.

        Category  : workaround
        Define    : MEMORY_INLINED_NEW_ELEAVE
        Value     : 0
        Depends on: nothing


TWEAK_MEMORY_REGULAR_ARRAY_ELEAVE		mortenro

	The default value of this tweak causes 'operator new (ELeave) []'
	to be declared.  If this should not be done for your platform,
	or you want the inlined version instead, apply this tweak
	and disable the declaration.  See TWEAK_MEMORY_IMPLEMENT_ARRAY_ELEAVE
	and TWEAK_MEMORY_INLINED_ARRAY_ELEAVE.

	Valid values for MEMORY_REGULAR_ARRAY_ELEAVE are 0 and 1.

        Category  : workaround
        Define    : MEMORY_REGULAR_ARRAY_ELEAVE
        Value     : 1
        Depends on: nothing


TWEAK_MEMORY_IMPLEMENT_ARRAY_ELEAVE		mortenro

	The default value of this tweak causes 'operator new (ELeave) []'
	to be implemented by the memory module.  If this should not be
	done for your platform, apply this tweak and disable the
	implementation.

	Valid values for MEMORY_IMPLEMENT_ARRAY_ELEAVE are 0 and 1.

        Category  : workaround
        Define    : MEMORY_IMPLEMENT_ARRAY_ELEAVE
        Value     : 1
        Depends on: nothing


TWEAK_MEMORY_INLINED_ARRAY_ELEAVE		mortenro

	The default value of this tweak is to not declare inlined
	versions of those provided through TWEAK_MEMORY_REGULAR_ARRAY_ELEAVE.

	Valid values for MEMORY_REGULAR_ARRAY_ELEAVE are 0 and 1.

        Category  : workaround
        Define    : MEMORY_INLINED_ARRAY_ELEAVE
        Value     : 0
        Depends on: nothing


TWEAK_MEMORY_REGULAR_GLOBAL_DELETE		mortenro

	The default value for this tweak is to declare a
	version of the global operator 'delete' and 'delete[]'.

	Valid values for MEMORY_REGULAR_GLOBAL_DELETE are 0 and 1.

        Category  : workaround
        Define    : MEMORY_REGULAR_GLOBAL_DELETE
        Value     : 1
        Depends on: nothing


TWEAK_MEMORY_IMPLEMENT_GLOBAL_DELETE		mortenro

	The default value for this tweak is to implement a
	version of the global operator 'delete' and 'delete[]'.

	Valid values for MEMORY_IMPLEMENT_GLOBAL_DELETE are 0 and 1.

        Category  : workaround
        Define    : MEMORY_IMPLEMENT_GLOBAL_DELETE
        Value     : 1
        Depends on: nothing


TWEAK_MEMORY_INLINED_GLOBAL_DELETE		mortenro

	The default value for this tweak is to not declare
	inlined operators 'delete' and 'delete[]'.

	Valid values for MEMORY_INLINED_GLOBAL_DELETE are 0 and 1.

        Category  : workaround
        Define    : MEMORY_INLINED_GLOBAL_DELETE
        Value     : 0
        Depends on: nothing


TWEAK_MEMORY_INLINED_PLACEMENT_NEW		mortenro

	This tweak will controll whether 'operator new(size_t size, void*)'
	is declared (inline) by Opera or not.  Some platforms may need
	this.

	Valid values for MEMORY_PROVIDE_PLACEMENT_NEW are 0 and 1.

	Category  : workaround
	Define    : MEMORY_INLINED_PLACEMENT_NEW
	Value     : 1
	Depends on: nothing


TWEAK_MEMORY_PLATFORM_HAS_ELEAVE		mortenro

	This tweak should only be changed on EPOC or EPOC-like OS'es
	where the 'enum TLeave' is declared with one value of 'ELeave'.
	This 'ELeave' is used to identify "leaving operator new".

	Valid values for MEMORY_PLATFORM_HAS_ELEAVE are 0 and 1.

        Category  : workaround
        Define    : MEMORY_PLATFORM_HAS_ELEAVE
        Value     : 0
        Depends on: nothing


TWEAK_MEMORY_USE_GLOBAL_VARIABLES		mortenro

	Core coding standards mandates that no global variables should	
	be used.  However, in some cases, using global variables could
	be ok, and indeed desirable.  This tweak, if applied, allows
	the memory module to use true global varaibles on platforms
	that supports this.

	The arguments for using global variables may be: Performance
	or special requirements, or ease of use.

	If you don't want to use global variables, the platform code
	must define the macro g_opera_memory_state somewhere early,
	like in the platforms' feature.h file.  This macro must expand
	into something that yields a (void*) to a memory area that is
	at least OpMemoryStateSize() bytes in size.  This memory must
	be initialized to all zeroes before any Opera provided
	functions are called.  The memory area must also have proper
	alignment.

	Valid values for MEMORY_USE_GLOBAL_VARIABLES are 0 and 1.

        Category  : workaround
        Define    : MEMORY_USE_GLOBAL_VARIABLES
        Value     : 0
        Depends on: nothing


TWEAK_MEMORY_MAX_POOLS				mortenro

	This tweak will change the maximum number of pools that may be
	used.  This maximum will actually cause allocation of control
	data for all pools, even when not used, so this number should
	not be too large.

	The unit for this tweak is MEMORY_BLOCKSIZE, e.g. typically 4K
	units.  The default of 6144 results in about 100K of overhead,
	for a total of max 24MB of pooled data.

	FIXME: This static array should go, and be replaced with two
	level array indexing into a number of 4K blocks.

        Category  : memory
        Define    : MEMORY_MAX_POOLS
        Value     : 6144
        Depends on: nothing


TWEAK_MEMORY_ALIGNMENT				mortenro

	This tweak holds the memory alignment requirements for general
	objects.  It may have to be 8 to hold a 'double' on its native
	boundary, but 4 may be sufficient for many systems, especially
	x86 based ones.

	Note: The macro 'DEFAULT_MEMORY_ALIGNMENT' must *not* be used
	from anyware in the source code!  It is just used to provide a
	default.  Use 'MEMORY_ALIGNMENT' in the source.

	If any of SYSTEM_RISC_ALIGNMENT or SYSTEM_64BIT is set to YES,
	the default MEMORY_ALIGNMENT will be 8.  If none of these are
	set, a value of 4 will be the default.

	If the structure: 'struct test { double a; int b; };' has a
	sizeof(test) equal to 12, you can use an alignment of 4, but
	at a possible performance penalty.  If the structure has a
	size of 16, you *probably* want an alignment of 8, but the
	CPU may actually support 4, but again, at a possible
	performance penalty.

        Category  : workaround
        Define    : MEMORY_ALIGNMENT
        Value     : DEFAULT_MEMORY_ALIGNMENT
        Depends on: nothing


TWEAK_MEMORY_ELO_HIGH_THRESHOLD				mortenro

	This tweak is used for the ELOPOOL allocator.  The ELOPOOL
	allocator places allocations of the same life expectancy,
	but (maybe) differing sizes, right next to each other.
	All allocations will be attempted satisfied from two pools,
	and if none of them succeeds, and the allocation request is
	for more bytes than this setting specifies, the allocation
	will be attempted on the general heap instead.

	The argument for doing this is to try filling the pools
	as much as possible before moving on to the next one (when
	none of the two pools can satisfy the request, the most
	filled one is retired, and a fresh pool takes its place,
	provided the request is less than MEMORY_ELO_HIGH_THRESHOLD).

	This setting should probably not be more than about 5-10% of
	the MEMORY_BLOCKSIZE.

        Category  : setting
        Define    : MEMORY_ELO_HIGH_THRESHOLD
        Value     : 384
        Depends on: nothing


TWEAK_MEMORY_BLOCKSIZE_BITS				mortenro

	This tweak controls the value of the MEMORY_BLOCKSIZE macro,
	which holds the global block size in bytes used by Opera for
	all "pooled" allocations.  The expression
	(1<<MEMORY_BLOCKSIZE_BITS) is assigned to MEMORY_BLOCKSIZE.

	A value of 12 gives you a memory block size of 4096 bytes.

	NOTE: Not all platforms may support all block sizes, so you
	may not change this freely.  Block sizes of 4096, 8192 and 16384
        (MEMORY_BLOCKSIZE_BITS values of 12, 13 and 14) are the most
	probable useful sizes.

        Category  : setting
        Define    : MEMORY_BLOCKSIZE_BITS
        Value     : 12
        Depends on: nothing

TWEAK_MEMORY_EMBED_LEA_MALLOC_STATE			jb

	This decides if the lea malloc state is to be embedded in the
	memory state or not. The default is to embed it.

	One case when it is needed to split the two apart is when
	building a stand alone library containing only the
	allocator. It is important that such a library is self
	contained and doesn't depend on other parts of Opera.

	Valid values for MEMORY_EMBED_LEA_MALLOC_STATE are 0 and 1.

	Category  : workaround
	Define    : MEMORY_EMBED_LEA_MALLOC_STATE
	Value     : 1
	Disabled for: desktop, smartphone, tv, minimal, mini
	Depends on: nothing

TWEAK_MEMORY_MMAP_DEFAULT_MAX_UNUSED			mortenro

	This configuration parameter is the default number of memory
	pages that can be allowed to stay unused in an OpMmapSegment
	instance.  An unused memory page is a block of memory that is
	present in the memory map, made available through the
	OpMemory::VirtualAlloc() method, but not currently used by
	anyone.

	When 'munmap()' has released allocations from an
	OpMmapSegment, memory is released back to the system through
	calls to OpMemory::VirtualFree() to keep the number of unused
	pages low according to this setting. Bigger allocations are
	released first.

	Keeping some memory around will allow re-using it later, which
	avoids a Free/Alloc cycle through the OS, which may be
	expensive.  The downside is more memory-usage than what is
	needed.

	This tweak is in memory pages, which is probably sub-optimal.
	The memory page-size may vary from one platform to the next,
	but 4K is a typical memory page size. The default values below
	assumes a 4K memory page size.

	This tweak can be modified on run-time by calling the
	OpMmapSegment::SetUnusedThreshold(unsigned int pages) method.

	Category: setting
	Define: MEMORY_MMAP_DEFAULT_MAX_UNUSED
	Value: 300
	Value for desktop: 1000
	Value for smartphone: 200
	Value for tv: 200
	Value for minimal: 0
	Disabled for: mini
	Depends on: API_MEM_OPERA_MMAP
	Depends on: API_MEM_OPERA_MMAP_SEGMENT

TWEAK_MEMORY_OPERA_MMAP_SIZE				mortenro

	This configuration parameter is the default number of
	bytes to be allocated for the 'mmap-emulation' layer.
	This configuration is only used if the 'op_mmap()'
	API is used (API_MEM_OPERA_MMAP).

	Category: setting
	Define: MEMORY_OPERA_MMAP_SIZE
	Value: (32*1024*1024)
	Value for desktop: (75*1024*1024)
	Value for smartphone: (40*1024*1024)
	Value for tv: (32*1024*1024)
	Value for minimal: (20*1024*1024)
	Depends on: API_MEM_OPERA_MMAP

TWEAK_MEMORY_OPERA_SBRK_SIZE				mortenro

	This configuration parameter is the default number of
	bytes to be allocated for the memory heap used by
	Opera. This configuration is only used if the 'op_sbrk()'
	API is used (API_MEM_OPERA_SBRK).

	Category: setting
	Define: MEMORY_OPERA_SBRK_SIZE
	Value: (32*1024*1024)
	Value for desktop: (75*1024*1024)
	Value for smartphone: (40*1024*1024)
	Value for tv: (32*1024*1024)
	Value for minimal: (20*1024*1024)
	Depends on: API_MEM_OPERA_SBRK

TWEAK_MEMORY_SMALL_EXEC_SEGMENTS			mortenro

	This configuration setting controls whether the platform
	implementation can handle the creation of small executable
	memory segments efficiently or not.

	Some platforms may provide a system for allocating executable
	memory using something like a general heap allocator, and can
	thus handle small allocations efficiently. If this is the
	case, this tweak can be applied.

	When this tweak is applied, all requests for dynamic memory
	will be sent directly to the porting interface method
	OpMemory::CreateExecSegment() where the requested size can be
	quite small, e.g. 10 bytes. It is expected that the platform
	implementation of CreateExecSegment() in this case is able to
	make an efficient allocation of those 10 bytes (i.e. not
	allocate a full 4K memory page for it).

	If this tweak is not applied, the memory module will do
	allocation administration inside bigger executable memory
	segments, and only large segments will be requested from the
	OpMemory::CreateExecSegment() method. Large segments being
	e.g. 16K or larger.

	Category: setting
	Define: MEMORY_SMALL_EXEC_SEGMENTS
	Enabled for: none
	Disabled for: desktop, smartphone, tv, minimal, mini
	Depends on: API_PI_OPMEMORY_EXECUTABLE_SEGMENT

TWEAK_MEMORY_EXEC_SEGMENT_SIZE				mortenro

	This configuration setting determines the minimum amount of
	memory that Opera will request through the porting interface
	method OpMemory::CreateExecSegment() when executable memory
	needs to be allocated.

	This setting is not used when TWEAK_MEMORY_SMALL_EXEC_SEGMENTS
	is applied. When this tweak is applied, the porting interface
	will be used for allocating all sizes, not only larger blocks.

	The OpExecMemoryManager class in the memory module will
	administrate the bigger segments requested, and chop them up
	into smaller allocations when requested to by e.g. the
	Ecmascript engine.

	MEMORY_EXEC_BLOCK_SIZE specifies the minimum size in bytes,
	and should probably be a multiple of the memory page size
	(dependant on the details of how the platform allocates its
	executable memory). The OpExecMemoryManager class can ask the
	porting interface for more bytes than this minimum, but never
	less.

	Category: setting
	Define: MEMORY_EXEC_SEGMENT_SIZE
	Value: 16384
	Value for desktop: 32768
	Value for smartphone: 32768
	Value for mini: 32768
	Value for tv: 32768
	Disabled for: minimal
	Depends on: API_MEM_EXECUTABLE_MEMORY_MANAGER

TWEAK_MEMORY_PLATFORM_POOLING				yurip

	Use platform versions of OpPooledAlloc* and OpPooledFree.

	Category    : workaround
	Define      : MEMORY_PLATFORM_POOLING
	Disabled for: desktop, tv, smartphone, minimal
	Depends on  : FEATURE_USE_POOLING_MALLOC

#######################################################################
#                                                                     #
#       Section 2                                                     #
#                                                                     #
#       TWEAKS FOR CONFIGURING MEMORY DEBUGGING FUNCTIONALITY         #
#                                                                     #
#       All tweaks below apply only to memory debugging builds,       #
#       and are simply ignored for non-memory debugging builds.       #
#                                                                     #
#       Please be adviced that memory debugging does imply            #
#       increased memory usage.  The level of additional memory       #
#       usage can be configured through the tweaks below.             #
#                                                                     #
#######################################################################

TWEAK_MEMORY_FRONT_GUARD_SIZE				mortenro

	The number of bytes used to guard memory right *before* the
	allocated data.  Overwrites before the allocation is probably
	not as common as overwrites after the allocated data, so this
	setting is better suited for tweaking to recuce memory than
	the rear guard size.

	NOTE: This setting must be a multiple of MEMORY_ALIGNMENT.

	Setting this tweak to 0 will disable the front guard check
	and save memory.

	Category            : setting
	Define              : MEMORY_FRONT_GUARD_SIZE
	Value               : 16
	Value for desktop   : 32
	Value for smartphone: 8
	Value for tv        : 8
	Value for minimal   : 0
	Value for mini      : 0
	Depends on          : nothing

TWEAK_MEMORY_REAR_GUARD_SIZE				mortenro

	The number of bytes used to guard memory right *after* the
	allocated data.  This is the minimum value: If the size of an
	allocation is not a multiple of 4, extra guard bytes will be
	added so the memory guard stretches from the first byte past
	the allocation until the size of the guard is at least as
	large as specified here, and ends on a multiple of 4 address.

	NOTE: This setting must be a multiple of 4.

	Category            : setting
	Define              : MEMORY_REAR_GUARD_SIZE
	Value               : 24
	Value for desktop   : 48
	Value for smartphone: 16
	Value for tv        : 16
	Value for minimal   : 0
	Value for mini      : 0
	Depends on          : nothing

TWEAK_MEMORY_EXTERNAL_GUARD_SIZE			mortenro

	The number of bytes used to guard the meta information
	associated with each allocation.  These guard bytes may catch
	corruptions caused by metadata corruption of malloc() itself.
	This guard is probably not very important and can be disabled
	a lot of the time.

	The layout of an allocation is:
	<external-guard> <allocation-info> <front-guard> <data> <rear-guard>

	NOTE: This setting must be a multiple of MEMORY_ALIGNMENT.

	Setting this tweak to 0 will disable the external guard check
	and save memory.

	Category            : setting
	Define              : MEMORY_EXTERNAL_GUARD_SIZE
	Value               : 8
	Value for desktop   : 16
	Value for smartphone: 0
	Value for tv        : 0
	Value for minimal   : 0
	Value for mini      : 0
	Depends on          : nothing

TWEAK_MEMORY_KEEP_ALLOCSITE				mortenro

	Specify if the call-site info from __FILE__ and __LINE__ macros
	should be stored as debugging information for each allocation.

	Category  : setting
	Define    : MEMORY_KEEP_ALLOCSITE
	Value     : 1
	Depends on: nothing

TWEAK_MEMORY_KEEP_REALLOCSITE				mortenro

	Specify if the call-site info from __FILE__ and __LINE__ macros
	should be stored as debugging information for the last re-allocation.

	Category  : setting
	Define    : MEMORY_KEEP_REALLOCSITE
	Value     : 1
	Depends on: nothing


TWEAK_MEMORY_KEEP_FREESITE				mortenro

	Specify if the call-site info from __FILE__ and __LINE__ macros
	should be stored as debugging information for each free operation.

	Category  : setting
	Define    : MEMORY_KEEP_FREESITE
	Value     : 1
	Depends on: nothing

TWEAK_MEMORY_KEEP_ALLOCSTACK				mortenro

	The number of return addresses from the call-stack to
	keep for debugging purposes when performing allocations.

	Set this value to 0 to disable the recording of the
	call-stack alltogether.  If the OPGETCALLSTACK macro is
	not defined, this will also cause no call-stack to be
	captured.

	Category  	    : memory
	Define    	    : MEMORY_KEEP_ALLOCSTACK
	Value     	    : 8
	Value for desktop   : 10
	Value for smartphone: 6
	Value for tv	    : 6
	Value for minimal   : 0
        Depends on	    : nothing

TWEAK_MEMORY_KEEP_REALLOCSTACK				mortenro

	The number of return addresses from the call-stack to
	keep for debugging purposes when performing re-allocations.

	Set this value to 0 to disable the recording of the
	call-stack alltogether.  If the OPGETCALLSTACK macro is
	not defined, this will also cause no call-stack to be
	captured.

	Category  	    : memory
	Define    	    : MEMORY_KEEP_REALLOCSTACK
	Value     	    : 4
	Value for desktop   : 10
	Value for smartphone: 1
	Value for tv	    : 1
	Value for minimal   : 0
        Depends on	    : nothing

TWEAK_MEMORY_KEEP_FREESTACK				mortenro

	The number of return addresses from the call-stack to
	keep for debugging purposes when performing free operations.

	Set this value to 0 to disable the recording of the
	call-stack alltogether.  If the OPGETCALLSTACK macro is
	not defined, this will also cause no call-stack to be
	captured.

	Category	    : setting
	Define 		    : MEMORY_KEEP_FREESTACK
	Value   	    : 4
	Value for desktop   : 10
	Value for smartphone: 1
	Value for tv	    : 1
	Value for minimal   : 0
        Depends on	    : nothing

TWEAK_MEMORY_DEAD_OBJECT_QUEUE			mortenro

	This tweakable setting indicates for how long a deallocated
	object should be kept around to verify that it has not been
	touched in any way (which it should not be).  The longer you
	keep an object around, the larger is the likelihood that a
	memory trample is accurately detected (assuming there is one),
	but memory usage also grows, which means this tweak should be
	adjusted for small memory systems.  The default is suitable
	for desktop systems.

	The unit is in number of allocations.  This means that the
	default of 25000 makes this many objects "linger" in a queue
	on its way to recycling.  The size of the objects are not
	taken into consideration

	Setting this tweak to 0 and TWEAK_MEMORY_DEAD_OBJECT_RECYCLE
	to 1 will cause released memory to be available for reuse right
	away.  This is not really desirable for memory debugging builds,
	unless you know that late writes is not a problem.

	Category  : setting
	Define    : MEMORY_DEAD_OBJECT_QUEUE
	Value     : 25000
	Depends on: nothing

TWEAK_MEMORY_DEAD_OBJECT_RECYCLE		mortenro

	This tweak indicates how many objects should be recycled once
	the limit of MEMORY_DEAD_OBJECT_QUEUE dead objects has been
	passed.  By releasing several objects at once, it is hoped that
	better allocation performance is achieved, but this may vary from
	one allocator to the next.

	If it is set to 0, no released objects will ever be reused.
	Setting this to a small value may cause	large overheads in the
	allocator.

	Category  : setting
	Define    : MEMORY_DEAD_OBJECT_RECYCLE
	Value     : (MEMORY_DEAD_OBJECT_QUEUE/5)
	Depends on: nothing

TWEAK_MEMORY_DEAD_BYTES_QUEUE			mortenro

	This setting is similar to TWEAK_MEMORY_DEAD_OBJECT_QUEUE,
	only it deals with the maximum number of bytes taken up by the
	allocations.  Keeping TWEAK_MEMORY_DEAD_OBJECT_QUEUE objects
	around can eat too much memory; e.g. 25000 allocations of
	size 85K each will consume 2G of RAM.  This can happen if
	large chunks of memory gets allocated/deallocated rapidly.

	Category  : setting
	Define    : MEMORY_DEAD_BYTES_QUEUE
	Value     : 50000000
	Depends on: nothing

TWEAK_MEMORY_DEAD_BYTES_RECYCLE			mortenro

	This setting is similar to TWEAK_MEMORY_DEAD_OBJECT_RECYCLE,
	onlyit deals with the number of bytes to free once over the
	limit set by TWEAK_MEMORY_DEAD_BYTES_QUEUE.  The default of
	1/5th of the total max should be fine for most uses.

	Category  : setting
	Define    : MEMORY_DEAD_BYTES_RECYCLE
	Value     : (MEMORY_DEAD_BYTES_QUEUE/5)
	Depends on: nothing


TWEAK_MEMORY_LOG_ALLOCATIONS			mortenro

	Applying this tweak will cause all allocations to log
	its operation (or OOM) to the debugging console, which is
	stdout on Linux/UNIX.

	Storing this log is useful for debugging memory usage and
	related problems (why is so much allocated, what is the
	fragmentation level etc.)

	Tools can be used to analyze the log file offline and
	in-depth later, plot graphs and compare runs etc.

	This functionality is currently not very useful on Windows
	as the system output facility may drop information.

	Look for tools in the 'modules/memory/utils' directory, and
	collect the log by redirecting stdout to file, e.g.:

		$ lingogi > memory1.log

	Alternatively, compress the log on the fly for long-running
	sessions:

		$ lingogi | gzip -c -f > memory1.log.gz

	Category  : setting
	Define    : MEMORY_LOG_ALLOCATIONS
	Depends on: FEATURE_MEMORY_DEBUGGING

TWEAK_MEMORY_CALLSTACK_DATABASE				mortenro

	Enable this tweak if you want to have a call-stack database
	keep track of all call-stacks seen.  Much more and better
	information can be recorded for memory debugging purposes
	when this tweak is enabled, but this may consume a lot of
	memory, and should be used on devices with caution.

	Category    : setting
	Define      : MEMORY_CALLSTACK_DATABASE
	Depends on  : FEATURE_MEMORY_DEBUGGING
	Enabled for : desktop
	Disabled for: smartphone, tv, minimal

TWEAK_MEMORY_USE_CODELOC				mortenro

	When this tweak is enabled, the memory module will
	import and use the OpCodeLocation/OpCodeLocationManager
	classes from the memtools module and use them to
	provide better debugging information.

	This operation may be costly, or it may not be supported
	properly on a given platform.

	Category    : setting
	Define      : MEMORY_USE_CODELOC
	Depends on  : FEATURE_MEMORY_DEBUGGING
	Enabled for : desktop
	Disabled for: smartphone, tv, minimal

TWEAK_MEMORY_MAX_ERROR_COUNT			mortenro

	Limit the default number of errors reported by the memory
	module. E.g. when a lot of leaks happen, don't flood the
	console with such reports as it clutters it up, and may even
	terminate the receiving IDE.

	A value of 0 will mean there is no limit, and all
	errors are printed.

	Memory errors that are of a critical type, like memory
	corruption errors, will not be limited by this setting, so
	they will always be reported.  The reason for this is to
	increase the chance of bringing such problems to the attention
	of the developer, even when many other errors are reported.

	This setting can be runtime overridden by calling the action
	API in memory/src/memory_debug.h with action
	MEMORY_ACTION_SET_MEMORY_MAX_ERROR_COUNT.

	This tweak is ignored when memory debugging is disabled.

	Category            : setting
	Define              : MEMORY_MAX_ERROR_COUNT
	Value               : 100
	Value for desktop   : 100
	Value for smartphone: 40
	Value for tv        : 20
	Value for minimal   : 20
	Disabled for        : mini
	Depends on          : nothing

TWEAK_MEMORY_ASSERT_ON_ERROR				mortenro

	When this tweak is enabled, the memory module will trigger an
	assertion failure every time a memory event occurs that represents
	an error condition.

	Category    : setting
	Define      : MEMORY_ASSERT_ON_ERROR
	Depends on  : FEATURE_MEMORY_DEBUGGING
	Enabled for : none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_MEMORY_ELECTRIC_FENCE    		   	      	mortenro

	Enable enhanced memory debugging.

	When this tweak is enabled, the virtual memory porting
	interface in modules/pi/system/OpMemory.h will be used to
	allow some or all allocations to be made using this API. This
	allows making memory pages inaccessible on freeing
	allocations, so that subsequent illegal accesses will cause a
	page fault and program termination/crash at the offending
	instruction.

	This will help track down heap corruptions caused by e.g.
	dangling pointers. This feature will require substantial
	ammounts of memory.

	Category    : setting
	Define      : MEMORY_ELECTRIC_FENCE
	Depends on  : FEATURE_MEMORY_DEBUGGING
	Enabled for : none
	Disabled for: desktop, smartphone, tv, minimal

TWEAK_MEMORY_ASSERT_ON_OOM                               danielb

	Assert when the allocator returns 0. If TWEAK_MEMORY_ASSERT_ON_ERROR
	is enabled, each OOM results in an assertion fail. This is used
	for detecting OOM under circumstances where OOM is not desired, such
	as during SPARTAN testing (i.e. it runs using command line parameter
	-opassert-oom to make each OOM an assertion fail and also -opassert-abort
	to make each assertion fail abort execution).

	Category    : setting
	Define      : MEMORY_ASSERT_ON_OOM
	Enabled for : none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_MEMORY_INVALID_POINTER_VALUE			deprecated

	This tweak is no longer available, as the functionality did
	not live up to expectations.  There is no replacement,
	except writing correct code in the first place.

TWEAK_MEMORY_LOG_USAGE_PER_ALLOCATION_SITE			terjepe

	Log how much memory is allocated at each allocation site.

	Methods defined are:

	OpMemDebug_PrintLiveAllocations(BOOL full) where
	'full' means print full information for each allocation. For
	monitoring memory usage and possibly revealing undesirable memory usage.

	OpMemDebug_GetTotalMemUsed() for returning total memory used.

	Category  : setting
	Define    : MEMORY_LOG_USAGE_PER_ALLOCATION_SITE
	Depends on: ENABLE_MEMORY_DEBUGGING
	Enabled for : none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_MEMORY_REPORT_USAGE_AFTER_LOADING_FINISHED			terjepe

	Output a log of all currently allocated memory after each loading finished
	event. This is useful to get a good picture of what is using memory, for
	instance during url playing. Misbehaving memory caches can be revealed.

	Calls the methods OpMemDebug_PrintLiveAllocations(false) and
	OpMemDebug_GetTotalMemUsed() when finished loading.

	Category  : setting
	Define    : MEMORY_REPORT_USAGE_AFTER_LOADING_FINISHED
	Depends on: MEMORY_LOG_USAGE_PER_ALLOCATION_SITE
	Enabled for : none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_MEMORY_REPORT_ALLOCSITE_USAGE_AT_EXIT				terjepe

	Output a log of all currently allocated memory per allocation site after
	core has shut down. The live memory allocations at this point is likely
	to be memory leaks or global data that isn't properly deleted on shutdown.

	Calls the method OpMemDebug_PrintLiveAllocations(true) at exit.

	Category  : setting
	Define    : MEMORY_REPORT_ALLOCSITE_USAGE_AT_EXIT
	Depends on: MEMORY_LOG_USAGE_PER_ALLOCATION_SITE
	Enabled for : none
	Disabled for: desktop, smartphone, tv, minimal, mini

TWEAK_MEMORY_FAIL_ALLOCATION_ONCE				terjepe

	Fail allocations once to check if OOM handling is safe (or exists at all).
	Using it together with an url player has proven very useful.
	dbg_printf() is needed (import API_DBG_PRINTF if unavailable).

	Category  : setting
	Define    : MEMORY_FAIL_ALLOCATION_ONCE
	Depends on: nothing
	Enabled for : none
	Disabled for: desktop, smartphone, tv, minimal, mini
