/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2004-2006 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Yngve N. Pettersen
*/

group "rootstore load simple";
require defined _SSL_SUPPORT_;
require undefined _EXTERNAL_SSL_SUPPORT_;

language c++;

include "core/pch.h";

include "modules/dochand/win.h";
include "modules/dochand/docman.h";
include "modules/doc/frm_doc.h";

include "modules/url/url_man.h";
include "modules/libssl/sslv3.h";
include "modules/libssl/ssl_api.h";
include "modules/libssl/sslopt.h";
include "modules/network_selftest/urldoctestman.h";
include "modules/util/opfile/opfile.h";
include "modules/network_selftest/sslwincom.h";
include "modules/network_selftest/ssl_waitupdate.h";

global {

#ifdef SSL_CHECK_EXT_VALIDATION_POLICY
#define ROOT_EV_LEVEL SECURITY_STATE_FULL_EXTENDED
#else
#define ROOT_EV_LEVEL SECURITY_STATE_FULL
#endif

#ifdef LIBSSL_AUTO_UPDATE
	SSL_WaitForAutoUpdate update_waiter;
#endif

	class SSL_EV_Tester : public URL_DocSimpleTester
	{
	private:
		int security_level_status;
		
	public:
		SSL_EV_Tester(int EV_level) : security_level_status(EV_level){}
		
		virtual BOOL Verify_function(URL_DocSelfTest_Event event, Str::LocaleString status_code=Str::NOT_A_STRING)
		{
			switch(event)
			{
			case URLDocST_Event_Data_Received:
				{
					URLStatus status = (URLStatus) url.GetAttribute(URL::KLoadStatus, URL::KFollowRedirect);
					
					if(status == URL_LOADED)
					{
						int got_level = url.GetAttribute(URL::KSecurityStatus);
						if(got_level < security_level_status)
						{
							ReportFailure("Wrong Security status Expected %d, got %d", security_level_status, got_level);
							return FALSE;
						}
					}
					else if(status != URL_LOADING)
					{
						ReportFailure("Some kind of loading failure %d.", status);
						return FALSE;
					}
				}
				return TRUE;
			}
			return URL_DocSimpleTester::Verify_function(event, status_code);
		}	
	
	};

	URL_DocSelfTest_Manager *libssl_tests = NULL;

	class SimpleClientAuthListener 
		: public BasicSSLWindowListener
	{
	public:
		SimpleClientAuthListener (URL_DocSelfTest_Manager *manager, OpSSLListener *fallback)
			: BasicSSLWindowListener(manager, fallback) {}

		virtual ~SimpleClientAuthListener (){}
		
		virtual void OnCertificateBrowsingNeeded(OpWindowCommander* wic, SSLCertificateContext* context, SSLCertificateReason reason, SSLCertificateOption options)
		{
			if(context)
			{
				context->OnCertificateBrowsingDone(TRUE, SSL_CERT_OPTION_ACCEPT);
				return;
			}
		
			URL empty;
			ReportFailure(empty,"Certificate dialog called when it should not have been");
		}

		virtual void OnSecurityPasswordNeeded(OpWindowCommander* wic, SSLSecurityPasswordCallback* callback)
		{
			if(callback)
				callback->OnSecurityPasswordDone(FALSE, NULL, NULL);
				
			URL empty;
			ReportFailure(empty,"Password dialog called when it should not have been");
		}

	};
	SimpleClientAuthListener *listener = NULL;
	WindowCommander *wc=NULL;
}

table url_list (const char *, int) 
{
  {"https://bugs.opera.com/static/100x105.gif", SECURITY_STATE_FULL},
  {"https://www.dnbnor.no/portalfront/nor/images/gfx/logo.gif", ROOT_EV_LEVEL},
  {"https://online.citibank.com/JRS/cm/img/top_nav/logo.gif", SECURITY_STATE_FULL},
  {"https://www.verisign.com/stellent/groups/public/documents/image/www_vrsn_logo.gif", ROOT_EV_LEVEL},
  {"https://www.entrust.net/images/entrust-ssl-certificates.gif",  ROOT_EV_LEVEL},
  {"https://comodocertificationauthority-ev.comodoca.com/",  ROOT_EV_LEVEL},
  {"https://ev.globalsign.com/",  ROOT_EV_LEVEL},
  {"https://www.iwanttss.com/Content/Images/tss_logo.png", SECURITY_STATE_FULL},
  //{"https://www.iwanttss.com/images/header_logo.jpg", SECURITY_STATE_FULL}
  {"https://www.godaddy.com/", ROOT_EV_LEVEL}
  {"https://www.starfieldtech.com/images/starfield_logo.gif", ROOT_EV_LEVEL}
  {"https://www.trustwave.com/images/corpLogo.gif/", ROOT_EV_LEVEL}
  {"https://www.digicert.com/images/d3/digicert-logo.gif", ROOT_EV_LEVEL}
  {"https://pki-info.aol.com/", SECURITY_STATE_FULL}
  
}

html { "<html><body>Empty document, SSL testing going on. A displayed certificate dialog is a failure.</body></html>" };

setup 
{
	urlManager->RemoveSensitiveData();
	if(g_ssl_api->CheckSecurityManager())
		g_securityManager->Init(SSL_LOAD_ALL_STORES);

	libssl_tests = OP_NEW(URL_DocSelfTest_Manager, ());
}

exit
{
	OP_DELETE(libssl_tests);
	libssl_tests = NULL;
	
	if(wc)
	    wc->SetSSLListener(listener->GetFallback());
	
	OP_DELETE(listener);
	listener = NULL;
}

test("Initialized")
{
	verify(libssl_tests != NULL);

    wc = state.doc->GetWindow()->GetWindowCommander();
    verify(wc != NULL);
    listener = OP_NEW(SimpleClientAuthListener, (libssl_tests, wc->GetSSLListener()));
    verify(listener != NULL);
    wc->SetSSLListener(listener);
}

test("Check for updates")
	require defined LIBSSL_AUTO_UPDATE;
	require success "Initialized";
	async;
{
	update_waiter.Activate();
}

subtest AddEVTest(URL_DocSelfTest_Batch *batch, const OpStringC8 &url, URL &ref_url, int security_level)
{
	verify(batch != NULL);

	OpAutoPtr<SSL_EV_Tester> test(OP_NEW(SSL_EV_Tester, (security_level)));
	verify(test.get() != NULL);

	OpStringC8 empty("nop");
	verify(OpStatus::IsSuccess(test->Construct(url, ref_url, empty)));

	verify(batch->AddTestCase(test.release()));
}

subtest AddBatch(URL_DocSelfTest_Batch *batch)
{
	verify(batch != NULL);
	verify(libssl_tests->AddBatch(batch));
}

subtest StartTestSet()
{
	verify(libssl_tests->SetLastBatch());
}

subtest Setup_SingleEVTest(const OpStringC8 &filename, URL &ref_url, int sec_level)
{
	OpAutoPtr<URL_DocSelfTest_Batch> batch(OP_NEW(URL_DocSelfTest_Batch, ()));

	verify(batch.get() != NULL);
	batch->Construct(state.doc->GetMessageHandler());

	verify(AddEVTest(batch.get(), filename, ref_url, sec_level));

	verify(!batch->Empty());

	verify(AddBatch(batch.release()));
}

test("Load SSL URLs")
	require success "Initialized";
	async;
{
	URL ref_url;
	iterate(url, sec_level) from url_list
	{
		if (!Setup_SingleEVTest(url, ref_url, sec_level))
			ST_failed("Could not setup test");
	}
	if (!StartTestSet())
		ST_failed("Could not start test set");
}



