/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2010-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

group "gadgets.unite";
require GADGET_SUPPORT;
require WEBSERVER_SUPPORT;
require init;

include "modules/gadgets/OpGadgetManager.h";

global
{
	OpGadget *selftest_unite = NULL;
}

exit
{
	if (selftest_unite)
	{
		g_gadget_manager->DestroyGadget(selftest_unite);
	}
}

table alien_pass
{
    { "Basic Unite widget",         "testfiles/unite/selftest.ua" },
}

table alien_fail
{
    { "Basic Unite widget as .wgt", "testfiles/unite/unite.wgt" },
    { "Standard widget",            "testfiles/widgets/selftest.wgt" },
    { "Widget with opera:speeddial","testfiles/widgets/speeddial.wgt" },
}

table alien_reqext_fail
{
	{ "No file extension",          "testfiles/unite/noextension" },
}

// Mention all the contained files such that
// they get listed in the selftest_data file.
table dummy1(const char *) filelist "testfiles/unite/selftest.ua" recursively;
table dummy2(const char *) filelist "testfiles/unite/unite.wgt" recursively;
table dummy3(const char *) filelist "testfiles/unite/noextension" recursively;

foreach (testname, path) from alien_pass
{
    test("IsThisAnAlienGadgetPath() " testname " should pass")
        file uni uniteapp path;
    {
        verify(g_gadget_manager->IsThisAnAlienGadgetPath(uniteapp));
        verify(g_gadget_manager->IsThisAGadgetPath(uniteapp));
    }
}

foreach (testname, path) from alien_fail
{
    test("IsThisAnAlienGadgetPath() " testname " should fail")
        file uni widget path;
    {
        verify(!g_gadget_manager->IsThisAnAlienGadgetPath(widget));
        verify( g_gadget_manager->IsThisAGadgetPath(widget));
    }
}

test("Unite load: selftest")
	file uni zip_file "testfiles/unite/selftest.ua";
{
	verify_success(g_gadget_manager->CreateGadget(&selftest_unite, zip_file, URL_UNITESERVICE_INSTALL_CONTENT));
}

test("Unite: GetClass")
	require success "Unite load: selftest";
{
	verify(selftest_unite->GetClass()->GetClass() == GADGET_CLASS_UNITE, "Gadget class");
}

foreach (testname, path) from alien_reqext_fail
{
    test("IsThisAnAlienGadgetPath() " testname " require extension flag")
        file uni widget path;
    {
        verify(!g_gadget_manager->IsThisAnAlienGadgetPath(widget, FALSE));
        verify( g_gadget_manager->IsThisAnAlienGadgetPath(widget, TRUE));
        verify( g_gadget_manager->IsThisAGadgetPath(widget));
    }
}

