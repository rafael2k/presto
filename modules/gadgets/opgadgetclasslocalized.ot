/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2010-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Jan Borsodi
*/

group "gadgets.localized";
require GADGET_SUPPORT;
require init;

include "modules/util/opstring.h";
include "modules/gadgets/OpGadgetManager.h";
include "modules/gadgets/OpGadgetClass.h";

// -- Global variables ---------------------------------------------------

global
{
	OpGadgetClass *localized_widget1_p = NULL;
	OpGadgetClass *localized_widget2_p = NULL;
}

// -- Localized tests --------------------------------------------------------------

table dummy1(const char *) filelist "testfiles/widgets/w3c_widget.wgt" recursively;

test("Loading W3C widget with locale \"foo\",\"bar\"")
	file zip_file "testfiles/widgets/w3c_widget.wgt";
{
	// Some fields should match foo, some bar and some no locale
	verify_success(g_gadget_manager->OverrideBrowserLocale("foo,bar"));

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	OpString unused;
	localized_widget1_p = g_gadget_manager->CreateClassWithPath(zip_file_path, URL_GADGET_INSTALL_CONTENT, NULL, unused);
	verify(localized_widget1_p);
}

foreach (attribute, expect, expect_is_set) from
{
	{ WIDGET_LOCALIZED_NAME, "bar", TRUE}
	{ WIDGET_LOCALIZED_DESCRIPTION, "foo", TRUE}
	{ WIDGET_LOCALIZED_LICENSE, "foo", TRUE}
}
{
	test("W3C locale \"foo\",\"bar\": $(attribute)")
		require success "Loading W3C widget with locale \"foo\",\"bar\"";
	{
		BOOL is_set = FALSE;
		const uni_char *attrval =
			localized_widget1_p->GetLocaleForAttribute(attribute, &is_set);
		verify(attrval);
		verify_string(attrval, expect);
		if (expect_is_set)
			verify(is_set);
		else
			verify(!is_set);
	}
}

test("Loading W3C widget with locale \"foo\"")
	file zip_file "testfiles/widgets/w3c_widget.wgt";
{
	// Some fields should match foo and some no locale
	verify_success(g_gadget_manager->OverrideBrowserLocale("foo"));

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	OpString unused;
	localized_widget2_p = g_gadget_manager->CreateClassWithPath(zip_file_path, URL_GADGET_INSTALL_CONTENT, NULL, unused);
	verify(localized_widget2_p);
}


foreach (attribute, expect, expect_is_set) from
{
	{ WIDGET_LOCALIZED_NAME, "bar", TRUE}
	{ WIDGET_LOCALIZED_DESCRIPTION, "foo", TRUE}
	{ WIDGET_LOCALIZED_LICENSE, "foo", TRUE}
}
{
	test("W3C locale \"foo\": $(attribute)")
		require success "Loading W3C widget with locale \"foo\"";
	{
		BOOL is_set = FALSE;
		const uni_char *attrval =
			localized_widget1_p->GetLocaleForAttribute(attribute, &is_set);
		if (expect)
			verify(attrval);
		verify_string(attrval, expect);
		if (expect_is_set)
			verify(is_set);
		else
			verify(!is_set);
	}
}

// -- Global cleanup -----------------------------------------------------

exit
{
	OP_DELETE(localized_widget1_p);
	OP_DELETE(localized_widget2_p);
}
