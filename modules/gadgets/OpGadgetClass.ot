/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2009-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

group "gadgets.gadgetclass";
require GADGET_SUPPORT;
require init;

include "modules/util/opstring.h";
include "modules/gadgets/OpGadgetManager.h";
include "modules/gadgets/OpGadgetClass.h";
include "modules/pi/OpBitmap.h";
include "modules/pi/OpSystemInfo.h";

// -- Global variables ---------------------------------------------------

global
{
	OpGadgetClass *w3c_widget_p = NULL;
	OpGadgetClass *selftest_widget_p = NULL;
	OpGadgetClass *legacy_widget_p = NULL;
	OpGadgetClass *minimalconfig_p = NULL;
	OpGadgetClass *runtime_p = NULL;
	OpGadgetClass *widgetfolder_p = NULL;
	OpGadgetClass *fail_p = NULL;
	OpGadgetClass *utf8_widget_p = NULL;
	OpGadgetClass *jil_widget_p = NULL;
	OpGadgetClass *basic_extension_p = NULL;
	OpGadgetClass *full_extension_p = NULL;
	OpGadgetClass *broken_panel_p = NULL;
	OpGadgetClass *bidi_widget_p = NULL;
	OpGadgetClass *bidi2_widget_p = NULL;
	OpGadgetClass *w3c_with_opera_api_p = NULL;
	OpGadgetClass *opera_widget_p = NULL;
	OpGadgetClass *icons_widget_p = NULL;
	OpGadgetClass *opera_widget_dockable_p = NULL;
	OpGadgetClass *opera_widget_no_dockable_p = NULL;

	OpString error_str;
}

setup
{
	g_gadget_manager->OverrideBrowserLocale("foo");
}

// -- Tests --------------------------------------------------------------

table dummy1(const char *) filelist "testfiles/widgets/w3c_widget.wgt" recursively;

test("Loading W3C widget")
	file zip_file "testfiles/widgets/w3c_widget.wgt";
{
	w3c_widget_p = OP_NEW(OpGadgetClass, ());
	verify(w3c_widget_p);

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	verify_success(w3c_widget_p->Construct(zip_file_path, URL_GADGET_INSTALL_CONTENT));
	OP_STATUS rc = w3c_widget_p->LoadInfoFromInfoFile(error_str);
	if (error_str.HasContent()) output("\nFailed: \"%s\" ", ST_down(error_str.CStr()));
	verify_success(rc);
	verify(error_str.IsEmpty());
	verify(!w3c_widget_p->HasURLFilterAccess());
}

test("W3C: GetGadgetName")
	require success "Loading W3C widget";
{
	OpString name;
	name.Set("foo");
	verify_success(w3c_widget_p->GetGadgetName(name));
	verify_string(name.CStr(), "W3C Test Widget");
}

test("W3C: GetClass")
	require success "Loading W3C widget";
{
	verify(w3c_widget_p->GetClass() == GADGET_CLASS_WIDGET, "Gadget class");
}

test("W3C: GetGadgetDescription")
	require success "Loading W3C widget";
{
	OpString description;
	verify_success(w3c_widget_p->GetGadgetDescription(description));
	verify_string(description.CStr(), UNI_L("\n    \x202e!arepO\x202c\n    \x202aSoftware ASA\x202c\n    More description text.\n  "));
}

test("W3C: GetGadgetAuthor")
	require success "Loading W3C widget";
{
	OpString author;
	verify_success(w3c_widget_p->GetGadgetAuthor(author));
	verify(author.Find("Core Extapps") != KNotFound);
}

test("W3C: GetGadgetId")
	require success "Loading W3C widget";
{
	OpString id;
	verify_success(w3c_widget_p->GetGadgetId(id));
	verify_string(id.CStr(), "http://com.opera.testwidget");
}

test("W3C: GetGadgetVersion")
	require success "Loading W3C widget";
{
	OpString ver;
	verify_success(w3c_widget_p->GetGadgetVersion(ver));
	verify_string(ver.CStr(), "0.0.1");
}

test("W3C: GetGadgetPath")
	require success "Loading W3C widget";
	file zip_file "testfiles/widgets/w3c_widget.wgt";
{
	OpString gpath;
	verify_success(w3c_widget_p->GetGadgetPath(gpath));
	verify_string(gpath.CStr(), zip_file);
}

/*
test("W3C: GetGadgetFileName")
	require success "Loading W3C widget";
{
}
*/

test("W3C: GetGadgetRootPath")
	require success "Loading W3C widget";
	file uni zip_file "testfiles/widgets/w3c_widget.wgt";
{
	const uni_char *gpath =
		w3c_widget_p->GetGadgetRootPath();
	verify(gpath != NULL);
	BOOL paths_are_equal = FALSE;
	verify_success(g_op_system_info->PathsEqual(gpath, zip_file, &paths_are_equal));
	verify(paths_are_equal);
}

test("W3C: GetGadgetFile")
	require success "Loading W3C widget";
{
	OpString startfile;
	verify_success(w3c_widget_p->GetGadgetFile(startfile));

	verify_string(startfile.CStr(), "src" PATHSEP "main.html");
}

test("W3C: GetGadgetIconCount")
	require success "Loading W3C widget";
{
	verify(2 == w3c_widget_p->GetGadgetIconCount());
}

test("W3C: GetGadgetIcon (full_path = FALSE)") /* CORE-23536 */
	require success "Loading W3C widget";
{
	OpString path;
	INT32 height, width;

	verify_success(w3c_widget_p->GetGadgetIcon(0, path, width, height, FALSE));
	verify_string(path.CStr(), PATHSEP "src" PATHSEP "test.png");
	verify(64 == width);
	verify(48 == height);
}

test("W3C: GetGadgetIcon (full_path = TRUE)") /* CORE-23536 */
	require success "Loading W3C widget";
	file icon_file "testfiles/widgets/w3c_widget.wgt/src/test.png";
{
	OpString path;
	INT32 height, width;

	verify_success(w3c_widget_p->GetGadgetIcon(0, path, width, height, TRUE));
	verify_string(path.CStr(), icon_file);
	verify(64 == width);
	verify(48 == height);
}

test("W3C: GetGadgetIcon (rendering width/height, SVG)")
	require success "Loading W3C widget";
{
	OpBitmap *iconbmp = NULL;
	verify_success(w3c_widget_p->GetGadgetIcon(&iconbmp, 200, 200));
	verify (iconbmp);
	OP_DELETE(iconbmp);
}

test("W3C: GetGadgetType")
	require success "Loading W3C widget";
{
	verify(GADGET_TYPE_CHROMELESS == w3c_widget_p->GetGadgetType());
}

test("W3C: SupportsNamespace")
	require success "Loading W3C widget";
{
	verify(w3c_widget_p->SupportsNamespace(GADGETNS_W3C_1_0));
}

test("W3C: IRI validity")
	require success "Loading W3C widget";
{
	verify(!w3c_widget_p->HasFeature(UNI_L("invalidiri")));
	verify(!w3c_widget_p->HasFeature(UNI_L("hello hello:hi hi")));
	verify(w3c_widget_p->HasFeature(UNI_L("feature:a9bb79c1")));
}

test("W3C: HasLocalesFolder")
	require success "Loading W3C widget";
{
	verify(w3c_widget_p->HasLocalesFolder());
}

table w3c_string_attributes
{
	{ "WIDGET_ATTR_ID", WIDGET_ATTR_ID, "http://com.opera.testwidget"}
	{ "WIDGET_ATTR_VERSION", WIDGET_ATTR_VERSION, "0.0.1" }
	{ "WIDGET_NAME_TEXT", WIDGET_NAME_TEXT, "W3C Test Widget" }
	{ "WIDGET_NAME_SHORT", WIDGET_NAME_SHORT, "test" }
	{ "WIDGET_DESCRIPTION_TEXT", WIDGET_DESCRIPTION_TEXT, UNI_L("\n    \x202e!arepO\x202c\n    \x202aSoftware ASA\x202c\n    More description text.\n  ") }
	{ "WIDGET_AUTHOR_ATTR_HREF", WIDGET_AUTHOR_ATTR_HREF, "http://www.opera.com" }
	{ "WIDGET_AUTHOR_ATTR_EMAIL", WIDGET_AUTHOR_ATTR_EMAIL, "core-extapps@opera.com" }
	{ "WIDGET_AUTHOR_ATTR_ORGANIZATION", WIDGET_AUTHOR_ATTR_ORGANIZATION, NULL }
	{ "WIDGET_AUTHOR_ATTR_IMG", WIDGET_AUTHOR_ATTR_IMG, NULL }
	{ "WIDGET_AUTHOR_TEXT", WIDGET_AUTHOR_TEXT, "Core Extapps" }
	{ "WIDGET_LICENSE_TEXT", WIDGET_LICENSE_TEXT, "\n    Licenese text\n  " }
	{ "WIDGET_LICENSE_ATTR_HREF", WIDGET_LICENSE_ATTR_HREF, "http://www.opera.com/somelicense.html"}
	{ "WIDGET_CONTENT_ATTR_SRC", WIDGET_CONTENT_ATTR_SRC, "src/main.html"}
	{ "WIDGET_CONTENT_ATTR_TYPE", WIDGET_CONTENT_ATTR_TYPE, "text/html" }
	{ "WIDGET_CONTENT_ATTR_CHARSET", WIDGET_CONTENT_ATTR_CHARSET, "utf-8" }
	{ "WIDGET_UPDATE_ATTR_URI", WIDGET_UPDATE_ATTR_URI, "http://www.opera.com/updatewidget.php?name=testwidget&version=0.0.1" }
	{ "WIDGET_SERVICEPATH_TEXT", WIDGET_SERVICEPATH_TEXT, NULL }
}

foreach (name, attribute, expect) from w3c_string_attributes
{
	test("W3C: " name)
		require success "Loading W3C widget";
	{
		const uni_char *attrval =
			w3c_widget_p->GetAttribute(attribute);
		if (expect)
		{
			verify(attrval);
			verify_string(attrval, expect);
		}
		else
		{
			verify(!attrval || !*attrval);
		}
	}
}

table w3c_integer_attributes
{
	{ "WIDGET_ATTR_HEIGHT", WIDGET_ATTR_HEIGHT, 50 }
	{ "WIDGET_ATTR_WIDTH", WIDGET_ATTR_WIDTH, 100 }
	{ "WIDGET_ATTR_MODE", WIDGET_ATTR_MODE, WINDOW_VIEW_MODE_WINDOWED | WINDOW_VIEW_MODE_FLOATING }
	{ "WIDGET_ATTR_DEFAULT_VIEWMODE", WIDGET_ATTR_DEFAULT_MODE, WINDOW_VIEW_MODE_WINDOWED }
	//{ "WIDGET_ATTR_TRANSPARENT", WIDGET_ATTR_TRANSPARENT, 0 }
	//{ "WIDGET_ATTR_DOCKABLE", WIDGET_ATTR_DOCKABLE, 0 }
	//{ "WIDGET_ACCESS_ATTR_NETWORK", WIDGET_ACCESS_ATTR_NETWORK, 0 }
	//{ "WIDGET_ACCESS_ATTR_PLUGINS", WIDGET_ACCESS_ATTR_PLUGINS, 0 }
	//{ "WIDGET_ACCESS_ATTR_FILES", WIDGET_ACCESS_ATTR_FILES, 0 }
	//{ "WIDGET_ACCESS_ATTR_JSPLUGINS", WIDGET_ACCESS_ATTR_JSPLUGINS, 0 }
	//{ "WIDGET_ACCESS_ATTR_WEBSERVER", WIDGET_ACCESS_ATTR_WEBSERVER, 0 }
	//{ "WIDGET_ACCESS_ATTR_URLFILTER", WIDGET_ACCESS_ATTR_URLFILTER, 0 }
	//{ "WIDGET_BDO_ATTR_DIR", WIDGET_BDO_ATTR_DIR, 0 }
	//{ "WIDGET_WIDGETTYPE", WIDGET_WIDGETTYPE, 0 }
	//{ "WIDGET_WEBSERVER_ATTR_TYPE", WIDGET_WEBSERVER_ATTR_TYPE, 0 }
}

foreach (name, attribute, expect) from w3c_integer_attributes
{
	test("W3C: " name)
		require success "Loading W3C widget";
	{
		UINT32 r = expect;
		verify(w3c_widget_p->GetAttribute(attribute) == r);
	}
}

table dummyopera(const char *) filelist "testfiles/widgets/selftest.wgt" recursively;

test("Loading Opera widget")
	file zip_file "testfiles/widgets/selftest.wgt";
{
	selftest_widget_p = OP_NEW(OpGadgetClass, ());
	verify(selftest_widget_p);

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	verify_success(selftest_widget_p->Construct(zip_file_path, URL_GADGET_INSTALL_CONTENT));
	OP_STATUS rc = selftest_widget_p->LoadInfoFromInfoFile(error_str);
	if (error_str.HasContent()) output("\nFailed: \"%s\" ", ST_down(error_str.CStr()));
	verify_success(rc);
	verify(error_str.IsEmpty());
	verify(!selftest_widget_p->HasURLFilterAccess());
}

test("Opera: GetGadgetName")
	require success "Loading Opera widget";
{
	OpString name;
	name.Set("foo");
	verify_success(selftest_widget_p->GetGadgetName(name));
	verify_string(name.CStr(), "Gadgets selftest");
}

test("Opera: GetClass")
	require success "Loading Opera widget";
{
	verify(selftest_widget_p->GetClass() == GADGET_CLASS_WIDGET, "Gadget class");
}

test("Opera: GetGadgetDescription")
	require success "Loading Opera widget";
{
	OpString description;
	verify_success(selftest_widget_p->GetGadgetDescription(description));
	verify_string(description.CStr(), UNI_L("\n    Selftest widget for gadgets module.\n  "));
}

test("Opera: GetGadgetAuthor")
	require success "Loading Opera widget";
{
	OpString author;
	verify_success(selftest_widget_p->GetGadgetAuthor(author));
	verify_string(author.CStr(), UNI_L("Lasse Magnussen"));
}

test("Opera: GetGadgetPath")
	require success "Loading Opera widget";
	file zip_file "testfiles/widgets/selftest.wgt";
{
	OpString gpath;
	verify_success(selftest_widget_p->GetGadgetPath(gpath));
	verify_string(gpath.CStr(), zip_file);
}

test("Opera: GetGadgetRootPath")
	require success "Loading Opera widget";
	file uni zip_file "testfiles/widgets/selftest.wgt";
{
	const uni_char *gpath =
		selftest_widget_p->GetGadgetRootPath();
	verify(gpath != NULL);
	BOOL paths_are_equal = FALSE;
	verify_success(g_op_system_info->PathsEqual(gpath, zip_file, &paths_are_equal));
	verify(paths_are_equal);
}

test("Opera: GetGadgetFile")
	require success "Loading Opera widget";
{
	OpString startfile;
	verify_success(selftest_widget_p->GetGadgetFile(startfile));

	verify_string(startfile.CStr(), UNI_L("index.html"));
}

test("Opera: SupportsNamespace")
	require success "Loading Opera widget";
{
	verify(selftest_widget_p->SupportsNamespace(GADGETNS_OPERA));
}

test("Opera: HasLocalesFolder")
	require success "Loading Opera widget";
{
	verify(!selftest_widget_p->HasLocalesFolder());
}

table selftest_string_attributes
{
	{ "WIDGET_ATTR_ID", WIDGET_ATTR_ID, "http://www.opera.com/GadgetsTest/2008-12-11" }
	{ "WIDGET_ATTR_VERSION", WIDGET_ATTR_VERSION, NULL }
	{ "WIDGET_NAME_TEXT", WIDGET_NAME_TEXT, "Gadgets selftest" }
	{ "WIDGET_NAME_SHORT", WIDGET_NAME_SHORT, NULL }
	{ "WIDGET_DESCRIPTION_TEXT", WIDGET_DESCRIPTION_TEXT, "\n    Selftest widget for gadgets module.\n  " }
	{ "WIDGET_AUTHOR_ATTR_HREF", WIDGET_AUTHOR_ATTR_HREF, "http://www.opera.com" }
	{ "WIDGET_AUTHOR_ATTR_EMAIL", WIDGET_AUTHOR_ATTR_EMAIL, NULL }
	{ "WIDGET_AUTHOR_ATTR_ORGANIZATION", WIDGET_AUTHOR_ATTR_ORGANIZATION, "Opera Software ASA" }
	{ "WIDGET_AUTHOR_ATTR_IMG", WIDGET_AUTHOR_ATTR_IMG, NULL }
	{ "WIDGET_AUTHOR_TEXT", WIDGET_AUTHOR_TEXT, "Lasse Magnussen" }
	{ "WIDGET_LICENSE_TEXT", WIDGET_LICENSE_TEXT, NULL }
	{ "WIDGET_LICENSE_ATTR_HREF", WIDGET_LICENSE_ATTR_HREF, NULL }
	{ "WIDGET_CONTENT_ATTR_SRC", WIDGET_CONTENT_ATTR_SRC, NULL }
	{ "WIDGET_CONTENT_ATTR_TYPE", WIDGET_CONTENT_ATTR_TYPE, NULL }
	{ "WIDGET_CONTENT_ATTR_CHARSET", WIDGET_CONTENT_ATTR_CHARSET, "UTF-8" /* default */ }
	{ "WIDGET_UPDATE_ATTR_URI", WIDGET_UPDATE_ATTR_URI, "http://www.opera.com/updatewidget.php?name=testwidget&version=0.0.1" }
	{ "WIDGET_SERVICEPATH_TEXT", WIDGET_SERVICEPATH_TEXT, NULL }
}

foreach (name, attribute, expect) from selftest_string_attributes
{
	test("Opera: " name)
		require success "Loading Opera widget";
	{
		const uni_char *attrval =
			selftest_widget_p->GetAttribute(attribute);
		if (expect)
		{
			verify(attrval);
			verify_string(attrval, expect);
		}
		else
		{
			verify(!attrval || !*attrval);
		}
	}
}

table selftest_integer_attributes
{
	{ "WIDGET_ATTR_HEIGHT", WIDGET_ATTR_HEIGHT, 50 }
	{ "WIDGET_ATTR_WIDTH", WIDGET_ATTR_WIDTH, 100 }
	{ "WIDGET_ATTR_MODE", WIDGET_ATTR_MODE, WINDOW_VIEW_MODE_UNKNOWN }
	{ "WIDGET_ATTR_DEFAULT_VIEWMODE", WIDGET_ATTR_DEFAULT_MODE, WINDOW_VIEW_MODE_WIDGET }
	//{ "WIDGET_ATTR_TRANSPARENT", WIDGET_ATTR_TRANSPARENT, 0 }
	//{ "WIDGET_ATTR_DOCKABLE", WIDGET_ATTR_DOCKABLE, 0 }
	{ "WIDGET_ACCESS_ATTR_NETWORK", WIDGET_ACCESS_ATTR_NETWORK, GADGET_NETWORK_PRIVATE | GADGET_NETWORK_PUBLIC }
	{ "WIDGET_ACCESS_ATTR_PLUGINS", WIDGET_ACCESS_ATTR_PLUGINS, 0 }
	//{ "WIDGET_ACCESS_ATTR_FILES", WIDGET_ACCESS_ATTR_FILES, 0 }
	//{ "WIDGET_ACCESS_ATTR_JSPLUGINS", WIDGET_ACCESS_ATTR_JSPLUGINS, 0 }
	//{ "WIDGET_ACCESS_ATTR_WEBSERVER", WIDGET_ACCESS_ATTR_WEBSERVER, 0 }
	//{ "WIDGET_ACCESS_ATTR_URLFILTER", WIDGET_ACCESS_ATTR_URLFILTER, 0 }
	//{ "WIDGET_BDO_ATTR_DIR", WIDGET_BDO_ATTR_DIR, 0 }
	//{ "WIDGET_WIDGETTYPE", WIDGET_WIDGETTYPE, 0 }
	//{ "WIDGET_WEBSERVER_ATTR_TYPE", WIDGET_WEBSERVER_ATTR_TYPE, 0 }
}

foreach (name, attribute, expect) from selftest_integer_attributes
{
	test("Opera: " name)
		require success "Loading Opera widget";
	{
		verify(selftest_widget_p->GetAttribute(attribute) == (expect));
	}
}

table dummy2(const char *) filelist "testfiles/widgets/legacyfolder.wgt" recursively;

test("Loading legacy folder widget")
	file zip_file "testfiles/widgets/legacyfolder.wgt";
{
	legacy_widget_p = OP_NEW(OpGadgetClass, ());
	verify(legacy_widget_p);

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	verify_success(legacy_widget_p->Construct(zip_file_path, URL_GADGET_INSTALL_CONTENT));
	OP_STATUS rc = legacy_widget_p->LoadInfoFromInfoFile(error_str);
	if (error_str.HasContent()) output("\nFailed: \"%s\" ", ST_down(error_str.CStr()));
	verify_success(rc);
	verify(error_str.IsEmpty());
	verify(!legacy_widget_p->HasURLFilterAccess());
}

test("Legacy folder: GetGadgetPath")
	require success "Loading legacy folder widget";
	file zip_file "testfiles/widgets/legacyfolder.wgt";
{
	OpString gpath;
	verify_success(legacy_widget_p->GetGadgetPath(gpath));
	verify_string(gpath.CStr(), zip_file);
}

test("Legacy folder: GetGadgetRootPath")
	require success "Loading legacy folder widget";
	file uni zip_file "testfiles/widgets/legacyfolder.wgt";
{
	const uni_char *gpath =
		legacy_widget_p->GetGadgetRootPath();
	verify(gpath != NULL);

	OpString expect;
	verify_success(expect.Set(zip_file));
	verify_success(expect.Append(PATHSEP "legacyfolder"));

	BOOL paths_are_equal = FALSE;
	verify_success(g_op_system_info->PathsEqual(gpath, expect.CStr(), &paths_are_equal));
	verify(paths_are_equal);
}

test("Legacy folder: SupportsNamespace")
	require success "Loading legacy folder widget";
{
	verify(legacy_widget_p->SupportsNamespace(GADGETNS_OPERA));
}

test("Legacy folder: HasLocalesFolder")
	require success "Loading legacy folder widget";
{
	verify(!legacy_widget_p->HasLocalesFolder());
}

table dummy3(const char *) filelist "testfiles/widgets/defaultvalues.wgt" recursively;

test("Loading minimal configuration widget")
	file zip_file "testfiles/widgets/defaultvalues.wgt";
{
	minimalconfig_p = OP_NEW(OpGadgetClass, ());
	verify(minimalconfig_p);

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	verify_success(minimalconfig_p->Construct(zip_file_path, URL_GADGET_INSTALL_CONTENT));
	OP_STATUS rc = minimalconfig_p->LoadInfoFromInfoFile(error_str);
	if (error_str.HasContent()) output("\nFailed: \"%s\" ", ST_down(error_str.CStr()));
	verify_success(rc);
	verify(error_str.IsEmpty());
	verify(!minimalconfig_p->HasURLFilterAccess());
}

test("DSK-249445: Default height for legacy widgets")
	require success "Loading minimal configuration widget";
{
	verify(GADGETS_DEFAULT_HEIGHT == minimalconfig_p->InitialHeight());
}

test("DSK-249445: Default width for legacy widgets")
	require success "Loading minimal configuration widget";
{
	verify(GADGETS_DEFAULT_WIDTH == minimalconfig_p->InitialWidth());
}

table dummyruntime(const char *) filelist "testfiles/widgets/widget_runtime.wgt" recursively;

test("Loading widget runtime widget")
	file zip_file "testfiles/widgets/widget_runtime.wgt";
	require WIDGET_RUNTIME_SUPPORT;
{
	runtime_p = OP_NEW(OpGadgetClass, ());
	verify(runtime_p);

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	verify_success(runtime_p->Construct(zip_file_path, URL_GADGET_INSTALL_CONTENT));
	OP_STATUS rc = runtime_p->LoadInfoFromInfoFile(error_str);
	if (error_str.HasContent()) output("\nFailed: \"%s\" ", ST_down(error_str.CStr()));
	verify_success(rc);
	verify(error_str.IsEmpty());
	verify(!runtime_p->HasURLFilterAccess());
}

test("Runtime: features")
	require success "Loading widget runtime widget";
{
	verify(!runtime_p->HasFeature(UNI_L("feature:a9bb79c1")));
	verify(runtime_p->HasFeature(UNI_L("http://xmlns.opera.com/wcb")));
}

table dummy4(const char *) filelist "testfiles/widgets/widgetfolder" recursively;

test("Widget folder without extension should load")
	file zip_file "testfiles/widgets/widgetfolder";
{
	// This gets rejected by OpGadgetManager, but should be allowed
	// by OpGadgetClass. Compare test below and in gadgets.ot.
	widgetfolder_p = OP_NEW(OpGadgetClass, ());
	verify(widgetfolder_p);

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	verify_success(widgetfolder_p->Construct(zip_file_path, URL_GADGET_INSTALL_CONTENT));
	OP_STATUS rc = widgetfolder_p->LoadInfoFromInfoFile(error_str);
	if (error_str.HasContent()) output("\nFailed: \"%s\" ", ST_down(error_str.CStr()));
	verify_success(rc);
	verify(error_str.IsEmpty());
	verify(!widgetfolder_p->HasURLFilterAccess());
}

// Simple tests for loading widgets failing

// This table is duplicated in gadgets.ot
table fail
{
	/* Commented out here as it loads through OpGadgetClass, but
	 * is rejected by OpGadgetManager. Compare test above.
	{ "Widget folder without extension",
	  "testfiles/widgets/widgetfolder" },
	*/
	{ "CORE-19220: File with CRC error",
	  "testfiles/widgets/crc32error.wgt" },
	{ "CORE-19221: Start file with reserved characters 1",
	  "testfiles/widgets/backslash.wgt" },
	{ "CORE-19221: Start file with reserved characters 2",
	  "testfiles/widgets/questionmark.wgt" },
	{ "CORE-19759: empty widgetname should fail",
	  "testfiles/widgets/emptywidgetname.wgt" },
	{ "CORE-19759: missing widgetname should fail",
	  "testfiles/widgets/missingwidgetname.wgt" },
	{ "CORE-23176: Non-root widget element",
	  "testfiles/widgets/config_widget_not_root.wgt" },
	{ "CORE-23186: Widget without start file",
	  "testfiles/widgets/startfilemissing.wgt" },
	{ "CORE-22003: config.xml.bak must not be read 1",
	  "testfiles/widgets/namematch1.wgt" },
	{ "CORE-22003: config.xml.bak must not be read 2",
	  "testfiles/widgets/namematch2.wgt" },
	{ "CORE-22003: config.xml.bak must not be read 3",
	  "testfiles/widgets/namematch3.wgt" },
	{ "CORE-22003: config.xml as a sub-path should fail",
	  "testfiles/widgets/config.xml" },
	{ "Widget declaring opera:speeddial should be rejected",
	  "testfiles/widgets/speeddial.wgt" },
}

foreach (testname, zipname) from fail
{
	test(testname)
		file zip_file zipname;
	{
		fail_p = OP_NEW(OpGadgetClass, ());
		verify(fail_p);

		OpString zip_file_path;
		verify_success(zip_file_path.Set(zip_file));
		verify_success(fail_p->Construct(zip_file_path, URL_GADGET_INSTALL_CONTENT));
		verify(OpStatus::IsError(fail_p->LoadInfoFromInfoFile(error_str)));
		verify(!fail_p->HasURLFilterAccess());
	}
	finally
	{
		OP_DELETE(fail_p);
		fail_p = NULL;
	}
}

test("CORE-23192: Start file name can be UTF-8 encoded in zip")
	file zip_file "testfiles/widgets/utf-8.wgt";
{
	utf8_widget_p = OP_NEW(OpGadgetClass, ());
	verify(utf8_widget_p);

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	verify_success(utf8_widget_p->Construct(zip_file_path, URL_GADGET_INSTALL_CONTENT));
	OP_STATUS rc = utf8_widget_p->LoadInfoFromInfoFile(error_str);
	if (error_str.HasContent()) output("\nFailed: \"%s\" ", ST_down(error_str.CStr()));
	verify_success(rc);
	verify(error_str.IsEmpty());
	verify(!utf8_widget_p->HasURLFilterAccess());
}

test("CORE-23192: GetGadgetFile")
	require success "CORE-23192: Start file name can be UTF-8 encoded in zip";
{
	OpString startfile;
	verify_success(utf8_widget_p->GetGadgetFile(startfile));

	verify_string(startfile.CStr(), UNI_L("\x0D36\x0D30\x0D3F.html"));
}

// -- Widget with three icons -------------------------------------------------
// first icon 16x16, size not specified in config.xml
// second icon 32x32, size specified in config.xml
// third icon 64x64, size not specified in config.xml

table threeicons(const char *) filelist "testfiles/widgets/threeicons.wgt" recursively;

test("Loading widget with three icons")
	file zip_file "testfiles/widgets/threeicons.wgt";
{
	icons_widget_p = OP_NEW(OpGadgetClass, ());
	verify(icons_widget_p);

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	verify_success(icons_widget_p->Construct(zip_file_path, URL_GADGET_INSTALL_CONTENT));
	OP_STATUS rc = icons_widget_p->LoadInfoFromInfoFile(error_str);
	if (error_str.HasContent()) output("\nFailed: \"%s\" ", ST_down(error_str.CStr()));
	verify_success(rc);
	verify(error_str.IsEmpty());
}

subtest GetIcon(int width, int height, BOOL resize, BOOL allow_check_size, unsigned int exp_width, unsigned int exp_height)
{
	OpBitmap* iconbmp = NULL;
	verify_success(icons_widget_p->GetGadgetIcon(&iconbmp, width, height, resize, allow_check_size));
	verify(iconbmp != NULL);
	verify(iconbmp->Width() == exp_width);
	verify(iconbmp->Height() == exp_height);
}
finally
{
	OP_DELETE(iconbmp);
}

test("GetGadgetIcon (width/height, !resize, !allow_size_check)")
	require success "Loading widget with three icons";
{
	verify_success(icons_widget_p->Reload());
	verify(icons_widget_p->GetGadgetIconCount() == 3);

	// size is specified for 32x32 icon only, so it should match all queries
	verify(GetIcon(0, 0, FALSE, FALSE, 32, 32));
	verify(GetIcon(16, 16, FALSE, FALSE, 32, 32));
	verify(GetIcon(32, 32, FALSE, FALSE, 32, 32));
	verify(GetIcon(64, 64, FALSE, FALSE, 32, 32));
}

test("GetGadgetIcon(): !allow_size_check should ignore known size")
	require success "Loading widget with three icons";
{
	// even if real size is known it should be ignored if allow_size_check is FALSE
	verify(GetIcon(16, 16, FALSE, TRUE, 16, 16)); // get real size
	verify(GetIcon(16, 16, FALSE, FALSE, 32, 32)); // ignore it
}

test("GetGadgetIcon (width/height, resize, !allow_size_check)")
	require success "Loading widget with three icons";
{
	verify_success(icons_widget_p->Reload());
	verify(icons_widget_p->GetGadgetIconCount() == 3);

	// don't resize if one of dimensions is 0
	verify(GetIcon(0, 0, TRUE, FALSE, 32, 32));
	verify(GetIcon(32, 0, TRUE, FALSE, 32, 32));
	verify(GetIcon(0, 32, TRUE, FALSE, 32, 32));

	// the same icon, but resized in the first call
	verify(GetIcon(24, 24, TRUE, FALSE, 24, 24));
	verify(GetIcon(32, 32, TRUE, FALSE, 32, 32));
}

test("GetGadgetIcon (width/height, !resize, allow_size_check)")
	require success "Loading widget with three icons";
{
	verify_success(icons_widget_p->Reload());
	verify(icons_widget_p->GetGadgetIconCount() == 3);

	verify(GetIcon(0, 0, FALSE, TRUE, 16, 16));   // first bigger
	verify(GetIcon(16, 16, FALSE, TRUE, 16, 16)); // exact match
	verify(GetIcon(16, 17, FALSE, TRUE, 32, 32)); // first bigger
	verify(GetIcon(31, 31, FALSE, TRUE, 32, 32)); // first bigger
	verify(GetIcon(32, 32, FALSE, TRUE, 32, 32)); // exact match
	verify(GetIcon(33, 32, FALSE, TRUE, 64, 64)); // first bigger
	verify(GetIcon(128, 128, FALSE, TRUE, 64, 64)); // last smaller
}

// -- JIL related tests --------------------------------------------------

table dummy5(const char *) filelist "testfiles/widgets/jil_widget.wgt" recursively;

test("Loading JIL widget")
	file zip_file "testfiles/widgets/jil_widget.wgt";
	require DOM_JIL_API_SUPPORT;
{
	jil_widget_p = OP_NEW(OpGadgetClass, ());
	verify(jil_widget_p);

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	verify_success(jil_widget_p->Construct(zip_file_path, URL_GADGET_INSTALL_CONTENT));
	OP_STATUS rc = jil_widget_p->LoadInfoFromInfoFile(error_str);
	if (error_str.HasContent()) output("\nFailed: \"%s\" ", ST_down(error_str.CStr()));
	verify_success(rc);
	verify(error_str.IsEmpty());
	verify(!jil_widget_p->HasURLFilterAccess());

	// This widget should have all the valid elements/attributes set to something
	verify(jil_widget_p->SupportsNamespace(GADGETNS_JIL_1_0));
	verify_string(jil_widget_p->GetAttribute(WIDGET_ATTR_ID), "0df9f49e-c46d-4300-9ea4-e1c0f1f8398a");
	verify_string(jil_widget_p->GetAttribute(WIDGET_ATTR_VERSION), "1.0.Beta");
	verify(jil_widget_p->GetAttribute(WIDGET_ATTR_HEIGHT) == 640);
	verify(jil_widget_p->GetAttribute(WIDGET_ATTR_WIDTH) == 480);

	verify_string(jil_widget_p->GetAttribute(WIDGET_NAME_TEXT), "JIL Test Widget");
	verify_string(jil_widget_p->GetAttribute(WIDGET_DESCRIPTION_TEXT), "JIL Test Widget Description");
	verify_string(jil_widget_p->GetAttribute(WIDGET_AUTHOR_TEXT), "Test Author Name");
	verify_string(jil_widget_p->GetAttribute(WIDGET_AUTHOR_ATTR_EMAIL), "test@opera.com");
	verify_string(jil_widget_p->GetAttribute(WIDGET_AUTHOR_ATTR_HREF), "http://test.opera.com");
	verify_string(jil_widget_p->GetAttribute(WIDGET_LICENSE_TEXT), "Creative Commons Attribution License");
	verify_string(jil_widget_p->GetAttribute(WIDGET_LICENSE_ATTR_HREF), "http://creativecommons.org/licenses/by/3.0/");

	verify(jil_widget_p->GetAttribute(WIDGET_JIL_ACCESS_ATTR_FILESYSTEM) == TRUE);
	verify(jil_widget_p->GetAttribute(WIDGET_ACCESS_ATTR_NETWORK) == (GADGET_NETWORK_PRIVATE | GADGET_NETWORK_PUBLIC));
	verify(jil_widget_p->GetAttribute(WIDGET_JIL_ACCESS_ATTR_REMOTE_SCRIPTS) == FALSE);

	verify_string(jil_widget_p->GetAttribute(WIDGET_CONTENT_ATTR_CHARSET), "utf-8");
	verify_string(jil_widget_p->GetAttribute(WIDGET_CONTENT_ATTR_SRC), "index.html");
	verify_string(jil_widget_p->GetAttribute(WIDGET_CONTENT_ATTR_TYPE), "text/html");

	verify_string(jil_widget_p->GetAttribute(WIDGET_UPDATE_ATTR_URI), "http://www.jil.org/widgets/");
	verify(jil_widget_p->GetAttribute(WIDGET_UPDATE_ATTR_JIL_PERIOD) == 1);

	verify(jil_widget_p->GetAttribute(WIDGET_JIL_ATTR_MAXIMUM_HEIGHT) == 200);
	verify(jil_widget_p->GetAttribute(WIDGET_JIL_ATTR_MAXIMUM_WIDTH) == 100);

	verify(jil_widget_p->GetAttribute(WIDGET_JIL_ATTR_BILLING) == FALSE);

	// TODO : Add some icons to wgt
	verify(jil_widget_p->GetGadgetIconCount() == 1);
	INT32 icon_height, icon_width;
	OpString icon_path;
	verify_success(jil_widget_p->GetGadgetIcon(0, icon_path, icon_width, icon_height, FALSE));
	verify(icon_width == 64);
	verify(icon_height == 64);

	verify_string(icon_path, PATHSEP  "imgs" PATHSEP "icon.png");

}

test("Has feature")
	require success "Loading JIL widget";
	require DOM_JIL_API_SUPPORT;
{
	verify(jil_widget_p->IsFeatureRequested(UNI_L("http://jil.org/jil/api/1.1/filesystem")));
	verify(FALSE == jil_widget_p->IsFeatureRequested(UNI_L("non-existent")));
}

// -- BIDI tests ---------------------------------------------------------

table dummybidi(const char *) filelist "testfiles/widgets/bidi_widget.wgt" recursively;

test("Loading BIDI widget")
	file zip_file "testfiles/widgets/bidi_widget.wgt";
{
	bidi_widget_p = OP_NEW(OpGadgetClass, ());
	verify(bidi_widget_p);

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	verify_success(bidi_widget_p->Construct(zip_file_path, URL_GADGET_INSTALL_CONTENT));
	OP_STATUS rc = bidi_widget_p->LoadInfoFromInfoFile(error_str);
	if (error_str.HasContent()) output("\nFailed: \"%s\" ", ST_down(error_str.CStr()));
	verify_success(rc);
	verify(error_str.IsEmpty());
	verify(!bidi_widget_p->HasURLFilterAccess());
}

test("DIR/SPAN")
	require success "Loading BIDI widget";
{
	verify_string(bidi_widget_p->GetAttribute(WIDGET_AUTHOR_TEXT),  UNI_L("\x202d\x202d\x05E7\x05D7\x202c\x05DC\x05DC\x202e\x05DD\x05E4\x202c\x202c"));
}

table dummybidi2(const char *) filelist "testfiles/widgets/CORE-32664.wgt" recursively;

test("Loading BIDI 2 widget")
	file zip_file "testfiles/widgets/CORE-32664.wgt";
{
	bidi2_widget_p = OP_NEW(OpGadgetClass, ());
	verify(bidi2_widget_p);

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	verify_success(bidi2_widget_p->Construct(zip_file_path, URL_GADGET_INSTALL_CONTENT));
	OP_STATUS rc = bidi2_widget_p->LoadInfoFromInfoFile(error_str);
	if (error_str.HasContent()) output("\nFailed: \"%s\" ", ST_down(error_str.CStr()));
	verify_success(rc);
	verify(error_str.IsEmpty());
	verify(!bidi2_widget_p->HasURLFilterAccess());
}

test("CORE-32664: DIR attribute for attribute values")
	require success "Loading BIDI 2 widget";
{
	verify_string(bidi2_widget_p->GetAttribute(WIDGET_NAME_SHORT), UNI_L("\x202e\x0044\x0045SSAP\x202c"));
}

// -- Extension related tests --------------------------------------------

table dummy6(const char *) filelist "testfiles/extensions/selftest.oex" recursively;

test("Loading basic extension widget")
	require EXTENSION_SUPPORT;
	file zip_file "testfiles/extensions/selftest.oex";
{
	basic_extension_p = OP_NEW(OpGadgetClass, ());
	verify(basic_extension_p);

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	verify_success(basic_extension_p->Construct(zip_file_path, URL_EXTENSION_INSTALL_CONTENT));
	OP_STATUS rc = basic_extension_p->LoadInfoFromInfoFile(error_str);
	if (error_str.HasContent()) output("\nFailed: \"%s\" ", ST_down(error_str.CStr()));
	verify_success(rc);
	verify(error_str.IsEmpty());
	verify(basic_extension_p->IsExtension());
	verify(!basic_extension_p->HasURLFilterAccess());
}

test("Test W3C widget is dockable")
	require success "Loading W3C widget";
{
	verify(w3c_widget_p->IsDockable());
}

table dummy_no_dockable(const char *) filelist "testfiles/widgets/opera_widget_no_dockable.wgt" recursively;

test("Loading Opera widget without dockable attr")
	file zip_file "testfiles/widgets/opera_widget_no_dockable.wgt";
{
	opera_widget_no_dockable_p = OP_NEW(OpGadgetClass, ());
	verify(opera_widget_no_dockable_p);

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	verify_success(opera_widget_no_dockable_p->Construct(zip_file_path, URL_GADGET_INSTALL_CONTENT));
	OP_STATUS rc = opera_widget_no_dockable_p->LoadInfoFromInfoFile(error_str);
	if (error_str.HasContent()) output("\nFailed: \"%s\" ", ST_down(error_str.CStr()));
	verify_success(rc);
	verify(error_str.IsEmpty());
}

test("Test Opera widget without dockable attr is not dockable")
	require success "Loading Opera widget without dockable attr";
{
	verify(!opera_widget_no_dockable_p->IsDockable());
}
table dummy_dockable(const char *) filelist "testfiles/widgets/opera_widget_dockable.wgt" recursively;

test("Loading Opera widget with dockable='true'")
	file zip_file "testfiles/widgets/opera_widget_dockable.wgt";
{
	opera_widget_dockable_p = OP_NEW(OpGadgetClass, ());
	verify(opera_widget_dockable_p);

	OpString zip_file_path;
	verify_success(zip_file_path.Set(zip_file));
	verify_success(opera_widget_dockable_p->Construct(zip_file_path, URL_GADGET_INSTALL_CONTENT));
	OP_STATUS rc = opera_widget_dockable_p->LoadInfoFromInfoFile(error_str);
	if (error_str.HasContent()) output("\nFailed: \"%s\" ", ST_down(error_str.CStr()));
	verify_success(rc);
	verify(error_str.IsEmpty());
}

test("Test Opera widget with dockable='true' is dockable")
	require success "Loading Opera widget with dockable='true'";
{
	verify(opera_widget_dockable_p->IsDockable());
}

// -- Global cleanup -----------------------------------------------------

exit
{
	OP_DELETE(w3c_widget_p);
	OP_DELETE(selftest_widget_p);
	OP_DELETE(legacy_widget_p);
	OP_DELETE(minimalconfig_p);
	OP_DELETE(runtime_p);
	OP_DELETE(widgetfolder_p);
	OP_DELETE(fail_p);
	OP_DELETE(utf8_widget_p);
	OP_DELETE(jil_widget_p);
	OP_DELETE(basic_extension_p);
	OP_DELETE(full_extension_p);
	OP_DELETE(broken_panel_p);
	OP_DELETE(bidi_widget_p);
	OP_DELETE(bidi2_widget_p);
	OP_DELETE(w3c_with_opera_api_p);
	OP_DELETE(opera_widget_p);
	OP_DELETE(icons_widget_p);
	OP_DELETE(opera_widget_dockable_p);
	OP_DELETE(opera_widget_no_dockable_p);
}
