/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2007 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

// All data for this test (widget, certificates etc.) are in gadget_signing_ot.zip file.

group "gadgets.signing";

require GADGET_SUPPORT;
require SIGNED_GADGET_SUPPORT;

include "modules/security_manager/include/security_manager.h";
include "modules/url/url_api.h";
include "modules/url/url2.h";
include "modules/doc/frm_doc.h";
include "modules/dochand/win.h";
include "modules/gadgets/OpGadget.h";
include "modules/gadgets/OpGadgetManager.h";
include "modules/libcrypto/include/CryptoCertificate.h";
include "modules/gadgets/gadget_selftest_utils.h";


global
{
	OpString widget_path;
	OpGadget *gadget = NULL;

	GadgetSelftestUtils g_utils;

	// W3C widget-digsig testsuite root cert.
	// Subject: C=NO, ST=Oslo, L=Oslo, O=World Wide Web Consortium,
	// OU=w3c-widgets-digsig-testsuite root certificate,
	// CN=http://www.w3.org//emailAddress=stuartk@opera.com
	const char * ca_cert =
		"MIIFgDCCBGigAwIBAgIJAMTqFP/Wa8uAMA0GCSqGSIb3DQEBBQUAMIHGMQswCQYD"
		"VQQGEwJOTzENMAsGA1UECBMET3NsbzENMAsGA1UEBxMET3NsbzEiMCAGA1UEChMZ"
		"V29ybGQgV2lkZSBXZWIgQ29uc29ydGl1bTE2MDQGA1UECxMtdzNjLXdpZGdldHMt"
		"ZGlnc2lnLXRlc3RzdWl0ZSByb290IGNlcnRpZmljYXRlMRswGQYDVQQDExJodHRw"
		"Oi8vd3d3LnczLm9yZy8xIDAeBgkqhkiG9w0BCQEWEXN0dWFydGtAb3BlcmEuY29t"
		"MB4XDTEwMDkyNDA4NDYxMVoXDTMwMDkxOTA4NDYxMVowgcYxCzAJBgNVBAYTAk5P"
		"MQ0wCwYDVQQIEwRPc2xvMQ0wCwYDVQQHEwRPc2xvMSIwIAYDVQQKExlXb3JsZCBX"
		"aWRlIFdlYiBDb25zb3J0aXVtMTYwNAYDVQQLEy13M2Mtd2lkZ2V0cy1kaWdzaWct"
		"dGVzdHN1aXRlIHJvb3QgY2VydGlmaWNhdGUxGzAZBgNVBAMTEmh0dHA6Ly93d3cu"
		"dzMub3JnLzEgMB4GCSqGSIb3DQEJARYRc3R1YXJ0a0BvcGVyYS5jb20wggEiMA0G"
		"CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQD0okvuqUT0R6aXgXipQeI6hU0uhfv4"
		"dg64naVT/Nlowbdal9BbNPsk6EQEVN1NRQzkhfUDCtLfbH6UpOnXv0SZzZutbIXX"
		"MmaZVcfupFVNfqCTgOX+xO6L060k8B2LGrDJ/UB/xKplIhDiGM8HNqH5SmtJlgj6"
		"IGtxGwlMSrg5zR6Fuio268YRuYlEkBILOh/YveztqspAsutucyRN23WsVZWsBt5G"
		"dXy09Z5Uae1fQLe3+cYeJ6gopqB2uJmUzkWPcOX3YQxSulo3SlpOLfLQBZwFy8dh"
		"859MkKLNs3RKq8UAwS5TpNG93Dps8+W+t206MrZAjMG0rw582fYprcMHAgMBAAGj"
		"ggFtMIIBaTAMBgNVHRMEBTADAQH/MB0GA1UdDgQWBBTy0/Kw6ZgHtZ6oV9kRqvRX"
		"uOpHuDCB+wYDVR0jBIHzMIHwgBTy0/Kw6ZgHtZ6oV9kRqvRXuOpHuKGBzKSByTCB"
		"xjELMAkGA1UEBhMCTk8xDTALBgNVBAgTBE9zbG8xDTALBgNVBAcTBE9zbG8xIjAg"
		"BgNVBAoTGVdvcmxkIFdpZGUgV2ViIENvbnNvcnRpdW0xNjA0BgNVBAsTLXczYy13"
		"aWRnZXRzLWRpZ3NpZy10ZXN0c3VpdGUgcm9vdCBjZXJ0aWZpY2F0ZTEbMBkGA1UE"
		"AxMSaHR0cDovL3d3dy53My5vcmcvMSAwHgYJKoZIhvcNAQkBFhFzdHVhcnRrQG9w"
		"ZXJhLmNvbYIJAMTqFP/Wa8uAMDwGCWCGSAGG+EIBDQQvFi13M2Mtd2lkZ2V0cy1k"
		"aWdzaWctdGVzdHN1aXRlIHJvb3QgY2VydGlmaWNhdGUwDQYJKoZIhvcNAQEFBQAD"
		"ggEBAKkclYuZ15/Z+0qpH3mLml8YBVzN0W0Aoa7lzlBIiDgEZpOYmcZBJ+Q3lDNI"
		"w65qOL4iv1BYE7zdqIi+JxmCCfav0xte+Vj05XPbP97IMBFAN8lrPY/zk0Umokhf"
		"8rdSpXsDtIzczHVsfW/DKUHdVKpSPYcZDB90WzgZmNW7732XFN/ufVSkwoNsyRCt"
		"5sae0OwvXEgMxnqlSYmtkz4MWqEqJMXmFIUVfrVQad+KfbDjx8bNTXhQGjAF4PiR"
		"ysiWBrgy/EwCk2F/WKzzrWmofYP7VgPJqlj+DLEfN5q7GobYExEL4J51QbelKzAn"
		"h/CUKeU/J64wZaG70AZXz8Sz4IU=";
}

setup
{
}

exit
{
	g_utils.UnloadGadget();
}

test("Load gadget")
	file zip_file "testfiles/widgets/signed_widget.wgt";
	async;
{
	OP_GADGET_STATUS status = g_utils.LoadGadgetForSelftest(zip_file, URL_GADGET_INSTALL_CONTENT, &gadget);

	if (OpStatus::IsError(status))
		ST_failed("Unable to install test widget, status: %d", status);
	else if (status != OpGadgetStatus::OK_SIGNATURE_VERIFICATION_IN_PROGRESS)
		ST_passed();
}

test("Is signed")
	require success "Load gadget";
{
	verify(gadget->GetClass()->SignatureState() == GADGET_SIGNATURE_SIGNED);
}

test("Check unprivileged")
	require GADGET_PRIVILEGED_SIGNING_SUPPORT;
	require success "Is signed";
{
	verify(gadget->GetClass()->SignatureState() == GADGET_SIGNATURE_SIGNED);
	verify(gadget->GetClass()->IsSignedWithPrivilegedCert() == FALSE);
}

test("Check privileged")
	require GADGET_PRIVILEGED_SIGNING_SUPPORT;
	require success "Is signed";
{
	CryptoCertificate * certificate;
	OP_STATUS certificate_creation_status = CryptoCertificate::CreateBase64(certificate, ca_cert, op_strlen(ca_cert));
	verify(certificate_creation_status == OpStatus::OK);

	g_secman_instance->SetGadgetPrivilegedCA(certificate);

	gadget->Reload();	// Verifies signature again

	verify(gadget->GetClass()->SignatureState() == GADGET_SIGNATURE_SIGNED);
	verify(gadget->GetClass()->IsSignedWithPrivilegedCert() == TRUE);
}
finally {
	g_secman_instance->SetGadgetPrivilegedCA(NULL);
}
