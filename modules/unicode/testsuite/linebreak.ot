/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2007-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "unicode.linebreak";
require USE_UNICODE_LINEBREAK;

include "modules/unicode/unicode.h";
include "modules/unicode/unicode_segmenter.h";

test("Linebreak LB2")
{
	// sot x
	verify(!Unicode::IsLinebreakOpportunity(0, 'a', FALSE));
	verify(!Unicode::IsLinebreakOpportunity(0, 'a', TRUE));
}

test("Linebreak LB3")
{
	// + eot
	verify( Unicode::IsLinebreakOpportunity('a', 0, FALSE));
	verify( Unicode::IsLinebreakOpportunity('a', 0, TRUE));
}

test("Linebreak LB4")
{
	// BK !
	verify( Unicode::IsLinebreakOpportunity(0x2028, 'a', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x2028, 'a', TRUE));
	verify( Unicode::IsLinebreakOpportunity(0x2029, 'a', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x2029, 'a', TRUE));
}

test("Linebreak LB5")
{
	// CR x LF
	verify(!Unicode::IsLinebreakOpportunity(0x0D, 0x0A, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x0D, 0x0A, TRUE));

	// CR !
	verify( Unicode::IsLinebreakOpportunity(0x0D, 'a', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x0D, 'a', TRUE));

	// LF !
	verify( Unicode::IsLinebreakOpportunity(0x0A, 'b', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x0A, 'b', TRUE));

	// NL !
	verify( Unicode::IsLinebreakOpportunity(0x85, 'b', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x85, 'b', TRUE));
}

test("Linebreak LB6")
{
	// x (BK | CR | LF | NL)

	verify(!Unicode::IsLinebreakOpportunity('a', 0x2028, FALSE));
	verify(!Unicode::IsLinebreakOpportunity('a', 0x2029, TRUE));
	verify(!Unicode::IsLinebreakOpportunity('b', 0x0D, FALSE));
	verify(!Unicode::IsLinebreakOpportunity('b', 0x0D, TRUE));
	verify(!Unicode::IsLinebreakOpportunity('b', 0x0A, FALSE));
	verify(!Unicode::IsLinebreakOpportunity('b', 0x0A, TRUE));
	verify(!Unicode::IsLinebreakOpportunity('b', 0x85, FALSE));
	verify(!Unicode::IsLinebreakOpportunity('b', 0x85, TRUE));
}

test("Linebreak LB7")
{
	// x SP
	// Untestable as such due to space separation being handled outside
	// the algorithm:
	//verify(!Unicode::IsLinebreakOpportunity('a', ' ', FALSE));
	//verify( Unicode::IsLinebreakOpportunity('a', ' ', TRUE));

	// x ZW
	verify(!Unicode::IsLinebreakOpportunity('a', 0x200B, FALSE));
	verify(!Unicode::IsLinebreakOpportunity('a', 0x200B, TRUE));
}

test("Linebreak LB8")
{
	// ZW SP* +
	verify( Unicode::IsLinebreakOpportunity(0x200B, 'a', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x200B, 'a', TRUE));
}

// LB9-10 is AL CM* -> AL

test("Linebreak LB11")
{
	// x WJ
	verify(!Unicode::IsLinebreakOpportunity('A', 0x2060, FALSE));
	verify(!Unicode::IsLinebreakOpportunity('A', 0x2060, TRUE));

	// WJ x
	verify(!Unicode::IsLinebreakOpportunity(0x2060, 'A', FALSE));
	verify(!Unicode::IsLinebreakOpportunity(0x2060, 'A', TRUE));
}

test("Linebreak LB12")
{
	// GL x
	verify(!Unicode::IsLinebreakOpportunity(0x00A0, 'A', FALSE));
	verify(!Unicode::IsLinebreakOpportunity(0x034F, 'A', FALSE));
	verify(!Unicode::IsLinebreakOpportunity(0x0F08, 'A', FALSE));
	verify(!Unicode::IsLinebreakOpportunity(0x2007, 'A', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x00A0, 'A', TRUE));
	verify( Unicode::IsLinebreakOpportunity(0x034F, 'A', TRUE));
	verify( Unicode::IsLinebreakOpportunity(0x0F08, 'A', TRUE));
	verify( Unicode::IsLinebreakOpportunity(0x2007, 'A', TRUE));
}

test("Linebreak LB12a")
{
	// [^SP BA HY] x GL
	verify(!Unicode::IsLinebreakOpportunity('A', 0x00A0, FALSE));
	verify(!Unicode::IsLinebreakOpportunity('A', 0x034F, FALSE));
	verify(!Unicode::IsLinebreakOpportunity('A', 0x0F08, FALSE));
	verify(!Unicode::IsLinebreakOpportunity('A', 0x2007, FALSE));
	verify( Unicode::IsLinebreakOpportunity('A', 0x00A0, TRUE));
	verify( Unicode::IsLinebreakOpportunity('A', 0x034F, TRUE));
	verify( Unicode::IsLinebreakOpportunity('A', 0x0F08, TRUE));
	verify( Unicode::IsLinebreakOpportunity('A', 0x2007, TRUE));
}

test("Linebreak LB13")
{
	// x CL
	verify(!Unicode::IsLinebreakOpportunity('A', '}', FALSE));
	verify(!Unicode::IsLinebreakOpportunity('A', '}', TRUE));
	verify(!Unicode::IsLinebreakOpportunity(0x30F0, '}', FALSE));
	verify(!Unicode::IsLinebreakOpportunity(0x30F0, '}', TRUE));

	// x CP
	verify(!Unicode::IsLinebreakOpportunity('A', ')', FALSE));
	verify(!Unicode::IsLinebreakOpportunity('A', ')', TRUE));
	verify(!Unicode::IsLinebreakOpportunity(0x30F0, ']', FALSE));
	verify(!Unicode::IsLinebreakOpportunity(0x30F0, ']', TRUE));

	// x EX
	verify(!Unicode::IsLinebreakOpportunity('A', '!', FALSE));
	verify(!Unicode::IsLinebreakOpportunity('A', '!', TRUE));
	verify(!Unicode::IsLinebreakOpportunity(0x3074, '!', FALSE));
	verify(!Unicode::IsLinebreakOpportunity(0x3074, '!', TRUE));

	// x IS
	verify(!Unicode::IsLinebreakOpportunity('2', ',', FALSE));
	verify(!Unicode::IsLinebreakOpportunity('2', ',', TRUE));

	// (AL | IS) SP+ + IS (CORE-100)
	verify(!Unicode::IsLinebreakOpportunity('A', ',', FALSE));
	verify(Unicode::IsLinebreakOpportunity('A', ',', TRUE));
	verify(!Unicode::IsLinebreakOpportunity(',', ',', FALSE));
	verify(Unicode::IsLinebreakOpportunity(',', ',', TRUE));

	// x SY
	verify(!Unicode::IsLinebreakOpportunity('2', '/', FALSE));
	verify(!Unicode::IsLinebreakOpportunity('2', '/', TRUE));
}

test("Linebreak LB14")
{
	// OP SP* x
	verify(!Unicode::IsLinebreakOpportunity('(', 'A', FALSE));
	verify(!Unicode::IsLinebreakOpportunity('(', 'A', TRUE));

	verify(!Unicode::IsLinebreakOpportunity('{', 0x0391, FALSE));
	verify(!Unicode::IsLinebreakOpportunity('{', 0x0391, TRUE));
}

test("Linebreak LB15")
{
	// QU SP* x OP
	verify(!Unicode::IsLinebreakOpportunity('\'', '(', FALSE));
	verify(!Unicode::IsLinebreakOpportunity('\'', '(', TRUE));

	verify(!Unicode::IsLinebreakOpportunity(0x201D, '{', FALSE));
	verify(!Unicode::IsLinebreakOpportunity(0x201D, '{', TRUE));
}

test("Linebreak LB16")
{
	// (CL | CP) SP* x NS
	verify(!Unicode::IsLinebreakOpportunity(')', 0x203C, FALSE));
	verify(!Unicode::IsLinebreakOpportunity(')', 0x203C, TRUE));
	verify(!Unicode::IsLinebreakOpportunity('}', 0x203C, FALSE));
	verify(!Unicode::IsLinebreakOpportunity('}', 0x203C, TRUE));
	verify(!Unicode::IsLinebreakOpportunity(0x2046, 0xFF1A, FALSE));
	verify(!Unicode::IsLinebreakOpportunity(0x2046, 0xFF1A, TRUE));

	// CJ behaves like NS, implementing CSS strict breaking
	// (CL | CP) SP* x CJ
	verify(!Unicode::IsLinebreakOpportunity(')', 0xFF69, FALSE));
	verify(!Unicode::IsLinebreakOpportunity(')', 0xFF69, TRUE));
	verify(!Unicode::IsLinebreakOpportunity('}', 0xFF69, FALSE));
	verify(!Unicode::IsLinebreakOpportunity('}', 0xFF69, TRUE));
}

test("Linebreak LB17")
{
	// B2 SP* x B2
	verify(!Unicode::IsLinebreakOpportunity(0x2014, 0x2014, FALSE));
	verify(!Unicode::IsLinebreakOpportunity(0x2014, 0x2014, TRUE));
}

test("Linebreak LB18")
{
	// SP +
	//verify( Unicode::IsLinebreakOpportunity(' ', 'a', FALSE));
	verify( Unicode::IsLinebreakOpportunity('a', 'a', TRUE));
}

test("Linebreak LB19")
{
	// x QU
	verify(!Unicode::IsLinebreakOpportunity('a', 0x201D, FALSE));
	verify( Unicode::IsLinebreakOpportunity('a', 0x201D, TRUE));

	// QU x
	verify(!Unicode::IsLinebreakOpportunity(0x201D, 'a', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x201D, 'a', TRUE));
}

test("Linebreak LB20")
{
	// + CB
	verify( Unicode::IsLinebreakOpportunity('a', 0xFFFC, FALSE));
	verify( Unicode::IsLinebreakOpportunity('a', 0xFFFC, TRUE));

	// CB +
	verify( Unicode::IsLinebreakOpportunity(0xFFFC, 'a', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0xFFFC, 'a', TRUE));
}

test("Linebreak LB21")
{
	// x BA
	verify(!Unicode::IsLinebreakOpportunity('a', '|', FALSE));
	verify( Unicode::IsLinebreakOpportunity('a', '|', TRUE));

	// x HY
	verify(!Unicode::IsLinebreakOpportunity('a', '-', FALSE));
	verify( Unicode::IsLinebreakOpportunity('a', '-', TRUE));

	// CJ behaves like NS, implementing CSS strict breaking
	// x CJ
	verify(!Unicode::IsLinebreakOpportunity('a', 0xFF69, FALSE));
	verify( Unicode::IsLinebreakOpportunity('a', 0xFF69, TRUE));

	// x NS
	verify(!Unicode::IsLinebreakOpportunity('a', 0x203C, FALSE));
	verify( Unicode::IsLinebreakOpportunity('a', 0x203C, TRUE));

	// BB x
	verify(!Unicode::IsLinebreakOpportunity(0x00B4, 'a', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x00B4, 'a', TRUE));
}

test("Linebreak LB21a")
{
	// HL HY x
	// not supported in pair lookup - check that we do not allow break inside
	verify(!Unicode::IsLinebreakOpportunity(0x05D0, '-', FALSE));

	// HL BA x
	// not supported in pair lookup - check that we do not allow break inside
	verify(!Unicode::IsLinebreakOpportunity(0x05D0, 0x2010, FALSE));
}

test("Linebreak LB22")
{
	// AL x IN
	verify(!Unicode::IsLinebreakOpportunity('X', 0x2026, FALSE));
	verify( Unicode::IsLinebreakOpportunity('X', 0x2026, TRUE));

	// HL x IN
	verify(!Unicode::IsLinebreakOpportunity(0x05D0, 0x2026, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x05D0, 0x2026, TRUE));

	// ID x IN
	verify(!Unicode::IsLinebreakOpportunity(0x4E00, 0xFE19, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x4E00, 0xFE19, TRUE));

	// IN x IN
	verify(!Unicode::IsLinebreakOpportunity(0x2024, 0x2025, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x2024, 0x2025, TRUE));

	// NU x IN
	verify(!Unicode::IsLinebreakOpportunity('0', 0x2026, FALSE));
	verify( Unicode::IsLinebreakOpportunity('0', 0x2026, TRUE));
}

test("Linebreak LB23")
{
	// ID x PO
	verify(!Unicode::IsLinebreakOpportunity(0x2E81, '%', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x2E81, '%', TRUE));

	// AL x NU
	verify(!Unicode::IsLinebreakOpportunity('a', '9', FALSE));
	verify( Unicode::IsLinebreakOpportunity('a', '9', TRUE));

	// HL x NU
	verify(!Unicode::IsLinebreakOpportunity(0x05D0, '9', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x05D0, '9', TRUE));

	// NU x AL
	verify(!Unicode::IsLinebreakOpportunity('3', 'a', FALSE));
	verify( Unicode::IsLinebreakOpportunity('3', 'a', TRUE));

	// NU x HL
	verify(!Unicode::IsLinebreakOpportunity('3', 0x05D0, FALSE));
	verify( Unicode::IsLinebreakOpportunity('3', 0x05D0, TRUE));
}

test("Linebreak LB24")
{
	// PR x ID
	verify(!Unicode::IsLinebreakOpportunity('$', 0x2E81, FALSE));
	verify( Unicode::IsLinebreakOpportunity('$', 0x2E81, TRUE));

	// PR x AL
	verify(!Unicode::IsLinebreakOpportunity('+', 'F', FALSE));
	verify( Unicode::IsLinebreakOpportunity('+', 'F', TRUE));

	// PR x HL
	verify(!Unicode::IsLinebreakOpportunity('+', 0x05D0, FALSE));
	verify( Unicode::IsLinebreakOpportunity('+', 0x05D0, TRUE));

	// PO x AL
	verify(!Unicode::IsLinebreakOpportunity('%', 0x391, FALSE));
	verify( Unicode::IsLinebreakOpportunity('%', 0x391, TRUE));

	// PO x HL
	verify(!Unicode::IsLinebreakOpportunity('%', 0x05D0, FALSE));
	verify( Unicode::IsLinebreakOpportunity('%', 0x05D0, TRUE));

	// PR % PR
	verify(!Unicode::IsLinebreakOpportunity('+', '+', FALSE));
	verify(!Unicode::IsLinebreakOpportunity('-', '-', FALSE));
	verify(!Unicode::IsLinebreakOpportunity('\\', '\\', FALSE));
	verify(!Unicode::IsLinebreakOpportunity('$', '$', FALSE));

	verify(Unicode::IsLinebreakOpportunity('+', '+', TRUE));
	verify(Unicode::IsLinebreakOpportunity('-', '-', TRUE));
	verify(Unicode::IsLinebreakOpportunity('\\', '\\', TRUE));
	verify(Unicode::IsLinebreakOpportunity('$', '$', TRUE));
}

test("Linebreak LB25")
{
	// CL x PO
	verify(!Unicode::IsLinebreakOpportunity('}', '%', FALSE));
	verify( Unicode::IsLinebreakOpportunity('}', '%', TRUE));

	// CP x PO
	verify(!Unicode::IsLinebreakOpportunity(')', '%', FALSE));
	verify( Unicode::IsLinebreakOpportunity(')', '%', TRUE));

	// CL x PR
	verify(!Unicode::IsLinebreakOpportunity('}', '+', FALSE));
	verify( Unicode::IsLinebreakOpportunity('}', '+', TRUE));

	// CP x PR
	verify(!Unicode::IsLinebreakOpportunity(')', '+', FALSE));
	verify( Unicode::IsLinebreakOpportunity(')', '+', TRUE));

	// NU x PO
	verify(!Unicode::IsLinebreakOpportunity('0', '%', FALSE));
	verify( Unicode::IsLinebreakOpportunity('0', '%', TRUE));

	// NU x PR
	verify(!Unicode::IsLinebreakOpportunity('1', '\\', FALSE));
	verify( Unicode::IsLinebreakOpportunity('1', '\\', TRUE));

	// PO x OP
	verify(!Unicode::IsLinebreakOpportunity('%', '[', FALSE));
	verify( Unicode::IsLinebreakOpportunity('%', '[', TRUE));

	// PO x NU
	verify(!Unicode::IsLinebreakOpportunity('%', '9', FALSE));
	verify( Unicode::IsLinebreakOpportunity('%', '9', TRUE));

	// PR x OP
	verify(!Unicode::IsLinebreakOpportunity('$', '{', FALSE));
	verify( Unicode::IsLinebreakOpportunity('$', '{', TRUE));

	// PR x NU
	verify(!Unicode::IsLinebreakOpportunity('+', '3', FALSE));
	verify( Unicode::IsLinebreakOpportunity('+', '3', TRUE));

	// HY x NU
	verify(!Unicode::IsLinebreakOpportunity('-', '2', FALSE));
	verify( Unicode::IsLinebreakOpportunity('-', '2', TRUE));

	// IS x NU
	verify(!Unicode::IsLinebreakOpportunity(',', '3', FALSE));
	verify( Unicode::IsLinebreakOpportunity(',', '3', TRUE));

	// NU x NU
	verify(!Unicode::IsLinebreakOpportunity('4', '2', FALSE));
	verify( Unicode::IsLinebreakOpportunity('4', '2', TRUE));

	// SY x NU
	verify(!Unicode::IsLinebreakOpportunity('/', 0x660, FALSE));
	verify( Unicode::IsLinebreakOpportunity('/', 0x660, TRUE));
}

test("Linebreak LB26")
{
	// JL x JL
	verify(!Unicode::IsLinebreakOpportunity(0x1100, 0x1101, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x1100, 0x1101, TRUE));

	// JL x JV
	verify(!Unicode::IsLinebreakOpportunity(0x1102, 0x1160, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x1102, 0x1160, TRUE));

	// JL x H2
	verify(!Unicode::IsLinebreakOpportunity(0x1103, 0xAC00, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x1103, 0xAC00, TRUE));

	// JL x H3
	verify(!Unicode::IsLinebreakOpportunity(0x1104, 0xAC01, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x1104, 0xAC01, TRUE));

	// JV x JV
	verify(!Unicode::IsLinebreakOpportunity(0x1161, 0x1162, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x1161, 0x1162, TRUE));

	// H2 x JV
	verify(!Unicode::IsLinebreakOpportunity(0xAC1C, 0x1163, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0xAC1C, 0x1163, TRUE));

	// JV x JT
	verify(!Unicode::IsLinebreakOpportunity(0x1164, 0x11A8, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x1164, 0x11A8, TRUE));

	// H2 x JT
	verify(!Unicode::IsLinebreakOpportunity(0xAC38, 0x11A9, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0xAC38, 0x11A9, TRUE));

	// JT x JT
	verify(!Unicode::IsLinebreakOpportunity(0x11AA, 0x11AB, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x11AA, 0x11AB, TRUE));

	// H3 x JT
	verify(!Unicode::IsLinebreakOpportunity(0xAC02, 0x11AC, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0xAC02, 0x11AC, TRUE));
}

test("Linebreak LB27")
{
	// JL x IN
	verify(!Unicode::IsLinebreakOpportunity(0x1100, 0x2026, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x1100, 0x2026, TRUE));

	// JV x IN
	verify(!Unicode::IsLinebreakOpportunity(0x1160, 0x2026, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x1160, 0x2026, TRUE));

	// JT x IN
	verify(!Unicode::IsLinebreakOpportunity(0x11A8, 0x2026, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x11A8, 0x2026, TRUE));

	// H2 x IN
	verify(!Unicode::IsLinebreakOpportunity(0xAC00, 0x2026, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0xAC00, 0x2026, TRUE));

	// H3 x IN
	verify(!Unicode::IsLinebreakOpportunity(0xAC01, 0x2026, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0xAC01, 0x2026, TRUE));

	// JL x PO
	verify(!Unicode::IsLinebreakOpportunity(0x1100, 0x2103, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x1100, 0x2103, TRUE));

	// JV x PO
	verify(!Unicode::IsLinebreakOpportunity(0x1160, 0x2103, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x1160, 0x2103, TRUE));

	// JT x PO
	verify(!Unicode::IsLinebreakOpportunity(0x11A8, 0x2103, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x11A8, 0x2103, TRUE));

	// H2 x PO
	verify(!Unicode::IsLinebreakOpportunity(0xAC00, 0x2103, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0xAC00, 0x2103, TRUE));

	// H3 x PO
	verify(!Unicode::IsLinebreakOpportunity(0xAC01, 0x2103, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0xAC01, 0x2103, TRUE));

	// PR x JL
	verify(!Unicode::IsLinebreakOpportunity(0x2116, 0x1100, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x2116, 0x1100, TRUE));

	// PR x JV
	verify(!Unicode::IsLinebreakOpportunity(0x2116, 0x1160, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x2116, 0x1160, TRUE));

	// PR x JT
	verify(!Unicode::IsLinebreakOpportunity(0x2116, 0x11A8, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x2116, 0x11A8, TRUE));

	// PR x H2
	verify(!Unicode::IsLinebreakOpportunity(0x2116, 0xAC00, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x2116, 0xAC00, TRUE));

	// PR x H3
	verify(!Unicode::IsLinebreakOpportunity(0x2116, 0xAC01, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x2116, 0xAC01, TRUE));
}

test("Linebreak LB28")
{
	// AL x AL
	verify(!Unicode::IsLinebreakOpportunity('x', 'y', FALSE));
	verify( Unicode::IsLinebreakOpportunity('x', 'y', TRUE));

	// AL x HL
	verify(!Unicode::IsLinebreakOpportunity('x', 0x05D0, FALSE));
	verify( Unicode::IsLinebreakOpportunity('x', 0x05D0, TRUE));

	// HL x AL
	verify(!Unicode::IsLinebreakOpportunity(0x05D0, 'y', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x05D0, 'y', TRUE));

	// HL x HL
	verify(!Unicode::IsLinebreakOpportunity(0x05D0, 0x05D0, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x05D0, 0x05D0, TRUE));
}


test("Linebreak LB29")
{
	// IS x AL
	verify(!Unicode::IsLinebreakOpportunity('.', 'f', FALSE));
	verify( Unicode::IsLinebreakOpportunity('.', 'f', TRUE));

	// IS x HL
	verify(!Unicode::IsLinebreakOpportunity('.', 0x05D0, FALSE));
	verify( Unicode::IsLinebreakOpportunity('.', 0x05D0, TRUE));
}

test("Linebreak LB30")
{
	// AL x OP
	//verify(!Unicode::IsLinebreakOpportunity('f', '(', FALSE));
	//verify( Unicode::IsLinebreakOpportunity('f', '(', TRUE));
	// CORE-5163: This rule is tailored to allow breaking
	// between alphabetics and opening punctuation: AL + OP
	verify( Unicode::IsLinebreakOpportunity('f', '(', FALSE));
	verify( Unicode::IsLinebreakOpportunity('f', '(', TRUE));

	// HL x OP
	verify(!Unicode::IsLinebreakOpportunity(0x05D0, '(', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x05D0, '(', TRUE));

	// NU x OP
	verify(!Unicode::IsLinebreakOpportunity('9', '(', FALSE));
	verify( Unicode::IsLinebreakOpportunity('9', '(', TRUE));

	// CP x AL
	verify(!Unicode::IsLinebreakOpportunity(']', 'A', FALSE));
	verify( Unicode::IsLinebreakOpportunity(']', 'A', TRUE));

	// CP x HL
	verify(!Unicode::IsLinebreakOpportunity(']', 0x05D0, FALSE));
	verify( Unicode::IsLinebreakOpportunity(']', 0x05D0, TRUE));

	// CP x NU
	verify(!Unicode::IsLinebreakOpportunity(')', '7', FALSE));
	verify( Unicode::IsLinebreakOpportunity(')', '7', TRUE));
}

test("Linebreak LB31")
{
	// ALL +
	// + ALL

	verify( Unicode::IsLinebreakOpportunity(0x4E00, 0x4E01, FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x4E00, 0x4E01, TRUE));

	verify( Unicode::IsLinebreakOpportunity('A', '%', FALSE));
	verify( Unicode::IsLinebreakOpportunity('A', '%', TRUE));

	verify( Unicode::IsLinebreakOpportunity('?', '3', FALSE));
	verify( Unicode::IsLinebreakOpportunity('?', '3', TRUE));

	verify( Unicode::IsLinebreakOpportunity('|', 0x4E00, FALSE));
	verify( Unicode::IsLinebreakOpportunity('|', 0x4E00, TRUE));

	verify( Unicode::IsLinebreakOpportunity('p', 0xB4, FALSE));
	verify( Unicode::IsLinebreakOpportunity('p', 0xB4, TRUE));
}

test("Linebreak bug CORE-5163: Break before opening parenthesis")
{
	// AL + OP
	verify( Unicode::IsLinebreakOpportunity('f', '(', FALSE));
	verify( Unicode::IsLinebreakOpportunity('f', '(', TRUE));
}

test("Linebreak bug CORE-11340: Ideographic comma and full stop should break")
{
	verify( Unicode::IsLinebreakOpportunity(0x3001, 'A', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x3001, 'A', TRUE));

	verify( Unicode::IsLinebreakOpportunity(0x3002, 'A', FALSE));
	verify( Unicode::IsLinebreakOpportunity(0x3002, 'A', TRUE));
}

constant BREAKS_LIST_SENTINEL = static_cast<size_t>(-1);

subtest test_linebreak(const uni_char *text, const size_t *break_opportunities)
{
	size_t i = 0;
	int oppidx = 0;
	size_t j = 1;
	verify(!Unicode::IsLinebreakOpportunity(0, text[i], FALSE));
	while (text[i])
	{
		BOOL space = FALSE;
		if (text[j] == ' ')
		{
			space = TRUE;
			while (text[j] == ' ')
				j ++;
		}
		if (Unicode::IsLinebreakOpportunity(text[i], text[j], space))
		{
			if (j != break_opportunities[oppidx])
			{
				/* Produce a readable error message */
				uni_char left[64], right[64]; /* ARRAY OK johanh 2010-12-03 */
				uni_strlcpy(left, text, MIN(j + 1, 64));
				uni_strlcpy(right, text + j, 64);
				output("\nGot break: %s|%s(%d) ", ST_down(left), ST_down(right), j);
				uni_strlcpy(left, text, MIN(break_opportunities[oppidx] + 1, 64));
				uni_strlcpy(right, text + break_opportunities[oppidx], 64);
				output("\nExpected:  %s|%s(%d) ", ST_down(left), ST_down(right), break_opportunities[oppidx]);
			}
			verify(j == break_opportunities[oppidx ++]);
		}

		i = j ++;
	}

	// Make sure we found all opportunities
	verify(break_opportunities[oppidx] == BREAKS_LIST_SENTINEL);
}

subtest test_linebreak2(const uni_char *text, const size_t *break_opportunities)
{
	size_t i = 0;
	int oppidx = 0;
	size_t j = 1;
	size_t len = uni_strlen(text);
	verify(!Unicode::IsLinebreakOpportunity(0, text, len, FALSE));
	while (i < len && j <= len)
	{
		BOOL space = FALSE;
		while (j < len &&
			   (text[j] == ' ' ||
				Unicode::GetLineBreakClass(text[j]) == LB_CM) ||
				!UnicodeSegmenter::IsGraphemeClusterBoundary(text[i], text[j]))
		{
			if (text[j] == ' ')
				space = TRUE;
			j ++;
		}
		if (Unicode::IsLinebreakOpportunity(text[i], text + j, len - j, space))
		{
			if (j != break_opportunities[oppidx])
			{
				/* Produce a readable error message */
				uni_char left[64], right[64]; /* ARRAY OK johanh 2010-12-03 */
				uni_strlcpy(left, text, MIN(j + 1, 64));
				uni_strlcpy(right, text + j, 64);
				output("\nGot break: %s|%s(%d) ", ST_down(left), ST_down(right), j);
				uni_strlcpy(left, text, MIN(break_opportunities[oppidx] + 1, 64));
				uni_strlcpy(right, text + break_opportunities[oppidx], 64);
				output("\nExpected:  %s|%s(%d) ", ST_down(left), ST_down(right), break_opportunities[oppidx]);
			}
			verify(j == break_opportunities[oppidx ++]);
		}

		i = j ++;
	}

	// Make sure we're at end of string
	verify(i == len);
	// Make sure we found all opportunities
	verify(break_opportunities[oppidx] == BREAKS_LIST_SENTINEL);
}

test("Linebreaking text 1")
{
	const uni_char *text1 =
		UNI_L("The quick\x2014\x62rown\x2014\x66ox jumped over the \x61D2\x60F0\x72D7!");
		//         ^    ^     ^       ^     ^      ^      ^    ^   ^     ^     ^      ^
		//         4    9     10      15    16     20     27   32  36    37    38     40
	const size_t breaks1[] =
		{ 4, 9, 10, 15, 16, 20, 27, 32, 36, 37, 38, 40, BREAKS_LIST_SENTINEL };
	verify(test_linebreak(text1, breaks1));
	verify(test_linebreak2(text1, breaks1));
}

test("Linebreaking text 2")
{
	const uni_char *text2 = UNI_L("\"f(7)\" is a function.");
	const size_t breaks2[] = {        2,    7, 10,12,     21, BREAKS_LIST_SENTINEL };
	verify(test_linebreak(text2, breaks2));
	verify(test_linebreak2(text2, breaks2));
}

test("Linebreaking text 3")
{
	const uni_char *text3 = UNI_L("super-duper-hyper-3.");
	const size_t breaks3[] = {           6,    12,     20, BREAKS_LIST_SENTINEL };
	verify(test_linebreak(text3, breaks3));
	verify(test_linebreak2(text3, breaks3));
}

test("Linebreaking text 4")
{
	const uni_char *text4 = UNI_L("2007-01-16 01/16/2007 16.01.2007");
	const size_t breaks4[] = {                11,        22,       32, BREAKS_LIST_SENTINEL };
	verify(test_linebreak(text4, breaks4));
	verify(test_linebreak2(text4, breaks4));
}

test("Linebreaking bug CORE-11340")
{
	const uni_char *text5 =
		UNI_L("\x3053\x3093\x3044\x3061\x306f\x3001\x3055\x3088\x306a\x3089\x3002");
		//           ^     ^     ^     ^           ^     ^     ^     ^           ^
		//           1,    2,    3,    4,          6,    7,    8,    9,          11
	const size_t breaks5[] =
		{ 1, 2, 3, 4, 6, 7, 8, 9, 11, BREAKS_LIST_SENTINEL };
	verify(test_linebreak(text5, breaks5));
	verify(test_linebreak2(text5, breaks5));
}

test("Linebreaking bug from Spartan test #10902")
{
	const uni_char *text6 =
		UNI_L("O\x0300O\x0301O\x0302O\x0303O\x0304\x00d8O\x0304O\x0306O\x030bO\x030cO\x0311");
		//                                                                                 ^
	const size_t breaks6[] = {                                                                 21, BREAKS_LIST_SENTINEL };
	verify(test_linebreak2(text6, breaks6));
}

test("Linebreak opportunity between well-known Thai words")
require UNICODE_FALLBACK_THAI_LINEBREAK;
{
	const uni_char *text7 =
		UNI_L("\x0e40\x0e1b\x0e47\x0e19\x0e2d\x0e22\x0e39\x0e48\x0e08\x0e30");
		//                             ^                       ^           ^
	const size_t breaks7[] = {             4,                      8,          10, BREAKS_LIST_SENTINEL };
	verify(test_linebreak2(text7, breaks7));
}

test("Linebreak opportunity before and after Thai text")
require UNICODE_FALLBACK_THAI_LINEBREAK;
{
	const uni_char *text8 =
		UNI_L("xyz\x0e40\x0e1b\x0e47\x0e19xyz");
		//        ^                       ^  ^
	const size_t breaks8[] = {3,              7, 10, BREAKS_LIST_SENTINEL };
	verify(test_linebreak2(text8, breaks8));
}

test("Combining marks do not affect Thai line breaking")
require UNICODE_FALLBACK_THAI_LINEBREAK;
{
	const uni_char *text9 =
		UNI_L("\x0e40\x0e1b\x0e47\x0e19\x0301\x0e2d\x0e22\x0e39\x0e48\x0308\x0e08\x0e30");
		//                                   ^                             ^           ^
	const size_t breaks9[] = {                   5,                            10,         12, BREAKS_LIST_SENTINEL };
	verify(test_linebreak2(text9, breaks9));
}
