/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2012 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "unicode.utf32";
require USE_UNICODE_UTF32;

include "modules/unicode/utf32.h";

global
{
	char buffer[1024]; /* ARRAY OK 2012-02-08 peter */
}

test("UTF-32: simple")
{
	const UnicodePoint input[] =
	{
		0x0000FEFF, 'A', 'B', 0x00003000, 0
	};
	const uni_char expect[] =
	{
		0xFEFF, 'A', 'B', 0x3000, 0
	};

	int read;
	UTF32Decoder decoder;
	verify(decoder.Convert(input, sizeof (input), buffer, sizeof (buffer), &read) == sizeof (expect));
	verify(read == sizeof (input));
	verify_string(reinterpret_cast<uni_char *>(buffer), expect);

	UTF32Encoder encoder(FALSE);
	verify(encoder.Convert(expect, sizeof (expect), buffer, sizeof (buffer), &read) == sizeof (input));
	verify(read == sizeof (expect));
	verify(op_memcmp(buffer, input, sizeof (input)) == 0);
}

test("UTF-32: non-BMP")
{
	// input outside bmp
	const UnicodePoint input[] =
	{
		0x0000FEFF, 'A', 'B', 'C', 0x00010000, 0x0010FFFF, 0
	};
	const uni_char expect[] =
	{
		0xFEFF, 'A', 'B', 'C', 0xD800, 0xDC00, 0xDBFF, 0xDFFF, 0
	};

	int read;
	UTF32Decoder decoder;
	verify(decoder.Convert(input, sizeof (input), buffer, sizeof (buffer), &read) == sizeof (expect));
	verify(read == sizeof (input));
	verify_string(reinterpret_cast<uni_char *>(buffer), expect);

	UTF32Encoder encoder(FALSE);
	verify(encoder.Convert(expect, sizeof (expect), buffer, sizeof (buffer), &read) == sizeof (input));
	verify(read == sizeof (expect));
	verify(op_memcmp(buffer, input, sizeof (input)) == 0);
}

test("UTF-32: codepoints outside Unicode")
{
	const UnicodePoint input[] = {
		0x00110000, 0
	};
	const uni_char expect[] = {
		0xFFFD, 0
	};

	int read;
	UTF32Decoder decoder;
	verify(decoder.Convert(input, sizeof (input), buffer, sizeof (buffer), &read) == sizeof (expect));
	verify(read == sizeof (input));
	verify_string(reinterpret_cast<uni_char *>(buffer), expect);
}

test("UTF-32: surrogate in input")
{
	const UnicodePoint input[] = {
		0x0000D800, 0x0000DC00, 0
	};
	const uni_char expect[] = {
		0xFFFD, 0xFFFD, 0
	};

	int read;
	UTF32Decoder decoder;
	verify(decoder.Convert(input, sizeof (input), buffer, sizeof (buffer), &read) == sizeof (expect));
	verify(read == sizeof (input));
	verify_string(reinterpret_cast<uni_char *>(buffer), expect);
}

test("UTF-32: unpaired surrogates in UTF-16")
{
	const uni_char input[] = {
		0xD800, 'A', 0xDC00, 'B', 0
	};
	const UnicodePoint expect[] = {
		0x0000FFFD, 'A', 0x0000FFFD, 'B', 0
	};

	int read;
	UTF32Encoder encoder(FALSE);
	verify(encoder.Convert(input, sizeof (input), buffer, sizeof (buffer), &read) == sizeof (expect));
	verify(read == sizeof (input));
	verify(op_memcmp(buffer, expect, sizeof (expect)) == 0);
}
