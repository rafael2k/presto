/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2005-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "unicode.properties";

include "modules/util/opfile/opfile.h";
include "modules/unicode/unicode.h";
include "modules/unicode/testsuite/unicode_selftest_utilities.h";

// -- Global variables ---------------------------------------------------

global
{
	char *testsuite_cls, *testsuite_bidi, *testsuite_lbt2,
		 *testsuite_wbt, *testsuite_sbt, *testsuite_script, *testsuite_blocks, 
		 *testsuite_joiningtype, *testsuite_proplist;
	uni_char *testsuite_lower, *testsuite_upper, *testsuite_mirror, *testsuite_casefolding_f;
	unsigned int *testsuite_casefolding_s;

	/**
	 * Read a test data table.
	 * @param file Name of file to read.
	 * @param bpc Bytes per character (1, 2 or 4).
	 */
	void *read_datafile(const uni_char *file, unsigned int bpc, unsigned int len = 65536, BOOL data_in_big_endian = TRUE)
	{
		// Read the entire table from the file
		OpFile fi;
		if (OpStatus::IsError(fi.Construct(file)))
		{
			return NULL;
		}

		if (OpStatus::IsError(fi.Open(OPFILE_READ)))
			return NULL;

		char *data = OP_NEWA(char, bpc * len);
		if (!data)
			return NULL;

		OpFileLength read;
		fi.Read(data, bpc * len, &read);
		fi.Close();

		// Make sure we got all data
		if (read < bpc * len)
		{
			OP_DELETEA(data);
			return NULL;
		}

		// If data is stored big-endian, then flip for little-endian builds.
#ifndef OPERA_BIG_ENDIAN
		BOOL correct_byte_order = data_in_big_endian;
#else
		BOOL correct_byte_order = !data_in_big_endian;
#endif
		if (correct_byte_order)
		{
			if (bpc == 2)
			{
				uni_char *udata = (uni_char *) data;
				for (unsigned int i = 0; i < len; i++)
					udata[i] = (udata[i] << 8) | (udata[i] >> 8);
			}
			else if (bpc == 4)
			{
				int *udata = (int *) data;
				for (unsigned int i = 0; i < len; i++)
					udata[i] = (udata[i] >> 24) | ((udata[i] << 8) & 0x00FF0000) | ((udata[i] >> 8) & 0x0000FF00) | (udata[i] << 24);
			}
		}
		return reinterpret_cast<void *>(data);
	}

}

setup
{
	testsuite_cls = testsuite_bidi =
		testsuite_lbt2 = testsuite_wbt = testsuite_sbt =
		testsuite_script = NULL;
	testsuite_lower = testsuite_upper = testsuite_mirror = NULL;
}

// -- Setup --------------------------------------------------------------

test("Loading test data")
	file uni cls_data	"../scripts/cls.dat";
	file uni bidi_data	"../scripts/bidi.dat";
	file uni lbt2_data	"../scripts/lbt2.dat";
	file uni wbt_data	"../scripts/wbt.dat";
	file uni sbt_data	"../scripts/sbt.dat";
	file uni lower_data "../scripts/lower.dat";
	file uni upper_data	"../scripts/upper.dat";
	file uni mirror_data "../scripts/mirror.dat";
	file uni script_data "../scripts/script.dat";
	file uni blocks_data "../scripts/blocks.dat";
	file uni joiningtype_data "../scripts/joiningtype.dat";
	file uni proplist_data "../scripts/proplist.dat";
	file uni casefolding_s_data "../scripts/scasefolding.dat";
	file uni casefolding_f_data "../scripts/fcasefolding.dat";
{
	testsuite_cls   = reinterpret_cast<char *>(read_datafile(cls_data, 1, 0x20000));
	testsuite_bidi  = reinterpret_cast<char *>(read_datafile(bidi_data, 1));
	testsuite_lbt2  = reinterpret_cast<char *>(read_datafile(lbt2_data, 1, 0x30000));
#ifdef USE_UNICODE_SEGMENTATION
	testsuite_wbt   = reinterpret_cast<char *>(read_datafile(wbt_data, 1));
	testsuite_sbt   = reinterpret_cast<char *>(read_datafile(sbt_data, 1));
#endif
#ifdef USE_UNICODE_SCRIPT
	testsuite_script= reinterpret_cast<char *>(read_datafile(script_data, 1));
#endif
	testsuite_blocks= reinterpret_cast<char *>(read_datafile(blocks_data, 1, 0x30000));
	testsuite_lower = reinterpret_cast<uni_char *>(read_datafile(lower_data, 2, 0x20000));
	testsuite_upper = reinterpret_cast<uni_char *>(read_datafile(upper_data, 2, 0x20000));
	testsuite_mirror= reinterpret_cast<uni_char *>(read_datafile(mirror_data, 2));
	testsuite_joiningtype = reinterpret_cast<char *>(read_datafile(joiningtype_data, 1));
	testsuite_proplist = reinterpret_cast<char *>(read_datafile(proplist_data, 1, 0x30000));
	testsuite_casefolding_s = reinterpret_cast<unsigned int *>(read_datafile(casefolding_s_data, 4, 0x20000, FALSE));
	testsuite_casefolding_f = reinterpret_cast<uni_char *>(read_datafile(casefolding_f_data, 2, 3*0x10000, FALSE));	
	verify(testsuite_cls && testsuite_bidi && testsuite_lbt2 && testsuite_lower && testsuite_upper && testsuite_mirror 
			&& testsuite_blocks && testsuite_joiningtype && testsuite_proplist && casefolding_s_data);
#ifdef USE_UNICODE_SCRIPT
	verify(testsuite_script);
#endif
#ifdef USE_UNICODE_SEGMENTATION
	verify(testsuite_wbt && testsuite_sbt);
#endif
}

// -- Tests --------------------------------------------------------------

test("Character classes")
	require success "Loading test data";
{
	for (UnicodePoint i = 1; i < 131071; i++)
	{
		if (testsuite_cls[i] != (char) CC_Unknown)	// Undefined character class
		{
			verify(testsuite_cls[i] == (char) Unicode::GetCharacterClass(i));
		}
	}
}

test("Surrogates")
{
	for (int i = 1; i < 65536; i++)
	{
		verify((Unicode::GetCharacterClass(i) != CC_Cs) == (!Unicode::IsSurrogate(i)));
	}
}

subtest lowercheck(UnicodePoint orig, UnicodePoint result)
{
	if (testsuite_lower[orig])
	{
		UnicodePoint expected = testsuite_lower[orig];
		if (orig > 65536)
			expected |= 65536; // We only store the lower 16 bits in the test data file
		if (expected != result)
			output("\nhad U+%04X expected U+%04X got U+%04X ", orig, expected, result);
		verify(expected == result);
	}
	else if (orig < 0x80)
	{
		if (orig >= 'A' && orig <= 'Z')
		{
			verify(result == (orig | 0x20));
		}
		else
		{
			verify(result == orig);
		}
	}
}

test("Lowercase mapping")
	require success "Loading test data";
{
	for (int i = 1; i < 131072; i++)
	{
		verify(lowercheck(i, Unicode::ToLower(i)));
	}
}

subtest uppercheck(UnicodePoint orig, UnicodePoint result)
{
	if (testsuite_upper[orig])
	{
		UnicodePoint expected = testsuite_upper[orig];
		if (orig > 65536)
			expected |= 65536; // We only store the lower 16 bits in the test data file
		if (expected != result)
			output("\nhad U+%04X expected U+%04X got U+%04X ", orig, expected, result);
		verify(expected == result);
	}
	else if (orig < 0x80)
	{
		if (orig >= 'a' && orig <= 'z')
		{
			verify(result == (orig & 0xdf));
		}
		else
		{
			verify(result == orig);
		}
	}
}

test("Uppercase mapping")
	require success "Loading test data";
{
	for (int i = 1; i < 131072; i++)
	{
		verify(uppercheck(i, Unicode::ToUpper(i)));
	}
}

test("Casemapping specials")
{
	// U+01C5 LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON
	verify(Unicode::ToUpper(0x1C5) == 0x1C4);
	verify(Unicode::ToLower(0x1C5) == 0x1C6);

	// U+01C8 LATIN CAPITAL LETTER L WITH SMALL LETTER J
	verify(Unicode::ToUpper(0x1C8) == 0x1C7);
	verify(Unicode::ToLower(0x1C8) == 0x1C9);

	// U+01CB LATIN CAPITAL LETTER N WITH SMALL LETTER J
	verify(Unicode::ToUpper(0x1CB) == 0x1CA);
	verify(Unicode::ToLower(0x1CB) == 0x1CC);

	// U+01F2 LATIN CAPITAL LETTER D WITH SMALL LETTER Z
	verify(Unicode::ToUpper(0x1F2) == 0x1F1);
	verify(Unicode::ToLower(0x1F2) == 0x1F3);
}

test("Casemapping for strings")
	require success "Loading test data";
{
	uni_char lower[65536], upper[65536];
	for (int i = 0; i < 65536; ++ i)
	{
		if (i >= 0xD7FF && i < 0xDFFF) // Note: off by one
		{
			lower[i] = static_cast<uni_char>(1);
			upper[i] = static_cast<uni_char>(1);
		}
		else
		{
			lower[i] = static_cast<uni_char>((i + 1) & 0xFFFF);
			upper[i] = static_cast<uni_char>((i + 1) & 0xFFFF);
		}
	}

	// Out-of-place case conversion (allocating)
	uni_char *tmp_lower = Unicode::Lower(lower, FALSE);
	uni_char *tmp_upper = Unicode::Upper(lower, FALSE);
	verify(tmp_lower);
	verify(tmp_lower != lower);
	verify(tmp_upper);
	verify(tmp_upper != upper);

	// In-place case conversion (non-allocating)
	verify(Unicode::Lower(lower, TRUE) == lower);
	verify(Unicode::Upper(upper, TRUE) == upper);

	// Check that conversion worked
	for (int j = 1; j < 65536; ++ j)
	{
		if (j >= 0xD800 && j < 0xE000)
			continue;

		verify(lowercheck(j, tmp_lower[j - 1]));
		verify(lowercheck(j,     lower[j - 1]));
		verify(uppercheck(j, tmp_upper[j - 1]));
		verify(uppercheck(j,     upper[j - 1]));
	}
}
finally
{
	op_free(tmp_lower);
	op_free(tmp_upper);
}

test ("Casemapping (non-BMP)")
{
	verify (Unicode::ToLower(0x10400) == 0x10428);
	verify (Unicode::ToUpper(0x10428) == 0x10400);

	verify (Unicode::ToUpper(0x20000) == 0x20000);
	verify (Unicode::ToLower(0x20000) == 0x20000);

	verify (Unicode::ToUpper(0x10000) == 0x10000);
	verify (Unicode::ToLower(0x10000) == 0x10000);
}

test ("Casemapping for strings (non-BMP)")
{
	uni_char *tmp_lower = Unicode::Lower(const_cast<uni_char *>(UNI_L("\xD801\xDC00")), FALSE);
	verify_string(tmp_lower, UNI_L("\xD801\xDC28"));
}
finally
{
	op_free(tmp_lower);
}

test ("Casemapping for strings (non-BMP) - Upper")
{
	uni_char *tmp_upper = Unicode::Upper(const_cast<uni_char *>(UNI_L("\xD801\xDC28")), FALSE);
	verify_string(tmp_upper, UNI_L("\xD801\xDC00"));
}
finally
{
	op_free(tmp_upper);
}

test("BIDI GetBidiCategory")
	require SUPPORT_TEXT_DIRECTION;
	require success "Loading test data";
{
	for (int i = 1; i < 65536; i++)
	{
		if (testsuite_bidi[i])
		{
			if (testsuite_bidi[i] != (char) Unicode::GetBidiCategory(i))
			{
				output("\nU+%04X got %d, expected %d ", i, Unicode::GetBidiCategory(i), testsuite_bidi[i]);
			}
			verify(testsuite_bidi[i] == (char) Unicode::GetBidiCategory(i));
		}
	}
}

table BidiData
{
	{ "U+10000", 0x10000, BIDI_L },
	{ "U+10800", 0x10800, BIDI_R },
	{ "U+20000", 0x20000, BIDI_L },
	{ "U+30000", 0x30000, BIDI_UNDEFINED },
	{ "U+40000", 0x40000, BIDI_UNDEFINED },
	{ "U+50000", 0x50000, BIDI_UNDEFINED },
	{ "U+60000", 0x60000, BIDI_UNDEFINED },
	{ "U+70000", 0x70000, BIDI_UNDEFINED },
	{ "U+80000", 0x80000, BIDI_UNDEFINED },
	{ "U+90000", 0x90000, BIDI_UNDEFINED },
	{ "U+A0000", 0xA0000, BIDI_UNDEFINED },
	{ "U+B0000", 0xB0000, BIDI_UNDEFINED },
	{ "U+C0000", 0xC0000, BIDI_UNDEFINED },
	{ "U+D0000", 0xD0000, BIDI_UNDEFINED },
	{ "U+E0000", 0xE0000, BIDI_UNDEFINED },
}

foreach (name, cp, cc) from BidiData
{
	test("BIDI GetBidiCategory (non-BMP) " name)
		require SUPPORT_TEXT_DIRECTION;
	{
		verify(Unicode::GetBidiCategory(cp) == cc);
	}
}

test("BIDI GetMirrorChar and IsMirrored")
	require SUPPORT_TEXT_DIRECTION;
	require success "Loading test data";
{
	for (int i = 1; i < 65536; i++)
	{
		verify(!!testsuite_mirror[i] == Unicode::IsMirrored(i));
		verify(testsuite_mirror[i] == Unicode::GetMirrorChar(i));
	}
}

test("BIDI GetMirrorChar and IsMirrored 2")
	require SUPPORT_TEXT_DIRECTION;
{
	for (UnicodePoint i = 65536; i < 2*65536; i++)
	{
		verify(0 == Unicode::GetMirrorChar(i));
	}
}

test("Linebreak properties")
	require USE_UNICODE_LINEBREAK;
	require success "Loading test data";
{
	// Hack to get the coverage script to ignore the debugging function
	verify(lbname(LB_XX) != NULL);

	for (int i = 1; i < 0x30000; i++)
	{
		if (i == 0xD800) // Skip surrogates
			i = 0xE000;
		if (testsuite_lbt2[i] != Unicode::GetLineBreakClass(i))
			output("\nU+%04X: Expected %s, got %s ", i, lbname(static_cast<LinebreakClass>(testsuite_lbt2[i])), lbname(Unicode::GetLineBreakClass(i)));
		verify(testsuite_lbt2[i] == Unicode::GetLineBreakClass(i));
	}
}

test("Hangul syllable type")
	require USE_UNICODE_LINEBREAK;
	require USE_UNICODE_HANGUL_SYLLABLE;
{
	// Exploit the fact that the hangul type and linebreaking type
	// mirror each other
	for (int i = 1; i < 0xFFFE; i++)
	{
		if (i == 0xD800) // Skip surrogates
			i = 0xE000;
		
		HangulSyllableType type = Unicode::GetHangulSyllableType(i);

		switch (Unicode::GetLineBreakClass(i))
		{
		case LB_H2:	verify(type == Hangul_LV);	break;
		case LB_H3:	verify(type == Hangul_LVT);	break;
		case LB_JL:	verify(type == Hangul_L);	break;
		case LB_JT:	verify(type == Hangul_T);	break;
		case LB_JV:	verify(type == Hangul_V);	break;
		default:	verify(type == Hangul_NA);	break;
		}
	}
}

test("Word boundary type")
	require USE_UNICODE_SEGMENTATION;
	require success "Loading test data";
{
	for (int i = 1; i < 0xFFFE; i++)
	{
		if (i == 0xD800) // Skip surrogates
			i = 0xE000;

		verify(testsuite_wbt[i] == (char) Unicode::GetWordBreakType(i));
	}
}

test("Sentence boundary type")
	require USE_UNICODE_SEGMENTATION;
	require success "Loading test data";
{
	for (int i = 1; i < 0xFFFE; i++)
	{
		verify(testsuite_sbt[i] == (char) Unicode::GetSentenceBreakType(i));
	}
}

table CharInfo_Data(UnicodePoint, CharacterClass)
{
	{ 0x10000, CC_Lo },
	{ 0x10400, CC_Lu },
	{ 0x1202B, CC_Lo },
	{ 0x1D049, CC_So },
	{ 0x20000, CC_Lo },
	{ 0x2F9D6, CC_Lo },
	{ 0x30000, CC_Unknown },
	{ 0x30000, CC_Unknown },
	{ 0x40000, CC_Unknown },
	{ 0x50000, CC_Unknown },
	{ 0x60000, CC_Unknown },
	{ 0x70000, CC_Unknown },
	{ 0x80000, CC_Unknown },
	{ 0x90000, CC_Unknown },
	{ 0xA0000, CC_Unknown },
	{ 0xA0000, CC_Unknown },
	{ 0xB0000, CC_Unknown },
	{ 0xC0000, CC_Unknown },
	{ 0xD0000, CC_Unknown },
	{ 0xE0000, CC_Unknown },
	{ 0xE0193, CC_Mn }
	{ 0xF0000, CC_Unknown },
	{ 0x100000,CC_Unknown },
}

test("CharacterClass (non-BMP)")
{
	iterate (cp, cc) from CharInfo_Data
	{
		verify (Unicode::GetCharacterClass(cp) == cc);
	}
}

test ("GetScript (full BMP)")
	require success "Loading test data";
	require USE_UNICODE_SCRIPT;
{
	for (int i=0; i<=0xffff; i++)
	{
		verify(Unicode::GetScriptType(i) == testsuite_script[i]);
	}
}

test ("GetUnicodeBlockType (BMP+SMP+SIP)")
	require success "Loading test data";
{
	for (int i=0; i<0x30000; i++)
	{
		verify(Unicode::GetUnicodeBlockType(i) == (unsigned char)testsuite_blocks[i]);
	}
}

test ("GetUnicodeJoiningType (full BMP)")
	require success "Loading test data";
{
	for (int i=0; i<0x10000; i++)
	{
		UnicodeJoiningType jt = (UnicodeJoiningType)testsuite_joiningtype[i];
		if (jt==JT_T)
		{
			CharacterClass cc = Unicode::GetCharacterClass(i);
			jt = (cc==CC_Mn || cc==CC_Me || cc==CC_Cf) ? JT_T : JT_U;
		}
		verify(Unicode::GetUnicodeJoiningType(i) == jt);
	}
}

test ("CheckPropertyValue (BMP+SMP+SIP)")
	require success "Loading test data";
{
	for (int i=0; i<0x30000; i++)
	{
		for (int j=0; j<PROP_NumberOfProperties; j++)
		{
			verify(Unicode::CheckPropertyValue(i, (UnicodeProperties)j) == (testsuite_proplist[i]>>j & 1));
		}
	}
}

test ("ToCaseFoldSimple (BMP+SMP)")
	require success "Loading test data";
{
	for (int i=0; i<0x20000; i++)
	{
		verify(Unicode::ToCaseFoldSimple(i) == testsuite_casefolding_s[i]);
	}
}

test ("ToCaseFoldFull (full BMP)")
	require success "Loading test data";
{
	UnicodePoint res[4];

	for (int i=0; i<0x10000; i++)
	{
		op_memset(res, 0, sizeof(res));
		
		int n = Unicode::ToCaseFoldFull(i, res);
		int j;
		for (j=0; j==0 || j<3 && testsuite_casefolding_f[i*3+j]; j++)
			verify(res[j] == testsuite_casefolding_f[i*3+j]);
		verify(j == n);
	}
}

test ("ToCaseFoldFull (string-based API)")
{
	const uni_char *tests[][2] = {
		{UNI_L("Ma\xDF\x65"), UNI_L("MAsSE")},
		{UNI_L("AB\x1f99xz\x1fa2XZ"), UNI_L("ab\x1f21\x3b9XZ\x1f62\x3b9xz")},
		{UNI_L("AB\x1fc7xz\x1fd2XZ"), UNI_L("ab\x3b7\x342\x3b9XZ\x3b9\x308\x300xz")}
		};
		
	for (size_t i=0; i<ARRAY_SIZE(tests); ++i)
	{
		uni_char *s1 = Unicode::ToCaseFoldFull(tests[i][0]);
		uni_char *s2 = Unicode::ToCaseFoldFull(tests[i][1]);
		verify(s1 && s2 && !uni_strcmp(s1, s2));
		OP_DELETEA(s1);
		OP_DELETEA(s2);
	}
}

// -- Global cleanup -----------------------------------------------------

exit
{
	OP_DELETEA(testsuite_cls);
	OP_DELETEA(testsuite_bidi);
	OP_DELETEA(testsuite_lbt2);
	OP_DELETEA(testsuite_lower);
	OP_DELETEA(testsuite_upper);
	OP_DELETEA(testsuite_mirror);
	OP_DELETEA(testsuite_wbt);
	OP_DELETEA(testsuite_sbt);
	OP_DELETEA(testsuite_script);
	OP_DELETEA(testsuite_blocks);
	OP_DELETEA(testsuite_joiningtype);
	OP_DELETEA(testsuite_proplist);
	OP_DELETEA(testsuite_casefolding_f);
	OP_DELETEA(testsuite_casefolding_s);
}
