/** -*- Mode: c++; tab-width: 4; c-basic-offset: 4; c-file-style:"stroustrup" -*-
 *
 * Copyright (C) 2009-2012 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 */

group "unicode.stringiter";

include "modules/unicode/unicode_stringiterator.h";

test ("Empty")
{
	UnicodeStringIterator empty(UNI_L(""));

	verify(empty.Index() == 0);
	verify(empty.IsAtBeginning());
	verify(empty.IsAtEnd());
	verify(!empty.At());

	// Attempt to move the iterator, which should not change its state

	verify(!empty.Next());
	verify(empty.Index() == 0);

	verify(!empty.Previous());
	verify(empty.Index() == 0);

	verify(!empty.NextBaseCharacter());
	verify(empty.Index() == 0);

	verify(!empty.PreviousBaseCharacter());
	verify(empty.Index() == 0);
}

// 0xD800-0xDBFF - High surrogates
// 0xDC00-0xDFFF - Low surrogates
table test_StringIterator (const char* test_name, const uni_char* test_string, size_t n_code_points, const UnicodePoint[] unicode_points)
{
	{ "simple", UNI_L("test"), 4, {'t','e','s','t'} }
	{ "contains surrogate pairs",
			UNI_L("\xd800\xdf00t\xd800\xdc00t\xd800\xdc00"),
			5, {0x10300, 't', 0x10000, 't', 0x10000} }
	{ "malformed (standalone, or low before high) surrogates",
			UNI_L("\xdf00t\xd800t\xdf00\xd800t\xd800"),
			8, {0xdf00, 't', 0xd800, 't', 0xdf00, 0xd800, 't', 0xd800} }
}

foreach (test_name, test_string, n_code_points, unicode_points) from test_StringIterator
{
	test("Iteration test " test_name)
	{
		const uni_char* str = test_string;
		const size_t n_code_units = uni_strlen(str);
		const UnicodePoint ref[n_code_points] = unicode_points;

		UnicodeStringIterator iter(str, 0, n_code_units);

		// Check state before forward iteration
		verify(iter.Index() == 0);
		verify(iter.IsAtBeginning());
		verify(!iter.IsAtEnd());
		verify(iter.At());

		// Iterate forward
		size_t i;
		for (i = 0; i < n_code_points; i++)
		{
			if (i > 0)
				verify(!iter.IsAtBeginning());
			verify(!iter.IsAtEnd());
			verify(iter.At() == ref[i]);
			if (i+1 == n_code_points)
			{
				verify(!iter.HasNext());
				verify(!iter.Next());
			}
			else
			{
				verify(iter.HasNext());
				verify(iter.Next());
			}
		}

		// Check state after forward iteration
		verify(iter.IsAtEnd());
		verify(!iter.At());

		// Another call to Next() does not change the state
		verify(!iter.HasNext());
		verify(!iter.Next());
		verify(iter.IsAtEnd());
		verify(!iter.At());

		// Iterate backward
		for (; i > 0; --i)
		{
			verify(!iter.IsAtBeginning());
			verify(iter.HasPrevious());
			verify(iter.Previous());
			verify(iter.At() == ref[i-1]);
			verify(!iter.IsAtEnd());
		}

		verify(iter.Index() == 0);
		verify(iter.IsAtBeginning());
		if (n_code_points > 0)
			verify(!iter.IsAtEnd());
	}
}

foreach (test_name, test_string, n_code_points, unicode_points) from test_StringIterator
{
	test("UnicodeStringIterator starting at index 1 of " test_name)
	{
		const uni_char* str = test_string;
		const size_t n_code_units = uni_strlen(str);
		UnicodeStringIterator iter(str, 1, n_code_units);
		verify(iter.Index() == 1);
		verify(!iter.IsAtBeginning());
	}
}

foreach (test_name, test_string, n_code_points, unicode_points) from test_StringIterator
{
	test("UnicodeStringIterator starting at end of " test_name)
	{
		const uni_char* str = test_string;
		const size_t n_code_units = uni_strlen(str);
		UnicodeStringIterator iter(str, KAll, n_code_units);
		verify(iter.IsAtEnd());
		verify(iter.Index() == n_code_units);
		verify(!iter.IsAtBeginning());
		verify(!iter.At());

		const UnicodePoint ref[n_code_points] = unicode_points;
		// Iterate backward
		for (size_t i=n_code_points; i > 0; --i)
		{
			verify(!iter.IsAtBeginning());
			verify(iter.HasPrevious());
			verify(iter.Previous());
			verify(iter.At() == ref[i-1]);
			verify(!iter.IsAtEnd());
		}
		verify(iter.Index() == 0);
		verify(!iter.HasPrevious());
		verify(iter.IsAtBeginning());
		if (n_code_points > 0)
			verify(!iter.IsAtEnd());
	}
}

foreach (test_name, test_string, n_code_points, unicode_points) from test_StringIterator
{
	test("UnicodeStringIterator starting at automatic end of " test_name)
	{
		const uni_char* str = test_string;
		const size_t n_code_units = uni_strlen(str);
		UnicodeStringIterator iter(str, KAll, KAll);
		verify(iter.IsAtEnd());
		verify(iter.Index() == n_code_units);
		verify(!iter.IsAtBeginning());
		verify(!iter.At());

		const UnicodePoint ref[n_code_points] = unicode_points;
		// Iterate backward
		for (size_t i=n_code_points; i > 0; --i)
		{
			verify(!iter.IsAtBeginning());
			verify(iter.HasPrevious());
			verify(iter.Previous());
			verify(iter.At() == ref[i-1]);
			verify(!iter.IsAtEnd());
		}
		verify(iter.Index() == 0);
		verify(!iter.HasPrevious());
		verify(iter.IsAtBeginning());
		if (n_code_points > 0)
			verify(!iter.IsAtEnd());
	}
}

foreach (test_name, test_string, n_code_points, unicode_points) from test_StringIterator
{
	test("UnicodeStringIterator clamping of invalid start on " test_name)
	{
		const uni_char* str = test_string;
		const size_t n_code_units = uni_strlen(str);
		UnicodeStringIterator iter1(str, n_code_units+1, n_code_units);
		UnicodeStringIterator iter2(str, n_code_units+1, KAll);
		verify(iter1.Index() == n_code_units);
		verify(iter2.Index() == n_code_units);
		verify(iter1.IsAtEnd());
		verify(iter2.IsAtEnd());
		verify(!iter1.At());
		verify(!iter2.At());
	}
}

// 0xD800-0xDBFF - High surrogates
// 0xDC00-0xDFFF - Low surrogates
table test_StringIteratorComb (const char* test_name, const uni_char* test_string, size_t n_code_points, const UnicodePoint[] unicode_points)
{
	{ "simple", UNI_L("test"), 4, {'t','e','s','t'} }
	{ "contains surrogate pairs",
			UNI_L("\xd800\xdf00t\xd800\xdc00t\xd800\xdc00"),
			5, {0x10300, 't', 0x10000, 't', 0x10000} }
	{ "malformed (standalone, or low before high) surrogates",
			UNI_L("\xdf00t\xd800t\xdf00\xd800t\xd800"),
			8, {0xdf00, 't', 0xd800, 't', 0xdf00, 0xd800, 't', 0xd800} }
	{ "combining chars with non-BMP",
			/* Contains combining characters, including a standalone combining
			 * character at the start. Ends with a non-BMP character
			 * (musical G clef) followed by a combining character. */
			UNI_L("\x036Fs\x0300t\x036F\x0300u\x0300\x036F\x0300\xD834\xDD1E\x0300"),
			5, {0x036F, 's', 't', 'u', 0x1D11E} }
	{ "combining chars with malformed surrogates",
			UNI_L("\xD800\x0300\xD800\x0300\xD834"),
			3, {0xd800, 0xd800, 0xd834} }
}

foreach (test_name, test_string, n_code_points, unicode_points) from test_StringIterator
{
	test("Iteration test base characters " test_name)
	{
		const uni_char* str = test_string;
		const size_t n_code_units = uni_strlen(str);
		const UnicodePoint ref[n_code_points] = unicode_points;

		UnicodeStringIterator iter(str);

		// Check state before forward iteration
		verify(iter.Index() == 0);
		verify(iter.IsAtBeginning());
		verify(!iter.IsAtEnd());
		verify(iter.At());

		// Iterate forward
		size_t i;
		for (i = 0; i < n_code_points; i++)
		{
			if (i > 0)
				verify(!iter.IsAtBeginning());
			verify(!iter.IsAtEnd());
			verify(iter.At() == ref[i]);
			if (i+1 == n_code_points)
			{
				verify(!iter.HasNext());
				verify(!iter.NextBaseCharacter());
			}
			else
			{
				verify(iter.HasNext());
				verify(iter.NextBaseCharacter());
			}
		}

		// Check state after forward iteration
		verify(iter.IsAtEnd());
		verify(iter.Index() == n_code_units);
		verify(!iter.At());

		// Iterate backward
		for (; i > 0; --i)
		{
			verify(!iter.IsAtBeginning());
			verify(iter.HasPrevious());
			verify(iter.PreviousBaseCharacter());
			verify(iter.At() == ref[i-1]);
			verify(!iter.IsAtEnd());
		}

		// Check state after backward iteration
		verify(!iter.HasPrevious());
		verify(iter.IsAtBeginning());
		verify(iter.Index() == 0);
	}
}

test("Iteration test with only combining characters")
{
	// String with only combining characters
	const uni_char* all_comb = UNI_L("\x0300\x0300\x0300\x0300\x0300");

	UnicodeStringIterator all_comb_iter(all_comb, 2, uni_strlen(all_comb));

	all_comb_iter.PreviousBaseCharacter();
	verify(all_comb_iter.IsAtBeginning());
	all_comb_iter.NextBaseCharacter();
	verify(all_comb_iter.IsAtEnd());
}

table UniStringCharItr_tests (const char* test_name,
							  const uni_char* unistring,
							  size_t length,
							  UnicodePoint data[])
{
	{ "empty string", NULL, 0, { '\0' } }
	{ "single uni_char", UNI_L("a"), 1, {'a'} }
	{ "SMP (mathematical script)", UNI_L("a\xD835\xDCC1 (U+1D4C1)"), 12,
		{ 'a', 0x1D4C1, ' ', '(', 'U', '+', '1', 'D', '4', 'C', '1', ')' } }
	{ "Incomplete surrogate pair", UNI_L("x\xD835"), 2, { 'x', 0xD835 } }
	{ "Unmatched surrogate", UNI_L("Ho\xD835Ho"), 5, { 'H', 'o', 0xD835, 'H', 'o' } }
}

foreach (test_name, unistring, length, data) from UniStringCharItr_tests
{
	test("UnicodeStringIterator with " test_name " UniString")
	{
		UniString d;
		if (unistring)
			d.SetConstData(unistring);
		UnicodeStringIterator itr(d);
		const UnicodePoint expected[] = data;
		size_t i;
		for (i = 0; !itr.IsAtEnd(); ++itr, ++i)
			verify(*itr == expected[i]);
		verify(i == length);
		verify(itr.IsAtEnd());
		verify(!itr.Next());
	}
}

test("UniStringCharIterator multiple chunks")
{
	UniString d;
	/* Start with 42 x "a" + first uni_char of SMP character U+1D4C1: */
	verify_success(d.SetConstData(   UNI_L("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xD835")));
	/* Continue with second uni_char of SMP character U+1D4C1 + " " + 40 x "b" +
	 * the first part of SMP character U+1D4C1: */
	verify_success(d.AppendConstData(UNI_L("\xDCC1 bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\xD835")));
	/* which is not followed by its second part, but by '1' + 40 x "c": */
	verify_success(d.AppendConstData(UNI_L("1cccccccccccccccccccccccccccccccccccccccc")));
	/* followed by 42 x "d": */
	verify_success(d.AppendConstData(UNI_L("dddddddddddddddddddddddddddddddddddddddddd")));

	UnicodeStringIterator itr(d);
	verify(!itr.IsAtEnd());
	size_t i;
	const uni_char* expected = UNI_L("abcd");
	for (i = 0; i < 4*42; ++i)
	{
		verify(!itr.IsAtEnd());
		switch (i) {
		case 42: verify(*itr == 0x1D4C1); break;
		case 43: verify(*itr == ' '); break;
		case 84: verify(*itr == 0xD835); break;
		case 85: verify(*itr == '1'); break;
		default:
			verify(*itr == expected[i/42]);
		}
		if (i == 4*42-1)
		{
			verify(!itr.HasNext());
			verify(!++itr);
		}
		else
		{
			verify(itr.HasNext());
			verify(++itr);
		}
	}
	verify(itr.IsAtEnd());
	verify(!itr.HasNext());

	const size_t expected_smp_chars = 1;
	verify(i == d.Length() - expected_smp_chars);

	while (i > 0)
	{
		verify(itr.HasPrevious());
		verify(--itr);
		switch (--i) {
		case 42: verify(*itr == 0x1D4C1); break;
		case 43: verify(*itr == ' '); break;
		case 84: verify(*itr == 0xD835); break;
		case 85: verify(*itr == '1'); break;
		default:
			verify(*itr == expected[i/42]);
		}
	}
	verify(itr.IsAtBeginning());
}

test("FromBeginning() literal")
{
	/* From string */
	UnicodeStringIterator i1(UNI_L("A string"));
	++i1;

	UnicodeStringIterator i2 = i1.FromBeginning();
	verify(*i1 == ' ');
	verify(*i2 == 'A');
}

test("FromBeginning() UniString")
{
	/* From fragments */
	UniString d;
	verify_success(d.SetConstData(   UNI_L("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"))); // 42
	verify_success(d.AppendConstData(UNI_L("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"))); // 42

	UnicodeStringIterator i1(d);
	for (int i = 0; i < 42; ++ i)
		++i1;

	UnicodeStringIterator i2 = i1.FromBeginning();
	verify(*i1 == 'b');
	verify(*i2 == 'a');
}

test("FromBeginning() stress test")
{
	/* From fragments */
	UniString d;
	verify_success(d.SetConstData(   UNI_L("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"))); // 42
	verify_success(d.AppendConstData(UNI_L("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"))); // 42
	verify_success(d.AppendConstData(UNI_L("cccccccccccccccccccccccccccccccccccccccccc"))); // 42
	verify_success(d.AppendConstData(UNI_L("dddddddddddddddddddddddddddddddddddddddddd"))); // 42

	UnicodeStringIterator i1(d);
	verify(i1.IsAtBeginning());
	do
	{
		++i1;
		UnicodeStringIterator i2 = i1.FromBeginning();
		verify(i2.IsAtBeginning());
	} while (!i1.IsAtEnd());

	i1.Reset();
	verify(i1.IsAtBeginning());
	verify(*i1 == 'a');
	do
	{
		++i1;
		UnicodeStringIterator i2 = i1.FromBeginning();
		verify(i2.IsAtBeginning());
	} while (!i1.IsAtEnd());
}
