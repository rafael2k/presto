/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2004-2012 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

group "unicode.surrogates";

test("Checking that surrogate tests are correct")
{
	uni_char i = 0;
	do
	{
		if (i >= 0xD800 && i <= 0xDFFF)
		{
			verify(Unicode::IsSurrogate(i));
		}
		else
		{
			verify(!Unicode::IsSurrogate(i));
		}

		if (i >= 0xD800 && i <= 0xDBFF)
		{
			verify(Unicode::IsHighSurrogate(i));
		}
		else
		{
			verify(!Unicode::IsHighSurrogate(i));
		}

		if (i >= 0xDC00 && i <= 0xDFFF)
		{
			verify(Unicode::IsLowSurrogate(i));
		}
		else
		{
			verify(!Unicode::IsLowSurrogate(i));
		}
	} while (++ i);
}

test("Decoding surrogate pairs")
{
	verify(0x10000 == Unicode::DecodeSurrogate(0xD800, 0xDC00));
	verify(0x10FFFF== Unicode::DecodeSurrogate(0xDBFF, 0xDFFF));
}

test("Encoding surrogate pairs")
{
	uni_char high, low;
	Unicode::MakeSurrogate(0x10000, high, low);
	verify(high == 0xD800);
	verify(low  == 0xDC00);

	Unicode::MakeSurrogate(0x10FFFF, high, low);
	verify(high == 0xDBFF);
	verify(low  == 0xDFFF);
}

test("Surrogate pair conversion round-trip")
{
	for (UINT32 i = 0x10001; i < 0x110000; i += 0x1234)
	{
		uni_char high, low;
		Unicode::MakeSurrogate(i, high, low);
		verify(i == Unicode::DecodeSurrogate(high, low));
	}
}

test ("GetUnicodePoint")
{
	int c;
	verify (Unicode::GetUnicodePoint(UNI_L("s"), 1, c) == 's');
	verify (c == 1);
	
	verify (Unicode::GetUnicodePoint(UNI_L("\xD800\xDC00"), 2, c) == 0x10000);
	verify (c == 2);
}
