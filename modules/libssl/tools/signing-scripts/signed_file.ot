/* -*- Mode: c; tab-width: 4; c-basic-offset: 4 -*- */
group "libssl signed file";

require _NATIVE_SSL_SUPPORT_;
require _NEED_LIBSSL_VERIFY_SIGNED_FILE_;
require undefined CRYPTO_VERIFY_SIGNED_TEXTFILE_SUPPORT;

language c++;

include "modules/libssl/sslbase.h";
include "modules/libssl/options/sslopt.h";
include "modules/url/url_man.h";

include "modules/libssl/tools/signed_textfile.h";

include "modules/libssl/tools/signing-scripts/test_verify_key.h";
include "modules/url/url_tools.h";

table success_testfiles(const char *) filelist "." name "success_*.txt";

table fail_testfiles(const char *) filelist "." name "fail_*.txt";

test("Check correctly signed")
{
    output("\n");
	iterate(name) from success_testfiles
	{
		OpString name1;
		OpString testname;

		verify(OpStatus::IsSuccess(name1.Set(name)));
		TRAPD(op_err, g_url_api->ResolveUrlNameL(name1, testname));
		verify(OpStatus::IsSuccess(op_err));

		URL test_url = g_url_api->GetURL(testname);
		output("Should succed %s\n", test_url.GetAttribute(URL::KName_Username_Password_Escaped_NOT_FOR_UI).CStr());

		verify(!test_url.IsEmpty());
		verify(test_url.QuickLoad(TRUE));

		verify(VerifySignedTextFile(test_url, "//", TEST_VERIFY_KEY, sizeof(TEST_VERIFY_KEY)));
	}
}

test("Check incorrectly signed")
{
    output("\n");
	iterate(name) from fail_testfiles
	{
		OpString name1;
		OpString testname;

		verify(OpStatus::IsSuccess(name1.Set(name)));
		TRAPD(op_err, g_url_api->ResolveUrlNameL(name1, testname));
		verify(OpStatus::IsSuccess(op_err));

		URL test_url = g_url_api->GetURL(testname);
		output("Should failijj %s\n", test_url.GetAttribute(URL::KName_Username_Password_Escaped_NOT_FOR_UI).CStr());

		verify(!test_url.IsEmpty());
		verify(test_url.QuickLoad(TRUE));

		verify(!VerifySignedTextFile(test_url, "//", TEST_VERIFY_KEY, sizeof(TEST_VERIFY_KEY)));
	}
}
