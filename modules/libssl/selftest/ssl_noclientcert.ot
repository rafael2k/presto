/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2004-2006 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Yngve N. Pettersen
*/

group "libssl load no client cert";
require init;

require _NATIVE_SSL_SUPPORT_;

language c++;

include "core/pch.h";
include "modules/dochand/win.h";
include "modules/dochand/docman.h";
include "modules/doc/frm_doc.h";

include "modules/libssl/sslbase.h";
include "modules/libssl/ssl_api.h";
include "modules/libssl/options/sslopt.h";
include "modules/network_selftest/urldoctestman.h";
include "modules/network_selftest/scanpass.h";
include "modules/network_selftest/sslwincom.h";
include "modules/network_selftest/ssl_waitupdate.h";

global {

	URL_DocSelfTest_Manager *libssl_tests = NULL;
	SSL_Options *opt = NULL;
	
	class SimpleClientAuthListener 
		: public BasicSSLWindowListener
	{
	public:
		SimpleClientAuthListener (URL_DocSelfTest_Manager *manager, OpSSLListener *fallback)
			: BasicSSLWindowListener(manager, fallback) {}

		virtual ~SimpleClientAuthListener (){}
		
		virtual void OnCertificateBrowsingNeeded(OpWindowCommander* wic, SSLCertificateContext* context, SSLCertificateReason reason, SSLCertificateOption options)
		{
			if(context)
			{
				context->OnCertificateBrowsingDone(FALSE, SSL_CERT_OPTION_REFUSE);
			}

			URL empty;
			ReportFailure(empty,"Certificte dialog called when it should not have been");
		}

		virtual void OnSecurityPasswordNeeded(OpWindowCommander* wic, SSLSecurityPasswordCallback* callback)
		{
			if(callback)
				callback->OnSecurityPasswordDone(FALSE, NULL, NULL);
				
			URL empty;
			ReportFailure(empty,"Password dialog called when it should not have been");
		}

	};
	
    SimpleClientAuthListener *listener = NULL;
	WindowCommander *wc=NULL;
	
#ifdef LIBSSL_AUTO_UPDATE
	SSL_WaitForPendingAutoUpdate update_waiter;
#endif
}

table url_list (const char *, const char *) 
{
  {"https://certo.opera.com:1003/index.cgi", "<td> SSL_CLIENT_VERIFY </td> <td class=\"fail\"> NONE </td>"}
}

html { "<html><body>Empty document, Client Authentication going on. A client authentication dialog is a failure.</body></html>" };

setup 
{
	opt = g_ssl_api->CreateSecurityManager(FALSE, OPFILE_ABSOLUTE_FOLDER);

	if(opt 	!= NULL)
	{
		if(OpStatus::IsSuccess(opt->Init(SSL_LOAD_ALL_STORES)))
		{
			g_ssl_api->UnLoadSecurityManager();
			g_ssl_api->CommitOptionsManager(opt);
			g_ssl_api->LockSecurityManager(TRUE);
		}
	}

	libssl_tests = OP_NEW(URL_DocSelfTest_Manager, ());
}

exit
{
	if(opt && opt->dec_reference() <= 0)
		OP_DELETE(opt);
	opt = NULL;
	g_ssl_api->LockSecurityManager(FALSE);
	g_ssl_api->UnLoadSecurityManager(TRUE);

	OP_DELETE(libssl_tests);
	libssl_tests = NULL;
	
	if(wc)
	    wc->SetSSLListener(listener->GetFallback());
	
	OP_DELETE(listener);
	listener = NULL;
}

test("Initialized")
{
	verify(opt != NULL);
	verify(g_securityManager == opt);
	verify(libssl_tests != NULL);
}

subtest AddScanPassTest(URL_DocSelfTest_Batch *batch, const OpStringC8 &url, URL &ref_url, const OpStringC8 &test_string)
{
	verify(batch != NULL);
	verify(url.HasContent());

	OpAutoPtr<ScanPass_SimpleTester> test(OP_NEW(ScanPass_SimpleTester, ()));
	verify(test.get() != NULL);

	verify(OpStatus::IsSuccess(test->Construct(url, ref_url, test_string)));

	verify(batch->AddTestCase(test.release()));
}

subtest AddBatch(URL_DocSelfTest_Batch *batch)
{
	verify(batch != NULL);
	verify(libssl_tests->AddBatch(batch));
}

subtest StartTestSet()
{
	verify(libssl_tests->SetLastBatch());
}

subtest Setup_SingleSSLTest(const OpStringC8 &url, URL &ref_url, const OpStringC8 &test_string)
{
	OpAutoPtr<URL_DocSelfTest_Batch> batch(OP_NEW(URL_DocSelfTest_Batch, ()));

	verify(batch.get() != NULL);
	batch->Construct(state.doc->GetMessageHandler());

	verify(AddScanPassTest(batch.get(), url, ref_url, test_string));

	verify(!batch->Empty());

	verify(AddBatch(batch.release()));
}

subtest Setup_BatchSSLtest()
{
	int count = 0;
	URL ref_url;
	OpAutoPtr<URL_DocSelfTest_Batch> batch(OP_NEW(URL_DocSelfTest_Batch, ()));

	verify(batch.get() != NULL);

	iterate(url, pass_string) from url_list
	{
		verify(AddScanPassTest(batch.get(), url, ref_url, pass_string));
		count++;
	}

	verify(batch->Cardinal() == count);

	verify(AddBatch(batch.release()));
}

test("Load SSL Cipher Suite Test URLs")
	require success "Initialized";
	async;
{
    wc = state.doc->GetWindow()->GetWindowCommander();
    listener = OP_NEW(SimpleClientAuthListener, (libssl_tests, wc->GetSSLListener()));
    wc->SetSSLListener(listener);

	URL ref_url;
	iterate(url, pass_string) from url_list
	{
		if (!Setup_SingleSSLTest(url, ref_url, pass_string))
			ST_failed("Could not setup test %s", url);
	}
	//Setup_BatchSSLtest();
	if (!StartTestSet())
		ST_failed("Could not start test set");
}


test("Flush auto updates") async;
	require defined LIBSSL_AUTO_UPDATE;
	require success "Initialized";
{
	update_waiter.Activate();
}
