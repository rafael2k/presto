group "libssl digest";
require _NATIVE_SSL_SUPPORT_;

language c++;

include "modules/libssl/sslbase.h";
include "modules/libssl/options/sslopt.h";
include "modules/libssl/ssl_api.h";
include "modules/libssl/selftest/sslinc.h";
include "modules/libssl/methods/sslhash.h";
include "modules/libssl/methods/sslphash.h";

global {
/* Test vectors from openssl*/

/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

BOOL SSL_initialized = FALSE;

unsigned char ssl_null_data_len = 24;
unsigned char ssl_null_data[24] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
};

unsigned char ssl_null_data_out_len = 0;
unsigned char ssl_null_data_out[1] = {0x00};

const static unsigned char ssl_sha1_input_sizes[1] = {3};
const static unsigned char ssl_sha1_input[] = {0x61, 0x62, 0x63};

const static unsigned char ssl_sha1_output[20] =
	{0xa9, 0x99, 0x3e, 0x36, 0x47, 0x06, 0x81, 0x6a,
	 0xba, 0x3e, 0x25, 0x71, 0x78, 0x50, 0xc2, 0x6c,
	 0x9c, 0xd0, 0xd8, 0x9d};


const static unsigned char ssl_md5_input_sizes[] = {0, 1,3, 14, 26, 62, 80};

const static unsigned char ssl_md5_input[][80] = {
	{0},

	{0x61},

	{0x61, 0x62, 0x63},

	{0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20,
	 0x64, 0x69, 0x67, 0x65, 0x73, 0x74},

	{0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
	 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70,
	 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
	 0x79, 0x7a},

	{0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
	 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50,
	 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
	 0x59, 0x5a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66,
	 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e,
	 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76,
	 0x77, 0x78, 0x79, 0x7a, 0x30, 0x31, 0x32, 0x33,
	 0x34, 0x35, 0x36, 0x37, 0x38, 0x39},

	{0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
	 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34,
	 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32,
	 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30,
	 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
	 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34,
	 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32,
	 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30}
};

const static unsigned char ssl_md5_output[][16] = {
	{0xd4, 0x1d, 0x8c, 0xd9, 0x8f, 0x00, 0xb2, 0x04, 0xe9, 0x80, 0x09, 0x98, 0xec, 0xf8, 0x42, 0x7e},
	{0x0c, 0xc1, 0x75, 0xb9, 0xc0, 0xf1, 0xb6, 0xa8, 0x31, 0xc3, 0x99, 0xe2, 0x69, 0x77, 0x26, 0x61},
	{0x90, 0x01, 0x50, 0x98, 0x3c, 0xd2, 0x4f, 0xb0, 0xd6, 0x96, 0x3f, 0x7d, 0x28, 0xe1, 0x7f, 0x72},
	{0xf9, 0x6b, 0x69, 0x7d, 0x7c, 0xb7, 0x93, 0x8d, 0x52, 0x5a, 0x2f, 0x31, 0xaa, 0xf1, 0x61, 0xd0},
	{0xc3, 0xfc, 0xd3, 0xd7, 0x61, 0x92, 0xe4, 0x00, 0x7d, 0xfb, 0x49, 0x6c, 0xca, 0x67, 0xe1, 0x3b},
	{0xd1, 0x74, 0xab, 0x98, 0xd2, 0x77, 0xd9, 0xf5, 0xa5, 0x61, 0x1c, 0x2c, 0x9f, 0x41, 0x9d, 0x9f},
	{0x57, 0xed, 0xf4, 0xa2, 0x2b, 0xe3, 0xc9, 0x55, 0xac, 0x49, 0xda, 0x2e, 0x21, 0x07, 0xb6, 0x7a},

};

int TestDigest(SSL_HashAlgorithmType alg,
			const unsigned char *plain, int plain_len,
			const unsigned char *digest, unsigned int digest_len)
{
	OpAutoPtr<SSL_Hash> digester(NULL);
	unsigned char *output_data = (unsigned char *) g_memory_manager->GetTempBuf2k();
	unsigned int count=0;
	unsigned int buf_len = g_memory_manager->GetTempBuf2kLen();

	OP_STATUS op_err=OpStatus::OK;
	digester.reset(g_ssl_api->CreateMessageDigest(alg, op_err));

	if (op_err != OpStatus::OK)
		return -1;

	if(buf_len < digest_len)
		return -3;

	if(buf_len <= digester->Size())
		return -4;

	digester->InitHash();
	OPERA_cleanse(output_data, buf_len);

	digester->CalculateHash(plain, plain_len);
	digester->ExtractHash(output_data);
	count = digester->Size();

	digester.reset();

	return (count == digest_len ? (op_memcmp(output_data, digest, count) == 0 ? 0 : -5) : -6);
}

int TestDigestPointer(SSL_HashAlgorithmType alg,
			const unsigned char *plain, int plain_len,
			const unsigned char *digest, unsigned int digest_len)
{
	SSL_Hash_Pointer digester(alg);
	unsigned char *output_data = (unsigned char *) g_memory_manager->GetTempBuf2k();
	unsigned int count=0;
	unsigned int buf_len = g_memory_manager->GetTempBuf2kLen();

	if (digester.Error())
		return -10;

	if(buf_len < digest_len)
		return -30;

	if(buf_len <= digester->Size())
		return -40;

	digester->InitHash();
	OPERA_cleanse(output_data, buf_len);

	digester->CalculateHash(plain, plain_len);
	digester->ExtractHash(output_data);
	count = digester->Size();

	return (count == digest_len ? (op_memcmp(output_data, digest, count) == 0 ? 0 : -50) : -60);
}


}

table testlist(const char *, int ,	SSL_HashAlgorithmType,
			const unsigned char *, const unsigned char *,
			const unsigned char *, unsigned int) {
	{"Null",	0,	SSL_NoHash,	ssl_null_data,		&ssl_null_data_len,			ssl_null_data_out,	0},
	{"SHA1",	0,	SSL_SHA,	ssl_sha1_input,		&ssl_sha1_input_sizes[0],	ssl_sha1_output,	sizeof(ssl_sha1_output)},
	{"MD5",		0,	SSL_MD5,	ssl_md5_input[0],	&ssl_md5_input_sizes[0],	ssl_md5_output[0],	sizeof(ssl_md5_output[0])},
	{"MD5",		1,	SSL_MD5,	ssl_md5_input[1],	&ssl_md5_input_sizes[1],	ssl_md5_output[1],	sizeof(ssl_md5_output[0])},
	{"MD5",		2,	SSL_MD5,	ssl_md5_input[2],	&ssl_md5_input_sizes[2],	ssl_md5_output[2],	sizeof(ssl_md5_output[0])},
	{"MD5",		3,	SSL_MD5,	ssl_md5_input[3],	&ssl_md5_input_sizes[3],	ssl_md5_output[3],	sizeof(ssl_md5_output[0])},
	{"MD5",		4,	SSL_MD5,	ssl_md5_input[4],	&ssl_md5_input_sizes[4],	ssl_md5_output[4],	sizeof(ssl_md5_output[0])},
	{"MD5",		5,	SSL_MD5,	ssl_md5_input[5],	&ssl_md5_input_sizes[5],	ssl_md5_output[5],	sizeof(ssl_md5_output[0])},
	{"MD5",		6,	SSL_MD5,	ssl_md5_input[6],	&ssl_md5_input_sizes[6],	ssl_md5_output[6],	sizeof(ssl_md5_output[0])},
};

setup
{
	SSL_initialized = TRUE;
}

test("Test SSL initialized")
{
	verify(SSL_initialized);
}

test("Test Digest") require success "Test SSL initialized";
{
	iterate (name, test_num, alg,plain, plain_len, digest, digest_len) from testlist
	{
		output("\ntesting %s set %d ", name, test_num);
		verify(plain_len != NULL);
		verify(TestDigest(alg, plain, *plain_len, digest, digest_len) == 0);
		verify(TestDigestPointer(alg, plain, *plain_len, digest, digest_len) == 0);
	}
}
