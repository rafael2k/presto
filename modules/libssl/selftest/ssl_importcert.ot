/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2004-2006 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Yngve N. Pettersen
*/

group "libssl simple import cert";
require init;

require _NATIVE_SSL_SUPPORT_;
require USE_SSL_CERTINSTALLER;

language c++;

include "core/pch.h";
include "modules/dochand/win.h";
include "modules/dochand/docman.h";
include "modules/doc/frm_doc.h";

include "modules/libssl/sslbase.h";
include "modules/libssl/ssl_api.h";
include "modules/libssl/options/sslopt.h";
include "modules/libssl/ui/sslcctx.h";
include "modules/libssl/certs/certinstaller.h";
include "modules/network_selftest/urldoctestman.h";
include "modules/network_selftest/scanpass.h";
include "modules/network_selftest/sslwincom.h";
include "modules/network_selftest/ssl_waitupdate.h";

global {

	class SimpleClientAuthListener 
		: public BasicSSLWindowListener
	{
	public:
		SimpleClientAuthListener (URL_DocSelfTest_Manager *manager, OpSSLListener *fallback)
			: BasicSSLWindowListener(manager, fallback) {}

		virtual ~SimpleClientAuthListener (){}
		
		virtual void OnCertificateBrowsingNeeded(OpWindowCommander* wic, SSLCertificateContext* context, SSLCertificateReason reason, SSLCertificateOption options)
		{
			if(context)
			{
				context->OnCertificateBrowsingDone(FALSE, SSL_CERT_OPTION_REFUSE);
			}

			URL empty;
			ReportFailure(empty,"Certificte dialog called when it should not have been");
		}

		virtual void OnSecurityPasswordNeeded(OpWindowCommander* wic, SSLSecurityPasswordCallback* callback)
		{
			if(callback)
				callback->OnSecurityPasswordDone(FALSE, NULL, NULL);
				
			URL empty;
			ReportFailure(empty,"Password dialog called when it should not have been");
		}

	};
	
#ifdef LIBSSL_AUTO_UPDATE
	SSL_WaitForPendingAutoUpdate update_waiter;
#endif
}

html { "<html><body>Empty document, Certificate installation going on. A certificate installation dialog is a failure.</body></html>" };


subtest TestCACertificate(const char *testfile, const uni_char *test_cert_name)
{
	SSL_Options *opt = g_ssl_api->CreateSecurityManager(FALSE, OPFILE_ABSOLUTE_FOLDER);

	verify(opt != NULL);
	verify(OpStatus::IsSuccess(opt->Init(SSL_LOAD_ALL_STORES)));
	opt->inc_reference();
	verify(opt->dec_reference() == 1);
	
	{
		SSL_Certificate_DisplayContext ctx(IDM_SITE_CERTIFICATES_BUTT);
		
		ctx.SetExternalOptionsManager(opt);
		
		OpString name;
		unsigned int i = 0;
		while(ctx.GetCertificateShortName(name, i))
		{
			verify(name.Compare(test_cert_name) != 0);
			i++;
			name.Empty();
		}
		unsigned int j = 0;
		while(ctx.GetIssuerShortName(name, j))
		{
			verify(name.Compare(test_cert_name) != 0);
			j++;
			name.Empty();
		}
		verify(i==j);
	}
	opt->inc_reference();
	verify(opt->dec_reference() == 1);
	
	OpString8 test_url_string;
	
	verify(OpStatus::IsSuccess(test_url_string.SetConcat("file://localhost/", testfile)));
	
	URL test_url = g_url_api->GetURL(test_url_string.CStr(), (const char *) NULL, TRUE);
	
	verify(!test_url.IsEmpty());
	verify(test_url.QuickLoad(FALSE));
	
	{
		SSL_Certificate_Installer_flags flags(SSL_CA_Store, FALSE, FALSE);
		SSL_Certificate_Installer installer;
		
		verify(OpStatus::IsSuccess(installer.Construct(test_url, flags, opt)));
		
		verify(installer.StartInstallation() == InstallerStatus::INSTALL_FINISHED);
		verify(installer.Finished());
		verify(installer.InstallSuccess());
	}
	opt->inc_reference();
	verify(opt->dec_reference() == 1);
	
	{
		SSL_Certificate_DisplayContext ctx(IDM_SITE_CERTIFICATES_BUTT);
		
		ctx.SetExternalOptionsManager(opt);
		
		OpString name;
		unsigned int i = 0;
		BOOL found = FALSE;
		while(ctx.GetCertificateShortName(name, i))
		{
			if(name.Compare(test_cert_name) == 0)
			{
				found = TRUE;
				break;
			}
			i++;
			name.Empty();
		}
		verify(found);
		unsigned int j = 0;
		while(ctx.GetIssuerShortName(name, j))
		{
			if(name.Compare(test_cert_name) == 0)
			{
				found = TRUE;
				break;
			}
			j++;
			name.Empty();
		}
		verify(found);
		verify(i==j);
	}
	opt->inc_reference();
	verify(opt->dec_reference() == 1);
}
finally
{
	if(opt && opt->dec_reference() == 0)
		OP_DELETE(opt);
	opt = NULL;
}


test("Automatic Certificate Installation")
	file certo_ca_cer	"testfiles/certinstall/certoca.cer";
	file certo_ca_pem	"testfiles/certinstall/certoca.pem";
	file certo_ca_p7	"testfiles/certinstall/certoca.p7";
{
	verify(TestCACertificate(certo_ca_cer, UNI_L("certo.intern.opera.no")));
	verify(TestCACertificate(certo_ca_pem, UNI_L("certo.intern.opera.no")));
	verify(TestCACertificate(certo_ca_p7, UNI_L("certo.intern.opera.no")));
}

subtest TestKeyAndCertificate(const char *testfile, const uni_char *test_cert_name, const char *password)
{
	SSL_Options *opt = g_ssl_api->CreateSecurityManager(FALSE, OPFILE_ABSOLUTE_FOLDER);

	verify(opt != NULL);
	verify(OpStatus::IsSuccess(opt->Init(SSL_LOAD_ALL_STORES)));
	opt->inc_reference();
	verify(opt->dec_reference() == 1);
	
	{
		SSL_Certificate_DisplayContext ctx(IDM_PERSONAL_CERTIFICATES_BUTT);
		
		ctx.SetExternalOptionsManager(opt);
		
		OpString name;
		unsigned int i = 0;
		while(ctx.GetCertificateShortName(name, i))
		{
			verify(name.Compare(test_cert_name) != 0);
			i++;
			name.Empty();
		}
	}
	opt->inc_reference();
	verify(opt->dec_reference() == 1);
	
	OpString8 test_url_string;
	
	verify(OpStatus::IsSuccess(test_url_string.SetConcat("file://localhost/", testfile)));
	
	URL test_url = g_url_api->GetURL(test_url_string.CStr(), (const char *) NULL, TRUE);
	
	verify(!test_url.IsEmpty());
	verify(test_url.QuickLoad(FALSE));
	
	{
		SSL_Certificate_Installer_flags flags(SSL_ClientStore, FALSE, FALSE);
		SSL_Certificate_Installer installer;
		
		opt->UseSecurityPassword("just1s3cret");
		
		verify(OpStatus::IsSuccess(installer.Construct(test_url, flags, opt)));
		
		installer.SetImportPassword(password);
		
		verify(installer.StartInstallation() == InstallerStatus::INSTALL_FINISHED);
		verify(installer.Finished());
		verify(installer.InstallSuccess());
	}
	opt->inc_reference();
	verify(opt->dec_reference() == 1);
	
	{
		SSL_Certificate_DisplayContext ctx(IDM_PERSONAL_CERTIFICATES_BUTT);
		
		ctx.SetExternalOptionsManager(opt);
		
		OpString name;
		unsigned int i = 0;
		BOOL found = FALSE;
		while(ctx.GetCertificateShortName(name, i))
		{
			if(name.Compare(test_cert_name) == 0)
			{
				found = TRUE;
				break;
			}
			i++;
			name.Empty();
		}
		verify(found);
	}
	opt->inc_reference();
	verify(opt->dec_reference() == 1);
}
finally
{
	if(opt && opt->dec_reference() == 0)
		OP_DELETE(opt);
	opt = NULL;
}

test("Automatic Client Certificate and Key Installation")
	file merry_men_p12 "testfiles/certinstall/merry_men.p12";
	require undefined SSL_DISABLE_CLIENT_CERTIFICATE_INSTALLATION;
{
	verify(TestKeyAndCertificate(merry_men_p12, UNI_L("Zaurus-532 [F2]"), "secret1"));
}

test("Flush auto updates") async;
   require defined LIBSSL_AUTO_UPDATE;
{
	update_waiter.Activate();
}
