/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2004-2006 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Yngve N. Pettersen
*/

group "ssl autoproxy loading";

require init;
require _NATIVE_SSL_SUPPORT_;
require SUPPORT_AUTO_PROXY_CONFIGURATION;
require PREFS_WRITE;

language c++;

include "core/pch.h";

include "modules/url/url_man.h";
include "modules/libssl/sslbase.h";
include "modules/libssl/ssl_api.h";
include "modules/libssl/options/sslopt.h";
include "modules/network_selftest/urldoctestman.h";
include "modules/network_selftest/ssl_waitupdate.h";
include "modules/network_selftest/proxy_replace.h";

global {

	URL_DocSelfTest_Manager *libssl_tests = NULL;
	
	Selftest_ProxyOveride proxy_setting;
	
#ifdef LIBSSL_AUTO_UPDATE
	SSL_WaitForAutoUpdate update_waiter;
#endif

}

table filename_list (const char *) filelist "testfiles/simple";

table url_list (const char *, const char *) 
{
  {"operasoftware.png", "https://bugs.opera.com/static/operalogo-1.png"},
  {"dnbnor_logo.gif","https://www.dnbnor.no/portalfront/nor/images/gfx/logo.gif"},
  {"operalogo.png","https://t.oslo.opera.com/operalogo.png"},
  {"citibank_logo.gif","https://online.citibank.com/JRS/cm/img/top_nav/logo.gif"},
  {"www_vrsn_logo.gif","https://www.verisign.com/stellent/groups/public/documents/image/www_vrsn_logo.gif"},
}

setup 
{
	urlManager->RemoveSensitiveData();
	if(g_ssl_api->CheckSecurityManager())
		g_securityManager->Init(SSL_LOAD_ALL_STORES);

	libssl_tests = OP_NEW(URL_DocSelfTest_Manager, ());
}

exit
{
	OP_DELETE(libssl_tests);
	libssl_tests = NULL;
	proxy_setting.ShutDown();
	
	// Do a shutdown of the pending connections
	urlManager->FreeUnusedResources(TRUE);
}

test("Initialized")
{
	verify(libssl_tests != NULL);
}

subtest CheckProxy()
{
	verify(proxy_setting.Active());
}

test("Check for updates") async;
   require defined LIBSSL_AUTO_UPDATE;
{
	update_waiter.Activate();
}

test("Activate Proxy")
{
	verify(OpStatus::IsSuccess(proxy_setting.SetAutoProxy( URLSelftestBase("testproxy.pac"), TRUE)));
	verify(proxy_setting.Active());
}


subtest AddSimpleTest(URL_DocSelfTest_Batch *batch, const OpStringC8 &url, URL &ref_url, const OpStringC8 &filename)
{
	verify(batch != NULL);
	verify(filename.HasContent());

	OpAutoPtr<URL_DocVerySimpleTest> test(OP_NEW(URL_DocVerySimpleTest, ()));
	verify(test.get() != NULL);

	verify(OpStatus::IsSuccess(test->Construct(url, ref_url, filename)));

	verify(batch->AddTestCase(test.release()));
}

subtest AddBatch(URL_DocSelfTest_Batch *batch)
{
	verify(batch != NULL);
	verify(libssl_tests->AddBatch(batch));
}

subtest StartTestSet()
{
	verify(libssl_tests->SetLastBatch());
}

subtest ConfigureATest(URL_DocSelfTest_Batch *batch, const OpStringC8 &filename, URL &ref_url)
{
	verify(batch != NULL);

	iterate(name, url) from url_list
	{
		OpString a_filename;
		verify(OpStatus::IsSuccess(a_filename.Set(filename)));

		OpFile a_file;

		verify(OpStatus::IsSuccess(a_file.Construct(a_filename)));

		OpStringC a_name(a_file.GetName());

		verify(a_name.HasContent());

		if(a_name.Compare(name) == 0)
		{
			verify(AddSimpleTest(batch, url, ref_url, filename));
		}
	}
}


subtest Setup_SingleSSLTest(const OpStringC8 &filename, URL &ref_url)
{
	OpAutoPtr<URL_DocSelfTest_Batch> batch(OP_NEW(URL_DocSelfTest_Batch, ()));

	verify(batch.get() != NULL);

	verify(ConfigureATest(batch.get(), filename, ref_url));

	verify(!batch->Empty());

	verify(AddBatch(batch.release()));
}

subtest Setup_BatchSSLtest()
{
	verify(proxy_setting.Active());
	int count = 0;
	URL ref_url;
	OpAutoPtr<URL_DocSelfTest_Batch> batch(OP_NEW(URL_DocSelfTest_Batch, ()));

	verify(batch.get() != NULL);

	iterate(filename) from filename_list
	{
		verify(ConfigureATest(batch.get(), filename, ref_url));
		count++;
	}

	verify(batch->Cardinal() == count);

	verify(AddBatch(batch.release()));
}

test("Load SSL URLs") async;
{
	URL ref_url;
	iterate(filename) from filename_list
	{
		if (!Setup_SingleSSLTest(filename, ref_url))
			ST_failed("Could not setup test %s", filename);
	}
	//Setup_BatchSSLtest();
	if (!StartTestSet())
		ST_failed("Could not start test set");
}
