/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "history.unescaped";
require init;
require HISTORY_SUPPORT;

include "modules/history/OpHistoryModel.h";

language C++;

table string_samples (const uni_char *, const uni_char *, OP_STATUS)
{
	// Empty test	
	{ UNI_L(""),
	  UNI_L(""),
	  OpStatus::OK },

	// Simple test - slash test
	{ UNI_L("http://www.opera.com"),
	  UNI_L("http://www.opera.com/"),
	  OpStatus::OK },

	// Still pretty simple test
	{ UNI_L("http://www.google.com/search?client=opera&rls=en&q=swf+penguin&sourceid=opera&ie=utf-8&oe=utf-8"),
	  UNI_L("http://www.google.com/search?client=opera&rls=en&q=swf+penguin&sourceid=opera&ie=utf-8&oe=utf-8"),
	  OpStatus::OK },

	// Russian test	
	{ UNI_L("http://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%81%D1%82"), 
	  UNI_L("http://ru.wikipedia.org/wiki/\x0422\x0435\x0441\x0442"),
	  OpStatus::OK },
}

test("History Make Unescaped")
{
    iterate(input_string, output_string, retval) from string_samples
	{
		OpString input;
		OP_STATUS status = input.Set(input_string);
		verify(status == retval);

		OpString output;
		status = output.Set(output_string);
		verify(status == retval);

		status = g_globalHistory->MakeUnescaped(input);
		verify(status == retval);

		verify(uni_strcmp(input.CStr(), output.CStr()) == 0);
	}
}
