/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "history.file";
require init;
require HISTORY_SUPPORT;

include "modules/history/OpHistoryModel.h";
include "modules/history/OpHistoryItem.h";

language C++;

table string_samples (const uni_char *)
{
	{ UNI_L("file:/")           },
	{ UNI_L("file://")          },
	{ UNI_L("file://localhost") },
	{ UNI_L("file:///")         },
	{ UNI_L("/")                },
	{ UNI_L("/home")            },
	{ UNI_L("localhost")        },
	{ UNI_L("localhost/")       },
}

test("History Files")
{
    OP_STATUS status;

    // ------------------------------------------------------
    //Clear history :
    status = g_globalHistory->DeleteAllItems();
    verify(status == OpStatus::OK);

    // ------------------------------------------------------
    // Set up the info :
    OpString url_name;
    url_name.Set("file://localhost/home/patricia/cool_file.txt");

    OpString title;
    title.Set("Cool File");

    time_t acc = g_timecache->CurrentTime();

    // ------------------------------------------------------
    // Add the item :
    status = g_globalHistory->Add(url_name.CStr(), title.CStr(), acc);
    verify(status == OpStatus::OK);

    // ------------------------------------------------------
    // Check the autocompletion :
    uni_char ** result = 0;
    int num_items = 0;

    iterate(input_string) from string_samples
    {
		result       = 0;
		num_items    = 0;

		status = g_globalHistory->GetItems(input_string,
										   &result,
										   &num_items,
										   OpHistoryModel::ALPHABETICALLY);

		verify(status == OpStatus::OK);
		verify(num_items == 1);

		verify(uni_strcmp(result[0] , url_name.CStr()) == 0);

		for(int i = 0; i < num_items*3; i++)
			delete [] result[i];

		delete [] result;
		result = 0;
    }

	// TODO add file://localhost/
}
