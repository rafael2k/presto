/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "history.add";
require init;
require HISTORY_SUPPORT;

include "modules/history/OpHistoryModel.h";
include "modules/history/OpHistoryPage.h";

language C++;

test("History Adding")
{
    OP_STATUS status;

	// ------------------------------------------------------
	//Clear history :
	status = g_globalHistory->DeleteAllItems();
	verify(status == OpStatus::OK);

	// ------------------------------------------------------
	// Set up the info :
	OpString url_name; 
	url_name.Set("http://www.webmonkey.com/");

	OpString title;
	title.Set("Webmonkey: The Web Developer's Resource");

	time_t acc = g_timecache->CurrentTime();

	// ------------------------------------------------------
	// Add the item :
	status = g_globalHistory->Add(url_name.CStr(), title.CStr(), acc);
	verify(status == OpStatus::OK);

	// ------------------------------------------------------
	// Try to retrieve it :
	HistoryPage *  history_item = NULL;
	status = g_globalHistory->GetItem(url_name.CStr(), history_item);
	verify(status == OpStatus::OK);
	verify(history_item != NULL);

	// ------------------------------------------------------
	// Check the result :

	// Check the address :
	OpString address;
	status = history_item->GetAddress(address);
	verify(status == OpStatus::OK);

	const uni_char*	item_address = address.CStr();
	verify(item_address != NULL);
	verify(uni_strcmp(url_name.CStr() , item_address) == 0);
	
	// Check the title :
	OpString title1;
	status = history_item->GetTitle(title1);
	verify(status == OpStatus::OK);

	const uni_char*	item_title = title1.CStr();
	verify(item_title != NULL);
	verify(uni_strcmp(title.CStr() , item_title) == 0);

	// Check the accessed time :
	verify(history_item->GetAccessed() == acc);

	// ------------------------------------------------------
	// Change the title :
	title.Set("Webmonkey: Your monkey online");

	// ------------------------------------------------------
	// Add an item again - same url:
	status = g_globalHistory->Add(url_name.CStr(), title.CStr(), acc);
	verify(status == OpStatus::OK);

	// ------------------------------------------------------
	// Try to retrieve it again :
	HistoryPage *  history_item2 = NULL;
	status = g_globalHistory->GetItem(url_name.CStr(), history_item2);
	verify(status == OpStatus::OK);
	verify(history_item2 != NULL);
	
	// ------------------------------------------------------
	// Check that they are the same :
	verify(history_item == history_item2);

	// ------------------------------------------------------
	// Check the result :

	// Check the address :
	OpString address2;
	status = history_item2->GetAddress(address2);
	verify(status == OpStatus::OK);

	const uni_char*	item_address2 = address2.CStr();
	verify(item_address2 != NULL);
	verify(uni_strcmp(url_name.CStr() , item_address2) == 0);
	
	// Check the title :
	OpString title2;
	status = history_item2->GetTitle(title2);
	verify(status == OpStatus::OK);

	const uni_char*	item_title2 = title2.CStr();
	verify(item_title2 != NULL);
	verify(uni_strcmp(title.CStr() , item_title2) == 0);

	// Check the accessed time :
	verify(history_item2->GetAccessed() == acc);
	// ------------------------------------------------------
}
