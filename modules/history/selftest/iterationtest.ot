/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "history.iteration";
require init;
require HISTORY_SUPPORT;

include "modules/history/OpHistoryModel.h";
include "modules/history/OpHistoryPage.h";

language C++;

table url_samples (const uni_char *, const uni_char*, time_t, BOOL, time_t)
{
	{ UNI_L("http://www.little-gamers.com/comics/00001551.gif"), UNI_L("Title 1"), 1173106132, TRUE, -1       },
	{ UNI_L("http://xkcd.org/c230.html"),                        UNI_L("Title 2"), 1173106172, TRUE, -1       },
	{ UNI_L("http://www.vg.no/"),                                UNI_L("Title 3"), 1172586234, TRUE, 3561936  },
	{ UNI_L("http://db.no/"),                                    UNI_L("Title 4"), 1138388417, TRUE, 32721221 },
	{ UNI_L("http://www.adobe.com/no/"),                         UNI_L("Title 5"), 1172479246, TRUE, 2127314  },
	{ UNI_L("http://www.cafemir.no/"),                           UNI_L("Title 6"), 1170861512, TRUE, 757259   },
	{ UNI_L("http://www.gulesider.no/tk/index.c"),               UNI_L("Title 7"), 1170684169, TRUE, 914114   },
	{ UNI_L("http://people.opera.com/howcome/"),                 UNI_L("Title 8"), 1131017655, TRUE, 40091983 },
	{ UNI_L("http://www.ifi.uio.no"),                            UNI_L("Title 9"), 1146072219, TRUE, 25037444 },
}

test("History Iteration")
{
    OP_STATUS status;

    // ------------------------------------------------------
    //Clear history :
    status = g_globalHistory->DeleteAllItems();
    verify(status == OpStatus::OK);

    // ------------------------------------------------------
    // Add items :
    iterate(url_name, title, acc, save_session, average_interval) from url_samples
    {
        status = g_globalHistory->AddPage(url_name, title, acc, save_session, average_interval);
		verify(status == OpStatus::OK);
    }

    // ------------------------------------------------------
    // Test the iteration :

    HistoryPage * page_1 = 0;

    OpString address_1;
    OpString address_2;

    OpString title_1;
    OpString title_2;

    time_t accessed_1 = 0;
    time_t accessed_2 = 0;

    status = g_globalHistory->GetFirst(address_2);
    verify(status == OpStatus::OK);

    for(int i = 0; i < g_globalHistory->GetCount(); i++)
    {
		page_1 = g_globalHistory->GetItemAtPosition(i);
		verify(page_1);

		// Check the address :
		status = page_1->GetAddress(address_1);
		verify(status == OpStatus::OK);

		verify(address_1 == address_2);

		// Check the title :
		status = page_1->GetTitle(title_1);
		verify(status == OpStatus::OK);

		status = g_globalHistory->GetTitle(title_2);
		verify(status == OpStatus::OK);

		verify(title_1 == title_2);

		// Check accessed :
		accessed_1 = page_1->GetAccessed();
		accessed_2 = g_globalHistory->GetAccessed();

		verify(accessed_1 == accessed_2);

		// Move to next :
		status = g_globalHistory->GetNext(address_2);
		verify( (status == OpStatus::OK) || (i == (g_globalHistory->GetCount() - 1)) );
    }
}
