/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "history.ftp";
require init;
require HISTORY_SUPPORT;

include "modules/history/OpHistoryModel.h";
include "modules/history/OpHistoryItem.h";

language C++;

table url_samples (const uni_char *)
{
	{ UNI_L("ftp://opera.com")       },
	{ UNI_L("ftp://ftp.opera.com")   },
	{ UNI_L("ftp://www.opera.com")   },
	{ UNI_L("http://ftp.opera.com")  },
	{ UNI_L("https://ftp.opera.com") },
}

table string_samples (const uni_char *, int)
{
	{ UNI_L("ftp://"),       3 },
	{ UNI_L("ftp://ftp."),   1 },
	{ UNI_L("http://ftp."),	 1 },
	{ UNI_L("https://ftp."), 1 },
	{ UNI_L("ftp."),         3 },
}

test("History Ftp")
{
    OP_STATUS status;	
    
    // ------------------------------------------------------
    //Clear history :
    status = g_globalHistory->DeleteAllItems();
    verify(status == OpStatus::OK);
    
    // ------------------------------------------------------
    // Add items :
    iterate(url_string) from url_samples
		{
			status = g_globalHistory->Add(url_string, UNI_L("Opera Ftp"), g_timecache->CurrentTime());
			verify(status == OpStatus::OK);
		}

    // ------------------------------------------------------
    // Check the autocompletion :
    uni_char ** result = 0;
    int num_items = 0;
    int num_occ   = 0;

    iterate(input_string, num) from string_samples
		{
			result       = 0;
			num_items    = 0;
			num_occ	     = num;
			
			status = g_globalHistory->GetItems(input_string,
											   &result,
											   &num_items,
											   OpHistoryModel::ALPHABETICALLY);
			
			verify(status == OpStatus::OK);
			verify(num_items == num_occ);

			for(int i = 0; i < num_items*3; i++)
				delete [] result[i];

			delete [] result;
			result = 0;
		}
}
