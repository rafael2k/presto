/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "history.autocompletion";
require init;
require HISTORY_SUPPORT;

include "modules/history/OpHistoryModel.h";
include "modules/history/OpHistoryItem.h";
include "modules/doc/frm_doc.h";
include "modules/url/url_man.h";

language C++;

test("History AutoCompetion")
{
	OpString url_name;
	OpString title;
	time_t acc;
	OP_STATUS status;
	const uni_char* match_string;
	uni_char ** result = NULL;
	int num_items = 0;
	int i;

	// ------------------------------------------------------
	// Clear history :
	status = g_globalHistory->DeleteAllItems();
	verify(status == OpStatus::OK);

	// ------------------------------------------------------
	// Add item one:

	// Set up the info :
	url_name.Set("http://www.webmonkey.com/");
	title.Set("Webmonkey: The Web Developer's Resource");
	acc = g_timecache->CurrentTime();

	// Add the item :
	status = g_globalHistory->Add(url_name.CStr(), title.CStr(), acc);
	verify(status == OpStatus::OK);

	// ------------------------------------------------------
	// Add item two:

	// Set up the info :
	url_name.Set("http://www.whatismyip.com/");
	title.Set("WhatIsMyIP.com");
	acc = g_timecache->CurrentTime();

	// Add the item :
	status = g_globalHistory->Add(url_name.CStr(), title.CStr(), acc);
	verify(status == OpStatus::OK);

	// ------------------------------------------------------
	// Add item three:

	// Set up the info :
	url_name.Set("http://www.whitehouse.gov/");
	title.Set("Welcome to the White House");
	acc = g_timecache->CurrentTime();

	// Add the item :
	status = g_globalHistory->Add(url_name.CStr(), title.CStr(), acc);
	verify(status == OpStatus::OK);

	// ------------------------------------------------------
	// Check the result (prefix one) :

	match_string = UNI_L("http://www.w");
	result       = 0;
	num_items    = 0;

	status = g_globalHistory->GetItems (match_string,
										&result,
										&num_items,
										OpHistoryModel::ALPHABETICALLY);

	verify(status == OpStatus::OK);
	verify(num_items == 3);

	// One :
	verify(uni_strcmp(result[0] , UNI_L("http://www.webmonkey.com/")) == 0);
	verify(uni_strcmp(result[1] , UNI_L("Webmonkey: The Web Developer's Resource")) == 0);

	// Two :
	verify(uni_strcmp(result[3] , UNI_L("http://www.whatismyip.com/")) == 0);
	verify(uni_strcmp(result[4] , UNI_L("WhatIsMyIP.com")) == 0);

	// Three :
	verify(uni_strcmp(result[6] , UNI_L("http://www.whitehouse.gov/")) == 0);
	verify(uni_strcmp(result[7] , UNI_L("Welcome to the White House")) == 0);

	for(i = 0; i < num_items*3; i++)
		delete [] result[i];

	delete [] result;
	result = 0;

	// ------------------------------------------------------
	// Check the result (prefix two) :

	match_string = UNI_L("www.w");
	result       = 0;
	num_items    = 0;

	status = g_globalHistory->GetItems (match_string,
										&result,
										&num_items,
										OpHistoryModel::ALPHABETICALLY);

	verify(status == OpStatus::OK);
	verify(num_items == 3);

	// One :
	verify(uni_strcmp(result[0] , UNI_L("http://www.webmonkey.com/")) == 0);
	verify(uni_strcmp(result[1] , UNI_L("Webmonkey: The Web Developer's Resource")) == 0);

	// Two :
	verify(uni_strcmp(result[3] , UNI_L("http://www.whatismyip.com/")) == 0);
	verify(uni_strcmp(result[4] , UNI_L("WhatIsMyIP.com")) == 0);

	// Three :
	verify(uni_strcmp(result[6] , UNI_L("http://www.whitehouse.gov/")) == 0);
	verify(uni_strcmp(result[7] , UNI_L("Welcome to the White House")) == 0);

	for(i = 0; i < num_items*3; i++)
		delete [] result[i];

	delete [] result;
	result = 0;

	// ------------------------------------------------------
	// Check the result (prefix three) :

	match_string = UNI_L("wh");
	result       = 0;
	num_items    = 0;

	status = g_globalHistory->GetItems (match_string,
										&result,
										&num_items,
										OpHistoryModel::ALPHABETICALLY);

	verify(status == OpStatus::OK);

    verify(num_items == 2);

	// One :
	verify(uni_strcmp(result[0] , UNI_L("http://www.whatismyip.com/")) == 0);
	verify(uni_strcmp(result[1] , UNI_L("WhatIsMyIP.com")) == 0);

	// Two :
	verify(uni_strcmp(result[3] , UNI_L("http://www.whitehouse.gov/")) == 0);
	verify(uni_strcmp(result[4] , UNI_L("Welcome to the White House")) == 0);
}
finally
{
	for(i = 0; i < num_items*3; i++)
		delete [] result[i];

	delete [] result;
	result = 0;
}

test("History AutoCompetion IDNA, CORE-27152")
{
	URL url;
	OP_STATUS status;
	const uni_char* match_string;
	uni_char ** result = NULL;
	int num_items = 0;
	int i;

	// ------------------------------------------------------
	// Clear history :
	status = g_globalHistory->DeleteAllItems();
	verify(status == OpStatus::OK);

	// ------------------------------------------------------
	// Add item one:

	// Set up the info :
	url = urlManager->GetURL("http://xn--dahlstrm-t4a.net/%61?tax=10%25");

	// Add the item :
	status = state.doc->GetWindow()->AddToGlobalHistory(url, UNI_L("Dummy title"));
	verify(status == OpStatus::OK);

	// ------------------------------------------------------
	// Check the result (prefix one) :

	match_string = UNI_L("dahl");
	result       = 0;
	num_items    = 0;

	status = g_globalHistory->GetItems (match_string,
										&result,
										&num_items,
										OpHistoryModel::ALPHABETICALLY);

	verify(status == OpStatus::OK);
	verify(num_items == 1);
	verify(uni_strcmp(result[0] , UNI_L("http://dahlstr\366m.net/a?tax=10%25")) == 0);

	for(i = 0; i < num_items*3; i++)
		delete [] result[i];

	delete [] result;
	result = 0;

	// ------------------------------------------------------
	// Check the result (prefix two) :

	match_string = UNI_L("dahlstr\366m.n");
	result       = 0;
	num_items    = 0;

	status = g_globalHistory->GetItems (match_string,
										&result,
										&num_items,
										OpHistoryModel::ALPHABETICALLY);

	verify(status == OpStatus::OK);
	verify(num_items == 1);
	verify(uni_strcmp(result[0] , UNI_L("http://dahlstr\366m.net/a?tax=10%25")) == 0);
}
finally
{
	for(i = 0; i < num_items*3; i++)
		delete [] result[i];

	delete [] result;
}
