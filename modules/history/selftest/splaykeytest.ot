/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "history.splaykey";
require init;
require HISTORY_SUPPORT;

include "modules/history/src/HistoryKey.h";
include "modules/history/src/OpSplayTree.h";

language C++;

global
{
	class DummyNode
		: public OpTypedObject
	{
		virtual Type 	GetType() { return OpTypedObject::UNKNOWN_TYPE; }
		virtual INT32	GetID()   { return 0; }
	};

};


test("Insert as leaf with a HistoryKey and remove it again")
{
	const uni_char * keystring = UNI_L("keystring");

	// Create the key
	OpAutoPtr<HistoryKey> key(HistoryKey::Create(keystring));
	verify(key.get());

	// Insert it as a leaf node
	OpSplayTree<DummyNode, DummyNode> tree;
	DummyNode ** dummy_ptr = tree.InsertLeafNode(key.get(), 0);

	verify(dummy_ptr);
	verify(*dummy_ptr == 0);
	verify(tree.GetKey(keystring) == key.get());

	// Insert a dummy node there
	DummyNode node;
	*dummy_ptr = &node;

	// Remove it again
	BOOL retval = tree.RemoveLeafNode(keystring, 0);
	verify(retval);
	verify(!tree.GetKey(keystring));
}


test("Insert as internal node with a HistoryKey and remove it again")
{
	const uni_char * keystring = UNI_L("keystring");

	// Create the key
	OpAutoPtr<HistoryKey> key(HistoryKey::Create(keystring));
	verify(key.get());

	// Insert it as an interal node
	OpSplayTree<DummyNode, DummyNode> tree;
	DummyNode ** dummy_ptr = tree.InsertInternalNode(key.get());

	verify(dummy_ptr);
	verify(*dummy_ptr == 0);
	verify(tree.GetKey(keystring) == key.get());

	// Insert a dummy node there
	DummyNode node;
	*dummy_ptr = &node;

	// Remove it again
	BOOL retval = tree.RemoveInternalNode(keystring);
	verify(retval);
	verify(!tree.GetKey(keystring));	
}

test("Only insert a HistoryKey as a leaf and remove it again")
{
	const uni_char * keystring = UNI_L("keystring");

	// Create the key
	OpAutoPtr<HistoryKey> key(HistoryKey::Create(keystring));
	verify(key.get());

	// Insert it as a leaf node
	OpSplayTree<DummyNode, DummyNode> tree;
	DummyNode ** dummy_ptr = tree.InsertLeafNode(key.get(), 0);

	verify(dummy_ptr);
	verify(*dummy_ptr == 0);
	verify(tree.GetKey(keystring) == key.get());

	// Remove it again
	BOOL retval = tree.RemoveLeafNode(keystring, 0);
	verify(!retval);
	verify(!tree.GetKey(keystring));
}


test("Only insert a HistoryKey as an internal node and remove it again")
{
	const uni_char * keystring = UNI_L("keystring");

	// Create the key
	OpAutoPtr<HistoryKey> key(HistoryKey::Create(keystring));
	verify(key.get());

	// Insert it as an interal node
	OpSplayTree<DummyNode, DummyNode> tree;
	DummyNode ** dummy_ptr = tree.InsertInternalNode(key.get());

	verify(dummy_ptr);
	verify(*dummy_ptr == 0);
	verify(tree.GetKey(keystring) == key.get());

	// Remove it again
	BOOL retval = tree.RemoveInternalNode(keystring);
	verify(!retval);
	verify(!tree.GetKey(keystring));	
}
