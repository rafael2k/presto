/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "history.nicks";
require init;
require HISTORY_SUPPORT;

include "modules/history/OpHistoryModel.h";
include "modules/history/OpHistoryPage.h";

language C++;

table nick_samples (const uni_char *, const uni_char*, const uni_char*)
{
	{ UNI_L("http://www.ikke.no/"),            UNI_L("IKKE.NO(E!)"),     UNI_L("test")},
	{ UNI_L("http://my.opera.com/community/"), UNI_L("Opera Community"), UNI_L("test2")},
}

test("History Nicks")
{
    OP_STATUS status;

    // ------------------------------------------------------
    //Clear history :

    status = g_globalHistory->DeleteAllItems();
    verify(status == OpStatus::OK);

    // ------------------------------------------------------
    //Clear bookmarks :

	OpVector<HistoryPage> vector;
	g_globalHistory->GetBookmarkItems(vector);

	while(vector.GetCount())
	{
		HistoryPage * item = vector.Remove(0);

		verify(item != 0);

		OpString address;
		item->GetAddress(address);

		verify(address.HasContent());

		status = g_globalHistory->RemoveBookmark(address.CStr());

		verify(status == OpStatus::OK);
	}

	// ------------------------------------------------------
    // Check that they are gone :

	verify(vector.GetCount() == 0);
	g_globalHistory->GetBookmarkItems(vector);
	verify(vector.GetCount() == 0);

    // ------------------------------------------------------
    // Add bookmarks and nicks :

    iterate(url_name, title, nick) from nick_samples
		{
			HistoryPage * out_item = 0;

			status = g_globalHistory->AddBookmark(url_name, title, out_item);
			verify(status == OpStatus::OK);
			verify(out_item != 0);

			status = g_globalHistory->AddBookmarkNick(nick, *out_item);
			verify(status == OpStatus::OK);

			HistoryPage * check_item = 0;
			status = g_globalHistory->GetBookmarkByNick(nick, check_item);
			verify(status == OpStatus::OK);
			verify(check_item != 0);

			verify(out_item == check_item);
		}

	// ------------------------------------------------------
	// Check the result (before insert) :

	const uni_char* match_string = UNI_L("test");
	uni_char **     result       = 0;
	int             num_items    = 0;

	status = g_globalHistory->GetItems (match_string,
										&result,
										&num_items,
										OpHistoryModel::ALPHABETICALLY);

	verify(status == OpStatus::OK);
	verify(num_items == 2);

	// ------------------------------------------------------
	// Set up the info :

	const uni_char * url_name = UNI_L("http://my.opera.com/community/");
	const uni_char * title    = UNI_L("Opera Community");
	const uni_char * nick     = UNI_L("test2");

	HistoryPage * out_item = 0;

	status = g_globalHistory->AddBookmark(url_name, title, out_item);
	verify(status == OpStatus::OK);
	verify(out_item != 0);

	status = g_globalHistory->AddBookmarkNick(nick, *out_item);
	verify(status == OpStatus::OK);

	HistoryPage * check_item = 0;
	status = g_globalHistory->GetBookmarkByNick(nick, check_item);
	verify(status == OpStatus::OK);
	verify(check_item != 0);

	verify(out_item == check_item);

	int i;
	for(i = 0; i < num_items*3; i++)
		delete [] result[i];

	delete [] result;
	result = 0;

	// ------------------------------------------------------
	// Check the result (after insert) :

	match_string = UNI_L("test");
	result       = 0;
	num_items    = 0;

	status = g_globalHistory->GetItems (match_string,
										&result,
										&num_items,
										OpHistoryModel::ALPHABETICALLY);

	verify(status == OpStatus::OK);
	verify(num_items == 2);

	for(i = 0; i < num_items*3; i++)
		delete [] result[i];

	delete [] result;
	result = 0;
}
