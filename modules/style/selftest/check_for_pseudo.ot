/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "style.pseudo.bits";

language C++;

include "modules/doc/frm_doc.h";
include "modules/logdoc/htm_elm.h";

global {
	HTML_Element* GetNextOfType(HTML_Element* start_elm, Markup::Type type)
	{
		if (start_elm)
			do {
				start_elm = start_elm->NextActual();
			} while (start_elm && start_elm->Type() != type);

		return start_elm;
	}

	HTML_Element* cur_elm;
}

html {
//! <!DOCTYPE html>
//! <html>
//! <head>
//! <style>
//! body:hover #t1 { color: green; }
//!
//! body #t2::after { color: green; content: "X"; }
//! body #t3::before { color: green; content: "X"; }
//! body #t4::first-letter { color: green; }
//! body #t5::first-line { color: green; }
//!
//! body:hover #t6::after { color: green; content: "X"; }
//! body:hover #t7::before { color: green; content: "X"; }
//! body:hover #t8::first-letter { color: green; }
//! body:hover #t9::first-line { color: green; }
//!
//! body #t10::after { color: green; content: "X"; }
//! body #t10::before { color: green; content: "X"; }
//! body #t10::first-letter { color: green; }
//! body #t10::first-line { color: green; }
//!
//! #t11:hover::after { color: green; content: "X"; }
//!
//! body:active #t12:hover::before { color: green; content: "X"; }
//!
//! #t13.x::before { content: "XXX"; }
//! #t14.x::after { content: "XXX"; }
//! #t15.x::first-letter { color: red; }
//! #t16.x::first-line { color: red; }
//! </style>
//! </head>
//! <body>
//! <div id="t1"></div>
//! <div id="t2"></div>
//! <div id="t3"></div>
//! <div id="t4"></div>
//! <div id="t5"></div>
//! <div id="t6"></div>
//! <div id="t7"></div>
//! <div id="t8"></div>
//! <div id="t9"></div>
//! <div id="t10"></div>
//! <div id="t11"></div>
//! <div id="t12"></div>
//! <div id="t13" class="x"></div>
//! <div id="t14" class="x"></div>
//! <div id="t15" class="x">XXX</div>
//! <div id="t16" class="x">XXX</div>
//! </body>
//! </html>
}

test("Sanity check and setup")
{
	verify(state.doc);
	cur_elm = state.doc->GetDocRoot();
	verify(cur_elm != NULL);
}

test("Body pseudo bit test")
{
	HTML_Element* body_elm = GetNextOfType(cur_elm, Markup::HTE_BODY);
	verify(body_elm->HasDynamicPseudo() == TRUE);
}

test("Pseudo bit test #1")
{
	cur_elm = GetNextOfType(cur_elm, Markup::HTE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == TRUE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #2")
{
	cur_elm = GetNextOfType(cur_elm, Markup::HTE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == FALSE);
	verify(cur_elm->HasAfter() == TRUE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #3")
{
	cur_elm = GetNextOfType(cur_elm, Markup::HTE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == FALSE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == TRUE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #4")
{
	cur_elm = GetNextOfType(cur_elm, Markup::HTE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == FALSE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == TRUE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #5")
{
	cur_elm = GetNextOfType(cur_elm, Markup::HTE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == FALSE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == TRUE);
}

test("Pseudo bit test #6")
{
	cur_elm = GetNextOfType(cur_elm, Markup::HTE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == TRUE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #7")
{
	cur_elm = GetNextOfType(cur_elm, Markup::HTE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == TRUE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #8")
{
	cur_elm = GetNextOfType(cur_elm, Markup::HTE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == TRUE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #9")
{
	cur_elm = GetNextOfType(cur_elm, Markup::HTE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == TRUE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #10")
{
	cur_elm = GetNextOfType(cur_elm, Markup::HTE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == FALSE);
	verify(cur_elm->HasAfter() == TRUE);
	verify(cur_elm->HasBefore() == TRUE);
	verify(cur_elm->HasFirstLetter() == TRUE);
	verify(cur_elm->HasFirstLine() == TRUE);
}

test("Pseudo bit test #11")
{
	cur_elm = GetNextOfType(cur_elm, Markup::HTE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == TRUE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #12")
{
	cur_elm = GetNextOfType(cur_elm, Markup::HTE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == TRUE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #13/1")
{
	cur_elm = GetNextOfType(cur_elm, HE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == FALSE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == TRUE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #13 - change class") language ecmascript;
{
	var t13 = document.getElementById("t13");
	verify(parseInt(getComputedStyle(t13, "").height) > 0);
	t13.className = "";
	verify(parseInt(getComputedStyle(t13, "").height) == 0);
}

test("Pseudo bit test #13/2")
{
	verify(cur_elm->HasDynamicPseudo() == FALSE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #14/1")
{
	cur_elm = GetNextOfType(cur_elm, HE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == FALSE);
	verify(cur_elm->HasAfter() == TRUE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #14 - change class") language ecmascript;
{
	var t14 = document.getElementById("t14");
	verify(parseInt(getComputedStyle(t14, "").height) > 0);
	t14.className = "";
	verify(parseInt(getComputedStyle(t14, "").height) == 0);
}

test("Pseudo bit test #14/2")
{
	verify(cur_elm->HasDynamicPseudo() == FALSE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #15/1")
{
	cur_elm = GetNextOfType(cur_elm, HE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == FALSE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == TRUE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #15 - change class") language ecmascript;
{
	var t15 = document.getElementById("t15");
	verify(getComputedStyle(t15, "::first-letter").color == "rgb(255, 0, 0)");
	t15.className = "";
	verify(getComputedStyle(t15, "::first-letter").color != "rgb(255, 0, 0)");
}

test("Pseudo bit test #15/2")
{
	verify(cur_elm->HasDynamicPseudo() == FALSE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

test("Pseudo bit test #16/1")
{
	cur_elm = GetNextOfType(cur_elm, HE_DIV);

	verify(cur_elm != NULL);
	verify(cur_elm->HasDynamicPseudo() == FALSE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == TRUE);
}

test("Pseudo bit test #16 - change class") language ecmascript;
{
	verify(getComputedStyle(t16, "::first-line").color == "rgb(255, 0, 0)");
	t16.className = "";
	verify(getComputedStyle(t16, "::first-line").color != "rgb(255, 0, 0)");
}

test("Pseudo bit test #16/2")
{
	verify(cur_elm->HasDynamicPseudo() == FALSE);
	verify(cur_elm->HasAfter() == FALSE);
	verify(cur_elm->HasBefore() == FALSE);
	verify(cur_elm->HasFirstLetter() == FALSE);
	verify(cur_elm->HasFirstLine() == FALSE);
}

