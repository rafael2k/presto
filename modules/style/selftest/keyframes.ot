/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "style.keyframes";

require init;
require CSS_ANIMATIONS;

include "modules/doc/frm_doc.h";
include "modules/logdoc/htm_elm.h";
include "modules/style/css_property_list.h";
include "modules/style/src/css_keyframes.h";

global
{
	CSS_KeyframesRule* GetKeyframesRule(const uni_char* name, HTML_Element* sheet_elm)
	{
		if (sheet_elm)
			if (CSS* css = sheet_elm->GetCSS())
				return css->GetKeyframesRule(state.doc, name, state.doc->GetMediaType());
		return NULL;
	}
}

subtest TestKeyframeSelector(CSS_KeyframeRule* keyframe, double selector)
{
	verify(keyframe);

	CSS_KeyframeSelector* first = keyframe->GetFirstSelector();

	verify(first);
	verify(first->GetPosition() == selector);
	verify(!first->Suc());
}

subtest TestKeyframeSelectors(CSS_KeyframeRule* keyframe, double* selectors, int n_selectors)
{
	verify(keyframe);

	CSS_KeyframeSelector* iter = keyframe->GetFirstSelector();

	for (int i = 0; i < n_selectors; i++)
	{
		verify(iter);
		verify(iter->GetPosition() == selectors[i]);

		iter = iter->Suc();
	}
}

subtest TestNumberKeyframe(CSS_KeyframeRule* keyframe, int idx, int prop, double number, int number_type)
{
	verify(keyframe);

	CSS_property_list* props = keyframe->GetPropertyList();
	verify(props);

	CSS_decl* decl = props->GetFirstDecl();
	verify(decl);

	while (idx-- > 0)
	{
		decl = decl->Suc();
		verify(decl);
	}

	verify(decl->GetProperty() == prop);
	verify(decl->GetDeclType() == CSS_DECL_NUMBER);
	verify(decl->GetNumberValue(0) == number);
	verify(decl->GetValueType(0) == number_type);
}

subtest TestKeyframeEmpty(CSS_KeyframeRule* keyframe)
{
	verify(keyframe);

	CSS_property_list* props = keyframe->GetPropertyList();
	verify(props);

	verify(props->IsEmpty());
}

html {
//! <style type="text/css">
//! @keyframes anim-name {
//!   from {
//!     left: 200px;
//!     top: 100px;
//!   }
//!   50% {
//!     left: 300px;
//!     top: 110px;
//!   }
//!   to {
//!     left: 100px;
//!     top: 120px
//!   }
//! }
//! </style>
}
test("@keyframes: the basics")
{
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("anim-name"), find_element("style"));
	verify(rule);

	CSS_KeyframeRule* keyframe = rule->First();
	verify(TestKeyframeSelector(keyframe, 0.0));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_left, 200, CSS_PX));
	verify(TestNumberKeyframe(keyframe, 1, CSS_PROPERTY_top, 100, CSS_PX));

	keyframe = keyframe->Suc();
	verify(TestKeyframeSelector(keyframe, 0.5));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_left, 300, CSS_PX));
	verify(TestNumberKeyframe(keyframe, 1, CSS_PROPERTY_top, 110, CSS_PX));

	keyframe = keyframe->Suc();
	verify(TestKeyframeSelector(keyframe, 1.0));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_left, 100, CSS_PX));
	verify(TestNumberKeyframe(keyframe, 1, CSS_PROPERTY_top, 120, CSS_PX));

	verify(!keyframe->Suc());
}

html {
//! <style type="text/css">
//! @keyframes constant {
//!   from, to {
//!     left: 200px;
//!     top: 100px;
//!   }
//! }
//! </style>
}
test("@keyframes: keyframe selector can be a list")
{
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("constant"), find_element("style"));
	verify(rule);

	CSS_KeyframeRule* keyframe = rule->First();

	double selectors[2] = { 0.0, 1.0 };
	verify(TestKeyframeSelectors(keyframe, selectors, 2));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_left, 200, CSS_PX));
	verify(TestNumberKeyframe(keyframe, 1, CSS_PROPERTY_top, 100, CSS_PX));

	verify(!keyframe->Suc());
}

html {
//! <style>
//!   @keyframes bounce {
//!
//!     from {
//!       top: 100px;
//!     }
//!
//!     25% {
//!       top: 50px;
//!     }
//!
//!     50% {
//!       top: 100px;
//!     }
//!
//!     75% {
//!       top: 75px;
//!     }
//!
//!     to {
//!       top: 100px;
//!     }
//!
//!   }
//! </style>
}
test("@keyframes: many keyframes")
{
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("bounce"), find_element("style"));
	verify(rule);

	CSS_KeyframeRule* keyframe = rule->First();
	verify(TestKeyframeSelector(keyframe, 0.0));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 100, CSS_PX));

	keyframe = keyframe->Suc();
	verify(TestKeyframeSelector(keyframe, 0.25));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 50, CSS_PX));

	keyframe = keyframe->Suc();
	verify(TestKeyframeSelector(keyframe, 0.5));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 100, CSS_PX));

	keyframe = keyframe->Suc();
	verify(TestKeyframeSelector(keyframe, 0.75));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 75, CSS_PX));

	keyframe = keyframe->Suc();
	verify(TestKeyframeSelector(keyframe, 1.0));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 100, CSS_PX));

	verify(!keyframe->Suc());
}

html {
//! <style>
//!   @keyframes bounce {
//!     to { top: 100px; }
//!     25% { top: 50px; }
//!     50% { top: 100px; }
//!     from { top: 100px; }
//!     75% { top: 75px; }
//!   }
//! </style>
}
test("@keyframes: order of keyframes should be kept")
{
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("bounce"), find_element("style"));
	verify(rule);

	CSS_KeyframeRule* keyframe = rule->First();
	verify(TestKeyframeSelector(keyframe, 1.0));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 100, CSS_PX));

	keyframe = keyframe->Suc();
	verify(TestKeyframeSelector(keyframe, 0.25));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 50, CSS_PX));

	keyframe = keyframe->Suc();
	verify(TestKeyframeSelector(keyframe, 0.5));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 100, CSS_PX));

	keyframe = keyframe->Suc();
	verify(TestKeyframeSelector(keyframe, 0.0));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 100, CSS_PX));

	keyframe = keyframe->Suc();
	verify(TestKeyframeSelector(keyframe, 0.75));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 75, CSS_PX));

	verify(!keyframe->Suc());
}

html {
//! <style>
//!   @keyframes bounce{to{top:100px}25%{top:50px}50%{top:100px}from{top:100px}75%{top:75px}}
//! </style>
}
test("@keyframes: spaces and semicolons are optional")
{
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("bounce"), find_element("style"));
	verify(rule);

	CSS_KeyframeRule* keyframe = rule->First();
	verify(TestKeyframeSelector(keyframe, 1.0));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 100, CSS_PX));

	keyframe = keyframe->Suc();
	verify(TestKeyframeSelector(keyframe, 0.25));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 50, CSS_PX));

	keyframe = keyframe->Suc();
	verify(TestKeyframeSelector(keyframe, 0.5));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 100, CSS_PX));

	keyframe = keyframe->Suc();
	verify(TestKeyframeSelector(keyframe, 0.0));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 100, CSS_PX));

	keyframe = keyframe->Suc();
	verify(TestKeyframeSelector(keyframe, 0.75));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 75, CSS_PX));

	verify(!keyframe->Suc());
}

html {
//! <style>
//!   @keyframes dup {
//!     from, to {
//!       top: 100px;
//!     }
//!   }
//!   @keyframes dup {
//!     from, to {
//!       top: 200px;
//!     }
//!   }
//! </style>
}
test("@keyframes: drop duplicate keyframes declarations")
{
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("dup"), find_element("style"));
	verify(rule);

	double selectors[2] = { 0.0, 1.0 };

	CSS_KeyframeRule* keyframe = rule->First();
	verify(TestKeyframeSelectors(keyframe, selectors, 2));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 200, CSS_PX));

	verify(!keyframe->Suc());
}

html
{
//! <style>
//!   @keyframes inerror {
//!     0 { top: 100px; }
//!   }
//! </style>
}
test("@keyframes: zero is an invalid keyframe selector")
{
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("inerror"), find_element("style"));
	verify(rule);
	verify(!rule->First());
}

html
{
//! <style>
//!   @keyframes inerror {
//!     foo { top: 100px; }
//!   }
//! </style>
}
test("@keyframes: foo is an invalid keyframe selector")
{
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("inerror"), find_element("style"));
	verify(rule);
	verify(!rule->First());
}

html
{
//! <style>
//!   @keyframes inerror {
//!     0 { top: 100px; }
//!     0% { top: 110px; }
//!   }
//! </style>
}
test("@keyframes: don't drop rules after error#1")
{
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("inerror"), find_element("style"));
	verify(rule);

	CSS_KeyframeRule* keyframe = rule->First();
	verify(TestKeyframeSelector(keyframe, 0.0));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 110, CSS_PX));

	verify(!keyframe->Suc());
}

html
{
//! <style>
//!   @keyframes inerror {
//!     foo { top: 100px; }
//!     0% { top: 110px; }
//!   }
//! </style>
}
test("@keyframes: don't drop rules after error#2")
{
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("inerror"), find_element("style"));
	verify(rule);

	CSS_KeyframeRule* keyframe = rule->First();

	verify(TestKeyframeSelector(keyframe, 0.0));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 110, CSS_PX));

	verify(!keyframe->Suc());
}

html
{
//! <style>
//!   @keyframes inerror {
//!     0 { top: 100px; }
//!   }
//!   @keyframes proper {
//!     0% { top: 100px; }
//!   }
//! </style>
}
test("@keyframes: resume parsing after error")
{
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("proper"), find_element("style"));
	verify(rule);

	CSS_KeyframeRule* keyframe = rule->First();

	verify(TestKeyframeSelector(keyframe, 0.0));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 100, CSS_PX));
	verify(!keyframe->Suc());
}

html
{
//! <style>
//!   @keyframes inerror {
//!     0% { top 100px; }
//!   }
//! </style>
}
test("@keyframes: invalid declaration")
{
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("inerror"), find_element("style"));
	verify(rule);

	CSS_KeyframeRule* keyframe = rule->First();
	verify(TestKeyframeEmpty(keyframe));
	verify(!keyframe->Suc());
}

html
{
//! <style>
//!   @keyframes inerror {
//!     0% { top 100px; }
//!     from { top: 110px; }
//!   }
//! </style>
}
test("@keyframes: recover from invalid declaration")
{
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("inerror"), find_element("style"));
	verify(rule);

	CSS_KeyframeRule* keyframe = rule->First();
	verify(keyframe);
	keyframe = keyframe->Suc(); // first is empty, look at second

	verify(TestKeyframeSelector(keyframe, 0.0));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 110, CSS_PX));
	verify(!keyframe->Suc());
}

html
{
//! <style>
//!   @keyframes inerror {
//!     0% { top: 100px !important; }
//!   }
//! </style>
}
test("@keyframes: invalid declaration (!important)")
{
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("inerror"), find_element("style"));
	verify(rule);

	CSS_KeyframeRule* keyframe = rule->First();
	verify(TestKeyframeEmpty(keyframe));
	verify(!keyframe->Suc());
}

html
{
//! <style>
//!   @keyframes inerror {
//!     0% { top: 100px !important; }
//!     from { top: 110px; }
//!   }
//! </style>
}
test("@keyframes: recover from invalid declaration (!important)")
{
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("inerror"), find_element("style"));
	verify(rule);

	CSS_KeyframeRule* keyframe = rule->First();
	verify(keyframe);
	keyframe = keyframe->Suc(); // first is empty, look at second

	verify(TestKeyframeSelector(keyframe, 0.0));
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 110, CSS_PX));
	verify(!keyframe->Suc());
}

html
{
//! <style>
//!   @keyframes inerror {
//!     color: red;
//!   }
//!   @keyframes proper {
//!     from { top: 110px; }
//!   }
//! </style>
}
test("@keyframes: recover from keyframe syntax error")
{
	// First keyframes rule (inerror) should be empty.
	CSS_KeyframesRule* rule = GetKeyframesRule(UNI_L("inerror"), find_element("style"));
	verify(rule);
	verify(!rule->First());

	// Second keyframes rule should be parsable.

	rule = GetKeyframesRule(UNI_L("proper"), find_element("style"));
	verify(rule);

	CSS_KeyframeRule* keyframe = rule->First();
	verify(TestNumberKeyframe(keyframe, 0, CSS_PROPERTY_top, 110, CSS_PX));
	verify(!keyframe->Suc());
}
