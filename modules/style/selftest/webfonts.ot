/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "style.webfonts";

require init;

language C++;

include "modules/doc/frm_doc.h";
include "modules/style/css_collection.h";
include "modules/url/url2.h";

html {
//!
//! <style>
//!
//!   @import url("data:text/css,@font-face { font-family: \"import\"; src: local(\"impact\"); }");
//!
//!   @font-face {
//!     font-family: "family1", "dummy";
//!     src: url("http://www.opera.com/family1.ttf");
//!   }
//!
//!   @font-face {
//!     font-family: "family2";
//!     src: url("http://www.opera.com/family2.ttf") format("truetype");
//!   }
//!
//!   @font-face {
//!     font-family: "family3";
//!     src: url("http://www.opera.com/family3.ttf") format("type-1", "truetype");
//!   }
//!
//!   @font-face {
//!     font-family: "family4";
//!     src: url("http://www.opera.com/family4.ttf");
//!   }
//!
//!   @font-face {
//!     font-family: "family5";
//!     src: url("http://www.opera.com/family5.ttf") format("type-1");
//!   }
//!
//!   @font-face {
//!     font-family: "family6";
//!   }
//!
//!   @font-face {
//!     font-family: "family7";
//!     src: url("http://www.opera.com/family7-1.ttf"), url("http://www.opera.com/family7-2.ttf");
//!   }
//!
//!   @font-face {
//!     font-family: "family8";
//!     src: url("http://www.opera.com/family8-1.ttf");
//!     src: url("http://www.opera.com/family8-2.ttf");
//!   }
//!
//!   @font-face {
//!     font-family: family9-1, family9-2;
//!     src: url("http://www.opera.com/family9.ttf");
//!   }
//!
//!   @font-face {
//!     font-family: "family10-1";
//!     font-family: "family10-2";
//!     src: url("http://www.opera.com/family10.ttf");
//!   }
//!
//!   @font-face {
//!     font-family: "family11";
//!     src: url("http://www.opera.com/family11-1.ttf");
//!   }
//!
//!   @font-face {
//!     font-family: "family11";
//!     src: url("http://www.opera.com/family11-2.ttf");
//!   }
//!
//!   @font-face {
//!     font-family: "family12";
//!     src: url("http://www.opera.com/family12.otf") format("opentype");
//!   }
//!
//!   @font-face {
//!     font-family: family13, family131;
//!     src: url("http://www.opera.com/family13.ttf");
//!   }
//!
//!   @font-face {
//!     font-family: "family14";
//!     src: url("data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIj48ZGVmcz48Zm9udCBob3Jpei1hZHYteD0iNTAwIiBpZD0ibWluaSI+DQo8Zm9udC1mYWNlIGZvbnQtZmFtaWx5PSJBQ0lEM3N2Z2ZvbnQiIHVuaXRzLXBlci1lbT0iNDAwMCIgYXNjZW50PSI4MDAiIGRlc2NlbnQ9Ii0yMDAiIGFscGhhYmV0aWM9IjAiLz48bWlzc2luZy1nbHlwaCBob3Jpei1hZHYteD0iMTAwMDAiIGQ9Ik0wIDAgNDAwMCAwIi8+DQo8Z2x5cGggdW5pY29kZT0iYSIgZ2x5cGgtbmFtZT0iYSIgaG9yaXotYWR2LXg9IjQyIi8+DQo8Z2x5cGggdW5pY29kZT0iYiIgZ2x5cGgtbmFtZT0iYiIgaG9yaXotYWR2LXg9IjIzIi8+DQo8Z2x5cGggdW5pY29kZT0iYyIgZ2x5cGgtbmFtZT0iYyIgaG9yaXotYWR2LXg9IjQ3MTEiLz48L2ZvbnQ+PC9kZWZzPjwvc3ZnPg%3D%3D#mini") format("svg");
//!   }
//!
//!   @font-face {
//!     font-family: "family 15";
//!     src: url("data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIj48ZGVmcz48Zm9udCBob3Jpei1hZHYteD0iNTAwIiBpZD0ibWluaSI+DQo8Zm9udC1mYWNlIGZvbnQtZmFtaWx5PSJBQ0lEM3N2Z2ZvbnQiIHVuaXRzLXBlci1lbT0iNDAwMCIgYXNjZW50PSI4MDAiIGRlc2NlbnQ9Ii0yMDAiIGFscGhhYmV0aWM9IjAiLz48bWlzc2luZy1nbHlwaCBob3Jpei1hZHYteD0iMTAwMDAiIGQ9Ik0wIDAgNDAwMCAwIi8+DQo8Z2x5cGggdW5pY29kZT0iYSIgZ2x5cGgtbmFtZT0iYSIgaG9yaXotYWR2LXg9IjQyIi8+DQo8Z2x5cGggdW5pY29kZT0iYiIgZ2x5cGgtbmFtZT0iYiIgaG9yaXotYWR2LXg9IjIzIi8+DQo8Z2x5cGggdW5pY29kZT0iYyIgZ2x5cGgtbmFtZT0iYyIgaG9yaXotYWR2LXg9IjQ3MTEiLz48L2ZvbnQ+PC9kZWZzPjwvc3ZnPg%3D%3D#mini") format("svg");
//!   }
//!
//!   @font-face {
//!     font-family: family \31 6;
//!     src: url("http://www.opera.com/family16.ttf") format("truetype");
//!   }
//!
//!   @font-face {
//!     font-family: family     \31 7;
//!     src: url("http://www.opera.com/family17.ttf") format("truetype");
//!   }
//!
//!   @font-face {
//!     font-family:      family    \31 8      ;
//!     src: url("http://www.opera.com/family18.ttf") format("truetype");
//!   }
//!
//!   @font-face {
//!     font-family: family19;
//!     src: url(http://www.opera.com/family19.ttf) format(truetype);
//!   }
//!
//!   @font-face {
//!     font-family: family191;
//!     src: url(http://www.opera.com/family191.ttf) format("truetype");
//!   }
//!
//!   @font-face {
//!     font-family: family20;
//!     src: url(http://www.opera.com/family20.ttf) local("Ahem"); /* note: purposely invalid, needs comma between url and local */
//!   }
//!
//!   @font-face {
//!     font-family: family21;
//!     src: url(http://www.opera.com/family21.ttf), local("Ahem");
//!   }
//!
//!   @font-face {
//!     font-family: family22;
//!     src: local(Ahem);
//!   }
//!
//!   @font-face {
//!     font-family: family23;
//!     src: local("Ahem");
//!   }
//! </style>
}

global
{
	CSSCollection* coll = NULL;
}

test("Sanity check")
{
	verify(state.doc);

	HLDocProfile* hld_prof = state.doc->GetHLDocProfile();
	verify(hld_prof);

	coll = hld_prof->GetCSSCollection();
	verify(coll);
}

test("family1, invalid font-family syntax")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family1"), CSS_MEDIA_TYPE_SCREEN);
	verify(font == NULL);
	font = coll->GetWebFont(UNI_L("dummy"), CSS_MEDIA_TYPE_SCREEN);
	verify(font == NULL);
}

test("Recognize truetype")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family2"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);

	font = coll->GetWebFont(UNI_L("family3"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
}

test("Assume truetype if no format specified")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family4"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
}

test("Ignore other formats than truetype or opentype")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family5"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
	verify(font->GetSrcURL().IsEmpty());
}

test("no src descriptor")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family6"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
	verify(font->GetSrcURL().IsEmpty());
}

test("use first url")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family7"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
	verify(font->Load(state.doc) == OpStatus::OK);

	URL expect_url = g_url_api->GetURL("http://www.opera.com/family7-1.ttf");
	URL font_url = font->GetSrcURL();

	verify(font_url == expect_url);
}

test("use last src descriptor")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family8"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
	verify(font->Load(state.doc) == OpStatus::OK);

	URL expect_url = g_url_api->GetURL("http://www.opera.com/family8-2.ttf");
	URL font_url = font->GetSrcURL();

	verify(font_url == expect_url);
}

test("unquoted font-family names with dash")
{
	// NOTE: this is just documenting implemented behavior, see CORE-14822
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family9-1"), CSS_MEDIA_TYPE_SCREEN);
	verify(font == NULL);
	font = coll->GetWebFont(UNI_L("family9-2"), CSS_MEDIA_TYPE_SCREEN);
	verify(font == NULL);
	font = coll->GetWebFont(UNI_L("family9-1, family9-2"), CSS_MEDIA_TYPE_SCREEN);
	verify(font == NULL);
}

test("use last family descriptor")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family10-1"), CSS_MEDIA_TYPE_SCREEN);
	verify(font == NULL);

	font = coll->GetWebFont(UNI_L("family10-2"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
}

test("use last @font-face if duplicate family names.")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family11"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
	verify(font->Load(state.doc) == OpStatus::OK);

	URL expect_url = g_url_api->GetURL("http://www.opera.com/family11-2.ttf");
	URL font_url = font->GetSrcURL();

	verify(font_url == expect_url);
}

test("Recognize opentype")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family12"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
}

test("unquoted font-family names")
{
	// NOTE: this is just documenting implemented behavior, see CORE-14822
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family13"), CSS_MEDIA_TYPE_SCREEN);
	verify(font == NULL);
	font = coll->GetWebFont(UNI_L("family131"), CSS_MEDIA_TYPE_SCREEN);
	verify(font == NULL);
	font = coll->GetWebFont(UNI_L("family13, family131"), CSS_MEDIA_TYPE_SCREEN);
	verify(font == NULL);
}

test("Recognize svg")
	require SVG_SUPPORT;
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family14"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
	verify(OpStatus::IsSuccess(font->Load(state.doc)));
	verify(CSS_WebFont::FORMAT_SVG == font->GetFormat());
}

test("space in font-family name")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family 15"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
	verify(OpStatus::IsSuccess(font->Load(state.doc)));
	verify(CSS_WebFont::FORMAT_SVG == font->GetFormat());
}

test("space in unquoted font-family name")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family 16"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
}

test("whitespace in the middle of unquoted font-family name")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family 17"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
}

test("leading and trailing whitespace in unquoted family name")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family 18"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
}

test("unquoted format string")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family19"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
	verify(OpStatus::IsSuccess(font->Load(state.doc)));
	verify(CSS_WebFont::FORMAT_TRUETYPE == font->GetFormat());
}

test("quoted format string")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family191"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
	verify(OpStatus::IsSuccess(font->Load(state.doc)));
	verify(CSS_WebFont::FORMAT_TRUETYPE == font->GetFormat());
}

test("invalid src")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family20"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
	verify(OpStatus::IsSuccess(font->Load(state.doc)));
	verify(!font->IsLocalFont());
	verify(font->GetSrcURL().IsEmpty());
}

test("src: url(), local()")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family21"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
}

test("local")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family22"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
	verify(!font->IsLocalFont());
	verify(OpStatus::IsSuccess(font->Load(state.doc)));
	verify(font->IsLocalFont());
}

test("unquoted local without spaces")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("family23"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
	verify(!font->IsLocalFont());
	verify(OpStatus::IsSuccess(font->Load(state.doc)));
	verify(font->IsLocalFont());
}

test("@font-face in @import")
{
	CSS_WebFont* font = coll->GetWebFont(UNI_L("import"), CSS_MEDIA_TYPE_SCREEN);
	verify(font);
}

html {
//! <!DOCTYPE html>
//! <style>
//! @font-face {
//!   font-family: Hehem;
//!   src: url(http://t/resources/fonts/AHEM____.TTF) format("truetype");
//! }
//! </style>
}

test("CSSStyleDeclaration for font descriptors in @font-face")
	language ecmascript;
{
	var sheet = document.styleSheets[0];
	verify(sheet);
	var fontFaceRule = sheet.cssRules[0];
	verify(fontFaceRule);
	verify(fontFaceRule.style);
	verify(fontFaceRule.style.fontFamily == '"Hehem"');
	verify(fontFaceRule.style.src == 'url("http://t/resources/fonts/AHEM____.TTF") format("truetype")');
}
