/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "style.selection";

require init;
language c++;

include "modules/style/css_decl.h";
include "modules/style/css.h";

global {
	CSS_decl* MakeDeclaration(CSS_decl::DeclarationOrigin origin, BOOL important)
	{
		CSS_decl *ret = OP_NEW(CSS_type_decl, (CSS_PROPERTY_width, CSS_VALUE_auto));
		if (ret)
		{
			if (important)
				ret->SetImportant();
			ret->SetOrigin(origin);
		}
		return ret;
	}

	CSS_decl* MakeAuthorDeclaration() {
		return MakeDeclaration(CSS_decl::ORIGIN_AUTHOR, FALSE);
	}

	CSS_decl* MakeUserDeclaration() {
		return MakeDeclaration(CSS_decl::ORIGIN_USER, FALSE);
	}

	CSS_decl* MakeUserImportantDeclaration() {
		return MakeDeclaration(CSS_decl::ORIGIN_USER, TRUE);
	}

	CSS_decl* MakeAuthorImportantDeclaration() {
		return MakeDeclaration(CSS_decl::ORIGIN_AUTHOR, TRUE);
	}

	CSS_decl* MakeAnimationDeclaration() {
		return MakeDeclaration(CSS_decl::ORIGIN_ANIMATIONS, FALSE);
	}

	enum TestingInstructions
	{
		/** Rule number is incremented between setting the first and
			second declaration. */

		INC_RULE_NUMBER = 1,

		/** First parameter has higher specificity than the second
			one. */

		FIRST_HAS_SPECIFICITY = 2
	};

	enum TestingVerification
	{
		/** The declaration sent in as first parameter wins,
			always. */

		BY_FIRST_PARAMETER,

		/** The declaration sent in as second parameter wins,
			always. */

		BY_SECOND_PARAMETER,

		/** Regardless of parameter order, rule number decides which
			one is selected */

		BY_RULE_NUMBER,

		/* Regardless of parameter order, first selected wins. */

		BY_FIRST_SELECTED,
	};
}

subtest selection_test(CSS_decl* decl1, CSS_decl* decl2, int instructions, TestingVerification verification)
{
	verify(decl1);
	verify(decl2);

	CSS_Properties cssprops;
	CSSProperty prop = CSSProperty(decl1->GetProperty());

	int specificity = 0;
	int rule_number = 0;

	if (instructions & FIRST_HAS_SPECIFICITY)
		specificity = 1;

	cssprops.SelectProperty(decl1, specificity, rule_number, FALSE);

	specificity = 0;

	if (instructions & INC_RULE_NUMBER)
		rule_number++;

	cssprops.SelectProperty(decl2, specificity, rule_number, FALSE);

	switch (verification)
	{
	case BY_FIRST_PARAMETER:
		verify(cssprops.GetDecl(prop) == decl1);
		break;
	case BY_SECOND_PARAMETER:
		verify(cssprops.GetDecl(prop) == decl2);
		break;
	case BY_RULE_NUMBER:
		verify(cssprops.GetDecl(prop) == decl2);
		break;
	case BY_FIRST_SELECTED:
		verify(cssprops.GetDecl(prop) == decl1);
		break;
	}

	cssprops.SetDecl(prop, NULL);

	if (instructions & FIRST_HAS_SPECIFICITY)
		specificity = 1;

	cssprops.SelectProperty(decl1, specificity, rule_number, FALSE);

	specificity = 0;

	if (instructions & INC_RULE_NUMBER)
		rule_number--;

	cssprops.SelectProperty(decl2, specificity, rule_number, FALSE);

	switch (verification)
	{
	case BY_FIRST_PARAMETER:
		verify(cssprops.GetDecl(prop) == decl1);
		break;
	case BY_SECOND_PARAMETER:
		verify(cssprops.GetDecl(prop) == decl2);
		break;
	case BY_RULE_NUMBER:
		verify(cssprops.GetDecl(prop) == decl1);
		break;
	case BY_FIRST_SELECTED:
		verify(cssprops.GetDecl(prop) == decl1);
		break;
	}

	cssprops.SetDecl(prop, NULL);
	rule_number = 0;

	cssprops.SelectProperty(decl2, specificity, rule_number, FALSE);

	if (instructions & INC_RULE_NUMBER)
		rule_number++;

	if (instructions & FIRST_HAS_SPECIFICITY)
		specificity = 1;

	cssprops.SelectProperty(decl1, specificity, rule_number, FALSE);

	specificity = 0;

	switch (verification)
	{
	case BY_FIRST_PARAMETER:
		verify(cssprops.GetDecl(prop) == decl1);
		break;
	case BY_SECOND_PARAMETER:
		verify(cssprops.GetDecl(prop) == decl2);
		break;
	case BY_RULE_NUMBER:
		verify(cssprops.GetDecl(prop) == decl1);
		break;
	case BY_FIRST_SELECTED:
		verify(cssprops.GetDecl(prop) == decl2);
		break;
	}

	cssprops.SetDecl(prop, NULL);

	cssprops.SelectProperty(decl2, specificity, rule_number, FALSE);

	if (instructions & INC_RULE_NUMBER)
		rule_number--;

	if (instructions & FIRST_HAS_SPECIFICITY)
		specificity = 1;

	cssprops.SelectProperty(decl1, specificity, rule_number, FALSE);

	specificity = 0;

	switch (verification)
	{
	case BY_FIRST_PARAMETER:
		verify(cssprops.GetDecl(prop) == decl1);
		break;
	case BY_SECOND_PARAMETER:
		verify(cssprops.GetDecl(prop) == decl2);
		break;
	case BY_RULE_NUMBER:
		verify(cssprops.GetDecl(prop) == decl2);
		break;
	case BY_FIRST_SELECTED:
		verify(cssprops.GetDecl(prop) == decl2);
		break;
	}
}
finally
{
	OP_DELETE(decl1);
	OP_DELETE(decl2);
}

test("Larger rule number trumps smaller (and only when)")
{
	verify(selection_test(MakeAuthorDeclaration(),
						  MakeAuthorDeclaration(),
						  INC_RULE_NUMBER,
						  BY_RULE_NUMBER));

	verify(selection_test(MakeAuthorDeclaration(),
						  MakeAuthorDeclaration(),
						  0,
						  BY_FIRST_SELECTED));

}

test("Specificity trumps rule number")
{
	verify(selection_test(MakeAuthorDeclaration(),
						  MakeAuthorDeclaration(),
						  INC_RULE_NUMBER | FIRST_HAS_SPECIFICITY,
						  BY_FIRST_PARAMETER));

	verify(selection_test(MakeAuthorDeclaration(),
						  MakeAuthorDeclaration(),
						  FIRST_HAS_SPECIFICITY,
						  BY_FIRST_PARAMETER));
}

test("Larger rule number trumps smaller (both user)")
{
	verify(selection_test(MakeUserDeclaration(),
						  MakeUserDeclaration(),
						  INC_RULE_NUMBER,
						  BY_RULE_NUMBER));

	verify(selection_test(MakeUserDeclaration(),
						  MakeUserDeclaration(),
						  0,
						  BY_FIRST_SELECTED));
}

test("Larger rule number trumps smaller (both user important)")
{
	verify(selection_test(MakeUserImportantDeclaration(),
						  MakeUserImportantDeclaration(),
						  INC_RULE_NUMBER,
						  BY_RULE_NUMBER));

	verify(selection_test(MakeUserImportantDeclaration(),
						  MakeUserImportantDeclaration(),
						  0,
						  BY_FIRST_SELECTED));
}

test("User important declarations trump animations") require CSS_ANIMATIONS;
{
	verify(selection_test(MakeUserImportantDeclaration(),
						  MakeAnimationDeclaration(),
						  0,
						  BY_FIRST_PARAMETER));

	verify(selection_test(MakeUserImportantDeclaration(),
						  MakeAnimationDeclaration(),
						  INC_RULE_NUMBER,
						  BY_FIRST_PARAMETER));

	verify(selection_test(MakeAnimationDeclaration(),
						  MakeUserImportantDeclaration(),
						  INC_RULE_NUMBER | FIRST_HAS_SPECIFICITY,
						  BY_SECOND_PARAMETER));
}

test("Animations trump anything else") require CSS_ANIMATIONS;
{
	verify(selection_test(MakeAuthorImportantDeclaration(),
						  MakeAnimationDeclaration(),
						  0,
						  BY_SECOND_PARAMETER));

	verify(selection_test(MakeAuthorDeclaration(),
						  MakeAnimationDeclaration(),
						  0,
						  BY_SECOND_PARAMETER));

	verify(selection_test(MakeUserDeclaration(),
						  MakeAnimationDeclaration(),
						  0,
						  BY_SECOND_PARAMETER));
}
