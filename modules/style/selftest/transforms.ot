/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "style.parser.transforms";

require init;
require CSS_TRANSFORMS;

language C++;

include "modules/doc/frm_doc.h";
include "modules/style/css_property_list.h";
include "modules/style/css.h";

html {
	//! <html><body>
	//! A document to parse in
	//! </body></html>
}

global
{
	CSS_property_list* new_css;
}

subtest CheckProperty(short prop, int idx, const char* str1, const char* str2)
{
	OpString s1;

	verify(OpStatus::IsSuccess(s1.Set(str1)));

    TempBuffer tmp_buf;

    HLDocProfile* hld_profile = state.doc->GetHLDocProfile();
    verify(hld_profile);

	OP_STATUS status;
	new_css = CSS::LoadDOMStyleValue(hld_profile, NULL, URL(), prop, s1.CStr(), s1.Length(), status);

	verify(OpStatus::IsSuccess(status));
	verify(new_css);
	verify(new_css->GetLength() == 1);

	CSS_decl* decl = new_css->GetFirstDecl();

	if (!decl)
		output("Failed to parse declaration: '%s'\n", str1);

	verify(decl);

	tmp_buf.Clear();
	CSS::FormatDeclarationL(&tmp_buf, decl, FALSE, CSS_FORMAT_COMPUTED_STYLE);

	if (uni_strcmp(tmp_buf.GetStorage(), str2))
	{
		output("%d: Expected '%s'", idx, str2);
		output(" but got '%s'\n", ST_down(tmp_buf.GetStorage()));
	}

	verify(uni_strcmp(tmp_buf.GetStorage(), str2) == 0);
}
finally
{
	if (new_css)
		new_css->Unref();
}

subtest CheckInvalidProperty(short prop, const char* str1)
{
	OpString s1;

	verify(OpStatus::IsSuccess(s1.Set(str1)));

    TempBuffer tmp_buf;

    HLDocProfile* hld_profile = state.doc->GetHLDocProfile();
    verify(hld_profile);

	OP_STATUS status;
	new_css = CSS::LoadDOMStyleValue(hld_profile, NULL, URL(), prop, s1.CStr(), s1.Length(), status);

	if (new_css)
		if (CSS_decl* decl = new_css->GetFirstDecl())
		{
			tmp_buf.Clear();
			CSS::FormatDeclarationL(&tmp_buf, decl, FALSE, CSS_FORMAT_COMPUTED_STYLE);
			output("Expected fail but got '%s'\n", ST_down(tmp_buf.GetStorage()));
		}

	verify(!OpStatus::IsSuccess(status) || !new_css || new_css->GetLength() == 0);
}
finally
{
	if (new_css)
		new_css->Unref();
}

table PropTableTransform(const char*, const char*)
{
    { "translate(0, 20px)",               "translate(0, 20px)" }
    { "translate(10px, 10px)",            "translate(10px, 10px)" }
    { "translate( -100px )",              "translate(-100px)" }
    { "translate(-100px )",               "translate(-100px)" }
    { "translate( -100px)",               "translate(-100px)" }
    { "translateY( -100px )",             "translateY(-100px)" }
    { "translateY(-100px )",              "translateY(-100px)" }
    { "translateY( -100px)",              "translateY(-100px)" }
    { "translate( -100px , 0px)",         "translate(-100px, 0px)" }
    { "translate(-100px , 0px)",          "translate(-100px, 0px)" }
    { "rotate(10deg)",                    "rotate(10deg)" }
    { "rotate(180deg)",                   "rotate(180deg)" }
    { "translate(-10px,-20px)",           "translate(-10px, -20px)" }
    { "translateX(-10em)",                "translateX(-10em)" }
    { "translateX(-0)",                   "translateX(0)" }
    { "translateY(1pc)",                  "translateY(1pc)" }
    { "translate(1%, 2%)",                "translate(1%, 2%)" }
	{ "scale(2)",                         "scale(2)" }
	{ "scale(1.5,1.5)",                   "scale(1.5, 1.5)" }
	{ "matrix(1,2,3,4,5,6)",              "matrix(1, 2, 3, 4, 5, 6)" }
	{ "skewX(0)",                         "skewX(0)" }
	{ "skewY(0)",                         "skewY(0)" }
	{ "skew(0)",                          "skew(0)" }
	{ "skewX(10deg)",                     "skewX(10deg)" }
	{ "skewY(20deg)",                     "skewY(20deg)" }
	{ "skew(10deg,20deg)",                "skew(10deg, 20deg)" }
}
test("Parse transform")
{
    iterate (str1, str2) from PropTableTransform
    {
		verify(CheckProperty(CSS_PROPERTY_transform, __iter__, str1, str2));
	}
}

table PropTableInvalidTransform(const char*)
{
    { "translate(10px, 10px, 20px)" }
    { "rotate(10degs)" }
    { "rotote(180deg)" }
    { "translate()" }
    { "translateX(-10em, -20em)" }
    { "translateY(1pc, 2pc)" }
	{ "scale(2, 1, 2)" }
	{ "scale()" }
	{ "matrix(1,2,3,4,5,6,7)" }
	{ "matrix(1,2,3,4,5)" }
	{ "matrix(1,2,3,4)" }
	{ "matrix(1,2,3)" }
	{ "matrix(1,2)" }
	{ "matrix(1)" }
	{ "matrix()" }
	{ "skewW(0)" }
	{ "skewX(10deg, 10deg)" }
	{ "skewX(10g)" }
	{ "skewX()" }
	{ "skewY(20deg, 10)" }
	{ "skew()" }
	{ "skew(20)" }
}
test("Parse invalid transform")
{
    iterate (str1) from PropTableInvalidTransform
    {
		verify(CheckInvalidProperty(CSS_PROPERTY_transform, str1));
	}
}

table PropTableTransformOrigin(const char*, const char*)
{
    { "0%",            "0% 50%" }
    { "left top",      "0% 0%" }
    { "bottom right",  "100% 100%" }
    { "center center", "50% 50%" }
    { "-20px -20px",   "-20px -20px" }
}
test("Parse transform-origin")
{
    iterate (str1, str2) from PropTableTransformOrigin
    {
		verify(CheckProperty(CSS_PROPERTY_transform_origin, __iter__, str1, str2));
	}
}

