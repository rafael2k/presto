/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "style.parser.border-image";

require init;

language C++;

include "modules/doc/frm_doc.h";
include "modules/style/css_collection.h";
include "modules/style/css.h";

html
{
//! <html>
//!  <div style="-o-border-image: none"></div>
//!  <div style="-o-border-image: url('border.png') 27 27 27 27 round round"></div>
//!  <div style="-o-border-image: url('border.png') 27% 27% 27% 27% round round"></div>
//!  <div style="-o-border-image: url('border.png') 27% 27% 27% 27% / 10 20 30 40 round round"></div>
//!  <div style="-o-border-image: url('border.png') 27% / 10"></div>
//!  <div style="-o-border-image: url('border.png') 27%"></div>
//!  <div style="-o-border-image: url('border.png') 10 stretch"></div>
//!  <div style="-o-border-image: url('border.png') 27 / 1 stretch"></div>
//!  <div style="-o-border-image: url('border.png') 27 / 1 round stretch"></div>
//!  <div style="-o-border-image: url('border.png') 27 / 1 stretch"></div>
//!  <div style="-o-border-image: url('border.png') 27 / 1 1 1 1 stretch"></div>
//! </html>
}

/* This table data assumes that URLs in selftests are resolved
   relative to the 'opera:' base url. */

table PropTable(const char *, int, const uni_char *)
{
	{ "div", 1, UNI_L("none") }
	{ "div", 2, UNI_L("url(\"opera:border.png\") 27 27 27 27 round round") }
	{ "div", 3, UNI_L("url(\"opera:border.png\") 27% 27% 27% 27% round round") }
	{ "div", 4, UNI_L("url(\"opera:border.png\") 27% 27% 27% 27% / 10 20 30 40 round round") }
	{ "div", 5, UNI_L("url(\"opera:border.png\") 27% / 10") }
	{ "div", 6, UNI_L("url(\"opera:border.png\") 27%") }
	{ "div", 7, UNI_L("url(\"opera:border.png\") 10 stretch") }
	{ "div", 8, UNI_L("url(\"opera:border.png\") 27 / 1 stretch") }
	{ "div", 9, UNI_L("url(\"opera:border.png\") 27 / 1 round stretch") }
	{ "div",10, UNI_L("url(\"opera:border.png\") 27 / 1 stretch") }
	{ "div",11, UNI_L("url(\"opera:border.png\") 27 / 1 1 1 1 stretch") }
}

test("-o-border-image#1")
{
	verify(state.doc);

	TempBuffer tmp_buf;
	CSSCollection* coll = NULL;

	HLDocProfile* hld_prof = state.doc->GetHLDocProfile();
	verify(hld_prof);

	coll = hld_prof->GetCSSCollection();
	verify(coll);

	iterate (tag_name, tag_idx, str) from PropTable
	{
		CSS_Properties props;

		coll->GetProperties(find_element(tag_name, tag_idx), g_op_time_info->GetRuntimeMS(), &props, CSS_MEDIA_TYPE_ALL);

		CSS_decl* decl = props.GetDecl(CSS_PROPERTY__o_border_image);
		verify(decl);

		tmp_buf.Clear();
		CSS::FormatDeclarationL(&tmp_buf, decl, FALSE, CSS_FORMAT_COMPUTED_STYLE);

		if (uni_strcmp(tmp_buf.GetStorage(), str))
		{
			/* __iter__ is undocumented and its use probably
			   discouraged but it makes debugging easier. */

			output("%d: %s != ", __iter__, ST_down(tmp_buf.GetStorage()));
			output("%s\n", ST_down(str));
		}

		verify(uni_strcmp(tmp_buf.GetStorage(), str) == 0);
	}
}

