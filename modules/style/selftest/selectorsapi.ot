/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "style.dom.selectorsapi";

require init;
require STYLE_DOM_SELECTORS_API;
language C++;

include "modules/style/css_dom.h";
include "modules/doc/frm_doc.h";
include "modules/logdoc/htm_ldoc.h";

global {
	class TestSelectorListener : public CSS_QuerySelectorListener
	{
	public:
		OP_STATUS MatchElement(HTML_Element* elm) { return elements.Add(elm); }
		OpVector<HTML_Element> elements;
	};

	class TestMatchesListener : public CSS_QuerySelectorListener
	{
	private:
		int matches;
	public:
		TestMatchesListener() : matches(0) {}
		OP_STATUS MatchElement(HTML_Element* elm) { matches++; return OpStatus::OK; }
		int Matches() const { return matches; }
	};
}

html {
//! <div id="x1">X1</div><span id="x2">X2</span><div id="x3">X3<b><span id="x4">X4</span></b></div><p id="x"></p>
}

test("querySelector")
{
	TestSelectorListener listener1, listener2;
	const uni_char* selectors = UNI_L("div, #x, div span");
	CSS_DOMException exception;
	verify(CSS_QuerySelector(state.doc->GetHLDocProfile(),
							 selectors,
							 state.doc->GetDocRoot(),
							 CSS_QUERY_ALL,
							 &listener1,
							 exception) == OpStatus::OK);

	verify(listener1.elements.GetCount() == 4);
	verify(uni_str_eq(listener1.elements.Get(0)->GetId(), UNI_L("x1")));
	verify(uni_str_eq(listener1.elements.Get(1)->GetId(), UNI_L("x3")));
	verify(uni_str_eq(listener1.elements.Get(2)->GetId(), UNI_L("x4")));
	verify(uni_str_eq(listener1.elements.Get(3)->GetId(), UNI_L("x")));
	verify(CSS_QuerySelector(state.doc->GetHLDocProfile(),
							 selectors,
							 state.doc->GetDocRoot(),
							 0,
							 &listener2,
							 exception) == OpStatus::OK);

	verify(listener2.elements.GetCount() == 1);
	verify(uni_str_eq(listener2.elements.Get(0)->GetId(), UNI_L("x1")));
}

test("querySelector on element")
{
	TestSelectorListener listener;

	const uni_char* selectors = UNI_L("div, #x, div span");

	HTML_Element* root = find_element("div", 2);
	verify(root);

	CSS_DOMException exception;

	verify(CSS_QuerySelector(state.doc->GetHLDocProfile(),
							 selectors,
							 root,
							 CSS_QUERY_ALL,
							 &listener,
							 exception) == OpStatus::OK);

	verify(listener.elements.GetCount() == 1);
	verify(uni_str_eq(listener.elements.Get(0)->GetId(), UNI_L("x4")));
}

test("querySelector with namespace")
{
	TestSelectorListener listener;

	const uni_char* selectors = UNI_L("unresolvednamespace|div");

	CSS_DOMException exception;

	verify(CSS_QuerySelector(state.doc->GetHLDocProfile(),
							 selectors,
							 state.doc->GetDocRoot(),
							 CSS_QUERY_ALL,
							 &listener,
							 exception) == OpStatus::ERR);
}

test("querySelector selector syntax error")
{
	TestSelectorListener listener;

	const uni_char* selectors = UNI_L(",div");

	CSS_DOMException exception;

	verify(CSS_QuerySelector(state.doc->GetHLDocProfile(),
							 selectors,
							 state.doc->GetDocRoot(),
							 CSS_QUERY_ALL,
							 &listener,
							 exception) == OpStatus::ERR);

	verify(exception == CSS_DOMEXCEPTION_SYNTAX_ERR);
}

test("querySelector invalid selector")
{
	TestSelectorListener listener;

	const uni_char* selectors = UNI_L(":bogus");

	CSS_DOMException exception;

	verify(CSS_QuerySelector(state.doc->GetHLDocProfile(),
							 selectors,
							 state.doc->GetDocRoot(),
							 CSS_QUERY_ALL,
							 &listener,
							 exception) == OpStatus::ERR);

	verify(exception == CSS_DOMEXCEPTION_SYNTAX_ERR);
}

html {
//! <!DOCTYPE html>
//! <body>
//! <div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div><div>
//!
//! <span id="queryNode"><span></span></span>
//!
//! </div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div>
//! </body>
}

test("querySelector on element deep down in the tree")
{
	TestSelectorListener listener;

	const uni_char* selectors = UNI_L("body span");

	HTML_Element* root = find_element("span", 1);
	verify(root);
	verify(root->FirstChild());
	verify(root->FirstChild()->Type() == Markup::HTE_SPAN);

	CSS_DOMException exception;

	verify(CSS_QuerySelector(state.doc->GetHLDocProfile(),
							 selectors,
							 root,
							 CSS_QUERY_ALL,
							 &listener,
							 exception) == OpStatus::OK);

	verify(listener.elements.GetCount() == 1);
	verify(listener.elements.Get(0)->Type() == Markup::HTE_SPAN);
	verify(listener.elements.Get(0)->FirstChild() == NULL);
}

html {
//! <div></div><div><div></div></div>
}

test("CSS_QUERY_MATCHES_SELECTOR")
{
	/* Check that we match a single element. */

	TestMatchesListener listener;
	CSS_DOMException exception;
	verify(CSS_QuerySelector(state.doc->GetHLDocProfile(),
							 UNI_L("div"),
							 find_element("div", 2),
							 CSS_QUERY_MATCHES_SELECTOR,
							 &listener,
							 exception) == OpStatus::OK);

	verify(listener.Matches() == 1);
}

test("CSS_QUERY_MATCHES_SELECTOR|CSS_QUERY_ALL")
{
	/* Check that we match a single element.
	   CSS_QUERY_ALL doesn't make sense here but
	   should not affect the result. */

	TestMatchesListener listener;
	CSS_DOMException exception;
	verify(CSS_QuerySelector(state.doc->GetHLDocProfile(),
							 UNI_L("div"),
							 find_element("div", 2),
							 CSS_QUERY_MATCHES_SELECTOR|CSS_QUERY_ALL,
							 &listener,
							 exception) == OpStatus::OK);

	verify(listener.Matches() == 1);
}
