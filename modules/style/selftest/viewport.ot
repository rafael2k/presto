/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "style.viewport";

require init;
require CSS_VIEWPORT_SUPPORT;

language C++;

include "modules/doc/frm_doc.h";
include "modules/style/css_viewport.h";
include "modules/style/css_viewport_meta.h";
include "modules/style/src/css_viewport_rule.h";

global
{
	CSS_Viewport viewport;
	CSS_DeviceProperties device_props;

	CSS_ViewportRule* GetViewportRule(unsigned int idx, HTML_Element* sheet_elm)
	{
		if (sheet_elm)
		{
			CSS* css = sheet_elm->GetCSS();
			if (css)
			{
				CSS_Rule* rule = css->GetRule(idx);
				if (rule->GetType() == CSS_Rule::VIEWPORT)
					return static_cast<CSS_ViewportRule*>(rule);
			}
		}
		return NULL;
	}
}

setup
{
	device_props.device_width = 320;
	device_props.device_height = 480;
	device_props.viewport_width = 320;
	device_props.viewport_height = 356;
	device_props.desktop_width = 980;
	device_props.font_size = 16;
}

/* Test grid for width, user-scalable, maximum-scale. */
table ViewportValues(uni_char*, int, BOOL, double)
{
	{ "width=3000 user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000,user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 ,user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000, user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM  },
	{ "width=3000;user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 ;user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000; user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000x user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 xuser-scalable=no", 3000, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 x user-scalable=no", 3000, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 x,user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 x;user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 x; user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 x;  user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 x; maximum-scale=10 user-scalable=no", 3000, FALSE, 10 },
	{ "width=3000 user-scalable=no maximum-scale=10", 3000, FALSE, 10 },
	{ "width=3000 ;,user-scalable=no xyz", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 ;,user-scalable=noxyz", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 ;,user-scalable=yesz", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 ;,user-scalable=yes;", 3000, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 ;,user-scalable=yes ;", 3000, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=1000# ;,user-scalable=yes ;", 1000, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=1e+3&", 1000, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=z1000", 64, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000,,,user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000;;;user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 a=x user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 a==x user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 a= user-scalable=no", 3000, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 a=; user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=,3000", 980, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width,=3000", 980, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width====3000", 3000, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=x3000", 64, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=#3000", 64, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000a=,user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000a= user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000 a b user-scalable=no", 3000, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000a b user-scalable=no", 3000, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=3000ab user-scalable=no", 3000, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "user-scalable=0", 980, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "user-scalable=0.9", 980, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "user-scalable=1", 980, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "user-scalable=1.75", 980, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "user-scalable=300", 980, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "user-scalable= =no", 980, FALSE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "height=200 width height=3000", 3000, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=device-width", 320, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "initial-scale=1.0", 320, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "initial-scale=0.5", 640, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "initial-scale=2.0", 160, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "bogus=1", 980, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=200", 200, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=1200", 1200, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "height=device-height", 980, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=100", 100, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=10", 64, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=-100", 980, TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM },
	{ "width=50, initial-scale=4.0", 80,TRUE, CSS_VIEWPORT_DEFAULT_MAX_ZOOM }
}

foreach (content, exp_w, exp_us, exp_ms) from ViewportValues
{
	test("Parse " + content)
	{
		OpString uni_content;

		CSS_ViewportMeta viewport_meta(NULL);
		viewport.ResetComputedValues();

		verify(OpStatus::IsSuccess(uni_content.Set(content)));
		viewport_meta.ParseContent(uni_content.CStr());
		viewport_meta.AddViewportProperties(&viewport);
		viewport.SetDefaultProperties(FALSE);
		viewport.Constrain(device_props);
		verify(viewport.GetWidth() == exp_w);
		verify(viewport.GetUserZoom() == exp_us);
		verify(viewport.GetMaxZoom() == exp_ms);
	}
}

test("Basic CSS_Viewport api tests")
{
	CSS_Viewport viewport;
	verify(viewport.IsDirty() == FALSE);

	viewport.MarkDirty();
	verify(viewport.IsDirty() == TRUE);

	viewport.ResetComputedValues();
	verify(viewport.IsDirty() == FALSE);
	verify(viewport.HasProperties() == FALSE);

	viewport.SetDefaultProperties(FALSE);
	verify(viewport.HasProperties() == FALSE);

	viewport.SetMinWidth(CSS_ViewportLength(), FALSE, FALSE);
	verify(viewport.HasProperties() == TRUE);
}

html {
//! <style type="text/css">
//! @-o-viewport { max-width: 200px; }
//! </style>
}

test("Basic CSS_ViewportRule tests")
{
	CSS_ViewportRule* rule = GetViewportRule(0, find_element("style"));
	verify(rule);
	CSS_property_list* props = rule->GetPropertyList();
	verify(props->GetLength() == 1);
	CSS_decl* decl = props->GetFirstDecl();
	verify(decl);
	verify(decl->GetDeclType() == CSS_DECL_NUMBER);
	verify(decl->GetNumberValue(0) == 200);
	verify(decl->GetValueType(0) == CSS_PX);

	CSS_Viewport viewport;
	rule->AddViewportProperties(&viewport);
	verify(viewport.HasProperties());

	viewport.Constrain(device_props);
	verify(viewport.GetWidth() == 200);
}

html {
//! <style type="text/css">
//! @-o-viewport { width: 100%; max-width: 150%; }
//! </style>
}

test("Percentage widths")
{
	CSS_ViewportRule* rule = GetViewportRule(0, find_element("style"));
	verify(rule);

	CSS_Viewport viewport;
	rule->AddViewportProperties(&viewport);
	viewport.Constrain(device_props);
	verify(viewport.GetWidth() == device_props.viewport_width);
}

html {
//! <style type="text/css">
//! @-o-viewport {
//!   width: 2000px;
//!   width: -0px;
//!   width: 0px;
//!   width: 0;
//!   width: -10%;
//!   width: -10em;
//!   height: 2000px;
//!   height: 0;
//!   height: -100cm;
//!   zoom: 1;
//!   zoom: 0;
//!   zoom: -1;
//!   min-zoom: 0.1;
//!   min-zoom: 0;
//!   min-zoom: -1;
//!   max-zoom: 10;
//!   max-zoom: 0;
//!   max-zoom: -1;
//! }
//! </style>
}

test("Check that only positive lengths and zoom values are accepted")
{
	CSS_ViewportRule* rule = GetViewportRule(0, find_element("style"));
	verify(rule);

	CSS_Viewport viewport;
	rule->AddViewportProperties(&viewport);
	verify(viewport.HasProperties());

    viewport.Constrain(device_props);

	verify(viewport.GetWidth() == 2000);
	verify(viewport.GetHeight() == 2000);
	verify(viewport.GetZoom() == 1);
	// The cast is a hack about precision loss
	// because we're using float in the CSS_decl storage.
	verify(viewport.GetMinZoom() == (double)0.1f);
	verify(viewport.GetMaxZoom() == 10);
}

html {
//! <style type="text/css">
//! @-o-viewport { min-width: 300px; max-width: 290px }
//! </style>
}

test("min-width applied after max-width")
{
	CSS_ViewportRule* rule = GetViewportRule(0, find_element("style"));
	verify(rule);
	CSS_Viewport viewport;
	rule->AddViewportProperties(&viewport);
	viewport.Constrain(device_props);
	verify(viewport.GetWidth() == 300);
}

html {
//! <style type="text/css">
//! @-o-viewport {
//!   min-width: 10em;
//!   height: 20px;
//! }
//! </style>
}

test("CSS_ViewportRule::GetCssText()")
{
	HTML_Element* style_elm = find_element("style");
	CSS_ViewportRule* rule = GetViewportRule(0, style_elm);
	verify(rule);
	TempBuffer buf;
	OP_STATUS r = rule->GetCssText(style_elm->GetCSS(), &buf);
	verify(r == OpStatus::OK);
	const uni_char* css_text = buf.GetStorage();
	verify(uni_str_eq(css_text, UNI_L("@-o-viewport { min-width: 10em; min-height: 20px; max-height: 20px; }")));
}

html {
//! <style type="text/css">
//! @-o-viewport {}
//! </style>
}

test("CSS_ViewportRule::SetCssText()")
{
	HTML_Element* style_elm = find_element("style");
	CSS_ViewportRule* rule = GetViewportRule(0, style_elm);
	verify(rule);

	OP_STATUS r = rule->SetCssText(state.doc->GetHLDocProfile(),
								   style_elm->GetCSS(),
								   UNI_L("@-o-viewport { width: 4000px; }"),
								   31);
	verify(r == OpStatus::OK);

	rule = GetViewportRule(0, style_elm);
	verify(rule);

	CSS_Viewport viewport;
	rule->AddViewportProperties(&viewport);
	verify(viewport.HasProperties());

	viewport.Constrain(device_props);
	verify(viewport.GetWidth() == 4000);
}

html {
//! <!DOCTYPE html>
//! <style>
//! @-o-viewport {
//!   min-width: 200px;
//!   max-width: auto;
//!   min-height: device-height;
//!   max-height: 200em;
//!   zoom: 50%;
//!   min-zoom: 0.2;
//!   max-zoom: 10;
//!   orientation: landscape;
//! }
//! </style>
}

test("CSSStyleDeclaration for viewport properties")
	language ecmascript;
{
	var sheet = document.styleSheets[0];
	verify(sheet);
	var viewportRule = sheet.cssRules[0];
	verify(viewportRule);
	verify(viewportRule.style);
	verify(viewportRule.style.minWidth == "200px");
	verify(viewportRule.style.maxWidth == "auto");
	verify(viewportRule.style.minHeight == "device-height");
	verify(viewportRule.style.maxHeight == "200em");
	verify(viewportRule.style.zoom == "50%");
	verify(viewportRule.style.minZoom == "0.2");
	verify(viewportRule.style.maxZoom == "10");
	verify(viewportRule.style.orientation == "landscape");
	verify(viewportRule.style.userZoom == "");
}

test("CSS_ViewportLength::ToPixels")
{
	CSS_DeviceProperties device_props = {
		240, /* device_width */
		320, /* device_height */
		238, /* viewport_width */
		280, /* viewport_height */
		960, /* desktop_width */
		16, /* font_size */
	};

	CSS_ViewportLength device_width(CSS_ViewportLength::DEVICE_WIDTH);
	verify(static_cast<unsigned int>(device_width.ToPixels(device_props, TRUE)) == 240);

	CSS_ViewportLength device_height(CSS_ViewportLength::DEVICE_HEIGHT);
	verify(static_cast<unsigned int>(device_height.ToPixels(device_props, FALSE)) == 320);

	CSS_ViewportLength percent(100, CSS_ViewportLength::PERCENT);
	verify(static_cast<unsigned int>(percent.ToPixels(device_props, TRUE)) == 238);
	verify(static_cast<unsigned int>(percent.ToPixels(device_props, FALSE)) == 280);

	CSS_ViewportLength desktop_width(CSS_ViewportLength::DESKTOP_WIDTH);
	verify(static_cast<unsigned int>(desktop_width.ToPixels(device_props, TRUE)) == 960);

	CSS_ViewportLength font_size(1, CSS_ViewportLength::EM);
	verify(static_cast<unsigned int>(font_size.ToPixels(device_props, TRUE)) == 16);
}
