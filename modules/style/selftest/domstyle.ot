/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "style.dom";
require init;

include "modules/url/url_api.h";
include "modules/url/url2.h";
include "modules/logdoc/htm_elm.h";

language c++;

global {
	URL link_url;
}

setup {
	link_url = g_url_api->GetURL("opera:t1.css");
	link_url.ForceStatus(URL_LOADING);
	OpStatus::Ignore(link_url.SetAttribute(URL::KMIME_ForceContentType, "text/css"));
	OpStatus::Ignore(link_url.SetAttribute(URL::KMIME_CharSet, "utf-16"));
	{
		uni_char temp = 0xfeff; // unicode byte order mark
		link_url.WriteDocumentData(URL::KNormal, &temp, 1);
	}
	link_url.WriteDocumentData(URL::KNormal, UNI_L("div { background-color: #80ff80; }"));

	link_url = g_url_api->GetURL("opera:t2.css");
	link_url.ForceStatus(URL_LOADING);
	OpStatus::Ignore(link_url.SetAttribute(URL::KMIME_ForceContentType, "text/css"));
	OpStatus::Ignore(link_url.SetAttribute(URL::KMIME_CharSet, "utf-16"));
	{
		uni_char temp = 0xfeff; // unicode byte order mark
		link_url.WriteDocumentData(URL::KNormal, &temp, 1);
	}
	link_url.WriteDocumentData(URL::KNormal, UNI_L("div { background-color: #80ff80; }"));

	link_url = g_url_api->GetURL("opera:t3.css");
	link_url.ForceStatus(URL_LOADING);
	OpStatus::Ignore(link_url.SetAttribute(URL::KMIME_ForceContentType, "text/css"));
	OpStatus::Ignore(link_url.SetAttribute(URL::KMIME_CharSet, "utf-16"));
	{
		uni_char temp = 0xfeff; // unicode byte order mark
		link_url.WriteDocumentData(URL::KNormal, &temp, 1);
	}
	link_url.WriteDocumentData(URL::KNormal, UNI_L("div { background-color: #80ff80; }"));

	link_url = g_url_api->GetURL("opera:t4.css");
	link_url.ForceStatus(URL_LOADING);
	OpStatus::Ignore(link_url.SetAttribute(URL::KMIME_ForceContentType, "text/css"));
	OpStatus::Ignore(link_url.SetAttribute(URL::KMIME_CharSet, "utf-16"));
	{
		uni_char temp = 0xfeff; // unicode byte order mark
		link_url.WriteDocumentData(URL::KNormal, &temp, 1);
	}
	link_url.WriteDocumentData(URL::KNormal, UNI_L("div { background-color: #80ff80; }"));
}

html {
//! <link href="opera:t1.css" rel="stylesheet" type="text/css">
//! <link href="opera:t1.css" rel="stylesheet" type="text/css">
//! <div>Should be green</div>
//! <script>
//! document.styleSheets[0].cssRules[0].style.color = "green";
//! </script>
}

test ("check that modified stylesheet is applied.")
	language ecmascript;
{
	verify(getComputedStyle(document.getElementsByTagName('div')[0]).color == "rgb(0, 128, 0)");
}

html {
//! <link href="opera:t2.css" rel="stylesheet" type="text/css">
//! <link href="opera:t2.css" rel="stylesheet" type="text/css">
//! <div>Should have greenish background</div>
}

test ("optimization for duplicated stylesheets, removing first")
	language ecmascript;
{
	var link = document.getElementsByTagName('link')[0];
	if (link.parentNode)
		link.parentNode.removeChild(link);
	verify(getComputedStyle(document.getElementsByTagName('div')[0]).backgroundColor == "rgb(128, 255, 128)");
}

html {
//! <link href="opera:t3.css" rel="stylesheet" type="text/css">
//! <link href="opera:t3.css" rel="stylesheet" type="text/css">
//! <div>Should have greenish background</div>
}

test ("optimization for duplicated stylesheets, removing last")
	language ecmascript;
{
	var link = document.getElementsByTagName('link')[1];
	if (link.parentNode)
		link.parentNode.removeChild(link);
	verify(getComputedStyle(document.getElementsByTagName('div')[0]).backgroundColor == "rgb(128, 255, 128)");
}

html {
//! <link href="opera:t4.css" rel="stylesheet" type="text/css" media="screen">
//! <link href="opera:t4.css" rel="stylesheet" type="text/css" media="print">
//! <div>Should have greenish background</div>
}

test ("optimization for duplicated stylesheets, different media attrs")
	language ecmascript;
{
	verify(getComputedStyle(document.getElementsByTagName('div')[0]).backgroundColor == "rgb(128, 255, 128)");
}

html {
//! <style>
//! @media screen, tv {
//!   div { color: green }
//! }
//! </style>
//! <div></div>
}

test ("media rule tests")
	language ecmascript;
{
	sheet = document.styleSheets[0];
	mediarule = sheet.cssRules[0];
	verify(mediarule.type == CSSRule.MEDIA_RULE);
	verify(mediarule.media.length == 2);
	verify(mediarule.media.mediaText == "screen, tv");
	verify(mediarule.cssRules.length == 1);
	verify(mediarule.cssRules[0].parentRule == mediarule);

	mediarule.media.deleteMedium("screen");
	verify(mediarule.media.mediaText == "tv");
	mediarule.media.appendMedium("tv");
	verify(mediarule.media.mediaText == "tv");
	mediarule.media.appendMedium("print");
	verify(mediarule.media.mediaText == "tv, print");
	verify(mediarule.media.item(1) == "print");
	mediarule.media.appendMedium("print and (min-width: 400pt)");
	verify(mediarule.media.mediaText == "tv, print, print and (min-width: 400pt)");
	mediarule.media.deleteMedium("print");
	verify(mediarule.media.mediaText == "tv, print and (min-width: 400pt)");
	verify(mediarule.cssText == "@media tv, print and (min-width: 400pt) {\u000A  div { color: green; }\u000A}");

	mediarule.media.mediaText = "screen, print";
	mediarule.cssText = "@media tv {}";
	mediarule = sheet.cssRules[0];
	mediarule.media.mediaText == "tv";
	mediarule.insertRule("div { line-height: 2cm; }", 0);
	mediarule.insertRule("span { line-height: 1cm; }", 0);
	verify(mediarule.cssRules[0].selectorText == "span");
	mediarule.deleteRule(0);
	verify(mediarule.cssRules[0].selectorText == "div");
	sheet.deleteRule(0);
	verify(sheet.cssRules.length == 0);
	verify(getComputedStyle(document.getElementsByTagName('div')[0], null).color == "rgb(0, 0, 0)");
}

html {
//! <style>
//! @media all {
//!   @media (min-width: 0px) {
//!     div { color: green; }
//!   }
//!   @media not all {
//!     div { color: red;}
//!   }
//! }
//! </style>
//! <div></div>
}

test ("nested media rule")
	language ecmascript;
{
	sheet = document.styleSheets[0];
	verify(sheet.cssRules.length == 1);
	verify(sheet.cssRules[0].type == CSSRule.MEDIA_RULE);
	verify(sheet.cssRules[0].cssRules.length == 2);
	verify(sheet.cssRules[0].cssRules[0].type == CSSRule.MEDIA_RULE);
	verify(sheet.cssRules[0].cssRules[0].media.mediaText == "(min-width: 0px)");
	verify(getComputedStyle(document.getElementsByTagName('div')[0], null).color == "rgb(0, 128, 0)");

    sheet.cssRules[0].cssRules[0].insertRule("div { background-color: green; }", 0);
	verify(getComputedStyle(document.getElementsByTagName('div')[0], null).backgroundColor == "rgb(0, 128, 0)");
    sheet.cssRules[0].cssRules[1].insertRule("div { background-color: red; }", 0);
	verify(getComputedStyle(document.getElementsByTagName('div')[0], null).backgroundColor == "rgb(0, 128, 0)");
}

html {
//! <style>
//! @supports (display: none) {
//!   div { color: green }
//! }
//! </style>
//! <div></div>
}

test ("supports rule tests")
	language ecmascript;
{
	sheet = document.styleSheets[0];
	supportsrule = sheet.cssRules[0];
	verify(supportsrule.type == CSSRule.SUPPORTS_RULE);
	verify(supportsrule.cssRules.length == 1);
	verify(supportsrule.cssRules[0].parentRule == supportsrule);
	verify(supportsrule.cssText == "@supports (display: none) {\u000A  div { color: green; }\u000A}");

	supportsrule.cssText = "@supports (width: 0) {}";
	supportsrule = sheet.cssRules[0];
	supportsrule.insertRule("div { line-height: 2cm; }", 0);
	supportsrule.insertRule("span { line-height: 1cm; }", 0);
	verify(supportsrule.cssRules[0].selectorText == "span");
	supportsrule.deleteRule(0);
	verify(supportsrule.cssRules[0].selectorText == "div");
	sheet.deleteRule(0);
	verify(sheet.cssRules.length == 0);
	verify(getComputedStyle(document.getElementsByTagName('div')[0], null).color == "rgb(0, 0, 0)");
}

html {
//! <style>
//! @supports (color: green) {
//!   @supports (width: 0) {
//!     div { color: green; }
//!   }
//!   @supports (not (color: green)) {
//!     div { color: red;}
//!   }
//! }
//! </style>
//! <div></div>
}

test ("nested supports rule")
	language ecmascript;
{
	sheet = document.styleSheets[0];
	verify(sheet.cssRules.length == 1);
	verify(sheet.cssRules[0].type == CSSRule.SUPPORTS_RULE);
	verify(sheet.cssRules[0].cssRules.length == 2);
	verify(sheet.cssRules[0].cssRules[0].type == CSSRule.SUPPORTS_RULE);
	verify(getComputedStyle(document.getElementsByTagName('div')[0], null).color == "rgb(0, 128, 0)");

    sheet.cssRules[0].cssRules[0].insertRule("div { background-color: green; }", 0);
	verify(getComputedStyle(document.getElementsByTagName('div')[0], null).backgroundColor == "rgb(0, 128, 0)");
    sheet.cssRules[0].cssRules[1].insertRule("div { background-color: red; }", 0);
	verify(getComputedStyle(document.getElementsByTagName('div')[0], null).backgroundColor == "rgb(0, 128, 0)");
}

html {
//! <style>
//!   @supports (width:0) { div { color:red; } }
//! </style>
//! <script>
//!   function change() {
//!     document.styleSheets[0].cssRules[0].cssText = "@supports (width:0) { div { color:green; } }";
//!   }
//! </script>
//! <body onload="change();"><div></div></body>
}

test ("replacing an @supports by assinging to cssText causes changes in the page")
	language ecmascript;
{
	verify(getComputedStyle(document.getElementsByTagName('div')[0], null).color == "rgb(0, 128, 0)");
}

html {
//! <style>
//! div { color: #008000; }
//! div { color: #ff0000; }
//! </style>
//! <div>Green</div>
}

test ("deleteRule/insertRule test")
	language ecmascript;
{
	sheet = document.styleSheets[0];
	elm = document.getElementsByTagName('div')[0];
	verify(sheet.cssRules.length == 2);
	sheet.deleteRule(1);
	verify(getComputedStyle(elm).color == "rgb(0, 128, 0)");
	sheet.insertRule("div { color: #000080; }", 1);
	verify(getComputedStyle(elm).color == "rgb(0, 0, 128)");
}

html {
//! <style>
//! div { color: #008000; }
//! div { color: #ff0000; }
//! </style>
//! <div>Green</div>
}

test ("deleteRule/insertRule test #2")
	language ecmascript;
{
	sheet = document.styleSheets[0];
	elm = document.getElementsByTagName('div')[0];
	verify(sheet.cssRules.length == 2);
	sheet.deleteRule(undefined);
	verify(getComputedStyle(elm).color == "rgb(255, 0, 0)");
	verify(sheet.cssRules.length == 1);
	sheet.deleteRule("be gone");
	verify(sheet.cssRules.length == 0);
	sheet.insertRule("div { color: #000080; }", "some number starting with 'z' and ending with 'ero'");
	verify(getComputedStyle(elm).color == "rgb(0, 0, 128)");
}

xml {
//! <html xmlns="http://www.w3.org/1999/xhtml">
//! <head>
//! <style>
//! @charset "utf-8";
//! @import url(http://www.opera.com/notfound.css);
//! @namespace ns1 url(http://www.opera.com/namespace1);
//! @namespace url(http://www.opera.com/defaultns);
//!
//! ns1|elm1 { width: 21em; color: green; }
//!
//! *|*#id1.class1:hover[name="value"] { content: "Hello!"; }
//!
//! @page :left { margin-top: 20px; }
//!
//! *|elm2::first-letter { color: lime; }
//! *|elm3::first-line { color: green; }
//! *|elm4::before { content: "PA"; }
//! *|elm4::after { content: "SS"; }
//!
//! </style>
//! </head>
//! <body>
//! <elm1 xmlns="http://www.opera.com/namespace1">Green</elm1>
//! <elm2>First letter</elm2>
//! <elm3>First line</elm3>
//! <elm4/>
//! </body>
//! </html>
}

test ("Get cssText tests")
	language ecmascript;
{
	sheet = document.styleSheets[0];
	verify(sheet.cssRules[0].type == CSSRule.CHARSET_RULE);
	verify(sheet.cssRules[0].cssText == "@charset \"utf-8\";");
	verify(sheet.cssRules[0].encoding == "utf-8");
	verify(sheet.cssRules[1].type == CSSRule.IMPORT_RULE);
	verify(sheet.cssRules[1].cssText == "@import url(http://www.opera.com/notfound.css);");
	verify(sheet.cssRules[2].type == CSSRule.NAMESPACE_RULE);
	verify(sheet.cssRules[2].cssText == "@namespace ns1 url(http://www.opera.com/namespace1);");
	verify(sheet.cssRules[2].namespaceURI == "http://www.opera.com/namespace1");
	verify(sheet.cssRules[2].prefix == "ns1");
	verify(sheet.cssRules[3].type == CSSRule.NAMESPACE_RULE);
	verify(sheet.cssRules[3].cssText == "@namespace url(http://www.opera.com/defaultns);");
	verify(sheet.cssRules[3].namespaceURI == "http://www.opera.com/defaultns");
	verify(sheet.cssRules[3].prefix == "");
	verify(sheet.cssRules[4].type == CSSRule.STYLE_RULE);
	verify(sheet.cssRules[4].cssText == "ns1|elm1 { width: 21em; color: green; }");
	verify(sheet.cssRules[4].selectorText == "ns1|elm1");
	verify(sheet.cssRules[5].cssText == "*|*#id1.class1:hover[name=\"value\"] { content: \"Hello!\"; }");
	verify(sheet.cssRules[5].selectorText == "*|*#id1.class1:hover[name=\"value\"]");
	verify(sheet.cssRules[6].type == CSSRule.PAGE_RULE);
	verify(sheet.cssRules[6].cssText == "@page :left { margin-top: 20px; }");
	verify(sheet.cssRules[6].selectorText == "@page :left");
	verify(sheet.cssRules[7].selectorText == "*|elm2::first-letter");
	verify(sheet.cssRules[8].selectorText == "*|elm3::first-line");
	verify(sheet.cssRules[9].selectorText == "*|elm4::before");
	verify(sheet.cssRules[10].selectorText == "*|elm4::after");
}

html {
//! <html>
//! <head>
//! <style>
//! @charset "xxx";
//! @import url(xxx);
//! @namespace ns1 url(http://namespace1);
//! @page {}
//! @media all {}
//! * {}
//! * {}
//! </style>
//! </head>
//! <body>
//! </body>
//! </html>
}

test ("Set cssText tests")
	language ecmascript;
{
	sheet = document.styleSheets[0];
	sheet.cssRules[0].cssText = "@charset \"utf-8\";";
	verify(sheet.cssRules[0].cssText == "@charset \"utf-8\";");
	//sheet.cssRules[1].cssText = "@import url(http://www.opera.com/notfound.css) screen;";
	//verify(sheet.cssRules[1].cssText == "@import url(http://www.opera.com/notfound.css) screen;");
	sheet.cssRules[3].cssText = "@page :left { margin-top: 10px; }";
	verify(sheet.cssRules[3].cssText == "@page :left { margin-top: 10px; }");
	sheet.cssRules[4].cssText = "@media screen { div { color: red; } }";
	verify(sheet.cssRules[4].cssText == "@media screen {\u000A  div { color: red; }\u000A}");
	sheet.cssRules[5].cssText = "ns1|elm { font-size: 2ex; }";
	verify(sheet.cssRules[5].cssText == "ns1|elm { font-size: 2ex; }");
	try {
		sheet.cssRules[6].cssText = "@media all {}";
	} catch (ex) {}
	verify(sheet.cssRules[6].cssText == "* {  }");
}

html {
//! <style>
//! @page {}
//! dummy { width: 300px; }
//!
//! </style>
//! <div></div>
}

test ("Set selectorText tests")
	language ecmascript;
{
	var sheet = document.styleSheets[0];

	sheet.cssRules[0].selectorText = "@page :first";

	verify(sheet.cssRules[0].selectorText == "@page :first");

	sheet.cssRules[1].selectorText = "div";
	var div_elm = document.getElementsByTagName("div")[0];

	verify(getComputedStyle(div_elm, null).width == "300px");

	try { sheet.cssRules[1].selectorText = ":bogus" } catch(ex) {};
	verify (sheet.cssRules[1].selectorText == "div");
}

html {
//! <style>div { dillemikk*[2429[0]]dm{f}al; background-position: 50% 50%; text-shadow: 0.2em 0.2em; }</style>
}

test ("Check cssText after parsing errors")
	language ecmascript;
{
	verify(document.styleSheets[0].cssRules[0].cssText == "div { background-position: 50% 50%; text-shadow: 0.2em 0.2em; }");
}

html {
//! <div id="d1" style="font-size: 200px; font: caption; "></div>
//! <div id="d2" style="font-size: 200px; font: caption; font-family: serif;"></div>
//! <div id="d3" style="font: caption; font-size: 10px;"></div>
}

test ("Check system font shorthands")
	language ecmascript;
{
	s1 = document.getElementById('d1').style;
	s2 = document.getElementById('d2').style;
	s3 = document.getElementById('d3').style;

	verify(s1.font == "caption");
	verify(s1.fontSize == "");
	verify(s1.fontFamily == "");

	verify(s2.font == "");
	verify(s2.fontSize == "");
	verify(s2.fontFamily == "serif");

	verify(s3.font == "");
	verify(s3.fontSize == "10px");
	verify(s3.fontFamily == "");
}

html {
//! <style>div { color: red; color: black; } @page { margin-left: 0; margin-left: 20px; } div { color: blue; } </style>
//! <div id="i" style="color: red; color: black;"></div><div id="j"></div><div id="k"></div>
}

test ("Remove duplicate property declarations (style attribute)")
	language ecmascript;
{
	verify(document.getElementById('i').style.length == 1);
}

test ("Remove duplicate property declarations (style rule)")
	language ecmascript;
{
	verify(document.styleSheets[0].cssRules[0].style.length == 1);
}

test ("Remove duplicate property declarations (page rule)")
	language ecmascript;
{
	verify(document.styleSheets[0].cssRules[1].style.length == 1);
}

test ("Remove duplicate property declarations (attribute)")
	language ecmascript;
{
	var elm = document.getElementById('j');
	elm.setAttribute("style", "color: red; color: black;");
	verify(elm.style.length == 1);
}

test ("Remove duplicate property declarations (object on attribute)")
	language ecmascript;
{
	var elm = document.getElementById('k');
	elm.style = "color: red; color: black;";
	verify(elm.style.length == 1);
}

test ("Remove duplicate property declarations (rule cssText)")
	language ecmascript;
{
	var rule = document.styleSheets[0].cssRules[2];
	rule.cssText = "div { color: red; color: black; }";
	verify(document.styleSheets[0].cssRules[2].style.length == 1);
}

html {
//! <style>div::after { content: "\\x\a\
//!yy\"\a\d" }
//!        div#x\23 {}
//! </style>
}

test ("Escape strings")
	language ecmascript;
{
	verify(document.styleSheets[0].cssRules[0].style.content == '"\\\\x\\ayy\\"\\a\\d"');
}

test ("Escape idents")
	language ecmascript;
{
	verify(document.styleSheets[0].cssRules[1].selectorText == "div#x\\#");
}

html {
//!<html>
//!<head>
//!<style>
//!.x { color: red; }
//!.y { color: green; }
//!</style>
//!</head>
//!<body onload="document.getElementById('x').setAttribute('class', 'y');">
//!<div id="x" class="x">Should be green.</div>
//!</body>
//!</html>
}

test ("Change class attribute")
	language ecmascript;
{
	verify(getComputedStyle(document.getElementById('x'), null).color == "rgb(0, 128, 0)");
}

html {
//!<html>
//!<head>
//!<style>
//!.x { color: red; }
//!.y { color: green; }
//!</style>
//!</head>
//!<div id="x" class="x"></div>
//!<div id="y" style="color:red" class="y"></div>
//!</body>
//!</html>
}

test("removeProperty")
	language ecmascript;
{
	var y = document.getElementById("y");
	verify(y);
	verify(y.style.color == "red");
	verify(getComputedStyle(y, null).color == "rgb(255, 0, 0)");
	verify(y.style.removeProperty("color") == "red");
	verify(!y.style.color);
	verify(getComputedStyle(y, null).color == "rgb(0, 128, 0)");
	try {
		var computed_y = getComputedStyle(y, null);
		var old_color = computed_y.removeProperty("color");
		verify(!"computed_y.removeProperty() should have thrown an 'modification not allowed' exception");
	} catch(e) {}
	verify(getComputedStyle(y, null).color == "rgb(0, 128, 0)");
}

html {
//! <!DOCTYPE html>
//! <style>
//! html { color: #000000; }
//! a { color: #008000; }
//! div, a, a:link, span, a:visited { color: #800000; }
//! a { display: block; }
//! </style>
//! <div><span></span></div>
//! <a href=".">link</a>
}

test ("deleteRule and multiple selectors")
	language ecmascript;
{
	document.styleSheets[0].deleteRule(2);

	verify(getComputedStyle(document.getElementsByTagName('div')[0], null).color == "rgb(0, 0, 0)");
	verify(getComputedStyle(document.getElementsByTagName('span')[0], null).color == "rgb(0, 0, 0)");

	var comp_a = getComputedStyle(document.getElementsByTagName('a')[0], null);

	verify(comp_a.color == "rgb(0, 128, 0)");
	verify(comp_a.display == "block");
}

html {
//! <!DOCTYPE html>
//! <style id="s1" type="text/css"></style>
//! <link id="s2" rel="stylesheet" type="text/css" href="data:text/css,">
//! <link id="s3" rel="stylesheet" type="text/css">
//! <div id="t1"></div>
//! <div id="t2"></div>
//! <div id="t3"></div>
}

test("CSS objects for empty stylesheets")
{
	HTML_Element* s1 = find_element("style");
	verify(s1);
	verify(s1->GetCSS());

	HTML_Element* s2 = find_element("link", 1);
	verify(s2);
	verify(s2->GetCSS());

	HTML_Element* s3 = find_element("link", 2);
	verify(s3);
	verify(!s3->GetCSS());
}

test("Modify empty stylesheets")
	language ecmascript;
{
	var s1 = document.styleSheets[0];
	verify(s1);
	verify(s1.ownerNode);
	verify(s1.ownerNode.id == "s1");
	s1.insertRule("#t1 { text-decoration: underline; }", 0);

	var s2 = document.styleSheets[1];
	verify(s2);
	verify(s2.ownerNode);
	verify(s2.ownerNode.id == "s2");
	s2.insertRule("#t2 { text-decoration: underline; }", 0);

	/* s3 is undefined in other browsers. We should
	   also eventually fix that. This selftest needs
	   to be fixed when that happens. */
	var s3 = document.styleSheets[2];
	verify(s3);
	verify(s3.ownerNode);
	verify(s3.ownerNode.id == "s3");
	var pass = false;
	try {
		s3.insertRule("#t3 { text-decoration: underline; }", 0);
	}
	catch (ex) {
		pass = true;
	}
	verify(pass);
}

html {
//! <!DOCTYPE html>
//! <div style="background: red !important"></div>
//! <div style="background-color: red !important;"></div>
//! <div style="background: green; background-color: red !important;"></div>
}

test("getPropertyPriority for shorthand properties")
	language ecmascript;
{
	var divs = document.getElementsByTagName("div");
	verify(divs[0].style.getPropertyPriority("background-color") == "important");
	verify(divs[0].style.getPropertyPriority("background") == "important");
	verify(divs[1].style.getPropertyPriority("background-color") == "important");
	verify(divs[1].style.getPropertyPriority("background") == "");
	verify(divs[2].style.getPropertyPriority("background-color") == "important");
	verify(divs[2].style.getPropertyPriority("background") == "");
}

html {
//! <style>
//! div { text-decoration: underline !important; }
//! </style>
}

test("Serializing !important declarations")
	language ecmascript;
{
	sheet = document.styleSheets[0];
	verify(sheet);
	verify(sheet.cssRules[0]);
	verify(sheet.cssRules[0].cssText == "div { text-decoration: underline !important; }");
	verify(sheet.cssRules[0].style.cssText == "text-decoration: underline !important;");
}

html {
//! <!DOCTYPE html>
//! <html><body>
//!   <div style="float:right;"></div>
//!   <div style="float:-o-bottom-corner-next-page;"></div>
//!   <div style="float:none;"></div>
//!   <div style="float:banana;"></div>
//! </body></html>
}

test("float")
	language ecmascript;
{
	verify(document.getElementsByTagName('div')[0].style.cssFloat == 'right');
	verify(document.getElementsByTagName('div')[1].style.cssFloat == '-o-bottom-corner-next-page');
	verify(document.getElementsByTagName('div')[2].style.cssFloat == 'none');
	verify(document.getElementsByTagName('div')[3].style.cssFloat == '');
}

html {
//! <!DOCTYPE html>
//! <html><body>
//!   <div style="columns:auto;"></div>
//!   <div style="columns:100px;"></div>
//!   <div style="columns:7;"></div>
//!   <div style="columns:100px auto;"></div>
//!   <div style="columns:7 auto;"></div>
//!   <div style="columns:100px 7;"></div>
//! </body></html>
}
test("columns shorthand")
	language ecmascript;
{
	verify(document.getElementsByTagName('div')[0].style.columns == 'auto');
	verify(document.getElementsByTagName('div')[1].style.columns == '100px');
	verify(document.getElementsByTagName('div')[2].style.columns == '7');
	verify(document.getElementsByTagName('div')[3].style.columns == '100px');
	verify(document.getElementsByTagName('div')[4].style.columns == '7');
	verify(document.getElementsByTagName('div')[5].style.columns == '100px 7');
}

html
{
	//! <!DOCTYPE html>
	//! <div></div>
}
test("Serializing transition shorthand") language ecmascript; require CSS_TRANSITIONS;
{
    var div = document.querySelector('div');

	div.style.transition = "color 2s ease";
	verify(div.style.transition == 'color 2s');
	verify(getComputedStyle(div).transition == 'color 2s');

	div.style.transition = "background-color";
	verify(div.style.transition == 'background-color');
	verify(getComputedStyle(div).transition == 'background-color');

	div.style.transition = "2s";
	verify(div.style.transition == '2s');
	verify(getComputedStyle(div).transition == '2s');

	div.style.transitionDuration = "2s";
	verify(div.style.transition == '2s');
	verify(getComputedStyle(div).transition == '2s');
	div.style.transitionDuration = "";

	div.style.transitionDelay = "2s";

	/* Notice the difference in style.transition and
	   getComputedStyle(..).transition below.

	   For the latter, we serialize the value such that it will
	   round-trip through the parser. We do that by adding the default
	   0s duration value before a non-default delay. We haven't (yet)
	   made the same adjustment to the inline style case. */

	verify(div.style.transition == '2s');
	verify(getComputedStyle(div).transition == '0s 2s');
	div.style.transitionDelay = "";

	// all default:

	div.style.transition = "all 0s 0s ease";
	verify(div.style.transition == 'all 0s 0s cubic-bezier(0.25, 0.1, 0.25, 1)');
	verify(getComputedStyle(div).transition == 'all 0s 0s cubic-bezier(0.25, 0.1, 0.25, 1)');

	div.style.transition = "all 0s 0s";
	verify(div.style.transition == 'all 0s 0s cubic-bezier(0.25, 0.1, 0.25, 1)');
	verify(getComputedStyle(div).transition == 'all 0s 0s cubic-bezier(0.25, 0.1, 0.25, 1)');

	div.style.transition = "0s 0s";
	verify(div.style.transition == 'all 0s 0s cubic-bezier(0.25, 0.1, 0.25, 1)');
	verify(getComputedStyle(div).transition == 'all 0s 0s cubic-bezier(0.25, 0.1, 0.25, 1)');
}
test("Serializing animation shorthand") language ecmascript; require CSS_TRANSITIONS;
{
    var div = document.querySelector('div');

	div.style.animation = "foo";
	verify(div.style.animation == 'foo');
	verify(getComputedStyle(div).animation == 'foo');

	div.style.animation = "foo 2s 2s";
	verify(div.style.animation == 'foo 2s 2s');
	verify(getComputedStyle(div).animation == 'foo 2s 2s');

	div.style.animation = "2s 2s";
	verify(div.style.animation == '2s 2s');
	verify(getComputedStyle(div).animation == '2s 2s');

	div.style.animation = "foo 2s, bar 1s";
	verify(div.style.animation == 'foo 2s, bar 1s');
	verify(getComputedStyle(div).animation == 'foo 2s, bar 1s');

	// all default:

	div.style.animation = "none";
	verify(div.style.animation == 'none 0s 0s cubic-bezier(0.25, 0.1, 0.25, 1) normal none 1');
	verify(getComputedStyle(div).animation == 'none 0s 0s cubic-bezier(0.25, 0.1, 0.25, 1) normal none 1');
}
