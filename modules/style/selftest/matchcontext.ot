/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "style.matchcontext.nth-cache";
require init;
language c++;

include "modules/logdoc/htm_elm.h";
include "modules/style/css_matchcontext.h";

global
{
	CSS_MatchContext* context;
	CSS_MatchContextElm* context_elm;
}

setup
{
	context_elm = NULL;
	context = NULL;
}

exit
{
	if (context)
	{
		if (context->GetMode() != CSS_MatchContext::INACTIVE)
			context->End(context->GetMode());
		OP_DELETE(context);
	}
}

test("Init")
{
	context = OP_NEW(CSS_MatchContext, ());
	verify(context);
	TRAPD(stat, context->ConstructL(10));
	verify(OpStatus::IsSuccess(stat));
}

html {
//! <!DOCTYPE html>
//! <div id="d1">
//!   <span id="s1"></span>
//!   <span id="s2"></span>
//!   <div id="d2"></div>
//!   <span id="s3"></span>
//! </div>
}

test("Start BOTTOM_UP and GetLeafElm")
	require success "Init";
{
	verify(context);
	verify(context->GetMode() == CSS_MatchContext::INACTIVE);

	context->Begin(state.doc, CSS_MatchContext::BOTTOM_UP, CSS_MEDIA_TYPE_SCREEN, FALSE, FALSE);
	verify(context->GetMode() == CSS_MatchContext::BOTTOM_UP);

	HTML_Element* s3 = find_element("span", 3);
	verify(s3);

	context_elm = context->GetLeafElm(s3);
	verify(context_elm);
}

test("nth-child with empty cache")
	require success "Init";
{
	CSS_NthCache& cache = context->GetNthCache();
	verify(context->GetNthCount(context_elm, CSS_NthCache::NTH_CHILD) == 4);
	verify(cache.m_counts[CSS_NthCache::NTH_CHILD] == 4);
	verify(cache.m_elements[CSS_NthCache::NTH_CHILD] == context_elm->HtmlElement());
}

test("nth-of-type with empty cache")
	require success "Init";
{
	CSS_NthCache& cache = context->GetNthCache();
	verify(context->GetNthCount(context_elm, CSS_NthCache::NTH_OF_TYPE) == 3);
	verify(cache.m_counts[CSS_NthCache::NTH_OF_TYPE] == 3);
	verify(cache.m_elements[CSS_NthCache::NTH_OF_TYPE] == context_elm->HtmlElement());
}

test("nth-last-child with empty cache")
	require success "Init";
{
	CSS_NthCache& cache = context->GetNthCache();
	verify(context->GetNthCount(context_elm, CSS_NthCache::NTH_LAST_CHILD) == 1);
	verify(cache.m_counts[CSS_NthCache::NTH_LAST_CHILD] == 1);
	verify(cache.m_elements[CSS_NthCache::NTH_LAST_CHILD] == context_elm->HtmlElement());
}

test("nth-last-of-type with empty cache")
	require success "Init";
{
	CSS_NthCache& cache = context->GetNthCache();
	verify(context->GetNthCount(context_elm, CSS_NthCache::NTH_LAST_OF_TYPE) == 1);
	verify(cache.m_counts[CSS_NthCache::NTH_LAST_OF_TYPE] == 1);
	verify(cache.m_elements[CSS_NthCache::NTH_LAST_OF_TYPE] == context_elm->HtmlElement());
}

test("nth-child with preceding sibling in cache")
	require success "Init";
{
	CSS_NthCache& cache = context->GetNthCache();
	cache.m_counts[CSS_NthCache::NTH_CHILD] = 1;
	cache.m_elements[CSS_NthCache::NTH_CHILD] = find_element("span", 1);
	verify(context->GetNthCount(context_elm, CSS_NthCache::NTH_CHILD) == 4);
	verify(cache.m_counts[CSS_NthCache::NTH_CHILD] == 4);
	verify(cache.m_elements[CSS_NthCache::NTH_CHILD] == context_elm->HtmlElement());
}

test("nth-of-type with preceding sibling in cache")
	require success "Init";
{
	CSS_NthCache& cache = context->GetNthCache();
	cache.m_counts[CSS_NthCache::NTH_OF_TYPE] = 1;
	cache.m_elements[CSS_NthCache::NTH_OF_TYPE] = find_element("span", 1);
	cache.m_types[CSS_NthCache::NTH_OF_TYPE] = Markup::HTE_SPAN;
	cache.m_ns_types[CSS_NthCache::NTH_OF_TYPE] = NS_HTML;
	verify(context->GetNthCount(context_elm, CSS_NthCache::NTH_OF_TYPE) == 3);
	verify(cache.m_counts[CSS_NthCache::NTH_OF_TYPE] == 3);
	verify(cache.m_elements[CSS_NthCache::NTH_OF_TYPE] == context_elm->HtmlElement());
	verify(cache.m_types[CSS_NthCache::NTH_OF_TYPE] == Markup::HTE_SPAN);
	verify(cache.m_ns_types[CSS_NthCache::NTH_OF_TYPE] == NS_HTML);
}

test("nth-last-child with preceding sibling in cache")
	require success "Init";
{
	CSS_NthCache& cache = context->GetNthCache();
	cache.m_counts[CSS_NthCache::NTH_LAST_CHILD] = 4;
	cache.m_elements[CSS_NthCache::NTH_LAST_CHILD] = find_element("span", 1);
	verify(context->GetNthCount(context_elm, CSS_NthCache::NTH_LAST_CHILD) == 1);
	verify(cache.m_counts[CSS_NthCache::NTH_LAST_CHILD] == 1);
	verify(cache.m_elements[CSS_NthCache::NTH_LAST_CHILD] == context_elm->HtmlElement());
}

test("nth-last-of-type with preceding sibling in cache")
	require success "Init";
{
	CSS_NthCache& cache = context->GetNthCache();
	cache.m_counts[CSS_NthCache::NTH_LAST_OF_TYPE] = 3;
	cache.m_elements[CSS_NthCache::NTH_LAST_OF_TYPE] = find_element("span", 1);
	cache.m_types[CSS_NthCache::NTH_LAST_OF_TYPE] = Markup::HTE_SPAN;
	cache.m_ns_types[CSS_NthCache::NTH_LAST_OF_TYPE] = NS_HTML;
	verify(context->GetNthCount(context_elm, CSS_NthCache::NTH_LAST_OF_TYPE) == 1);
	verify(cache.m_counts[CSS_NthCache::NTH_LAST_OF_TYPE] == 1);
	verify(cache.m_elements[CSS_NthCache::NTH_LAST_OF_TYPE] == context_elm->HtmlElement());
	verify(cache.m_types[CSS_NthCache::NTH_LAST_OF_TYPE] == Markup::HTE_SPAN);
	verify(cache.m_ns_types[CSS_NthCache::NTH_LAST_OF_TYPE] == NS_HTML);
}

test("cached nth-of-type for different type")
	require success "Init";
{
	CSS_NthCache& cache = context->GetNthCache();
	cache.m_counts[CSS_NthCache::NTH_OF_TYPE] = 1;
	cache.m_elements[CSS_NthCache::NTH_OF_TYPE] = find_element("div", 2);
	cache.m_types[CSS_NthCache::NTH_OF_TYPE] = Markup::HTE_DIV;
	cache.m_ns_types[CSS_NthCache::NTH_OF_TYPE] = NS_HTML;
	verify(context->GetNthCount(context_elm, CSS_NthCache::NTH_OF_TYPE) == 3);
	verify(cache.m_counts[CSS_NthCache::NTH_OF_TYPE] == 3);
	verify(cache.m_elements[CSS_NthCache::NTH_OF_TYPE] == context_elm->HtmlElement());
	verify(cache.m_types[CSS_NthCache::NTH_OF_TYPE] == Markup::HTE_SPAN);
	verify(cache.m_ns_types[CSS_NthCache::NTH_OF_TYPE] == NS_HTML);
}

test("cached nth-last-child for parent")
	require success "Init";
{
	CSS_NthCache& cache = context->GetNthCache();
	cache.m_counts[CSS_NthCache::NTH_LAST_CHILD] = 1;
	cache.m_elements[CSS_NthCache::NTH_LAST_CHILD] = find_element("div", 1);
	verify(context->GetNthCount(context_elm, CSS_NthCache::NTH_LAST_CHILD) == 1);
	verify(cache.m_counts[CSS_NthCache::NTH_LAST_CHILD] == 1);
	verify(cache.m_elements[CSS_NthCache::NTH_LAST_CHILD] == context_elm->HtmlElement());
}
