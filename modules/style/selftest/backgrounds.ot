/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "style.parser.backgrounds";

require init;

/* Tests for background properties in the CSS Backgrounds and Borders
   Module specification */

html {
//!<div></div>
}

language ecmascript;

test("background-position: one value")
{
	elm = document.getElementsByTagName('div')[0];

	elm.style.backgroundPosition = "left";
	verify(elm.style.backgroundPosition == "0% 50%");

	elm.style.backgroundPosition = "top";
	verify(elm.style.backgroundPosition == "50% 0%");

	elm.style.backgroundPosition = "right";
	verify(elm.style.backgroundPosition == "100% 50%");

	elm.style.backgroundPosition = "bottom";
	verify(elm.style.backgroundPosition == "50% 100%");

	elm.style.backgroundPosition = "center";
	verify(elm.style.backgroundPosition == "50% 50%");

	elm.style.backgroundPosition = "center";
	verify(elm.style.backgroundPosition == "50% 50%");

	elm.style.backgroundPosition = "10px";
	verify(elm.style.backgroundPosition == "10px 50%");

	elm.style.backgroundPosition = "40%";
	verify(elm.style.backgroundPosition == "40% 50%");
}

test("background-position: two values")
{
	elm = document.getElementsByTagName('div')[0];

	elm.style.backgroundPosition = "center center";
	verify(elm.style.backgroundPosition == "50% 50%");

	elm.style.backgroundPosition = "left top";
	verify(elm.style.backgroundPosition == "0% 0%");

	elm.style.backgroundPosition = "top left";
	verify(elm.style.backgroundPosition == "0% 0%");

	elm.style.backgroundPosition = "bottom right";
	verify(elm.style.backgroundPosition == "100% 100%");

	elm.style.backgroundPosition = "right bottom";
	verify(elm.style.backgroundPosition == "100% 100%");

	elm.style.backgroundPosition = "right 20px";
	verify(elm.style.backgroundPosition == "100% 20px");

	elm.style.backgroundPosition = "20px top";
	verify(elm.style.backgroundPosition == "20px 0%");

	elm.style.backgroundPosition = "20px bottom";
	verify(elm.style.backgroundPosition == "20px 100%");

	elm.style.backgroundPosition = "left 20px";
	verify(elm.style.backgroundPosition == "0% 20px");

	elm.style.backgroundPosition = "right 20px";
	verify(elm.style.backgroundPosition == "100% 20px");
}

test("background-position: three values")
{
	elm = document.getElementsByTagName('div')[0];

	elm.style.backgroundPosition = "left 10px top";
	verify(elm.style.backgroundPosition == "left 10px top 0%");

	elm.style.backgroundPosition = "left 10px center";
	verify(elm.style.backgroundPosition == "left 10px top 50%");
}

test("background-position: four values")
{
	elm = document.getElementsByTagName('div')[0];

	elm.style.backgroundPosition = "left 10px top 20px";
	verify(elm.style.backgroundPosition == "left 10px top 20px");

	/* We normalize so that horizontal values comes first. */

	elm.style.backgroundPosition = "bottom 10px right 20px";
	verify(elm.style.backgroundPosition == "right 20px bottom 10px");

	elm.style.backgroundPosition = "center right 20px";
	verify(elm.style.backgroundPosition == "right 20px top 50%");
}

test("background shorthand parsing: bg-position")
{
	elm = document.getElementsByTagName('div')[0];

	elm.style.backgroundImage = "url(localhost://foo)";
	elm.style.backgroundPosition = "left 10px top";

	verify(elm.style.background == "url(\"localhost://foo\") left 10px top");

	elm.style.backgroundImage = "url(localhost://foo), url(localhost://bar)";
	verify(elm.style.background == "url(\"localhost://foo\") left 10px top, url(\"localhost://bar\") left 10px top");
}

test("background shorthand parsing: bg-color")
{
	elm = document.getElementsByTagName('div')[0];

	/* Set valid values */

	elm.style.background = "blue";
	verify(elm.style.background == "blue");

	elm.style.background = "#0000ff";
	verify(elm.style.background == "rgb(0, 0, 255)");

	elm.style.background = "#00f";
	verify(elm.style.background == "rgb(0, 0, 255)");

	elm.style.background = "rgb(0, 0, 255)";
	verify(elm.style.background == "rgb(0, 0, 255)");

	elm.style.background = "red";
	verify(elm.style.background == "red");

	elm.style.background = "#ff0000";
	verify(elm.style.background == "rgb(255, 0, 0)");

	elm.style.background = "#f00";
	verify(elm.style.background == "rgb(255, 0, 0)");

	elm.style.background = "rgb(255, 0, 0)";
	verify(elm.style.background == "rgb(255, 0, 0)");

	elm.style.background = "currentColor";
	verify(elm.style.background == "currentColor");

/*	elm.style.background = "ActiveBorder";
	verify(elm.style.background == "ActiveBorder"); */

	/* Set invalid values */

	elm.style.background = "";
	elm.style.background = "red red";
	verify(elm.style.background == "");

	elm.style.background = "";
	elm.style.background = "transparent blue";
	verify(elm.style.background == "");

	elm.style.background = "";
	elm.style.background = "currentColor #004";
	verify(elm.style.background == "");

	elm.style.background = "";
	elm.style.background = "ActiveBorder yellow";
	verify(elm.style.background == "");
}

test("background shorthand parsing: bg-attachment")
{
	elm = document.getElementsByTagName('div')[0];

	/* Set valid values */

	elm.style.background = "scroll";
	verify(elm.style.background == "transparent none repeat scroll 0% 0% / auto padding-box border-box"); // all default

	elm.style.background = "fixed";
	verify(elm.style.background == "fixed");

	/* Set invalid values */

	elm.style.background = "";
	elm.style.background = "scroll scroll";
	verify(elm.style.background == "");

	elm.style.background = "";
	elm.style.background = "fixed scroll";
	verify(elm.style.background == "");
}

test("background shorthand parsing: bg-repeat")
{
	elm = document.getElementsByTagName('div')[0];

	/* Set invalid values */

	elm.style.background = "";
	elm.style.background = "repeat-x repeat";
	verify(elm.style.background == "");

	elm.style.background = "";
	elm.style.background = "repeat repeat-y";
	verify(elm.style.background == "");

	elm.style.background = "space repeat-y";
	elm.style.background = "";
	verify(elm.style.background == "");
}

test("background shorthand parsing: bg-position")
{
	elm = document.getElementsByTagName('div')[0];

	elm.style.background = "10px 10px";
	verify(elm.style.background == "10px 10px");

	elm.style.background = "bottom right";
	verify(elm.style.background == "100% 100%");
}

test("background shorthand parsing: bg-image")
{
    elm = document.getElementsByTagName('div')[0];

    elm.style.background = "url(foo)";
    verify(elm.style.background == "url(\"opera:foo\")");

    elm.style.background = "none";
	verify(elm.style.background == "transparent none repeat scroll 0% 0% / auto padding-box border-box"); // all default
}

test("background shorthand parsing: bg-size")
{
    elm = document.getElementsByTagName('div')[0];

	/* Set valid values */

    elm.style.background = "url(foo) 10px 20px / 30px 40px";
    verify(elm.style.background == "url(\"opera:foo\") 10px 20px / 30px 40px");

    elm.style.background = "url(foo) 10px 20px / 30px 40px space space";
    verify(elm.style.background == "url(\"opera:foo\") space space 10px 20px / 30px 40px");

    elm.style.background = "url(foo) 10px 20px / 10px";
    verify(elm.style.background == "url(\"opera:foo\") 10px 20px / 10px");

    elm.style.background = "url(foo) 10px 20px / 10px space";
    verify(elm.style.background == "url(\"opera:foo\") space 10px 20px / 10px");

    elm.style.background = "url(foo) 10px 20px / auto auto";
    verify(elm.style.background == "url(\"opera:foo\") 10px 20px / auto auto");

    elm.style.background = "url(foo) 10px 20px / contain";
    verify(elm.style.background == "url(\"opera:foo\") 10px 20px / contain");

	/* Set invalid values */

    elm.style.background = "";
    elm.style.background = "url(foo) 10px 20px / contain contain";
    verify(elm.style.background == "");

    elm.style.background = "";
    elm.style.background = "url(foo) 10px 20px /";
    verify(elm.style.background == "");

    elm.style.background = "";
    elm.style.background = "url(foo) 10px 20px / auto, url(foo) 10px 20px /";
    verify(elm.style.background == "");

	elm.style.background = "";
	elm.style.background = "url(foo) 10px 20px / auto auto auto";
	verify(elm.style.background == "");
}

test("background shorthand parsing: combinations")
{
	elm = document.getElementsByTagName('div')[0];

	elm.style.background = "none 10px 11px";
	verify(elm.style.backgroundImage == "none");
	verify(elm.style.backgroundPosition == "10px 11px");

	elm.style.background = "repeat bottom right";
	verify(elm.style.backgroundRepeat == "repeat");
	verify(elm.style.backgroundPosition == "100% 100%");

	elm.style.background = "currentColor repeat";
	verify(elm.style.backgroundColor == "currentColor");
	verify(elm.style.backgroundRepeat == "repeat");
}

test("background shorthand parsing: multiple layers")
{
	elm = document.getElementsByTagName('div')[0];

	elm.style.background = "none, none, none, url(foo)";
	verify(elm.style.background != "");
}

test("background shorthand parsing: inherit")
{
	elm = document.getElementsByTagName('div')[0];

	elm.style.background = "inherit";
	verify(elm.style.background == "inherit");
}

test("background shorthand parsing: multiple layers with bg-size")
{
	elm = document.getElementsByTagName('div')[0];

	elm.style.background = "url(foo) 10px 20px / contain";
	verify(elm.style.background == "url(\"opera:foo\") 10px 20px / contain");

	elm.style.background = "url(foo) 10px 20px / contain, url(foo) 10px 20px / contain";
	verify(elm.style.background == "url(\"opera:foo\") 10px 20px / contain, url(\"opera:foo\") 10px 20px / contain");

	elm.style.background = "url(foo) 10px 20px / auto auto, url(foo) 10px 20px / auto auto";
	verify(elm.style.background == "url(\"opera:foo\") 10px 20px / auto auto, url(\"opera:foo\") 10px 20px / auto auto");
}

test("background shorthand parsing: bg-repeat")
{
	elm = document.getElementsByTagName('div')[0];

	elm.style.backgroundRepeat = "repeat";
	verify(elm.style.backgroundRepeat == "repeat");

	elm.style.backgroundRepeat = "repeat repeat";
	verify(elm.style.backgroundRepeat == "repeat repeat");

	elm.style.backgroundRepeat = "repeat-x";
	verify(elm.style.backgroundRepeat == "repeat-x");

	elm.style.backgroundRepeat = "repeat-y";
	verify(elm.style.backgroundRepeat == "repeat-y");

	elm.style.backgroundRepeat = "space repeat";
	verify(elm.style.backgroundRepeat == "space repeat");

	elm.style.backgroundRepeat = "repeat space";
	verify(elm.style.backgroundRepeat == "repeat space");

	/* Set invalid values */

	elm.style.backgroundRepeat = "";
	elm.style.backgroundRepeat = "repeat-x repeat";
	verify(elm.style.backgroundRepeat == "");

	elm.style.backgroundRepeat = "";
	elm.style.backgroundRepeat = "repeat repeat-y";
	verify(elm.style.backgroundRepeat == "");

	elm.style.backgroundRepeat = "space repeat-y";
	elm.style.backgroundRepeat = "";
	verify(elm.style.backgroundRepeat == "");
}

test("background shorthand serialization: multiple layers in shorthand")
{
	document.body.style.background = "url('file://localhost/foo'), url('file://localhost/goo')";
	verify(document.body.style.background == "url(\"file://localhost/foo\"), url(\"file://localhost/goo\")");

	document.body.style.background = "url('file://localhost/foo') space, url('file://localhost/goo')";
	verify(document.body.style.background == "url(\"file://localhost/foo\") space, url(\"file://localhost/goo\")");

	document.body.style.background = "url('file://localhost/foo') space, url('file://localhost/goo') no-repeat";
	verify(document.body.style.background == "url(\"file://localhost/foo\") space, url(\"file://localhost/goo\") no-repeat");

	document.body.style.background = "url('file://localhost/foo') space round, url('file://localhost/goo') no-repeat";
	verify(document.body.style.background == "url(\"file://localhost/foo\") space round, url(\"file://localhost/goo\") no-repeat");

	document.body.style.background = "url('file://localhost/foo') fixed, url('file://localhost/goo')";
	verify(document.body.style.background == "url(\"file://localhost/foo\") fixed, url(\"file://localhost/goo\")");

	document.body.style.background = "url('file://localhost/foo') fixed, url('file://localhost/goo') fixed";
	verify(document.body.style.background == "url(\"file://localhost/foo\") fixed, url(\"file://localhost/goo\") fixed");

	document.body.style.background = "url('file://localhost/foo') 10px 20px";
	verify(document.body.style.background == "url(\"file://localhost/foo\") 10px 20px");

	document.body.style.background = "url('file://localhost/foo'), url('file://localhost/goo') blue";
	verify(document.body.style.background == "url(\"file://localhost/foo\"), blue url(\"file://localhost/goo\")");

	document.body.style.background = "url('file://localhost/foo'), green url('file://localhost/goo')";
	verify(document.body.style.background == "url(\"file://localhost/foo\"), green url(\"file://localhost/goo\")");

	document.body.style.background = "";
}

test("background shorthand serialization: multiple layers in longhands")
	require success "background shorthand serialization: multiple layers in shorthand";
{
	document.body.style.backgroundImage = "url('file://localhost/foo'), url('file://localhost/goo')";
	verify(document.body.style.background == "url(\"file://localhost/foo\"), url(\"file://localhost/goo\")");

	document.body.style.backgroundImage = "url('file://localhost/foo'), url('file://localhost/goo')";
	document.body.style.backgroundRepeat = "no-repeat";
	verify(document.body.style.background == "url(\"file://localhost/foo\") no-repeat, url(\"file://localhost/goo\") no-repeat");

	document.body.style.backgroundImage = "url('file://localhost/foo'), url('file://localhost/goo')";
	document.body.style.backgroundRepeat = "space round";
	verify(document.body.style.background == "url(\"file://localhost/foo\") space round, url(\"file://localhost/goo\") space round");

	document.body.style.backgroundImage = "url('file://localhost/foo'), url('file://localhost/goo')";
	document.body.style.backgroundRepeat = "space round, round space";
	verify(document.body.style.background == "url(\"file://localhost/foo\") space round, url(\"file://localhost/goo\") round space");

	document.body.style.backgroundImage = "url('file://localhost/foo'), url('file://localhost/goo')";
	document.body.style.backgroundRepeat = "space round, round space, repeat-x";
	verify(document.body.style.background == "url(\"file://localhost/foo\") space round, url(\"file://localhost/goo\") round space");

	document.body.style.backgroundRepeat = "";

	document.body.style.backgroundImage = "url('file://localhost/foo'), url('file://localhost/goo')";
	document.body.style.backgroundAttachment = "fixed";
	verify(document.body.style.background == "url(\"file://localhost/foo\") fixed, url(\"file://localhost/goo\") fixed");

	document.body.style.backgroundImage = "url('file://localhost/foo'), url('file://localhost/goo')";
	document.body.style.backgroundAttachment = "fixed, scroll";
	verify(document.body.style.background == "url(\"file://localhost/foo\") fixed, url(\"file://localhost/goo\")");

	document.body.style.backgroundAttachment = "";

	document.body.style.backgroundImage = "url('file://localhost/foo'), url('file://localhost/goo')";
	document.body.style.backgroundPosition = "10px 20px";
	verify(document.body.style.background == "url(\"file://localhost/foo\") 10px 20px, url(\"file://localhost/goo\") 10px 20px");

	document.body.style.backgroundImage = "url('file://localhost/foo'), url('file://localhost/goo')";
	document.body.style.backgroundPosition = "10px 20px, 30px 40px";
	verify(document.body.style.background == "url(\"file://localhost/foo\") 10px 20px, url(\"file://localhost/goo\") 30px 40px");

	document.body.style.backgroundPosition = "";

	document.body.style.backgroundImage = "url('file://localhost/foo'), url('file://localhost/goo')";
	document.body.style.backgroundSize = "auto";
	verify(document.body.style.background == "url(\"file://localhost/foo\"), url(\"file://localhost/goo\")");

	document.body.style.backgroundImage = "url('file://localhost/foo'), url('file://localhost/goo')";
	document.body.style.backgroundSize = "auto 20px";
	verify(document.body.style.background == "url(\"file://localhost/foo\") 0% 0% / auto 20px, url(\"file://localhost/goo\") 0% 0% / auto 20px");

	document.body.style.backgroundImage = "url('file://localhost/foo'), url('file://localhost/goo')";
	document.body.style.backgroundSize = "20px auto";
	verify(document.body.style.background == "url(\"file://localhost/foo\") 0% 0% / 20px auto, url(\"file://localhost/goo\") 0% 0% / 20px auto");

	document.body.style.backgroundSize = "";

	document.body.style.backgroundImage = "url('file://localhost/foo'), url('file://localhost/goo')";
	document.body.style.backgroundColor = "green";
	verify(document.body.style.background == "url(\"file://localhost/foo\"), green url(\"file://localhost/goo\")");

	document.body.style.backgroundColor = "";
	document.body.style.backgroundImage = "";
}

test("background shorthand serialization: default values")
	require success "background shorthand serialization: multiple layers in longhands";
{
	document.body.style.backgroundColor = "transparent";
	verify(document.body.style.background == "transparent");
	document.body.style.backgroundColor = "";

	document.body.style.backgroundImage = "none";
	verify(document.body.style.background == "none");
	document.body.style.backgroundImage = "";

	document.body.style.backgroundRepeat = "repeat";
	verify(document.body.style.background == "repeat");
	document.body.style.backgroundRepeat = "";

	document.body.style.backgroundAttachment = "scroll";
	verify(document.body.style.background == "scroll");
	document.body.style.backgroundAttachment = "";

	document.body.style.backgroundPosition = "0% 0%";
	verify(document.body.style.background == "0% 0%");
	document.body.style.backgroundPosition = "";

	document.body.style.backgroundSize = "auto";
	verify(document.body.style.background == "0% 0% / auto");
	document.body.style.backgroundSize = "";

	document.body.style.backgroundOrigin = "padding-box";
	verify(document.body.style.background == "padding-box");
	document.body.style.backgroundOrigin = "";

	document.body.style.backgroundClip = "border-box";
	verify(document.body.style.background == "border-box");
	document.body.style.backgroundClip = "";
}

test("box-decoration-break: parse valid values")
{
	document.body.style.boxDecorationBreak = "clone";
	verify(document.body.style.boxDecorationBreak == "clone");
	document.body.style.boxDecorationBreak = "";

	document.body.style.boxDecorationBreak = "slice";
	verify(document.body.style.boxDecorationBreak == "slice");
	document.body.style.boxDecorationBreak = "";
}

test("box-decoration-break: parse invalid values")
{
	document.body.style.boxDecorationBreak = "cloone";
	verify(document.body.style.boxDecorationBreak == "");
	document.body.style.boxDecorationBreak = "";

	document.body.style.boxDecorationBreak = "salice";
	verify(document.body.style.boxDecorationBreak == "");
	document.body.style.boxDecorationBreak = "";
}
