/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "style.pseudo.css2.tokenizer";
// require init;

language C++;

include "modules/style/css.h";
include "modules/style/src/css_selector.h";

table PseudoClassesWithValuesCSS2(char*, int)
{
	{ "link", PSEUDO_CLASS_LINK },
	{ "lang", PSEUDO_CLASS_LANG },
	{ "after", PSEUDO_CLASS_AFTER },
	{ "hover", PSEUDO_CLASS_HOVER },
	{ "focus", PSEUDO_CLASS_FOCUS },
	{ "active", PSEUDO_CLASS_ACTIVE },
	{ "before", PSEUDO_CLASS_BEFORE },
	{ "visited", PSEUDO_CLASS_VISITED },
	{ "first-line", PSEUDO_CLASS_FIRST_LINE },
	{ "first-child", PSEUDO_CLASS_FIRST_CHILD },
	{ "first-letter", PSEUDO_CLASS_FIRST_LETTER },
	{ "jkfdjsf", PSEUDO_CLASS_UNKNOWN },
	{ "ifduweoiufioewfdsjfks", PSEUDO_CLASS_UNKNOWN },
	{ "a", PSEUDO_CLASS_UNKNOWN },
	{ "", PSEUDO_CLASS_UNKNOWN },
}

// This test tests that the tables in attr_val.h are consistent.
foreach (value, value_number) from PseudoClassesWithValuesCSS2
{
	test("Parse CSS pseudo class " value)
	{
		int parsed_value_number = CSS_GetPseudoClass(UNI_L(value), op_strlen(value));
		verify(parsed_value_number == value_number);
	}
}

group "style.pseudo.css3.tokenizer";

table PseudoClassesWithValuesCSS3(char*, int)
{
	{ "valid",	PSEUDO_CLASS_VALID },
	{ "invalid",	PSEUDO_CLASS_INVALID },
	{ "default",	PSEUDO_CLASS_DEFAULT },
	{ "enabled",	PSEUDO_CLASS_ENABLED },
	{ "checked",	PSEUDO_CLASS_CHECKED },
	{ "in-range",	PSEUDO_CLASS_IN_RANGE },
	{ "required",	PSEUDO_CLASS_REQUIRED },
	{ "optional",	PSEUDO_CLASS_OPTIONAL },
	{ "disabled",	PSEUDO_CLASS_DISABLED },
	{ "read-only",	PSEUDO_CLASS_READ_ONLY },
	{ "read-write",	PSEUDO_CLASS_READ_WRITE },
	{ "out-of-range",	PSEUDO_CLASS_OUT_OF_RANGE },
	{ "indeterminate",	PSEUDO_CLASS_INDETERMINATE },
	{ "qwsqjkfdjsf", PSEUDO_CLASS_UNKNOWN },
	{ "qwqifduweoiufioewfdsjfks", PSEUDO_CLASS_UNKNOWN },
	{ "e", PSEUDO_CLASS_UNKNOWN },
	{ "", PSEUDO_CLASS_UNKNOWN }
}

// This test tests that the tables in attr_val.h are consistent.
foreach (value, value_number) from PseudoClassesWithValuesCSS3
{
	test("Parse CSS pseudo class " value)
	{
		int parsed_value_number = CSS_GetPseudoClass(UNI_L(value), op_strlen(value));
		verify(parsed_value_number == value_number);
	}
}

group "style.pseudo.track.tokenizer";
require MEDIA_HTML_SUPPORT;

table PseudoClassesWithValuesTrack(char*, int)
{
	{ "past",	PSEUDO_CLASS_PAST },
	{ "future",	PSEUDO_CLASS_FUTURE },
	{ "pasta", PSEUDO_CLASS_UNKNOWN },
	{ "futurex", PSEUDO_CLASS_UNKNOWN },
	{ "", PSEUDO_CLASS_UNKNOWN }
}

// This test tests that the tables in attr_val.h are consistent.
foreach (value, value_number) from PseudoClassesWithValuesTrack
{
	test("Parse CSS pseudo class " value)
	{
		int parsed_value_number = CSS_GetPseudoClass(UNI_L(value), op_strlen(value));
		verify(parsed_value_number == value_number);
	}
}
