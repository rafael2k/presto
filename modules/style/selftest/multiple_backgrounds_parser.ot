/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "style.parser.multiple-backgrounds";

require init;

language C++;

include "modules/doc/frm_doc.h";
include "modules/style/css_property_list.h";
include "modules/style/css.h";


html {
	//! <html><body>
	//! A document to parse in
	//! </body></html>
}

/* Table data assumes that URLs in selftests are resolved relative to
   the 'opera:' base url. */

global
{
	CSS_property_list* new_css;
	URL base_url;
}

setup
{
	base_url = g_url_api->GetURL("opera:");
}

/* Note: __iter__ is undocumented and its use probably discouraged but
   it makes debugging failed tests easier. */

subtest CheckProperty(short prop, const char* str1, const char* str2)
{
	OpString s1;

	verify(OpStatus::IsSuccess(s1.Set(str1)));

    TempBuffer tmp_buf;

    HLDocProfile* hld_profile = state.doc->GetHLDocProfile();
    verify(hld_profile);

	OP_STATUS status;
	new_css = CSS::LoadDOMStyleValue(hld_profile, NULL, base_url, prop, s1.CStr(), s1.Length(), status);

	verify(OpStatus::IsSuccess(status));
	verify(new_css);
	verify(new_css->GetLength() == 1);

	CSS_decl* decl = new_css->GetFirstDecl();

	if (!decl)
		output("Failed to parse declaration: '%s'\n", str1);

	verify(decl);

	tmp_buf.Clear();
	CSS::FormatDeclarationL(&tmp_buf, decl, FALSE, CSS_FORMAT_COMPUTED_STYLE);

	if (uni_strcmp(tmp_buf.GetStorage(), str2))
	{
		output("Expected '%s'", str2);
		output("but got '%s'\n", ST_down(tmp_buf.GetStorage()));
	}

	verify(uni_strcmp(tmp_buf.GetStorage(), str2) == 0);
}
finally
{
	if (new_css)
		new_css->Unref();
}

table PropTableBackgroundImage(const char*, const char*)
{
    { "url(none)",                   "url(\"opera:none\")" }
    { "url(url1), url(url2)",        "url(\"opera:url1\"), url(\"opera:url2\")" }
	{ "none",                        "none" }
	{ "none, url(url1), none",       "none, url(\"opera:url1\"), none" }
	{ "inherit",                     "inherit" }
}

test("background-image")
{
    iterate (str1, str2) from PropTableBackgroundImage
    {
		verify(CheckProperty(CSS_PROPERTY_background_image, str1, str2));
	}
}

table PropTableBackgroundRepeat(const char*, const char*)
{
    { "repeat-x, round, space", "repeat-x, round, space" }
    { "repeat-x, space space",  "repeat-x, space space" }
    { "repeat-x",               "repeat-x" }
    { "repeat-y",               "repeat-y" }
    { "repeat",                 "repeat" }
    { "no-repeat",              "no-repeat" }
    { "space",                  "space" }
    { "round",                  "round" }
    { "repeat no-repeat",       "repeat no-repeat" }
    { "no-repeat repeat",       "no-repeat repeat" }
    { "repeat repeat",          "repeat repeat" }
    { "no-repeat no-repeat",    "no-repeat no-repeat" }
    { "round round",            "round round" }
    { "space space",            "space space" }
    { "inherit",                "inherit" }
}

test("background-repeat")
{
    iterate (str1, str2) from PropTableBackgroundRepeat
    {
		verify(CheckProperty(CSS_PROPERTY_background_repeat, str1, str2));
	}
}

table PropTableBackgroundSize(const char*, const char*)
{
    { "10px 12px, cover, contain", "10px 12px, cover, contain" }
    { "100% 100%",                 "100% 100%" }
    { "50% auto",                  "50% auto" }
    { "15px 15px",                 "15px 15px" }
    { "auto",                      "auto" }
    { "20% 30%",                   "20% 30%" }
    { "inherit",                   "inherit" }
    { "3em",                       "3em" }
    { "3em auto",                  "3em auto" }
    { "auto 4em",                  "auto 4em" }
}

test("background-size")
{
    iterate (str1, str2) from PropTableBackgroundSize
    {
		verify(CheckProperty(CSS_PROPERTY_background_size, str1, str2));
	}
}

table PropTableBackgroundAttachment(const char*, const char*)
{
    { "scroll, fixed, local, scroll", "scroll, fixed, local, scroll" }
	{ "scroll", "scroll" }
	{ "local", "local" }
	{ "local, fixed", "local, fixed" }
}

test("background-attachment")
{
    iterate (str1, str2) from PropTableBackgroundAttachment
    {
		verify(CheckProperty(CSS_PROPERTY_background_attachment, str1, str2));
	}
}

table PropTableBackgroundColor(const char*, const char*)
{
    { "transparent", "transparent" }
    { "rgb(255, 0, 0)",     "rgb(255, 0, 0)" }
}

test("background-color")
{
    iterate (str1, str2) from PropTableBackgroundColor
    {
		verify(CheckProperty(CSS_PROPERTY_background_color, str1, str2));
	}
}

table PropTableBackgroundPosition(const char*, const char*)
{
    { "0%",            "0% 50%" }
    { "left top",      "0% 0%" }
    { "bottom right",  "100% 100%" }
    { "center center", "50% 50%" }
    { "-20px -20px",   "-20px -20px" }
    { "-20px -20px, 0%",   "-20px -20px, 0% 50%" }
}

test("background-position")
{
    iterate (str1, str2) from PropTableBackgroundPosition
    {
		verify(CheckProperty(CSS_PROPERTY_background_position, str1, str2));
	}
}

table PropTableBackgroundClip(const char*, const char*)
{
    { "border-box",                         "border-box" }
    { "padding-box",                        "padding-box" }
    { "content-box",                        "content-box" }
    { "border-box, border-box, border-box", "border-box, border-box, border-box" }
}

test("background-clip")
{
    iterate (str1, str2) from PropTableBackgroundClip
    {
		verify(CheckProperty(CSS_PROPERTY_background_clip, str1, str2));
	}
}

table PropTableBackgroundOrigin(const char*, const char*)
{
    { "border-box",                         "border-box" }
    { "padding-box",                        "padding-box" }
    { "content-box",                        "content-box" }
    { "border-box, border-box, border-box", "border-box, border-box, border-box" }
}

test("background-origin")
{
    iterate (str1, str2) from PropTableBackgroundOrigin
    {
		verify(CheckProperty(CSS_PROPERTY_background_origin, str1, str2));
	}
}

table PropTableBackground(const char*, const char*, const char*, const char*)
{
    { "url(url1.png) red", "url(\"opera:url1.png\")", "rgb(255, 0, 0)", "scroll" }
    { "url(url1.png) red fixed", "url(\"opera:url1.png\")", "rgb(255, 0, 0)", "fixed" }
    { "url(url1.png) red fixed", "url(\"opera:url1.png\")", "rgb(255, 0, 0)", "fixed" }
}

test("background")
{
    iterate (str1, str2, str3, str4) from PropTableBackground
    {
		OpString s1, s2, s3, s4;

		verify(OpStatus::IsSuccess(s1.Set(str1)));
		verify(OpStatus::IsSuccess(s2.Set(str2)));
		verify(OpStatus::IsSuccess(s3.Set(str3)));
		verify(OpStatus::IsSuccess(s4.Set(str4)));

		TempBuffer tmp_buf;

		HLDocProfile* hld_profile = state.doc->GetHLDocProfile();
		verify(hld_profile);

		OP_STATUS status;
		new_css = CSS::LoadDOMStyleValue(hld_profile, NULL, base_url, CSS_PROPERTY_background, s1.CStr(), s1.Length(), status);

		verify(OpStatus::IsSuccess(status));
		verify(new_css);
		verify(new_css->GetLength() == 8);

		CSS_decl* decl = new_css->GetFirstDecl();

		while (decl)
		{
			tmp_buf.Clear();
			CSS::FormatDeclarationL(&tmp_buf, decl, FALSE, CSS_FORMAT_COMPUTED_STYLE);

			switch (decl->GetProperty())
			{
			case CSS_PROPERTY_background_image:
				verify(uni_strcmp(tmp_buf.GetStorage(), s2.CStr()) == 0);
				break;
			case CSS_PROPERTY_background_color:
				verify(uni_strcmp(tmp_buf.GetStorage(), s3.CStr()) == 0);
				break;
			case CSS_PROPERTY_background_attachment:
				verify(uni_strcmp(tmp_buf.GetStorage(), s4.CStr()) == 0);
				break;
			}

			decl = decl->Suc();
		}

		new_css->Unref();
		new_css = NULL;
	}
}
finally
{
	if (new_css)
		new_css->Unref();
}


