/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "style.animations";

require init;
require CSS_ANIMATIONS;
language ecmascript;

html {
//!<div></div>
}

test("CSS Animations: animation-name")
{
    var elm = document.getElementsByTagName('div')[0];

    elm.style.animationName = "foo";
    verify(elm.style.animationName == "foo");

    elm.style.animationName = "foo, bar";
    verify(elm.style.animationName == "foo, bar");

    elm.style.animationName = "foo,bar";
    verify(elm.style.animationName == "foo, bar");

    elm.style.animationName = "foo ,bar";
    verify(elm.style.animationName == "foo, bar");

    // Invalid:

    elm.style.animationName = "";
    elm.style.animationName = "foo ,";
    verify(elm.style.animationName == "");

    elm.style.animationName = "foo,";
    verify(elm.style.animationName == "");

    elm.style.animationName = "1one1";
    verify(elm.style.animationName == "");
}

test("CSS Animations: animation-timing-function")
{
    var elm = document.getElementsByTagName('div')[0];

    elm.style.animationTimingFunction = "ease";
    verify(elm.style.animationTimingFunction == "cubic-bezier(0.25, 0.1, 0.25, 1)");

    elm.style.animationTimingFunction = "step-end";
    verify(elm.style.animationTimingFunction == "steps(1, end)");

    elm.style.animationTimingFunction = "step-start";
    verify(elm.style.animationTimingFunction == "steps(1, start)");

    elm.style.animationTimingFunction = "steps(1, end)";
    verify(elm.style.animationTimingFunction == "steps(1, end)");

    elm.style.animationTimingFunction = "steps(9, start)";
    verify(elm.style.animationTimingFunction == "steps(9, start)");

    elm.style.animationTimingFunction = "ease, step-start, ease";
    verify(elm.style.animationTimingFunction == "cubic-bezier(0.25, 0.1, 0.25, 1), steps(1, start), cubic-bezier(0.25, 0.1, 0.25, 1)");
}

test("CSS Animations: animation-iteration-count")
{
    var elm = document.getElementsByTagName('div')[0];

    elm.style.animationIterationCount = "1";
    verify(elm.style.animationIterationCount == "1");

    elm.style.animationIterationCount = "1, 2";
    verify(elm.style.animationIterationCount == "1, 2");
}

test("CSS Animations: animation-direction")
{
    var elm = document.getElementsByTagName('div')[0];

    elm.style.animationDirection = "normal";
    verify(elm.style.animationDirection == "normal");

    elm.style.animationDirection = "normal,alternate,alternate";
    verify(elm.style.animationDirection == "normal, alternate, alternate");
}

test("CSS Animations: animation-fill-mode")
{
    var elm = document.getElementsByTagName('div')[0];

    elm.style.animationFillMode = "none";
    verify(elm.style.animationFillMode == "none");

    elm.style.animationFillMode = "none,forwards,backwards,both";
    verify(elm.style.animationFillMode == "none, forwards, backwards, both");
}

test("CSS Animations: animation-play-state")
{
    var elm = document.getElementsByTagName('div')[0];

    elm.style.animationPlayState = "paused";
    verify(elm.style.animationPlayState == "paused");

    elm.style.animationPlayState = "paused,running,paused,running,running";
    verify(elm.style.animationPlayState == "paused, running, paused, running, running");
}

test("CSS Animations: animation-delay")
{
    var elm = document.getElementsByTagName('div')[0];

    elm.style.animationDelay = "0s";
    verify(elm.style.animationDelay == "0s");

    elm.style.animationDelay = "2s,20s";
    verify(elm.style.animationDelay == "2s, 20s");
}
