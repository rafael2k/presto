group "XPath.functions.string.string";

require init;
require XPATH_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml 
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container>"
      "<text>[text-1]</text>"
      "<text>[text-2]</text>"
      "<text>[text-3]</text>"
    "</container>"
  "</root>"
}

test_equal ("string('string')",
            XPath_TestString (state.doc, "string ('string')", "string"),
            "ok");
test_equal ("string(root/container/text)",
            XPath_TestString (state.doc, "string (root/container/text)", "[text-1]"),
            "ok");
test_equal ("string(root/container[1]/text[1])",
            XPath_TestString (state.doc, "string (root/container/text[1])", "[text-1]"),
            "ok");
test_equal ("string(1)",
            XPath_TestString (state.doc, "string (1)", "1"),
            "ok");
test_equal ("string(1.5)",
            XPath_TestString (state.doc, "string (1.5)", "1.5"),
            "ok");
test_equal ("string(-1.5)",
            XPath_TestString (state.doc, "string (-1.5)", "-1.5"),
            "ok");
test_equal ("string(true())",
            XPath_TestString (state.doc, "string (true())", "true"),
            "ok");
test_equal ("string(false())",
            XPath_TestString (state.doc, "string (false())", "false"),
            "ok");
test_equal ("string()",
            XPath_TestString (state.doc, "string ()", "[text-1][text-2][text-3]"),
            "ok");
test_equal ("string(root/container/text[2][string()='[text-2]'])",
            XPath_TestString (state.doc, "string(root/container/text[2][string()='[text-2]'])", "[text-2]"),
            "ok");

test_equal ("string(true(), true())",
            XPath_TestString (state.doc, "string (true(), true())", ""),
            "XPathExpression::Make failed");

group "XPath.functions.string.concat";
require init;
require XPATH_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml 
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root/>"
}

test_equal ("concat('xxx', 'yyy')",
            XPath_TestString (state.doc, "concat('xxx', 'yyy')", "xxxyyy"),
            "ok");
test_equal ("concat('xxx', 'yyy', 'zzz')",
            XPath_TestString (state.doc, "concat('xxx', 'yyy', 'zzz')", "xxxyyyzzz"),
            "ok");
test_equal ("concat('xxx', 'yyy', 'zzz', 'yyy', 'xxx')",
            XPath_TestString (state.doc, "concat('xxx', 'yyy', 'zzz', 'yyy', 'xxx')", "xxxyyyzzzyyyxxx"),
            "ok");
test_equal ("concat(true(), false(), true())",
            XPath_TestString (state.doc, "concat(true(), false(), true())", "truefalsetrue"),
            "ok");

test_equal ("concat()",
            XPath_TestString (state.doc, "concat ()", ""),
            "XPathExpression::Make failed");
test_equal ("concat('')",
            XPath_TestString (state.doc, "concat ('')", ""),
            "XPathExpression::Make failed");

group "XPath.functions.string.starts-with";
require init;
require XPATH_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml 
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container>"
      "<text>xxxyyy</text>"
      "<text>zzz</text>"
    "</container>"
    "<container>"
      "<text>xxx</text>"
      "<text>yyy</text>"
    "</container>"
  "</root>"
}

test_equal ("starts-with('xxxyyy', 'xxx')",
            XPath_TestBoolean (state.doc, "starts-with('xxxyyy', 'xxx')", TRUE),
            "ok");
test_equal ("starts-with('xxxyyy', 'yyy')",
            XPath_TestBoolean (state.doc, "starts-with('xxxyyy', 'yyy')", FALSE),
            "ok");
test_equal ("starts-with('', 'yyy')",
            XPath_TestBoolean (state.doc, "starts-with('', 'yyy')", FALSE),
            "ok");
test_equal ("starts-with('xxx', '')",
            XPath_TestBoolean (state.doc, "starts-with('xxx', '')", TRUE),
            "ok");
test_equal ("starts-with('xxx', 'xxx')",
            XPath_TestBoolean (state.doc, "starts-with('xxx', 'xxx')", TRUE),
            "ok");
test_equal ("starts-with('xxx', 'yyy')",
            XPath_TestBoolean (state.doc, "starts-with('xxx', 'yyy')", FALSE),
            "ok");
test_equal ("starts-with(root/container[1]/text, root/container[2]/text)",
            XPath_TestBoolean (state.doc, "starts-with(root/container[1]/text, root/container[2]/text)", TRUE),
            "ok");
test_equal ("starts-with(root/container[1]/text[1], root/container[2]/text[1])",
            XPath_TestBoolean (state.doc, "starts-with(root/container[1]/text[1], root/container[2]/text[1])", TRUE),
            "ok");
test_equal ("starts-with(root/container[1]/text[1], root/container[2]/text[2])",
            XPath_TestBoolean (state.doc, "starts-with(root/container[1]/text[1], root/container[2]/text[2])", FALSE),
            "ok");
test_equal ("starts-with(root/container[1]/text[2], root/container[2]/text[1])",
            XPath_TestBoolean (state.doc, "starts-with(root/container[1]/text[2], root/container[2]/text[1])", FALSE),
            "ok");
test_equal ("starts-with(root/container[1]/text[2], root/container[2]/text[2])",
            XPath_TestBoolean (state.doc, "starts-with(root/container[1]/text[2], root/container[2]/text[2])", FALSE),
            "ok");

test_equal ("starts-with()",
            XPath_TestBoolean (state.doc, "starts-with ()", FALSE),
            "XPathExpression::Make failed");
test_equal ("starts-with('')",
            XPath_TestBoolean (state.doc, "starts-with ('')", FALSE),
            "XPathExpression::Make failed");

group "XPath.functions.string.contains";
require init;
require XPATH_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml 
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container>"
      "<text>xxxyyyzzz</text>"
      "<text>zzz</text>"
    "</container>"
    "<container>"
      "<text>xxx</text>"
      "<text>yyy</text>"
    "</container>"
  "</root>"
}

test_equal ("contains('xxxyyy', 'xxx')",
            XPath_TestBoolean (state.doc, "contains('xxxyyy', 'xxx')", TRUE),
            "ok");
test_equal ("contains('xxxyyy', 'yyy')",
            XPath_TestBoolean (state.doc, "contains('xxxyyy', 'yyy')", TRUE),
            "ok");
test_equal ("contains('xxxyyy', 'zzz')",
            XPath_TestBoolean (state.doc, "contains('xxxyyy', 'zzz')", FALSE),
            "ok");
test_equal ("contains('', 'yyy')",
            XPath_TestBoolean (state.doc, "contains('', 'yyy')", FALSE),
            "ok");
test_equal ("contains('xxx', '')",
            XPath_TestBoolean (state.doc, "contains('xxx', '')", TRUE),
            "ok");
test_equal ("contains('xxx', 'xxx')",
            XPath_TestBoolean (state.doc, "contains('xxx', 'xxx')", TRUE),
            "ok");
test_equal ("contains('xxx', 'yyy')",
            XPath_TestBoolean (state.doc, "contains('xxx', 'yyy')", FALSE),
            "ok");
test_equal ("contains(root/container[1]/text, root/container[2]/text)",
            XPath_TestBoolean (state.doc, "contains(root/container[1]/text, root/container[2]/text)", TRUE),
            "ok");
test_equal ("contains(root/container[1]/text[1], root/container[2]/text[1])",
            XPath_TestBoolean (state.doc, "contains(root/container[1]/text[1], root/container[2]/text[1])", TRUE),
            "ok");
test_equal ("contains(root/container[1]/text[1], root/container[2]/text[2])",
            XPath_TestBoolean (state.doc, "contains(root/container[1]/text[1], root/container[2]/text[2])", TRUE),
            "ok");
test_equal ("contains(root/container[1]/text[2], root/container[2]/text[1])",
            XPath_TestBoolean (state.doc, "contains(root/container[1]/text[2], root/container[2]/text[1])", FALSE),
            "ok");
test_equal ("contains(root/container[1]/text[2], root/container[2]/text[2])",
            XPath_TestBoolean (state.doc, "contains(root/container[1]/text[2], root/container[2]/text[2])", FALSE),
            "ok");

test_equal ("contains()",
            XPath_TestBoolean (state.doc, "contains ()", FALSE),
            "XPathExpression::Make failed");
test_equal ("contains('')",
            XPath_TestBoolean (state.doc, "contains ('')", FALSE),
            "XPathExpression::Make failed");

group "XPath.functions.string.substring-before";
require init;
require XPATH_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml 
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container>"
      "<text>xxxyyyzzz</text>"
      "<text>zzz</text>"
    "</container>"
    "<container>"
      "<text>xxx</text>"
      "<text>yyy</text>"
    "</container>"
  "</root>"
}

test_equal ("substring-before('xxxyyy', 'xxx')",
            XPath_TestString (state.doc, "substring-before('xxxyyy', 'xxx')", ""),
            "ok");
test_equal ("substring-before('xxxyyy', 'yyy')",
            XPath_TestString (state.doc, "substring-before('xxxyyy', 'yyy')", "xxx"),
            "ok");
test_equal ("substring-before('xxxyyy', 'zzz')",
            XPath_TestString (state.doc, "substring-before('xxxyyy', 'zzz')", ""),
            "ok");
test_equal ("substring-before('', 'yyy')",
            XPath_TestString (state.doc, "substring-before('', 'yyy')", ""),
            "ok");
test_equal ("substring-before('xxx', '')",
            XPath_TestString (state.doc, "substring-before('xxx', '')", ""),
            "ok");
test_equal ("substring-before('xxx', 'xxx')",
            XPath_TestString (state.doc, "substring-before('xxx', 'xxx')", ""),
            "ok");
test_equal ("substring-before('xxx', 'yyy')",
            XPath_TestString (state.doc, "substring-before('xxx', 'yyy')", ""),
            "ok");
test_equal ("substring-before(root/container[1]/text, root/container[2]/text)",
            XPath_TestString (state.doc, "substring-before(root/container[1]/text, root/container[2]/text)", ""),
            "ok");
test_equal ("substring-before(root/container[1]/text[1], root/container[2]/text[1])",
            XPath_TestString (state.doc, "substring-before(root/container[1]/text[1], root/container[2]/text[1])", ""),
            "ok");
test_equal ("substring-before(root/container[1]/text[1], root/container[1]/text[2])",
            XPath_TestString (state.doc, "substring-before(root/container[1]/text[1], root/container[1]/text[2])", "xxxyyy"),
            "ok");
test_equal ("substring-before(root/container[1]/text[1], root/container[2]/text[2])",
            XPath_TestString (state.doc, "substring-before(root/container[1]/text[1], root/container[2]/text[2])", "xxx"),
            "ok");
test_equal ("substring-before(root/container[1]/text[2], root/container[2]/text[1])",
            XPath_TestString (state.doc, "substring-before(root/container[1]/text[2], root/container[2]/text[1])", ""),
            "ok");
test_equal ("substring-before(root/container[1]/text[2], root/container[2]/text[2])",
            XPath_TestString (state.doc, "substring-before(root/container[1]/text[2], root/container[2]/text[2])", ""),
            "ok");

test_equal ("substring-before()",
            XPath_TestString (state.doc, "substring-before ()", ""),
            "XPathExpression::Make failed");
test_equal ("substring-before('')",
            XPath_TestString (state.doc, "substring-before ('')", ""),
            "XPathExpression::Make failed");

group "XPath.functions.string.substring-after";
require init;
require XPATH_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml 
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container>"
      "<text>xxxyyyzzz</text>"
      "<text>zzz</text>"
    "</container>"
    "<container>"
      "<text>xxx</text>"
      "<text>yyy</text>"
    "</container>"
  "</root>"
}

test_equal ("substring-after('xxxyyy', 'xxx')",
            XPath_TestString (state.doc, "substring-after('xxxyyy', 'xxx')", "yyy"),
            "ok");
test_equal ("substring-after('xxxyyy', 'yyy')",
            XPath_TestString (state.doc, "substring-after('xxxyyy', 'yyy')", ""),
            "ok");
test_equal ("substring-after('xxxyyy', 'zzz')",
            XPath_TestString (state.doc, "substring-after('xxxyyy', 'zzz')", ""),
            "ok");
test_equal ("substring-after('', 'yyy')",
            XPath_TestString (state.doc, "substring-after('', 'yyy')", ""),
            "ok");
test_equal ("substring-after('xxx', '')",
            XPath_TestString (state.doc, "substring-after('xxx', '')", "xxx"),
            "ok");
test_equal ("substring-after('xxx', 'xxx')",
            XPath_TestString (state.doc, "substring-after('xxx', 'xxx')", ""),
            "ok");
test_equal ("substring-after('xxx', 'yyy')",
            XPath_TestString (state.doc, "substring-after('xxx', 'yyy')", ""),
            "ok");
test_equal ("substring-after(root/container[1]/text, root/container[2]/text)",
            XPath_TestString (state.doc, "substring-after(root/container[1]/text, root/container[2]/text)", "yyyzzz"),
            "ok");
test_equal ("substring-after(root/container[1]/text[1], root/container[2]/text[1])",
            XPath_TestString (state.doc, "substring-after(root/container[1]/text[1], root/container[2]/text[1])", "yyyzzz"),
            "ok");
test_equal ("substring-after(root/container[1]/text[1], root/container[2]/text[2])",
            XPath_TestString (state.doc, "substring-after(root/container[1]/text[1], root/container[2]/text[2])", "zzz"),
            "ok");
test_equal ("substring-after(root/container[1]/text[2], root/container[2]/text[1])",
            XPath_TestString (state.doc, "substring-after(root/container[1]/text[2], root/container[2]/text[1])", ""),
            "ok");
test_equal ("substring-after(root/container[1]/text[2], root/container[2]/text[2])",
            XPath_TestString (state.doc, "substring-after(root/container[1]/text[2], root/container[2]/text[2])", ""),
            "ok");

test_equal ("substring-after()",
            XPath_TestString (state.doc, "substring-after ()", ""),
            "XPathExpression::Make failed");
test_equal ("substring-after('')",
            XPath_TestString (state.doc, "substring-after ('')", ""),
            "XPathExpression::Make failed");

group "XPath.functions.string.substring";
require init;
require XPATH_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml 
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container>"
      "<text>xxxyyy</text>"
    "</container>"
  "</root>"
}

test_equal ("substring('xxxyyy', 1)",
            XPath_TestString (state.doc, "substring('xxxyyy', 1)", "xxxyyy"),
            "ok");
test_equal ("substring('xxxyyy', 2)",
            XPath_TestString (state.doc, "substring('xxxyyy', 2)", "xxyyy"),
            "ok");
test_equal ("substring('xxxyyy', 3)",
            XPath_TestString (state.doc, "substring('xxxyyy', 3)", "xyyy"),
            "ok");
test_equal ("substring('xxxyyy', 4)",
            XPath_TestString (state.doc, "substring('xxxyyy', 4)", "yyy"),
            "ok");
test_equal ("substring('xxxyyy', 5)",
            XPath_TestString (state.doc, "substring('xxxyyy', 5)", "yy"),
            "ok");
test_equal ("substring('xxxyyy', 6)",
            XPath_TestString (state.doc, "substring('xxxyyy', 6)", "y"),
            "ok");
test_equal ("substring('xxxyyy', 7)",
            XPath_TestString (state.doc, "substring('xxxyyy', 7)", ""),
            "ok");
test_equal ("substring('xxxyyy', 8)",
            XPath_TestString (state.doc, "substring('xxxyyy', 8)", ""),
            "ok");

test_equal ("substring('xxxyyy', 1, 3)",
            XPath_TestString (state.doc, "substring('xxxyyy', 1, 3)", "xxx"),
            "ok");
test_equal ("substring('xxxyyy', 2, 3)",
            XPath_TestString (state.doc, "substring('xxxyyy', 2, 3)", "xxy"),
            "ok");
test_equal ("substring('xxxyyy', 3, 3)",
            XPath_TestString (state.doc, "substring('xxxyyy', 3, 3)", "xyy"),
            "ok");
test_equal ("substring('xxxyyy', 4, 3)",
            XPath_TestString (state.doc, "substring('xxxyyy', 4, 3)", "yyy"),
            "ok");
test_equal ("substring('xxxyyy', 5, 3)",
            XPath_TestString (state.doc, "substring('xxxyyy', 5, 3)", "yy"),
            "ok");
test_equal ("substring('xxxyyy', 6, 3)",
            XPath_TestString (state.doc, "substring('xxxyyy', 6, 3)", "y"),
            "ok");
test_equal ("substring('xxxyyy', 7, 3)",
            XPath_TestString (state.doc, "substring('xxxyyy', 7, 3)", ""),
            "ok");
test_equal ("substring('xxxyyy', 8, 3)",
            XPath_TestString (state.doc, "substring('xxxyyy', 8, 3)", ""),
            "ok");

test_equal ("substring(root/container[1]/text[1], 1)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 1)", "xxxyyy"),
            "ok");
test_equal ("substring(root/container[1]/text[1], 2)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 2)", "xxyyy"),
            "ok");
test_equal ("substring(root/container[1]/text[1], 3)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 3)", "xyyy"),
            "ok");
test_equal ("substring(root/container[1]/text[1], 4)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 4)", "yyy"),
            "ok");
test_equal ("substring(root/container[1]/text[1], 5)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 5)", "yy"),
            "ok");
test_equal ("substring(root/container[1]/text[1], 6)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 6)", "y"),
            "ok");
test_equal ("substring(root/container[1]/text[1], 7)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 7)", ""),
            "ok");
test_equal ("substring(root/container[1]/text[1], 8)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 8)", ""),
            "ok");

test_equal ("substring(root/container[1]/text[1], 1, 3)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 1, 3)", "xxx"),
            "ok");
test_equal ("substring(root/container[1]/text[1], 2, 3)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 2, 3)", "xxy"),
            "ok");
test_equal ("substring(root/container[1]/text[1], 3, 3)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 3, 3)", "xyy"),
            "ok");
test_equal ("substring(root/container[1]/text[1], 4, 3)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 4, 3)", "yyy"),
            "ok");
test_equal ("substring(root/container[1]/text[1], 5, 3)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 5, 3)", "yy"),
            "ok");
test_equal ("substring(root/container[1]/text[1], 6, 3)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 6, 3)", "y"),
            "ok");
test_equal ("substring(root/container[1]/text[1], 7, 3)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 7, 3)", ""),
            "ok");
test_equal ("substring(root/container[1]/text[1], 8, 3)",
            XPath_TestString (state.doc, "substring(root/container[1]/text[1], 8, 3)", ""),
            "ok");

test_equal ("substring()",
            XPath_TestString (state.doc, "substring ()", ""),
            "XPathExpression::Make failed");
test_equal ("substring('')",
            XPath_TestString (state.doc, "substring ('')", ""),
            "XPathExpression::Make failed");

group "XPath.functions.string.normalize-space";
require init;
require XPATH_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml 
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container>"
      "<text> 	 some 	 text 	 </text>"
      "<text>[text-2]</text>"
      "<text>[text-3]</text>"
    "</container>"
  "</root>"
}

test_equal ("normalize-space('string')",
            XPath_TestString (state.doc, "normalize-space ('string')", "string"),
            "ok");
test_equal ("normalize-space(root/container/text)",
            XPath_TestString (state.doc, "normalize-space (root/container/text)", "some text"),
            "ok");
test_equal ("normalize-space(root/container[1]/text[1])",
            XPath_TestString (state.doc, "normalize-space (root/container/text[1])", "some text"),
            "ok");
test_equal ("normalize-space('  some  text  ')",
            XPath_TestString (state.doc, "normalize-space ('  some  text  ')", "some text"),
            "ok");

test_equal ("normalize-space(true(), true())",
            XPath_TestString (state.doc, "normalize-space (true(), true())", ""),
            "XPathExpression::Make failed");
