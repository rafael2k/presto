group "XPath.XPath_Scan";

require init;
require XPATH_SUPPORT;

/* No-one is using XPath_Scan at the moment, so it was removed. */
disabled;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpscan.h";
include "modules/xpath/src/xpstep.h";
include "modules/doc/frm_doc.h";
include "modules/logdoc/logdoc.h";

xml
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<filter1/>"
    "<filter1/>"
    "<filter2/>"
    "<filter3/>"
    "<filter1/>"
    "<filter1/>"
    "<filter3/>"
    "<filter2/>"
    "<filter2/>"
    "<filter1/>"
    "<filter3/>"
    "<filter2/>"
    "<filter3/>"
    "<filter1/>"
    "<filter1/>"
    "<filter1/>"
    "<filter1/>"
    "<filter2/>"
    "<filter1/>"
    "<filter3/>"
    "<filter1/>"
    "<filter4/>"
    "<filter5/>"
    "<filter1/>"
    "<filter2/>"
    "<filter2/>"
    "<filter3/>"
    "<filter4/>"
    "<filter1/>"
    "<filter1/>"
    "<filter2/>"
    "<filter3/>"
  "</root>"
}

test ("XPath_Scan::GetChild(): filter1")
{
  XMLTreeAccessor *tree;
  XMLTreeAccessor::Node *root;
  XPath_Scan *OP_MEMORY_VAR scan = 0;

  verify (state.doc->GetLogicalDocument ()->CreateXMLTreeAccessor (tree, root) == OpStatus::OK);

  XPath_XMLTreeAccessorFilter filter1, *filters[1];
  filter1.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter1.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter1.element_name = XMLExpandedName (UNI_L ("filter1"));
  filters[0] = &filter1;

  tree->SetNodeTypeFilter (XMLTreeAccessor::TYPE_ELEMENT, TRUE);
  XMLTreeAccessor::Node *origin = tree->GetFirstChild (root), *OP_MEMORY_VAR iter = tree->GetFirstChild (origin);
  tree->ResetFilters ();

  TRAPD (status, scan = XPath_Scan::MakeL (filters, 1));
  verify (status == OpStatus::OK);

  while (iter)
    {
      while (iter)
        {
          if (tree->GetNodeType (iter) == XMLTreeAccessor::TYPE_ELEMENT)
            {
              XMLCompleteName name;
              tree->GetName (name, iter);
              if (XMLExpandedName (UNI_L ("filter1")) == name)
                break;
            }

          iter = tree->GetNextSibling (iter);
        }

      verify (scan->GetChild (tree, origin) == iter);

      if (iter)
        iter = tree->GetNextSibling (iter);
    }
}
finally
{
  state.doc->GetLogicalDocument ()->FreeXMLTreeAccessor (tree);
  OP_DELETE (scan);
}

test ("XPath_Scan::GetChild(): filter2")
{
  XMLTreeAccessor *tree;
  XMLTreeAccessor::Node *root;
  XPath_Scan *OP_MEMORY_VAR scan = 0;

  verify (state.doc->GetLogicalDocument ()->CreateXMLTreeAccessor (tree, root) == OpStatus::OK);

  XPath_XMLTreeAccessorFilter filter1, *filters[1];
  filter1.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter1.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter1.element_name = XMLExpandedName (UNI_L ("filter2"));
  filters[0] = &filter1;

  tree->SetNodeTypeFilter (XMLTreeAccessor::TYPE_ELEMENT, TRUE);
  XMLTreeAccessor::Node *origin = tree->GetFirstChild (root), *OP_MEMORY_VAR iter = tree->GetFirstChild (origin);
  tree->ResetFilters ();

  TRAPD (status, scan = XPath_Scan::MakeL (filters, 1));
  verify (status == OpStatus::OK);

  while (iter)
    {
      while (iter)
        {
          if (tree->GetNodeType (iter) == XMLTreeAccessor::TYPE_ELEMENT)
            {
              XMLCompleteName name;
              tree->GetName (name, iter);
              if (XMLExpandedName (UNI_L ("filter2")) == name)
                break;
            }

          iter = tree->GetNextSibling (iter);
        }

      verify (scan->GetChild (tree, origin) == iter);

      if (iter)
        iter = tree->GetNextSibling (iter);
    }
}
finally
{
  state.doc->GetLogicalDocument ()->FreeXMLTreeAccessor (tree);
  OP_DELETE (scan);
}

test ("XPath_Scan::GetChild(): filter3")
{
  XMLTreeAccessor *tree;
  XMLTreeAccessor::Node *root;
  XPath_Scan *OP_MEMORY_VAR scan = 0;

  verify (state.doc->GetLogicalDocument ()->CreateXMLTreeAccessor (tree, root) == OpStatus::OK);

  XPath_XMLTreeAccessorFilter filter1, *filters[1];
  filter1.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter1.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter1.element_name = XMLExpandedName (UNI_L ("filter3"));
  filters[0] = &filter1;

  tree->SetNodeTypeFilter (XMLTreeAccessor::TYPE_ELEMENT, TRUE);
  XMLTreeAccessor::Node *origin = tree->GetFirstChild (root), *OP_MEMORY_VAR iter = tree->GetFirstChild (origin);
  tree->ResetFilters ();

  TRAPD (status, scan = XPath_Scan::MakeL (filters, 1));
  verify (status == OpStatus::OK);

  while (iter)
    {
      while (iter)
        {
          if (tree->GetNodeType (iter) == XMLTreeAccessor::TYPE_ELEMENT)
            {
              XMLCompleteName name;
              tree->GetName (name, iter);
              if (XMLExpandedName (UNI_L ("filter3")) == name)
                break;
            }

          iter = tree->GetNextSibling (iter);
        }

      verify (scan->GetChild (tree, origin) == iter);

      if (iter)
        iter = tree->GetNextSibling (iter);
    }
}
finally
{
  state.doc->GetLogicalDocument ()->FreeXMLTreeAccessor (tree);
  OP_DELETE (scan);
}

test ("XPath_Scan::GetChild(): filter1 | filter2")
{
  XMLTreeAccessor *tree;
  XMLTreeAccessor::Node *root;
  XPath_Scan *OP_MEMORY_VAR scan = 0;

  verify (state.doc->GetLogicalDocument ()->CreateXMLTreeAccessor (tree, root) == OpStatus::OK);

  XPath_XMLTreeAccessorFilter filter1, filter2, *filters[2];
  filter1.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter1.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter1.element_name = XMLExpandedName (UNI_L ("filter1"));
  filter2.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter2.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter2.element_name = XMLExpandedName (UNI_L ("filter2"));
  filters[0] = &filter1;
  filters[1] = &filter2;

  tree->SetNodeTypeFilter (XMLTreeAccessor::TYPE_ELEMENT, TRUE);
  XMLTreeAccessor::Node *origin = tree->GetFirstChild (root), *OP_MEMORY_VAR iter = tree->GetFirstChild (origin);
  tree->ResetFilters ();

  TRAPD (status, scan = XPath_Scan::MakeL (filters, 2));
  verify (status == OpStatus::OK);

  while (iter)
    {
      while (iter)
        {
          if (tree->GetNodeType (iter) == XMLTreeAccessor::TYPE_ELEMENT)
            {
              XMLCompleteName name;
              tree->GetName (name, iter);
              if (XMLExpandedName (UNI_L ("filter1")) == name || XMLExpandedName (UNI_L ("filter2")) == name)
                break;
            }

          iter = tree->GetNextSibling (iter);
        }

      verify (scan->GetChild (tree, origin) == iter);

      if (iter)
        iter = tree->GetNextSibling (iter);
    }
}
finally
{
  state.doc->GetLogicalDocument ()->FreeXMLTreeAccessor (tree);
  OP_DELETE (scan);
}

test ("XPath_Scan::GetChild(): filter1 | filter3")
{
  XMLTreeAccessor *tree;
  XMLTreeAccessor::Node *root;
  XPath_Scan *OP_MEMORY_VAR scan = 0;

  verify (state.doc->GetLogicalDocument ()->CreateXMLTreeAccessor (tree, root) == OpStatus::OK);

  XPath_XMLTreeAccessorFilter filter1, filter2, *filters[2];
  filter1.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter1.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter1.element_name = XMLExpandedName (UNI_L ("filter1"));
  filter2.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter2.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter2.element_name = XMLExpandedName (UNI_L ("filter3"));
  filters[0] = &filter1;
  filters[1] = &filter2;

  tree->SetNodeTypeFilter (XMLTreeAccessor::TYPE_ELEMENT, TRUE);
  XMLTreeAccessor::Node *origin = tree->GetFirstChild (root), *OP_MEMORY_VAR iter = tree->GetFirstChild (origin);
  tree->ResetFilters ();

  TRAPD (status, scan = XPath_Scan::MakeL (filters, 2));
  verify (status == OpStatus::OK);

  while (iter)
    {
      while (iter)
        {
          if (tree->GetNodeType (iter) == XMLTreeAccessor::TYPE_ELEMENT)
            {
              XMLCompleteName name;
              tree->GetName (name, iter);
              if (XMLExpandedName (UNI_L ("filter1")) == name || XMLExpandedName (UNI_L ("filter3")) == name)
                break;
            }

          iter = tree->GetNextSibling (iter);
        }

      verify (scan->GetChild (tree, origin) == iter);

      if (iter)
        iter = tree->GetNextSibling (iter);
    }
}
finally
{
  state.doc->GetLogicalDocument ()->FreeXMLTreeAccessor (tree);
  OP_DELETE (scan);
}

test ("XPath_Scan::GetChild(): filter2 | filter3")
{
  XMLTreeAccessor *tree;
  XMLTreeAccessor::Node *root;
  XPath_Scan *OP_MEMORY_VAR scan = 0;

  verify (state.doc->GetLogicalDocument ()->CreateXMLTreeAccessor (tree, root) == OpStatus::OK);

  XPath_XMLTreeAccessorFilter filter1, filter2, *filters[2];
  filter1.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter1.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter1.element_name = XMLExpandedName (UNI_L ("filter2"));
  filter2.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter2.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter2.element_name = XMLExpandedName (UNI_L ("filter3"));
  filters[0] = &filter1;
  filters[1] = &filter2;

  tree->SetNodeTypeFilter (XMLTreeAccessor::TYPE_ELEMENT, TRUE);
  XMLTreeAccessor::Node *origin = tree->GetFirstChild (root), *OP_MEMORY_VAR iter = tree->GetFirstChild (origin);
  tree->ResetFilters ();

  TRAPD (status, scan = XPath_Scan::MakeL (filters, 2));
  verify (status == OpStatus::OK);

  while (iter)
    {
      while (iter)
        {
          if (tree->GetNodeType (iter) == XMLTreeAccessor::TYPE_ELEMENT)
            {
              XMLCompleteName name;
              tree->GetName (name, iter);
              if (XMLExpandedName (UNI_L ("filter2")) == name || XMLExpandedName (UNI_L ("filter3")) == name)
                break;
            }

          iter = tree->GetNextSibling (iter);
        }

      verify (scan->GetChild (tree, origin) == iter);

      if (iter)
        iter = tree->GetNextSibling (iter);
    }
}
finally
{
  state.doc->GetLogicalDocument ()->FreeXMLTreeAccessor (tree);
  OP_DELETE (scan);
}

test ("XPath_Scan::GetChild(): filter1 | filter2 | filter3")
{
  XMLTreeAccessor *tree;
  XMLTreeAccessor::Node *root;
  XPath_Scan *OP_MEMORY_VAR scan = 0;

  verify (state.doc->GetLogicalDocument ()->CreateXMLTreeAccessor (tree, root) == OpStatus::OK);

  XPath_XMLTreeAccessorFilter filter1, filter2, filter3, *filters[3];
  filter1.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter1.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter1.element_name = XMLExpandedName (UNI_L ("filter1"));
  filter2.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter2.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter2.element_name = XMLExpandedName (UNI_L ("filter2"));
  filter3.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter3.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter3.element_name = XMLExpandedName (UNI_L ("filter3"));
  filters[0] = &filter1;
  filters[1] = &filter2;
  filters[2] = &filter3;

  tree->SetNodeTypeFilter (XMLTreeAccessor::TYPE_ELEMENT, TRUE);
  XMLTreeAccessor::Node *origin = tree->GetFirstChild (root), *OP_MEMORY_VAR iter = tree->GetFirstChild (origin);
  tree->ResetFilters ();

  TRAPD (status, scan = XPath_Scan::MakeL (filters, 3));
  verify (status == OpStatus::OK);

  while (iter)
    {
      while (iter)
        {
          if (tree->GetNodeType (iter) == XMLTreeAccessor::TYPE_ELEMENT)
            {
              XMLCompleteName name;
              tree->GetName (name, iter);
              if (XMLExpandedName (UNI_L ("filter1")) == name || XMLExpandedName (UNI_L ("filter2")) == name || XMLExpandedName (UNI_L ("filter3")) == name)
                break;
            }

          iter = tree->GetNextSibling (iter);
        }

      verify (scan->GetChild (tree, origin) == iter);

      if (iter)
        iter = tree->GetNextSibling (iter);
    }
}
finally
{
  state.doc->GetLogicalDocument ()->FreeXMLTreeAccessor (tree);
  OP_DELETE (scan);
}

test ("XPath_Scan::GetPrecedingSibling(): filter1")
{
  XMLTreeAccessor *tree;
  XMLTreeAccessor::Node *root;
  XPath_Scan *OP_MEMORY_VAR scan = 0;

  verify (state.doc->GetLogicalDocument ()->CreateXMLTreeAccessor (tree, root) == OpStatus::OK);

  XPath_XMLTreeAccessorFilter filter1, *filters[1];
  filter1.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter1.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter1.element_name = XMLExpandedName (UNI_L ("filter1"));
  filters[0] = &filter1;

  tree->SetNodeTypeFilter (XMLTreeAccessor::TYPE_ELEMENT, TRUE);
  XMLTreeAccessor::Node *origin = tree->GetLastChild (root), *OP_MEMORY_VAR iter = tree->GetPreviousSibling (origin);
  tree->ResetFilters ();

  TRAPD (status, scan = XPath_Scan::MakeL (filters, 1));
  verify (status == OpStatus::OK);

  while (iter)
    {
      while (iter)
        {
          if (tree->GetNodeType (iter) == XMLTreeAccessor::TYPE_ELEMENT)
            {
              XMLCompleteName name;
              tree->GetName (name, iter);
              if (XMLExpandedName (UNI_L ("filter1")) == name)
                break;
            }

          iter = tree->GetPreviousSibling (iter);
        }

      verify (scan->GetPrecedingSibling (tree, origin) == iter);

      if (iter)
        iter = tree->GetPreviousSibling (iter);
    }
}
finally
{
  state.doc->GetLogicalDocument ()->FreeXMLTreeAccessor (tree);
  OP_DELETE (scan);
}

test ("XPath_Scan::GetPrecedingSibling(): filter2")
{
  XMLTreeAccessor *tree;
  XMLTreeAccessor::Node *root;
  XPath_Scan *OP_MEMORY_VAR scan = 0;

  verify (state.doc->GetLogicalDocument ()->CreateXMLTreeAccessor (tree, root) == OpStatus::OK);

  XPath_XMLTreeAccessorFilter filter1, *filters[1];
  filter1.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter1.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter1.element_name = XMLExpandedName (UNI_L ("filter2"));
  filters[0] = &filter1;

  tree->SetNodeTypeFilter (XMLTreeAccessor::TYPE_ELEMENT, TRUE);
  XMLTreeAccessor::Node *origin = tree->GetLastChild (root), *OP_MEMORY_VAR iter = tree->GetPreviousSibling (origin);
  tree->ResetFilters ();

  TRAPD (status, scan = XPath_Scan::MakeL (filters, 1));
  verify (status == OpStatus::OK);

  while (iter)
    {
      while (iter)
        {
          if (tree->GetNodeType (iter) == XMLTreeAccessor::TYPE_ELEMENT)
            {
              XMLCompleteName name;
              tree->GetName (name, iter);
              if (XMLExpandedName (UNI_L ("filter2")) == name)
                break;
            }

          iter = tree->GetPreviousSibling (iter);
        }

      verify (scan->GetPrecedingSibling (tree, origin) == iter);

      if (iter)
        iter = tree->GetPreviousSibling (iter);
    }
}
finally
{
  state.doc->GetLogicalDocument ()->FreeXMLTreeAccessor (tree);
  OP_DELETE (scan);
}

test ("XPath_Scan::GetPrecedingSibling(): filter3")
{
  XMLTreeAccessor *tree;
  XMLTreeAccessor::Node *root;
  XPath_Scan *OP_MEMORY_VAR scan = 0;

  verify (state.doc->GetLogicalDocument ()->CreateXMLTreeAccessor (tree, root) == OpStatus::OK);

  XPath_XMLTreeAccessorFilter filter1, *filters[1];
  filter1.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter1.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter1.element_name = XMLExpandedName (UNI_L ("filter3"));
  filters[0] = &filter1;

  tree->SetNodeTypeFilter (XMLTreeAccessor::TYPE_ELEMENT, TRUE);
  XMLTreeAccessor::Node *origin = tree->GetLastChild (root), *OP_MEMORY_VAR iter = tree->GetPreviousSibling (origin);
  tree->ResetFilters ();

  TRAPD (status, scan = XPath_Scan::MakeL (filters, 1));
  verify (status == OpStatus::OK);

  while (iter)
    {
      while (iter)
        {
          if (tree->GetNodeType (iter) == XMLTreeAccessor::TYPE_ELEMENT)
            {
              XMLCompleteName name;
              tree->GetName (name, iter);
              if (XMLExpandedName (UNI_L ("filter3")) == name)
                break;
            }

          iter = tree->GetPreviousSibling (iter);
        }

      verify (scan->GetPrecedingSibling (tree, origin) == iter);

      if (iter)
        iter = tree->GetPreviousSibling (iter);
    }
}
finally
{
  state.doc->GetLogicalDocument ()->FreeXMLTreeAccessor (tree);
  OP_DELETE (scan);
}

test ("XPath_Scan::GetPrecedingSibling(): filter1 | filter2")
{
  XMLTreeAccessor *tree;
  XMLTreeAccessor::Node *root;
  XPath_Scan *OP_MEMORY_VAR scan = 0;

  verify (state.doc->GetLogicalDocument ()->CreateXMLTreeAccessor (tree, root) == OpStatus::OK);

  XPath_XMLTreeAccessorFilter filter1, filter2, *filters[2];
  filter1.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter1.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter1.element_name = XMLExpandedName (UNI_L ("filter1"));
  filter2.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter2.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter2.element_name = XMLExpandedName (UNI_L ("filter2"));
  filters[0] = &filter1;
  filters[1] = &filter2;

  tree->SetNodeTypeFilter (XMLTreeAccessor::TYPE_ELEMENT, TRUE);
  XMLTreeAccessor::Node *origin = tree->GetLastChild (root), *OP_MEMORY_VAR iter = tree->GetPreviousSibling (origin);
  tree->ResetFilters ();

  TRAPD (status, scan = XPath_Scan::MakeL (filters, 2));
  verify (status == OpStatus::OK);

  while (iter)
    {
      while (iter)
        {
          if (tree->GetNodeType (iter) == XMLTreeAccessor::TYPE_ELEMENT)
            {
              XMLCompleteName name;
              tree->GetName (name, iter);
              if (XMLExpandedName (UNI_L ("filter1")) == name || XMLExpandedName (UNI_L ("filter2")) == name)
                break;
            }

          iter = tree->GetPreviousSibling (iter);
        }

      verify (scan->GetPrecedingSibling (tree, origin) == iter);

      if (iter)
        iter = tree->GetPreviousSibling (iter);
    }
}
finally
{
  state.doc->GetLogicalDocument ()->FreeXMLTreeAccessor (tree);
  OP_DELETE (scan);
}

test ("XPath_Scan::GetPrecedingSibling(): filter1 | filter3")
{
  XMLTreeAccessor *tree;
  XMLTreeAccessor::Node *root;
  XPath_Scan *OP_MEMORY_VAR scan = 0;

  verify (state.doc->GetLogicalDocument ()->CreateXMLTreeAccessor (tree, root) == OpStatus::OK);

  XPath_XMLTreeAccessorFilter filter1, filter2, *filters[2];
  filter1.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter1.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter1.element_name = XMLExpandedName (UNI_L ("filter1"));
  filter2.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter2.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter2.element_name = XMLExpandedName (UNI_L ("filter3"));
  filters[0] = &filter1;
  filters[1] = &filter2;

  tree->SetNodeTypeFilter (XMLTreeAccessor::TYPE_ELEMENT, TRUE);
  XMLTreeAccessor::Node *origin = tree->GetLastChild (root), *OP_MEMORY_VAR iter = tree->GetPreviousSibling (origin);
  tree->ResetFilters ();

  TRAPD (status, scan = XPath_Scan::MakeL (filters, 2));
  verify (status == OpStatus::OK);

  while (iter)
    {
      while (iter)
        {
          if (tree->GetNodeType (iter) == XMLTreeAccessor::TYPE_ELEMENT)
            {
              XMLCompleteName name;
              tree->GetName (name, iter);
              if (XMLExpandedName (UNI_L ("filter1")) == name || XMLExpandedName (UNI_L ("filter3")) == name)
                break;
            }

          iter = tree->GetPreviousSibling (iter);
        }

      verify (scan->GetPrecedingSibling (tree, origin) == iter);

      if (iter)
        iter = tree->GetPreviousSibling (iter);
    }
}
finally
{
  state.doc->GetLogicalDocument ()->FreeXMLTreeAccessor (tree);
  OP_DELETE (scan);
}

test ("XPath_Scan::GetPrecedingSibling(): filter2 | filter3")
{
  XMLTreeAccessor *tree = 0;
  XMLTreeAccessor::Node *root = 0;
  XPath_Scan *OP_MEMORY_VAR scan = 0;

  verify (state.doc->GetLogicalDocument ()->CreateXMLTreeAccessor (tree, root) == OpStatus::OK);

  XPath_XMLTreeAccessorFilter filter1, filter2, *filters[2];
  filter1.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter1.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter1.element_name = XMLExpandedName (UNI_L ("filter2"));
  filter2.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter2.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter2.element_name = XMLExpandedName (UNI_L ("filter3"));
  filters[0] = &filter1;
  filters[1] = &filter2;

  tree->SetNodeTypeFilter (XMLTreeAccessor::TYPE_ELEMENT, TRUE);
  XMLTreeAccessor::Node *origin = tree->GetLastChild (root), *OP_MEMORY_VAR iter = tree->GetPreviousSibling (origin);
  tree->ResetFilters ();

  TRAPD (status, scan = XPath_Scan::MakeL (filters, 2));
  verify (status == OpStatus::OK);

  while (iter)
    {
      while (iter)
        {
          if (tree->GetNodeType (iter) == XMLTreeAccessor::TYPE_ELEMENT)
            {
              XMLCompleteName name;
              tree->GetName (name, iter);
              if (XMLExpandedName (UNI_L ("filter2")) == name || XMLExpandedName (UNI_L ("filter3")) == name)
                break;
            }

          iter = tree->GetPreviousSibling (iter);
        }

      verify (scan->GetPrecedingSibling (tree, origin) == iter);

      if (iter)
        iter = tree->GetPreviousSibling (iter);
    }
}
finally
{
  state.doc->GetLogicalDocument ()->FreeXMLTreeAccessor (tree);
  OP_DELETE (scan);
}

test ("XPath_Scan::GetPrecedingSibling(): filter1 | filter2 | filter3")
{
  XMLTreeAccessor *tree;
  XMLTreeAccessor::Node *root;
  XPath_Scan *OP_MEMORY_VAR scan = 0;

  verify (state.doc->GetLogicalDocument ()->CreateXMLTreeAccessor (tree, root) == OpStatus::OK);

  XPath_XMLTreeAccessorFilter filter1, filter2, filter3, *filters[3];
  filter1.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter1.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter1.element_name = XMLExpandedName (UNI_L ("filter1"));
  filter2.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter2.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter2.element_name = XMLExpandedName (UNI_L ("filter2"));
  filter3.flags = XPath_XMLTreeAccessorFilter::FLAG_HAS_NODETYPE | XPath_XMLTreeAccessorFilter::FLAG_HAS_ELEMENT_NAME;
  filter3.nodetype = XMLTreeAccessor::TYPE_ELEMENT;
  filter3.element_name = XMLExpandedName (UNI_L ("filter3"));
  filters[0] = &filter1;
  filters[1] = &filter2;
  filters[2] = &filter3;

  tree->SetNodeTypeFilter (XMLTreeAccessor::TYPE_ELEMENT, TRUE);
  XMLTreeAccessor::Node *origin = tree->GetLastChild (root), *OP_MEMORY_VAR iter = tree->GetPreviousSibling (origin);
  tree->ResetFilters ();

  TRAPD (status, scan = XPath_Scan::MakeL (filters, 3));
  verify (status == OpStatus::OK);

  while (iter)
    {
      while (iter)
        {
          if (tree->GetNodeType (iter) == XMLTreeAccessor::TYPE_ELEMENT)
            {
              XMLCompleteName name;
              tree->GetName (name, iter);
              if (XMLExpandedName (UNI_L ("filter1")) == name || XMLExpandedName (UNI_L ("filter2")) == name || XMLExpandedName (UNI_L ("filter3")) == name)
                break;
            }

          iter = tree->GetPreviousSibling (iter);
        }

      verify (scan->GetPrecedingSibling (tree, origin) == iter);

      if (iter)
        iter = tree->GetPreviousSibling (iter);
    }
}
finally
{
  state.doc->GetLogicalDocument ()->FreeXMLTreeAccessor (tree);
  OP_DELETE (scan);
}
