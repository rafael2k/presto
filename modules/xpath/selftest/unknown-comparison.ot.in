group "XPath.unknown-comparison";

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <root>PASS</root>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root/>
}

test("proof of concept")
{
  verify(document.documentElement.textContent == "PASS");
}

// comparing nodesets to strings or other nodesets

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:choose>
        <xsl:when test="//data = 'red' and //data = 'green' and //data = 'blue'">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
  </root>
}

test("nodeset vs. string")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:choose>
        <xsl:when test="//data != 'magentha' and //data != 'cyan' and //data != 'orange'">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
  </root>
}

test("nodeset vs. string (inverted)")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:choose>
        <xsl:when test="not(//data = empty-nodeset)">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
  </root>
}

test("nodeset vs. empty nodeset")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:choose>
        <xsl:when test="not(//data != empty-nodeset)">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
  </root>
}

test("nodeset vs. empty nodeset (inverted)")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:choose>
        <xsl:when test="//data = //reference">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
    <reference>green</reference>
  </root>
}

test("nodeset vs. non-empty nodeset")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:choose>
        <xsl:when test="//data != //reference">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
    <reference>green</reference>
  </root>
}

test("nodeset vs. non-empty nodeset (inverted)")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:choose>
        <xsl:when test="//data != //reference">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
    <reference>red</reference>
    <reference>green</reference>
    <reference>blue</reference>
  </root>
}

test("nodeset vs. non-empty nodeset (inverted)")
{
  verify(document.documentElement.textContent == "PASS");
}

// comparing nodeset variables to strings or nodesets

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:variable name="x" select="//data"/>
      <xsl:choose>
        <xsl:when test="$x = 'red' and $x = 'green' and $x = 'blue'">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
  </root>
}

test("nodeset variable vs. string")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:variable name="x" select="//data"/>
      <xsl:choose>
        <xsl:when test="$x != 'magentha' and $x != 'cyan' and $x != 'orange'">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
  </root>
}

test("nodeset variable vs. string (inverted)")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:variable name="x" select="//data"/>
      <xsl:choose>
        <xsl:when test="not($x = empty-nodeset)">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
  </root>
}

test("nodeset variable vs. empty nodeset")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:variable name="x" select="//data"/>
      <xsl:choose>
        <xsl:when test="not($x != empty-nodeset)">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
  </root>
}

test("nodeset variable vs. empty nodeset (inverted)")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:variable name="x" select="//data"/>
      <xsl:choose>
        <xsl:when test="$x = //reference">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
    <reference>green</reference>
  </root>
}

test("nodeset variable vs. non-empty nodeset")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:variable name="x" select="//data"/>
      <xsl:choose>
        <xsl:when test="$x != //reference">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
    <reference>green</reference>
  </root>
}

test("nodeset variable vs. non-empty nodeset (inverted)")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:variable name="x" select="//data"/>
      <xsl:choose>
        <xsl:when test="$x != //reference">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
    <reference>red</reference>
    <reference>green</reference>
    <reference>blue</reference>
  </root>
}

test("nodeset variable vs. non-empty nodeset (inverted)")
{
  verify(document.documentElement.textContent == "PASS");
}

// comparing nodeset variables to variables

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:variable name="x" select="//data"/>
      <xsl:variable name="red" select="'red'"/>
      <xsl:variable name="green" select="'green'"/>
      <xsl:variable name="blue" select="'blue'"/>
      <xsl:choose>
        <xsl:when test="$x = $red and $x = $green and $x = $blue">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
  </root>
}

test("nodeset variable vs. string variable")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:variable name="x" select="//data"/>
      <xsl:variable name="magentha" select="'magentha'"/>
      <xsl:variable name="cyan" select="'cyan'"/>
      <xsl:variable name="orange" select="'orange'"/>
      <xsl:choose>
        <xsl:when test="$x != 'magentha' and $x != 'cyan' and $x != 'orange'">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
  </root>
}

test("nodeset variable vs. string variable (inverted)")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:variable name="x" select="//data"/>
      <xsl:variable name="empty-nodeset" select="empty-nodeset"/>
      <xsl:choose>
        <xsl:when test="not($x = $empty-nodeset)">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
  </root>
}

test("nodeset variable vs. empty nodeset variable")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:variable name="x" select="//data"/>
      <xsl:variable name="empty-nodeset" select="empty-nodeset"/>
      <xsl:choose>
        <xsl:when test="not($x != $empty-nodeset)">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
  </root>
}

test("nodeset variable vs. empty nodeset variable (inverted)")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:variable name="x" select="//data"/>
      <xsl:variable name="reference" select="//reference"/>
      <xsl:choose>
        <xsl:when test="$x = $reference">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
    <reference>green</reference>
  </root>
}

test("nodeset variable vs. non-empty nodeset variable")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:variable name="x" select="//data"/>
      <xsl:variable name="reference" select="//reference"/>
      <xsl:choose>
        <xsl:when test="$x != $reference">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
    <reference>green</reference>
  </root>
}

test("nodeset variable vs. non-empty nodeset variable (inverted)")
{
  verify(document.documentElement.textContent == "PASS");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:variable name="x" select="//data"/>
      <xsl:variable name="reference" select="//reference"/>
      <xsl:choose>
        <xsl:when test="$x != $reference">
          <root>PASS</root>
        </xsl:when>
        <xsl:otherwise>
          <root>FAIL</root>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <data>red</data>
    <data>green</data>
    <data>blue</data>
    <reference>red</reference>
    <reference>green</reference>
    <reference>blue</reference>
  </root>
}

test("nodeset variable vs. non-empty nodeset variable (inverted)")
{
  verify(document.documentElement.textContent == "PASS");
}
