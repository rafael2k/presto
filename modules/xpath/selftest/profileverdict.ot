/* -*- mode: c++ -*- */

group "XPath.ProfileVerdict";

require init;
require XPATH_PATTERN_SUPPORT;
require XPATH_NODE_PROFILE_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

test_equal ("name vs name", XPath_TestProfileVerdict ("name", "name", XPathPattern::PATTERN_WILL_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs *", XPath_TestProfileVerdict ("name", "*", XPathPattern::PATTERN_WILL_MATCH_PROFILED_NODES), "ok");
test_equal ("* vs name", XPath_TestProfileVerdict ("*", "name", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("* vs *", XPath_TestProfileVerdict ("*", "*", XPathPattern::PATTERN_WILL_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs other", XPath_TestProfileVerdict ("name", "other", XPathPattern::PATTERN_DOES_NOT_MATCH_PROFILED_NODES), "ok");

test_equal ("prefix1:name vs name", XPath_TestProfileVerdict ("prefix1:name", "name", XPathPattern::PATTERN_DOES_NOT_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs prefix1:name", XPath_TestProfileVerdict ("name", "prefix1:name", XPathPattern::PATTERN_DOES_NOT_MATCH_PROFILED_NODES), "ok");
test_equal ("prefix1:* vs name", XPath_TestProfileVerdict ("prefix1:*", "name", XPathPattern::PATTERN_DOES_NOT_MATCH_PROFILED_NODES), "ok");

test_equal ("prefix1:* vs prefix1:name", XPath_TestProfileVerdict ("prefix1:*", "prefix1:name", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("prefix1:name vs prefix1:*", XPath_TestProfileVerdict ("prefix1:name", "prefix1:*", XPathPattern::PATTERN_WILL_MATCH_PROFILED_NODES), "ok");
test_equal ("prefix1:* vs prefix1:*", XPath_TestProfileVerdict ("prefix1:*", "prefix1:*", XPathPattern::PATTERN_WILL_MATCH_PROFILED_NODES), "ok");

test_equal ("prefix1:* vs *", XPath_TestProfileVerdict ("prefix1:*", "*", XPathPattern::PATTERN_WILL_MATCH_PROFILED_NODES), "ok");
test_equal ("* vs prefix1:*", XPath_TestProfileVerdict ("*", "prefix1:*", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");

test_equal ("parent/name vs name", XPath_TestProfileVerdict ("parent/name", "name", XPathPattern::PATTERN_WILL_MATCH_PROFILED_NODES), "ok");
test_equal ("ancestor//name vs name", XPath_TestProfileVerdict ("ancestor//name", "name", XPathPattern::PATTERN_WILL_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs parent/name", XPath_TestProfileVerdict ("name", "parent/name", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs ancestor//name", XPath_TestProfileVerdict ("name", "ancestor//name", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");

/* These could of course say WILL_MATCH, but we're not that clever yet. */
test_equal ("parent/name vs parent/name", XPath_TestProfileVerdict ("parent/name", "parent/name", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("ancestor//name vs ancestor//name", XPath_TestProfileVerdict ("name", "ancestor//name", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");

test_equal ("name vs /name", XPath_TestProfileVerdict ("name", "/name", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("/ vs /name", XPath_TestProfileVerdict ("/", "/name", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok"); // Expression not supported.
test_equal ("/ vs /", XPath_TestProfileVerdict ("/", "/", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok"); // Expression not supported.
test_equal ("name vs /", XPath_TestProfileVerdict ("name", "/", XPathPattern::PATTERN_DOES_NOT_MATCH_PROFILED_NODES), "ok");
test_equal ("/name vs /", XPath_TestProfileVerdict ("/name", "/", XPathPattern::PATTERN_DOES_NOT_MATCH_PROFILED_NODES), "ok");


/* Same as above, but with a "[@name]" predicate added to the patterns. */

test_equal ("name vs name[@name]", XPath_TestProfileVerdict ("name", "name[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs *[@name]", XPath_TestProfileVerdict ("name", "*[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("* vs name[@name]", XPath_TestProfileVerdict ("*", "name[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("* vs *[@name]", XPath_TestProfileVerdict ("*", "*[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs other[@name]", XPath_TestProfileVerdict ("name", "other[@name]", XPathPattern::PATTERN_DOES_NOT_MATCH_PROFILED_NODES), "ok");

test_equal ("prefix1:name vs name[@name]", XPath_TestProfileVerdict ("prefix1:name", "name[@name]", XPathPattern::PATTERN_DOES_NOT_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs prefix1:name[@name]", XPath_TestProfileVerdict ("name", "prefix1:name[@name]", XPathPattern::PATTERN_DOES_NOT_MATCH_PROFILED_NODES), "ok");
test_equal ("prefix1:* vs name[@name]", XPath_TestProfileVerdict ("prefix1:*", "name[@name]", XPathPattern::PATTERN_DOES_NOT_MATCH_PROFILED_NODES), "ok");

test_equal ("prefix1:* vs prefix1:name[@name]", XPath_TestProfileVerdict ("prefix1:*", "prefix1:name[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("prefix1:name vs prefix1:*[@name]", XPath_TestProfileVerdict ("prefix1:name", "prefix1:*[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("prefix1:* vs prefix1:*[@name]", XPath_TestProfileVerdict ("prefix1:*", "prefix1:*[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");

test_equal ("prefix1:* vs *[@name]", XPath_TestProfileVerdict ("prefix1:*", "*[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("* vs prefix1:*[@name]", XPath_TestProfileVerdict ("*", "prefix1:*[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");

test_equal ("parent/name vs name[@name]", XPath_TestProfileVerdict ("parent/name", "name[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("ancestor//name vs name[@name]", XPath_TestProfileVerdict ("ancestor//name", "name[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs parent/name[@name]", XPath_TestProfileVerdict ("name", "parent/name[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs ancestor//name[@name]", XPath_TestProfileVerdict ("name", "ancestor//name[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");

test_equal ("parent/name vs parent/name[@name]", XPath_TestProfileVerdict ("parent/name", "parent/name[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("ancestor//name vs ancestor//name[@name]", XPath_TestProfileVerdict ("name", "ancestor//name[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");

test_equal ("name vs /name[@name]", XPath_TestProfileVerdict ("name", "/name[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("/ vs /name[@name]", XPath_TestProfileVerdict ("/", "/name[@name]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok"); // Expression not supported.


/* Same as above, but with a "[17]" predicate added to the patterns (which makes them "complex"). */

test_equal ("name vs name[17]", XPath_TestProfileVerdict ("name", "name[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs *[17]", XPath_TestProfileVerdict ("name", "*[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("* vs name[17]", XPath_TestProfileVerdict ("*", "name[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("* vs *[17]", XPath_TestProfileVerdict ("*", "*[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs other[17]", XPath_TestProfileVerdict ("name", "other[17]", XPathPattern::PATTERN_DOES_NOT_MATCH_PROFILED_NODES), "ok");

test_equal ("prefix1:name vs name[17]", XPath_TestProfileVerdict ("prefix1:name", "name[17]", XPathPattern::PATTERN_DOES_NOT_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs prefix1:name[17]", XPath_TestProfileVerdict ("name", "prefix1:name[17]", XPathPattern::PATTERN_DOES_NOT_MATCH_PROFILED_NODES), "ok");
test_equal ("prefix1:* vs name[17]", XPath_TestProfileVerdict ("prefix1:*", "name[17]", XPathPattern::PATTERN_DOES_NOT_MATCH_PROFILED_NODES), "ok");

test_equal ("prefix1:* vs prefix1:name[17]", XPath_TestProfileVerdict ("prefix1:*", "prefix1:name[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("prefix1:name vs prefix1:*[17]", XPath_TestProfileVerdict ("prefix1:name", "prefix1:*[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("prefix1:* vs prefix1:*[17]", XPath_TestProfileVerdict ("prefix1:*", "prefix1:*[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");

test_equal ("prefix1:* vs *[17]", XPath_TestProfileVerdict ("prefix1:*", "*[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("* vs prefix1:*[17]", XPath_TestProfileVerdict ("*", "prefix1:*[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");

test_equal ("parent/name vs name[17]", XPath_TestProfileVerdict ("parent/name", "name[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("ancestor//name vs name[17]", XPath_TestProfileVerdict ("ancestor//name", "name[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs parent/name[17]", XPath_TestProfileVerdict ("name", "parent/name[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs ancestor//name[17]", XPath_TestProfileVerdict ("name", "ancestor//name[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");

test_equal ("parent/name vs parent/name[17]", XPath_TestProfileVerdict ("parent/name", "parent/name[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("ancestor//name vs ancestor//name[17]", XPath_TestProfileVerdict ("name", "ancestor//name[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");

test_equal ("name vs /name[17]", XPath_TestProfileVerdict ("name", "/name[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("/ vs /name[17]", XPath_TestProfileVerdict ("/", "/name[17]", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok"); // Expression not supported.


/* Misc. */

test_equal ("name vs id('x')/name", XPath_TestProfileVerdict ("name", "id('x')/name", XPathPattern::PATTERN_CAN_MATCH_PROFILED_NODES), "ok");
test_equal ("name vs id('x')/other", XPath_TestProfileVerdict ("name", "id('x')/other", XPathPattern::PATTERN_DOES_NOT_MATCH_PROFILED_NODES), "ok");
