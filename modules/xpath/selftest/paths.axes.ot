group "XPath.paths.axes.ancestor";

require init;
require XPATH_SUPPORT;
require undefined USE_HTML_PARSER_FOR_XML;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";
include "modules/util/tempbuf.h";

global
{
  int XPath_ancestor_expected1[] = { -1 };
  int XPath_ancestor_expected2[] = { 0, -1 };
  int XPath_ancestor_expected3[] = { 1, 0, -1 };
  int XPath_ancestor_expected4[] = { 2, 1, 0, -1 };
  int XPath_ancestor_expected5[] = { 3, 2, 1, 0, -1 };
  int XPath_ancestor_expected6[] = { 5, 2, 1, 0, -1 };
  int XPath_ancestor_expected7[] = { 7, 2, 1, 0, -1 };
}

xml
{
  "<?xml version='1.0'?>"
  "<root>"
    "<container attr1='attr1' xmlns:ns1='data:ns1'>"
      "<text>[text]</text>"
      "<text><![CDATA[cdatasection]]></text>"
      "<text><!--comment--></text>"
    "</container>"
  "</root>"
}

test_equal ("ancestor::node() #1",
            XPath_TestNodeSet (state.doc, "ancestor::node()", 0, XPath_ancestor_expected1),
            "ok");
test_equal ("ancestor::node() #2",
            XPath_TestNodeSet (state.doc, "ancestor::node()", 1, XPath_ancestor_expected2),
            "ok");
test_equal ("ancestor::node() #3",
            XPath_TestNodeSet (state.doc, "ancestor::node()", 2, XPath_ancestor_expected3),
            "ok");
test_equal ("ancestor::node() #4",
            XPath_TestNodeSet (state.doc, "ancestor::node()", 3, XPath_ancestor_expected4),
            "ok");
test_equal ("ancestor::node() #5",
            XPath_TestNodeSet (state.doc, "ancestor::node()", 4, XPath_ancestor_expected5),
            "ok");
test_equal ("ancestor::node() #6",
            XPath_TestNodeSet (state.doc, "ancestor::node()", 5, XPath_ancestor_expected4),
            "ok");
test_equal ("ancestor::node() #7",
            XPath_TestNodeSet (state.doc, "ancestor::node()", 6, XPath_ancestor_expected6),
            "ok");
test_equal ("ancestor::node() #8",
            XPath_TestNodeSet (state.doc, "ancestor::node()", 7, XPath_ancestor_expected4),
            "ok");
test_equal ("ancestor::node() #9",
            XPath_TestNodeSet (state.doc, "ancestor::node()", 8, XPath_ancestor_expected7),
            "ok");
test_equal ("ancestor::node() #10",
            XPath_TestNodeSetAttribute (state.doc, "ancestor::node()", 2, "attr", 0, XPath_ancestor_expected4),
            "ok");
test_equal ("ancestor::node() #10",
            XPath_TestNodeSetNamespace (state.doc, "ancestor::node()", 2, "ns1", "data:ns1", XPath_ancestor_expected4),
            "ok");

group "XPath.paths.axes.ancestor-or-self";
require init;
require XPATH_SUPPORT;
require undefined USE_HTML_PARSER_FOR_XML;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";
include "modules/util/tempbuf.h";

global
{
  int XPath_ancestororself_expected1[] = { 0, -1 };
  int XPath_ancestororself_expected2[] = { 1, 0, -1 };
  int XPath_ancestororself_expected3[] = { 2, 1, 0, -1 };
  int XPath_ancestororself_expected4[] = { 3, 2, 1, 0, -1 };
  int XPath_ancestororself_expected5[] = { 4, 3, 2, 1, 0, -1 };
  int XPath_ancestororself_expected6[] = { 5, 2, 1, 0, -1 };
  int XPath_ancestororself_expected7[] = { 6, 5, 2, 1, 0, -1 };
  int XPath_ancestororself_expected8[] = { 7, 2, 1, 0, -1 };
  int XPath_ancestororself_expected9[] = { 8, 7, 2, 1, 0, -1 };
  int XPath_ancestororself_expected10[] = { -2, 2, 1, 0, -1 };
}

xml
{
  "<?xml version='1.0'?>"
  "<root>"
    "<container attr1='attr1' xmlns:ns1='data:ns1'>"
      "<text>[text]</text>"
      "<text><![CDATA[cdatasection]]></text>"
      "<text><!--comment--></text>"
    "</container>"
  "</root>"
}

test_equal ("ancestor-or-self::node() #1",
            XPath_TestNodeSet (state.doc, "ancestor-or-self::node()", 0, XPath_ancestororself_expected1),
            "ok");
test_equal ("ancestor-or-self::node() #2",
            XPath_TestNodeSet (state.doc, "ancestor-or-self::node()", 1, XPath_ancestororself_expected2),
            "ok");
test_equal ("ancestor-or-self::node() #3",
            XPath_TestNodeSet (state.doc, "ancestor-or-self::node()", 2, XPath_ancestororself_expected3),
            "ok");
test_equal ("ancestor-or-self::node() #4",
            XPath_TestNodeSet (state.doc, "ancestor-or-self::node()", 3, XPath_ancestororself_expected4),
            "ok");
test_equal ("ancestor-or-self::node() #5",
            XPath_TestNodeSet (state.doc, "ancestor-or-self::node()", 4, XPath_ancestororself_expected5),
            "ok");
test_equal ("ancestor-or-self::node() #6",
            XPath_TestNodeSet (state.doc, "ancestor-or-self::node()", 5, XPath_ancestororself_expected6),
            "ok");
test_equal ("ancestor-or-self::node() #7",
            XPath_TestNodeSet (state.doc, "ancestor-or-self::node()", 6, XPath_ancestororself_expected7),
            "ok");
test_equal ("ancestor-or-self::node() #8",
            XPath_TestNodeSet (state.doc, "ancestor-or-self::node()", 7, XPath_ancestororself_expected8),
            "ok");
test_equal ("ancestor-or-self::node() #9",
            XPath_TestNodeSet (state.doc, "ancestor-or-self::node()", 8, XPath_ancestororself_expected9),
            "ok");
test_equal ("ancestor-or-self::node() #10",
            XPath_TestNodeSetAttribute (state.doc, "ancestor-or-self::node()", 2, "attr", 0, XPath_ancestororself_expected10),
            "ok");
test_equal ("ancestor-or-self::node() #11",
            XPath_TestNodeSetNamespace (state.doc, "ancestor-or-self::node()", 2, "ns1", "data:ns1", XPath_ancestororself_expected10),
            "ok");

group "XPath.paths.axes.child";
require init;
require XPATH_SUPPORT;
require undefined USE_HTML_PARSER_FOR_XML;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";
include "modules/util/tempbuf.h";

global
{
  int XPath_child_expected1[] = { 1, -1 };
  int XPath_child_expected2[] = { 2, -1 };
  int XPath_child_expected3[] = { 3, 5, 7, -1 };
  int XPath_child_expected4[] = { 4, -1 };
  int XPath_child_expected5[] = { -1 };
  int XPath_child_expected6[] = { 6, -1 };
  int XPath_child_expected7[] = { 8, -1 };
}

xml
{
  "<?xml version='1.0'?>"
  "<root>"
    "<container attr1='attr1' xmlns:ns1='data:ns1'>"
      "<text>[text]</text>"
      "<text><![CDATA[cdatasection]]></text>"
      "<text><!--comment--></text>"
    "</container>"
  "</root>"
}

test_equal ("child::node() #1",
            XPath_TestNodeSet (state.doc, "child::node()", 0, XPath_child_expected1),
            "ok");
test_equal ("child::node() #2",
            XPath_TestNodeSet (state.doc, "child::node()", 1, XPath_child_expected2),
            "ok");
test_equal ("child::node() #3",
            XPath_TestNodeSet (state.doc, "child::node()", 2, XPath_child_expected3),
            "ok");
test_equal ("child::node() #4",
            XPath_TestNodeSet (state.doc, "child::node()", 3, XPath_child_expected4),
            "ok");
test_equal ("child::node() #5",
            XPath_TestNodeSet (state.doc, "child::node()", 4, XPath_child_expected5),
            "ok");
test_equal ("child::node() #6",
            XPath_TestNodeSet (state.doc, "child::node()", 5, XPath_child_expected6),
            "ok");
test_equal ("child::node() #7",
            XPath_TestNodeSet (state.doc, "child::node()", 6, XPath_child_expected5),
            "ok");
test_equal ("child::node() #8",
            XPath_TestNodeSet (state.doc, "child::node()", 7, XPath_child_expected7),
            "ok");
test_equal ("child::node() #9",
            XPath_TestNodeSet (state.doc, "child::node()", 8, XPath_child_expected5),
            "ok");
test_equal ("child::node() #10",
            XPath_TestNodeSetAttribute (state.doc, "child::node()", 2, "attr", 0, XPath_child_expected5),
            "ok");
test_equal ("child::node() #11",
            XPath_TestNodeSetNamespace (state.doc, "child::node()", 2, "ns1", "data:ns1", XPath_child_expected5),
            "ok");

group "XPath.paths.axes.descendant";
require init;
require XPATH_SUPPORT;
require undefined USE_HTML_PARSER_FOR_XML;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";
include "modules/util/tempbuf.h";

global
{
  int XPath_descendant_expected1[] = { 1, 2, 3, 4, 5, 6, 7, 8, -1 };
  int XPath_descendant_expected2[] = { 2, 3, 4, 5, 6, 7, 8, -1 };
  int XPath_descendant_expected3[] = { 3, 4, 5, 6, 7, 8, -1 };
  int XPath_descendant_expected4[] = { 4, -1 };
  int XPath_descendant_expected5[] = { -1 };
  int XPath_descendant_expected6[] = { 6, -1 };
  int XPath_descendant_expected7[] = { 8, -1 };
}

xml
{
  "<?xml version='1.0'?>"
  "<root>"
    "<container attr1='attr1' xmlns:ns1='data:ns1'>"
      "<text>[text]</text>"
      "<text><![CDATA[cdatasection]]></text>"
      "<text><!--comment--></text>"
    "</container>"
  "</root>"
}

test_equal ("descendant::node() #1",
            XPath_TestNodeSet (state.doc, "descendant::node()", 0, XPath_descendant_expected1),
            "ok");
test_equal ("descendant::node() #2",
            XPath_TestNodeSet (state.doc, "descendant::node()", 1, XPath_descendant_expected2),
            "ok");
test_equal ("descendant::node() #3",
            XPath_TestNodeSet (state.doc, "descendant::node()", 2, XPath_descendant_expected3),
            "ok");
test_equal ("descendant::node() #4",
            XPath_TestNodeSet (state.doc, "descendant::node()", 3, XPath_descendant_expected4),
            "ok");
test_equal ("descendant::node() #5",
            XPath_TestNodeSet (state.doc, "descendant::node()", 4, XPath_descendant_expected5),
            "ok");
test_equal ("descendant::node() #6",
            XPath_TestNodeSet (state.doc, "descendant::node()", 5, XPath_descendant_expected6),
            "ok");
test_equal ("descendant::node() #7",
            XPath_TestNodeSet (state.doc, "descendant::node()", 6, XPath_descendant_expected5),
            "ok");
test_equal ("descendant::node() #8",
            XPath_TestNodeSet (state.doc, "descendant::node()", 7, XPath_descendant_expected7),
            "ok");
test_equal ("descendant::node() #9",
            XPath_TestNodeSet (state.doc, "descendant::node()", 8, XPath_descendant_expected5),
            "ok");
test_equal ("descendant::node() #10",
            XPath_TestNodeSetAttribute (state.doc, "descendant::node()", 2, "attr", 0, XPath_descendant_expected5),
            "ok");
test_equal ("descendant::node() #11",
            XPath_TestNodeSetNamespace (state.doc, "descendant::node()", 2, "ns1", "data:ns1", XPath_descendant_expected5),
            "ok");

group "XPath.paths.axes.descendant-or-self";
require init;
require XPATH_SUPPORT;
require undefined USE_HTML_PARSER_FOR_XML;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";
include "modules/util/tempbuf.h";

global
{
  int XPath_descendantorself_expected1[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, -1 };
  int XPath_descendantorself_expected2[] = { 1, 2, 3, 4, 5, 6, 7, 8, -1 };
  int XPath_descendantorself_expected3[] = { 2, 3, 4, 5, 6, 7, 8, -1 };
  int XPath_descendantorself_expected4[] = { 3, 4, -1 };
  int XPath_descendantorself_expected5[] = { -2, -1 };
  int XPath_descendantorself_expected6[] = { 5, 6, -1 };
  int XPath_descendantorself_expected7[] = { 7, 8, -1 };
}

xml
{
  "<?xml version='1.0'?>"
  "<root>"
    "<container attr1='attr1' xmlns:ns1='data:ns1'>"
      "<text>[text]</text>"
      "<text><![CDATA[cdatasection]]></text>"
      "<text><!--comment--></text>"
    "</container>"
  "</root>"
}

test_equal ("descendant-or-self::node() #1",
            XPath_TestNodeSet (state.doc, "descendant-or-self::node()", 0, XPath_descendantorself_expected1),
            "ok");
test_equal ("descendant-or-self::node() #2",
            XPath_TestNodeSet (state.doc, "descendant-or-self::node()", 1, XPath_descendantorself_expected2),
            "ok");
test_equal ("descendant-or-self::node() #3",
            XPath_TestNodeSet (state.doc, "descendant-or-self::node()", 2, XPath_descendantorself_expected3),
            "ok");
test_equal ("descendant-or-self::node() #4",
            XPath_TestNodeSet (state.doc, "descendant-or-self::node()", 3, XPath_descendantorself_expected4),
            "ok");
test_equal ("descendant-or-self::node() #5",
            XPath_TestNodeSet (state.doc, "descendant-or-self::node()", 4, XPath_descendantorself_expected5),
            "ok");
test_equal ("descendant-or-self::node() #6",
            XPath_TestNodeSet (state.doc, "descendant-or-self::node()", 5, XPath_descendantorself_expected6),
            "ok");
test_equal ("descendant-or-self::node() #7",
            XPath_TestNodeSet (state.doc, "descendant-or-self::node()", 6, XPath_descendantorself_expected5),
            "ok");
test_equal ("descendant-or-self::node() #8",
            XPath_TestNodeSet (state.doc, "descendant-or-self::node()", 7, XPath_descendantorself_expected7),
            "ok");
test_equal ("descendant-or-self::node() #9",
            XPath_TestNodeSet (state.doc, "descendant-or-self::node()", 8, XPath_descendantorself_expected5),
            "ok");
test_equal ("descendant-or-self::node() #10",
            XPath_TestNodeSetAttribute (state.doc, "descendant-or-self::node()", 2, "attr", 0, XPath_descendantorself_expected5),
            "ok");
test_equal ("descendant-or-self::node() #11",
            XPath_TestNodeSetNamespace (state.doc, "descendant-or-self::node()", 2, "ns1", "data:ns1", XPath_descendantorself_expected5),
            "ok");


group "XPath.paths.axes.following";
require init;
require XPATH_SUPPORT;
require undefined USE_HTML_PARSER_FOR_XML;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

global
{
  int XPath_following_expected1[] = { -1 };
  int XPath_following_expected2[] = { 9, 10, 11, 12, 13, 14, 15, -1 };
  int XPath_following_expected3[] = { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, -1 };
  int XPath_following_expected4[] = { 7, 8, 9, 10, 11, 12, 13, 14, 15, -1 };
  int XPath_following_expected5[] = { 12, 13, 14, 15, -1 };
  int XPath_following_expected6[] = { 14, 15, -1 };
  int XPath_following_expected7[] = { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, -1 };
}

xml
{
  "<?xml version='1.0'?>"
  "<root>"
    "<container attr1='attr1' xmlns:ns1='data:ns1'>"
      "<text>[text]</text>"
      "<text><![CDATA[cdatasection]]></text>"
      "<text><!--comment--></text>"
    "</container>"
    "<container attr1='attr1' xmlns:ns1='data:ns1'>"
      "<text>[text]</text>"
      "<text><![CDATA[cdatasection]]></text>"
      "<text><!--comment--></text>"
    "</container>"
  "</root>"
}

test_equal ("following::node() #1",
            XPath_TestNodeSet (state.doc, "following::node()", 0, XPath_following_expected1),
            "ok");
test_equal ("following::node() #2",
            XPath_TestNodeSet (state.doc, "following::node()", 1, XPath_following_expected1),
            "ok");
test_equal ("following::node() #3",
            XPath_TestNodeSet (state.doc, "following::node()", 2, XPath_following_expected2),
            "ok");
test_equal ("following::node() #4",
            XPath_TestNodeSet (state.doc, "following::node()", 3, XPath_following_expected3),
            "ok");
test_equal ("following::node() #5",
            XPath_TestNodeSet (state.doc, "following::node()", 4, XPath_following_expected3),
            "ok");
test_equal ("following::node() #6",
            XPath_TestNodeSet (state.doc, "following::node()", 5, XPath_following_expected4),
            "ok");
test_equal ("following::node() #7",
            XPath_TestNodeSet (state.doc, "following::node()", 6, XPath_following_expected4),
            "ok");
test_equal ("following::node() #8",
            XPath_TestNodeSet (state.doc, "following::node()", 7, XPath_following_expected2),
            "ok");
test_equal ("following::node() #9",
            XPath_TestNodeSet (state.doc, "following::node()", 8, XPath_following_expected2),
            "ok");
test_equal ("following::node() #9",
            XPath_TestNodeSet (state.doc, "following::node()", 9, XPath_following_expected1),
            "ok");
test_equal ("following::node() #9",
            XPath_TestNodeSet (state.doc, "following::node()", 10, XPath_following_expected5),
            "ok");
test_equal ("following::node() #9",
            XPath_TestNodeSet (state.doc, "following::node()", 11, XPath_following_expected5),
            "ok");
test_equal ("following::node() #9",
            XPath_TestNodeSet (state.doc, "following::node()", 12, XPath_following_expected6),
            "ok");
test_equal ("following::node() #9",
            XPath_TestNodeSet (state.doc, "following::node()", 13, XPath_following_expected6),
            "ok");
test_equal ("following::node() #9",
            XPath_TestNodeSet (state.doc, "following::node()", 14, XPath_following_expected1),
            "ok");
test_equal ("following::node() #9",
            XPath_TestNodeSet (state.doc, "following::node()", 15, XPath_following_expected1),
            "ok");
test_equal ("following::node() #10",
            XPath_TestNodeSetAttribute (state.doc, "following::node()", 2, "attr1", 0, XPath_following_expected7),
            "ok");
test_equal ("following::node() #11",
            XPath_TestNodeSetNamespace (state.doc, "following::node()", 2, "ns1", "data:ns1", XPath_following_expected7),
            "ok");

