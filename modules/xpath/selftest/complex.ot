group "XPath.complex";
require init;
require XPATH_SUPPORT;
language ecmascript;

xml
{
  "<root>"
    "<level1 index='0'>"
      "<level2 index='0'>"
        "<level3 index='0'>[0-0-0]</level3>"
        "<level3 index='1'>[0-0-1]</level3>"
        "<level3 index='2'>[0-0-2]</level3>"
      "</level2>"
      "<level2 index='1'>"
        "<level3 index='0'>[0-1-0]</level3>"
        "<level3 index='1'>[0-1-1]</level3>"
        "<level3 index='2'>[0-1-2]</level3>"
      "</level2>"
      "<level2 index='2'>"
        "<level3 index='0'>[0-2-0]</level3>"
        "<level3 index='1'>[0-2-1]</level3>"
        "<level3 index='2'>[0-2-2]</level3>"
      "</level2>"
    "</level1>"
    "<level1 index='1'>"
      "<level2 index='0'>"
        "<level3 index='0'>[1-0-0]</level3>"
        "<level3 index='1'>[1-0-1]</level3>"
        "<level3 index='2'>[1-0-2]</level3>"
      "</level2>"
      "<level2 index='1'>"
        "<level3 index='0'>[1-1-0]</level3>"
        "<level3 index='1'>[1-1-1]</level3>"
        "<level3 index='2'>[1-1-2]</level3>"
      "</level2>"
      "<level2 index='2'>"
        "<level3 index='0'>[1-2-0]</level3>"
        "<level3 index='1'>[1-2-1]</level3>"
        "<level3 index='2'>[1-2-2]</level3>"
      "</level2>"
    "</level1>"
    "<level1 index='2'>"
      "<level2 index='0'>"
        "<level3 index='0'>[2-0-0]</level3>"
        "<level3 index='1'>[2-0-1]</level3>"
        "<level3 index='2'>[2-0-2]</level3>"
      "</level2>"
      "<level2 index='1'>"
        "<level3 index='0'>[2-1-0]</level3>"
        "<level3 index='1'>[2-1-1]</level3>"
        "<level3 index='2'>[2-1-2]</level3>"
      "</level2>"
      "<level2 index='2'>"
        "<level3 index='0'>[2-2-0]</level3>"
        "<level3 index='1'>[2-2-1]</level3>"
        "<level3 index='2'>[2-2-2]</level3>"
      "</level2>"
    "</level1>"
  "</root>"
}

test ("Setup")
{
  node = function (nodeDesc)
  {
    if (nodeDesc == "document()")
      return document;

    var match = RegExp ("(([^;]*);)?([a-zA-Z0-9]+)(\\[([0-9]+)\\])?(/(.*))?").exec (nodeDesc);

    if (!match)
      throw "Invalid nodeDesc: " + nodeDesc;

    var ns = match[2];
    var localname = match[3];
    var index = match[5];
    var extra = match[7];
    var elements;

    if (ns)
      elements = document.getElementsByTagNameNS (ns, localname);
    else
      elements = document.getElementsByTagName (localname);

    if (!index)
      index = 0;

    var element = elements.item (index);

    if (!element)
      throw "Node not found: " + nodeDesc;

    if (extra)
    {
      var match = RegExp ("(.*)\\[([0-9]+)\\]").exec (extra);

      if (!match)
        throw "Invalid nodeDesc extra: " + nodeDesc;

      var type = match[1];
      var index = match[2];
      var constructor;

      if (!index)
        index = 0;

      if (type == "text()")
        constructor = Text;
      else if (type == "comment()")
        constructor = Comment;
      else if (type == "processing-instruction()")
        constructor = ProcessingInstruction;
      else
        throw "Invalid nodeDesc extra: " + nodeDesc;

      for (var child = element.firstChild; child; child = child.nextSibling)
        if (child instanceof constructor)
          if (index-- == 0)
            return child;
    }
    else
      return element;
  }

  contains = function (expected, node)
  {
    for (var index = 0; index < expected.length; ++index)
      if (expected[index] == node)
        return true;
    return false;
  }

  describeNode = function (node)
  {
    var description = "";

    while (node)
    {
      var localDescription;

      if (node instanceof Text)
        localDescription = "text()";
      else if (node instanceof Comment)
        localDescription = "comment()";
      else if (node instanceof ProcessingInstruction)
        localDescription = "processing-instruction";
      else if (node instanceof Document)
        localDescription = "";
      else if (node instanceof Element)
        localDescription = node.nodeName;
      else
        localDescription = "<unhandled node>";

      if (!(node instanceof Document))
      {
        var sibling = node.previousSibling, index = 1;
        while (sibling)
        {
          if (sibling.nodeName == node.nodeName)
            ++index;
          sibling = sibling.previousSibling;
        }

        localDescription += "[" + String (index) + "]";
      }

      if (description)
        description = "/" + description;

      description = localDescription + description;

      node = node.parentNode;
    }

    return description;
  }

  nodeset = function (source, contextNodeDesc)
  {
    var contextNode = node (contextNodeDesc);
    var expression = document.createExpression (source, document.createNSResolver (contextNode));
    var expected = [];

    for (var index = 2; index < arguments.length; ++index)
      expected.push (node (arguments[index]));

    var resultNode, resultLength;

    var result = expression.evaluate (contextNode, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null);
    resultLength = 0;
    while (resultNode = result.iterateNext ())
    {
      if (!contains (expected, resultNode))
        throw "[UNORDERED_NODE_ITERATOR_TYPE] Result contains unexpected node: " + describeNode (resultNode);
      ++resultLength;
    }
    if (resultLength < expected.length)
      throw "[UNORDERED_NODE_ITERATOR_TYPE] Result contains fewer nodes than expected.";

    var result = expression.evaluate (contextNode, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
    resultLength = 0;
    while (resultNode = result.iterateNext ())
    {
      if (expected[resultLength] != resultNode)
        if (contains (expected, resultNode))
          throw "[ORDERED_NODE_ITERATOR_TYPE] Result contains node at wrong place: " + describeNode (resultNode);
        else
          throw "[ORDERED_NODE_ITERATOR_TYPE] Result contains unexpected node: " + describeNode (resultNode);
      ++resultLength;
    }
    if (resultLength < expected.length)
      throw "[ORDERED_NODE_ITERATOR_TYPE] Result contains fewer nodes than expected.";

    var result = expression.evaluate (contextNode, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    if (result.snapshotLength < expected.length)
      throw "[UNORDERED_NODE_SNAPSHOT_TYPE] Result contains fewer nodes than expected.";
    for (var index = 0; index < expected.length; ++index)
    {
      resultNode = result.snapshotItem (index);
      if (!contains (expected, resultNode))
        throw "[UNORDERED_NODE_SNAPSHOT_TYPE] Result contains unexpected node: " + describeNode (resultNode);
    }

    var result = expression.evaluate (contextNode, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    if (result.snapshotLength < expected.length)
      throw "[ORDERED_NODE_SNAPSHOT_TYPE] Result contains fewer nodes than expected.";
    for (var index = 0; index < expected.length; ++index)
    {
      resultNode = result.snapshotItem (index);
      if (expected[index] != resultNode)
        if (contains (expected, resultNode))
          throw "[ORDERED_NODE_SNAPSHOT_TYPE] Result contains node at wrong place: " + describeNode (resultNode);
        else
          throw "[ORDERED_NODE_SNAPSHOT_TYPE] Result contains unexpected node: " + describeNode (resultNode);
    }

    var result = expression.evaluate (contextNode, XPathResult.ANY_UNORDERED_NODE_TYPE, null);
    resultNode = result.singleNodeValue;
    if (!contains (expected, resultNode))
      throw "[ANY_UNORDERED_NODE_TYPE] Result is unexpected node: " + describeNode (resultNode);

    var result = expression.evaluate (contextNode, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
    resultNode = result.singleNodeValue;
    if (expected[0] != resultNode)
      if (contains (expected, resultNode))
        throw "[FIRST_ORDERED_NODE_TYPE] Result is wrong node: " + describeNode (resultNode);
      else
        throw "[FIRST_ORDERED_NODE_TYPE] Result is unexpected node: " + describeNode (resultNode);
  }
}

test ("/")
{
  nodeset ("/", "document()", "document()");
}

test ("root")
{
  nodeset ("root", "document()", "root");
}

test ("root/level1")
{
  nodeset ("root/level1", "document()", "level1[0]", "level1[1]", "level1[2]");
}

test ("//*")
{
  nodeset ("//*", "document()", "root", "level1[0]",
                                          "level2[0]",
                                            "level3[0]",
                                            "level3[1]",
                                            "level3[2]",
                                          "level2[1]",
                                            "level3[3]",
                                            "level3[4]",
                                            "level3[5]",
                                          "level2[2]",
                                            "level3[6]",
                                            "level3[7]",
                                            "level3[8]",
                                        "level1[1]",
                                          "level2[3]",
                                            "level3[9]",
                                            "level3[10]",
                                            "level3[11]",
                                          "level2[4]",
                                            "level3[12]",
                                            "level3[13]",
                                            "level3[14]",
                                          "level2[5]",
                                            "level3[15]",
                                            "level3[16]",
                                            "level3[17]",
                                        "level1[2]",
                                          "level2[6]",
                                            "level3[18]",
                                            "level3[19]",
                                            "level3[20]",
                                          "level2[7]",
                                            "level3[21]",
                                            "level3[22]",
                                            "level3[23]",
                                          "level2[8]",
                                            "level3[24]",
                                            "level3[25]",
                                            "level3[26]");
}

test ("//level3[2]")
{
  nodeset ("//level3[2]", "document()", "level3[1]",
                                        "level3[4]",
                                        "level3[7]",
                                        "level3[10]",
                                        "level3[13]",
                                        "level3[16]",
                                        "level3[19]",
                                        "level3[22]",
                                        "level3[25]");
}

test ("/descendant::level3[2]")
{
  nodeset ("/descendant::level3[2]", "document()", "level3[1]");
}

test ("//*//level3[2]")
{
  nodeset ("//*//level3[2]", "document()", "level3[1]",
                                           "level3[4]",
                                           "level3[7]",
                                           "level3[10]",
                                           "level3[13]",
                                           "level3[16]",
                                           "level3[19]",
                                           "level3[22]",
                                           "level3[25]");
}

test ("//*/descendant::level3[2]")
{
  nodeset ("//*/descendant::level3[2]", "document()", "level3[1]",
                                                      "level3[4]",
                                                      "level3[7]",
                                                      "level3[10]",
                                                      "level3[13]",
                                                      "level3[16]",
                                                      "level3[19]",
                                                      "level3[22]",
                                                      "level3[25]");
}

test ("//*/ancestor::*[2]//level3[2]")
{
  nodeset ("//*/ancestor::*[2]//level3[2]", "document()", "level3[1]",
                                                          "level3[4]",
                                                          "level3[7]",
                                                          "level3[10]",
                                                          "level3[13]",
                                                          "level3[16]",
                                                          "level3[19]",
                                                          "level3[22]",
                                                          "level3[25]");
}

test ("//*/ancestor::*[2]/descendant::level3[2]")
{
  nodeset ("//*/ancestor::*[2]/descendant::level3[2]", "document()", "level3[1]",
                                                                     "level3[10]",
                                                                     "level3[19]");
}
