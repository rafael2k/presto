group "XPath.functions.number.number";

require init;
require XPATH_SUPPORT;
require undefined USE_HTML_PARSER_FOR_XML;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml 
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container>"
      "<text>1</text>"
      "<text>2.5</text>"
      "<text>-5.2</text>"
    "</container>"
  "</root>"
}

test_equal ("number(1)",
            XPath_TestNumber (state.doc, "number (1)", 1.),
            "ok");
test_equal ("number(root/container/text)",
            XPath_TestNumber (state.doc, "number (root/container/text)", 1.),
            "ok");
test_equal ("number(root/container/text[1])",
            XPath_TestNumber (state.doc, "number (root/container/text[1])", 1.),
            "ok");
test_equal ("number(root/container/text[2])",
            XPath_TestNumber (state.doc, "number (root/container/text[2])", 2.5),
            "ok");
test_equal ("number(root/container/text[3])",
            XPath_TestNumber (state.doc, "number (root/container/text[3])", -5.2),
            "ok");
test_equal ("number('1')",
            XPath_TestNumber (state.doc, "number ('1')", 1),
            "ok");
test_equal ("number('1.5')",
            XPath_TestNumber (state.doc, "number ('1.5')", 1.5),
            "ok");
test_equal ("number('-1.5')",
            XPath_TestNumber (state.doc, "number ('-1.5')", -1.5),
            "ok");
test_equal ("number(true())",
            XPath_TestNumber (state.doc, "number (true())", 1),
            "ok");
test_equal ("number(false())",
            XPath_TestNumber (state.doc, "number (false())", 0),
            "ok");
test_equal ("root/container/text[2][number()=2.5]",
            XPath_TestNumber (state.doc, "number (root/container/text[2][number()=2.5])", 2.5),
            "ok");

xml 
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container>"
      "<text>1</text>"
    "</container>"
  "</root>"
}

test_equal ("number()",
            XPath_TestNumber (state.doc, "number ()", 1),
            "ok");
test_equal ("number(true(), true())",
            XPath_TestNumber (state.doc, "number (true(), true())", 0),
            "XPathExpression::Make failed");

group "XPath.functions.number.sum";
require init;
require XPATH_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml 
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container>"
      "<text>1</text>"
      "<text>2.5</text>"
      "<text>-0.2</text>"
    "</container>"
    "<container>"
      "<text>1</text>"
    "</container>"
    "<container>"
    "</container>"
  "</root>"
}

test_equal ("sum(root/container[1]/text)",
            XPath_TestNumber (state.doc, "sum(root/container[1]/text)", 3.3),
            "ok");
test_equal ("sum(root/container[2]/text)",
            XPath_TestNumber (state.doc, "sum(root/container[2]/text)", 1),
            "ok");
test_equal ("sum(root/container[3]/text)",
            XPath_TestNumber (state.doc, "sum(root/container[3]/text)", 0),
            "ok");
test_equal ("sum()",
            XPath_TestNumber (state.doc, "sum()", 0),
            "XPathExpression::Make failed");
test_equal ("sum(root, root)",
            XPath_TestNumber (state.doc, "sum(root, root)", 0),
            "XPathExpression::Make failed");

group "XPath.functions.number.floor";
require init;
require XPATH_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml 
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container>"
      "<text>1</text>"
      "<text>1.1</text>"
      "<text>1.9</text>"
      "<text>-1</text>"
      "<text>-1.1</text>"
      "<text>-1.9</text>"
    "</container>"
  "</root>"
}

test_equal ("floor(1)",
            XPath_TestNumber (state.doc, "floor(1)", 1),
            "ok");
test_equal ("floor(1.1)",
            XPath_TestNumber (state.doc, "floor(1.1)", 1),
            "ok");
test_equal ("floor(1.9)",
            XPath_TestNumber (state.doc, "floor(1.9)", 1),
            "ok");
test_equal ("floor(-1)",
            XPath_TestNumber (state.doc, "floor(-1)", -1),
            "ok");
test_equal ("floor(-1.1)",
            XPath_TestNumber (state.doc, "floor(-1.1)", -2),
            "ok");
test_equal ("floor(-1.9)",
            XPath_TestNumber (state.doc, "floor(-1.9)", -2),
            "ok");
test_equal ("floor(root/container/text)",
            XPath_TestNumber (state.doc, "floor(root/container/text)", 1),
            "ok");
test_equal ("floor(root/container/text[1])",
            XPath_TestNumber (state.doc, "floor(root/container/text[1])", 1),
            "ok");
test_equal ("floor(root/container/text[2])",
            XPath_TestNumber (state.doc, "floor(root/container/text[2])", 1),
            "ok");
test_equal ("floor(root/container/text[3])",
            XPath_TestNumber (state.doc, "floor(root/container/text[3])", 1),
            "ok");
test_equal ("floor(root/container/text[4])",
            XPath_TestNumber (state.doc, "floor(root/container/text[4])", -1),
            "ok");
test_equal ("floor(root/container/text[5])",
            XPath_TestNumber (state.doc, "floor(root/container/text[5])", -2),
            "ok");
test_equal ("floor(root/container/text[6])",
            XPath_TestNumber (state.doc, "floor(root/container/text[6])", -2),
            "ok");
test_equal ("floor()",
            XPath_TestNumber (state.doc, "floor()", 0),
            "XPathExpression::Make failed");
test_equal ("floor(1, 1)",
            XPath_TestNumber (state.doc, "floor(1, 1)", 0),
            "XPathExpression::Make failed");

group "XPath.functions.number.ceiling";
require init;
require XPATH_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml 
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container>"
      "<text>1</text>"
      "<text>1.1</text>"
      "<text>1.9</text>"
      "<text>-1</text>"
      "<text>-1.1</text>"
      "<text>-1.9</text>"
    "</container>"
  "</root>"
}

test_equal ("ceiling(1)",
            XPath_TestNumber (state.doc, "ceiling(1)", 1),
            "ok");
test_equal ("ceiling(1.1)",
            XPath_TestNumber (state.doc, "ceiling(1.1)", 2),
            "ok");
test_equal ("ceiling(1.9)",
            XPath_TestNumber (state.doc, "ceiling(1.9)", 2),
            "ok");
test_equal ("ceiling(-1)",
            XPath_TestNumber (state.doc, "ceiling(-1)", -1),
            "ok");
test_equal ("ceiling(-1.1)",
            XPath_TestNumber (state.doc, "ceiling(-1.1)", -1),
            "ok");
test_equal ("ceiling(-1.9)",
            XPath_TestNumber (state.doc, "ceiling(-1.9)", -1),
            "ok");
test_equal ("ceiling(root/container/text)",
            XPath_TestNumber (state.doc, "ceiling(root/container/text)", 1),
            "ok");
test_equal ("ceiling(root/container/text[1])",
            XPath_TestNumber (state.doc, "ceiling(root/container/text[1])", 1),
            "ok");
test_equal ("ceiling(root/container/text[2])",
            XPath_TestNumber (state.doc, "ceiling(root/container/text[2])", 2),
            "ok");
test_equal ("ceiling(root/container/text[3])",
            XPath_TestNumber (state.doc, "ceiling(root/container/text[3])", 2),
            "ok");
test_equal ("ceiling(root/container/text[4])",
            XPath_TestNumber (state.doc, "ceiling(root/container/text[4])", -1),
            "ok");
test_equal ("ceiling(root/container/text[5])",
            XPath_TestNumber (state.doc, "ceiling(root/container/text[5])", -1),
            "ok");
test_equal ("ceiling(root/container/text[6])",
            XPath_TestNumber (state.doc, "ceiling(root/container/text[6])", -1),
            "ok");
test_equal ("ceiling()",
            XPath_TestNumber (state.doc, "ceiling()", 0),
            "XPathExpression::Make failed");
test_equal ("ceiling(1, 1)",
            XPath_TestNumber (state.doc, "ceiling(1, 1)", 0),
            "XPathExpression::Make failed");

group "XPath.functions.number.round";
require init;
require XPATH_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml 
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container>"
      "<text>1</text>"
      "<text>1.1</text>"
      "<text>1.9</text>"
      "<text>-1</text>"
      "<text>-1.1</text>"
      "<text>-1.9</text>"
    "</container>"
  "</root>"
}

test_equal ("round(1)",
            XPath_TestNumber (state.doc, "round(1)", 1),
            "ok");
test_equal ("round(1.1)",
            XPath_TestNumber (state.doc, "round(1.1)", 1),
            "ok");
test_equal ("round(1.5)",
            XPath_TestNumber (state.doc, "round(1.5)", 2),
            "ok");
test_equal ("round(1.9)",
            XPath_TestNumber (state.doc, "round(1.9)", 2),
            "ok");
test_equal ("round(0.2)",
            XPath_TestNumber (state.doc, "round(0.2)", XPath_Zero ()),
            "ok");
test_equal ("round(-0.2)",
            XPath_TestNumber (state.doc, "round(-0.2)", -XPath_Zero ()),
            "ok");
test_equal ("round(-1)",
            XPath_TestNumber (state.doc, "round(-1)", -1),
            "ok");
test_equal ("round(-1.1)",
            XPath_TestNumber (state.doc, "round(-1.1)", -1),
            "ok");
test_equal ("round(-1.5)",
            XPath_TestNumber (state.doc, "round(-1.5)", -1),
            "ok");
test_equal ("round(-1.9)",
            XPath_TestNumber (state.doc, "round(-1.9)", -2),
            "ok");
test_equal ("round(root/container/text)",
            XPath_TestNumber (state.doc, "round(root/container/text)", 1),
            "ok");
test_equal ("round(root/container/text[1])",
            XPath_TestNumber (state.doc, "round(root/container/text[1])", 1),
            "ok");
test_equal ("round(root/container/text[2])",
            XPath_TestNumber (state.doc, "round(root/container/text[2])", 1),
            "ok");
test_equal ("round(root/container/text[3])",
            XPath_TestNumber (state.doc, "round(root/container/text[3])", 2),
            "ok");
test_equal ("round(root/container/text[4])",
            XPath_TestNumber (state.doc, "round(root/container/text[4])", -1),
            "ok");
test_equal ("round(root/container/text[5])",
            XPath_TestNumber (state.doc, "round(root/container/text[5])", -1),
            "ok");
test_equal ("round(root/container/text[6])",
            XPath_TestNumber (state.doc, "round(root/container/text[6])", -2),
            "ok");
test_equal ("round()",
            XPath_TestNumber (state.doc, "round()", 0),
            "XPathExpression::Make failed");
test_equal ("round(1, 1)",
            XPath_TestNumber (state.doc, "round(1, 1)", 0),
            "XPathExpression::Make failed");
