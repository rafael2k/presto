group "XPath.functions.nodeset.name";

require init;
require XPATH_SUPPORT;
require undefined USE_HTML_PARSER_FOR_XML;

include "modules/xpath/src/xpsthelpers.h";

xml
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container1><element1/></container1>"
    "<container2><element2 xmlns='ns:element2'/></container2>"
    "<container3><prefix3:element3 xmlns:prefix3='ns:element3'/></container3>"
    "<container1><element1-wrong/></container1>"
    "<container2><element2-wrong xmlns='ns:element2-wrong'/></container2>"
    "<container3><prefix3:element3-wrong xmlns:prefix3='ns:element3-wrong'/></container3>"
    "<container1><element1-wrong/></container1>"
    "<container2><element2-wrong xmlns='ns:element2-wrong'/></container2>"
    "<container3><prefix3:element3-wrong xmlns:prefix3='ns:element3-wrong'/></container3>"
    "<trailer/>"
  "</root>"
}

/* Call with implicit argument (context node.) */
test_equal ("root/container1[1]/*[name()='element1']",
            XPath_TestBoolean (state.doc, "boolean(root/container1[1]/*[name()='element1'])", TRUE),
            "ok");
test_equal ("root/container2[1]/*[name()='element2']",
            XPath_TestBoolean (state.doc, "boolean(root/container2[1]/*[name()='element2'])", TRUE),
            "ok");
test_equal ("root/container3[1]/*[name()='prefix3:element3']",
            XPath_TestBoolean (state.doc, "boolean(root/container3[1]/*[name()='prefix3:element3'])", TRUE),
            "ok");

/* Call with explicit single-node argument. */
test_equal ("name(root/container1[1]/*)",
            XPath_TestString (state.doc, "name(root/container1[1]/*)", "element1"),
            "ok");
test_equal ("name(root/container2[1]/*)",
            XPath_TestString (state.doc, "name(root/container2[1]/*)", "element2"),
            "ok");
test_equal ("name(root/container3[1]/*)",
            XPath_TestString (state.doc, "name(root/container3[1]/*)", "prefix3:element3"),
            "ok");

/* Call with explicit multiple-node argument in document order. */
test_equal ("name(root/container1/*)",
            XPath_TestString (state.doc, "name(root/container1/*)", "element1"),
            "ok");
test_equal ("name(root/container2/*)",
            XPath_TestString (state.doc, "name(root/container2/*)", "element2"),
            "ok");
test_equal ("name(root/container3/*)",
            XPath_TestString (state.doc, "name(root/container3/*)", "prefix3:element3"),
            "ok");

/* Call with explicit multiple-node argument in reverse document order. */
test_equal ("name(root/trailer/preceding::*[parent::container1])",
            XPath_TestString (state.doc, "name(root/trailer/preceding::*[parent::container1])", "element1"),
            "ok");
test_equal ("name(root/trailer/preceding::*[parent::container2])",
            XPath_TestString (state.doc, "name(root/trailer/preceding::*[parent::container2])", "element2"),
            "ok");
test_equal ("name(root/trailer/preceding::*[parent::container3])",
            XPath_TestString (state.doc, "name(root/trailer/preceding::*[parent::container3])", "prefix3:element3"),
            "ok");

group "XPath.functions.nodeset.local-name";

require init;
require XPATH_SUPPORT;
require undefined USE_HTML_PARSER_FOR_XML;

include "modules/xpath/src/xpsthelpers.h";

xml
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container1><element1/></container1>"
    "<container2><element2 xmlns='ns:element2'/></container2>"
    "<container3><prefix3:element3 xmlns:prefix3='ns:element3'/></container3>"
    "<container1><element1-wrong/></container1>"
    "<container2><element2-wrong xmlns='ns:element2-wrong'/></container2>"
    "<container3><prefix3:element3-wrong xmlns:prefix3='ns:element3-wrong'/></container3>"
    "<container1><element1-wrong/></container1>"
    "<container2><element2-wrong xmlns='ns:element2-wrong'/></container2>"
    "<container3><prefix3:element3-wrong xmlns:prefix3='ns:element3-wrong'/></container3>"
    "<trailer/>"
  "</root>"
}

/* Call with implicit argument (context node.) */
test_equal ("root/container1[1]/*[local-name()='element1']",
            XPath_TestBoolean (state.doc, "boolean(root/container1[1]/*[local-name()='element1'])", TRUE),
            "ok");
test_equal ("root/container2[1]/*[local-name()='element2']",
            XPath_TestBoolean (state.doc, "boolean(root/container2[1]/*[local-name()='element2'])", TRUE),
            "ok");
test_equal ("root/container3[1]/*[local-name()='element3']",
            XPath_TestBoolean (state.doc, "boolean(root/container3[1]/*[local-name()='element3'])", TRUE),
            "ok");

/* Call with explicit single-node argument. */
test_equal ("local-name(root/container1[1]/*)",
            XPath_TestString (state.doc, "local-name(root/container1[1]/*)", "element1"),
            "ok");
test_equal ("local-name(root/container2[1]/*)",
            XPath_TestString (state.doc, "local-name(root/container2[1]/*)", "element2"),
            "ok");
test_equal ("local-name(root/container3[1]/*)",
            XPath_TestString (state.doc, "local-name(root/container3[1]/*)", "element3"),
            "ok");

/* Call with explicit multiple-node argument in document order. */
test_equal ("local-name(root/container1/*)",
            XPath_TestString (state.doc, "local-name(root/container1/*)", "element1"),
            "ok");
test_equal ("local-name(root/container2/*)",
            XPath_TestString (state.doc, "local-name(root/container2/*)", "element2"),
            "ok");
test_equal ("local-name(root/container3/*)",
            XPath_TestString (state.doc, "local-name(root/container3/*)", "element3"),
            "ok");

/* Call with explicit multiple-node argument in reverse document order. */
test_equal ("local-name(root/trailer/preceding::*[parent::container1])",
            XPath_TestString (state.doc, "local-name(root/trailer/preceding::*[parent::container1])", "element1"),
            "ok");
test_equal ("local-name(root/trailer/preceding::*[parent::container2])",
            XPath_TestString (state.doc, "local-name(root/trailer/preceding::*[parent::container2])", "element2"),
            "ok");
test_equal ("local-name(root/trailer/preceding::*[parent::container3])",
            XPath_TestString (state.doc, "local-name(root/trailer/preceding::*[parent::container3])", "element3"),
            "ok");

group "XPath.functions.nodeset.namespace-uri";

require init;
require XPATH_SUPPORT;
require undefined USE_HTML_PARSER_FOR_XML;

include "modules/xpath/src/xpsthelpers.h";

xml
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<container1><element1/></container1>"
    "<container2><element2 xmlns='ns:element2'/></container2>"
    "<container3><prefix3:element3 xmlns:prefix3='ns:element3'/></container3>"
    "<container1><element1-wrong/></container1>"
    "<container2><element2-wrong xmlns='ns:element2-wrong'/></container2>"
    "<container3><prefix3:element3-wrong xmlns:prefix3='ns:element3-wrong'/></container3>"
    "<container1><element1-wrong/></container1>"
    "<container2><element2-wrong xmlns='ns:element2-wrong'/></container2>"
    "<container3><prefix3:element3-wrong xmlns:prefix3='ns:element3-wrong'/></container3>"
    "<trailer/>"
  "</root>"
}

/* Call with implicit argument (context node.) */
test_equal ("root/container1[1]/*[namespace-uri()='']",
            XPath_TestBoolean (state.doc, "boolean(root/container1[1]/*[namespace-uri()=''])", TRUE),
            "ok");
test_equal ("root/container2[1]/*[namespace-uri()='ns:element2']",
            XPath_TestBoolean (state.doc, "boolean(root/container2[1]/*[namespace-uri()='ns:element2'])", TRUE),
            "ok");
test_equal ("root/container3[1]/*[namespace-uri()='ns:element3']",
            XPath_TestBoolean (state.doc, "boolean(root/container3[1]/*[namespace-uri()='ns:element3'])", TRUE),
            "ok");

/* Call with explicit single-node argument. */
test_equal ("namespace-uri(root/container1[1]/*)",
            XPath_TestString (state.doc, "namespace-uri(root/container1[1]/*)", ""),
            "ok");
test_equal ("namespace-uri(root/container2[1]/*)",
            XPath_TestString (state.doc, "namespace-uri(root/container2[1]/*)", "ns:element2"),
            "ok");
test_equal ("namespace-uri(root/container3[1]/*)",
            XPath_TestString (state.doc, "namespace-uri(root/container3[1]/*)", "ns:element3"),
            "ok");

/* Call with explicit multiple-node argument in document order. */
test_equal ("namespace-uri(root/container1/*)",
            XPath_TestString (state.doc, "namespace-uri(root/container1/*)", ""),
            "ok");
test_equal ("namespace-uri(root/container2/*)",
            XPath_TestString (state.doc, "namespace-uri(root/container2/*)", "ns:element2"),
            "ok");
test_equal ("namespace-uri(root/container3/*)",
            XPath_TestString (state.doc, "namespace-uri(root/container3/*)", "ns:element3"),
            "ok");

/* Call with explicit multiple-node argument in reverse document order. */
test_equal ("namespace-uri(root/trailer/preceding::*[parent::container1])",
            XPath_TestString (state.doc, "namespace-uri(root/trailer/preceding::*[parent::container1])", ""),
            "ok");
test_equal ("namespace-uri(root/trailer/preceding::*[parent::container2])",
            XPath_TestString (state.doc, "namespace-uri(root/trailer/preceding::*[parent::container2])", "ns:element2"),
            "ok");
test_equal ("namespace-uri(root/trailer/preceding::*[parent::container3])",
            XPath_TestString (state.doc, "namespace-uri(root/trailer/preceding::*[parent::container3])", "ns:element3"),
            "ok");

group "XPath.functions.nodeset.id.single";

/* Tests calling the id function with strings (or node-sets with string-values)
   that contain single id:s. */

require init;
require XPATH_SUPPORT;
require undefined USE_HTML_PARSER_FOR_XML;

include "modules/xpath/src/xpsthelpers.h";

global
{
  int XPath_id_single_expected1_1[] = { 3, -1 };
  int XPath_id_single_expected1_2[] = { 5, -1 };
  int XPath_id_single_expected1_3[] = { 7, -1 };
  int XPath_id_single_expected1_4[] = { 9, -1 };
  int XPath_id_single_expected1_5[] = { 11, -1 };
  
  int XPath_id_single_expected2_1[] = { 11, -1 };
  int XPath_id_single_expected2_2[] = { 7, -1 };
  int XPath_id_single_expected2_3[] = { 3, -1 };
  int XPath_id_single_expected2_4[] = { 5, -1 };
  int XPath_id_single_expected2_5[] = { 9, -1 };

  int XPath_id_single_expected3[] = { 11, 7, 3, 5, 9, -1 };
}

xml
{
  "<root>"
    "<notes>"
      "<note1 xml:id='note1'>note1</note1>"
      "<note2 xml:id='note2'>note2</note2>"
      "<note3 xml:id='note3'>note3</note3>"
      "<note4 xml:id='note4'>note4</note4>"
      "<note5 xml:id='note5'>note5</note5>"
    "</notes>"
    "<references>"
      "<reference target='note5'>note5</reference>"
      "<reference target='note3'>note3</reference>"
      "<reference target='note1'>note1</reference>"
      "<reference target='note2'>note2</reference>"
      "<reference target='note4'>note4</reference>"
    "</references>"
  "</root>"
}

/* Call with string argument. */
test_equal ("id('note1')",
            XPath_TestNodeSet (state.doc, "id('note1')", 0, XPath_id_single_expected1_1),
            "ok");
test_equal ("id('note2')",
            XPath_TestNodeSet (state.doc, "id('note2')", 0, XPath_id_single_expected1_2),
            "ok");
test_equal ("id('note3')",
            XPath_TestNodeSet (state.doc, "id('note3')", 0, XPath_id_single_expected1_3),
            "ok");
test_equal ("id('note4')",
            XPath_TestNodeSet (state.doc, "id('note4')", 0, XPath_id_single_expected1_4),
            "ok");
test_equal ("id('note5')",
            XPath_TestNodeSet (state.doc, "id('note5')", 0, XPath_id_single_expected1_5),
            "ok");

/* Call with single element node argument. */
test_equal ("id(root/references/reference[1])",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[1])", 0, XPath_id_single_expected2_1),
            "ok");
test_equal ("id(root/references/reference[2])",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[2])", 0, XPath_id_single_expected2_2),
            "ok");
test_equal ("id(root/references/reference[3])",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[3])", 0, XPath_id_single_expected2_3),
            "ok");
test_equal ("id(root/references/reference[4])",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[4])", 0, XPath_id_single_expected2_4),
            "ok");
test_equal ("id(root/references/reference[5])",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[5])", 0, XPath_id_single_expected2_5),
            "ok");

/* Call with single attribute node argument. */
test_equal ("id(root/references/reference[1]/@target)",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[1]/@target)", 0, XPath_id_single_expected2_1),
            "ok");
test_equal ("id(root/references/reference[2]/@target)",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[2]/@target)", 0, XPath_id_single_expected2_2),
            "ok");
test_equal ("id(root/references/reference[3]/@target)",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[3]/@target)", 0, XPath_id_single_expected2_3),
            "ok");
test_equal ("id(root/references/reference[4]/@target)",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[4]/@target)", 0, XPath_id_single_expected2_4),
            "ok");
test_equal ("id(root/references/reference[5]/@target)",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[5]/@target)", 0, XPath_id_single_expected2_5),
            "ok");

/* Call with node-set argument (containing element nodes). */
test_equal ("id(root/references/reference)",
            XPath_TestNodeSet (state.doc, "id(root/references/reference)", 0, XPath_id_single_expected3),
            "ok");

/* Call with node-set argument (containing attribute nodes). */
test_equal ("id(root/references/reference/@target)",
            XPath_TestNodeSet (state.doc, "id(root/references/reference/@target)", 0, XPath_id_single_expected3),
            "ok");

/* Call with node-set argument (containing element nodes) forcing ordering. */
test_equal ("id(root/references/reference)[1]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference)[1]", 0, XPath_id_single_expected1_1),
            "ok");
test_equal ("id(root/references/reference)[2]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference)[2]", 0, XPath_id_single_expected1_2),
            "ok");
test_equal ("id(root/references/reference)[3]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference)[3]", 0, XPath_id_single_expected1_3),
            "ok");
test_equal ("id(root/references/reference)[4]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference)[4]", 0, XPath_id_single_expected1_4),
            "ok");
test_equal ("id(root/references/reference)[5]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference)[5]", 0, XPath_id_single_expected1_5),
            "ok");

/* Call with node-set argument (containing element nodes) forcing ordering. */
test_equal ("id(root/references/reference/@target)[1]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference/@target)[1]", 0, XPath_id_single_expected1_1),
            "ok");
test_equal ("id(root/references/reference/@target)[2]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference/@target)[2]", 0, XPath_id_single_expected1_2),
            "ok");
test_equal ("id(root/references/reference/@target)[3]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference/@target)[3]", 0, XPath_id_single_expected1_3),
            "ok");
test_equal ("id(root/references/reference/@target)[4]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference/@target)[4]", 0, XPath_id_single_expected1_4),
            "ok");
test_equal ("id(root/references/reference/@target)[5]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference/@target)[5]", 0, XPath_id_single_expected1_5),
            "ok");

group "XPath.functions.nodeset.id.multiple";

/* Tests calling the id function with strings (or node-sets with string-values)
   that contain multiple id:s. */

require init;
require XPATH_SUPPORT;
require undefined USE_HTML_PARSER_FOR_XML;

include "modules/xpath/src/xpsthelpers.h";

global
{
  int XPath_id_multiple_expected1_1[] = { 3, -1 };
  int XPath_id_multiple_expected1_2[] = { 5, -1 };
  int XPath_id_multiple_expected1_3[] = { 7, -1 };
  int XPath_id_multiple_expected1_4[] = { 9, -1 };
  int XPath_id_multiple_expected1_5[] = { 11, -1 };
  
  int XPath_id_multiple_expected2[] = { 3, 5, 7, 9, 11, -1 };
  int XPath_id_multiple_expected3[] = { 11, 7, 3, 5, 9, -1 };
}

xml
{
  "<root>"
    "<notes>"
      "<note1 xml:id='note1'>note1</note1>"
      "<note2 xml:id='note2'>note2</note2>"
      "<note3 xml:id='note3'>note3</note3>"
      "<note4 xml:id='note4'>note4</note4>"
      "<note5 xml:id='note5'>note5</note5>"
    "</notes>"
    "<references>"
      "<reference target='note1 note2 note3 note4 note5'>note1 note2 note3 note4 note5</reference>"
      "<reference target='note5 note3 note1 note2 note4'>note5 note3 note1 note2 note4</reference>"
    "</references>"
  "</root>"
}

/* Call with string argument (ordered result) + predicate. */
test_equal ("id('note1 note2 note3 note4 note5')[1]",
            XPath_TestNodeSet (state.doc, "id('note1 note2 note3 note4 note5')[1]", 0, XPath_id_multiple_expected1_1),
            "ok");
test_equal ("id('note1 note2 note3 note4 note5')[2]",
            XPath_TestNodeSet (state.doc, "id('note1 note2 note3 note4 note5')[2]", 0, XPath_id_multiple_expected1_2),
            "ok");
test_equal ("id('note1 note2 note3 note4 note5')[3]",
            XPath_TestNodeSet (state.doc, "id('note1 note2 note3 note4 note5')[3]", 0, XPath_id_multiple_expected1_3),
            "ok");
test_equal ("id('note1 note2 note3 note4 note5')[4]",
            XPath_TestNodeSet (state.doc, "id('note1 note2 note3 note4 note5')[4]", 0, XPath_id_multiple_expected1_4),
            "ok");
test_equal ("id('note1 note2 note3 note4 note5')[5]",
            XPath_TestNodeSet (state.doc, "id('note1 note2 note3 note4 note5')[5]", 0, XPath_id_multiple_expected1_5),
            "ok");

/* Call with single element node argument (ordered result) + predicate. */
test_equal ("id(root/references/reference[1])[1]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[1])[1]", 0, XPath_id_multiple_expected1_1),
            "ok");
test_equal ("id(root/references/reference[1])[2]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[1])[2]", 0, XPath_id_multiple_expected1_2),
            "ok");
test_equal ("id(root/references/reference[1])[3]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[1])[3]", 0, XPath_id_multiple_expected1_3),
            "ok");
test_equal ("id(root/references/reference[1])[4]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[1])[4]", 0, XPath_id_multiple_expected1_4),
            "ok");
test_equal ("id(root/references/reference[1])[5]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[1])[5]", 0, XPath_id_multiple_expected1_5),
            "ok");

/* Call with string argument (unordered result) + predicate. */
test_equal ("id('note5 note3 note1 note2 note4')[1]",
            XPath_TestNodeSet (state.doc, "id('note5 note3 note1 note2 note4')[1]", 0, XPath_id_multiple_expected1_1),
            "ok");
test_equal ("id('note5 note3 note1 note2 note4')[2]",
            XPath_TestNodeSet (state.doc, "id('note5 note3 note1 note2 note4')[2]", 0, XPath_id_multiple_expected1_2),
            "ok");
test_equal ("id('note5 note3 note1 note2 note4')[3]",
            XPath_TestNodeSet (state.doc, "id('note5 note3 note1 note2 note4')[3]", 0, XPath_id_multiple_expected1_3),
            "ok");
test_equal ("id('note5 note3 note1 note2 note4')[4]",
            XPath_TestNodeSet (state.doc, "id('note5 note3 note1 note2 note4')[4]", 0, XPath_id_multiple_expected1_4),
            "ok");
test_equal ("id('note5 note3 note1 note2 note4')[5]",
            XPath_TestNodeSet (state.doc, "id('note5 note3 note1 note2 note4')[5]", 0, XPath_id_multiple_expected1_5),
            "ok");

/* Call with single element node argument (unordered result) + predicate. */
test_equal ("id(root/references/reference[2])[1]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[2])[1]", 0, XPath_id_multiple_expected1_1),
            "ok");
test_equal ("id(root/references/reference[2])[2]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[2])[2]", 0, XPath_id_multiple_expected1_2),
            "ok");
test_equal ("id(root/references/reference[2])[3]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[2])[3]", 0, XPath_id_multiple_expected1_3),
            "ok");
test_equal ("id(root/references/reference[2])[4]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[2])[4]", 0, XPath_id_multiple_expected1_4),
            "ok");
test_equal ("id(root/references/reference[2])[5]",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[2])[5]", 0, XPath_id_multiple_expected1_5),
            "ok");

/* Call with string argument (ordered result). */
test_equal ("id('note1 note2 note3 note4 note5')",
            XPath_TestNodeSet (state.doc, "id('note1 note2 note3 note4 note5')", 0, XPath_id_multiple_expected2),
            "ok");

/* Call with string argument (unordered result). */
test_equal ("id('note5 note3 note1 note2 note4')",
            XPath_TestNodeSet (state.doc, "id('note5 note3 note1 note2 note4')", 0, XPath_id_multiple_expected3),
            "ok");

/* Call with element node-set argument (ordered result). */
test_equal ("id(root/references/reference[1])",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[1])", 0, XPath_id_multiple_expected2),
            "ok");

/* Call with element node-set argument (unordered result). */
test_equal ("id(root/references/reference[2])",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[2])", 0, XPath_id_multiple_expected3),
            "ok");

/* Call with attribute node-set argument (ordered result). */
test_equal ("id(root/references/reference[1]/@target)",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[1]/@target)", 0, XPath_id_multiple_expected2),
            "ok");

/* Call with attribute node-set argument (unordered result). */
test_equal ("id(root/references/reference[2]/@target)",
            XPath_TestNodeSet (state.doc, "id(root/references/reference[2]/@target)", 0, XPath_id_multiple_expected3),
            "ok");
