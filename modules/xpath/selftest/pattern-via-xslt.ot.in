group "XPath.pattern-via-xslt";

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="root">
      <root><xsl:apply-templates select="*"/></root>
    </xsl:template>
    <xsl:template match="chapter | section | paragraph">s(<xsl:number level="single" count="chapter | section | paragraph" from="root"/>)m(<xsl:number level="multiple" count="chapter | section | paragraph" from="root"/>)a(<xsl:number level="any" count="chapter | section | paragraph" from="root"/>)<xsl:if test="*">[<xsl:apply-templates select="*"/>]</xsl:if></xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <chapter>
      <section>
        <paragraph>Nonsense</paragraph>
        <paragraph>Nonsense</paragraph>
        <paragraph>Nonsense</paragraph>
      </section>
      <section>
        <paragraph>Nonsense</paragraph>
        <paragraph>Nonsense</paragraph>
        <paragraph>Nonsense</paragraph>
      </section>
      <section>
        <paragraph>Nonsense</paragraph>
        <paragraph>Nonsense</paragraph>
        <paragraph>Nonsense</paragraph>
      </section>
    </chapter>
  </root>
}

test("counting, all sorts of levels")
{
  verify(document.documentElement.textContent == "s(1)m(1)a(1)[s(1)m(1.1)a(2)[s(1)m(1.1.1)a(3)s(2)m(1.1.2)a(4)s(3)m(1.1.3)a(5)]s(2)m(1.2)a(6)[s(1)m(1.2.1)a(7)s(2)m(1.2.2)a(8)s(3)m(1.2.3)a(9)]s(3)m(1.3)a(10)[s(1)m(1.3.1)a(11)s(2)m(1.3.2)a(12)s(3)m(1.3.3)a(13)]]");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="root">
      <root><xsl:apply-templates select="*"/></root>
    </xsl:template>
    <xsl:template match="chapter | section | paragraph">s(<xsl:number level="single" from="root"/>)m(<xsl:number level="multiple" from="root"/>)a(<xsl:number level="any" from="root"/>)<xsl:if test="*">[<xsl:apply-templates select="*"/>]</xsl:if></xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <chapter>
      <section>
        <paragraph>Nonsense</paragraph>
        <paragraph>Nonsense</paragraph>
        <paragraph>Nonsense</paragraph>
      </section>
      <section>
        <paragraph>Nonsense</paragraph>
        <paragraph>Nonsense</paragraph>
        <paragraph>Nonsense</paragraph>
      </section>
      <section>
        <paragraph>Nonsense</paragraph>
        <paragraph>Nonsense</paragraph>
        <paragraph>Nonsense</paragraph>
      </section>
    </chapter>
  </root>
}

test("counting, all sorts of levels, no count attribute")
{
  verify(document.documentElement.textContent == "s(1)m(1)a(1)[s(1)m(1)a(1)[s(1)m(1)a(1)s(2)m(2)a(2)s(3)m(3)a(3)]s(2)m(2)a(2)[s(1)m(1)a(4)s(2)m(2)a(5)s(3)m(3)a(6)]s(3)m(3)a(3)[s(1)m(1)a(7)s(2)m(2)a(8)s(3)m(3)a(9)]]");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:key name="k1" match="item" use="@name"/>
    <xsl:template match="root">
      <root>(item1:<xsl:value-of select="key('k1', 'item1')/@value"/>)(item2:<xsl:value-of select="key('k1', 'item2')/@value"/>)(item3:<xsl:value-of select="key('k1', 'item3')/@value"/>)</root>
    </xsl:template>
  </xsl:stylesheet>
}

source
{
  <root>
    <item name="item1" value="value1"/>
    <item name="item3" value="value3"/>
    <item name="item2" value="value2"/>
  </root>
}

test("searching1")
{
  verify(document.documentElement.textContent == "(item1:value1)(item2:value2)(item3:value3)");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:key name="k1" match="item | item/@name" use="string()"/>
    <xsl:template match="root">
      <root><xsl:apply-templates select="//item | //item/@name"/></root>
    </xsl:template>
    <xsl:template match="key('k1', 'value1')">v1</xsl:template>
    <xsl:template match="key('k1', 'value2')">v2</xsl:template>
    <xsl:template match="key('k1', 'value3')">v3</xsl:template>
    <xsl:template match="key('k1', 'item1')">n1</xsl:template>
    <xsl:template match="key('k1', 'item2')">n2</xsl:template>
    <xsl:template match="key('k1', 'item3')">n3</xsl:template>
  </xsl:stylesheet>
}

source
{
  <root xmlns:prefix="uri">
    <item name="item1">value1</item>
    <item name="item3">value3</item>
    <item name="item2">value2</item>
  </root>
}

test("searching2")
{
  verify(document.documentElement.textContent == "v1n1v3n3v2n2");
}

stylesheet
{
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="root">
      <root><xsl:apply-templates select="node()"/></root>
    </xsl:template>
    <xsl:template match="root/processing-instruction()">(wild)</xsl:template>
    <xsl:template match="root/processing-instruction('target1')">(target1)</xsl:template>
    <xsl:template match="root/processing-instruction('target2')">(target2)</xsl:template>
    <xsl:template match="text()"/>
  </xsl:stylesheet>
}

source
{
  <root>
    <?target1?>
    <?target2?>
    <?target3?>
  </root>
}

test("processing-instruction()")
{
  verify(document.documentElement.textContent == "(target1)(target2)(wild)");
}

