/* -*- mode: c++ -*- */

group "XPath.expressions.comparison.boolean";

require init;
require XPATH_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<boolean>"
      "<true><yes/></true>"
      "<false/>"
    "</boolean>"
    "<string>"
      "<true>string</true>"
      "<false></false>"
    "</string>"
    "<number>"
      "<true>1</true>"
      "<false>0</false>"
    "</number>"
    "<node-set>"
      "<true><yes/></true>"
      "<false/>"
    "</node-set>"
  "</root>"
}

/* boolean=constant boolean */
test_equal (                              "boolean(//boolean/true/*)=true()",
            XPath_TestBoolean (state.doc, "boolean(//boolean/true/*)=true()", TRUE),
            "ok");
test_equal (                              "boolean(//boolean/false/*)=false()",
            XPath_TestBoolean (state.doc, "boolean(//boolean/false/*)=false()", TRUE),
            "ok");
test_equal (                              "boolean(//boolean/true/*)=false()",
            XPath_TestBoolean (state.doc, "boolean(//boolean/true/*)=false()", FALSE),
            "ok");
test_equal (                              "boolean(//boolean/false/*)=true()",
            XPath_TestBoolean (state.doc, "boolean(//boolean/false/*)=true()", FALSE),
            "ok");

/* boolean!=constant boolean */
test_equal (                              "boolean(//boolean/true/*)!=true()",
            XPath_TestBoolean (state.doc, "boolean(//boolean/true/*)!=true()", FALSE),
            "ok");
test_equal (                              "boolean(//boolean/false/*)!=false()",
            XPath_TestBoolean (state.doc, "boolean(//boolean/false/*)!=false()", FALSE),
            "ok");
test_equal (                              "boolean(//boolean/true/*)!=false()",
            XPath_TestBoolean (state.doc, "boolean(//boolean/true/*)!=false()", TRUE),
            "ok");
test_equal (                              "boolean(//boolean/false/*)!=true()",
            XPath_TestBoolean (state.doc, "boolean(//boolean/false/*)!=true()", TRUE),
            "ok");

/* boolean=boolean */
test_equal (                              "boolean(//boolean/true/*)=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "boolean(//boolean/true/*)=boolean(//boolean/true/*)", TRUE),
            "ok");
test_equal (                              "boolean(//boolean/false/*)=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "boolean(//boolean/false/*)=boolean(//boolean/false/*)", TRUE),
            "ok");
test_equal (                              "boolean(//boolean/true/*)=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "boolean(//boolean/true/*)=boolean(//boolean/false/*)", FALSE),
            "ok");
test_equal (                              "boolean(//boolean/false/*)=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "boolean(//boolean/false/*)=boolean(//boolean/true/*)", FALSE),
            "ok");

/* boolean!=boolean */
test_equal (                              "boolean(//boolean/true/*)!=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "boolean(//boolean/true/*)!=boolean(//boolean/true/*)", FALSE),
            "ok");
test_equal (                              "boolean(//boolean/false/*)!=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "boolean(//boolean/false/*)!=boolean(//boolean/false/*)", FALSE),
            "ok");
test_equal (                              "boolean(//boolean/true/*)!=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "boolean(//boolean/true/*)!=boolean(//boolean/false/*)", TRUE),
            "ok");
test_equal (                              "boolean(//boolean/false/*)!=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "boolean(//boolean/false/*)!=boolean(//boolean/true/*)", TRUE),
            "ok");

/* string=constant boolean */
test_equal (                              "string(//string/true)=true()",
            XPath_TestBoolean (state.doc, "string(//string/true)=true()", TRUE),
            "ok");
test_equal (                              "string(//string/true)=false()",
            XPath_TestBoolean (state.doc, "string(//string/true)=false()", FALSE),
            "ok");
test_equal (                              "string(//string/false)=false()",
            XPath_TestBoolean (state.doc, "string(//string/false)=false()", TRUE),
            "ok");
test_equal (                              "string(//string/false)=true()",
            XPath_TestBoolean (state.doc, "string(//string/false)=true()", FALSE),
            "ok");

/* string!=constant boolean */
test_equal (                              "string(//string/true)!=true()",
            XPath_TestBoolean (state.doc, "string(//string/true)!=true()", FALSE),
            "ok");
test_equal (                              "string(//string/true)!=false()",
            XPath_TestBoolean (state.doc, "string(//string/true)!=false()", TRUE),
            "ok");
test_equal (                              "string(//string/false)!=false()",
            XPath_TestBoolean (state.doc, "string(//string/false)!=false()", FALSE),
            "ok");
test_equal (                              "string(//string/false)!=true()",
            XPath_TestBoolean (state.doc, "string(//string/false)!=true()", TRUE),
            "ok");

/* string=boolean */
test_equal (                              "string(//string/true)=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "string(//string/true)=boolean(//boolean/true/*)", TRUE),
            "ok");
test_equal (                              "string(//string/true)=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "string(//string/true)=boolean(//boolean/false/*)", FALSE),
            "ok");
test_equal (                              "string(//string/false)=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "string(//string/false)=boolean(//boolean/false/*)", TRUE),
            "ok");
test_equal (                              "string(//string/false)=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "string(//string/false)=boolean(//boolean/true/*)", FALSE),
            "ok");

/* string!=boolean */
test_equal (                              "string(//string/true)!=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "string(//string/true)!=boolean(//boolean/true/*)", FALSE),
            "ok");
test_equal (                              "string(//string/true)!=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "string(//string/true)!=boolean(//boolean/false/*)", TRUE),
            "ok");
test_equal (                              "string(//string/false)!=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "string(//string/false)!=boolean(//boolean/false/*)", FALSE),
            "ok");
test_equal (                              "string(//string/false)!=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "string(//string/false)!=boolean(//boolean/true/*)", TRUE),
            "ok");

/* number=constant boolean */
test_equal (                              "number(//number/true)=true()",
            XPath_TestBoolean (state.doc, "number(//number/true)=true()", TRUE),
            "ok");
test_equal (                              "number(//number/true)=false()",
            XPath_TestBoolean (state.doc, "number(//number/true)=false()", FALSE),
            "ok");
test_equal (                              "number(//number/false)=false()",
            XPath_TestBoolean (state.doc, "number(//number/false)=false()", TRUE),
            "ok");
test_equal (                              "number(//number/false)=true()",
            XPath_TestBoolean (state.doc, "number(//number/false)=true()", FALSE),
            "ok");

/* number!=constant boolean */
test_equal (                              "number(//number/true)!=true()",
            XPath_TestBoolean (state.doc, "number(//number/true)!=true()", FALSE),
            "ok");
test_equal (                              "number(//number/true)!=false()",
            XPath_TestBoolean (state.doc, "number(//number/true)!=false()", TRUE),
            "ok");
test_equal (                              "number(//number/false)!=false()",
            XPath_TestBoolean (state.doc, "number(//number/false)!=false()", FALSE),
            "ok");
test_equal (                              "number(//number/false)!=true()",
            XPath_TestBoolean (state.doc, "number(//number/false)!=true()", TRUE),
            "ok");

/* number=boolean */
test_equal (                              "number(//number/true)=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "number(//number/true)=boolean(//boolean/true/*)", TRUE),
            "ok");
test_equal (                              "number(//number/true)=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "number(//number/true)=boolean(//boolean/false/*)", FALSE),
            "ok");
test_equal (                              "number(//number/false)=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "number(//number/false)=boolean(//boolean/false/*)", TRUE),
            "ok");
test_equal (                              "number(//number/false)=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "number(//number/false)=boolean(//boolean/true/*)", FALSE),
            "ok");

/* number!=boolean */
test_equal (                              "number(//number/true)!=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "number(//number/true)!=boolean(//boolean/true/*)", FALSE),
            "ok");
test_equal (                              "number(//number/true)!=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "number(//number/true)!=boolean(//boolean/false/*)", TRUE),
            "ok");
test_equal (                              "number(//number/false)!=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "number(//number/false)!=boolean(//boolean/false/*)", FALSE),
            "ok");
test_equal (                              "number(//number/false)!=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "number(//number/false)!=boolean(//boolean/true/*)", TRUE),
            "ok");

/* node-set=constant boolean */
test_equal (                              "//node-set/true/*=true()",
            XPath_TestBoolean (state.doc, "//node-set/true/*=true()", TRUE),
            "ok");
test_equal (                              "//node-set/true/*=false()",
            XPath_TestBoolean (state.doc, "//node-set/true/*=false()", FALSE),
            "ok");
test_equal (                              "//node-set/false/*=false()",
            XPath_TestBoolean (state.doc, "//node-set/false/*=false()", TRUE),
            "ok");
test_equal (                              "//node-set/false/*=true()",
            XPath_TestBoolean (state.doc, "//node-set/false/*=true()", FALSE),
            "ok");

/* node-set!=constant boolean */
test_equal (                              "//node-set/true/*!=true()",
            XPath_TestBoolean (state.doc, "//node-set/true/*!=true()", FALSE),
            "ok");
test_equal (                              "//node-set/true/*!=false()",
            XPath_TestBoolean (state.doc, "//node-set/true/*!=false()", TRUE),
            "ok");
test_equal (                              "//node-set/false/*!=false()",
            XPath_TestBoolean (state.doc, "//node-set/false/*!=false()", FALSE),
            "ok");
test_equal (                              "//node-set/false/*!=true()",
            XPath_TestBoolean (state.doc, "//node-set/false/*!=true()", TRUE),
            "ok");

/* node-set=boolean */
test_equal (                              "//node-set/true/*=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "//node-set/true/*=boolean(//boolean/true/*)", TRUE),
            "ok");
test_equal (                              "//node-set/true/*=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "//node-set/true/*=boolean(//boolean/false/*)", FALSE),
            "ok");
test_equal (                              "//node-set/false/*=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "//node-set/false/*=boolean(//boolean/false/*)", TRUE),
            "ok");
test_equal (                              "//node-set/false/*=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "//node-set/false/*=boolean(//boolean/true/*)", FALSE),
            "ok");

/* node-set!=boolean */
test_equal (                              "//node-set/true/*!=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "//node-set/true/*!=boolean(//boolean/true/*)", FALSE),
            "ok");
test_equal (                              "//node-set/true/*!=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "//node-set/true/*!=boolean(//boolean/false/*)", TRUE),
            "ok");
test_equal (                              "//node-set/false/*!=boolean(//boolean/false/*)",
            XPath_TestBoolean (state.doc, "//node-set/false/*!=boolean(//boolean/false/*)", FALSE),
            "ok");
test_equal (                              "//node-set/false/*!=boolean(//boolean/true/*)",
            XPath_TestBoolean (state.doc, "//node-set/false/*!=boolean(//boolean/true/*)", TRUE),
            "ok");


group "XPath.expressions.comparison.string";

require init;
require XPATH_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<string>"
      "<foo>foo</foo>"
      "<bar>bar</bar>"
      "<empty/>"
    "</string>"
    "<node-set>"
      "<one-foo><value>xxx</value><value>foo</value><value>yyy</value></one-foo>"
      "<one-bar><value>xxx</value><value>bar</value><value>yyy</value></one-bar>"
      "<one-empty><value>xxx</value><value/><value>yyy</value></one-empty>"
      "<all-foo><value>foo</value><value>foo</value><value>foo</value></all-foo>"
      "<all-bar><value>bar</value><value>bar</value><value>bar</value></all-bar>"
      "<all-empty><value/><value/><value/></all-empty>"
    "</node-set>"
  "</root>"
}

/* string=constant string */
test_equal (                              "string(//string/foo/text())='foo'",
            XPath_TestBoolean (state.doc, "string(//string/foo/text())='foo'", TRUE),
            "ok");
test_equal (                              "string(//string/bar/text())='bar'",
            XPath_TestBoolean (state.doc, "string(//string/bar/text())='bar'", TRUE),
            "ok");
test_equal (                              "string(//string/empty)=''",
            XPath_TestBoolean (state.doc, "string(//string/empty)=''", TRUE),
            "ok");
test_equal (                              "string(//string/foo/text())='bar'",
            XPath_TestBoolean (state.doc, "string(//string/foo/text())='bar'", FALSE),
            "ok");
test_equal (                              "string(//string/foo/text())='FOO'",
            XPath_TestBoolean (state.doc, "string(//string/foo/text())='FOO'", FALSE),
            "ok");
test_equal (                              "string(//string/bar/text())='foo'",
            XPath_TestBoolean (state.doc, "string(//string/bar/text())='foo'", FALSE),
            "ok");
test_equal (                              "string(//string/empty)='something'",
            XPath_TestBoolean (state.doc, "string(//string/empty)='something'", FALSE),
            "ok");

/* string!=constant string */
test_equal (                              "string(//string/foo/text())!='foo'",
            XPath_TestBoolean (state.doc, "string(//string/foo/text())!='foo'", FALSE),
            "ok");
test_equal (                              "string(//string/bar/text())!='bar'",
            XPath_TestBoolean (state.doc, "string(//string/bar/text())!='bar'", FALSE),
            "ok");
test_equal (                              "string(//string/empty)!=''",
            XPath_TestBoolean (state.doc, "string(//string/empty)!=''", FALSE),
            "ok");
test_equal (                              "string(//string/foo/text())!='bar'",
            XPath_TestBoolean (state.doc, "string(//string/foo/text())!='bar'", TRUE),
            "ok");
test_equal (                              "string(//string/bar/text())!='foo'",
            XPath_TestBoolean (state.doc, "string(//string/bar/text())!='foo'", TRUE),
            "ok");
test_equal (                              "string(//string/empty)!='something'",
            XPath_TestBoolean (state.doc, "string(//string/empty)!='something'", TRUE),
            "ok");

/* string=string */
test_equal (                              "string(//string/foo/text())=string(//string/foo/text())",
            XPath_TestBoolean (state.doc, "string(//string/foo/text())=string(//string/foo/text())", TRUE),
            "ok");
test_equal (                              "string(//string/bar/text())=string(//string/bar/text())",
            XPath_TestBoolean (state.doc, "string(//string/bar/text())=string(//string/bar/text())", TRUE),
            "ok");
test_equal (                              "string(//string/empty)=string(//string/empty)",
            XPath_TestBoolean (state.doc, "string(//string/empty)=string(//string/empty)", TRUE),
            "ok");
test_equal (                              "string(//string/foo/text())=string(//string/bar/text())",
            XPath_TestBoolean (state.doc, "string(//string/foo/text())=string(//string/bar/text())", FALSE),
            "ok");
test_equal (                              "string(//string/bar/text())=string(//string/foo/text())",
            XPath_TestBoolean (state.doc, "string(//string/bar/text())=string(//string/foo/text())", FALSE),
            "ok");
test_equal (                              "string(//string/empty)=string(//string/foo/text())",
            XPath_TestBoolean (state.doc, "string(//string/empty)=string(//string/foo/text())", FALSE),
            "ok");

/* string!=string */
test_equal (                              "string(//string/foo/text())!=string(//string/foo/text())",
            XPath_TestBoolean (state.doc, "string(//string/foo/text())!=string(//string/foo/text())", FALSE),
            "ok");
test_equal (                              "string(//string/bar/text())!=string(//string/bar/text())",
            XPath_TestBoolean (state.doc, "string(//string/bar/text())!=string(//string/bar/text())", FALSE),
            "ok");
test_equal (                              "string(//string/empty)!=string(//string/empty)",
            XPath_TestBoolean (state.doc, "string(//string/empty)!=string(//string/empty)", FALSE),
            "ok");
test_equal (                              "string(//string/foo/text())!=string(//string/bar/text())",
            XPath_TestBoolean (state.doc, "string(//string/foo/text())!=string(//string/bar/text())", TRUE),
            "ok");
test_equal (                              "string(//string/bar/text())!=string(//string/foo/text())",
            XPath_TestBoolean (state.doc, "string(//string/bar/text())!=string(//string/foo/text())", TRUE),
            "ok");
test_equal (                              "string(//string/empty)!=string(//string/foo/text())",
            XPath_TestBoolean (state.doc, "string(//string/empty)!=string(//string/foo/text())", TRUE),
            "ok");

/* node-set=constant string */
test_equal (                              "//node-set/one-foo/*='foo'",
            XPath_TestBoolean (state.doc, "//node-set/one-foo/*='foo'", TRUE),
            "ok");
test_equal (                              "//node-set/one-foo/*='bar'",
            XPath_TestBoolean (state.doc, "//node-set/one-foo/*='bar'", FALSE),
            "ok");
test_equal (                              "//node-set/one-bar/*='bar'",
            XPath_TestBoolean (state.doc, "//node-set/one-bar/*='bar'", TRUE),
            "ok");
test_equal (                              "//node-set/one-bar/*='foo'",
            XPath_TestBoolean (state.doc, "//node-set/one-bar/*='foo'", FALSE),
            "ok");
test_equal (                              "//node-set/all-foo/*='foo'",
            XPath_TestBoolean (state.doc, "//node-set/all-foo/*='foo'", TRUE),
            "ok");
test_equal (                              "//node-set/all-foo/*='bar'",
            XPath_TestBoolean (state.doc, "//node-set/all-foo/*='bar'", FALSE),
            "ok");
test_equal (                              "//node-set/all-bar/*='bar'",
            XPath_TestBoolean (state.doc, "//node-set/all-bar/*='bar'", TRUE),
            "ok");
test_equal (                              "//node-set/all-bar/*='foo'",
            XPath_TestBoolean (state.doc, "//node-set/all-bar/*='foo'", FALSE),
            "ok");

/* node-set!=constant string */
test_equal (                              "//node-set/one-foo/*!='foo'",
            XPath_TestBoolean (state.doc, "//node-set/one-foo/*!='foo'", TRUE),
            "ok");
test_equal (                              "//node-set/one-foo/*!='bar'",
            XPath_TestBoolean (state.doc, "//node-set/one-foo/*!='bar'", TRUE),
            "ok");
test_equal (                              "//node-set/one-bar/*!='bar'",
            XPath_TestBoolean (state.doc, "//node-set/one-bar/*!='bar'", TRUE),
            "ok");
test_equal (                              "//node-set/one-bar/*!='foo'",
            XPath_TestBoolean (state.doc, "//node-set/one-bar/*!='foo'", TRUE),
            "ok");
test_equal (                              "//node-set/all-foo/*!='foo'",
            XPath_TestBoolean (state.doc, "//node-set/all-foo/*!='foo'", FALSE),
            "ok");
test_equal (                              "//node-set/all-foo/*!='bar'",
            XPath_TestBoolean (state.doc, "//node-set/all-foo/*!='bar'", TRUE),
            "ok");
test_equal (                              "//node-set/all-bar/*!='bar'",
            XPath_TestBoolean (state.doc, "//node-set/all-bar/*!='bar'", FALSE),
            "ok");
test_equal (                              "//node-set/all-bar/*!='foo'",
            XPath_TestBoolean (state.doc, "//node-set/all-bar/*!='foo'", TRUE),
            "ok");

/* node-set=constant string */
test_equal (                              "//node-set/one-foo/*=string(//string/foo/text())",
            XPath_TestBoolean (state.doc, "//node-set/one-foo/*=string(//string/foo/text())", TRUE),
            "ok");
test_equal (                              "//node-set/one-foo/*=string(//string/bar/text())",
            XPath_TestBoolean (state.doc, "//node-set/one-foo/*=string(//string/bar/text())", FALSE),
            "ok");
test_equal (                              "//node-set/one-bar/*=string(//string/bar/text())",
            XPath_TestBoolean (state.doc, "//node-set/one-bar/*=string(//string/bar/text())", TRUE),
            "ok");
test_equal (                              "//node-set/one-bar/*=string(//string/foo/text())",
            XPath_TestBoolean (state.doc, "//node-set/one-bar/*=string(//string/foo/text())", FALSE),
            "ok");
test_equal (                              "//node-set/all-foo/*=string(//string/foo/text())",
            XPath_TestBoolean (state.doc, "//node-set/all-foo/*=string(//string/foo/text())", TRUE),
            "ok");
test_equal (                              "//node-set/all-foo/*=string(//string/bar/text())",
            XPath_TestBoolean (state.doc, "//node-set/all-foo/*=string(//string/bar/text())", FALSE),
            "ok");
test_equal (                              "//node-set/all-bar/*=string(//string/bar/text())",
            XPath_TestBoolean (state.doc, "//node-set/all-bar/*=string(//string/bar/text())", TRUE),
            "ok");
test_equal (                              "//node-set/all-bar/*=string(//string/foo/text())",
            XPath_TestBoolean (state.doc, "//node-set/all-bar/*=string(//string/foo/text())", FALSE),
            "ok");

/* node-set!=constant string */
test_equal (                              "//node-set/one-foo/*!=string(//string/foo/text())",
            XPath_TestBoolean (state.doc, "//node-set/one-foo/*!=string(//string/foo/text())", TRUE),
            "ok");
test_equal (                              "//node-set/one-foo/*!=string(//string/bar/text())",
            XPath_TestBoolean (state.doc, "//node-set/one-foo/*!=string(//string/bar/text())", TRUE),
            "ok");
test_equal (                              "//node-set/one-bar/*!=string(//string/bar/text())",
            XPath_TestBoolean (state.doc, "//node-set/one-bar/*!=string(//string/bar/text())", TRUE),
            "ok");
test_equal (                              "//node-set/one-bar/*!=string(//string/foo/text())",
            XPath_TestBoolean (state.doc, "//node-set/one-bar/*!=string(//string/foo/text())", TRUE),
            "ok");
test_equal (                              "//node-set/all-foo/*!=string(//string/foo/text())",
            XPath_TestBoolean (state.doc, "//node-set/all-foo/*!=string(//string/foo/text())", FALSE),
            "ok");
test_equal (                              "//node-set/all-foo/*!=string(//string/bar/text())",
            XPath_TestBoolean (state.doc, "//node-set/all-foo/*!=string(//string/bar/text())", TRUE),
            "ok");
test_equal (                              "//node-set/all-bar/*!=string(//string/bar/text())",
            XPath_TestBoolean (state.doc, "//node-set/all-bar/*!=string(//string/bar/text())", FALSE),
            "ok");
test_equal (                              "//node-set/all-bar/*!=string(//string/foo/text())",
            XPath_TestBoolean (state.doc, "//node-set/all-bar/*!=string(//string/foo/text())", TRUE),
            "ok");


group "XPath.expressions.comparison.node-set";

require init;
require XPATH_SUPPORT;

include "modules/xpath/xpath.h";
include "modules/xpath/src/xpsthelpers.h";

xml
{
  "<?xml version='1.0'?>"
  "<!DOCTYPE root>"
  "<root>"
    "<left>"
      "<one-foo><value>left-foo-xxx</value><value>foo</value><value>left-foo-yyy</value></one-foo>"
      "<one-bar><value>left-bar-xxx</value><value>bar</value><value>left-bar-yyy</value></one-bar>"
      "<one-empty><value>left-empty-xxx</value><value/><value>left-empty-yyy</value></one-empty>"
      "<all-foo><value>foo</value><value>foo</value><value>foo</value></all-foo>"
      "<all-bar><value>bar</value><value>bar</value><value>bar</value></all-bar>"
      "<all-empty><value/><value/><value/></all-empty>"
    "</left>"
    "<right>"
      "<one-foo><value>right-foo-xxx</value><value>foo</value><value>right-foo-yyy</value></one-foo>"
      "<one-bar><value>right-bar-xxx</value><value>bar</value><value>right-bar-yyy</value></one-bar>"
      "<one-empty><value>right-empty-xxx</value><value/><value>right-empty-yyy</value></one-empty>"
      "<all-foo><value>foo</value><value>foo</value><value>foo</value></all-foo>"
      "<all-bar><value>bar</value><value>bar</value><value>bar</value></all-bar>"
      "<all-empty><value/><value/><value/></all-empty>"
    "</right>"
  "</root>"
}

/* node-set=node-set */
test_equal (                              "//left/one-foo/*=//right/one-foo/*",
            XPath_TestBoolean (state.doc, "//left/one-foo/*=//right/one-foo/*", TRUE),
            "ok");
test_equal (                              "//left/one-bar/*=//right/one-bar/*",
            XPath_TestBoolean (state.doc, "//left/one-bar/*=//right/one-bar/*", TRUE),
            "ok");
test_equal (                              "//left/one-empty/*=//right/one-empty/*",
            XPath_TestBoolean (state.doc, "//left/one-empty/*=//right/one-empty/*", TRUE),
            "ok");
test_equal (                              "//left/one-foo/*=//right/one-bar/*",
            XPath_TestBoolean (state.doc, "//left/one-foo/*=//right/one-bar/*", FALSE),
            "ok");
test_equal (                              "//left/one-bar/*=//right/one-foo/*",
            XPath_TestBoolean (state.doc, "//left/one-bar/*=//right/one-foo/*", FALSE),
            "ok");
test_equal (                              "//left/one-empty/*=//right/one-foo/*",
            XPath_TestBoolean (state.doc, "//left/one-empty/*=//right/one-foo/*", FALSE),
            "ok");
test_equal (                              "//left/all-foo/*=//right/one-foo/*",
            XPath_TestBoolean (state.doc, "//left/all-foo/*=//right/one-foo/*", TRUE),
            "ok");
test_equal (                              "//left/all-bar/*=//right/one-bar/*",
            XPath_TestBoolean (state.doc, "//left/all-bar/*=//right/one-bar/*", TRUE),
            "ok");
test_equal (                              "//left/all-empty/*=//right/one-empty/*",
            XPath_TestBoolean (state.doc, "//left/all-empty/*=//right/one-empty/*", TRUE),
            "ok");
test_equal (                              "//left/all-foo/*=//right/one-bar/*",
            XPath_TestBoolean (state.doc, "//left/all-foo/*=//right/one-bar/*", FALSE),
            "ok");
test_equal (                              "//left/all-bar/*=//right/one-foo/*",
            XPath_TestBoolean (state.doc, "//left/all-bar/*=//right/one-foo/*", FALSE),
            "ok");
test_equal (                              "//left/all-empty/*=//right/one-foo/*",
            XPath_TestBoolean (state.doc, "//left/all-empty/*=//right/one-foo/*", FALSE),
            "ok");
test_equal (                              "//left/all-foo/*=//right/all-foo/*",
            XPath_TestBoolean (state.doc, "//left/all-foo/*=//right/all-foo/*", TRUE),
            "ok");
test_equal (                              "//left/all-bar/*=//right/all-bar/*",
            XPath_TestBoolean (state.doc, "//left/all-bar/*=//right/all-bar/*", TRUE),
            "ok");
test_equal (                              "//left/all-empty/*=//right/all-empty/*",
            XPath_TestBoolean (state.doc, "//left/all-empty/*=//right/all-empty/*", TRUE),
            "ok");
test_equal (                              "//left/all-foo/*=//right/all-bar/*",
            XPath_TestBoolean (state.doc, "//left/all-foo/*=//right/all-bar/*", FALSE),
            "ok");
test_equal (                              "//left/all-bar/*=//right/all-foo/*",
            XPath_TestBoolean (state.doc, "//left/all-bar/*=//right/all-foo/*", FALSE),
            "ok");
test_equal (                              "//left/all-empty/*=//right/all-foo/*",
            XPath_TestBoolean (state.doc, "//left/all-empty/*=//right/all-foo/*", FALSE),
            "ok");

/* node-set!=node-set */
test_equal (                              "//left/one-foo/*!=//right/one-foo/*",
            XPath_TestBoolean (state.doc, "//left/one-foo/*!=//right/one-foo/*", TRUE),
            "ok");
test_equal (                              "//left/one-bar/*!=//right/one-bar/*",
            XPath_TestBoolean (state.doc, "//left/one-bar/*!=//right/one-bar/*", TRUE),
            "ok");
test_equal (                              "//left/one-empty/*!=//right/one-empty/*",
            XPath_TestBoolean (state.doc, "//left/one-empty/*!=//right/one-empty/*", TRUE),
            "ok");
test_equal (                              "//left/one-foo/*!=//right/one-bar/*",
            XPath_TestBoolean (state.doc, "//left/one-foo/*!=//right/one-bar/*", TRUE),
            "ok");
test_equal (                              "//left/one-bar/*!=//right/one-foo/*",
            XPath_TestBoolean (state.doc, "//left/one-bar/*!=//right/one-foo/*", TRUE),
            "ok");
test_equal (                              "//left/one-empty/*!=//right/one-foo/*",
            XPath_TestBoolean (state.doc, "//left/one-empty/*!=//right/one-foo/*", TRUE),
            "ok");
test_equal (                              "//left/all-foo/*!=//right/one-foo/*",
            XPath_TestBoolean (state.doc, "//left/all-foo/*!=//right/one-foo/*", TRUE),
            "ok");
test_equal (                              "//left/all-bar/*!=//right/one-bar/*",
            XPath_TestBoolean (state.doc, "//left/all-bar/*!=//right/one-bar/*", TRUE),
            "ok");
test_equal (                              "//left/all-empty/*!=//right/one-empty/*",
            XPath_TestBoolean (state.doc, "//left/all-empty/*!=//right/one-empty/*", TRUE),
            "ok");
test_equal (                              "//left/all-foo/*!=//right/one-bar/*",
            XPath_TestBoolean (state.doc, "//left/all-foo/*!=//right/one-bar/*", TRUE),
            "ok");
test_equal (                              "//left/all-bar/*!=//right/one-foo/*",
            XPath_TestBoolean (state.doc, "//left/all-bar/*!=//right/one-foo/*", TRUE),
            "ok");
test_equal (                              "//left/all-empty/*!=//right/one-foo/*",
            XPath_TestBoolean (state.doc, "//left/all-empty/*!=//right/one-foo/*", TRUE),
            "ok");
test_equal (                              "//left/all-foo/*!=//right/all-foo/*",
            XPath_TestBoolean (state.doc, "//left/all-foo/*!=//right/all-foo/*", FALSE),
            "ok");
test_equal (                              "//left/all-bar/*!=//right/all-bar/*",
            XPath_TestBoolean (state.doc, "//left/all-bar/*!=//right/all-bar/*", FALSE),
            "ok");
test_equal (                              "//left/all-empty/*!=//right/all-empty/*",
            XPath_TestBoolean (state.doc, "//left/all-empty/*!=//right/all-empty/*", FALSE),
            "ok");
test_equal (                              "//left/all-foo/*!=//right/all-bar/*",
            XPath_TestBoolean (state.doc, "//left/all-foo/*!=//right/all-bar/*", TRUE),
            "ok");
test_equal (                              "//left/all-bar/*!=//right/all-foo/*",
            XPath_TestBoolean (state.doc, "//left/all-bar/*!=//right/all-foo/*", TRUE),
            "ok");
test_equal (                              "//left/all-empty/*!=//right/all-foo/*",
            XPath_TestBoolean (state.doc, "//left/all-empty/*!=//right/all-foo/*", TRUE),
            "ok");
