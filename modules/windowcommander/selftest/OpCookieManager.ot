/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; -*-
**
** Copyright (C) 2002-2008 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "windowcommander.OpCookieManager";

require initialization;

include "modules/windowcommander/OpCookieManager.h";
include "modules/url/url_man.h";

global
{
#ifdef WIC_COOKIE_MANAGER_LISTENER
	class CookieManagerListener : public OpCookieManagerListener
	{
		BOOL expect_success, expect_failure;
	public:
		CookieManagerListener() : expect_success(FALSE), expect_failure(FALSE) {}
		void ExpectSuccess() { expect_success = TRUE; }
		void ExpectFailure() { expect_failure = TRUE; }
		void OnCookieFileSaveFinished(BOOL successful, BOOL requested_by_platform)
		{
			if (requested_by_platform)
			{
				if (expect_success)
				{
					if (successful)
						ST_passed();
					else
						ST_failed("Expected successful cookie save");
				}
				else if (expect_failure)
				{
					if (successful)
						ST_passed();
					else
						ST_failed("Expected unsuccessful cookie save");
				}
				else
					ST_failed("Unexpected callback");

				expect_success = FALSE;
				expect_failure = FALSE;
			}
		}
	};

	CookieManagerListener cookie_manager_listener;
#endif
}

test("check initial state")
{
#ifdef _ASK_COOKIE
	verify(g_cookie_API->GetCookieListener() != NULL);
	g_cookie_API->SetCookieListener(NULL);
	verify(g_cookie_API->GetCookieListener() != NULL);
#endif
#ifdef WIC_COOKIES_LISTENER
	verify(g_cookie_API->GetCookieIteratorListener() != NULL);
	g_cookie_API->SetCookieIteratorListener(NULL);
	verify(g_cookie_API->GetCookieIteratorListener() != NULL);
#endif
#ifdef WIC_COOKIE_MANAGER_LISTENER
	verify(g_cookie_API->GetCookieManagerListener() != NULL);
	g_cookie_API->SetCookieManagerListener(NULL);
	verify(g_cookie_API->GetCookieManagerListener() != NULL);
#endif
}

test("set OpCookieManagerListener")
	require success "check initial state";
	require WIC_COOKIE_MANAGER_LISTENER;
{
	g_cookie_API->SetCookieManagerListener(&cookie_manager_listener);
	verify(g_cookie_API->GetCookieManagerListener() == &cookie_manager_listener);
}

test("RequestSavingCookies")
	require success "set OpCookieManagerListener";
	require WIC_COOKIE_MANAGER_LISTENER;
	require COOKIE_MANUAL_MANAGEMENT;
	async;
{
	cookie_manager_listener.ExpectSuccess();
	g_cookie_API->RequestSavingCookies();
}

exit
{
#ifdef WIC_COOKIE_MANAGER_LISTENER
	g_cookie_API->SetCookieManagerListener(NULL);
#endif
}
