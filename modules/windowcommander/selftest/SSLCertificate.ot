/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; -*-
**
** Copyright (C) 2002-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "windowcommander.SSLCertificate";

require initialization;
require _SSL_SUPPORT_ && defined _NATIVE_SSL_SUPPORT_ || defined WIC_USE_SSL_LISTENER;

include "modules/windowcommander/wic_globals.h";
include "modules/windowcommander/OpWindowCommander.h";
include "modules/windowcommander/OpWindowCommanderManager.h";
include "modules/windowcommander/src/WindowCommander.h";
include "modules/windowcommander/src/WindowCommanderManager.h";
include "modules/dochand/win.h";
include "modules/dochand/winman.h";

language C++;

global
{
	class TestSSLListener : public OpSSLListener
	{
	public:
		TestSSLListener() {}
		~TestSSLListener() {}

		void OnCertificateBrowsingNeeded(OpWindowCommander* wic, SSLCertificateContext* context, SSLCertificateReason reason, SSLCertificateOption options)
		{ context->OnCertificateBrowsingDone(FALSE, SSL_CERT_OPTION_NONE); }

		void OnCertificateBrowsingCancel(OpWindowCommander* wic, SSLCertificateContext* context)
		{ }

		void OnSecurityPasswordNeeded(OpWindowCommander* wic, SSLSecurityPasswordCallback* callback)
		{ callback->OnSecurityPasswordDone(FALSE, NULL, NULL); }

		void OnSecurityPasswordCancel(OpWindowCommander* wic, SSLSecurityPasswordCallback*)
		{ }

	};
}

test("Set/Get OpSSLListener")
{
	BOOL3 ignore = MAYBE;

	TestSSLListener ssl_listener1;
	Window *win1 = g_windowManager->GetAWindow(FALSE, ignore, ignore, 100, 200);
	verify(win1);
	win1->GetWindowCommander()->SetSSLListener(&ssl_listener1);

	TestSSLListener ssl_listener2;
	Window *win2 = g_windowManager->GetAWindow(FALSE, ignore, ignore, 100, 200);
	verify(win2);
	win2->GetWindowCommander()->SetSSLListener(&ssl_listener2);

	TestSSLListener ssl_global;
	g_windowCommanderManager->SetSSLListener(&ssl_global);

	verify(win1->GetWindowCommander()->GetSSLListener() == &ssl_global);
	verify(win2->GetWindowCommander()->GetSSLListener() == &ssl_global);

	g_windowCommanderManager->GetUiWindowListener()->CloseUiWindow(win1->GetWindowCommander());
	g_windowCommanderManager->GetUiWindowListener()->CloseUiWindow(win2->GetWindowCommander());
}
