/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*-
**
** Copyright (C) 1995-2007 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "content_filter";
require URL_FILTER;

include "modules/content_filter/content_filter.h";
include "modules/pi/OpSystemInfo.h";
include "modules/url/url2.h";
include "modules/url/url_man.h";

table Table_createfilter(const uni_char*, const uni_char*)
{
	// simple cases
	{ UNI_L("http://flash.vg.no/annonser/startour/startour_restplass.swf"), UNI_L("http://flash.vg.no/annonser/*") }
	{ UNI_L("http://ad2.se.thepiratebay.org/pokerclub.gif"), UNI_L("http://ad2.se.thepiratebay.org/pokerclub.gif*") }
	{ UNI_L("http://adcache.aftenposten.no/RealMedia/something/or/another/ad.gif"), UNI_L("http://adcache.aftenposten.no/RealMedia/*") }
	// slightly more advanced case. If the subpath consists of all numbers, replace it all
	{ UNI_L("http://ad.no.doubleclick.net/497214/someadd.gif"), UNI_L("http://ad.no.doubleclick.net/*") }
	{ UNI_L("http://ad.no.doubleclick.net/497214/subpath/someadd.gif"), UNI_L("http://ad.no.doubleclick.net/*") }
	// make sure we don't block the top level domain (which is www.opera.com in these tests)
	{ UNI_L("http://www.opera.com/ad.gif"), UNI_L("http://www.opera.com/ad.gif*") }
}

// should all be blocked
table Table_blocked(const uni_char*)
{
	{ UNI_L("http://ads.zmedia.com/somepage/somead.jpg") }
	{ UNI_L("http://ad.liveinternet.ru/yes.swf") }
	{ UNI_L("http://yallaballa.ad.liveinternet.ru/yes.swf") }
	{ UNI_L("http://www.ad.watch.impress.co.jp/no.swf") }
	{ UNI_L("http://ad.tv2.no/this/is/a/path/ad.gif") }
	{ UNI_L("http://adserv.tv2.no/this/is/a/path/ad.gif") }
	{ UNI_L("http://ads.tv2.no/this/is/a/path/ad.gif") }
	{ UNI_L("http://banner.tv2.no/this/is/a/path/ad.gif") }
	{ UNI_L("http://z.times.lv/this/is/a/path/ad.gif") }
	{ UNI_L("http://www.worldbe.com/this/is/a/path/ad.gif") }
}

// none of these should be blocked
table Table_not_blocked(const uni_char*)
{
	{ UNI_L("http://www.opera.com/download/somead.jpg") }
	{ UNI_L("http://www.vg.no/") }
	{ UNI_L("http://www.banner.com/download/somead.jpg") }
	{ UNI_L("http://www.cnn.com/download/somead.jpg") }
	{ UNI_L("http://my.opera.com/community/someimage.jpg") }
	{ UNI_L("http://dev.opera.com/") }
	{ UNI_L("http://news.com/") }
	{ UNI_L("ftp://ftp.news.com/") }
	{ UNI_L("ftp://ftp.opera.com/") }
	{ UNI_L("ftp.opera.com") }
	{ UNI_L("http://testYtest") }
	{ UNI_L("http://testY") }
	{ UNI_L("Ytest") }
	{ UNI_L("Y") }
}

table Table_corner_cases_blocked(const uni_char*)
{
	{ UNI_L("http://wwww.operablocked.com") }
	{ UNI_L("http://www1.operablocked.com") }
	{ UNI_L("ftp://operapass2operablocked.com") }
	{ UNI_L("ftp://ftp.operapass2bbblobbblockedddd.com") }
	{ UNI_L("http://testZZaa") }
	{ UNI_L("http://testZZ") }
	{ UNI_L("ZZaa") }
	{ UNI_L("ZZ") }
	{ UNI_L("LLLJKJKKLJLKJLLKLJJKKJJJKLLJJJ") }
	{ UNI_L("ftp://xyz.operapass8operapass8<>pp...ghjghj8bzzz") }
	{ UNI_L("ftp://xyz.operapass8<>pp...ghjghj8bzzz") }
	{ UNI_L("ftp://xyz.operapass8<>pp...ghjghj8b") }
	{ UNI_L("ftp://xyz.operapass8<>ppbz") }
	{ UNI_L("ftp://xyz.operapass8ppb") }
	{ UNI_L("http://testRtest") }
	{ UNI_L("http://testR") }
	{ UNI_L("Rtest") }
	{ UNI_L("R") }
	{ UNI_L("http://whiteblock1") }
	{ UNI_L("http://whiteblock2") }
}

table Table_corner_cases_not_blocked(const uni_char*)
{
	{ UNI_L("ftp://operapass1.com") }
	{ UNI_L("ftp://ftp.operapass2.com") }
	{ UNI_L("http://www.operapass2.com") }
	{ UNI_L("aaa://www.operapass5.com") }
	{ UNI_L("www.operapass6.com") }
	{ UNI_L("operapass7") }
	{ UNI_L("wwww.operapass7.com") }
	{ UNI_L("www.operapass7.comm") }
	{ UNI_L("http://www.operapass7.com") }
	{ UNI_L("LLLJMJMMLJLMJLLMLJJMMJJJMLLJJJ") }
	{ UNI_L("asdasdasAAAAAAAaAAAuyuy") }
	{ UNI_L("ftp://xyz.operapass8operapass8<>pp...ghjghj8azzz") }
	{ UNI_L("ftp://xyz.operapass8<>pp...ghjghj8azzz") }
	{ UNI_L("ftp://xyz.operapass8<>pp...ghjghj8a") }
	{ UNI_L("ftp://xyz.operapass8<>ppaz") }
	{ UNI_L("ftp://xyz.operapass8ppa") }
#ifdef CF_DONT_BLOCK_OPERA_PROTOCOLS
	{ UNI_L("opera:about") }
	{ UNI_L("about:opera") }
#endif
	{ UNI_L("http://whitepass1") }
	{ UNI_L("http://whitepass2") }
	{ UNI_L("data:R") }
}

table Table_corner_cases_neutral(const uni_char*)
{
	{ UNI_L("operapass6") }
	{ UNI_L("www.operapass6.comm") }
	{ UNI_L("http://www.operapass6.com") }
	{ UNI_L("http://www.operapass5.com") }
	{ UNI_L("LLLJJJMMMJJMJMMLMJJLLLLJJJ") }
	{ UNI_L("asdasdasAAAAAAAbAAAAuyuy") }
	{ UNI_L("wwww.operapass6.com") }
	{ UNI_L("http://testzzaa") }
	{ UNI_L("http://testzz") }
	{ UNI_L("zzaa") }
	{ UNI_L("zz") }
	{ UNI_L("LLLJJJKKKJJKJKKLKJJLLLLJJJ") }
	{ UNI_L("http://www.opera.com") }
}

global
{
	// Test lsitener to try RemoveListener
	class TestListener: public URLFilterListener
	{
	public:
		virtual void URLBlocked(const uni_char* url, OpWindowCommander* wic, DOMLoadContext *dom_ctx) { }
	};
	
	OP_STATUS SetupPathString(const uni_char *str) {
		OpString8 str8;
		
		str8.Set(str);
		
		output("\nOpening selftest file %s\n", str8.CStr());
		
		OpFile tmp;
		BOOL file_exists = FALSE;
		
		RETURN_IF_ERROR(tmp.Construct(str));
		RETURN_IF_ERROR(tmp.Exists(file_exists));
		
		if(!file_exists)
			return OpStatus::ERR;

		return OpStatus::OK;
	}

	BOOL CheckHash(const char *pattern, const char *hash_choice)
	{
		OpString hash_choice16;
		OpString pattern16;
		FilterURLnode node(TRUE);

#ifdef DEBUG_ENABLE_OPASSERT
		int len = op_strlen(hash_choice);

		OP_ASSERT(len==0 || len==2 || len==4 || len==6);
#endif // DEBUG_ENABLE_OPASSERT

		RETURN_VALUE_IF_ERROR(hash_choice16.Set(hash_choice), FALSE);
		RETURN_VALUE_IF_ERROR(pattern16.Set(pattern), FALSE);
		RETURN_VALUE_IF_ERROR(node.SetURL(pattern16.CStr()), FALSE);

		BOOL b=node.VerifyIndexes(hash_choice16.CStr());

		if(!b)
		{
			BOOL found = FALSE;
			const char *p=pattern;
			output("Wrong hash choice for '%s': it is not '%s'", pattern, hash_choice);

			/// Try to lcoate the pattern used by the node
			while(!found && *p)
			{
				OpString attempt;
				OpString8 attempt8;

				if(op_strlen(p)==5 || op_strlen(p)==3 || op_strlen(p)==1) // We need 0, 2, 4 or 6 chars to correctly identify the string used
				  p++;

				attempt.Set(p++);
				
				if(uni_strlen(attempt.CStr())>6)
					attempt.CStr()[6]=0;

				if(node.VerifyIndexes(attempt.CStr()))
				{
				  found = TRUE;
				  attempt8.Set(attempt.CStr());
				  output(" but '%s'", attempt8.CStr());
				}
				
				// Try only a match of 4 characters
				if(!found && uni_strlen(attempt.CStr())>=4)
				{
					attempt.CStr()[4]=0;

					if(node.VerifyIndexes(attempt.CStr()))
					{
						found = TRUE;
						attempt8.Set(attempt.CStr());
						output(" but '%s'", attempt8.CStr());
					}
				}

				// Try only a match of 2 characters
				if(!found && uni_strlen(attempt.CStr())>=2)
				{
					attempt.CStr()[2]=0;

					if(node.VerifyIndexes(attempt.CStr()))
					{
						found = TRUE;
						attempt8.Set(attempt.CStr());
						output(" but '%s'", attempt8.CStr());
					}
				}
			}

			if(!found && node.VerifyIndexes(UNI_L("")))
				output(" but ''");

			output("\n");
		}

		return b;
	}

	URLFilter* urlfilter1;
	URLFilter* urlfilterCornerCases1;
	URLFilter* urlfilterRules;
	URLFilter* urlfilterOperaAbout1;
	URLFilter* urlfilterDuplicates1;
	URLFilter* urlfilterOperaEmpty1;
	URLFilter* urlfilterPorts1;
	URLFilter* urlfilterTiny1;
	URLFilter* urlfilter2;
	URLFilter* urlfilterCornerCases2;
	URLFilter* urlfilterOperaAbout2;
	URLFilter* urlfilterDuplicates2;
	URLFilter* urlfilterOperaEmpty2;
	URLFilter* urlfilterPorts2;
	URLFilter* urlfilterTiny2;
	URLFilter* urlfilter3;
	URLFilter* urlfilterCornerCases3;
	URLFilter* urlfilterOperaAbout3;
	URLFilter* urlfilterDuplicates3;
	URLFilter* urlfilterOperaEmpty3;
	URLFilter* urlfilterPorts3;
	URLFilter* urlfilterTiny3;
}

setup
{
	
}

exit
{

	OP_DELETE(urlfilter1);
	OP_DELETE(urlfilterCornerCases1);
	OP_DELETE(urlfilterRules);
	OP_DELETE(urlfilterOperaAbout1);	
	OP_DELETE(urlfilterDuplicates1);  // A crash here could mean that the duplication check fails...
	OP_DELETE(urlfilterOperaEmpty1);
	OP_DELETE(urlfilterPorts1);
	OP_DELETE(urlfilterTiny1);
	OP_DELETE(urlfilter2);
	OP_DELETE(urlfilterCornerCases2);
	OP_DELETE(urlfilterOperaAbout2);	
	OP_DELETE(urlfilterDuplicates2);  // A crash here could mean that the duplication check fails...
	OP_DELETE(urlfilterOperaEmpty2);
	OP_DELETE(urlfilterPorts2);
	OP_DELETE(urlfilterTiny2);
	OP_DELETE(urlfilter3);
	OP_DELETE(urlfilterCornerCases3);
	OP_DELETE(urlfilterOperaAbout3);	
	OP_DELETE(urlfilterDuplicates3);  // A crash here could mean that the duplication check fails...
	OP_DELETE(urlfilterOperaEmpty3);
	OP_DELETE(urlfilterPorts3);
	OP_DELETE(urlfilterTiny3);
	urlfilter1 = NULL;
	urlfilterCornerCases1 = NULL;
	urlfilterRules = NULL;
	urlfilterOperaAbout1 = NULL;
	urlfilterDuplicates1 = NULL;
	urlfilterOperaEmpty1 = NULL;
	urlfilterPorts1 = NULL;
	urlfilterTiny1 = NULL;
	urlfilter2 = NULL;
	urlfilterCornerCases2 = NULL;
	urlfilterOperaAbout2 = NULL;
	urlfilterDuplicates2 = NULL;
	urlfilterOperaEmpty2 = NULL;
	urlfilterPorts2 = NULL;
	urlfilterTiny2 = NULL;
	urlfilter3 = NULL;
	urlfilterCornerCases3 = NULL;
	urlfilterOperaAbout3 = NULL;
	urlfilterDuplicates3 = NULL;
	urlfilterOperaEmpty3 = NULL;
	urlfilterPorts3 = NULL;
	urlfilterTiny3 = NULL;
}

table TableAlgorithms(FilterAlgorithm, char *, URLFilter*, URLFilter*, URLFilter*, URLFilter*, URLFilter*, URLFilter*, URLFilter*)
{
  { FILTER_FAST, " FAST ", urlfilter1, urlfilterCornerCases1, urlfilterOperaAbout1, urlfilterDuplicates1, urlfilterOperaEmpty1, urlfilterPorts1, urlfilterTiny1 },
  { FILTER_SLOW, " SLOW ", urlfilter2, urlfilterCornerCases2, urlfilterOperaAbout2, urlfilterDuplicates2, urlfilterOperaEmpty2, urlfilterPorts2, urlfilterTiny2 },
  { FILTER_ADAPTIVE, " ADAPTIVE ", urlfilter3, urlfilterCornerCases3, urlfilterOperaAbout3, urlfilterDuplicates3, urlfilterOperaEmpty3, urlfilterPorts3, urlfilterTiny3 }
}

/// Tests an URL against a pattern
subtest QuickCheckURL(const uni_char *url_str, const uni_char *pattern, BOOL expected_load)
{
	URLFilter urlFilter;
	URL url_obj=urlManager->GetURL(url_str);
	FilterURLnode *nodeEx = OP_NEW(FilterURLnode, (TRUE));
	FilterURLnode *nodeIn = OP_NEW(FilterURLnode, (FALSE));
	BOOL load1=!expected_load;
	BOOL load2=!expected_load;
	BOOL load3=!expected_load;

	nodeEx->SetURL(pattern);
	nodeIn->SetURL(UNI_L("*.*"));
	
	urlFilter.AddURL(nodeEx, NULL, NULL);
	urlFilter.AddURL(nodeIn, NULL, NULL);

	urlFilter.SetAlgorithm(FILTER_FAST);
	urlFilter.CheckURL(url_str, load1, NULL);
	urlFilter.CheckURL(&url_obj, load2, NULL);
	urlFilter.CheckURLSlow(url_str, load3, NULL);
	urlFilter.DeleteURL(nodeEx);
	urlFilter.DeleteURL(nodeIn);

	OpString8 str, str2;

	str.Set(url_str);
	str2.Set(pattern);

	if (load1 != expected_load || load2 != expected_load || load3 != expected_load)
	{
		output("quickcheck %s %s %s \n", str.CStr(), (load1!=expected_load) ? "does not match" : "matches", str2.CStr(), (load1!=expected_load) ? ((load1) ? "(it loads while it shoudl not)" : "(it's blocked while it should be allowed)") : "");
		if (load1!=load2)
		  output("However URL object does not match!");
	}

	verify(load1 == expected_load);
	verify(load2 == expected_load);
	verify(load3 == expected_load);
}

test("create object")
{
	urlfilter1 = OP_NEW(URLFilter, ());
	urlfilterCornerCases1 = OP_NEW(URLFilter, ());
	urlfilterRules = OP_NEW(URLFilter, ());
	urlfilterOperaAbout1 = OP_NEW(URLFilter, ());
	urlfilterDuplicates1 = OP_NEW(URLFilter, ());
	urlfilterOperaEmpty1 = OP_NEW(URLFilter, ());
	urlfilterPorts1 = OP_NEW(URLFilter, ());
	urlfilterTiny1 = OP_NEW(URLFilter, ());
	urlfilter2 = OP_NEW(URLFilter, ());
	urlfilterCornerCases2 = OP_NEW(URLFilter, ());
	urlfilterOperaAbout2 = OP_NEW(URLFilter, ());
	urlfilterDuplicates2 = OP_NEW(URLFilter, ());
	urlfilterOperaEmpty2 = OP_NEW(URLFilter, ());
	urlfilterPorts2 = OP_NEW(URLFilter, ());
	urlfilterTiny2 = OP_NEW(URLFilter, ());
	urlfilter3 = OP_NEW(URLFilter, ());
	urlfilterCornerCases3 = OP_NEW(URLFilter, ());
	urlfilterOperaAbout3 = OP_NEW(URLFilter, ());
	urlfilterDuplicates3 = OP_NEW(URLFilter, ());
	urlfilterOperaEmpty3 = OP_NEW(URLFilter, ());
	urlfilterPorts3 = OP_NEW(URLFilter, ());
	urlfilterTiny3 = OP_NEW(URLFilter, ());

	verify(urlfilter1 != NULL);
	verify(urlfilterCornerCases1 != NULL);
	verify(urlfilterRules != NULL);
	verify(urlfilterOperaAbout1 != NULL);
	verify(urlfilterDuplicates1 != NULL);
	verify(urlfilterOperaEmpty1 != NULL);
	verify(urlfilterPorts1 != NULL);
	verify(urlfilterTiny1 != NULL);
	verify(urlfilter2 != NULL);
	verify(urlfilterCornerCases2 != NULL);
	verify(urlfilterOperaAbout2 != NULL);
	verify(urlfilterDuplicates2 != NULL);
	verify(urlfilterOperaEmpty2 != NULL);
	verify(urlfilterPorts2 != NULL);
	verify(urlfilterTiny2 != NULL);
	verify(urlfilter3 != NULL);
	verify(urlfilterCornerCases3 != NULL);
	verify(urlfilterOperaAbout3 != NULL);
	verify(urlfilterDuplicates3 != NULL);
	verify(urlfilterOperaEmpty3 != NULL);
	verify(urlfilterPorts3 != NULL);
	verify(urlfilterTiny3 != NULL);
}

test("crash")
{
	FilterURLnode *node = OP_NEW(FilterURLnode, ());
	FilterURLnode *node2 = OP_NEW(FilterURLnode, ());
	FilterURLnode *node3 = OP_NEW(FilterURLnode, ());
	BOOL load = FALSE;
		
	node->SetIsExclude(TRUE);
	urlfilterCornerCases1->AddURL(node, NULL, NULL);
	
    urlfilterCornerCases1->CheckURL(UNI_L("http://pass.org"), load);
    verify(load==TRUE);
    
    node2->SetIsExclude(TRUE);
    urlfilterCornerCases1->AddURL(node2, NULL, NULL);
    urlfilterCornerCases1->CheckURL(UNI_L("http://pass.org"), load);
    verify(load==TRUE);
    
    node3->SetIsExclude(TRUE);
	node3->SetURL(UNI_L("http://*.failblocked*"));
    urlfilterCornerCases1->AddURL(node3, NULL, NULL);
    urlfilterCornerCases1->CheckURL(UNI_L("http://pass.org"), load);
    verify(load==TRUE);
}

test("Quick tests")
{
	verify(QuickCheckURL(UNI_L("http://www.ok.com"), UNI_L("*blocked*"), TRUE));
	verify(QuickCheckURL(UNI_L("http://www.blocked.com"), UNI_L("*blocked*"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.ok.com/blocked"), UNI_L("*blocked*"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.ok.com/blocked"), UNI_L("*blocked"), FALSE));
	verify(QuickCheckURL(UNI_L("http://t.t/?blocked"), UNI_L("*blocked*"), FALSE));
	verify(QuickCheckURL(UNI_L("http://t.t/?blockedx"), UNI_L("*blocked*"), FALSE));
	verify(QuickCheckURL(UNI_L("http://t.t/?blocked"), UNI_L("*blocked"), FALSE));
	verify(QuickCheckURL(UNI_L("http://t.t/?blockedx"), UNI_L("*blocked"), TRUE));
}

foreach (alg, descr, urlfilter, urlfilterCornerCases, urlfilterOperaAbout, urlfilterDuplicates, urlfilterOperaEmpty, urlfilterPorts, urlfilterTiny) from TableAlgorithms
{
	test("load huge block list" descr) require success "create object"; timer;
	file uni path "data/hugelist.ini";
	{
		OP_STATUS status = SetupPathString(path);
		verify_success(status);
		
		OpString path_str;
		status = path_str.Set(path);
		verify_success(status);

		TRAPD(err, status = urlfilter->InitL(path_str));
		verify_success(err);

		verify_success(status);
	}

	test("load opera pages" descr)
	file uni path "data/opera_pages.ini";
	{
		OP_STATUS status = SetupPathString(path);
		verify_success(status);
		
		OpString path_str;	
		status = path_str.Set(path);
		verify_success(status);

		TRAPD(err, status = urlfilterOperaAbout->InitL(path_str));
		verify_success(err);

		verify_success(status);
	}

	test("load corner cases" descr)
	file uni path "data/corner_cases.ini";
	{
		OP_STATUS status = SetupPathString(path);
		verify_success(status);
		
		OpString path_str;
		status = path_str.Set(path);
		verify_success(status);

		TRAPD(err, status = urlfilterCornerCases->InitL(path_str));
		verify_success(err);

		verify_success(status);
	}
	
	test("load tiny" descr) require success "create object";
	{
		verify_success(urlfilterTiny->AddURLString(UNI_L("http://*"), FALSE, NULL));
		verify_success(urlfilterTiny->AddURLString(UNI_L("http://*.tinyblock.net*"), TRUE, NULL));
	}

	test("Set the algorithm" descr)
	{
		urlfilter->SetAlgorithm(alg);
		urlfilterCornerCases->SetAlgorithm(alg);
		urlfilterOperaAbout->SetAlgorithm(alg);
		urlfilterDuplicates->SetAlgorithm(alg);
		urlfilterOperaEmpty->SetAlgorithm(alg);
		urlfilterPorts->SetAlgorithm(alg);
		urlfilterTiny->SetAlgorithm(alg);
	}
	
	// Benchmark
	test("performance BIG - blocked urls" descr)
	require success "create object";
	manual "benchmark 1";
	timer;
	{
		BOOL ok = TRUE;
		output("Testing %d URLs for 200*14 checks ", urlfilter->GetCount(TRUE));

		// should be blocked
		for (int i=0; i<200; i++)
		{
    		iterate (block_url) from Table_blocked
    		{
    			BOOL load = TRUE;
    			
    			urlfilter->CheckURL(block_url, load);
    			
				if(load!=FALSE)
					ok = FALSE;
    		}
		}

		if(!ok)
			ST_failed("Error");
	}
	
	test("performance BIG - non-blocked urls" descr)
	require success "create object";
	manual "benchmark 2";
	timer;
	{
		BOOL ok = TRUE;

		output("Testing %d URLs for 200*14 checks ", urlfilter->GetCount(TRUE));

		// should not be blocked
		for (int i=0; i<200; i++)
		{
    		iterate (block_url) from Table_not_blocked
    		{
    			BOOL load = FALSE;
    			
    			urlfilter->CheckURL(block_url, load);

				if(load!=TRUE)
					ok = FALSE;
    		}
		}

		if(!ok)
			ST_failed("Error");
	}
	
	test("performance SMALL - blocked urls" descr)
	require success "create object";
	manual "benchmark 3";
	timer;
	{
		BOOL ok = TRUE;

		output("Testing %d URLs for 2000*20 checks  ", urlfilterCornerCases->GetCount(TRUE));

		// should be blocked
		for (int i=0; i<2000; i++)
		{
    		iterate (block_url) from Table_corner_cases_blocked
    		{
    			BOOL load = TRUE;
    			
    			urlfilterCornerCases->CheckURL(block_url, load);

				if(load!=FALSE)
					ok = FALSE;
    		}
		}

		if(!ok)
			ST_failed("Error");
	}
	
	test("performance SMALL - non-blocked urls" descr)
	require success "create object";
	manual "benchmark 4";
	timer;
	{
		BOOL ok = TRUE;

		output("Testing %d URLs for 2000*20 checks ", urlfilterCornerCases->GetCount(TRUE));

		// should not be blocked
		for (int i=0; i<2000; i++)
		{
    		iterate (block_url) from Table_corner_cases_not_blocked
    		{
    			BOOL load = FALSE;
    			
    			urlfilterCornerCases->CheckURL(block_url, load);

    			if(load!=TRUE)
					ok = FALSE;
    		}
		}

		if(!ok)
			ST_failed("Error");
	}
	
	test("performance SMALL - neutral urls" descr)
	require success "create object";
	manual "benchmark 5";
	timer;
	{
		BOOL ok = TRUE;

		output("Testing %d URLs for 2000*23*2 checks ", urlfilterCornerCases->GetCount(TRUE));

		// should not be blocked
		for (int i=0; i<2000; i++)
		{
    		iterate (block_url) from Table_corner_cases_neutral
    		{
    			BOOL load = FALSE;
    			
    			urlfilterCornerCases->CheckURL(block_url, load);

				if(load!=FALSE)
					ok = FALSE;
    			
    			load = TRUE;
    			urlfilterCornerCases->CheckURL(block_url, load);

    			if(load!=TRUE)
					ok = FALSE;
    		}
		}

		if(!ok)
			ST_failed("Error");
	}
	
	test("performance TINY - blocked urls" descr)
	require success "create object";
	manual "benchmark 6";
	timer;
	{
		BOOL ok = TRUE;

		output("Testing %d URLs for 10000*1 checks ", urlfilterTiny->GetCount(TRUE));

		// should not be blocked
		for (int i=0; i<10000; i++)
		{
    		BOOL load = TRUE;
		
			if(OpStatus::IsError(urlfilterTiny->CheckURL(UNI_L("http://abaco.tinyblock.net"), load)))
				ok = FALSE;

			if(load!=FALSE)
				ok = FALSE;
			
			load = TRUE;
			if(OpStatus::IsError(urlfilterTiny->CheckURL(UNI_L("http://test.tinyblock.net"), load)))
				ok = FALSE;

			if(load!=FALSE)
				ok = FALSE;
			
			load = TRUE;
			if(OpStatus::IsError(urlfilterTiny->CheckURL(UNI_L("http://fake.tinyblock.net"), load)))
				ok = FALSE;

			if(load!=FALSE)
				ok = FALSE;
		}

		if(!ok)
			ST_failed("Error");
	}
	
	test("performance TINY - non-blocked urls" descr)
	require success "create object";
	manual "benchmark 7";
	timer;
	{
		BOOL ok = TRUE;

		output("Testing %d URLs for 10000*1 checks ", urlfilterTiny->GetCount(TRUE));

		// should not be blocked
		for (int i=0; i<10000; i++)
		{
    		BOOL load = FALSE;
		
			if(OpStatus::IsError(urlfilterTiny->CheckURL(UNI_L("http://opera.com"), load)))
				ok = FALSE;
			if(load!=TRUE)
				ok = FALSE;
			
			load = FALSE;
			if(OpStatus::IsError(urlfilterTiny->CheckURL(UNI_L("http://localhost/abaco"), load)))
				ok = FALSE;
			if(load!=TRUE)
				ok = FALSE;
			
			load = FALSE;
			if(OpStatus::IsError(urlfilterTiny->CheckURL(UNI_L("http://www.libero.it"), load)))
				ok = FALSE;
			if(load!=TRUE)
				ok = FALSE;
		}

		if(!ok)
			ST_failed("Error");
	}
	
	test("test blocked urls" descr) require success "create object"; timer;
	{
		// should be blocked
		iterate (block_url) from Table_blocked
		{
			BOOL load = TRUE;
			
			verify_success(urlfilter->CheckURL(block_url, load));
			if(load)
			{
				OpString8 str;
				
				str.Set(block_url);
				
				ST_failed("URL %s not blocked!", str.CStr());
			}
			verify(load == FALSE);
		}
	}

	test("corner cases" descr) require success "create object";
	{
		OpString8 t;
		BOOL ok = TRUE;
		
		// should be blocked
		iterate (block_url) from Table_corner_cases_blocked
		{
			BOOL load = TRUE;
			
			verify_success(urlfilterCornerCases->CheckURL(block_url, load));
			
			if(load)
			{
				t.Set(block_url);
				
				output("Failed: %s should be blocked!\n", t.CStr());
				
				ok = FALSE;
			}
		}
		
		// should be allowed
		iterate (permit_url) from Table_corner_cases_not_blocked
		{
			BOOL load = FALSE;
			
			verify_success(urlfilterCornerCases->CheckURL(permit_url, load));
			
			if(!load)
			{
				t.Set(permit_url);
				
				output("Failed: %s should be allowed!\n", t.CStr());
				
				ok = FALSE;
			}
		}
		
		// should be neutral
		iterate (permit_url) from Table_corner_cases_neutral
		{
			BOOL load = FALSE;
			
			verify_success(urlfilterCornerCases->CheckURL(permit_url, load));
			
			if(load)
			{
				t.Set(permit_url);
				
				output("Failed: %s is not neutral!\n", t.CStr());
				
				ok = FALSE;
			}
			
			load = TRUE;
			
			verify_success(urlfilterCornerCases->CheckURL(permit_url, load));
			
			if(!load)
			{
				t.Set(permit_url);
				
				output("Failed: %s is not neutral!\n", t.CStr());
				
				ok = FALSE;
			}
		}
		
		verify(ok);
	}

	test("duplication check" descr) require success "create object";
	{
		UINT32 num=urlfilterDuplicates->GetCount(TRUE);
		FilterURLnode *node = OP_NEW(FilterURLnode, ());
		FilterURLnode *node2 = OP_NEW(FilterURLnode, ());
		FilterURLnode *node3 = OP_NEW(FilterURLnode, ());
		
		verify(num==0);
		verify(node);
		verify(node2);
		verify(node3);
		
		node->SetIsExclude(TRUE);
		node->SetURL(UNI_L("http://*.duplication.net/*"));
		node2->SetIsExclude(TRUE);
		node2->SetURL(UNI_L("http://*.duplication.net/*"));
		node3->SetIsExclude(TRUE);
		node3->SetURL(UNI_L("http://*.duplication.net/*2"));
		
		// URL Filter should avoid duplications
		BOOL node_acquired;
		
		verify_success(urlfilterDuplicates->AddURL(node, NULL, &node_acquired));
		verify(urlfilterDuplicates->GetCount(TRUE)==num+1);
		verify(node_acquired);
		
		verify_success(urlfilterDuplicates->AddURL(node, NULL, &node_acquired));
		verify(urlfilterDuplicates->GetCount(TRUE)==num+1);
		verify(!node_acquired);
		
		verify_success(urlfilterDuplicates->AddURL(node2, NULL, &node_acquired));
		verify(!node_acquired);
		verify(urlfilterDuplicates->GetCount(TRUE)==num+1);
		
		// The last node is not duplicated
		verify_success(urlfilterDuplicates->AddURL(node3, NULL, &node_acquired));
		verify(urlfilterDuplicates->GetCount(TRUE)==num+2);
		verify(node_acquired);
		
		OP_DELETE(node2);
	}

	test("white spaces" descr) require success "create object";
	{
		FilterURLnode *node = OP_NEW(FilterURLnode, ());
		FilterURLnode *node2 = OP_NEW(FilterURLnode, ());
		BOOL load;
		
		verify(node);
		
		node->SetIsExclude(TRUE);
		node->SetURL(UNI_L("*whiteblock9*  \t  \t\t    "), FALSE);
		node2->SetIsExclude(FALSE);
		node2->SetURL(UNI_L("*whitepass9*\t  \t\t    \t\t"), FALSE);
		verify_success(urlfilterCornerCases->AddURL(node, NULL, NULL));
		verify_success(urlfilterCornerCases->AddURL(node2, NULL, NULL));
		verify_success(urlfilterCornerCases->AddURLString(UNI_L("  \t  \t\t    \t\t"), FALSE, NULL));
		
		// Check for white spaces (lack of ) removal in SetURL
		load=FALSE;
		verify_success(urlfilterCornerCases->CheckURL(UNI_L("http://test.wwwhitepass9jjj"), load));
		verify(load == FALSE);
		load=TRUE;
		verify_success(urlfilterCornerCases->CheckURL(UNI_L("http://test.wwwhiteblock9jjj"), load));
		verify(load == TRUE);
		
		// Check for white spaces removal in SetURL
		verify_success(urlfilterCornerCases->AddURLString(UNI_L("*whiteblock9*  \t  \t\t    "), TRUE, NULL));
		verify_success(urlfilterCornerCases->AddURLString(UNI_L("*whitepass9*\t  \t\t    \t\t"), FALSE, NULL));
		
		load=FALSE;
		verify_success(urlfilterCornerCases->CheckURL(UNI_L("http://test.wwwhitepass9jjj"), load));
		verify(load == TRUE);
		load=TRUE;
		verify_success(urlfilterCornerCases->CheckURL(UNI_L("http://test.wwwhiteblock9jjj"), load));
		verify(load == FALSE);
	}


	test("test non-blocked urls" descr) require success "create object"; timer;
	{
		// should not be blocked
		iterate (block_url) from Table_not_blocked
		{
			BOOL load = FALSE;
			
			verify_success(urlfilter->CheckURL(block_url, load));
			verify(load == TRUE);
		}
	}

	test("test MatchUrlPattern" descr) require success "create object";
	{
		BOOL result = URLFilter::MatchUrlPattern(UNI_L("http://www.opera.com/this/is/blocked.gif"), UNI_L("http://*.opera.com/*"));
		verify(result == TRUE);

		result = URLFilter::MatchUrlPattern(UNI_L("http://my.opera.com/community/this/is/blocked.gif"), UNI_L("http://*.opera.com/*"));
		verify(result == TRUE);
		
		verify(URLFilter::MatchUrlPattern(UNI_L("http://www.....opera.com////test"), UNI_L("http://*.opera.com/*")));
		verify(URLFilter::MatchUrlPattern(UNI_L("http://.opera.com//"), UNI_L("http://*.opera.com/*")));
		verify(URLFilter::MatchUrlPattern(UNI_L("http://www..opera.com/tessst"), UNI_L("http://*.opera.com/*st*")));
		verify(!URLFilter::MatchUrlPattern(UNI_L("hhttp://www.opera.com/test"), UNI_L("http://*.opera.com/*")));
		verify(!URLFilter::MatchUrlPattern(UNI_L("Http://www.opera.com/test"), UNI_L("http://*.opera.com/*")));
		verify(!URLFilter::MatchUrlPattern(UNI_L("https://www.opera.com/test"), UNI_L("http://*.opera.com/*")));
	}

	test("test AddURL/DeleteURL/BlockMode/Copy constructor/Operator '='" descr) require success "create object";
	{
		FilterURLnode *node = OP_NEW(FilterURLnode, ());
		FilterURLnode *node2 = NULL;
		FilterURLnode *node3 = OP_NEW(FilterURLnode, ());
		
		verify(node != NULL);
		verify(node3 != NULL);

		if(node)
		{
			BOOL load = TRUE;

			node->SetIsExclude(TRUE);
			node->SetURL(UNI_L("http://*.dagbladet.no/*"));
			
			// test AddURL
			verify_success(urlfilter->AddURL(node, NULL, NULL));

			verify_success(urlfilter->CheckURL(UNI_L("http://www.dagbladet.no/artikkel/121221"), load));
			verify(load == FALSE);

			// test turning off the blocking
			urlfilter->SetBlockMode(URLFilter::BlockModeOff);
			verify_success(urlfilter->CheckURL(UNI_L("http://www.dagbladet.no/artikkel/121221"), load));
			verify(load == TRUE);
			urlfilter->SetBlockMode(URLFilter::BlockModeNormal);
			
			// Re test
			verify_success(urlfilter->CheckURL(UNI_L("http://www.dagbladet.no/artikkel/121221"), load));
			verify(load == FALSE);
			
			// Test copy constructor - phase 1: copy
			node2 = OP_NEW(FilterURLnode, (*node));
			verify(node2 != NULL);
			
			// Test operator "=" - phase 1: copy
			*node3=*node;
			
			// test deleting the filter
			load=FALSE;
			urlfilter->DeleteURL(node);
			verify_success(urlfilter->CheckURL(UNI_L("http://www.dagbladet.no/artikkel/121221"), load));
			verify(load == TRUE);
			
			// Test copy constructor - phase 2: test
			load=TRUE;
			verify_success(urlfilter->AddURL(node2, NULL, NULL));
			verify_success(urlfilter->CheckURL(UNI_L("http://www.dagbladet.no/artikkel/121221"), load));
			verify(load == FALSE);
			
			// deleting the 2nd filter
			load=FALSE;
			urlfilter->DeleteURL(node2);
			verify_success(urlfilter->CheckURL(UNI_L("http://www.dagbladet.no/artikkel/121221"), load));
			verify(load == TRUE);
			
			// Test operator "=" - phase 2: test
			load=TRUE;
			verify_success(urlfilter->AddURL(node3, NULL, NULL));
			verify_success(urlfilter->CheckURL(UNI_L("http://www.dagbladet.no/artikkel/121221"), load));
			verify(load == FALSE);
			
			// CheckURL() test with URL
			URL url=g_url_api->GetURL("http://www.dagbladet.no/artikkel/121221", NULL, TRUE);
			
			verify_success(urlfilter->CheckURL(&url, load));
			
			// deleting the 3nd filter
			load=FALSE;
			urlfilter->DeleteURL(node3);
			verify_success(urlfilter->CheckURL(UNI_L("http://www.dagbladet.no/artikkel/121221"), load));
			verify(load == TRUE);
		}
	}

	test("test exclude-include" descr) require success "create object";
	{
		BOOL load = FALSE;

		// should not be blocked
		verify_success(urlfilter->CheckURL(UNI_L("http://test-ExIn/tst"), load));
		verify(load == TRUE);	
		
		// Add conflicting include and exclude rule
		verify_success(urlfilter->AddURLString(UNI_L("http://test-ExIn/*"), TRUE, NULL));
		verify_success(urlfilter->AddURLString(UNI_L("http://test-ExIn/*"), FALSE, NULL));
		
		// should be blocked
		load=TRUE;
		verify_success(urlfilter->CheckURL(UNI_L("http://test-ExIn/tst"), load));
		verify(load == FALSE);
		
		// inclusion mode: should be allowed
		load=FALSE;
		urlfilter->SetExclusion(FALSE);
		verify_success(urlfilter->CheckURL(UNI_L("http://test-ExIn/tst"), load));
		verify(load == TRUE);
		
		// revert to exclusion mode: should be blocked
		load=TRUE;
		urlfilter->SetExclusion(TRUE);
		verify_success(urlfilter->CheckURL(UNI_L("http://test-ExIn/tst"), load));
		verify(load == FALSE);
	}

	test("test unescaped urls in file" descr) require success "create object";
	{
		BOOL load = TRUE;

		// should be blocked
		verify_success(urlfilter->CheckURL(UNI_L("http://zanox-affiliate.de/*"), load));
		verify(load == FALSE);	
	}

	test("Match Counters" descr) require _DEBUG;
	{
		OpString8 t;
		
		output("\n*** Filters ***\n");
		urlfilter->AppendCountersDescription(t);
		output(t.CStr());
		
		t.Empty();
		output("\n*** Corner Cases ***\n");
		urlfilterCornerCases->AppendCountersDescription(t);
		output(t.CStr());
	}

	test("debug - blocked urls" descr) require _DEBUG; timer;
	{
		BOOL load = TRUE;
		BOOL load_slow = TRUE;

		// should be blocked
		iterate (block_url) from Table_blocked
		{
			verify_success(urlfilter->CheckURL(block_url, load));
			verify_success(urlfilter->CheckURLSlow(block_url, load_slow));
			verify(load == load_slow);	
			verify(load == FALSE);	
		}
	}

	test("debug - non-blocked urls " descr)  require _DEBUG; timer;
	{
		BOOL load = TRUE;
		BOOL load_slow = TRUE;
			
		// should not be blocked
		iterate (block_url) from Table_not_blocked
		{
			verify_success(urlfilter->CheckURL(block_url, load));
			verify_success(urlfilter->CheckURLSlow(block_url, load));
			verify(load == load_slow);
		}
	}

	test("bypass" descr) require FILTER_BYPASS_RULES;
	{
		BOOL load=FALSE;
		
		verify_success(urlfilter->CheckBypassURL(UNI_L("http://www.bypass.com"), load));
		verify(load==FALSE);
		
		load=TRUE;
		verify_success(urlfilter->CheckBypassURL(UNI_L("http://www.bypass.com"), load));
		verify(load==TRUE);
		
		load=FALSE;
		verify_success(urlfilter->AddFilterL(UNI_L("*bypa*")));
		verify_success(urlfilter->CheckBypassURL(UNI_L("http://www.bypass.com"), load));
		verify(load==TRUE);
	}

	test("redirect" descr) require FILTER_REDIRECT_RULES;
	{
		BOOL load=FALSE;
		
		verify_success(urlfilter->CheckRedirectURL(UNI_L("http://www.redirect.com"), load));
		verify(load==FALSE);
		
		load=TRUE;
		verify_success(urlfilter->CheckRedirectURL(UNI_L("http://www.redirect.com"), load));
		verify(load==TRUE);
		
		load=FALSE;
		verify_success(urlfilter->AddRedirectFilterL(UNI_L("*redir*")));
		verify_success(urlfilter->CheckRedirectURL(UNI_L("http://www.redirect.com"), load));
		verify(load==TRUE);
	}

	test("opera pages and about - check ini mistake" descr) require CF_DONT_BLOCK_OPERA_PROTOCOLS;
	{
		BOOL load = FALSE;
		
		verify_success(urlfilterOperaAbout->CheckURL(UNI_L("about:blank"), load));
		verify(load==TRUE);
		
		load=FALSE;
		verify_success(urlfilterOperaAbout->CheckURL(UNI_L("about:opera"), load));
		verify(load==TRUE);
		
		load=FALSE;
		verify_success(urlfilterOperaAbout->CheckURL(UNI_L("opera:about"), load));
		verify(load==TRUE);
	}

	test("empty" descr)
	{
		BOOL load=FALSE;
		
		// Checkt that the empty filter works
		verify_success(urlfilterOperaEmpty->CheckURL(UNI_L("test-empty"), load));
		verify(load==TRUE);
	}

	test("opera:debug DISABLED" descr) require CF_BLOCK_OPERA_DEBUG;
	{
		BOOL load=TRUE;
		
		verify_success(urlfilterOperaEmpty->CheckURL(UNI_L("opera:debug"), load));
		verify(load==FALSE);
		
		load=TRUE;
		verify_success(urlfilterOperaAbout->CheckURL(UNI_L("opera:debug"), load));
		verify(load==FALSE);
		
		load=TRUE;
		verify_success(urlfilterCornerCases->CheckURL(UNI_L("opera:debug"), load));
		verify(load==FALSE);
		
		verify_success(urlfilterOperaAbout->AddURLString(UNI_L("opera:debug"), FALSE, NULL));
		verify_success(urlfilterCornerCases->AddURLString(UNI_L("opera:debug"), FALSE, NULL));

		verify_success(urlfilterCornerCases->CheckURL(UNI_L("opera:debug"), load));
		verify(load==TRUE);
		
		// Opera pages list force an exclusion in opera:*
		verify_success(urlfilterOperaAbout->CheckURL(UNI_L("opera:debug"), load));
		verify(load==FALSE);
	}

	test("opera:debug ENABLED" descr) require undefined CF_BLOCK_OPERA_DEBUG;
	{
		BOOL load=TRUE;
		
		verify_success(urlfilterOperaAbout->CheckURL(UNI_L("opera:debug"), load));
		#ifdef CF_DONT_BLOCK_OPERA_PROTOCOLS
			verify(load==TRUE);
		#else
			verify(load==FALSE);
		#endif
		
		verify_success(urlfilterCornerCases->CheckURL(UNI_L("opera:debug"), load));
		
		#ifdef CF_DONT_BLOCK_OPERA_PROTOCOLS
			verify(load==TRUE);
		#else
			verify(load==FALSE);
		#endif
		
		verify_success(urlfilterCornerCases->CheckURL(UNI_L("opera:cache"), load));
		
		#ifdef CF_DONT_BLOCK_OPERA_PROTOCOLS
			verify(load==TRUE);
		#else
			verify(load==FALSE);
		#endif
	}

	test("single character not supported" descr)
	{
		BOOL result = URLFilter::MatchUrlPattern(UNI_L("http://www.opera.com"), UNI_L("http://ww*.opera.com"));
		verify(result == TRUE);
		
		// Single character wildcard '?' is not supported
		result = URLFilter::MatchUrlPattern(UNI_L("http://www.opera.com"), UNI_L("http://ww?.opera.com"));
		verify(result == FALSE);
	}

	test("port filtering" descr) require success "create object";
	{
		BOOL load;
		
		verify_success(urlfilterCornerCases->AddURLString(UNI_L("*.google.no:81*"), TRUE, NULL));
		verify_success(urlfilterCornerCases->AddURLString(UNI_L("*.google.no:82*"), FALSE, NULL));
		
		// Check for white spaces (lack of ) removal in SetURL
		load=TRUE;
		verify_success(urlfilterCornerCases->CheckURL(UNI_L("http://www.google.no:81/service"), load));
		verify(load == FALSE);
		load=FALSE;
		verify_success(urlfilterCornerCases->CheckURL(UNI_L("http://www.google.no:82/service"), load));
		verify(load == TRUE);
		load=TRUE;
		verify_success(urlfilterCornerCases->CheckURL(UNI_L("http://www.google.no:83/service"), load));
		verify(load == TRUE);
		load=FALSE;
		verify_success(urlfilterCornerCases->CheckURL(UNI_L("http://www.google.no:83/service"), load));
		verify(load == FALSE);
	}

	test("test ports 1" descr) require CF_BLOCK_INCLUDING_PORT_NUMBER;
	{
		// Changed
		verify(URLFilter::PortCompareFilters("http://www.opera.com/*", "http://www.opera.com:80/*"));
		verify(URLFilter::PortCompareFilters("http://www.opera.com/test", "http://www.opera.com:80/test"));
		verify(URLFilter::PortCompareFilters("http://www.opera.com/test*", "http://www.opera.com:80/test*"));
		verify(URLFilter::PortCompareFilters("http://www.opera.com/test*/test2/*/test3", "http://www.opera.com:80/test*/test2/*/test3"));
		verify(URLFilter::PortCompareFilters("http://goo*.com/test", "http://goo*.com:80/test"));
		verify(URLFilter::PortCompareFilters("http://ope*test/test2", "http://ope*test:80/test2"));
		
		// Changed (even if meaningless)
		verify(URLFilter::PortCompareFilters("http://www.opera.com/:abc", "http://www.opera.com:80/:abc"));
		verify(URLFilter::PortCompareFilters("http://www.opera.com/:abc*", "http://www.opera.com:80/:abc*"));
		verify(URLFilter::PortCompareFilters("http://www.opera.com/:abc*/test", "http://www.opera.com:80/:abc*/test"));
		verify(URLFilter::PortCompareFilters("http://www.opera.com/:abc*/test/*", "http://www.opera.com:80/:abc*/test/*"));
		verify(URLFilter::PortCompareFilters("http://www.opera.com/test*/:abc*/test/*", "http://www.opera.com:80/test*/:abc*/test/*"));
		
		// Not changed
		verify(URLFilter::PortCompareFiltersUnchanged("http://www.opera.com:81/*"));
		verify(URLFilter::PortCompareFiltersUnchanged("http://www.opera.com*"));
		verify(URLFilter::PortCompareFiltersUnchanged("http://www.opera.com:81*"));
		verify(URLFilter::PortCompareFiltersUnchanged("http://www.opera.com*/test"));
		verify(URLFilter::PortCompareFiltersUnchanged("http://www.opera.com*/test*"));
		verify(URLFilter::PortCompareFiltersUnchanged("http://goo*.com*"));
		verify(URLFilter::PortCompareFiltersUnchanged("http://goo*.com*/"));
		verify(URLFilter::PortCompareFiltersUnchanged("http://goo*.com*/test"));
	}

	test("test ports 2" descr) require CF_BLOCK_INCLUDING_PORT_NUMBER;
	{
		BOOL load;
		
		verify_success(urlfilterPorts->AddURLString(UNI_L("http://port-test.no/*"), TRUE, NULL));
		verify_success(urlfilterPorts->AddURLString(UNI_L("*.*"), FALSE, NULL));
		verify(urlfilterPorts->GetCount(TRUE)==2);
		
		// Tests
		load=TRUE;
		verify_success(urlfilterPorts->CheckURL(UNI_L("http://port-test.no/service"), load));
		verify(load == FALSE);
		
		load=TRUE;
		verify_success(urlfilterPorts->CheckURL(UNI_L("http://port-test.no:80/service"), load));
		verify(load == FALSE);
		
		load=TRUE;
		verify_success(urlfilterPorts->CheckURL(UNI_L("http://port-test.no:81/service"), load));
		verify(load == TRUE);
		
		load=TRUE;
		verify_success(urlfilterPorts->CheckURL(UNI_L("http://port-test.no:8080/service"), load));
		verify(load == TRUE);
		
		load=TRUE;
		verify_success(urlfilterPorts->CheckURL(UNI_L("http://port-test.no:8080"), load));
		verify(load == TRUE);
		
		// Test duplication
		FilterURLnode *node2 = OP_NEW(FilterURLnode, ());
		
		node2->SetIsExclude(TRUE);
		node2->SetURL(UNI_L("http://port-test.no:80/*"), FALSE);
		verify_success(urlfilterPorts->AddURL(node2, NULL, NULL));
		
		verify(urlfilterPorts->GetCount(TRUE)==2);
		
		// Test delete
		verify(urlfilterPorts->DeleteURL(node2));  // Deletes node, not node2
		
		verify(urlfilterPorts->GetCount(TRUE)==1);
		
		// Change to ":80" version
		verify_success(urlfilterPorts->AddURL(node2, NULL, NULL));
		
		verify(urlfilterPorts->GetCount(TRUE)==2);
		
		// Repeat the tests for ":80"
		load=TRUE;
		verify_success(urlfilterPorts->CheckURL(UNI_L("http://port-test.no/service"), load));
		verify(load == FALSE);
		
		load=TRUE;
		verify_success(urlfilterPorts->CheckURL(UNI_L("http://port-test.no:80/service"), load));
		verify(load == FALSE);
		
		load=TRUE;
		verify_success(urlfilterPorts->CheckURL(UNI_L("http://port-test.no:81/service"), load));
		verify(load == TRUE);
		
		load=TRUE;
		verify_success(urlfilterPorts->CheckURL(UNI_L("http://port-test.no:8080/service"), load));
		verify(load == TRUE);
		
		load=TRUE;
		verify_success(urlfilterPorts->CheckURL(UNI_L("http://port-test.no:8080"), load));
		verify(load == TRUE);
		
		// Retest duplication
		verify_success(urlfilterPorts->AddURLString(UNI_L("http://port-test.no/*"), TRUE, NULL));
		
		verify(urlfilterPorts->GetCount(TRUE)==2);
		
		OP_DELETE(node3);
	}

	test("listeners" descr)
	{
		TestListener t1;
		TestListener t2;
		
		// One listener, explicit remove test
		verify(urlfilterCornerCases->GetListener()==NULL);
		urlfilterCornerCases->SetListener(&t1);
		verify(urlfilterCornerCases->GetListener()==&t1);
		urlfilterCornerCases->RemoveListener(&t1);
		verify(urlfilterCornerCases->GetListener()==NULL);
		
		// One listener test, generic remove test
		urlfilterCornerCases->SetListener(&t1);
		urlfilterCornerCases->RemoveListener();
		verify(urlfilterCornerCases->GetListener()==NULL);
		
		// Two listeners, explicit remove test
		urlfilterCornerCases->SetListener(&t1);
		verify(urlfilterCornerCases->GetListener()==&t1);
		urlfilterCornerCases->RemoveListener(&t2);
		verify(urlfilterCornerCases->GetListener()==&t1);
		urlfilterCornerCases->SetListener(&t2);
		verify(urlfilterCornerCases->GetListener()==&t2);
		urlfilterCornerCases->RemoveListener(&t1);
		verify(urlfilterCornerCases->GetListener()==&t2);
		urlfilterCornerCases->RemoveListener(&t2);
		verify(urlfilterCornerCases->GetListener()==NULL);
		
		// Two listeners, generic remove remove test
		urlfilterCornerCases->SetListener(&t1);
		verify(urlfilterCornerCases->GetListener()==&t1);
		urlfilterCornerCases->SetListener(&t2);
		verify(urlfilterCornerCases->GetListener()==&t2);
		urlfilterCornerCases->RemoveListener();
		verify(urlfilterCornerCases->GetListener()==NULL);
	}
}

////////////////// Tests for rules

/// Tests that the rules mechanism is more or less working for patterns found in url_filter.ini
test("Filter rules basic tests")
{
	FilterURLnode *nodeEx = OP_NEW(FilterURLnode, (TRUE));
	FilterURLnode *nodeIn = OP_NEW(FilterURLnode, (FALSE));
	BOOL load = FALSE;
	URLFilter urlfilterRules;
	HTMLLoadContext ctx(RESOURCE_STYLESHEET, NULL, NULL, FALSE);
	FilterRule *frAlways = OP_NEW(DebugRuleAlways, ());
	FilterRule *frNever = OP_NEW(DebugRuleNever, ());

	// Test without patterns
	load = FALSE;
	urlfilterRules.CheckURL(UNI_L("http://www.good.com"), load, NULL);
    verify(load==TRUE);
	load = FALSE;
	urlfilterRules.CheckURL(UNI_L("http://www.evil.org/test"), load, NULL);
    verify(load==TRUE);

	// Add patterns		
	nodeEx->SetURL(UNI_L("http://*.evil.*"));
	nodeIn->SetURL(UNI_L("*.*"));
	urlfilterRules.AddURL(nodeEx, NULL, NULL);
	urlfilterRules.AddURL(nodeIn, NULL, NULL);
	
    // Test without rules
	load = FALSE;
	urlfilterRules.CheckURL(UNI_L("http://www.good.com"), load, NULL);
    verify(load==TRUE);
	urlfilterRules.CheckURL(UNI_L("http://www.evil.org/test"), load, NULL);
    verify(load==FALSE);

	// Add a rule that never matches, which invalidates the match
	nodeEx->AddRule(frNever);
	load=FALSE;
	urlfilterRules.CheckURL(UNI_L("http://www.good.com"), load, NULL, &ctx);
    verify(load==TRUE);
	load=FALSE;
	urlfilterRules.CheckURL(UNI_L("http://www.evil.org/test"), load, NULL, &ctx);
    verify(load==TRUE);

	// Add a rule that always matches, The match is still broken, as the rules are in AND
	nodeEx->AddRule(frAlways);
	load=FALSE;
	urlfilterRules.CheckURL(UNI_L("http://www.good.com"), load, NULL, &ctx);
    verify(load==TRUE);
	load=FALSE;
	urlfilterRules.CheckURL(UNI_L("http://www.evil.org/test"), load, NULL, &ctx);
    verify(load==TRUE);

	// Remove also the rule that never matches, restoring the match
	nodeEx->RemoveRule(frNever, TRUE);
	load=FALSE;
	urlfilterRules.CheckURL(UNI_L("http://www.good.com"), load, NULL, &ctx);
    verify(load==TRUE);
	urlfilterRules.CheckURL(UNI_L("http://www.evil.org/test"), load, NULL, &ctx);
    verify(load==FALSE);
}


/// Low level tests of the hash algorithm
/// These tests could require an update if FilterURLnode::ComputeMatchIndexes() changes significantly
test("Hash choice")
{
	verify(CheckHash("*whitepass1* ", "whitep"));
	verify(CheckHash("*.operapass2*", ".opera"));
	verify(CheckHash("h*.operapass3*", ".opera"));
	verify(CheckHash("ftp://*.operapass4*", ".opera"));
	verify(CheckHash("aaa://*operapass5*", "operap"));
	verify(CheckHash("www.operapass6.com", ".opera"));
	verify(CheckHash("ftp://*.operapass8*pp*a*", ".opera"));
	verify(CheckHash("*AAAa*", "AAAa"));
	verify(CheckHash("*JML*", "JM"));
	verify(CheckHash("*Y*", ""));
	verify(CheckHash("", ""));

	verify(CheckHash("www^operapass6.com", "operap"));
	verify(CheckHash("http://www^operapass6.com", "operap"));
	verify(CheckHash("ftp://www^operapass6.com", "operap"));
	verify(CheckHash("://www^operapass6.com", "operap"));
	verify(CheckHash("http*://www^operapass6.com", "operap"));
	verify(CheckHash("*://www^operapass6.com", "operap"));
	verify(CheckHash("w.o^erapass6.com", ".o"));
	verify(CheckHash("www.o^erapass6.com", ".o"));
	verify(CheckHash("www.test.com", ".test."));
	verify(CheckHash("www^test.com", "test.c"));
	verify(CheckHash("www^test^com", "test"));
	verify(CheckHash("www^test*com", "test"));
	verify(CheckHash("www*test^com", "test"));
	verify(CheckHash("www^tes^com", "te"));

	// THe operator '||' should not change the selection of the hash
	verify(CheckHash("||www^operapass6.com", "operap"));
	verify(CheckHash("||http://www^operapass6.com", "operap"));
	verify(CheckHash("||ftp://www^operapass6.com", "operap"));
	verify(CheckHash("||://www^operapass6.com", "operap"));
	verify(CheckHash("||http*://www^operapass6.com", "operap"));
	verify(CheckHash("||*://www^operapass6.com", "operap"));
	verify(CheckHash("||w.o^erapass6.com", ".o"));
	verify(CheckHash("||www.o^erapass6.com", ".o"));
	verify(CheckHash("||www.test.com", ".test."));
	verify(CheckHash("||www^test.com", "test.c"));
	verify(CheckHash("||www^test^com", "test"));
	verify(CheckHash("||www^test*com", "test"));
	verify(CheckHash("||www*test^com", "test"));
	verify(CheckHash("||www^tes^com", "te"));
	verify(CheckHash("www.||test.com", ".||tes"));
}

test("Test operator ^")
{
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("test"), TRUE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("*test*"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("*.test.*"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("*^test.*"), TRUE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http^//www.test.com/"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http:^/www.test.com/"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http:/^www.test.com/"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http://www.test.com^"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http^^^www.test.com^"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http^//*www.test.com/"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http:^/*www.test.com/"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http:/^*www.test.com/"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http://*www.test.com^^"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http^^^*www.test.com^^"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/abc"), UNI_L("http^^^*www.test.com^abc"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/abc"), UNI_L("http^^^*www.test.com/abc"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http^//*test*"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http^^^*test*"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http^^^*est*"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http^^^*est.com^"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http://www.test.com^"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http://www.test.com^^"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http://www.test.com^^^"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.test.com/"), UNI_L("http://www.test.com^^m"), TRUE));
}

test("Test operator ||")
{
	verify(QuickCheckURL(UNI_L("http://example.com/banner.gif"), UNI_L("|example.com/banner.gif"), TRUE));
	verify(QuickCheckURL(UNI_L("|http://example.com/banner.gif"), UNI_L("|example.com/banner.gif"), TRUE));
	verify(QuickCheckURL(UNI_L("http://example.com/banner.gif"), UNI_L("||example.com/banner.gif"), FALSE));
	verify(QuickCheckURL(UNI_L("https://example.com/banner.gif"), UNI_L("||example.com/banner.gif"), FALSE));
	verify(QuickCheckURL(UNI_L("http://example.com:8080/banner.gif"), UNI_L("||banner.gif"), FALSE));
	verify(QuickCheckURL(UNI_L("https://example.com:8080/banner.gif"), UNI_L("||banner.gif"), FALSE));
	verify(QuickCheckURL(UNI_L("ftp://example.com/banner.gif"), UNI_L("||example.com/banner.gif"), FALSE));
	verify(QuickCheckURL(UNI_L("example.com/banner.gif"), UNI_L("||example.com/banner.gif"), TRUE));
	verify(QuickCheckURL(UNI_L(".example.com/banner.gif"), UNI_L("||example.com/banner.gif"), FALSE));
	verify(QuickCheckURL(UNI_L("https://example.com/banner.gif"), UNI_L("||example.com/banner.gif"), FALSE));
	verify(QuickCheckURL(UNI_L("http://www.example.com/banner.gif"), UNI_L("||example.com/banner.gif"), FALSE));
	verify(QuickCheckURL(UNI_L("http://subdomain.example.com/banner.gif"), UNI_L("||example.com/banner.gif"), FALSE));
	verify(QuickCheckURL(UNI_L("http://badexample.com/banner.gif"), UNI_L("||example.com/banner.gif"), TRUE));
	verify(QuickCheckURL(UNI_L("http://gooddomain.example/analyze?http://example.com/banner.gif"), UNI_L("||example.com/banner.gif"), TRUE));
	verify(QuickCheckURL(UNI_L("http://gooddomain.example/analyze?http://example.com/banner.gif"), UNI_L("||example/analyze?http://example.com/banner.gif"), FALSE));
}
