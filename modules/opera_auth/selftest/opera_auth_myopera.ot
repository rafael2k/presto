/* -*- Mode: c; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may only be distributed as agreed with Opera Software.
 */

group "opera_auth.opera_auth_myopera";

require OPERA_AUTH_SUPPORT;

include "modules/opera_auth/opera_auth_myopera.h";
include "modules/util/adt/bytebuffer.h";

global
{
	class MyOperaAuthenticationTester : public MyOperaAuthentication
	{
	public:
		const char* expected;
		BOOL passed;

		/* virtual */
		OP_STATUS StartHTTPRequest(XMLFragment& xml)
		{
			ByteBuffer buffer;
			char *chunk_ptr;
			unsigned int bytes;
			OpString8 xml_send;

			RETURN_IF_ERROR(xml.GetEncodedXML(buffer, TRUE, "utf-8", FALSE));
			for(UINT32 chunk = 0; chunk < buffer.GetChunkCount(); chunk++)
				if ((chunk_ptr = buffer.GetChunk(chunk, &bytes)) != NULL)
					RETURN_IF_ERROR(xml_send.Append(chunk_ptr, bytes));

			passed = xml_send.Compare(expected) == 0;
			return OpStatus::OK;
		}

		void ExpectHTTPRequest(const char *expected_request)
		{
			expected = expected_request;
			passed = FALSE;
		}
	};
}


table test_my_opera_auth(const char* test_name, const char* username, const char* username_expected, const char* key)
{
	{ "MD5 key generation (AUTH-99)",
			"roarl", "roarl", "7D8B5D6091EE15C9E024993D7E993AEC" }
	{ "MD5, unicode characters (AUTH-99)",
			"\x5408\x6c17\x9053", "\345\220\210\346\260\227\351\201\223",
			"9C84F72426C27DC1C6BCF63B8EF405CE" }
}

foreach (test_name, u, u_expected, key) from test_my_opera_auth
{
	test("Authenticate, " test_name)
	{
		MyOperaAuthenticationTester test;
		OpString username, password, device_name, install_id;
		verify_success(username.Set(UNI_L(u)));
		verify_success(password.Set(UNI_L("*****")));
		verify_success(device_name.Set(UNI_L("work")));
		verify_success(install_id.Set(UNI_L("0123456789")));
		test.ExpectHTTPRequest(
			"<?xml version=\"1.0\" encoding=\"utf-8\"?>"
			"<create type=\"device\">"
				"<username>" u_expected "</username>"
				"<password>*****</password>"
				"<key>" key "</key>"
				"<devicename>work</devicename>"
				"<installid>0123456789</installid>"
				"<force>0</force>"
			"</create>");
		verify_success(test.Authenticate(username, password, device_name, install_id, FALSE));
		verify(test.passed);
	}
}
