/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "Img";

require MDF_FREETYPE_SUPPORT;

include "modules/display/vis_dev.h";
include "modules/img/image.h";
include "modules/img/decoderfactorypng.h";
include "modules/windowcommander/OpWindowCommander.h";
include "modules/windowcommander/src/WindowCommander.h";
include "modules/doc/frm_doc.h";
include "modules/dochand/win.h";

global
{
}

setup
{
}

exit
{
}

subtest VerifyImage(const char* refimage, int width, int height, BOOL generate)
{
	VisualDevice* vd = state.doc->GetVisualDevice();

	OpBitmap* bitmap_to_paint = NULL;
	verify(OpStatus::IsSuccess(OpBitmap::Create(&bitmap_to_paint, width, height, FALSE, FALSE, 0, 0, TRUE)));

	OpPainter* painter = bitmap_to_paint->GetPainter();
	verify(painter);

	CoreViewContainer* cview = vd->GetView()->GetContainer();
	cview->Paint(OpRect(0, 0, width, height), painter, 0, 0, TRUE, FALSE);

	bitmap_to_paint->ReleasePainter();

	// WONKO: it seems the jpg decoder outputs data that is more
	// divergent from the original in e.g. the smartphone profile
#if DESKTOP_PROFILE
	const UINT32 threshold = 1;
#else // DESKTOP_PROFILE
	const UINT32 threshold = 5;
#endif // DESKTOP_PROFILE

  	OP_STATUS status = DecoderFactoryPng::selftest_verify(refimage, bitmap_to_paint, height, threshold, 0, generate);
	if (OpStatus::IsError(status))
	{
	    OpString8 refimage_failed;
	    refimage_failed.Set(refimage);
	    refimage_failed.Insert(op_strlen(refimage) - 4, "_failed");
	    DecoderFactoryPng::selftest_verify( refimage_failed.CStr(), bitmap_to_paint, height, threshold, 0, TRUE);
	}
	verify( OpStatus::IsSuccess(status) );
}
finally
{
	OP_DELETE(bitmap_to_paint);
}

// Open a window for test documents

html
{
	//! <body>
	//! </body>
}

table test_files(char *) filelist "images" name "*.html";
table ref_files(char *) filelist "images" name "*.png";
table dummy_files_jpg(char *) filelist "images" name "*.jpg";
table dummy_files_bmp(char *) filelist "images" name "*.bmp";
table dummy_files_gif(char *) filelist "images" name "*.gif";
table dummy_files_ico(char *) filelist "images" name "*.ico";
table dummy_files_webp(char*) filelist "images" name "*.webp";
table dummy_files_xbm(char *) filelist "images" name "*.xbm";

foreach (FILE) from test_files
{
	// Please give me a open_url function that waits until finished loading!
	// Until then, i'm forced to use delay.
	test("loadpage_dummy") delay 5;
	{
		OpString file;
		file.Set(FILE);
		OpWindowCommander::OpenURLOptions options;
		options.entered_by_user = TRUE;
		state.doc->GetWindow()->GetWindowCommander()->OpenURL(file.CStr(), options);
	}

	test("$(FILE)") leakcheck;
	{
		char* tn = 0;

		BOOL enabled = TRUE;
		(void)enabled;

#ifndef _XBM_SUPPORT_
		enabled = enabled && !op_strstr(FILE, "xbm");
#endif // !_XBM_SUPPORT_
#ifndef WEBP_SUPPORT
		enabled = enabled && !op_strstr(FILE, "webp");
#endif // !WEBP_SUPPORT

		if (enabled)
		{
			BOOL generate = FALSE; // Turn to TRUE to generate new refimages.

			// open ref image
			tn = op_strdup(FILE);
			char *t = op_strrchr(tn, '.');
			*t = 0;
			OpString8 refimage;

			// Use the size of the body element as imagesize.
			RECT rect;
			find_element("body")->GetBoxRect(state.doc, BOUNDING_BOX, rect);
			int width = rect.right - rect.left;
			int height = rect.bottom - rect.top;
			VisualDevice *vd = state.doc->GetVisualDevice();

			// Test in 100% zoom
			state.doc->GetWindow()->SetScale(100);
			refimage.Set(tn);
			refimage.Append("_zoom_100.png");
			verify(VerifyImage(refimage.CStr(), vd->ScaleToScreen(width), vd->ScaleToScreen(height), generate));
		}
		else
			output("\nSkipping: support for this format is not enabled.\n");

	} finally {
		op_free(tn);
	}
}

test ("dimensions of image as data url")
language ecmascript;
{
    var myImg = new Image();
    myImg.src = "data:image/png,%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%01%2C%00%00%00%96%08%06%00%00%00d%5B%B5%D2%00%00%00%06bKGD%00%FF%00%FF%00%FF%A0%BD%A7%93%00%00%00%09pHYs%00%00%0B%13%00%00%0B%13%01%00%9A%9C%18%00%00%00%07tIME%07%D6%01%16%0E%1D%10%A8%E4%25%13%00%00%00%08tEXtComment%00%F6%CC%96%BF%00%00%02%25IDATx%DA%ED%DDAR%840%10%05P%B0%E6%FEW%C6%8De!5(I%BA%93%80%EF%B9%D4i%60%D1%BF%3A%18%86e%01%00%00%00%00%00%00%00%00%00%00%00%00%00%9El%FD%F5%B7%DB%B2%15V%5B%AB%CF%E4x%AC%96Z%A5%D7P%7B%AC%CC%DA%40r%60%D56%E9%D9q%22%030%F2%BC3k%03%A7%3ER%AA%D6%06%DD%1D%8E%3F%FA%DA%E0%1F%7B%85M%09%C7F%DE%96m%C8T%F1.P%D6%A0I2%B36%10%BC%24%5C%83%FF%FEJC%97%84%5EM%A0%CCP%1B%18%B0%24%3C6%F0%E8%E9%223P%84%15%DC%3C%B0%22%A6%16K*%60%CA%C0z7%B5%98%5C%80%5B%04%D6%88%09n%C6%DA%C0d%81U%D2%F0-%E1%B0%7D%FDd%5D%83%E0%82n%5E%D3%9C%C9~)%B8.k%F5%E6%CC%B3%CF%B5%EE%A4%CF%AC%0D%0C%98%B0fh%DC%92%DD%EA%A5%13Rfm%A0c%60E%2F%F1Z%B6H%D4%3C%1At%B5~fm%E0%8F%F6%8B%0A%A1%92%C6%BE%3A%89EMl%D9a%97U%1B%F8!%E7%1EVIX%95%86CM%D3gnh%9Dm%B3%2C%98%B0%02'%88%1E%8F%FB%B4NH%1E%E7%81%07LX%19%CDf%22%01.%EA%BB%0F%2B%22%9C%A2%03%CE%F3%86%20%B0%00%C6.%09%A3'%A3%CCo%F8%04LXC%96K%FE%13%07%3CnIX%13d%B5%7B%C2%22k%03%13-%093%26%A2%B3%3DY%FBcE%EF%07%CB%AC%0DL%12X-%CB%C1%FDgJ%83%20%F35e%3D_%81%06%3CpI%D8%3BD%85%15tn%D3%92)%A2%A6%F1%A2%EF%E3D%DEs%F2%02U%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%80o%9F%8E%C8%B4%155%89%D2%CB%00%00%00%00IEND%AEB%60%82";
    verify(myImg.width == 300 && myImg.height == 150);
}
