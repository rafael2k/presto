/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "Img.imagedump";

include "modules/img/decoderfactorypng.h";
include "modules/img/image.h";
include "modules/img/imagedump.h";
include "modules/img/selftest/img_testutils.h";
include "modules/pi/OpBitmap.h";
include "modules/util/tempbuf.h";
include "modules/util/opfile/opfile.h";


table png_files(char*) filelist "images" name "*.png";

foreach (png_file) from png_files
{
	test("DumpOpBitmapToPNG: $(png_file)")
		file outfile "out.png";
	{
		OpFile out;
		BOOL del = FALSE; // if TRUE, out should be deleted in finally

        // load image
		TestImage image;
        verify_success(image.Load(png_file));

        // get OpBitmap
        OpBitmap* bitmap = image.Bitmap();
        verify(bitmap);

        // write to file
        verify_success(out.Construct(make_doublebyte_in_tempbuffer(outfile, op_strlen(outfile))));
        verify_success(out.Open(OPFILE_WRITE));
        del = TRUE;
        verify_success(DumpOpBitmapToPNG(bitmap, out));
        out.Close();

        // compare written file source bitmap
        verify_success(DecoderFactoryPng::selftest_verify(outfile, bitmap, bitmap->Height(), 1, 0, FALSE));
	}
	finally
	{
		if (del)
		{
			if (out.IsOpen())
				out.Close();
			out.Delete();
		}
	}
}

foreach (png_file) from png_files
{
	test("GetOpBitmapAsBase64PNG: $(png_file)")
		require API_IMG_BITMAP_TO_BASE64PNG;
	{
		TestImage image;
        OpBitmap* bitmap;

		// create base64 png representation of png_file
        // load
        verify(OpStatus::IsSuccess(image.Load(png_file)));
        // get bitmap
		bitmap = image.Bitmap();
        verify(bitmap);
		// encode
		TempBuffer buffer;
		verify(OpStatus::IsSuccess(GetOpBitmapAsBase64PNG(bitmap, &buffer)));

		image.Reset();
		bitmap = 0;

		// load base64-representation
		verify(OpStatus::IsSuccess(image.Load(buffer)));
		bitmap = image.Bitmap();
		verify(bitmap);

        // compare to original
		const unsigned int MaxDiff = 1u;
		const unsigned int MaxPSNR = 0u;
		const OP_STATUS status = DecoderFactoryPng::selftest_verify(png_file, bitmap, bitmap->Height(),
																	MaxDiff, MaxPSNR, FALSE);
        verify(OpStatus::IsSuccess(status));
	}
}

foreach (png_file) from png_files
{
	test("GetOpBitmapAsBase64JPG: $(png_file)")
		require API_IMG_BITMAP_TO_BASE64JPG;
	// apparently the jpg encoder currently generates images that
	// differ quite a lot from the original bitmap - doesn't really
	// make sense to test with the threshold needed for tests to pass
	disabled;
	{
		TestImage image;
        OpBitmap* bitmap;

		// create base64 jpg representation of png_file
        // load
        verify(OpStatus::IsSuccess(image.Load(png_file)));
        // get bitmap
		bitmap = image.Bitmap();
        verify(bitmap);
		// encode
		TempBuffer buffer;
		verify(OpStatus::IsSuccess(GetOpBitmapAsBase64JPG(bitmap, &buffer, 100)));

		image.Reset();
		bitmap = 0;

		// load base64-representation
		verify(OpStatus::IsSuccess(image.Load(buffer)));
		bitmap = image.Bitmap();
		verify(bitmap);

        // compare to orignal
		const unsigned int MaxDiff = 32u;
		const unsigned int MaxPSNR = 0u;
		const OP_STATUS status = DecoderFactoryPng::selftest_verify(png_file, bitmap, bitmap->Height(),
																	MaxDiff, MaxPSNR, FALSE);
		verify(OpStatus::IsSuccess(status));
	}
}
