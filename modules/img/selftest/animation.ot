/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "Animation";

require MDF_FREETYPE_SUPPORT;

include "modules/display/vis_dev.h";
include "modules/img/image.h";
include "modules/img/decoderfactorypng.h";
include "modules/img/selftest/img_testutils.h";
include "modules/windowcommander/OpWindowCommander.h";
include "modules/windowcommander/src/WindowCommander.h";
include "modules/doc/frm_doc.h";
include "modules/dochand/win.h";

table test_files(char *) filelist "images/animated_images" name "*.gif";
table ref_files(char *) filelist "images/animated_images" name "*.png";


foreach (FILE) from test_files
{
	test("$(FILE)") leakcheck;
	{
		BOOL generate = FALSE; // Turn to TRUE to generate new refimages.

		// open ref image
		char *tn = op_strdup(FILE);
		verify(tn);
		char *t = op_strrchr(tn, '.');
		*t = 0;
		OpString8 refimage;

		TestImage img;
		verify(OpStatus::IsSuccess(img.Load(FILE)));

		for (int frame = 0; frame < img->GetFrameCount(); ++frame)
		{
			verify(OpStatus::IsSuccess(refimage.Set(tn)));
			verify(OpStatus::IsSuccess(refimage.AppendFormat("%d.png", frame)));

			OpBitmap* bitmap = img->GetBitmap(null_image_listener);
			verify(bitmap);

			const OP_STATUS status = DecoderFactoryPng::selftest_verify(refimage.CStr(), bitmap, bitmap->Height(), 1, 0, generate);
			img->ReleaseBitmap();

			verify(OpStatus::IsSuccess(status));

			img->Animate(null_image_listener);
		}
	} finally {
		op_free(tn);
	}
}
