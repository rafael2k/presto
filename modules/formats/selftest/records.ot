group "formats record";

include "modules/datastream/fl_lib.h";
include "modules/formats/url_dfr.h";

global{

// UInt32
#define TAG_1   1
// String 
#define TAG_2	2
// Uint32
#define TAG_3	3
// non-existent Uint32  
#define TAG_4	4
// flag 
#define TAG_5	(5 | MSB_VALUE)
// flag
#define TAG_6	(6 | MSB_VALUE)

/* record 1: tag 100
 *
 *		TAG_2  "alfa"
 *		TAG_3  1000
 *		TAG_5
 *		TAG_1  10
 */
 
/* record 2: tag 200
 *
 *		TAG_3  2000
 *		TAG_2  "beta
 *		TAG_1  20
 *		TAG_6
 */


void PrepareRecordL(DataFile_Record &record)
{

	DataRecord_Spec spec(TRUE, 1, TRUE, TRUE, TRUE, 4, TRUE, TRUE);


	DataFile_Record subrecord1;
	ANCHOR(DataFile_Record, subrecord1);
	DataFile_Record subrecord2;
	ANCHOR(DataFile_Record, subrecord2);

	subrecord1.SetRecordSpec(spec);
	subrecord1.SetTag(100);
	subrecord1.AddRecordL(TAG_2, "alfa");
	subrecord1.AddRecordL(TAG_3, 1000);
	subrecord1.AddRecordL(TAG_5);
	subrecord1.AddRecordL(TAG_1, 10);
	subrecord1.FinishedAddingL();

	subrecord2.SetRecordSpec(spec);
	subrecord2.SetTag(101);
	subrecord2.AddRecordL(TAG_3, 2000);
	subrecord2.AddRecordL(TAG_2, "beta");
	subrecord2.AddRecordL(TAG_1, 20);
	subrecord2.AddRecordL(TAG_6);
	subrecord2.FinishedAddingL();

	record.ResetRecord();
	record.SetRecordSpec(spec);
	subrecord1.WriteRecordL(&record);
	subrecord2.WriteRecordL(&record);
	record.FinishedAddingL();
}


}

test("CheckRecord")
{
	DataFile_Record record;
	DataRecord_Spec spec(TRUE, 1, TRUE, TRUE, TRUE, 4, TRUE, TRUE);

	TRAPD(op_err, PrepareRecordL(record));
	verify_success(op_err);

	record.ResetRead();
	record.SetRecordSpec(spec);

	DataFile_Record * OP_MEMORY_VAR rec1 = NULL;
	
	TRAP(op_err, rec1 = record.GetNextRecordL());

	verify_success(op_err);
	verify(rec1 != NULL);

	verify(rec1->GetTag() == 100);

	DataFile_Record * OP_MEMORY_VAR rec1a = NULL;
	DataFile_Record * OP_MEMORY_VAR rec1b = NULL;
	DataFile_Record * OP_MEMORY_VAR rec1c = NULL;
	DataFile_Record * OP_MEMORY_VAR rec1d = NULL;

	TRAP(op_err, rec1a= rec1->GetNextRecordL());
	verify_success(op_err);
	verify(rec1a != NULL);

	TRAP(op_err, rec1b= rec1->GetNextRecordL());
	verify_success(op_err);
	verify(rec1b != NULL);

	TRAP(op_err, rec1c= rec1->GetNextRecordL());
	verify_success(op_err);
	verify(rec1c != NULL);

	TRAP(op_err, rec1d= rec1->GetNextRecordL());
	verify_success(op_err);
	verify(rec1d != NULL);

	verify(!rec1->MoreData());

	verify(rec1a->GetTag() == TAG_2);
	OpString8 v1a;
	TRAP(op_err, rec1a->GetStringL(v1a));
	verify_success(op_err);
	verify_string(v1a, "alfa");
	verify(!rec1a->MoreData());

	verify(rec1b->GetTag() == TAG_3);
	uint32 v1b=0;
	TRAP(op_err, v1b = rec1b->GetUInt32L());
	verify_success(op_err);
	verify(v1b == 1000);
	verify(!rec1b->MoreData());
	
	verify(rec1c->GetTag() == TAG_5);
	verify(rec1c->GetLength() == 0);

	verify(rec1d->GetTag() == TAG_1);
	uint32 v1d=0;
	TRAP(op_err, v1d = rec1d->GetUInt32L());
	verify_success(op_err);
	verify(v1d == 10);

	OP_DELETE(rec1);
	OP_DELETE(rec1a);
	OP_DELETE(rec1b);
	OP_DELETE(rec1c);
	OP_DELETE(rec1d);

	DataFile_Record * OP_MEMORY_VAR rec2 = NULL;
	TRAP(op_err, rec2 = record.GetNextRecordL());

	verify_success(op_err);
	verify(rec2 != NULL);

	verify(rec2->GetTag() == 101);

	TRAP(op_err, rec2->IndexRecordsL());
	verify_success(op_err);
	
	uint32 v2a=0;
	TRAP(op_err, v2a = rec2->GetIndexedRecordUIntL(TAG_1));
	verify_success(op_err);
	verify(v2a == 20);

	OpString8 v2b;
	TRAP(op_err, rec2->GetIndexedRecordStringL(TAG_2, v2b));
	verify_success(op_err);
	verify_string(v2b, "beta");

	uint32 v2c = 0;
	TRAP(op_err, v2c = rec2->GetIndexedRecordUIntL(TAG_3));
	verify_success(op_err);
	verify(v2c == 2000);

	verify(rec2->GetIndexedRecord(TAG_4) == NULL);

	verify(rec2->GetIndexedRecord(TAG_5) == NULL);

	verify(rec2->GetIndexedRecordBOOL(TAG_6) == TRUE);

	OP_DELETE(rec2);
}
