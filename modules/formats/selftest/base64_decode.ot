/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "formats.base64_decode";

include "modules/formats/base64_decode.h";

subtest TestDecodingVariants(unsigned long *result, unsigned long orig_len,
							 const char *source, unsigned long len,
							 unsigned long &read_pos, char *target,
							 BOOL &warning, unsigned long max_write_len,
							 char *decode_buf, unsigned int *decode_len,
							 BOOL limitedInput)
{
	unsigned long result2, read_pos2;
	unsigned int decode_len2;
	BOOL warning2;
	char target2[256];   /* ARRAY OK 2007-12-19 roarl */
	char decode_buf2[3]; /* ARRAY OK 2007-12-19 roarl */
	
	if (max_write_len == 0)
	{
		// Simulate "max 0" bytes written, for completeness of TestDividedDecoding
		*result = 0;
		read_pos = 0;
		while (source[read_pos] == '\n' || source[read_pos] == '\r')
			read_pos++; // Ignore whitespace
		warning = FALSE;
		*decode_len = 0;
		return TRUE;
	}

	*result = GeneralDecodeBase64(
			(const unsigned char*)source,
			len,
			read_pos,
			(unsigned char*)target,
			warning,
			max_write_len,
			(unsigned char*)decode_buf,
			decode_len);

	verify(warning == FALSE);
	if (!limitedInput)
	{
		if (decode_buf)
		{
			verify(*result == max_write_len);
		}
		else
		{
			verify(*result <= max_write_len);
			if (max_write_len >= 2)
				verify(*result >= max_write_len-2);
		}
	}
	verify(*decode_len <= 2);

	const char fill_value = '\xFF';
	op_memset(target2, fill_value, sizeof(target2));
	op_memset(decode_buf2, fill_value, sizeof(decode_buf2));
	result2 = GeneralDecodeBase64(
			(const unsigned char*)source,
			len,
			read_pos2,
			(unsigned char*)target2,
			warning2,
			max_write_len,
			decode_buf ? (unsigned char*)decode_buf : NULL,
			&decode_len2);
	verify(target2[result2] == fill_value);
	verify(decode_buf2[decode_len2] == fill_value);

	op_memset(target2, fill_value, sizeof(target2));
	result2 = GeneralDecodeBase64(
			NULL,
			len,
			read_pos2,
			(unsigned char*)target2,
			warning2);
	verify(result2 == 0);
	verify(read_pos2 == 0);
	verify(target2[result2] == fill_value);
	verify(warning2 == FALSE);

	result2 = GeneralDecodeBase64(
			(const unsigned char*)source,
			0,
			read_pos2,
			(unsigned char*)target2,
			warning2,
			0,
			NULL,
			&decode_len2);
	verify(result2 == 0);
	verify(read_pos2 == 0);
	verify(target2[result2] == fill_value);
	verify(warning2 == FALSE);
	verify(decode_len2 == 0);

	result2 = GeneralDecodeBase64(
			(const unsigned char*)source,
			len,
			read_pos2,
			NULL,
			warning2,
			max_write_len,
			decode_buf ? (unsigned char*)decode_buf2 : NULL,
			&decode_len2);
	verify(result2 == *result);
	verify(read_pos2 == read_pos);
	verify(target2[result2] == fill_value);
	verify(warning2 == FALSE);
	verify(decode_buf2[decode_len2] == fill_value);
	verify(decode_len2 == *decode_len);

	if (max_write_len == orig_len)
	{
		result2 = GeneralDecodeBase64(
				(const unsigned char*)source,
				len,
				read_pos2,
				(unsigned char*)target2,
				warning2);
		verify(result2 == *result);
		verify(read_pos2 == read_pos);
		verify(op_memcmp(target2, target, result2) == 0);
		verify(target2[result2] == fill_value);
		verify(warning2 == FALSE);

		result2 = GeneralDecodeBase64(
				(const unsigned char*)source,
				len,
				read_pos2,
				(unsigned char*)target2,
				warning2,
				max_write_len + 10);
		verify(result2 == *result);
		verify(read_pos2 == read_pos);
		verify(op_memcmp(target2, target, result2) == 0);
		verify(target2[result2] == fill_value);
		verify(warning2 == FALSE);
	}

	if (!decode_buf)
	{
		result2 = GeneralDecodeBase64(
				(const unsigned char*)source,
				len,
				read_pos2,
				(unsigned char*)target2,
				warning2,
				max_write_len);
		verify(result2 == *result);
		verify(read_pos2 == read_pos);
		verify(op_memcmp(target2, target, result2) == 0);
		verify(target2[result2] == fill_value);
		verify(warning2 == FALSE);

		op_memset(decode_buf2, fill_value, sizeof(decode_buf2));
		result2 = GeneralDecodeBase64(
				(const unsigned char*)source,
				len,
				read_pos2,
				(unsigned char*)target2,
				warning2,
				max_write_len,
				(unsigned char*)decode_buf2,
				NULL);
		verify(result2 == *result);
		verify(read_pos2 == read_pos);
		verify(op_memcmp(target2, target, result2) == 0);
		verify(target2[result2] == fill_value);
		verify(warning2 == FALSE);
		verify(decode_buf2[0] == fill_value);
	
		result2 = GeneralDecodeBase64(
				(const unsigned char*)source,
				len,
				read_pos2,
				(unsigned char*)target2,
				warning2,
				max_write_len,
				NULL,
				&decode_len2);
		verify(result2 == *result);
		verify(read_pos2 == read_pos);
		verify(op_memcmp(target2, target, result2) == 0);
		verify(target2[result2] == fill_value);
		verify(warning2 == FALSE);
		verify(decode_len2 == 0);
	}
}

subtest TestDividedDecoding(const char *unencoded, const char *encoded, unsigned int div_pos, BOOL limitedInput)
{
	unsigned long unencoded_len = (unsigned long)op_strlen(unencoded);
	unsigned long encoded_len = (unsigned long)op_strlen(encoded);
	unsigned long decoded_size = ((encoded_len+3)/4)*3;
	char* decoded = OP_NEWA(char, decoded_size+1);
	char extra_buf[2]; /* ARRAY OK 2007-12-19 roarl */
	char* extra_buf_p = extra_buf;
	unsigned long decoded_len, decoded_len2, read_pos1, read_pos2, max_write_len, source_len;
	unsigned int extra_len;
	BOOL warning;

	OP_ASSERT(decoded_size >= unencoded_len);

	for (int i=0; i<2; i++)
	{
		max_write_len = limitedInput ? unencoded_len : div_pos;
		source_len = limitedInput ? div_pos : encoded_len;
		verify(TestDecodingVariants(
				   &decoded_len,
				   unencoded_len,
				   encoded,
				   source_len,
				   read_pos1,
				   decoded,
				   warning,
				   max_write_len,
				   extra_buf_p,
				   &extra_len,
				   limitedInput));

		// read_pos1 is verified implicitly by the section below
		verify(op_memcmp(decoded, unencoded, (size_t)decoded_len) == 0);
		verify(decoded_size >= decoded_len+extra_len);

		op_memcpy(decoded+decoded_len, extra_buf, extra_len);
		decoded_len += extra_len;
		verify(op_memcmp(decoded, unencoded, (size_t)decoded_len) == 0);

		max_write_len = limitedInput ? decoded_size+1 : unencoded_len-decoded_len;
		verify(TestDecodingVariants(
				   &decoded_len2,
				   max_write_len,
				   encoded+read_pos1,
				   encoded_len-read_pos1,
				   read_pos2,
				   decoded+decoded_len,
				   warning,
				   max_write_len,
				   extra_buf_p,
				   &extra_len,
				   limitedInput));

		verify(read_pos1+read_pos2 == encoded_len);
		verify(decoded_len+decoded_len2 == unencoded_len);
		verify(op_memcmp(decoded, unencoded, unencoded_len) == 0);
		verify(extra_len == 0);
		
		extra_buf_p = NULL; // Next pass will be done without extra_buf
	}
}
finally
{
	OP_DELETEA(decoded);
}

subtest TestAllDivisions(const char *unencoded, const char *encoded)
{
	unsigned long unencoded_len = (unsigned long)op_strlen(unencoded);
	unsigned long encoded_len = (unsigned long)op_strlen(encoded);
	unsigned long i;
	for (i=0; i<=unencoded_len; i++)
		verify(TestDividedDecoding(unencoded, encoded, i, FALSE));
	for (i=0; i<=encoded_len; i++)
		verify(TestDividedDecoding(unencoded, encoded, i, TRUE));
}

subtest TestInsertWhitespace(const char *unencoded, const char *encoded, const char *whitespace)
{
	unsigned long encoded_len = (unsigned long)op_strlen(encoded);
	unsigned long whitespace_len = (unsigned long)op_strlen(whitespace);
	char* new_encoded = OP_NEWA(char, encoded_len + whitespace_len + 1);
	
	for (unsigned long i=0; i<=encoded_len; i++)
	{
		op_memcpy(new_encoded, encoded, i);
		op_memcpy(new_encoded+i, whitespace, whitespace_len);
		op_memcpy(new_encoded+i+whitespace_len, encoded+i, encoded_len-i);
		new_encoded[encoded_len + whitespace_len] = 0; // for op_strlen to work in TestAllDivisions
		verify(TestAllDivisions(unencoded, new_encoded));
	}
}
finally
{
	OP_DELETEA(new_encoded);
}

table valid_input(const char*, const char*)
{
	{"Opera ftw",     "T3BlcmEgZnR3"},
	{"Opera ftw!",    "T3BlcmEgZnR3IQ=="},
	{"Opera ftw!\n",  "T3BlcmEgZnR3IQo="},
	{"Opera ftw!!\n", "T3BlcmEgZnR3ISEK"},
	{"Opera ftw!\nOpera ftw!",  "T3BlcmEgZnR3IQo=T3BlcmEgZnR3IQ=="},
}

table valid_whitespace(const char*)
{
	{"\n"},
	{"\r\n"},
	{"\n\n\r\r\n"},
}

test("base64 decoding, valid input") leakcheck;
{
	iterate (unencoded, encoded) from valid_input
	{
		verify(TestAllDivisions(unencoded, encoded));
		iterate (whitespace) from valid_whitespace
		{
			verify(TestInsertWhitespace(unencoded, encoded, whitespace));
		}
	}
}

subtest TestInvalidInput(const char *unencoded, const char *encoded)
{
	unsigned long encoded_len = (unsigned long)op_strlen(encoded);
	unsigned long decoded_size = ((encoded_len+3)/4)*3;
	char* decoded = OP_NEWA(char, decoded_size+1);
	unsigned long decoded_len, read_pos;
	BOOL warning;

	const char fill_value = '\xFF';

	op_memset(decoded, fill_value, decoded_size+1);
	decoded_len = GeneralDecodeBase64(
			(const unsigned char*)encoded,
			encoded_len,
			read_pos,
			(unsigned char*)decoded,
			warning);
	for (unsigned long i=0; i<decoded_len; i++)
		verify(decoded[i] == unencoded[i]);
	verify(decoded[decoded_len] == fill_value);
	verify(warning == TRUE);
}
finally
{
	OP_DELETEA(decoded);
}

table base64_invalid_input(const char* testname, const char *unencoded, const char *encoded)
{
	{ "ZnR!",      "ftw", "ZnR!" },
	{ "ZnR\\x80",  "ftw", "ZnR\x80" },
	{ "ZnR3!",     "ftw", "ZnR3!" },
	{ "ZnR3\\x80", "ftw", "ZnR3\x80" },
	{ "T===",      "O",   "T===" },
	{ "Tw=O",      "O",   "Tw=O" },
	{ "Tw=!",      "O",   "Tw=!" },
	{ "Tw=\\x80",  "O",   "Tw=\x80" }
}

foreach (testname, unencoded, encoded) from base64_invalid_input
{
	test("base64 decoding, invalid input(" testname ")") leakcheck;
	{
		verify(TestInvalidInput(unencoded, encoded));
	}
}
