/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2008-2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "formats.hex_converter";

include "modules/formats/hex_converter.h";
include "modules/util/opstring.h";

table to_hex(const char* testname, int aByte, int flags, const char* expected, int expected_len)
{
	{ "4F", 'O', HexConverter::UseUppercase|HexConverter::DontNullTerminate, "4F", 2 },
	{ "4f", 'O', HexConverter::UseLowercase|HexConverter::DontNullTerminate, "4f", 2 },
	{ "4F\\0", 'O', HexConverter::UseUppercase|HexConverter::NullTerminate, "4F", 3 },
	{ "4f\\0", 'O', HexConverter::UseLowercase|HexConverter::NullTerminate, "4f", 3 }
}

foreach (testname, aByte, flags, expected, expected_len) from to_hex
{
	test("ToHex(char*,int):" testname)
	{
		char dst[4]; /* ARRAY OK 2010-03-02 roarl */
		dst[expected_len] = '\xff';
		verify(HexConverter::ToHex(dst, aByte, flags) == 2);
		verify(op_memcmp(dst, expected, expected_len) == 0);
		verify(dst[expected_len] == '\xff');
	}
}

table to_hex_uni(const char* testname, int aByte, int flags, const uni_char* expected, int expected_len)
{
	{ "4F", 'O', HexConverter::UseUppercase|HexConverter::DontNullTerminate, UNI_L("4F"), 2 },
	{ "4f", 'O', HexConverter::UseLowercase|HexConverter::DontNullTerminate, UNI_L("4f"), 2 },
	{ "4F\\0", 'O', HexConverter::UseUppercase|HexConverter::NullTerminate, UNI_L("4F"), 3 },
	{ "4f\\0", 'O', HexConverter::UseLowercase|HexConverter::NullTerminate, UNI_L("4f"), 3 }
}

foreach (testname, aByte, flags, expected, expected_len) from to_hex_uni
{
	test("ToHex(uni_char*,int):" testname)
	{
		uni_char dst[4]; /* ARRAY OK 2010-03-02 roarl */
		dst[expected_len] = 0xff;
		verify(HexConverter::ToHex(dst, aByte, flags) == 2);
		verify(op_memcmp(dst, expected, expected_len*2) == 0);
		verify(dst[expected_len] == 0xff);
	}
}

table to_hex_str(const char* testname, const char* src, int flags, const char* expected, int expected_len)
{
	{ "4F70657261", "Opera", HexConverter::UseUppercase|HexConverter::DontNullTerminate, "4F70657261", 10 },
	{ "4f70657261", "Opera", HexConverter::UseLowercase|HexConverter::DontNullTerminate, "4f70657261", 10 },
	{ "4F70657261\\0", "Opera", HexConverter::UseUppercase|HexConverter::NullTerminate, "4F70657261", 11 },
	{ "4f70657261\\0", "Opera", HexConverter::UseLowercase|HexConverter::NullTerminate, "4f70657261", 11 }
}

foreach (testname, src, flags, expected, expected_len) from to_hex_str
{
	test("ToHex(char*, void*, int):" testname)
	{
		char dst[12]; /* ARRAY OK 2010-03-02 roarl */
		dst[expected_len] = '\xff';
		verify(HexConverter::ToHex(dst, src, (int)op_strlen(src), flags) == (int)op_strlen(expected));
		verify(op_memcmp(dst, expected, expected_len) == 0);
		verify(dst[expected_len] == '\xff');
	}
}

table to_hex_str_uni(const char* testname, const char* src, int flags, const uni_char* expected, int expected_len)
{
	{ "4F70657261", "Opera", HexConverter::UseUppercase|HexConverter::DontNullTerminate, UNI_L("4F70657261"), 10 },
	{ "4f70657261", "Opera", HexConverter::UseLowercase|HexConverter::DontNullTerminate, UNI_L("4f70657261"), 10 },
	{ "4F70657261\\0", "Opera", HexConverter::UseUppercase|HexConverter::NullTerminate, UNI_L("4F70657261"), 11 },
	{ "4f70657261\\0", "Opera", HexConverter::UseLowercase|HexConverter::NullTerminate, UNI_L("4f70657261"), 11 }
}

foreach (testname, src, flags, expected, expected_len) from to_hex_str_uni
{
	test("ToHex(uni_char*, void*, int):"testname)
	{
		uni_char dst[12]; /* ARRAY OK 2010-03-02 roarl */
		dst[expected_len] = 0xff;
		verify(HexConverter::ToHex(dst, src, (int)op_strlen(src), flags) == (int)uni_strlen(expected));
		verify(op_memcmp(dst, expected, expected_len*2) == 0);
		verify(dst[expected_len] == 0xff);
	}
}

table test_append_as_hex(const char* testname, const char* src, int flags, const char* expected)
{
	{ "uc,null", "Opera", HexConverter::UseUppercase, "4F70657261" },
	{ "lc", "Opera", HexConverter::UseLowercase|HexConverter::DontNullTerminate, "4f70657261" }
}

foreach (testname, src, flags, expected) from test_append_as_hex
{
	test("AppendAsHex(OpString8&, void*, int):" testname)
	{
		OpString8 dst;
		verify_success(HexConverter::AppendAsHex(dst, src, (int)op_strlen(src), flags));
		verify_string(dst, expected);
	}
}

foreach (testname, src, flags, expected) from test_append_as_hex
{
	test("AppendAsHex(OpString&, void*, int)" testname)
	{
		OpString dst;
		verify_success(HexConverter::AppendAsHex(dst, src, (int)op_strlen(src), flags));
		verify_string(dst, expected);
	}
}

test("FromHex(int,int)")
{
	verify(HexConverter::FromHex('4','f') == (unsigned char)'O');
	verify(HexConverter::FromHex('4','F') == (unsigned char)'O');
}

table hex_converter(const char* testname, const char* src, int src_len, const char* expected)
{
	{ "uc,10",	 	"4F70657261",     10, "Opera" },
	{ "lc,10",	 	"4f70657261",     10, "Opera" },
	{ "uc,all",	 	"4F70657261",   KAll, "Opera" },
	{ "lc,all",	 	"4f70657261",   KAll, "Opera" },
	{ "extra,11",	"4F70657261a",    11, "Opera" },
	{ "extra2,12",	"4f70657261 a",   12, "Opera" },
	{ "extra,all",	"4F70657261a",  KAll, "Opera" },
	{ "extra2,all",	"4f70657261 a", KAll, "Opera" }
}

foreach (testname, src, src_len, expected) from hex_converter
{
	test("FromHex(void*, char*, int) " testname)
	{
		char dst[6]; /* ARRAY OK 2010-03-02 roarl */
		dst[5] = '\xff';
		verify(HexConverter::FromHex(dst, src, src_len) == (int)op_strlen(expected));
		verify(op_memcmp(dst, expected, op_strlen(expected)) == 0);
		verify(dst[5] == '\xff');
	}
}

table hex_converter_uni(const char* testname, const uni_char* src, int src_len, const char* expected)
{
	{ "uc,10",	 	UNI_L("4F70657261"),     10, "Opera" },
	{ "lc,10",	 	UNI_L("4f70657261"),     10, "Opera" },
	{ "uc,all",	 	UNI_L("4F70657261"),   KAll, "Opera" },
	{ "lc,all",	 	UNI_L("4f70657261"),   KAll, "Opera" },
	{ "extra,11",	UNI_L("4F70657261a"),    11, "Opera" },
	{ "extra2,12",	UNI_L("4f70657261 a"),   12, "Opera" },
	{ "extra,all",	UNI_L("4F70657261a"),  KAll, "Opera" },
	{ "extra2,all",	UNI_L("4f70657261 a"), KAll, "Opera" }
}

foreach (testname, src, src_len, expected) from hex_converter_uni
{
	test("FromHex(void*, uni_char*, int) " testname)
	{
		char dst[6]; /* ARRAY OK 2010-03-02 roarl */
		dst[5] = '\xff';
		verify(HexConverter::FromHex(dst, src, src_len) == (int)op_strlen(expected));
		verify(op_memcmp(dst, expected, op_strlen(expected)) == 0);
		verify(dst[5] == '\xff');
	}
}

test("ToHex/FromHex")
{
	char hex[sizeof(int)*2+1]; /* ARRAY OK 2010-03-02 roarl */
	for (int aByte=0; aByte<256; aByte++) {
		unsigned char checkByte;
		verify(HexConverter::ToHex(hex, aByte, HexConverter::UseUppercase) == 2);
		verify(HexConverter::FromHex(&checkByte, hex, 2) == 1);
		verify(aByte == checkByte);
		verify(HexConverter::ToHex(hex, aByte, HexConverter::UseLowercase) == 2);
		verify(HexConverter::FromHex(&checkByte, hex, 2) == 1);
		verify(aByte == checkByte);
	}
	for (int i=0; i<10000; i++) {
		int rnd, checkRnd;
		rnd = op_rand();
		verify(HexConverter::ToHex(hex, &rnd, sizeof(int), HexConverter::UseUppercase) == sizeof(int)*2);
		verify(HexConverter::FromHex(&checkRnd, hex) == sizeof(int));
		verify(rnd == checkRnd);
		verify(HexConverter::ToHex(hex, &rnd, sizeof(int), HexConverter::UseLowercase) == sizeof(int)*2);
		verify(HexConverter::FromHex(&checkRnd, hex) == sizeof(int));
		verify(rnd == checkRnd);
	}
}
