group "formats argsplitter";

include "modules/formats/argsplit.h";
include "modules/util/handy.h";


// Flags, argument, argument count, usekeyword,  (name, value, assigned) # 1-4 
table argstrings(int, const char *, unsigned int, BOOL, const char *, const char *, BOOL, const char *, const char *, BOOL, const char *, const char *, BOOL, const char *, const char *, BOOL)
{
	{PARAM_SEP_COMMA, "name1=val1, name2=val2, name3=val3, name4=val4", 
	    4, TRUE,  "name1", "val1", TRUE, "name2", "val2", TRUE, "name3", "val3", TRUE, "name4", "val4", TRUE},
	{PARAM_SEP_SEMICOLON, "name1=val1; name2=val2; name3=val3; name4=val4", 
	    4, TRUE, "name1", "val1", TRUE, "name2", "val2", TRUE, "name3", "val3", TRUE, "name4", "val4", TRUE},
	{PARAM_SEP_WHITESPACE, "name1=val1 name2=val2 name3=val3 name4=val4", 
	    4, TRUE, "name1", "val1", TRUE, "name2", "val2", TRUE, "name3", "val3", TRUE, "name4", "val4", TRUE},
	{PARAM_SEP_COMMA | PARAM_WHITESPACE_FIRST_ONLY, "name1=val1 name2=val2, name3=val3, name4=val4", 
	    4, TRUE, "name1", "val1", TRUE, "name2", "val2", TRUE, "name3", "val3", TRUE, "name4", "val4", TRUE},
	{PARAM_SEP_SEMICOLON | PARAM_NO_ASSIGN, "name1=val1; name2=val2; name3=val3; name4=val4", 
	    4, FALSE, "name1=val1", "", FALSE, "name2=val2", "", FALSE, "name3=val3", "", FALSE, "name4=val4", "", FALSE},
	{PARAM_SEP_COMMA | NVS_VAL_SEP_COLON, "name1:val1, name2:val2, name3:val3, name4:val4", 
	    4, TRUE, "name1", "val1", TRUE, "name2", "val2", TRUE, "name3", "val3", TRUE, "name4", "val4", TRUE}
	{PARAM_SEP_COMMA | PARAM_HAS_RFC2231_VALUES, "name1=val1, name2*=iso-8859-1'no'val%32, name3=val3, name4=val4", 
	    4, TRUE,  "name1", "val1", TRUE, "name2", "val2", TRUE, "name3", "val3", TRUE, "name4", "val4", TRUE},
	{PARAM_SEP_COMMA | PARAM_HAS_RFC2231_VALUES, "name1=val1, name2*0*=iso-8859-1'no'val%32, name3=val3, name2*2*=%20val%37c, name4=val4, name2*1*=%20val%39b", 
	    4, TRUE,  "name1", "val1", TRUE, "name2", "val2 val9b val7c", TRUE, "name3", "val3", TRUE, "name4", "val4", TRUE},
	{PARAM_SEP_COMMA | PARAM_HAS_RFC2231_VALUES, "name1=val1, name2*0=val2, name3=val3, name2*2=\" val7c\", name4=val4, name2*1=\" val9b\"", 
	    4, TRUE,  "name1", "val1", TRUE, "name2", "val2 val9b val7c", TRUE, "name3", "val3", TRUE, "name4", "val4", TRUE},
	// RFC2231 parameters should take precedence over normal parameters
	{PARAM_SEP_COMMA | PARAM_HAS_RFC2231_VALUES, "name1=val2, name1*=iso-8859-1'no'val1, name2*0=val, name2=val4, name2*1=3",
	    4, FALSE,  "name1", "val1", TRUE, "name1", "val2", TRUE, "name2", "val3", TRUE, "name2", "val4", TRUE},
	{PARAM_SEP_COMMA | PARAM_HAS_RFC2231_VALUES, "name1*=iso-8859-1'no'val1, name1=val2, name2=val4, name2*0=val, name2*1=3",
	    4, FALSE,  "name1", "val1", TRUE, "name1", "val2", TRUE, "name2", "val3", TRUE, "name2", "val4", TRUE},
	{PARAM_SEP_COMMA | PARAM_HAS_RFC2231_VALUES, "name1*=iso-8859-1'no'val1, name1*=iso-8859-1'no'val2, name2*1=3, name2*0=val, name2=val4",
	    4, FALSE,  "name1", "val1", TRUE, "name1", "val2", TRUE, "name2", "val3", TRUE, "name2", "val4", TRUE},
	// Not quite argument splitting, but this is the best location to test header line continuation
	{NVS_VAL_SEP_COLON | NVS_SEP_CRLF_CONTINUED, "name1:val1\r\nname2:val2\r\nname3:val3\r\nname4:val4", 
	    4, TRUE,  "name1", "val1", TRUE, "name2", "val2", TRUE, "name3", "val3", TRUE, "name4", "val4", TRUE},
	{NVS_VAL_SEP_COLON | NVS_SEP_CRLF_CONTINUED, "name1:val1\r\n val11\r\nname2:val2\r val21\r\nname3:val3\n val31\r\nname4:val4\r\n val41", 
	    4, TRUE,  "name1", "val1 val11", TRUE, "name2", "val2 val21", TRUE, "name3", "val3 val31", TRUE, "name4", "val4 val41", TRUE},
}

setup {
	names[ 0].keyword = NULL;     names[0].index = 0;
	names[ 1].keyword = "name0";  names[ 1].index = 5;
	names[ 2].keyword = "name1";  names[ 2].index = 1;
	names[ 3].keyword = "name1a"; names[ 3].index = 6;
	names[ 4].keyword = "name2";  names[ 4].index = 2;
	names[ 5].keyword = "name2a"; names[ 5].index = 7;
	names[ 6].keyword = "name3";  names[ 6].index = 3;
	names[ 7].keyword = "name3a"; names[ 7].index = 8;
	names[ 8].keyword = "name4";  names[ 8].index = 4;
	names[ 9].keyword = "name4a"; names[ 9].index = 9;
	names[10].keyword = "name5";  names[10].index = 10;
}

global
{
	KeywordIndex names[11];
	unsigned int keyword_test[] = {7, 3, 6, 10, 1, 8, 12, 4, 5, 9, 2, 11}; 

	int test_check_argsplitL(int base, int flag, ParameterList *args, 
				unsigned int count, BOOL keyword, 
				const char * n1, const char * v1, BOOL a1,
				const char * n2, const char * v2, BOOL a2,
				const char * n3, const char * v3, BOOL a3,
				const char * n4, const char * v4, BOOL a4)
	{
		unsigned int i;

		if(args == NULL)
		  return base + 99;
	
		if(args->Cardinal() != count)
			return base + 1;

		Parameters *val = args->First();
		for(i = 1; i<=count; i++)
		{
			if(val == NULL)
				return base + 2;

			const char *name = NULL;
			const char *value = NULL;
			BOOL assigned = FALSE;

			switch(i)
			{
			case 1: 
				name = n1;
				value = v1;
				assigned = a1;
				break;
			case 2: 
				name = n2;
				value = v2;
				assigned = a2;
				break;
			case 3: 
				name = n3;
				value = v3;
				assigned = a3;
				break;
			case 4: 
				name = n4;
				value = v4;
				assigned = a4;
				break;
			default:
				return base + 3;
			}

			if(assigned != val->AssignedValue())
				return base + 4;
			
			if(name)
			{
				if(!val->Name())
					return base + 5;
				if(op_strcmp(val->Name(), name) != 0)
					return base + 6;
			}

			if(value)
			{
				if(!val->Value())
					return base + 7;
				if(op_strcmp(val->Value(), value) != 0)
					return base + 8;
			}

			val = val->Suc();
		}
		
		if(val != NULL)
			return base + 9;

		if(keyword)
		for(i = 0; i< ARRAY_SIZE(keyword_test); i++)
		{
			val = args->GetParameterByID(keyword_test[i]);

			if(!keyword_test[i] || keyword_test[i] > count)
			{
				if(val != NULL)
					return base + 10;
			}
			else
			{
				if(val == NULL)
					return base + 11;

				const char *name = NULL;
				const char *value = NULL;
				BOOL assigned = FALSE;

				switch(keyword_test[i])
				{
				case 1: 
					name = n1;
					value = v1;
					assigned = a1;
					break;
				case 2: 
					name = n2;
					value = v2;
					assigned = a2;
					break;
				case 3: 
					name = n3;
					value = v3;
					assigned = a3;
					break;
				case 4: 
					name = n4;
					value = v4;
					assigned = a4;
					break;
				default:
					return base + 12;
				}

				if(assigned != val->AssignedValue())
					return base + 13;
				
				if(name)
				{
					if(!val->Name())
						return base + 14;
					if(op_strcmp(val->Name(), name) != 0)
						return base + 15;
				}

				if(value)
				{
					if(!val->Value())
						return base + 16;
					if(op_strcmp(val->Value(), value) != 0)
						return base + 17;
				}
			}
		}
				
		if(keyword)
		for(i = 1; i< ARRAY_SIZE(names); i++)
		{
			
			val = args->GetParameter(names[i].keyword);

			if(!names[i].index || (unsigned int) names[i].index > count)
			{
				if(val != NULL)
					return base + 18;
			}
			else
			{
				if(val == NULL)
					return base + 19;

				const char *name = NULL;
				const char *value = NULL;
				BOOL assigned = FALSE;

				switch(names[i].index)
				{
				case 1: 
					name = n1;
					value = v1;
					assigned = a1;
					break;
				case 2: 
					name = n2;
					value = v2;
					assigned = a2;
					break;
				case 3: 
					name = n3;
					value = v3;
					assigned = a3;
					break;
				case 4: 
					name = n4;
					value = v4;
					assigned = a4;
					break;
				default:
					return base + 20;
				}

				if(assigned != val->AssignedValue())
					return base + 21;
				
				if(name)
				{
					if(!val->Name())
						return base + 22;
					if(op_strcmp(val->Name(), name) != 0)
						return base + 23;
				}

				if(value)
				{
					if(!val->Value())
						return base + 24;
					if(op_strcmp(val->Value(), value) != 0)
						return base + 25;
				}
			}
		}

		return 0;
	}

	int test_argsplitL(int flag, const char * sequence, 
				unsigned int count, BOOL keyword, 
				const char * n1, const char * v1, BOOL a1,
				const char * n2, const char * v2, BOOL a2,
				const char * n3, const char * v3, BOOL a3,
				const char * n4, const char * v4, BOOL a4)
	{
		ParameterList args(names, ARRAY_SIZE(names));
		ANCHOR(ParameterList, args);
		OpStackAutoPtr<ParameterList> new_args(NULL);
		int ret;

		args.SetValueL(sequence, flag);
		
		ret = test_check_argsplitL(0, flag, &args, count, keyword, n1, v1, a1,  n2, v2, a2,  n3, v3, a3,  n4, v4, a4);
		
		if(ret != 0)
			return ret;

		new_args.reset(args.DuplicateListL());
		
		ret = test_check_argsplitL(100,  flag, new_args.get(), count, keyword, n1, v1, a1,  n2, v2, a2,  n3, v3, a3,  n4, v4, a4);
		
		if(ret != 0)
			return ret;

		return 0;
	}

	int test_argsplit(int flag, const char * sequence, 
				unsigned int count, BOOL keyword, 
				const char * n1, const char * v1, BOOL a1,
				const char * n2, const char * v2, BOOL a2,
				const char * n3, const char * v3, BOOL a3,
				const char * n4, const char * v4, BOOL a4)
	{
		int ret = -1;
		TRAPD(op_err, ret = test_argsplitL(flag, sequence, count, keyword, n1, v1, a1,  n2, v2, a2,  n3, v3, a3,  n4, v4, a4));
		
		if(OpStatus::IsError(op_err))
		{
			ret = OpStatus::GetIntValue(op_err);
		}
		
		OP_ASSERT(ret == 0);

		return ret;		
	}
}


test("argument splitter")
{
	//output("Starting argument splitter tests \n");
	iterate(flag, sequence, count, keyword, n1, v1, a1,  n2, v2, a2,  n3, v3, a3,  n4, v4, a4) from argstrings
	{
		//output("Argument splitter testing %s \n", sequence);
		verify(test_argsplit(flag, sequence, count, keyword, n1, v1, a1,  n2, v2, a2,  n3, v3, a3,  n4, v4, a4) == 0);
	}
	//output("Ended argument splitter tests \n");
}
