group "formats headersplitter";

include "modules/formats/hdsplit.h";
include "modules/util/handy.h";


// argument, argument count, usekeyword,  (name, value) # 1-4 
table headerstrings(const char *, unsigned int, BOOL, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *)
{
	{ "Header1: data1\r\nHeader2: data2\r\nHeader3: \r\n\r\nHeader4: data4\r\n",
		4, TRUE, "Header1", "data1", "Header2", "data2", "Header3", "", "Header4", "data4"},
	{ "Header1: data1, data2\r\nHeader2: data2:data3\r\nHeader3: data3;data4\r\nHeader4: data4 data5\r\n",
		4, TRUE, "Header1", "data1, data2", "Header2", "data2:data3", "Header3", "data3;data4", "Header4", "data4 data5"}
}



setup {
	hdnames[ 0].keyword = NULL;       hdnames[ 0].index = 0;
	hdnames[ 1].keyword = "Header0";  hdnames[ 1].index = 5;
	hdnames[ 2].keyword = "Header1";  hdnames[ 2].index = 1;
	hdnames[ 3].keyword = "Header1a"; hdnames[ 3].index = 6;
	hdnames[ 4].keyword = "Header2";  hdnames[ 4].index = 2;
	hdnames[ 5].keyword = "Header2a"; hdnames[ 5].index = 7;
	hdnames[ 6].keyword = "Header3";  hdnames[ 6].index = 3;
	hdnames[ 7].keyword = "Header3a"; hdnames[ 7].index = 8;
	hdnames[ 8].keyword = "Header4";  hdnames[ 8].index = 4;
	hdnames[ 9].keyword = "Header4a"; hdnames[ 9].index = 9;
	hdnames[10].keyword = "Header5";  hdnames[10].index = 10;
}

global
{
	KeywordIndex hdnames[11];
	unsigned int keyword_test1[] = {7, 3, 6, 10, 1, 8, 12, 4, 5, 9, 2, 11}; 

	int test_check_headersplitL(int base, HeaderList *args, 
				unsigned int count, BOOL keyword, 
				const char * n1, const char * v1,
				const char * n2, const char * v2,
				const char * n3, const char * v3,
				const char * n4, const char * v4)
	{
		unsigned int i;

		if(args == NULL)
		  return base + 99;
	
		if(args->Cardinal() != count)
			return base + 1;

		HeaderEntry *val = args->First();
		for(i = 1; i<=count; i++)
		{
			if(val == NULL)
				return base + 2;

			const char *name = NULL;
			const char *value = NULL;

			switch(i)
			{
			case 1: 
				name = n1;
				value = v1;
				break;
			case 2: 
				name = n2;
				value = v2;
				break;
			case 3: 
				name = n3;
				value = v3;
				break;
			case 4: 
				name = n4;
				value = v4;
				break;
			default:
				return base + 3;
			}

			if(name)
			{
				if(!val->Name())
					return base + 5;
				if(op_strcmp(val->Name(), name) != 0)
					return base + 6;
			}

			if(value)
			{
				if(!val->Value())
					return base + 7;
				if(op_strcmp(val->Value(), value) != 0)
					return base + 8;
			}

			val = val->Suc();
		}
		
		if(val != NULL)
			return base + 9;

		if(keyword)
		for(i = 0; i< ARRAY_SIZE(keyword_test1); i++)
		{
			val = args->GetHeaderByID(keyword_test1[i]);

			if(!keyword_test1[i] || keyword_test1[i] > count)
			{
				if(val != NULL)
					return base + 10;
			}
			else
			{
				if(val == NULL)
					return base + 11;

				const char *name = NULL;
				const char *value = NULL;

				switch(keyword_test1[i])
				{
				case 1: 
					name = n1;
					value = v1;
					break;
				case 2: 
					name = n2;
					value = v2;
					break;
				case 3: 
					name = n3;
					value = v3;
					break;
				case 4: 
					name = n4;
					value = v4;
					break;
				default:
					return base + 12;
				}

				if(name)
				{
					if(!val->Name())
						return base + 14;
					if(op_strcmp(val->Name(), name) != 0)
						return base + 15;
				}

				if(value)
				{
					if(!val->Value())
						return base + 16;
					if(op_strcmp(val->Value(), value) != 0)
						return base + 17;
				}
			}
		}
				
		if(keyword)
		for(i = 1; i< ARRAY_SIZE(hdnames); i++)
		{
			
			val = args->GetHeader(hdnames[i].keyword);

			if(!hdnames[i].index || (unsigned int) hdnames[i].index > count)
			{
				if(val != NULL)
					return base + 18;
			}
			else
			{
				if(val == NULL)
					return base + 19;

				const char *name = NULL;
				const char *value = NULL;

				switch(hdnames[i].index)
				{
				case 1: 
					name = n1;
					value = v1;
					break;
				case 2: 
					name = n2;
					value = v2;
					break;
				case 3: 
					name = n3;
					value = v3;
					break;
				case 4: 
					name = n4;
					value = v4;
					break;
				default:
					return base + 20;
				}

				if(name)
				{
					if(!val->Name())
						return base + 22;
					if(op_strcmp(val->Name(), name) != 0)
						return base + 23;
				}

				if(value)
				{
					if(!val->Value())
						return base + 24;
					if(op_strcmp(val->Value(), value) != 0)
						return base + 25;
				}
			}
		}

		return 0;
	}


	int test_headersplitL(const char * sequence, 
				unsigned int count, BOOL keyword, 
				const char * n1, const char * v1,
				const char * n2, const char * v2,
				const char * n3, const char * v3,
				const char * n4, const char * v4)
	{
		HeaderList args(hdnames, ARRAY_SIZE(hdnames));
		ANCHOR(HeaderList, args);
		HeaderList args2(hdnames, ARRAY_SIZE(hdnames));
		ANCHOR(HeaderList, args2);
		OpStackAutoPtr<HeaderList> new_args(NULL);
		int ret;

		args.SetValueL((char *) sequence);

		ret = test_check_headersplitL(0, &args, count, keyword, n1,v1,n2,v2,n3,v3,n4,v4);
		
		if(ret != 0)
			return ret;
		  
		args.DuplicateHeadersL(&args2, 0);
		
		ret = test_check_headersplitL(200, &args2, count, keyword, n1,v1,n2,v2,n3,v3,n4,v4);
		
		if(ret != 0)
			return ret;
		
		return 0;
	}
	
	int test_headersplit(const char * sequence, 
				unsigned int count, BOOL keyword, 
				const char * n1, const char * v1,
				const char * n2, const char * v2,
				const char * n3, const char * v3,
				const char * n4, const char * v4)
	{
		int ret = -1;
		TRAPD(op_err, ret = test_headersplitL(sequence, count, keyword, n1, v1, n2, v2, n3, v3, n4, v4));
		
		if(OpStatus::IsError(op_err))
		{
			ret = OpStatus::GetIntValue(op_err);
		}
		
		OP_ASSERT(ret == 0);

		return ret;		
	}
}


test("Header splitter")
{
	//output("Starting Header splitter tests \n");
	iterate(sequence, count, keyword, n1, v1, n2, v2, n3, v3, n4, v4) from headerstrings
	{
		//output("Header splitter testing %s \n", sequence);
		verify(test_headersplit(sequence, count, keyword, n1, v1, n2, v2, n3, v3, n4, v4) == 0);
	}
	//output("Ended Header splitter tests \n");
}

test("Invalid space in header name")
{
	HeaderList headers;

	verify_success(headers.SetValue( (char *) "Header1: data1\r\n data11\r\nHeader 2: data2 data21\r\nHeader3 : \r\n\r\nHea der4 : data4\r\n data41\r\n"));

	verify(headers.Cardinal() == 4);

	HeaderEntry *item = headers.First();

	verify(item != NULL);

	verify_string(item->GetName(), "Header1");
	verify_string(item->GetValue(), "data1 data11");

	item = item->Suc();
	
	verify(item != NULL);

	verify_string(item->GetName(), "Header 2");
	verify_string(item->GetValue(), "data2 data21");

	item = item->Suc();
	verify(item != NULL);

	verify_string(item->GetName(), "Header3 ");
	verify_string(item->GetValue(), "");

	item = item->Suc();
	verify(item != NULL);

	verify_string(item->GetName(), "Hea der4 ");
	verify_string(item->GetValue(), "data4 data41");

	item = item->Suc();
	verify(item == NULL);
}
