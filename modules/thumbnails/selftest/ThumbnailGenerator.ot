/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * @author Haraldur Karlsson (haralkar)
 */

group "thumbnails.ThumbnailGenerator";

require SUPPORT_GENERATE_THUMBNAILS;

include "modules/doc/frm_doc.h";
include "modules/thumbnails/thumbnailgenerator.h";
include "modules/dochand/winman.h";
include "modules/display/vis_dev.h";
include "modules/windowcommander/src/WindowCommander.h";

global
{
#define LOGO_X_POS 20
#define LOGO_Y_POS 30

	Window* FindAWindowWithDoc()
	{
		Window* w = g_windowManager->FirstWindow();
		while (w && !w->GetCurrentDoc())
			w = w->Suc();

		if (!w->GetCurrentDoc())
			w = NULL;

		return w;
	}

	class MockThumbnailGenerator : public ThumbnailGenerator
	{
	public:
		MockThumbnailGenerator() : ThumbnailGenerator(0) {}
		OpRect FindLogoInOriginalWindow()
		{
		  	return OpRect(LOGO_X_POS,LOGO_Y_POS,0,0);
		}
		void SetArea(const OpRect &r)
		{
			ThumbnailGenerator::SetArea(r);
		}
	};
};

test("Generate a thumbnail from a window")
{
	Window* w = FindAWindowWithDoc();
	ThumbnailGenerator generator(w);

	verify (w); // Report this test if we can't find any open window.
	Image thumbnail = generator.GenerateThumbnail();
	verify (!thumbnail.IsEmpty());
}

test("Calculate the position of a logo on a thumbnail") require THUMBNAILS_LOGO_FINDER;
{
	MockThumbnailGenerator generator;

	OpRect area(10,16, 800,600);
	generator.SetArea(area);

	OpPoint logo = generator.FindLogo();

	verify( ((LOGO_X_POS -area.x) * THUMBNAIL_WIDTH) / area.width == logo.x );
	verify( ((LOGO_Y_POS -area.y) * THUMBNAIL_HEIGHT) / area.height == logo.y);
}

test("Generate a snapshot from a window")
{
	Window* w = g_windowManager->LastWindow();
	ThumbnailGenerator generator(w);

	verify (w); // Report this test if we can't find any open window.
	Image thumbnail = generator.GenerateSnapshot();
	verify (!thumbnail.IsEmpty());

	VisualDevice *vis_dev = w->VisualDev();

	verify(vis_dev);

	verify (thumbnail.Width() == (UINT32)vis_dev->GetRenderingViewWidth());
	verify (thumbnail.Height() == (UINT32)vis_dev->GetRenderingViewHeight());
}

html
{
	//! <html>
	//! <head><title>Simple snapshot test</title></head>
	//! <body style="background-color: lightgrey">
	//! <h1>FOOBAR</h1><br />
	//! <h1 style="color: Green">FOOBAR</h1><br />
	//! <h1 style="color: Blue">FOOBAR</h1><br />
	//! <h1 style="color: Red">FOOBAR</h1><br />
	//! <h1 style="color: Black">FOOBAR</h1><br />
	//! <h1 style="color: Yellow">FOOBAR</h1><br />
	//! <h1 style="color: Maroon">FOOBAR</h1><br />
	//! </body>
	//! </html>
}
test("Generate a snapshot from a window with zoom")
file reference_image "snapshot_zoom.png";
{
	Window* window = NULL;
	verify(state.doc);
	window = state.doc->GetWindow();
	verify(window);
	window->GetWindowCommander()->SetScale(50);

	ThumbnailGenerator generator(window);
	Image thumbnail = generator.GenerateSnapshot();
	verify(!thumbnail.IsEmpty());

	int window_width, window_height;
	window->GetWindowSize(window_width, window_height);
	verify(thumbnail.Width() == (UINT32)window_width);
	verify(thumbnail.Height() == (UINT32)window_height);
}
finally
{
	if (window) window->GetWindowCommander()->SetScale(100);
}
