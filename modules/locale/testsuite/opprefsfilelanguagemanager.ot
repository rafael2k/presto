/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2003-2012 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

group "locale.languagemanager.prefsfile";
require LOC_LNGFILELANGMAN;
require initialization; // needs TableManager

include "modules/locale/oplanguagemanager.h";
include "modules/locale/src/opprefsfilelanguagemanager.h";
include "modules/locale/locale-enum.h";
include "modules/util/opstring.h";
include "modules/util/opfile/opfile.h";
include "modules/util/opfile/opfolder.h";
include "modules/prefsfile/prefsfile.h";

// -- Global variables ---------------------------------------------------

global
{
	OpLanguageManager *oplanguagemanager_p;
	OpPrefsFileLanguageManager *languagemanager_p;
	OpFile *opfile_p;
}

// -- Global setup -------------------------------------------------------

setup
{
	languagemanager_p = OP_NEW(OpPrefsFileLanguageManager, ());
	oplanguagemanager_p = languagemanager_p;

	/* Create a file object for the testsuite language file */
	opfile_p = OP_NEW(OpFile, ());
	opfile_p->Construct(UNI_L("locale_selftest_created.lng"),
	                    OPFILE_HOME_FOLDER);

}

// -- Continued setup ----------------------------------------------------

test("Creating test language file")
{
	/* Set up the OpFile object */
	verify_not_oom(opfile_p);
	verify_success(opfile_p->Open(OPFILE_WRITE));

	/* Create the actual language file */
	static const unsigned char lng[] =
		//!; Opera language file version 2.0
		//!; This file is part of the Opera web browser.  It may not be distributed
		//!; under any circumstances.
		//!; Copyright © 2003-2006 Opera Software ASA. All rights reserved.
		//!
		//![Info]
		//!Language="test"
		//!LanguageName="selftest"
		//!Charset="iso-8859-1"
		//!Direction=1
		//!Build.Linux=42
		//!Version.Linux=9.0
		//!DB.version=666
		//!
		//![Translation]
		//!42="This is a simple ASCII string."
		"4711=\"Detta \344r en str\344ng skriven p\345 svenska, kodad enligt ISO 8859-1\"\n"
		//!37737
		;
	verify_success(opfile_p->Write(lng, sizeof lng - 1));

#ifdef LOCALE_SUPPORT_EXTRASECTION
	OpString s;
	verify_success(s.AppendFormat(UNI_L("\n[%s]\n99=\"Platform specific\"\n"), LOCALE_EXTRASECTION));
	verify_success(opfile_p->WriteUTF8Line(s.CStr()));
#endif

	verify_success(opfile_p->Close());

	/* Create a PrefsFile that wraps it */
	PrefsFile *prefsfile_p = OP_NEW(PrefsFile, (PREFS_LNG));
	verify_not_oom(prefsfile_p);
	verify_trap(prefsfile_p->ConstructL());
	verify_trap(prefsfile_p->SetFileL(opfile_p));

	/* Load the translation */
	verify_not_oom(languagemanager_p);
	TRAPD(rc, languagemanager_p->LoadTranslationL(prefsfile_p));
	prefsfile_p = NULL; // taken over
	verify_success(rc);

	/* Remove the generated file */
	opfile_p->Delete();
}

// -- OpLanguageManager --------------------------------------------------

test("OpLanguageManager::GetLanguage")
	require success "Creating test language file";
	leakcheck;
{
	OpStringC language = oplanguagemanager_p->GetLanguage();
	verify_string(language, UNI_L("test"));
}

test("OpLanguageManager::GetDatabaseVersionFromFileL")
	require success "Creating test language file";
	leakcheck;
{
	unsigned int dbver = oplanguagemanager_p->GetDatabaseVersionFromFileL();
	verify(dbver == 666);
}

test("OpLanguageManager::GetWritingDirection")
	require success "Creating test language file";
	leakcheck;
{
	OpLanguageManager::WritingDirection dir = oplanguagemanager_p->GetWritingDirection();
	verify(dir == OpLanguageManager::RTL);
}

test("OpLanguageManager::GetStringL (ASCII)")
	require success "Creating test language file";
	leakcheck;
{
	OpString d;
	int len = oplanguagemanager_p->GetStringL(Str::LocaleString(42), d);
	verify(len == 30);
	verify_string(d, UNI_L("This is a simple ASCII string."));
}

test("OpLanguageManager::GetStringL (ISO 8859-1)")
	require success "Creating test language file";
	leakcheck;
{
	OpString d;
	int len = oplanguagemanager_p->GetStringL(Str::LocaleString(4711), d);
	verify(len == 62);
	verify_string(d, UNI_L("Detta \xE4r en str\xE4ng skriven p\xE5 svenska, kodad enligt ISO 8859-1"));
}

test("OpLanguageManager::GetString (ASCII)")
	require success "Creating test language file";
	leakcheck;
{
	OpString d;
	OP_STATUS rc = oplanguagemanager_p->GetString(Str::LocaleString(42), d);
	verify_success(rc);
	verify_string(d, UNI_L("This is a simple ASCII string."));
}

test("OpLanguageManager::GetString (ISO 8859-1)")
	require success "Creating test language file";
	leakcheck;
{
	OpString d;
	OP_STATUS rc = oplanguagemanager_p->GetString(Str::LocaleString(4711), d);
	verify_success(rc);
	verify_string(d, UNI_L("Detta \xE4r en str\xE4ng skriven p\xE5 svenska, kodad enligt ISO 8859-1"));
}

test("OpLanguageManager::GetString UniString (ASCII)")
	require success "Creating test language file";
	leakcheck;
{
	UniString d;
	OP_STATUS rc = oplanguagemanager_p->GetString(Str::LocaleString(42), d);
	verify_success(rc);
	verify_string(d, UNI_L("This is a simple ASCII string."));
}

test("OpLanguageManager::GetString UniString (ISO 8859-1)")
	require success "Creating test language file";
	leakcheck;
{
	UniString d;
	OP_STATUS rc = oplanguagemanager_p->GetString(Str::LocaleString(4711), d);
	verify_success(rc);
	verify_string(d, UNI_L("Detta \xE4r en str\xE4ng skriven p\xE5 svenska, kodad enligt ISO 8859-1"));
}

// -- OpPrefsFileLanguageManager -----------------------------------------

test("OpPrefsFileLanguageManager::GetLanguage")
	require success "Creating test language file";
	leakcheck;
{
	OpStringC language = languagemanager_p->GetLanguage();
	verify_string(language, UNI_L("test"));
}

test("OpPrefsFileLanguageManager::GetDatabaseVersionFromFileL")
	require success "Creating test language file";
	leakcheck;
{
	unsigned int dbver = languagemanager_p->GetDatabaseVersionFromFileL();
	verify(dbver == 666);
}

test("OpPrefsFileLanguageManager::GetStringL (ASCII)")
	require success "Creating test language file";
	leakcheck;
{
	OpString d;
	int len = languagemanager_p->GetStringL(Str::LocaleString(42), d);
	verify(len == 30);
	verify_string(d, UNI_L("This is a simple ASCII string."));
}

test("OpPrefsFileLanguageManager::GetStringL (ISO 8859-1)")
	require success "Creating test language file";
	leakcheck;
{
	OpString d;
	int len = languagemanager_p->GetStringL(Str::LocaleString(4711), d);
	verify(len == 62);
	verify_string(d, UNI_L("Detta \xE4r en str\xE4ng skriven p\xE5 svenska, kodad enligt ISO 8859-1"));
}

test("OpPrefsFileLanguageManager::GetString (ASCII)")
	require success "Creating test language file";
	leakcheck;
{
	UniString d;
	OP_STATUS rc = languagemanager_p->GetString(Str::LocaleString(42), d);
	verify_success(rc);
	verify_string(d, UNI_L("This is a simple ASCII string."));
}

test("OpPrefsFileLanguageManager::GetString (ISO 8859-1)")
	require success "Creating test language file";
	leakcheck;
{
	UniString d;
	OP_STATUS rc = languagemanager_p->GetString(Str::LocaleString(4711), d);
	verify_success(rc);
	verify_string(d, UNI_L("Detta \xE4r en str\xE4ng skriven p\xE5 svenska, kodad enligt ISO 8859-1"));
}

test("OpPrefsFileLanguageManager::GetStringL (missing string)")
	require success "Creating test language file";
	leakcheck;
{
	OpString d;
	int len = languagemanager_p->GetStringL(Str::LocaleString(-1), d);
#ifdef LOCALE_STRING_NOT_FOUND
	verify(!d.IsEmpty());
#else
	verify(d.IsEmpty());
#endif
	verify(len == d.Length());
}

test("Checking that invalid entry was ignored")
	require success "Creating test language file";
	leakcheck;
{
	OpString d;
	int len = languagemanager_p->GetStringL(Str::LocaleString(37737), d);
#ifdef LOCALE_STRING_NOT_FOUND
	verify(len == 0 || d.Find("String not found") != KNotFound);
#else
	verify(len == 0);
#endif
}

test("Checking platform override support")
	require success "Creating test language file";
	require LOCALE_SUPPORT_EXTRASECTION;
{
	OpString d;
	int len = languagemanager_p->GetStringL(Str::LocaleString(99), d);
	verify(len);
	verify_string(d, UNI_L("Platform specific"));
}

test("Trying to load a directory")
{
	OpFile *ofp = NULL;
	PrefsFile *pfp = NULL;
	OpPrefsFileLanguageManager *pflmp = NULL;

	// Set up OpPrefsFileLanguageManager point to a directory
	OpString dir;
	verify_success(g_folder_manager->GetFolderPath(OPFILE_RESOURCES_FOLDER, dir));
	ofp = OP_NEW(OpFile, ());
	verify_not_oom(ofp);
	verify_success(ofp->Construct(dir, OPFILE_ABSOLUTE_FOLDER));
	pfp = OP_NEW(PrefsFile, (PREFS_LNG));
	verify_not_oom(pfp);
	verify_trap(pfp->ConstructL());
	verify_trap(pfp->SetFileL(ofp));
	pflmp = OP_NEW(OpPrefsFileLanguageManager, ());
	verify_not_oom(pflmp);

	// We should not crash or fail loading this
	verify_trap(pflmp->LoadTranslationL(pfp));
	pfp = NULL;
}
finally
{
	OP_DELETE(pfp);
	OP_DELETE(pflmp);
	OP_DELETE(ofp);
}

test("Trying to load an empty prefsfile")
{
	PrefsFile *pfp = NULL;
	OpPrefsFileLanguageManager *pflmp = NULL;

	// Set up OpPrefsFileLanguageManager with an empty PrefsFile
	pfp = OP_NEW(PrefsFile, (PREFS_LNG));
	verify_not_oom(pfp);
	verify_trap(pfp->ConstructL());
	pflmp = OP_NEW(OpPrefsFileLanguageManager, ());
	verify_not_oom(pflmp);

	// We should not crash or fail loading this
	verify_trap(pflmp->LoadTranslationL(pfp));
	pfp = NULL;
}
finally
{
	OP_DELETE(pfp);
	OP_DELETE(pflmp);
}

test("String survives destruction of object")
	require success "Creating test language file";
{
	UniString d;
	OP_STATUS rc = oplanguagemanager_p->GetString(Str::LocaleString(42), d);
	verify_success(rc);
	verify_string(d, UNI_L("This is a simple ASCII string."));

	OP_DELETE(languagemanager_p);
	oplanguagemanager_p = NULL;
	languagemanager_p = NULL;

	verify_string(d, UNI_L("This is a simple ASCII string."));
}

// -- Global cleanup -----------------------------------------------------

exit
{
	OP_DELETE(languagemanager_p);
	oplanguagemanager_p = NULL;
	languagemanager_p = NULL;

	OP_DELETE(opfile_p);
	opfile_p = NULL;
}
