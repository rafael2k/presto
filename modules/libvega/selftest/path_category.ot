// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
group "libvega.path.category";

require VEGA_SUPPORT;
require VEGA_3DDEVICE;

include "modules/libvega/vegapath.h";
include "modules/stdlib/include/opera_stdlib.h";
include "modules/util/opautoptr.h";

// generate convex n-gons for some n, and check that they're
// determined convex regardless of which point is the starting point
test("convex n-gon")
{
	const double radius = 10;
	const double pi = 3.141592653589793238462643;
	for (size_t n = 3; n <= 128; ++n)
	{
		// allocate storage for vertices
		VEGA_FIX* points = OP_NEWA(VEGA_FIX, 2*n);
		verify(points && "OOM");
		OpAutoArray<VEGA_FIX> _points(points);

		// generate vertex data
		const double astep = 2*pi / n;
		double angle = 0;
		for (size_t i = 0; i < n; ++i)
		{
			points[(i<<1)+0] = VEGA_FLTTOFIX((float)(radius * op_cos(angle)));
			points[(i<<1)+1] = VEGA_FLTTOFIX((float)(radius * op_sin(angle)));
			angle += astep;
		}

		// use each point as starting point
		for (size_t i = 0; i < n; ++i)
		{
			// build the path
			VEGAPath path;
			verify_success(path.moveTo(
				               points[(i<<1) + 0],
				               points[(i<<1) + 1]));
			for (size_t j = 1; j < n; ++j)
			{
				const size_t idx = ((i+j) % n) << 1;
				verify_success(path.lineTo(
					               points[idx + 0],
					               points[idx + 1]));
			}
			verify_success(path.close(true));

			// check convexity
			verify(path.getCategory() == VEGAPath::CONVEX);
		}
	}
}

// CT-1258
test("pentagon")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_INTTOFIX(347), VEGA_INTTOFIX(230)));
	verify_success(path.lineTo(VEGA_INTTOFIX( 64), VEGA_INTTOFIX(262)));
	verify_success(path.lineTo(VEGA_INTTOFIX(274), VEGA_INTTOFIX(69)));
	verify_success(path.lineTo(VEGA_INTTOFIX(217), VEGA_INTTOFIX(349)));
	verify_success(path.lineTo(VEGA_INTTOFIX( 99), VEGA_INTTOFIX(89)));
	verify_success(path.close(true));

	verify(path.getCategory() == VEGAPath::COMPLEX);
}

test("clockwise square")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_INTTOFIX(5), VEGA_INTTOFIX(0)));
	verify_success(path.lineTo(VEGA_INTTOFIX(0), VEGA_INTTOFIX(0)));
	verify_success(path.lineTo(VEGA_INTTOFIX(0), VEGA_INTTOFIX(5)));
	verify_success(path.lineTo(VEGA_INTTOFIX(5), VEGA_INTTOFIX(5)));
	verify_success(path.close(true));

	verify(path.getCategory() == VEGAPath::CONVEX);
}

test("counter-clockwise square")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_INTTOFIX(5), VEGA_INTTOFIX(5)));
	verify_success(path.lineTo(VEGA_INTTOFIX(0), VEGA_INTTOFIX(5)));
	verify_success(path.lineTo(VEGA_INTTOFIX(0), VEGA_INTTOFIX(0)));
	verify_success(path.lineTo(VEGA_INTTOFIX(5), VEGA_INTTOFIX(0)));
	verify_success(path.close(true));

	verify(path.getCategory() == VEGAPath::CONVEX);
}

test("clockwise triangle")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_INTTOFIX(0), VEGA_INTTOFIX(0)));
	verify_success(path.lineTo(VEGA_INTTOFIX(0), VEGA_INTTOFIX(5)));
	verify_success(path.lineTo(VEGA_INTTOFIX(5), VEGA_INTTOFIX(0)));
	verify_success(path.close(true));

	verify(path.getCategory() == VEGAPath::CONVEX);
}

test("counter-clockwise triangle")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_INTTOFIX(0), VEGA_INTTOFIX(0)));
	verify_success(path.lineTo(VEGA_INTTOFIX(5), VEGA_INTTOFIX(0)));
	verify_success(path.lineTo(VEGA_INTTOFIX(0), VEGA_INTTOFIX(5)));
	verify_success(path.close(true));

	verify(path.getCategory() == VEGAPath::CONVEX);
}

test("eight")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_INTTOFIX(0), VEGA_INTTOFIX(0)));
	verify_success(path.lineTo(VEGA_INTTOFIX(5), VEGA_INTTOFIX(0)));
	verify_success(path.lineTo(VEGA_INTTOFIX(0), VEGA_INTTOFIX(5)));
	verify_success(path.lineTo(VEGA_INTTOFIX(5), VEGA_INTTOFIX(5)));
	verify_success(path.close(true));

	verify(path.getCategory() == VEGAPath::COMPLEX);
}

// inward spiral, or letter "e" drawn with one stroke starting from
// bottom. this makes only right turns until closing the path.
test("clockwise inward spiral")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_INTTOFIX(1), VEGA_INTTOFIX(0)));
	verify_success(path.lineTo(VEGA_INTTOFIX(0), VEGA_INTTOFIX(1)));
	verify_success(path.lineTo(VEGA_INTTOFIX(1), VEGA_INTTOFIX(2)));
	verify_success(path.lineTo(VEGA_INTTOFIX(2), VEGA_INTTOFIX(1)));
	verify_success(path.lineTo(VEGA_INTTOFIX(1), VEGA_INTTOFIX(1)));
	verify_success(path.close(true));

	verify(path.getCategory() == VEGAPath::SIMPLE);
}

// outward spiral, or letter "e" drawn with one stroke starting from
// center. this makes only left turns, also when closing the path.
test("counter-clockwise outward spiral")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_INTTOFIX(1), VEGA_INTTOFIX(1)));
	verify_success(path.lineTo(VEGA_INTTOFIX(2), VEGA_INTTOFIX(1)));
	verify_success(path.lineTo(VEGA_INTTOFIX(1), VEGA_INTTOFIX(2)));
	verify_success(path.lineTo(VEGA_INTTOFIX(0), VEGA_INTTOFIX(1)));
	verify_success(path.lineTo(VEGA_INTTOFIX(1), VEGA_INTTOFIX(0)));
	verify_success(path.close(true));

	verify(path.getCategory() == VEGAPath::SIMPLE);
}

// inward spiral, or horizontally mirrored letter "e" drawn with one
// stroke starting from bottom. this makes only left turns until
// closing the path.
test("clockwise inward spiral")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_INTTOFIX(1), VEGA_INTTOFIX(0)));
	verify_success(path.lineTo(VEGA_INTTOFIX(2), VEGA_INTTOFIX(1)));
	verify_success(path.lineTo(VEGA_INTTOFIX(1), VEGA_INTTOFIX(2)));
	verify_success(path.lineTo(VEGA_INTTOFIX(0), VEGA_INTTOFIX(1)));
	verify_success(path.lineTo(VEGA_INTTOFIX(1), VEGA_INTTOFIX(1)));
	verify_success(path.close(true));

	verify(path.getCategory() == VEGAPath::SIMPLE);
}

// outward spiral, or horizontally mirrored letter "e" drawn with one
// stroke starting from center. this makes only right turns, also when
// closing the path.
test("clockwise outward spiral")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_INTTOFIX(1), VEGA_INTTOFIX(1)));
	verify_success(path.lineTo(VEGA_INTTOFIX(0), VEGA_INTTOFIX(1)));
	verify_success(path.lineTo(VEGA_INTTOFIX(1), VEGA_INTTOFIX(2)));
	verify_success(path.lineTo(VEGA_INTTOFIX(2), VEGA_INTTOFIX(1)));
	verify_success(path.lineTo(VEGA_INTTOFIX(1), VEGA_INTTOFIX(0)));
	verify_success(path.close(true));

	verify(path.getCategory() == VEGAPath::SIMPLE);
}

// CT-VEGA_INTTOFIX(1276)
test("rotated pentagram")
{
	VEGAPath path;
	verify_success(path.moveTo( VEGA_INTTOFIX(53), VEGA_INTTOFIX(202)));
	verify_success(path.lineTo( VEGA_INTTOFIX(85),  VEGA_INTTOFIX(26)));
	verify_success(path.lineTo(VEGA_INTTOFIX(155), VEGA_INTTOFIX(150)));
	verify_success(path.lineTo( VEGA_INTTOFIX(25),  VEGA_INTTOFIX(91)));
	verify_success(path.lineTo(VEGA_INTTOFIX(165),  VEGA_INTTOFIX(63)));
	verify_success(path.close(true));

	verify(path.getCategory() == VEGAPath::COMPLEX);
}

// CT-1292
test("line segment with thick fill")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX(125.50f), VEGA_FLTTOFIX(210.03f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(125.00f), VEGA_FLTTOFIX(204.99f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(128.99f), VEGA_FLTTOFIX(224.61f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(127.53f), VEGA_FLTTOFIX(219.92f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(135.15f), VEGA_FLTTOFIX(237.97f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(132.84f), VEGA_FLTTOFIX(233.73f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(143.60f), VEGA_FLTTOFIX(249.66f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(140.54f), VEGA_FLTTOFIX(245.96f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(154.04f), VEGA_FLTTOFIX(259.46f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(150.34f), VEGA_FLTTOFIX(256.40f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(166.27f), VEGA_FLTTOFIX(267.16f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(162.03f), VEGA_FLTTOFIX(264.85f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(180.08f), VEGA_FLTTOFIX(272.47f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(175.39f), VEGA_FLTTOFIX(271.01f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(195.01f), VEGA_FLTTOFIX(275.00f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(189.97f), VEGA_FLTTOFIX(274.50f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(210.03f), VEGA_FLTTOFIX(75.50f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(225.08f), VEGA_FLTTOFIX(77.02f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(248.78f), VEGA_FLTTOFIX(84.38f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(270.17f), VEGA_FLTTOFIX(95.99f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(288.71f), VEGA_FLTTOFIX(111.29f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(304.01f), VEGA_FLTTOFIX(129.83f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(315.62f), VEGA_FLTTOFIX(151.22f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(322.98f), VEGA_FLTTOFIX(174.92f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(324.50f), VEGA_FLTTOFIX(189.97f)));
	verify_success(path.close(true));

	verify(path.getCategory() == VEGAPath::COMPLEX);
}

test("two-tongued flag")
{
	VEGAPath path;
	verify_success(path.moveTo(0, 0));
	verify_success(path.lineTo(10, 0));
	verify_success(path.lineTo(5, 5));
	verify_success(path.lineTo(10, 10));
	verify_success(path.lineTo(0, 10));
	verify_success(path.close(true));

	verify(path.getCategory() == VEGAPath::SIMPLE);
}

test("modified self-intersecting two-tongued flag")
{
	VEGAPath path;
	verify_success(path.moveTo(0, 0));
	verify_success(path.lineTo(10, 0));
	verify_success(path.lineTo(-5, 5));
	verify_success(path.lineTo(10, 10));
	verify_success(path.lineTo(0, 10));
	verify_success(path.close(true));

	verify(path.getCategory() == VEGAPath::COMPLEX);
}

test("huge simple")
{
	VEGAPath path;
	path.moveTo(VEGA_FLTTOFIX(   0.0000000f), VEGA_FLTTOFIX(  59.4325676f));
	path.lineTo(VEGA_FLTTOFIX(   2.5000000f), VEGA_FLTTOFIX(  61.3988876f));
	path.lineTo(VEGA_FLTTOFIX(   5.0000000f), VEGA_FLTTOFIX(  71.8026962f));
	path.lineTo(VEGA_FLTTOFIX(   7.5000000f), VEGA_FLTTOFIX(  45.9642487f));
	path.lineTo(VEGA_FLTTOFIX(  10.0000000f), VEGA_FLTTOFIX(  62.3482056f));
	path.lineTo(VEGA_FLTTOFIX(  12.5000000f), VEGA_FLTTOFIX(  74.7032471f));
	path.lineTo(VEGA_FLTTOFIX(  15.0000000f), VEGA_FLTTOFIX(  40.5447235f));
	path.lineTo(VEGA_FLTTOFIX(  17.5000000f), VEGA_FLTTOFIX(  62.2271690f));
	path.lineTo(VEGA_FLTTOFIX(  20.0000000f), VEGA_FLTTOFIX(  41.8407631f));
	path.lineTo(VEGA_FLTTOFIX(  22.5000000f), VEGA_FLTTOFIX(  72.1717529f));
	path.lineTo(VEGA_FLTTOFIX(  25.0000000f), VEGA_FLTTOFIX(  77.2310791f));
	path.lineTo(VEGA_FLTTOFIX(  27.5000000f), VEGA_FLTTOFIX(  53.6793404f));
	path.lineTo(VEGA_FLTTOFIX(  30.0000000f), VEGA_FLTTOFIX(  37.9750900f));
	path.lineTo(VEGA_FLTTOFIX(  32.5000000f), VEGA_FLTTOFIX(  59.2870750f));
	path.lineTo(VEGA_FLTTOFIX(  35.0000000f), VEGA_FLTTOFIX(  60.7879028f));
	path.lineTo(VEGA_FLTTOFIX(  37.5000000f), VEGA_FLTTOFIX(  54.6182938f));
	path.lineTo(VEGA_FLTTOFIX(  40.0000000f), VEGA_FLTTOFIX(  82.2756653f));
	path.lineTo(VEGA_FLTTOFIX(  42.5000000f), VEGA_FLTTOFIX(  48.3888245f));
	path.lineTo(VEGA_FLTTOFIX(  45.0000000f), VEGA_FLTTOFIX(  78.4393997f));
	path.lineTo(VEGA_FLTTOFIX(  47.5000000f), VEGA_FLTTOFIX(  75.3532791f));
	path.lineTo(VEGA_FLTTOFIX(  50.0000000f), VEGA_FLTTOFIX(  72.5741959f));
	path.lineTo(VEGA_FLTTOFIX(  52.5000000f), VEGA_FLTTOFIX(  78.7233810f));
	path.lineTo(VEGA_FLTTOFIX(  55.0000000f), VEGA_FLTTOFIX(  43.4588890f));
	path.lineTo(VEGA_FLTTOFIX(  57.5000000f), VEGA_FLTTOFIX(  76.9987564f));
	path.lineTo(VEGA_FLTTOFIX(  60.0000000f), VEGA_FLTTOFIX(  57.6547966f));
	path.lineTo(VEGA_FLTTOFIX(  62.5000000f), VEGA_FLTTOFIX(  55.9249802f));
	path.lineTo(VEGA_FLTTOFIX(  65.0000000f), VEGA_FLTTOFIX(  47.7654190f));
	path.lineTo(VEGA_FLTTOFIX(  67.5000000f), VEGA_FLTTOFIX(  76.4399643f));
	path.lineTo(VEGA_FLTTOFIX(  70.0000000f), VEGA_FLTTOFIX(  49.8444252f));
	path.lineTo(VEGA_FLTTOFIX(  72.5000000f), VEGA_FLTTOFIX(  73.7745285f));
	path.lineTo(VEGA_FLTTOFIX(  75.0000000f), VEGA_FLTTOFIX(  64.3027725f));
	path.lineTo(VEGA_FLTTOFIX(  77.5000000f), VEGA_FLTTOFIX(  69.2319031f));
	path.lineTo(VEGA_FLTTOFIX(  80.0000000f), VEGA_FLTTOFIX(  45.0735168f));
	path.lineTo(VEGA_FLTTOFIX(  82.5000000f), VEGA_FLTTOFIX(  45.7313614f));
	path.lineTo(VEGA_FLTTOFIX(  85.0000000f), VEGA_FLTTOFIX(  49.2328453f));
	path.lineTo(VEGA_FLTTOFIX(  87.5000000f), VEGA_FLTTOFIX(  53.7721519f));
	path.lineTo(VEGA_FLTTOFIX(  90.0000000f), VEGA_FLTTOFIX(  68.4108887f));
	path.lineTo(VEGA_FLTTOFIX(  92.5000000f), VEGA_FLTTOFIX(  38.7631950f));
	path.lineTo(VEGA_FLTTOFIX(  95.0000000f), VEGA_FLTTOFIX(  75.8000183f));
	path.lineTo(VEGA_FLTTOFIX(  97.5000000f), VEGA_FLTTOFIX(  59.2945900f));
	path.lineTo(VEGA_FLTTOFIX( 100.0000000f), VEGA_FLTTOFIX(  57.2425079f));
	path.lineTo(VEGA_FLTTOFIX( 102.5000000f), VEGA_FLTTOFIX(  44.3714447f));
	path.lineTo(VEGA_FLTTOFIX( 105.0000000f), VEGA_FLTTOFIX(  46.4994278f));
	path.lineTo(VEGA_FLTTOFIX( 107.5000000f), VEGA_FLTTOFIX(  49.9842453f));
	path.lineTo(VEGA_FLTTOFIX( 110.0000000f), VEGA_FLTTOFIX(  81.7950821f));
	path.lineTo(VEGA_FLTTOFIX( 112.5000000f), VEGA_FLTTOFIX(  50.1781387f));
	path.lineTo(VEGA_FLTTOFIX( 115.0000000f), VEGA_FLTTOFIX(  76.7491379f));
	path.lineTo(VEGA_FLTTOFIX( 117.5000000f), VEGA_FLTTOFIX(  72.5458832f));
	path.lineTo(VEGA_FLTTOFIX( 120.0000000f), VEGA_FLTTOFIX(  55.8837242f));
	path.lineTo(VEGA_FLTTOFIX( 122.5000000f), VEGA_FLTTOFIX(  72.2386780f));
	path.lineTo(VEGA_FLTTOFIX( 125.0000000f), VEGA_FLTTOFIX(  63.3394432f));
	path.lineTo(VEGA_FLTTOFIX( 127.5000000f), VEGA_FLTTOFIX(  40.1649742f));
	path.lineTo(VEGA_FLTTOFIX( 130.0000000f), VEGA_FLTTOFIX(  72.9697647f));
	path.lineTo(VEGA_FLTTOFIX( 132.5000000f), VEGA_FLTTOFIX(  64.6585999f));
	path.lineTo(VEGA_FLTTOFIX( 135.0000000f), VEGA_FLTTOFIX(  44.4154243f));
	path.lineTo(VEGA_FLTTOFIX( 137.5000000f), VEGA_FLTTOFIX(  74.6278534f));
	path.lineTo(VEGA_FLTTOFIX( 140.0000000f), VEGA_FLTTOFIX(  76.0320206f));
	path.lineTo(VEGA_FLTTOFIX( 142.5000000f), VEGA_FLTTOFIX(  66.5708618f));
	path.lineTo(VEGA_FLTTOFIX( 145.0000000f), VEGA_FLTTOFIX(  60.1847191f));
	path.lineTo(VEGA_FLTTOFIX( 147.5000000f), VEGA_FLTTOFIX(  70.4484329f));
	path.lineTo(VEGA_FLTTOFIX( 150.0000000f), VEGA_FLTTOFIX(  66.9917603f));
	path.lineTo(VEGA_FLTTOFIX( 152.5000000f), VEGA_FLTTOFIX(  70.8444138f));
	path.lineTo(VEGA_FLTTOFIX( 155.0000000f), VEGA_FLTTOFIX(  72.1381912f));
	path.lineTo(VEGA_FLTTOFIX( 157.5000000f), VEGA_FLTTOFIX(  52.1228676f));
	path.lineTo(VEGA_FLTTOFIX( 160.0000000f), VEGA_FLTTOFIX(  51.0147438f));
	path.lineTo(VEGA_FLTTOFIX( 162.5000000f), VEGA_FLTTOFIX(  49.0188560f));
	path.lineTo(VEGA_FLTTOFIX( 165.0000000f), VEGA_FLTTOFIX(  53.5200157f));
	path.lineTo(VEGA_FLTTOFIX( 167.5000000f), VEGA_FLTTOFIX(  59.8121796f));
	path.lineTo(VEGA_FLTTOFIX( 170.0000000f), VEGA_FLTTOFIX(  49.2832527f));
	path.lineTo(VEGA_FLTTOFIX( 172.5000000f), VEGA_FLTTOFIX(  45.2132416f));
	path.lineTo(VEGA_FLTTOFIX( 175.0000000f), VEGA_FLTTOFIX(  74.3371887f));
	path.lineTo(VEGA_FLTTOFIX( 177.5000000f), VEGA_FLTTOFIX(  78.5027924f));
	path.lineTo(VEGA_FLTTOFIX( 180.0000000f), VEGA_FLTTOFIX(  58.8717117f));
	path.lineTo(VEGA_FLTTOFIX( 182.5000000f), VEGA_FLTTOFIX(  61.7888184f));
	path.lineTo(VEGA_FLTTOFIX( 185.0000000f), VEGA_FLTTOFIX(  39.2788315f));
	path.lineTo(VEGA_FLTTOFIX( 187.5000000f), VEGA_FLTTOFIX(  76.1546173f));
	path.lineTo(VEGA_FLTTOFIX( 190.0000000f), VEGA_FLTTOFIX(  73.3037033f));
	path.lineTo(VEGA_FLTTOFIX( 192.5000000f), VEGA_FLTTOFIX(  65.5389633f));
	path.lineTo(VEGA_FLTTOFIX( 195.0000000f), VEGA_FLTTOFIX(  55.8299789f));
	path.lineTo(VEGA_FLTTOFIX( 197.5000000f), VEGA_FLTTOFIX(  79.7572098f));
	path.lineTo(VEGA_FLTTOFIX( 200.0000000f), VEGA_FLTTOFIX(  53.1822243f));
	path.lineTo(VEGA_FLTTOFIX( 202.5000000f), VEGA_FLTTOFIX(  37.6679382f));
	path.lineTo(VEGA_FLTTOFIX( 205.0000000f), VEGA_FLTTOFIX(  80.1299286f));
	path.lineTo(VEGA_FLTTOFIX( 207.5000000f), VEGA_FLTTOFIX(  58.4048729f));
	path.lineTo(VEGA_FLTTOFIX( 210.0000000f), VEGA_FLTTOFIX(  65.7959137f));
	path.lineTo(VEGA_FLTTOFIX( 212.5000000f), VEGA_FLTTOFIX(  79.7452316f));
	path.lineTo(VEGA_FLTTOFIX( 215.0000000f), VEGA_FLTTOFIX(  56.9942894f));
	path.lineTo(VEGA_FLTTOFIX( 217.5000000f), VEGA_FLTTOFIX(  51.6957283f));
	path.lineTo(VEGA_FLTTOFIX( 220.0000000f), VEGA_FLTTOFIX(  74.1300507f));
	path.lineTo(VEGA_FLTTOFIX( 222.5000000f), VEGA_FLTTOFIX(  49.6151657f));
	path.lineTo(VEGA_FLTTOFIX( 225.0000000f), VEGA_FLTTOFIX(  60.1262817f));
	path.lineTo(VEGA_FLTTOFIX( 227.5000000f), VEGA_FLTTOFIX(  62.6678085f));
	path.lineTo(VEGA_FLTTOFIX( 230.0000000f), VEGA_FLTTOFIX(  70.4460907f));
	path.lineTo(VEGA_FLTTOFIX( 232.5000000f), VEGA_FLTTOFIX(  48.4524803f));
	path.lineTo(VEGA_FLTTOFIX( 235.0000000f), VEGA_FLTTOFIX(  45.8673668f));
	path.lineTo(VEGA_FLTTOFIX( 237.5000000f), VEGA_FLTTOFIX(  65.9671555f));
	path.lineTo(VEGA_FLTTOFIX( 240.0000000f), VEGA_FLTTOFIX(  50.2550621f));
	path.lineTo(VEGA_FLTTOFIX( 242.5000000f), VEGA_FLTTOFIX(  66.0660858f));
	path.lineTo(VEGA_FLTTOFIX( 245.0000000f), VEGA_FLTTOFIX(  80.6587067f));
	path.lineTo(VEGA_FLTTOFIX( 247.5000000f), VEGA_FLTTOFIX(  79.4895325f));
	path.lineTo(VEGA_FLTTOFIX( 250.0000000f), VEGA_FLTTOFIX(  62.1037254f));
	path.lineTo(VEGA_FLTTOFIX( 252.5000000f), VEGA_FLTTOFIX(  62.8399506f));
	path.lineTo(VEGA_FLTTOFIX( 255.0000000f), VEGA_FLTTOFIX(  50.7713776f));
	path.lineTo(VEGA_FLTTOFIX( 257.5000000f), VEGA_FLTTOFIX(  53.9773026f));
	path.lineTo(VEGA_FLTTOFIX( 260.0000000f), VEGA_FLTTOFIX(  53.6472397f));
	path.lineTo(VEGA_FLTTOFIX( 262.5000000f), VEGA_FLTTOFIX(  43.1976051f));
	path.lineTo(VEGA_FLTTOFIX( 265.0000000f), VEGA_FLTTOFIX(  51.6275826f));
	path.lineTo(VEGA_FLTTOFIX( 267.5000000f), VEGA_FLTTOFIX(  39.8278885f));
	path.lineTo(VEGA_FLTTOFIX( 270.0000000f), VEGA_FLTTOFIX(  72.7227631f));
	path.lineTo(VEGA_FLTTOFIX( 272.5000000f), VEGA_FLTTOFIX(  73.0287247f));
	path.lineTo(VEGA_FLTTOFIX( 275.0000000f), VEGA_FLTTOFIX(  46.7313766f));
	path.lineTo(VEGA_FLTTOFIX( 277.5000000f), VEGA_FLTTOFIX(  61.5051918f));
	path.lineTo(VEGA_FLTTOFIX( 280.0000000f), VEGA_FLTTOFIX(  47.8947906f));
	path.lineTo(VEGA_FLTTOFIX( 282.5000000f), VEGA_FLTTOFIX(  77.9535828f));
	path.lineTo(VEGA_FLTTOFIX( 285.0000000f), VEGA_FLTTOFIX(  72.5438004f));
	path.lineTo(VEGA_FLTTOFIX( 287.5000000f), VEGA_FLTTOFIX(  70.9889832f));
	path.lineTo(VEGA_FLTTOFIX( 290.0000000f), VEGA_FLTTOFIX(  38.4390144f));
	path.lineTo(VEGA_FLTTOFIX( 292.5000000f), VEGA_FLTTOFIX(  69.7997208f));
	path.lineTo(VEGA_FLTTOFIX( 295.0000000f), VEGA_FLTTOFIX(  58.9421005f));
	path.lineTo(VEGA_FLTTOFIX( 297.5000000f), VEGA_FLTTOFIX(  53.3774872f));
	path.lineTo(VEGA_FLTTOFIX( 300.0000000f), VEGA_FLTTOFIX(  52.1962700f));
	path.lineTo(VEGA_FLTTOFIX( 302.5000000f), VEGA_FLTTOFIX(  60.2298088f));
	path.lineTo(VEGA_FLTTOFIX( 305.0000000f), VEGA_FLTTOFIX(  46.2773438f));
	path.lineTo(VEGA_FLTTOFIX( 307.5000000f), VEGA_FLTTOFIX(  73.8410568f));
	path.lineTo(VEGA_FLTTOFIX( 310.0000000f), VEGA_FLTTOFIX(  72.3319092f));
	path.lineTo(VEGA_FLTTOFIX( 312.5000000f), VEGA_FLTTOFIX(  72.6492157f));
	path.lineTo(VEGA_FLTTOFIX( 315.0000000f), VEGA_FLTTOFIX(  41.0053368f));
	path.lineTo(VEGA_FLTTOFIX( 317.5000000f), VEGA_FLTTOFIX(  58.1986542f));
	path.lineTo(VEGA_FLTTOFIX( 320.0000000f), VEGA_FLTTOFIX(  40.4938889f));
	path.lineTo(VEGA_FLTTOFIX( 322.5000000f), VEGA_FLTTOFIX(  39.5251160f));
	path.lineTo(VEGA_FLTTOFIX( 325.0000000f), VEGA_FLTTOFIX(  64.0258026f));
	path.lineTo(VEGA_FLTTOFIX( 327.5000000f), VEGA_FLTTOFIX(  41.2470436f));
	path.lineTo(VEGA_FLTTOFIX( 330.0000000f), VEGA_FLTTOFIX(  74.1161652f));
	path.lineTo(VEGA_FLTTOFIX( 332.5000000f), VEGA_FLTTOFIX(  48.2843094f));
	path.lineTo(VEGA_FLTTOFIX( 335.0000000f), VEGA_FLTTOFIX(  39.1560707f));
	path.lineTo(VEGA_FLTTOFIX( 337.5000000f), VEGA_FLTTOFIX(  79.5704803f));
	path.lineTo(VEGA_FLTTOFIX( 340.0000000f), VEGA_FLTTOFIX(  55.8691750f));
	path.lineTo(VEGA_FLTTOFIX( 342.5000000f), VEGA_FLTTOFIX(  49.3838921f));
	path.lineTo(VEGA_FLTTOFIX( 345.0000000f), VEGA_FLTTOFIX(  74.5057907f));
	path.lineTo(VEGA_FLTTOFIX( 347.5000000f), VEGA_FLTTOFIX(  64.4809189f));
	path.lineTo(VEGA_FLTTOFIX( 350.0000000f), VEGA_FLTTOFIX(  53.6508789f));
	path.lineTo(VEGA_FLTTOFIX( 352.5000000f), VEGA_FLTTOFIX(  61.9383125f));
	path.lineTo(VEGA_FLTTOFIX( 355.0000000f), VEGA_FLTTOFIX(  63.3126945f));
	path.lineTo(VEGA_FLTTOFIX( 357.5000000f), VEGA_FLTTOFIX(  45.1251602f));
	path.lineTo(VEGA_FLTTOFIX( 360.0000000f), VEGA_FLTTOFIX(  55.3232803f));
	path.lineTo(VEGA_FLTTOFIX( 362.5000000f), VEGA_FLTTOFIX(  77.0542984f));
	path.lineTo(VEGA_FLTTOFIX( 365.0000000f), VEGA_FLTTOFIX(  69.3277664f));
	path.lineTo(VEGA_FLTTOFIX( 367.5000000f), VEGA_FLTTOFIX(  58.8709373f));
	path.lineTo(VEGA_FLTTOFIX( 370.0000000f), VEGA_FLTTOFIX(  59.5662003f));
	path.lineTo(VEGA_FLTTOFIX( 372.5000000f), VEGA_FLTTOFIX(  68.8841400f));
	path.lineTo(VEGA_FLTTOFIX( 375.0000000f), VEGA_FLTTOFIX(  47.6875114f));
	path.lineTo(VEGA_FLTTOFIX( 377.5000000f), VEGA_FLTTOFIX(  39.1730309f));
	path.lineTo(VEGA_FLTTOFIX( 380.0000000f), VEGA_FLTTOFIX(  40.2421074f));
	path.lineTo(VEGA_FLTTOFIX( 382.5000000f), VEGA_FLTTOFIX(  39.5148010f));
	path.lineTo(VEGA_FLTTOFIX( 385.0000000f), VEGA_FLTTOFIX(  52.2458801f));
	path.lineTo(VEGA_FLTTOFIX( 387.5000000f), VEGA_FLTTOFIX(  79.5445328f));
	path.lineTo(VEGA_FLTTOFIX( 390.0000000f), VEGA_FLTTOFIX(  73.4229584f));
	path.lineTo(VEGA_FLTTOFIX( 392.5000000f), VEGA_FLTTOFIX(  75.7038193f));
	path.lineTo(VEGA_FLTTOFIX( 395.0000000f), VEGA_FLTTOFIX(  60.6666336f));
	path.lineTo(VEGA_FLTTOFIX( 397.5000000f), VEGA_FLTTOFIX(  73.8358459f));
	path.lineTo(VEGA_FLTTOFIX( 400.0000000f), VEGA_FLTTOFIX(  67.0494232f));
	path.lineTo(VEGA_FLTTOFIX( 402.5000000f), VEGA_FLTTOFIX(  82.3362427f));
	path.lineTo(VEGA_FLTTOFIX( 405.0000000f), VEGA_FLTTOFIX(  51.8154755f));
	path.lineTo(VEGA_FLTTOFIX( 407.5000000f), VEGA_FLTTOFIX(  47.8642387f));
	path.lineTo(VEGA_FLTTOFIX( 410.0000000f), VEGA_FLTTOFIX(  81.8102951f));
	path.lineTo(VEGA_FLTTOFIX( 412.5000000f), VEGA_FLTTOFIX(  45.1848564f));
	path.lineTo(VEGA_FLTTOFIX( 415.0000000f), VEGA_FLTTOFIX(  52.4036713f));
	path.lineTo(VEGA_FLTTOFIX( 417.5000000f), VEGA_FLTTOFIX(  61.8223534f));
	path.lineTo(VEGA_FLTTOFIX( 420.0000000f), VEGA_FLTTOFIX(  74.7412186f));
	path.lineTo(VEGA_FLTTOFIX( 422.5000000f), VEGA_FLTTOFIX(  70.8546143f));
	path.lineTo(VEGA_FLTTOFIX( 425.0000000f), VEGA_FLTTOFIX(  48.5049934f));
	path.lineTo(VEGA_FLTTOFIX( 427.5000000f), VEGA_FLTTOFIX(  48.0657272f));
	path.lineTo(VEGA_FLTTOFIX( 430.0000000f), VEGA_FLTTOFIX(  48.7960815f));
	path.lineTo(VEGA_FLTTOFIX( 432.5000000f), VEGA_FLTTOFIX(  74.6768646f));
	path.lineTo(VEGA_FLTTOFIX( 435.0000000f), VEGA_FLTTOFIX(  59.4819679f));
	path.lineTo(VEGA_FLTTOFIX( 437.5000000f), VEGA_FLTTOFIX(  40.8028488f));
	path.lineTo(VEGA_FLTTOFIX( 440.0000000f), VEGA_FLTTOFIX(  80.4593887f));
	path.lineTo(VEGA_FLTTOFIX( 442.5000000f), VEGA_FLTTOFIX(  60.8078384f));
	path.lineTo(VEGA_FLTTOFIX( 445.0000000f), VEGA_FLTTOFIX(  56.7920990f));
	path.lineTo(VEGA_FLTTOFIX( 447.5000000f), VEGA_FLTTOFIX(  55.9033432f));
	path.lineTo(VEGA_FLTTOFIX( 450.0000000f), VEGA_FLTTOFIX(  64.5299683f));
	path.lineTo(VEGA_FLTTOFIX( 452.5000000f), VEGA_FLTTOFIX(  66.6676559f));
	path.lineTo(VEGA_FLTTOFIX( 455.0000000f), VEGA_FLTTOFIX(  58.1769867f));
	path.lineTo(VEGA_FLTTOFIX( 457.5000000f), VEGA_FLTTOFIX(  73.8525772f));
	path.lineTo(VEGA_FLTTOFIX( 460.0000000f), VEGA_FLTTOFIX(  42.6880302f));
	path.lineTo(VEGA_FLTTOFIX( 462.5000000f), VEGA_FLTTOFIX(  57.8852844f));
	path.lineTo(VEGA_FLTTOFIX( 465.0000000f), VEGA_FLTTOFIX(  65.5492249f));
	path.lineTo(VEGA_FLTTOFIX( 467.5000000f), VEGA_FLTTOFIX(  53.5884171f));
	path.lineTo(VEGA_FLTTOFIX( 470.0000000f), VEGA_FLTTOFIX(  59.8376389f));
	path.lineTo(VEGA_FLTTOFIX( 472.5000000f), VEGA_FLTTOFIX(  65.7982178f));
	path.lineTo(VEGA_FLTTOFIX( 475.0000000f), VEGA_FLTTOFIX(  81.8751221f));
	path.lineTo(VEGA_FLTTOFIX( 477.5000000f), VEGA_FLTTOFIX(  49.3641853f));
	path.lineTo(VEGA_FLTTOFIX( 480.0000000f), VEGA_FLTTOFIX(  65.9238968f));
	path.lineTo(VEGA_FLTTOFIX( 482.5000000f), VEGA_FLTTOFIX(  78.5371323f));
	path.lineTo(VEGA_FLTTOFIX( 485.0000000f), VEGA_FLTTOFIX(  60.7848091f));
	path.lineTo(VEGA_FLTTOFIX( 487.5000000f), VEGA_FLTTOFIX(  73.2146759f));
	path.lineTo(VEGA_FLTTOFIX( 490.0000000f), VEGA_FLTTOFIX(  66.1603775f));
	path.lineTo(VEGA_FLTTOFIX( 492.5000000f), VEGA_FLTTOFIX(  60.0431404f));
	path.lineTo(VEGA_FLTTOFIX( 495.0000000f), VEGA_FLTTOFIX(  37.5433121f));
	path.lineTo(VEGA_FLTTOFIX( 497.5000000f), VEGA_FLTTOFIX(  43.3938828f));
	path.lineTo(VEGA_FLTTOFIX( 500.0000000f), VEGA_FLTTOFIX(  45.6190147f));
	path.lineTo(VEGA_FLTTOFIX( 502.5000000f), VEGA_FLTTOFIX(  52.1922722f));
	path.lineTo(VEGA_FLTTOFIX( 505.0000000f), VEGA_FLTTOFIX(  61.1623116f));
	path.lineTo(VEGA_FLTTOFIX( 507.5000000f), VEGA_FLTTOFIX(  48.0903206f));
	path.lineTo(VEGA_FLTTOFIX( 510.0000000f), VEGA_FLTTOFIX(  42.0304184f));
	path.lineTo(VEGA_FLTTOFIX( 512.5000000f), VEGA_FLTTOFIX(  46.1251221f));
	path.lineTo(VEGA_FLTTOFIX( 515.0000000f), VEGA_FLTTOFIX(  38.9394913f));
	path.lineTo(VEGA_FLTTOFIX( 517.5000000f), VEGA_FLTTOFIX(  41.3261566f));
	path.lineTo(VEGA_FLTTOFIX( 520.0000000f), VEGA_FLTTOFIX(  82.1943359f));
	path.lineTo(VEGA_FLTTOFIX( 522.5000000f), VEGA_FLTTOFIX(  44.9213295f));
	path.lineTo(VEGA_FLTTOFIX( 525.0000000f), VEGA_FLTTOFIX(  58.6300163f));
	path.lineTo(VEGA_FLTTOFIX( 527.5000000f), VEGA_FLTTOFIX(  40.6905861f));
	path.lineTo(VEGA_FLTTOFIX( 530.0000000f), VEGA_FLTTOFIX(  71.1835480f));
	path.lineTo(VEGA_FLTTOFIX( 532.5000000f), VEGA_FLTTOFIX(  56.0808716f));
	path.lineTo(VEGA_FLTTOFIX( 535.0000000f), VEGA_FLTTOFIX(  46.9151917f));
	path.lineTo(VEGA_FLTTOFIX( 537.5000000f), VEGA_FLTTOFIX(  43.4270020f));
	path.lineTo(VEGA_FLTTOFIX( 540.0000000f), VEGA_FLTTOFIX(  79.1993484f));
	path.lineTo(VEGA_FLTTOFIX( 542.5000000f), VEGA_FLTTOFIX(  59.2486382f));
	path.lineTo(VEGA_FLTTOFIX( 545.0000000f), VEGA_FLTTOFIX(  69.7227173f));
	path.lineTo(VEGA_FLTTOFIX( 547.5000000f), VEGA_FLTTOFIX(  69.8388977f));
	path.lineTo(VEGA_FLTTOFIX( 550.0000000f), VEGA_FLTTOFIX(  46.7400475f));
	path.lineTo(VEGA_FLTTOFIX( 552.5000000f), VEGA_FLTTOFIX(  49.4902878f));
	path.lineTo(VEGA_FLTTOFIX( 555.0000000f), VEGA_FLTTOFIX(  57.3243446f));
	path.lineTo(VEGA_FLTTOFIX( 557.5000000f), VEGA_FLTTOFIX(  71.4899750f));
	path.lineTo(VEGA_FLTTOFIX( 560.0000000f), VEGA_FLTTOFIX(  47.1613007f));
	path.lineTo(VEGA_FLTTOFIX( 562.5000000f), VEGA_FLTTOFIX(  52.0698853f));
	path.lineTo(VEGA_FLTTOFIX( 565.0000000f), VEGA_FLTTOFIX(  41.3517418f));
	path.lineTo(VEGA_FLTTOFIX( 567.5000000f), VEGA_FLTTOFIX(  55.4097939f));
	path.lineTo(VEGA_FLTTOFIX( 570.0000000f), VEGA_FLTTOFIX(  44.0922165f));
	path.lineTo(VEGA_FLTTOFIX( 572.5000000f), VEGA_FLTTOFIX(  82.0875702f));
	path.lineTo(VEGA_FLTTOFIX( 575.0000000f), VEGA_FLTTOFIX(  80.3930054f));
	path.lineTo(VEGA_FLTTOFIX( 577.5000000f), VEGA_FLTTOFIX(  55.3720627f));
	path.lineTo(VEGA_FLTTOFIX( 580.0000000f), VEGA_FLTTOFIX(  56.4557610f));
	path.lineTo(VEGA_FLTTOFIX( 582.5000000f), VEGA_FLTTOFIX(  49.0119705f));
	path.lineTo(VEGA_FLTTOFIX( 585.0000000f), VEGA_FLTTOFIX(  75.3033066f));
	path.lineTo(VEGA_FLTTOFIX( 587.5000000f), VEGA_FLTTOFIX(  44.6113396f));
	path.lineTo(VEGA_FLTTOFIX( 590.0000000f), VEGA_FLTTOFIX(  59.7678871f));
	path.lineTo(VEGA_FLTTOFIX( 592.5000000f), VEGA_FLTTOFIX(  76.5594177f));
	path.lineTo(VEGA_FLTTOFIX( 595.0000000f), VEGA_FLTTOFIX(  79.5443726f));
	path.lineTo(VEGA_FLTTOFIX( 597.5000000f), VEGA_FLTTOFIX(  45.7536736f));
	path.lineTo(VEGA_FLTTOFIX( 600.0000000f), VEGA_FLTTOFIX(  48.5313568f));
	path.lineTo(VEGA_FLTTOFIX( 602.5000000f), VEGA_FLTTOFIX(  46.9685707f));
	path.lineTo(VEGA_FLTTOFIX( 605.0000000f), VEGA_FLTTOFIX(  49.2219772f));
	path.lineTo(VEGA_FLTTOFIX( 607.5000000f), VEGA_FLTTOFIX(  72.1373596f));
	path.lineTo(VEGA_FLTTOFIX( 610.0000000f), VEGA_FLTTOFIX(  77.5768890f));
	path.lineTo(VEGA_FLTTOFIX( 612.5000000f), VEGA_FLTTOFIX(  38.2815742f));
	path.lineTo(VEGA_FLTTOFIX( 615.0000000f), VEGA_FLTTOFIX(  75.8896103f));
	path.lineTo(VEGA_FLTTOFIX( 617.5000000f), VEGA_FLTTOFIX(  38.8509026f));
	path.lineTo(VEGA_FLTTOFIX( 620.0000000f), VEGA_FLTTOFIX(  54.2632942f));
	path.lineTo(VEGA_FLTTOFIX( 622.5000000f), VEGA_FLTTOFIX(  80.2953720f));
	path.lineTo(VEGA_FLTTOFIX( 625.0000000f), VEGA_FLTTOFIX(  46.2625542f));
	path.lineTo(VEGA_FLTTOFIX( 627.5000000f), VEGA_FLTTOFIX(  71.8667831f));
	path.lineTo(VEGA_FLTTOFIX( 630.0000000f), VEGA_FLTTOFIX(  69.4647598f));
	path.lineTo(VEGA_FLTTOFIX( 632.5000000f), VEGA_FLTTOFIX(  63.5197372f));
	path.lineTo(VEGA_FLTTOFIX( 635.0000000f), VEGA_FLTTOFIX(  44.4810638f));
	path.lineTo(VEGA_FLTTOFIX( 637.5000000f), VEGA_FLTTOFIX(  42.6100121f));
	path.lineTo(VEGA_FLTTOFIX( 640.0000000f), VEGA_FLTTOFIX(  80.9253998f));
	path.lineTo(VEGA_FLTTOFIX( 642.5000000f), VEGA_FLTTOFIX(  69.8977966f));
	path.lineTo(VEGA_FLTTOFIX( 645.0000000f), VEGA_FLTTOFIX(  44.3110580f));
	path.lineTo(VEGA_FLTTOFIX( 647.5000000f), VEGA_FLTTOFIX(  73.0588379f));
	path.lineTo(VEGA_FLTTOFIX( 650.0000000f), VEGA_FLTTOFIX(  75.1271057f));
	path.lineTo(VEGA_FLTTOFIX( 652.5000000f), VEGA_FLTTOFIX(  78.8518753f));
	path.lineTo(VEGA_FLTTOFIX( 655.0000000f), VEGA_FLTTOFIX(  57.1101646f));
	path.lineTo(VEGA_FLTTOFIX( 657.5000000f), VEGA_FLTTOFIX(  66.4996109f));
	path.lineTo(VEGA_FLTTOFIX( 660.0000000f), VEGA_FLTTOFIX(  68.4365082f));
	path.lineTo(VEGA_FLTTOFIX( 662.5000000f), VEGA_FLTTOFIX(  69.9158859f));
	path.lineTo(VEGA_FLTTOFIX( 665.0000000f), VEGA_FLTTOFIX(  37.9677505f));
	path.lineTo(VEGA_FLTTOFIX( 667.5000000f), VEGA_FLTTOFIX(  71.6109161f));
	path.lineTo(VEGA_FLTTOFIX( 670.0000000f), VEGA_FLTTOFIX(  81.0577927f));
	path.lineTo(VEGA_FLTTOFIX( 672.5000000f), VEGA_FLTTOFIX(  49.4316597f));
	path.lineTo(VEGA_FLTTOFIX( 675.0000000f), VEGA_FLTTOFIX(  76.1679306f));
	path.lineTo(VEGA_FLTTOFIX( 677.5000000f), VEGA_FLTTOFIX(  73.6811218f));
	path.lineTo(VEGA_FLTTOFIX( 680.0000000f), VEGA_FLTTOFIX(  41.8974266f));
	path.lineTo(VEGA_FLTTOFIX( 682.5000000f), VEGA_FLTTOFIX(  55.2881927f));
	path.lineTo(VEGA_FLTTOFIX( 685.0000000f), VEGA_FLTTOFIX(  55.3894844f));
	path.lineTo(VEGA_FLTTOFIX( 687.5000000f), VEGA_FLTTOFIX(  75.3794785f));
	path.lineTo(VEGA_FLTTOFIX( 690.0000000f), VEGA_FLTTOFIX(  50.6515388f));
	path.lineTo(VEGA_FLTTOFIX( 692.5000000f), VEGA_FLTTOFIX(  80.3269043f));
	path.lineTo(VEGA_FLTTOFIX( 695.0000000f), VEGA_FLTTOFIX(  38.1617966f));
	path.lineTo(VEGA_FLTTOFIX( 697.5000000f), VEGA_FLTTOFIX(  75.7830429f));
	path.lineTo(VEGA_FLTTOFIX( 700.0000000f), VEGA_FLTTOFIX(  70.1508484f));
	path.lineTo(VEGA_FLTTOFIX( 702.5000000f), VEGA_FLTTOFIX(  54.5609474f));
	path.lineTo(VEGA_FLTTOFIX( 705.0000000f), VEGA_FLTTOFIX(  50.5674133f));
	path.lineTo(VEGA_FLTTOFIX( 707.5000000f), VEGA_FLTTOFIX(  55.6772308f));
	path.lineTo(VEGA_FLTTOFIX( 710.0000000f), VEGA_FLTTOFIX(  48.8790894f));
	path.lineTo(VEGA_FLTTOFIX( 712.5000000f), VEGA_FLTTOFIX(  66.9959564f));
	path.lineTo(VEGA_FLTTOFIX( 715.0000000f), VEGA_FLTTOFIX(  52.7826271f));
	path.lineTo(VEGA_FLTTOFIX( 717.5000000f), VEGA_FLTTOFIX(  71.2964859f));
	path.lineTo(VEGA_FLTTOFIX( 720.0000000f), VEGA_FLTTOFIX(  39.3658791f));
	path.lineTo(VEGA_FLTTOFIX( 722.5000000f), VEGA_FLTTOFIX(  42.1249123f));
	path.lineTo(VEGA_FLTTOFIX( 725.0000000f), VEGA_FLTTOFIX(  81.2882996f));
	path.lineTo(VEGA_FLTTOFIX( 727.5000000f), VEGA_FLTTOFIX(  54.8921623f));
	path.lineTo(VEGA_FLTTOFIX( 730.0000000f), VEGA_FLTTOFIX(  46.2106094f));
	path.lineTo(VEGA_FLTTOFIX( 732.5000000f), VEGA_FLTTOFIX(  63.4901924f));
	path.lineTo(VEGA_FLTTOFIX( 735.0000000f), VEGA_FLTTOFIX(  49.8076591f));
	path.lineTo(VEGA_FLTTOFIX( 737.5000000f), VEGA_FLTTOFIX(  39.3879433f));
	path.lineTo(VEGA_FLTTOFIX( 740.0000000f), VEGA_FLTTOFIX(  71.9695892f));
	path.lineTo(VEGA_FLTTOFIX( 742.5000000f), VEGA_FLTTOFIX(  75.1366806f));
	path.lineTo(VEGA_FLTTOFIX( 745.0000000f), VEGA_FLTTOFIX(  45.7168312f));
	path.lineTo(VEGA_FLTTOFIX( 747.5000000f), VEGA_FLTTOFIX(  74.9807129f));
	path.lineTo(VEGA_FLTTOFIX( 750.0000000f), VEGA_FLTTOFIX(  57.3432922f));
	path.lineTo(VEGA_FLTTOFIX( 752.5000000f), VEGA_FLTTOFIX(  45.4328041f));
	path.lineTo(VEGA_FLTTOFIX( 755.0000000f), VEGA_FLTTOFIX(  69.0090485f));
	path.lineTo(VEGA_FLTTOFIX( 757.5000000f), VEGA_FLTTOFIX(  50.0875473f));
	path.lineTo(VEGA_FLTTOFIX( 760.0000000f), VEGA_FLTTOFIX(  44.7037086f));
	path.lineTo(VEGA_FLTTOFIX( 762.5000000f), VEGA_FLTTOFIX(  76.6282730f));
	path.lineTo(VEGA_FLTTOFIX( 765.0000000f), VEGA_FLTTOFIX(  78.6385498f));
	path.lineTo(VEGA_FLTTOFIX( 767.5000000f), VEGA_FLTTOFIX(  60.9330139f));
	path.lineTo(VEGA_FLTTOFIX( 770.0000000f), VEGA_FLTTOFIX(  79.7086945f));
	path.lineTo(VEGA_FLTTOFIX( 772.5000000f), VEGA_FLTTOFIX(  53.4897156f));
	path.lineTo(VEGA_FLTTOFIX( 775.0000000f), VEGA_FLTTOFIX(  48.2925034f));
	path.lineTo(VEGA_FLTTOFIX( 777.5000000f), VEGA_FLTTOFIX(  43.1698837f));
	path.lineTo(VEGA_FLTTOFIX( 780.0000000f), VEGA_FLTTOFIX(  47.4102402f));
	path.lineTo(VEGA_FLTTOFIX( 782.5000000f), VEGA_FLTTOFIX(  52.5207634f));
	path.lineTo(VEGA_FLTTOFIX( 785.0000000f), VEGA_FLTTOFIX(  37.5360947f));
	path.lineTo(VEGA_FLTTOFIX( 787.5000000f), VEGA_FLTTOFIX(  71.0831757f));
	path.lineTo(VEGA_FLTTOFIX( 790.0000000f), VEGA_FLTTOFIX(  56.9516602f));
	path.lineTo(VEGA_FLTTOFIX( 792.5000000f), VEGA_FLTTOFIX(  52.0786209f));
	path.lineTo(VEGA_FLTTOFIX( 795.0000000f), VEGA_FLTTOFIX(  70.7799301f));
	path.lineTo(VEGA_FLTTOFIX( 797.5000000f), VEGA_FLTTOFIX(  51.9041214f));
	path.lineTo(VEGA_FLTTOFIX( 800.0000000f), VEGA_FLTTOFIX(  54.0425148f));
	path.lineTo(VEGA_FLTTOFIX( 802.5000000f), VEGA_FLTTOFIX(  56.8449745f));
	path.lineTo(VEGA_FLTTOFIX( 805.0000000f), VEGA_FLTTOFIX(  66.8225861f));
	path.lineTo(VEGA_FLTTOFIX( 807.5000000f), VEGA_FLTTOFIX(  42.0468979f));
	path.lineTo(VEGA_FLTTOFIX( 810.0000000f), VEGA_FLTTOFIX(  60.0640411f));
	path.lineTo(VEGA_FLTTOFIX( 812.5000000f), VEGA_FLTTOFIX(  72.8467331f));
	path.lineTo(VEGA_FLTTOFIX( 815.0000000f), VEGA_FLTTOFIX(  71.7218552f));
	path.lineTo(VEGA_FLTTOFIX( 817.5000000f), VEGA_FLTTOFIX(  46.2796249f));
	path.lineTo(VEGA_FLTTOFIX( 820.0000000f), VEGA_FLTTOFIX(  47.2763901f));
	path.lineTo(VEGA_FLTTOFIX( 822.5000000f), VEGA_FLTTOFIX(  57.2956657f));
	path.lineTo(VEGA_FLTTOFIX( 825.0000000f), VEGA_FLTTOFIX(  48.3356705f));
	path.lineTo(VEGA_FLTTOFIX( 827.5000000f), VEGA_FLTTOFIX(  70.6126175f));
	path.lineTo(VEGA_FLTTOFIX( 830.0000000f), VEGA_FLTTOFIX(  60.0310631f));
	path.lineTo(VEGA_FLTTOFIX( 832.5000000f), VEGA_FLTTOFIX(  59.4448357f));
	path.lineTo(VEGA_FLTTOFIX( 835.0000000f), VEGA_FLTTOFIX(  65.9398727f));
	path.lineTo(VEGA_FLTTOFIX( 837.5000000f), VEGA_FLTTOFIX(  67.0247879f));
	path.lineTo(VEGA_FLTTOFIX( 840.0000000f), VEGA_FLTTOFIX(  64.4674301f));
	path.lineTo(VEGA_FLTTOFIX( 842.5000000f), VEGA_FLTTOFIX(  72.2435837f));
	path.lineTo(VEGA_FLTTOFIX( 845.0000000f), VEGA_FLTTOFIX(  71.2618866f));
	path.lineTo(VEGA_FLTTOFIX( 847.5000000f), VEGA_FLTTOFIX(  44.9824715f));
	path.lineTo(VEGA_FLTTOFIX( 850.0000000f), VEGA_FLTTOFIX(  51.2655334f));
	path.lineTo(VEGA_FLTTOFIX( 852.5000000f), VEGA_FLTTOFIX(  68.6458664f));
	path.lineTo(VEGA_FLTTOFIX( 855.0000000f), VEGA_FLTTOFIX(  70.4848480f));
	path.lineTo(VEGA_FLTTOFIX( 857.5000000f), VEGA_FLTTOFIX(  81.4335022f));
	path.lineTo(VEGA_FLTTOFIX( 860.0000000f), VEGA_FLTTOFIX(  61.4803772f));
	path.lineTo(VEGA_FLTTOFIX( 862.5000000f), VEGA_FLTTOFIX(  70.4163818f));
	path.lineTo(VEGA_FLTTOFIX( 865.0000000f), VEGA_FLTTOFIX(  38.8038521f));
	path.lineTo(VEGA_FLTTOFIX( 867.5000000f), VEGA_FLTTOFIX(  45.8393478f));
	path.lineTo(VEGA_FLTTOFIX( 870.0000000f), VEGA_FLTTOFIX(  39.2108994f));
	path.lineTo(VEGA_FLTTOFIX( 872.5000000f), VEGA_FLTTOFIX(  81.6969910f));
	path.lineTo(VEGA_FLTTOFIX( 875.0000000f), VEGA_FLTTOFIX(  57.4372292f));
	path.lineTo(VEGA_FLTTOFIX( 877.5000000f), VEGA_FLTTOFIX(  47.1635513f));
	path.lineTo(VEGA_FLTTOFIX( 880.0000000f), VEGA_FLTTOFIX(  69.2725449f));
	path.lineTo(VEGA_FLTTOFIX( 882.5000000f), VEGA_FLTTOFIX(  42.7811661f));
	path.lineTo(VEGA_FLTTOFIX( 885.0000000f), VEGA_FLTTOFIX(  46.9609604f));
	path.lineTo(VEGA_FLTTOFIX( 887.5000000f), VEGA_FLTTOFIX(  43.8420181f));
	path.lineTo(VEGA_FLTTOFIX( 890.0000000f), VEGA_FLTTOFIX(  50.9314651f));
	path.lineTo(VEGA_FLTTOFIX( 892.5000000f), VEGA_FLTTOFIX(  52.3170776f));
	path.lineTo(VEGA_FLTTOFIX( 895.0000000f), VEGA_FLTTOFIX(  47.4720917f));
	path.lineTo(VEGA_FLTTOFIX( 897.5000000f), VEGA_FLTTOFIX(  42.2499008f));
	path.lineTo(VEGA_FLTTOFIX( 900.0000000f), VEGA_FLTTOFIX(  74.0836716f));
	path.lineTo(VEGA_FLTTOFIX( 902.5000000f), VEGA_FLTTOFIX(  41.7793274f));
	path.lineTo(VEGA_FLTTOFIX( 905.0000000f), VEGA_FLTTOFIX(  65.1221161f));
	path.lineTo(VEGA_FLTTOFIX( 907.5000000f), VEGA_FLTTOFIX(  61.6802292f));
	path.lineTo(VEGA_FLTTOFIX( 910.0000000f), VEGA_FLTTOFIX(  59.4178925f));
	path.lineTo(VEGA_FLTTOFIX( 912.5000000f), VEGA_FLTTOFIX(  62.8374786f));
	path.lineTo(VEGA_FLTTOFIX( 915.0000000f), VEGA_FLTTOFIX(  67.8021469f));
	path.lineTo(VEGA_FLTTOFIX( 917.5000000f), VEGA_FLTTOFIX(  61.1593971f));
	path.lineTo(VEGA_FLTTOFIX( 920.0000000f), VEGA_FLTTOFIX(  62.2853317f));
	path.lineTo(VEGA_FLTTOFIX( 922.5000000f), VEGA_FLTTOFIX(  50.2944717f));
	path.lineTo(VEGA_FLTTOFIX( 925.0000000f), VEGA_FLTTOFIX(  58.8085747f));
	path.lineTo(VEGA_FLTTOFIX( 927.5000000f), VEGA_FLTTOFIX(  69.2853928f));
	path.lineTo(VEGA_FLTTOFIX( 930.0000000f), VEGA_FLTTOFIX(  69.1245422f));
	path.lineTo(VEGA_FLTTOFIX( 932.5000000f), VEGA_FLTTOFIX(  50.6866570f));
	path.lineTo(VEGA_FLTTOFIX( 935.0000000f), VEGA_FLTTOFIX(  55.3215446f));
	path.lineTo(VEGA_FLTTOFIX( 937.5000000f), VEGA_FLTTOFIX(  68.1186981f));
	path.lineTo(VEGA_FLTTOFIX( 940.0000000f), VEGA_FLTTOFIX(  82.4810944f));
	path.lineTo(VEGA_FLTTOFIX( 942.5000000f), VEGA_FLTTOFIX(  51.7478180f));
	path.lineTo(VEGA_FLTTOFIX( 945.0000000f), VEGA_FLTTOFIX(  71.4813766f));
	path.lineTo(VEGA_FLTTOFIX( 947.5000000f), VEGA_FLTTOFIX(  56.3463860f));
	path.lineTo(VEGA_FLTTOFIX( 950.0000000f), VEGA_FLTTOFIX(  43.8547363f));
	path.lineTo(VEGA_FLTTOFIX( 952.5000000f), VEGA_FLTTOFIX(  65.2246933f));
	path.lineTo(VEGA_FLTTOFIX( 955.0000000f), VEGA_FLTTOFIX(  75.4423141f));
	path.lineTo(VEGA_FLTTOFIX( 957.5000000f), VEGA_FLTTOFIX(  67.7284622f));
	path.lineTo(VEGA_FLTTOFIX( 960.0000000f), VEGA_FLTTOFIX(  39.8145905f));
	path.lineTo(VEGA_FLTTOFIX( 962.5000000f), VEGA_FLTTOFIX(  73.9640121f));
	path.lineTo(VEGA_FLTTOFIX( 965.0000000f), VEGA_FLTTOFIX(  49.7272186f));
	path.lineTo(VEGA_FLTTOFIX( 967.5000000f), VEGA_FLTTOFIX(  77.4226761f));
	path.lineTo(VEGA_FLTTOFIX( 970.0000000f), VEGA_FLTTOFIX(  79.7926559f));
	path.lineTo(VEGA_FLTTOFIX( 972.5000000f), VEGA_FLTTOFIX(  48.6281242f));
	path.lineTo(VEGA_FLTTOFIX( 975.0000000f), VEGA_FLTTOFIX(  50.9525490f));
	path.lineTo(VEGA_FLTTOFIX( 977.5000000f), VEGA_FLTTOFIX(  77.6974030f));
	path.lineTo(VEGA_FLTTOFIX( 980.0000000f), VEGA_FLTTOFIX(  37.5220947f));
	path.lineTo(VEGA_FLTTOFIX( 982.5000000f), VEGA_FLTTOFIX(  44.8077812f));
	path.lineTo(VEGA_FLTTOFIX( 985.0000000f), VEGA_FLTTOFIX(  38.3316956f));
	path.lineTo(VEGA_FLTTOFIX( 987.5000000f), VEGA_FLTTOFIX(  77.0304565f));
	path.lineTo(VEGA_FLTTOFIX( 990.0000000f), VEGA_FLTTOFIX(  71.0147400f));
	path.lineTo(VEGA_FLTTOFIX( 992.5000000f), VEGA_FLTTOFIX(  46.1499863f));
	path.lineTo(VEGA_FLTTOFIX( 995.0000000f), VEGA_FLTTOFIX(  42.8285942f));
	path.lineTo(VEGA_FLTTOFIX( 997.5000000f), VEGA_FLTTOFIX(  78.6107025f));
	path.lineTo(VEGA_FLTTOFIX(1000.0000000f), VEGA_FLTTOFIX(  38.8048439f));
	path.lineTo(VEGA_FLTTOFIX(1002.5000000f), VEGA_FLTTOFIX(  75.3275223f));
	path.lineTo(VEGA_FLTTOFIX(1005.0000000f), VEGA_FLTTOFIX(  39.3133469f));
	path.lineTo(VEGA_FLTTOFIX(1007.5000000f), VEGA_FLTTOFIX(  77.2983856f));
	path.lineTo(VEGA_FLTTOFIX(1010.0000000f), VEGA_FLTTOFIX(  68.8760223f));
	path.lineTo(VEGA_FLTTOFIX(1012.5000000f), VEGA_FLTTOFIX(  79.3326569f));
	path.lineTo(VEGA_FLTTOFIX(1015.0000000f), VEGA_FLTTOFIX(  55.0025024f));
	path.lineTo(VEGA_FLTTOFIX(1017.5000000f), VEGA_FLTTOFIX(  48.9215088f));
	path.lineTo(VEGA_FLTTOFIX(1020.0000000f), VEGA_FLTTOFIX(  52.8404388f));
	path.lineTo(VEGA_FLTTOFIX(1022.5000000f), VEGA_FLTTOFIX(  66.4092636f));
	path.lineTo(VEGA_FLTTOFIX(1025.0000000f), VEGA_FLTTOFIX(  52.2184639f));
	path.lineTo(VEGA_FLTTOFIX(1027.5000000f), VEGA_FLTTOFIX(  56.3038330f));
	path.lineTo(VEGA_FLTTOFIX(1030.0000000f), VEGA_FLTTOFIX(  57.2464752f));
	path.lineTo(VEGA_FLTTOFIX(1032.5000000f), VEGA_FLTTOFIX(  54.0605392f));
	path.lineTo(VEGA_FLTTOFIX(1035.0000000f), VEGA_FLTTOFIX(  42.6863823f));
	path.lineTo(VEGA_FLTTOFIX(1037.5000000f), VEGA_FLTTOFIX(  43.3393326f));
	path.lineTo(VEGA_FLTTOFIX(1040.0000000f), VEGA_FLTTOFIX(  64.5851822f));
	path.lineTo(VEGA_FLTTOFIX(1042.5000000f), VEGA_FLTTOFIX(  53.9416122f));
	path.lineTo(VEGA_FLTTOFIX(1045.0000000f), VEGA_FLTTOFIX(  65.7114487f));
	path.lineTo(VEGA_FLTTOFIX(1047.5000000f), VEGA_FLTTOFIX(  38.4468498f));
	path.lineTo(VEGA_FLTTOFIX(1050.0000000f), VEGA_FLTTOFIX(  51.4590492f));
	path.lineTo(VEGA_FLTTOFIX(1052.5000000f), VEGA_FLTTOFIX(  37.7899704f));
	path.lineTo(VEGA_FLTTOFIX(1055.0000000f), VEGA_FLTTOFIX(  41.4048424f));
	path.lineTo(VEGA_FLTTOFIX(1057.5000000f), VEGA_FLTTOFIX(  42.1392441f));
	path.lineTo(VEGA_FLTTOFIX(1060.0000000f), VEGA_FLTTOFIX(  77.9694519f));
	path.lineTo(VEGA_FLTTOFIX(1062.5000000f), VEGA_FLTTOFIX(  48.0614433f));
	path.lineTo(VEGA_FLTTOFIX(1065.0000000f), VEGA_FLTTOFIX(  57.2373924f));
	path.lineTo(VEGA_FLTTOFIX(1067.5000000f), VEGA_FLTTOFIX(  49.4477272f));
	path.lineTo(VEGA_FLTTOFIX(1070.0000000f), VEGA_FLTTOFIX(  38.6420059f));
	path.lineTo(VEGA_FLTTOFIX(1072.5000000f), VEGA_FLTTOFIX(  57.9425430f));
	path.lineTo(VEGA_FLTTOFIX(1075.0000000f), VEGA_FLTTOFIX(  58.5964928f));
	path.lineTo(VEGA_FLTTOFIX(1077.5000000f), VEGA_FLTTOFIX(  48.7521172f));
	path.lineTo(VEGA_FLTTOFIX(1080.0000000f), VEGA_FLTTOFIX(  56.2669716f));
	path.lineTo(VEGA_FLTTOFIX(1082.5000000f), VEGA_FLTTOFIX(  81.4790649f));
	path.lineTo(VEGA_FLTTOFIX(1085.0000000f), VEGA_FLTTOFIX(  46.3408394f));
	path.lineTo(VEGA_FLTTOFIX(1087.5000000f), VEGA_FLTTOFIX(  66.0899353f));
	path.lineTo(VEGA_FLTTOFIX(1090.0000000f), VEGA_FLTTOFIX(  49.6780586f));
	path.lineTo(VEGA_FLTTOFIX(1092.5000000f), VEGA_FLTTOFIX(  49.8874283f));
	path.lineTo(VEGA_FLTTOFIX(1095.0000000f), VEGA_FLTTOFIX(  50.2108078f));
	path.lineTo(VEGA_FLTTOFIX(1097.5000000f), VEGA_FLTTOFIX(  69.9774475f));
	path.lineTo(VEGA_FLTTOFIX(1100.0000000f), VEGA_FLTTOFIX(  52.4649658f));
	path.lineTo(VEGA_FLTTOFIX(1102.5000000f), VEGA_FLTTOFIX(  68.8170166f));
	path.lineTo(VEGA_FLTTOFIX(1105.0000000f), VEGA_FLTTOFIX(  72.8971939f));
	path.lineTo(VEGA_FLTTOFIX(1107.5000000f), VEGA_FLTTOFIX(  66.7930756f));
	path.lineTo(VEGA_FLTTOFIX(1110.0000000f), VEGA_FLTTOFIX(  74.8821411f));
	path.lineTo(VEGA_FLTTOFIX(1112.5000000f), VEGA_FLTTOFIX(  60.3043098f));
	path.lineTo(VEGA_FLTTOFIX(1115.0000000f), VEGA_FLTTOFIX(  63.1956100f));
	path.lineTo(VEGA_FLTTOFIX(1117.5000000f), VEGA_FLTTOFIX(  61.2494049f));
	path.lineTo(VEGA_FLTTOFIX(1120.0000000f), VEGA_FLTTOFIX(  76.7499237f));
	path.lineTo(VEGA_FLTTOFIX(1122.5000000f), VEGA_FLTTOFIX(  56.0345993f));
	path.lineTo(VEGA_FLTTOFIX(1125.0000000f), VEGA_FLTTOFIX(  74.9497223f));
	path.lineTo(VEGA_FLTTOFIX(1127.5000000f), VEGA_FLTTOFIX(  52.4787216f));
	path.lineTo(VEGA_FLTTOFIX(1130.0000000f), VEGA_FLTTOFIX(  65.9412537f));
	path.lineTo(VEGA_FLTTOFIX(1132.5000000f), VEGA_FLTTOFIX(  81.8259583f));
	path.lineTo(VEGA_FLTTOFIX(1135.0000000f), VEGA_FLTTOFIX(  68.5305405f));
	path.lineTo(VEGA_FLTTOFIX(1137.5000000f), VEGA_FLTTOFIX(  67.2021484f));
	path.lineTo(VEGA_FLTTOFIX(1140.0000000f), VEGA_FLTTOFIX(  75.0780945f));
	path.lineTo(VEGA_FLTTOFIX(1142.5000000f), VEGA_FLTTOFIX(  56.0617752f));
	path.lineTo(VEGA_FLTTOFIX(1145.0000000f), VEGA_FLTTOFIX(  70.6247025f));
	path.lineTo(VEGA_FLTTOFIX(1147.5000000f), VEGA_FLTTOFIX(  78.1084061f));
	path.lineTo(VEGA_FLTTOFIX(1150.0000000f), VEGA_FLTTOFIX(  53.1395569f));
	path.lineTo(VEGA_FLTTOFIX(1152.5000000f), VEGA_FLTTOFIX(  39.6769905f));
	path.lineTo(VEGA_FLTTOFIX(1155.0000000f), VEGA_FLTTOFIX(  63.3949547f));
	path.lineTo(VEGA_FLTTOFIX(1157.5000000f), VEGA_FLTTOFIX(  79.6496277f));
	path.lineTo(VEGA_FLTTOFIX(1160.0000000f), VEGA_FLTTOFIX(  77.5611191f));
	path.lineTo(VEGA_FLTTOFIX(1162.5000000f), VEGA_FLTTOFIX(  58.7726746f));
	path.lineTo(VEGA_FLTTOFIX(1165.0000000f), VEGA_FLTTOFIX(  47.2985039f));
	path.lineTo(VEGA_FLTTOFIX(1167.5000000f), VEGA_FLTTOFIX(  82.1594238f));
	path.lineTo(VEGA_FLTTOFIX(1170.0000000f), VEGA_FLTTOFIX(  42.5390053f));
	path.lineTo(VEGA_FLTTOFIX(1172.5000000f), VEGA_FLTTOFIX(  69.8200684f));
	path.lineTo(VEGA_FLTTOFIX(1175.0000000f), VEGA_FLTTOFIX(  79.8870163f));
	path.lineTo(VEGA_FLTTOFIX(1177.5000000f), VEGA_FLTTOFIX(  39.9406853f));
	path.lineTo(VEGA_FLTTOFIX(1180.0000000f), VEGA_FLTTOFIX(  54.6583138f));
	path.lineTo(VEGA_FLTTOFIX(1182.5000000f), VEGA_FLTTOFIX(  39.0450172f));
	path.lineTo(VEGA_FLTTOFIX(1185.0000000f), VEGA_FLTTOFIX(  74.1900940f));
	path.lineTo(VEGA_FLTTOFIX(1187.5000000f), VEGA_FLTTOFIX(  49.4963570f));
	path.lineTo(VEGA_FLTTOFIX(1190.0000000f), VEGA_FLTTOFIX(  81.1467438f));
	path.lineTo(VEGA_FLTTOFIX(1192.5000000f), VEGA_FLTTOFIX(  64.0902786f));
	path.lineTo(VEGA_FLTTOFIX(1195.0000000f), VEGA_FLTTOFIX(  81.8335495f));
	path.lineTo(VEGA_FLTTOFIX(1197.5000000f), VEGA_FLTTOFIX(  43.4400635f));
	path.lineTo(VEGA_FLTTOFIX(1200.0000000f), VEGA_FLTTOFIX(  59.5555916f));
	path.lineTo(VEGA_FLTTOFIX(1200.0000000f), VEGA_FLTTOFIX( 170.2317963f));
	path.lineTo(VEGA_FLTTOFIX(1197.5000000f), VEGA_FLTTOFIX( 194.1184235f));
	path.lineTo(VEGA_FLTTOFIX(1195.0000000f), VEGA_FLTTOFIX( 157.8366089f));
	path.lineTo(VEGA_FLTTOFIX(1192.5000000f), VEGA_FLTTOFIX( 170.3825378f));
	path.lineTo(VEGA_FLTTOFIX(1190.0000000f), VEGA_FLTTOFIX( 167.2078857f));
	path.lineTo(VEGA_FLTTOFIX(1187.5000000f), VEGA_FLTTOFIX( 167.1680908f));
	path.lineTo(VEGA_FLTTOFIX(1185.0000000f), VEGA_FLTTOFIX( 202.3013611f));
	path.lineTo(VEGA_FLTTOFIX(1182.5000000f), VEGA_FLTTOFIX( 160.3898315f));
	path.lineTo(VEGA_FLTTOFIX(1180.0000000f), VEGA_FLTTOFIX( 168.7754669f));
	path.lineTo(VEGA_FLTTOFIX(1177.5000000f), VEGA_FLTTOFIX( 166.8534546f));
	path.lineTo(VEGA_FLTTOFIX(1175.0000000f), VEGA_FLTTOFIX( 186.3214722f));
	path.lineTo(VEGA_FLTTOFIX(1172.5000000f), VEGA_FLTTOFIX( 196.0693817f));
	path.lineTo(VEGA_FLTTOFIX(1170.0000000f), VEGA_FLTTOFIX( 177.5951538f));
	path.lineTo(VEGA_FLTTOFIX(1167.5000000f), VEGA_FLTTOFIX( 179.5443268f));
	path.lineTo(VEGA_FLTTOFIX(1165.0000000f), VEGA_FLTTOFIX( 173.3350525f));
	path.lineTo(VEGA_FLTTOFIX(1162.5000000f), VEGA_FLTTOFIX( 191.0937500f));
	path.lineTo(VEGA_FLTTOFIX(1160.0000000f), VEGA_FLTTOFIX( 165.7884827f));
	path.lineTo(VEGA_FLTTOFIX(1157.5000000f), VEGA_FLTTOFIX( 187.5916748f));
	path.lineTo(VEGA_FLTTOFIX(1155.0000000f), VEGA_FLTTOFIX( 201.9241028f));
	path.lineTo(VEGA_FLTTOFIX(1152.5000000f), VEGA_FLTTOFIX( 191.9132843f));
	path.lineTo(VEGA_FLTTOFIX(1150.0000000f), VEGA_FLTTOFIX( 161.2932587f));
	path.lineTo(VEGA_FLTTOFIX(1147.5000000f), VEGA_FLTTOFIX( 193.1933289f));
	path.lineTo(VEGA_FLTTOFIX(1145.0000000f), VEGA_FLTTOFIX( 195.0041351f));
	path.lineTo(VEGA_FLTTOFIX(1142.5000000f), VEGA_FLTTOFIX( 202.2472839f));
	path.lineTo(VEGA_FLTTOFIX(1140.0000000f), VEGA_FLTTOFIX( 174.4078827f));
	path.lineTo(VEGA_FLTTOFIX(1137.5000000f), VEGA_FLTTOFIX( 173.4058685f));
	path.lineTo(VEGA_FLTTOFIX(1135.0000000f), VEGA_FLTTOFIX( 200.8465424f));
	path.lineTo(VEGA_FLTTOFIX(1132.5000000f), VEGA_FLTTOFIX( 200.1061859f));
	path.lineTo(VEGA_FLTTOFIX(1130.0000000f), VEGA_FLTTOFIX( 179.0995178f));
	path.lineTo(VEGA_FLTTOFIX(1127.5000000f), VEGA_FLTTOFIX( 200.4580383f));
	path.lineTo(VEGA_FLTTOFIX(1125.0000000f), VEGA_FLTTOFIX( 165.3790588f));
	path.lineTo(VEGA_FLTTOFIX(1122.5000000f), VEGA_FLTTOFIX( 183.3238983f));
	path.lineTo(VEGA_FLTTOFIX(1120.0000000f), VEGA_FLTTOFIX( 191.8198242f));
	path.lineTo(VEGA_FLTTOFIX(1117.5000000f), VEGA_FLTTOFIX( 165.5959015f));
	path.lineTo(VEGA_FLTTOFIX(1115.0000000f), VEGA_FLTTOFIX( 201.1315308f));
	path.lineTo(VEGA_FLTTOFIX(1112.5000000f), VEGA_FLTTOFIX( 163.3599548f));
	path.lineTo(VEGA_FLTTOFIX(1110.0000000f), VEGA_FLTTOFIX( 177.1611786f));
	path.lineTo(VEGA_FLTTOFIX(1107.5000000f), VEGA_FLTTOFIX( 180.7927704f));
	path.lineTo(VEGA_FLTTOFIX(1105.0000000f), VEGA_FLTTOFIX( 174.7618713f));
	path.lineTo(VEGA_FLTTOFIX(1102.5000000f), VEGA_FLTTOFIX( 157.6432037f));
	path.lineTo(VEGA_FLTTOFIX(1100.0000000f), VEGA_FLTTOFIX( 157.9120941f));
	path.lineTo(VEGA_FLTTOFIX(1097.5000000f), VEGA_FLTTOFIX( 198.8574677f));
	path.lineTo(VEGA_FLTTOFIX(1095.0000000f), VEGA_FLTTOFIX( 189.0799713f));
	path.lineTo(VEGA_FLTTOFIX(1092.5000000f), VEGA_FLTTOFIX( 171.5421448f));
	path.lineTo(VEGA_FLTTOFIX(1090.0000000f), VEGA_FLTTOFIX( 165.9966583f));
	path.lineTo(VEGA_FLTTOFIX(1087.5000000f), VEGA_FLTTOFIX( 169.2906189f));
	path.lineTo(VEGA_FLTTOFIX(1085.0000000f), VEGA_FLTTOFIX( 191.3611145f));
	path.lineTo(VEGA_FLTTOFIX(1082.5000000f), VEGA_FLTTOFIX( 192.6225281f));
	path.lineTo(VEGA_FLTTOFIX(1080.0000000f), VEGA_FLTTOFIX( 198.7698517f));
	path.lineTo(VEGA_FLTTOFIX(1077.5000000f), VEGA_FLTTOFIX( 176.5215912f));
	path.lineTo(VEGA_FLTTOFIX(1075.0000000f), VEGA_FLTTOFIX( 179.3026581f));
	path.lineTo(VEGA_FLTTOFIX(1072.5000000f), VEGA_FLTTOFIX( 194.0306549f));
	path.lineTo(VEGA_FLTTOFIX(1070.0000000f), VEGA_FLTTOFIX( 161.6652832f));
	path.lineTo(VEGA_FLTTOFIX(1067.5000000f), VEGA_FLTTOFIX( 165.6795654f));
	path.lineTo(VEGA_FLTTOFIX(1065.0000000f), VEGA_FLTTOFIX( 171.8564301f));
	path.lineTo(VEGA_FLTTOFIX(1062.5000000f), VEGA_FLTTOFIX( 174.3162994f));
	path.lineTo(VEGA_FLTTOFIX(1060.0000000f), VEGA_FLTTOFIX( 182.7386932f));
	path.lineTo(VEGA_FLTTOFIX(1057.5000000f), VEGA_FLTTOFIX( 161.5823975f));
	path.lineTo(VEGA_FLTTOFIX(1055.0000000f), VEGA_FLTTOFIX( 158.4465637f));
	path.lineTo(VEGA_FLTTOFIX(1052.5000000f), VEGA_FLTTOFIX( 182.1242981f));
	path.lineTo(VEGA_FLTTOFIX(1050.0000000f), VEGA_FLTTOFIX( 167.4596863f));
	path.lineTo(VEGA_FLTTOFIX(1047.5000000f), VEGA_FLTTOFIX( 177.5803986f));
	path.lineTo(VEGA_FLTTOFIX(1045.0000000f), VEGA_FLTTOFIX( 179.6918182f));
	path.lineTo(VEGA_FLTTOFIX(1042.5000000f), VEGA_FLTTOFIX( 175.3893127f));
	path.lineTo(VEGA_FLTTOFIX(1040.0000000f), VEGA_FLTTOFIX( 202.3262787f));
	path.lineTo(VEGA_FLTTOFIX(1037.5000000f), VEGA_FLTTOFIX( 164.5287628f));
	path.lineTo(VEGA_FLTTOFIX(1035.0000000f), VEGA_FLTTOFIX( 176.9728088f));
	path.lineTo(VEGA_FLTTOFIX(1032.5000000f), VEGA_FLTTOFIX( 181.9365845f));
	path.lineTo(VEGA_FLTTOFIX(1030.0000000f), VEGA_FLTTOFIX( 182.8197632f));
	path.lineTo(VEGA_FLTTOFIX(1027.5000000f), VEGA_FLTTOFIX( 184.4025116f));
	path.lineTo(VEGA_FLTTOFIX(1025.0000000f), VEGA_FLTTOFIX( 167.3135986f));
	path.lineTo(VEGA_FLTTOFIX(1022.5000000f), VEGA_FLTTOFIX( 180.7132874f));
	path.lineTo(VEGA_FLTTOFIX(1020.0000000f), VEGA_FLTTOFIX( 200.7115631f));
	path.lineTo(VEGA_FLTTOFIX(1017.5000000f), VEGA_FLTTOFIX( 186.8992767f));
	path.lineTo(VEGA_FLTTOFIX(1015.0000000f), VEGA_FLTTOFIX( 197.4265137f));
	path.lineTo(VEGA_FLTTOFIX(1012.5000000f), VEGA_FLTTOFIX( 197.8107910f));
	path.lineTo(VEGA_FLTTOFIX(1010.0000000f), VEGA_FLTTOFIX( 191.1454468f));
	path.lineTo(VEGA_FLTTOFIX(1007.5000000f), VEGA_FLTTOFIX( 193.8524170f));
	path.lineTo(VEGA_FLTTOFIX(1005.0000000f), VEGA_FLTTOFIX( 189.7722778f));
	path.lineTo(VEGA_FLTTOFIX(1002.5000000f), VEGA_FLTTOFIX( 189.9246368f));
	path.lineTo(VEGA_FLTTOFIX(1000.0000000f), VEGA_FLTTOFIX( 184.2270508f));
	path.lineTo(VEGA_FLTTOFIX( 997.5000000f), VEGA_FLTTOFIX( 168.9834442f));
	path.lineTo(VEGA_FLTTOFIX( 995.0000000f), VEGA_FLTTOFIX( 184.9698639f));
	path.lineTo(VEGA_FLTTOFIX( 992.5000000f), VEGA_FLTTOFIX( 201.7242737f));
	path.lineTo(VEGA_FLTTOFIX( 990.0000000f), VEGA_FLTTOFIX( 175.8082733f));
	path.lineTo(VEGA_FLTTOFIX( 987.5000000f), VEGA_FLTTOFIX( 193.2061615f));
	path.lineTo(VEGA_FLTTOFIX( 985.0000000f), VEGA_FLTTOFIX( 180.0203400f));
	path.lineTo(VEGA_FLTTOFIX( 982.5000000f), VEGA_FLTTOFIX( 194.5809784f));
	path.lineTo(VEGA_FLTTOFIX( 980.0000000f), VEGA_FLTTOFIX( 163.6622009f));
	path.lineTo(VEGA_FLTTOFIX( 977.5000000f), VEGA_FLTTOFIX( 181.7278290f));
	path.lineTo(VEGA_FLTTOFIX( 975.0000000f), VEGA_FLTTOFIX( 190.0903320f));
	path.lineTo(VEGA_FLTTOFIX( 972.5000000f), VEGA_FLTTOFIX( 193.9704132f));
	path.lineTo(VEGA_FLTTOFIX( 970.0000000f), VEGA_FLTTOFIX( 172.7326355f));
	path.lineTo(VEGA_FLTTOFIX( 967.5000000f), VEGA_FLTTOFIX( 183.3842316f));
	path.lineTo(VEGA_FLTTOFIX( 965.0000000f), VEGA_FLTTOFIX( 164.0774994f));
	path.lineTo(VEGA_FLTTOFIX( 962.5000000f), VEGA_FLTTOFIX( 192.2707977f));
	path.lineTo(VEGA_FLTTOFIX( 960.0000000f), VEGA_FLTTOFIX( 198.0453644f));
	path.lineTo(VEGA_FLTTOFIX( 957.5000000f), VEGA_FLTTOFIX( 198.0762787f));
	path.lineTo(VEGA_FLTTOFIX( 955.0000000f), VEGA_FLTTOFIX( 160.5664520f));
	path.lineTo(VEGA_FLTTOFIX( 952.5000000f), VEGA_FLTTOFIX( 175.8582153f));
	path.lineTo(VEGA_FLTTOFIX( 950.0000000f), VEGA_FLTTOFIX( 163.1362305f));
	path.lineTo(VEGA_FLTTOFIX( 947.5000000f), VEGA_FLTTOFIX( 187.8498993f));
	path.lineTo(VEGA_FLTTOFIX( 945.0000000f), VEGA_FLTTOFIX( 197.6739502f));
	path.lineTo(VEGA_FLTTOFIX( 942.5000000f), VEGA_FLTTOFIX( 171.1010742f));
	path.lineTo(VEGA_FLTTOFIX( 940.0000000f), VEGA_FLTTOFIX( 186.8164520f));
	path.lineTo(VEGA_FLTTOFIX( 937.5000000f), VEGA_FLTTOFIX( 182.8962097f));
	path.lineTo(VEGA_FLTTOFIX( 935.0000000f), VEGA_FLTTOFIX( 194.3648987f));
	path.lineTo(VEGA_FLTTOFIX( 932.5000000f), VEGA_FLTTOFIX( 202.1036377f));
	path.lineTo(VEGA_FLTTOFIX( 930.0000000f), VEGA_FLTTOFIX( 168.2399292f));
	path.lineTo(VEGA_FLTTOFIX( 927.5000000f), VEGA_FLTTOFIX( 175.2143250f));
	path.lineTo(VEGA_FLTTOFIX( 925.0000000f), VEGA_FLTTOFIX( 201.8376160f));
	path.lineTo(VEGA_FLTTOFIX( 922.5000000f), VEGA_FLTTOFIX( 167.0133209f));
	path.lineTo(VEGA_FLTTOFIX( 920.0000000f), VEGA_FLTTOFIX( 168.4194336f));
	path.lineTo(VEGA_FLTTOFIX( 917.5000000f), VEGA_FLTTOFIX( 175.0405884f));
	path.lineTo(VEGA_FLTTOFIX( 915.0000000f), VEGA_FLTTOFIX( 174.8999939f));
	path.lineTo(VEGA_FLTTOFIX( 912.5000000f), VEGA_FLTTOFIX( 170.9396667f));
	path.lineTo(VEGA_FLTTOFIX( 910.0000000f), VEGA_FLTTOFIX( 165.1862793f));
	path.lineTo(VEGA_FLTTOFIX( 907.5000000f), VEGA_FLTTOFIX( 195.4223785f));
	path.lineTo(VEGA_FLTTOFIX( 905.0000000f), VEGA_FLTTOFIX( 178.2288361f));
	path.lineTo(VEGA_FLTTOFIX( 902.5000000f), VEGA_FLTTOFIX( 172.6570435f));
	path.lineTo(VEGA_FLTTOFIX( 900.0000000f), VEGA_FLTTOFIX( 190.7389984f));
	path.lineTo(VEGA_FLTTOFIX( 897.5000000f), VEGA_FLTTOFIX( 189.1540527f));
	path.lineTo(VEGA_FLTTOFIX( 895.0000000f), VEGA_FLTTOFIX( 170.9467163f));
	path.lineTo(VEGA_FLTTOFIX( 892.5000000f), VEGA_FLTTOFIX( 169.0710449f));
	path.lineTo(VEGA_FLTTOFIX( 890.0000000f), VEGA_FLTTOFIX( 192.9484100f));
	path.lineTo(VEGA_FLTTOFIX( 887.5000000f), VEGA_FLTTOFIX( 177.8037109f));
	path.lineTo(VEGA_FLTTOFIX( 885.0000000f), VEGA_FLTTOFIX( 173.5325317f));
	path.lineTo(VEGA_FLTTOFIX( 882.5000000f), VEGA_FLTTOFIX( 167.9524689f));
	path.lineTo(VEGA_FLTTOFIX( 880.0000000f), VEGA_FLTTOFIX( 184.8717346f));
	path.lineTo(VEGA_FLTTOFIX( 877.5000000f), VEGA_FLTTOFIX( 169.8536377f));
	path.lineTo(VEGA_FLTTOFIX( 875.0000000f), VEGA_FLTTOFIX( 183.3815002f));
	path.lineTo(VEGA_FLTTOFIX( 872.5000000f), VEGA_FLTTOFIX( 187.8406830f));
	path.lineTo(VEGA_FLTTOFIX( 870.0000000f), VEGA_FLTTOFIX( 164.8998108f));
	path.lineTo(VEGA_FLTTOFIX( 867.5000000f), VEGA_FLTTOFIX( 196.2706146f));
	path.lineTo(VEGA_FLTTOFIX( 865.0000000f), VEGA_FLTTOFIX( 185.4670258f));
	path.lineTo(VEGA_FLTTOFIX( 862.5000000f), VEGA_FLTTOFIX( 188.4252014f));
	path.lineTo(VEGA_FLTTOFIX( 860.0000000f), VEGA_FLTTOFIX( 169.3184357f));
	path.lineTo(VEGA_FLTTOFIX( 857.5000000f), VEGA_FLTTOFIX( 191.9700623f));
	path.lineTo(VEGA_FLTTOFIX( 855.0000000f), VEGA_FLTTOFIX( 178.1671753f));
	path.lineTo(VEGA_FLTTOFIX( 852.5000000f), VEGA_FLTTOFIX( 173.9842834f));
	path.lineTo(VEGA_FLTTOFIX( 850.0000000f), VEGA_FLTTOFIX( 198.2759552f));
	path.lineTo(VEGA_FLTTOFIX( 847.5000000f), VEGA_FLTTOFIX( 178.4064636f));
	path.lineTo(VEGA_FLTTOFIX( 845.0000000f), VEGA_FLTTOFIX( 191.2774506f));
	path.lineTo(VEGA_FLTTOFIX( 842.5000000f), VEGA_FLTTOFIX( 184.9487457f));
	path.lineTo(VEGA_FLTTOFIX( 840.0000000f), VEGA_FLTTOFIX( 160.9309998f));
	path.lineTo(VEGA_FLTTOFIX( 837.5000000f), VEGA_FLTTOFIX( 158.6135254f));
	path.lineTo(VEGA_FLTTOFIX( 835.0000000f), VEGA_FLTTOFIX( 193.6143646f));
	path.lineTo(VEGA_FLTTOFIX( 832.5000000f), VEGA_FLTTOFIX( 184.8224182f));
	path.lineTo(VEGA_FLTTOFIX( 830.0000000f), VEGA_FLTTOFIX( 168.3150787f));
	path.lineTo(VEGA_FLTTOFIX( 827.5000000f), VEGA_FLTTOFIX( 174.5565948f));
	path.lineTo(VEGA_FLTTOFIX( 825.0000000f), VEGA_FLTTOFIX( 198.3774261f));
	path.lineTo(VEGA_FLTTOFIX( 822.5000000f), VEGA_FLTTOFIX( 198.9316254f));
	path.lineTo(VEGA_FLTTOFIX( 820.0000000f), VEGA_FLTTOFIX( 193.6260223f));
	path.lineTo(VEGA_FLTTOFIX( 817.5000000f), VEGA_FLTTOFIX( 200.1210022f));
	path.lineTo(VEGA_FLTTOFIX( 815.0000000f), VEGA_FLTTOFIX( 160.2307587f));
	path.lineTo(VEGA_FLTTOFIX( 812.5000000f), VEGA_FLTTOFIX( 159.2698364f));
	path.lineTo(VEGA_FLTTOFIX( 810.0000000f), VEGA_FLTTOFIX( 185.9057465f));
	path.lineTo(VEGA_FLTTOFIX( 807.5000000f), VEGA_FLTTOFIX( 163.2334442f));
	path.lineTo(VEGA_FLTTOFIX( 805.0000000f), VEGA_FLTTOFIX( 175.1199493f));
	path.lineTo(VEGA_FLTTOFIX( 802.5000000f), VEGA_FLTTOFIX( 182.0480194f));
	path.lineTo(VEGA_FLTTOFIX( 800.0000000f), VEGA_FLTTOFIX( 167.3230743f));
	path.lineTo(VEGA_FLTTOFIX( 797.5000000f), VEGA_FLTTOFIX( 184.8672028f));
	path.lineTo(VEGA_FLTTOFIX( 795.0000000f), VEGA_FLTTOFIX( 165.3865967f));
	path.lineTo(VEGA_FLTTOFIX( 792.5000000f), VEGA_FLTTOFIX( 199.0057983f));
	path.lineTo(VEGA_FLTTOFIX( 790.0000000f), VEGA_FLTTOFIX( 165.2536926f));
	path.lineTo(VEGA_FLTTOFIX( 787.5000000f), VEGA_FLTTOFIX( 196.1388092f));
	path.lineTo(VEGA_FLTTOFIX( 785.0000000f), VEGA_FLTTOFIX( 168.1351624f));
	path.lineTo(VEGA_FLTTOFIX( 782.5000000f), VEGA_FLTTOFIX( 188.3600006f));
	path.lineTo(VEGA_FLTTOFIX( 780.0000000f), VEGA_FLTTOFIX( 179.9396515f));
	path.lineTo(VEGA_FLTTOFIX( 777.5000000f), VEGA_FLTTOFIX( 183.4172821f));
	path.lineTo(VEGA_FLTTOFIX( 775.0000000f), VEGA_FLTTOFIX( 173.2200317f));
	path.lineTo(VEGA_FLTTOFIX( 772.5000000f), VEGA_FLTTOFIX( 163.8998260f));
	path.lineTo(VEGA_FLTTOFIX( 770.0000000f), VEGA_FLTTOFIX( 197.7050629f));
	path.lineTo(VEGA_FLTTOFIX( 767.5000000f), VEGA_FLTTOFIX( 161.9341736f));
	path.lineTo(VEGA_FLTTOFIX( 765.0000000f), VEGA_FLTTOFIX( 191.0915680f));
	path.lineTo(VEGA_FLTTOFIX( 762.5000000f), VEGA_FLTTOFIX( 195.3728027f));
	path.lineTo(VEGA_FLTTOFIX( 760.0000000f), VEGA_FLTTOFIX( 180.6022949f));
	path.lineTo(VEGA_FLTTOFIX( 757.5000000f), VEGA_FLTTOFIX( 184.1740417f));
	path.lineTo(VEGA_FLTTOFIX( 755.0000000f), VEGA_FLTTOFIX( 197.1801300f));
	path.lineTo(VEGA_FLTTOFIX( 752.5000000f), VEGA_FLTTOFIX( 192.4761810f));
	path.lineTo(VEGA_FLTTOFIX( 750.0000000f), VEGA_FLTTOFIX( 195.7347717f));
	path.lineTo(VEGA_FLTTOFIX( 747.5000000f), VEGA_FLTTOFIX( 157.8288269f));
	path.lineTo(VEGA_FLTTOFIX( 745.0000000f), VEGA_FLTTOFIX( 192.9733429f));
	path.lineTo(VEGA_FLTTOFIX( 742.5000000f), VEGA_FLTTOFIX( 159.2991028f));
	path.lineTo(VEGA_FLTTOFIX( 740.0000000f), VEGA_FLTTOFIX( 167.4282379f));
	path.lineTo(VEGA_FLTTOFIX( 737.5000000f), VEGA_FLTTOFIX( 183.7125092f));
	path.lineTo(VEGA_FLTTOFIX( 735.0000000f), VEGA_FLTTOFIX( 188.3397522f));
	path.lineTo(VEGA_FLTTOFIX( 732.5000000f), VEGA_FLTTOFIX( 187.0882111f));
	path.lineTo(VEGA_FLTTOFIX( 730.0000000f), VEGA_FLTTOFIX( 160.1176605f));
	path.lineTo(VEGA_FLTTOFIX( 727.5000000f), VEGA_FLTTOFIX( 166.9301605f));
	path.lineTo(VEGA_FLTTOFIX( 725.0000000f), VEGA_FLTTOFIX( 189.1440582f));
	path.lineTo(VEGA_FLTTOFIX( 722.5000000f), VEGA_FLTTOFIX( 164.8987885f));
	path.lineTo(VEGA_FLTTOFIX( 720.0000000f), VEGA_FLTTOFIX( 201.7070160f));
	path.lineTo(VEGA_FLTTOFIX( 717.5000000f), VEGA_FLTTOFIX( 201.0046387f));
	path.lineTo(VEGA_FLTTOFIX( 715.0000000f), VEGA_FLTTOFIX( 193.5466919f));
	path.lineTo(VEGA_FLTTOFIX( 712.5000000f), VEGA_FLTTOFIX( 188.0909271f));
	path.lineTo(VEGA_FLTTOFIX( 710.0000000f), VEGA_FLTTOFIX( 175.8156433f));
	path.lineTo(VEGA_FLTTOFIX( 707.5000000f), VEGA_FLTTOFIX( 200.0634155f));
	path.lineTo(VEGA_FLTTOFIX( 705.0000000f), VEGA_FLTTOFIX( 177.3404083f));
	path.lineTo(VEGA_FLTTOFIX( 702.5000000f), VEGA_FLTTOFIX( 164.9890442f));
	path.lineTo(VEGA_FLTTOFIX( 700.0000000f), VEGA_FLTTOFIX( 163.2822266f));
	path.lineTo(VEGA_FLTTOFIX( 697.5000000f), VEGA_FLTTOFIX( 173.4325867f));
	path.lineTo(VEGA_FLTTOFIX( 695.0000000f), VEGA_FLTTOFIX( 176.7507172f));
	path.lineTo(VEGA_FLTTOFIX( 692.5000000f), VEGA_FLTTOFIX( 160.9233093f));
	path.lineTo(VEGA_FLTTOFIX( 690.0000000f), VEGA_FLTTOFIX( 199.0232086f));
	path.lineTo(VEGA_FLTTOFIX( 687.5000000f), VEGA_FLTTOFIX( 178.2818604f));
	path.lineTo(VEGA_FLTTOFIX( 685.0000000f), VEGA_FLTTOFIX( 186.5097504f));
	path.lineTo(VEGA_FLTTOFIX( 682.5000000f), VEGA_FLTTOFIX( 167.6139984f));
	path.lineTo(VEGA_FLTTOFIX( 680.0000000f), VEGA_FLTTOFIX( 195.1284790f));
	path.lineTo(VEGA_FLTTOFIX( 677.5000000f), VEGA_FLTTOFIX( 178.1284943f));
	path.lineTo(VEGA_FLTTOFIX( 675.0000000f), VEGA_FLTTOFIX( 176.8683167f));
	path.lineTo(VEGA_FLTTOFIX( 672.5000000f), VEGA_FLTTOFIX( 182.4200592f));
	path.lineTo(VEGA_FLTTOFIX( 670.0000000f), VEGA_FLTTOFIX( 161.0097046f));
	path.lineTo(VEGA_FLTTOFIX( 667.5000000f), VEGA_FLTTOFIX( 190.9276123f));
	path.lineTo(VEGA_FLTTOFIX( 665.0000000f), VEGA_FLTTOFIX( 181.3475647f));
	path.lineTo(VEGA_FLTTOFIX( 662.5000000f), VEGA_FLTTOFIX( 202.2879486f));
	path.lineTo(VEGA_FLTTOFIX( 660.0000000f), VEGA_FLTTOFIX( 170.5221558f));
	path.lineTo(VEGA_FLTTOFIX( 657.5000000f), VEGA_FLTTOFIX( 165.5901337f));
	path.lineTo(VEGA_FLTTOFIX( 655.0000000f), VEGA_FLTTOFIX( 175.9710846f));
	path.lineTo(VEGA_FLTTOFIX( 652.5000000f), VEGA_FLTTOFIX( 176.0756531f));
	path.lineTo(VEGA_FLTTOFIX( 650.0000000f), VEGA_FLTTOFIX( 174.4603882f));
	path.lineTo(VEGA_FLTTOFIX( 647.5000000f), VEGA_FLTTOFIX( 158.0908356f));
	path.lineTo(VEGA_FLTTOFIX( 645.0000000f), VEGA_FLTTOFIX( 201.3336945f));
	path.lineTo(VEGA_FLTTOFIX( 642.5000000f), VEGA_FLTTOFIX( 175.3113098f));
	path.lineTo(VEGA_FLTTOFIX( 640.0000000f), VEGA_FLTTOFIX( 188.4003754f));
	path.lineTo(VEGA_FLTTOFIX( 637.5000000f), VEGA_FLTTOFIX( 195.1156311f));
	path.lineTo(VEGA_FLTTOFIX( 635.0000000f), VEGA_FLTTOFIX( 189.2796326f));
	path.lineTo(VEGA_FLTTOFIX( 632.5000000f), VEGA_FLTTOFIX( 172.2209015f));
	path.lineTo(VEGA_FLTTOFIX( 630.0000000f), VEGA_FLTTOFIX( 163.7129517f));
	path.lineTo(VEGA_FLTTOFIX( 627.5000000f), VEGA_FLTTOFIX( 189.0017090f));
	path.lineTo(VEGA_FLTTOFIX( 625.0000000f), VEGA_FLTTOFIX( 192.0441284f));
	path.lineTo(VEGA_FLTTOFIX( 622.5000000f), VEGA_FLTTOFIX( 171.6928406f));
	path.lineTo(VEGA_FLTTOFIX( 620.0000000f), VEGA_FLTTOFIX( 176.2798004f));
	path.lineTo(VEGA_FLTTOFIX( 617.5000000f), VEGA_FLTTOFIX( 176.9179993f));
	path.lineTo(VEGA_FLTTOFIX( 615.0000000f), VEGA_FLTTOFIX( 166.9979095f));
	path.lineTo(VEGA_FLTTOFIX( 612.5000000f), VEGA_FLTTOFIX( 174.6596832f));
	path.lineTo(VEGA_FLTTOFIX( 610.0000000f), VEGA_FLTTOFIX( 200.7408752f));
	path.lineTo(VEGA_FLTTOFIX( 607.5000000f), VEGA_FLTTOFIX( 191.1942749f));
	path.lineTo(VEGA_FLTTOFIX( 605.0000000f), VEGA_FLTTOFIX( 160.5047150f));
	path.lineTo(VEGA_FLTTOFIX( 602.5000000f), VEGA_FLTTOFIX( 165.3311005f));
	path.lineTo(VEGA_FLTTOFIX( 600.0000000f), VEGA_FLTTOFIX( 176.2134399f));
	path.lineTo(VEGA_FLTTOFIX( 597.5000000f), VEGA_FLTTOFIX( 170.2675934f));
	path.lineTo(VEGA_FLTTOFIX( 595.0000000f), VEGA_FLTTOFIX( 159.3652191f));
	path.lineTo(VEGA_FLTTOFIX( 592.5000000f), VEGA_FLTTOFIX( 190.9760437f));
	path.lineTo(VEGA_FLTTOFIX( 590.0000000f), VEGA_FLTTOFIX( 168.5806580f));
	path.lineTo(VEGA_FLTTOFIX( 587.5000000f), VEGA_FLTTOFIX( 193.6867218f));
	path.lineTo(VEGA_FLTTOFIX( 585.0000000f), VEGA_FLTTOFIX( 181.7589722f));
	path.lineTo(VEGA_FLTTOFIX( 582.5000000f), VEGA_FLTTOFIX( 160.9851227f));
	path.lineTo(VEGA_FLTTOFIX( 580.0000000f), VEGA_FLTTOFIX( 178.0894470f));
	path.lineTo(VEGA_FLTTOFIX( 577.5000000f), VEGA_FLTTOFIX( 169.9798126f));
	path.lineTo(VEGA_FLTTOFIX( 575.0000000f), VEGA_FLTTOFIX( 167.6710510f));
	path.lineTo(VEGA_FLTTOFIX( 572.5000000f), VEGA_FLTTOFIX( 189.3057556f));
	path.lineTo(VEGA_FLTTOFIX( 570.0000000f), VEGA_FLTTOFIX( 171.0391998f));
	path.lineTo(VEGA_FLTTOFIX( 567.5000000f), VEGA_FLTTOFIX( 160.1104736f));
	path.lineTo(VEGA_FLTTOFIX( 565.0000000f), VEGA_FLTTOFIX( 182.1512604f));
	path.lineTo(VEGA_FLTTOFIX( 562.5000000f), VEGA_FLTTOFIX( 177.9887543f));
	path.lineTo(VEGA_FLTTOFIX( 560.0000000f), VEGA_FLTTOFIX( 182.6418152f));
	path.lineTo(VEGA_FLTTOFIX( 557.5000000f), VEGA_FLTTOFIX( 158.2892609f));
	path.lineTo(VEGA_FLTTOFIX( 555.0000000f), VEGA_FLTTOFIX( 163.5063934f));
	path.lineTo(VEGA_FLTTOFIX( 552.5000000f), VEGA_FLTTOFIX( 176.6820679f));
	path.lineTo(VEGA_FLTTOFIX( 550.0000000f), VEGA_FLTTOFIX( 157.7152252f));
	path.lineTo(VEGA_FLTTOFIX( 547.5000000f), VEGA_FLTTOFIX( 168.1806793f));
	path.lineTo(VEGA_FLTTOFIX( 545.0000000f), VEGA_FLTTOFIX( 201.3791046f));
	path.lineTo(VEGA_FLTTOFIX( 542.5000000f), VEGA_FLTTOFIX( 185.0666504f));
	path.lineTo(VEGA_FLTTOFIX( 540.0000000f), VEGA_FLTTOFIX( 190.8623810f));
	path.lineTo(VEGA_FLTTOFIX( 537.5000000f), VEGA_FLTTOFIX( 167.3131866f));
	path.lineTo(VEGA_FLTTOFIX( 535.0000000f), VEGA_FLTTOFIX( 180.0439911f));
	path.lineTo(VEGA_FLTTOFIX( 532.5000000f), VEGA_FLTTOFIX( 163.9768829f));
	path.lineTo(VEGA_FLTTOFIX( 530.0000000f), VEGA_FLTTOFIX( 199.2562103f));
	path.lineTo(VEGA_FLTTOFIX( 527.5000000f), VEGA_FLTTOFIX( 161.1940460f));
	path.lineTo(VEGA_FLTTOFIX( 525.0000000f), VEGA_FLTTOFIX( 160.8840485f));
	path.lineTo(VEGA_FLTTOFIX( 522.5000000f), VEGA_FLTTOFIX( 176.3862610f));
	path.lineTo(VEGA_FLTTOFIX( 520.0000000f), VEGA_FLTTOFIX( 173.8061981f));
	path.lineTo(VEGA_FLTTOFIX( 517.5000000f), VEGA_FLTTOFIX( 196.7570343f));
	path.lineTo(VEGA_FLTTOFIX( 515.0000000f), VEGA_FLTTOFIX( 181.3665009f));
	path.lineTo(VEGA_FLTTOFIX( 512.5000000f), VEGA_FLTTOFIX( 166.4620361f));
	path.lineTo(VEGA_FLTTOFIX( 510.0000000f), VEGA_FLTTOFIX( 188.6208038f));
	path.lineTo(VEGA_FLTTOFIX( 507.5000000f), VEGA_FLTTOFIX( 160.8858948f));
	path.lineTo(VEGA_FLTTOFIX( 505.0000000f), VEGA_FLTTOFIX( 196.4464722f));
	path.lineTo(VEGA_FLTTOFIX( 502.5000000f), VEGA_FLTTOFIX( 175.9098053f));
	path.lineTo(VEGA_FLTTOFIX( 500.0000000f), VEGA_FLTTOFIX( 171.3502655f));
	path.lineTo(VEGA_FLTTOFIX( 497.5000000f), VEGA_FLTTOFIX( 159.8527985f));
	path.lineTo(VEGA_FLTTOFIX( 495.0000000f), VEGA_FLTTOFIX( 162.8031769f));
	path.lineTo(VEGA_FLTTOFIX( 492.5000000f), VEGA_FLTTOFIX( 195.8738251f));
	path.lineTo(VEGA_FLTTOFIX( 490.0000000f), VEGA_FLTTOFIX( 197.4737396f));
	path.lineTo(VEGA_FLTTOFIX( 487.5000000f), VEGA_FLTTOFIX( 186.2332916f));
	path.lineTo(VEGA_FLTTOFIX( 485.0000000f), VEGA_FLTTOFIX( 172.4678650f));
	path.lineTo(VEGA_FLTTOFIX( 482.5000000f), VEGA_FLTTOFIX( 179.7111206f));
	path.lineTo(VEGA_FLTTOFIX( 480.0000000f), VEGA_FLTTOFIX( 195.9122467f));
	path.lineTo(VEGA_FLTTOFIX( 477.5000000f), VEGA_FLTTOFIX( 180.2501068f));
	path.lineTo(VEGA_FLTTOFIX( 475.0000000f), VEGA_FLTTOFIX( 178.4022980f));
	path.lineTo(VEGA_FLTTOFIX( 472.5000000f), VEGA_FLTTOFIX( 189.6265717f));
	path.lineTo(VEGA_FLTTOFIX( 470.0000000f), VEGA_FLTTOFIX( 184.7151794f));
	path.lineTo(VEGA_FLTTOFIX( 467.5000000f), VEGA_FLTTOFIX( 191.7428131f));
	path.lineTo(VEGA_FLTTOFIX( 465.0000000f), VEGA_FLTTOFIX( 177.0583344f));
	path.lineTo(VEGA_FLTTOFIX( 462.5000000f), VEGA_FLTTOFIX( 194.9567566f));
	path.lineTo(VEGA_FLTTOFIX( 460.0000000f), VEGA_FLTTOFIX( 178.2601624f));
	path.lineTo(VEGA_FLTTOFIX( 457.5000000f), VEGA_FLTTOFIX( 164.2701874f));
	path.lineTo(VEGA_FLTTOFIX( 455.0000000f), VEGA_FLTTOFIX( 164.7226868f));
	path.lineTo(VEGA_FLTTOFIX( 452.5000000f), VEGA_FLTTOFIX( 177.3906097f));
	path.lineTo(VEGA_FLTTOFIX( 450.0000000f), VEGA_FLTTOFIX( 193.4642181f));
	path.lineTo(VEGA_FLTTOFIX( 447.5000000f), VEGA_FLTTOFIX( 160.9587555f));
	path.lineTo(VEGA_FLTTOFIX( 445.0000000f), VEGA_FLTTOFIX( 200.6464386f));
	path.lineTo(VEGA_FLTTOFIX( 442.5000000f), VEGA_FLTTOFIX( 171.2122650f));
	path.lineTo(VEGA_FLTTOFIX( 440.0000000f), VEGA_FLTTOFIX( 198.2286377f));
	path.lineTo(VEGA_FLTTOFIX( 437.5000000f), VEGA_FLTTOFIX( 190.5622559f));
	path.lineTo(VEGA_FLTTOFIX( 435.0000000f), VEGA_FLTTOFIX( 166.4429474f));
	path.lineTo(VEGA_FLTTOFIX( 432.5000000f), VEGA_FLTTOFIX( 196.8367615f));
	path.lineTo(VEGA_FLTTOFIX( 430.0000000f), VEGA_FLTTOFIX( 165.7804108f));
	path.lineTo(VEGA_FLTTOFIX( 427.5000000f), VEGA_FLTTOFIX( 190.8288116f));
	path.lineTo(VEGA_FLTTOFIX( 425.0000000f), VEGA_FLTTOFIX( 178.3080444f));
	path.lineTo(VEGA_FLTTOFIX( 422.5000000f), VEGA_FLTTOFIX( 188.9970856f));
	path.lineTo(VEGA_FLTTOFIX( 420.0000000f), VEGA_FLTTOFIX( 186.0386200f));
	path.lineTo(VEGA_FLTTOFIX( 417.5000000f), VEGA_FLTTOFIX( 164.9835968f));
	path.lineTo(VEGA_FLTTOFIX( 415.0000000f), VEGA_FLTTOFIX( 186.0479584f));
	path.lineTo(VEGA_FLTTOFIX( 412.5000000f), VEGA_FLTTOFIX( 195.7029266f));
	path.lineTo(VEGA_FLTTOFIX( 410.0000000f), VEGA_FLTTOFIX( 185.9946899f));
	path.lineTo(VEGA_FLTTOFIX( 407.5000000f), VEGA_FLTTOFIX( 166.0506592f));
	path.lineTo(VEGA_FLTTOFIX( 405.0000000f), VEGA_FLTTOFIX( 176.5853577f));
	path.lineTo(VEGA_FLTTOFIX( 402.5000000f), VEGA_FLTTOFIX( 185.5942841f));
	path.lineTo(VEGA_FLTTOFIX( 400.0000000f), VEGA_FLTTOFIX( 160.5729370f));
	path.lineTo(VEGA_FLTTOFIX( 397.5000000f), VEGA_FLTTOFIX( 191.9072113f));
	path.lineTo(VEGA_FLTTOFIX( 395.0000000f), VEGA_FLTTOFIX( 174.0768280f));
	path.lineTo(VEGA_FLTTOFIX( 392.5000000f), VEGA_FLTTOFIX( 179.8582458f));
	path.lineTo(VEGA_FLTTOFIX( 390.0000000f), VEGA_FLTTOFIX( 172.5255432f));
	path.lineTo(VEGA_FLTTOFIX( 387.5000000f), VEGA_FLTTOFIX( 175.3873749f));
	path.lineTo(VEGA_FLTTOFIX( 385.0000000f), VEGA_FLTTOFIX( 177.5434723f));
	path.lineTo(VEGA_FLTTOFIX( 382.5000000f), VEGA_FLTTOFIX( 177.4220581f));
	path.lineTo(VEGA_FLTTOFIX( 380.0000000f), VEGA_FLTTOFIX( 183.4679413f));
	path.lineTo(VEGA_FLTTOFIX( 377.5000000f), VEGA_FLTTOFIX( 179.1862640f));
	path.lineTo(VEGA_FLTTOFIX( 375.0000000f), VEGA_FLTTOFIX( 162.3056488f));
	path.lineTo(VEGA_FLTTOFIX( 372.5000000f), VEGA_FLTTOFIX( 202.0169220f));
	path.lineTo(VEGA_FLTTOFIX( 370.0000000f), VEGA_FLTTOFIX( 180.4598541f));
	path.lineTo(VEGA_FLTTOFIX( 367.5000000f), VEGA_FLTTOFIX( 194.1909637f));
	path.lineTo(VEGA_FLTTOFIX( 365.0000000f), VEGA_FLTTOFIX( 181.0593109f));
	path.lineTo(VEGA_FLTTOFIX( 362.5000000f), VEGA_FLTTOFIX( 193.6128693f));
	path.lineTo(VEGA_FLTTOFIX( 360.0000000f), VEGA_FLTTOFIX( 181.5081482f));
	path.lineTo(VEGA_FLTTOFIX( 357.5000000f), VEGA_FLTTOFIX( 162.5632172f));
	path.lineTo(VEGA_FLTTOFIX( 355.0000000f), VEGA_FLTTOFIX( 161.6361694f));
	path.lineTo(VEGA_FLTTOFIX( 352.5000000f), VEGA_FLTTOFIX( 181.4919128f));
	path.lineTo(VEGA_FLTTOFIX( 350.0000000f), VEGA_FLTTOFIX( 185.2082520f));
	path.lineTo(VEGA_FLTTOFIX( 347.5000000f), VEGA_FLTTOFIX( 182.1041107f));
	path.lineTo(VEGA_FLTTOFIX( 345.0000000f), VEGA_FLTTOFIX( 163.4332275f));
	path.lineTo(VEGA_FLTTOFIX( 342.5000000f), VEGA_FLTTOFIX( 175.8709717f));
	path.lineTo(VEGA_FLTTOFIX( 340.0000000f), VEGA_FLTTOFIX( 162.5922852f));
	path.lineTo(VEGA_FLTTOFIX( 337.5000000f), VEGA_FLTTOFIX( 194.6361084f));
	path.lineTo(VEGA_FLTTOFIX( 335.0000000f), VEGA_FLTTOFIX( 184.8369446f));
	path.lineTo(VEGA_FLTTOFIX( 332.5000000f), VEGA_FLTTOFIX( 201.9693298f));
	path.lineTo(VEGA_FLTTOFIX( 330.0000000f), VEGA_FLTTOFIX( 172.9480896f));
	path.lineTo(VEGA_FLTTOFIX( 327.5000000f), VEGA_FLTTOFIX( 196.0241852f));
	path.lineTo(VEGA_FLTTOFIX( 325.0000000f), VEGA_FLTTOFIX( 184.0364075f));
	path.lineTo(VEGA_FLTTOFIX( 322.5000000f), VEGA_FLTTOFIX( 185.3327332f));
	path.lineTo(VEGA_FLTTOFIX( 320.0000000f), VEGA_FLTTOFIX( 195.5723572f));
	path.lineTo(VEGA_FLTTOFIX( 317.5000000f), VEGA_FLTTOFIX( 181.8698730f));
	path.lineTo(VEGA_FLTTOFIX( 315.0000000f), VEGA_FLTTOFIX( 165.5364990f));
	path.lineTo(VEGA_FLTTOFIX( 312.5000000f), VEGA_FLTTOFIX( 173.1207886f));
	path.lineTo(VEGA_FLTTOFIX( 310.0000000f), VEGA_FLTTOFIX( 171.0515900f));
	path.lineTo(VEGA_FLTTOFIX( 307.5000000f), VEGA_FLTTOFIX( 185.2506256f));
	path.lineTo(VEGA_FLTTOFIX( 305.0000000f), VEGA_FLTTOFIX( 189.2715454f));
	path.lineTo(VEGA_FLTTOFIX( 302.5000000f), VEGA_FLTTOFIX( 165.9362793f));
	path.lineTo(VEGA_FLTTOFIX( 300.0000000f), VEGA_FLTTOFIX( 194.0087280f));
	path.lineTo(VEGA_FLTTOFIX( 297.5000000f), VEGA_FLTTOFIX( 162.2648773f));
	path.lineTo(VEGA_FLTTOFIX( 295.0000000f), VEGA_FLTTOFIX( 167.7571564f));
	path.lineTo(VEGA_FLTTOFIX( 292.5000000f), VEGA_FLTTOFIX( 171.8509064f));
	path.lineTo(VEGA_FLTTOFIX( 290.0000000f), VEGA_FLTTOFIX( 158.7378540f));
	path.lineTo(VEGA_FLTTOFIX( 287.5000000f), VEGA_FLTTOFIX( 193.3516541f));
	path.lineTo(VEGA_FLTTOFIX( 285.0000000f), VEGA_FLTTOFIX( 200.7614441f));
	path.lineTo(VEGA_FLTTOFIX( 282.5000000f), VEGA_FLTTOFIX( 170.7473297f));
	path.lineTo(VEGA_FLTTOFIX( 280.0000000f), VEGA_FLTTOFIX( 158.4641266f));
	path.lineTo(VEGA_FLTTOFIX( 277.5000000f), VEGA_FLTTOFIX( 189.5489197f));
	path.lineTo(VEGA_FLTTOFIX( 275.0000000f), VEGA_FLTTOFIX( 189.0789185f));
	path.lineTo(VEGA_FLTTOFIX( 272.5000000f), VEGA_FLTTOFIX( 195.7964478f));
	path.lineTo(VEGA_FLTTOFIX( 270.0000000f), VEGA_FLTTOFIX( 164.6205597f));
	path.lineTo(VEGA_FLTTOFIX( 267.5000000f), VEGA_FLTTOFIX( 158.4821014f));
	path.lineTo(VEGA_FLTTOFIX( 265.0000000f), VEGA_FLTTOFIX( 188.1911774f));
	path.lineTo(VEGA_FLTTOFIX( 262.5000000f), VEGA_FLTTOFIX( 166.7298737f));
	path.lineTo(VEGA_FLTTOFIX( 260.0000000f), VEGA_FLTTOFIX( 188.0769501f));
	path.lineTo(VEGA_FLTTOFIX( 257.5000000f), VEGA_FLTTOFIX( 182.7500610f));
	path.lineTo(VEGA_FLTTOFIX( 255.0000000f), VEGA_FLTTOFIX( 165.1793518f));
	path.lineTo(VEGA_FLTTOFIX( 252.5000000f), VEGA_FLTTOFIX( 159.0496674f));
	path.lineTo(VEGA_FLTTOFIX( 250.0000000f), VEGA_FLTTOFIX( 163.0069580f));
	path.lineTo(VEGA_FLTTOFIX( 247.5000000f), VEGA_FLTTOFIX( 179.9778900f));
	path.lineTo(VEGA_FLTTOFIX( 245.0000000f), VEGA_FLTTOFIX( 157.9505920f));
	path.lineTo(VEGA_FLTTOFIX( 242.5000000f), VEGA_FLTTOFIX( 201.4969482f));
	path.lineTo(VEGA_FLTTOFIX( 240.0000000f), VEGA_FLTTOFIX( 193.6341095f));
	path.lineTo(VEGA_FLTTOFIX( 237.5000000f), VEGA_FLTTOFIX( 191.5605469f));
	path.lineTo(VEGA_FLTTOFIX( 235.0000000f), VEGA_FLTTOFIX( 181.2486267f));
	path.lineTo(VEGA_FLTTOFIX( 232.5000000f), VEGA_FLTTOFIX( 185.1097107f));
	path.lineTo(VEGA_FLTTOFIX( 230.0000000f), VEGA_FLTTOFIX( 166.6663055f));
	path.lineTo(VEGA_FLTTOFIX( 227.5000000f), VEGA_FLTTOFIX( 199.2657166f));
	path.lineTo(VEGA_FLTTOFIX( 225.0000000f), VEGA_FLTTOFIX( 160.9715881f));
	path.lineTo(VEGA_FLTTOFIX( 222.5000000f), VEGA_FLTTOFIX( 177.0622864f));
	path.lineTo(VEGA_FLTTOFIX( 220.0000000f), VEGA_FLTTOFIX( 192.1495361f));
	path.lineTo(VEGA_FLTTOFIX( 217.5000000f), VEGA_FLTTOFIX( 165.5443115f));
	path.lineTo(VEGA_FLTTOFIX( 215.0000000f), VEGA_FLTTOFIX( 167.2355499f));
	path.lineTo(VEGA_FLTTOFIX( 212.5000000f), VEGA_FLTTOFIX( 173.5960846f));
	path.lineTo(VEGA_FLTTOFIX( 210.0000000f), VEGA_FLTTOFIX( 187.5617065f));
	path.lineTo(VEGA_FLTTOFIX( 207.5000000f), VEGA_FLTTOFIX( 161.7261658f));
	path.lineTo(VEGA_FLTTOFIX( 205.0000000f), VEGA_FLTTOFIX( 192.1494446f));
	path.lineTo(VEGA_FLTTOFIX( 202.5000000f), VEGA_FLTTOFIX( 165.1222992f));
	path.lineTo(VEGA_FLTTOFIX( 200.0000000f), VEGA_FLTTOFIX( 189.8770599f));
	path.lineTo(VEGA_FLTTOFIX( 197.5000000f), VEGA_FLTTOFIX( 194.3386383f));
	path.lineTo(VEGA_FLTTOFIX( 195.0000000f), VEGA_FLTTOFIX( 191.3252563f));
	path.lineTo(VEGA_FLTTOFIX( 192.5000000f), VEGA_FLTTOFIX( 181.7749023f));
	path.lineTo(VEGA_FLTTOFIX( 190.0000000f), VEGA_FLTTOFIX( 163.9288483f));
	path.lineTo(VEGA_FLTTOFIX( 187.5000000f), VEGA_FLTTOFIX( 193.7616577f));
	path.lineTo(VEGA_FLTTOFIX( 185.0000000f), VEGA_FLTTOFIX( 195.3717804f));
	path.lineTo(VEGA_FLTTOFIX( 182.5000000f), VEGA_FLTTOFIX( 177.8372192f));
	path.lineTo(VEGA_FLTTOFIX( 180.0000000f), VEGA_FLTTOFIX( 163.9890442f));
	path.lineTo(VEGA_FLTTOFIX( 177.5000000f), VEGA_FLTTOFIX( 167.4539948f));
	path.lineTo(VEGA_FLTTOFIX( 175.0000000f), VEGA_FLTTOFIX( 180.4129791f));
	path.lineTo(VEGA_FLTTOFIX( 172.5000000f), VEGA_FLTTOFIX( 173.4054565f));
	path.lineTo(VEGA_FLTTOFIX( 170.0000000f), VEGA_FLTTOFIX( 182.8186035f));
	path.lineTo(VEGA_FLTTOFIX( 167.5000000f), VEGA_FLTTOFIX( 176.5768585f));
	path.lineTo(VEGA_FLTTOFIX( 165.0000000f), VEGA_FLTTOFIX( 180.7959137f));
	path.lineTo(VEGA_FLTTOFIX( 162.5000000f), VEGA_FLTTOFIX( 179.4440308f));
	path.lineTo(VEGA_FLTTOFIX( 160.0000000f), VEGA_FLTTOFIX( 158.6685028f));
	path.lineTo(VEGA_FLTTOFIX( 157.5000000f), VEGA_FLTTOFIX( 182.9780884f));
	path.lineTo(VEGA_FLTTOFIX( 155.0000000f), VEGA_FLTTOFIX( 183.5858154f));
	path.lineTo(VEGA_FLTTOFIX( 152.5000000f), VEGA_FLTTOFIX( 192.2256165f));
	path.lineTo(VEGA_FLTTOFIX( 150.0000000f), VEGA_FLTTOFIX( 165.1002350f));
	path.lineTo(VEGA_FLTTOFIX( 147.5000000f), VEGA_FLTTOFIX( 184.7852478f));
	path.lineTo(VEGA_FLTTOFIX( 145.0000000f), VEGA_FLTTOFIX( 199.4705353f));
	path.lineTo(VEGA_FLTTOFIX( 142.5000000f), VEGA_FLTTOFIX( 193.0248718f));
	path.lineTo(VEGA_FLTTOFIX( 140.0000000f), VEGA_FLTTOFIX( 161.7084045f));
	path.lineTo(VEGA_FLTTOFIX( 137.5000000f), VEGA_FLTTOFIX( 186.7053680f));
	path.lineTo(VEGA_FLTTOFIX( 135.0000000f), VEGA_FLTTOFIX( 160.8811340f));
	path.lineTo(VEGA_FLTTOFIX( 132.5000000f), VEGA_FLTTOFIX( 200.8027649f));
	path.lineTo(VEGA_FLTTOFIX( 130.0000000f), VEGA_FLTTOFIX( 178.4030151f));
	path.lineTo(VEGA_FLTTOFIX( 127.5000000f), VEGA_FLTTOFIX( 160.8106537f));
	path.lineTo(VEGA_FLTTOFIX( 125.0000000f), VEGA_FLTTOFIX( 194.6377869f));
	path.lineTo(VEGA_FLTTOFIX( 122.5000000f), VEGA_FLTTOFIX( 173.3990021f));
	path.lineTo(VEGA_FLTTOFIX( 120.0000000f), VEGA_FLTTOFIX( 169.3029633f));
	path.lineTo(VEGA_FLTTOFIX( 117.5000000f), VEGA_FLTTOFIX( 181.3464050f));
	path.lineTo(VEGA_FLTTOFIX( 115.0000000f), VEGA_FLTTOFIX( 169.0643921f));
	path.lineTo(VEGA_FLTTOFIX( 112.5000000f), VEGA_FLTTOFIX( 183.9855194f));
	path.lineTo(VEGA_FLTTOFIX( 110.0000000f), VEGA_FLTTOFIX( 162.7199402f));
	path.lineTo(VEGA_FLTTOFIX( 107.5000000f), VEGA_FLTTOFIX( 169.9398346f));
	path.lineTo(VEGA_FLTTOFIX( 105.0000000f), VEGA_FLTTOFIX( 186.7692871f));
	path.lineTo(VEGA_FLTTOFIX( 102.5000000f), VEGA_FLTTOFIX( 167.5263367f));
	path.lineTo(VEGA_FLTTOFIX( 100.0000000f), VEGA_FLTTOFIX( 169.8767395f));
	path.lineTo(VEGA_FLTTOFIX(  97.5000000f), VEGA_FLTTOFIX( 167.3210754f));
	path.lineTo(VEGA_FLTTOFIX(  95.0000000f), VEGA_FLTTOFIX( 194.7899628f));
	path.lineTo(VEGA_FLTTOFIX(  92.5000000f), VEGA_FLTTOFIX( 172.2275085f));
	path.lineTo(VEGA_FLTTOFIX(  90.0000000f), VEGA_FLTTOFIX( 158.3074493f));
	path.lineTo(VEGA_FLTTOFIX(  87.5000000f), VEGA_FLTTOFIX( 202.3803101f));
	path.lineTo(VEGA_FLTTOFIX(  85.0000000f), VEGA_FLTTOFIX( 186.0919800f));
	path.lineTo(VEGA_FLTTOFIX(  82.5000000f), VEGA_FLTTOFIX( 174.4440613f));
	path.lineTo(VEGA_FLTTOFIX(  80.0000000f), VEGA_FLTTOFIX( 160.4154358f));
	path.lineTo(VEGA_FLTTOFIX(  77.5000000f), VEGA_FLTTOFIX( 194.2495880f));
	path.lineTo(VEGA_FLTTOFIX(  75.0000000f), VEGA_FLTTOFIX( 196.2594147f));
	path.lineTo(VEGA_FLTTOFIX(  72.5000000f), VEGA_FLTTOFIX( 186.1822052f));
	path.lineTo(VEGA_FLTTOFIX(  70.0000000f), VEGA_FLTTOFIX( 200.9206390f));
	path.lineTo(VEGA_FLTTOFIX(  67.5000000f), VEGA_FLTTOFIX( 197.8607483f));
	path.lineTo(VEGA_FLTTOFIX(  65.0000000f), VEGA_FLTTOFIX( 195.0307465f));
	path.lineTo(VEGA_FLTTOFIX(  62.5000000f), VEGA_FLTTOFIX( 161.6970062f));
	path.lineTo(VEGA_FLTTOFIX(  60.0000000f), VEGA_FLTTOFIX( 163.0332336f));
	path.lineTo(VEGA_FLTTOFIX(  57.5000000f), VEGA_FLTTOFIX( 174.5002441f));
	path.lineTo(VEGA_FLTTOFIX(  55.0000000f), VEGA_FLTTOFIX( 186.6863251f));
	path.lineTo(VEGA_FLTTOFIX(  52.5000000f), VEGA_FLTTOFIX( 200.2384949f));
	path.lineTo(VEGA_FLTTOFIX(  50.0000000f), VEGA_FLTTOFIX( 180.4854279f));
	path.lineTo(VEGA_FLTTOFIX(  47.5000000f), VEGA_FLTTOFIX( 181.6438599f));
	path.lineTo(VEGA_FLTTOFIX(  45.0000000f), VEGA_FLTTOFIX( 196.7016602f));
	path.lineTo(VEGA_FLTTOFIX(  42.5000000f), VEGA_FLTTOFIX( 186.0260925f));
	path.lineTo(VEGA_FLTTOFIX(  40.0000000f), VEGA_FLTTOFIX( 195.5295258f));
	path.lineTo(VEGA_FLTTOFIX(  37.5000000f), VEGA_FLTTOFIX( 191.8719635f));
	path.lineTo(VEGA_FLTTOFIX(  35.0000000f), VEGA_FLTTOFIX( 171.4686584f));
	path.lineTo(VEGA_FLTTOFIX(  32.5000000f), VEGA_FLTTOFIX( 159.9227142f));
	path.lineTo(VEGA_FLTTOFIX(  30.0000000f), VEGA_FLTTOFIX( 163.4788361f));
	path.lineTo(VEGA_FLTTOFIX(  27.5000000f), VEGA_FLTTOFIX( 176.5227051f));
	path.lineTo(VEGA_FLTTOFIX(  25.0000000f), VEGA_FLTTOFIX( 185.2609863f));
	path.lineTo(VEGA_FLTTOFIX(  22.5000000f), VEGA_FLTTOFIX( 202.2304230f));
	path.lineTo(VEGA_FLTTOFIX(  20.0000000f), VEGA_FLTTOFIX( 184.1442261f));
	path.lineTo(VEGA_FLTTOFIX(  17.5000000f), VEGA_FLTTOFIX( 198.1602783f));
	path.lineTo(VEGA_FLTTOFIX(  15.0000000f), VEGA_FLTTOFIX( 159.3671875f));
	path.lineTo(VEGA_FLTTOFIX(  12.5000000f), VEGA_FLTTOFIX( 184.4924622f));
	path.lineTo(VEGA_FLTTOFIX(  10.0000000f), VEGA_FLTTOFIX( 201.7757263f));
	path.lineTo(VEGA_FLTTOFIX(   7.5000000f), VEGA_FLTTOFIX( 173.6241455f));
	path.lineTo(VEGA_FLTTOFIX(   5.0000000f), VEGA_FLTTOFIX( 200.0997925f));
	path.lineTo(VEGA_FLTTOFIX(   2.5000000f), VEGA_FLTTOFIX( 169.1547241f));
	path.lineTo(VEGA_FLTTOFIX(   0.0000000f), VEGA_FLTTOFIX( 176.0143890f));
	path.lineTo(VEGA_FLTTOFIX(   0.0000000f), VEGA_FLTTOFIX(  59.4325676f));
	path.close(true);

	verify(path.getCategory() == VEGAPath::SIMPLE);
}

test("weird e")
{
	const unsigned numLines = 22;
	VEGAPath path;
	RETURN_IF_ERROR(path.prepare(numLines+1));
	verify_success(path.moveTo(VEGA_FLTTOFIX( 48.952805f), VEGA_FLTTOFIX(7.077488f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 48.810112f), VEGA_FLTTOFIX(6.351071f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 48.502197f), VEGA_FLTTOFIX(6.118917f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 48.119179f), VEGA_FLTTOFIX(6.358560f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 47.991508f), VEGA_FLTTOFIX(7.077488f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 48.126690f), VEGA_FLTTOFIX(7.796416f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 48.532238f), VEGA_FLTTOFIX(8.036058f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 48.750031f), VEGA_FLTTOFIX(8.036058f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 48.952805f), VEGA_FLTTOFIX(8.036058f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 47.991508f), VEGA_FLTTOFIX(8.036058f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 47.991508f), VEGA_FLTTOFIX(7.077488f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 49.914101f), VEGA_FLTTOFIX(7.077488f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 49.914101f), VEGA_FLTTOFIX(8.036058f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 49.305779f), VEGA_FLTTOFIX(8.754987f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 48.607338f), VEGA_FLTTOFIX(8.994629f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 47.458290f), VEGA_FLTTOFIX(8.470410f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 47.030212f), VEGA_FLTTOFIX(7.077488f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 47.480820f), VEGA_FLTTOFIX(5.684566f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 48.697460f), VEGA_FLTTOFIX(5.160347f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 49.268230f), VEGA_FLTTOFIX(5.399990f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 49.914101f), VEGA_FLTTOFIX(6.118917f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 49.914101f), VEGA_FLTTOFIX(7.077488f)));
	path.close(true);

	verify(path.getCategory() == VEGAPath::COMPLEX);
}

test("disconnected tapered rects")
{
	const unsigned numLines = 13;
	VEGAPath path;
	RETURN_IF_ERROR(path.prepare(numLines+1));
	verify_success(path.moveTo(VEGA_FLTTOFIX(  99.650002f), VEGA_FLTTOFIX( 348.138306f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.650002f), VEGA_FLTTOFIX( 327.023315f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.650002f), VEGA_FLTTOFIX( 321.023315f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 320.673309f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.349998f), VEGA_FLTTOFIX( 321.023315f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.349998f), VEGA_FLTTOFIX( 342.138306f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 342.488312f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.650002f), VEGA_FLTTOFIX( 342.138306f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.650002f), VEGA_FLTTOFIX( 321.023315f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.349998f), VEGA_FLTTOFIX( 321.023315f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.349998f), VEGA_FLTTOFIX( 327.023315f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.349998f), VEGA_FLTTOFIX( 348.138306f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 348.488312f)));
	path.close(true);

	verify(path.getCategory() == VEGAPath::COMPLEX);
}

test("circular 1")
{
	const unsigned numLines = 8;
	VEGAPath path;
	RETURN_IF_ERROR(path.prepare(numLines+1));
	verify_success(path.moveTo(0, 0));
	verify_success(path.lineTo(1, 0));
	verify_success(path.lineTo(1, 1));
	verify_success(path.lineTo(0, 1));
	verify_success(path.lineTo(0, 0));
	verify_success(path.lineTo(1, 0));
	verify_success(path.lineTo(1, 1));
	verify_success(path.lineTo(0, 1));
	path.close(true);
	verify(path.getCategory() == VEGAPath::COMPLEX);
}

test("circular 2")
{
	const unsigned numLines = 8;
	VEGAPath path;
	RETURN_IF_ERROR(path.prepare(numLines+1));
	verify_success(path.moveTo( 0, 0));
	verify_success(path.lineTo( 1, 0));
	verify_success(path.lineTo( 1, 1));
	verify_success(path.lineTo( 0, 1));
	verify_success(path.lineTo( 0, 0));
	verify_success(path.lineTo( 2, 0));
	verify_success(path.lineTo( 2, 2));
	verify_success(path.lineTo(-1, 2));
	path.close(true);
	verify(path.getCategory() == VEGAPath::COMPLEX);
}

test("circular 3")
{
	const unsigned numLines = 7;
	VEGAPath path;
	RETURN_IF_ERROR(path.prepare(numLines+1));
	verify_success(path.moveTo( 0, 0));
	verify_success(path.lineTo( 1, 1));
	verify_success(path.lineTo( 0, 1));
	verify_success(path.lineTo( 0, 0));
	verify_success(path.lineTo( 2, 0));
	verify_success(path.lineTo( 2, 2));
	verify_success(path.lineTo(-1, 2));
	path.close(true);
	verify(path.getCategory() == VEGAPath::COMPLEX);
}

test("torus 1")
{
	const unsigned numLines = 18;
	VEGAPath path;
	RETURN_IF_ERROR(path.prepare(numLines+1));
	verify_success(path.moveTo(VEGA_FLTTOFIX(  98.616692f), VEGA_FLTTOFIX( 368.297913f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.581192f), VEGA_FLTTOFIX( 347.526245f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.581802f), VEGA_FLTTOFIX( 347.504883f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.938072f), VEGA_FLTTOFIX( 341.505768f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.308212f), VEGA_FLTTOFIX( 341.177124f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.637459f), VEGA_FLTTOFIX( 341.526123f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.661125f), VEGA_FLTTOFIX( 362.297791f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.660553f), VEGA_FLTTOFIX( 362.318237f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.316116f), VEGA_FLTTOFIX( 368.317383f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.946625f), VEGA_FLTTOFIX( 368.646729f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.616692f), VEGA_FLTTOFIX( 368.297913f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.306435f), VEGA_FLTTOFIX( 362.297913f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.961113f), VEGA_FLTTOFIX( 362.288330f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.937462f), VEGA_FLTTOFIX( 341.526917f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.944298f), VEGA_FLTTOFIX( 347.526428f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.281212f), VEGA_FLTTOFIX( 347.535706f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.316689f), VEGA_FLTTOFIX( 368.296692f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.306435f), VEGA_FLTTOFIX( 362.297913f)));
	path.close(true);
	verify(path.getCategory() == VEGAPath::COMPLEX);
}

test("torus 2")
{
	const unsigned numLines = 18;
	VEGAPath path;
	RETURN_IF_ERROR(path.prepare(numLines+1));
	verify_success(path.moveTo(VEGA_FLTTOFIX(  98.605728f), VEGA_FLTTOFIX( 348.136322f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.571014f), VEGA_FLTTOFIX( 327.021332f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.571640f), VEGA_FLTTOFIX( 326.999817f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.931305f), VEGA_FLTTOFIX( 321.000671f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.301628f), VEGA_FLTTOFIX( 320.672241f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.630676f), VEGA_FLTTOFIX( 321.021240f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.653816f), VEGA_FLTTOFIX( 342.136230f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.653229f), VEGA_FLTTOFIX( 342.156860f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.305138f), VEGA_FLTTOFIX( 348.156006f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.935455f), VEGA_FLTTOFIX( 348.485168f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.605728f), VEGA_FLTTOFIX( 348.136322f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.295860f), VEGA_FLTTOFIX( 342.136139f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.953804f), VEGA_FLTTOFIX( 342.126648f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.930679f), VEGA_FLTTOFIX( 321.021973f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.937256f), VEGA_FLTTOFIX( 327.021729f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.271027f), VEGA_FLTTOFIX( 327.030945f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.305725f), VEGA_FLTTOFIX( 348.135162f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.295860f), VEGA_FLTTOFIX( 342.136139f)));
	path.close(true);
	verify(path.getCategory() == VEGAPath::COMPLEX);
}

test("torus 3")
{
	const unsigned numLines = 17;
	VEGAPath path;
	RETURN_IF_ERROR(path.prepare(numLines+1));
	verify_success(path.moveTo(VEGA_FLTTOFIX(  97.653252f), VEGA_FLTTOFIX( 327.635559f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  97.588951f), VEGA_FLTTOFIX( 306.177246f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  97.591225f), VEGA_FLTTOFIX( 306.136353f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.278244f), VEGA_FLTTOFIX( 300.139282f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.665802f), VEGA_FLTTOFIX( 299.831360f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.975967f), VEGA_FLTTOFIX( 300.178406f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.018837f), VEGA_FLTTOFIX( 321.636749f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  99.016701f), VEGA_FLTTOFIX( 321.676056f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.351112f), VEGA_FLTTOFIX( 327.673126f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  97.964645f), VEGA_FLTTOFIX( 327.982391f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  97.653252f), VEGA_FLTTOFIX( 327.635559f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.335167f), VEGA_FLTTOFIX( 321.600403f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.318802f), VEGA_FLTTOFIX( 321.618439f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.288002f), VEGA_FLTTOFIX( 306.204437f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.289009f), VEGA_FLTTOFIX( 306.195679f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.353249f), VEGA_FLTTOFIX( 327.633484f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  98.335167f), VEGA_FLTTOFIX( 321.600403f)));
	path.close(true);
	verify(path.getCategory() == VEGAPath::COMPLEX);
}

test("jigsaw")
{
	const unsigned numLines = 43;
	VEGAPath path;
	RETURN_IF_ERROR(path.prepare(numLines+1));
	verify_success(path.moveTo(VEGA_FLTTOFIX(  -0.482847f), VEGA_FLTTOFIX( 120.870155f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  -0.391050f), VEGA_FLTTOFIX( 120.528786f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  -0.123472f), VEGA_FLTTOFIX( 119.533730f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.308169f), VEGA_FLTTOFIX( 117.928566f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.308169f), VEGA_FLTTOFIX( 117.928566f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.892153f), VEGA_FLTTOFIX( 115.756874f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   1.616762f), VEGA_FLTTOFIX( 113.062233f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   2.470278f), VEGA_FLTTOFIX( 109.888222f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   4.517153f), VEGA_FLTTOFIX( 102.276405f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   6.939028f), VEGA_FLTTOFIX(  93.270058f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   9.642153f), VEGA_FLTTOFIX(  83.217812f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  15.517153f), VEGA_FLTTOFIX(  61.370159f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  21.392153f), VEGA_FLTTOFIX(  39.522503f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  24.095278f), VEGA_FLTTOFIX(  29.470257f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  26.517153f), VEGA_FLTTOFIX(  20.463909f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  28.564028f), VEGA_FLTTOFIX(  12.852093f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  29.417543f), VEGA_FLTTOFIX(   9.678082f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  30.142153f), VEGA_FLTTOFIX(   6.983440f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  30.726137f), VEGA_FLTTOFIX(   4.811748f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  31.157778f), VEGA_FLTTOFIX(   3.206584f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  31.425356f), VEGA_FLTTOFIX(   2.211528f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  31.517153f), VEGA_FLTTOFIX(   1.870159f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  32.482845f), VEGA_FLTTOFIX(   2.129841f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  32.391048f), VEGA_FLTTOFIX(   2.471211f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  32.123470f), VEGA_FLTTOFIX(   3.466267f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  31.691832f), VEGA_FLTTOFIX(   5.071431f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  31.107847f), VEGA_FLTTOFIX(   7.243123f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  30.383238f), VEGA_FLTTOFIX(   9.937763f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  29.529722f), VEGA_FLTTOFIX(  13.111774f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  27.482847f), VEGA_FLTTOFIX(  20.723591f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  25.060972f), VEGA_FLTTOFIX(  29.729939f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  22.357847f), VEGA_FLTTOFIX(  39.782185f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  16.482847f), VEGA_FLTTOFIX(  61.629841f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  10.607847f), VEGA_FLTTOFIX(  83.477501f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   7.904722f), VEGA_FLTTOFIX(  93.529747f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   5.482847f), VEGA_FLTTOFIX( 102.536095f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   3.435972f), VEGA_FLTTOFIX( 110.147911f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   2.582456f), VEGA_FLTTOFIX( 113.321922f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   1.857847f), VEGA_FLTTOFIX( 116.016563f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   1.273863f), VEGA_FLTTOFIX( 118.188255f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.842222f), VEGA_FLTTOFIX( 119.793419f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.574644f), VEGA_FLTTOFIX( 120.788475f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.482847f), VEGA_FLTTOFIX( 121.129845f)));
	path.close(true);
	verify(path.getCategory() == VEGAPath::SIMPLE);
}

test("biglayouttree")
{
	const unsigned numLines = 133;
	VEGAPath path;
	RETURN_IF_ERROR(path.prepare(numLines+1));
	verify_success(path.moveTo(VEGA_FLTTOFIX(1060.119995f), VEGA_FLTTOFIX( 718.779175f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1082.829346f), VEGA_FLTTOFIX( 728.069763f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1104.150146f), VEGA_FLTTOFIX( 737.119507f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1124.087524f), VEGA_FLTTOFIX( 745.938599f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1142.667725f), VEGA_FLTTOFIX( 754.545532f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1159.935303f), VEGA_FLTTOFIX( 762.967590f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1175.915039f), VEGA_FLTTOFIX( 771.222900f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1190.649048f), VEGA_FLTTOFIX( 779.338867f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1204.167236f), VEGA_FLTTOFIX( 787.337280f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1216.505981f), VEGA_FLTTOFIX( 795.244263f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1227.700562f), VEGA_FLTTOFIX( 803.087097f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1237.782349f), VEGA_FLTTOFIX( 810.891724f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1246.783691f), VEGA_FLTTOFIX( 818.687256f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1254.734619f), VEGA_FLTTOFIX( 826.503784f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1261.660889f), VEGA_FLTTOFIX( 834.370117f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1267.583008f), VEGA_FLTTOFIX( 842.312500f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1272.519897f), VEGA_FLTTOFIX( 850.355713f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1276.483887f), VEGA_FLTTOFIX( 858.513428f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1279.489502f), VEGA_FLTTOFIX( 866.792236f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1281.555054f), VEGA_FLTTOFIX( 875.190674f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1282.707153f), VEGA_FLTTOFIX( 883.700684f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1282.982178f), VEGA_FLTTOFIX( 892.318359f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1282.423950f), VEGA_FLTTOFIX( 901.041016f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1281.079834f), VEGA_FLTTOFIX( 909.878540f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1278.997559f), VEGA_FLTTOFIX( 918.846313f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1276.222290f), VEGA_FLTTOFIX( 927.966309f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1272.796509f), VEGA_FLTTOFIX( 937.264282f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1268.760010f), VEGA_FLTTOFIX( 946.765991f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1264.148438f), VEGA_FLTTOFIX( 956.501099f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1258.997803f), VEGA_FLTTOFIX( 966.493652f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1253.339111f), VEGA_FLTTOFIX( 976.775513f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1247.209961f), VEGA_FLTTOFIX( 987.363281f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1240.634766f), VEGA_FLTTOFIX( 998.294189f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1233.655518f), VEGA_FLTTOFIX(1009.576172f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1226.294189f), VEGA_FLTTOFIX(1021.248047f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1218.578857f), VEGA_FLTTOFIX(1033.338013f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1210.564819f), VEGA_FLTTOFIX(1045.832031f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1210.565918f), VEGA_FLTTOFIX(1045.830322f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1202.256104f), VEGA_FLTTOFIX(1058.794434f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1202.264893f), VEGA_FLTTOFIX(1058.780640f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1193.707520f), VEGA_FLTTOFIX(1072.211792f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1184.924927f), VEGA_FLTTOFIX(1086.145996f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1175.965576f), VEGA_FLTTOFIX(1100.578247f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1166.844238f), VEGA_FLTTOFIX(1115.557007f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1157.598389f), VEGA_FLTTOFIX(1131.094238f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1148.259888f), VEGA_FLTTOFIX(1147.211670f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1138.861816f), VEGA_FLTTOFIX(1163.928589f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1129.433594f), VEGA_FLTTOFIX(1181.269653f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1120.008545f), VEGA_FLTTOFIX(1199.254028f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1110.620361f), VEGA_FLTTOFIX(1217.899414f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1101.296997f), VEGA_FLTTOFIX(1237.235229f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1092.074097f), VEGA_FLTTOFIX(1257.274658f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1082.982056f), VEGA_FLTTOFIX(1278.042358f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1074.053467f), VEGA_FLTTOFIX(1299.558594f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1065.320557f), VEGA_FLTTOFIX(1321.844238f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1056.814697f), VEGA_FLTTOFIX(1344.921997f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1048.569214f), VEGA_FLTTOFIX(1368.810547f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1040.615967f), VEGA_FLTTOFIX(1393.531860f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1032.986450f), VEGA_FLTTOFIX(1419.109131f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1025.714355f), VEGA_FLTTOFIX(1445.559448f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1018.831543f), VEGA_FLTTOFIX(1472.904663f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1012.370056f), VEGA_FLTTOFIX(1501.167847f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1006.362061f), VEGA_FLTTOFIX(1530.371338f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1000.841431f), VEGA_FLTTOFIX(1560.529541f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 995.839111f), VEGA_FLTTOFIX(1591.670654f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 991.388306f), VEGA_FLTTOFIX(1623.812378f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 987.514099f), VEGA_FLTTOFIX(1657.039062f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 975.594543f), VEGA_FLTTOFIX(1655.649292f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 979.483765f), VEGA_FLTTOFIX(1622.293701f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 983.970032f), VEGA_FLTTOFIX(1589.895874f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 989.013428f), VEGA_FLTTOFIX(1558.498901f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 994.582092f), VEGA_FLTTOFIX(1528.078857f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1000.642029f), VEGA_FLTTOFIX(1498.622559f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1007.161987f), VEGA_FLTTOFIX(1470.103516f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1014.109192f), VEGA_FLTTOFIX(1442.502319f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1021.450317f), VEGA_FLTTOFIX(1415.801025f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1029.152588f), VEGA_FLTTOFIX(1389.980103f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1037.184082f), VEGA_FLTTOFIX(1365.015503f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1045.511719f), VEGA_FLTTOFIX(1340.888794f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1054.102295f), VEGA_FLTTOFIX(1317.581299f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1062.924072f), VEGA_FLTTOFIX(1295.068726f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1071.942627f), VEGA_FLTTOFIX(1273.335938f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1081.126099f), VEGA_FLTTOFIX(1252.359253f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1090.441528f), VEGA_FLTTOFIX(1232.118652f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1099.854370f), VEGA_FLTTOFIX(1212.597412f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1109.335449f), VEGA_FLTTOFIX(1193.767822f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1118.847290f), VEGA_FLTTOFIX(1175.617554f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1128.358887f), VEGA_FLTTOFIX(1158.123047f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1137.837891f), VEGA_FLTTOFIX(1141.262451f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1147.249268f), VEGA_FLTTOFIX(1125.019043f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1156.561035f), VEGA_FLTTOFIX(1109.370850f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1165.739746f), VEGA_FLTTOFIX(1094.297974f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1174.757568f), VEGA_FLTTOFIX(1079.771606f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1183.564697f), VEGA_FLTTOFIX(1065.798340f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1192.155640f), VEGA_FLTTOFIX(1052.314697f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1200.449951f), VEGA_FLTTOFIX(1039.374390f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1208.482178f), VEGA_FLTTOFIX(1026.852417f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1208.474609f), VEGA_FLTTOFIX(1026.864136f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1216.159668f), VEGA_FLTTOFIX(1014.821655f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1223.474121f), VEGA_FLTTOFIX(1003.224121f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1230.392700f), VEGA_FLTTOFIX( 992.040161f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1236.872559f), VEGA_FLTTOFIX( 981.267700f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1242.889893f), VEGA_FLTTOFIX( 970.873169f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1248.404785f), VEGA_FLTTOFIX( 960.852539f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1253.389771f), VEGA_FLTTOFIX( 951.181152f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1257.810303f), VEGA_FLTTOFIX( 941.849365f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1261.637695f), VEGA_FLTTOFIX( 932.840332f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1264.842407f), VEGA_FLTTOFIX( 924.141968f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1267.399414f), VEGA_FLTTOFIX( 915.739258f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1269.285645f), VEGA_FLTTOFIX( 907.615967f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1270.481445f), VEGA_FLTTOFIX( 899.753296f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1270.969727f), VEGA_FLTTOFIX( 892.125366f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1270.732666f), VEGA_FLTTOFIX( 884.700439f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1269.749023f), VEGA_FLTTOFIX( 877.434570f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1267.989990f), VEGA_FLTTOFIX( 870.282959f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1265.417236f), VEGA_FLTTOFIX( 863.195801f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1261.984009f), VEGA_FLTTOFIX( 856.130615f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1257.639648f), VEGA_FLTTOFIX( 849.052490f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1252.331543f), VEGA_FLTTOFIX( 841.933838f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1246.013672f), VEGA_FLTTOFIX( 834.758423f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1238.641357f), VEGA_FLTTOFIX( 827.510864f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1230.175293f), VEGA_FLTTOFIX( 820.178833f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1220.580566f), VEGA_FLTTOFIX( 812.751221f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1209.824219f), VEGA_FLTTOFIX( 805.215454f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1197.872803f), VEGA_FLTTOFIX( 797.556641f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1184.696289f), VEGA_FLTTOFIX( 789.760376f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1170.266235f), VEGA_FLTTOFIX( 781.811890f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1154.547607f), VEGA_FLTTOFIX( 773.691406f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1137.517212f), VEGA_FLTTOFIX( 765.385010f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1119.134766f), VEGA_FLTTOFIX( 756.869690f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1099.379883f), VEGA_FLTTOFIX( 748.131348f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1078.213623f), VEGA_FLTTOFIX( 739.147095f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1055.576172f), VEGA_FLTTOFIX( 729.885986f)));
	path.close(true);
	verify(path.getCategory() == VEGAPath::COMPLEX);
}

test("duplicate vertex")
{
	const unsigned numLines = 72;
	VEGAPath path;
	RETURN_IF_ERROR(path.prepare(numLines+1));
	verify_success(path.moveTo(VEGA_FLTTOFIX(  15.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1034.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1036.992920f), VEGA_FLTTOFIX(   0.274587f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1039.758301f), VEGA_FLTTOFIX(   1.098350f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1042.296143f), VEGA_FLTTOFIX(   2.471287f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1044.606567f), VEGA_FLTTOFIX(   4.393398f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1046.528564f), VEGA_FLTTOFIX(   6.703835f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1047.901611f), VEGA_FLTTOFIX(   9.241748f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1048.725342f), VEGA_FLTTOFIX(  12.007136f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1049.000000f), VEGA_FLTTOFIX(  15.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1049.000000f), VEGA_FLTTOFIX( 285.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1048.725342f), VEGA_FLTTOFIX( 287.992859f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1047.901611f), VEGA_FLTTOFIX( 290.758240f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1046.528564f), VEGA_FLTTOFIX( 293.296143f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1044.606567f), VEGA_FLTTOFIX( 295.606598f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1042.296143f), VEGA_FLTTOFIX( 297.528717f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1039.758301f), VEGA_FLTTOFIX( 298.901642f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1036.992920f), VEGA_FLTTOFIX( 299.725403f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1034.000000f), VEGA_FLTTOFIX( 300.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  15.000000f), VEGA_FLTTOFIX( 300.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  12.007136f), VEGA_FLTTOFIX( 299.725403f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   9.241748f), VEGA_FLTTOFIX( 298.901642f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   6.703835f), VEGA_FLTTOFIX( 297.528717f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   4.393398f), VEGA_FLTTOFIX( 295.606598f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   2.471287f), VEGA_FLTTOFIX( 293.296143f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   1.098350f), VEGA_FLTTOFIX( 290.758240f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.274587f), VEGA_FLTTOFIX( 287.992859f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX( 285.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX(  15.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.274587f), VEGA_FLTTOFIX(  12.007136f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   1.098350f), VEGA_FLTTOFIX(   9.241748f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   2.471287f), VEGA_FLTTOFIX(   6.703835f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   4.393398f), VEGA_FLTTOFIX(   4.393398f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   6.703835f), VEGA_FLTTOFIX(   2.471287f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   9.241748f), VEGA_FLTTOFIX(   1.098350f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  12.007136f), VEGA_FLTTOFIX(   0.274587f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  15.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  12.007136f), VEGA_FLTTOFIX(   0.274587f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   9.241748f), VEGA_FLTTOFIX(   1.098350f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   6.703835f), VEGA_FLTTOFIX(   2.471287f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   4.393398f), VEGA_FLTTOFIX(   4.393398f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   2.471287f), VEGA_FLTTOFIX(   6.703835f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   1.098350f), VEGA_FLTTOFIX(   9.241748f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.274587f), VEGA_FLTTOFIX(  12.007136f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX(  15.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX( 285.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.274587f), VEGA_FLTTOFIX( 287.992859f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   1.098350f), VEGA_FLTTOFIX( 290.758240f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   2.471287f), VEGA_FLTTOFIX( 293.296143f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   4.393398f), VEGA_FLTTOFIX( 295.606598f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   6.703835f), VEGA_FLTTOFIX( 297.528717f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   9.241748f), VEGA_FLTTOFIX( 298.901642f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  12.007136f), VEGA_FLTTOFIX( 299.725403f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  15.000000f), VEGA_FLTTOFIX( 300.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1034.000000f), VEGA_FLTTOFIX( 300.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1036.992920f), VEGA_FLTTOFIX( 299.725403f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1039.758301f), VEGA_FLTTOFIX( 298.901642f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1042.296143f), VEGA_FLTTOFIX( 297.528717f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1044.606567f), VEGA_FLTTOFIX( 295.606598f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1046.528564f), VEGA_FLTTOFIX( 293.296143f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1047.901611f), VEGA_FLTTOFIX( 290.758240f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1048.725342f), VEGA_FLTTOFIX( 287.992859f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1049.000000f), VEGA_FLTTOFIX( 285.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1049.000000f), VEGA_FLTTOFIX(  15.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1048.725342f), VEGA_FLTTOFIX(  12.007136f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1047.901611f), VEGA_FLTTOFIX(   9.241748f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1046.528564f), VEGA_FLTTOFIX(   6.703835f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1044.606567f), VEGA_FLTTOFIX(   4.393398f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1042.296143f), VEGA_FLTTOFIX(   2.471287f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1039.758301f), VEGA_FLTTOFIX(   1.098350f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1036.992920f), VEGA_FLTTOFIX(   0.274587f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(1034.000000f), VEGA_FLTTOFIX(   0.000000f)));
	path.close(true);
	verify(path.getCategory() == VEGAPath::COMPLEX);
	verify(path.getNumLines() == numLines);
}

/* Subtest testing paths with multiple sub paths. They should
 * be categorized as either SIMPLE or COMPLEX after the sub paths
 * have been merged together.
 * @param path the path to be tested.
 * @param desiredCategory the desired category for the merged path
 * (SIMPLE or COMPLEX depending on the test case).*/
subtest verifyPathWithMultipleSubPaths(VEGAPath& path, const VEGAPath::Category desiredCategory)
{
	verify(desiredCategory == VEGAPath::SIMPLE || desiredCategory == VEGAPath::COMPLEX);
	verify(path.getCategory() == VEGAPath::COMPLEX);
	VEGAPath mergedPath;
	OP_STATUS s = path.tryToMakeMultipleSubPathsSimple(mergedPath, true);
	verify(!OpStatus::IsMemoryError(s) && "OOM");
	verify_success(s);
	verify(desiredCategory == mergedPath.getCategory());
}

/* Testcases with prefix 'square' consists of an outer square with square
 * sub paths (holes) in different configurations. */
test("square 2")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_INTTOFIX(50), VEGA_INTTOFIX(50)));
	verify_success(path.lineTo(VEGA_INTTOFIX(350), VEGA_INTTOFIX(50)));
	verify_success(path.lineTo(VEGA_INTTOFIX(350), VEGA_INTTOFIX(350)));
	verify_success(path.lineTo(VEGA_INTTOFIX(50), VEGA_INTTOFIX(350)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(100), VEGA_INTTOFIX(100)));
	verify_success(path.lineTo(VEGA_INTTOFIX(300), VEGA_INTTOFIX(100)));
	verify_success(path.lineTo(VEGA_INTTOFIX(300), VEGA_INTTOFIX(300)));
	verify_success(path.lineTo(VEGA_INTTOFIX(100), VEGA_INTTOFIX(300)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("square 2x2")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_INTTOFIX(50), VEGA_INTTOFIX(50)));
	verify_success(path.lineTo(VEGA_INTTOFIX(350), VEGA_INTTOFIX(50)));
	verify_success(path.lineTo(VEGA_INTTOFIX(350), VEGA_INTTOFIX(350)));
	verify_success(path.lineTo(VEGA_INTTOFIX(50), VEGA_INTTOFIX(350)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(180), VEGA_INTTOFIX(150)));
	verify_success(path.lineTo(VEGA_INTTOFIX(180), VEGA_INTTOFIX(180)));
	verify_success(path.lineTo(VEGA_INTTOFIX(150), VEGA_INTTOFIX(180)));
	verify_success(path.lineTo(VEGA_INTTOFIX(150), VEGA_INTTOFIX(150)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(180), VEGA_INTTOFIX(250)));
	verify_success(path.lineTo(VEGA_INTTOFIX(180), VEGA_INTTOFIX(220)));
	verify_success(path.lineTo(VEGA_INTTOFIX(150), VEGA_INTTOFIX(220)));
	verify_success(path.lineTo(VEGA_INTTOFIX(150), VEGA_INTTOFIX(250)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(220), VEGA_INTTOFIX(250)));
	verify_success(path.lineTo(VEGA_INTTOFIX(220), VEGA_INTTOFIX(220)));
	verify_success(path.lineTo(VEGA_INTTOFIX(250), VEGA_INTTOFIX(220)));
	verify_success(path.lineTo(VEGA_INTTOFIX(250), VEGA_INTTOFIX(250)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(220), VEGA_INTTOFIX(150)));
	verify_success(path.lineTo(VEGA_INTTOFIX(220), VEGA_INTTOFIX(180)));
	verify_success(path.lineTo(VEGA_INTTOFIX(250), VEGA_INTTOFIX(180)));
	verify_success(path.lineTo(VEGA_INTTOFIX(250), VEGA_INTTOFIX(150)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("square cross")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_INTTOFIX(50), VEGA_INTTOFIX(50)));
	verify_success(path.lineTo(VEGA_INTTOFIX(350), VEGA_INTTOFIX(50)));
	verify_success(path.lineTo(VEGA_INTTOFIX(350), VEGA_INTTOFIX(350)));
	verify_success(path.lineTo(VEGA_INTTOFIX(50), VEGA_INTTOFIX(350)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(180), VEGA_INTTOFIX(150)));
	verify_success(path.lineTo(VEGA_INTTOFIX(180), VEGA_INTTOFIX(180)));
	verify_success(path.lineTo(VEGA_INTTOFIX(150), VEGA_INTTOFIX(180)));
	verify_success(path.lineTo(VEGA_INTTOFIX(150), VEGA_INTTOFIX(150)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(180), VEGA_INTTOFIX(250)));
	verify_success(path.lineTo(VEGA_INTTOFIX(180), VEGA_INTTOFIX(220)));
	verify_success(path.lineTo(VEGA_INTTOFIX(150), VEGA_INTTOFIX(220)));
	verify_success(path.lineTo(VEGA_INTTOFIX(150), VEGA_INTTOFIX(250)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(220), VEGA_INTTOFIX(250)));
	verify_success(path.lineTo(VEGA_INTTOFIX(220), VEGA_INTTOFIX(220)));
	verify_success(path.lineTo(VEGA_INTTOFIX(250), VEGA_INTTOFIX(220)));
	verify_success(path.lineTo(VEGA_INTTOFIX(250), VEGA_INTTOFIX(250)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(220), VEGA_INTTOFIX(150)));
	verify_success(path.lineTo(VEGA_INTTOFIX(220), VEGA_INTTOFIX(180)));
	verify_success(path.lineTo(VEGA_INTTOFIX(250), VEGA_INTTOFIX(180)));
	verify_success(path.lineTo(VEGA_INTTOFIX(250), VEGA_INTTOFIX(150)));
	path.close(true);

	verify_success(path.moveTo(VEGA_INTTOFIX(100), VEGA_INTTOFIX(120)));
	verify_success(path.lineTo(VEGA_INTTOFIX(120), VEGA_INTTOFIX(120)));
	verify_success(path.lineTo(VEGA_INTTOFIX(120), VEGA_INTTOFIX(100)));
	verify_success(path.lineTo(VEGA_INTTOFIX(100), VEGA_INTTOFIX(100)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(300), VEGA_INTTOFIX(280)));
	verify_success(path.lineTo(VEGA_INTTOFIX(280), VEGA_INTTOFIX(280)));
	verify_success(path.lineTo(VEGA_INTTOFIX(280), VEGA_INTTOFIX(300)));
	verify_success(path.lineTo(VEGA_INTTOFIX(300), VEGA_INTTOFIX(300)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(100), VEGA_INTTOFIX(280)));
	verify_success(path.lineTo(VEGA_INTTOFIX(120), VEGA_INTTOFIX(280)));
	verify_success(path.lineTo(VEGA_INTTOFIX(120), VEGA_INTTOFIX(300)));
	verify_success(path.lineTo(VEGA_INTTOFIX(100), VEGA_INTTOFIX(300)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(300), VEGA_INTTOFIX(120)));
	verify_success(path.lineTo(VEGA_INTTOFIX(280), VEGA_INTTOFIX(120)));
	verify_success(path.lineTo(VEGA_INTTOFIX(280), VEGA_INTTOFIX(100)));
	verify_success(path.lineTo(VEGA_INTTOFIX(300), VEGA_INTTOFIX(100)));
	path.close(true);

	verify_success(path.moveTo(VEGA_INTTOFIX(190), VEGA_INTTOFIX(190)));
	verify_success(path.lineTo(VEGA_INTTOFIX(210), VEGA_INTTOFIX(190)));
	verify_success(path.lineTo(VEGA_INTTOFIX(210), VEGA_INTTOFIX(210)));
	verify_success(path.lineTo(VEGA_INTTOFIX(190), VEGA_INTTOFIX(210)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("square with two nested holes")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_INTTOFIX(50), VEGA_INTTOFIX(50)));
	verify_success(path.lineTo(VEGA_INTTOFIX(350), VEGA_INTTOFIX(50)));
	verify_success(path.lineTo(VEGA_INTTOFIX(350), VEGA_INTTOFIX(350)));
	verify_success(path.lineTo(VEGA_INTTOFIX(50), VEGA_INTTOFIX(350)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(300), VEGA_INTTOFIX(100)));
	verify_success(path.lineTo(VEGA_INTTOFIX(300), VEGA_INTTOFIX(300)));
	verify_success(path.lineTo(VEGA_INTTOFIX(100), VEGA_INTTOFIX(300)));
	verify_success(path.lineTo(VEGA_INTTOFIX(100), VEGA_INTTOFIX(100)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(320), VEGA_INTTOFIX(320)));
	verify_success(path.lineTo(VEGA_INTTOFIX(320), VEGA_INTTOFIX(80)));
	verify_success(path.lineTo(VEGA_INTTOFIX(80), VEGA_INTTOFIX(80)));
	verify_success(path.lineTo(VEGA_INTTOFIX(80), VEGA_INTTOFIX(320)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("square with four nested holes")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_INTTOFIX(50), VEGA_INTTOFIX(50)));
	verify_success(path.lineTo(VEGA_INTTOFIX(350), VEGA_INTTOFIX(50)));
	verify_success(path.lineTo(VEGA_INTTOFIX(350), VEGA_INTTOFIX(350)));
	verify_success(path.lineTo(VEGA_INTTOFIX(50), VEGA_INTTOFIX(350)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(300), VEGA_INTTOFIX(100)));
	verify_success(path.lineTo(VEGA_INTTOFIX(300), VEGA_INTTOFIX(300)));
	verify_success(path.lineTo(VEGA_INTTOFIX(100), VEGA_INTTOFIX(300)));
	verify_success(path.lineTo(VEGA_INTTOFIX(100), VEGA_INTTOFIX(100)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(320), VEGA_INTTOFIX(320)));
	verify_success(path.lineTo(VEGA_INTTOFIX(320), VEGA_INTTOFIX(80)));
	verify_success(path.lineTo(VEGA_INTTOFIX(80), VEGA_INTTOFIX(80)));
	verify_success(path.lineTo(VEGA_INTTOFIX(80), VEGA_INTTOFIX(320)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(90), VEGA_INTTOFIX(310)));
	verify_success(path.lineTo(VEGA_INTTOFIX(310), VEGA_INTTOFIX(310)));
	verify_success(path.lineTo(VEGA_INTTOFIX(310), VEGA_INTTOFIX(90)));
	verify_success(path.lineTo(VEGA_INTTOFIX(90), VEGA_INTTOFIX(90)));
	path.close(true);
	verify_success(path.moveTo(VEGA_INTTOFIX(60), VEGA_INTTOFIX(60)));
	verify_success(path.lineTo(VEGA_INTTOFIX(340), VEGA_INTTOFIX(60)));
	verify_success(path.lineTo(VEGA_INTTOFIX(340), VEGA_INTTOFIX(340)));
	verify_success(path.lineTo(VEGA_INTTOFIX(60), VEGA_INTTOFIX(340)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("same bounding box")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 200.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("same bounding box reverse")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 200.000000f)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("same bounding box nested squares")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 100.000000f)));

	verify_success(path.moveTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 150.000000f)));

	verify_success(path.moveTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 300.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 300.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 100.000000f)));

	verify_success(path.moveTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 250.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 300.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 250.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("same bounding box nested diamonds")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 250.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 300.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 250.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 300.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 350.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 400.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 350.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 400.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 450.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 500.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 450.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 190.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 110.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 250.000000f), VEGA_FLTTOFIX( 190.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 300.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 250.000000f), VEGA_FLTTOFIX( 110.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 300.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 350.000000f), VEGA_FLTTOFIX( 190.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 400.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 350.000000f), VEGA_FLTTOFIX( 110.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 400.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 450.000000f), VEGA_FLTTOFIX( 190.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 500.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 450.000000f), VEGA_FLTTOFIX( 110.000000f)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("same bounding box deluxe")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 200.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 110.000000f), VEGA_FLTTOFIX( 190.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 190.000000f), VEGA_FLTTOFIX( 190.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 190.000000f), VEGA_FLTTOFIX( 110.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 110.000000f), VEGA_FLTTOFIX( 110.000000f)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("separated convex paths")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX(  50.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  50.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 460.000000f), VEGA_FLTTOFIX( 460.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 520.000000f), VEGA_FLTTOFIX( 460.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 520.000000f), VEGA_FLTTOFIX( 520.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 460.000000f), VEGA_FLTTOFIX( 520.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 450.000000f), VEGA_FLTTOFIX( 450.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 550.000000f), VEGA_FLTTOFIX( 450.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 550.000000f), VEGA_FLTTOFIX( 550.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 450.000000f), VEGA_FLTTOFIX( 550.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 170.000000f), VEGA_FLTTOFIX( 170.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 170.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 210.000000f), VEGA_FLTTOFIX( 200.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 220.000000f), VEGA_FLTTOFIX( 210.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 230.000000f), VEGA_FLTTOFIX( 220.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 210.000000f), VEGA_FLTTOFIX( 250.000000f)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("touching sides")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX(  50.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  50.000000f), VEGA_FLTTOFIX( 350.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 350.000000f), VEGA_FLTTOFIX( 350.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 350.000000f), VEGA_FLTTOFIX(  50.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 400.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 350.000000f), VEGA_FLTTOFIX( 400.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 350.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 360.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 360.000000f), VEGA_FLTTOFIX( 500.000000f)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("touching sides 2")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  50.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  50.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX(  50.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  50.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX(   0.000000f)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("pointy triangles")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  50.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  30.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 130.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX(  50.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 230.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 250.000000f), VEGA_FLTTOFIX(  50.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 300.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 330.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 350.000000f), VEGA_FLTTOFIX(  50.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 400.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 450.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 430.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 530.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 500.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 550.000000f), VEGA_FLTTOFIX(  50.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 600.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 650.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 630.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("pointy triangles in a surrounding box")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  50.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  30.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 130.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX(  50.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 250.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 230.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 300.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 330.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 350.000000f), VEGA_FLTTOFIX(  50.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 400.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 450.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 430.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 530.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 500.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 550.000000f), VEGA_FLTTOFIX(  50.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 630.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 600.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 650.000000f), VEGA_FLTTOFIX(  50.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( -10.000000f), VEGA_FLTTOFIX( -10.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 750.000000f), VEGA_FLTTOFIX( -10.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 750.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( -10.000000f), VEGA_FLTTOFIX( 150.000000f)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

/** Below are tests with intersecting sub paths. These should for now be categorized
 * as COMPLEX (and rendered with slow path) but that will probably change later. */
test("crossing lines")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX( 150.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 150.000000f), VEGA_FLTTOFIX(  50.000000f)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::COMPLEX));
}

test("intersecting triangles")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 300.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX( 300.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX(  20.000000f), VEGA_FLTTOFIX(  10.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 200.000000f), VEGA_FLTTOFIX(  10.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 120.000000f), VEGA_FLTTOFIX( 200.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX(  50.000000f), VEGA_FLTTOFIX(   5.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 205.000000f), VEGA_FLTTOFIX(   5.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 120.000000f), VEGA_FLTTOFIX( 215.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX(  30.000000f), VEGA_FLTTOFIX(  20.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX(  20.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 300.000000f), VEGA_FLTTOFIX( 160.000000f)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::COMPLEX));
}

test("nuclear")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX(  80.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX(  80.000000f)));
	path.close(true);
	verify_success(path.moveTo(VEGA_FLTTOFIX(  50.000000f), VEGA_FLTTOFIX(  40.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  10.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  90.000000f), VEGA_FLTTOFIX( 100.000000f)));
	path.close(true);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::COMPLEX));
}

test("empty subpath")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX( 100.000000f)));
	// will create empty subpath
	verify_success(path.moveTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX(   0.000000f)));
	path.close(false);
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("degenerate triangles")
{
	VEGAPath path;

	// surounding rect
	verify_success(path.moveTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(   0.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX( 100.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 100.000000f), VEGA_FLTTOFIX(   0.000000f)));
	verify_success(path.close(true));

	// vertical degenerate triangle
	verify_success(path.moveTo(VEGA_FLTTOFIX(  10.000000f), VEGA_FLTTOFIX(  10.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  10.000000f), VEGA_FLTTOFIX(  30.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  30.000000f), VEGA_FLTTOFIX(  30.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  10.000000f), VEGA_FLTTOFIX(  20.000000f)));
	verify_success(path.close(true));

	// diagonal degenerate triangle
	verify_success(path.moveTo(VEGA_FLTTOFIX(  10.000000f), VEGA_FLTTOFIX(  40.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  20.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  20.000000f), VEGA_FLTTOFIX(  60.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  30.000000f), VEGA_FLTTOFIX(  60.000000f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  20.000000f), VEGA_FLTTOFIX(  50.000000f)));
	verify_success(path.close(true));

	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("hang")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX(  0.f), VEGA_FLTTOFIX(  0.f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  0.f), VEGA_FLTTOFIX( 10.f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 10.f), VEGA_FLTTOFIX( 10.f)));
	verify_success(path.close(true));
	verify_success(path.moveTo(VEGA_FLTTOFIX(  0.f), VEGA_FLTTOFIX( 0.f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(  0.f), VEGA_FLTTOFIX(-10.f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 10.f), VEGA_FLTTOFIX(-10.f)));
	verify_success(path.close(true));
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}

test("index offset")
{
	VEGAPath path;
	verify_success(path.moveTo(VEGA_FLTTOFIX(20.f), VEGA_FLTTOFIX(10.f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(10.f), VEGA_FLTTOFIX(20.f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 0.f), VEGA_FLTTOFIX(10.f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(10.f), VEGA_FLTTOFIX( 0.f)));
	verify_success(path.close(true));
	verify_success(path.moveTo(VEGA_FLTTOFIX(10.f), VEGA_FLTTOFIX( 2.f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(12.f), VEGA_FLTTOFIX( 4.f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 8.f), VEGA_FLTTOFIX( 4.f)));
	verify_success(path.close(true));
	verify_success(path.moveTo(VEGA_FLTTOFIX(10.f), VEGA_FLTTOFIX(18.f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX(12.f), VEGA_FLTTOFIX(16.f)));
	verify_success(path.lineTo(VEGA_FLTTOFIX( 8.f), VEGA_FLTTOFIX(16.f)));
	verify_success(path.close(true));
	verify_success(verifyPathWithMultipleSubPaths(path, VEGAPath::SIMPLE));
}
