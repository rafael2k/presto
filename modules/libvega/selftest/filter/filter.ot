// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
group "libvega.filter";

require VEGA_SUPPORT;

include "modules/util/opstring.h";
include "modules/util/opfile/opfile.h";

include "modules/libvega/vegarenderer.h";
include "modules/libvega/vegapath.h";
include "modules/libvega/vegatransform.h";

include "modules/pi/OpBitmap.h";
include "modules/img/decoderfactorypng.h";

global
{
    int VEGA_MAX_RGBA_DIFF = 255;
    // Somewhere between 15 and 30 dB difference
    double VEGA_MAX_PSNR_DIFF = (15.0+(VEGA_DEFAULT_QUALITY*VEGA_DEFAULT_QUALITY)/5.0);
    BOOL VEGA_GENERATE_REF = FALSE;
    int psnr_limit = (int)op_pow(10., VEGA_MAX_PSNR_DIFF / 10.);
}

table png_files filelist "." name "*.png";

foreach (FILE) from png_files
{
	/** FIXME: This will currently not test images and gradients. There might be some more stuff which is not tested. */
	test("$(FILE)")
	{
		OpBitmap* bmp = 0;
		VEGARenderer vega_renderer;
		VEGAPath path, opath, dpath;
		path.moveTo(VEGA_INTTOFIX(20),VEGA_INTTOFIX(20));
		path.lineTo(VEGA_INTTOFIX(120),VEGA_INTTOFIX(120));
		path.lineTo(VEGA_INTTOFIX(120),VEGA_INTTOFIX(20));
		path.lineTo(VEGA_INTTOFIX(20),VEGA_INTTOFIX(120));
		path.close(true);
		path.setLineWidth(VEGA_INTTOFIX(20));

		path.setLineJoin(VEGA_LINEJOIN_BEVEL);
		path.setLineCap(VEGA_LINECAP_BUTT);

		int width = 140;
		int height = 140;
		verify(OpStatus::IsSuccess(vega_renderer.Init(width, height)));

		VEGA_FIX flatness = VEGA_FIXDIV2(VEGA_FIXDIV2(VEGA_FIXDIV2(VEGA_FIXDIV2(VEGA_INTTOFIX(1)))));
		verify(OpStatus::IsSuccess(path.createOutline(&opath, flatness, 0)));

		VEGARenderTarget* rt;
		VEGARenderTarget* tempRT = NULL;
		// Half transparent green
		vega_renderer.setColor(0x1000ff00);
		verify(OpStatus::IsSuccess(vega_renderer.createIntermediateRenderTarget(&rt, width, height)));
		vega_renderer.setRenderTarget(rt);
		vega_renderer.clear(0,0,width,height, 0);
		vega_renderer.fillPath(&opath);
		vega_renderer.setRenderTarget(NULL);

		VEGARenderTarget* dstRT;
		verify(OpStatus::IsSuccess(OpBitmap::Create(&bmp, width, height, FALSE, TRUE,0, 0, FALSE)));
		verify(OpStatus::IsSuccess(vega_renderer.createBitmapRenderTarget(&dstRT, bmp)));
		vega_renderer.setRenderTarget(NULL);

		VEGAFilter* filter = NULL;
		if (op_strstr(FILE, "gaussian_nowrap_color_large"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createGaussianFilter(&filter, VEGA_INTTOFIX(10), VEGA_INTTOFIX(10), false)));
			filter->setSource(rt);
		}
		else if (op_strstr(FILE, "gaussian_wrap_color_large"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createGaussianFilter(&filter, VEGA_INTTOFIX(10), VEGA_INTTOFIX(10), true)));
			filter->setSource(rt);
		}
		else if (op_strstr(FILE, "gaussian_nowrap_alpha_large"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createGaussianFilter(&filter, VEGA_INTTOFIX(10), VEGA_INTTOFIX(10), false)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "gaussian_wrap_alpha_large"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createGaussianFilter(&filter, VEGA_INTTOFIX(10), VEGA_INTTOFIX(10), true)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "gaussian_nowrap_color_small"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createGaussianFilter(&filter, VEGA_INTTOFIX(1), VEGA_INTTOFIX(1), false)));
			filter->setSource(rt);
		}
		else if (op_strstr(FILE, "gaussian_wrap_color_small"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createGaussianFilter(&filter, VEGA_INTTOFIX(1), VEGA_INTTOFIX(1), true)));
			filter->setSource(rt);
		}
		else if (op_strstr(FILE, "gaussian_nowrap_alpha_small"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createGaussianFilter(&filter, VEGA_INTTOFIX(1), VEGA_INTTOFIX(1), false)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "gaussian_wrap_alpha_small"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createGaussianFilter(&filter, VEGA_INTTOFIX(1), VEGA_INTTOFIX(1), true)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "merge_normal"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createMergeFilter(&filter, VEGAMERGE_NORMAL)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "merge_multiply"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createMergeFilter(&filter, VEGAMERGE_MULTIPLY)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "merge_screen"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createMergeFilter(&filter, VEGAMERGE_SCREEN)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "merge_darken"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createMergeFilter(&filter, VEGAMERGE_DARKEN)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "merge_lighten"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createMergeFilter(&filter, VEGAMERGE_LIGHTEN)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "merge_over"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createMergeFilter(&filter, VEGAMERGE_OVER)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "merge_in"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createMergeFilter(&filter, VEGAMERGE_IN)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "merge_atop"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createMergeFilter(&filter, VEGAMERGE_ATOP)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "merge_out"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createMergeFilter(&filter, VEGAMERGE_OUT)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "merge_xor"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createMergeFilter(&filter, VEGAMERGE_XOR)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "merge_opacity"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createOpacityMergeFilter(&filter, 200)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "merge_arithmetic"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createArithmeticMergeFilter(&filter, VEGA_FIXDIV2(VEGA_INTTOFIX(1)), VEGA_INTTOFIX(1)/10, VEGA_INTTOFIX(1)/10, VEGA_INTTOFIX(1)/10)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "merge_replace"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createMergeFilter(&filter, VEGAMERGE_REPLACE)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "merge_plus"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createMergeFilter(&filter, VEGAMERGE_PLUS)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "color_space_conversion"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createColorSpaceConversionFilter(&filter, VEGACOLORSPACE_SRGB, VEGACOLORSPACE_LINRGB)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "luminance_to_alpha"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createLuminanceToAlphaFilter(&filter)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "color_transform_linear"))
		{
			VEGA_FIX lin[] = {VEGA_INTTOFIX(5), 0};
			VEGA_FIX tab[] = {VEGA_INTTOFIX(1), 0};
			verify(OpStatus::IsSuccess(vega_renderer.createComponentColorTransformFilter(&filter, VEGACOMPFUNC_IDENTITY, NULL, 0, VEGACOMPFUNC_TABLE, tab, 2, VEGACOMPFUNC_DISCRETE, tab, 2, VEGACOMPFUNC_LINEAR, lin, 2)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "color_transform_matrix"))
		{
			VEGA_FIX mat[] = {0, VEGA_INTTOFIX(1), 0, 0, 0,
				0, VEGA_FIXDIV2(VEGA_INTTOFIX(1)), 0, 0, 0,
				0, VEGA_INTTOFIX(1), 0, 0, 0,
				0, VEGA_INTTOFIX(2), 0, 0, 0};
			VEGA_FIX* m = mat;
			verify(OpStatus::IsSuccess(vega_renderer.createMatrixColorTransformFilter(&filter, m)));

			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "convolve"))
		{
			VEGA_FIX kern[] = {VEGA_INTTOFIX(1), VEGA_INTTOFIX(4), VEGA_INTTOFIX(7), VEGA_INTTOFIX(4), VEGA_INTTOFIX(1),
				VEGA_INTTOFIX(4), VEGA_INTTOFIX(16), VEGA_INTTOFIX(26), VEGA_INTTOFIX(16), VEGA_INTTOFIX(4),
				VEGA_INTTOFIX(7), VEGA_INTTOFIX(26), VEGA_INTTOFIX(41), VEGA_INTTOFIX(26), VEGA_INTTOFIX(7),
				VEGA_INTTOFIX(4), VEGA_INTTOFIX(16), VEGA_INTTOFIX(26), VEGA_INTTOFIX(16), VEGA_INTTOFIX(4),
				VEGA_INTTOFIX(1), VEGA_INTTOFIX(4), VEGA_INTTOFIX(7), VEGA_INTTOFIX(4), VEGA_INTTOFIX(1)};
			verify(OpStatus::IsSuccess(vega_renderer.createConvolveFilter(&filter, kern, 5, 5, 2, 2, VEGA_INTTOFIX(1)/273, 0, VEGAFILTEREDGE_NONE, true)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "displace"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createIntermediateRenderTarget(&tempRT, width, height)));
			vega_renderer.setRenderTarget(tempRT);
			vega_renderer.clear(0,0,width,height, 0xffffffff);
			vega_renderer.setRenderTarget(NULL);
			verify(OpStatus::IsSuccess(vega_renderer.createDisplaceFilter(&filter, tempRT, VEGA_INTTOFIX(2), VEGACOMP_R, VEGACOMP_G)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "erode"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createMorphologyFilter(&filter, VEGAMORPH_ERODE, 5, 5, false)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "dilate"))
		{
			verify(OpStatus::IsSuccess(vega_renderer.createMorphologyFilter(&filter, VEGAMORPH_DILATE, 5, 5, false)));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "light_distant"))
		{
			VEGALightParameter light;
			light.type = VEGALIGHTING_DIFFUSE;
			light.constant = VEGA_INTTOFIX(1);
			light.exponent = 0;
			light.surfaceScale = VEGA_INTTOFIX(5);
			light.color = 0xff0000ff;
			verify(OpStatus::IsSuccess(vega_renderer.createDistantLightFilter(&filter, light, 0, 0, VEGA_INTTOFIX(1))));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "light_point"))
		{
			VEGALightParameter light;
			light.type = VEGALIGHTING_DIFFUSE;
			light.constant = VEGA_INTTOFIX(1);
			light.exponent = 0;
			light.surfaceScale = VEGA_INTTOFIX(5);
			light.color = 0xff0000ff;
			verify(OpStatus::IsSuccess(vega_renderer.createPointLightFilter(&filter, light, 0, 0, VEGA_INTTOFIX(1))));
			filter->setSource(rt, true);
		}
		else if (op_strstr(FILE, "light_spot"))
		{
			VEGALightParameter light;
			light.type = VEGALIGHTING_DIFFUSE;
			light.constant = VEGA_INTTOFIX(1);
			light.exponent = 0;
			light.surfaceScale = VEGA_INTTOFIX(5);
			light.color = 0xff0000ff;
			verify(OpStatus::IsSuccess(vega_renderer.createSpotLightFilter(&filter, light, 0, 0, VEGA_INTTOFIX(1), 0, 0, 0, 0, VEGA_INTTOFIX(90))));
			filter->setSource(rt, true);
		}
		verify(filter);

		vega_renderer.setRenderTarget(dstRT);
		// Half transparent red
		vega_renderer.clear(0,0,width,height, 0x10ff0000);

		VEGAFilterRegion region;
		region.sx = region.dx = 0;
		region.sy = region.dy = 0;
		region.width = 140;
		region.height = 140;

		verify(OpStatus::IsSuccess(vega_renderer.applyFilter(filter, region)));
		vega_renderer.setRenderTarget(NULL);

		OP_DELETE(filter);

		VEGARenderTarget::Destroy(rt);
		VEGARenderTarget::Destroy(dstRT);
		VEGARenderTarget::Destroy(tempRT);

		OP_STATUS status = DecoderFactoryPng::selftest_verify(FILE, bmp, 140, VEGA_MAX_RGBA_DIFF, psnr_limit, VEGA_GENERATE_REF);

		if (OpStatus::IsError(status))
		{
		    OpString8 refimage_failed;
		    refimage_failed.Set(FILE);
		    refimage_failed.Insert(op_strlen(FILE) - 4, "_failed");
		    DecoderFactoryPng::selftest_verify(refimage_failed.CStr(), bmp, bmp->Height(), VEGA_MAX_RGBA_DIFF, psnr_limit, TRUE);
		}

		verify(OpStatus::IsSuccess(status));
	}
	finally
	{
		OP_DELETE(bmp);
	}
}

