/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*-
**
** Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "libvega.postscript.postscriptimage";

require VEGA_POSTSCRIPT_PRINTING;

include "modules/libvega/src/postscript/postscriptimage.h";
include "modules/libvega/src/postscript/postscriptbody.h";
include "modules/util/opfile/opmemfile.h";
include "modules/pi/OpBitmap.h";

constant BUFFER_SIZE = 1024*1024;

global
{
	OpBitmap* generate_image(int width, int height)
	{
		OpBitmap* bmp = NULL;
		UINT32* line = NULL;

		if (OpStatus::IsError(OpBitmap::Create(&bmp, width, height, FALSE, TRUE, 0, 0, FALSE)))
			return NULL;

		line = OP_NEWA(UINT32, width);
		if (!line)
		{
			OP_DELETE(bmp);
			return NULL;
		}

		for (int y=0; y < height; y++)
		{
			UINT32* pos = line;
			for (int x=0; x < width; x++)
			{
				*pos = 0xff << 24 | y << 16 | x << 8 | (x+y)%255;
				pos++;
			}

			if (OpStatus::IsError(bmp->AddLine(line, y)))
			{
				OP_DELETEA(line);
				OP_DELETE(bmp);
				return NULL;
			}
		}

		OP_DELETEA(line);
		return bmp;
	}


	bool contains(OpString8& string, const char* substring)
	{
		return string.Find(substring, 0) != KNotFound;
	}
};


test("generate postscript image from bitmap")
	require undefined VEGA_INTERNAL_FORMAT_RGB565A8;
{
	PostScriptImage* ps_image = NULL;
	unsigned char* output_data = NULL;
	OpFileDescriptor* memfile = NULL;

	const size_t BufferSize = BUFFER_SIZE;

	OpBitmap* bmp = generate_image(256, 256);
	verify(bmp);

	OpRect source_rect(0, 0, 256, 256);
	OpPoint destination(100, 100);
	ps_image = OP_NEW(PostScriptImage, (bmp, source_rect, destination));
	verify(ps_image);

	output_data = OP_NEWA(unsigned char, BufferSize);
	verify(output_data);
	memfile = OpMemFile::Create(output_data, BufferSize, TRUE);
	verify(memfile);

	PostScriptBody ps_body;
	PostScriptOutputMetrics screen_metrics;
	PostScriptOutputMetrics paper_metrics;
	ps_body.Init(*memfile, &screen_metrics, &paper_metrics);

	ps_image->generate(ps_body);

	OpString8 result;
	result.Set((const char*)output_data);
	verify(contains(result, "gsave"));
	verify(contains(result, "  100 -357 translate"));
	verify(contains(result, "  256 256 scale"));
	verify(contains(result, "  256 256 GenerateImageDict"));
	verify(contains(result, "  image"));
	verify(contains(result, "rr<$!rr<'#rr<*%rr<-'rr<0)rr<3+rr<6-rr<9/rr<<1rr<?3rr<B5rr<E7rr<H9rr<K;rr<N=rr<Q?"));
	verify(contains(result, "rrA.BrrA1DrrA4FrrA7HrrA:JrrA=LrrA@NrrACPrrAFRrrAITrrALVrrAOXrrARZrrAU\\rrAX^rrA[`"));
	verify(contains(result, "rtp9Rrtp<Trtp?VrtpBXrtpEZrtpH\\rtpK^rtpN`rtpQbrtpTdrtpWfrtpZhrtp]jrtp`lrtpcnrtpfp"));
	verify(contains(result, "s#CW^s#CZ`s#C]bs#C`ds#Ccfs#Cfhs#Cijs#Clls#Cons#Crps#Curs#D#ts#D'!s#D*#s#D-%s#D0'"));
	verify(contains(result, "s2XW=s2XZ?s2X]As2X`Cs2XcEs2XfGs2XiIs2XlKs2XoMs2XrOs2XuQs2Y#Ss2Y&Us2Y)Ws2Y,Ys2Y/["));
	verify(contains(result, "s6su9s6t#;s6t&=s6t)?s6t,As6t/Cs6t2Es6t5Gs6t8Is6t;Ks6t>Ms6tAOs6tDQs6tGSs6tJUs6tMW"));
	verify(contains(result, "s8VTXs8VWZs8VZ\\s8V]^s8V``s8Vcbs8Vfds8Vifs8Vlhs8Vojs8Vrls8Vuns8W#ps8W&rs8W)ts8W*!"));
	verify(contains(result, "~>"));
	verify(contains(result, "grestore"));

}
finally
{
	if (bmp)
		OP_DELETE(bmp);
	if (ps_image)
		OP_DELETE(ps_image);
	if (memfile)
		OP_DELETE(memfile);
}
