/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*-
**
** Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "libvega.postscript.postscriptprolog";

require VEGA_POSTSCRIPT_PRINTING;

include "modules/libvega/src/postscript/postscriptprolog.h";
include "modules/util/opfile/opmemfile.h";

constant BUFFER_SIZE = 4*1024*1024;

global
{
	class PSPrologHolder
	{
	public:
		PSPrologHolder()
		{
			const size_t BufferSize = BUFFER_SIZE;
			font_manager = NULL;
			if (OpStatus::IsError(OpFontManager::Create(&font_manager)))
				return;
			OpAutoPtr<OpFontManager> font_manager_ap(font_manager);

			ps_prolog = OP_NEW(PostScriptProlog, ());
			if(!ps_prolog)
				return;
			OpAutoPtr<PostScriptProlog> ps_prolog_ap(ps_prolog);

			output_data = OP_NEWA(unsigned char, BufferSize);
			if(!output_data)
				return;

			memfile = OpMemFile::Create(output_data, BufferSize, TRUE);
			if(!memfile)
			{
				OP_DELETEA(output_data);
				return;
			}

			initMetrics(screen_metrics);
			initMetrics(paper_metrics);
			ps_prolog->Init(*memfile, &screen_metrics, &paper_metrics);

			ps_prolog_ap.release();
			font_manager_ap.release();
		}

		~PSPrologHolder()
		{
			if (memfile)
				OP_DELETE(memfile);

			if (ps_prolog)
				OP_DELETE(ps_prolog);

			if (font_manager)
				OP_DELETE(font_manager);
		}

		void initMetrics(PostScriptOutputMetrics& metrics)
		{
			metrics.width = 595;
			metrics.height = 842;
			metrics.offset_top = 30;
			metrics.offset_left = 40;
			metrics.offset_bottom = 40;
			metrics.offset_right = 30;
			metrics.dpi_x = 72;
			metrics.dpi_y = 72;
		}

		OpFontManager* font_manager;
		unsigned char* output_data;
		OpFileDescriptor* memfile;
		PostScriptOutputMetrics screen_metrics;
		PostScriptOutputMetrics paper_metrics;
		PostScriptProlog* ps_prolog;
	};

	bool contains(OpString8& string, const char* substring)
	{
		return string.Find(substring, 0) != KNotFound;
	}
};



test("postscript prolog contains header comments")
{
	PSPrologHolder ps_prolog_holder;
	verify(ps_prolog_holder.memfile);

	ps_prolog_holder.ps_prolog->finish();

	OpString8 result;
	result.Set((const char*)ps_prolog_holder.output_data);

	verify(contains(result, "%!PS-Adobe-3.0\n"
						 	"%%Creator: Opera\n"
						 	"%%BoundingBox: (atend)\n"
						 	"%%LanguageLevel: 3\n"
						 	"%%DocumentData: Clean7Bit\n"
						 	"%%Pages: (atend)\n"
						 	"%%Orientation: (atend)\n"
						 	"%%PageOrder: Ascend\n"
						 	"%%EndComments\n"
						 	"%%BeginProlog\n"));
}


test("postscript prolog contains shorts for common operators")
{
	PSPrologHolder ps_prolog_holder;
	verify(ps_prolog_holder.memfile);

	ps_prolog_holder.ps_prolog->finish();

	OpString8 result;
	result.Set((const char*)ps_prolog_holder.output_data);

	verify(contains(result, "/mt { moveto } bind def\n"
							"/lt { lineto } bind def\n"
							"/sc { setrgbcolor } bind def\n"
							"/rf { rectfill } bind def\n"
							"/rs { rectstroke } bind def\n"));
}


test("postscript prolog contains slanted font copier")
{
	PSPrologHolder ps_prolog_holder;
	verify(ps_prolog_holder.memfile);

	ps_prolog_holder.ps_prolog->finish();

	OpString8 result;
	result.Set((const char*)ps_prolog_holder.output_data);

	verify(contains(result, "/make_slanted_font_copy { % fontname newname --\n"
							"   /newname exch def\n"
							"   /fontdict exch findfont def\n"
							"   /newfont fontdict maxlength dict def\n"
							"   fontdict { exch dup /FID eq\n"
							"               { pop pop }\n"
							"               { exch newfont 3 1 roll put } ifelse\n"
							"            } forall\n"
							"   newfont /FontName newname put\n"
							"   newfont /FontMatrix [1 0 0.2 1 0 0] put\n"
							"   newname newfont definefont pop\n"
							"} def\n"));
}


test("postscript prolog contains image dict generator")
{
	PSPrologHolder ps_prolog_holder;
	verify(ps_prolog_holder.memfile);

	ps_prolog_holder.ps_prolog->finish();

	OpString8 result;
	result.Set((const char*)ps_prolog_holder.output_data);

	verify(contains(result, "/GenerateImageDict { % srcw srch -- type 3 image dict\n"
							"   /srch exch def\n"
							"   /srcw exch def\n"
							"   /ImageMatrix [srcw 0 0 srch neg 0 srch] def\n"
							"   /ImageDataDict <<\n"
							"      /ImageType 1\n"
							"      /Width srcw /Height srch\n"
							"      /BitsPerComponent 8\n"
							"      /Decode [0 1 0 1 0 1]\n"
							"      /ImageMatrix ImageMatrix\n"
							"      /DataSource currentfile /ASCII85Decode filter\n"
							"   >> def\n"
							"   /ImageMaskDict <<\n"
							"      /ImageType 1\n"
							"      /Width srcw /Height srch\n"
							"      /BitsPerComponent 8\n"
							"      /Decode [1 0]\n"
							"      /ImageMatrix ImageMatrix\n"
							"   >> def\n"
							"   <<\n"
							"      /ImageType 3 /InterleaveType 1\n"
							"      /MaskDict ImageMaskDict\n"
							"      /DataDict ImageDataDict\n"
							"   >>\n"
							"} bind def\n"));
}


test("postscript prolog contains ellipse definition")
{
	PSPrologHolder ps_prolog_holder;
	verify(ps_prolog_holder.memfile);

	ps_prolog_holder.ps_prolog->finish();

	OpString8 result;
	result.Set((const char*)ps_prolog_holder.output_data);

	verify(contains(result, "/ellipse { % x y xrad yrad dofill --\n"
							"    gsave newpath\n"
							"        5 1 roll           % rotate dofill to last\n"
							"        4 2 roll translate % translate to (x, y)\n"
							"        2 copy scale       % scale to xrad, yrad\n"
							"        0 0 1 0 360 arc\n"
							"        1 exch div exch 1 exch div scale\n"
							"        closepath {fill} {stroke} ifelse\n"
							"    grestore\n"
							"} bind def\n"));
}


test("postscript prolog contains metrics defintions")
{
	PSPrologHolder ps_prolog_holder;
	verify(ps_prolog_holder.memfile);

	ps_prolog_holder.ps_prolog->finish();

	OpString8 result;
	result.Set((const char*)ps_prolog_holder.output_data);

	verify(contains(result, "/paperwidth 595 def /paperheight 842 def\n"
							"/operawidth 595 def /operaheight 842 def\n"
							"/margleft 40 def /margtop 30 def\n"
							"/margright 30 def /margbottom 40 def\n"
							"/scalescreen { paperwidth margleft margright add sub operawidth div paperheight margtop margbottom add sub operaheight div scale } bind def\n"
							"/translatescreen { margleft margbottom translate } bind def\n"
							"/changefont { exch findfont exch scalefont setfont } def\n"));
}


test("postscript prolog contains prolog ending")
{
	PSPrologHolder ps_prolog_holder;
	verify(ps_prolog_holder.memfile);

	ps_prolog_holder.ps_prolog->finish();

	OpString8 result;
	result.Set((const char*)ps_prolog_holder.output_data);

	verify(contains(result, "%%EndProlog\n"));

	verify(contains(result, "%%BeginSetup\n"
							"%%EndSetup\n"));
}

/**
   fetches a font directly from the font cache
   NOTE: the fetched font _must_ be released by calling g_font_cache->ReleaseFont(font)
   @param name the name of the font - should correspond to a loaded font
   @param size the height of the font, in pixels
   @param weight the font weight
   @param italic TRUE for italic
   @param font (out) will point to the fetched font, or NULL if something went wrong
 */
subtest GetFont(const uni_char* name, const int size, const int weight, const BOOL italic, OpFont*& font)
{
	font = NULL;
	verify(name);
	const short number = styleManager->GetFontNumber(name);
	verify(number >= 0);
	FontAtt att;
	att.SetFontNumber(number);
	att.SetHeight(size);
	att.SetWeight(weight);
	att.SetItalic(italic);
	font = g_font_cache->GetFont(att, 100);
}

test("add a new font to document")
{
	PSPrologHolder ps_prolog_holder;
	OpFont* font = NULL;
	verify(ps_prolog_holder.memfile);

	verify(ps_prolog_holder.font_manager);
	verify(GetFont(ps_prolog_holder.font_manager->GetGenericFontName(GENERIC_FONT_SERIF), 12, 4, FALSE, font));
	verify(font);

	const char* ps_fontname;
	ps_prolog_holder.ps_prolog->addFont(font, ps_fontname);
	ps_prolog_holder.ps_prolog->finish();

	OpString8 result;
	result.Set((const char*)ps_prolog_holder.output_data);

	verify(contains(result, "%%BeginResource: font OperaFont0\n"
							"%!PS-TrueTypeFont-1.0-2.0\n"
							"%%Creator: Opera\n"));

	verify(contains(result, "end /OperaFont0 exch definefont pop\n"
							"%%EndResource\n"));

	verify(contains(result, "%%DocumentSuppliedResources: font OperaFont0\n"));
}
finally
{
	if (font)
		g_font_cache->ReleaseFont(font);
}


test("same font added multiple times should result in only one copy")
{
	PSPrologHolder ps_prolog_holder;
	OpFont* font = NULL;
	verify(ps_prolog_holder.memfile);

	verify(ps_prolog_holder.font_manager);
	verify(GetFont(ps_prolog_holder.font_manager->GetGenericFontName(GENERIC_FONT_SERIF), 12, 4, FALSE, font));
	verify(font);

	const char* ps_fontname_1;
	const char* ps_fontname_2;

	ps_prolog_holder.ps_prolog->addFont(font, ps_fontname_1);
	ps_prolog_holder.ps_prolog->addFont(font, ps_fontname_2);
	verify(ps_fontname_1 == ps_fontname_2);
	ps_prolog_holder.ps_prolog->addFont(font, ps_fontname_2);
	verify(ps_fontname_1 == ps_fontname_2);
	ps_prolog_holder.ps_prolog->addFont(font, ps_fontname_2);
	verify(ps_fontname_1 == ps_fontname_2);
	ps_prolog_holder.ps_prolog->addFont(font, ps_fontname_2);
	verify(ps_fontname_1 == ps_fontname_2);

	ps_prolog_holder.ps_prolog->finish();


	OpString8 result;
	result.Set((const char*)ps_prolog_holder.output_data);

	verify(contains(result, "%%BeginResource: font OperaFont0\n"
							"%!PS-TrueTypeFont-1.0-2.0\n"
							"%%Creator: Opera\n"));

	verify(!contains(result, "%%BeginResource: font OperaFont1\n"
							 "%!PS-TrueTypeFont-1.0-2.0\n"
							 "%%Creator: Opera\n"));

	verify(!contains(result, "%%BeginResource: font OperaFont2\n"
							 "%!PS-TrueTypeFont-1.0-2.0\n"
							 "%%Creator: Opera\n"));

	verify(!contains(result, "%%BeginResource: font OperaFont3\n"
							 "%!PS-TrueTypeFont-1.0-2.0\n"
							 "%%Creator: Opera\n"));

	verify(!contains(result, "%%BeginResource: font OperaFont4\n"
							 "%!PS-TrueTypeFont-1.0-2.0\n"
							 "%%Creator: Opera\n"));

	verify(!contains(result, "%%+ font OperaFont1\n"));
	verify(!contains(result, "%%+ font OperaFont2\n"));
	verify(!contains(result, "%%+ font OperaFont3\n"));
	verify(!contains(result, "%%+ font OperaFont4\n"));
}
finally
{
	if (font)
		g_font_cache->ReleaseFont(font);
}
