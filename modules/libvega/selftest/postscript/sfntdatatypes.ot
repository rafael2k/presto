/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*-
**
** Copyright (C) 1995-2009 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "libvega.postscript.sfntdatatypes";

require VEGA_POSTSCRIPT_PRINTING;

include "modules/libvega/src/postscript/sfntdatatypes.h";
include "modules/display/sfnt_base.h";

test("fixed data type")
{
	UINT32 source = op_htonl(0x0f0ff0f0);

	SFNTDataTypes::Fixed fixed = SFNTDataTypes::getFixed(reinterpret_cast<UINT8*>(&source));

	verify(fixed.integer == 0x0f0f);
	verify(fixed.fraction == 0xf0f0);
}


test("checksum calculator: one UINT8")
{
	SFNTChecksumAdder checksum;

	checksum.addUINT8(255);
	verify(checksum.getChecksum() == 0xff000000);
}


test("checksum calculator: two UINT8")
{
	SFNTChecksumAdder checksum;

	checksum.addUINT8(0x11);
	checksum.addUINT8(0x22);
	verify(checksum.getChecksum() == 0x11220000);
}


test("checksum calculator: three UINT8")
{
	SFNTChecksumAdder checksum;

	checksum.addUINT8(0x11);
	checksum.addUINT8(0x22);
	checksum.addUINT8(0x33);
	verify(checksum.getChecksum() == 0x11223300);
}


test("checksum calculator: four UINT8")
{
	SFNTChecksumAdder checksum;

	checksum.addUINT8(0x11);
	checksum.addUINT8(0x22);
	checksum.addUINT8(0x33);
	checksum.addUINT8(0x44);
	verify(checksum.getChecksum() == 0x11223344);
}


test("checksum calculator: one UINT16")
{
	SFNTChecksumAdder checksum;

	checksum.addUINT16(0x1234);
	verify(checksum.getChecksum() == 0x12340000);
}


test("checksum calculator: two UINT16")
{
	SFNTChecksumAdder checksum;

	checksum.addUINT16(0x1234);
	checksum.addUINT16(0x5678);
	verify(checksum.getChecksum() == 0x12345678);
}


test("checksum calculator: UINT8, UINT8, UINT16")
{
	SFNTChecksumAdder checksum;

	checksum.addUINT8(0x12);
	checksum.addUINT8(0x34);
	checksum.addUINT16(0x5678);
	verify(checksum.getChecksum() == 0x12345678);
}


test("checksum calculator: UINT8, UINT16, UINT8")
{
	SFNTChecksumAdder checksum;

	checksum.addUINT8(0x12);
	checksum.addUINT16(0x3456);
	checksum.addUINT8(0x78);
	verify(checksum.getChecksum() == 0x12345678);
}


test("checksum calculator: UINT32")
{
	SFNTChecksumAdder checksum;

	checksum.addUINT32(0x12345678);
	verify(checksum.getChecksum() == 0x12345678);
}


test("checksum calculator: data block")
{
	SFNTChecksumAdder checksum;

	UINT8* data = OP_NEWA(UINT8, 16);
	verify(data);

	UINT8* pos = data;
	for (UINT8 i=0; i < 16; i++)
		*pos++ = i;

	checksum.addData(data, 16);
	verify(checksum.getChecksum() == 0x181c2024);
}
finally
{
	OP_DELETEA(data);
}
