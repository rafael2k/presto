/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style: "stroustrup"; -*-
**
** Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "libvega.postscript.postscriptcommandbuffer";

require VEGA_POSTSCRIPT_PRINTING;

include "modules/libvega/src/postscript/postscriptcommandbuffer.h";
include "modules/util/opfile/opmemfile.h";

constant BUFFER_SIZE = 1024*1024;

global
{
	class PSBufferHolder
	{
	public:
		PSBufferHolder()
		{
			const size_t BufferSize = BUFFER_SIZE;
			output_data = OP_NEWA(unsigned char, BufferSize);
			if(!output_data)
				return;

			memfile = OpMemFile::Create(output_data, BufferSize, TRUE);
			if(!memfile)
			{
				OP_DELETEA(output_data);
				return;
			}

			ps_buffer.Init(*memfile);
		}

		~PSBufferHolder()
		{
			OP_DELETE(memfile);
		}

		unsigned char* output_data;
		OpFileDescriptor* memfile;
		PostScriptCommandBuffer ps_buffer;
	};
};




subtest CompareResult(PSBufferHolder& holder, const char* expected)
{
	OpFileLength result_len;
	holder.memfile->GetFilePos(result_len);
	const size_t expected_len = op_strlen(expected);
	verify(result_len == (OpFileLength)expected_len);
	verify(!op_strncmp(reinterpret_cast<const char*>(holder.output_data), expected, expected_len));
}


test("adding single command line")
{
	PSBufferHolder ps_buffer_holder;

	ps_buffer_holder.ps_buffer.addCommand("100 100 moveto 200 200 lineto stroke");

	verify(CompareResult(ps_buffer_holder, "100 100 moveto 200 200 lineto stroke\n"));
}


test("adding multiple command lines")
{
	PSBufferHolder ps_buffer_holder;

	ps_buffer_holder.ps_buffer.addCommand("%!PS-Adobe-3.0");
	ps_buffer_holder.ps_buffer.addCommand("10 setlinewidth");
	ps_buffer_holder.ps_buffer.addCommand("100 100 moveto 0 100 rlineto 48 -30 rlineto -40 -30 rlineto stroke");
	ps_buffer_holder.ps_buffer.addCommand("145 150 moveto 0 -45 rlineto 40 -5 rlineto 0 50 rlineto stroke");
	ps_buffer_holder.ps_buffer.addCommand("245 100 moveto -40 0 rlineto 0 45 rlineto 40 0 rlineto 0 -70 rlineto -45 0 rlineto stroke");
	ps_buffer_holder.ps_buffer.addCommand("265 145 moveto 0 -45 rlineto 40 0 rlineto 0 40 rlineto closepath stroke");
	ps_buffer_holder.ps_buffer.addCommand("showpage");

	verify(CompareResult(ps_buffer_holder, "%!PS-Adobe-3.0\n"
						 "10 setlinewidth\n"
						 "100 100 moveto 0 100 rlineto 48 -30 rlineto -40 -30 rlineto stroke\n"
						 "145 150 moveto 0 -45 rlineto 40 -5 rlineto 0 50 rlineto stroke\n"
						 "245 100 moveto -40 0 rlineto 0 45 rlineto 40 0 rlineto 0 -70 rlineto -45 0 rlineto stroke\n"
						 "265 145 moveto 0 -45 rlineto 40 0 rlineto 0 40 rlineto closepath stroke\n"
						 "showpage\n"));
}


test("adding single formatted command line")
{
	PSBufferHolder ps_buffer_holder;

	ps_buffer_holder.ps_buffer.addFormattedCommand("%d %d moveto %d %d lineto stroke", 100, 200, 300, 400);

	verify(CompareResult(ps_buffer_holder, "100 200 moveto 300 400 lineto stroke\n"));
}


test("adding multiple formatted command lines")
{
	PSBufferHolder ps_buffer_holder;

	ps_buffer_holder.ps_buffer.addFormattedCommand("%%!PS-Adobe-3.0");
	ps_buffer_holder.ps_buffer.addFormattedCommand("%d setlinewidth", 10);
	ps_buffer_holder.ps_buffer.addFormattedCommand("%d %d moveto %d %d rlineto %d %d rlineto %d %d rlineto stroke",
												   100, 100, 0, 100, 48, -30, -40, -30);
	ps_buffer_holder.ps_buffer.addFormattedCommand("%d %d moveto %d %d rlineto %d %d rlineto %d %d rlineto stroke",
												   145, 150, 0, -45, 40, -5, 0, 50);
	ps_buffer_holder.ps_buffer.addFormattedCommand("%d %d moveto %d %d rlineto %d %d rlineto %d %d rlineto %d %d rlineto %d %d rlineto stroke",
												   245, 100, -40, 0, 0, 45, 40, 0, 0, -70, -45, 0);
	ps_buffer_holder.ps_buffer.addFormattedCommand("%d %d moveto %d %d rlineto %d %d rlineto %d %d rlineto closepath stroke",
												   265, 145, 0, -45, 40, 0, 0, 40);
	ps_buffer_holder.ps_buffer.addFormattedCommand("showpage");

	verify(CompareResult(ps_buffer_holder, "%!PS-Adobe-3.0\n"
						 "10 setlinewidth\n"
						 "100 100 moveto 0 100 rlineto 48 -30 rlineto -40 -30 rlineto stroke\n"
						 "145 150 moveto 0 -45 rlineto 40 -5 rlineto 0 50 rlineto stroke\n"
						 "245 100 moveto -40 0 rlineto 0 45 rlineto 40 0 rlineto 0 -70 rlineto -45 0 rlineto stroke\n"
						 "265 145 moveto 0 -45 rlineto 40 0 rlineto 0 40 rlineto closepath stroke\n"
						 "showpage\n"));
}


test("writing hexcode from block of data")
{
	PSBufferHolder ps_buffer_holder;

	UINT8 data[256];
	for (int i=0; i < 256; i++)
		data[i] = i;

	ps_buffer_holder.ps_buffer.beginHexCodeBlock();
	ps_buffer_holder.ps_buffer.writeHexCode(data, 256, false);
	ps_buffer_holder.ps_buffer.endHexCodeBlock();

	verify(CompareResult(ps_buffer_holder, "<\n"
						 "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\n"
						 "202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F\n"
						 "404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F\n"
						 "606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F\n"
						 "808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F\n"
						 "A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF\n"
						 "C0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF\n"
						 "E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF\n"
						 "00\n"
						 ">\n"));
}


test("writing hexcode incrementally from UINT8")
{
	PSBufferHolder ps_buffer_holder;

	ps_buffer_holder.ps_buffer.beginHexCodeBlock();
	for (int i=0; i < 256; i++)
	{
		ps_buffer_holder.ps_buffer.writeHexCodeUINT8(static_cast<UINT8>(i));
	}
	ps_buffer_holder.ps_buffer.endHexCodeBlock();

	verify(CompareResult(ps_buffer_holder, "<\n"
						 "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\n"
						 "202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F\n"
						 "404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F\n"
						 "606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F\n"
						 "808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F\n"
						 "A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF\n"
						 "C0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF\n"
						 "E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF\n"
						 "00\n"
						 ">\n"));
}


test("writing hexcode incrementally from UINT16")
{
	PSBufferHolder ps_buffer_holder;

	UINT16 arg = 0;
	ps_buffer_holder.ps_buffer.beginHexCodeBlock();
	for (int i=0; i < 256; i++)
	{
		if (i % 2 == 0)
			arg = i << 8;
		else
		{
			arg |= i;
			ps_buffer_holder.ps_buffer.writeHexCodeUINT16(arg);
		}
	}
	ps_buffer_holder.ps_buffer.endHexCodeBlock();

	verify(CompareResult(ps_buffer_holder, "<\n"
						 "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\n"
						 "202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F\n"
						 "404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F\n"
						 "606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F\n"
						 "808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F\n"
						 "A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF\n"
						 "C0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF\n"
						 "E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF\n"
						 "00\n"
						 ">\n"));
}


test("writing hexcode incrementally from UINT32")
{
	PSBufferHolder ps_buffer_holder;

	UINT32 arg = 0;
	ps_buffer_holder.ps_buffer.beginHexCodeBlock();
	for (int i=0; i < 256; i++)
	{
		if (i % 4 == 0)
			arg = i << 24;
		else if (i % 4 == 1)
			arg |= i << 16;
		else if (i % 4 == 2)
			arg |= i << 8;
		else
		{
			arg |= i;
			ps_buffer_holder.ps_buffer.writeHexCodeUINT32(arg);
		}
	}
	ps_buffer_holder.ps_buffer.endHexCodeBlock();

	verify(CompareResult(ps_buffer_holder, "<\n"
						 "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\n"
						 "202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F\n"
						 "404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F\n"
						 "606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F\n"
						 "808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F\n"
						 "A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF\n"
						 "C0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF\n"
						 "E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF\n"
						 "00\n"
						 ">\n"));
}

