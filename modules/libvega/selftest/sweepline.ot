// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
group "libvega.path.sweepline";

require VEGA_SUPPORT;
require VEGA_3DDEVICE;

include "modules/libvega/src/vegasweepline.h";

global
{
	// there should be one more vertex and x, y coord than number of
	// edges
	void setupLineSegments(VEGASLVertex* verts, VEGASLEdge* edges,
	                       const VEGA_FIX* x, const VEGA_FIX* y,
	                       const size_t numEdgesFirst, const size_t numEdgesSecond)
	{
		OP_ASSERT(numEdgesFirst);
		OP_ASSERT(numEdgesSecond);

		op_memset(verts, 0, (numEdgesFirst+1 + numEdgesSecond+1) * sizeof(*verts));

		verts[0].x = x[0];
		verts[0].y = y[0];
		for (size_t i = 0; i < numEdgesFirst; ++i)
		{
			verts[i+1].x = x[i+1];
			verts[i+1].y = y[i+1];

			edges[i].init(verts+i, verts+i+1);

			verts[i].startOf = edges+i;
			verts[i+1].endOf = edges+i;
		}

		edges += numEdgesFirst;
		verts += numEdgesFirst+1;
		x     += numEdgesFirst+1;
		y     += numEdgesFirst+1;

		verts[0].x = x[0];
		verts[0].y = y[0];
		for (size_t i = 0; i < numEdgesSecond; ++i)
		{
			verts[i+1].x = x[i+1];
			verts[i+1].y = y[i+1];

			edges[i].init(verts+i, verts+i+1);

			verts[i].startOf = edges+i;
			verts[i+1].endOf = edges+i;
		}
	}
}

subtest VerifyAbove(const VEGASLEdge& above, const VEGASLEdge& below)
{
	verify( above.above(below));
	verify(!below.above(above));
}

test("above")
{
	VEGASLVertex verts[24];
	VEGASLEdge   edges[22];

#ifdef _DEBUG
	for (size_t i = 0; i < ARRAY_SIZE(edges); ++i)
		edges[i].idx = i;
#endif // _DEBUG

	// two stretches that share first edge, second stretch is above
	{
		VEGA_FIX x[] = {
			0, 2, 1,
			0, 2, 8
		};
		VEGA_FIX y[] = {
			0, 2, 8,
			0, 2, 3
		};
		setupLineSegments(verts, edges, x, y, 2, 2);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+2;
		verify_success(VerifyAbove(*second, *first));
	}

	// two stretches that share first edge, second stretch is above
	{
		VEGA_FIX x[] = {
			VEGA_FLTTOFIX(64.7520218f), VEGA_FLTTOFIX(65.4921646f), VEGA_FLTTOFIX(139.096527f),
			VEGA_FLTTOFIX(64.7520218f), VEGA_FLTTOFIX(65.4921646f), VEGA_FLTTOFIX(20.9034805f)
		};
		VEGA_FIX y[] = {
			VEGA_FLTTOFIX(28.1758728f), VEGA_FLTTOFIX(14.0531168f), VEGA_FLTTOFIX(95.7990494f),
			VEGA_FLTTOFIX(28.1758728f), VEGA_FLTTOFIX(14.0531168f), VEGA_FLTTOFIX(54.2009583f)
		};
		setupLineSegments(verts, edges, x, y, 2, 2);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+2;
		verify_success(VerifyAbove(*second, *first));
	}

	// tiger 1
	{
		VEGA_FIX x[] = {
			VEGA_FLTTOFIX(1018.309814f), VEGA_FLTTOFIX(1033.429321f),
			VEGA_FLTTOFIX(1033.427734f), VEGA_FLTTOFIX(1033.429321f)};
		VEGA_FIX y[] = {
			VEGA_FLTTOFIX(645.920654f), VEGA_FLTTOFIX(648.245483f),
			VEGA_FLTTOFIX(648.245239f), VEGA_FLTTOFIX(648.245483f),};
		setupLineSegments(verts, edges,  x, y, 1, 1);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+1;
		verify_success(VerifyAbove(*second, *first));
	}

	// disconnected trapered rects 1
	{
		const VEGA_FIX x[] = {
			0, 1, 2, 2, 1, 0,
			0, 2, 2, 2, 1, 0
		};
		const VEGA_FIX y[] = {
			1, 0, 1, 3, 4, 3,
			1, 1, 2, 5, 6, 5
		};
		setupLineSegments(verts, edges, x, y, 5, 5);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+5;

		// first line intersects second, so it is expected that
		// comparisons are different depending on direction
		verify_success(VerifyAbove(second[2], first[2]));
	}

	// stroked outline join
	{
		const VEGA_FIX x[] = {
			1, 0, 1,
			1, 0, 1
		};
		const VEGA_FIX y[] = {
			0, 1, 1,
			1, 1, 2
		};
		setupLineSegments(verts, edges, x, y, 2, 2);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+2;

		verify_success(VerifyAbove(first[1], second[1]));
	}

	// html5 vector test
	{
		const VEGA_FIX x[] = {
			VEGA_FLTTOFIX(103.482231f), VEGA_FLTTOFIX(105.982231f),
			VEGA_FLTTOFIX(105.982231f), VEGA_FLTTOFIX(105.981873f)
		};
		const VEGA_FIX y[] = {
			VEGA_FLTTOFIX(70.7477264f), VEGA_FLTTOFIX(57.6626434f),
			VEGA_FLTTOFIX(57.6626434f), VEGA_FLTTOFIX(57.6645203f)
		};

		setupLineSegments(verts, edges, x, y, 1, 1);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+1;
		verify_success(VerifyAbove(*first, *second));
	}
}

subtest Intersects(const VEGASLEdge& e1, const VEGASLEdge& e2)
{
	const bool r1 = e1.intersects(e2);
	const bool r2 = e2.intersects(e1);
	verify(r1);
	verify(r2);
}

subtest DoesNotIntersect(const VEGASLEdge& e1, const VEGASLEdge& e2)
{
	const bool r1 = e1.intersects(e2);
	const bool r2 = e2.intersects(e1);
	verify(!r1);
	verify(!r2);
}

test("intersects")
{
	VEGASLVertex verts[24];
	VEGASLEdge   edges[22];

#ifdef _DEBUG
	for (size_t i = 0; i < ARRAY_SIZE(edges); ++i)
		edges[i].idx = i;
#endif // _DEBUG

	// x
	{
		const VEGA_FIX x[] = {
			0, 1,
			0, 1
		};
		const VEGA_FIX y[] = {
			0, 1,
			1, 0
		};
		setupLineSegments(verts, edges, x, y, 1, 1);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+1;

		verify_success(Intersects(*first, *second));
	}

	// non-intersecting
	{
		const VEGA_FIX x[] = {
			0, 1,
			0, 1
		};
		const VEGA_FIX y[] = {
			0, 0,
			1, 1
		};
		setupLineSegments(verts, edges, x, y, 1, 1);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+1;

		verify_success(DoesNotIntersect(*first, *second));
	}

	// vertex on line, both neighbours on one side
	{
		const VEGA_FIX x[] = {
			0, 0,
			1, 0, 1
		};
		const VEGA_FIX y[] = {
			0, 2,
			0, 1, 2
		};
		setupLineSegments(verts, edges, x, y, 1, 2);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+1;

		verify_success(DoesNotIntersect(first[0], second[0]));
		verify_success(DoesNotIntersect(first[0], second[1]));
	}

	// vertex on line, one neighbour on each side
	{
		const VEGA_FIX x[] = {
			0, 0,
			1, 0, -1
		};
		const VEGA_FIX y[] = {
			0, 2,
			0, 1, 2
		};
		setupLineSegments(verts, edges, x, y, 1, 2);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+1;

		verify_success(Intersects(first[0], second[0]));
		verify_success(Intersects(first[0], second[1]));
	}

	// vertex on line, no intersection
	{
		const VEGA_FIX x[] = {
			1, 1, 0,
			2, 1, 1, 0
		};
		const VEGA_FIX y[] = {
			3, 1, 1,
			3, 2, 0, 0
		};
		setupLineSegments(verts, edges, x, y, 2, 3);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+2;

		verify_success(DoesNotIntersect(first[0], second[0]));
		verify_success(DoesNotIntersect(first[0], second[1]));
	}

	// vertex on line, intersecion
	{
		const VEGA_FIX x[] = {
			1, 1, 0,
			2, 1, 1, 0
		};
		const VEGA_FIX y[] = {
			3, 0, 0,
			3, 2, 1, 1
		};
		setupLineSegments(verts, edges, x, y, 2, 3);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+2;

		verify_success(Intersects(first[0], second[0]));
		verify_success(Intersects(first[0], second[2]));
	}

	// identical vertices, no intersection - ><
	{
		const VEGA_FIX x[] = {
			0, 1, 0,
			2, 1, 2
		};
		const VEGA_FIX y[] = {
			0, 1, 2,
			0, 1, 2
		};
		setupLineSegments(verts, edges, x, y, 2, 2);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+2;

		verify_success(DoesNotIntersect(first[0], second[0]));
		verify_success(DoesNotIntersect(first[1], second[0]));
		verify_success(DoesNotIntersect(first[0], second[1]));
		verify_success(DoesNotIntersect(first[1], second[1]));
	}

	// identical vertices, intersection
	{
		const VEGA_FIX x[] = {
			1, 1, 0,
			0, 1, 2
		};
		const VEGA_FIX y[] = {
			0, 1, 2,
			1, 1, 2
		};

		setupLineSegments(verts, edges, x, y, 2, 2);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+2;

		verify_success(Intersects(first[0], second[0]));
		verify_success(Intersects(first[1], second[0]));
		verify_success(Intersects(first[0], second[1]));
		verify_success(Intersects(first[1], second[1]));
	}

	// two identical vertices, no intersection
	{
		const VEGA_FIX x[] = {
			1, 0, 0, 1,
			1, 0, 0, 1
		};
		const VEGA_FIX y[] = {
			0, 1, 2, 3,
			1, 1, 2, 2
		};

		setupLineSegments(verts, edges, x, y, 3, 3);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+3;

		verify_success(DoesNotIntersect(first[0], second[0]));
		verify_success(DoesNotIntersect(first[0], second[1]));
		verify_success(DoesNotIntersect(first[2], second[1]));
		verify_success(DoesNotIntersect(first[2], second[2]));
	}

	// two identical vertices, intersection
	{
		const VEGA_FIX x[] = {
			1, 0, 0, 1,
			1, 0, 0, 1
		};
		const VEGA_FIX y[] = {
			0, 1, 3, 2,
			1, 1, 3, 3
		};

		setupLineSegments(verts, edges, x, y, 3, 3);
		VEGASLEdge* first  = edges;
		VEGASLEdge* second = edges+3;

		verify_success(Intersects(first[2], second[1]));
		verify_success(Intersects(first[2], second[2]));
	}
}
