/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4; coding: iso-8859-1 -*-
 *
 * Copyright (C) 2002-2012 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "encodings.utility.opstring";

include "modules/encodings/decoders/utf8-decoder.h";
include "modules/encodings/encoders/utf8-encoder.h";
include "modules/encodings/utility/opstring-encodings.h";

test("SetFromEncodingL non complete string")
{
	UTF8toUTF16Converter dec;
	OpString str;
	OP_STATUS ret;

	TRAP(ret, SetFromEncodingL(&str, &dec, "\364", 1));
	verify(OpStatus::IsSuccess(ret));
	verify_string(str, UNI_L(""));

}

test("SetFromEncodingL")
{
	UTF8toUTF16Converter dec;
	OpString str;
	OP_STATUS ret;

	TRAP(ret, SetFromEncodingL(&str, &dec, "foo", 3));
	verify(OpStatus::IsSuccess(ret));
	verify_string(str, UNI_L("foo"));
}

test("SetToEncodingL checking buffer grow")
{
	UTF16toUTF8Converter conv;
	OpString8 str;
	OP_STATUS ret;

	int wbsize = OPSTRING_ENCODE_WORKBUFFER_SIZE;
	uni_char *text_to_be_converted = OP_NEWA(uni_char, 2 * wbsize + 1);

	verify(text_to_be_converted != NULL);

	for (int i = 0; i < wbsize; ++i)
	{
		text_to_be_converted[i] = 'a'; // "a" - 1 byte in UTF-8
		text_to_be_converted[i + wbsize] = 0x00E4; // "ä" - 2 bytes in UTF-8
	}

	text_to_be_converted[2 * wbsize] = 0;

	int dest_capacity = wbsize * 1 + wbsize * 2 + 1;

	TRAP(ret, SetToEncodingL(&str, &conv, text_to_be_converted));
	verify(OpStatus::IsSuccess(ret));
	verify((str.Capacity() >= dest_capacity));

	for (int i = 0; i < wbsize; ++i)
	{
		text_to_be_converted[i] = 'a'; // "a" - 1 byte in UTF-8
		text_to_be_converted[i + wbsize] = 0xFFE4; // "|" - 3-bytes in UTF-8
	}

	text_to_be_converted[2 * wbsize] = 0;

	dest_capacity = wbsize * 1 + wbsize * 3 + 1;

	TRAP(ret, SetToEncodingL(&str, &conv, text_to_be_converted));
	verify(OpStatus::IsSuccess(ret));
	verify((str.Capacity() >= dest_capacity));

	for (int i = 0; i < 2 * wbsize; ++i)
	{
		if (i < wbsize / 2 || i > 3 * (2 * wbsize) /4)
			text_to_be_converted[i] = 'a'; // "a" - 1 byte in UTF-8
		else
			text_to_be_converted[i] = 0x00E4; // "ä" - 2 bytes in UTF-8
	}

	text_to_be_converted[2 * wbsize] = 0;

	dest_capacity = wbsize * 1 + wbsize * 2 + 1;

	TRAP(ret, SetToEncodingL(&str, &conv, text_to_be_converted));
	verify(OpStatus::IsSuccess(ret));
	verify((str.Capacity() >= dest_capacity));

	for (int i = 0; i < 2 * wbsize; ++i)
	{
		if (i < wbsize / 2 || i > 3 * (2 * wbsize) /4)
			text_to_be_converted[i] = 'a'; // "a" - 1 byte in UTF-8
		else
			text_to_be_converted[i] = 0xFFE4; // "|" - 3-bytes in UTF-8
	}

	text_to_be_converted[2 * wbsize] = 0;

	dest_capacity = wbsize * 1 + wbsize * 3 + 1;

	TRAP(ret, SetToEncodingL(&str, &conv, text_to_be_converted));
	verify(OpStatus::IsSuccess(ret));
	verify((str.Capacity() >= dest_capacity));
}
finally
{
	if (text_to_be_converted)
		OP_DELETEA(text_to_be_converted);
}

test("DSK-334776: SetToEncodingL with unpaired surrogate")
{
	OpString8 test;
	TRAPD(rc, SetToEncodingL(&test, "utf-8", UNI_L("\xD9EF"), 1));
	verify_success(rc);
	verify(test.IsEmpty());
}
