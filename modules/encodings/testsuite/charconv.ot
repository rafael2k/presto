/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2004-2012 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

group "encodings.charconverter";
require initialization;

include "modules/encodings/testsuite/charconv/chartest.h";
include "modules/encodings/testsuite/charconv/utility.h";
include "modules/encodings/encoders/iso-8859-1-encoder.h";
include "modules/encodings/encoders/utf8-encoder.h";
include "modules/encodings/decoders/iso-8859-1-decoder.h";
include "modules/encodings/decoders/utf8-decoder.h";

// -- Tests --------------------------------------------------------------

test("Setting up test environment")
{
	g_opera->encodings_module.buffer = OP_NEWA(char, ENC_TESTBUF_SIZE);
	verify_not_oom(g_opera->encodings_module.buffer);
	g_opera->encodings_module.bufferback = OP_NEWA(char, ENC_TESTBUF_SIZE);
	verify_not_oom(g_opera->encodings_module.bufferback);
}

// These tests duplicate the stand-alone test suite by using the same code
// and doing some macro magic to get it to work with the selftest code.
//
// The reason why this is done is because the external test suite is more
// configurable, so it can be tested in more configurations, whereas the
// selftest suite is more portable and can be tested on all platforms we
// support.

table standard
{
	{	"iso-8859-1",	encodings_test_iso_8859_1	},
	{	"ascii",		encodings_test_ascii		},
	{	"utf-16",		encodings_test_utf16		},
	{	"utf-8",		encodings_test_utf8			},
	{	"iso-8859-7:2003", encodings_test_iso_8859_7_2003 },
	{	"iso-8859-2",	encodings_test_iso_8859_2		},
	{	"iso-8859-3",	encodings_test_iso_8859_3		},
	{	"iso-8859-4",	encodings_test_iso_8859_4		},
	{	"iso-8859-5",	encodings_test_iso_8859_5		},
	{	"iso-8859-6",	encodings_test_iso_8859_6		},
	{	"iso-8859-7",	encodings_test_iso_8859_7		},
	{	"iso-8859-8",	encodings_test_iso_8859_8		},
//	{	"iso-8859-9",	encodings_test_iso_8859_9		}, // windows-1254 is used instead
	{	"iso-8859-10",	encodings_test_iso_8859_10		},
	{	"iso-8859-11",	encodings_test_iso_8859_11		},
	{	"iso-8859-13",	encodings_test_iso_8859_13		},
	{	"iso-8859-14",	encodings_test_iso_8859_14		},
	{	"iso-8859-15",	encodings_test_iso_8859_15		},
	{	"iso-8859-16",	encodings_test_iso_8859_16		},
	{	"ibm866",		encodings_test_ibm866			},
	{	"windows-1250",	encodings_test_windows_1250		},
	{	"windows-1251",	encodings_test_windows_1251		},
	{	"windows-1252",	encodings_test_windows_1252		},
	{	"windows-1253",	encodings_test_windows_1253		},
	{	"windows-1254",	encodings_test_windows_1254		},
	{	"windows-1255",	encodings_test_windows_1255		},
	{	"windows-1256",	encodings_test_windows_1256		},
	{	"windows-1257",	encodings_test_windows_1257		},
	{	"windows-1258",	encodings_test_windows_1258		},
	{	"macintosh",	encodings_test_mac_roman		},
	{	"x-mac-ce",		encodings_test_mac_ce			},
	{	"x-mac-cyrillic", encodings_test_mac_cyrillic	},
	{	"x-mac-greek",	encodings_test_mac_greek		},
	{	"x-mac-turkish", encodings_test_mac_turkish		},
	{	"viscii",		encodings_test_viscii			},
	{	"koi8-r",		encodings_test_koi8r			},
	{	"koi8-u",		encodings_test_koi8u			},
};

foreach (name, driver) from standard
{
	test("Standard: " name)
		require success "Setting up test environment";
	{
		verify(driver());
	}
}

table utf7
{
	{	"utf-7",		encodings_test_utf7			},
}

foreach (name, driver) from utf7
{
	test("UTF-7: " name)
		require ENCODINGS_HAVE_UTF7;
		require success "Setting up test environment";
	{
		verify(driver());
	}
}

table japanese
{
	{	"iso-2022-jp",	encodings_test_iso2022jp	},
	{	"iso-2022-jp-1", encodings_test_iso2022jp1	},
	{	"shift-jis",	encodings_test_shiftjis		},
	{	"euc-jp",		encodings_test_eucjp		},
}

foreach (name, driver) from japanese
{
	test("Japanese: " name)
		require ENCODINGS_HAVE_JAPANESE;
		require success "Setting up test environment";
	{
		verify(driver());
	}
}

table chinese
{
	{	"big5",			encodings_test_big5			},
	{	"big5:2003",	encodings_test_big5_2003	},
	{	"big5-hkscs",	encodings_test_big5hkscs	},
	{	"big5-hkscs:2004", encodings_test_big5hkscs_2004 },
	{	"big5-hkscs:2008", encodings_test_big5hkscs_2008 },
	{	"gbk",			encodings_test_gbk			},
	{	"gb-18030",		encodings_test_gb18030		},
	{	"HZ, aka hz-gb-2312", encodings_test_hz		},
	{	"euc-tw",		encodings_test_euctw		},
	{	"iso-2022-cn",	encodings_test_iso2022cn	},
}

foreach (name, driver) from chinese
{
	test("Chinese: " name)
		require ENCODINGS_HAVE_CHINESE;
		require success "Setting up test environment";
	{
		verify(driver());
	}
}

table korean
{
	{	"euc-kr",		encodings_test_euckr		},
	{	"iso-2022-kr",	encodings_test_iso2022kr	},
}

foreach (name, driver) from korean
{
	test("Korean: " name)
		require ENCODINGS_HAVE_KOREAN;
		require success "Setting up test environment";
	{
		verify(driver());
	}
}

test("Standard: ISOLatin1toUTF16Converter")
	require success "Setting up test environment";
{
	// The factories usually selects the windows-1252 decoder for
	// iso-8859-1, so test it explicitly.
	ISOLatin1toUTF16Converter *fw = OP_NEW(ISOLatin1toUTF16Converter, ());
	UTF16toISOLatin1Converter *rev= OP_NEW(UTF16toISOLatin1Converter, ());
	verify_not_oom(fw);
	verify_not_oom(rev);
	verify_success( fw->Construct());
	verify_success(rev->Construct());

	int rc1 =
		encodings_perform_test(fw, rev,
		                       "abcdef\xE6\xF8\xE5", 10,
		                       UNI_L("abcdef\x00E6\x00F8\x00E5"), 20);
	fw = NULL; rev = NULL; /* Deleted by encodings_perform_test() */
	verify(rc1);
}
finally
{
	OP_DELETE(fw);
	OP_DELETE(rev);
}

test("Standard: ISOLatin1toUTF16Converter with x-user-defined")
	require success "Setting up test environment";
{
	ISOLatin1toUTF16Converter *fw = OP_NEW(ISOLatin1toUTF16Converter, (TRUE));
	UTF16toISOLatin1Converter *rev= OP_NEW(UTF16toISOLatin1Converter, (FALSE, TRUE));
	verify_not_oom(fw);
	verify_not_oom(rev);
	verify_success( fw->Construct());
	verify_success(rev->Construct());

	int rc1 =
		encodings_perform_test(fw, rev,
		                       "abcdef\xE6\xF8\xE5", 10,
		                       UNI_L("abcdef\x00E6\x00F8\x00E5"), 20);
	fw = NULL; rev = NULL; /* Deleted by encodings_perform_test() */
	verify(rc1);
}
finally
{
	OP_DELETE(fw);
	OP_DELETE(rev);
}

// -- Further API tests --------------------------------------------------

test("UTF-8 encoder: count bytes needed")
{
	UTF16toUTF8Converter encoder;
	verify_success(encoder.Construct());
	verify(encoder.BytesNeeded(UNI_L(" "),            2) == 1);
	verify(encoder.BytesNeeded(UNI_L("\x007F"),       2) == 1);			// U+007F
	verify(encoder.BytesNeeded(UNI_L("\x00A0"),       2) == 2);			// U+00A0 (\x0080 expands to the Euro symbol in VC6)
	verify(encoder.BytesNeeded(UNI_L("\x07FF"),       2) == 2);			// U+07FF
	verify(encoder.BytesNeeded(UNI_L("\x0800"),       2) == 3);			// U+0800
	verify(encoder.BytesNeeded(UNI_L("\xFFFF"),       2) == 3);			// U+FFFF
	verify(encoder.BytesNeeded(UNI_L("\xD800\xDC00"), 4) == 4);			// U+10000 (surrogates)
	verify(encoder.BytesNeeded(UNI_L("\xDBFF\xDFFF"), 4) == 4);			// U+10FFFF (surrogates)
	verify(encoder.BytesNeeded(UNI_L("r\xe4ksm\xf6rg\xe5s"), 20) == 13);

	// U+10000 (surrogates)
	verify(encoder.BytesNeeded(UNI_L("ab\xD800"), 6) == 2);					// Last surrogate is incomplete, it will be included in next call
	verify(encoder.BytesNeeded(UNI_L("\xDC00"), 2) == 4);

	// U+10FFFF (surrogates)
	verify(encoder.BytesNeeded(UNI_L("cd\xDBFF"), 6) == 2);					// Last surrogate is incomplete, it will be included in next call
	verify(encoder.BytesNeeded(UNI_L("\xDFFF"), 2) == 4);
}

test("UTF-8 decoder: count bytes needed")
{
	UTF8toUTF16Converter decoder;
	verify_success(decoder.Construct());
	verify(decoder.Convert(" ", 1, NULL, 255, NULL) == 2);
	verify(decoder.Convert("\x7F", 1, NULL, 255, NULL) == 2);				// U+007F
	verify(decoder.Convert("\xC2\x80", 2, NULL, 255, NULL) == 2);			// U+0080
	verify(decoder.Convert("\xDF\xBF", 2, NULL, 255, NULL) == 2);			// U+07FF
	verify(decoder.Convert("\xE0\xA0\x80", 3, NULL, 255, NULL) == 2);		// U+0800
	verify(decoder.Convert("\xEF\xBF\xBF", 3, NULL, 255, NULL) == 2);		// U+FFFF
	verify(decoder.Convert("\xF0\x90\x80\x80", 4, NULL, 255, NULL) == 4);	// U+10000 (surrogates)
	verify(decoder.Convert("\xF4\x8F\xBF\xBF", 4, NULL, 255, NULL) == 4);	// U+10FFFF (surrogates)

	verify(decoder.Convert("r\xc3\xa4ksm\xc3\xb6rg\xc3\xa5s", 13, NULL, 255, NULL) == 20);
}

// -- Global cleanup -----------------------------------------------------

exit
{
	OP_DELETEA(g_opera->encodings_module.buffer);
	g_opera->encodings_module.buffer = NULL;

	OP_DELETEA(g_opera->encodings_module.bufferback);
	g_opera->encodings_module.bufferback = NULL;
}
