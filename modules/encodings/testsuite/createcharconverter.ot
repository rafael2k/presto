/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2003-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

group "encodings.utility.createcharconverter";
require initialization; // Needs CharsetManager::GetCanonicalCharsetName, which needs memman

include "modules/encodings/charconverter.h";
include "modules/encodings/decoders/inputconverter.h";
include "modules/encodings/encoders/outputconverter.h";
include "modules/encodings/utility/charsetnames.h";

// These tests do *NOT* test that the created converters actually work,
// there is a perfectly good test suite for that elsewhere.

// -- InputConverter::CreateCharConverter --------------------------------

test("Creating input converter for \"iso-8859-1\"")
{
	InputConverter *converter = NULL;
	verify_success(InputConverter::CreateCharConverter("iso-8859-1", &converter));
	verify(converter != NULL);
	verify(op_strcmp(converter->GetCharacterSet(), "windows-1252") == 0 ||
	       op_strcmp(converter->GetCharacterSet(), "iso-8859-1") == 0);
}
finally
{
	OP_DELETE(converter);
}

test("Creating input converter for \"utf-8\"")
	leakcheck;
{
	InputConverter *converter = NULL;
	verify_success(InputConverter::CreateCharConverter("utf-8", &converter));
	verify(converter != NULL);
	verify_string(converter->GetCharacterSet(), "utf-8");
}
finally
{
	OP_DELETE(converter);
}

test("Creating input converter for  \"shift_jis\"")
	require ENCODINGS_HAVE_TABLE_DRIVEN;
	require ENCODINGS_HAVE_JAPANESE;
{
	InputConverter *converter = NULL;
	verify_success(InputConverter::CreateCharConverter("shift_jis", &converter));
	verify(converter != NULL);
	verify_string(converter->GetCharacterSet(), "shift_jis");
}
finally
{
	OP_DELETE(converter);
}

test("Bug#193696: Creating input converter for bogus encoding") // aka DSK-162164
	leakcheck;
{
	InputConverter *converter = reinterpret_cast<InputConverter *>(0xDEADBEEF);
	verify_status(InputConverter::CreateCharConverter("x-foo-bogus", &converter), OpStatus::ERR_OUT_OF_RANGE);
	verify(converter == NULL);
}

test("Creating input converter using MIB")
	require ENCODINGS_HAVE_MIB_SUPPORT;
	leakcheck;
{
	InputConverter *converter = NULL;
	verify_success(InputConverter::CreateCharConverter(106, &converter));
	verify(converter != NULL);
	verify_string(converter->GetCharacterSet(), "utf-8");
}
finally
{
	OP_DELETE(converter);
}

test("Creating input converter using charset ID")
	leakcheck;
{
	InputConverter *converter = NULL;
	unsigned short charsetID = 0;
	verify_success(g_charsetManager->GetCharsetID("CP819", &charsetID)); // cp819 => iso-8859-1
	verify(charsetID > 0);
	g_charsetManager->IncrementCharsetIDReference(charsetID);
	verify_success(InputConverter::CreateCharConverterFromID(charsetID, &converter));
	g_charsetManager->DecrementCharsetIDReference(charsetID);
	verify(converter != NULL);
	verify(op_strcmp(converter->GetCharacterSet(), "windows-1252") == 0 ||
	       op_strcmp(converter->GetCharacterSet(), "iso-8859-1") == 0);
}
finally
{
	OP_DELETE(converter);
}

// -- OutputConverter::CreateCharConverter -------------------------------

test("Creating output converter for \"iso-8859-1\"")
{
	OutputConverter *converter = NULL;
	verify_success(OutputConverter::CreateCharConverter("iso-8859-1", &converter));
	verify(converter != NULL);
	verify_string(converter->GetDestinationCharacterSet(), "iso-8859-1");
}
finally
{
	OP_DELETE(converter);
}

test("Creating output converter for \"utf-8\"")
	leakcheck;
{
	OutputConverter *converter = NULL;
	verify_success(OutputConverter::CreateCharConverter("utf-8", &converter));
	verify(converter != NULL);
	verify_string(converter->GetDestinationCharacterSet(), "utf-8");
}
finally
{
	OP_DELETE(converter);
}

test("Creating output converter for \"utf-16\"")
	leakcheck;
{
	/* Default is to return a UTF-8 converter */
	OutputConverter *converter1 = NULL;
	OutputConverter *converter2 = NULL;

	verify_success(OutputConverter::CreateCharConverter("utf-16", &converter1));
	verify(converter1 != NULL);
	verify_string(converter1->GetDestinationCharacterSet(), "utf-8");

	verify_success(OutputConverter::CreateCharConverter("utf-16", &converter2, FALSE, TRUE));
	verify(converter2 != NULL);
	verify_string(converter2->GetDestinationCharacterSet(), "utf-16");
}
finally
{
	OP_DELETE(converter1);
	OP_DELETE(converter2);
}

test("Creating output converter for \"utf-16le\"")
	leakcheck;
{
	/* Default is to return a UTF-8 converter */
	OutputConverter *converter1 = NULL;
	OutputConverter *converter2 = NULL;

	verify_success(OutputConverter::CreateCharConverter("utf-16le", &converter1));
	verify(converter1 != NULL);
	verify_string(converter1->GetDestinationCharacterSet(), "utf-8");

	verify_success(OutputConverter::CreateCharConverter("utf-16le", &converter2, FALSE, TRUE));
	verify(converter2 != NULL);
	verify_string(converter2->GetDestinationCharacterSet(), "utf-16");
}
finally
{
	OP_DELETE(converter1);
	OP_DELETE(converter2);
}

test("Creating output converter for \"shift_jis\"")
	require ENCODINGS_HAVE_TABLE_DRIVEN;
	require ENCODINGS_HAVE_JAPANESE;
{
	OutputConverter *converter = NULL;
	verify_success(OutputConverter::CreateCharConverter("shift_jis", &converter));
	verify(converter != NULL);
	verify_string(converter->GetDestinationCharacterSet(), "shift_jis");
}
finally
{
	OP_DELETE(converter);
}

test("Bug#193696: Creating output converter for bogus encoding") // aka DSK-162164
	leakcheck;
{
	OutputConverter *converter = reinterpret_cast<OutputConverter *>(0xDEADBEEF);
	verify_status(OutputConverter::CreateCharConverter("x-foo-bogus", &converter), OpStatus::ERR_OUT_OF_RANGE);
	verify(converter == NULL);
}

test("Creating output converter using uni_char API")
	leakcheck;
{
	OutputConverter *converter = NULL;
	verify_success(OutputConverter::CreateCharConverter(UNI_L("utf-8"), &converter));
	verify(converter != NULL);
	verify_string(converter->GetDestinationCharacterSet(), "utf-8");
}
finally
{
	OP_DELETE(converter);
}

test("Creating output converter using charset ID")
	leakcheck;
{
	OutputConverter *converter = NULL;
	unsigned short charsetID = 0;
	verify_success(g_charsetManager->GetCharsetID("CP819", &charsetID)); // cp819 => iso-8859-1
	verify(charsetID > 0);
	g_charsetManager->IncrementCharsetIDReference(charsetID);
	verify_success(OutputConverter::CreateCharConverterFromID(charsetID, &converter));
	g_charsetManager->DecrementCharsetIDReference(charsetID);
	verify(converter != NULL);
	verify_string(converter->GetDestinationCharacterSet(), "iso-8859-1");
}
finally
{
	OP_DELETE(converter);
}
