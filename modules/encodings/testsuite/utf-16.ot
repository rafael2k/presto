/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2012 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

group "encodings.decoders.utf16";
require initialization;

include "modules/encodings/charconverter.h";
include "modules/encodings/decoders/inputconverter.h";
include "modules/encodings/decoders/utf16-decoder.h";

global
{
	// Simple Basic Latin-only string
	const uni_char *utf16html =
		UNI_L("\xFEFF<HTML><HEAD><TITLE>Test</TITLE></HEAD></HTML>");
	const uni_char *utf16html_nobom = utf16html + 1;
	// More complicated Chinese-only string
	const uni_char *utf16text =
		UNI_L("\xFEFF\x6587\x4ECB\x7ECD\x7684\x662F\x7684\x662F\x540D\x53EB\x7684\x7DB2\x9801\x700F\x89BD\x5668\x3002");
	const uni_char *utf16text_nobom = utf16text + 1;

	// These buffers must be able to hold the above strings
	uni_char buf1[64]; /* ARRAY OK 2012-04-24 peter */
	uni_char buf2[64]; /* ARRAY OK 2012-04-24 peter */

	void flipendian(const uni_char *input, uni_char *output, size_t len)
	{
		const char *in = reinterpret_cast<const char *>(input);
		char *out = reinterpret_cast<char *>(output);
		for (size_t i = 0; i < len; i += 2)
		{
			out[i] = in[i + 1];
			out[i + 1] = in[i];
		}
	}

	const uni_char *little(const uni_char *input)
	{
#ifdef OPERA_BIG_ENDIAN
		flipendian(input, buf1, UNICODE_SIZE(uni_strlen(input) + 1));
		return buf1;
#else
		return input;
#endif
	}

	const uni_char *big(const uni_char *input)
	{
#ifdef OPERA_BIG_ENDIAN
		return input;
#else
		flipendian(input, buf1, UNICODE_SIZE(uni_strlen(input) + 1));
		return buf1;
#endif
	}
}

subtest checkutf16(const uni_char *text, int len, const uni_char *expected, int expected_len)
{
	UTF16toUTF16Converter conv;
	verify_success(conv.Construct());
	int read = -1;
	int written = conv.Convert(text, UNICODE_SIZE(len), buf2, sizeof buf2, &read);
	verify(read == UNICODE_SIZE(len));
	verify(written == UNICODE_SIZE(expected_len));

	buf2[expected_len] = 0;
	verify_string(buf2, expected);
}

test("UTF-16LE with BOM: Basic Latin")
{
	verify(checkutf16(little(utf16html), uni_strlen(utf16html), utf16html_nobom, uni_strlen(utf16html_nobom)));
}

test("UTF-16LE with BOM: Chinese")
{
	verify(checkutf16(little(utf16text), uni_strlen(utf16text), utf16text_nobom, uni_strlen(utf16text_nobom)));
}

test("UTF-16BE with BOM: Basic Latin")
{
	verify(checkutf16(big(utf16html), uni_strlen(utf16html), utf16html_nobom, uni_strlen(utf16html_nobom)));
}

test("UTF-16BE with BOM: Chinese")
{
	verify(checkutf16(big(utf16text), uni_strlen(utf16text), utf16text_nobom, uni_strlen(utf16text_nobom)));
}

test("UTF-16LE without BOM: Basic Latin")
{
	verify(checkutf16(little(utf16html_nobom), uni_strlen(utf16html_nobom), utf16html_nobom, uni_strlen(utf16html_nobom)));
}

test("UTF-16LE without BOM: Chinese")
{
	verify(checkutf16(little(utf16text_nobom), uni_strlen(utf16text_nobom), utf16text_nobom, uni_strlen(utf16text_nobom)));
}

test("UTF-16BE without BOM: Basic Latin")
{
	verify(checkutf16(big(utf16html_nobom), uni_strlen(utf16html_nobom), utf16html_nobom, uni_strlen(utf16html_nobom)));
}

test("UTF-16BE without BOM: Chinese")
	fails;
{
	/* CORE-43500: This test is expected to fail as the input endian is not
	 * easily distinguished, and the HTML5 specification says we should
	 * prefer to interpret the input as little-endian when we cannot
	 * determine which one to use (this is contrary to RFC 2781, see
	 * comments in UTF16toUTF16Converter::Convert() for more details).
	 *
	 * This duplicates the code in checkutf16(), which we cannot call
	 * because the "fails" modifier doesn't propagate down to it.
	 */
	const uni_char *text = big(utf16text_nobom);
	const int len = uni_strlen(utf16text_nobom);
	const uni_char *expected = utf16text_nobom;
	const int expected_len = uni_strlen(utf16text_nobom);

	UTF16toUTF16Converter conv;
	verify_success(conv.Construct());
	int read = -1;
	int written = conv.Convert(text, UNICODE_SIZE(len), buf2, sizeof buf2, &read);
	verify(read == UNICODE_SIZE(len));
	verify(written == UNICODE_SIZE(expected_len));

	buf2[expected_len] = 0;
	verify_string(buf2, expected);
}
