/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2005-2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

group "console.opconsolelistener";
require init;
require OPERA_CONSOLE;

include "modules/console/opconsoleengine.h";
include "modules/console/console_module.h";

// -- Global variables ---------------------------------------------------

global
{
	class SelfTestConsoleListener : public OpConsoleListener
	{
	public:
		SelfTestConsoleListener()
			: m_id((unsigned int) -1)
		{
			g_console->RegisterConsoleListener(this);
		}

		virtual ~SelfTestConsoleListener()
		{
			g_console->UnregisterConsoleListener(this);
		}

		void SetId(unsigned int id)
		{
			m_id = id;
		}

		/* OpConsoleListener */
		virtual OP_STATUS NewConsoleMessage(unsigned int id, const OpConsoleEngine::Message *message)
		{
			if (message->source == OpConsoleEngine::SelfTest &&
			    message->severity == OpConsoleEngine::Verbose &&
				message->window == 4711 &&
			    message->url.Compare("http://example.com/") == 0 &&
			    message->context.Compare("selftest") == 0 &&
			    message->message.Compare("testself") == 0 &&
				id == m_id)
			{
				ST_passed();
			}
			else if (id > m_id) // Ignore messages already in the queue
			{
				ST_failed("NewConsoleMessageL() called incorrectly\n");
			}
			return OpStatus::OK;
		}

	private:
		unsigned int m_id;
	};

	class SelfTestConsoleListener *listener = NULL;
}

setup
{
	listener = OP_NEW(SelfTestConsoleListener, ());
}

// -- Tests --------------------------------------------------------------

test("Callback to listener")
	async;
{
	OpConsoleEngine::Message message(OpConsoleEngine::SelfTest, OpConsoleEngine::Verbose, 4711);
	message.url.Set("http://example.com/");
	message.context.Set("selftest");
	message.message.Set("testself");
	OP_MEMORY_VAR unsigned int created_id = 0;
	TRAPD(rc, created_id = g_console->PostMessageL(&message));
	if (!OpStatus::IsSuccess(rc))
	{
		ST_failed("PostMessageL() returned error\n");
	}
	if (created_id == OpConsoleEngine::MESSAGE_BLOCKED)
	{
		ST_failed("PostMessageL() blocked message\n");
	}
	listener->SetId(created_id);
}

// -- Global cleanup -----------------------------------------------------

exit
{
	OP_DELETE(listener);
}
