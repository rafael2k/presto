/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2006 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Karlsson
*/

group "console.opconsolelogger";
require init;
require OPERA_CONSOLE_LOGFILE;
require undefined HAVE_NO_OPMEMFILE;

include "modules/util/opfile/opmemfile.h";
include "modules/console/opconsoleengine.h";
include "modules/console/opconsolelogger.h";
include "modules/console/opconsolefilter.h";

// -- Global variables ---------------------------------------------------

global
{
	OpMemFile *m1, *m1notowned, *m2;
	OpConsoleLogger *l1, *l2;
	OpConsoleFilter *f1, *f2;
	OpString8 s1, s2;
}

setup
{
	m1 = OpMemFile::Create(NULL, 0);
	m1notowned = m1;
	m2 = OpMemFile::Create(NULL, 0);
	l1 = NULL;
	l2 = NULL;
	f1 = OP_NEW(OpConsoleFilter, (OpConsoleEngine::Verbose));
	f2 = OP_NEW(OpConsoleFilter, (OpConsoleEngine::Verbose));
}

// -- Tests --------------------------------------------------------------

test("Setup")
{
	verify(m1);
	verify(m2);
	verify(f1);
	verify(f2);
}

test("Creating logger")
	require success "Setup";
{
	/* Constructor that assumes ownership */
	l1 = OP_NEW(OpConsoleLogger, ());
	verify(l1);
	l1->Construct(m1, f1);
	m1 = NULL; f1 = NULL;

	/* Constructor that copies */
	l2 = OP_NEW(OpConsoleLogger, ());
	verify(l2);
	TRAPD(rc, l2->ConstructL(m2, f2));
	verify(OpStatus::IsSuccess(rc));
	OP_DELETE(m2);
	m2 = NULL;
	OP_DELETE(f2);
	f2 = NULL;
}

test("Posting message")
	require success "Setup";
{
	/* Write a message */
	OpConsoleEngine::Message msg(OpConsoleEngine::SelfTest, OpConsoleEngine::Verbose);
	verify(OpStatus::IsSuccess(msg.context.Set("SelfTest")));
	verify(OpStatus::IsSuccess(msg.message.Set("TestSelf")));
	TRAPD(rc, g_console->PostMessageL(&msg));
	verify(OpStatus::IsSuccess(rc));
}

test("Checking that log was written")
	require success "Posting message";
{
	OpMemFile *m2local = NULL;

	/* Check contents of the memory files */
	OpFileLength m1len = m1notowned->GetFileLength(), bytes_read;
	verify(OpStatus::IsSuccess(m1notowned->Open(OPFILE_READ)));
	OpString8 s1;
	verify(s1.Reserve(static_cast<int>(m1len + 1)) != NULL);
	s1.DataPtr()[m1len] = 0;
	verify(OpStatus::IsSuccess(m1notowned->Read(s1.DataPtr(), m1len, &bytes_read)));
	verify(m1len == bytes_read);
	verify(OpStatus::IsSuccess(m1notowned->Close()));
	verify(s1.Find("SelfTest") != KNotFound);
	verify(s1.Find("TestSelf") != KNotFound);

	const OpFileDescriptor *m2copy = l2->GetFile();
	verify(m2copy);
	verify(m2copy->Type() == OPMEMFILE);
	m2local = reinterpret_cast<OpMemFile *>(m2copy->CreateCopy());
	verify(m2local);

	OpFileLength m2len = m2local->GetFileLength();
	verify(OpStatus::IsSuccess(m2local->Open(OPFILE_READ)));
	OpString8 s2;
	verify(s2.Reserve(static_cast<int>(m2len + 1)) != NULL);
	s2.DataPtr()[m2len] = 0;
	verify(OpStatus::IsSuccess(m2local->Read(s2.DataPtr(), m2len, &bytes_read)));
	verify(m2len == bytes_read);
	verify(OpStatus::IsSuccess(m2local->Close()));
	verify(s2.Find("SelfTest") != KNotFound);
	verify(s2.Find("TestSelf") != KNotFound);
}
finally
{
	OP_DELETE(m2local);
}

test("Checking consistency")
	require success "Setup";
{
	verify(s1.Compare(s2) == 0);
}

// -- Global cleanup -----------------------------------------------------

exit
{
	OP_DELETE(m1);
	OP_DELETE(m2);
	OP_DELETE(l1);
	OP_DELETE(l2);
	OP_DELETE(f1);
	OP_DELETE(f2);
}
