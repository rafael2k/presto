/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2006-2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

group "console.opconsoleview";
require init;
require CON_UI_GLUE;

include "modules/console/opconsoleengine.h";
include "modules/console/opconsolefilter.h";
include "modules/console/opconsoleview.h";

// -- Global variables ---------------------------------------------------

global
{
	class OpSelftestViewHandler
		: public OpConsoleViewHandler
	{
	public:
		OpSelftestViewHandler()
			: m_ok(FALSE)
		{}

		virtual OP_STATUS PostNewMessage(const OpConsoleEngine::Message *message)
		{
			if (message->source == OpConsoleEngine::SelfTest)
				m_ok = TRUE;
			return OpStatus::OK;
		}

		virtual void BeginUpdate() {};
		virtual void EndUpdate() {};

		BOOL IsOK() { return m_ok; }
		void Reset() { m_ok = FALSE; }

	private:
		BOOL m_ok;
	};

	OpConsoleView *v;
	OpConsoleFilter *f;
	OpSelftestViewHandler *vh;
}

setup
{
	v = NULL;
	f = OP_NEW(OpConsoleFilter, (OpConsoleEngine::Verbose));
	vh = OP_NEW(OpSelftestViewHandler, ());
}

// -- Tests --------------------------------------------------------------

test("Setup")
{
	verify(f);
	verify(vh);
}

test("Setting up view")
	require success "Setup";
{
	v = OP_NEW(OpConsoleView, ());
	verify(v);
	verify(OpStatus::IsSuccess(v->Construct(vh, f)));
}

test("UI collaboration: Sending message")
	require success "Setting up view";
{
	/* Write a message */
	OpConsoleEngine::Message msg(OpConsoleEngine::SelfTest, OpConsoleEngine::Verbose);
	verify(OpStatus::IsSuccess(msg.context.Set("SelfTest")));
	verify(OpStatus::IsSuccess(msg.message.Set("TestSelf")));
	TRAPD(rc, g_console->PostMessageL(&msg));
	verify(OpStatus::IsSuccess(rc));
}

test("UI collaboration: Receiving message")
	require success "UI collaboration: Sending message";
{
	/* Check that it was received */
	verify(vh->IsOK());
}

test("UI collaboration: Requesting messages")
	require success "Setting up view";
	require undefined CON_NO_BACKLOG;
{
	vh->Reset();
	verify(OpStatus::IsSuccess(v->SendAllComponentMessages(f)));
	verify(vh->IsOK());
}

test("Check filter consistency")
	require success "Setting up view";
{
	const OpConsoleFilter *copied_f = v->GetCurrentFilter();
	verify(copied_f);
	verify(copied_f->Get(OpConsoleEngine::SelfTest) == f->Get(OpConsoleEngine::SelfTest));
}

// -- Global cleanup -----------------------------------------------------

exit
{
	OP_DELETE(f);
	OP_DELETE(v);
	OP_DELETE(vh);
}
