/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "layout.boundingbox";

require init;

language C++;

include "modules/layout/box/box.h";
include "modules/layout/box/inline.h";

global
{
	struct TestingRelativeBoundingBox : public RelativeBoundingBox
	{
		TestingRelativeBoundingBox(LayoutCoord l, LayoutCoord t, LayoutCoord r, LayoutCoord b)
			{ left = l; right = r; top = t; bottom = b; }
	};

	Head props_list;
}


subtest bbox_equal(const RelativeBoundingBox& b1, LayoutCoord left, LayoutCoord top, LayoutCoord right, LayoutCoord bottom)
{
	TestingRelativeBoundingBox b2(left, top, right, bottom);
	verify(b1 == b2);
}

test("RelativeBoundingBox union all sides")
{
	RelativeBoundingBox rel_box;
	AbsoluteBoundingBox abs_box;

	verify(rel_box.IsEmpty());

	abs_box.Set(LayoutCoord(-10), LayoutCoord(-20), LayoutCoord(200), LayoutCoord(100));
	rel_box.UnionWith(abs_box, LayoutCoord(50), LayoutCoord(50), FALSE);

	verify(!rel_box.IsEmpty());
	verify(bbox_equal(rel_box, LayoutCoord(10), LayoutCoord(20), LayoutCoord(140), LayoutCoord(30)));
}

test("RelativeBoundingBox union bottom right")
{
	RelativeBoundingBox rel_box;
	AbsoluteBoundingBox abs_box;

	verify(rel_box.IsEmpty());

	abs_box.Set(LayoutCoord(10), LayoutCoord(20), LayoutCoord(200), LayoutCoord(100));
	rel_box.UnionWith(abs_box, LayoutCoord(50), LayoutCoord(50), FALSE);

	verify(!rel_box.IsEmpty());
	verify(bbox_equal(rel_box, LayoutCoord(0), LayoutCoord(0), LayoutCoord(160), LayoutCoord(70)));
}

test("RelativeBoundingBox union disjoint")
{
	RelativeBoundingBox rel_box;
	AbsoluteBoundingBox abs_box;

	verify(rel_box.IsEmpty());

	abs_box.Set(LayoutCoord(-10), LayoutCoord(-20), LayoutCoord(1), LayoutCoord(1));
	rel_box.UnionWith(abs_box, LayoutCoord(50), LayoutCoord(50), FALSE);

	verify(!rel_box.IsEmpty());
	verify(bbox_equal(rel_box, LayoutCoord(10), LayoutCoord(20), LayoutCoord(0), LayoutCoord(0)));
}

test("RelativeBoundingBox union large negative y")
{
	RelativeBoundingBox rel_box;
	AbsoluteBoundingBox abs_box;

	verify(rel_box.IsEmpty());

	abs_box.Set(LayoutCoord(-10), LayoutCoord(-100000), LayoutCoord(1), LayoutCoord(1));
	rel_box.UnionWith(abs_box, LayoutCoord(50), LayoutCoord(50), FALSE);

	verify(!rel_box.IsEmpty());
	verify(bbox_equal(rel_box, LayoutCoord(10), LayoutCoord(100000), LayoutCoord(0), LayoutCoord(0)));
}

test("RelativeBoundingBox union large negative x")
{
	RelativeBoundingBox rel_box;
	AbsoluteBoundingBox abs_box;

	verify(rel_box.IsEmpty());

	abs_box.Set(LayoutCoord(-10000), LayoutCoord(-10), LayoutCoord(1), LayoutCoord(1));
	rel_box.UnionWith(abs_box, LayoutCoord(50), LayoutCoord(50), FALSE);

	verify(!rel_box.IsEmpty());
	verify(bbox_equal(rel_box, LayoutCoord(10000), LayoutCoord(10), LayoutCoord(0), LayoutCoord(0)));
}

test("RelativeBoundingBox union really large negative x")
{
	RelativeBoundingBox rel_box;
	AbsoluteBoundingBox abs_box;

	verify(rel_box.IsEmpty());

	abs_box.Set(LAYOUT_COORD_MIN, LayoutCoord(-10), LayoutCoord(1), LayoutCoord(1));
	rel_box.UnionWith(abs_box, LayoutCoord(50), LayoutCoord(50), FALSE);

	verify(!rel_box.IsEmpty());
	verify(bbox_equal(rel_box, LAYOUT_COORD_MAX, LayoutCoord(10), LayoutCoord(0), LayoutCoord(0)));
}

table OverflowTests(LayoutCoord, LayoutCoord)
{
	// Overflow prevention
	{ LayoutCoord(-10), LAYOUT_COORD_HALF_MIN },
	{ LayoutCoord(-1), LAYOUT_COORD_HALF_MIN },
	// Regular behavior
	{ LayoutCoord(0), LAYOUT_COORD_HALF_MIN },
	{ LayoutCoord(1), LAYOUT_COORD_HALF_MIN + LayoutCoord(1) },
	{ LayoutCoord(10), LAYOUT_COORD_HALF_MIN + LayoutCoord(10) }
}

test("Overflow protection in CommitPendingBoundingBox")
{
	LineReflowState lrs;
	lrs.Reset();

	// Precondition
	verify(lrs.committed.bounding_box_right == LAYOUT_COORD_HALF_MIN);
	verify(lrs.uncommitted.bounding_box_right == LAYOUT_COORD_HALF_MIN);

	iterate (left, result) from OverflowTests
	{
		lrs.CommitPendingBoxes(left);
		verify(lrs.committed.bounding_box_right == result);
	}
}

test("Overflow protection in CommitPendingContentBox")
{
	LineReflowState lrs;
	lrs.Reset();

	// Precondition
	verify(lrs.committed.content_box_right == LAYOUT_COORD_HALF_MIN);
	verify(lrs.uncommitted.content_box_right == LAYOUT_COORD_HALF_MIN);

	iterate (left, result) from OverflowTests
	{
		lrs.CommitPendingBoxes(left);
		verify(lrs.committed.content_box_right == result);
	}
}

html {
//! <!DOCTYPE html>
//! <style>
//!   #test { font-family: Ahem; font-size: 20px; width: 6em; }
//!   #rel { position: relative; }
//!   #abs { position: absolute; left: 0; top: 0; }
//! </style>
//! <div id="test">XXXX <span id="rel">X X<div id="abs"></div></span></div>
}

test("Bounding box of positioned inline")
{
	HTML_Element* rel = find_element("span");

	verify(rel);

	Box* box = rel->GetLayoutBox();

	verify(box->IsInlineBox());
	verify(box->IsPositionedBox());

	PositionedInlineBox* inline_box = static_cast<PositionedInlineBox*>(box);
	AbsoluteBoundingBox bbox;
	inline_box->GetBoundingBox(bbox);

	verify(bbox.GetX() == -100);
	verify(bbox.GetY() == 0);
	verify(bbox.GetWidth() == 120);
	verify(bbox.GetHeight() == 40);
}

test("AbsoluteBoundingBox clipping #1")
{
	AbsoluteBoundingBox abs_box;

	abs_box.Set(LayoutCoord(0), LayoutCoord(0), LayoutCoord(100), LayoutCoord(100));
	abs_box.SetContentSize(LayoutCoord(75), LayoutCoord(75));

	abs_box.ClipTo(LayoutCoord(30), LayoutCoord(30), LayoutCoord(60), LayoutCoord(60));

	verify(abs_box.GetX() == LayoutCoord(30));
	verify(abs_box.GetY() == LayoutCoord(30));
	verify(abs_box.GetWidth() == LayoutCoord(30));
	verify(abs_box.GetHeight() == LayoutCoord(30));
	verify(abs_box.GetContentWidth() == LayoutCoord(30));
	verify(abs_box.GetContentHeight() == LayoutCoord(30));
}

test("AbsoluteBoundingBox clipping #2")
{
	AbsoluteBoundingBox abs_box;

	abs_box.Set(LayoutCoord(0), LayoutCoord(0), LayoutCoord(100), LayoutCoord(100));
	abs_box.SetContentSize(LayoutCoord(75), LayoutCoord(75));

	abs_box.ClipTo(LayoutCoord(-30), LayoutCoord(-30), LayoutCoord(60), LayoutCoord(60));

	verify(abs_box.GetX() == LayoutCoord(0));
	verify(abs_box.GetY() == LayoutCoord(0));
	verify(abs_box.GetWidth() == LayoutCoord(60));
	verify(abs_box.GetHeight() == LayoutCoord(60));
	verify(abs_box.GetContentWidth() == LayoutCoord(60));
	verify(abs_box.GetContentHeight() == LayoutCoord(60));
}

test("AbsoluteBoundingBox clipping #3")
{
	AbsoluteBoundingBox abs_box;

	abs_box.Set(LayoutCoord(-100), LayoutCoord(-100), LayoutCoord(200), LayoutCoord(200));
	abs_box.SetContentSize(LayoutCoord(140), LayoutCoord(140));

	abs_box.ClipTo(LayoutCoord(30), LayoutCoord(30), LayoutCoord(60), LayoutCoord(60));

	verify(abs_box.GetX() == LayoutCoord(30));
	verify(abs_box.GetY() == LayoutCoord(30));
	verify(abs_box.GetWidth() == LayoutCoord(30));
	verify(abs_box.GetHeight() == LayoutCoord(30));
	verify(abs_box.GetContentWidth() == LayoutCoord(10));
	verify(abs_box.GetContentHeight() == LayoutCoord(10));
}

test("AbsoluteBoundingBox clipping #4")
{
	AbsoluteBoundingBox abs_box;

	abs_box.Set(LayoutCoord(-100), LayoutCoord(-100), LayoutCoord(200), LayoutCoord(200));
	abs_box.SetContentSize(LayoutCoord(140), LayoutCoord(140));

	abs_box.ClipTo(LayoutCoord(-30), LayoutCoord(-30), LayoutCoord(60), LayoutCoord(60));

	verify(abs_box.GetX() == LayoutCoord(-30));
	verify(abs_box.GetY() == LayoutCoord(-30));
	verify(abs_box.GetWidth() == LayoutCoord(90));
	verify(abs_box.GetHeight() == LayoutCoord(90));
	verify(abs_box.GetContentWidth() == LayoutCoord(70));
	verify(abs_box.GetContentHeight() == LayoutCoord(70));
}

test("AbsoluteBoundingBox clipping #5")
{
	AbsoluteBoundingBox abs_box;

	abs_box.Set(LayoutCoord(-100), LayoutCoord(-100), LayoutCoord(200), LayoutCoord(200));
	abs_box.SetContentSize(LayoutCoord(190), LayoutCoord(190));

	abs_box.ClipTo(LayoutCoord(60), LayoutCoord(60), LayoutCoord(200), LayoutCoord(200));

	verify(abs_box.GetX() == LayoutCoord(60));
	verify(abs_box.GetY() == LayoutCoord(60));
	verify(abs_box.GetWidth() == LayoutCoord(40));
	verify(abs_box.GetHeight() == LayoutCoord(40));
	verify(abs_box.GetContentWidth() == LayoutCoord(30));
	verify(abs_box.GetContentHeight() == LayoutCoord(30));
}

test("AbsoluteBoundingBox clipping #6")
{
	AbsoluteBoundingBox abs_box;

	abs_box.Set(LayoutCoord(0), LayoutCoord(0), LayoutCoord(100), LayoutCoord(100));
	abs_box.SetContentSize(LayoutCoord(90), LayoutCoord(90));

	abs_box.ClipTo(LayoutCoord(60), LayoutCoord(60), LayoutCoord(50), LayoutCoord(70));

	verify(abs_box.IsEmpty());
}

test("AbsoluteBoundingBox clipping #7")
{
	AbsoluteBoundingBox abs_box;

	abs_box.Set(LayoutCoord(0), LayoutCoord(0), LayoutCoord(100), LayoutCoord(100));
	abs_box.SetContentSize(LayoutCoord(90), LayoutCoord(90));

	abs_box.ClipTo(LayoutCoord(110), LayoutCoord(110), LayoutCoord(120), LayoutCoord(120));

	verify(abs_box.IsEmpty());
}

test("AbsoluteBoundingBox clipping #8")
{
	AbsoluteBoundingBox abs_box;

	abs_box.Set(LayoutCoord(0), LayoutCoord(0), LayoutCoord(100), LayoutCoord(100));
	abs_box.SetContentSize(LayoutCoord(75), LayoutCoord(75));

	abs_box.ClipTo(CLIP_AUTO, CLIP_AUTO, LayoutCoord(50), CLIP_AUTO);

	verify(abs_box.GetX() == LayoutCoord(0));
	verify(abs_box.GetY() == LayoutCoord(0));
	verify(abs_box.GetWidth() == LayoutCoord(50));
	verify(abs_box.GetHeight() == LayoutCoord(100));
	verify(abs_box.GetContentWidth() == LayoutCoord(50));
	verify(abs_box.GetContentHeight() == LayoutCoord(75));
}

html
{
	//! <html><body><div style="box-shadow: 10px 10px 5px; outline-style: solid">
}

table DecorationOutlineAndShadow (int, int, int)
{
	{0,0,15}
	{15,0,15}
	{16,0,16}
	{16,14,30}
	{16,-14,15}
	{16,-100,15}
}

test("DecorationExtent with outline and shadow")
{
	LogicalDocument *logdoc = state.doc->GetLogicalDocument();
	verify(logdoc);

	HTML_Element *element = find_element("div", 1);

	LayoutProperties *cascade;
	verify(cascade = LayoutProperties::CreateCascade(element, props_list, logdoc->GetHLDocProfile()));
	verify(cascade->html_element == element);
	HTMLayoutProperties &props = *cascade->GetProps();

	iterate (outline_width, offset, expected_extent) from DecorationOutlineAndShadow
	{
		props.outline.width = outline_width;
		props.outline_offset = offset;
		verify(expected_extent == props.DecorationExtent(state.doc));
	}
}
finally
{
	props_list.Clear();
}

html
{
	//! <html><body><div style="outline-style: solid">
}

table DecorationOutline (int, int, int)
{
	{0,0,0}
	{1,0,1}
	{15,0,15}
	{15,15,30}
	{15,-14,1}
	{15,-100,0}
}

test("DecorationExtent with outline")
{
	LogicalDocument *logdoc = state.doc->GetLogicalDocument();
	verify(logdoc);

	HTML_Element *element = find_element("div", 1);

	LayoutProperties *cascade;
	Head props_list;
	verify(cascade = LayoutProperties::CreateCascade(element, props_list, logdoc->GetHLDocProfile()));
	verify(cascade->html_element == element);
	HTMLayoutProperties &props = *cascade->GetProps();

	iterate (outline_width, offset, expected_extent) from DecorationOutline
	{
		props.outline.width = outline_width;
		props.outline_offset = offset;
		verify(expected_extent == props.DecorationExtent(state.doc));
	}
}
finally
{
	props_list.Clear();
}
