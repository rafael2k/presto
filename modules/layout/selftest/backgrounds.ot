/* -*- mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 * vim:set syntax=cpp tabstop=4: */

group "layout.backgrounds";

require init;

include "modules/layout/box/box.h";
include "modules/layout/layoutprops.h";
include "modules/layout/cascade.h";

global
{
    Head props_list;

	class TestableBackgroundsAndBorders : private BackgroundsAndBorders {
	public:
		// this class is not for instantiation, we just want to make CalculateRepeatSpacing() method accessible
		TestableBackgroundsAndBorders() : BackgroundsAndBorders(NULL, NULL, NULL, NULL) {}
		using BackgroundsAndBorders::CalculateRepeatSpacing;
	};
}

html
{
    //! <html><body>
    //! <div id="x" style="background: url(a), url(b)"></div>
    //! <div id="y" style="background-image: url(a); background-repeat: repeat-x"></div>
    //! <div id="z" style="background-image: url(a); background-repeat: repeat-y"></div>
    //! </body></html>
}

test("background: url(a), url(b)") language ecmascript;
{
    var elm = document.getElementById('x');
    verify(elm);
    verify(elm.style.backgroundImage == "url(\"opera:a\"), url(\"opera:b\")");
}

test("background-repeat: repeat-x") language ecmascript;
{
    var elm = document.getElementById('y');
    verify(elm);
    verify(elm.style.backgroundRepeat == "repeat-x");
}

test("background-repeat: repeat-y") language ecmascript;
{
    var elm = document.getElementById('z');
    verify(elm);
    verify(elm.style.backgroundRepeat == "repeat-y");
}

html
{
    //! <html><body>
    //! <div id="x" style="background-image: url(a), url(b); background-repeat: no-repeat, repeat-x, repeat-y">
    //! </div>
    //! </body></html>
}

test("Two background layers")
{
    LogicalDocument *logdoc = state.doc->GetLogicalDocument();
    verify(logdoc);

    HTML_Element *element = find_element("div", 1);

    LayoutProperties *cascade;
    verify(cascade = LayoutProperties::CreateCascade(element, props_list, logdoc->GetHLDocProfile()));

    verify(cascade->html_element == element);
    const HTMLayoutProperties &props = *cascade->GetProps();
    const BgImages &bg_images = props.bg_images;

    verify(bg_images.GetLayerCount() == 2);
    verify(!bg_images.IsEmpty());
    verify(!bg_images.HasPercentagePositions());

    const uni_char *url;
    BackgroundProperties bg_props;
    CSSLengthResolver length_resolver(state.doc->GetVisualDevice(), FALSE, 0.0f, props.decimal_font_size_constrained, props.font_number, state.doc->RootFontSize());
    bg_images.GetLayer(length_resolver, 0, bg_props);

    url = bg_props.bg_img;
    verify(uni_strcmp(UNI_L("opera:a"), url) == 0);
    verify(bg_props.bg_repeat_x == CSS_VALUE_no_repeat);
    verify(bg_props.bg_repeat_y == CSS_VALUE_no_repeat);

    bg_images.GetLayer(length_resolver, 1, bg_props);

    url = bg_props.bg_img;
    verify(uni_strcmp(UNI_L("opera:b"), url) == 0);
    verify(bg_props.bg_repeat_x == CSS_VALUE_repeat);
    verify(bg_props.bg_repeat_y == CSS_VALUE_no_repeat);
}
finally
{
    props_list.Clear();
}

html
{
    //! <html><body>
    //! <div id="x" style="background-image: url(a), url(b); background-position: 20px 30px, 50% 40%">
    //! </div>
    //! </body></html>
}

test("Two background layers with percentage positions")
{
    LogicalDocument *logdoc = state.doc->GetLogicalDocument();
    verify(logdoc);

    HTML_Element *element = find_element("div", 1);

    LayoutProperties *cascade;
    verify(cascade = LayoutProperties::CreateCascade(element, props_list, logdoc->GetHLDocProfile()));

    verify(cascade->html_element == element);
    const HTMLayoutProperties &props = *cascade->GetProps();
    const BgImages &bg_images = props.bg_images;

    verify(bg_images.GetLayerCount() == 2);
    verify(bg_images.HasPercentagePositions());
    verify(!bg_images.IsEmpty());

    const uni_char *url;
    BackgroundProperties bg_props;
    CSSLengthResolver length_resolver(state.doc->GetVisualDevice(), FALSE, 0.0f, props.decimal_font_size_constrained, props.font_number, state.doc->RootFontSize());

    bg_images.GetLayer(length_resolver, 0, bg_props);

    url = bg_props.bg_img;
    verify(uni_strcmp(UNI_L("opera:a"), url) == 0);
    verify(bg_props.bg_repeat_x == CSS_VALUE_repeat);
    verify(bg_props.bg_repeat_y == CSS_VALUE_repeat);
    verify(bg_props.bg_xpos == 20);
    verify(!bg_props.packed.bg_ypos_per);
    verify(bg_props.bg_ypos == 30);
    verify(!bg_props.packed.bg_ypos_per);

    bg_images.GetLayer(length_resolver, 1, bg_props);

    url = bg_props.bg_img;
    verify(uni_strcmp(UNI_L("opera:b"), url) == 0);
    verify(bg_props.bg_repeat_x == CSS_VALUE_repeat);
    verify(bg_props.bg_repeat_y == CSS_VALUE_repeat);
    verify(bg_props.bg_xpos == 50*100);
    verify(bg_props.packed.bg_xpos_per);
    verify(bg_props.bg_ypos == 40*100);
    verify(bg_props.packed.bg_ypos_per);
}
finally
{
    props_list.Clear();
}

html
{
    //! <html><body>
    //! <div id="x" style="background-image: url(a); background-attachment: local"></div>
    //! <div id="y" style="background-image: url(a); background-attachment: scroll"></div>
    //! </body></html>
}

test("One background layer with background-attachment:local")
{
    LogicalDocument *logdoc = state.doc->GetLogicalDocument();
    verify(logdoc);

    HTML_Element *element = find_element("div", 1);

    LayoutProperties *cascade;
    verify(cascade = LayoutProperties::CreateCascade(element, props_list, logdoc->GetHLDocProfile()));

    verify(cascade->html_element == element);
    const HTMLayoutProperties &props = *cascade->GetProps();
    const BgImages &bg_images = props.bg_images;

    verify(bg_images.GetLayerCount() == 1);
    verify(!bg_images.IsEmpty());
    verify(!bg_images.HasPercentagePositions());

    const uni_char *url;
    BackgroundProperties bg_props;

    bg_images.GetLayer(CSSLengthResolver(state.doc->GetVisualDevice(), FALSE, 0.0f, props.decimal_font_size_constrained, props.font_number, state.doc->RootFontSize()), 0, bg_props);

    url = bg_props.bg_img;
    verify(uni_strcmp(UNI_L("opera:a"), url) == 0);
    verify(bg_props.bg_repeat_x == CSS_VALUE_repeat);
    verify(bg_props.bg_repeat_y == CSS_VALUE_repeat);
    verify(bg_props.bg_attach == CSS_VALUE_local);
}
finally
{
    props_list.Clear();
}

test("One background layer with background-attachment:scroll")
{
    LogicalDocument *logdoc = state.doc->GetLogicalDocument();
    verify(logdoc);

    HTML_Element *element = find_element("div", 2);

    LayoutProperties *cascade;
    verify(cascade = LayoutProperties::CreateCascade(element, props_list, logdoc->GetHLDocProfile()));

    verify(cascade->html_element == element);
    const HTMLayoutProperties &props = *cascade->GetProps();
    const BgImages &bg_images = props.bg_images;

    verify(bg_images.GetLayerCount() == 1);
    verify(!bg_images.IsEmpty());
    verify(!bg_images.HasPercentagePositions());

    const uni_char *url;
    BackgroundProperties bg_props;

    bg_images.GetLayer(CSSLengthResolver(state.doc->GetVisualDevice(), FALSE, 0.0f, props.decimal_font_size_constrained, props.font_number, state.doc->RootFontSize()), 0, bg_props);

    url = bg_props.bg_img;
    verify(uni_strcmp(UNI_L("opera:a"), url) == 0);
    verify(bg_props.bg_repeat_x == CSS_VALUE_repeat);
    verify(bg_props.bg_repeat_y == CSS_VALUE_repeat);
    verify(bg_props.bg_attach == CSS_VALUE_scroll);
}
finally
{
    props_list.Clear();
}

html
{
	//! <html><body>
	//! <span id="v">
	//! <span id="x" style="box-decoration-break: clone">
	//! <span id="y" style="box-decoration-break: slice">
	//! <div style="box-decoration-break: clone">
	//!   <span id="z" style="box-decoration-break: inherit">
	//! </div>
	//! </body></html>
}
test("box-decoration-break:{clone,slice} and inheritance") language ecmascript;
{
	computed_style = getComputedStyle(document.getElementById('v'), null);
	verify(computed_style.boxDecorationBreak == "slice");

	computed_style = getComputedStyle(document.getElementById('x'), null);
	verify(computed_style.boxDecorationBreak == "clone");

	computed_style = getComputedStyle(document.getElementById('y'), null);
	verify(computed_style.boxDecorationBreak == "slice");

	computed_style = getComputedStyle(document.getElementById('z'), null);
	verify(computed_style.boxDecorationBreak == "clone");
}

table CalculateRepeatSpacing_multiple (OpRect, OpRect, OpRect)
{
	{ OpRect(10, 10, 60, 60), OpRect(0, 0, 30, 30), OpRect(0, 0, 0, 0) },
	{ OpRect(10, 10, 61, 61), OpRect(0, 0, 30, 30), OpRect(0, 0, 1, 1) },
	{ OpRect(10, 10, 100, 100), OpRect(0, 0, 30, 30), OpRect(0, 0, 5, 5) }
}

test("CalculateRepeatSpacing")
{
	BackgroundProperties bg;
	bg.bg_repeat_x = bg.bg_repeat_y = CSS_VALUE_space;
	OpRect space;
	iterate (positioning, img, expected) from CalculateRepeatSpacing_multiple
	{
		OpPoint bg_pos(10, 10);
		TestableBackgroundsAndBorders::CalculateRepeatSpacing(&bg, positioning, bg_pos, img, space);
		verify(space.Equals(expected));
		verify(bg_pos.x == positioning.x && bg_pos.y == positioning.y);
	}

	// Enough space for only one image.
	OpPoint bg_pos(10, 10);
	OpRect img(0, 0, 30, 30);

	OpRect p1(10, 10, 59, 59);
	TestableBackgroundsAndBorders::CalculateRepeatSpacing(&bg, p1, bg_pos, img, space);
	verify(space.Equals(img));

	OpRect p2(10, 10, 40, 40);
	TestableBackgroundsAndBorders::CalculateRepeatSpacing(&bg, p2, bg_pos, img, space);
	verify(space.Equals(img));

	OpRect p3(10, 10, 30, 30);
	TestableBackgroundsAndBorders::CalculateRepeatSpacing(&bg, p3, bg_pos, img, space);
	verify(space.Equals(img));

	// Not enough space for one image
	OpRect positioning = OpRect(0, 0, 20, 20);
	verify(TestableBackgroundsAndBorders::CalculateRepeatSpacing(&bg, positioning, bg_pos, img, space) == FALSE);
}
