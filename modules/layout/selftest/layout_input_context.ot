/* -*- mode: c++; tab-width: 4; c-basic-offset: 4 -*- */

group "layout.input_context";

/** Selftests related with input contexts in layout, like ScrollableContainers. */

require init;

include "modules/dochand/fdelm.h";
include "modules/doc/frm_doc.h";
include "modules/layout/box/box.h";
include "modules/layout/content/scrollable.h";
include "modules/logdoc/htm_elm.h";
include "modules/selftest/src/doc_st_utils.h";
include "modules/inputmanager/inputmanager.h";
include "modules/forms/piforms.h";
include "modules/widgets/OpWidget.h";

global
{
	/* Should be used in asyns tests. Sends the mousewheel down to the scrollable and checks whether
	   it was scrolled down at least by one. */
	void BasicScrollableTest(FramesDocument* doc)
	{
		HTML_Element* elm, *root;
		LogicalDocument* log_doc;
		if(!doc)
		{
			ST_failed("NULL pointer.");
			return;
		}

		FramesDocElm* iframe = DocSTUtils::GetFrameById(doc, "iframe");
		if (!iframe || !iframe->GetCurrentDoc())
		{
			ST_failed("NULL pointer.");
			return;
		}

		log_doc = doc->GetLogicalDocument();
		if (!log_doc)
		{
			ST_failed("NULL pointer.");
			return;
		}
		root = log_doc->GetRoot();
		if (!root)
		{
			ST_failed("NULL pointer.");
			return;
		}
		elm = root->GetElmById(UNI_L("scrollable"));
		if (!elm)
		{
			ST_failed("NULL pointer.");
			return;
		}

		ScrollableArea* sc = elm->GetLayoutBox() ? elm->GetLayoutBox()->GetScrollable() : NULL;
		if (!(sc && sc->GetViewY() == 0))
		{
			ST_failed("No scrollable container or wrong scroll position.");
			return;
		}

		// Needed to have the IFrameContent enabled.
		WaitUntilLoadedObj::Paint();

		iframe->GetCurrentDoc()->MouseWheel(10, 10, FALSE, FALSE, FALSE, 1, TRUE);

		ScrollableScrolledObj::WaitUntilScrollableScrolled(elm);
	}

}

table dummy(const char *) filelist "tests/layout_input_context" recursively;

html
{
//!<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
//!<html>
//!<head>
//!<style type="text/css">
//!* { margin:0;padding:0;}
//!
//!div
//!{
//!	overflow:auto;
//!	height:100px;
//!	width:120px;
//!}
//!
//!iframe
//!{
//!	height: 200px;
//!	width: 100px;
//!}
//!</style>
//!</head>
//!<body>
//!
//!<div id="scrollable">
//!	<iframe src="about:blank" id="iframe"></iframe>
//!</div>
//!
//!</body>
//!</html>
}
test("iframe in scrollable") async;
{
	BasicScrollableTest(state.doc);
}

html
{
//!<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
//!<html>
//!<head>
//!<style type="text/css">
//!* { margin:0;padding:0;}
//!
//!div
//!{
//!	overflow:auto;
//!	height:100px;
//!	width:120px;
//!}
//!
//!iframe
//!{
//!	height: 200px;
//!	width: 100px;
//!}
//!</style>
//!</head>
//!<body>
//!
//!<div id="scrollable">
//!	<iframe src="about:blank" id="iframe"></iframe>
//!</div>
//!
//!</body>
//!</html>
}

// Load the below in order to test back in history to the above.
html
{
//!<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
//!<html>
//!<body>
//!</body>
//!</html>
}

test("back in history") async;
	require success "iframe in scrollable";
{
	Window *win = state.GetWindow();
	if (!win)
		ST_failed("No window!");
	else
		WaitUntilLoadedObj::MoveInHistoryAndWaitUntilLoaded(win, FALSE);
}

test("iframe in scrollable after history walk") async;
	require success "back in history";
{
	BasicScrollableTest(state.doc);
}

test("reset visual viewport 1") async;
	// Just in case the previous has moved visual viewport of the top doc instead of scrollable.
{
	MoveVisualViewportObj::MoveVisualViewport(0, 0);
}

test("load two scrollables and iframe doc, focus kept") async;
	file uni scrollables "tests/layout_input_context/undisplaying_scrollables/top_doc_focused_input.htm";
{
	Window* win = state.GetWindow();
	if (!win)
		ST_failed("No window!");
	else
		WaitUntilLoadedObj::LoadAndWaitUntilLoaded(win, scrollables);
}

test("wait until scripts executed 1") async;
	require success "load two scrollables and iframe doc, focus kept";
{
	if (!state.doc)
		ST_failed("There is no document!");
	else
		CheckJSFunctionExecutedObj::WaitUntilJSFunctionExecuted(state.doc);
}

test("correct focus and propagate scroll event")
	require success "wait until scripts executed 1";
{
	FramesDocument *doc = state.doc;
	verify(doc);

	FramesDocElm* iframe = DocSTUtils::GetFrameById(doc, "iframe");
	verify(iframe);

	FramesDocument *iframe_doc = iframe->GetCurrentDoc();
	verify(iframe_doc);

	HTML_Element* elm, *root;
	LogicalDocument* log_doc;
	log_doc = iframe_doc->GetLogicalDocument();
	verify(log_doc);
	root = log_doc->GetRoot();
	verify(root);

	elm = root->GetElmById(UNI_L("input"));

	verify(elm && elm->IsFocused());

	OpWidget* input_widget = elm->GetFormObject() ? elm->GetFormObject()->GetWidget() : NULL;
	verify(input_widget);

	verify(g_input_manager->InvokeAction(OpInputAction::ACTION_SCROLL_DOWN, 1, 0, input_widget, NULL, TRUE, OpInputAction::METHOD_KEYBOARD));
}

test("scrollable scrolled") async;
	require success "correct focus and propagate scroll event";
{
	HTML_Element* root = state.doc->GetLogicalDocument() ? state.doc->GetLogicalDocument()->GetRoot() : NULL;
	HTML_Element* scr_elm = root ? root->GetElmById(UNI_L("inner_scrollable")) : NULL;

	if (scr_elm)
		ScrollableScrolledObj::WaitUntilScrollableScrolled(scr_elm);
	else
		ST_failed("NULL pointer.");
}

test("reset visual viewport 2") async;
	// Just in case the previous has moved visual viewport of the top doc instead of scrollable.
{
	MoveVisualViewportObj::MoveVisualViewport(0, 0);
}

test("load two scrollables and iframe doc, input focused and blured") async;
	file uni scrollables "tests/layout_input_context/undisplaying_scrollables/top_doc_focus_away.htm";
{
	Window* win = state.GetWindow();
	if (!win)
		ST_failed("No window!");
	else
		WaitUntilLoadedObj::LoadAndWaitUntilLoaded(win, scrollables);
}

test("wait until scripts executed 2") async;
	require success "load two scrollables and iframe doc, input focused and blured";
{
	if (!state.doc)
		ST_failed("There is no document!");
	else
		CheckJSFunctionExecutedObj::WaitUntilJSFunctionExecuted(state.doc);
}

test("no focus restored")
	require success "wait until scripts executed 2";
{
	FramesDocument *doc = state.doc;
	verify(doc);

	FramesDocElm* iframe = DocSTUtils::GetFrameById(doc, "iframe");
	verify(iframe);

	FramesDocument *iframe_doc = iframe->GetCurrentDoc();
	verify(iframe_doc);

	HTML_Element* elm, *root;
	LogicalDocument* log_doc;
	log_doc = iframe_doc->GetLogicalDocument();
	verify(log_doc);
	root = log_doc->GetRoot();
	verify(root);

	elm = root->GetElmById(UNI_L("input"));

	verify(elm && !elm->IsFocused());
}

test("reset visual viewport 3") async;
	// Just in case the previous has moved visual viewport of the top doc instead of scrollable.
{
	MoveVisualViewportObj::MoveVisualViewport(0, 0);
}
