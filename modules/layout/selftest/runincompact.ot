/* -*- mode: c++; tab-width: 4; c-basic-offset: 4 -*- */

group "layout.runincompact";

require init;

include "modules/doc/frm_doc.h";
include "modules/layout/box/box.h";
include "modules/layout/box/inline.h";
include "modules/layout/content/content.h";
include "modules/logdoc/htm_elm.h";

html
{
//! <!doctype html>
//! <html><body>
//! <span style="display:run-in;">xx</span>
//! <div>yy</div>
//! </body></html>
}
test("inline: basic")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(runin_element->GetLayoutBox()->IsInlineRunInBox());
	verify(!runin_element->GetLayoutBox()->IsInlineCompactBox());

	HTML_Element* cont_elm = find_element("div");
	verify(cont_elm);
	verify(cont_elm->GetLayoutBox());
	verify(cont_elm->GetLayoutBox()->GetContainer());
	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn());

	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn() == runin_element->GetLayoutBox());
}

html
{
//! <!doctype html>
//! <html><body>
//! text
//! <span style="display:run-in;">xx</span>
//! <div>yy</div>
//! </body></html>
}
test("inline: run-in element preceded by text (bug CORE-19283)")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(runin_element->GetLayoutBox()->IsInlineRunInBox());

	HTML_Element* cont_elm = find_element("div");
	verify(cont_elm);
	verify(cont_elm->GetLayoutBox());
	verify(cont_elm->GetLayoutBox()->GetContainer());
	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn());

	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn() == runin_element->GetLayoutBox());
}

html
{
//! <!doctype html>
//! <html><body>
//! text<br>
//! <span style="display:run-in;">xx</span>
//! <div>yy</div>
//! </body></html>
}
test("inline: run-in element preceded by line break")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(runin_element->GetLayoutBox()->IsInlineRunInBox());

	HTML_Element* cont_elm = find_element("div");
	verify(cont_elm);
	verify(cont_elm->GetLayoutBox());
	verify(cont_elm->GetLayoutBox()->GetContainer());
	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn());

	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn() == runin_element->GetLayoutBox());
}

html
{
//! <!doctype html>
//! <html><body>
//! <h1>block</h1>
//! <span style="display:run-in;">xx</span>
//! <div>yy</div>
//! </body></html>
}
test("inline: run-in element preceded by block")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(runin_element->GetLayoutBox()->IsInlineRunInBox());

	HTML_Element* cont_elm = find_element("div");
	verify(cont_elm);
	verify(cont_elm->GetLayoutBox());
	verify(cont_elm->GetLayoutBox()->GetContainer());
	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn());

	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn() == runin_element->GetLayoutBox());
}

html
{
//! <!doctype html>
//! <html><body>
//! <span style="display:run-in;">xx</span>
//! <!-- comment -->
//! <div>yy</div>
//! </body></html>
}
test("inline: run-in and block with intervening comment")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(runin_element->GetLayoutBox()->IsInlineRunInBox());

	HTML_Element* cont_elm = find_element("div");
	verify(cont_elm);
	verify(cont_elm->GetLayoutBox());
	verify(cont_elm->GetLayoutBox()->GetContainer());
	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn());

	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn() == runin_element->GetLayoutBox());
}

html
{
//! <!doctype html>
//! <html><body>
//! <span style="display:run-in;">xx</span>
//! <div style="overflow:scroll;">yy</div>
//! </body></html>
}
test("inline: run-in sibling of block with non-visible overflow")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(runin_element->GetLayoutBox()->IsInlineRunInBox());

	HTML_Element* cont_elm = find_element("div");
	verify(cont_elm);
	verify(cont_elm->GetLayoutBox());
	verify(cont_elm->GetLayoutBox()->GetContainer());
	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn());

	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn() == runin_element->GetLayoutBox());
}

html
{
//! <!doctype html>
//! <html><body>
//! <h1 style="display:table;">
//! <span style="display:run-in;">xx</span>
//! <div>yy</div>
//! </h1>
//! </body></html>
}
test("inline: run-in sibling of block, common parent is table")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(runin_element->GetLayoutBox()->IsInlineRunInBox());

	HTML_Element* cont_elm = find_element("div");
	verify(cont_elm);
	verify(cont_elm->GetLayoutBox());
	verify(cont_elm->GetLayoutBox()->GetContainer());
	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn());

	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn() == runin_element->GetLayoutBox());
}

html
{
//! <!doctype html>
//! <html><body>
//! <h1 style="display:table-caption;">
//! <span style="display:run-in;">xx</span>
//! <div>yy</div>
//! </h1>
//! </body></html>
}
test("inline: run-in sibling of block, common parent is table-caption")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(runin_element->GetLayoutBox()->IsInlineRunInBox());

	HTML_Element* cont_elm = find_element("div");
	verify(cont_elm);
	verify(cont_elm->GetLayoutBox());
	verify(cont_elm->GetLayoutBox()->GetContainer());
	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn());

	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn() == runin_element->GetLayoutBox());
}

html
{
//! <!doctype html>
//! <html><body>
//! <h1 style="display:table-row-group;">
//! <span style="display:run-in;">xx</span>
//! <div>yy</div>
//! </h1>
//! </body></html>
}
test("inline: run-in sibling of block, common parent is table-row-group")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(runin_element->GetLayoutBox()->IsInlineRunInBox());

	HTML_Element* cont_elm = find_element("div");
	verify(cont_elm);
	verify(cont_elm->GetLayoutBox());
	verify(cont_elm->GetLayoutBox()->GetContainer());
	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn());

	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn() == runin_element->GetLayoutBox());
}

html
{
//! <!doctype html>
//! <html><body>
//! <h1 style="display:table-row;">
//! <span style="display:run-in;">xx</span>
//! <div>yy</div>
//! </h1>
//! </body></html>
}
test("inline: run-in sibling of block, common parent is table-row")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(runin_element->GetLayoutBox()->IsInlineRunInBox());

	HTML_Element* cont_elm = find_element("div");
	verify(cont_elm);
	verify(cont_elm->GetLayoutBox());
	verify(cont_elm->GetLayoutBox()->GetContainer());
	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn());

	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn() == runin_element->GetLayoutBox());
}

html
{
//! <!doctype html>
//! <html><body>
//! <h1 style="display:table-row;">
//! <span style="display:run-in;">xx</span>
//! <div>yy</div>
//! </h1>
//! </body></html>
}
test("inline: run-in sibling of block, common parent is table-cell")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(runin_element->GetLayoutBox()->IsInlineRunInBox());

	HTML_Element* cont_elm = find_element("div");
	verify(cont_elm);
	verify(cont_elm->GetLayoutBox());
	verify(cont_elm->GetLayoutBox()->GetContainer());
	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn());

	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn() == runin_element->GetLayoutBox());
}

html
{
//! <!doctype html>
//! <html><body>
//! <span><span style="display:run-in;">xx</span></span>
//! text
//! <div>yy</div>
//! </body></html>
}
test("block: run-in and block with intervening text")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span", 2);
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(!runin_element->GetLayoutBox()->IsInlineRunInBox());
	verify(runin_element->GetLayoutBox()->IsBlockBox());
	verify(runin_element->GetLayoutBox()->GetContainer());
}

html
{
//! <!doctype html>
//! <html><body>
//! <span><span style="display:run-in;">xx</span></span>
//! <div>yy</div>
//! </body></html>
}
test("block: run-in nephew of block")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span", 2);
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(!runin_element->GetLayoutBox()->IsInlineRunInBox());
	verify(runin_element->GetLayoutBox()->IsBlockBox());
	verify(runin_element->GetLayoutBox()->GetContainer());
}

html
{
//! <!doctype html>
//! <html><body>
//! <span style="display:run-in;">xx</span>
//! <div style="float:left;">yy</div>
//! </body></html>
}
test("block: run-in sibling of float")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(!runin_element->GetLayoutBox()->IsInlineRunInBox());
	verify(runin_element->GetLayoutBox()->IsBlockBox());
	verify(runin_element->GetLayoutBox()->GetContainer());
}

html
{
//! <!doctype html>
//! <html><body>
//! <span style="display:run-in;">xx</span>
//! <div style="position:absolute;">yy</div>
//! </body></html>
}
test("block: run-in sibling of absolutely positioned box")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(!runin_element->GetLayoutBox()->IsInlineRunInBox());
	verify(runin_element->GetLayoutBox()->IsBlockBox());
	verify(runin_element->GetLayoutBox()->GetContainer());
}

html
{
//! <!doctype html>
//! <html><body>
//! <span style="display:run-in;">xx</span>
//! <table><tr><td>cell</td></tr></table>
//! </body></html>
}
test("block: run-in sibling of table")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(!runin_element->GetLayoutBox()->IsInlineRunInBox());
	verify(runin_element->GetLayoutBox()->IsBlockBox());
	verify(runin_element->GetLayoutBox()->GetContainer());
}

html
{
//! <!doctype html>
//! <html><body>
//! <span style="display:run-in;">xx</span>
//! <div style="display:inline;">inline</div>
//! </body></html>
}
test("block: run-in sibling of inline")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(!runin_element->GetLayoutBox()->IsInlineRunInBox());
	verify(runin_element->GetLayoutBox()->IsBlockBox());
	verify(runin_element->GetLayoutBox()->GetContainer());
}

html
{
//! <!doctype html>
//! <html><body>
//! <span style="display:run-in;">xx</span>
//! <div style="display:inline-block;">inline-block</div>
//! </body></html>
}
test("block: run-in sibling of inline-block")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(!runin_element->GetLayoutBox()->IsInlineRunInBox());
	verify(runin_element->GetLayoutBox()->IsBlockBox());
	verify(runin_element->GetLayoutBox()->GetContainer());
}

html
{
//! <!doctype html>
//! <html><body>
//! <h1 style="display:table-row;">
//! <span style="display:run-in;">xx</span>
//! <div style="display:table-caption;">cell</div>
//! </h1>
//! </body></html>
}
test("block: run-in sibling of table-caption")
	disabled; // fails
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(!runin_element->GetLayoutBox()->IsInlineRunInBox());
	verify(runin_element->GetLayoutBox()->IsBlockBox());
	verify(runin_element->GetLayoutBox()->GetContainer());

	HTML_Element* div = find_element("div");
	verify(div);
	verify(div->GetLayoutBox());
	verify(div->GetLayoutBox()->IsTableCaption());

	/* The following fails, because the DIV is a table-caption inside a table-cell inside a
	   table-row inside a table-row-group inside a table. The table correction code was probably
	   convinced by the run-in to complete the table structure, but a table-cell is no place for a
	   table-caption. */

	verify(div->Parent()->GetLayoutBox()->GetTableContent());
	verify(div->Parent() == runin_element->Parent()->Parent()->Parent()->Parent());
}

html
{
//! <!doctype html>
//! <html><body>
//! <h1 style="display:table-row;">
//! <span style="display:run-in;">xx</span>
//! <div style="display:table-cell;">cell</div>
//! </h1>
//! </body></html>
}
test("block: run-in sibling of table-cell")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span");
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(!runin_element->GetLayoutBox()->IsInlineRunInBox());
	verify(runin_element->GetLayoutBox()->IsBlockBox());
	verify(runin_element->GetLayoutBox()->GetContainer());

	HTML_Element* div = find_element("div");
	verify(div);
	verify(div->GetLayoutBox());
	verify(div->GetLayoutBox()->IsTableCell());

	verify(div->Parent()->GetLayoutBox()->IsTableRow());
	verify(div->Parent() == runin_element->Parent()->Parent());
}

html
{
//! <!doctype html>
//! <html><body>
//! <span style="display:run-in;">xx</span>
//! <span style="display:run-in;">yy</span>
//! </body></html>
}
test("run-in sibling of run-in")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span", 1);
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(!runin_element->GetLayoutBox()->IsInlineRunInBox());
	verify(runin_element->GetLayoutBox()->IsBlockBox());
	verify(runin_element->GetLayoutBox()->GetContainer());

	HTML_Element* runin2 = find_element("span", 2);
	verify(runin2);
	verify(runin2->GetLayoutBox());
	verify(runin2->GetLayoutBox()->IsBlockBox());
}

html
{
//! <!doctype html>
//! <html><body>
//! <span style="display:run-in;">xx</span>
//! <span style="display:run-in;">yy</span>
//! <div>block</div>
//! </body></html>
}
test("run-in sibling of run-in sibling of block")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* runin_element = find_element("span", 1);
	verify(runin_element);
	verify(runin_element->GetLayoutBox());
	verify(!runin_element->GetLayoutBox()->IsInlineRunInBox());
	verify(runin_element->GetLayoutBox()->IsBlockBox());
	verify(runin_element->GetLayoutBox()->GetContainer());

	HTML_Element* runin2 = find_element("span", 2);
	verify(runin2);
	verify(runin2->GetLayoutBox());
	verify(runin2->GetLayoutBox()->IsInlineRunInBox());

	HTML_Element* cont_elm = find_element("div");
	verify(cont_elm);
	verify(cont_elm->GetLayoutBox());
	verify(cont_elm->GetLayoutBox()->GetContainer());
	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn());

	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn() == runin2->GetLayoutBox());
}

html
{
//! <!doctype html>
//! <html><body>
//!	<div style="display:inline-block">&nbsp;
//!	 <div style="display:run-in">
//!   <span></span>
//!	 </div>
//!	 <div></div>
//!	</div>
//! <script>
//!  document.body.offsetLeft; // seems that we need to trigger a reflow to reproduce the hang when using the selftest system
//! </script>
//! </body></html>
}
test("inline run-in in shrink-to-fit container (bug CORE-19951)")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* inline_block = find_element("div", 1);
	verify(inline_block);
	verify(inline_block->GetLayoutBox());
	verify(inline_block->GetLayoutBox()->IsInlineBlockBox());
}

html
{
//! <!doctype html>
//! <html><body>
//! <span style="display:compact;">xx</span>
//! <div style="margin:0 7em;">block</div>
//! </body></html>
}
test("inline: compact sibling of block with large enough horizontal margin")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* compact_element = find_element("span");
	verify(compact_element);
	verify(compact_element->GetLayoutBox());
	verify(compact_element->GetLayoutBox()->IsInlineCompactBox());

	HTML_Element* cont_elm = find_element("div");
	verify(cont_elm);
	verify(cont_elm->GetLayoutBox());
	verify(cont_elm->GetLayoutBox()->GetContainer());
	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn());

	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn() == compact_element->GetLayoutBox());
}

html
{
//! <!doctype html>
//! <html><body dir="ltr">
//! <span style="display:compact;">xx</span>
//! <div style="margin-left:7em;">block</div>
//! </body></html>
}
test("inline: compact sibling of block with only left margin (LTR)")
	require SUPPORT_TEXT_DIRECTION;
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* compact_element = find_element("span");
	verify(compact_element);
	verify(compact_element->GetLayoutBox());
	verify(compact_element->GetLayoutBox()->IsInlineCompactBox());

	HTML_Element* cont_elm = find_element("div");
	verify(cont_elm);
	verify(cont_elm->GetLayoutBox());
	verify(cont_elm->GetLayoutBox()->GetContainer());
	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn());

	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn() == compact_element->GetLayoutBox());
}

html
{
//! <!doctype html>
//! <html><body dir="rtl">
//! <span style="display:compact;">xx</span>
//! <div style="margin-right:7em;">block</div>
//! </body></html>
}
test("inline: compact sibling of block with only right margin (RTL)")
	require SUPPORT_TEXT_DIRECTION;
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* compact_element = find_element("span");
	verify(compact_element);
	verify(compact_element->GetLayoutBox());
	verify(compact_element->GetLayoutBox()->IsInlineCompactBox());

	HTML_Element* cont_elm = find_element("div");
	verify(cont_elm);
	verify(cont_elm->GetLayoutBox());
	verify(cont_elm->GetLayoutBox()->GetContainer());
	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn());

	verify(cont_elm->GetLayoutBox()->GetContainer()->GetInlineRunIn() == compact_element->GetLayoutBox());
}

html
{
//! <!doctype html>
//! <html><body>
//! <span style="display:compact;">xx</span>
//! <div style="margin:0 1px;">block</div>
//! </body></html>
}
test("block: compact sibling of block with too small horizontal margin")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* compact_element = find_element("span");
	verify(compact_element);
	verify(compact_element->GetLayoutBox());
	verify(!compact_element->GetLayoutBox()->IsInlineCompactBox());
	verify(compact_element->GetLayoutBox()->IsBlockBox());
	verify(compact_element->GetLayoutBox()->GetContainer());
}

html
{
//! <!doctype html>
//! <html><body>
//! <span style="display:compact;">xx</span>
//! <div>block</div>
//! </body></html>
}
test("block: compact sibling of block with no horizontal margin")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* compact_element = find_element("span");
	verify(compact_element);
	verify(compact_element->GetLayoutBox());
	verify(!compact_element->GetLayoutBox()->IsInlineCompactBox());
	verify(compact_element->GetLayoutBox()->IsBlockBox());
	verify(compact_element->GetLayoutBox()->GetContainer());
}

html
{
//! <!doctype html>
//! <html><body>
//! <span style="display:compact;">xx</span>
//! text
//! <div style="margin:0 7em;">block</div>
//! </body></html>
}
test("block: compact sibling of block with large enough horizontal margin, with intervening text")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* compact_element = find_element("span");
	verify(compact_element);
	verify(compact_element->GetLayoutBox());
	verify(!compact_element->GetLayoutBox()->IsInlineCompactBox());
	verify(compact_element->GetLayoutBox()->IsBlockBox());
	verify(compact_element->GetLayoutBox()->GetContainer());
}

html
{
//! <!doctype html>
//! <html><body dir="ltr">
//! <span style="display:compact;">xx</span>
//! <div style="margin-right:7em;">block</div>
//! </body></html>
}
test("block: compact sibling of block with only right margin (LTR)")
	require SUPPORT_TEXT_DIRECTION;
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* compact_element = find_element("span");
	verify(compact_element);
	verify(compact_element->GetLayoutBox());
	verify(!compact_element->GetLayoutBox()->IsInlineCompactBox());
	verify(compact_element->GetLayoutBox()->IsBlockBox());
	verify(compact_element->GetLayoutBox()->GetContainer());
}

html
{
//! <!doctype html>
//! <html><body dir="rtl">
//! <span style="display:compact;">xx</span>
//! <div style="margin-left:7em;">block</div>
//! </body></html>
}
test("block: compact sibling of block with only left margin (RTL)")
	require SUPPORT_TEXT_DIRECTION;
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);

	HTML_Element* compact_element = find_element("span");
	verify(compact_element);
	verify(compact_element->GetLayoutBox());
	verify(!compact_element->GetLayoutBox()->IsInlineCompactBox());
	verify(compact_element->GetLayoutBox()->IsBlockBox());
	verify(compact_element->GetLayoutBox()->GetContainer());
}
