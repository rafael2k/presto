// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
group "layout.svg";

require init;
require SVG_SUPPORT;

include "modules/svg/SVGManager.h";
include "modules/doc/frm_doc.h";
include "modules/layout/box/box.h";
include "modules/layout/traverse/traverse.h";
include "modules/ecmascript_utils/esasyncif.h";
include "modules/dochand/win.h";
include "modules/hardcore/timer/optimer.h";

language c++;

html
{
//! <!doctype html>
//! <html><body style="margin: 0">
//!   <div id="shape-container" style="position: absolute; top: 0; left: 0"></div>
//! </body></html>
}

test("Setup") language ecmascript;
{
	var svgns = 'http://www.w3.org/2000/svg';

	function createPath(color, points) {
		var path = document.createElementNS(svgns, 'path');
		path.setAttributeNS(null, 'stroke-opacity', '1');
		path.setAttributeNS(null, 'stroke-width', '10');
		path.setAttributeNS(null, 'fill', 'none');
		path.setAttributeNS(null, 'stroke', color);
		path.setAttributeNS(null, 'd', points);
		return path;
	}

	function createSvg(width, height, top, left,id) {
		var svg = document.createElementNS(svgns, 'svg');
		svg.style.position = 'absolute';
		svg.style.width = width + 'px';
		svg.style.height = height + 'px';
		svg.style.top = top + 'px';
		svg.style.left = left + 'px';
		svg.setAttributeNS(null, 'viewBox', left + ' ' + top + ' ' + width + ' ' + height);
		svg.id = id;
		return svg;
	}

	var svg1 = createSvg(100, 100, 0, 0, "red");
	svg1.appendChild(createPath('red', 'M 0 0 L 100 100'));

	var svg2 = createSvg(100, 100, 0, 0, "blue");
	svg2.appendChild(createPath('blue', 'M 0 100 L 100 0'));

	var container = document.getElementById('shape-container');
	container.appendChild(svg1);
	container.appendChild(svg2);
}

test("Test intersection on a transparent part of svg")
{
	SVG_DOCUMENT_CLASS* doc = state.doc;
	verify(doc);

	HTML_Element* path1 = find_element("path", 1);
	verify(path1);

	HTML_Element* path2 = find_element("path", 2);
	verify(path2);

	OpPoint on_transparent_area(50, 10);

	BOOL include_text_nodes = TRUE;
	IntersectionObject* intersection = OP_NEW(IntersectionObject, (state.doc, LayoutCoord(on_transparent_area.x), LayoutCoord(on_transparent_area.y), include_text_nodes));
	verify(intersection);

	OpAutoPtr<IntersectionObject> intersection_owner(intersection);

	OP_STATUS stat = intersection->Traverse(state.doc->GetLogicalDocument()->GetRoot());
	verify(OpStatus::IsSuccess(stat));

	Box* inner_box = intersection->GetInnerBox();
	verify(inner_box);

	HTML_Element* h_elm = inner_box->GetHtmlElement();
	verify(h_elm);
	verify(h_elm->Type() == Markup::HTE_HTML);
}

test("Test intersection on an overlapped svg")
{
	SVG_DOCUMENT_CLASS* doc = state.doc;
	verify(doc);

	HTML_Element* path1 = find_element("path", 1);
	verify(path1);

	HTML_Element* path2 = find_element("path", 2);
	verify(path2);

	OpPoint on_red_line(10,10); // x=y should always hit the red line,
								// except for around x=50 where the
								// blue line overlaps

	BOOL include_text_nodes = TRUE;
	IntersectionObject* intersection = OP_NEW(IntersectionObject, (state.doc, LayoutCoord(on_red_line.x), LayoutCoord(on_red_line.y), include_text_nodes));
	verify(intersection);

	OpAutoPtr<IntersectionObject> intersection_owner(intersection);

	OP_STATUS stat = intersection->Traverse(state.doc->GetLogicalDocument()->GetRoot());
	verify(OpStatus::IsSuccess(stat));

	Box* inner_box = intersection->GetInnerBox();
	verify(inner_box);

	int offset_x = intersection->GetRelativeX();
	int offset_y = intersection->GetRelativeY();

	HTML_Element* h_elm = inner_box->GetHtmlElement();
	verify(h_elm);
	verify(h_elm->IsMatchingType(Markup::SVGE_SVG, NS_SVG));

	HTML_Element* event_target = NULL;

	g_svg_manager->FindSVGElement(h_elm, state.doc, on_red_line.x, on_red_line.y, &event_target, offset_x, offset_y);
	if (event_target != NULL)
		h_elm = event_target;

	verify(event_target == h_elm);
	verify(event_target == path1);
}

test("Test intersection on the topmost svg")
{
	SVG_DOCUMENT_CLASS* doc = state.doc;
	verify(doc);

	HTML_Element* path1 = find_element("path", 1);
	verify(path1);

	HTML_Element* path2 = find_element("path", 2);
	verify(path2);

	OpPoint on_blue_line(50, 50);

	BOOL include_text_nodes = TRUE;
	IntersectionObject* intersection = OP_NEW(IntersectionObject, (state.doc, LayoutCoord(on_blue_line.x), LayoutCoord(on_blue_line.y), include_text_nodes));
	verify(intersection);

	OpAutoPtr<IntersectionObject> intersection_owner(intersection);

	OP_STATUS stat = intersection->Traverse(state.doc->GetLogicalDocument()->GetRoot());
	verify(OpStatus::IsSuccess(stat));

	Box* inner_box = intersection->GetInnerBox();
	verify(inner_box);

	int offset_x = intersection->GetRelativeX();
	int offset_y = intersection->GetRelativeY();

	HTML_Element* h_elm = inner_box->GetHtmlElement();
	verify(h_elm);
	verify(h_elm->IsMatchingType(Markup::SVGE_SVG, NS_SVG));

	HTML_Element* event_target = NULL;

	g_svg_manager->FindSVGElement(h_elm, state.doc, on_blue_line.x, on_blue_line.y, &event_target, offset_x, offset_y);
	if (event_target != NULL)
		h_elm = event_target;

	verify(event_target == h_elm);
	verify(event_target == path2);
}

