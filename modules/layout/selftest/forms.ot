/* -*- mode: c++; tab-width: 4; c-basic-offset: 4 -*- */

group "layout.forms";

include "modules/logdoc/logdoc.h";
include "modules/logdoc/htm_elm.h";
include "modules/layout/cascade.h";
include "modules/layout/layoutprops.h";
include "modules/layout/box/box.h";
include "modules/layout/content/content.h";
include "modules/forms/piforms.h";
include "modules/widgets/OpWidget.h";
include "modules/skin/OpSkinManager.h";

html
{
//! <!doctype html>
//! <html><body>
//! <input type="checkbox"></input>
//! <input type="checkbox" style="margin: 10px; width: 20px; height: 20px"></input>
//! <input type="checkbox" style="margin: 2px; width: 7px; height: 7px"></input>
//! <input type="checkbox" style="margin: 0 10px 10px 0; width: 10px; height: 10px"></input>
//! <input type="checkbox" style="margin: 0 10px 0 10px; width: 10px; height: 10px"></input>
//! </body></html>
}
test("checkbox draw in margin")
require SKIN_SUPPORT;
{
    // doc
	FramesDocument* doc = state.doc;
	verify(doc);
	verify(doc->GetDocRoot());
	LogicalDocument *logdoc = doc->GetLogicalDocument();
    verify(logdoc);

    int i = 1;
    while (HTML_Element* checkbox = find_element("input", i))
    {
        verify(checkbox && checkbox->Type() == Markup::HTE_INPUT && checkbox->GetInputType() == INPUT_CHECKBOX);
        ++i;

        // props
        AutoDeleteHead props_list;
        verify(LayoutProperties::CreateCascade(checkbox, props_list, logdoc->GetHLDocProfile()));
        LayoutProperties* lprops = (LayoutProperties *)props_list.Last();
        verify(lprops->html_element == checkbox);
        HTMLayoutProperties* props = lprops->GetProps();

        // form content
        Box* box = checkbox->GetLayoutBox();
        verify(box);
        Content* content = box->GetContent();
        verify(content && content->IsReplaced() && ((ReplacedContent*)content)->IsForm());
        FormContent* form_content = (FormContent*)content;

        // widget
        FormObject* form_object = form_content->GetFormObject();
        verify(form_object);
        OpWidget* widget = form_object->GetWidget();
        verify(widget && widget->GetType() == OpTypedObject::WIDGET_TYPE_CHECKBOX);

        // skin dimensions
        const char* skin = "Checkbox Skin";
        int skin_width, skin_height;
        widget->GetSkinManager()->GetSize(skin, &skin_width, &skin_height);

        // used margins
        UINT8 extra_left, extra_top, extra_right, extra_bottom;
        form_content->GetUsedMargins(extra_left, extra_top, extra_right, extra_bottom);
        const UINT16 extra_horizontal = extra_left + extra_right;
        const UINT16 extra_vertical = extra_top + extra_bottom;

        const BOOL need_extra_horizontal = form_content->GetWidth() < skin_width;
        const BOOL room_in_margin_horizontal = form_content->GetWidth() + props->margin_left + props->margin_right >= skin_width;
        const BOOL can_use_skin_horizontal = !need_extra_horizontal || room_in_margin_horizontal;

        const BOOL need_extra_vertical = form_content->GetHeight() < skin_height;
        const BOOL room_in_margin_vertical = form_content->GetHeight() + props->margin_top + props->margin_bottom >= skin_height;
        const BOOL can_use_skin_vertical = !need_extra_vertical || room_in_margin_vertical;

        verify(extra_left <= props->margin_left);
        verify(extra_top <= props->margin_top);
        verify(extra_right <= props->margin_right);
        verify(extra_bottom <= props->margin_bottom);

        if (need_extra_horizontal && room_in_margin_horizontal && can_use_skin_vertical)
        {
            verify(extra_horizontal > 0 && form_content->GetWidth() + extra_horizontal <= skin_width);
        }
        else
        {
            verify(!extra_horizontal);
        }

        if (need_extra_vertical && room_in_margin_vertical && can_use_skin_horizontal)
        {
            verify(extra_vertical > 0 && form_content->GetHeight() + extra_vertical <= skin_height);
        }
        else
        {
            verify(!extra_vertical);
        }
    }
}

html
{
//! <!doctype html>
//! <html>
//!  <head><style type="text/css"> * { font-size: 8px; font-family: ahem; } input { margin: 0; } </style></head>
//!  <body>
//!   <div style="width: 26px; padding: 0; margin: 0">
//!    <input type="checkbox"></input><input type="checkbox"></input>
//!   </div>
//!  </body>
//! </html>
}
test("checkbox width")
{
    // doc
	FramesDocument* doc = state.doc;
	verify(doc);
	verify(doc->GetDocRoot());
	LogicalDocument *logdoc = doc->GetLogicalDocument();
    verify(logdoc);

    HTML_Element* div = find_element("div");
    Box* box = div->GetLayoutBox();
    verify(box && box->IsBlockBox());
    verify(box->GetHeight() == 13);
}

html
{
//! <!doctype html>
//! <html>
//!  <body>
//!   <input type="checkbox" style="margin-bottom: 0"></input><input type="checkbox" style="margin-bottom: 20px"></input>
//!  </body>
//! </html>
}
test("checkbox vertical alignment")
{
    // doc
	FramesDocument* doc = state.doc;
	verify(doc);
	verify(doc->GetDocRoot());
	LogicalDocument *logdoc = doc->GetLogicalDocument();
    verify(logdoc);

    const int num_elms = 2;
    RECT rect[num_elms];

    for (int i = 0; i < num_elms; ++i)
    {
        HTML_Element* elm = find_element("input", i+1);
        verify(elm && elm->Type() == Markup::HTE_INPUT && elm->GetInputType() == INPUT_CHECKBOX);

        Box* box = elm->GetLayoutBox();
        box->GetRect(doc, BOUNDING_BOX, rect[i]);

        // checkboxes should be vertically aligned
        if (i > 0)
            verify(rect[i-1].top == rect[i].top && rect[i-1].bottom == rect[i].bottom);
    }
}
