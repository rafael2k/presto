/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "layout.transitions.timing-functions";

require init;
require CSS_TRANSITIONS;
language C++;

include "modules/layout/transitions/transitions.h";

subtest TestSteps(int steps, bool start, double in_out[])
{
	CSS_generic_value step_values[2];
	step_values[0].SetValueType(CSS_INT_NUMBER);
	step_values[0].SetNumber(steps);
	step_values[1].SetValueType(CSS_IDENT);
	step_values[1].SetType(start ? CSS_VALUE_start : CSS_VALUE_end);

	TransitionTimingFunction* func = TransitionTimingFunction::Make(step_values);

	verify(func);

	double in;
	while ((in = *in_out++) >= 0.0)
	{
		double exp_out = *in_out++;
		double out = func->Call(in);
		if (out != exp_out)
			output("(in: %lf, exp: %lf, out: %lf) ... ", in, exp_out, out);
		verify(out == exp_out);
	}
}
finally
{
	OP_DELETE(func);
}

test("step-start")
{
	double in_out[] = { 0, 1, 0.01, 1, 0.99, 1, 1, 1, -1 };
	verify(TestSteps(1, true, in_out));
}

test("step-end")
{
	double in_out[] = { 0, 0, 0.01, 0, 0.99, 0, 1, 1, -1 };
	verify(TestSteps(1, false, in_out));
}

test("steps(2, start)")
{
	double in_out[] = { 0, 0.5, 0.01, 0.5, 0.5, 1, 0.99, 1, 1, 1, -1 };
	verify(TestSteps(2, true, in_out));
}

test("steps(4, start)")
{
	double in_out[] = { 0, 0.25, 0.25, 0.5, 0.5, 0.75, 0.75, 1, 1, 1, -1 };
	verify(TestSteps(4, true, in_out));
}

test("steps(4, end)")
{
	double in_out[] = { 0, 0, 0.25, 0.25, 0.5, 0.5, 0.75, 0.75, 1, 1, -1 };
	verify(TestSteps(4, false, in_out));
}

test("Two steps-function with same values should be equal")
{
	CSS_generic_value step_values[2];
	step_values[0].SetValueType(CSS_INT_NUMBER);
	step_values[0].SetNumber(4);
	step_values[1].SetValueType(CSS_IDENT);
	step_values[1].SetType(CSS_VALUE_start);

	TransitionTimingFunction* func1 = TransitionTimingFunction::Make(step_values);
	verify(func1);
	verify(func1->IsSameTimingFunction(step_values));
}
finally
{
	OP_DELETE(func1);
}
