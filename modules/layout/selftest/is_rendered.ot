/* -*- mode: c++; tab-width: 4; c-basic-offset: 4 -*- */

group "layout.is_rendered";

require init;

include "modules/doc/frm_doc.h";
include "modules/layout/layout_workplace.h";

html
{
	//! <!DOCTYPE html>
	//! <style>input {visibility:visible}</style>
	//! <div style="visibility:hidden"><input type="text"></div>
	//! <div style="visibility:collapse"><input type="text"></div>
	//! <div><input type="text" style="visibility:hidden"></div>
	//! <div><input type="text" style="display:none"></div>
	//! <div style="display:none"><input type="text"></div>
}

test("visibility:visible input inside visibility:hidden is rendered")
{
	verify(state.doc);
	LayoutWorkplace* wp = state.doc->GetLayoutWorkplace();
	verify(wp);

	HTML_Element* input = find_element("input", 1);
	verify(input);
	verify(wp->IsRendered(input));
}

test("visibility:visible input inside display:block with visibility:collapse is rendered")
{
	verify(state.doc);
	LayoutWorkplace* wp = state.doc->GetLayoutWorkplace();
	verify(wp);

	HTML_Element* input = find_element("input", 2);
	verify(input);
	verify(wp->IsRendered(input));
}

test("visibility:hidden input is not rendered")
{
	verify(state.doc);
	LayoutWorkplace* wp = state.doc->GetLayoutWorkplace();
	verify(wp);

	HTML_Element* input = find_element("input", 3);
	verify(input);
	verify(!wp->IsRendered(input));
}

test("display:none input is not rendered")
{
	verify(state.doc);
	LayoutWorkplace* wp = state.doc->GetLayoutWorkplace();
	verify(wp);

	HTML_Element* input = find_element("input", 4);
	verify(input);
	verify(!wp->IsRendered(input));
}

test("input inside display:none is not rendered")
{
	verify(state.doc);
	LayoutWorkplace* wp = state.doc->GetLayoutWorkplace();
	verify(wp);

	HTML_Element* input = find_element("input", 5);
	verify(input);
	verify(!wp->IsRendered(input));
}

html
{
	//! <!DOCTYPE html>
	//! <style>input {visibility:visible}</style>
	//! <table style="visibility:collapse">
	//!   <tbody style="visibility:visible">
	//!     <td><input type="text"></td>
	//!   </tbody>
	//! </table>
	//! <table>
	//!   <td style="visibility:collapse"><input type="text"></td>
	//! </table>
	//! <table>
	//!   <tr style="visibility:collapse">
	//!     <td><input type="text"></td>
	//!   </tr>
	//! </table>
	//! <table>
	//!   <tbody style="visibility:collapse">
	//!     <td><input type="text"></td>
	//!   </tbody>
	//! </table>
	//! <table>
	//!   <tr style="visibility:collapse">
	//!     <td>
	//!       <div>
	//!         <table>
	//!           <td><input type="text"></td>
	//!         </table>
	//!       </div>
	//! </table>
	//! <table>
	//!   <colgroup><colgroup style="visibility:collapse">
	//!   <tr>
	//!     <td><input type="text"></td>
	//!     <td>
	//!       <input type="text">
	//!       <div style="position:absolute"><input type="text"></div>
	//!     </td>
	//!   </tr>
	//! </table>
}

test("visibility:collapse does not apply to table")
{
	verify(state.doc);
	LayoutWorkplace* wp = state.doc->GetLayoutWorkplace();
	verify(wp);

	HTML_Element* input = find_element("input", 1);
	verify(input);
	verify(wp->IsRendered(input));
}

test("visibility:collapse does not apply to table-cell")
{
	verify(state.doc);
	LayoutWorkplace* wp = state.doc->GetLayoutWorkplace();
	verify(wp);

	HTML_Element* input = find_element("input", 2);
	verify(input);
	verify(wp->IsRendered(input));
}

test("input in collapsed table-row not rendered")
{
	verify(state.doc);
	LayoutWorkplace* wp = state.doc->GetLayoutWorkplace();
	verify(wp);

	HTML_Element* input = find_element("input", 3);
	verify(input);
	verify(!wp->IsRendered(input));
}

test("input in collapsed table-row-group not rendered")
{
	verify(state.doc);
	LayoutWorkplace* wp = state.doc->GetLayoutWorkplace();
	verify(wp);

	HTML_Element* input = find_element("input", 4);
	verify(input);
	verify(!wp->IsRendered(input));
}

test("input in table in collapsed table-row not rendered")
{
	verify(state.doc);
	LayoutWorkplace* wp = state.doc->GetLayoutWorkplace();
	verify(wp);

	HTML_Element* input = find_element("input", 5);
	verify(input);
	verify(!wp->IsRendered(input));
}

test("input in non-collapsed column rendered")
{
	verify(state.doc);
	LayoutWorkplace* wp = state.doc->GetLayoutWorkplace();
	verify(wp);

	HTML_Element* input = find_element("input", 6);
	verify(input);
	verify(wp->IsRendered(input));
}

test("input in collapsed column not rendered")
{
	verify(state.doc);
	LayoutWorkplace* wp = state.doc->GetLayoutWorkplace();
	verify(wp);

	HTML_Element* input = find_element("input", 7);
	verify(input);
	verify(!wp->IsRendered(input));
}

test("input in absolute positioned inside collapsed column not rendered")
{
	verify(state.doc);
	LayoutWorkplace* wp = state.doc->GetLayoutWorkplace();
	verify(wp);

	HTML_Element* input = find_element("input", 8);
	verify(input);
	verify(!wp->IsRendered(input));
}
