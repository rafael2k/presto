/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "layout.get_paragraph_list";

require init;

include "modules/doc/frm_doc.h";
include "modules/layout/layout_workplace.h";

global
{
	/**
	 * Checks if the list contains a rectangle of the specified width and
	 * height.
	 * @param [in] list List of rectangles.
	 * @param [in] expected_width Rectangle width we're looking for.
	 * @param [in] expected_height Rectangle height we're looking for.
	 * @return TRUE if a matching rectangle was found and FALSE otherwise.
	 */
	BOOL has_rect(Head& list, int expected_width, int expected_height)
	{
		for (OpRectListItem* li = static_cast<OpRectListItem*>(list.First()); li; li = li->Suc())
		{
			if (li->rect.width == expected_width && li->rect.height == expected_height)
				return TRUE;
		}

		return FALSE;
	}
}

test("AHEM")
{
	short font_number = styleManager->GetFontNumber(UNI_L("AHEM"));
	verify(font_number != -1);
}

html
{
	//! <html><body style="font-size:10px;font-family:'AHEM';">
	//! <div style="width:200px;">
	//! <div style="width:160px;height:160px;float:left;"></div>
	//! XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX</div>
	//! </body></html>
}
test("wrapping small empty float")
	require PREFS_WRITE;
{
	FramesDocument* doc = state.doc;
	LayoutWorkplace* wp = doc->GetLogicalDocument()->GetLayoutWorkplace();

	AutoDeleteHead paragraph_list;
	wp->GetParagraphList(OpRect(0,0,200,200), paragraph_list);

	// We don't care what the paragraph list contains as long as one of the
	// rectangles is the bounding rectangle.
	verify(paragraph_list.Cardinal() >= 1);
	verify(has_rect(paragraph_list, 200, 180));
}

html
{
	//! <html><body style="font-size:10px;font-family:'AHEM';">
	//! <div style="width:200px;">
	//! <div style="width:160px;height:160px;float:left;">YY YY YY YY YY YY YY YY YY YY YY YY YY</div>
	//! XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX</div>
	//! </body></html>
}
test("wrapping small text float")
	require PREFS_WRITE;
{
	FramesDocument* doc = state.doc;
	LayoutWorkplace* wp = doc->GetLogicalDocument()->GetLayoutWorkplace();

	AutoDeleteHead paragraph_list;
	wp->GetParagraphList(OpRect(0,0,200,200), paragraph_list);

	// We don't care what the paragraph list contains as long as one of the
	// rectangles is the bounding rectangle.
	verify(paragraph_list.Cardinal() >= 1);
	verify(has_rect(paragraph_list, 200, 180));
}

html
{
	//! <html><body style="font-size:10px;font-family:'AHEM';">
	//! <div style="width:200px;">
	//! <div style="width:161px;height:161px;float:left;"></div>
	//! XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX</div>
	//! </body></html>
}
test("wrapping large empty float")
	require PREFS_WRITE;
{
	FramesDocument* doc = state.doc;
	LayoutWorkplace* wp = doc->GetLogicalDocument()->GetLayoutWorkplace();

	AutoDeleteHead paragraph_list;
	wp->GetParagraphList(OpRect(0,0,200,200), paragraph_list);

	verify(paragraph_list.Cardinal() == 2);
	verify(!has_rect(paragraph_list, 200, 180));
}

html
{
	//! <html><body style="font-size:10px;font-family:'AHEM';">
	//! <div style="width:200px;">
	//! <div style="width:161px;height:161px;float:left;">YY YY YY YY YY YY YY YY YY YY YY YY YY</div>
	//! XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX</div>
	//! </body></html>
}
test("wrapping large text float")
	require PREFS_WRITE;
{
	FramesDocument* doc = state.doc;
	LayoutWorkplace* wp = doc->GetLogicalDocument()->GetLayoutWorkplace();

	AutoDeleteHead paragraph_list;
	wp->GetParagraphList(OpRect(0,0,200,200), paragraph_list);

	verify(paragraph_list.Cardinal() == 3);
	verify(!has_rect(paragraph_list, 200, 180));
}
