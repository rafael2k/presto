/* -*- mode: c++; tab-width: 4; c-basic-offset: 4 -*- */

group "layout.multicol";

require init;

include "modules/doc/frm_doc.h";
include "modules/layout/box/box.h";
include "modules/layout/box/blockbox.h";
include "modules/layout/box/tables.h";
include "modules/layout/content/content.h";
include "modules/layout/selftest/layout_selftest_utils.h";
include "modules/logdoc/htm_elm.h";

language ecmascript;

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:999px; margin:0;">
	//!  <div id="mc" style="float:left; column-count:3; column-gap:0; orphans:0; widows:0;">
	//!   line<br>line<br><div id="elm">line</div>
	//!  </div>
	//!  <div id="ref" style="float:right;">lineline</div>
	//! </body></html>
}
test("as float")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
	verify(document.getElementById('elm').offsetLeft == document.getElementById('ref').offsetWidth);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:999px; margin:0;">
	//!  <div id="mc" style="position:absolute; column-count:3; column-gap:0; orphans:0; widows:0;">
	//!   line<br>line<br><div id="elm">line</div>
	//!  </div>
	//!  <div id="ref" style="float:right;">lineline</div>
	//! </body></html>
}
test("as position:absolute")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
	verify(document.getElementById('elm').offsetLeft == document.getElementById('ref').offsetWidth);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:999px; margin:0;">
	//!  <div id="mc" style="display:table-cell; column-count:3; column-gap:0; orphans:0; widows:0;">
	//!   line<br>line<br><div id="elm">line</div>
	//!  </div>
	//!  <div id="ref" style="float:right;">lineline</div>
	//! </body></html>
}
test("as display:table-cell")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
	verify(document.getElementById('elm').offsetLeft == document.getElementById('ref').offsetWidth);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:999px; margin:0;">
	//!  <div id="mc" style="display:inline-block; column-count:3; column-gap:0; orphans:0; widows:0;">
	//!   line<br>line<br><div id="elm">line</div>
	//!  </div>
	//!  <div id="ref" style="float:right;">lineline</div>
	//! </body></html>
}
test("as display:inline-block")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
	verify(document.getElementById('elm').offsetLeft == document.getElementById('ref').offsetWidth);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:999px; margin:0;">
	//!  <div id="mc" style="overflow:auto; column-count:3; column-gap:0; orphans:0; widows:0;">
	//!   line<br>line<br><div id="elm">line</div>
	//!  </div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("as overflow:auto")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
	verify(document.getElementById('elm').offsetLeft == 666);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:999px; margin:0;">
	//!  <div id="mc" style="overflow:auto; float:left; column-count:3; column-gap:0; orphans:0; widows:0;">
	//!   line<br>line<br><div id="elm">line</div>
	//!  </div>
	//!  <div id="ref" style="float:right;">lineline</div>
	//! </body></html>
}
test("as overflow:auto float")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
	verify(document.getElementById('elm').offsetLeft == document.getElementById('ref').offsetWidth);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:999px; margin:0;">
	//!  <div id="mc" style="overflow:-o-paged-x; line-height:100px; height:200px; column-count:3; column-gap:0; orphans:0; widows:0;">
	//!   line<br>line<br>line<br>line<br>line<br>line<br>line<br>line<br>
	//!  </div>
	//! </body></html>
}
test("as overflow:-o-paged-x")
require PAGED_MEDIA_SUPPORT;
{
	verify(document.getElementById('mc').offsetHeight == 200);
	verify(document.getElementById('mc').pageCount == 2);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; margin:1px; border:2px solid transparent; padding:3px;"></div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("no content, auto height")
{
	verify(document.getElementById('mc').offsetHeight == 10);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; height:100px; margin:1px; border:2px solid transparent; padding:3px;"></div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("no content, fixed height")
{
	verify(document.getElementById('mc').offsetHeight == 110);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="width:6px; column-gap:0;"><div id="elm">HEST</div></div>
	//!  <script>
	//!   document.body.offsetTop; // force reflow
	//!   document.getElementById('mc').style.columnCount = '2';
	//!   var with_2_columns = document.getElementById('elm').offsetWidth;
	//!   document.getElementById('mc').style.columnCount = '3';
	//!   var with_3_columns = document.getElementById('elm').offsetWidth;
	//!   document.getElementById('mc').style.columnCount = '1';
	//!   var with_1_column = document.getElementById('elm').offsetWidth;
	//!  </script>
	//! </body></html>
}
test("switch from 1 to 2 columns")
{
	verify(with_2_columns == 3);
}
test("switch from 2 to 3 columns")
{
	verify(with_3_columns == 2);
}
test("switch from 3 to 1 column")
{
	verify(with_1_column == 6);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div style="width:6px;">
	//!   <div id="mc" style="column-gap:0;">
	//!    <div id="elm">&nbsp;</div>
	//!   </div>
	//!  </div>
	//!  <script>
	//!   document.body.offsetTop; // force reflow
	//!   document.getElementById('mc').style.columnWidth = '2px';
	//!   var column_width_2px = document.getElementById('elm').offsetWidth;
	//!   document.getElementById('mc').style.columnWidth = '3px';
	//!   var column_width_3px = document.getElementById('elm').offsetWidth;
	//!   document.getElementById('mc').style.columnWidth = 'auto';
	//!   var column_width_auto = document.getElementById('elm').offsetWidth;
	//!   document.getElementById('mc').style.columnWidth = '0';
	//!   var column_width_0 = document.getElementById('elm').offsetWidth;
	//!  </script>
	//! </body></html>
}
test("change column width from auto to 2px")
{
	verify(column_width_2px == 2);
}
test("change column width from 2px to 3px")
{
	verify(column_width_3px == 3);
}
test("change column width from 3px to auto")
{
	verify(column_width_auto == 6);
}
test("change column width from auto to 0")
{
	verify(column_width_0 == 6);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div style="width:0;">
	//!   <div id="mc" style="column-gap:0; column-width:100px;">
	//!    <div id="elm">&nbsp;</div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("column width in zero-width containing block")
{
	verify(document.getElementById('mc').offsetWidth == 0);
	verify(document.getElementById('elm').offsetWidth == 0);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">line<br></div>
	//!  <div id="ref">line<br></div>
	//! </body></html>
}
test("1 line, 3 columns")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
}
test("2 lines, 3 columns")
{
	document.getElementById('mc').innerHTML += "line<br>";
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
}
test("3 lines, 3 columns")
{
	document.getElementById('mc').innerHTML += "line<br>";
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
}
test("4 lines, 3 columns")
{
	document.getElementById('mc').innerHTML += "line<br>";
	document.getElementById('ref').innerHTML += "line<br>";
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
}
test("5 lines, 3 columns")
{
	document.getElementById('mc').innerHTML += "line<br>";
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
}
test("6 lines, 3 columns")
{
	document.getElementById('mc').innerHTML += "line<br>";
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
}
test("7 lines, 3 columns")
{
	document.getElementById('mc').innerHTML += "line<br>";
	verify(document.getElementById('mc').offsetHeight > document.getElementById('ref').offsetHeight);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-width:200px; column-gap:10px; width:420px; margin:10px; border:20px solid; padding:30px;">
	//!   <div id="elm">line</div>
	//!  </div>
	//! </body></html>
}
test("column-width, 2 columns, extra space")
{
	verify(document.getElementById('elm').offsetWidth == 205);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-width:200px; column-gap:10px; width:410px; margin:10px; border:20px solid; padding:30px;">
	//!   <div id="elm">line</div>
	//!  </div>
	//! </body></html>
}
test("column-width, 2 columns")
{
	verify(document.getElementById('elm').offsetWidth == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-width:200px; column-gap:10px; width:408px; margin:10px; border:20px solid; padding:30px;">
	//!   <div id="elm">line</div>
	//!  </div>
	//! </body></html>
}
test("column-width, 1 column, extra space")
{
	verify(document.getElementById('elm').offsetWidth == 408);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-width:200px; column-gap:10px; width:198px; margin:10px; border:20px solid; padding:30px;">
	//!   <div id="elm">line</div>
	//!  </div>
	//! </body></html>
}
test("column-width, 1 column, narrower")
{
	verify(document.getElementById('elm').offsetWidth == 198);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="float:left; column-width:200px;">
	//!   <div id="elm"><br><br></div>
	//!   <div style="width:450px; height:50px;"></div>
	//!   <div style="width:450px; height:50px;"></div>
	//!   <div style="width:450px; height:50px;"></div>
	//!  </div>
	//! </body></html>
}
test("STF, no column-count")
{
	verify(document.getElementById('mc').offsetWidth == 450);
	verify(document.getElementById('elm').offsetWidth == 450);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:100px;">
	//!  <div id="mc" style="float:left; column-count:3; column-width:200px; column-gap:10px; column-fill:auto; height:300px; margin:1px; border:2px solid; padding:3px; line-height:50px;">
	//!   <div id="elm"><br><br><br><br><br><br></div>
	//!  </div>
	//! </body></html>
}
test("STF, column-count, column-width")
{
	verify(document.getElementById('mc').offsetWidth == 630);
	verify(document.getElementById('elm').offsetWidth == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:200px;">
	//!  <div id="mc" style="column-count:3; column-width:300px; column-gap:10px;">
	//!   <div id="elm">line</div>
	//!  </div>
	//! </body></html>
}
test("column-width (greater than available width), column-count")
{
	verify(document.getElementById('elm').offsetWidth == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1019px;">
	//!  <div id="mc" style="column-count:2; column-width:300px; column-gap:10px;">
	//!   <div id="elm">line</div>
	//!  </div>
	//! </body></html>
}
test("column-width (less than available width), column-count (low)")
{
	verify(document.getElementById('elm').offsetWidth == 333);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1019px;">
	//!  <div id="mc" style="column-count:10; column-width:300px; column-gap:10px;">
	//!   <div id="elm">line</div>
	//!  </div>
	//! </body></html>
}
test("column-width (less than available width), column-count (high)")
{
	verify(document.getElementById('elm').offsetWidth == 333);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1019px;">
	//!  <div id="mc" style="overflow:auto; column-count:3; column-gap:10px; height:100px; line-height:100px; orphans:0; widows:0;">
	//!   <br><br><br><br>
	//!  </div>
	//! </body></html>
}
test("overflow:auto and more columns than defined")
{
	/* Available width is 1019px
	   3 columns have been specified, i.e. there will be 2 gaps. Gap width is 10px
	   Width used by 3 columns combined = 1019 - 2*10 = 999
	   Width used by 1 column = 999 / 3 = 333

	   This multicol container, however, actually has 4 columns (overflow).
	   So we actually get 3 gaps.
	   Total multicol container scroll width: 333 * 4 + 10 * 3 = 1362 */

	verify(document.getElementById('mc').scrollWidth == 1362);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3;">
	//!   line
	//!   <div style="break-before:column; orphans:0; widows:0;">line</div>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("break-before:column")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight * 5);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   <div style="break-after:column;">line</div>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("break-after:column")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight * 4);
}

html
{
	//! <!DOCTYPE html>
	//! <html><head>
	//!  <style>.x { break-before:avoid; }</style>
	//!  </head><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!  </div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("break-before:avoid")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight * 9);
}

html
{
	//! <!DOCTYPE html>
	//! <html><head>
	//!  <style>.x { break-after:avoid; }</style>
	//!  </head><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!  </div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("break-after:avoid")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight * 9);
}

html
{
	//! <!DOCTYPE html>
	//! <html><head>
	//!  <style>.x { break-before:avoid; break-after:column; }</style>
	//!  </head><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!  </div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("break-before:avoid; break-after:column")
{
	// 'column' wins over 'avoid'

	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
}

html
{
	//! <!DOCTYPE html>
	//! <html><head>
	//!  <style>.x { break-before:column; break-after:avoid; }</style>
	//!  </head><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!   <div class="x">line</div>
	//!  </div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("break-before:column; break-after:avoid")
{
	// 'column' wins over 'avoid'

	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
}

html
{
	//! <!DOCTYPE html>
	//! <html><head>
	//!  <style></style>
	//!  </head><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   <div>line<br>line<br>line</div>
	//!   <div style="break-inside:avoid;">line<br>line<br>line</div>
	//!   <div>line<br>line<br>line</div>
	//!   <div>line<br>line<br>line</div>
	//!  </div>
	//!  <div id="ref">line<br>line<br>line<br>line<br>line<br>line</div>
	//! </body></html>
}
test("break-inside:avoid")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
}

html
{
	//! <!DOCTYPE html>
	//! <html><head>
	//!  <style></style>
	//!  </head><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   <div>line<br>line<br>line</div>
	//!   <div style="break-inside:avoid;"><div>line<br>line<br>line</div></div>
	//!   <div>line<br>line<br>line</div>
	//!   <div>line<br>line<br>line</div>
	//!  </div>
	//!  <div id="ref">line<br>line<br>line<br>line<br>line<br>line</div>
	//! </body></html>
}
test("break-inside:avoid nested")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
}

html
{
	//! <!DOCTYPE html>
	//! <html><head>
	//!  <style></style>
	//!  </head><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   <div>line<br>line</div>
	//!   <div style="break-inside:avoid;"><div style="break-after:column;">line<br>line</div>line<br>line</div>
	//!   <div>line<br>line<br>line</div>
	//!   <div>line<br>line<br>line</div>
	//!  </div>
	//!  <div id="ref">line<br>line<br>line<br>line</div>
	//! </body></html>
}
test("break-inside:avoid with break-after:column")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   line<br>
	//!   <br style="break-before:column;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("break-before:column on BR")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight * 5);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   line<br>
	//!   line<br style="break-before:column;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("break-before:column on BR terminating line")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight * 5);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="position:relative; column-count:3; orphans:0; widows:0; column-gap:0; width:600px; line-height:100px;">
	//!   line<br>
	//!   <span id="elm1">line</span><br>
	//!   <br style="break-before:column;">
	//!   <div id="elm2">line</div>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("break-before:column on BR following BR terminating line")
{
	verify(document.getElementById('elm1').offsetLeft == 0);
	verify(document.getElementById('elm2').offsetLeft == 200);
	verify(document.getElementById('elm2').offsetTop == 100);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   line<br>
	//!   <br style="break-after:column;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("break-after:column on BR")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight * 4);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   line<br>
	//!   line<br style="break-after:column;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("break-after:column on BR terminating line")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight * 4);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="position:relative; column-count:3; column-gap:0; orphans:0; widows:0; width:600px; line-height:100px;">
	//!   line<br>
	//!   <span id="elm1">line</span><br>
	//!   <br style="break-after:column;">
	//!   <div id="elm2">line</div>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("break-after:column on BR following BR terminating line")
{
	verify(document.getElementById('elm1').offsetLeft == 0);
	verify(document.getElementById('elm2').offsetLeft == 200);
	verify(document.getElementById('elm2').offsetTop == 0);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   <br style="break-before:avoid;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("break-before:avoid on BR")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight * 5);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br style="break-before:avoid;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("break-before:avoid on BR terminating line")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight * 4);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="position:relative; column-count:3; column-gap:0; orphans:0; widows:0; width:600px; line-height:100px;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   <br style="break-before:avoid;">
	//!   <div id="elm">line</div>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("break-before:avoid on BR following BR terminating line")
{
	verify(document.getElementById('elm').offsetLeft == 200);
	verify(document.getElementById('elm').offsetTop == 0);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   <br style="break-after:avoid;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("break-after:avoid on BR")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight * 5);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; position:relative; orphans:0; widows:0;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br style="break-after:avoid;">
	//!   <span id="elm">line</span><br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//!  <div id="ref">ref</div>
	//! </body></html>
}
test("break-after:avoid on BR terminating line")
{
	verify(document.getElementById('mc').offsetHeight == document.getElementById('ref').offsetHeight * 5);
	verify(document.getElementById('elm').offsetLeft == 0);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="position:relative; column-count:3; orphans:0; widows:0; column-gap:0; width:600px; line-height:100px;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   <span id="elm1">line</span><br>
	//!   <br style="break-after:avoid;">
	//!   <div id="elm2">line</div>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("break-after:avoid on BR following BR terminating line")
{
	verify(document.getElementById('elm1').offsetLeft == 0);
	verify(document.getElementById('elm2').offsetLeft == 200);
	verify(document.getElementById('elm2').offsetTop == 100);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   line
	//!   <br style="break-after:column;">
	//!   <br style="break-before:column; break-after:avoid;">
	//!   line
	//!  </div>
	//!  <div id="ref">
	//!   line<br>line
	//!  </div>
	//! </body></html>
}
test("break-after:column and break-before:column on BR siblings")
language c++;
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* ref = state.doc->GetDocRoot()->GetElmById(UNI_L("ref"));
	verify(ref);
	verify(ref->GetLayoutBox());

	verify(mc->GetHeight() == ref->GetLayoutBox()->GetHeight());
	verify(GetActualColumnCount(mc) == 2);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; line-height:100px;">
	//!   <table cellspacing="0" cellpadding="0">
	//!    <tr style="break-after:avoid;"><td>line</td></tr>
	//!    <tr><td>line</td></tr>
	//!    <tr><td>line</td></tr>
	//!   </table>
	//!  </div>
	//! </body></html>
}
test("break-after:avoid on table-row")
{
	verify(document.getElementById('mc').offsetHeight == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; line-height:100px;">
	//!   <table cellspacing="0" cellpadding="0">
	//!    <tr><td>line</td></tr>
	//!    <tr style="break-before:avoid;"><td>line</td></tr>
	//!    <tr><td>line</td></tr>
	//!   </table>
	//!  </div>
	//! </body></html>
}
test("break-before:avoid on table-row")
{
	verify(document.getElementById('mc').offsetHeight == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; line-height:100px;">
	//!   <table cellspacing="0" cellpadding="0">
	//!    <thead style="break-after:avoid;">
	//!     <tr><td>line</td></tr>
	//!    </thead>
	//!    <tbody>
	//!     <tr><td>line</td></tr>
	//!    </tbody>
	//!   </table>
	//!  </div>
	//! </body></html>
}
test("break-after:avoid on table-row-group")
{
	verify(document.getElementById('mc').offsetHeight == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; line-height:100px;">
	//!   <table cellspacing="0" cellpadding="0">
	//!    <thead>
	//!     <tr><td>line</td></tr>
	//!    </thead>
	//!    <tbody style="break-before:avoid;">
	//!     <tr><td>line</td></tr>
	//!    </tbody>
	//!   </table>
	//!  </div>
	//! </body></html>
}
test("break-before:avoid on table-row-group")
{
	verify(document.getElementById('mc').offsetHeight == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; line-height:100px;">
	//!   <table cellspacing="0" cellpadding="0">
	//!    <caption style="break-after:avoid;">line</caption>
	//!    <tbody>
	//!     <tr><td>line</td></tr>
	//!    </tbody>
	//!   </table>
	//!  </div>
	//! </body></html>
}
test("break-after:avoid on table-caption")
{
	verify(document.getElementById('mc').offsetHeight == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; line-height:100px;">
	//!   <table cellspacing="0" cellpadding="0">
	//!    <caption style="caption-side:bottom; break-before:avoid;">line</caption>
	//!    <tbody>
	//!     <tr><td>line</td></tr>
	//!    </tbody>
	//!   </table>
	//!  </div>
	//! </body></html>
}
test("break-before:avoid on table-caption")
{
	verify(document.getElementById('mc').offsetHeight == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; line-height:100px;">
	//!   <table cellspacing="0" cellpadding="0">
	//!    <tbody>
	//!     <tr><td>line</td></tr>
	//!    </tbody>
	//!    <caption style="break-before:avoid;">line</caption>
	//!   </table>
	//!  </div>
	//! </body></html>
}
test("break-before:avoid on top table-caption")
{
	verify(document.getElementById('mc').offsetHeight == 100);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; line-height:100px;">
	//!   <table cellspacing="0" cellpadding="0" style="break-inside:avoid;">
	//!    <caption style="break-inside:auto;">line<br>line</caption>
	//!    <tbody style="break-inside:auto;">
	//!     <tr><td>line</td></tr>
	//!     <tr><td>line</td></tr>
	//!    </tbody>
	//!   </table>
	//!  </div>
	//! </body></html>
}
test("break-inside:avoid on table")
{
	verify(document.getElementById('mc').offsetHeight == 400);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="block"></div>
	//!  <div id="mc" style="column-width:200px; column-count:3; column-rule-width:10px; column-rule-style:dashed; column-rule-color:#123456;"></div>
	//! </body></html>
}
test("getComputedStyle shorthand properties")
{
	// non-shorthand properties are tested in get_computed_decl.ot

	var block_style = getComputedStyle(document.getElementById("block"), "");
	var mc_style = getComputedStyle(document.getElementById("mc"), "");

	verify(block_style.columns == "auto");

	verify(mc_style.columns == "200px 3");
	verify(mc_style.columnRule == "10px dashed rgb(18, 52, 86)");
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:500px; margin:10px; border:50px solid; padding:60px;">
	//!   <div style="height:400px;"></div>
	//!   <div id="elm" style="height:100px;"></div>
	//!  </div>
	//! </body></html>
}
test("offsetLeft/Top in first column")
{
	verify(document.getElementById('elm').offsetLeft == 120);
	verify(document.getElementById('elm').offsetTop == 520);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:500px; margin:10px; border:50px solid; padding:60px;">
	//!   <div style="height:400px;"></div>
	//!   <div id="elm" style="height:400px;"></div>
	//!  </div>
	//! </body></html>
}
test("offsetLeft/Top in first and second column")
{
	verify(document.getElementById('elm').offsetLeft == 120);
	verify(document.getElementById('elm').offsetTop == 120);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:500px; margin:10px; border:50px solid; padding:60px;">
	//!   <div style="height:900px;"></div>
	//!   <div id="elm" style="height:100px;"></div>
	//!  </div>
	//! </body></html>
}
test("offsetLeft/Top in second column")
{
	verify(document.getElementById('elm').offsetLeft == 330);
	verify(document.getElementById('elm').offsetTop == 520);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:500px; margin:10px; border:50px solid; padding:60px;">
	//!   <div style="height:900px;"></div>
	//!   <div id="elm" style="height:400px;"></div>
	//!  </div>
	//! </body></html>
}
test("offsetLeft/Top in second and third column")
{
	verify(document.getElementById('elm').offsetLeft == 330);
	verify(document.getElementById('elm').offsetTop == 120);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:500px; margin:10px; border:50px solid; padding:60px;">
	//!   <div style="height:900px;"></div>
	//!   <div style="position:relative;">
	//!    <div style="height:200px;"></div>
	//!    <div id="elm" style="height:100px;"></div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("offsetLeft/Top in third column, offsetParent in second")
{
	verify(document.getElementById('elm').offsetLeft == 210);
	verify(document.getElementById('elm').offsetTop == -300);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:500px; margin:10px; border:50px solid; padding:60px;">
	//!   <div style="height:1000px;"></div>
	//!   <div id="elm" style="height:100px;"></div>
	//!  </div>
	//! </body></html>
}
test("offsetLeft/Top in third column, tall previous sibling")
{
	verify(document.getElementById('elm').offsetLeft == 540);
	verify(document.getElementById('elm').offsetTop == 120);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:500px; margin:10px; border:50px solid; padding:60px; line-height:100px;">
	//!   line
	//!   <div id="elm" style="height:900px;"></div>
	//!  </div>
	//! </body></html>
}
test("offsetWidth/Height on block that lives in 2 columns")
{
	verify(document.getElementById('elm').offsetWidth == 410);
	verify(document.getElementById('elm').offsetHeight == 500);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:500px; margin:10px; border:50px solid; padding:60px; line-height:100px;">
	//!   line
	//!   <div id="elm" style="height:1000px;"></div>
	//!  </div>
	//! </body></html>
}
test("offsetWidth/Height on block that lives in 3 columns")
{
	verify(document.getElementById('elm').offsetWidth == 620);
	verify(document.getElementById('elm').offsetHeight == 500);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:500px; margin:10px; border:50px solid; padding:60px; line-height:100px;">
	//!   line
	//!   <div id="table" style="display:table; width:100px;">
	//!    <div id="caption" style="display:table-caption; width:50px;">
	//!     <div style="height:450px;"></div>
	//!    </div>
	//!    <div id="rowgroup" style="display:table-row-group;">
	//!     <div style="display:table-row;">
	//!      <div style="height:300px;"></div>
	//!     </div>
	//!     <div style="display:table-row;">
	//!      <div style="height:300px;"></div>
	//!     </div>
	//!    </div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("offsetWidth/Height on table that lives in 3 columns")
{
	verify(document.getElementById('table').offsetWidth == 520);
	verify(document.getElementById('table').offsetHeight == 500);
}
test("offsetWidth/Height on table-caption that lives in 2 columns")
{
	verify(document.getElementById('caption').offsetWidth == 260);
	verify(document.getElementById('caption').offsetHeight == 500);
}
test("offsetWidth/Height on table-row-group that lives in 2 columns")
{
	verify(document.getElementById('rowgroup').offsetWidth == 310);
	verify(document.getElementById('rowgroup').offsetHeight == 350);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:450px; margin:10px;">
	//!   <table cellspacing="1" cellpadding="1" style="margin:10px; line-height:100px;">
	//!    <thead>
	//!     <tr>
	//!      <td>
	//!       <div id="first" style="position:relative; width:100px;">line</div>
	//!       <div id="second" style="position:relative; width:100px;">line</div>
	//!      </td>
	//!      <td>
	//!       <div id="third" style="position:relative;">line</div>
	//!      </td>
	//!     </tr>
	//!     <tr>
	//!      <td>
	//!       <div id="fourth" style="position:relative; width:100px;">line</div>
	//!      </td>
	//!     </tr>
	//!     <tr>
	//!      <td>
	//!       <div id="fifth" style="position:relative; width:100px;">line</div>
	//!      </td>
	//!     </tr>
	//!    </thead>
	//!    <tbody>
	//!     <tr>
	//!      <td>
	//!       <div id="sixth" style="position:relative; width:100px;">line</div>
	//!       <div style="height:200px;">line</div>
	//!      </td>
	//!     </tr>
	//!    </tbody>
	//!    <caption style="caption-side:top;"><div id="seventh" style="position:relative;">line</div></caption>
	//!    <caption style="caption-side:bottom;"><div id="eighth" style="position:relative;">line</div></caption>
	//!   </table>
	//!  </div>
	//! </body></html>
}
test("block offsetLeft/Top inside cell 1 row 1 in THEAD, elm 1")
{
	verify(document.getElementById('first').offsetLeft == 22);
	verify(document.getElementById('first').offsetTop == 122);
}
test("block offsetLeft/Top inside cell 1 row 1 in THEAD, elm 2")
{
	verify(document.getElementById('second').offsetLeft == 22);
	verify(document.getElementById('second').offsetTop == 222);
}
test("block offsetLeft/Top inside cell 2 row 1 in THEAD")
{
	verify(document.getElementById('third').offsetLeft == 125);
	verify(document.getElementById('third').offsetTop == 172);
}
test("block offsetLeft/Top inside cell 1 row 2 in THEAD")
{
	verify(document.getElementById('fourth').offsetLeft == 22);
	verify(document.getElementById('fourth').offsetTop == 325);
}
test("block offsetLeft/Top inside cell 1 row 3 in THEAD")
{
	// second column

	verify(document.getElementById('fifth').offsetLeft == 232);
	verify(document.getElementById('fifth').offsetTop == 11);
}
test("block offsetLeft/Top inside cell 1 row 4 in TBODY")
{
	// second column

	verify(document.getElementById('sixth').offsetLeft == 232);
	verify(document.getElementById('sixth').offsetTop == 114);
}
test("block offsetLeft/Top inside top table caption")
{
	// first column

	verify(document.getElementById('seventh').offsetLeft == 20);
	verify(document.getElementById('seventh').offsetTop == 20);
}
test("block offsetLeft/Top inside bottom table caption")
{
	// third column

	verify(document.getElementById('eighth').offsetLeft == 440);

	/* With the current implementation, the last vertical border-spacing
	   (between TBODY and the bottom CAPTION) in the table is moved to this
	   column. There's nothing that mandates this behavior, but it's not that
	   wrong either. */

	verify(document.getElementById('eighth').offsetTop == 10);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; orphans:0; widows:0; width:620px; margin:10px; border:50px solid; padding:60px; line-height:100px;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   <div id="elm" style="column-span:all; height:200px;"></div>
	//!  </div>
	//! </body></html>
}
test("offsetLeft/Top/WidthHeight on spanned element")
{
	verify(document.getElementById('elm').offsetLeft == 120);
	verify(document.getElementById('elm').offsetTop == 220);
	verify(document.getElementById('elm').offsetWidth == 620);
	verify(document.getElementById('elm').offsetHeight == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; orphans:0; widows:0; width:620px; margin:10px; border:50px solid; padding:60px; line-height:100px;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   <div style="column-span:all;">
	//!    <div id="elm" style="height:200px;"></div>
	//!   </div>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("offsetLeft/Top/WidthHeight on block in spanned element 1")
{
	verify(document.getElementById('elm').offsetLeft == 120);
	verify(document.getElementById('elm').offsetTop == 220);
	verify(document.getElementById('elm').offsetWidth == 620);
	verify(document.getElementById('elm').offsetHeight == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; orphans:0; widows:0; width:620px; margin:10px; border:50px solid; padding:60px; line-height:100px;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   <div style="column-span:all;">
	//!    line<br>
	//!    <div id="elm" style="height:200px;"></div>
	//!    line<br>
	//!   </div>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("offsetLeft/Top/WidthHeight on block in spanned element 2")
{
	verify(document.getElementById('elm').offsetLeft == 120);
	verify(document.getElementById('elm').offsetTop == 320);
	verify(document.getElementById('elm').offsetWidth == 620);
	verify(document.getElementById('elm').offsetHeight == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:450px; margin:10px; line-height:100px;">
	//!   line<br>line<br>line<br>line<br>
	//! <!-- second column --->
	//!   line<br>
	//!   <table cellspacing="1" cellpadding="1" style="margin:10px;">
	//!    <thead>
	//!     <tr>
	//!      <td>line<br>line<br>line<br></td>
	//!     </tr>
	//!    </thead>
	//! <!-- third column --->
	//!    <tbody>
	//!     <tr>
	//!      <td id="cell" style="position:relative;">line</td>
	//!     </tr>
	//!     <tr id="row" style="position:relative;">
	//!      <td>line</td>
	//!     </tr>
	//!    </tbody>
	//!    <tfoot id="rowgroup" style="position:relative;">
	//!     <tr>
	//!      <td>line</td>
	//!     </tr>
	//!    </tfoot>
	//!    <caption id="caption" style="position:relative; caption-side:bottom;">line</caption>
	//!   </table>
	//!  </div>
	//! </body></html>
}
test("cell offsetLeft/Top against root")
{
	verify(document.getElementById('cell').offsetLeft == 441);
	verify(document.getElementById('cell').offsetTop == 10);
}
test("row offsetLeft/Top against root")
{
	verify(document.getElementById('row').offsetLeft == 441);
	verify(document.getElementById('row').offsetTop == 113);
}
test("row-group offsetLeft/Top against root")
{
	verify(document.getElementById('rowgroup').offsetLeft == 441);
	verify(document.getElementById('rowgroup').offsetTop == 216);
}
test("caption offsetLeft/Top against root")
{
	verify(document.getElementById('caption').offsetLeft == 440);
	verify(document.getElementById('caption').offsetTop == 319);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:450px; margin:10px; line-height:100px;">
	//!   line<br>line<br>line<br>line<br>
	//! <!-- second column --->
	//!   line<br>
	//!   <table id="table" cellspacing="1" cellpadding="1" style="position:relative; margin:10px;">
	//!    <thead>
	//!     <tr>
	//!      <td>line<br>line<br>line<br></td>
	//!     </tr>
	//!    </thead>
	//! <!-- third column --->
	//!    <tbody>
	//!     <tr>
	//!      <td id="cell" style="position:relative;">line</td>
	//!     </tr>
	//!     <tr id="row" style="position:relative;">
	//!      <td>line</td>
	//!     </tr>
	//!    </tbody>
	//!    <tfoot id="rowgroup" style="position:relative;">
	//!     <tr>
	//!      <td>line</td>
	//!     </tr>
	//!    </tfoot>
	//!    <caption id="caption" style="position:relative; caption-side:bottom;">line</caption>
	//!   </table>
	//!  </div>
	//! </body></html>
}
test("table offsetLeft/Top against root")
{
	verify(document.getElementById('table').offsetLeft == 230);
	verify(document.getElementById('table').offsetTop == 10);
}
test("cell offsetLeft/Top against table")
{
	verify(document.getElementById('cell').offsetLeft == 211);
	verify(document.getElementById('cell').offsetTop == -110);
}
test("row offsetLeft/Top against table")
{
	verify(document.getElementById('row').offsetLeft == 211);
	verify(document.getElementById('row').offsetTop == -7);
}
test("row-group offsetLeft/Top against table")
{
	verify(document.getElementById('rowgroup').offsetLeft == 211);
	verify(document.getElementById('rowgroup').offsetTop == 96);
}
test("caption offsetLeft/Top against table")
{
	verify(document.getElementById('caption').offsetLeft == 210);
	verify(document.getElementById('caption').offsetTop == 199);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:450px; margin:10px; line-height:100px;">
	//!   line<br>line<br>line<br>line<br>
	//! <!-- second column --->
	//!   line<br>
	//!   <table id="table" cellspacing="1" cellpadding="1" style="position:relative; margin:10px;">
	//!    <thead>
	//!     <tr>
	//!      <td>line<br>line<br>line<br></td>
	//!     </tr>
	//!    </thead>
	//! <!-- third column --->
	//!    <tbody style="position:relative;">
	//!     <tr>
	//!      <td>line<br>line<br>line<br>line<br></td>
	//!     </tr>
	//!     <tr>
	//!      <td id="cell" style="position:relative;">line</td>
	//!     </tr>
	//!     <tr id="row" style="position:relative;">
	//!      <td>line</td>
	//!     </tr>
	//!    </tbody>
	//!   </table>
	//!  </div>
	//! </body></html>
}
test("cell offsetLeft/Top against table-row-group")
{
	verify(document.getElementById('cell').offsetLeft == 210);
	verify(document.getElementById('cell').offsetTop == 0);
}
test("row offsetLeft/Top against table-row-group")
{
	verify(document.getElementById('row').offsetLeft == 210);
	verify(document.getElementById('row').offsetTop == 103);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:450px; margin:10px; line-height:100px;">
	//!   line<br>line<br>line<br>line<br>line<br>
	//!   <div style="column-count:2; column-gap:10px; orphans:0; widows:0; margin:10px;">
	//!    line<br>line<br>line<br>line<br>line<br>line<br>line<br>
	//!    <div id="elm">line</div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("multicol in multicol offsetLeft/Top")
{
	verify(document.getElementById('elm').offsetLeft == 535);
	verify(document.getElementById('elm').offsetTop == 10);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:450px; margin:10px; line-height:100px;">
	//!   line<br>line<br>line<br>line<br>line<br>
	//!   <div style="column-count:2; column-gap:10px; orphans:0; widows:0; margin:10px;">
	//!    <div style="column-count:2; column-gap:10px; orphans:0; widows:0; margin:10px 10px 0 10px;">
	//!     line<br>line<br>line<br>line<br>line<br>line<br>line<br>line<br>line<br>line<br>line<br>line<br>line<br>line<br>line<br>
	//!     <div id="elm">line</div>
	//!    </div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("multicol in multicol in multicol offsetLeft/Top")
{
	verify(Math.floor(document.getElementById('elm').offsetLeft) == 583);
	verify(document.getElementById('elm').offsetTop == 10);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:450px; margin:10px; line-height:100px;">
	//!   line<br>line<br>line<br>line<br>line<br>
	//!   <div style="column-count:2; column-gap:10px; orphans:0; widows:0; margin:10px;">
	//!    line<br>
	//!    <div id="elm" style="column-span:all;">spanner</div>
	//!    line<br>line<br>line<br>line<br>line<br>line<br>line<br>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("spanner in nested multicol offsetLeft/Top #1")
{
	verify(Math.floor(document.getElementById('elm').offsetLeft) == 230);
	verify(document.getElementById('elm').offsetTop == 220);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; margin:10px; line-height:100px;">
	//!   line
	//!   <div style="column-count:2; column-gap:10px; orphans:0; widows:0;">
	//!    <div id="elm" style="column-span:all;">spanner</div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("spanner in nested multicol offsetLeft/Top #2")
{
	verify(Math.floor(document.getElementById('elm').offsetLeft) == 220);
	verify(document.getElementById('elm').offsetTop == 10);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:200px; margin:10px; line-height:100px;">
	//!   line
	//!   <div style="column-count:2; column-gap:10px; orphans:0; widows:0;">
	//!    <div id="elm" style="column-span:all;">spanner<br>spanner</div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("spanner crossing outer column boundary #1")
{
	verify(document.getElementById('elm').offsetLeft == 10);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:200px; margin:10px; line-height:100px;">
	//!   <div style="column-count:2; column-gap:10px; orphans:0; widows:0;">
	//!   line
	//!    <div id="elm" style="column-span:all;">spanner<br>spanner</div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("spanner crossing outer column boundary #2")
{
	verify(document.getElementById('elm').offsetLeft == 10);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:200px; margin:10px; line-height:100px;">
	//!   <div style="column-count:2; column-gap:10px; orphans:0; widows:0;">
	//!   line<br>line
	//!    <div id="elm" style="column-span:all;">spanner<br>spanner</div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("spanner crossing outer column boundary #3")
{
	verify(document.getElementById('elm').offsetLeft == 10);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="overflow:-o-paged-x; column-count:3; column-gap:10px; column-fill:auto; orphans:0; widows:0; width:620px; height:250px; margin:10px; line-height:100px;">
	//!   line<br>line<br>line<br>line<br>line<br>line<br>
	//!   line<br>line<br>line<br>
	//!   <div id="elm">line</div>
	//!  </div>
	//! </body></html>
}
test("paged multicol offsetLeft/Top")
require PAGED_MEDIA_SUPPORT;
{
	verify(Math.floor(document.getElementById('elm').offsetLeft) == 840);
	verify(document.getElementById('elm').offsetTop == 110);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0; width:999px; position:relative; font-size:16px;">
	//!  <div id="mc" style="column-count:3; column-gap:0; orphans:0; widows:0; line-height:100px;">
	//!   line<br>line<br>
	//!   line<br>
	//!    <div id="elm" style="position:absolute;">
	//!     filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler
	//!    </div>
	//!   line<br>
	//!   line<br>line<br>
	//!  </div>
	//! </body></html>
}
test("abspos with auto-width in second column")
disabled; // doesn't work properly
{
	verify(document.getElementById('elm').offsetLeft == 333);
	verify(document.getElementById('elm').offsetWidth == 666);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0; width:999px; position:relative; font-size:16px;">
	//!  <div id="mc" style="column-count:3; column-gap:0; orphans:0; widows:0; line-height:100px;">
	//!   line<br>line<br>
	//!   line<br>
	//!    <div>
	//!     <div id="elm" style="position:absolute;">
	//!     filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler
	//!     </div>
	//!    </div>
	//!   line<br>
	//!   line<br>line<br>
	//!  </div>
	//! </body></html>
}
test("abspos with auto-width in block in second column")
disabled; // doesn't work properly
{
	verify(document.getElementById('elm').offsetLeft == 333);
	verify(document.getElementById('elm').offsetWidth == 666);
}

language c++;

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:500px;">
	//!  <div id="mc1" style="column-width:140px; column-gap:200px;"></div>
	//!  <div id="mc2" style="column-width:140px; column-gap:220px;"></div>
	//!  <div id="mc3" style="column-width:140px; column-gap:221px;"></div>
	//! </body></html>
}
test("column-width and large gap, room for 2 columns")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc1"));
	verify(mc);
	verify(mc->GetColumnCount() == 2);
}
test("column-width and large gap, barely room for 2 columns")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc2"));
	verify(mc);
	verify(mc->GetColumnCount() == 2);
}
test("column-width and large gap, room for 1 column")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc3"));
	verify(mc);
	verify(mc->GetColumnCount() == 1);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:500px;">
	//!  <div id="mc100" style="column-count:4; column-gap:33px; width:100px;"></div>
	//!  <div id="mc99" style="column-count:4; column-gap:33px; width:99px;"></div>
	//!  <div id="mc98" style="column-count:4; column-gap:33px; width:98px;"></div>
	//!  <div id="mc67" style="column-count:4; column-gap:33px; width:67px;"></div>
	//!  <div id="mc66" style="column-count:4; column-gap:33px; width:66px;"></div>
	//!  <div id="mc65" style="column-count:4; column-gap:33px; width:65px;"></div>
	//!  <div id="mc34" style="column-count:4; column-gap:33px; width:34px;"></div>
	//!  <div id="mc33" style="column-count:4; column-gap:33px; width:33px;"></div>
	//!  <div id="mc32" style="column-count:4; column-gap:33px; width:32px;"></div>
	//!  <div id="mcextra1" style="column-count:4; column-gap:1000px; width:66px;"></div>
	//!  <div id="mcextra2" style="column-count:3; column-gap:33px; width:99px;"></div>
	//! </body></html>
}
test("column-count:4; column-gap:33px; width:100px;")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc100"));
	verify(mc);
	verify(mc->GetColumnCount() == 4);
}
test("column-count:4; column-gap:33px; width:99px;")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc99"));
	verify(mc);
	verify(mc->GetColumnCount() == 3);
}
test("column-count:4; column-gap:33px; width:98px;")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc98"));
	verify(mc);
	verify(mc->GetColumnCount() == 2);
}
test("column-count:4; column-gap:33px; width:67px;")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc67"));
	verify(mc);
	verify(mc->GetColumnCount() == 2);
}
test("column-count:4; column-gap:33px; width:66px;")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc66"));
	verify(mc);
	verify(mc->GetColumnCount() == 2);
}
test("column-count:4; column-gap:33px; width:65px;")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc65"));
	verify(mc);
	verify(mc->GetColumnCount() == 1);
}
test("column-count:4; column-gap:33px; width:34px;")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc34"));
	verify(mc);
	verify(mc->GetColumnCount() == 1);
}
test("column-count:4; column-gap:33px; width:33px;")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc33"));
	verify(mc);
	verify(mc->GetColumnCount() == 1);
}
test("column-count:4; column-gap:33px; width:32px;")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc32"));
	verify(mc);
	verify(mc->GetColumnCount() == 1);
}
test("column-count and ridiculously large gap")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mcextra1"));
	verify(mc);
	verify(mc->GetColumnCount() == 1);
}
test("column-count and large gap, plenty of space")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mcextra2"));
	verify(mc);
	verify(mc->GetColumnCount() == 3);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:100px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; height:200px; margin:1px; border:2px solid; padding:3px; line-height:100px;">
	//!   line<br>line
	//!  </div>
	//! </body></html>
}
test("Height-restricted, lines in one column")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 1);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:100px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; height:199px; margin:1px; border:2px solid; padding:3px; line-height:100px; orphans:0; widows:0;">
	//!   line<br>line
	//!  </div>
	//! </body></html>
}
test("Height-restricted, lines in two columns")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 2);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="runin" style="display:run-in;">run in</div>
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   line<br>line
	//!  </div>
	//!  <div id="ref">line</div>
	//! </body></html>
}
test("run-in")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* ref = state.doc->GetDocRoot()->GetElmById(UNI_L("ref"));
	verify(ref);
	verify(ref->GetLayoutBox());

	HTML_Element* runin = state.doc->GetDocRoot()->GetElmById(UNI_L("runin"));
	verify(runin);
	verify(runin->GetLayoutBox());
	verify(runin->GetLayoutBox()->IsInlineRunInBox());

	verify(mc->GetHeight() == ref->GetLayoutBox()->GetHeight());
	verify(GetActualColumnCount(mc) == 2);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; orphans:0; widows:0; max-height:1px; line-height:50px;">
	//!   line<br>line<br>line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("max-height (tiny)")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 1);
	verify(GetActualColumnCount(mc) == 7);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; orphans:0; widows:0; max-height:149px; line-height:50px;">
	//!   line<br>line<br>line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("max-height (small)")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 149);
	verify(GetActualColumnCount(mc) == 4);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; orphans:0; widows:0; max-height:151px; line-height:50px;">
	//!   line<br>line<br>line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("max-height (medium)")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 150);
	verify(GetActualColumnCount(mc) == 3);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; orphans:0; widows:0; max-height:999px; line-height:50px;">
	//!   line<br>line<br>line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("max-height (large)")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 150);
	verify(GetActualColumnCount(mc) == 3);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; orphans:0; widows:0; height:1000px; max-height:1px; line-height:50px;">
	//!   line<br>line<br>line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("max-height and height (tiny)")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 1);
	verify(GetActualColumnCount(mc) == 7);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; orphans:0; widows:0; height:1000px; max-height:999px; line-height:50px;">
	//!   line<br>line<br>line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("max-height and height (large)")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 999);
	verify(GetActualColumnCount(mc) == 1);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; orphans:0; widows:0; min-height:100px; line-height:50px;">
	//!   line<br>line<br>line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("min-height (tiny)")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 150);
	verify(GetActualColumnCount(mc) == 3);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; orphans:0; widows:0; min-height:300px; line-height:50px;">
	//!   line<br>line<br>line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("min-height (small)")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 300);
	verify(GetActualColumnCount(mc) == 3);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; orphans:0; widows:0; min-height:1000px; line-height:50px;">
	//!   line<br>line<br>line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("min-height (large)")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 1000);
	verify(GetActualColumnCount(mc) == 3);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; orphans:0; widows:0; height:1px; min-height:300px; line-height:50px;">
	//!   line<br>line<br>line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("min-height (small) and height")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 300);
	verify(GetActualColumnCount(mc) == 2);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; orphans:0; widows:0; height:1px; min-height:1000px; line-height:50px;">
	//!   line<br>line<br>line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("min-height (large) and height")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 1000);
	verify(GetActualColumnCount(mc) == 1);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; orphans:0; widows:0; height:1000px; max-height:1px; min-height:100px; line-height:50px;">
	//!   line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("max-height and min-height")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 100);
	verify(GetActualColumnCount(mc) == 2);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px; line-height:100px;">
	//!  <div id="elm">
	//!   <div style="column-count:3; display:inline-block; orphans:0; widows:0;">
	//!    line<br>line<br>line
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("baseline: inline-block")
{
	HTML_Element* elm = state.doc->GetDocRoot()->GetElmById(UNI_L("elm"));
	verify(elm);
	verify(elm->GetLayoutBox());
	verify(elm->GetLayoutBox()->GetHeight() >= 100);
	verify(elm->GetLayoutBox()->GetHeight() < 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px; line-height:100px;">
	//!  <div id="elm">
	//!   <div style="column-count:3; display:inline-block; overflow:hidden; orphans:0; widows:0;">
	//!    line<br>line<br>line
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("baseline: inline-block overflow:hidden")
{
	HTML_Element* elm = state.doc->GetDocRoot()->GetElmById(UNI_L("elm"));
	verify(elm);
	verify(elm->GetLayoutBox());
	verify(elm->GetLayoutBox()->GetHeight() >= 100);
	verify(elm->GetLayoutBox()->GetHeight() < 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px; line-height:100px;">
	//!  <div id="elm">
	//!   <div style="display:inline-block;">
	//!    <div style="column-count:3; orphans:0; widows:0;">
	//!     line<br>line<br>line
	//!    </div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("baseline: inline-block with multicol")
{
	HTML_Element* elm = state.doc->GetDocRoot()->GetElmById(UNI_L("elm"));
	verify(elm);
	verify(elm->GetLayoutBox());
	verify(elm->GetLayoutBox()->GetHeight() >= 100);
	verify(elm->GetLayoutBox()->GetHeight() < 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px; line-height:100px;">
	//!  <div id="elm" style="display:table;">
	//!   <div style="column-count:3; display:table-cell; orphans:0; widows:0;">
	//!    line<br>line<br>line
	//!   </div>
	//!   <div style="display:table-cell;">
	//!    line
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("baseline: table-cell")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	HTML_Element* elm = state.doc->GetDocRoot()->GetElmById(UNI_L("elm"));
	verify(elm);
	verify(elm->GetLayoutBox());
	verify(elm->GetLayoutBox()->GetHeight() == 100);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px; line-height:100px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   line
	//!   <div style="margin-top:600px; height:200px;"></div>
	//!  </div>
	//! </body></html>
}
test("top margin taller than column")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 100);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	verify(column);
	column = column->Suc();
	verify(column);
	verify(column->GetVirtualY() == 700);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px; line-height:100px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   <div style="margin-bottom:600px;">line</div>
	//!   <div style="height:200px;"></div>
	//!  </div>
	//! </body></html>
}
test("bottom margin taller than column")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 100);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	verify(column);
	column = column->Suc();
	verify(column);
	verify(column->GetVirtualY() == 700);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px; line-height:100px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   <div>line</div>
	//!   <div style="break-before:column; margin-top:500px; height:200px;"></div>
	//!  </div>
	//! </body></html>
}
test("top margin after forced column break (break-before)")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 500);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());
	verify(row->GetColumnCount() == 3);

	Column* column = row->GetFirstColumn();
	verify(column);
	column = column->Suc();
	verify(column);
	verify(column->GetVirtualY() == 100);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px; line-height:100px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   <div style="break-after:column;">line</div>
	//!   <div style="margin-top:500px; height:200px;"></div>
	//!  </div>
	//! </body></html>
}
test("top margin after forced column break (break-after)")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 500);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());
	verify(row->GetColumnCount() == 3);

	Column* column = row->GetFirstColumn();
	verify(column);
	column = column->Suc();
	verify(column);
	verify(column->GetVirtualY() == 100);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px; line-height:100px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0;">
	//!   <div style="margin-bottom:1000px;">line</div>
	//!   <div style="break-before:column; margin-top:500px; height:200px;"></div>
	//!  </div>
	//! </body></html>
}
test("top margin after forced column break after bottom margin")
disabled; // our margin handling in the columnizer needs to improve before this one can pass
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());
	verify(row->GetColumnCount() == 3);

	Column* column = row->GetFirstColumn();
	verify(column);
	column = column->Suc();
	verify(column);
	verify(column->GetVirtualY() == 1100);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; orphans:0; widows:0; height:260px; line-height:50px; box-sizing:border-box; margin:1px; border:20px solid; padding:10px;">
	//!   line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("box-sizing:border-box")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 260);
	verify(GetActualColumnCount(mc) == 2);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:720px;">
	//!  <div id="mc" style="column-width:200px; column-gap:10px; border:20px solid; padding:30px; box-sizing:border-box;">
	//!   <div id="elm">line</div>
	//!  </div>
	//! </body></html>
}
test("column-width, box-sizing:border-box, 3 columns")
language ecmascript;
{
	verify(document.getElementById('elm').offsetWidth == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:718px;">
	//!  <div id="mc" style="column-width:200px; column-gap:10px; border:20px solid; padding:30px; box-sizing:border-box;">
	//!   <div id="elm">line</div>
	//!  </div>
	//! </body></html>
}
test("column-width, box-sizing:border-box, 2 columns")
language ecmascript;
{
	verify(document.getElementById('elm').offsetWidth == 304);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; orphans:0; widows:0; max-height:159px; line-height:50px; box-sizing:border-box; margin:1px; border:20px solid; padding:10px;">
	//!   line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("box-sizing:border-box max-height")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 159);
	verify(GetActualColumnCount(mc) == 5);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-fill:auto; orphans:0; widows:0; height:310px; max-height:260px; line-height:50px; box-sizing:border-box; margin:1px; border:20px solid; padding:10px;">
	//!   line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("box-sizing:border-box height max-height")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 260);
	verify(GetActualColumnCount(mc) == 2);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-fill:auto; min-height:360px; line-height:50px; box-sizing:border-box; margin:1px; border:20px solid; padding:10px;">
	//!   line<br>line<br>line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("box-sizing:border-box min-height")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 360);
	verify(GetActualColumnCount(mc) == 3);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-fill:auto; height:350px; min-height:360px; line-height:50px; box-sizing:border-box; margin:1px; border:20px solid; padding:10px;">
	//!   line<br>line<br>line<br>line<br>line<br>line<br>line
	//!  </div>
	//! </body></html>
}
test("box-sizing:border-box height min-height")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 360);
	verify(GetActualColumnCount(mc) == 2);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; width:50%;">
	//!   <div id="spanned" style="column-span:all;"></div>
	//!  </div>
	//! </body></html>
}
test("Spanned element")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(row->GetColumnCount() == 1);
	verify(!row->Suc());

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());

	BlockBox* spanned_box = ((BlockBox*) spanned_elm->GetLayoutBox());
	verify(spanned_box->IsColumnSpanned());
	verify(spanned_box->GetWidth() == 500);

	Column* column = row->GetFirstColumn();
	verify(column);
	verify(column->GetStartElement().GetVerticalLayout() == spanned_box);
	verify(column->GetStopElement().GetVerticalLayout() == spanned_box);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; width:50%;">
	//!   <div id="spanned" style="position:relative; top:1px; left:1px; column-span:all;"></div>
	//!  </div>
	//! </body></html>
}
test("Relatively positioned spanned element")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(row->GetColumnCount() == 1);
	verify(!row->Suc());

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());

	BlockBox* spanned_box = ((BlockBox*) spanned_elm->GetLayoutBox());
	verify(spanned_box->IsColumnSpanned());
	verify(spanned_box->GetWidth() == 500);
	verify(spanned_box->GetX() == 1);
	verify(spanned_box->GetY() == 1);

	Column* column = row->GetFirstColumn();
	verify(column);
	verify(column->GetStartElement().GetVerticalLayout() == spanned_box);
	verify(column->GetStopElement().GetVerticalLayout() == spanned_box);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; width:50%;">
	//!   &nbsp;<br>&nbsp;
	//!   <div id="spanned" style="column-span:all;"></div>
	//!  </div>
	//! </body></html>
}
test("Spanned element following text")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());

	BlockBox* spanned_box = ((BlockBox*) spanned_elm->GetLayoutBox());
	verify(spanned_box->IsColumnSpanned());
	verify(spanned_box->GetWidth() == 500);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(row->GetColumnCount() == 2);

	Column* column = row->GetLastColumn();
	verify(column);
	verify(column->ExcludeStopElement());
	verify(column->GetStopElement().GetVerticalLayout() == spanned_box);

	row = row->Suc();
	verify(row);
	verify(row->GetColumnCount() == 1);
	verify(!row->Suc());

	column = row->GetFirstColumn();
	verify(column);
	verify(column->GetStartElement().GetVerticalLayout() == spanned_box);
	verify(column->GetStopElement().GetVerticalLayout() == spanned_box);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; width:50%;">
	//!   <div id="spanned" style="column-span:all;"></div>
	//!   &nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;<br>&nbsp;
	//!  </div>
	//! </body></html>
}
test("Spanned element followed by text")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());

	BlockBox* spanned_box = ((BlockBox*) spanned_elm->GetLayoutBox());
	verify(spanned_box->IsColumnSpanned());
	verify(spanned_box->GetWidth() == 500);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(row->GetColumnCount() == 1);

	Column* column = row->GetFirstColumn();
	verify(column);
	verify(column->GetStartElement().GetVerticalLayout() == spanned_box);
	verify(column->GetStopElement().GetVerticalLayout() == spanned_box);

	row = row->Suc();
	verify(row);
	verify(row->GetColumnCount() == 4);
	verify(!row->Suc());

	column = row->GetFirstColumn();
	verify(column);
	verify(column->GetStartElement().GetVerticalLayout() != spanned_box);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; column-gap:0; orphans:0; widows:0; width:50%;">
	//!   <div style="margin:0 10px;">
	//!    <div id="spanned" style="column-span:all;"></div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Spanned element in block")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetWidth() == 500);
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetX() == -10);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; column-gap:0; orphans:0; widows:0;">
	//!   <div style="height:300px;">
	//!    <div style="column-span:all;"></div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Spanned element in tall block")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 100);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; column-gap:0; orphans:0; widows:0; width:50%;">
	//!   <div style="overflow:hidden; width:100%;">
	//!    <div id="spanned" style="column-span:all;"></div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Spanned element in block with overflow:hidden")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());
	verify(!((BlockBox*) spanned_elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetWidth() == 125);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; column-gap:0; orphans:0; widows:0; width:50%;">
	//!   <div style="float:left; width:100%;">
	//!    <div id="spanned" style="column-span:all;"></div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Spanned element in float")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());
	verify(!((BlockBox*) spanned_elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetWidth() == 125);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; column-gap:0; orphans:0; widows:0; width:50%;">
	//!   <div style="display:inline-block; width:100%;">
	//!    <div id="spanned" style="column-span:all;"></div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Spanned element in inline-block")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());
	verify(!((BlockBox*) spanned_elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetWidth() == 125);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; column-gap:0; orphans:0; widows:0; width:50%;">
	//!   <div style="display:table; width:100%;">
	//!    <div id="spanned" style="column-span:all;"></div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Spanned element in table")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());
	verify(!((BlockBox*) spanned_elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetWidth() == 125);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px; position:relative;">
	//!  <div id="mc" style="column-count:4; column-gap:0; orphans:0; widows:0; width:50%;">
	//!   <div style="position:absolute; width:100%;">
	//!    <div id="spanned" style="column-span:all;"></div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Spanned element in abspos")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());
	verify(!((BlockBox*) spanned_elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetWidth() == 1000);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; column-gap:0; orphans:0; widows:0; width:50%;">
	//!   <div style="position:relative; width:678px; margin:0 10px;">
	//!    <div id="spanned" style="column-span:all;"></div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Spanned element in relpos")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetWidth() == 500);
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetX() == -10);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; width:50%;">
	//!   <div id="spanned1" style="column-span:all;">
	//!    <div id="spanned2" style="column-span:all;"></div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Spanned element in spanned element")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm1 = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned1"));
	verify(spanned_elm1);
	verify(spanned_elm1->GetLayoutBox());
	verify(spanned_elm1->GetLayoutBox()->IsBlockBox());

	BlockBox* spanned_box = ((BlockBox*) spanned_elm1->GetLayoutBox());
	verify(spanned_box->IsColumnSpanned());
	verify(spanned_box->GetWidth() == 500);

	HTML_Element* spanned_elm2 = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned2"));
	verify(spanned_elm2);
	verify(spanned_elm2->GetLayoutBox());
	verify(spanned_elm2->GetLayoutBox()->IsBlockBox());
	verify(!((BlockBox*) spanned_elm2->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) spanned_elm2->GetLayoutBox())->GetWidth() == 500);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(row->GetColumnCount() == 1);

	Column* column = row->GetFirstColumn();
	verify(column);
	verify(column->GetStartElement().GetVerticalLayout() == spanned_box);
	verify(column->GetStopElement().GetVerticalLayout() == spanned_box);

	verify(!row->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; line-height:100px;">
	//!   <div style="margin-bottom:50px;">line</div>
	//!   <div id="spanned" style="column-span:all;">line</div>
	//!  </div>
	//! </body></html>
}
test("Spanned element following bottom margin")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 250);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div id="spanned" style="column-span:all; float:left; width:100%;"></div>
	//!  </div>
	//! </body></html>
}
test("Spanned element as float")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());
	verify(!((BlockBox*) spanned_elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetWidth() == 125);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="position:relative; width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div id="spanned" style="column-span:all; position:absolute; width:100%;"></div>
	//!  </div>
	//! </body></html>
}
test("Spanned element as abspos")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());
	verify(!((BlockBox*) spanned_elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetWidth() == 1000);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div id="spanned" style="column-span:all; overflow:hidden; width:100%;"></div>
	//!  </div>
	//! </body></html>
}
test("Spanned element as overflow:hidden block")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetWidth() == 500);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div id="spanned" style="column-span:all; display:list-item; width:100%;"></div>
	//!  </div>
	//! </body></html>
}
test("Spanned element as list-item")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetWidth() == 500);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div id="spanned" style="column-span:all; display:table; width:100%;"></div>
	//!  </div>
	//! </body></html>
}
test("Spanned element as table")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetWidth() == 500);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div>
	//!    <div id="spanned" style="column-span:all; display:table;">
	//!    filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler filler
	//!    </div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Spanned element as table in block")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetWidth() == 500);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="position:relative; width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div id="spanned" style="column-span:all; display:run-in;">line</div>
	//!   line
	//!  </div>
	//! </body></html>
}
test("Spanned element as block run-in")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsBlockBox());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) spanned_elm->GetLayoutBox())->GetWidth() == 500);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="position:relative; width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div id="spanned" style="column-span:all; display:run-in;">line</div>
	//!   <div>line</div>
	//!  </div>
	//! </body></html>
}
test("Spanned element as inline run-in")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* spanned_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("spanned"));
	verify(spanned_elm);
	verify(spanned_elm->GetLayoutBox());
	verify(spanned_elm->GetLayoutBox()->IsInlineRunInBox());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="position:relative; width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:10px; width:50%; direction:rtl;">
	//!   <div id="spanned" style="column-span:all;">line</div>
	//!  </div>
	//! </body></html>
}
test("Spanned element in RTL multicol container")
language ecmascript;
{
	verify(document.getElementById('spanned').offsetLeft == 0);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="position:relative; width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:10px; width:50%;">
	//!   <div id="spanned" style="column-span:all; direction:rtl;">line</div>
	//!  </div>
	//! </body></html>
}
test("Spanned RTL element in LTR multicol container")
language ecmascript;
{
	verify(document.getElementById('spanned').offsetLeft == 0);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="position:relative; width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:10px; width:50%;">
	//!   <div style="direction:rtl;">
	//!    <div id="spanned" style="column-span:all;">line</div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Spanned element in RTL container in LTR multicol container")
language ecmascript;
{
	verify(document.getElementById('spanned').offsetLeft == 0);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="position:relative; width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:10px; width:50%; direction:rtl;">
	//!   <div style="direction:ltr;">
	//!    <div id="spanned" style="column-span:all;">line</div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Spanned element in LTR container in RTL multicol container")
language ecmascript;
{
	verify(document.getElementById('spanned').offsetLeft == 0);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="position:relative; width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div id="elm">line</div>
	//!  </div>
	//!  <script>
	//!   document.body.offsetTop; // force reflow
	//!   document.getElementById('elm').style.columnSpan = 'all';
	//!  </script>
	//! </body></html>
}
test("column-span:none -> column-span:all")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* elm = state.doc->GetDocRoot()->GetElmById(UNI_L("elm"));
	verify(elm);
	verify(elm->GetLayoutBox());
	verify(elm->GetLayoutBox()->IsBlockBox());
	verify(((BlockBox*) elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) elm->GetLayoutBox())->GetWidth() == 500);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="position:relative; width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div id="elm" style="column-span:all;">line</div>
	//!  </div>
	//!  <script>
	//!   document.body.offsetTop; // force reflow
	//!   document.getElementById('elm').style.columnSpan = 'none';
	//!  </script>
	//! </body></html>
}
test("column-span:all -> column-span:none")
{
	verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* elm = state.doc->GetDocRoot()->GetElmById(UNI_L("elm"));
	verify(elm);
	verify(elm->GetLayoutBox());
	verify(elm->GetLayoutBox()->IsBlockBox());
	verify(!((BlockBox*) elm->GetLayoutBox())->IsColumnSpanned());
	verify(((BlockBox*) elm->GetLayoutBox())->GetWidth() == 125);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div style="height:1000px;"></div>
	//!  </div>
	//! </body></html>
}
test("Single long block that can be evenly distributed")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 250);
	verify(GetActualColumnCount(mc) == 4);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div style="height:1000px;"></div>
	//!  </div>
	//! </body></html>
}
test("Single long block that cannot be evenly distributed")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 334);
	verify(GetActualColumnCount(mc) == 3);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:2; orphans:0; widows:0; column-gap:0; width:50%; line-height:100px;">
	//!   line
	//!   <div style="height:1000px;"></div>
	//!  </div>
	//! </body></html>
}
test("Text and long block")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 2);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);
	verify(first->GetStartElement().GetVerticalLayout());
	verify(first->GetStartElement().GetVerticalLayout()->IsLine());
	verify(first->GetStopElement().GetVerticalLayout());
	verify(first->GetStopElement().GetVerticalLayout()->IsBlock());
	verify(first->GetHeight() == 550);

	Column* second = first->Suc();
	verify(second);
	verify(second->GetStartElement().GetVerticalLayout());
	verify(second->GetStartElement().GetVerticalLayout()->IsBlock());
	verify(second->GetStartOffset() == 450);
	verify(second->GetStopElement().GetVerticalLayout());
	verify(second->GetStopElement().GetVerticalLayout()->IsBlock());
	verify(second->GetHeight() == 550);

	verify(!second->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:2; orphans:0; widows:0; column-gap:0; width:50%; line-height:100px;">
	//!   <div style="height:1000px;"></div>
	//!   line
	//!  </div>
	//! </body></html>
}
test("Long block and text")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 2);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);
	verify(first->GetStartElement().GetVerticalLayout());
	verify(first->GetStartElement().GetVerticalLayout()->IsBlock());
	verify(first->GetStopElement().GetVerticalLayout());
	verify(first->GetStopElement().GetVerticalLayout()->IsBlock());
	verify(first->GetHeight() == 550);

	Column* second = first->Suc();
	verify(second);
	verify(second->GetStartElement().GetVerticalLayout());
	verify(second->GetStartElement().GetVerticalLayout()->IsBlock());
	verify(second->GetStartOffset() == 550);
	verify(second->GetStopElement().GetVerticalLayout());
	verify(second->GetStopElement().GetVerticalLayout()->IsLine());
	verify(second->GetHeight() == 550);

	verify(!second->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:2; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   line
	//!   <div style="height:1000px;"></div>
	//!   line
	//!  </div>
	//! </body></html>
}
test("Text and long block and text")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 2);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:2; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div style="height:1000px;">line</div>
	//!  </div>
	//! </body></html>
}
test("Non-empty long block that can be evenly distributed")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 500);
	verify(GetActualColumnCount(mc) == 2);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div style="height:1000px;">line</div>
	//!  </div>
	//! </body></html>
}
test("Non-empty long block that cannot be evenly distributed")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 334);
	verify(GetActualColumnCount(mc) == 3);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div style="height:1000px; line-height:125px;">
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Block with lines that can be evenly distributed")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 250);
	verify(GetActualColumnCount(mc) == 4);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div style="height:1000px; line-height:124px;">
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Block with lines that cannot be evenly distributed 1")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) <= 4);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; width:50%;">
	//!   <div style="height:1000px; line-height:126px;">
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Block with lines that cannot be evenly distributed 2")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) <= 4);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; column-fill:auto; height:200px; line-height:100px;">
	//!   line<br>
	//!   line<br>
	//!   <div style="height:500px;"></div>
	//!  </div>
	//! </body></html>
}
test("Block remainder that starts in a new column 1")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 4);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:4; orphans:0; widows:0; column-gap:0; column-fill:auto; height:200px; line-height:100px;">
	//!   line<br>
	//!   <div style="height:600px;">
	//!    line<br>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Block remainder that starts in a new column 2")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 4);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:2; orphans:0; widows:0; column-gap:0; line-height:75px;">
	//!   <div id="outer1" style="height:100px;"><div>line</div></div>
	//!   <div id="outer2" style="height:100px;"><div>line</div></div>
	//!   <div id="outer3" style="height:100px;"><div>line</div></div>
	//!  </div>
	//! </body></html>
}
test("Nested block in taller blocks")
// Inspired by CORE-36971
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 2);

	HTML_Element* outer1 = state.doc->GetDocRoot()->GetElmById(UNI_L("outer1"));
	verify(outer1);

	HTML_Element* outer2 = state.doc->GetDocRoot()->GetElmById(UNI_L("outer2"));
	verify(outer2);

	HTML_Element* outer3 = state.doc->GetDocRoot()->GetElmById(UNI_L("outer3"));
	verify(outer3);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);
	verify(first->GetStartElement().GetVerticalLayout());
	verify(first->GetStartElement().GetVerticalLayout()->IsBlock());
	verify((BlockBox*) first->GetStartElement().GetVerticalLayout() == outer1->GetLayoutBox());
	verify(first->GetStopElement().GetVerticalLayout());
	verify(first->GetStopElement().GetVerticalLayout()->IsBlock());
	verify((BlockBox*) first->GetStopElement().GetVerticalLayout() == outer2->GetLayoutBox());
	verify(first->GetHeight() == 175);

	Column* second = first->Suc();
	verify(second);
	verify(second->GetStartElement().GetVerticalLayout());
	verify(second->GetStartElement().GetVerticalLayout()->IsBlock());
	verify((BlockBox*) second->GetStartElement().GetVerticalLayout() == outer2->GetLayoutBox());
	verify(second->GetStartOffset() == 75);
	verify(second->GetStopElement().GetVerticalLayout());
	verify(second->GetStopElement().GetVerticalLayout()->IsBlock());
	verify((BlockBox*) second->GetStopElement().GetVerticalLayout() == outer3->GetLayoutBox());
	verify(second->GetHeight() == 125);

	verify(!second->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; padding:10px; line-height:20px;">
	//!   <div id="start1" style="float:left; width:100px; height:150px; margin:50px 0;"></div>
	//!   <div style="height:100px;">line</div>
	//!   <div style="height:100px;">line</div>
	//!   <div id="stop1" style="height:100px;">line</div>
	//!   <div id="stop2" style="height:100px;">line</div>
	//!  </div>
	//! </body></html>
}
test("Float stretching column, blocks")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* start1 = state.doc->GetDocRoot()->GetElmById(UNI_L("start1"));
	verify(start1);
	verify(start1->GetLayoutBox());
	verify(start1->GetLayoutBox()->IsBlockBox());

	HTML_Element* stop1 = state.doc->GetDocRoot()->GetElmById(UNI_L("stop1"));
	verify(stop1);
	verify(stop1->GetLayoutBox());
	verify(stop1->GetLayoutBox()->IsBlockBox());

	HTML_Element* stop2 = state.doc->GetDocRoot()->GetElmById(UNI_L("stop2"));
	verify(stop2);
	verify(stop2->GetLayoutBox());
	verify(stop2->GetLayoutBox()->IsBlockBox());

	verify(mc->GetHeight() == 270);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);
	verify(first->GetStartElement().GetVerticalLayout() == (BlockBox*) start1->GetLayoutBox());
	verify(first->GetStopElement().GetVerticalLayout() == (BlockBox*) stop1->GetLayoutBox());

	Column* second = first->Suc();
	verify(second);
	verify(second->GetStartElement().GetVerticalLayout() == (BlockBox*) stop1->GetLayoutBox());
	verify(second->GetStartOffset() == 50);
	verify(second->GetStopElement().GetVerticalLayout() == (BlockBox*) stop2->GetLayoutBox());

	verify(!second->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; padding:10px; line-height:75px;">
	//!   <div style="float:left; width:100px; height:150px; margin:50px 0;"></div>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("Float stretching column, lines")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 320);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);
	verify(first->GetStartElement().GetVerticalLayout());
	verify(!first->GetStartElement().GetVerticalLayout()->Pred());
	verify(first->GetStopElement().GetVerticalLayout());
	verify(first->GetStopElement().GetVerticalLayout()->Suc());
	verify(!first->GetStopElement().GetVerticalLayout()->Suc()->Suc());

	Column* second = first->Suc();
	verify(second);
	verify(second->GetStartElement().GetVerticalLayout() == first->GetStopElement().GetVerticalLayout()->Suc());
	verify(second->GetStopElement().GetVerticalLayout() == first->GetStopElement().GetVerticalLayout()->Suc());

	verify(!second->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; padding:10px; line-height:75px;">
	//!   <div style="float:left; width:100px; height:150px; margin:50px 0;"></div>
	//!   line<br>
	//!   <div style="float:left; width:100px; height:150px; margin:50px 0;"></div>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("Two floats stretching column, lines")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 395);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);
	verify(first->GetStartElement().GetVerticalLayout());
	verify(!first->GetStartElement().GetVerticalLayout()->Pred());
	verify(first->GetStopElement().GetVerticalLayout());
	verify(first->GetStopElement().GetVerticalLayout()->Suc());
	verify(!first->GetStopElement().GetVerticalLayout()->Suc()->Suc());

	Column* second = first->Suc();
	verify(second);
	verify(second->GetStartElement().GetVerticalLayout() == first->GetStopElement().GetVerticalLayout()->Suc());
	verify(second->GetStopElement().GetVerticalLayout() == first->GetStopElement().GetVerticalLayout()->Suc());

	verify(!second->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; height:200px; line-height:50px;">
	//!   line<br>
	//!   <div style="float:left; width:100px; height:100px; margin:50px 0;"></div>
	//!  </div>
	//! </body></html>
}
test("Float bottom beyond current column bottom")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);
	verify(first->GetStopElement().GetVerticalLayout());
	verify(!first->GetStopElement().GetVerticalLayout()->IsBlock());
	verify(first->GetHeight() == 50);

	Column* second = first->Suc();
	verify(second);
	verify(second->GetStartElement().GetVerticalLayout());
	verify(second->GetStartElement().GetVerticalLayout()->IsBlock());
	verify(((BlockBox*) second->GetStartElement().GetVerticalLayout())->IsFloatingBox());
	verify(second->GetHeight() == 200);

	verify(!second->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; height:250px;">
	//!   <div style="float:left; clear:left; width:100px; height:100px; margin:50px 0;"></div>
	//!   <div style="float:left; clear:left; width:100px; height:100px; margin:50px 0;"></div>
	//!  </div>
	//! </body></html>
}
test("Two floats taller than column")
disabled;
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);

	Column* second = first->Suc();
	verify(second);
	verify(!second->Suc());

	verify(first->GetHeight() == 200);
	verify(second->GetHeight() == 200);

	verify(first->GetStartElement().GetVerticalLayout());
	verify(second->GetStartElement().GetVerticalLayout());

	verify(first->GetStartElement().GetVerticalLayout() != second->GetStartElement().GetVerticalLayout());
	verify(first->GetStartElement().GetVerticalLayout() == first->GetStopElement().GetVerticalLayout());
	verify(second->GetStartElement().GetVerticalLayout() == second->GetStopElement().GetVerticalLayout());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; height:250px; line-height:100px;">
	//!   <div style="float:left; clear:left; width:100px; height:100px; margin:50px 0;"></div>
	//!   <div style="float:left; clear:left; width:100px; height:100px; margin:50px 0;"></div>
	//!   <div>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Two floats taller than column, breakable text")
disabled;
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);

	Column* second = first->Suc();
	verify(second);
	verify(!second->Suc());

	verify(first->GetHeight() == 200);
	verify(second->GetHeight() == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; height:250px; line-height:100px;">
	//!   <div style="float:left; clear:left; width:100px; height:100px; margin:50px 0;"></div>
	//!   <div style="float:left; clear:left; width:100px; height:100px; margin:50px 0;"></div>
	//!   <div style="break-inside:avoid;">
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Two floats taller than column, unbreakable text")
disabled;
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);
	verify(!first->Suc());

	verify(first->GetHeight() == 400);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; height:250px; line-height:75px;">
	//!   <div style="float:left; clear:left; width:100px; height:100px; margin:50px 0;"></div>
	//!   <div style="float:left; clear:left; width:100px; height:100px; margin:50px 0;"></div>
	//!   <div>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Two floats taller than column, asymmetric breakable text")
disabled;
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);

	Column* second = first->Suc();
	verify(second);
	verify(!second->Suc());

	verify(first->GetHeight() == 225);
	verify(second->GetHeight() == 225);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; height:200px; line-height:75px;">
	//!   <div style="float:left; width:100px; height:100px; margin:50px 0;"></div>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("Float bottom beside lines")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);
	verify(first->GetStopElement().GetVerticalLayout());
	verify(first->GetStopElement().GetVerticalLayout()->IsLine());
	verify(!first->GetStopElement().GetVerticalLayout()->Suc());
	verify(first->GetHeight() == 225);

	verify(!first->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; padding:10px;">
	//!   <div id="start1" style="float:left; width:100px; height:150px; margin:50px 0;"></div>
	//!  </div>
	//! </body></html>
}
test("Lone float")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* start1 = state.doc->GetDocRoot()->GetElmById(UNI_L("start1"));
	verify(start1);
	verify(start1->GetLayoutBox());
	verify(start1->GetLayoutBox()->IsBlockBox());

	verify(mc->GetHeight() == 270);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);
	verify(first->GetStartElement().GetVerticalLayout() == (BlockBox*) start1->GetLayoutBox());
	verify(first->GetStopElement().GetVerticalLayout() == (BlockBox*) start1->GetLayoutBox());

	verify(!first->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; padding:10px;">
	//!   <div id="start1" style="float:left; width:100px; height:150px; margin:50px 0;"></div>
	//!   line
	//!  </div>
	//! </body></html>
}
test("Float + line")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	HTML_Element* start1 = state.doc->GetDocRoot()->GetElmById(UNI_L("start1"));
	verify(start1);
	verify(start1->GetLayoutBox());
	verify(start1->GetLayoutBox()->IsBlockBox());

	verify(mc->GetHeight() == 270);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);
	verify(first->GetStartElement().GetVerticalLayout() == (BlockBox*) start1->GetLayoutBox());
	verify(first->GetStopElement().GetVerticalLayout());
	verify(first->GetStopElement().GetVerticalLayout()->Pred() == first->GetStartElement().GetVerticalLayout());

	verify(!first->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; padding:10px; line-height:75px;">
	//!   <div style="float:left; width:100px; height:150px; margin:50px 0;"></div>
	//!   line<br style="break-after:column;">
	//!   line<br>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("Column break beside float, line break")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 270);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);
	verify(first->GetStartElement().GetVerticalLayout());
	verify(!first->GetStartElement().GetVerticalLayout()->Pred());
	verify(first->GetStartElement().GetVerticalLayout()->Suc());
	verify(first->GetStopElement().GetVerticalLayout());
	verify(first->GetStopElement().GetVerticalLayout()->Pred() == first->GetStartElement().GetVerticalLayout()->Suc()->Suc());
	verify(first->ExcludeStopElement());

	Column* second = first->Suc();
	verify(second);
	verify(second->GetStartElement().Equals(first->GetStopElement()));
	verify(second->GetStopElement().GetVerticalLayout() == second->GetStartElement().GetVerticalLayout()->Suc());
	verify(!second->GetStopElement().GetVerticalLayout()->Suc());

	verify(!second->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; padding:10px; line-height:75px;">
	//!   <div style="float:left; width:100px; height:150px; margin:50px 0;"></div>
	//!   <div style="break-after:column;">line</div>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("Column break beside float, block")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 320);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; padding:10px; line-height:75px;">
	//!   <div style="float:left; width:100px; height:150px; margin:50px 0;"></div>
	//!   <div style="break-after:column;">line</div>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("Column break beside float, block, more content")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 395);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; line-height:75px;">
	//!   <table cellspacing="0" cellpadding="0">
	//!    <tr id="first_row"><td>line<br>line<br>line</td></tr>
	//!    <tr><td>line<br>line<br>line</td></tr>
	//!    <tr><td>line<br>line<br>line</td></tr>
	//!    <tr><td>line<br>line<br>line</td></tr>
	//!   </table>
	//!  </div>
	//! </body></html>
}
test("Column break between table rows")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 450);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	HTML_Element* first_row = state.doc->GetDocRoot()->GetElmById(UNI_L("first_row"));
	verify(first_row);
	verify(first_row->GetLayoutBox());
	verify(first_row->GetLayoutBox()->IsTableRow());
	TableRowBox* first_row_box = (TableRowBox*) first_row->GetLayoutBox();

	verify(first_row_box->Suc());
	verify(first_row_box->Suc()->Suc());
	verify(first_row_box->Suc()->Suc()->Suc());
	verify(!first_row_box->Suc()->Suc()->Suc()->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);
	verify(first->GetStartElement().GetVerticalLayout());
	verify(first->GetStartElement().GetVerticalLayout());
	verify(first->GetStartElement().GetVerticalLayout()->IsBlock());
	verify(((BlockBox*)first->GetStartElement().GetVerticalLayout())->GetTableContent());
	verify(first->GetStopElement().GetTableRowBox() == first_row_box->Suc());

	Column* second = first->Suc();
	verify(second);
	verify(second->GetStartElement().GetTableRowBox() == first_row_box->Suc()->Suc());

	verify(!second->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:3; orphans:0; widows:0; column-gap:0; line-height:75px;">
	//!   <table id="table" cellspacing="0" cellpadding="0">
	//!    <caption>
	//!     line<br>
	//!     line<br>
	//!     line<br>
	//!     line<br>
	//!    </caption>
	//!   </table>
	//!  </div>
	//! </body></html>
}
test("Column break between inside table caption")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 150);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);
	verify(first->GetStartElement().GetVerticalLayout());
	verify(first->GetStartElement().GetVerticalLayout()->IsBlock());
	verify(((BlockBox*) first->GetStartElement().GetVerticalLayout())->GetTableContent());

	verify(first->GetStopElement().GetVerticalLayout());
	verify(first->GetStopElement().GetVerticalLayout()->IsLine());

	Line* second_line = (Line*) first->GetStopElement().GetVerticalLayout();
	verify(second_line->Pred());
	verify(second_line->Suc());
	verify(second_line->Suc()->Suc());
	verify(!second_line->Pred()->Pred());
	verify(!second_line->Suc()->Suc()->Suc());

	Column* second = first->Suc();
	verify(second);
	verify(second->GetStartElement().GetVerticalLayout() == second_line->Suc());

	verify(!second->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc" style="column-count:2; orphans:0; widows:0; column-gap:0; line-height:75px;">
	//!   <table id="table" cellspacing="0" cellpadding="0">
	//!    <tr id="first_row"><td>line</td><td>line</td></tr>
	//!    <tr><td>line</td><td rowspan="2">line</td></tr>
	//!    <tr><td>line</td></tr>
	//!    <tr><td>line</td><td>line</td></tr>
	//!   </table>
	//!  </div>
	//! </body></html>
}
test("rowspan")
{
	// Verify that we do not break between rows that share a rowspanned cell.

	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(mc->GetHeight() == 225);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	HTML_Element* first_row = state.doc->GetDocRoot()->GetElmById(UNI_L("first_row"));
	verify(first_row);
	verify(first_row->GetLayoutBox());
	verify(first_row->GetLayoutBox()->IsTableRow());
	TableRowBox* first_row_box = (TableRowBox*) first_row->GetLayoutBox();

	verify(first_row_box->Suc());
	verify(first_row_box->Suc()->Suc());
	verify(first_row_box->Suc()->Suc()->Suc());
	verify(!first_row_box->Suc()->Suc()->Suc()->Suc());

	Column* first = row->GetFirstColumn();
	verify(first);
	verify(first->GetStartElement().GetVerticalLayout());
	verify(first->GetStartElement().GetVerticalLayout()->IsBlock());
	verify(((BlockBox*)first->GetStartElement().GetVerticalLayout())->GetTableContent());
	verify(first->GetStopElement().GetTableRowBox() == first_row_box->Suc()->Suc());

	Column* second = first->Suc();
	verify(second);
	verify(second->GetStartElement().GetTableRowBox() == first_row_box->Suc()->Suc()->Suc());

	verify(!second->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc_outer" style="column-count:2; orphans:0; widows:0; column-gap:0; line-height:75px;">
	//!   <div id="mc_inner" style="column-count:2; orphans:0; widows:0; column-gap:0; line-height:75px;">
	//!    <span id="s1">&nbsp;</span><br>
	//!    <span id="s2">&nbsp;</span><br>
	//!    <span id="s3">&nbsp;</span><br>
	//!    <span id="s4">&nbsp;</span><br>
	//!    <span id="s5">&nbsp;</span><br>
	//!    <span id="s6">&nbsp;</span><br>
	//!    <span id="s7">&nbsp;</span><br>
	//!    <span id="s8">&nbsp;</span><br>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("multicol in multicol")
{
	MultiColumnContainer* mc_outer = GetMulticolById(state.doc, UNI_L("mc_outer"));
	verify(mc_outer);
	verify(mc_outer->GetHeight() == 150);

	MultiColumnContainer* mc_inner = GetMulticolById(state.doc, UNI_L("mc_inner"));
	verify(mc_inner);
	verify(mc_inner->GetHeight() == 300);

	HTML_Element* s1 = state.doc->GetDocRoot()->GetElmById(UNI_L("s1"));
	verify(s1);

	HTML_Element* s2 = state.doc->GetDocRoot()->GetElmById(UNI_L("s2"));
	verify(s2);

	HTML_Element* s3 = state.doc->GetDocRoot()->GetElmById(UNI_L("s3"));
	verify(s3);

	HTML_Element* s4 = state.doc->GetDocRoot()->GetElmById(UNI_L("s4"));
	verify(s4);

	HTML_Element* s5 = state.doc->GetDocRoot()->GetElmById(UNI_L("s5"));
	verify(s5);

	HTML_Element* s6 = state.doc->GetDocRoot()->GetElmById(UNI_L("s6"));
	verify(s6);

	HTML_Element* s7 = state.doc->GetDocRoot()->GetElmById(UNI_L("s7"));
	verify(s7);

	HTML_Element* s8 = state.doc->GetDocRoot()->GetElmById(UNI_L("s8"));
	verify(s8);

	ColumnRow* row = mc_outer->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	verify(column);

	ColumnBoundaryElement cbe = column->GetStopElement();
	verify(cbe.GetColumnRow());
	verify(!cbe.GetColumnRow()->Pred());

	column = column->Suc();
	verify(column);

	cbe = column->GetStartElement();
	verify(cbe.GetColumnRow());
	verify(cbe.GetColumnRow()->Pred());
	verify(!cbe.GetColumnRow()->Pred()->Pred());

	verify(!column->Suc());

	row = mc_inner->GetFirstRow();
	verify(row);

	column = row->GetFirstColumn();
	verify(column);

	cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s1);

	cbe = column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s2);

	column = column->Suc();
	verify(column);

	cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s3);

	cbe = column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s4);

	verify(!column->Suc());

	row = row->Suc();
	verify(row);
	verify(!row->Suc());

	column = row->GetFirstColumn();
	verify(column);

	cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s5);

	cbe = column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s6);

	column = column->Suc();
	verify(column);

	cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s7);

	cbe = column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s8);

	verify(!column->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc_outer" style="column-count:3; orphans:0; widows:0; column-gap:0; line-height:75px;">
	//!   <div style="column-count:2; orphans:0; widows:0; column-gap:0;">x</div>
	//!   <div style="column-count:2; orphans:0; widows:0; column-gap:0;">x</div>
	//!   <div style="column-count:2; orphans:0; widows:0; column-gap:0;">x</div>
	//!  </div>
	//! </body></html>
}
test("multicols in multicol, auto height, balance fill")
{
	MultiColumnContainer* mc_outer = GetMulticolById(state.doc, UNI_L("mc_outer"));
	verify(mc_outer);
	verify(mc_outer->GetHeight() == 75);
	verify(GetActualColumnCount(mc_outer) == 3);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc_outer" style="column-count:3; orphans:0; widows:0; column-gap:0; height:225px; line-height:75px;">
	//!   <div style="column-count:2; orphans:0; widows:0; column-gap:0;">x</div>
	//!   <div style="column-count:2; orphans:0; widows:0; column-gap:0;">x</div>
	//!   <div style="column-count:2; orphans:0; widows:0; column-gap:0;">x</div>
	//!  </div>
	//! </body></html>
}
test("multicols in multicol, fixed height, balance fill")
{
	MultiColumnContainer* mc_outer = GetMulticolById(state.doc, UNI_L("mc_outer"));
	verify(mc_outer);
	verify(mc_outer->GetHeight() == 225);
	verify(GetActualColumnCount(mc_outer) == 3);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc_outer" style="column-count:3; column-fill:auto; orphans:0; widows:0; column-gap:0; line-height:75px;">
	//!   <div style="column-count:2; orphans:0; widows:0; column-gap:0;">x</div>
	//!   <div style="column-count:2; orphans:0; widows:0; column-gap:0;">x</div>
	//!   <div style="column-count:2; orphans:0; widows:0; column-gap:0;">x</div>
	//!  </div>
	//! </body></html>
}
test("multicols in multicol, auto height, auto fill")
{
	MultiColumnContainer* mc_outer = GetMulticolById(state.doc, UNI_L("mc_outer"));
	verify(mc_outer);
	verify(mc_outer->GetHeight() == 75);
	verify(GetActualColumnCount(mc_outer) == 3);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc_outer" style="column-count:3; column-fill:auto; orphans:0; widows:0; column-gap:0; height:225px; line-height:75px;">
	//!   <div style="column-count:2; orphans:0; widows:0; column-gap:0;">x</div>
	//!   <div style="column-count:2; orphans:0; widows:0; column-gap:0;">x</div>
	//!   <div style="column-count:2; orphans:0; widows:0; column-gap:0;">x</div>
	//!  </div>
	//! </body></html>
}
test("multicols in multicol, fixed height, auto fill")
{
	MultiColumnContainer* mc_outer = GetMulticolById(state.doc, UNI_L("mc_outer"));
	verify(mc_outer);
	verify(mc_outer->GetHeight() == 225);
	verify(GetActualColumnCount(mc_outer) == 1);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc_outer" style="column-count:2; column-fill:auto; orphans:0; widows:0; column-gap:0; line-height:75px; height:299px;">
	//!   <div id="mc_inner" style="column-count:2; orphans:0; widows:0; column-gap:0; line-height:75px; padding-top:75px;">
	//!    <span id="s1">&nbsp;</span><br>
	//!    <span id="s2">&nbsp;</span><br>
	//!    <span id="s3">&nbsp;</span><br>
	//!    <span id="s4">&nbsp;</span><br>
	//!    <span id="s5">&nbsp;</span><br>
	//!    <span id="s6">&nbsp;</span><br>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("multicol with padding in multicol with fixed height")
{
	MultiColumnContainer* mc_inner = GetMulticolById(state.doc, UNI_L("mc_inner"));
	verify(mc_inner);

	HTML_Element* s1 = state.doc->GetDocRoot()->GetElmById(UNI_L("s1"));
	verify(s1);

	HTML_Element* s2 = state.doc->GetDocRoot()->GetElmById(UNI_L("s2"));
	verify(s2);

	HTML_Element* s3 = state.doc->GetDocRoot()->GetElmById(UNI_L("s3"));
	verify(s3);

	HTML_Element* s4 = state.doc->GetDocRoot()->GetElmById(UNI_L("s4"));
	verify(s4);

	HTML_Element* s5 = state.doc->GetDocRoot()->GetElmById(UNI_L("s5"));
	verify(s5);

	HTML_Element* s6 = state.doc->GetDocRoot()->GetElmById(UNI_L("s6"));
	verify(s6);

	ColumnRow* row = mc_inner->GetFirstRow();
	verify(row);

	Column* column = row->GetFirstColumn();
	verify(column);

	ColumnBoundaryElement cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s1);

	cbe = column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s2);

	column = column->Suc();
	verify(column);
	verify(!column->Suc());

	cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s3);

	cbe = column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s4);

	row = row->Suc();
	verify(row);
	verify(!row->Suc());

	column = row->GetFirstColumn();
	verify(column);

	cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s5);

	verify(cbe.Equals(column->GetStopElement()));

	column = column->Suc();
	verify(column);
	verify(!column->Suc());

	cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s6);

	verify(cbe.Equals(column->GetStopElement()));
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc_outer" style="column-count:3; column-fill:auto; orphans:0; widows:0; line-height:50px;">
	//!   <span id="before">outerlinebefore</span>
	//!   <div id="mc_inner" style="column-count:2; height:200px;">
	//!    <span id="s1">line1</span><br>
	//!    <span id="s2">line2</span><br>
	//!    <span id="s3">line3</span><br>
	//!    <span id="s4">line4</span><br>
	//!    <span id="s5">line5</span><br>
	//!    <span id="s6">line6</span><br>
	//!    <span id="s7">line7</span><br>
	//!    <span id="s8">line8</span><br>
	//!    <span id="s9">line7</span><br>
	//!    <span id="s10">line10</span><br>
	//!    <span id="s11">line11</span><br>
	//!    <span id="s12">line12</span><br>
	//!   </div>
	//!   <span id="after">outerlineafter</span>
	//!  </div>
	//! </body></html>
}
test("fixed-height overflowing multicol in multicol")
{
	MultiColumnContainer* mc_outer = GetMulticolById(state.doc, UNI_L("mc_outer"));
	verify(mc_outer);

	ColumnRow* outer_row = mc_outer->GetFirstRow();
	verify(outer_row);
	verify(!outer_row->Suc());

	HTML_Element* before = state.doc->GetDocRoot()->GetElmById(UNI_L("before"));
	verify(before);

	HTML_Element* after = state.doc->GetDocRoot()->GetElmById(UNI_L("after"));
	verify(after);

	HTML_Element* s1 = state.doc->GetDocRoot()->GetElmById(UNI_L("s1"));
	verify(s1);

	HTML_Element* s2 = state.doc->GetDocRoot()->GetElmById(UNI_L("s2"));
	verify(s2);

	HTML_Element* s3 = state.doc->GetDocRoot()->GetElmById(UNI_L("s3"));
	verify(s3);

	HTML_Element* s4 = state.doc->GetDocRoot()->GetElmById(UNI_L("s4"));
	verify(s4);

	HTML_Element* s5 = state.doc->GetDocRoot()->GetElmById(UNI_L("s5"));
	verify(s5);

	HTML_Element* s6 = state.doc->GetDocRoot()->GetElmById(UNI_L("s6"));
	verify(s6);

	HTML_Element* s7 = state.doc->GetDocRoot()->GetElmById(UNI_L("s7"));
	verify(s7);

	HTML_Element* s8 = state.doc->GetDocRoot()->GetElmById(UNI_L("s8"));
	verify(s8);

	HTML_Element* s9 = state.doc->GetDocRoot()->GetElmById(UNI_L("s9"));
	verify(s9);

	HTML_Element* s10 = state.doc->GetDocRoot()->GetElmById(UNI_L("s10"));
	verify(s10);

	HTML_Element* s11 = state.doc->GetDocRoot()->GetElmById(UNI_L("s11"));
	verify(s11);

	HTML_Element* s12 = state.doc->GetDocRoot()->GetElmById(UNI_L("s12"));
	verify(s12);

	MultiColumnContainer* mc_inner = GetMulticolById(state.doc, UNI_L("mc_inner"));
	verify(mc_inner);

	ColumnRow* inner_row = mc_inner->GetFirstRow();
	verify(inner_row);

	// Check boundaries of first outer column

	Column* outer_column = outer_row->GetFirstColumn();
	verify(outer_column);

	ColumnBoundaryElement cbe = outer_column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == before);
	verify(outer_column->GetStopElement().GetColumnRow() == inner_row);

	// Check boundaries of first inner column

	Column* inner_column = inner_row->GetFirstColumn();
	verify(inner_column);

	cbe = inner_column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s1);
	cbe = inner_column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s1);

	// Check boundaries of second inner column

	inner_column = inner_column->Suc();
	verify(inner_column);

	cbe = inner_column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s2);
	cbe = inner_column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s2);

	// Check boundaries of second outer column

	verify(!inner_column->Suc());
	inner_row = inner_row->Suc();
	verify(inner_row);
	outer_column = outer_column->Suc();
	verify(outer_column);

	verify(outer_column->GetStartElement().GetColumnRow() == inner_row);
	verify(outer_column->GetStopElement().GetColumnRow() == inner_row);

	// Check boundaries of third inner column (first column in second row)

	inner_column = inner_row->GetFirstColumn();
	verify(inner_column);

	cbe = inner_column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s3);
	cbe = inner_column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s4);

	// Check boundaries of fourth inner column (second column in second row)

	inner_column = inner_column->Suc();
	verify(inner_column);

	cbe = inner_column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s5);
	cbe = inner_column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s6);

	// Check boundaries of third outer column

	verify(!inner_column->Suc());
	inner_row = inner_row->Suc();
	verify(inner_row);
	outer_column = outer_column->Suc();
	verify(outer_column);

	verify(outer_column->GetStartElement().GetColumnRow() == inner_row);
	cbe = outer_column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == after);

	verify(!outer_column->Suc());

	// Check boundaries of fifth inner column (first column in third row)

	inner_column = inner_row->GetFirstColumn();
	verify(inner_column);

	cbe = inner_column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s7);
	cbe = inner_column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s7);

	// Check boundaries of sixth inner column (second column in third row)

	inner_column = inner_column->Suc();
	verify(inner_column);

	cbe = inner_column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s8);
	cbe = inner_column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s8);

	// The remaining columns are in the overflow area:

	// Check boundaries of seventh inner column (third column in third row)

	inner_column = inner_column->Suc();
	verify(inner_column);

	cbe = inner_column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s9);
	cbe = inner_column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s9);

	// Check boundaries of eighth inner column (fourth column in third row)

	inner_column = inner_column->Suc();
	verify(inner_column);

	cbe = inner_column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s10);
	cbe = inner_column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s10);

	// Check boundaries of ninth inner column (fifth column in third row)

	inner_column = inner_column->Suc();
	verify(inner_column);

	cbe = inner_column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s11);
	cbe = inner_column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s11);

	// Check boundaries of tenth inner column (sixth column in third row)

	inner_column = inner_column->Suc();
	verify(inner_column);

	cbe = inner_column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s12);
	cbe = inner_column->GetStopElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s12);

	verify(!inner_column->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc_outer" style="column-count:2; column-fill:auto; orphans:0; widows:0; column-gap:0; line-height:75px; height:10000px;">
	//!   Line
	//!   <div id="mc_inner" style="column-count:2; orphans:0; widows:0; column-gap:0; line-height:75px;">
	//!    Line
	//!   </div>
	//!   Line
	//!  </div>
	//! </body></html>
}
test("under-estimating inner multicol's height, no balancing")
{
	MultiColumnContainer* mc_outer = GetMulticolById(state.doc, UNI_L("mc_outer"));
	verify(mc_outer);
	verify(mc_outer->GetHeight() == 10000);

	ColumnRow* row = mc_outer->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	verify(column);
	verify(!column->Suc());

	verify(column->GetHeight() == 225);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc_outer" style="column-count:2; orphans:0; widows:0; column-gap:0; line-height:75px;">
	//!   <div id="mc_middle" style="column-count:2; orphans:0; widows:0; column-gap:0; line-height:75px;">
	//!    <div id="mc_inner" style="column-count:2; orphans:0; widows:0; column-gap:0; line-height:75px;">
	//!     <span id="s1">&nbsp;</span><br>
	//!     <span id="s2">&nbsp;</span><br>
	//!     <span id="s3">&nbsp;</span><br>
	//!     <span id="s4">&nbsp;</span><br>
	//!     <span id="s5">&nbsp;</span><br>
	//!     <span id="s6">&nbsp;</span><br>
	//!     <span id="s7">&nbsp;</span><br>
	//!     <span id="s8">&nbsp;</span><br>
	//!    </div>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("multicol in multicol in multicol")
{
	MultiColumnContainer* mc_outer = GetMulticolById(state.doc, UNI_L("mc_outer"));
	verify(mc_outer);
	verify(mc_outer->GetHeight() == 75);

	MultiColumnContainer* mc_middle = GetMulticolById(state.doc, UNI_L("mc_middle"));
	verify(mc_middle);
	verify(mc_middle->GetHeight() == 150);

	MultiColumnContainer* mc_inner = GetMulticolById(state.doc, UNI_L("mc_inner"));
	verify(mc_inner);
	verify(mc_inner->GetHeight() == 300);

	HTML_Element* s1 = state.doc->GetDocRoot()->GetElmById(UNI_L("s1"));
	verify(s1);

	HTML_Element* s2 = state.doc->GetDocRoot()->GetElmById(UNI_L("s2"));
	verify(s2);

	HTML_Element* s3 = state.doc->GetDocRoot()->GetElmById(UNI_L("s3"));
	verify(s3);

	HTML_Element* s4 = state.doc->GetDocRoot()->GetElmById(UNI_L("s4"));
	verify(s4);

	HTML_Element* s5 = state.doc->GetDocRoot()->GetElmById(UNI_L("s5"));
	verify(s5);

	HTML_Element* s6 = state.doc->GetDocRoot()->GetElmById(UNI_L("s6"));
	verify(s6);

	HTML_Element* s7 = state.doc->GetDocRoot()->GetElmById(UNI_L("s7"));
	verify(s7);

	HTML_Element* s8 = state.doc->GetDocRoot()->GetElmById(UNI_L("s8"));
	verify(s8);

	ColumnRow* row = mc_outer->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	verify(column);

	ColumnBoundaryElement cbe = column->GetStopElement();
	verify(cbe.GetColumnRow());
	verify(!cbe.GetColumnRow()->Pred());

	column = column->Suc();
	verify(column);

	cbe = column->GetStartElement();
	verify(cbe.GetColumnRow());
	verify(cbe.GetColumnRow()->Pred());
	verify(!cbe.GetColumnRow()->Pred()->Pred());

	verify(!column->Suc());

	row = mc_middle->GetFirstRow();
	verify(row);

	column = row->GetFirstColumn();
	verify(column);

	cbe = column->GetStopElement();
	verify(cbe.GetColumnRow());
	verify(!cbe.GetColumnRow()->Pred());

	column = column->Suc();
	verify(column);

	cbe = column->GetStartElement();
	verify(cbe.GetColumnRow());
	verify(cbe.GetColumnRow()->Pred());
	verify(!cbe.GetColumnRow()->Pred()->Pred());

	verify(cbe.Equals(column->GetStopElement()));

	verify(!column->Suc());

	row = row->Suc();
	verify(row);
	verify(!row->Suc());

	column = row->GetFirstColumn();
	verify(column);

	cbe = column->GetStartElement();
	verify(cbe.GetColumnRow());
	verify(cbe.GetColumnRow()->Pred());
	verify(cbe.GetColumnRow()->Pred()->Pred());
	verify(!cbe.GetColumnRow()->Pred()->Pred()->Pred());

	verify(cbe.Equals(column->GetStopElement()));

	column = column->Suc();
	verify(column);

	cbe = column->GetStartElement();
	verify(cbe.GetColumnRow());
	verify(cbe.GetColumnRow()->Pred());
	verify(cbe.GetColumnRow()->Pred()->Pred());
	verify(cbe.GetColumnRow()->Pred()->Pred()->Pred());
	verify(!cbe.GetColumnRow()->Pred()->Pred()->Pred()->Pred());

	verify(!column->Suc());

	row = mc_inner->GetFirstRow();
	verify(row);

	column = row->GetFirstColumn();
	verify(column);

	cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s1);
	verify(cbe.Equals(column->GetStopElement()));

	column = column->Suc();
	verify(column);
	verify(!column->Suc());

	cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s2);
	verify(cbe.Equals(column->GetStopElement()));

	row = row->Suc();
	verify(row);

	column = row->GetFirstColumn();
	verify(column);

	cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s3);
	verify(cbe.Equals(column->GetStopElement()));

	column = column->Suc();
	verify(column);
	verify(!column->Suc());

	cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s4);
	verify(cbe.Equals(column->GetStopElement()));

	row = row->Suc();
	verify(row);

	column = row->GetFirstColumn();
	verify(column);

	cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s5);
	verify(cbe.Equals(column->GetStopElement()));

	column = column->Suc();
	verify(column);
	verify(!column->Suc());

	cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s6);
	verify(cbe.Equals(column->GetStopElement()));

	row = row->Suc();
	verify(row);
	verify(!row->Suc());

	column = row->GetFirstColumn();
	verify(column);

	cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s7);
	verify(cbe.Equals(column->GetStopElement()));

	column = column->Suc();
	verify(column);
	verify(!column->Suc());

	cbe = column->GetStartElement();
	verify(cbe.GetVerticalLayout() && cbe.GetVerticalLayout()->IsLine());
	verify(((Line*) cbe.GetVerticalLayout())->GetStartElement() == s8);
	verify(cbe.Equals(column->GetStopElement()));
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc_outer" style="column-count:4; column-fill:auto; orphans:0; widows:0; column-gap:0; height:200px; line-height:100px;">
	//!   <div id="mc_inner" style="column-count:2; orphans:0; widows:0; column-gap:0;">
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    <div style="height:200px;"></div>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!    line<br>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("nested multicol with block remainder")
{
	MultiColumnContainer* mc_outer = GetMulticolById(state.doc, UNI_L("mc_outer"));
	verify(mc_outer);
	verify(mc_outer->GetHeight() == 200);

	MultiColumnContainer* mc_inner = GetMulticolById(state.doc, UNI_L("mc_inner"));
	verify(mc_inner);
	verify(mc_inner->GetHeight() == 800);

	ColumnRow* row = mc_outer->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	verify(column);
	verify(column->GetStartOffset() == 0);

	column = column->Suc();
	verify(column);
	verify(column->GetStartOffset() == 100);

	column = column->Suc();
	verify(column);
	verify(column->GetStartOffset() == 0);

	column = column->Suc();
	verify(column);
	verify(column->GetStartOffset() == 0);

	verify(!column->Suc());

	row = mc_inner->GetFirstRow();
	verify(row);

	column = row->GetFirstColumn();
	verify(column);
	verify(column->GetStartOffset() == 0);

	column = column->Suc();
	verify(column);
	verify(column->GetStartOffset() == 0);

	row = row->Suc();
	verify(row);

	column = row->GetFirstColumn();
	verify(column);
	verify(column->GetStartOffset() == 100);

	column = column->Suc();
	verify(column);
	verify(column->GetStartOffset() == 0);

	row = row->Suc();
	verify(row);

	column = row->GetFirstColumn();
	verify(column);
	verify(column->GetStartOffset() == 0);

	column = column->Suc();
	verify(column);
	verify(column->GetStartOffset() == 0);

	row = row->Suc();
	verify(row);

	column = row->GetFirstColumn();
	verify(column);
	verify(column->GetStartOffset() == 0);

	column = column->Suc();
	verify(column);
	verify(column->GetStartOffset() == 0);

	verify(!row->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc_outer" style="column-count:4; column-fill:auto; orphans:0; widows:0; column-gap:0; line-height:100px;">
	//!   <div id="mc_inner" style="column-count:2; height:200px;"></div>
	//!  </div>
	//! </body></html>
}
test("nested multicol with fixed height and empty")
{
	MultiColumnContainer* mc_outer = GetMulticolById(state.doc, UNI_L("mc_outer"));
	verify(mc_outer);
	verify(mc_outer->GetHeight() == 50);
	verify(GetActualColumnCount(mc_outer) == 4);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc_outer" style="column-count:4; column-fill:auto; orphans:0; widows:0; column-gap:0; line-height:100px;">
	//!   <div id="mc_inner" style="column-count:2; height:200px; break-inside:avoid;"></div>
	//!  </div>
	//! </body></html>
}
test("nested multicol with fixed height and empty, no break inside")
{
	MultiColumnContainer* mc_outer = GetMulticolById(state.doc, UNI_L("mc_outer"));
	verify(mc_outer);
	verify(mc_outer->GetHeight() == 200);
	verify(GetActualColumnCount(mc_outer) == 1);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc_outer" style="column-count:4; column-fill:auto; orphans:0; widows:0; column-gap:0; line-height:100px;">
	//!   <div style="height:200px;"></div>
	//!  </div>
	//! </body></html>
}
test("block with fixed height and empty")
{
	MultiColumnContainer* mc_outer = GetMulticolById(state.doc, UNI_L("mc_outer"));
	verify(mc_outer);
	verify(mc_outer->GetHeight() == 50);
	verify(GetActualColumnCount(mc_outer) == 4);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:1000px;">
	//!  <div id="mc_outer" style="column-count:4; column-fill:auto; orphans:0; widows:0; column-gap:0; line-height:100px;">
	//!   <div style="height:200px; break-inside:avoid;"></div>
	//!  </div>
	//! </body></html>
}
test("block with fixed height and empty, no break inside")
{
	MultiColumnContainer* mc_outer = GetMulticolById(state.doc, UNI_L("mc_outer"));
	verify(mc_outer);
	verify(mc_outer->GetHeight() == 200);
	verify(GetActualColumnCount(mc_outer) == 1);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="columns:3; orphans:5; widows:0; line-height:100px;">
	//!   line<br>
	//!   <br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!  </div>
	//! </body></html>
}
test("orphans - unbreakable")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 1);
	verify(mc->GetHeight() == 500);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="columns:3; orphans:0; widows:5; line-height:100px;">
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("widows - unbreakable")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 1);
	verify(mc->GetHeight() == 500);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="columns:3; orphans:5; widows:5; line-height:100px;">
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("orphans and widows - unbreakable")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 1);
	verify(mc->GetHeight() == 500);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="columns:3; orphans:5; widows:0; line-height:100px;">
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("orphans - breakable")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 2);
	verify(mc->GetHeight() == 500);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="columns:3; column-fill:auto; orphans:0; widows:5; line-height:100px; height:500px;">
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!  </div>
	//!  <!-- There should probably be no need for the column-fill:auto (and
	//!       non-auto height) in this test, but our column balancing
	//!       machinery currently doesn't handle it well enough. -->
	//! </body></html>
}
test("widows - breakable")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 2);
	verify(mc->GetHeight() == 500);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="columns:3; orphans:5; widows:5; line-height:100px;">
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!  </div>
	//! </body></html>
}
test("orphans and widows - breakable")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 2);
	verify(mc->GetHeight() == 500);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="columns:3; column-fill:auto; orphans:5; widows:5; line-height:100px; height:500px;">
	//!   <div style="height:100px;"></div>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!   line<br>
	//!   <br>
	//!  </div>
	//!  <!-- There should probably be no need for the column-fill:auto (and
	//!       non-auto height) in this test, but our column balancing
	//!       machinery currently doesn't handle it well enough. -->
	//! </body></html>
}
test("orphans and widows - breakable and block")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 3);
	verify(mc->GetHeight() == 500);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	verify(column);
	verify(column->GetHeight() == 100);

	column = column->Suc();
	verify(column);
	verify(column->GetHeight() == 500);

	column = column->Suc();
	verify(column);
	verify(column->GetHeight() == 500);

	verify(!column->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="columns:3; column-fill:auto; orphans:5; widows:5; line-height:100px; height:500px;">
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!   line<br>
	//!  </div>
	//! </body></html>
}
test("orphans and widows - constrained height")
disabled; // doesn't work with the current orphans / widows implementation
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 3);
	verify(mc->GetHeight() == 500);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	verify(column);
	verify(column->GetHeight() == 500);

	column = column->Suc();
	verify(column);
	verify(column->GetHeight() == 500);

	column = column->Suc();
	verify(column);
	verify(column->GetHeight() == 100);

	verify(!column->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="columns:3; column-fill:auto; height:200px; line-height:100px; orphans:0; widows:0;">
	//!   <div id="fl" style="float:-o-top-corner;">float</div>
	//!   <div style="break-after:column;">before break</div>
	//!   <div id="elm">line</div>
	//!  </div>
	//! </body></html>
}
test("GCPM float and explicit column break")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 3);

	HTML_Element* float_elm = state.doc->GetDocRoot()->GetElmById(UNI_L("fl"));
	verify(float_elm);
	verify(float_elm->GetLayoutBox());
	verify(float_elm->GetLayoutBox()->IsFloatedPaneBox());
	FloatedPaneBox* floated_pane_box = (FloatedPaneBox*) float_elm->GetLayoutBox();

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	verify(column);
	verify(column->GetHeight() == 100);

	column = column->Suc();
	verify(column);
	verify(column->GetHeight() == 100);

	column = column->Suc();
	verify(column);
	verify(column->GetHeight() == 0);
	verify(column->HasFloat(floated_pane_box));

	verify(!column->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="margin:0;">
	//!  <div id="mc" style="columns:3; column-fill:auto; height:300px; line-height:100px; orphans:0; widows:0;">
	//!   <div id="fl" style="float:-o-top;">float</div>
	//!   <br style="break-before:column;">
	//!   <br style="break-before:column;">
	//!   <br style="break-before:column;">
	//!   FAIL
	//!  </div>
	//! </body></html>
}
test("GCPM float followed directly by explicit column break")
{
	// See CT-1613

	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 4);
}

html
{
	//! <!DOCTYPE html>
	//! <html>
	//!  <head>
	//!   <style>
	//!    #outermc { columns:2; width:100px; orphans:0; widows:0; }
	//!    #innermc { columns:2; }
	//!    p { margin:0 0 1em; }
	//!   </style>
	//! </head><body>
	//!  <div id="outermc">
	//!   <div id="innermc">
	//!    <p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p><p>x</p>
	//!   </div>
	//!  </div>
	//! </body></html>
}
test("Nested multicol with children with bottom margins")
{
	MultiColumnContainer* outermc = GetMulticolById(state.doc, UNI_L("outermc"));
	verify(outermc);
	verify(GetActualColumnCount(outermc) == 2);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="columns:4; width:100px; line-height:50px; orphans:0; widows:0;">
	//!   <div style="float:-o-top; break-after:column; height:100px;"></div>
	//!   line<br>line<br>line<br>line<br>line<br>line<br>
	//!  </div>
	//! </body></html>
}
test("GCPM float with break-after:column #1")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 4);
	verify(mc->GetHeight() == 100);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	verify(column);
	verify(!column->GetStartElement().IsSet());

	column = column->Suc();
	verify(column);
	verify(column->GetStartElement().IsSet());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="columns:4; width:100px; line-height:50px; orphans:0; widows:0;">
	//!   <div style="float:-o-top; break-after:column; height:100px;"></div>
	//!   line<br>line<br>line<br>line<br>line<br>line<br>line<br>
	//!  </div>
	//! </body></html>
}
test("GCPM float with break-after:column #2")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 4);
	verify(mc->GetHeight() == 150);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="columns:4; width:100px; line-height:50px; orphans:0; widows:0;">
	//!   <div style="float:-o-top; column-span:-o-integer(2); break-after:column; height:100px;"></div>
	//!   line<br>line<br>line<br>line<br>
	//!  </div>
	//! </body></html>
}
test("Spanned GCPM float with break-after:column #1")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 4);
	verify(mc->GetHeight() == 100);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	verify(column);
	verify(!column->GetStartElement().IsSet());

	column = column->Suc();
	verify(column);
	verify(!column->GetStartElement().IsSet());

	column = column->Suc();
	verify(column);
	verify(column->GetStartElement().IsSet());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="columns:4; width:100px; line-height:50px; orphans:0; widows:0;">
	//!   <div style="float:-o-top; column-span:-o-integer(2); break-after:column; height:100px;"></div>
	//!   line<br>line<br>line<br>line<br>line<br>
	//!  </div>
	//! </body></html>
}
test("Spanned GCPM float with break-after:column #2")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);
	verify(GetActualColumnCount(mc) == 4);
	verify(mc->GetHeight() == 150);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="columns:3; column-fill:auto; line-height:50px; height:250px; orphans:0; widows:0;">
	//!   line<br>
	//!   line<br>
	//!   <div style="break-after:column;">forced</div>
	//!   <div style="float:left;"></div>
	//!   break<br>
	//!  </div>
	//! </body></html>
}
test("Float after break-after:column")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	verify(column);
	verify(column->GetHeight() == 150);

	column = column->Suc();
	verify(column);
	verify(column->GetHeight() == 50);

	verify(!column->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="columns:3; column-fill:auto; line-height:50px; height:250px; orphans:0; widows:0;">
	//!   line<br>
	//!   line<br>
	//!   <div style="break-after:column;">forced</div>
	//!   <div style="float:-o-top; width:1px; height:1px;"></div>
	//!   break<br>
	//!  </div>
	//! </body></html>
}
test("GCPM float after break-after:column")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	verify(column);
	verify(column->GetHeight() == 150);

	column = column->Suc();
	verify(column);
	verify(column->GetHeight() == 50);

	verify(!column->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="columns:3; column-fill:auto; line-height:50px; height:150px; orphans:0; widows:0;">
	//!   line<br>
	//!   line<br>
	//!   <div style="break-after:avoid;">no</div>
	//!   <div style="float:left;"></div>
	//!   break<br>
	//!  </div>
	//! </body></html>
}
test("Float after break-after:avoid")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	verify(column);
	verify(column->GetHeight() == 100);

	column = column->Suc();
	verify(column);
	verify(column->GetHeight() == 100);

	verify(!column->Suc());
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!  <div id="mc" style="columns:3; column-fill:auto; line-height:50px; height:150px; orphans:0; widows:0;">
	//!   line<br>
	//!   line<br>
	//!   <div style="break-after:avoid;">no</div>
	//!   <div style="float:-o-top; width:1px; height:1px;"></div>
	//!   break<br>
	//!  </div>
	//! </body></html>
}
test("GCPM float after break-after:avoid")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	verify(column);
	verify(column->GetHeight() == 100);

	column = column->Suc();
	verify(column);
	verify(column->GetHeight() == 100);

	verify(!column->Suc());
}

html
{
//!<!DOCTYPE html>
//!<html>
//!<head>
//!<style>
//!
//!#mc
//!{
//!	width:100px;
//!	background-color:lime;
//!	columns: 2;
//!	orphans: 1;
//!	widows: 1;
//!	margin-left: 40px;
//!	line-height: 20px;
//!}
//!
//!li { list-style-position:outside; }
//!
//!</style>
//!</head>
//!<body>
//!<div id="mc">
//!	<li id="first_li"></li>
//!	<li id="second_li"></li>
//!</div>
//!</body>
//!</html>
}
test("even distribution with empty outside list item elements")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	verify(mc->GetHeight() == 20);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	Box* box = GetBoxById(state.doc, UNI_L("first_li"));
	verify(box && box->IsBlockBox());
	verify(column);
	verify(column->GetHeight() == 20);
	ColumnBoundaryElement boundary_elm = ColumnBoundaryElement(static_cast<BlockBox*>(box));
	verify(column->GetStartElement().Equals(boundary_elm));
	verify(column->GetStopElement().Equals(boundary_elm));

	column = column->Suc();
	box = GetBoxById(state.doc, UNI_L("second_li"));
	verify(box && box->IsBlockBox());
	verify(column);
	verify(column->GetHeight() == 20);
	boundary_elm = ColumnBoundaryElement(static_cast<BlockBox*>(box));
	verify(column->GetStartElement().Equals(boundary_elm));
	verify(column->GetStopElement().Equals(boundary_elm));

	verify(!column->Suc());
}

html
{
//!<!DOCTYPE html>
//!<html>
//!<head>
//!<style>
//!
//!#mc
//!{
//!	width:200px;
//!	background-color:lime;
//!	columns: 2;
//!	orphans: 1;
//!	widows: 1;
//!	line-height:16px;
//!	margin-left:40px;
//!}
//!
//!li
//!{
//!	height:20px;
//!	list-style-position:outside;
//!	background-color:yellow;
//!}
//!
//!</style>
//!</head>
//!<body>
//!<div id="mc">
//!	Line.
//!	<li id="li"></li>
//!</div>
//!</body>
//!</html>
}
test("Empty list item with marker cannot be divided")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("mc"));
	verify(mc);

	verify(mc->GetHeight() == 36);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	Box* box = GetBoxById(state.doc, UNI_L("li"));
	verify(box && box->IsBlockBox());
	verify(column);
	verify(column->GetHeight() == 36);
	ColumnBoundaryElement boundary_elm = ColumnBoundaryElement(static_cast<BlockBox*>(box));
	verify(column->GetStopElement().Equals(boundary_elm));

	verify(!column->Suc());
}

html
{
//!<!DOCTYPE html>
//!<html>
//!<head>
//!<style>
//!
//!div
//!{
//!	columns: 2;
//!	orphans: 1;
//!	widows: 1;
//!	line-height:20px;
//!	margin-left:40px;
//!}
//!
//!li { list-style-position:outside; }
//!
//!#outer_mc { width:300px; }
//!
//!</style>
//!</head>
//!<body>
//!<div id="outer_mc">
//!	<li id="li">
//!		<div id="inner_mc">Line.<br>Line.<br>Line.</div>
//!	</li>
//!</div>
//!</body>
//!</html>
}
test("distribution with list item and descendant multicol")
{
	MultiColumnContainer* mc = GetMulticolById(state.doc, UNI_L("outer_mc"));
	verify(mc);

	verify(mc->GetHeight() == 20);

	ColumnRow* row = mc->GetFirstRow();
	verify(row);
	verify(!row->Suc());

	Column* column = row->GetFirstColumn();
	Box* box = GetBoxById(state.doc, UNI_L("li"));
	verify(box && box->IsBlockBox());
	verify(column);
	verify(column->GetHeight() == 20);
	ColumnBoundaryElement boundary_elm = ColumnBoundaryElement(static_cast<BlockBox*>(box));
	verify(column->GetStartElement().Equals(boundary_elm));

	column = column->Suc();
	MultiColumnContainer* inner_mc = GetMulticolById(state.doc, UNI_L("inner_mc"));
	verify(inner_mc);
	verify(inner_mc->GetHeight() == 40);
	row = inner_mc->GetFirstRow();
	verify(row);
	row = row->Suc();
	verify(row);
	verify(column);
	verify(column->GetHeight() == 20);
	boundary_elm = ColumnBoundaryElement(row, inner_mc);
	verify(column->GetStartElement().Equals(boundary_elm));

	verify(!column->Suc());
}
