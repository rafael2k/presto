/* -*- mode: c++; tab-width: 4; c-basic-offset: 4 -*- */

group "layout.getNextTextFragment";

require init;

include "modules/style/src/css_values.h";
include "modules/layout/box/box.h";
include "modules/dochand/docman.h";

html
{
	//! <html><head></head><body>
	//!
	//!	<div id="sanity">Hello world!</div>
	//!
	//! <div id="nb1">A BC DEF GHIJ KLMNO</div>
	//!
	//! <div id="nb2">ABC   abc
	//!    abc&nbsp;&nbsp;&nbsp;&nbsp;HIJ
	//! opq</div>
	//!
	//! <div id="nb3">abc    abc   </div>
	//!
	//! <div id="nbidi1">ABC123abc&#x5d0;&#x5d0;&#x5d0;:::abc&#x202e;&#x202e;&#x202e;abc&#x202c;&#x202c;&#x202c;&#x5d0;&#x5d0;&#x5d0; &#x5d0;&#x5d0;&#x5d0; </div>
	//!
	//! <div id="nbidi2">+++</div>
	//!
	//! <div id="nbidi3">&#x483;&#x461;&#x483;&#x483; </div>
	//!
	//! <div id="nbidi4">&#x5d0;&#x5d1;&#x5d2; &#x5d3;&#x5d4;&#x5d5;&#x5d6;</div>
	//!
	//! <div id="nowraptws">abcde abcde </div>
	//!
	//! <div id="nowrapslash">foo No/Wrap</div>
	//!
	//! <textarea id="trailingtabs" rows=2 cols=20>0 Aaaaaa		</textarea>
	//!
	//! <div id="noncollapse">x&#x2000;x&#x2001;x&#x2002;x&#x2003;x&#x2004;x&#x2005;x&#x2006;x&#x2007;x&#x2008;x&#x2009;x&#x200a;x&#x200b;x&#x202f;x&#x3000;x&#xfeff;x</div>
	//!
	//! </body></html>
}

test("SanityTest")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("sanity")) != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("sanity"))->FirstChild() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("sanity"))->FirstChild()->Type() == Markup::HTE_TEXT);
}


table NormalBasicTable1(int, int)
{
  {1,1}
  {2,1}
  {3,1}
  {4,1}
  {5,0}
}

test("GetNextTextFragment.normal.basic1")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("nb1")) != NULL);

	HTML_Element* text_el = doc->GetDocRoot()->GetElmById(UNI_L("nb1"))->FirstChild();
	verify(text_el != NULL);
	verify(text_el->Type() == Markup::HTE_TEXT);

	const uni_char* str = text_el->TextContent();
	verify(str);
	WordInfo wi;
	FontSupportInfo fi(0);
	iterate(len, tr_ws) from NormalBasicTable1
	{
		wi.Reset();
		BOOL ok = GetNextTextFragment(str, uni_strlen(str), wi, CSS_VALUE_normal, TRUE, FALSE, fi, doc, WritingSystem::Unknown);
		verify(ok);
		/* output("length: %d tr_ws %d\n", wi.GetLength(), wi.HasTrailingWhitespace()); */
		verify((unsigned int) len == wi.GetLength());
		verify( (tr_ws && wi.HasTrailingWhitespace()) || !(tr_ws || wi.HasTrailingWhitespace()));
	}
}

table NormalBasicTable2(int, int)
{
	{3,1}
	{3,1}
	{3,0}
#ifdef SUPPORT_TEXT_DIRECTION
	{1,0}
	{1,0}
	{1,0}
	{1,0}
	{3,1}
#else
	{7,1}
#endif
	{3,0}
}

test("GetNextTextFragment.normal.basic2")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("nb2")) != NULL);

	HTML_Element* text_el = doc->GetDocRoot()->GetElmById(UNI_L("nb2"))->FirstChild();
	verify(text_el != NULL);
	verify(text_el->Type() == Markup::HTE_TEXT);

	const uni_char* str = text_el->TextContent();
	verify(str);
	WordInfo wi;
	FontSupportInfo fi(0);
	iterate(len, tr_ws) from NormalBasicTable2
	{
		wi.Reset();
		BOOL ok = GetNextTextFragment(str, uni_strlen(str), wi, CSS_VALUE_normal, TRUE, FALSE, fi, doc, WritingSystem::Unknown);
		verify(ok);
		/* output("length: %d tr_ws %d\n", wi.GetLength(), wi.HasTrailingWhitespace()); */
		verify((unsigned int) len == wi.GetLength());
		verify((tr_ws && wi.HasTrailingWhitespace()) || !(tr_ws || wi.HasTrailingWhitespace()));
	}
}

table NormalBasicTable3(int, int)
{
    {3,1}
#ifdef SUPPORT_TEXT_DIRECTION
    {3,0}
    {0,1}
#else
    {3,1}
#endif
}

test("GetNextTextFragment.normal.basic3")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("nb3")) != NULL);

	HTML_Element* text_el = doc->GetDocRoot()->GetElmById(UNI_L("nb3"))->FirstChild();
	verify(text_el != NULL);
	verify(text_el->Type() == Markup::HTE_TEXT);

	const uni_char* str = text_el->TextContent();
	verify(str);
	WordInfo wi;
	FontSupportInfo fi(0);
	iterate(len, tr_ws) from NormalBasicTable3
	{
		wi.Reset();
		BOOL ok = GetNextTextFragment(str, uni_strlen(str), wi, CSS_VALUE_normal, TRUE, FALSE, fi, doc, WritingSystem::Unknown);
		verify(ok);
		/* output("length: %d tr_ws %d\n", wi.GetLength(), wi.HasTrailingWhitespace()); */
		verify((unsigned int) len == wi.GetLength());
		verify((tr_ws && wi.HasTrailingWhitespace()) || !(tr_ws || wi.HasTrailingWhitespace()));
	}
}

test("GetNextTextFragment.normal.noncollapse")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("noncollapse")) != NULL);

	HTML_Element* text_el = doc->GetDocRoot()->GetElmById(UNI_L("noncollapse"))->FirstChild();
	verify(text_el != NULL);
	verify(text_el->Type() == Markup::HTE_TEXT);
	const uni_char* str = text_el->TextContent();
	verify(str);
	WordInfo wi;
	FontSupportInfo fi(0);
	BOOL cont;
	/* Non collapsing spaces should not give trailing whitespace */
	do
	{
		wi.Reset();
		cont = GetNextTextFragment(str, uni_strlen(str), wi, CSS_VALUE_normal, TRUE, FALSE, fi, doc, WritingSystem::Unknown);
		/* output("length: %d tr_ws %d\n", wi.GetLength(), wi.HasTrailingWhitespace()); */
		verify(!wi.HasTrailingWhitespace());
	} while(cont);
}


test("GetNextTextFragment.font_precondition")
	require SUPPORT_TEXT_DIRECTION;
	require FONTSWITCHING;
	require undefined PLATFORM_FONTSWITCHING;
{
	/* check that we are able to get a font in the used ranges at all. Otherwise GetNextTextFragment will
	   behave differently because of fontswitching. */

	OpFontInfo font_info;
	int b1, b2, b3;
	UnicodePoint dummy1, dummy2;

	styleManager->GetUnicodeBlockInfo(0x5d0, b1, dummy1, dummy2);
	styleManager->GetUnicodeBlockInfo(0x483, b2, dummy1, dummy2);
	styleManager->GetUnicodeBlockInfo(0x461, b3, dummy1, dummy2);

	verify (styleManager->GetRecommendedAlternativeFont(&font_info, b1, WritingSystem::Unknown, (uni_char)0x5d0) != NULL);
	verify (styleManager->GetRecommendedAlternativeFont(&font_info, b2, WritingSystem::Unknown, (uni_char)0x483) != NULL);
	verify (styleManager->GetRecommendedAlternativeFont(&font_info, b3, WritingSystem::Unknown, (uni_char)0x461) != NULL);
}



table NormalBidiTable1(int, int)
{
	{3,0} // Three ltor chars
	{3,0} // 123 are of another bidi category, word should break
	{3,0} // Three ltor chars
	{3,0} // Three rtol chars
	{1,0} // colon is CS and should be one word for each
	{1,0}
	{1,0}
	{3,0} // Three ltor chars
	{1,0} // RLO
	{1,0}
	{1,0}
	{3,0} // Three ltor chars
	{1,0} // PDF
	{1,0}
	{1,0}
	{3,1}
	{3,0} // rtol chars with a trailing ws
	{0,1} // The final neutral character must be alone, since we dont know how it will be sorted wrt bidi
}

test("GetNextTextFragment.normal.bidi1") require success("GetNextTextFragment.font_precondition");
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("nbidi1")) != NULL);
	HTML_Element* text_el = doc->GetDocRoot()->GetElmById(UNI_L("nbidi1"))->FirstChild();
	verify(text_el != NULL);
	verify(text_el->Type() == Markup::HTE_TEXT);

	const uni_char* str = text_el->TextContent();
	verify(str);
	WordInfo wi;
	FontSupportInfo fi(0);
	iterate(len, tr_ws) from NormalBidiTable1
	{
		wi.Reset();
		BOOL ok = GetNextTextFragment(str, uni_strlen(str), wi, CSS_VALUE_normal, TRUE, FALSE, fi, doc, WritingSystem::Unknown);
		verify(ok);
		/* output("length: %d tr_ws %d\n", wi.GetLength(), wi.HasTrailingWhitespace()); */
		verify((unsigned int) len == wi.GetLength());
		verify((tr_ws && wi.HasTrailingWhitespace()) || !(tr_ws || wi.HasTrailingWhitespace()));
	}
}

table NormalBidiTable2(int, int)
{
	{1,0} // plus sign, is of ES, and should be one of each
	{1,0}
	{1,0}
}

test("GetNextTextFragment.normal.bidi2") require success("GetNextTextFragment.font_precondition");
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("nbidi2")) != NULL);

	HTML_Element* text_el = doc->GetDocRoot()->GetElmById(UNI_L("nbidi2"))->FirstChild();
	verify(text_el != NULL);
	verify(text_el->Type() == Markup::HTE_TEXT);

	const uni_char* str = text_el->TextContent();
	verify(str);
	WordInfo wi;
	wi.Reset();
	FontSupportInfo fi(0);
	iterate(len, tr_ws) from NormalBidiTable2
	{
		wi.Reset();
		BOOL ok = GetNextTextFragment(str, uni_strlen(str), wi, CSS_VALUE_normal, TRUE, FALSE, fi, doc, WritingSystem::Unknown);
		verify(ok);
		/* output("length: %d tr_ws %d\n", wi.GetLength(), wi.HasTrailingWhitespace()); */
		verify((unsigned int) len == wi.GetLength());
		verify((tr_ws && wi.HasTrailingWhitespace()) || !(tr_ws || wi.HasTrailingWhitespace()));
	}
}


table NormalBidiTable3(int, int)
{
	{1,0}
	{3,0} // a NSM character should be a part of the previous word
	{0,1} // The final neutral character must be alone, since we dont know how it will be sorted wrt bidi
}


test("GetNextTextFragment.normal.bidi3") require success("GetNextTextFragment.font_precondition");
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("nbidi3")) != NULL);

	HTML_Element* text_el = doc->GetDocRoot()->GetElmById(UNI_L("nbidi3"))->FirstChild();
	verify(text_el != NULL);
	verify(text_el->Type() == Markup::HTE_TEXT);

	const uni_char* str = text_el->TextContent();
	verify(str);
	WordInfo wi;
	FontSupportInfo fi(0);

	iterate(len, tr_ws) from NormalBidiTable3
	{
		wi.Reset();
		BOOL ok = GetNextTextFragment(str, uni_strlen(str), wi, CSS_VALUE_normal, TRUE, FALSE, fi, doc, WritingSystem::Unknown);
		verify(ok);
		/* output("length: %d tr_ws %d\n", wi.GetLength(), wi.HasTrailingWhitespace()); */
		verify((unsigned int) len == wi.GetLength());
		verify((tr_ws && wi.HasTrailingWhitespace()) || !(tr_ws || wi.HasTrailingWhitespace()));
	}
}


table NormalBidiTable4(int, int)
{
	{3,1}
	{4,0}
}

test("GetNextTextFragment.normal.bidi4") require success("GetNextTextFragment.font_precondition");
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("nbidi4")) != NULL);

	HTML_Element* text_el = doc->GetDocRoot()->GetElmById(UNI_L("nbidi4"))->FirstChild();
	verify(text_el != NULL);
	verify(text_el->Type() == Markup::HTE_TEXT);

	const uni_char* str = text_el->TextContent();
	verify(str);
	WordInfo wi;
	FontSupportInfo fi(0);

	iterate(len, tr_ws) from NormalBidiTable4
	{
		wi.Reset();
		BOOL ok = GetNextTextFragment(str, uni_strlen(str), wi, CSS_VALUE_normal, TRUE, FALSE, fi, doc, WritingSystem::Unknown);
		verify(ok);
		/* output("length: %d tr_ws %d\n", wi.GetLength(), wi.HasTrailingWhitespace()); */
		verify((unsigned int) len == wi.GetLength());
		verify((tr_ws && wi.HasTrailingWhitespace()) || !(tr_ws || wi.HasTrailingWhitespace()));
	}
}



test("GetNextTextFragment.normal.null")
{
	FramesDocument* doc = state.doc;
	const uni_char* str = UNI_L("\0");
	WordInfo wi;
	FontSupportInfo fi(0);

	BOOL result = GetNextTextFragment(str, 1, wi, CSS_VALUE_normal, TRUE, FALSE, fi, doc, WritingSystem::Unknown);
	verify(result);
	verify(wi.GetLength() == 1);
}



table NowrapTrWsTable(int, int)
{
	{5,1}
#ifdef SUPPORT_TEXT_DIRECTION
	{5,0}
	{0,1}
#else
	{5,1}
#endif
}

test("GetNextTextFragment.nowrap.trailing_ws")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("nowraptws")) != NULL);

	HTML_Element* text_el = doc->GetDocRoot()->GetElmById(UNI_L("nowraptws"))->FirstChild();
	verify(text_el != NULL);
	verify(text_el->Type() == Markup::HTE_TEXT);

	const uni_char* str = text_el->TextContent();
	verify(str);
	WordInfo wi;
	FontSupportInfo fi(0);

	iterate(len, tr_ws) from NowrapTrWsTable
	{
		wi.Reset();
		BOOL ok = GetNextTextFragment(str, uni_strlen(str), wi, CSS_VALUE_nowrap, FALSE, FALSE, fi, doc, WritingSystem::Unknown);
		verify(ok);
		/* output("length: %d tr_ws %d\n", wi.GetLength(), wi.HasTrailingWhitespace()); */
		verify((unsigned int) len == wi.GetLength());
		verify((tr_ws && wi.HasTrailingWhitespace()) || !(tr_ws || wi.HasTrailingWhitespace()));
	}
}


table NowrapSlashTable(int, int)
{
	{3,0}
#ifdef SUPPORT_TEXT_DIRECTION
	{2,0}
	{1,0}
	{4,0}
#else
	{7,0}
#endif
}

test("GetNextTextFragment.nowrap.slash")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("nowrapslash")) != NULL);

	HTML_Element* text_el = doc->GetDocRoot()->GetElmById(UNI_L("nowrapslash"))->FirstChild();
	verify(text_el != NULL);
	verify(text_el->Type() == Markup::HTE_TEXT);

	const uni_char* str = text_el->TextContent();
	verify(str);
	WordInfo wi;
	FontSupportInfo fi(0);
	UnicodePoint prev_char = 0;
	CharacterClass prev_char_class = CC_Unknown;

	iterate(len, clbb) from NowrapSlashTable
	{
		wi.Reset();
		BOOL ok = GetNextTextFragment(
			str, uni_strlen(str), prev_char, prev_char_class,
			FALSE, wi, CSS_VALUE_nowrap, FALSE, FALSE, fi, doc,
			WritingSystem::Unknown);
		verify(ok);
		/* output("length: %d clbb %d\n", wi.GetLength(), wi.CanLinebreakBefore()); */
		verify((unsigned int) len == wi.GetLength());
		verify((clbb && wi.CanLinebreakBefore()) || !(clbb || wi.CanLinebreakBefore()));
	}
}


table TrailingTabsTable(int, int)
{
	{1,0}
	{1,0}
	{6,1}
	{1,0}
	{1,0}
}

test("GetNextTextFragment.trailingtabs")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("trailingtabs")) != NULL);

	HTML_Element* text_el = doc->GetDocRoot()->GetElmById(UNI_L("trailingtabs"))->FirstChild();
	verify(text_el != NULL);
	verify(text_el->Type() == Markup::HTE_TEXT);

	const uni_char* str = text_el->TextContent();
	verify(str);
	WordInfo wi;
	FontSupportInfo fi(0);
	UnicodePoint prev_char = 0;
	BOOL leading_ws = FALSE;
	CharacterClass prev_char_class = CC_Unknown;

	iterate(len, clbb) from TrailingTabsTable
	{
		wi.Reset();
		BOOL ok = GetNextTextFragment(
			str, uni_strlen(str), prev_char, prev_char_class,
			leading_ws, wi, CSS_VALUE_pre_wrap, TRUE, FALSE, fi,
			doc, WritingSystem::Unknown);
		verify(ok);
		/* output("length: %d clbb %d\n", wi.GetLength(), wi.CanLinebreakBefore()); */
		verify((unsigned int) len == wi.GetLength());
		verify((clbb && wi.CanLinebreakBefore()) || !(clbb || wi.CanLinebreakBefore()));
		leading_ws = wi.HasTrailingWhitespace();
	}
}


table NbspAsSpaceTable(int, int)
{
	{3,1}
	{3,1}
	{3,1}
	{3,1}
	{3,0}
}

test("GetNextTextFragment.nbsp_as_space")  require success("GetNextTextFragment.font_precondition");
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("nb2")) != NULL);

	HTML_Element* text_el = doc->GetDocRoot()->GetElmById(UNI_L("nb2"))->FirstChild();
	verify(text_el != NULL);
	verify(text_el->Type() == Markup::HTE_TEXT);
	const uni_char* str = text_el->TextContent();
	verify(str);
	WordInfo wi;
	FontSupportInfo fi(0);
	iterate(len, tr_ws) from NbspAsSpaceTable
	{
		wi.Reset();
		BOOL ok = GetNextTextFragment(str, uni_strlen(str), wi, CSS_VALUE_normal, TRUE, TRUE, fi, doc, WritingSystem::Unknown);
		verify(ok);
		/* output("length: %d tr_ws %d\n", wi.GetLength(), wi.HasTrailingWhitespace()); */
		verify((unsigned int) len == wi.GetLength());
		verify((tr_ws && wi.HasTrailingWhitespace()) || !(tr_ws || wi.HasTrailingWhitespace()));
	}
}

html
{
	//! <!doctype html>
	//! <html><body>
	//! <div id="one">abc&#x2000;&#x2001;&#x2002;&#x2003; def &#x2000;&#x2000;ghi&#x2000;&#x2001;&#x2002;jkl</div>
	//! </body></html>
}
table NoFontswitchNonCollapsingWhitespace(int, int)
{
	{3, 0}
#ifdef SUPPORT_TEXT_DIRECTION
	{4, 0}
	{0, 1}
	{3, 0}
	{0, 1}
#else
	{4, 1}
	{3, 1}
#endif
	{2, 0}
	{3, 0}
	{3, 0}
	{3, 0}
}
test("GetNextTextFragment.no_fontswitch_noncollapsing_whitespace") require FONTSWITCHING;
										  require undefined PLATFORM_FONTSWITCHING;
										  require success("GetNextTextFragment.font_precondition");
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("one")) != NULL);

	HTML_Element* text_el = doc->GetDocRoot()->GetElmById(UNI_L("one"))->FirstChild();
	verify(text_el != NULL);
	verify(text_el->Type() == Markup::HTE_TEXT);
	const uni_char* str = text_el->TextContent();
	verify(str);
	WordInfo wi;
	FontSupportInfo fi(0);
	iterate(len, tr_ws) from NoFontswitchNonCollapsingWhitespace
	{
		wi.Reset();
		BOOL ok = GetNextTextFragment(str, uni_strlen(str), wi, CSS_VALUE_normal, TRUE, TRUE, fi, doc, WritingSystem::Unknown);
		verify(ok);
		/* output("length: %d tr_ws %d\n", wi.GetLength(), wi.HasTrailingWhitespace()); */
		verify((unsigned int) len == wi.GetLength());
		verify((tr_ws && wi.HasTrailingWhitespace()) || !(tr_ws || wi.HasTrailingWhitespace()));
	}
}


/* Note! I dont particularly agree with how we split <pre> strings, particularly how we handle the
   trailing whitespace flag and that some whitespaces are accounted for twice.
   So this behaviour is mostly to ensure that the given functionality (splitting strings into
   sections of non-collapsing spaces) works.
   If this test fails, you may have fixed a bug, and the test should be updated accordingly.*/
html
{
	//! <!doctype html>
	//! <html><body>
	//! <div id="one">abc&#x2000;&#x2001;&#x2002;&#x2003; def &#x2000;&#x2000;ghi&#x2000;&#x2001;&#x2002;jkl</div>
	//! </body></html>
}
table NoFontswitchNonCollapsingWhitespacePre(int, int)
{
	{3, 0}
#ifdef SUPPORT_TEXT_DIRECTION
	{4, 0}
	{1, 1}
	{3, 0}
	{1, 0}
#else
	{4, 1}
	{3, 1}
#endif
	{2, 1}
	{3, 0}
	{3, 1}
	{3, 0}
}
test("GetNextTextFragment.no_fontswitch_noncollapsing_whitespace_pre") require FONTSWITCHING;
										  require undefined PLATFORM_FONTSWITCHING;
										  require success("GetNextTextFragment.font_precondition");
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("one")) != NULL);

	HTML_Element* text_el = doc->GetDocRoot()->GetElmById(UNI_L("one"))->FirstChild();
	verify(text_el != NULL);
	verify(text_el->Type() == Markup::HTE_TEXT);
	const uni_char* str = text_el->TextContent();
	verify(str);
	WordInfo wi;
	FontSupportInfo fi(0);
	iterate(len, tr_ws) from NoFontswitchNonCollapsingWhitespacePre
	{
		wi.Reset();
		BOOL ok = GetNextTextFragment(str, uni_strlen(str), wi, CSS_VALUE_pre, TRUE, TRUE, fi, doc, WritingSystem::Unknown);
		verify(ok);
		/* output("length: %d tr_ws %d\n", wi.GetLength(), wi.HasTrailingWhitespace()); */
		verify((unsigned int) len == wi.GetLength());
		verify((tr_ws && wi.HasTrailingWhitespace()) || !(tr_ws || wi.HasTrailingWhitespace()));
	}
}

html
{
	//! <!doctype html>
	//! <html><body>
	//! <div id="one">&#x2000;&#x2001;&#x2002;&#x2003;</div>
	//! </body></html>
}
table NoFontswitchNonCollapsingWhitespaceOnly(int, int)
{
	{4, 0}
}
test("GetNextTextFragment.no_fontswitch_noncollapsing_whitespace_only") require FONTSWITCHING;
										  require undefined PLATFORM_FONTSWITCHING;
										  require success("GetNextTextFragment.font_precondition");
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
	verify(doc->GetDocRoot()->GetElmById(UNI_L("one")) != NULL);

	HTML_Element* text_el = doc->GetDocRoot()->GetElmById(UNI_L("one"))->FirstChild();
	verify(text_el != NULL);
	verify(text_el->Type() == Markup::HTE_TEXT);
	const uni_char* str = text_el->TextContent();
	verify(str);
	WordInfo wi;
	FontSupportInfo fi(0);
	iterate(len, tr_ws) from NoFontswitchNonCollapsingWhitespaceOnly
	{
		wi.Reset();
		BOOL ok = GetNextTextFragment(str, uni_strlen(str), wi, CSS_VALUE_normal, TRUE, TRUE, fi, doc, WritingSystem::Unknown);
		verify(ok);
		/* output("length: %d tr_ws %d\n", wi.GetLength(), wi.HasTrailingWhitespace()); */
		verify((unsigned int) len == wi.GetLength());
		verify((tr_ws && wi.HasTrailingWhitespace()) || !(tr_ws || wi.HasTrailingWhitespace()));
	}
}

