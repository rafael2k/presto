/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.	It may not be distributed
** under any circumstances.
*/
group "layout.getComputedDecl";

require init;

include "modules/layout/cascade.h";
include "modules/logdoc/htm_ldoc.h";

html
{
//! <!doctype html>
//! <html>
//!  <body style="color:#444444;">
//!   <div style="position:absolute;left:100px;top:90px;width:20px;height:35px"></div>
//!   <div style="color:red">
//!    <div style="color:green;">
//!    </div>
//!   </div>
//!   <span style="position:relative; left:55px; top:44px; right:33px; bottom:22px;"></span>
//!   <span style="position:relative; right:33px; bottom:22px;"></span>
//!   <span style="left:55px; top:44px; right:33px; bottom:22px;"></span>
//!   <span style="display:none;"></span>
//!   <span style="display:none; width:10px; height:20px;"></span>
//!   <span style="display:none; width:30%; height:40%;"></span>
//!   <span style="display:none;">
//!    <span style="width:50%; height:60px;"></span>
//!   </span>
//!   <div style="column-width:200px; column-count:3; column-gap:30px; column-rule:10px dashed #123456; column-fill:auto; column-span:all;"></div>
//!   <div style="column-width:10em; column-count:3; column-gap:9mm; column-rule:8pt dashed #123456; column-fill:auto; column-span:all;"></div>
//!   <div style="column-width:auto; column-count:auto;"></div>
//!   <div style="display:inline-flex; position:absolute;"></div>
//!  </body>
//! </html>
}

global
{
}

table ComputedDeclList(const char *, int, const char *, const uni_char *)
{
	// type, idx, prop, value
	{ "html", 1, "top", UNI_L("auto") }
	{ "html", 1, "clip", UNI_L("rect(0px, 0px, 0px, 0px)") }
	{ "html", 1, "left", UNI_L("auto") }
	{ "html", 1, "page", UNI_L("auto") }
	{ "html", 1, "size", UNI_L("portrait") }
	{ "html", 1, "clear", UNI_L("none") }
	{ "html", 1, "color", UNI_L("rgb(0, 0, 0)") }
	{ "html", 1, "widows", UNI_L("2") }

	{ "div", 1, "position", UNI_L("absolute") }
	{ "div", 1, "left", UNI_L("100px") }
	{ "div", 1, "top", UNI_L("90px") }
	{ "div", 1, "right", UNI_L("auto") }
	{ "div", 1, "bottom", UNI_L("auto") }

	{ "div", 3, "color", UNI_L("rgb(0, 128, 0)") }

	{ "span", 1, "position", UNI_L("relative") }
	{ "span", 1, "left", UNI_L("55px") }
	{ "span", 1, "top", UNI_L("44px") }
	{ "span", 1, "right", UNI_L("33px") }
	{ "span", 1, "bottom", UNI_L("22px") }

	{ "span", 2, "position", UNI_L("relative") }
	{ "span", 2, "left", UNI_L("auto") }
	{ "span", 2, "top", UNI_L("auto") }
	{ "span", 2, "right", UNI_L("33px") }
	{ "span", 2, "bottom", UNI_L("22px") }

	{ "span", 3, "position", UNI_L("static") }
	{ "span", 3, "left", UNI_L("auto") }
	{ "span", 3, "top", UNI_L("auto") }
	{ "span", 3, "right", UNI_L("auto") }
	{ "span", 3, "bottom", UNI_L("auto") }

	{ "span", 4, "width", UNI_L("auto") }
	{ "span", 4, "height", UNI_L("auto") }
	{ "span", 5, "width", UNI_L("10px") }
	{ "span", 5, "height", UNI_L("20px") }
	{ "span", 6, "width", UNI_L("30%") }
	{ "span", 6, "height", UNI_L("auto") }
	{ "span", 8, "width", UNI_L("50%") }
	{ "span", 8, "height", UNI_L("60px") }

	{ "body", 1, "column-width", UNI_L("auto") }
	{ "body", 1, "column-count", UNI_L("auto") }
	{ "body", 1, "column-rule-style", UNI_L("none") }
	{ "body", 1, "column-rule-color", UNI_L("rgb(68, 68, 68)") }
	{ "body", 1, "column-fill", UNI_L("balance") }
	{ "body", 1, "column-span", UNI_L("none") }

	{ "div", 4, "column-width", UNI_L("200px") }
	{ "div", 4, "column-count", UNI_L("3") }
	{ "div", 4, "column-gap", UNI_L("30px") }
	{ "div", 4, "column-rule-width", UNI_L("10px") }
	{ "div", 4, "column-rule-style", UNI_L("dashed") }
	{ "div", 4, "column-rule-color", UNI_L("rgb(18, 52, 86)") }
	{ "div", 4, "column-fill", UNI_L("auto") }
	{ "div", 4, "column-span", UNI_L("all") }
	{ "div", 7, "display", UNI_L("flex") }
}

foreach (tag_name, tag_idx, property, expected_value) from ComputedDeclList
{
	test("GetComputedDecl " + tag_name + "[" + tag_idx + "]" + " " + property)
	{
		HLDocProfile *hld_profile = state.doc->GetHLDocProfile();
		HTML_Element *element = find_element(tag_name, tag_idx);
		TempBuffer tmp_buf;
		OpString uni_property;

		verify(OpStatus::IsSuccess(uni_property.Set(property)));

		short prop = GetCSS_Property(uni_property.CStr(), uni_property.Length());
		CSS_decl *decl = LayoutProperties::GetComputedDecl(element, prop,
														   CSS_PSEUDO_CLASS_UNKNOWN, hld_profile);
		verify(decl);
		tmp_buf.Clear();
		CSS::FormatDeclarationL(&tmp_buf, decl, FALSE, CSS_FORMAT_COMPUTED_STYLE);
		OP_DELETE(decl);
		verify(uni_strcmp(tmp_buf.GetStorage(), expected_value) == 0);
	}
}

table CurrentStyleDeclList(const char *, int, const char *, const uni_char *)
{
	// type, idx, prop, value
	{ "html", 1, "top", UNI_L("auto") }
	{ "html", 1, "clip", UNI_L("rect(0, 0, 0, 0)") }
	{ "html", 1, "left", UNI_L("auto") }
	{ "html", 1, "page", UNI_L("auto") }
	{ "html", 1, "size", UNI_L("portrait") }
	{ "html", 1, "clear", UNI_L("none") }
	{ "html", 1, "color", UNI_L("#000000") }
	{ "html", 1, "width", UNI_L("auto") }

	{ "div", 1, "position", UNI_L("absolute") }
	{ "div", 1, "left", UNI_L("100px") }
	{ "div", 1, "top", UNI_L("90px") }
	{ "div", 1, "bottom", UNI_L("auto") }
	{ "div", 1, "right", UNI_L("auto") }
	{ "div", 1, "width", UNI_L("20px") }
	{ "div", 1, "height", UNI_L("35px") }

	{ "div", 3, "color", UNI_L("#008000") }

	{ "body", 1, "column-width", UNI_L("auto") }
	{ "body", 1, "column-count", UNI_L("auto") }
	{ "body", 1, "column-rule-width", UNI_L("medium") }
	{ "body", 1, "column-rule-style", UNI_L("none") }
//	{ "body", 1, "column-rule-color", UNI_L("#444444") } // Fails because of bug CORE-32671
	{ "body", 1, "column-fill", UNI_L("balance") }
	{ "body", 1, "column-span", UNI_L("none") }

	{ "div", 5, "column-width", UNI_L("10em") }
	{ "div", 5, "column-count", UNI_L("3") }
	{ "div", 5, "column-gap", UNI_L("9mm") }
	{ "div", 5, "column-rule-width", UNI_L("8pt") }
	{ "div", 5, "column-rule-style", UNI_L("dashed") }
	{ "div", 5, "column-rule-color", UNI_L("#123456") }
	{ "div", 5, "column-fill", UNI_L("auto") }
	{ "div", 5, "column-span", UNI_L("all") }

	{ "div", 6, "column-width", UNI_L("auto") }
	{ "div", 6, "column-count", UNI_L("auto") }
}

foreach (tag_name, tag_idx, property, expected_value) from CurrentStyleDeclList
{
	test("CurrentStyleDecl " + tag_name + "[" + tag_idx + "]" + " " + property) require CURRENT_STYLE_SUPPORT;
	{
		HLDocProfile *hld_profile = state.doc->GetHLDocProfile();
		TempBuffer tmp_buf;
		OpString uni_property;

		verify(OpStatus::IsSuccess(uni_property.Set(property)));

		HTML_Element *element = find_element(tag_name, tag_idx);

		short prop = GetCSS_Property(uni_property.CStr(), uni_property.Length());
		CSS_decl *decl = LayoutProperties::GetCurrentStyleDecl(element, prop,
															   CSS_PSEUDO_CLASS_UNKNOWN, hld_profile);
		verify(decl);
		tmp_buf.Clear();
		CSS::FormatDeclarationL(&tmp_buf, decl, FALSE, CSS_FORMAT_CURRENT_STYLE);
		OP_DELETE(decl);
		verify(uni_strcmp(tmp_buf.GetStorage(), expected_value) == 0);
	}
}

html
{
//! <!DOCTYPE html>
//! <html>
//!   <head>
//!     <title>currentStyle for defaults</title>
//!   </head>
//!   <body>
//!     <p>dummy</p>
//!   </body>
//! </html>
}
test("CurrentStyleDecl - border") require CURRENT_STYLE_SUPPORT;
language ecmascript;
{
	var p = document.getElementsByTagName('p')[0];
	verify(p.currentStyle.border == "medium none transparent");
	// for consistency, also check that getComputedStyle works as expected
	verify(getComputedStyle(p, null).getPropertyValue("border") == "0px rgb(0, 0, 0)");
}

html
{
	//!<!doctype html>
	//!<html><body><select multiple><optgroup id="og" style="display:table;float:left;position:absolute;">
	//!<option id="op" style="display:inherit;float:inherit;position:inherit;"></option>
	//!</optgroup></select></body></html>
}
test("ComputedStyle and currentStyle - invalid layout values select") require CURRENT_STYLE_SUPPORT;
language ecmascript;
{
	var og = document.getElementById('og');
	var op = document.getElementById('op');

	verify(getComputedStyle(og, null).getPropertyValue('display') == "table");
	verify(getComputedStyle(op, null).getPropertyValue('display') == "table");
	verify(getComputedStyle(og, null).getPropertyValue('float') == "none");
	verify(getComputedStyle(op, null).getPropertyValue('float') == "none");
	verify(getComputedStyle(og, null).getPropertyValue('position') == "absolute");
	verify(getComputedStyle(og, null).getPropertyValue('position') == "absolute");

	verify(og.currentStyle.display == "table");
	verify(op.currentStyle.display == "table");
	verify(og.currentStyle.styleFloat == "left");
	verify(op.currentStyle.styleFloat == "left");
	verify(og.currentStyle.position == "absolute");
	verify(op.currentStyle.position == "absolute");
}
