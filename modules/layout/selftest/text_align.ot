/* -*- mode: c++; tab-width: 4; c-basic-offset: 4 -*- */

group "layout.text_align";

require init;

language c++;

include "modules/layout/content/content.h";

global
{
	HTMLayoutProperties props;
}

test("Text alignment LTR non-overflow")
{
	Line line;
	line.SetWidth(LayoutCoord(100));
	line.AllocateSpace(LayoutCoord(50), LayoutCoord(0), 1, LayoutCoord(0), LayoutCoord(0));

	props.direction = CSS_VALUE_ltr;
	props.text_align = CSS_VALUE_left;
	verify(line.GetTextAlignOffset(props) == 0);
	props.text_align = CSS_VALUE_right;
	verify(line.GetTextAlignOffset(props) == 50);
	props.text_align = CSS_VALUE_center;
	verify(line.GetTextAlignOffset(props) == 25);
}

test("Text alignment RTL non-overflow") require SUPPORT_TEXT_DIRECTION;
{
	Line line;
	line.SetWidth(LayoutCoord(100));
	line.AllocateSpace(LayoutCoord(50), LayoutCoord(0), 1, LayoutCoord(0), LayoutCoord(0));

	props.direction = CSS_VALUE_rtl;
	props.text_align = CSS_VALUE_left;
	verify(line.GetTextAlignOffset(props) == 0);
	props.text_align = CSS_VALUE_right;
	verify(line.GetTextAlignOffset(props) == 50);
	props.text_align = CSS_VALUE_center;
	verify(line.GetTextAlignOffset(props) == 25);
}

test("Text alignment LTR overflow")
{
	Line line;
	line.SetWidth(LayoutCoord(50));
	line.AllocateSpace(LayoutCoord(100), LayoutCoord(0), 1, LayoutCoord(0), LayoutCoord(0));

	props.direction = CSS_VALUE_ltr;
	props.text_align = CSS_VALUE_left;
	verify(line.GetTextAlignOffset(props) == 0);
	props.text_align = CSS_VALUE_right;
	verify(line.GetTextAlignOffset(props) == 0);
	props.text_align = CSS_VALUE_center;
	verify(line.GetTextAlignOffset(props) == 0);
}

test("Text alignment RTL overflow") require SUPPORT_TEXT_DIRECTION;
{
	Line line;
	line.SetWidth(LayoutCoord(50));
	line.AllocateSpace(LayoutCoord(100), LayoutCoord(0), 1, LayoutCoord(0), LayoutCoord(0));

	props.direction = CSS_VALUE_rtl;
	props.text_align = CSS_VALUE_left;
	verify(line.GetTextAlignOffset(props) == -50);
	props.text_align = CSS_VALUE_right;
	verify(line.GetTextAlignOffset(props) == -50);
	props.text_align = CSS_VALUE_center;
	verify(line.GetTextAlignOffset(props) == -50);
}

test("Text alignment LTR non-overflow, directional") require SUPPORT_TEXT_DIRECTION;
{
	Line line;
	line.SetWidth(LayoutCoord(100));
	line.AllocateSpace(LayoutCoord(50), LayoutCoord(0), 1, LayoutCoord(0), LayoutCoord(0));

	props.direction = CSS_VALUE_ltr;
	props.text_align = CSS_VALUE_left;
	verify(line.GetTextAlignOffset(props, FALSE, TRUE) == 0);
	props.text_align = CSS_VALUE_right;
	verify(line.GetTextAlignOffset(props, FALSE, TRUE) == 50);
	props.text_align = CSS_VALUE_center;
	verify(line.GetTextAlignOffset(props, FALSE, TRUE) == 25);
}

test("Text alignment RTL non-overflow, directional") require SUPPORT_TEXT_DIRECTION;
{
	Line line;
	line.SetWidth(LayoutCoord(100));
	line.AllocateSpace(LayoutCoord(50), LayoutCoord(0), 1, LayoutCoord(0), LayoutCoord(0));

	props.direction = CSS_VALUE_rtl;
	props.text_align = CSS_VALUE_left;
	verify(line.GetTextAlignOffset(props, FALSE, TRUE) == -50);
	props.text_align = CSS_VALUE_right;
	verify(line.GetTextAlignOffset(props, FALSE, TRUE) == 0);
	props.text_align = CSS_VALUE_center;
	verify(line.GetTextAlignOffset(props, FALSE, TRUE) == -25);
}

test("Text alignment LTR overflow, directional") require SUPPORT_TEXT_DIRECTION;
{
	Line line;
	line.SetWidth(LayoutCoord(50));
	line.AllocateSpace(LayoutCoord(100), LayoutCoord(0), 1, LayoutCoord(0), LayoutCoord(0));

	props.direction = CSS_VALUE_ltr;
	props.text_align = CSS_VALUE_left;
	verify(line.GetTextAlignOffset(props, FALSE, TRUE) == 0);
	props.text_align = CSS_VALUE_right;
	verify(line.GetTextAlignOffset(props, FALSE, TRUE) == 0);
	props.text_align = CSS_VALUE_center;
	verify(line.GetTextAlignOffset(props, FALSE, TRUE) == 0);
}

test("Text alignment RTL overflow, directional") require SUPPORT_TEXT_DIRECTION;
{
	Line line;
	line.SetWidth(LayoutCoord(50));
	line.AllocateSpace(LayoutCoord(100), LayoutCoord(0), 1, LayoutCoord(0), LayoutCoord(0));

	props.direction = CSS_VALUE_rtl;
	props.text_align = CSS_VALUE_left;
	verify(line.GetTextAlignOffset(props, FALSE, TRUE) == 0);
	props.text_align = CSS_VALUE_right;
	verify(line.GetTextAlignOffset(props, FALSE, TRUE) == 0);
	props.text_align = CSS_VALUE_center;
	verify(line.GetTextAlignOffset(props, FALSE, TRUE) == 0);
}
