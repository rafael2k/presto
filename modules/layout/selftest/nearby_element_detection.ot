/* -*- mode: c++; tab-width: 4; c-basic-offset: 4 -*- */
group "layout.nearby_element_detection";

require init;
require NEARBY_ELEMENT_DETECTION;

include "modules/layout/traverse/traverse.h";
include "modules/widgets/finger_touch/element_of_interest.h";

global
{
    Head eoi_list;
}

html
{
//! <!doctype html>
//! <html><body style="margin:0">
//! <input style="padding: 25px" type="checkbox" id="checkbox1"/>
//! </body></html>
}
test("Keep padding and border on form elements when doing nearby element detection")
{
    HTML_Element *root = state.doc->GetLogicalDocument()->GetRoot();

    // Hit padding
    IntersectionObject intersection_object(state.doc, LayoutCoord(25), LayoutCoord(25));

    intersection_object.EnableEoiDetection(&eoi_list, 1);
    intersection_object.Traverse(root);

    ElementOfInterest *iter = static_cast<ElementOfInterest *>(eoi_list.First());

	// One element expected

	verify(iter);
	verify(iter->Suc() == NULL);

	OpRect r = iter->GetOriginalRect();

	// The original rect of the form element should be at (0,0)

	verify(r.x == 0);
	verify(r.y == 0);
}
finally
{
    eoi_list.Clear();
}

html
{
//! <!doctype html>
//! <html><body style="margin:0">
//! <a href=""><img src="http://t/resources/images/320x320-green.png" style="padding: 25px"></a>
//! </body></html>
}
test("Avoid hitting image with nearby element detection")
{
    HTML_Element *root = state.doc->GetLogicalDocument()->GetRoot();

    // Hit padding
    IntersectionObject intersection_object(state.doc, LayoutCoord(24), LayoutCoord(24));

    intersection_object.EnableEoiDetection(&eoi_list, 1);
    intersection_object.Traverse(root);

    ElementOfInterest *iter = static_cast<ElementOfInterest *>(eoi_list.First());

	// No element expected

	verify(iter == NULL);
}
finally
{
    eoi_list.Clear();
}
test("Hit image with nearby element detection")
{
    HTML_Element *root = state.doc->GetLogicalDocument()->GetRoot();

    // Hit padding
    IntersectionObject intersection_object(state.doc, LayoutCoord(25), LayoutCoord(25));

    intersection_object.EnableEoiDetection(&eoi_list, 1);
    intersection_object.Traverse(root);

    ElementOfInterest *iter = static_cast<ElementOfInterest *>(eoi_list.First());

	// No element expected

	verify(iter);
	verify(iter->Suc() == NULL);

	OpRect r = iter->GetOriginalRect();

	// The original rect of the image should be at (6,6)

	verify(r.x > 0);
	verify(r.y > 0);
}
finally
{
    eoi_list.Clear();
}
