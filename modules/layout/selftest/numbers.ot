/* -*- mode: c++; tab-width: 4; c-basic-offset: 4 -*- */

group "layout.numbers";

require init;

include "modules/layout/numbers.h";
include "modules/style/css.h";

table ListTypes (short) {
	{ CSS_VALUE_lower_alpha },
	{ CSS_VALUE_upper_alpha },
	{ CSS_VALUE_lower_roman },
	{ CSS_VALUE_upper_roman },
	{ CSS_VALUE_lower_greek },
	{ CSS_VALUE_armenian },
	{ CSS_VALUE_georgian },
	{ CSS_VALUE_decimal_leading_zero },
	{ CSS_VALUE_decimal }
};

foreach (list_type) from ListTypes
{
	test("buffer overrun")
	{
		uni_char *buffer = OP_NEWA(uni_char, 100);
		verify(buffer);

		int i;
		for (i = 0; i < 100; ++ i)
			buffer[i] = 0xcccc;

		/* Note: starting at max_length = 5, because assorted
		   assertions fail otherwise. Should probably fix that. */

		for (int max_length = 5; max_length < 30; ++ max_length)
		{
			int length = MakeListNumberStr(77, list_type, UNI_L("abcde"), buffer, max_length);

			verify(length <= max_length);

			for (i = max_length + 1; i < 100; ++ i)
				verify(buffer[i] == 0xcccc);
		}
	}
	finally
	{
		OP_DELETEA(buffer);
	}
}
