/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2012 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.	It may not be distributed
** under any circumstances.
*/

group "layout.layoutProps";

require init;

include "modules/display/fontdb.h";
include "modules/layout/cascade.h";
include "modules/layout/layout_workplace.h";
include "modules/layout/layoutprops.h";
include "modules/layout/box/box.h";
include "modules/layout/content/content.h";
include "modules/style/css_decl.h";

global
{
	BOOL DeclEqual(CSS_decl* decl1, CSS_decl* decl2)
	{
		return !decl1 && !decl2 ||
			decl1 && decl2 && decl1->IsEqual(decl2);
	}

	BOOL BgImagesEqual(const BgImages& bg1, const BgImages& bg2)
	{
		return DeclEqual(bg1.GetImages(), bg2.GetImages()) &&
			DeclEqual(bg1.GetRepeats(), bg2.GetRepeats()) &&
			DeclEqual(bg1.GetAttachs(), bg2.GetAttachs()) &&
			DeclEqual(bg1.GetPositions(), bg2.GetPositions()) &&
			DeclEqual(bg1.GetOrigins(), bg2.GetOrigins()) &&
			DeclEqual(bg1.GetClips(), bg2.GetClips()) &&
			DeclEqual(bg1.GetSizes(), bg2.GetSizes());
	}
}

html
{
	//! <html><body>
	//! </body></html>
}

test("SanityTest")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);
	verify(doc->GetDocRoot() != NULL);
}

html
{
	//! <!DOCTYPE html>
	//! <html>
	//!  <head>
	//!   <style>
	//!    .set_inheritable, .set_all /* set all inheritable properties to something different from initial value */
	//!    {
	//!     border-collapse:collapse;
	//!     border-spacing:7px;
	//!     caption-side:bottom;
	//!     color:#00ff00;
	//!     cursor:crosshair;
	//!     direction:rtl;
	//!     empty-cells:hide;
	//!     font-family:monospace;
	//!     font-size:70px;
	//!     font-style:italic;
	//!     font-variant:small-caps;
	//!     font-weight:bold;
	//!     letter-spacing:2em;
	//!     line-height:7em;
	//!     list-style-image:none;
	//!     list-style-position:inside;
	//!     list-style-type:upper-roman;
	//!     orphans:7;
	//!     quotes:'a' 'b';
	//!     text-align:center;
	//!     text-indent:7em;
	//!     text-transform:uppercase;
	//!     visibility:hidden;
	//!     white-space:pre;
	//!     widows:7;
	//!     word-spacing:7em;
	//!    }
	//!    .set_noninheritable, .set_all /* set all non-inheritable properties to something different from initial value */
	//!    {
	//!     background-attachment:fixed;
	//!     background-color:#0000ff;
	//!     background-image:none;
	//!     background-position:7% 7%;
	//!     background-repeat:no-repeat;
	//!     border:7px solid pink;
	//!     bottom:7px;
	//!     clear:right;
	//!     clip:rect(5px, 40px, 45px, 5px);
	//!     content:normal; /* Setting content to anything else causes way too interesting things to happen */
	//!     counter-increment:7;
	//!     counter-reset:7;
	//!     display:inline-block;
	//!     float:left;
	//!     height:7em;
	//!     left:7px;
	//!     margin:7px;
	//!     max-height:17em;
	//!     max-width:17em;
	//!     min-height:1em;
	//!     min-width:1em;
	//!     outline:7px solid brown;
	//!     overflow:scroll;
	//!     padding:7px;
	//!     page-break-after:always;
	//!     page-break-before:always;
	//!     page-break-inside:avoid;
	//!     position:relative;
	//!     right:7px;
	//!     table-layout:fixed;
	//!     text-decoration:overline;
	//!     top:7px;
	//!     unicode-bidi:embed;
	//!     vertical-align:bottom;
	//!     width:7em;
	//!     z-index:7;
	//!     /* Assorted non-CSS 2.1 properties: */
	//!     /* css-3-multicol: */
	//!     column-width:7em;
	//!     column-count:3;
	//!     column-gap:7mm;
	//!     column-rule-color:#ffff00;
	//!     column-rule-style:dashed;
	//!     column-rule-width:1px;
	//!     column-span:all;
	//!     column-fill:auto;
	//!    }
	//!    .inherit_all /* explicitly inherit all properies */
	//!    {
	//!     background-attachment:inherit;
	//!     background-color:inherit;
	//!     background-image:inherit;
	//!     background-position:inherit;
	//!     background-repeat:inherit;
	//!     border-collapse:inherit;
	//!     border-spacing:inherit;
	//!     border:inherit;
	//!     bottom:inherit;
	//!     caption-side:inherit;
	//!     clear:inherit;
	//!     clip:inherit;
	//!     color:inherit;
	//!     content:inherit;
	//!     counter-increment:inherit;
	//!     counter-reset:inherit;
	//!     cursor:inherit;
	//!     direction:inherit;
	//!     display:inherit;
	//!     empty-cells:inherit;
	//!     float:inherit;
	//!     font-family:inherit;
	//!     font-size:inherit;
	//!     font-style:inherit;
	//!     font-variant:inherit;
	//!     font-weight:inherit;
	//!     height:inherit;
	//!     left:inherit;
	//!     letter-spacing:inherit;
	//!     line-height:inherit;
	//!     list-style-image:inherit;
	//!     list-style-position:inherit;
	//!     list-style-type:inherit;
	//!     margin:inherit;
	//!     max-height:inherit;
	//!     max-width:inherit;
	//!     min-height:inherit;
	//!     min-width:inherit;
	//!     orphans:inherit;
	//!     outline:inherit;
	//!     overflow:inherit;
	//!     padding:inherit;
	//!     page-break-after:inherit;
	//!     page-break-before:inherit;
	//!     page-break-inside:inherit;
	//!     position:inherit;
	//!     quotes:inherit;
	//!     right:inherit;
	//!     table-layout:inherit;
	//!     text-align:inherit;
	//!     text-decoration:inherit;
	//!     text-indent:inherit;
	//!     text-transform:inherit;
	//!     top:inherit;
	//!     unicode-bidi:inherit;
	//!     vertical-align:inherit;
	//!     visibility:inherit;
	//!     white-space:inherit;
	//!     widows:inherit;
	//!     width:inherit;
	//!     word-spacing:inherit;
	//!     z-index:inherit;
	//!     /* Assorted non-CSS 2.1 properties: */
	//!     /* css-3-multicol: */
	//!     column-width:inherit;
	//!     column-count:inherit;
	//!     column-gap:inherit;
	//!     column-rule:inherit;
	//!     column-span:inherit;
	//!     column-fill:inherit;
	//!    }
	//!   </style>
	//!  </head>
	//!  <body>
	//!   <div>
	//!    <div id="child1"></div>
	//!    <div id="child2" class="set_noninheritable"></div>
	//!    <div id="child3" class="inherit_all"></div>
	//!	  </div>
	//!   <div class="set_inheritable">
	//!    <div id="child4"></div>
	//!    <div id="child5" class="set_noninheritable"></div>
	//!    <div id="child6" class="inherit_all"></div>
	//!	  </div>
	//!   <div class="set_all">
	//!    <div id="child7" class="set_noninheritable"></div>
	//!    <div id="child8" class="inherit_all"></div>
	//!	  </div>
	//!  </body>
	//! </html>
}

table AllPropsEqual(const char *)
{
	{ "child1" }
	{ "child3" }
	{ "child6" }
	{ "child7" }
	{ "child8" }
}

table InheritedPropsEqual(const char *)
{
	{ "child2" }
	{ "child4" }
	{ "child5" }
}

foreach (name) from AllPropsEqual
{
	/* Verify that all properties are inherited properly, when explicitly told
	   to do so. This will make sure that CssPropertyItem behaves as it should
	   and likewise for HTMLayoutProperties::GetCssProperties(). */

	test("All properties are equal: " + name)
	{
		AutoDeleteHead cascade;
		OpString elmname;
		verify(OpStatus::IsSuccess(elmname.Set(name)));
		verify(OpStatus::IsSuccess(state.doc->Reflow(FALSE)));
		HTML_Element* elm = state.doc->GetDocRoot()->GetElmById(elmname.CStr());
		verify(elm);

		LayoutProperties* child_cascade = LayoutProperties::CreateCascade(elm, cascade, state.doc->GetHLDocProfile());
		verify(child_cascade);

		const HTMLayoutProperties &child = *child_cascade->GetProps();
		const HTMLayoutProperties &parent = *child_cascade->Pred()->GetProps();

		verify(child.bg_color == parent.bg_color);
		verify(BgImagesEqual(child.bg_images, child.bg_images));
		verify(child.border_collapse == parent.border_collapse);
		verify(child.border_spacing_horizontal == parent.border_spacing_horizontal);
		verify(child.border_spacing_vertical == parent.border_spacing_vertical);
		verify(!op_memcmp(&child.border, &parent.border, sizeof(child.border)));
		verify(child.bottom == parent.bottom);
		verify(child.caption_side == parent.caption_side);
		verify(child.font_color == parent.font_color);
		verify(child.clear == parent.clear);
		verify(child.clip_left == parent.clip_left);
		verify(child.clip_right == parent.clip_right);
		verify(child.clip_top == parent.clip_top);
		verify(child.clip_bottom == parent.clip_bottom);
		verify(DeclEqual(child.content_cp, parent.content_cp));
		verify(DeclEqual(child.counter_inc_cp, parent.counter_inc_cp));
		verify(DeclEqual(child.counter_reset_cp, parent.counter_reset_cp));
		verify(child.cursor == parent.cursor);
#ifdef SUPPORT_TEXT_DIRECTION
		verify(child.direction == parent.direction);
#endif // SUPPORT_TEXT_DIRECTION
		verify(child.display_type == parent.display_type);
		verify(child.empty_cells == parent.empty_cells);
		verify(child.float_type == parent.float_type);
		verify(child.font_number == parent.font_number);
		verify(child.font_size == parent.font_size);
		verify(child.font_italic == parent.font_italic);
		verify(child.small_caps == parent.small_caps);
		verify(child.font_weight == parent.font_weight);
		verify(child.content_height == parent.content_height);
		verify(child.left == parent.left);
		verify(child.letter_spacing == parent.letter_spacing);
		verify(child.line_height_i == parent.line_height_i);
		verify(child.list_style_image == parent.list_style_image);
		verify(child.list_style_pos == parent.list_style_pos);
		verify(child.list_style_type == parent.list_style_type);
		verify(child.margin_top == parent.margin_top);
		verify(child.margin_left == parent.margin_left);
		verify(child.margin_right == parent.margin_right);
		verify(child.margin_bottom == parent.margin_bottom);
		verify(child.max_height == parent.max_height);
		verify(child.max_width == parent.max_width);
		verify(child.min_height == parent.min_height);
		verify(child.min_width == parent.min_width);
		verify(child.page_props.orphans == parent.page_props.orphans);
		verify(!op_memcmp(&child.outline, &parent.outline, sizeof(child.outline)));
		verify(child.outline_offset == parent.outline_offset);
		verify(child.overflow_x == parent.overflow_x);
		verify(child.overflow_y == parent.overflow_y);
		verify(child.padding_top == parent.padding_top);
		verify(child.padding_left == parent.padding_left);
		verify(child.padding_right == parent.padding_right);
		verify(child.padding_bottom == parent.padding_bottom);
		verify(child.page_props.break_after == parent.page_props.break_after);
		verify(child.page_props.break_before == parent.page_props.break_before);
		verify(child.page_props.break_inside == parent.page_props.break_inside);
		verify(child.position == parent.position);
		verify(DeclEqual(child.quotes_cp, parent.quotes_cp));
		verify(child.right == parent.right);
		verify(child.table_layout == parent.table_layout);
		verify(child.text_align == parent.text_align);
		verify(child.text_decoration == parent.text_decoration);
		verify(child.text_indent == parent.text_indent);
		verify(child.text_transform == parent.text_transform);
		verify(child.top == parent.top);
#ifdef SUPPORT_TEXT_DIRECTION
		verify(child.unicode_bidi == parent.unicode_bidi);
#endif // SUPPORT_TEXT_DIRECTION
		verify(child.vertical_align == parent.vertical_align);
		verify(child.vertical_align_type == parent.vertical_align_type);
		verify(child.visibility == parent.visibility);
		verify(child.white_space == parent.white_space);
		verify(child.page_props.widows == parent.page_props.widows);
		verify(child.content_width == parent.content_width);
		verify(child.word_spacing_i == parent.word_spacing_i);

		// Assorted non-CSS 2.1 properties:

		// css-3-multicol:

		verify(child.column_width == parent.column_width);
		verify(child.column_count == parent.column_count);
		verify(child.column_gap == parent.column_gap);
		verify(!op_memcmp(&child.column_rule, &parent.column_rule, sizeof(child.column_rule)));
		verify(child.column_span == parent.column_span);
		verify(child.column_fill == parent.column_fill);
	}
}

foreach (name) from InheritedPropsEqual
{
	/* Verify that all inherited properties are inherited properly, and that
	   setting all non-inherited properties to something non-initial on the
	   child doesn't interfere. This will make sure that CssPropertyItem
	   doesn't mess up the inherited values. */

	test("Inherited properties inherited are equal: " + name)
	{
		AutoDeleteHead cascade;
		OpString elmname;
		verify(OpStatus::IsSuccess(elmname.Set(name)));
		HTML_Element* elm = state.doc->GetDocRoot()->GetElmById(elmname.CStr());
		verify(elm);

		LayoutProperties* child_cascade = LayoutProperties::CreateCascade(elm, cascade, state.doc->GetHLDocProfile());
		verify(child_cascade);

		const HTMLayoutProperties &child = *child_cascade->GetProps();
		const HTMLayoutProperties &parent = *child_cascade->Pred()->GetProps();

		verify(child.border_collapse == parent.border_collapse);
		verify(child.border_spacing_horizontal == parent.border_spacing_horizontal);
		verify(child.border_spacing_vertical == parent.border_spacing_vertical);
		verify(child.caption_side == parent.caption_side);
		verify(child.font_color == parent.font_color);
		verify(child.cursor == parent.cursor);
#ifdef SUPPORT_TEXT_DIRECTION
		verify(child.direction == parent.direction);
#endif // SUPPORT_TEXT_DIRECTION
		verify(child.empty_cells == parent.empty_cells);
		verify(child.font_number == parent.font_number);
		verify(child.font_size == parent.font_size);
		verify(child.font_italic == parent.font_italic);
		verify(child.small_caps == parent.small_caps);
		verify(child.font_weight == parent.font_weight);
		verify(child.letter_spacing == parent.letter_spacing);
		verify(child.line_height_i == parent.line_height_i);
		verify(child.list_style_image == parent.list_style_image);
		verify(child.list_style_pos == parent.list_style_pos);
		verify(child.list_style_type == parent.list_style_type);
		verify(child.page_props.orphans == parent.page_props.orphans);
		verify(DeclEqual(child.quotes_cp, parent.quotes_cp));
		verify(child.text_align == parent.text_align);
		verify(child.text_indent == parent.text_indent);
		verify(child.text_transform == parent.text_transform);
		verify(child.visibility == parent.visibility);
		verify(child.white_space == parent.white_space);
		verify(child.page_props.widows == parent.page_props.widows);
		verify(child.word_spacing_i == parent.word_spacing_i);
	}
}

html
{
	//! <html>
	//! <body>
	//!
	//! <span id="zh-CN" lang="zh-CN">
	//!		<span id="zh-CN_inherit">&#x5FCD;</span>
	//!	</span>
	//!
	//! <span id="zh-Hans" lang="zh-Hans">&#x5FCD;</span>
	//! <span id="zh-TW" lang="zh-TW">&#x5FCD;</span>
	//! <span id="zh-HK" lang="zh-HK">&#x5FCD;</span>
	//! <span id="zh-Hant" lang="zh-Hant">&#x5FCD;</span>
	//! <span id="ko" lang="ko">&#x5FCD;</span>
	//! <span id="ja" lang="ja">&#x5FCD;</span>
	//! <span id="ru" lang="ru">&#x0409;</span>
	//! </body>
	//! </html>
}

table LangCodes(const uni_char*, OpFontInfo::CodePage)
{
	{ UNI_L("zh-CN"), OpFontInfo::OP_SIMPLIFIED_CHINESE_CODEPAGE },
	{ UNI_L("zh-Hans"), OpFontInfo::OP_SIMPLIFIED_CHINESE_CODEPAGE },
	{ UNI_L("zh-TW"), OpFontInfo::OP_TRADITIONAL_CHINESE_CODEPAGE },
	{ UNI_L("zh-HK"), OpFontInfo::OP_TRADITIONAL_CHINESE_CODEPAGE },
	{ UNI_L("zh-Hant"), OpFontInfo::OP_TRADITIONAL_CHINESE_CODEPAGE },
	{ UNI_L("ko"), OpFontInfo::OP_KOREAN_CODEPAGE },
	{ UNI_L("ja"), OpFontInfo::OP_JAPANESE_CODEPAGE }
	{ UNI_L("ru"), OpFontInfo::OP_CYRILLIC_CODEPAGE }
}

/* Test that lang="" attribute works to be able to give hints to fontswitching */

test ("layoutprops.lang")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);

	HTML_Element* doc_root = doc->GetDocRoot();
	verify(doc_root != NULL);

	LogicalDocument *logdoc = state.doc->GetLogicalDocument();
	verify(logdoc != NULL);

	// Test that the proper language is detected
	iterate (name,theCodepage) from LangCodes
	{
		HTML_Element* el = doc_root->GetElmById(name);
		verify (el != NULL);
		Head props_list;
		verify(LayoutProperties::CreateCascade(el, props_list, logdoc->GetHLDocProfile()));
		LayoutProperties* lprops = (LayoutProperties *)props_list.Last();
		OpFontInfo::CodePage codepage = OpFontInfo::CodePageFromScript(lprops->GetProps()->current_script);
		props_list.Clear();
		verify (codepage == theCodepage);
	}

	// Test that "lang" inherits properly
	HTML_Element* el = doc_root->GetElmById(UNI_L("zh-CN_inherit"));
	verify (el != NULL);
	Head props_list;
	verify(LayoutProperties::CreateCascade(el, props_list, logdoc->GetHLDocProfile()));
	LayoutProperties* lprops = (LayoutProperties *)props_list.Last();
	OpFontInfo::CodePage codepage = OpFontInfo::CodePageFromScript(lprops->GetProps()->current_script);
	props_list.Clear();
	verify(codepage == OpFontInfo::OP_SIMPLIFIED_CHINESE_CODEPAGE);
}



html
{
	//! <html>
	//! <body id="body">
	//!
	//! <div id="outer" style="overflow-wrap:break-word">
	//!		<div id="inner1"></div>
	//!		<div id="inner2" style="overflow-wrap:inherit;"></div>
	//!		<div id="inner3" style="overflow-wrap:normal;"></div>
	//! </div>
	//! </body>
	//! </html>
}



table WordWrapValues(const uni_char*, short)
{
	{ UNI_L("body"), CSS_VALUE_normal }
	{ UNI_L("outer"), CSS_VALUE_break_word }
	{ UNI_L("inner1"), CSS_VALUE_break_word }
	{ UNI_L("inner2"), CSS_VALUE_break_word }
	{ UNI_L("inner3"), CSS_VALUE_normal }
}



test ("layoutprops.overflow_wrap")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);

	HTML_Element* doc_root = doc->GetDocRoot();
	verify(doc_root != NULL);

	LogicalDocument *logdoc = state.doc->GetLogicalDocument();
	verify(logdoc != NULL);

	// Test that the proper language is detected
	iterate (name,theValue) from WordWrapValues
	{
		HTML_Element* el = doc_root->GetElmById(name);
		verify (el != NULL);
		Head props_list;
		verify(LayoutProperties::CreateCascade(el, props_list, logdoc->GetHLDocProfile()));
		LayoutProperties* lprops = (LayoutProperties *)props_list.Last();
		short css_value = lprops->GetProps()->overflow_wrap;
		props_list.Clear();
		verify (css_value == theValue);
	}
}




html
{
	//!	<html>
	//!	<body>
	//!
	//!		<div id="outer" style="text-overflow:ellipsis;">
	//!			<div id="inner11" style="text-overflow:clip;"></div>
	//!			<div id="inner12" style="text-overflow:-o-ellipsis-lastline;"></div>
	//!		</div>
	//!	</body>
	//!	</html>
}

table TextOverflowValues(const uni_char*, short)
{
	{ UNI_L("outer"), CSS_VALUE_ellipsis }
	{ UNI_L("inner11"), CSS_VALUE_clip }
	{ UNI_L("inner12"), CSS_VALUE__o_ellipsis_lastline }
}

test ("layoutprops.text_overflow")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);

	HTML_Element* doc_root = doc->GetDocRoot();
	verify(doc_root != NULL);

	LogicalDocument *logdoc = state.doc->GetLogicalDocument();
	verify(logdoc != NULL);

	// Test that the proper language is detected
	iterate (name,theValue) from TextOverflowValues
	{
		HTML_Element* el = doc_root->GetElmById(name);
		verify (el != NULL);
		Head props_list;
		verify(LayoutProperties::CreateCascade(el, props_list, logdoc->GetHLDocProfile()));
		LayoutProperties* lprops = (LayoutProperties *)props_list.Last();
		short css_value = lprops->GetProps()->text_overflow;
		props_list.Clear();
		verify (css_value == theValue);
	}
}

html
{
	//! <!DOCTYPE html>
	//! <html>
	//! <head>
	//! <style type="text/css">
	//! html::first-letter { background-color: #abcdef; }
	//! </style>
	//! </head>
	//! <body>X</body>
	//! </html>
}

test("::first-letter background should not set document root color.")
{
	FramesDocument* doc = state.doc;
	const DocRootProperties& root_props = doc->GetLogicalDocument()->GetLayoutWorkplace()->GetDocRootProperties();
	verify(root_props.GetBackgroundColor() != OP_RGB(0xab, 0xcd, 0xef));
}

html
{
	//! <!DOCTYPE html>
	//! <html>
	//! <head>
	//! <style type="text/css">
	//! html::first-line { background-color: #abcdef; }
	//! </style>
	//! </head>
	//! <body>X</body>
	//! </html>
}

test("::first-line background should not set document root color.")
{
	FramesDocument* doc = state.doc;
	const DocRootProperties& root_props = doc->GetLogicalDocument()->GetLayoutWorkplace()->GetDocRootProperties();
	verify(root_props.GetBackgroundColor() != OP_RGB(0xab, 0xcd, 0xef));
}

html
{
	//! <!DOCTYPE html>
	//! <html>
	//! <head>
	//! <style type="text/css">
	//! html::before { content: "X"; background-color: #abcdef; }
	//! </style>
	//! </head>
	//! <body>X</body>
	//! </html>
}

test("::before background should not set document root color.")
{
	FramesDocument* doc = state.doc;
	const DocRootProperties& root_props = doc->GetLogicalDocument()->GetLayoutWorkplace()->GetDocRootProperties();
	verify(root_props.GetBackgroundColor() != OP_RGB(0xab, 0xcd, 0xef));
}

html
{
	//! <!DOCTYPE html>
	//! <html>
	//! <head>
	//! <style type="text/css">
	//! html::after { content: "X"; background-color: #abcdef; }
	//! </style>
	//! </head>
	//! <body>X</body>
	//! </html>
}

test("::after background should not set document root color.")
{
	FramesDocument* doc = state.doc;
	const DocRootProperties& root_props = doc->GetLogicalDocument()->GetLayoutWorkplace()->GetDocRootProperties();
	verify(root_props.GetBackgroundColor() != OP_RGB(0xab, 0xcd, 0xef));
}

subtest epsilon(float a, float b)
{
	/* 1 / LAYOUT_FIXED_POINT_BASE is the minimal difference of different
	   decimal font sizes. Multiply it by 2 to have a safe epsilon. */
	const double epsilon = 2.0 / LAYOUT_FIXED_POINT_BASE;
	verify((op_fabs(a - b) < epsilon));
}

html
{
	//!<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
	//!<html>
	//!<head>
	//!
	//!<style type="text/css">
	//!html
	//!{
	//!	font-size:15.3pt;
	//!}
	//!
	//!body
	//!{
	//!	font-size:16px;
	//!}
	//!
	//!div
	//!{
	//!	font-size:2rem;
	//!	padding-left:2rem;
	//!}
	//!</style>
	//!</head>
	//!
	//!<body>
	//!<div id="test"></div>
	//!</body>
	//!
	//!</html>
}
test("rem unit calculations")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);

	LogicalDocument *logdoc = state.doc->GetLogicalDocument();
	verify(logdoc != NULL);

	HTML_Element* doc_root = logdoc->GetDocRoot();
	verify(doc_root != NULL);

	HTML_Element* elm = doc_root->GetElmById(UNI_L("test"));
	verify (elm != NULL);

	AutoDeleteHead props_list;
	verify(LayoutProperties::CreateCascade(elm, props_list, logdoc->GetHLDocProfile()));
	LayoutProperties* lprops = static_cast<LayoutProperties*>(props_list.Last());
	const HTMLayoutProperties &props = *lprops->GetProps();

	/* 15.3 * 1.(3) * 2 = 40.80, consider some sane epsilon
	   for precision issues. */
	verify(epsilon(LayoutFixedToFloat(props.decimal_font_size), 40.80f));

	verify(props.font_size == 41); // 15.3 * 1.(3) * 2 rounded
	verify(props.padding_left == 40); // floor (15.3 * 1.(3)) * 2)
}

html
{
	//!<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
	//!<html>
	//!<head>
	//!
	//!<style type="text/css">
	//!body
	//!{
	//!	font-size:12.78pt;
	//!}
	//!
	//!div
	//!{
	//!	font-size:1.48em;
	//!	padding-left:0.45em;
	//!}
	//!</style>
	//!</head>
	//!
	//!<body>
	//!<div id="test"></div>
	//!</body>
	//!
	//!</html>
}
test("em unit calculations")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);

	LogicalDocument *logdoc = state.doc->GetLogicalDocument();
	verify(logdoc != NULL);

	HTML_Element* doc_root = logdoc->GetDocRoot();
	verify(doc_root != NULL);

	HTML_Element* elm = doc_root->GetElmById(UNI_L("test"));
	verify (elm != NULL);

	AutoDeleteHead props_list;
	verify(LayoutProperties::CreateCascade(elm, props_list, logdoc->GetHLDocProfile()));
	LayoutProperties* lprops = static_cast<LayoutProperties*>(props_list.Last());
	const HTMLayoutProperties &props = *lprops->GetProps();

	/* 12.78 * 1.(3) * 1.48 = 25.22, consider some sane epsilon
	   for precision issues. */
	verify(epsilon(LayoutFixedToFloat(props.decimal_font_size), 25.22f));
	verify(props.font_size == 25); // OpRound(12.78 * 1.(3) * 1.48)
	verify(props.padding_left == 11); // floor(0.45 * 25.22)
}

test("PRECONDITION: AHEM")
{
	short font_number = styleManager->GetFontNumber(UNI_L("AHEM"));
	verify(font_number != -1);
}

html
{
	//!<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
	//!<html>
	//!<head>
	//!
	//!<style type="text/css">
	//!body
	//!{
	//!	font: 20px Ahem;
	//!}
	//!
	//!div
	//!{
	//!	font-size:2.5ex;
	//!	padding-left:1ex;
	//!}
	//!</style>
	//!</head>
	//!
	//!<body>
	//!<div id="test"></div>
	//!</body>
	//!
	//!</html>
}
test("ex unit calculations")
	require success "PRECONDITION: AHEM";
	require OPFONT_GLYPH_PROPS; // Otherwise ex unit is just em / 2
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);

	LogicalDocument *logdoc = state.doc->GetLogicalDocument();
	verify(logdoc != NULL);

	HTML_Element* doc_root = logdoc->GetDocRoot();
	verify(doc_root != NULL);

	HTML_Element* elm = doc_root->GetElmById(UNI_L("test"));
	verify (elm != NULL);

	AutoDeleteHead props_list;
	verify(LayoutProperties::CreateCascade(elm, props_list, logdoc->GetHLDocProfile()));
	LayoutProperties* lprops = static_cast<LayoutProperties*>(props_list.Last());
	const HTMLayoutProperties &props = *lprops->GetProps();

	verify(epsilon(LayoutFixedToFloat(props.decimal_font_size), 40.0f)); // 16px (ex unit for 20px Ahem) * 2.5 in decimal
	verify(props.font_size == 40); // 16px * 2.5
	verify(props.padding_left == 32); // ex unit for 40px Ahem
}

html
{
//!<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
//!<html>
//!<head>
//!
//!<style type="text/css">
//!
//!body
//!{
//!	font-size:8pt;
//!	padding-left:.5px;
//!	margin-left:1.1mm;
//!	margin-right:1.2mm;
//!	width:9.99px;
//!}
//!
//!</style>
//!
//!</head>
//!<body id="test">
//!
//!</body>
//!</html>
}
test("different rounding rules")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);

	LogicalDocument *logdoc = state.doc->GetLogicalDocument();
	verify(logdoc != NULL);

	HTML_Element* doc_root = logdoc->GetDocRoot();
	verify(doc_root != NULL);

	HTML_Element* elm = doc_root->GetElmById(UNI_L("test"));
	verify (elm != NULL);

	AutoDeleteHead props_list;
	verify(LayoutProperties::CreateCascade(elm, props_list, logdoc->GetHLDocProfile()));
	LayoutProperties* lprops = static_cast<LayoutProperties*>(props_list.Last());
	const HTMLayoutProperties &props = *lprops->GetProps();

	verify(epsilon(LayoutFixedToFloat(props.decimal_font_size), 10.67f)); // 8pt = 10.(6)px
	verify(props.font_size == 11); // 10.(6) rounded
	verify(props.padding_left == 0); // 0.5 truncated
	verify(props.margin_left == 4); // 1.1 * 96 / 25.4 = 4.157 rounded
	verify(props.margin_right == 5); // 1.2 * 96 / 25.4 = 4.535 rounded
	verify(props.content_width == 9); // 9.99 truncated
}

html
{
//!<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
//!<html>
//!<head>
//!
//!<style type="text/css">
//!
//!body
//!{
//!	font-size:8pt;
//!	padding-left:1em;
//!	margin-left:2em;
//!	width:0.57em;
//!}
//!
//!</style>
//!
//!
//!</head>
//!<body id="test">
//!
//!</body>
//!</html>
}
test("taking precise em base")
{
	FramesDocument* doc = state.doc;
	verify(doc != NULL);

	LogicalDocument *logdoc = state.doc->GetLogicalDocument();
	verify(logdoc != NULL);

	HTML_Element* doc_root = logdoc->GetDocRoot();
	verify(doc_root != NULL);

	HTML_Element* elm = doc_root->GetElmById(UNI_L("test"));
	verify (elm != NULL);

	AutoDeleteHead props_list;
	verify(LayoutProperties::CreateCascade(elm, props_list, logdoc->GetHLDocProfile()));
	LayoutProperties* lprops = static_cast<LayoutProperties*>(props_list.Last());
	const HTMLayoutProperties &props = *lprops->GetProps();

	verify(props.padding_left == 10); // 10.(6) truncated
	verify(props.margin_left == 21); // 2 * 10.(6) truncated
	verify(props.content_width == 6); // 0.57 * 10.(6) truncated
}

html
{
	//! <!doctype html>
	//! <style>
	//! #foo {
	//!   box-shadow: rgb(1,1,1) 0px 0px,
	//!               rgb(2,2,2) 1px 0px,
	//!               rgb(3,3,3) 0px 0px,
	//!               rgb(4,4,4) 2px 4px,
	//!               rgb(5,5,5) 0px 0px,
	//!               rgb(6,6,6) 3px 0px,
	//!               rgb(7,7,7) 0px 0px,
	//!               rgb(8,8,8) 4px 8px 16px 16px,
	//!               rgb(9,9,9) 0px 0px,
	//!               rgb(10,10,10) 5px 0px;
	//! }
	//! </style>
	//! <div id=foo></div>
}

subtest VerifyShadowAt(const Shadow& shadow, int index)
{
	// Zero-based to one-based.
	index++;

	verify(shadow.color == OP_RGB(index, index, index));

	if ((index % 2) == 0)
		verify(shadow.left == index / 2);
	else
		verify(shadow.left == 0);

	if ((index % 4) == 0)
		verify(shadow.top == index);
	else
		verify(shadow.top == 0);

	if ((index % 8) == 0)
	{
		verify(shadow.blur == index * 2);
		verify(shadow.spread == index * 2);
	}
	else
	{
		verify(shadow.blur == 0);
		verify(shadow.spread == 0);
	}
}

test("Shadow iterator: Forward iteration")
{
	HTML_Element* div = find_element("div", 1);
	verify(div);
	verify(state.doc);
	HLDocProfile* hld_profile = state.doc->GetHLDocProfile();
	verify(hld_profile);

	AutoDeleteHead props_list;
	verify(LayoutProperties::CreateCascade(div, props_list, hld_profile));
	LayoutProperties* lprops = static_cast<LayoutProperties*>(props_list.Last());
	const HTMLayoutProperties& props = *lprops->GetProps();

	Shadow shadow;
	Shadows::Iterator iter(props.box_shadows);
	CSSLengthResolver dummy(state.doc->GetVisualDevice());
	int count = 0;

	while (iter.GetNext(dummy, shadow))
	{
		verify(VerifyShadowAt(shadow, count));
		count++;
	}

	// Can't move any further.
	verify(!iter.GetNext(dummy, shadow));

	// Verify shadow is reset.
	verify(shadow.color == USE_DEFAULT_COLOR);
	verify(shadow.left == 0);
	verify(shadow.top == 0);
	verify(shadow.blur == 0);
	verify(shadow.spread == 0);
	verify(!shadow.inset);

	verify(count == 10);
}

test("Shadow iterator: Reverse iteration")
{
	HTML_Element* div = find_element("div", 1);
	verify(div);
	verify(state.doc);
	HLDocProfile* hld_profile = state.doc->GetHLDocProfile();
	verify(hld_profile);

	AutoDeleteHead props_list;
	verify(LayoutProperties::CreateCascade(div, props_list, hld_profile));
	LayoutProperties* lprops = static_cast<LayoutProperties*>(props_list.Last());
	const HTMLayoutProperties& props = *lprops->GetProps();

	Shadow shadow;
	Shadows::Iterator iter(props.box_shadows);
	CSSLengthResolver dummy(state.doc->GetVisualDevice());
	int count = 0;

	iter.MoveToEnd();

	while (iter.GetPrev(dummy, shadow))
	{
		verify(VerifyShadowAt(shadow, 9 - count));
		count++;
	}

	// Can't move any further.
	verify(!iter.GetPrev(dummy, shadow));

	// Verify shadow is reset.
	verify(shadow.color == USE_DEFAULT_COLOR);
	verify(shadow.left == 0);
	verify(shadow.top == 0);
	verify(shadow.blur == 0);
	verify(shadow.spread == 0);
	verify(!shadow.inset);

	verify(count == 10);
}

language ecmascript;

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//! <div id="one" style="overflow:auto; display:none"></div>
	//! <span id="two" style="overflow:auto; display:none"></span>
	//! </body></html>
}
test("overflow on display:none elements")
{
	verify(getComputedStyle(document.getElementById('one'), '').overflow == 'auto');
	verify(getComputedStyle(document.getElementById('two'), '').overflow == 'auto');
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!   <div style="width:200px;">
	//!    <div id="c1" style="float:left;">c</div>
	//!    <div id="c2" style="float:left; width:inherit;">c</div>
	//!   </div>
	//! </body></html>
}
test("width:auto->inherit on float. Parent non-auto")
{
	verify(document.getElementById('c1').offsetWidth < 200);
	document.getElementById('c1').style.width = 'inherit';
	verify(document.getElementById('c1').offsetWidth == 200);
}
test("width:inherit->auto on float. Parent non-auto")
{
	verify(document.getElementById('c2').offsetWidth == 200);
	document.getElementById('c2').style.width = '';
	verify(document.getElementById('c2').offsetWidth < 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!   <div>
	//!    <div id="c1" style="float:left; width:200px;">c</div>
	//!    <div id="c2" style="float:left; width:inherit;">c</div>
	//!   </div>
	//! </body></html>
}
test("width:200px->inherit on float. Parent auto")
{
	verify(document.getElementById('c1').offsetWidth == 200);
	document.getElementById('c1').style.width = 'inherit';
	verify(document.getElementById('c1').offsetWidth < 200);
}
test("width:inherit->200px on float. Parent auto")
{
	verify(document.getElementById('c2').offsetWidth < 200);
	document.getElementById('c2').style.width = '200px';
	verify(document.getElementById('c2').offsetWidth == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!   <div>
	//!    <div id="c1" style="position:absolute; width:200px;">c</div>
	//!    <div id="c2" style="position:absolute; width:inherit;">c</div>
	//!   </div>
	//! </body></html>
}
test("width:200px->inherit on abspos. Parent auto")
{
	verify(document.getElementById('c1').offsetWidth == 200);
	document.getElementById('c1').style.width = 'inherit';
	verify(document.getElementById('c1').offsetWidth < 200);
}
test("width:inherit->200px on abspos. Parent auto")
{
	verify(document.getElementById('c2').offsetWidth < 200);
	document.getElementById('c2').style.width = '200px';
	verify(document.getElementById('c2').offsetWidth == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:220px; position:relative;">
	//!   <div style="left:10px; right:10px;">
	//!    <div id="c1" style="position:absolute; left:auto; right:inherit;"><div style="width:1000px; height:10px;"></div></div>
	//!    <div id="c2" style="position:absolute; left:inherit; right:inherit;"><div style="width:1000px; height:10px;"></div></div>
	//!   </div>
	//! </body></html>
}
test("left:auto->inherit on abspos. Parent non-auto left/right")
{
	verify(document.getElementById('c1').offsetWidth == 1000);
	document.getElementById('c1').style.left = 'inherit';
	verify(document.getElementById('c1').offsetWidth == 200);
}
test("left:inherit->auto on abspos. Parent non-auto left/right")
{
	verify(document.getElementById('c2').offsetWidth == 200);
	document.getElementById('c2').style.left = '';
	verify(document.getElementById('c2').offsetWidth == 1000);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body style="width:220px; position:relative;">
	//!   <div>
	//!    <div id="c1" style="position:absolute; left:10px; right:10px;"><div style="width:1000px; height:10px;"></div></div>
	//!    <div id="c2" style="position:absolute; left:inherit; right:10px;"><div style="width:1000px; height:10px;"></div></div>
	//!   </div>
	//! </body></html>
}
test("left:10px->inherit on abspos. Parent auto left/right")
{
	verify(document.getElementById('c1').offsetWidth == 200);
	document.getElementById('c1').style.left = 'inherit';
	verify(document.getElementById('c1').offsetWidth == 1000);
}
test("left:inherit->10px on abspos. Parent auto left/right")
{
	verify(document.getElementById('c2').offsetWidth == 1000);
	document.getElementById('c2').style.left = '10px';
	verify(document.getElementById('c2').offsetWidth == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!   <div style="position:fixed; width:500px;">
	//!    <div id="c1" style="position:inherit; width:200px;"><div style="width:1000px; height:10px;"></div></div>
	//!    <div id="c2" style="position:inherit;"><div style="width:1000px; height:10px;"></div></div>
	//!   </div>
	//! </body></html>
}
test("width:200px->auto on position:inherit. Parent fixed")
{
	verify(document.getElementById('c1').offsetWidth == 200);
	document.getElementById('c1').style.width = '';
	verify(document.getElementById('c1').offsetWidth == 1000);
}
test("width:auto->200px on position:inherit. Parent fixed")
{
	verify(document.getElementById('c2').offsetWidth == 1000);
	document.getElementById('c2').style.width = '200px';
	verify(document.getElementById('c2').offsetWidth == 200);
}

html
{
	//! <!DOCTYPE html>
	//! <html><body>
	//!   <div style="display:inline-block; width:500px;">
	//!    <div id="c1" style="display:inherit; width:200px;"><div style="width:1000px; height:10px;"></div></div>
	//!    <div id="c2" style="display:inherit;"><div style="width:1000px; height:10px;"></div></div>
	//!   </div>
	//! </body></html>
}
test("width:200px->auto on display:inherit. Parent inline-block")
{
	verify(document.getElementById('c1').offsetWidth == 200);
	document.getElementById('c1').style.width = '';
	verify(document.getElementById('c1').offsetWidth == 1000);
}
test("width:auto->200px on display:inherit. Parent inline-block")
{
	verify(document.getElementById('c2').offsetWidth == 1000);
	document.getElementById('c2').style.width = '200px';
	verify(document.getElementById('c2').offsetWidth == 200);
}
