

API_URL_HTTP_POST_DATA			yngve

	Enables the Upload SetHTTPData API in the URL API, allows file upload

	Defines		: HAS_SET_HTTP_DATA

API_URL_LOAD_RESERVATION_OBJECT				yngve

	This activates the IAmLoadingThisURL class which can be used to
	block (re)loading of a URL as well as automatic unloading of the
	URL (it is an implicit URL_InUse object too).

	Importers SHOULD use their own TWEAKs and defines to control
	activation of code using this functionality.

	See modules/url/url_loading.h for documentation

	Defines: URL_ACTIVATE_URL_LOAD_RESERVATION_OBJECT

API_URL_SESSION_FILE_PERMISSION				yngve

	This activates the URL_API::SessionFilePermitted function

	Defines: URL_SESSION_FILE_PERMIT

API_URL_OFFLINE_LOADABLE_CHECK				yngve

	This activates the URL_API::OfflineLoadable function

	Defines: URL_OFFLINE_LOADABLE_CHECK

API_URL_WRITE_DOCUMENT_SIGNAL_DATA			yngve

	This activates the URL::WriteDocumentDataSignalDataReady function

	Defines: URL_WRITE_DOCUMENT_SIGNAL_DATA

API_URL_SET_COOKIE_ITEM						yngve

	This activates the URL_API::SetCookie(Cookie_Item_Handler *) function

	Defines:	URL_SET_COOKIE_ITEM

API_URL_API_CLEAR_COOKIE_API				yngve

	This activates the URL_API::ClearCookiesL function

	Defines: URL_API_CLEAR_COOKIE_API

API_URL_ASSOCIATED_FILES					yngve

	This activates the associated files API for the URL class (also enables
	and requires matching functionaliy in the cache module)

	Defines: URL_ENABLE_ASSOCIATED_FILES

API_URL_COMM_LOCALHOSTNAME			yngve

	This Enables the Comm::GetLocalHostName() function

	Defines: COMM_LOCALHOSTNAME

API_URL_COMM_LOCALHOSTNAME_IS_SERVERNAME	yngve

	This changes the return type of Comm::GetLocalHostName() from const char * to ServerName

	Defines: COMM_LOCALHOSTNAME_IS_SERVERNAME

API_URL_NETWORK_LISTENER_SUPPORT		jonnyr

	Enables support for network activity listeners

	Defines:  URL_NETWORK_LISTENER_SUPPORT

API_URL_ENABLE_INSERT_TLS		yngve

	Enables the comm layers insertion of a TLS connection in a live connection

	Defines		: URL_ENABLE_INSERT_TLS
	Depends on	: FEATURE_SSL

API_URL_EXTERNAL_COOKIE_ITEMS	yngve

	Enables several Cookie_Item_Handler APIs in the URL_API

	Defines		: URL_ENABLE_EXT_COOKIE_ITEM
	Depends on	: _ASK_COOKIE

API_URL_SAVE_DATA						yngve

	Enables the URL_API::SaveDataL API that permits direct save of data

	Defines		: URL_ENABLE_SAVE_DATA

API_URL_NEED_ABORTIVE_CLOSE		no

	This activates functionality that signals the socket layer when an
	abortive close is needed. This avoids unwanted re-transmissions
	after destruction and crashes when destruction occurrs during SSL
	operations for some platforms (e.g. Symbian).

	Defines		: NEED_URL_ABORTIVE_CLOSE

API_URL_NEED_HTTP_ACCEPT_STRING		yngve

	This activates the GetHTTP_Accept_str function, which returns the default HTTP Accept string

	Defines		: URL_NEED_HTTP_ACCEPT_STRING

API_URL_EXTERNAL_CONTENT_TYPE_GUESSER				yngve

	(Reverse API)

	If the content-type of a document is unknown this prompt the content-type
	guesser to hand the data and the URL over to a product specified function that
	will decide if this is a known type, and if so return the MIME type for it

	/**
	 *	Analyzes the provided content to see if it matches a known data profile.
	 *	In case of OOM the function must LEAVE
	 *
	 *	@param	aFileName	URL of the content
	 *	@param	aBuffer		Pointer to buffer containing the first aLength bytes of the content
	 *	@param	aLength		Length of aBuffer sample
	 *	@param	aMimeType	The recognized MIME type of the content, empty if not recognized.
	 */
	void GetMimeTypeFromDataSampleL(const OpStringC& aFileName, const char* aBuffer,int aLength,OpString8& aMimeType);

    Defines		: NEED_URL_EXTERNAL_GET_MIME_FROM_SAMPLE

API_URL_KEEP_HTTP_HEADERS_FOR_UNKNOWN_CONTENT		yngve

	If the content-type of a document is unknown store a copy of the
	HTTP headers, which can be later retrieved by requesting the
	URL::KHTTPAllResponseHeadersL attribute from the URL.

	Defines		: NEED_URL_STORE_HEADERS_IF_UNDETERMINED_TYPE

API_URL_ACTIVE_CONNECTION_CHECK		yngve

	When enabled this allows the product to check whether or not there
	are active connections in use, by calling urlManager->ActiveConnections()

	Defines		: NEED_URL_ACTIVE_CONNECTIONS

API_URL_EXTERNAL_HANDLE_UNKNOWN_URL			yngve

	(Reverse API)

	Send URLs with unknown scheme to be handled by the product layer

	void HandleUnrecognisedURLTypeL(const OpStringC& aUrlName);

	Defines		: NEED_URL_HANDLE_UNRECOGNIZED_SCHEME

API_URL_WRITE_COMPLETE_IMAGE_TO_URL		yngve

	This activates the URL::WriteDocumentImage function, which lets the caller
	write a complete document to a URL with a specifed MIME-type.

	Defines		: NEED_URL_WRITE_DOC_IMAGE

API_URL_NEED_EPOC_CONTENT_TYPE			yngve

  This setting activates the URL_EPOC_CONTENT content type enum

	Defines		: NEED_EPOC_CONTENT_TYPE

API_CACHE_NEED_EMPTY_INFO					no

  This setting enables an API to query for info on whether or not the
  cache is empty.

	Defines		: NEED_CACHE_EMPTY_INFO

API_URL_EXTERNAL_PROTOCOL_SCHEMES				yngve

	This API enables the AddProtocolHandler API in URL_Manager (which
	was previously hosted in the ExternalProtocolHandlers class) and the
	ExternalProtocolLoadHandler class.

	Defines		: EXTERNAL_PROTOCOL_SCHEME_SUPPORT

API_URL_BLOCK_FOR_MULTIPART			yngve

	This enables code that permit a server/port-specific block of loading data
	while processing a cach-filling multipart.

	Defines: URL_BLOCK_FOR_MULTIPART

API_URL_USE_REMAP_RESOLVING			yngve

	This enables code that will call the RemapL function during URL resolving.

		/** Remap a resoved url to another, for example to associate a
		 *	known URL alias with the real resource.
		 *
		 *	NOTE: This function !!MUST NOT!! access the url module, directly or indirectly.
		 *
		 *	@param	original_url	The original URLs absolute URL form
		 *	@param	remapped_url	If the original URL is an alias write
		 *							the new URL into this string.
		 *							The resulting string SHOULD be an absolute URL,
		 *							if it isn't it will be resolved relative the the
		 *							same base URL used for resolving the original URL.
		 *
		 *	@return	OP_STATUS		OpStatus::OK or other success if the operation was successful, if 
		 *							remapped_url is non-NULL (it may be zero-length) that string is used as described
		 *							If this status is an error then the operation failed, e.g. due to OOM.
		 *							NOTE: this replaces the BOOL from the old RemapUrlL API.
		 */
		OP_STATUS RemapUrl(const OpStringC &original_url,OpString &remapped_url);

	If a remapped URL is returned, this will be used to construct the actual URL object returned from g_url_api->GetURL

	Defines: NEED_URL_REMAP_RESOLVING

API_URL_USE_REMAP_RESOLVING_CONTEXT_ID		yngve

	This extends the API_URL_USE_REMAP_RESOLVING function RemapUrlL so that it gets a 
	third parameter for the URL_CONTEXT_ID provided by base URL or direct to the resolver.
	
	This should ONLY be enabled if the URL's cache context ID provides extra 
	information needed for the remap decisions.
	
	Defines: NEED_URL_REMAP_RESOLVING_CONTEXT_ID
	Depends on: API_URL_USE_REMAP_RESOLVING

API_URL_DISABLE_INTERACTION			yngve

	This activates an API that can disables all dialog trigggered from a URL. If a dialog would be triggered,
	a safe option will be selected instead. The attribue URL::KBlockUserInteraction controls the setting.

	Defines:	URL_DISABLE_INTERACTION

API_URL_TCP_PAUSE_DOWNLOAD			rogerj

	Adds KPauseDownload to URL::URL_Uint32Attribute, enabling users of URL
	to suspend data-flow on a URL's underlying TCP layer.

	Defines: TCP_PAUSE_DOWNLOAD_EXTENSION

API_URL_WSP_SCHEME				yngve

	Enables use of the "wsp" URI scheme as an alias of "http"
	All such URLs will be automatically converter to http URLs
	
	Defines:	URL_USE_SCHEME_ALIAS_WSP

API_URL_THUNDERBALL				jonnyr

	Enables the thunderball API
	
	Defines:	__THUNDERBALL__


API_URL_EXTERNAL_LOAD			jonnyr

	Enables the external load API
	
	Defines:	_URL_EXTERNAL_LOAD_ENABLED_

API_URL_OBSERVE_GADGET_NETWORK_EVENTS	jonnyr

	Enabling this will allow callbacks to a listener when a gadget is used to access the network.

	Defines:	OBSERVE_GADGET_NETWORK_EVENTS, URL_NETWORK_LISTENER_SUPPORT

API_URL_NOTIFY_FILE_DOWNLOAD_SOCKET		no

	Enables URL::SetIsFileDownload() which notifies the OpSocket object
	of whether it is handling a file download or not. This is used on
	e.g. Symbian to tweak socket handling and optimize throughput for
	file downloads.

	Defines   : URL_NOTIFY_FILE_DOWNLOAD_SOCKET
	Depends on: nothing

API_URL_NAME_WITH_PASSWORD_STATUS		yngve

	Enables the URL::Name, URL::UniName and a few other 
	const string URL Name functions using the old PASSWORD_* enums 
	as parameter.
	
	Defines: URL_ACTIVATE_OLD_NAME_FUNCS 
	Depends on: nothing

	
API_URL_ACTIVE_COMPRESS_CACHE				yngve

	Enable the active compression of cache content.
	
	Currently only supported for locally generated content (write document data)

	Defines:	URL_ENABLE_ACTIVE_COMPRESS_CACHE
	Depends on: FEATURE_ZLIB_COMPRESSION

API_URL_GET_URL_BY_DATAFILE_RECORD		yngve

	Enabled the URL_Manager::GetURL(DataFile_Record *, ...) function,
	which is used to read URL entries from external sources.
	
	Defines:	URL_ACTIVATE_GET_URL_BY_DATAFILE_RECORD
	Depends on:	FEATURE_DISK_CACHE

API_URL_ALLOW_DISABLE_COMPRESS			yngve

	This enables the URL::KDisableCompress attribute which permits 
	the requesting code to disable the Accept-Encoding HTTP header
	for individual requests.
	
	Defines:	URL_ALLOW_DISABLE_COMPRESS
	Depends on: FEATURE_HTTP_COMPRESS

API_URL_SIGNAL_PROTOCOL_TUNNEL			no

	This enables the URL::KUsedAsTunnel attribute which signals to the
	communication stack that the URL is used as a protocol tunnel for
	another URL (e.g. an HTTP tunnel for an OBML URL).
	
	Defines:	URL_SIGNAL_PROTOCOL_TUNNEL
	Depends on: nothing

API_HTTP_RANGE_SPECIFICATION			yngve

	This enables the URL::KHTTPRangeStart and URL::KHTTPRangeEnd attributes
	that permit starting a request at any location and range in a HTTP resource,
	provided that the server supports it.
	
	If a cachefile already exist it will be used and the response will be *appended*
	to the file. If that is not desirable stream cache should be used to write to the 
	real target.
	
	Defines:	URL_ENABLE_HTTP_RANGE_SPEC
	Depends on: nothing

API_HTTP_CONTENT_USAGE_INDICATION		no

	This enables the URL::KHTTP_UsageIndication attribute. This is used by
	e.g. FEATURE_WEB_TURBO_MODE to supply the optimizing proxy with
	information on which resources it should not optimize in a way that
	reduces quality. It may also prioritize response order based on the usage
	indication data.

	Defines:	HTTP_CONTENT_USAGE_INDICATION
	Depends on: nothing
	
API_URL_REGISTER_SCHEME					yngve

	This enables the URL_API::RegisterUrlScheme function, which allows registration of 
	a specific scheme for URLs (scheme:foo) with an assigned URLType enum, if the 
	scheme is not already registered.
	
	Defines:	URL_ENABLE_REGISTER_SCHEME
	Depends on: nothing

API_URL_DYNATTR_SEND_HEADER			yngve

	Enables the ability for Dynamic attributes to conditionally send
	headers for each HTTP request.
	
	URL_DynamicStringAttributeHandler Functions: SetHTTPInfo, OnSendHTTPHeader

	Defines:	URL_ENABLE_DYNATTR_SEND_HEADER
	Depends on: nothing
	
API_URL_DYNATTR_RECV_HEADER			yngve

	Enables the ability for Dynamic attributes to conditionally set
	headers as attributes for each received HTTP request.
	
	URL_DynamicStringAttributeHandler Functions: SetHTTPInfo, OnRecvHTTPHeader

	Defines:	URL_ENABLE_DYNATTR_RECV_HEADER
	Depends on: nothing
	
API_URL_DYNATTR_SEND_MULTIHEADER			yngve

	Enables the ability for Dynamic attributes to conditionally send
	multiple headers for each HTTP request. All the headers must match 
	a specifed prefix.
	
	URL_DynamicStringAttributeHandler Functions: SetPrefixHTTPInfo, GetSendHTTPHeaders, OnSendPrefixHTTPHeader

	Defines:	URL_ENABLE_DYNATTR_SEND_MULTIHEADER
	Depends on: nothing
	
API_URL_DYNATTR_RECV_MULTIHEADER			yngve


	Enables the ability for Dynamic attributes to conditionally set
	multiple headers as attributes for each received HTTP request.
	
	URL_DynamicStringAttributeHandler Functions: SetPrefixHTTPInfo, OnRecvPrefixHTTPHeader
	
	Defines:	URL_ENABLE_DYNATTR_RECV_MULTIHEADER
	Depends on: nothing

API_URL_TURBO_MODE_HEADER_REDUCTION			no

	This API enables a HTTP protocol optimization used when
	communicating with the Opera Turbo optimizing proxy.
	The optimization should greatly reduce the overhead of the HTTP
	protocol by reducing the number of HTTP headers	transferred from
	the client to the proxy. The origin server will not be affected
	since the proxy will compensate for the missing	headers.

	Defines :	URL_TURBO_MODE_HEADER_REDUCTION
	Depends on	: WEB_TURBO_MODE

API_NETWORK_DATA_COUNTERS					ohrn

	Enables counting of all network traffic on the socket level,
	with breakdowns into various categories.

	The counters are accessed through g_network_counters.

	Defines:	URL_NETWORK_DATA_COUNTERS
	Depends on:	defined(HAVE_INT64) && defined(HAVE_UINT64)
