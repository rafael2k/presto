group "url Dynamic Attribute API URL";

//disabled;
require init;

include "core/pch.h";
include "modules/url/url2.h";
include "modules/url/url_man.h";
include "modules/url/url_ds.h";
include "modules/url/url_dynattr.h";
include "modules/url/url_dynattr_int.h";


global {

	URL_DynamicURLAttributeHandler default_handler;

	URL::URL_URLAttribute first_attr;
	URL::URL_URLAttribute  second_attr;
	URL::URL_URLAttribute  multi_attr[16];
}


setup
{
	first_attr = URL::KNoUrl;
	second_attr = URL::KNoUrl;
	for(size_t i=0;i<ARRAY_SIZE(multi_attr); i++)
		multi_attr[i] = URL::KNoUrl;

}

exit
{
}

table test_strings(const char *)
{
	{"http://www.eaxmple.org/test1"},
	{"http://www.eaxmple.org/test4"},
	{"http://www.eaxmple.org/test2"},
	{"http://www.eaxmple.org/test3"},
	{"http://www.eaxmple.org/test9"}
}


test("Set up attributes")
{
	OP_MEMORY_VAR OP_STATUS op_err = OpStatus::OK;
	OP_MEMORY_VAR size_t i;

	TRAP(op_err, first_attr = g_url_api->RegisterAttributeL(&default_handler));
	verify(OpStatus::IsSuccess(op_err));
	verify(first_attr >= URL::KFirstURLDynamicAttributeItem);

	TRAP(op_err, second_attr = g_url_api->RegisterAttributeL(&default_handler));
	verify(OpStatus::IsSuccess(op_err));
	verify(second_attr >= URL::KFirstURLDynamicAttributeItem);

	for(i=0;i<ARRAY_SIZE(multi_attr); i++)
	{
		TRAP(op_err, multi_attr[i] = g_url_api->RegisterAttributeL(&default_handler));
		verify(OpStatus::IsSuccess(op_err));
		verify(multi_attr[i] >= URL::KFirstURLDynamicAttributeItem);
	}

	const URL_DynamicURLAttributeDescriptor *desc;

	desc = urlManager->FindAttribute(first_attr);

	verify(desc != NULL);
	verify(desc->GetAttributeID() == first_attr);

	URL test_url = g_url_api->GetURL("http://www.opera.com/", (const char *)NULL, TRUE);
	verify(test_url.IsValid());
	URL test_url2 = g_url_api->GetURL("http://www.opera.com/", (const char *)NULL, TRUE);
	verify(test_url2.IsValid());

	iterate (test_str) from test_strings
	{
		URL test_url_base = g_url_api->GetURL(test_str,(const char *)NULL, TRUE);
		verify(test_url_base.IsValid());
		URL test_url_in = test_url_base;
		BOOL set = FALSE;
		verify(OpStatus::IsSuccess(desc->OnSetValue(test_url, test_url_in, set)));

		verify(set == TRUE);
		verify(test_url_in == test_url_base);
		URL test_url_out = test_url_base;

		verify(OpStatus::IsSuccess(desc->OnGetValue(test_url, test_url_out)));
		verify(test_url_out == test_url_base);
	}

	iterate (test_str) from test_strings
	{
		URL test_url_base = g_url_api->GetURL(test_str,(const char *)NULL, TRUE);
		verify(test_url_base.IsValid());
		URL test_url_in = test_url_base;

		TRAPD(op_err, test_url2.SetAttributeL(first_attr, test_url_base));
		verify(OpStatus::IsSuccess(op_err));
		URL test_url_out = test_url2.GetAttribute(first_attr);
		verify(test_url_out == test_url_base);
	}

	desc = urlManager->FindAttribute(second_attr);

	verify(desc != NULL);
	verify(desc->GetAttributeID() == second_attr);


	iterate (test_str) from test_strings
	{
		URL test_url_base = g_url_api->GetURL(test_str,(const char *)NULL, TRUE);
		verify(test_url_base.IsValid());
		URL test_url_in = test_url_base;
		BOOL set = FALSE;
		verify(OpStatus::IsSuccess(desc->OnSetValue(test_url, test_url_in, set)));

		verify(set == TRUE);
		verify(test_url_in == test_url_base);
		URL test_url_out = test_url_base;

		verify(OpStatus::IsSuccess(desc->OnGetValue(test_url, test_url_out)));
		verify(test_url_out == test_url_base);
	}

	iterate (test_str) from test_strings
	{
		URL test_url_base = g_url_api->GetURL(test_str,(const char *)NULL, TRUE);
		verify(test_url_base.IsValid());
		URL test_url_in = test_url_base;
		TRAPD(op_err, test_url2.SetAttributeL(second_attr, test_url_base));
		verify(OpStatus::IsSuccess(op_err));
		
		URL test_url_out = test_url2.GetAttribute(second_attr);
		verify(test_url_out == test_url_base);
	}


	URL test_urls[ARRAY_SIZE(multi_attr)];

	size_t num_attrs = ARRAY_SIZE(multi_attr);

	for(i = 0; i<num_attrs; i++)
	{
		desc = urlManager->FindAttribute(multi_attr[i]);
		verify(desc != NULL);
		verify(desc->GetAttributeID() == multi_attr[i]);
	}

	for(i = 0; i<num_attrs; i++)
	{
		OpString8 test_string_in, empty;
		test_string_in.Empty();
		verify(OpStatus::IsSuccess(test_string_in.AppendFormat("http://www.eaxmple.org/multiflag/%d/test",(i+100)%63)));
		URL test_url_base = g_url_api->GetURL(test_string_in,empty, TRUE);
		verify(test_url_base.IsValid());
		test_urls[i] = test_url_base;
		TRAPD(op_err, test_url2.SetAttributeL(multi_attr[i], test_url_base));
		verify(OpStatus::IsSuccess(op_err));
	}
	for(i = 0; i<num_attrs; i++)
	{
		URL test_url_out = test_url2.GetAttribute(multi_attr[i]);
		verify(test_url_out == test_urls[i]);
	}
}
