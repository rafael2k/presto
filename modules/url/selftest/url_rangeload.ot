/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2004-2006 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Yngve N. Pettersen
*/

group "url load ranges";

require init;
language c++;

include "core/pch.h";

require URL_ENABLE_HTTP_RANGE_SPEC;


include "modules/url/url_man.h";
include "modules/network_selftest/urldoctestman.h";
include "modules/prefs/prefsmanager/collections/pc_files.h";

global {

	URL_DocSelfTest_Manager *url_tests = NULL;

}

setup 
{
	url_tests = OP_NEW(URL_DocSelfTest_Manager, ());
}

exit
{
	OP_DELETE(url_tests);
	url_tests = NULL;
	
	// Do a shutdown of the pending connections
	urlManager->FreeUnusedResources(TRUE);
}

test("Initialized")
{
	verify(url_tests != NULL);
}


subtest AddRangeSimpleTest(URL_DocSelfTest_Batch *batch, const OpStringC8 &url_str, URL &ref_url, const OpStringC8 &filename, OpFileLength range_start, OpFileLength range_end)
{
	verify(batch != NULL);
	verify(filename.HasContent());

	URL url = g_url_api->GetURL(url_str.CStr(), (const char *) NULL, TRUE);
	verify(url.IsValid());

	verify(OpStatus::IsSuccess(url.SetAttribute(URL::KHTTPRangeStart, &range_start)));
	verify(OpStatus::IsSuccess(url.SetAttribute(URL::KHTTPRangeEnd, &range_end)));

	OpAutoPtr<URL_DocSimpleTester> test(OP_NEW(URL_DocSimpleTester, ()));
	verify(test.get() != NULL);

	verify(OpStatus::IsSuccess(test->Construct(url, ref_url, filename)));

	verify(batch->AddTestCase(test.release()));
}

subtest AddBatch(URL_DocSelfTest_Batch *batch)
{
	verify(batch != NULL);
	verify(url_tests->AddBatch(batch));
}

subtest StartTestSet()
{
	verify(url_tests->SetLastBatch());
}

subtest Setup_SingleTests(const OpStringC8 &batch_id, const OpStringC8 &url_str,  const OpStringC8 &filename, URL &ref_url, OpFileLength range_start, OpFileLength range_end)
{
	OpAutoPtr<URL_DocSelfTest_Batch> batch(OP_NEW(URL_DocSelfTest_Batch, ()));

	verify(batch.get() != NULL);

	batch->SetBatchID(batch_id);

	verify(AddRangeSimpleTest(batch.get(), url_str, ref_url, filename, range_start, range_end));

	verify(!batch->Empty());

	verify(AddBatch(batch.release()));
}

test("Range test1")
	require success "Initialized";
	async;
	file range_0_0	"testfiles/ranges/rfc2616.txt.0-0-range";

{
	URL empty_ref;

	if (!Setup_SingleTests("[Range_1]", URLSelftestBase("simple/rfc2616.txt"), range_0_0,   empty_ref, 0, 0) ||
		!StartTestSet())
		ST_failed("Could not start test");
}

test("Range test2")
	require success "Initialized";
	async;
	file range_1024_0	"testfiles/ranges/rfc2616.txt.1024-0-range";

{
	URL empty_ref;

	if (!Setup_SingleTests("[Range_2]", URLSelftestBase("simple/rfc2616.txt"), range_1024_0,  empty_ref, 1024, 0) ||
		!StartTestSet())
		ST_failed("Could not start test");
}

test("Range test3")
	require success "Initialized";
	async;
	file range_10240_0	"testfiles/ranges/rfc2616.txt.10240-0-range";

{
	URL empty_ref;

	if (!Setup_SingleTests("[Range_3]", URLSelftestBase("simple/rfc2616.txt"), range_10240_0,  empty_ref, 10240, 0) ||
		!StartTestSet())
		ST_failed("Could not start test");
}

test("Range test4")
	require success "Initialized";
	async;
	file range_1024_199999	"testfiles/ranges/rfc2616.txt.1024-199999-range";

{
	URL empty_ref;

	if (!Setup_SingleTests("[Range_4]", URLSelftestBase("simple/rfc2616.txt"), range_1024_199999,  empty_ref, 1024, 199999) ||
		!StartTestSet())
		ST_failed("Could not start test");
}

test("Range test5")
	require success "Initialized";
	async;
	file range_10240_99999	"testfiles/ranges/rfc2616.txt.10240-99999-range";

{
	URL empty_ref;

	if (!Setup_SingleTests("[Range_5]", URLSelftestBase("simple/rfc2616.txt"), range_10240_99999,  empty_ref, 10240, 99999) ||
		!StartTestSet())
		ST_failed("Could not start test");
}
