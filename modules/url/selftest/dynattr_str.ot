group "url Dynamic Attribute API string";

//disabled;
require init;

include "core/pch.h";
include "modules/url/url2.h";
include "modules/url/url_man.h";
include "modules/url/url_ds.h";
include "modules/url/url_dynattr.h";
include "modules/url/url_dynattr_int.h";

global {

	URL_DynamicStringAttributeHandler default_handler;
	URL_DynamicStringAttributeHandler header_handler;
	URL_DynamicUIntAttributeHandler default_int_handler;


	URL::URL_StringAttribute first_attr;
	URL::URL_StringAttribute  second_attr;
	URL::URL_StringAttribute  multi_attr[16];
	URL::URL_StringAttribute  number_str_attr;

	URL::URL_Uint32Attribute  number_attr;

	class StringToIntegerAttributeHandler:public URL_DynamicStringAttributeHandler
	{
	private:
		URL::URL_Uint32Attribute  number_attr;
	public:
		StringToIntegerAttributeHandler(URL::URL_Uint32Attribute  attr, uint32 mod_id=0, uint32 id=0, BOOL cache=FALSE): 
			URL_DynamicStringAttributeHandler(mod_id, id, cache),
				number_attr(attr)
			{}

	virtual OP_STATUS OnSetValue(URL &url, OpString8 &in_out_value, BOOL &set_value) const
	{
		uint32 val = (in_out_value.HasContent()? op_atoi(in_out_value.CStr()) : 0);
		set_value = FALSE;

		return url.SetAttribute(number_attr, val);
	}

	virtual OP_STATUS OnGetValue(URL &url, OpString8 &in_out_value) const
	{
		uint32 val = url.GetAttribute(number_attr);
		in_out_value.Empty();
		return in_out_value.AppendFormat("%u", val);
	}

	} *str_to_int_handler;
}


setup
{
	first_attr = URL::KNoStr;
	second_attr = URL::KNoStr;
	for(size_t i=0;i<ARRAY_SIZE(multi_attr); i++)
		multi_attr[i] = URL::KNoStr;

	number_attr = URL::KNoInt;
	number_str_attr = URL::KNoStr;
	str_to_int_handler = NULL;
}

exit
{
	OP_DELETE(str_to_int_handler);
	str_to_int_handler = NULL;
}

table test_strings(const char *)
{
	{"test1"},
	{"test4"},
	{"test2"},
	{"test3"},
	{"test9"}
}


test("Set up attributes")
{
	OP_MEMORY_VAR OP_STATUS op_err = OpStatus::OK;
	OP_MEMORY_VAR size_t i;

	TRAP(op_err, first_attr = g_url_api->RegisterAttributeL(&default_handler));
	verify(OpStatus::IsSuccess(op_err));
	verify(first_attr >= URL::KFirstStrDynamicAttributeItem);

	TRAP(op_err, second_attr = g_url_api->RegisterAttributeL(&default_handler));
	verify(OpStatus::IsSuccess(op_err));
	verify(second_attr >= URL::KFirstStrDynamicAttributeItem);

	for(i=0;i<ARRAY_SIZE(multi_attr); i++)
	{
		TRAP(op_err, multi_attr[i] = g_url_api->RegisterAttributeL(&default_handler));
		verify(OpStatus::IsSuccess(op_err));
		verify(multi_attr[i] >= URL::KFirstStrDynamicAttributeItem);
	}

	TRAP(op_err, number_attr = g_url_api->RegisterAttributeL(&default_int_handler));
	verify(OpStatus::IsSuccess(op_err));
	verify(number_attr >= URL::KFirstUintDynamicAttributeItem);

	str_to_int_handler = OP_NEW(StringToIntegerAttributeHandler, (number_attr));
	verify(str_to_int_handler != NULL);

	TRAP(op_err, number_str_attr = g_url_api->RegisterAttributeL(str_to_int_handler));
	verify(OpStatus::IsSuccess(op_err));
	verify(number_str_attr >= URL::KFirstStrDynamicAttributeItem);

	const URL_DynamicStringAttributeDescriptor *desc;

	desc = urlManager->FindAttribute(first_attr);

	verify(desc != NULL);
	verify(desc->GetAttributeID() == first_attr);

	URL test_url = g_url_api->GetURL("http://www.opera.com/", (const char *)NULL, TRUE);
	verify(test_url.IsValid());
	URL test_url2 = g_url_api->GetURL("http://www.opera.com/", (const char *)NULL, TRUE);
	verify(test_url2.IsValid());
	OpString8 test_string_out;

	iterate (test_str) from test_strings
	{
		verify(OpStatus::IsSuccess(test_string_out.Set(test_str)));
		BOOL set = FALSE;
		verify(OpStatus::IsSuccess(desc->OnSetValue(test_url, test_string_out, set)));

		verify(set == TRUE);
		verify(test_string_out.Compare(test_str) == 0);

		verify(OpStatus::IsSuccess(desc->OnGetValue(test_url, test_string_out)));
		verify(test_string_out.Compare(test_str) == 0);
	}

	iterate (test_str) from test_strings
	{
		verify(OpStatus::IsSuccess(test_url2.SetAttribute(first_attr, test_str)));
		test_string_out.Empty();

		verify(OpStatus::IsSuccess(test_url2.GetAttribute(first_attr,test_string_out)));
		verify(test_string_out.Compare(test_str) == 0);
	}

	desc = urlManager->FindAttribute(second_attr);

	verify(desc != NULL);
	verify(desc->GetAttributeID() == second_attr);

	iterate (test_str) from test_strings
	{
		verify(OpStatus::IsSuccess(test_string_out.Set(test_str)));
		BOOL set = FALSE;
		verify(OpStatus::IsSuccess(desc->OnSetValue(test_url, test_string_out, set)));

		verify(set == TRUE);
		verify(test_string_out.Compare(test_str) == 0);

		verify(OpStatus::IsSuccess(desc->OnGetValue(test_url, test_string_out)));
		verify(test_string_out.Compare(test_str) == 0);
	}

	iterate (test_str) from test_strings
	{
		verify(OpStatus::IsSuccess(test_url2.SetAttribute(second_attr, test_str)));
		test_string_out.Empty();

		verify(OpStatus::IsSuccess(test_url2.GetAttribute(second_attr,test_string_out)));
		verify(test_string_out.Compare(test_str) == 0);
	}


	size_t num_attrs = ARRAY_SIZE(multi_attr);

	for(i = 0; i<num_attrs; i++)
	{
		desc = urlManager->FindAttribute(multi_attr[i]);
		verify(desc != NULL);
		verify(desc->GetAttributeID() == multi_attr[i]);
	}

	for(i = 0; i<num_attrs; i++)
	{
		test_string_out.Empty();
		verify(OpStatus::IsSuccess(test_string_out.AppendFormat("multiflag %d test",(i+100)%63)));
		verify(OpStatus::IsSuccess(test_url2.SetAttribute(multi_attr[i], test_string_out)));
	}
	for(i = 0; i<num_attrs; i++)
	{
		OpString8 test_string_org;
		test_string_out.Empty();
		verify(OpStatus::IsSuccess(test_string_org.AppendFormat("multiflag %d test",(i+100)%63)));
		verify(OpStatus::IsSuccess(test_url2.GetAttribute(multi_attr[i], test_string_out)));
		verify(test_string_out.Compare(test_string_org) == 0);
	}

	{
		OpString8 test_num_values;

		verify(test_url2.GetAttribute(number_attr) == 0);

		test_num_values.Empty();
		verify(OpStatus::IsSuccess(test_url2.GetAttribute(number_str_attr, test_num_values)));
		verify(test_num_values.Compare("0") == 0);

		verify(OpStatus::IsSuccess(test_url2.SetAttribute(number_attr, 129)));
		verify(test_url2.GetAttribute(number_attr) == 129);
		test_num_values.Empty();
		verify(OpStatus::IsSuccess(test_url2.GetAttribute(number_str_attr, test_num_values)));
		verify(test_num_values.Compare("129") == 0);


		verify(OpStatus::IsSuccess(test_url2.SetAttribute(number_attr, 10245)));
		verify(test_url2.GetAttribute(number_attr) == 10245);
		test_num_values.Empty();
		verify(OpStatus::IsSuccess(test_url2.GetAttribute(number_str_attr, test_num_values)));
		verify(test_num_values.Compare("10245") == 0);


		verify(OpStatus::IsSuccess(test_url2.SetAttribute(number_str_attr, "2098")));
		verify(test_url2.GetAttribute(number_attr) == 2098);
		test_num_values.Empty();
		verify(OpStatus::IsSuccess(test_url2.GetAttribute(number_str_attr, test_num_values)));
		verify(test_num_values.Compare("2098") == 0);


		verify(OpStatus::IsSuccess(test_url2.SetAttribute(number_str_attr, "2586")));
		verify(test_url2.GetAttribute(number_attr) == 2586);
		test_num_values.Empty();
		verify(OpStatus::IsSuccess(test_url2.GetAttribute(number_str_attr, test_num_values)));
		verify(test_num_values.Compare("2586") == 0);

	}
}
