/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2009 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "url.typenames";

include "modules/url/tools/arrays.h";
include "modules/url/prot_sel.h";
include if HAS_COMPLEX_GLOBALS "modules/url/url_types.h";

test("g_URL_typenames is set up properly")
{
	const     char *previous_a = NULL;
	const uni_char *previous_u = NULL;

	for (size_t i = 0; i < CONST_ARRAY_SIZE(url, URL_typenames); ++ i)
	{
		const     char *current_a = g_URL_typenames[i].    protocolname;
		const uni_char *current_u = g_URL_typenames[i].uni_protocolname;

		// Check consistency in entry
		if (!current_a) verify(!current_u);
		if (!current_u) verify(!current_a);

		if (!current_a)
		{
			// Check that a NULL never follows a non-NULL
			verify(!previous_a);
			verify(!previous_u);
		}
		else
		{
			// Verify consistency in entry
			verify(uni_strcmp(current_a, current_u) == 0);

			// Make sure entries are alphabetically sorted
			if (previous_a && previous_u)
			{
				if (op_strcmp(current_a, previous_a) < 0)
				{
					output("\n\"%s\" should follow \"%s\" ", previous_a, current_a);
				}
				verify( op_strcmp(current_a, previous_a) >= 0);
				verify(uni_strcmp(current_u, previous_u) >= 0);
			}
		}

		previous_a = current_a;
		previous_u = current_u;
	}
}
