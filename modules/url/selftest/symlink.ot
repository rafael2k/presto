/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2000-2006 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "url file:// symlink URL";
require init;
require URL_FILE_SYMLINKS;

include "modules/device_api/jil/JILFSMgr.h";

language c++;

global
{
	OpString selftest_mount_point;
	OpAutoVector<OpString> curr_virt_roots;
}

exit
{
	if (!selftest_mount_point.IsEmpty())
	{
		g_DAPI_jil_fs_mgr->RemoveMapping(selftest_mount_point.CStr(), NULL, NULL);
		for (UINT32 i = 0; i < curr_virt_roots.GetCount(); ++i)
			g_DAPI_jil_fs_mgr->SetActive(curr_virt_roots.Get(i)->CStr(), TRUE);
	}
}

test("Setup filesystem")
	file uni test_mount_point "testfiles/simple";
{
	OP_STATUS result = g_DAPI_jil_fs_mgr->GetAvailableVirtualDirs(&curr_virt_roots);
	verify_success(result);
	for (UINT32 i = 0; i < curr_virt_roots.GetCount(); ++i)
	{
		result = g_DAPI_jil_fs_mgr->SetActive(curr_virt_roots.Get(i)->CStr(), FALSE);
		verify_success(result);
	}

	result = selftest_mount_point.Set(test_mount_point);
	verify_success(result);
	result = g_DAPI_jil_fs_mgr->AddMapping(test_mount_point, UNI_L(PATHSEP), UNI_L("/selftest"), TRUE);
	verify_success(result);
}


test("URL no symlink from non-widget")
	require success "Setup filesystem";
	file uni favicon_real_path "testfiles/simple/favicon0.ico";
{
	OpString favicon_url;
	verify_success(favicon_url.AppendFormat(UNI_L("file:///%s"), favicon_real_path));
	URL real_url = g_url_api->GetURL(favicon_url);
	
	OpString expected;
	verify_success(expected.Set(real_url.GetAttribute(URL::KUniPath)));
	
	verify_string(expected, real_url.GetAttribute(URL::KUniPath_FollowSymlink));
	
	verify_success(expected.Set(real_url.GetAttribute(URL::KUniName)));
	verify_string(expected, real_url.GetAttribute(URL::KUniName_For_Data));
}

test("URL symlink resolved from widget")
	require success "URL no symlink from non-widget";
	file uni favicon_real_path "testfiles/simple/favicon0.ico";
{
	URL parent_url = g_url_api->GetURL(UNI_L("widget://dummy/"));

	const uni_char* file_url = UNI_L("file:///selftest/favicon0.ico");
	
	// Symlinks (aka virtual paths) are only resolved when accessed from widgets.
	URL url_with_symlink = g_url_api->GetURL(parent_url, file_url);
	
	OpString real_url_string;
	verify_success(real_url_string.AppendFormat(UNI_L("file:///%s"), favicon_real_path));
	URL url_real = g_url_api->GetURL(real_url_string);

	OpString path_real;
	OpString path_follow_symlink;
	
	verify_success(path_real.Set(url_real.GetAttribute(URL::KUniPath)));
	verify_success(path_follow_symlink.Set(url_with_symlink.GetAttribute(URL::KUniPath_FollowSymlink)));
	
	verify(path_follow_symlink.CStr() != NULL);
	verify(path_real.CStr() != NULL);
	verify_string(path_real, path_follow_symlink);

	OpString name_real;
	OpString name_for_data;
	verify_success(name_real.Set(url_real.GetAttribute(URL::KUniName)));
	verify_success(name_for_data.Set(url_with_symlink.GetAttribute(URL::KUniName_For_Data)));
	
	verify(name_real.CStr() != NULL);
	verify(name_for_data.CStr() != NULL);
	verify_string(name_real, name_for_data);
}
