/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2004-2006 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Yngve N. Pettersen
*/

group "url context definition";

require init;
language c++;

include "core/pch.h";

include "modules/url/url2.h";
include "modules/url/url_man.h";

table url_list (const char *) 
{
  {"http://www.example.com/01"},
  {"http://www.example.com/02"},
  {"http://www.example.com/03"},
  {"http://www.example.com/04"},
  {"http://www.example.com/05"},
  {"http://www.example.com/06"},
  {"http://www.example.com/07"},
  {"http://www.example.com/08"},
  {"http://www.example.com/09"},
  {"http://www.example.com/10"},
}

test("Context usage")
{
	URL_CONTEXT_ID context_id;
	
	URL url_locks[10];
	
	context_id = urlManager->GetNewContextID();
	verify(context_id != 0);
	
	TRAPD(op_err, urlManager->AddContextL(context_id, OPFILE_ABSOLUTE_FOLDER, OPFILE_ABSOLUTE_FOLDER, OPFILE_ABSOLUTE_FOLDER, OPFILE_ABSOLUTE_FOLDER, FALSE));
			
	verify(OpStatus::IsSuccess(op_err));

	verify(urlManager->ContextExists(context_id));

	size_t i=0;
	
	iterate(url) from url_list
	{
		URL temp_url = g_url_api->GetURL(url, context_id);
		
		verify(temp_url.IsValid());
		verify(temp_url.GetContextId() == context_id);
		verify(i < ARRAY_SIZE(url_locks));
		
		url_locks[i++] = temp_url;
	}
	
	URL empty;
	
	urlManager->RemoveContext(context_id, TRUE);
	
	url_locks[0] = empty;
	verify(urlManager->ContextExists(context_id));

	url_locks[1] = empty;
	verify(urlManager->ContextExists(context_id));
	url_locks[2] = empty;
	verify(urlManager->ContextExists(context_id));
	url_locks[3] = empty;
	verify(urlManager->ContextExists(context_id));
	url_locks[4] = empty;
	verify(urlManager->ContextExists(context_id));
	url_locks[5] = empty;
	verify(urlManager->ContextExists(context_id));
	url_locks[6] = empty;
	verify(urlManager->ContextExists(context_id));
	url_locks[7] = empty;
	verify(urlManager->ContextExists(context_id));
	url_locks[8] = empty;
	verify(urlManager->ContextExists(context_id));
	
	// Last item
	url_locks[9] = empty;
	// context should now have been removed
	verify(!urlManager->ContextExists(context_id));
}
