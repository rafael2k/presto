/* -*- mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-

   Partial test suite for the autoproxy functionality
   Lars T Hansen, Johannes Hoff

   Currently there are tests here for the simple library functions; those that
   do not access the 'net.

   Other functions must be tested by setting up the file selftest.pac in this
   directory as your proxy configuration script and then visiting a URL; see 
   comments in that file for more information.

   NOTE: this test must be run at the root of an Opera source tree.  It uses
   JavaScript code in the file selftest.js found in modules/autoproxy/testsuite
   */

group "autoproxy.built-ins";

require SUPPORT_AUTO_PROXY_CONFIGURATION;
require initialization;

language c++;

include "modules/url/url2.h";

include "modules/url/protocols/scomm.h";
include "modules/url/protocols/comm.h";
include "modules/url/loadhandler/url_lh.h";

include "modules/ecmascript/ecmascript.h";
include "modules/autoproxy/autoproxy.h";

global {
	JSProxyConfig* apc;
}

setup {
	const char* js_source8 = #string "selftest.js";
	TempBuffer js_source16;
	apc = NULL;
	if (OpStatus::IsSuccess(js_source16.Append(js_source8)))
	{
		ES_ProgramText program_text;
		program_text.program_text = js_source16.GetStorage();
		program_text.program_text_length = js_source16.Length();
		OP_STATUS stat;
		apc = JSProxyConfig::Create( &program_text, 1, stat, NULL );
	}
}

exit {
	JSProxyConfig::Destroy(apc);
}

/* Each test is executed by sending in a test code to the proxy config
   script; this triggers selection of a test internally, and the test
   returns a string, either "OK" or "ERROR".
   */

/* No doubt there is a way to avoid this silly repetition with a table. */

test("isPlainHostName")
{
	verify(apc);

	uni_char c[2] = {0,0};
	JSProxyPendingContext* suspend;
	uni_char *result;
	for ( int i=1 ; i <= 2 ; i++ )
	{
		c[0] = i+'0';
		OP_STATUS res = apc->FindProxyForURL( UNI_L("isPlainHostName"), c, &result, &suspend );
		verify( res == 0 );
		verify( uni_str_eq( result, "OK" ) );
		op_free(result);
	}
}

test("dnsDomainIs")
{
	verify(apc);

	uni_char c[2] = {0,0};
	JSProxyPendingContext* suspend;
	uni_char *result;
	for ( int i=1 ; i <= 3 ; i++ )
	{
		c[0] = i+'0'; 
		OP_STATUS res = apc->FindProxyForURL( UNI_L("dnsDomainIs"), c, &result, &suspend );
		verify( res == 0 );
		verify( uni_str_eq( result, "OK" ) );
		op_free(result);
	}
}

test("dnsDomainLevels")
{
	verify(apc);

	uni_char c[2] = {0,0};
	JSProxyPendingContext* suspend;
	uni_char *result;
	for ( int i=1 ; i <= 2 ; i++ )
	{
		c[0] = i+'0'; 
		OP_STATUS res = apc->FindProxyForURL( UNI_L("dnsDomainLevels"), c, &result, &suspend );
		verify( res == 0 );
		verify( uni_str_eq( result, "OK" ) );
		op_free(result);
	}
}

test("shExpMatch")
{
	verify(apc);

	JSProxyPendingContext* suspend;
	uni_char *result;

	OP_STATUS res;
	res = apc->FindProxyForURL( UNI_L("shExpMatch"), UNI_L("1"), &result, &suspend );  verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("shExpMatch"), UNI_L("2"), &result, &suspend );  verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("shExpMatch"), UNI_L("3"), &result, &suspend );  verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("shExpMatch"), UNI_L("4"), &result, &suspend );  verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("shExpMatch"), UNI_L("5"), &result, &suspend );  verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("shExpMatch"), UNI_L("6"), &result, &suspend );  verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("shExpMatch"), UNI_L("7"), &result, &suspend );  verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("shExpMatch"), UNI_L("8"), &result, &suspend );  verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("shExpMatch"), UNI_L("9"), &result, &suspend );  verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("shExpMatch"), UNI_L("A"), &result, &suspend );  verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("shExpMatch"), UNI_L("B"), &result, &suspend );  verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("shExpMatch"), UNI_L("C"), &result, &suspend );  verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("shExpMatch"), UNI_L("D"), &result, &suspend );  verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("shExpMatch"), UNI_L("E"), &result, &suspend );  verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
}

test("weekdayRange")
{
	verify(apc);

	JSProxyPendingContext* suspend;
	uni_char *result;

	OP_STATUS res;
	res = apc->FindProxyForURL( UNI_L("weekdayRange"), UNI_L("1"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("weekdayRange"), UNI_L("2"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("weekdayRange"), UNI_L("3"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("weekdayRange"), UNI_L("4"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("weekdayRange"), UNI_L("5"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("weekdayRange"), UNI_L("6"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("weekdayRange"), UNI_L("7"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("weekdayRange"), UNI_L("8"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
}

test("dateRange")
{
	verify(apc);

	JSProxyPendingContext* suspend;
	uni_char *result;

	OP_STATUS res;
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("1"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("2"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("3"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("4"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("5"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("6"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("7"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("8"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("9"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("A"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("B"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("C"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("D"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("E"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("F"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("G"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("H"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("I"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("dateRange"), UNI_L("J"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
}

test("timeRange")
{
	verify(apc);

	JSProxyPendingContext* suspend;
	uni_char *result;

	OP_STATUS res;
	res = apc->FindProxyForURL( UNI_L("timeRange"), UNI_L("1"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("timeRange"), UNI_L("2"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("timeRange"), UNI_L("3"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("timeRange"), UNI_L("4"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("timeRange"), UNI_L("5"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("timeRange"), UNI_L("6"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
	res = apc->FindProxyForURL( UNI_L("timeRange"), UNI_L("7"), &result, &suspend ); verify( res == 0 ); verify( uni_str_eq( result, "OK" ) ); op_free(result);
}
