/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "hardcore.optimer";

include "modules/hardcore/timer/optimer.h";

global
{
    /**
     * This class is used to test the OpTimer and OpTimerListener classes.
     *
     * It tests:
     * - that the OpTimerListener::OnTimeOut() is called after the
     *   timer is started.
     * - that OpTimer::IsStarted() is false before it is started,
     * - that OpTimer::IsStarted() is true after it is started and
     *   before OpTimerListener::OnTimeOut() is called,
     * - that OpTimer::IsStarted() is still true after
     *   OpTimerListener::OnTimeOut() was called.
     */
    class TestOpTimer : public OpTimerListener
    {
        bool m_timer_was_started_before;
        bool m_timer_was_started_after;
    public:
        TestOpTimer()
            : m_timer_was_started_before(true)
            , m_timer_was_started_after(false)
            {}
        virtual ~TestOpTimer() {}

        virtual void OnTimeOut(OpTimer* timer) {
            if (m_timer_was_started_before)
                ST_failed("timer->IsStarted() was not false before the timer was started");
            else if (!m_timer_was_started_after)
                ST_failed("timer->IsStarted() was not true, after the timer was started");
            else if (!timer->IsStarted())
                ST_failed("Expected timer->IsStarted() to return true also after timeout.");
            else
                ST_passed();
        }

        /**
         * This method sets the values of OpTimer::IsStarted() before
         * and after calling OpTimer::Start(). Thus OnTimeOut() can
         * verify that the values are as expected.
         *
         * @code
         * TestOpTimer* test_timer = ...;
         * OpTimer* timer = ...;
         * bool started_before = timer->IsStarted();
         * timer->Start(some_time_out);
         * test_timer->SetTimerWasStarted(started_before, timer->IsStarted());
         * @endcode
         *
         * @param before is the value of timer->IsStarted() before
         *  timer->Start() is called.
         * @param after is the value of timer->IsStarted() after
         *  timer->Start() is called.
         */
        void SetTimerWasStarted(bool before, bool after) {
            m_timer_was_started_before = before;
            m_timer_was_started_after = after;
        }
    };

    OpTimer* m_timer;
    TestOpTimer* m_test_listener;
}
setup
{
    m_timer = 0;
    m_test_listener = 0;
}
exit
{
    if (m_timer) m_timer->Stop();
    OP_DELETE(m_timer);
    OP_DELETE(m_test_listener);
}

test("OpTimer setup")
{
    m_timer = OP_NEW(OpTimer, ());
    m_test_listener = OP_NEW(TestOpTimer, ());
    verify(m_test_listener);
    verify(m_timer);
    m_timer->SetTimerListener(m_test_listener);
    verify(!m_timer->IsStarted());
}

test("OpTimer start") async;
require success "OpTimer setup";
{
    bool started_before = m_timer->IsStarted();
    m_timer->Start(1);
    m_test_listener->SetTimerWasStarted(started_before, m_timer->IsStarted());
}
