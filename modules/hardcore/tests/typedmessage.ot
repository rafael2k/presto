/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "hardcore.typedmessage";
language c++;

include "modules/hardcore/timer/optimer.h";
include "modules/hardcore/component/OpTypedMessage.h";
include "modules/hardcore/component/Messages.h";
include "modules/opdata/OpData.h";
include "modules/otl/list.h";
include "modules/protobuf/src/protobuf_wireformat.h";

test("Serialization: Message data only")
{
	OpTextMessage *msg_in = NULL;
	OpTextMessage *msg_out = NULL;

	UniString msg_in_data;
	verify_success(msg_in_data.SetConstData(UNI_L("echo")));

	msg_in = OpTextMessage::Create(msg_in_data, OpMessageAddress(0, 0, 0), OpMessageAddress(0, 0, 0));
	verify(msg_in);
	verify_string(msg_in->GetText(), UNI_L("echo"));
	OpData serialized_data;
	verify_success(msg_in->Serialize(serialized_data));

	msg_out = OpTextMessage::Deserialize(OpMessageAddress(), OpMessageAddress(), 0, serialized_data);
	verify(msg_out);
	verify_string(msg_out->GetText(), UNI_L("echo"));
}
finally
{
	OP_DELETE(msg_in);
	OP_DELETE(msg_out);
}

test("Serialization: OpTextMessage")
{
	OpTextMessage *msg_in = NULL;
	OpTypedMessage *msg_out = NULL;

	UniString msg_in_data;
	verify_success(msg_in_data.SetConstData(UNI_L("echo")));

	msg_in = OpTextMessage::Create(msg_in_data, OpMessageAddress(0, 0, 0), OpMessageAddress(0, 0, 0));
	verify(msg_in);
	verify_string(msg_in->GetText(), UNI_L("echo"));
	OpAutoPtr<OpSerializedMessage> serialized_msg( OpTypedMessage::Serialize(msg_in) );
	verify(serialized_msg.get());

	msg_out = OpSerializedMessage::Deserialize(serialized_msg.get());
	verify(msg_out);
	verify(msg_out->GetType() == OpTextMessage::Type);
	OpTextMessage *text_out = OpTextMessage::Cast(msg_out);
	verify(text_out);
	verify_string(text_out->GetText(), UNI_L("echo"));
}
finally
{
	OP_DELETE(msg_in);
	OP_DELETE(msg_out);
}

test("Serialization: OpComponentManagerResponseMessage")
{
	OpTypedMessage *msg_out = NULL;
	OpData data;

	const char raw[] = "\x0a\x08"  "\x08\x9a\xe2\x01\x10\x00\x18\x00" // src
					   "\x12\x06"  "\x08\x00\x10\x01\x18\x01" // dst
					   "\x19\x00\x00\x00\x00\x00\x00\x00\x00" // delay
					   "\x20"; // type field

	const char raw_data[] =
					   "\x2a\x04\x08\x00\x10\x01"; // data

	verify_success(data.SetConstData(raw, sizeof(raw) - 1));
	char type_data[5];
	int encoded_len;
	verify_success(OpProtobufWireFormat::EncodeVarInt32(type_data, sizeof(type_data), encoded_len, OpComponentManagerResponseMessage::Type));
	verify_success(data.Append(OpData::FromConstDataL(type_data, encoded_len)));
	verify_success(data.Append(OpData::FromConstDataL(raw_data, sizeof(raw_data) - 1)));

	OpAutoPtr<OpSerializedMessage> serialized_msg( OP_NEW(OpSerializedMessage, (data)) );
	verify(serialized_msg.get());

	msg_out = OpSerializedMessage::Deserialize(serialized_msg.get());
	verify(msg_out);
	verify(msg_out->GetType() == OpComponentManagerResponseMessage::Type);
	OpComponentManagerResponseMessage *response_out = OpComponentManagerResponseMessage::Cast(msg_out);
	verify(response_out);
	verify(response_out->GetRequest() == 0);
	verify((int)response_out->GetComponentType() == 1);
	OpMessageAddress src = response_out->GetSrc();
	OpMessageAddress dst = response_out->GetDst();
	verify(src.cm == 28954);
	verify(src.co == 0);
	verify(src.ch == 0);
	verify(dst.cm == 0);
	verify(dst.co == 1);
	verify(dst.ch == 1);
	verify(response_out->GetRequest() == 0);
	verify(response_out->GetComponentType() == 1);
}
finally
{
	OP_DELETE(msg_out);
}
