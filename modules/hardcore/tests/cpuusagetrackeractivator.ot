/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2012 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "hardcore.cpuusagetrackactivator";
require init;
require CPUUSAGETRACKING;

include "modules/hardcore/cpuusagetracker/cpuusagetracker.h";
include "modules/hardcore/cpuusagetracker/cpuusagetrackeractivator.h";

test("cpuusagetrackeractivator#1")
{
	CPUUsageTracker* tracker = OP_NEW(CPUUsageTracker, ());
	verify(tracker);

	{
		// Scope to trigger the activator destructor.
		CPUUsageTrackActivator activator(tracker);
		OP_DELETE(tracker);
	}

	// Now we shouldn't have crashed and the time should have been
	// recorded into the global tracker. How to check that?
}

test("cpuusagetrackeractivator#2")
{
	CPUUsageTracker* tracker1 = OP_NEW(CPUUsageTracker, ());
	verify(tracker1);

	{
		// Scope to trigger the activator destructor.
		CPUUsageTrackActivator activator1(tracker1);

		{
			// Scope to trigger the activator destructor.
			CPUUsageTrackActivator activator2(tracker1);
			OP_DELETE(tracker1);
		}
	}

	// Now we shouldn't have crashed and the time should have been
	// recorded into the global tracker. How to check that?
}

test("cpuusagetrackeractivator#3")
{
	CPUUsageTracker* tracker1 = OP_NEW(CPUUsageTracker, ());
	verify(tracker1);

	{
		// Scope to trigger the activator destructor.
		CPUUsageTrackActivator activator1(tracker1);

		{
			CPUUsageTracker tracker2;
			// Scope to trigger the activator destructor.
			CPUUsageTrackActivator activator2(&tracker2);
			OP_DELETE(tracker1);
		}
	}

	// Now we shouldn't have crashed and the time should have been
	// recorded into the global tracker. How to check that?
}

test("cpuusagetrackeractivator#4")
{
	CPUUsageTracker* tracker1 = OP_NEW(CPUUsageTracker, ());
	CPUUsageTracker* tracker2 = OP_NEW(CPUUsageTracker, ());
	if (!(tracker1 && tracker2))
	{
		OP_DELETE(tracker1);
		OP_DELETE(tracker2);
	}
	verify(tracker1);
	verify(tracker2);

	{
		// Scope to trigger the activator destructor.
		CPUUsageTrackActivator activator1(tracker1);

		{
			// Scope to trigger the activator destructor.
			CPUUsageTrackActivator activator2(tracker2);
			OP_DELETE(tracker1);
			OP_DELETE(tracker2);
		}
	}

	// Now we shouldn't have crashed and the time should have been
	// recorded into the global tracker. How to check that?
}

test("cpuusagetrackeractivator#5")
{
	CPUUsageTracker* tracker1 = OP_NEW(CPUUsageTracker, ());
	CPUUsageTracker* tracker2 = OP_NEW(CPUUsageTracker, ());
	if (!(tracker1 && tracker2))
	{
		OP_DELETE(tracker1);
		OP_DELETE(tracker2);
	}
	verify(tracker1);
	verify(tracker2);

	{
		// Scope to trigger the activator destructor.
		CPUUsageTrackActivator activator1(tracker1);

		{
			// Scope to trigger the activator destructor.
			CPUUsageTrackActivator activator2(tracker2);
			OP_DELETE(tracker2);
			OP_DELETE(tracker1);
		}
	}

	// Now we shouldn't have crashed and the time should have been
	// recorded into the global tracker. How to check that?
}
