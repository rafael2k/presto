/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2012 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "hardcore.cpuusagetracker";
require init;
require CPUUSAGETRACKING;

include "modules/hardcore/cpuusagetracker/cpuusagetracker.h";

test("cpuusagetracker#1")
{
	CPUUsageTracker tracker;
	verify_success(tracker.SetDisplayName(UNI_L("Testing")));
	verify_string(tracker.GetDisplayName(), "Testing");

	// Record 100% CPU Usage between 1000 and 4000 ms and check that
	// it is reported.
	tracker.RecordCPUUsage(1000, 3000);
	verify(CPUUsageTracker::SAMPLE_LENGTH > 10);
	double cpu_usage[CPUUsageTracker::SAMPLE_LENGTH]; // ARRAY OK???
	tracker.GetLastXSeconds(4000, cpu_usage);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 1] == 1.0);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 2] == 1.0);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 3] == 1.0);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 4] == -1.0);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 5] == -1.0);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 6] == -1.0);
	for (int i = 0; i < CPUUsageTracker::SAMPLE_LENGTH - 6; i++)
		verify(cpu_usage[i] == -1.0);

	verify(tracker.GetLastXSecondAverage(4000, 3) == 1.0);
}

test("cpuusagetracker#2")
{
	CPUUsageTracker tracker;
	verify_success(tracker.SetDisplayName(UNI_L("Testing#2")));
	verify_string(tracker.GetDisplayName(), "Testing#2");
	verify_success(tracker.SetDisplayName(UNI_L("Testing#3")));
	verify_string(tracker.GetDisplayName(), "Testing#3");

	// Record 100% CPU Usage between 59000 and 65000 ms and check that
	// it is reported.
	tracker.RecordCPUUsage(59000, 6000);
	verify(CPUUsageTracker::SAMPLE_LENGTH > 10);
	double cpu_usage[CPUUsageTracker::SAMPLE_LENGTH]; // ARRAY OK???
	tracker.GetLastXSeconds(66500, cpu_usage);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 1] == 0.0); // Between 65000 and 66000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 2] == 1.0); // Between 64000 and 65000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 3] == 1.0); // Between 63000 and 64000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 4] == 1.0); // Between 62000 and 63000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 5] == 1.0); // Between 61000 and 62000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 6] == 1.0); // Between 60000 and 61000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 7] == 1.0); // Between 59000 and 60000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 8] == -1.0); // Between 58000 and 59000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 9] == -1.0); // Between 57000 and 58000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 10] == -1.0);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 11] == -1.0);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 12] == -1.0);
	for (int i = 0; i < CPUUsageTracker::SAMPLE_LENGTH - 12; i++)
		verify(cpu_usage[i] == -1.0);

	// 4 last seconds -> 62000-66000: 3 full, 1 empty -> 0.75, no floating point number problems.... Maybe.
	verify(tracker.GetLastXSecondAverage(66500, 4) == 0.75);
}

test("cpuusagetracker#3")
{
	CPUUsageTracker tracker;

	tracker.RecordCPUUsage(-1000, 1000);
	verify(CPUUsageTracker::SAMPLE_LENGTH > 10);
	double cpu_usage[CPUUsageTracker::SAMPLE_LENGTH]; // ARRAY OK???
	tracker.GetLastXSeconds(2000, cpu_usage);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 1] == 0.0); // Between 1000 and 2000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 2] == 0.0); // Between 0 and 1000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 3] == 1.0); // Between -1000 and 0
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 4] == -1.0); // Between -2000 and -1000
	for (int i = 0; i < CPUUsageTracker::SAMPLE_LENGTH - 4; i++)
		verify(cpu_usage[i] == -1.0);

	// 4 last seconds -> -1000 -> 3000: 1 full, 3 empty -> 0.25, no floating point number problems.... Maybe.
	verify(tracker.GetLastXSecondAverage(3000, 4) == 0.25);

	// 8 last seconds -> -1000 -> 3000: 1 full, 7 empty -> 0.125, no floating point number problems.... Maybe.
	verify(tracker.GetLastXSecondAverage(3000, 8) == 0.125);
}

test("cpuusagetracker#4")
{
	CPUUsageTracker tracker;

	tracker.RecordCPUUsage(0, 250);
	tracker.RecordCPUUsage(500, 250);
	tracker.RecordCPUUsage(1000, 250);
	tracker.RecordCPUUsage(1500, 250);
	verify(CPUUsageTracker::SAMPLE_LENGTH > 10);
	double cpu_usage[CPUUsageTracker::SAMPLE_LENGTH]; // ARRAY OK???
	tracker.GetLastXSeconds(2000, cpu_usage);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 1] == 0.5); // Between 1000 and 2000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 2] == 0.5); // Between 0 and 1000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 3] == -1.0); // Between -1000 and 0
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 4] == -1.0); // Between -2000 and 0
	for (int i = 0; i < CPUUsageTracker::SAMPLE_LENGTH - 4; i++)
		verify(cpu_usage[i] == -1.0);

	// 2 last seconds -> 0 -> 2000
	verify(tracker.GetLastXSecondAverage(2000, 2) == 0.5);
}

test("cpuusagetracker#5")
{
	CPUUsageTracker tracker;

	tracker.RecordCPUUsage(750, 500);
	if (CPUUsageTracker::SAMPLE_LENGTH > 1)
	{
		double cpu_usage[CPUUsageTracker::SAMPLE_LENGTH];
		tracker.GetLastXSeconds(2000, cpu_usage);
		verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 1] == 0.25); // Between 1000 and 2000
		verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 2] == 0.25); // Between 0 and 1000
		if (CPUUsageTracker::SAMPLE_LENGTH > 2)
			verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 3] == -1.0); // Between -1000 and 0
		if (CPUUsageTracker::SAMPLE_LENGTH > 3)
		{
			verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 4] == -1.0); // Between -2000 and 0
			for (int i = 0; i < CPUUsageTracker::SAMPLE_LENGTH - 4; i++)
				verify(cpu_usage[i] == -1.0);
		}

		// 2 last seconds -> 0 -> 2000
		verify(tracker.GetLastXSecondAverage(2000, 2) == 0.25);
	}
}

test("cpuusagetracker#6")
{
	CPUUsageTracker tracker;

	tracker.RecordCPUUsage(750, 500);
	tracker.RecordCPUUsage(1250, 750);
	verify(CPUUsageTracker::SAMPLE_LENGTH > 10);
	double cpu_usage[CPUUsageTracker::SAMPLE_LENGTH]; // ARRAY OK???
	tracker.GetLastXSeconds(2000, cpu_usage);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 1] == 1.0); // Between 1000 and 2000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 2] == 0.25); // Between 0 and 1000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 3] == -1.0); // Between -1000 and 0
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 4] == -1.0); // Between -2000 and 0
	for (int i = 0; i < CPUUsageTracker::SAMPLE_LENGTH - 4; i++)
		verify(cpu_usage[i] == -1.0);

	// 2 last seconds -> 0 -> 2000
	verify(tracker.GetLastXSecondAverage(2000, 2) == 0.625);
}

test("cpuusagetracker#7")
{
	CPUUsageTracker tracker;

	tracker.RecordCPUUsage(-5000, (CPUUsageTracker::SAMPLE_LENGTH + 15) * 1000.0);
	verify(CPUUsageTracker::SAMPLE_LENGTH > 10);
	double cpu_usage[CPUUsageTracker::SAMPLE_LENGTH]; // ARRAY OK???
	double measure_time = (CPUUsageTracker::SAMPLE_LENGTH + 10) * 1000.0 + 999;
	tracker.GetLastXSeconds(measure_time, cpu_usage);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 1] == 1.0); // Between 69000 and 70000 (if SAMPLE_LENGTH is 60)
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 2] == 1.0);
	for (int i = 0; i < CPUUsageTracker::SAMPLE_LENGTH - 2; i++)
		verify(cpu_usage[i] == 1.0);

	verify(tracker.GetLastXSecondAverage(measure_time, CPUUsageTracker::SAMPLE_LENGTH + 10) == 1.0);
}

test("cpuusagetracker#8")
{
	CPUUsageTracker tracker;

	tracker.RecordCPUUsage(0, 500);
	tracker.RecordCPUUsage((CPUUsageTracker::SAMPLE_LENGTH + 1) * 1000.0, 500);
	verify(CPUUsageTracker::SAMPLE_LENGTH > 10);
	double cpu_usage[CPUUsageTracker::SAMPLE_LENGTH]; // ARRAY OK???
	double measure_time = (CPUUsageTracker::SAMPLE_LENGTH + 2) * 1000.0;
	tracker.GetLastXSeconds(measure_time, cpu_usage);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 1] == 0.5); // Between 69000 and 70000 (if SAMPLE_LENGTH is 60)
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 2] == 0.0);
	for (int i = 0; i < CPUUsageTracker::SAMPLE_LENGTH - 2; i++)
		verify(cpu_usage[i] == 0.0);

	verify(tracker.GetLastXSecondAverage(measure_time, 2) == 0.25);
}

test("cpuusagetracker#9")
{
	CPUUsageTracker tracker;

	tracker.RecordCPUUsage(1250, 500);
	verify(CPUUsageTracker::SAMPLE_LENGTH > 10);
	double cpu_usage[CPUUsageTracker::SAMPLE_LENGTH]; // ARRAY OK???
	tracker.GetLastXSeconds(2000, cpu_usage);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 1] == 0.5);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 2] == -1.0);
	for (int i = 0; i < CPUUsageTracker::SAMPLE_LENGTH - 2; i++)
		verify(cpu_usage[i] == -1.0);

	// This should fast-forward the sample window until it wraps around.
	tracker.RecordCPUUsage(250, 500);
	verify(CPUUsageTracker::SAMPLE_LENGTH > 10);
	tracker.GetLastXSeconds(2000, cpu_usage);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 1] == 0.0);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 2] == 0.5);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 3] == 0.0);
	for (int i = 0; i < CPUUsageTracker::SAMPLE_LENGTH - 3; i++)
		verify(cpu_usage[i] == 0.0);
}

test("cpuusagetracker#10")
{
	CPUUsageTracker tracker;

	tracker.RecordCPUUsage(0, 500);
	tracker.RecordCPUUsage(0, 500);
	tracker.RecordCPUUsage(0, 500);
	verify(CPUUsageTracker::SAMPLE_LENGTH > 10);
	double cpu_usage[CPUUsageTracker::SAMPLE_LENGTH]; // ARRAY OK???
	tracker.GetLastXSeconds(2000, cpu_usage);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 1] == 0.0);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 2] >= 1.0); // Clamp to 1.0 or leave at 1.5?
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 3] == -1.0);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 4] == -1.0);
	for (int i = 0; i < CPUUsageTracker::SAMPLE_LENGTH - 4; i++)
		verify(cpu_usage[i] == -1.0);
}


test("cpuusagetracker#11")
{
	CPUUsageTracker tracker;

	tracker.RecordCPUUsage(750, 500);
	tracker.RecordCPUUsage(750, 500);
	tracker.RecordCPUUsage(750, 500);
	verify(CPUUsageTracker::SAMPLE_LENGTH > 10);
	double cpu_usage[CPUUsageTracker::SAMPLE_LENGTH]; // ARRAY OK???
	tracker.GetLastXSeconds(3000, cpu_usage);
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 1] == 0.0); // 2000 - 3000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 2] == 0.75); // 1000 - 2000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 3] == 0.75); // 0 - 1000
	verify(cpu_usage[CPUUsageTracker::SAMPLE_LENGTH - 4] == -1.0); // -1000 - 0
	for (int i = 0; i < CPUUsageTracker::SAMPLE_LENGTH - 4; i++)
		verify(cpu_usage[i] == -1.0);
}
