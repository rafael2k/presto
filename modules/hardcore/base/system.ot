/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2011 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */
group "hardcore.system";

include "modules/ecmascript/ecmascript.h";
include "modules/util/str.h";

test("Endian")
{
	BOOL big_endian;
	short word = 0x4321;
	if ((*(char *)& word) != 0x21 )
		big_endian = TRUE;
	else
		big_endian = FALSE;

#ifdef OPERA_BIG_ENDIAN
	verify(big_endian);
#else // OPERA_BIG_ENDIAN
	verify(!big_endian);
#endif // OPERA_BIG_ENDIAN
}

test("NaN equals everything")
{
	BOOL nan_equals_everything;
	double nan = op_strtod("NaN", NULL);
	if (nan == 0.0)
		nan_equals_everything = TRUE;
	else
		nan_equals_everything = FALSE;

#ifdef NAN_EQUALS_EVERYTHING
	verify(nan_equals_everything);
#else // NAN_EQUALS_EVERYTHING
	verify(!nan_equals_everything);
#endif // NAN_EQUALS_EVERYTHING
}

test("op_stricmp")
{
	verify(op_stricmp("foo", "FOO") == 0);
	verify(op_stricmp("FOO", "foo") == 0);
	verify(op_stricmp("foo", "foo") == 0);
	verify(op_stricmp("abc", "") != 0);
}

test("op_strnicmp")
{
	verify(op_strnicmp("foo", "FOO", 0) == 0);
	verify(op_strnicmp("foo", "FOO", 1) == 0);
	verify(op_strnicmp("foo", "FOO", 2) == 0);
	verify(op_strnicmp("foo", "FOO", 3) == 0);
	verify(op_strnicmp("foo", "FOO", 4) == 0);
	verify(op_strnicmp("abc", "", 3) != 0);
	verify(op_strnicmp("abc", "a", 2) != 0);
	verify(op_strnicmp("foo", "FOOD-FIGHT", 0) == 0);
	verify(op_strnicmp("foo", "FOOD-FIGHT", 1) == 0);
	verify(op_strnicmp("foo", "FOOD-FIGHT", 2) == 0);
	verify(op_strnicmp("foo", "FOOD-FIGHT", 3) == 0);
	verify(op_strnicmp("foo", "FOOD-FIGHT", 4) != 0);
}

test("op_itoa")
{
	char result[34]; // ARRAY OK 2008-03-07 jl
	op_itoa(17, result, 10);
	verify(op_strcmp(result, "17") == 0);

	op_itoa(17, result, 16);
	verify(op_strcmp(result, "11") == 0);
}

test("op_ltoa")
{
	char result[34]; // ARRAY OK 2008-03-07 jl
	op_ltoa(17, result, 10);
	verify(op_strcmp(result, "17") == 0);

	op_ltoa(17, result, 16);
	verify(op_strcmp(result, "11") == 0);}

test("BOOL")
{
	verify(TRUE);
	verify(!FALSE);
	verify(TRUE != FALSE);
}

test("uni_char")
{
	verify(sizeof(uni_char) == 2);
	verify((uni_char)-1 == 65535);
}

test("UINT32")
{
	verify(sizeof(UINT32) == 4);
	verify((UINT32)2147483648U + 1 == 2147483649U);
}

test("UINT16")
{
	verify(sizeof(UINT16) == 2);
	verify((UINT16)-1 == 65535);
}

test("UINT8")
{
	verify(sizeof(UINT8) == 1);
	verify((UINT8)-1 == 255);
}

test("INT32")
{
	verify(sizeof(INT32) == 4);
}

test("INT16")
{
	verify(sizeof(INT16) == 2);
}

test("UINT")
{
	verify(sizeof(UINT) >= 4);
}

test("UCHAR")
{
	verify(sizeof(UCHAR) == 1);
}

test("INTPTR")
{
	verify(sizeof(INTPTR) >= 4);
}

test("UINTPTR")
{
	verify(sizeof(UINTPTR) >= 4);
}

test("ptrdiff_t")
{
	verify(sizeof(ptrdiff_t) == sizeof(char*));
}

test("UCHAR_MAX")
{
	UCHAR uchar_max = UCHAR_MAX;
	UCHAR smaller = (UCHAR)(uchar_max + 1);
	verify(smaller < UCHAR_MAX);
}

test("INT_MIN")
{
	int int_min = INT_MIN;
	int bigger = (int)(int_min - 1);
	verify(bigger > INT_MIN);
}

test("INT_MAX")
{
	int int_max = INT_MAX;
	int smaller = (int)(int_max + 1);
	verify(smaller < INT_MAX);
}

test("UINT_MAX")
{
	unsigned int uint_max = UINT_MAX;
	unsigned int smaller = (int)(uint_max + 1);
	verify(smaller < UINT_MAX);
}

test("SHRT_MIN")
{
	short shrt_min = SHRT_MIN;
	short bigger = (short)(shrt_min - 1);
	verify(bigger > SHRT_MIN);
}

test("SHRT_MAX")
{
	short shrt_max = SHRT_MAX;
	short smaller = (short)(shrt_max + 1);
	verify(smaller < SHRT_MAX);
}

test("USHRT_MAX")
{
	unsigned short ushrt_max = USHRT_MAX;
	unsigned short smaller = (unsigned short)(ushrt_max + 1);
	verify(smaller < USHRT_MAX);
}

test("LONG_MIN")
{
	long long_min = LONG_MIN;
	long bigger = (long)(long_min - 1);
	verify(bigger > LONG_MIN);
}

test("LONG_MAX")
{
	long long_max = LONG_MAX;
	long smaller = (long)(long_max + 1);
	verify(smaller < LONG_MAX);
}

test("ULONG_MAX")
{
	unsigned long ulong_max = ULONG_MAX;
	unsigned long smaller = (unsigned long)(ulong_max + 1);
	verify(smaller < ULONG_MAX);
}

test("DBL_MIN")
{
	verify(DBL_MIN / 2.0 == 0);
}

test("DBL_MAX")
{
	double maximum = DBL_MAX;
	double new_maximum = maximum;
	while (new_maximum + 1.0 > maximum)
	{
		new_maximum += 1.0;
	}
	verify(new_maximum == maximum);
}

table Times(time_t, int, int, int, int, int, int, int, int)
{
	{ 0, 0, 1, 0, 0, 0, 4, 0, 70 },
	{ 1, 0, 1, 0, 0, 1, 4, 0, 70 },
	{ 946684800, 0, 1, 0, 0, 0, 6, 0, 100 },
	{ 2147483647, 3, 19, 14, 0, 7, 2, 18, 138 }
}

test("OPFILE_LENGTH_IS_SIGNED defined")
	require OPFILE_LENGTH_IS_SIGNED;
{
	// If this test fails, platform claims that OpFileLength is signed while it is usigned!
	int n = 0;
	op_sscanf ("0","%d",&n); // Just a hack to trick the compiler to NOT give a warning
	OpFileLength value = (OpFileLength)n; // value = 0;
	value--;
	if (value < 0)
		verify(TRUE);
	else
		verify(FALSE);
}

test("OPFILE_LENGTH_IS_SIGNED undefined")
	require undefined OPFILE_LENGTH_IS_SIGNED;
{
	// If this test fails, platform claims that OpFileLength is unsigned while it is signed!
	int n = 0;
	op_sscanf ("0","%d",&n); // Just a hack to trick the compiler to NOT give a warning
	OpFileLength value = (OpFileLength)n; // value = 0;

	value--;
	if (value > 0)
		verify(TRUE);
	else
		verify(FALSE);
}

test("FILE_LENGTH_MAX when OPFILE_LENGTH_IS_SIGNED undefined ")
	require OPFILE_LENGTH_IS_SIGNED;
{
	if (sizeof(OpFileLength) == 8)
		// Somewhat fiddly expression, so as to avoid integer overflow warning:
		verify(FILE_LENGTH_MAX == (((((OpFileLength)1) << 62) - 1) << 1) + 1);

	if (sizeof(OpFileLength) == 4)
		// As above.
		verify(FILE_LENGTH_MAX == (((((OpFileLength)1) << 30) - 1) << 1) + 1);
}

test("FILE_LENGTH_MAX when OPFILE_LENGTH_IS_SIGNED defined ")
	require undefined OPFILE_LENGTH_IS_SIGNED;
{
	verify(FILE_LENGTH_MAX == ~((OpFileLength)0));
}

test("op_gmtime")
{
	iterate (t, hour, mday, min, mon, sec, wday, yday, year) from Times
	{
		struct tm* res = op_gmtime(&t);

		if (res->tm_year != year)
			output("year: %d != %d\n", res->tm_year, year);
		verify(res->tm_year == year);

		if (res->tm_mon != mon)
			output("mon: %d != %d\n", res->tm_mon, mon);
		verify(res->tm_mon == mon);

		if (res->tm_mday != mday)
			output("mday: %d != %d\n", res->tm_mday, mday);
		verify(res->tm_mday == mday);

		if (res->tm_wday != wday)
			output("wday: %d != %d\n", res->tm_wday, wday);
		verify(res->tm_wday == wday);

		if (res->tm_hour != hour)
			output("hour: %d != %d\n", res->tm_hour, hour);
		verify(res->tm_hour == hour);

		if (res->tm_min != min)
			output("min: %d != %d\n", res->tm_min, min);
		verify(res->tm_min == min);

		if (res->tm_sec != sec)
			output("sec: %d != %d\n", res->tm_sec, sec);
		verify(res->tm_sec == sec);
	}
}

test("op_calloc")
{
	char* p = (char*)op_calloc(1, 100);
	verify(p);
	for (int i=0; i < 100; ++i)
		verify(p[i] == 0);
	op_free(p);
}

test("op_free(NULL)")
{
	void* foo = NULL;
	op_free(foo); // must not crash
	verify(TRUE);
}

test("delete NULL")
{
	char* foo = NULL;
	delete foo; // must not crash
	verify(TRUE);
}

test("op_strlen")
{
	verify(op_strlen("") == 0);
	verify(op_strlen("1") == 1);
	verify(op_strlen("\345\344\366") == 3);
}

test("op_memset")
{
	char buf[100]; // ARRAY OK 2008-03-07 jl
	op_memset(buf, 1, 100);
	for (int i=0; i < 100; ++i)
		verify(buf[i] == 1);
}

test("RAND_MAX")
{
	verify(RAND_MAX > 0);
}

test("op_rand")
{
	int r[100];
	op_srand((unsigned int)op_time(NULL));
	int i;
	for (i=0; i < 100; ++i)
	{
		r[i] = op_rand();
	}

	bool differs = false;
	int first = r[0];
	for (i=1; i < 100; ++i)
	{
		if (r[i] != first)
		{
			differs = true;
			break;
		}
	}

	verify(differs);
}

test("op_time")
{
	time_t result1 = op_time(NULL);
	verify(result1 > 1129015363);

	time_t result2 = 0;
	op_time(&result2);
	verify(result1 == result2);
}

test("op_mktime")
{
	iterate (tt, hour, mday, min, mon, sec, wday, yday, year) from Times
	{
		struct tm t;
		t.tm_hour = hour;
		t.tm_mday = mday;
		t.tm_min = min;
		t.tm_mon = mon;
		t.tm_sec = sec;
		t.tm_wday = wday;
		t.tm_year = year;
		t.tm_isdst = 0;
		time_t res = op_mktime(&t);
		long diff = op_abs((int)(tt - res));
		if (diff > 24 * 60 * 60)
			output("diff: %d\n", diff);
		verify(diff <= 24 * 60 * 60);
	}
}
