/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2005 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "hardcore.messagelisteners";

include "modules/hardcore/mh/messagelisteners.h";
include "modules/hardcore/mh/messobj.h";

global
{
	class STMessageObject
		: public MessageObject
	{
	public:
		STMessageObject()
			: calls(0)
		{
		}

		void HandleCallback(OpMessage msg, MH_PARAM_1 par1, MH_PARAM_2 par2)
		{
			++calls;
		}

		unsigned calls;
	};

	class STRemovingMessageObject
		: public MessageObject
	{
	public:
		STRemovingMessageObject(HC_MessageListeners *ml, OpMessage *msg, MH_PARAM_1 *id)
			: ml(ml),
			  msg(msg),
			  id(id),
			  calls(0)
		{
		}

		void HandleCallback(OpMessage msg0, MH_PARAM_1 par1, MH_PARAM_2 par2)
		{
			if (msg && id)
				ml->RemoveListener(this, *msg, *id);
			else if (msg)
				ml->RemoveListeners(this, *msg);
			else if (id)
				ml->RemoveListeners(this, *id);
			else
				ml->RemoveListeners(this);

			++calls;
		}

		HC_MessageListeners *ml;
		OpMessage *msg;
		MH_PARAM_1 *id;
		unsigned calls;
	};

	class STDestructiveMessageObject
		: public MessageObject
	{
	public:
		STDestructiveMessageObject(HC_MessageListeners *ml)
			: ml(ml),
			  calls(0)
		{
		}

		void HandleCallback(OpMessage msg0, MH_PARAM_1 par1, MH_PARAM_2 par2)
		{
			delete ml;
			++calls;
		}

		HC_MessageListeners *ml;
		unsigned calls;
	};

	class STRecursiveMessageObject
		: public MessageObject
	{
	public:
		STRecursiveMessageObject(HC_MessageListeners *ml, unsigned depth)
			: ml(ml),
			  depth(depth),
			  calls(0)
		{
		}

		void HandleCallback(OpMessage msg, MH_PARAM_1 par1, MH_PARAM_2 par2)
		{
			if (calls++ < depth)
				ml->CallListeners(msg, par1, par2);
		}

		HC_MessageListeners *ml;
		unsigned depth;
		unsigned calls;
	};

	class STRecursivelyDestructiveMessageObject
		: public MessageObject
	{
	public:
		STRecursivelyDestructiveMessageObject(HC_MessageListeners *ml, unsigned depth)
			: ml(ml),
			  depth(depth),
			  calls(0)
		{
		}

		void HandleCallback(OpMessage msg, MH_PARAM_1 par1, MH_PARAM_2 par2)
		{
			if (calls++ < depth)
				ml->CallListeners(msg, par1, par2);
			else
				delete ml;
		}

		HC_MessageListeners *ml;
		unsigned depth;
		unsigned calls;
	};
}

test("AddListeners + CallListeners")
{
	STMessageObject mo1, mo2, mo3, mo4;
	HC_MessageListeners ml;

	OpMessage msg[1];
	msg[0] = MSG_HC_ST_MESSAGE_1;

	ml.AddListeners(&mo1, msg, 1, 1);
	ml.AddListeners(&mo2, msg, 1, 2);
	ml.AddListeners(&mo3, msg, 1, 3);
	ml.AddListeners(&mo4, msg, 1, 4);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 2, 0);

	verify(mo1.calls == 0);
	verify(mo2.calls == 1);
	verify(mo3.calls == 0);
	verify(mo4.calls == 0);

	ml.CallListeners(MSG_HC_ST_MESSAGE_2, 2, 0);

	verify(mo1.calls == 0);
	verify(mo2.calls == 1);
	verify(mo3.calls == 0);
	verify(mo4.calls == 0);

	ml.CallListeners(MSG_HC_ST_MESSAGE_3, 2, 0);

	verify(mo1.calls == 0);
	verify(mo2.calls == 1);
	verify(mo3.calls == 0);
	verify(mo4.calls == 0);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(mo1.calls == 1);
	verify(mo2.calls == 1);
	verify(mo3.calls == 0);
	verify(mo4.calls == 0);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 3, 0);

	verify(mo1.calls == 1);
	verify(mo2.calls == 1);
	verify(mo3.calls == 1);
	verify(mo4.calls == 0);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 4, 0);

	verify(mo1.calls == 1);
	verify(mo2.calls == 1);
	verify(mo3.calls == 1);
	verify(mo4.calls == 1);
}
finally
{
	ml.RemoveListeners(&mo1);
	ml.RemoveListeners(&mo2);
	ml.RemoveListeners(&mo3);
	ml.RemoveListeners(&mo4);
}

test("AddListeners + RemoveListener")
{
	STMessageObject mo1, mo2;
	HC_MessageListeners ml;

	OpMessage msg[2];
	msg[0] = MSG_HC_ST_MESSAGE_1;
	msg[1] = MSG_HC_ST_MESSAGE_2;

	ml.AddListeners(&mo1, msg, 2, 1);
	ml.AddListeners(&mo2, msg, 2, 2);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(mo1.calls == 1);
	verify(mo2.calls == 0);

	ml.CallListeners(MSG_HC_ST_MESSAGE_2, 1, 0);

	verify(mo1.calls == 2);
	verify(mo2.calls == 0);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 2, 0);

	verify(mo1.calls == 2);
	verify(mo2.calls == 1);

	ml.CallListeners(MSG_HC_ST_MESSAGE_2, 2, 0);

	verify(mo1.calls == 2);
	verify(mo2.calls == 2);

	ml.RemoveListener(&mo1, MSG_HC_ST_MESSAGE_1, 1);
	ml.RemoveListener(&mo2, MSG_HC_ST_MESSAGE_2, 2);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(mo1.calls == 2);
	verify(mo2.calls == 2);

	ml.CallListeners(MSG_HC_ST_MESSAGE_2, 1, 0);

	verify(mo1.calls == 3);
	verify(mo2.calls == 2);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 2, 0);

	verify(mo1.calls == 3);
	verify(mo2.calls == 3);

	ml.CallListeners(MSG_HC_ST_MESSAGE_2, 2, 0);

	verify(mo1.calls == 3);
	verify(mo2.calls == 3);
}

test("AddListeners + RemoveListener")
{
	STMessageObject mo1, mo2;
	HC_MessageListeners ml;

	OpMessage msg[2];
	msg[0] = MSG_HC_ST_MESSAGE_1;
	msg[1] = MSG_HC_ST_MESSAGE_2;

	ml.AddListeners(&mo1, msg, 2, 1);
	ml.AddListeners(&mo2, msg, 2, 2);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(mo1.calls == 1);
	verify(mo2.calls == 0);

	ml.CallListeners(MSG_HC_ST_MESSAGE_2, 1, 0);

	verify(mo1.calls == 2);
	verify(mo2.calls == 0);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 2, 0);

	verify(mo1.calls == 2);
	verify(mo2.calls == 1);

	ml.CallListeners(MSG_HC_ST_MESSAGE_2, 2, 0);

	verify(mo1.calls == 2);
	verify(mo2.calls == 2);

	ml.RemoveListener(&mo1, MSG_HC_ST_MESSAGE_1, 1);
	ml.RemoveListener(&mo2, MSG_HC_ST_MESSAGE_2, 2);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(mo1.calls == 2);
	verify(mo2.calls == 2);

	ml.CallListeners(MSG_HC_ST_MESSAGE_2, 1, 0);

	verify(mo1.calls == 3);
	verify(mo2.calls == 2);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 2, 0);

	verify(mo1.calls == 3);
	verify(mo2.calls == 3);

	ml.CallListeners(MSG_HC_ST_MESSAGE_2, 2, 0);

	verify(mo1.calls == 3);
	verify(mo2.calls == 3);
}

test("AddListeners wild")
{
	STMessageObject mo;
	HC_MessageListeners ml;

	OpMessage msg = MSG_HC_ST_MESSAGE_1;

	ml.AddListeners(&mo, &msg, 1, 0);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 0, 0);

	verify(mo.calls == 1);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 1);
	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 2, 2);

	verify(mo.calls == 3);

	ml.RemoveListener(&mo, MSG_HC_ST_MESSAGE_1, 1);
	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 3, 3);

	verify(mo.calls == 4);

	ml.RemoveListener(&mo, MSG_HC_ST_MESSAGE_1, 0);
	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 4, 4);

	verify(mo.calls == 4);
}

test("HasListener")
{
	STMessageObject mo;
	HC_MessageListeners ml;

	OpMessage msg = MSG_HC_ST_MESSAGE_1;

	ml.AddListeners(&mo, &msg, 1, 1);

	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_2, 0));
	verify( ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 1));
	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 2));
	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_2, 1));

	ml.RemoveListener(&mo, MSG_HC_ST_MESSAGE_1, 2);

	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_2, 0));
	verify( ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 1));
	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 2));
	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_2, 1));

	ml.RemoveListener(&mo, MSG_HC_ST_MESSAGE_2, 1);

	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_2, 0));
	verify( ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 1));
	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 2));
	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_2, 1));

	ml.RemoveListener(&mo, MSG_HC_ST_MESSAGE_1, 1);

	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_2, 0));
	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 1));
	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 2));
	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_2, 1));
}

test("RemoveListeners(OpMessage)")
{
	STMessageObject mo;
	HC_MessageListeners ml;

	OpMessage msg = MSG_HC_ST_MESSAGE_1;

	ml.AddListeners(&mo, &msg, 1, 1);
	ml.AddListeners(&mo, &msg, 1, 2);
	ml.AddListeners(&mo, &msg, 1, 3);

	verify(ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 1));
	verify(ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 2));
	verify(ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 3));

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);
	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 2, 0);
	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 3, 0);

	verify(mo.calls == 3);

	ml.RemoveListeners(&mo, MSG_HC_ST_MESSAGE_1);

	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 1));
	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 2));
	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 3));

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);
	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 2, 0);
	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 3, 0);

	verify(mo.calls == 3);
}

test("RemoveListeners(MH_PARAM_1)")
{
	STMessageObject mo;
	HC_MessageListeners ml;

	OpMessage msg[3];
	msg[0] = MSG_HC_ST_MESSAGE_1;
	msg[1] = MSG_HC_ST_MESSAGE_2;
	msg[2] = MSG_HC_ST_MESSAGE_3;

	ml.AddListeners(&mo, msg, 3, 1);

	verify(ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 1));
	verify(ml.HasListener(&mo, MSG_HC_ST_MESSAGE_2, 1));
	verify(ml.HasListener(&mo, MSG_HC_ST_MESSAGE_3, 1));

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);
	ml.CallListeners(MSG_HC_ST_MESSAGE_2, 1, 0);
	ml.CallListeners(MSG_HC_ST_MESSAGE_3, 1, 0);

	verify(mo.calls == 3);

	ml.RemoveListeners(&mo, 1);

	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_1, 1));
	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_2, 1));
	verify(!ml.HasListener(&mo, MSG_HC_ST_MESSAGE_3, 1));

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);
	ml.CallListeners(MSG_HC_ST_MESSAGE_2, 1, 0);
	ml.CallListeners(MSG_HC_ST_MESSAGE_3, 1, 0);

	verify(mo.calls == 3);
}

test("Listener that removes itself #1")
{
	OpMessage msg = MSG_HC_ST_MESSAGE_1;
	MH_PARAM_1 id = 1;
	HC_MessageListeners ml;

	STRemovingMessageObject rmo(&ml, &msg, &id);

	ml.AddListeners(&rmo, &msg, 1, 1);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(rmo.calls == 1);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(rmo.calls == 1);
}

test("Listener that removes itself #2")
{
	OpMessage msg = MSG_HC_ST_MESSAGE_1;
	HC_MessageListeners ml;

	STRemovingMessageObject rmo(&ml, &msg, NULL);

	ml.AddListeners(&rmo, &msg, 1, 1);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(rmo.calls == 1);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(rmo.calls == 1);
}

test("Listener that removes itself #3")
{
	OpMessage msg = MSG_HC_ST_MESSAGE_1;
	MH_PARAM_1 id = 1;
	HC_MessageListeners ml;

	STRemovingMessageObject rmo(&ml, NULL, &id);

	ml.AddListeners(&rmo, &msg, 1, 1);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(rmo.calls == 1);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(rmo.calls == 1);
}

test("Listener that removes itself #4")
{
	OpMessage msg = MSG_HC_ST_MESSAGE_1;
	HC_MessageListeners ml;

	STRemovingMessageObject rmo(&ml, NULL, NULL);

	ml.AddListeners(&rmo, &msg, 1, 1);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(rmo.calls == 1);

	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(rmo.calls == 1);
}

test("Listener that destroys the listeners")
{
	OpMessage msg = MSG_HC_ST_MESSAGE_1;
	HC_MessageListeners *ml = new HC_MessageListeners;

	verify(ml);

	STDestructiveMessageObject dmo(ml);

	ml->AddListeners(&dmo, &msg, 1, 1);
	ml->CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(dmo.calls == 1);
}

test("Recursive listener")
{
	OpMessage msg = MSG_HC_ST_MESSAGE_1;
	HC_MessageListeners ml;

	STRecursiveMessageObject rmo(&ml, 5);

	ml.AddListeners(&rmo, &msg, 1, 1);
	ml.CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(rmo.calls == 6);
}
finally
{
	ml.RemoveListeners(&rmo);
}

test("Recursive listener that destroys the listeners")
{
	OpMessage msg = MSG_HC_ST_MESSAGE_1;
	HC_MessageListeners *ml = new HC_MessageListeners;

	verify(ml);

	STRecursivelyDestructiveMessageObject rdmo(ml, 5);

	ml->AddListeners(&rdmo, &msg, 1, 1);
	ml->CallListeners(MSG_HC_ST_MESSAGE_1, 1, 0);

	verify(rdmo.calls == 6);
}
