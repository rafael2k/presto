group "logdoc.search";
require initialization;
require undefined HAS_NO_SEARCHTEXT;
require SEARCH_MATCHES_ALL;

include "modules/logdoc/logdoc.h";
include "modules/doc/searchinfo.h";
include "modules/doc/html_doc.h";

html
{
	"<body>abab</body>"
}

test("Text searching")
{
	LogicalDocument *logdoc = state.doc->GetLogicalDocument();
	SearchData data(TRUE, FALSE, FALSE, TRUE, FALSE);
	data.SetSearchText(UNI_L("aba"));
	
	OpStatus::Ignore(logdoc->FindAllMatches(&data, NULL, 0));
	
	verify(state.doc->GetHtmlDocument()->GetFirstSelectionElm() != NULL);
}

html
{
//! <p>dis&shy;cretion&shy;ary</p>
//! <p>foo</p>
//! <p><br>dis&shy;cretion&shy;<br>ary<br></p>
}

test("Text searching (soft hyphen)")
{
	LogicalDocument *logdoc = state.doc->GetLogicalDocument();
	SearchData data(TRUE, FALSE, FALSE, TRUE, FALSE);
	data.SetSearchText(UNI_L("discretionary"));

	OpStatus::Ignore(logdoc->FindAllMatches(&data, NULL, 0));

	HTML_Document* html_doc = state.doc->GetHtmlDocument();
	SelectionElm* sel_elm = html_doc->GetFirstSelectionElm();
	verify(sel_elm != NULL);
	sel_elm = static_cast<SelectionElm*>(sel_elm->Suc());
	verify(sel_elm == NULL);
}

xml
{
//! <svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'>
//!   <text y="2em">abab</text>
//! </svg>
}

test("Text searching (svg)")
  require SVG_SUPPORT_SEARCH_HIGHLIGHTING;
{
	LogicalDocument *logdoc = state.doc->GetLogicalDocument();
	SearchData data(TRUE, FALSE, FALSE, TRUE, FALSE);
	data.SetSearchText(UNI_L("aba"));
	
	OpStatus::Ignore(logdoc->FindAllMatches(&data, NULL, 0));
	
	verify(state.doc->GetHtmlDocument()->GetFirstSelectionElm() != NULL);
}
