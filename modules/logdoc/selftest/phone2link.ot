/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2005 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Stig Halvorsen
*/

group "logdoc.phone2link";
require initialization;
require defined PHONE2LINK_SUPPORT;

include "modules/logdoc/logdoc.h";
include "modules/logdoc/htm_elm.h";

// -- Tests --------------------------------------------------------------

table findnumber(const uni_char *, const uni_char *)
{
	{ UNI_L("04800"), UNI_L("04800") },
	{ UNI_L("+4722852600"), UNI_L("+4722852600") },
	{ UNI_L("61874955"), UNI_L("61874955") },
	{ UNI_L("S\366ker igenom 1 305 093 600 bilder"), UNI_L("1 305 093 600 ") },
	{ UNI_L("foo bar gazonk"), NULL },
	{ UNI_L("NO-0175 OSLO 1234324523 a 12"), UNI_L("1234324523 ") },
	{ UNI_L(" Telefon: 2340 7320 Foo"), UNI_L("2340 7320 ") },
	{ UNI_L(" Telefon: Foo 0708-343002 a"), UNI_L("0708-343002 ") },
	{ UNI_L(" Telefon: +46 708343002"), UNI_L("+46 708343002") },
	{ UNI_L("Telefon: 2340\240\067\063\062\060\240\240"),
		UNI_L("2340\240\067\063\062\060\240\240") },
	{ UNI_L("Telefaks: 2340\240\067\063\060\061"),
		UNI_L("2340\240\067\063\060\061") },
	{ UNI_L("\x2606\x30aa\x30da\x30e9\x30fb\x30df\x30cb\x2606"),
		NULL },
	{ UNI_L("\x2121\x96fb\x8a71\x756a\x53f7\x3000\x30c6\x30b9\x30c8\x30da\x30fc\x30b8\x2605"),
		NULL },
	{ UNI_L("hyphen: 03-4444-4444"), UNI_L("03-4444-4444") },
	{ UNI_L("full-width hyphen: 03\xff0d\064\064\064\064\xff0d\064\064\064\064"),
		UNI_L("03\xff0d\064\064\064\064\xff0d\064\064\064\064") },
	{ UNI_L("hiragana no: 03\x306e\064\064\064\064\x306e\064\064\064\064"),
		UNI_L("03\x306e\064\064\064\064\x306e\064\064\064\064") },
	{ UNI_L("hiragana no and hyphen: 03\x306e\064\064\064\064-4444"),
		UNI_L("03\x306e\064\064\064\064-4444") },
	{ UNI_L("hiragana no and full-width hyphen: 03\x306e\064\064\064\064\xff0d\064\064\064\064"),
		UNI_L("03\x306e\064\064\064\064\xff0d\064\064\064\064") },
	{ UNI_L("hyphen: \xff10\xff13-\xff14\xff14\xff14\xff14-\xff14\xff14\xff14\xff14"),
		UNI_L("\xff10\xff13-\xff14\xff14\xff14\xff14-\xff14\xff14\xff14\xff14") },
	{ UNI_L("full-width hyphen: \xff10\xff13\xff0d\xff14\xff14\xff14\xff14\xff0d\xff14\xff14\xff14\xff14"),
		UNI_L("\xff10\xff13\xff0d\xff14\xff14\xff14\xff14\xff0d\xff14\xff14\xff14\xff14") },
	{ UNI_L("hiragana no: \xff10\xff13\x306e\xff14\xff14\xff14\xff14\x306e\xff14\xff14\xff14\xff14"),
		UNI_L("\xff10\xff13\x306e\xff14\xff14\xff14\xff14\x306e\xff14\xff14\xff14\xff14") },
	{ UNI_L("hiragana no and hyphen: \xff10\xff13\x306e\xff14\xff14\xff14\xff14-\xff14\xff14\xff14\xff14"),
		UNI_L("\xff10\xff13\x306e\xff14\xff14\xff14\xff14-\xff14\xff14\xff14\xff14") },
	{ UNI_L("hiragana no and full-width hyphen: \xff10\xff13\x306e\xff14\xff14\xff14\xff14\xff0d\xff14\xff14\xff14\xff14"),
		UNI_L("\xff10\xff13\x306e\xff14\xff14\xff14\xff14\xff0d\xff14\xff14\xff14\xff14") },
	{ UNI_L("parentheses: \xff10\xff13\xff08\xff14\xff14\xff14\xff14\xff09\xff14\xff14\xff14\xff14"),
		UNI_L("\xff10\xff13\xff08\xff14\xff14\xff14\xff14\xff09\xff14\xff14\xff14\xff14") }
}

test("Find single phone numbers")
{
	LogicalDocument logdoc(state.doc);

	iterate (input, expected) from findnumber
	{
		HTML_Element *txt_elm = NEW_HTML_Element();
		txt_elm->Construct(logdoc.GetHLDocProfile(), input, uni_strlen(input));

		HTML_Element *stop = static_cast<HTML_Element*>(txt_elm->NextSibling());
		logdoc.ScanForTextLinks(txt_elm, stop, FALSE);

		const uni_char *value = NULL;
		HTML_Element *iter = txt_elm;

		while (iter != stop)
		{
			if (iter->Type() == HE_A)
				value = iter->FirstChild()->Content();

			iter = iter->Next();
		}

		verify_string(value, expected);

		txt_elm->Clean(state.doc);
		txt_elm->Free(state.doc);
	}
}

table findemail(const uni_char *, const uni_char *)
{
	{ UNI_L("0480"), NULL },
	{ UNI_L("sometext"), NULL },
	{ UNI_L("johndoe@server.com"), UNI_L("johndoe@server.com") },
	{ UNI_L("a johndoe@server.com b"), UNI_L("johndoe@server.com") },
	{ UNI_L("not correct: johndoe@@server.com"), NULL },
	{ UNI_L("correct: john12345doe@server.com"), UNI_L("john12345doe@server.com") },
	{ UNI_L("correct: johndoe@server12345.com"), UNI_L("johndoe@server12345.com") },
	{ UNI_L("123 johndoe@server.com"), UNI_L("johndoe@server.com") },
	{ UNI_L("johndoe@server.com 123"), UNI_L("johndoe@server.com") },
}

test("Find single email addresses")
{
	LogicalDocument logdoc(state.doc);

	iterate (input, expected) from findemail
	{
		HTML_Element *txt_elm = NEW_HTML_Element();
		txt_elm->Construct(logdoc.GetHLDocProfile(), input, uni_strlen(input));

		HTML_Element *stop = static_cast<HTML_Element*>(txt_elm->NextSibling());
		logdoc.ScanForTextLinks(txt_elm, stop, FALSE);

		const uni_char *value = NULL;
		HTML_Element *iter = txt_elm;

		while (iter != stop)
		{
			if (iter->Type() == HE_A)
				value = iter->FirstChild()->Content();

			iter = iter->Next();
		}

		verify_string(value, expected);

		txt_elm->Clean(state.doc);
		txt_elm->Free(state.doc);
	}
}

table findmultiplenumbers(const uni_char *, int)
{
	{ UNI_L("04800, +4722852600, 61874955"), 3 }
}

test("Find multiple phone numbers")
{
	LogicalDocument logdoc(state.doc);

	iterate (input, expected) from findmultiplenumbers
	{
		HTML_Element *txt_elm = NEW_HTML_Element();
		txt_elm->Construct(logdoc.GetHLDocProfile(), input, uni_strlen(input));

		HTML_Element *stop = static_cast<HTML_Element*>(txt_elm->NextSibling());
		logdoc.ScanForTextLinks(txt_elm, stop, FALSE);

		int num = 0;
		HTML_Element *iter = txt_elm;

		while (iter != stop)
		{
			if (iter->Type() == HE_A)
				num++;

			iter = iter->Next();
		}

		verify(num == expected);

		txt_elm->Clean(state.doc);
		txt_elm->Free(state.doc);
	}
}

table findmultipleemails(const uni_char *, int)
{
	{ UNI_L("johndoe@server.com and janedoe@server.com"), 2 },
}

test("Find multiple email addresses")
{
	LogicalDocument logdoc(state.doc);

	iterate (input, expected) from findmultipleemails
	{
		HTML_Element *txt_elm = NEW_HTML_Element();
		txt_elm->Construct(logdoc.GetHLDocProfile(), input, uni_strlen(input));

		HTML_Element *stop = static_cast<HTML_Element*>(txt_elm->NextSibling());
		logdoc.ScanForTextLinks(txt_elm, stop, FALSE);

		int num = 0;
		HTML_Element *iter = txt_elm;

		while (iter != stop)
		{
			if (iter->Type() == HE_A)
				num++;

			iter = iter->Next();
		}

		verify(num == expected);

		txt_elm->Clean(state.doc);
		txt_elm->Free(state.doc);
	}
}

table findmixed(const uni_char *, int)
{
	{ UNI_L("johndoe@server.com and 12345 a"), 2 },
}

test("Find mixed phone numbers and email addresses")
{
	LogicalDocument logdoc(state.doc);

	iterate (input, expected) from findmixed
	{
		HTML_Element *txt_elm = NEW_HTML_Element();
		txt_elm->Construct(logdoc.GetHLDocProfile(), input, uni_strlen(input));

		HTML_Element *stop = static_cast<HTML_Element*>(txt_elm->NextSibling());
		logdoc.ScanForTextLinks(txt_elm, stop, FALSE);

		int num = 0;
		HTML_Element *iter = txt_elm;

		while (iter != stop)
		{
			if (iter->Type() == HE_A)
				num++;

			iter = iter->Next();
		}

		verify(num == expected);

		txt_elm->Clean(state.doc);
		txt_elm->Free(state.doc);
	}
}

table whitespace(const uni_char *, const uni_char *)
{
	{ UNI_L("\n04804"), UNI_L("04804") },
	{ UNI_L("\nA04804"), NULL },
	{ UNI_L("\n 04804"), UNI_L("04804") },
	{ UNI_L("A 04804"), UNI_L("04804") },
}

test("Whitespace")
{
	LogicalDocument logdoc(state.doc);

	iterate (input, expected) from whitespace
	{
		HTML_Element *txt_elm = NEW_HTML_Element();
		txt_elm->Construct(logdoc.GetHLDocProfile(), input, uni_strlen(input));

		HTML_Element *stop = static_cast<HTML_Element*>(txt_elm->NextSibling());
		logdoc.ScanForTextLinks(txt_elm, stop, FALSE);

		const uni_char *value = NULL;
		HTML_Element *iter = txt_elm;

		while (iter != stop)
		{
			if (iter->Type() == HE_A)
				value = iter->FirstChild()->Content();

			iter = iter->Next();
		}

		verify_string(value, expected);

		txt_elm->Clean(state.doc);
		txt_elm->Free(state.doc);
	}
}
