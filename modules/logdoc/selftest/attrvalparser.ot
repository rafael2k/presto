/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "logdoc.AttrValParser.HTML";
require init;

include "modules/logdoc/attr_val.h";
include "modules/logdoc/htm_elm.h";
include "modules/logdoc/logdoc_util.h";
include "modules/doc/frm_doc.h";

table AttributesWithValues(char*, int)
{
	{ "no", ATTR_VALUE_no },
	{ "BOth", ATTR_VALUE_both },
	{ "RESET", ATTR_VALUE_reset },
	{ "absmiddle", ATTR_VALUE_absmiddle },
	{ "inherit", ATTR_VALUE_inherit },
	{ "default", ATTR_VALUE_default },
	{ "scroll", ATTR_VALUE_scroll },
	{ "up", ATTR_VALUE_up },
	{ "pUt", ATTR_VALUE_put },
	{ "dumhdjyawejhdskjayehndyhkurnyriunfwftiuwtynwui", 0 },
	//	{ "no\0ds", 0 }, // This will fail
	{ "", 0 },
}

// This test tests that the tables in attr_val.h are consistent.
foreach (value, value_number) from AttributesWithValues
{
	test("Parse attribute value " value)
	{
		uni_char* unicode_value = uni_up_strdup(value);
		int parsed_value_number = ATTR_GetKeyword(unicode_value, op_strlen(value));
		op_free(unicode_value);
		verify(parsed_value_number == value_number);
	}
}

html
{
	//! <body><button type="button" onclick="alert('hej')"
	//!               replace="document">Button text</button></body>
}

test("Parse button attributes")
{
	HTML_Element* button = find_element("button");
	verify(button);
	verify(button->HasAttr(ATTR_TYPE));
	verify(button->HasAttr(ATTR_ONCLICK));
}

html
{
	//! <html><body><form>
	//!  <input name="b" type="submit" enctype="myEncType" method="SWIM"
	//!         action="http://atlantic/ocean" replace="document"
	//!         formenctype="myEncType" formmethod="SWIM"
	//!         formaction="http://atlantic/ocean" >
	//! </form></body></html>
}

test("Parse input attributes")
{
	HTML_Element* input = find_element("input");
	verify(input);
	verify(input->HasAttr(ATTR_TYPE));
	verify(input->HasAttr(ATTR_METHOD)); // Obsolete now though
	verify(input->HasAttr(ATTR_FORMMETHOD));
}


html
{
	//! <html><body id="pass"
	//! color="pass"
	//! loop="pass"
	//! width="pass"
	//! height="pass"
	//! hspace="pass"
	//! vspace="pass"
	//! border="pass"
	//! span="pass"
	//! colspan="pass"
	//! rowspan="pass"
	//! cellpadding="pass"
	//! cellspacing="pass"
	//! charoff="pass"
	//! topmargin="pass"
	//! leftmargin="pass"
	//! marginwidth="pass"
	//! marginheight="pass"
	//! framespacing="pass"
	//! maxlength="pass"
	//! scrollamount="pass"
	//! scrolldelay="pass"
	//! repeat-start="pass"
	//! repeat-max="pass"
	//! repeat-min="pass"
	//! size="pass"
	//! tabindex="pass"
	//! shape="pass"
	//! align="pass"
	//! valign="pass"
	//! clear="pass"
	//! method="pass"
	//! scrolling="pass"
	//! direction="pass"
	//! behavior="pass"
	//! dir="pass"
	//! frame="pass"
	//! rules="pass"
	//! coords="pass"
	//! start="pass"
	//! type="pass"
	//! bgcolor="pass"
	//! text="pass"
	//! link="pass"
	//! vlink="pass"
	//! alink="pass"
	//! media="pass"
	//! foobar="pass"
	//! title="pass"
	//! checked="pass"
	//! selected="pass"
	//! contenteditable="pass"
	//! spellcheck="pass"
	//! ></body></html>
}


table AttributesStoredAsNums(char*)
{
	{ "color" },
	{ "loop" },
	{ "width" },
	{ "height" },
	{ "hspace" },
	{ "vspace" },
	{ "border" },
	{ "span" },
	{ "colspan" },
	{ "rowspan" },
	{ "cellpadding" },
	{ "cellspacing" },
	{ "charoff" },
	{ "topmargin" },
	{ "leftmargin" },
	{ "marginwidth" },
	{ "marginheight" },
	{ "framespacing" },
	{ "maxlength" },
	{ "scrollamount" },
	{ "scrolldelay" },
	{ "repeat-start" },
	{ "repeat-max" },
	{ "repeat-min" },
	{ "size" },
	{ "tabindex" },
	{ "shape" },
	{ "align" },
	{ "valign" },
	{ "clear" },
	{ "method" },
	{ "scrolling" },
	{ "direction" },
	{ "behavior" },
	{ "dir" },
	{ "frame" },
	{ "rules" },
	{ "coords" },
	{ "start" },
	{ "type" },
	{ "bgcolor" },
	{ "text" },
	{ "link" },
	{ "vlink" },
	{ "alink" },
	{ "media" },
	{ "foobar" },
	{ "title" },
	{ "checked" },
	{ "selected" },
	{ "contenteditable" },
	{ "spellcheck" }
}

foreach (attr_name) from AttributesStoredAsNums
{
	test("Check preservation of attribute value for " attr_name)
	{
#ifndef SUPPORT_TEXT_DIRECTION
		if (op_strcmp(attr_name, "dir") != 0)
#endif // SUPPORT_TEXT_DIRECTION
		{
			OpString uni_attr_name;
			{
				uni_char* unicode_attr_name = uni_up_strdup(attr_name);
				OP_STATUS status = uni_attr_name.Set(unicode_attr_name);
				op_free(unicode_attr_name);
				verify(OpStatus::IsSuccess(status));
			}
			HTML_Element* body = find_element("body");
			verify(body);

			TempBuffer buffer;
			const uni_char* str = body->GetAttrValue(uni_attr_name.CStr(), NS_IDX_DEFAULT, HE_UNKNOWN, &buffer);
			verify(str);
			verify(uni_str_eq(str, "pass"));

	// 		int attr_number = htmLex->GetAttrType(uni_attr_name.CStr(), uni_attr_name.Length(), NS_HTML, FALSE);
	// 		verify (attr_number > 0);
	// 		verify (attr_number != ATTR_XML);

	// 		str = body->GetStringAttr(attr_number);
	// 		verify(str);
	// 		verify(uni_str_eq(str, "pass"));
		}
#ifndef SUPPORT_TEXT_DIRECTION
		else
		{
			verify(1 == 1);
		}
#endif // SUPPORT_TEXT_DIRECTION
	}
}

html
{
	//! <html><body id=""
	//! color=""
	//! loop=""
	//! width=""
	//! height=""
	//! hspace=""
	//! vspace=""
	//! border=""
	//! span=""
	//! colspan=""
	//! rowspan=""
	//! cellpadding=""
	//! cellspacing=""
	//! charoff=""
	//! topmargin=""
	//! leftmargin=""
	//! marginwidth=""
	//! marginheight=""
	//! framespacing=""
	//! maxlength=""
	//! scrollamount=""
	//! scrolldelay=""
	//! repeat-start=""
	//! repeat-max=""
	//! repeat-min=""
	//! size=""
	//! tabindex=""
	//! shape=""
	//! align=""
	//! valign=""
	//! clear=""
	//! method=""
	//! scrolling=""
	//! direction=""
	//! behavior=""
	//! dir=""
	//! frame=""
	//! rules=""
	//! coords=""
	//! start=""
	//! type=""
	//! bgcolor=""
	//! text=""
	//! link=""
	//! vlink=""
	//! alink=""
	//! media=""
	//! foobar=""
	//! title=""
	//! checked
	//! selected
	//! contenteditable=""
	//! spellcheck=""
	//! ></body></html>
}

foreach (attr_name) from AttributesStoredAsNums
{
	test("Check empty string storage for " attr_name)
	{
#ifndef SUPPORT_TEXT_DIRECTION
		if (op_strcmp(attr_name, "dir") != 0)
#endif // SUPPORT_TEXT_DIRECTION
		{
			OpString uni_attr_name;
			{
				uni_char* unicode_attr_name = uni_up_strdup(attr_name);
				OP_STATUS status = uni_attr_name.Set(unicode_attr_name);
				op_free(unicode_attr_name);
				verify(OpStatus::IsSuccess(status));
			}
			HTML_Element* body = find_element("body");
			verify(body);

			TempBuffer buffer;
			const uni_char* str = body->GetAttrValue(uni_attr_name.CStr(), NS_IDX_DEFAULT, HE_UNKNOWN, &buffer);
			verify(str);
			verify(uni_str_eq(str, ""));

	// 		int attr_number = htmLex->GetAttrType(uni_attr_name.CStr(), uni_attr_name.Length(), NS_HTML, FALSE);
	// 		verify (attr_number > 0);
	// 		verify (attr_number != ATTR_XML);

	// 		str = body->GetStringAttr(attr_number);
	// 		verify(str);
	// 		verify(uni_str_eq(str, ""));
		}
#ifndef SUPPORT_TEXT_DIRECTION
		else
		{
			verify(1 == 1);
		}
#endif // SUPPORT_TEXT_DIRECTION
	}
}


html
{
	//! <html><body id="&#49;"
	//! color="&#49;"
	//! loop="&#49;"
	//! width="&#49;"
	//! height="&#49;"
	//! hspace="&#49;"
	//! vspace="&#49;"
	//! border="&#49;"
	//! span="&#49;"
	//! colspan="&#49;"
	//! rowspan="&#49;"
	//! cellpadding="&#49;"
	//! cellspacing="&#49;"
	//! charoff="&#49;"
	//! topmargin="&#49;"
	//! leftmargin="&#49;"
	//! marginwidth="&#49;"
	//! marginheight="&#49;"
	//! framespacing="&#49;"
	//! maxlength="&#49;"
	//! scrollamount="&#49;"
	//! scrolldelay="&#49;"
	//! repeat-start="&#49;"
	//! repeat-max="&#49;"
	//! repeat-min="&#49;"
	//! size="&#49;"
	//! tabindex="&#49;"
	//! shape="&#49;"
	//! align="&#49;"
	//! valign="&#49;"
	//! clear="&#49;"
	//! method="&#49;"
	//! scrolling="&#49;"
	//! direction="&#49;"
	//! behavior="&#49;"
	//! dir="&#49;"
	//! frame="&#49;"
	//! rules="&#49;"
	//! coords="&#49;"
	//! start="&#49;"
	//! type="&#49;"
	//! bgcolor="&#49;"
	//! text="&#49;"
	//! link="&#49;"
	//! vlink="&#49;"
	//! alink="&#49;"
	//! media="&#49;"
	//! foobar="&#49;"
	//! title="&#49;"
	//! checked="&#49;"
	//! selected="&#49;"
	//! contenteditable="&#49;"
	//! spellcheck="&#49;"
	//! ></body></html>
}

foreach (attr_name) from AttributesStoredAsNums
{
	test("Check entity resolving in attribiute for " attr_name)
	{
#ifndef SUPPORT_TEXT_DIRECTION
		if (op_strcmp(attr_name, "dir") != 0)
#endif // SUPPORT_TEXT_DIRECTION
		{
			OpString uni_attr_name;
			{
				uni_char* unicode_attr_name = uni_up_strdup(attr_name);
				OP_STATUS status = uni_attr_name.Set(unicode_attr_name);
				op_free(unicode_attr_name);
				verify(OpStatus::IsSuccess(status));
			}
			HTML_Element* body = find_element("body");
			verify(body);

			TempBuffer buffer;
			const uni_char* str = body->GetAttrValue(uni_attr_name.CStr(), NS_IDX_DEFAULT, HE_UNKNOWN, &buffer);
			verify(str);
			verify(uni_str_eq(str, "1"));

	// 		int attr_number = htmLex->GetAttrType(uni_attr_name.CStr(), uni_attr_name.Length(), NS_HTML, FALSE);
	// 		verify (attr_number > 0);
	// 		verify (attr_number != ATTR_XML);

	// 		str = body->GetStringAttr(attr_number);
	// 		verify(str);
	// 		verify(uni_str_eq(str, ""));
		}
#ifndef SUPPORT_TEXT_DIRECTION
		else
		{
			verify(1 == 1);
		}
#endif // SUPPORT_TEXT_DIRECTION
	}
}


html
{
	//! <html><body><ol start="x"><li>A</ol></body></html>
}

test("ol.start")
{
	HTML_Element* ol = find_element("ol");
	verify(ol);
	const uni_char* attr_string = ol->GetStringAttr(ATTR_START);
	verify_string(attr_string, "x");

	verify(!ol->HasNumAttr(ATTR_START));
}

test("ol.start cont")
{
	verify_success(state.doc->ConstructDOMEnvironment());
	DOM_Environment* env = state.doc->GetDOMEnvironment();
	verify(env);
	HTML_Element* ol = find_element("ol");
	verify(ol);
	BOOL absent;
	double start = ol->DOMGetNumericAttribute(env, ATTR_START, NULL, NS_IDX_DEFAULT, absent);
	verify(start == 1.0);
}

html
{
	//! <html><body>
	//! <p>object:
	//! <object foo="&amp;&amp;amp;" data="about:blank" width="300">
	//! <param name="flashvars1" value="result=&amp;">
	//! <param name="flashvars2" value="result=&amp;amp;">
	//! </object>
}

test("plugin attribute decoding - object")
{
	HTML_Element* object = find_element("object");
	verify(object);
	uni_char** names;
	uni_char** values;
	int argc = object->GetEMBED_PrivateAttrs(names, values);
	verify(argc == 3);
	verify(names[0]);
	verify(uni_str_eq(names[0], "foo"));
	verify(values[0]);
	verify(uni_str_eq(values[0], "&&amp;"));

	// Should check the params as well
}

html
{
	//! <html><body>
	//! <p>embed:
	//! <embed src="about:blank" flashVars='&amp;&amp;amp;' width="300">
	//! </p>
}

test("plugin attribute decoding - embed")
{
	HTML_Element* embed = find_element("embed");
	verify(embed);
	uni_char** names;
	uni_char** values;
	int argc = embed->GetEMBED_PrivateAttrs(names, values);
	verify(argc == 3); // src, flashVars and width
	verify(names[1]);
	verify(uni_str_eq(names[1], "flashvars"));
	verify(values[1]);
	verify(uni_str_eq(values[1], "&&amp;"));
}

group "logdoc.AttrValParser.WF";
require init;

include "modules/logdoc/attr_val.h";
include "modules/logdoc/logdoc_util.h";

table AttributesWithValuesWF2(char*, int)
{
	{ "url", ATTR_VALUE_url },
	{ "date", ATTR_VALUE_date },
	{ "week", ATTR_VALUE_week },
	{ "time", ATTR_VALUE_time },
	{ "email", ATTR_VALUE_email },
	{ "range", ATTR_VALUE_range },
	{ "month", ATTR_VALUE_month },
	{ "number", ATTR_VALUE_number },
	{ "datETime", ATTR_VALUE_datetime },
	{ "datetime-local", ATTR_VALUE_datetime_local },
	{ "color", ATTR_VALUE_color },
	{ "search", ATTR_VALUE_search },
	{ "tel", ATTR_VALUE_tel },
}

// This test tests that the tables in attr_val.h are consistent.
foreach (value, value_number) from AttributesWithValuesWF2
{
	test("Parse webforms2 attribute value " value)
	{
		uni_char* unicode_value = uni_up_strdup(value);
		int parsed_value_number = ATTR_GetKeyword(unicode_value, op_strlen(value));
		op_free(unicode_value);
		verify(parsed_value_number == value_number);
	}
}

html
{
	//! <body><button type="button" onclick="alert('hej')"
	//!               replace="document">Button text</button></body>
}

test("Parse webforms2 button attributes")
{
	HTML_Element* button = find_element("button");
	verify(button);
	verify(button->HasAttr(ATTR_TYPE));
	verify(button->HasAttr(ATTR_ONCLICK));

	const uni_char* str_value;
	str_value = button->GetAttrValue(UNI_L("replace"));
	verify(str_value);
	verify(uni_str_eq(str_value, "document"));
}

html
{
	//! <html><body><form>
	//!  <input name="b" type="submit" enctype="myEncType" method="SWIM"
	//!         action="http://atlantic/ocean" replace="document"
	//!         formenctype="myEncType" formmethod="SWIM"
	//!         formaction="http://atlantic/ocean" >
	//! </form></body></html>
}

test("Parse webforms2 input attributes")
{
	HTML_Element* input = find_element("input");
	verify(input);
	verify(input->HasAttr(ATTR_TYPE));
	verify(input->HasAttr(ATTR_METHOD)); // Obsolete
	verify(input->HasAttr(ATTR_ACTION)); // Obsolete
	verify(input->HasAttr(ATTR_ENCTYPE)); // Obsolete
	verify(input->HasAttr(ATTR_FORMMETHOD));
	verify(input->HasAttr(ATTR_FORMACTION));
	verify(input->HasAttr(ATTR_FORMENCTYPE));

	const uni_char* str_value;

	str_value = input->GetAttrValue(UNI_L("replace"));
	verify(str_value);
	verify(uni_str_eq(str_value, "document"));
}

html
{
	//! <area shape="rect" coords="4%,  1.4,100 60%" href="">
}

test("coords attribute of area")
{
	HTML_Element* area = find_element("area");
	verify(area);
	CoordsAttr* coords = static_cast<CoordsAttr*>(area->GetAttr(ATTR_COORDS, ITEM_TYPE_COORDS_ATTR, (void*)0));
	verify(coords);
	verify(coords->GetLength() == 4);
	int* numbers = coords->GetCoords();
	verify(numbers);
	verify(numbers[0] == 4);
	verify(numbers[1] == 1);
	verify(numbers[2] == 100);
	verify(numbers[3] == 60);
}

html
{
	"<body><section hidden>"
}

test("Attribute hidden")
{
	HTML_Element* elm = find_element("section");
	verify(elm);
	verify(elm->HasNumAttr(ATTR_HIDDEN));
}
