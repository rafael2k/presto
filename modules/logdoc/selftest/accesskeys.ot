group "logdoc.accesskeys";
require initialization;
require ACCESS_KEYS_SUPPORT;

language C++;

include "modules/doc/frm_doc.h";
include "modules/logdoc/htm_elm.h";
include "modules/logdoc/htm_ldoc.h";

// tests fetched from http://testers.flnet.org/iodt/CSS/

html
{
	//! <head>
	//! <style>
	//! a#a1 {-wap-accesskey: 1;}
	//! a#a2 {-wap-accesskey: 2;}
	//! a#a3 {-wap-accesskey: 3;}
	//! a#a4 {-wap-accesskey: 4;}
	//! a#a5 {-wap-accesskey: 5;}
	//! a#a6 {-wap-accesskey: 6;}
	//! a#a7 {-wap-accesskey: 7;}
	//! a#a8 {-wap-accesskey: 8;}
	//! a#a9 {-wap-accesskey: 9;}
	//! a#a0 {-wap-accesskey: 0;}
	//! </style>
	//! </head>
	//! <body>
	//! <ul>
	//! <li><a id="a1" href="link1.html">link1</a></li>
	//! <li><a id="a2" href="link2.html">link2</a></li>
	//! <li><a id="a3" href="link3.html">link3</a></li>
	//! <li><a id="a4" href="link4.html">link4</a></li>
	//! <li><a id="a5" href="link5.html">link5</a></li>
	//! <li><a id="a6" href="link6.html">link6</a></li>
	//! <li><a id="a7" href="link7.html">link7</a></li>
	//! <li><a id="a8" href="link8.html">link8</a></li>
	//! <li><a id="a9" href="link9.html">link9</a></li>
	//! <li><a id="a0" href="">link10</a>
	//! </ul>
	//! </body>
}

table ak0(OpKey::Code, const uni_char*)
{
	{ OP_KEY_1, UNI_L("a1") },
	{ OP_KEY_2, UNI_L("a2") },
	{ OP_KEY_3, UNI_L("a3") },
	{ OP_KEY_4, UNI_L("a4") },
	{ OP_KEY_5, UNI_L("a5") },
	{ OP_KEY_6, UNI_L("a6") },
	{ OP_KEY_7, UNI_L("a7") },
	{ OP_KEY_8, UNI_L("a8") },
	{ OP_KEY_9, UNI_L("a9") },
	{ OP_KEY_0, UNI_L("a0") }
}

test("numeric values")
{
	HLDocProfile *hld_profile = state.doc->GetHLDocProfile();

	if (hld_profile)
	{
		iterate (key, id) from ak0
		{
			HLDocProfile::AccessKey *ak = hld_profile->GetAccessKey(key);
			verify(ak != NULL);
			if (ak->GetElement())
			{
				const uni_char* element_id = ak->GetElement()->GetId();
				verify(element_id);
				verify(uni_strcmp(id, element_id) == 0);
			}
		}
	}
}

html
{
	//! <head>
	//! <style>
	//! a#a1 {-wap-accesskey: 10;}
	//! a#a2 {-wap-accesskey: 200}
	//! a#a3 {-wap-accesskey: 3000;}
	//! a#a4 {-wap-accesskey: cmd;}
	//! a#a5 {-wap-accesskey: ctrl;}
	//! a#a6 {-wap-accesskey: win;}
	//! a#a7 {-wap-accesskey: f1;}
	//! a#a8 {-wap-accesskey: up;}
	//! a#a9 {-wap-accesskey: mail;}
	//! </style>
	//! </head>
	//! <body>
	//! <ul>
	//! <li><a id="a1" href="link1.html">link1</a></li>
	//! <li><a id="a2" href="link2.html">link2</a></li>
	//! <li><a id="a3" href="link3.html">link3</a></li>
	//! <li><a id="a4" href="link4.html">link4</a></li>
	//! <li><a id="a5" href="link5.html">link5</a></li>
	//! <li><a id="a6" href="link6.html">link6</a></li>
	//! <li><a id="a7" href="link7.html">link7</a></li>
	//! <li><a id="a8" href="link8.html">link8</a></li>
	//! <li><a id="a9" href="link9.html">link9</a></li>
	//! </ul>
	//! </body>
}

subtest checkKey(uni_char key_code, const uni_char *id)
{
	HLDocProfile *hld_profile = state.doc->GetHLDocProfile();

	if (hld_profile)
	{
		HLDocProfile::AccessKey *ak = static_cast<HLDocProfile::AccessKey*>(hld_profile->m_access_keys.First());
		const uni_char* element_id = ak && ak->GetElement() ? ak->GetElement()->GetId() : NULL;
		verify(!ak || element_id);
		while (ak && uni_strcmp(element_id, id) != 0)
		{
			ak = static_cast<HLDocProfile::AccessKey*>(ak->Suc());
			element_id = ak && ak->GetElement() ? ak->GetElement()->GetId() : NULL;
			verify(!ak || element_id);
		}

		if (ak)
		{
			verify(ak->key == key_code);
		}
		else
		{
			verify(key_code == 0);
		}
	}
}

test("multi character values (a1)") { verify(checkKey(0, UNI_L("a1"))); }
test("multi character values (a2)") { verify(checkKey(0, UNI_L("a2"))); }
test("multi character values (a3)") { verify(checkKey(0, UNI_L("a3"))); }
test("multi character values (a4)") { verify(checkKey(0, UNI_L("a4"))); }
test("multi character values (a5)") require OP_KEY_CTRL_ENABLED; require ACCESSKEYS_RECOGNIZES_MULTICHAR; { verify(checkKey(OP_KEY_CTRL, UNI_L("a5"))); }
test("multi character values (a6)") { verify(checkKey(0, UNI_L("a6"))); }
test("multi character values (a7)") require OP_KEY_F1_ENABLED; require ACCESSKEYS_RECOGNIZES_MULTICHAR; { verify(checkKey(OP_KEY_F1, UNI_L("a7"))); }
test("multi character values (a8)") require OP_KEY_UP_ENABLED; require ACCESSKEYS_RECOGNIZES_MULTICHAR; { verify(checkKey(OP_KEY_UP, UNI_L("a8"))); }
test("multi character values (a9)") { verify(checkKey(0, UNI_L("a9"))); }

html
{
	//! <head>
	//! <style>
	//! a#a1 {-wap-accesskey: 1;}
	//! a#a2 {-wap-accesskey: 1, 3;}
	//! a#a3 {-wap-accesskey: 1, 3, 5;}
	//! a#a4 {-wap-accesskey: 1, 3, 5, 7;}
	//! a#a5 {-wap-accesskey: 1, 3, 5, 7, 9;}
	//! </style>
	//! </head>
	//! <body>
	//! <ul>
	//! <li><a id="a1" href="link1.html">link1</a></li>
	//! <li><a id="a2" href="link2.html">link2</a></li>
	//! <li><a id="a3" href="link3.html">link3</a></li>
	//! <li><a id="a4" href="link4.html">link4</a></li>
	//! <li><a id="a5" href="link5.html">link5</a></li>
	//! </ul>
	//! </body>
}

table ak2(OpKey::Code, const uni_char*)
{
	{ OP_KEY_1, UNI_L("a1") },
	{ OP_KEY_3, UNI_L("a2") },
	{ OP_KEY_5, UNI_L("a3") },
	{ OP_KEY_7, UNI_L("a4") },
	{ OP_KEY_9, UNI_L("a5") },
}

test("multiple, numeric values")
{
	HLDocProfile *hld_profile = state.doc->GetHLDocProfile();

	if (hld_profile)
	{
		iterate (key, id) from ak2
		{
			HLDocProfile::AccessKey *ak = hld_profile->GetAccessKey(key);
			verify(ak != NULL);
			if (ak->GetElement())
			{
				const uni_char* element_id = ak->GetElement()->GetId();
				verify(element_id);
				verify(uni_str_eq(id, element_id));
			}
		}
	}
}

html
{
	//! <head>
	//! <style>
	//! a#a1 {-wap-accesskey: 1 3;}
	//! a#a2 {-wap-accesskey: 5 7;}
	//! a#a3 {-wap-accesskey: 2 4;}
	//! a#a4 {-wap-accesskey: 6 8;}
	//! a#a5 {-wap-accesskey: 9 0;}
	//! </style>
	//! </head>
	//! <body>
	//! <ul>
	//! <li><a id="a1" href="link1.html">link1</a></li>
	//! <li><a id="a2" href="link2.html">link2</a></li>
	//! <li><a id="a3" href="link3.html">link3</a></li>
	//! <li><a id="a4" href="link4.html">link4</a></li>
	//! <li><a id="a5" href="link5.html">link5</a></li>
	//! </ul>
	//! </body>
}

table ak3(OpKey::Code, const uni_char*)
{
	{ OP_KEY_1, UNI_L("a1") },
	{ OP_KEY_3, UNI_L("a1") },
	{ OP_KEY_5, UNI_L("a2") },
	{ OP_KEY_7, UNI_L("a2") },
	{ OP_KEY_2, UNI_L("a3") },
	{ OP_KEY_4, UNI_L("a3") },
	{ OP_KEY_6, UNI_L("a4") },
	{ OP_KEY_8, UNI_L("a4") },
	{ OP_KEY_9, UNI_L("a5") },
	{ OP_KEY_0, UNI_L("a5") },
}

test("multiple, numeric values for each element")
{
	HLDocProfile *hld_profile = state.doc->GetHLDocProfile();

	if (hld_profile)
	{
		iterate (key, id) from ak3
		{
			HLDocProfile::AccessKey *ak = hld_profile->GetAccessKey(key);
			verify(ak != NULL);
			if (ak && ak->GetElement())
			{
				verify(uni_strcmp(id, ak->GetElement()->GetId()) == 0);
			}
		}
	}
}

html
{
	//! <head>
	//! <style>
	//! a#a1 {-wap-accesskey: 1 2;}
	//! a#a2 {-wap-accesskey: 2 3, 3 4;}
	//! a#a3 {-wap-accesskey: 4 5, 5 6;}
	//! a#a4 {-wap-accesskey: 6 7, 7 8;}
	//! a#a5 {-wap-accesskey: 8 9, 9 0;}
	//! </style>
	//! </head>
	//! <body>
	//! <ul>
	//! <li><a id="a1" href="link1.html">link1</a></li>
	//! <li><a id="a2" href="link2.html">link2</a></li>
	//! <li><a id="a3" href="link3.html">link3</a></li>
	//! <li><a id="a4" href="link4.html">link4</a></li>
	//! <li><a id="a5" href="link5.html">link5</a></li>
	//! </ul>
	//! </body>
}

table ak4(OpKey::Code, const uni_char*)
{
	{ OP_KEY_1, UNI_L("a1") },
	{ OP_KEY_2, UNI_L("a1") },
	{ OP_KEY_3, UNI_L("a2") },
	{ OP_KEY_4, UNI_L("a3") },
	{ OP_KEY_5, UNI_L("a3") },
	{ OP_KEY_6, UNI_L("a4") },
	{ OP_KEY_7, UNI_L("a4") },
	{ OP_KEY_8, UNI_L("a5") },
	{ OP_KEY_9, UNI_L("a5") },
}

test("multiple, overlapping, numeric values for each element")
{
	HLDocProfile *hld_profile = state.doc->GetHLDocProfile();

	if (hld_profile)
	{
		iterate (key, id) from ak4
		{
			HLDocProfile::AccessKey *ak = hld_profile->GetAccessKey(key);
			verify(ak != NULL);
			if (ak && ak->GetElement())
			{
				verify(uni_strcmp(id, ak->GetElement()->GetId()) == 0);
			}
		}
	}
}

html
{
	//! <head>
	//! <style>
	//! a#a1 {-wap-accesskey: home, 1;}
	//! a#a2 {-wap-accesskey: bs 2, 2;}
	//! a#a3 {-wap-accesskey: 3 prtsc, memo, 3;}
	//! </style>
	//! </head>
	//! <body>
	//! <ul>
	//! <li><a id="a1" href="link1.html">link1</a></li>
	//! <li><a id="a2" href="link2.html">link2</a></li>
	//! <li><a id="a3" href="link3.html">link3</a></li>
	//! </ul>
	//! </body>
}

// If you have problems with failing tests check if this table
// contains OP_KEYs that your platform doesn't support and
// change it locallly
table ak5(OpKey::Code, const uni_char*)
{
	{ OP_KEY_HOME, UNI_L("a1") },
	{ OP_KEY_BACKSPACE, UNI_L("a2") },
	{ OP_KEY_2, UNI_L("a2") },
	{ OP_KEY_3, UNI_L("a3") },
}

test("multiple, multi character and numeric values for each element")
require OP_KEY_HOME_ENABLED;
require OP_KEY_BACKSPACE_ENABLED;
require ACCESSKEYS_RECOGNIZES_MULTICHAR;
{
	HLDocProfile *hld_profile = state.doc->GetHLDocProfile();

	if (hld_profile)
	{
		iterate (key, id) from ak5
		{
			HLDocProfile::AccessKey *ak = hld_profile->GetAccessKey(key);
			verify(ak != NULL);
			if (ak && ak->GetElement())
			{
				verify(uni_strcmp(id, ak->GetElement()->GetId()) == 0);
			}
		}
	}
}
