/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "logdoc.LogdocXMLTreeAccessor";
require init;
require LOGDOCXMLTREEACCESSOR_SUPPORT;

include "modules/logdoc/logdoc.h";
include "modules/logdoc/htm_ldoc.h";
include "modules/doc/frm_doc.h";
include "modules/xmlutils/xmltreeaccessor.h";

xml
{
	"<?xml version='1.1' encoding='UTF-8' standalone='no'?>"
	"<!DOCTYPE root PUBLIC 'foo' 'bar' [ <!ATTLIST element attr3 CDATA 'value3'> ]>"
	"<root>"
		"<!--comment-->"
		"<?target data data data?>"
		"<![CDATA[cdata section]]>"
		"plain text"
		"<element attr1='value1' attr2='value2' xml:id='element'/>"
	"</root>"
}

test("basic")
{
	XMLTreeAccessor *tree = 0;
	XMLTreeAccessor::Node *root;
	URL url = g_url_api->GetURL("http://www.opera.com/");
	TempBuffer buffer;
	XMLCompleteName name;
	const uni_char *value;
	BOOL id, specified;

	verify(OpStatus::IsSuccess(state.doc->GetLogicalDocument()->CreateXMLTreeAccessor(tree, root, NULL, &url, state.doc->GetLogicalDocument()->GetXMLDocumentInfo())));

	verify(tree);
	verify(root);
	verify(tree->GetRoot() == root);
	verify(tree->GetNodeType(root) == XMLTreeAccessor::TYPE_ROOT);

	XMLTreeAccessor::Node *doctype = tree->GetFirstChild(root);
	verify(doctype);
	verify(tree->GetNodeType(doctype) == XMLTreeAccessor::TYPE_DOCTYPE);

	XMLTreeAccessor::Node *rootelement = tree->GetNextSibling(doctype);
	verify(rootelement);
	verify(tree->GetNodeType(rootelement) == XMLTreeAccessor::TYPE_ELEMENT);
	verify(tree->GetName(rootelement) == XMLExpandedName(UNI_L("root")));

	XMLTreeAccessor::Node *comment = tree->GetFirstChild(rootelement);
	verify(comment);
	verify(tree->GetNodeType(comment) == XMLTreeAccessor::TYPE_COMMENT);

	XMLTreeAccessor::Node *pi = tree->GetNextSibling(comment);
	verify(pi);
	verify(tree->GetNodeType(pi) == XMLTreeAccessor::TYPE_PROCESSING_INSTRUCTION);
	verify(tree->GetPITarget(pi));
	verify(uni_str_eq(tree->GetPITarget(pi), "target"));
	verify(OpStatus::IsSuccess(tree->GetData(value, pi, &buffer)));
	verify(value);
	verify(uni_str_eq(value, "data data data"));

	XMLTreeAccessor::Node *cdata = tree->GetNextSibling(pi);
	verify(cdata);
	verify(tree->GetNodeType(cdata) == XMLTreeAccessor::TYPE_CDATA_SECTION);
	verify(OpStatus::IsSuccess(tree->GetData(value, cdata, &buffer)));
	verify(value);
	verify(uni_str_eq(value, "cdata section"));

	XMLTreeAccessor::Node *text = tree->GetNextSibling(cdata);
	verify(text);
	verify(tree->GetNodeType(text) == XMLTreeAccessor::TYPE_TEXT);
	verify(OpStatus::IsSuccess(tree->GetData(value, text, &buffer)));
	verify(value);
	verify(uni_str_eq(value, "plain text"));

	XMLTreeAccessor::Node *element = tree->GetNextSibling(text);
	verify(element);
	verify(tree->GetNodeType(element) == XMLTreeAccessor::TYPE_ELEMENT);
	verify(tree->GetName(element) == XMLExpandedName(UNI_L("element")));

	XMLTreeAccessor::Attributes *attributes = tree->GetAttributes(element, FALSE, FALSE);
	verify(attributes);
	verify(attributes->GetCount() == 4);

	verify(OpStatus::IsSuccess(attributes->GetAttribute(2, name, value, id, specified, &buffer)));
	verify(name == XMLCompleteName(UNI_L("http://www.w3.org/XML/1998/namespace"), UNI_L("xml"), UNI_L("id")));
	verify(value);
	verify(uni_str_eq(value, "element"));
	verify(id);
	verify(specified);

	verify(OpStatus::IsSuccess(attributes->GetAttribute(0, name, value, id, specified, &buffer)));
	verify(name == XMLCompleteName(NULL, NULL, UNI_L("attr1")));
	verify(value);
	verify(uni_str_eq(value, "value1"));
	verify(!id);
	verify(specified);

	verify(OpStatus::IsSuccess(attributes->GetAttribute(3, name, value, id, specified, &buffer)));
	verify(name == XMLCompleteName(NULL, NULL, UNI_L("attr3")));
	verify(value);
	verify(uni_str_eq(value, "value3"));
	verify(!id);
	verify(!specified);

	verify(OpStatus::IsSuccess(attributes->GetAttribute(1, name, value, id, specified, &buffer)));
	verify(name == XMLCompleteName(NULL, NULL, UNI_L("attr2")));
	verify(value);
	verify(uni_str_eq(value, "value2"));
	verify(!id);
	verify(specified);
}
finally
{
	LogicalDocument::FreeXMLTreeAccessor(tree);
}


html
{
	"<html><head><title></title></head><body>"
	"<root>"
		"<!--comment-->"
		"plain text"
		"<element attr1='value1' attr2='value2' xml:id='element'/>"
	"</root>"
	"</body></html>"
}

test("htmlness")
{
	XMLTreeAccessor *tree = 0;
	XMLTreeAccessor::Node *root;
	URL url = g_url_api->GetURL("http://www.opera.com/");
	const uni_char *ns = UNI_L("http://www.w3.org/1999/xhtml");
	TempBuffer buffer;
	XMLCompleteName name;
	const uni_char *value;
	BOOL id, specified;

	verify(OpStatus::IsSuccess(state.doc->GetLogicalDocument()->CreateXMLTreeAccessor(tree, root, NULL, &url, state.doc->GetLogicalDocument()->GetXMLDocumentInfo())));

	verify(tree);
	verify(root);
	verify(tree->GetRoot() == root);
	verify(tree->GetNodeType(root) == XMLTreeAccessor::TYPE_ROOT);

	XMLTreeAccessor::Node *htmlelement = tree->GetFirstChild(root);
	verify(htmlelement);
	verify(tree->GetNodeType(htmlelement) == XMLTreeAccessor::TYPE_ELEMENT);
	verify(tree->GetName(htmlelement) == XMLExpandedName(ns, UNI_L("html")));

	XMLTreeAccessor::Node *headelement = tree->GetFirstChild(htmlelement);
	verify(headelement);
	verify(tree->GetNodeType(headelement) == XMLTreeAccessor::TYPE_ELEMENT);
	verify(tree->GetName(headelement) == XMLExpandedName(ns, UNI_L("head")));

	XMLTreeAccessor::Node *bodyelement = tree->GetNextSibling(headelement);
	verify(bodyelement);
	verify(tree->GetNodeType(bodyelement) == XMLTreeAccessor::TYPE_ELEMENT);
	verify(tree->GetName(bodyelement) == XMLExpandedName(ns, UNI_L("body")));

	XMLTreeAccessor::Node *rootelement = tree->GetFirstChild(bodyelement);
	verify(rootelement);
	verify(tree->GetNodeType(rootelement) == XMLTreeAccessor::TYPE_ELEMENT);
	verify(tree->GetName(rootelement) == XMLExpandedName(ns, UNI_L("root")));

	XMLTreeAccessor::Node *comment = tree->GetFirstChild(rootelement);
	verify(comment);
	verify(tree->GetNodeType(comment) == XMLTreeAccessor::TYPE_COMMENT);

	XMLTreeAccessor::Node *text = tree->GetNextSibling(comment);
	verify(text);
	verify(tree->GetNodeType(text) == XMLTreeAccessor::TYPE_TEXT);
	verify(OpStatus::IsSuccess(tree->GetData(value, text, &buffer)));
	verify(value);
	verify(uni_str_eq(value, "plain text"));

	XMLTreeAccessor::Node *element = tree->GetNextSibling(text);
	verify(element);
	verify(tree->GetNodeType(element) == XMLTreeAccessor::TYPE_ELEMENT);
	verify(tree->GetName(element) == XMLExpandedName(ns, UNI_L("element")));

	verify(tree->HasAttribute(element, XMLExpandedName(UNI_L("attr1")), NULL));
	verify(tree->HasAttribute(element, XMLExpandedName(UNI_L("aTTr1")), NULL));

	verify(OpStatus::IsSuccess(tree->GetAttribute(element, XMLExpandedName(UNI_L("atTR2")), value, id, specified, &buffer)));
	verify(value);
	verify(uni_str_eq(value, "value2"));
	verify(!id);
	verify(specified);
}
finally
{
	LogicalDocument::FreeXMLTreeAccessor(tree);
}

