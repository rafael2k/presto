/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "logdoc.TagAttrParser.HTML";
require init;

include "modules/logdoc/htm_lex.h";
include "modules/logdoc/html_att.h";

table TagsWithValues(const uni_char*, HTML_ElementType)
{
	{ "A", HE_A },
	{ "P", HE_P },
	{ "Q", HE_Q },
	{ "rt", Markup::HTE_RT },
	{ "rp", Markup::HTE_RP },
	{ "LI", HE_LI },
	{ "BQ", HE_BQ },
	{ "bQ", HE_BQ },
	{ "bq", HE_BQ },
	{ "IMG", HE_IMG },
	{ "nav", HE_NAV },
	{ "time", Markup::HTE_TIME },
	{ "ruby", Markup::HTE_RUBY },
	{ "mark", HE_MARK },
	{ "aside", HE_ASIDE },
	{ "hgrOup", HE_HGROUP },
	{ "Header", HE_HEADER },
	{ "FOOTer", HE_FOOTER },
	{ "fiGure", HE_FIGURE },
	{ "legend", HE_LEGEND },
	{ "section", HE_SECTION },
	{ "article", HE_ARTICLE },
	{ "caption", HE_CAPTION },
	{ "fieldset", HE_FIELDSET },
	{ "plaintext", HE_PLAINTEXT },
	{ "figcaption", HE_FIGCAPTION },
	{ "blockquote", HE_BLOCKQUOTE},
    { "dumhdjyawejhdskjayehndyhkurnyriunfwftiuwtynwui", HE_UNKNOWN },
	//	{ "img\0ds", HE_UNKNOWN }, // This will fail
	{ "", HE_UNKNOWN },
}

// This test tests that the tables in htmlx.h are consistent.
foreach (text, expected_tag_val) from TagsWithValues
{
	test("Parse tag " text)
	{
		uni_char *unicode_tag = uni_up_strdup(text);
		HTML_ElementType parsed_tag_val = (HTML_ElementType)HTM_Lex::GetTag(unicode_tag, uni_strlen(unicode_tag), FALSE);
		verify(parsed_tag_val == expected_tag_val);
		op_free(unicode_tag);
	}
}

// This test tests that the tables in htmlx.h are consistent.
foreach (expected_text, tag_val) from TagsWithValues
{
	test("Tag to text - " expected_text)
	{
		if (tag_val != HE_UNKNOWN)
		{
			// Test case insensitive
			uni_char* unicode_tag = uni_up_strdup(expected_text);
			uni_strlwr(unicode_tag);
			const uni_char* ret_tag = HTM_Lex::GetTagString(tag_val);
			if (!ret_tag ||
				op_strlen(expected_text) != uni_strlen(ret_tag) ||
				uni_strncmp(unicode_tag, ret_tag, uni_strlen(ret_tag) != 0))
			{
				op_free(unicode_tag);
				verify(0);
			}
			else
			{
				op_free(unicode_tag);
			}
		}
	}
}

table AttrsWithValues(char*, int)
{
	{ "ID", ATTR_ID },
	{ "id", ATTR_ID },
	{ "SRC", ATTR_SRC },
	{ "ALT", ATTR_ALT },
	{ "DIR", ATTR_DIR },
	{ "for", ATTR_FOR },
	{ "HREF", ATTR_HREF },
	{ "NAME", ATTR_NAME },
	{ "SPAN", ATTR_SPAN },
	{ "class", ATTR_CLASS },
	{ "style", ATTR_STYLE },
	{ "height", ATTR_HEIGHT },
	{ "hidden", ATTR_HIDDEN },
	{ "RIGHTmargin", ATTR_RIGHTMARGIN },
	{ "accept-charset", ATTR_ACCEPT_CHARSET },
    { "dumhdjyawejhdskjayehndyhkurnyriunfwftiuwtynwui", ATTR_XML },
	//	{ "img\0ds", UNKNOWNSTART }, // This will fail
	{ "", ATTR_NULL },
}

// This test tests that the tables in htmlx.h are consistent.
foreach (text, expected_attr) from AttrsWithValues
{
	test("Parse attr " text)
	{
		// Test case insensitive
		uni_char* unicode_attr = uni_up_strdup(text);
		int parsed_attr = HTM_Lex::GetAttr(unicode_attr, op_strlen(text), FALSE);
		op_free(unicode_attr);
		verify(parsed_attr == expected_attr);
	}
}

// This test tests that the tables in htmlx.h are consistent.
foreach (expected_text, attr_val) from AttrsWithValues
{
	test("Attr to text - " expected_text)
	{
		if ((int)attr_val != ATTR_XML && (int)attr_val != ATTR_NULL)
		{
			// Test case insensitive
			uni_char* unicode_attr = uni_up_strdup(expected_text);
			const uni_char* ret_attr = HTM_Lex::GetAttrString(attr_val);
			if (!ret_attr ||
				op_strlen(expected_text) != uni_strlen(ret_attr) ||
				uni_strnicmp(unicode_attr, ret_attr, uni_strlen(ret_attr) != 0))
			{
				op_free(unicode_attr);
				verify(0);
			}
			else
			{
				op_free(unicode_attr);
			}
		}
	}
}

// New group with the WF2 dependant parts
group "logdoc.TagAttrParser.WF2";

table TagsWithValuesWF2(char*, int)
{
	{ "datalist", HE_DATALIST },
	{ "OUTPUT", HE_OUTPUT },
}

// This test tests that the tables in htmlx.h are consistent.
foreach (text, expected_tag_val) from TagsWithValuesWF2
{
	test("Parse webforms2 tag " text)
	{
		// Test case insensitive
		uni_char* unicode_tag = uni_up_strdup(text);
		int parsed_tag_val = HTM_Lex::GetTag(unicode_tag, op_strlen(text), FALSE);
		op_free(unicode_tag);
		verify(parsed_tag_val == expected_tag_val);
	}
}

// This test tests that the tables in htmlx.h are consistent.
foreach (expected_text, tag_val) from TagsWithValuesWF2
{
	test("WebForms2 tag to text - " expected_text)
	{
		if ((int)tag_val != HE_UNKNOWN)
		{
			// Test case insensitive
			uni_char* unicode_tag = uni_up_strdup(expected_text);
			const uni_char* ret_tag = HTM_Lex::GetTagString(tag_val);
			if (!ret_tag ||
				op_strlen(expected_text) != uni_strlen(ret_tag) ||
				uni_strnicmp(unicode_tag, ret_tag, uni_strlen(ret_tag) != 0))
			{
				op_free(unicode_tag);
				verify(0);
			}
			else
			{
				op_free(unicode_tag);
			}
		}
	}
}

table AttrsWithValuesWF2(char*, int)
{
	{ "Oninvalid", ATTR_ONINVALID },
	{ "MIN", ATTR_MIN },
	{ "MaX", ATTR_MAX },
}

// This test tests that the tables in htmlx.h are consistent.
foreach (text, expected_attr) from AttrsWithValuesWF2
{
	test("Parse WebForms2 attr " text)
	{
		// Test case insensitive
		uni_char* unicode_attr = uni_up_strdup(text);
		int parsed_attr = HTM_Lex::GetAttr(unicode_attr, op_strlen(text), FALSE);
		op_free(unicode_attr);
		verify(parsed_attr == expected_attr);
	}
}

table AttrsWithValuesWF2CaseSensitive(char*, int)
{
	{ "oninvalid", ATTR_ONINVALID },
	{ "min", ATTR_MIN },
	{ "mIn", ATTR_XML },
	{ "max", ATTR_MAX },
}

// This test tests that the tables in htmlx.h are consistent.
foreach (text, expected_attr) from AttrsWithValuesWF2CaseSensitive
{
	test("Parse case sensitive WebForms2 attr " text)
	{
		// Test case insensitive
		uni_char* unicode_attr = uni_up_strdup(text);
		int parsed_attr = HTM_Lex::GetAttr(unicode_attr, op_strlen(text), TRUE);
		op_free(unicode_attr);
		verify(parsed_attr == expected_attr);
	}
}
