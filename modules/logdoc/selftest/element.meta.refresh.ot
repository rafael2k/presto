// -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
group "logdoc.htmlelement.meta.refresh";
require init;

language ecmascript;

html
{
 	//! <html>
    //!  <body>
	//!  </body>
	//! </html>
}

test("setup test")
{

	function trim( s ){ return typeof s == 'string' ? s.replace(new RegExp("^\\s+"),'').replace(new RegExp("\\s+$"),'') : s }
	window.do_whole_test = function( url ){
		var ifr = document.body.appendChild(document.createElement('iframe'));
		ifr.src='data:text/plain,dummy'
		verify(ifr);
		verify(ifr.parentNode);
		//this timeout avoids hitting bug CORE-4189
		setTimeout(function(){
			ifr.onload=function(){
				var href = String(ifr.contentWindow.location.href);
				if( href.indexOf("http-equiv='refresh'") >= 0 || href.indexOf('http-equiv="refresh"') >= 0 ){
					//have to wait for the refresh
					return;
				}
				verify(href=='data:text/plain,PASS');
				verify(ifr.contentDocument);
				verify(ifr.contentDocument.body);
				verify(ifr.contentDocument.body.firstChild.firstChild.data=="PASS");
				ifr.parentNode.removeChild(ifr);
				
				clearTimeout(abortTimeout);
				ST_passed();
			}
			ifr.src=url;
		},10);
		var abortTimeout = setTimeout(function(){
			//two second timeout to abort testcase
			verify("Timeout" && false);
		},2000);
	}
}

//0 timeout
test("meta element - refresh test - unquoted url - 0 timeout") async;
{
	do_whole_test("data:text/html,<meta http-equiv='refresh' content='0;url=data:text/plain,PASS'>");
}

test("meta element - refresh test - quoted url ' - 0 timeout") async;
{
	do_whole_test("data:text/html,<meta http-equiv='refresh' content='0;url=\"data:text/plain,PASS\"'>");
}

test("meta element - refresh test - quoted url ' malformed - 0 timeout") async;
{
	do_whole_test("data:text/html,<meta http-equiv='refresh' content='0;url=\"data:text/plain,PASS\"trailing garbage'>");
}

test("meta element - refresh test - quoted url \" - 0 timeout") async;
{
	do_whole_test('data:text/html,<meta http-equiv="refresh" content="0;url='+"'data:text/plain,PASS'"+'">');
}

test("meta element - refresh test - quoted url \" malformed - 0 timeout") async;
{
	do_whole_test('data:text/html,<meta http-equiv="refresh" content="0;url='+"'data:text/plain,PASS'"+'trailing garbage">');
}

//1 timeout
test("meta element - refresh test - unquoted url - 1 timeout") async;
{
	do_whole_test("data:text/html,<meta http-equiv='refresh' content='1;url=data:text/plain,PASS'>");
}

test("meta element - refresh test - quoted url ' - 1 timeout") async;
{
	do_whole_test("data:text/html,<meta http-equiv='refresh' content='1;url=\"data:text/plain,PASS\"'>");
}

test("meta element - refresh test - quoted url ' malformed - 1 timeout") async;
{
	do_whole_test("data:text/html,<meta http-equiv='refresh' content='1;url=\"data:text/plain,PASS\"trailing garbage'>");
}

test("meta element - refresh test - quoted url \" - 1 timeout") async;
{
	do_whole_test('data:text/html,<meta http-equiv="refresh" content="1;url='+"'data:text/plain,PASS'"+'">');
}

test("meta element - refresh test - quoted url \" malformed - 1 timeout") async;
{
	do_whole_test('data:text/html,<meta http-equiv="refresh" content="1;url='+"'data:text/plain,PASS'"+'trailing garbage">');
}


