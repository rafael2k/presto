/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "logdoc.wml.event";
require init;
require defined _WML_SUPPORT_;

include "modules/logdoc/htm_elm.h";
include "modules/doc/frm_doc.h";

language C++;

data "text/wml"
{
	//! <!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.3//EN" "http://www.wapforum.org/DTD/wml13.dtd">
	//! <wml><card onenterforward="#card2">fail</card><card id="card2">PASS</card></wml>
}

test("Testing onenterforward")
	disabled; // Can't resolve #card2 in the generated testpage with url opera:blanker
{
	HTML_Element *card2 = state.doc->GetDocRoot()->GetElmById(UNI_L("card2"));
	HTML_Element *current_card = state.doc->GetHLDocProfile()->WMLGetCurrentCard();

	verify(current_card == card2);
}

data "text/wml"
{
	//! <!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.3//EN" "http://www.wapforum.org/DTD/wml13.dtd">
	//! <wml><card id="card1" onenterforward="#card2">PASS</card><card id="card2" onenterback="#card1">fail</card></wml>
}

test("Testing onenterback")
	disabled; // Can't resolve #card2 in the generated testpage with url opera:blanker
{
	HTML_Element *card2 = state.doc->GetDocRoot()->GetElmById(UNI_L("card1"));
	HTML_Element *current_card = state.doc->GetHLDocProfile()->WMLGetCurrentCard();

	verify(current_card == card2);
}

group "logdoc.wml.variables";

require initialization;
require defined _WML_SUPPORT_;

include "modules/logdoc/htm_elm.h";
include "modules/doc/frm_doc.h";

data "text/wml"
{
	//! <!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.3//EN" "http://www.wapforum.org/DTD/wml13.dtd">
	//! <wml><card id="card1"><onevent type="onenterforward"><refresh><setvar name="test" value="PASS"/></refresh></onevent>$test</card></wml>
}

test("Testing setting of variables")
{
	const uni_char* var = state.doc->GetDocManager()->WMLGetContext()->GetVariable(UNI_L("test"), 4);
	verify(var);
	verify(uni_str_eq(var, "PASS"));
}


test("Expansion of variables")
language ecmascript;
disabled; // Need to trigger the refresh task before this test is run. How?
{
	verify(document.getElementsByTagName);
	var card = document.getElementsByTagName("card")[0];
	verify(card);
	var text = card.lastChild;
	verify(text);
	verify(text.nodeType == 3); // text
	verify(text.data != "$test");
	verify(text.data == "PASS");
}

table varsubst(const uni_char*, const uni_char*, const uni_char*)
{
	{ UNI_L("PASS"), UNI_L("$var"), UNI_L("PASS") },
	{ UNI_L("ASS"), UNI_L("P$var"), UNI_L("PASS") },
	{ UNI_L("PAS"), UNI_L("$(var)S"), UNI_L("PASS") },
	{ UNI_L("PASS"), UNI_L("$(var:noesc)"), UNI_L("PASS") }
}

test("Substitution of variables")
{
	WML_Context *context = state.doc->GetDocManager()->WMLGetContext();

	iterate (value, str, expected) from varsubst
	{
		uni_char res_buf[256]; /* ARRAY OK 2009-05-07 stighal */
		uni_char *result = res_buf;

		context->SetVariable(UNI_L("var"), value);
		context->SubstituteVars(str, uni_strlen(str), result, 256, FALSE);
		verify(uni_strcmp(result, expected) == 0);
	}
}
