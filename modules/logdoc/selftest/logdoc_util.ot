/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2006 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Karlsson
*/

group "logdoc.logdoc_util.misc";
require initialization;

include "modules/logdoc/logdoc_util.h";
include "modules/display/styl_man.h";

// -- Tests --------------------------------------------------------------

// FIXME: Missing tests for ATTR_GetKeyword
// FIXME: Missing tests for SetLoop

table replacewhitespace(const uni_char *, const uni_char *, const uni_char *)
{
	{ UNI_L("ABC  DEF\xA0\xA0\xA0GHI\x2000\x2000\x2000\x2000JKL\x3000\x3000..."),
	  UNI_L("ABC DEF\xA0GHI\x2000JKL\x3000..."),
	  UNI_L("ABC DEF GHI JKL ...")
	},
	{ UNI_L("  ABC \x3000GHI  "),
	  UNI_L(" ABC GHI "),
	  UNI_L(" ABC GHI ")
	},
	{ UNI_L("  ABC\x3000\x3000GHI"),
	  UNI_L(" ABC\x3000GHI"),
	  UNI_L(" ABC GHI")
	},
}

test("ReplaceWhitespace()")
{
	iterate (input, fold, fold_and_replace) from replacewhitespace
	{
		uni_char result[256]; /* ARRAY OK 2008-06-24 stighal */

		ReplaceWhitespace(input, uni_strlen(input), result, ARRAY_SIZE(result), TRUE);
		verify(uni_strcmp(result, fold) == 0);

		ReplaceWhitespace(input, uni_strlen(input), result, ARRAY_SIZE(result), FALSE);
		verify(uni_strcmp(result, fold_and_replace) == 0);
	}
}

test("GetFirstFontNumber()")
{
	const uni_char *face = styleManager->GetFontFace(0);
	if (face)
	{
		uni_char buffer[256]; /* ARRAY OK 2008-06-24 stighal */
		uni_snprintf(buffer, ARRAY_SIZE(buffer), UNI_L("bafoorium,haberiba,%s,jaffakree"), face);
		short firstface = GetFirstFontNumber(buffer, uni_strlen(buffer), WritingSystem::Unknown);
		verify(firstface != -1);
	}
}

test("CleanCDATA()")
{
	uni_char buffer[256]; /* ARRAY OK 2008-06-24 stighal */
	uni_strcpy(buffer, UNI_L("  cdata\ntest\there  "));
	unsigned int len = uni_strlen(buffer);
	CleanCDATA(buffer, len);

	const uni_char *wanted = UNI_L("cdatatest here");
	verify(len == uni_strlen(wanted));
	verify(uni_strncmp(wanted, buffer, len) == 0);
}

test("CleanStringForDisplay()")
{
	uni_char buffer[256]; /* ARRAY OK 2008-06-24 stighal */
	uni_strcpy(buffer, UNI_L("  cdata\ntest\there  "));
	CleanStringForDisplay(buffer);
	const uni_char *wanted = UNI_L("cdata test here");
	verify(uni_strcmp(wanted, buffer) == 0);

	uni_strcpy(buffer, UNI_L(""));
	CleanStringForDisplay(buffer);
	wanted = UNI_L("");
	verify(uni_strcmp(wanted, buffer) == 0);

	uni_strcpy(buffer, UNI_L("ti      tle"));
	CleanStringForDisplay(buffer);
	wanted = UNI_L("ti tle");
	verify(uni_strcmp(wanted, buffer) == 0);

	uni_strcpy(buffer, UNI_L("a\rn\nk\ta"));
	CleanStringForDisplay(buffer);
	wanted = UNI_L("a n k a");
	verify(uni_strcmp(wanted, buffer) == 0);
}


table hextoint(const uni_char *, int, int, int)
{
	{ UNI_L("ABCD"), 4, 0xABCD, 0xABCD },
	{ UNI_L("DEFG"), 4, 0xDEF0, -1     },
	{ UNI_L("HIJK"), 4, 0,      -1     },
	{ UNI_L("DEFG"), 3, 0xDEF,  0xDEF  },
}

test("HexToInt()")
{
	iterate (input, len, normal, strict) from hextoint
	{
		verify(HexToInt(input, len, FALSE) == normal);
		verify(HexToInt(input, len, TRUE)  == strict);
	}
}

test("GetColorVal()")
{
	verify(GetColorVal(UNI_L("#123456"),     7, TRUE)  == OP_RGB(0x12, 0x34, 0x56));
	verify(GetColorVal(UNI_L(" #123456"),    8, TRUE)  == OP_RGB(0x12, 0x34, 0x56));
	verify(GetColorVal(UNI_L("123456"),      6, FALSE) == OP_RGB(0x12, 0x34, 0x56));
	verify(GetColorVal(UNI_L("\t123456"),    7, FALSE) == OP_RGB(0x12, 0x34, 0x56));
	verify(GetColorVal(UNI_L("maroon"),      6, TRUE)  == OP_RGB(0x80, 0x00, 0x00));
	verify(GetColorVal(UNI_L("bleh"),        4, TRUE)  == OP_RGB(0xb0, 0xe0, 0x00));
	verify(GetColorVal(UNI_L(" \tmaroon"),   8, TRUE)  == OP_RGB(0x80, 0x00, 0x00));
	verify(GetColorVal(UNI_L(""),            0, TRUE)  == long(USE_DEFAULT_COLOR));
	verify(GetColorVal(UNI_L(" \t\r\n"),     4, TRUE)  == long(USE_DEFAULT_COLOR));
	verify(GetColorVal(UNI_L(" \t#\r\n"),    5, TRUE)  == long(USE_DEFAULT_COLOR));
	verify(GetColorVal(UNI_L("#"),           1, TRUE)  == long(USE_DEFAULT_COLOR));
	verify(GetColorVal(UNI_L("\t"),          1, TRUE)  == long(USE_DEFAULT_COLOR));
	verify(GetColorVal(NULL,                 0, TRUE)  == long(USE_DEFAULT_COLOR));
	verify(GetColorVal(UNI_L("\t red"),      5, TRUE)  == OP_RGB(0xff, 0x00, 0x00));
	verify(GetColorVal(UNI_L("red\t"),       4, TRUE)  == OP_RGB(0xff, 0x00, 0x00));
	verify(GetColorVal(UNI_L(" # 111 "),     7, TRUE)  == OP_RGB(0x01, 0x11, 0x00));
	verify(GetColorVal(UNI_L("f"),           1, TRUE)  == OP_RGB(0x0f, 0x00, 0x00));
	verify(GetColorVal(UNI_L("#f"),          2, TRUE)  == OP_RGB(0x0f, 0x00, 0x00));
	verify(GetColorVal(UNI_L("1f"),          2, TRUE)  == OP_RGB(0x01, 0x0f, 0x00));
	verify(GetColorVal(UNI_L("#111"),        4, TRUE)  == OP_RGB(0x11, 0x11, 0x11));
	verify(GetColorVal(UNI_L("111"),         3, TRUE)  == OP_RGB(0x01, 0x01, 0x01));
	verify(GetColorVal(UNI_L("#1f"),         3, TRUE)  == OP_RGB(0x01, 0x0f, 0x00));
	verify(GetColorVal(UNI_L("1fd9"),        4, TRUE)  == OP_RGB(0x1f, 0xd9, 0x00));
	verify(GetColorVal(UNI_L("#1fd9"),       5, TRUE)  == OP_RGB(0x1f, 0xd9, 0x00));
	verify(GetColorVal(UNI_L("1fd9c"),        5, TRUE) == OP_RGB(0x1f, 0xd9, 0xc0));
	verify(GetColorVal(UNI_L("#1fd9c"),       6, TRUE) == OP_RGB(0x1f, 0xd9, 0xc0));
	verify(GetColorVal(UNI_L("#0123456789"), 11, TRUE) == OP_RGB(0x01, 0x45, 0x89));
	verify(GetColorVal(UNI_L("3141592653589793238462643383279"), 31, TRUE) == OP_RGB(0x15, 0x93, 0x38));
	verify(GetColorVal(UNI_L("transparent"), 11, TRUE) == long(USE_DEFAULT_COLOR));
}

// FIXME: Missing tests for SetUrlAttr
// FIXME: Missing tests for CreateUrlFromString

test("SetStringAttr()")
{
	const uni_char *input = UNI_L("input  &amp;  &auml=2 &lang=2");
	const int inplen = uni_strlen(input);
	uni_char *result = NULL;

	result = SetStringAttr(input, inplen, TRUE);
	verify(uni_strcmp(result, UNI_L("input &amp; &auml=2 &lang=2")) == 0);
}
finally
{
	OP_DELETEA(result);
}

// FIXME: Missing tests for SetStringAttrUTF8Escaped
// FIXME: Missing tests for GetCurrentBaseTarget

test("WhiteSpaceOnly()")
{
	verify( WhiteSpaceOnly(UNI_L(" "), 1));
	verify( WhiteSpaceOnly(UNI_L("     f"), 5));
	verify(!WhiteSpaceOnly(UNI_L("     f"), 6));
	verify(!WhiteSpaceOnly(UNI_L("\x2000\x2000\x2000\x2001"), 4));
	verify(!WhiteSpaceOnly(UNI_L("\x2000\x2000\x2000\x2001...foo"), 10));
	verify(!WhiteSpaceOnly(UNI_L("\x2000\x2000\x2000\x2001\x3000"), 5));
}


table ScanBackIfEscapeChar_Data(const uni_char*, int, int, BOOL)
{
//    str									len	break	next_char

	// Ok to break
	{ UNI_L("abcd"),						3,	3,		TRUE	},
	{ UNI_L("abcd"),						3,	3,		FALSE	},

	// Scan back on standalone surrogate
	{ UNI_L("abcd\xd800"),					5,	4,		FALSE	},
	{ UNI_L("abcd"),						3,	3,		FALSE	},	
	
	// U+300 is combining, dont break after d
	{ UNI_L("abcd\x0300"),					4,	3,		TRUE	},
	
	// If we don't see the cb we have to assume it's ok
	{ UNI_L("abcd\x0300"),					4,	4,		FALSE	},

	// unbreakable, use first char
	{ UNI_L("\xd800\xdc00\x0300\x0300"),	3,	2,		TRUE	},
}

include "modules/logdoc/htm_lex.h";
test ("ScanBackIfEscapeChar()")
{
	iterate (str, len, brk, next_char) from ScanBackIfEscapeChar_Data
	{
		uni_char* bufend = const_cast<uni_char*>(str + len);

		HTM_Lex::ScanBackIfEscapeChar(str, &bufend, next_char);	
		
		verify (bufend == str + brk);
	}
}
