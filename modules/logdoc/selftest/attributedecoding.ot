/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "logdoc.Attributes.Decoding";
require init;

include "modules/logdoc/htm_elm.h";

language ecmascript;

html
{
	//! <html><head><body><div id="testdiv" attrone="beep" attrtwo="&amp;beep" attrthree="&amp;amp;"></div></body></html>
}

test("Decode Unknown HTML attribute")
{
	verify(document);
	verify(document.getElementById);
	var node = document.getElementById("testdiv");
	verify(node);
	verify(node.getAttribute);

	var val = node.getAttribute("attrone");
	verify(val);
	verify(val == "beep");

	var val = node.getAttribute("attrtwo");
	verify(val);
	verify(val == "&beep");

	var val = node.getAttribute("attrthree");
	verify(val);
	verify(val == "&amp;");
}

xml
{
	//! <!DOCTYPE div [<!ELEMENT div ANY><!ATTLIST div id ID #IMPLIED>]>
	//! <div id="testdiv" attrone="beep" attrtwo="&amp;beep" attrthree="&amp;amp;"></div>
}

test("Decode Unknown XML attribute") require undefined USE_HTML_PARSER_FOR_XML;
{
	verify(document);
	verify(document.getElementById);
	var node = document.getElementById("testdiv");
	verify(node);
	verify(node.getAttribute);

	var val = node.getAttribute("attrone");
	verify(val);
	verify(val == "beep");

	var val = node.getAttribute("attrtwo");
	verify(val);
	verify(val == "&beep");

	var val = node.getAttribute("attrthree");
	verify(val);
	verify(val == "&amp;");
}

xhtml
{
	//! <?xml version="1.0" ?>
	//! <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
	//! <html xmlns="http://www.w3.org/1999/xhtml">
	//!  <head><title>Test</title></head>
	//! <body>
	//! <div id="testdiv" attrone="beep" attrtwo="&amp;beep" attrthree="&amp;amp;"></div>
	//! </body></html>
}

test("Decode Unknown XHTML attribute")
{
	verify(document);
	verify(document.getElementById);
	var node = document.getElementById("testdiv");
	verify(node);
	verify(node.getAttribute);

	var val = node.getAttribute("attrone");
	verify(val);
	verify(val == "beep");

	var val = node.getAttribute("attrtwo");
	verify(val);
	verify(val == "&beep");

	var val = node.getAttribute("attrthree");
	verify(val);
	verify(val == "&amp;");
}



html
{
	//! <html><head><body>
	//! <form id="testformone" enctype="beep"></form>
	//! <form id="testformtwo" enctype="&amp;beep"></form>
	//! <form id="testformthree" enctype="&amp;amp;"></form>
	//! </body></html>
}

test("Decode HTML attribute enctype")
{
	verify(document);
	verify(document.getElementById);

	var node = document.getElementById("testformone");
	verify(node);
	verify(node.getAttribute);
	var val = node.getAttribute("enctype");
	verify(val);
	verify(val == "beep");

	var node = document.getElementById("testformtwo");
	verify(node);
	verify(node.getAttribute);
	var val = node.getAttribute("enctype");
	verify(val);
	verify(val == "&beep");

	var node = document.getElementById("testformthree");
	verify(node);
	verify(node.getAttribute);
	var val = node.getAttribute("enctype");
	verify(val);
	verify(val == "&amp;");
}

xhtml
{
	//! <?xml version="1.0" ?>
	//! <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
	//! <html xmlns="http://www.w3.org/1999/xhtml">
	//!  <head><title>Test</title></head>
	//! <body>
	//! <form id="testformone" enctype="beep"></form>
	//! <form id="testformtwo" enctype="&amp;beep"></form>
	//! <form id="testformthree" enctype="&amp;amp;"></form>
	//! </body></html>
}

test("Decode XHTML attribute enctype")
{
	verify(document);
	verify(document.getElementById);

	var node = document.getElementById("testformone");
	verify(node);
	verify(node.getAttribute);
	var val = node.getAttribute("enctype");
	verify(val);
	verify(val == "beep");

	var node = document.getElementById("testformtwo");
	verify(node);
	verify(node.getAttribute);
	var val = node.getAttribute("enctype");
	verify(val);
	verify(val == "&beep");

	var node = document.getElementById("testformthree");
	verify(node);
	verify(node.getAttribute);
	var val = node.getAttribute("enctype");
	verify(val);
	verify(val == "&amp;");
}

xml
{
	//!  <!DOCTYPE div [<!ELEMENT div ANY><!ATTLIST div id ID #IMPLIED>]>
	//! <div id="testdiv"></div>
}

test("Generic ID attribute in XML (named id)") require undefined USE_HTML_PARSER_FOR_XML;
{
	verify(document);
	verify(document.getElementById);
	var node = document.getElementById("testdiv");
	verify(node);
	verify(document.documentElement);
	verify(node == document.documentElement);
}

xml
{
	//! <!DOCTYPE div [<!ELEMENT div ANY><!ATTLIST div gurka ID #IMPLIED>]>
	//! <div gurka="hipp" id="hopp"></div>
}


test("Generic ID attribute in XML (named gurka) #1") require undefined USE_HTML_PARSER_FOR_XML;
{
	verify(document);
	verify(document.getElementById);
	var node = document.getElementById("hipp");
	verify(node);
	verify(document.documentElement);
	verify(node == document.documentElement);
}

test("Generic ID attribute in XML (named gurka) #2")
{
	verify(document);
	verify(document.getElementById);
	var node = document.getElementById("hopp");
	verify(!node);
}

html
{
	//! <img src="dummy:hh" alt="A picture">
}

test("Alt attribute")
{
	var img = document.getElementsByTagName("img")[0];
	verify(img);
	verify(img.getAttribute('alt'));
	verify(img.getAttribute('alt') == "A picture");
}

// Missing attribute values, bug 247263
html
{
	//! <table cellpadding width size tabIndex method rules cite title action>
	//! </table>
}

// Missing attribute values, bug 247263
test("No attribute value")
{
	var tab = document.getElementsByTagName('table')[0];
	verify(tab);
	verify(tab.getAttribute('cellpadding') == "");
	verify(tab.getAttribute('width') == "");
	verify(tab.getAttribute('size') == "");
	verify(tab.getAttribute('tabIndex') == "");
	verify(tab.getAttribute('method') == "");
	verify(tab.getAttribute('rules') == "");
	verify(tab.getAttribute('cite') == "");
	verify(tab.getAttribute('title') == "");
	verify(tab.getAttribute('action') == "");
}

// Bad entity resolving, bug 256538
html
{
	//! <input type="&#104;idden">
}

test("Entities in type attribute")
{
	var input = document.getElementsByTagName('input')[0];
	verify(input);
	verify(input.type != "text");
	verify(input.type == "hidden");

	verify(input.getAttribute("type") == "hidden");
}

// Bad entity resolving, bug 256538
html
{
	//! <a href="http://wiki/developerwiki/index.php?title=Modules/forms&amp;action=edit">Edit</a>
}

test("Entities in href attribute")
{
	var link = document.getElementsByTagName('a')[0];
	verify(link);
	verify(link.href == "http://wiki/developerwiki/index.php?title=Modules/forms&action=edit");

	verify(link.getAttribute("href") == "http://wiki/developerwiki/index.php?title=Modules/forms&action=edit");
}

html
{
	//! <body onload="window.foo='&amp;amp;'"></body>
}

test("Entities in event handlers")
	language ecmascript;
{
	var body = document.getElementsByTagName("body")[0];
	verify(body);
	verify("foo" in window);
	verify(window.foo == "&amp;");
	verify(body.getAttribute("onload") == "window.foo='&amp;'");
}

html
{
	//!  <DOCTYPE html>
	//!  <meta charset="utf-8">
	//!  <base href="http://www.opera.com/">
	//!  <li><a id="link3" href="?value=&aring;&auml;&ouml;&lang=sv">Named entity, unescaped &amp;</a>: <span id="result3">FAIL (no JavaScript)</span></li>
	//!  <li><a id="link4" href="?value=&aring;&auml;&ouml;&amp;lang=sv">Named entity, escaped &amp;</a>: <span id="result4">FAIL (no JavaScript)</span></li>
	//!  <li><a id="link5" href="?value=&#229;&#228;&#246;&lang=sv">Numeric reference, unescaped &amp;</a>: <span id="result5">FAIL (no JavaScript)</span></li>
	//!  <li><a id="link6" href="?value=&#229;&#228;&#246;&amp;lang=sv">Numeric reference, escaped &amp;</a>: <span id="result6">FAIL (no JavaScript)</span></li>
	//!  <li><a id="link7" href="?value=%E5%E4%F6&lang=sv">URL encoding, unescaped &amp;</a>: <span id="result7">FAIL (no JavaScript)</span></li>
	//!  <li><a id="link8" href="?value=%E5%E4%F6&amp;lang=sv">URL encoding, escaped &amp;</a>: <span id="result8">FAIL (no JavaScript)</span></li>
	//!  <li><a id="link9" href="?value&amp;amp;">Double SGML escape</a>: <span id="result9">FAIL (no JavaScript)</span></li>
	//! </ol>
}
test("Entites in urls")
	language ecmascript;
{
	var correct1 = "http://www.opera.com/?value=%C3%A5%C3%A4%C3%B6&lang=sv";
	var correct2 = "http://www.opera.com/?value=%E5%E4%F6&lang=sv";
	var links = document.getElementsByTagName("a");
	verify(links);
	verify(links.length == 7);
	verify (links[0].href == correct1);
	verify (links[1].href == correct1);
	verify (links[2].href == correct1);
	verify (links[3].href == correct1);
	verify (links[4].href == correct2);
	verify (links[5].href == correct2);
	verify (links[6].href == "http://www.opera.com/?value&amp;");
}

html
{
	//! <div style="display:  &#110;one;"></div>
}

test("Entities in style attributes")
	language ecmascript;
{
	var div = document.getElementsByTagName("div")[0];
	verify(div);
	verify(div.getAttribute("style") == "display:  none;");
	verify(div.style.display == 'none');
}

html
{
	//! <html>
	//! 1<input size=10 value=10><br>
	//! 2<input size="" value="<empty string>"><br>
	//! 3<input size=10,1 value=10,1><br>
	//! 4<input size=10f value=10f><br>
	//! 5<input size=10qqq value=10qqq><br>
	//! 6<input size=qqq10 value=qqq10><br>
	//! 7<input size=,10 value=,10><br>
	//! 8<input size=10em, value=10em><br>
	//! 9<input size=10, value=10,><br>
	//! 10<input size="10 1" value="10 1"><br>
	//! 11<input size="10 " value="10<SPACE>"><br>
	//! 12<input size="10;" value="10;"><br>
	//! 13<input size="10-" value="10-"><br>
	//! 14<input size="10<" value="10<"><br>
	//! 15<input size="10>" value="10>"><br>
	//! 16<input size="10#" value="10#"><br>
	//! 17<input size="10:" value="10:"><br>
	//! 18<input size="10&aring;" value="10&aring;"><br>
	//! 19<input size="10&ouml;" value="10&ouml;"><br>
}

// These matches MSIE. Mozilla is different in a strange way ("qqq10"
// and "10qqq" -> 10 but "10f" or "10em" -> illegal value).
table SizeValues(int, char*, BOOL)
{
	{ 1, "10", TRUE },
	{ 2, "<empty>", FALSE },
	{ 3, "10,1", TRUE },
	{ 4, "10f", FALSE },
	{ 5, "10qqq", FALSE },
	{ 6, "qqq10", FALSE },
	{ 7, ",10", FALSE },
	{ 8, "10em", FALSE },
	{ 9, "10,", TRUE },
	{ 10, "10 1", TRUE },
	{ 11, "10 ", TRUE },
	{ 12, "10;", TRUE },
	{ 13, "10-", TRUE },
	{ 14, "10<", TRUE },
	{ 15, "10>", TRUE },
	{ 16, "10#", TRUE },
	{ 17, "10:", TRUE },
	{ 18, "10aring", FALSE },
	{ 19, "10ouml", FALSE },
}

foreach (input_index, name, should_be_accepted) from SizeValues
{
	test("Parse size attribute value " name)
		language C++;
	{
		HTML_Element* input = find_element("input", input_index);
		verify(input);
		verify(input->HasNumAttr(ATTR_SIZE) == should_be_accepted);
		if (should_be_accepted)
		{
			int size = input->GetNumAttr(ATTR_SIZE);
			verify(size != 0);
			verify(size == 10);
		}
	}
}

html
{
	//! <span class="&not_">This text must be green</span>
}

test("Non terminated etity in class name - bug 259750")
	language ecmascript;
{
	var span = document.getElementsByTagName("span")[0];
	verify(span);

	var classname = span.getAttribute("class");
	verify(classname);
	verify(classname == "\u00AC_");
}
