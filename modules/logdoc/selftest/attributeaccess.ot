/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "logdoc.Attributes.Accessing";
require init;

language C++;

include "modules/doc/frm_doc.h";
include "modules/logdoc/htm_elm.h";

html
{
	//! <html foo=bar></html>
}

test("Access unknown attribute")
{
	HTML_Element* elm = state.doc->GetDocRoot()->FirstChild();
	int idx = elm->FindAttrIndex(ATTR_XML, UNI_L("foo"), NS_IDX_HTML, FALSE);
	verify(idx != -1);
}

xml
{
	//! <test xmlns:xht="http://www.w3.org/1999/xhtml" xmlns="" xht:type="t"></test>
}

test("Access known attribute at unknown element")
{
	HTML_Element* elm = state.doc->GetDocRoot()->FirstChildActual();

	int idx = elm->FindAttrIndex(ATTR_TYPE, NULL, NS_IDX_HTML, FALSE);
	verify(idx != -1);

	const uni_char* value = elm->GetStringAttr(ATTR_TYPE);
	verify(value);
	verify(value[0] == 't');
	verify(value[1] == '\0');
}

xml
{
	//! <test xmlns="" type="template"></test>
}

test("Access unknown attribute at unknown element")
{
	HTML_Element* elm = state.doc->GetDocRoot()->FirstChildActual();

	int idx = elm->FindAttrIndex(ATTR_TYPE, NULL, NS_IDX_HTML, FALSE);
	verify(idx == -1);

	const uni_char* value = elm->GetStringAttr(ATTR_TYPE);
	verify(value == NULL);

	idx = elm->FindAttrIndex(ATTR_XML, UNI_L("type"), NS_IDX_HTML, FALSE);
	verify(idx == -1);

	idx = elm->FindAttrIndex(ATTR_XML, UNI_L("type"), NS_IDX_ANY_NAMESPACE, FALSE);
	verify(idx != -1);
}
