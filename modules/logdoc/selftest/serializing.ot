/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
group "logdoc.serializing";
require init;

include "modules/doc/frm_doc.h";
include "modules/logdoc/htm_elm.h";
include "modules/logdoc/html5parser.h";
include "modules/logdoc/logdoc.h";
include "modules/logdoc/selection.h";
include "modules/util/tempbuf.h";

language C++;

global
{
	HTML_Element *root;
}

html
{
	//! <html><body>
	//! <div id="d1">
	//! <p id="p1"><span id="s1">A</span><span id="s2">BC</span>D</p><p id="p2">E<span id="s3">FG</span><span id="s4">H</span></p><p id="p3">I<span id="s5">J<br id="b1"></span>K</p>
	//! </div>
	//! </body></html>"
}

test("serializing setup")
{
	verify (state.doc);

	LogicalDocument *logdoc = state.doc->GetLogicalDocument();
	verify(logdoc);

	root = logdoc->GetRoot();
	verify(root);
}

subtest checkRange(HTML_Element *start, unsigned start_offset, HTML_Element *end, unsigned end_offset, const uni_char *expected)
{
	TextSelection selection;
	SelectionBoundaryPoint start_point;
	SelectionBoundaryPoint end_point;

	start_point.SetLogicalPosition(start, start_offset);
	end_point.SetLogicalPosition(end, end_offset);

	selection.SetNewSelection(state.doc, &start_point, &end_point, FALSE, FALSE, FALSE);

	TempBuffer buffer;
	verify_success(HTML5Parser::SerializeSelection(selection, &buffer, HTML5Parser::SerializeTreeOptions().SkipAttributes()));
	BOOL matched = uni_str_eq(buffer.GetStorage(), expected);
	if (!matched) {
		output("\nexpected \"%s\", got \"%s\" ", ST_down(expected), ST_down(buffer.GetStorage()));
	}
	verify(matched);
}

test("Serialize selection, collapsed.") require success "serializing setup";
{
  verify(checkRange(root->GetElmById(UNI_L("s2"))->FirstChild(), 0, root->GetElmById(UNI_L("s2"))->FirstChild(), 0, UNI_L("")));
}

test("Serialize selection, single text node.") require success "serializing setup";
{
  verify(checkRange(root->GetElmById(UNI_L("s2"))->FirstChild(), 0, root->GetElmById(UNI_L("s2"))->FirstChild(), 2, UNI_L("BC")));
}

test("Serialize selection, adjacent text nodes.") require success "serializing setup";
{
  verify(checkRange(root->GetElmById(UNI_L("s1"))->FirstChild(), 0, root->GetElmById(UNI_L("s2"))->FirstChild(), 1, UNI_L("<span>A</span><span>B</span>")));
}

test("Serialize selection, spread text nodes.") require success "serializing setup";
{
  verify(checkRange(root->GetElmById(UNI_L("s2"))->FirstChild(), 1, root->GetElmById(UNI_L("s3"))->FirstChild(), 1, UNI_L("<p><span>C</span>D</p><p>E<span>F</span></p>")));
}

test("Serialize selection, start is common ancestor.") require success "serializing setup";
{
  verify(checkRange(root->GetElmById(UNI_L("p1")), 0, root->GetElmById(UNI_L("s1"))->FirstChild(), 1, UNI_L("<span>A</span>")));
}

test("Serialize selection, end is common ancestor.") require success "serializing setup";
{
  verify(checkRange(root->GetElmById(UNI_L("s3"))->FirstChild(), 1, root->GetElmById(UNI_L("p2")), 3, UNI_L("<span>G</span><span>H</span>")));
}

test("Serialize selection, spanning serveral subtrees.") require success "serializing setup";
{
  verify(checkRange(root->GetElmById(UNI_L("s1"))->FirstChild(), 1, root->GetElmById(UNI_L("s4"))->FirstChild(), 1, UNI_L("<p><span></span><span>BC</span>D</p><p>E<span>FG</span><span>H</span></p>")));
}

test("Serialize selection, non-leaf start and end.") require success "serializing setup";
{
  verify(checkRange(root->GetElmById(UNI_L("p1")), 1, root->GetElmById(UNI_L("p2")), 1, UNI_L("<p><span>BC</span>D</p><p>E</p>")));
}

test("Serialize selection, text under common ancestor.") require success "serializing setup";
{
  verify(checkRange(root->GetElmById(UNI_L("p3"))->FirstChild(), 0, root->GetElmById(UNI_L("p3"))->LastChild(), 1, UNI_L("I<span>J<br></span>K")));
}

test("Serialize selection, start node has no children.") require success "serializing setup";
{
  verify(checkRange(root->GetElmById(UNI_L("b1")), 0, root->GetElmById(UNI_L("p3"))->LastChild(), 1, UNI_L("<span><br></span>K")));
}

test("Serialize selection, end node has no children.") require success "serializing setup";
{
  verify(checkRange(root->GetElmById(UNI_L("p3"))->FirstChild(), 0, root->GetElmById(UNI_L("b1")), 0, UNI_L("I<span>J<br></span>")));
}
