/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; -*-
**
** Copyright (C) 2002 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "ActualTraverse";
require init;

include "modules/logdoc/htm_elm.h";

global
{
	HTML_Element *Element(HTML_Element *&element)
	{
		element = NEW_HTML_Element();
		element->Construct((HLDocProfile*)NULL, NS_IDX_HTML, HE_UNKNOWN, NULL, HE_NOT_INSERTED);
		return element;
	}

	HTML_Element *InsertedElement(HTML_Element *&element)
	{
		element = NEW_HTML_Element();
		element->Construct((HLDocProfile*)NULL, NS_IDX_HTML, HE_UNKNOWN, NULL, HE_INSERTED_BY_LAYOUT);
		return element;
	}

	HTML_Element *ElementWithInsertedParent(HTML_Element *&element)
	{
		HTML_Element *inserted;
		Element(element)->Under(InsertedElement(inserted));
		return inserted;
	}

	void DeleteAll(HTML_Element *root)
	{
		while (HTML_Element *child = root->FirstChild())
		{
			child->Out();
			DeleteAll(child);
		}
		DELETE_HTML_Element(root);
	}
}

test("SucActual/PredActual #1")
{
	/* An element with two actual children, where each child has a parent inserted
	   by the layout engine. */
	HTML_Element *root;
	HTML_Element *child1;
	HTML_Element *child2;

	Element(root);
	ElementWithInsertedParent(child1)->Under(root);
	ElementWithInsertedParent(child2)->Under(root);

	HTML_Element *fc = root->FirstChildActual();
	HTML_Element *lc = root->LastChildActual();

	verify(fc == child1);
	verify(lc == child2);
	verify(fc->SucActual() == child2);
	verify(lc->PredActual() == child1);
}
finally
{
	DeleteAll(root);
}

test("SucActual/PredActual #2")
{
	/* An element with two actual children, where the first child has a parent inserted
	   by the layout engine. */
	HTML_Element *root;
	HTML_Element *child1;
	HTML_Element *child2;

	Element(root);
	ElementWithInsertedParent(child1)->Under(root);
	Element(child2)->Under(root);

	HTML_Element *fc = root->FirstChildActual();
	HTML_Element *lc = root->LastChildActual();

	verify(fc == child1);
	verify(lc == child2);
	verify(fc->SucActual() == child2);
	verify(lc->PredActual() == child1);
}
finally
{
	DeleteAll(root);
}

test("SucActual/PredActual #3")
{
	/* An element with two actual children, where the last child has a parent inserted
	   by the layout engine. */
	HTML_Element *root;
	HTML_Element *child1;
	HTML_Element *child2;

	Element(root);
	Element(child1)->Under(root);
	ElementWithInsertedParent(child2)->Under(root);

	HTML_Element *fc = root->FirstChildActual();
	HTML_Element *lc = root->LastChildActual();

	verify(fc == child1);
	verify(lc == child2);
	verify(fc->SucActual() == child2);
	verify(lc->PredActual() == child1);
}
finally
{
	DeleteAll(root);
}

test("FirstChildActual #1")
{
	HTML_Element *root;
	HTML_Element *ichild1;
	HTML_Element *ichild1_1;
	HTML_Element *child1;

	Element(root);
	InsertedElement(ichild1)->Under(root);
	InsertedElement(ichild1_1)->Under(ichild1);
	ElementWithInsertedParent(child1)->Under(ichild1);

	verify(root->FirstChildActual() == child1);
}
finally
{
	DeleteAll(root);
}

test("FirstChildActual #2")
{
	HTML_Element *root;
	HTML_Element *ichild1;
	HTML_Element *ichild1_1;

	Element(root);
	InsertedElement(ichild1)->Under(root);
	InsertedElement(ichild1_1)->Under(ichild1);

	verify(ichild1->FirstChildActual() == NULL);
}
finally
{
	DeleteAll(root);
}

test("FirstChildActual #3")
{
	HTML_Element *root;
	HTML_Element *ichild1;
	HTML_Element *ichild1_1;
	HTML_Element *ichild2;
	HTML_Element *ichild2_1;

	Element(root);
	InsertedElement(ichild1)->Under(root);
	InsertedElement(ichild1_1)->Under(ichild1);
	Element(ichild2)->Under(root);
	Element(ichild2_1)->Under(ichild2);

	verify(root->FirstChildActual() == ichild2);
}
finally
{
	DeleteAll(root);
}

test("LastChildActual #1")
{
	HTML_Element *root;
	HTML_Element *ichild1;
	HTML_Element *ichild1_1;
	HTML_Element *child1;

	Element(root);
	InsertedElement(ichild1)->Under(root);
	ElementWithInsertedParent(child1)->Under(ichild1);
	InsertedElement(ichild1_1)->Under(ichild1);

	verify(root->LastChildActual() == child1);
}
finally
{
	DeleteAll(root);
}

test("LastChildActual #2")
{
	HTML_Element *root;
	HTML_Element *ichild1;
	HTML_Element *ichild1_1;

	Element(root);
	InsertedElement(ichild1)->Under(root);
	InsertedElement(ichild1_1)->Under(ichild1);

	verify(ichild1->LastChildActual() == NULL);
}
finally
{
	DeleteAll(root);
}

test("LastChildActual #3")
{
	HTML_Element *root;
	HTML_Element *ichild1;
	HTML_Element *ichild1_1;
	HTML_Element *ichild2;
	HTML_Element *ichild2_1;

	Element(root);
	Element(ichild1)->Under(root);
	Element(ichild1_1)->Under(ichild1);
	InsertedElement(ichild2)->Under(root);
	InsertedElement(ichild2_1)->Under(ichild2);

	verify(root->LastChildActual() == ichild1);
}
finally
{
	DeleteAll(root);
}

test("NextActual/PrevActual")
{
	HTML_Element *root;
	HTML_Element *ichild1;
	HTML_Element *ichild1_1;
	HTML_Element *ichild1_2;
	HTML_Element *ichild2;
	HTML_Element *ichild2_1;
	HTML_Element *ichild2_2;
	HTML_Element *child1;
	HTML_Element *child2;

	Element(root);

	InsertedElement(ichild1)->Under(root);
	InsertedElement(ichild1_1)->Under(ichild1);
	ElementWithInsertedParent(child1)->Under(ichild1);
	InsertedElement(ichild1_2)->Under(ichild1);

	InsertedElement(ichild2)->Under(root);
	InsertedElement(ichild2_1)->Under(ichild1);
	ElementWithInsertedParent(child2)->Under(ichild2);
	InsertedElement(ichild2_2)->Under(ichild1);

	verify(root->NextActual() == child1);
	verify(child1->PrevActual() == root);

	verify(child1->NextActual() == child2);
	verify(child2->PrevActual() == child1);

	verify(child2->NextActual() == NULL);
}
finally
{
	DeleteAll(root);
}
