/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2011-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "OpRequest with generated response test";
require init;
language c++;

include "modules/network/op_url.h";
include "modules/network/op_request.h";
include "modules/network/op_resource.h";
include "modules/network/op_generated_response.h";
include "modules/network/network.h";
include "modules/locale/locale-enum.h";

global {
	OpRequest *singleRequest;

	class RequestListener : public OpRequestListener
	{
	public:
		void OnRequestFailed(OpRequest *req, OpResponse *res, Str::LocaleString error)
		{
			ST_failed("Request failed");
		}

		void OnResponseFinished(OpRequest *req, OpResponse *response)
		{
			if (response->GetResource())
				ST_passed();
			else
				ST_failed("Should get a resource object for the response");
		}
	};

	RequestListener *requestListener = NULL;
}

setup
{
	requestListener = OP_NEW(RequestListener, ());
	singleRequest = NULL;
}

exit
{
	OP_DELETE(singleRequest);
	OP_DELETE(requestListener);
}

test("Initialized")
{
	verify(requestListener != NULL);
}

test("OpRequest generated response test")
	require success "Initialized";
{
	OpURL test_url = OpURL::Make("http://t/generated_test.html");
	OpURL referrer;
	OP_STATUS result = OpRequest::Make(singleRequest, requestListener, test_url, 0, referrer);

	verify(result == OpStatus::OK);
	if (result == OpStatus::OK)
	{
		OpGeneratedResponse *response = NULL;
		result = singleRequest->GenerateResponse(response);
		verify(result == OpStatus::OK);
		verify(response);
		response->GetResource()->EvictFromCache();
		response->SetGeneratedByOpera(TRUE);

		// Test setting and getting X-Frame-Options
		response->SetHTTPFrameOptions("deny");
		OpString8 frame_options;
		response->GetHeader(frame_options, "X-Frame-Options");
		verify_string(frame_options, "deny");

#ifdef _MIME_SUPPORT_
		/** MIME body comment string  */
		OpString value;
		response->GetBodyCommentString(value);
		response->SetBodyCommentString(value);

		/** MIME decode presentation uses big attachment icon */
		response->SetBigAttachmentIcons(TRUE);

		/** Use the  plain text version of the document if it is available */
		response->SetPreferPlaintext(TRUE);

		/** Ignore warnings from the decoding of the document (e-mail specific) */
		response->SetIgnoreWarnings(TRUE);
#endif

		response->WriteDocumentDataUniSprintf(UNI_L("Test"));
		response->WriteDocumentDataFinished();
		OpFileLength length;
		length = response->GetLoadedContentSize();
		verify(length==8);
	}
}

