/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2011-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "OpRequest test parameters";
require init;
language c++;

include "modules/network/op_url.h";
include "modules/network/op_request.h";
include "modules/network/op_response.h";
include "modules/network/op_resource.h";
include "modules/network/network.h";
include "modules/locale/locale-enum.h";

global {
	OpRequest *singleRequest;

	class RequestListener : public OpRequestListener
	{
	public:
		void OnRequestFailed(OpRequest *req, OpResponse *res, Str::LocaleString error)
		{
			ST_failed("Request failed");
		}

		void OnResponseFinished(OpRequest *req, OpResponse *response)
		{
			HeaderList header_list_copy;
			response->CopyAllHeadersL(header_list_copy);

			/** Type of content in the URLs*/
			response->GetContentType();

			/** The HTTP Entity Header*/
			response->GetResource()->SetHTTPEntityTag("Test");
			response->GetHTTPEntityTag();

			response->IsFresh();

			/** Set/Get the MIME type string*/
			response->GetMIMEType();

			/** Get the Original MIME type string*/
			response->GetOriginalMIMEType();

			/** Type of content in the URLs, as originally set*/
			response->GetOriginalContentType();

			/** Is this document's cache in use by any datadescriptors? */
			response->IsCacheInUse();

			/** Is this document's cache entry persistent */
			response->IsCachePersistent();

			/** The reason id for a security level of 1 or 2 */
			response->GetSecurityLowReason();

			/** Is the content of this document trusted? */
			response->IsUntrustedContent();

			/** Was proxy used when the document was loaded */
			response->WasProxyUsed();

			/** Has the header of the document been loaded. This flag is an
			 *	*internal* state flag used by some URL schemes. It may not be set in all cases.
			 *	It MUST NOT be used by non-network code

			/** The received HTTP response code */
			response->GetHTTPResponseCode();

			/** Is this a generated Directory listing? */
			response->IsDirectoryListing();

			/** Retrieve header */
			OpString8 value8, value8b;
			response->GetHeader(value8, value8b);

			/** The received Last modified date*/
			response->GetHTTPLastModified();

			/** The URL part of the Refresh header */
			response->GetHTTPRefreshUrlName();

			/** The received location header */
			response->GetHTTPLocation();

			/** Auto detected character set*/
			response->GetAutodetectCharSet();

			/** The response explanation part of the HTTP response*/
			response->GetHTTPResponseText();

			/** Retrieve a string with all preserved headers from the last response */
			OpString8 headers;
			response->GetHTTPAllResponseHeaders(headers);

			/** Number of bytes loaded from server will be stored in the provided param location */
			response->GetLoadedContentSize();

			/** How long did the Refresh head say we should wait before fetching the given URL?*/
			response->GetHTTPRefreshInterval();

			/** Number of bytes loaded from server will be stored in the provided param location,
			 *	this will force an updated value of the size to be retrieved */
			response->GetLoadedContentSize();

			/** Number of bytes expected will be/is  stored in the provided param location*/
			response->GetContentSize();

			/** Suggested Filename*/
			OpString value;
			response->GetSuggestedFileName(value);

			/** Suggested Filename extension, GetAttributeL only */
			response->GetSuggestedFileNameExtension(value);

			/** Security level of this document (numerical values 0-9, 10 is "unknown") */
			response->GetSecurityStatus();

			/** The last security level text*/
			response->GetSecurityText(value);

			/** Get the Content-Location URL specified by the server*/
			OpURL testurl = response->GetHTTPContentLocationURL();

			time_t time_result;
			/** When does this document's freshness expire. Will be stored in the provided param location */
			time_result = response->GetHTTPExpirationDate();
			time_result += 1;

			/** Is the content generated*/
			response->IsGenerated();

			/** Is the content generated by Opera*/
			response->IsGeneratedByOpera();

#ifdef WEB_TURBO_MODE
			/** The number of bytes transferred from the Turbo proxy, including HTTP protocol overhead. NB! Set is only for internal use! */
			response->GetTurboTransferredBytes();

			/** The number of bytes received by the Turbo proxy when loading this resource, including HTTP protocol overhead.
			 *  NB! This may in special cases return zero even if KTurboTransferredBytes returns non-zero (e.g. host lookup failed). Set is only for internal use! */
			response->GetTurboOriginalTransferredBytes();

			/** Was this Turbo URL loaded in bypass mode (directly from origin server)? */
			response->IsTurboBypassed();

			/** Was the resource compressed by the Opera Turbo Proxy? */
			response->IsTurboCompressed();
#endif // WEB_TURBO_MODE


#ifdef _SECURE_INFO_SUPPORT
			/** Get the document with the security information for this document*/
			response->GetSecurityInformationURL();
#endif

			/** Did the server use a "Content-Disposition:attachment" header? */
			response->IsContentDispositionAttachment();

			OpResource *resource = response->GetResource();
			if (resource)
			{
				resource->GetResourceId();

				resource->SetHTTPPragma("Pragma: no-cache");

#ifdef TRUST_RATING
				resource->SetTrustRating(Domain_Trusted);
				resource->GetTrustRating();
#endif

				resource->GetCacheType();

				resource->PrepareForViewing();

				resource->SetAccessed();

#if defined _LOCALHOST_SUPPORT_ || !defined RAMCACHE_ONLY
				resource->GetCacheFileFullName(value);

				resource->GetCacheFileBaseName(value);
#endif
				ST_passed();
			}
			else
				ST_failed("Failed to get a resource");
		}
	};

	RequestListener *requestListener = NULL;
}

setup
{
	requestListener = OP_NEW(RequestListener, ());
	singleRequest = NULL;
}

exit
{
	OP_DELETE(singleRequest);
	OP_DELETE(requestListener);
}

test("Initialized")
{
	verify(requestListener != NULL);
}

test("OpRequest param test")
	require success "Initialized";
	file uni test_file "blue.jpg";
	async;
{
	OpURL test_url = OpURL::Make("http://t/core/networking/http/cache/data/blue.jpg");
	OP_STATUS result = OpRequest::Make(singleRequest, requestListener, test_url, 0);

	/** Adds a custom header that is sent with this request. */
	singleRequest->AddHTTPHeader("Test", "Header");

	singleRequest->SetCookiesProcessingDisabled(FALSE);

	/** Priority of http request. Higher number means higher priority. */
	singleRequest->SetHTTPPriority(0);

	/** Is this connection specially managed? If so, move the connection
	*	for this request (if a new one is generated) outside the normal max connection rules
	*	NOTE: MUST be used with *extreme* caution
	*	The flag is reset after loading starts.
	*/
	singleRequest->SetExternallyManagedConnection(FALSE);

	/** The MIME type of the POST data for this document*/
	singleRequest->SetHTTPDataContentType("text/html");
	singleRequest->GetHTTPDataContentType();

	/** HTTP authentication username */
	singleRequest->SetHTTPUsername("");

	/** HTTP authentication password */
	singleRequest->SetHTTPPassword("");

	/** Override redirection preference, also obey cache control directives for the override URLs */
	singleRequest->SetOverrideRedirectDisabled(FALSE);

	/** Disable HTTP redirection for this load, also turn off authentication and user interaction */
	singleRequest->SetLimitedRequestProcessing(FALSE);

	/** Get the URL used as a referrer for this request. */
	OpURL testurl = singleRequest->GetReferrerURL();

#ifdef TCP_PAUSE_DOWNLOAD_EXTENSION
	/** If TRUE, pause/block the download, but do not stop the request. If FALSE, resume unblock the connection */
	singleRequest->Pause();
#endif

#ifdef HTTP_CONTENT_USAGE_INDICATION
	/** Indication of current usage for this URL */
	singleRequest->SetHTTPContentUsageIndication(HTTP_UsageIndication_MainDocument);
	singleRequest->GetHTTPContentUsageIndication();
#endif // HTTP_CONTENT_USAGE_INDICATION

#ifdef URL_ALLOW_DISABLE_COMPRESS
	/** Set if a url should not send http compression accept headers */
	singleRequest->SetDisableCompress(FALSE);
#endif

	/** Position in the request that we are requesting that the server stops the response at (if not specified or 0, at end, and not sent) inclusive. zero-based*/
	singleRequest->SetRangeEnd(0);

	/** Position in the request that we are requesting that the server starts the response at (if not specified or 0, at beginning, and not sent). zero-based */
	singleRequest->SetRangeStart(0);

	if (result != OpStatus::OK)
	{
		ST_failed("Failed to create request");
	}
	else
	{
		singleRequest->SendRequest();
	}
}
