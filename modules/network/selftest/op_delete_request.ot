/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2011-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "OpRequest_delete request test";
require init;
language c++;

include "modules/network/op_url.h";
include "modules/network/op_request.h";
include "modules/network/op_response.h";
include "modules/network/network.h";
include "modules/locale/locale-enum.h";

global {
	OpRequest *singleRequest;
	OpRequest *singleRequest2;

	class RequestListener : public OpRequestListener
	{
	public:
		void OnRequestFailed(OpRequest *req, OpResponse *res, Str::LocaleString error)
		{
			ST_failed("Request failed");
		}

		virtual void OnRequestRedirected(OpRequest *req, OpResponse *res, OpURL from, OpURL to)
		{
			//Test deleting req in redirect.
			OP_DELETE(req);
			ST_passed();
		}

		void OnResponseDataLoaded(OpRequest *req, OpResponse *res)
		{
			counter++;
			if (counter==3)
			{
				OP_DELETE(req);
				ST_passed();
			}
		}

		void OnResponseFinished(OpRequest *req, OpResponse *response)
		{
			OP_DELETE(req);
			ST_failed("Unexpected OnResponseFinished callback");
		}

		int counter;
	};

	RequestListener *requestListener = NULL;
}

setup
{
	requestListener = OP_NEW(RequestListener, ());
	singleRequest = NULL;
	singleRequest2 = NULL;
}

exit
{
	OP_DELETE(requestListener);
}

test("Initialized")
{
	verify(requestListener != NULL);
}

test("Delete OpRequest test")
	require success "Initialized";
	async;
{
	OpURL test_url = OpURL::Make("http://t/core/networking/http/cache/data/yellow.jpg");
	OpURL referrer;
	OP_STATUS result = OpRequest::Make(singleRequest, requestListener, test_url, 0, referrer);

	if (result != OpStatus::OK)
	{
		ST_failed("Failed to create request");
	}
	else
	{
		singleRequest->SendRequest();
		OP_DELETE(singleRequest);

		result = OpRequest::Make(singleRequest2, requestListener, test_url, 0, referrer);
		if (result != OpStatus::OK)
		{
			ST_failed("Failed to create request");
		}
		else
		{
			OP_DELETE(singleRequest2);
			ST_passed();
		}
	}
}

test("Delete OpRequest in redirect test")
	require success "Delete OpRequest test";
	async;
{
	OpURL test_url = OpURL::Make("http://t/resources/scripts/redirecttourl.php?url=http://t/core/networking/http/cache/data/blue.jpg");
	OpURL referrer;
	OP_STATUS result = OpRequest::Make(singleRequest, requestListener, test_url, 0, referrer);

	if (result != OpStatus::OK)
	{
		ST_failed("Failed to create request");
	}
	else
	{
		singleRequest->SendRequest();
	}
}

test("Delete OpRequest during download")
	require success "Delete OpRequest in redirect test";
	async;
{
	OpURL test_url = OpURL::Make("http://t/core/networking/http/customResponse/06696140-00.pdf");
	OpURL referrer;
	OP_STATUS result = OpRequest::Make(singleRequest, requestListener, test_url, 0, referrer);

	if (result != OpStatus::OK)
	{
		ST_failed("Failed to create request");
	}
	else
	{
		requestListener->counter = 0;
		singleRequest->GetLoadPolicy().SetReloadPolicy(URL_Reload_Full);
		singleRequest->AddHTTPHeader("Test", "Test");
		singleRequest->SendRequest();
	}
}
