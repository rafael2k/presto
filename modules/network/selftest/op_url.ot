/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2011-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "OpURL tests";
require init;
language c++;

include "modules/network/op_url.h";
include "modules/network/op_request.h";
include "modules/network/op_response.h";
include "modules/network/op_resource.h";
include "modules/network/network.h";
include "modules/url/url_man.h";
include "modules/locale/locale-enum.h";

table testurls
	//input_url,									redirect_code, ret code, exp.fail, request, multipart)
	( const char *,										int ,  unsigned int, int, OpRequest *, int)
{
	{ "http://apache2.lab.osa:8081/http/200.php", 				0,		200,	0,	NULL,	0,},
	{ "http://t/core/networking/multipart/mixed/001.php",		0,		200,	0,	NULL,	1,},
	{ "http://t/resources/httpstatuscodes/200.php",				0,		200,	0,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/201.php", 			0,		201,	0,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/202.php", 			0,		202,	0,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/203.php", 			0,		203,	0,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/204.php", 			0,		204,	1,	NULL,	0,},//This fails, it probably should not!
	{ "http://t/resources/httpstatuscodes/205.php", 			0,		205,	0,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/206.php", 			0,		206,	0,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/300.php", 			0,		300,	0,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/301.php", 			0,		301,	0,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/302.php", 			0,		302,	0,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/303.php", 			0,		303,	0,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/304.php", 			0,		0,		0,	NULL,	0,},// 304 return code caused CT-2516
	{ "http://t/resources/httpstatuscodes/305.php", 			0,		305,	0,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/306.php", 			0,		306,	0,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/307.php", 			0,		307,	0,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/400.php", 			0,		400,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/401.php", 			0,		401,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/402.php", 			0,		402,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/403.php", 			0,		403,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/404.php", 			0,		404,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/405.php", 			0,		405,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/406.php", 			0,		406,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/407.php", 			0,		407,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/408.php", 			0,		408,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/409.php", 			0,		409,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/410.php", 			0,		410,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/411.php", 			0,		411,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/412.php", 			0,		412,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/413.php", 			0,		413,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/414.php", 			0,		414,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/415.php", 			0,		415,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/416.php", 			0,		416,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/417.php", 			0,		417,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/500.php", 			0,		500,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/501.php", 			0,		501,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/502.php", 			0,		502,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/503.php", 			0,		503,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/504.php", 			0,		504,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/505.php", 			0,		505,	1,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/600.php", 			0,		600,	1,	NULL,	0,},
	{ "https://certo3.opera.com:6736/",							0,		0,		1,	NULL,	0,},
	{ "https://certo3.opera.com:6691/",							0,		0,		1,	NULL,	0,},
	{ "https://certo.opera.com:6697/",							0,		0,		1,	NULL,	0,},
	{ "http:notvalid",											0,		0,		1,	NULL,	0,},
}

global {

	int requestFinishedCounter;
	int requestCounter;

	//We have a few helper functions so that we can loop through the table to find and verify results.
	void OpURLVerifyRedirect(OpRequest *req, OpResponse *res)
	{
		iterate(input_url, redirect, return_code, expect_fail, request) from testurls
		{
			if (req == request)
			{
				OpResponse *response = req->GetResponse();
				if (!response)
				{
					ST_failed("Failed to get response for %s", input_url);
					return;
				}
				if (!redirect)
					ST_failed("Got an unexpected redirect for %s", input_url);
			}
		}
	}

	void OpURLVerifyHeaderLoaded(OpRequest *req, OpResponse *res)
	{
		iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
		{
			if (req == request)
			{
				OpResponse *response = req->GetResponse();
				if (!response)
				{
					ST_failed("Failed to get response for %s", input_url);
					return;
				}
				if (!expect_fail && response->GetHTTPResponseCode() != return_code)
					ST_failed("Failed to get correct return code for %s, got %d, expected %d", input_url, response->GetHTTPResponseCode(), return_code);
			}
		}
	}

	void OpURLVerifyRequestMultipartBodyLoaded(OpRequest *req, OpResponse *res)
	{
		//For multiparts we also have to retrieve data in order for the remaining messages to be sent.
		OpResource *resource = res->GetResource();
		if (resource)
		{
			OpDataDescriptor *desc = NULL;
			resource->GetDataDescriptor(desc);
			if (desc)
			{
				OpData data;
				desc->RetrieveData(data);
				UniString string;
				desc->RetrieveData(string); // Not that there will be any data left at this point

				desc->GetContentType();
				desc->IsFinished();
				desc->GetCharsetID();
				desc->StopGuessingCharset();
				desc->GetFirstInvalidCharacterOffset();
			}
			OP_DELETE(desc);
		}

		iterate(input_url, redirect_code, return_code, expect_fail, request, multipart) from testurls
		{
			if (req == request)
			{
				OpResponse *response = req->GetResponse();
				if (!response)
				{
					ST_failed("Failed to get response for %s", input_url);
					return;
				}
				if (!multipart)
					ST_failed("This should not have ended up as a multipart: %s", input_url);
			}
		}
	}

	void OpURLVerifyRequestFailed(OpRequest *req, OpResponse *response)
	{
		iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
		{
			if (req == request)
			{
				if (!response)
				{
					ST_failed("Failed to get response for %s", input_url);
					return;
				}
				if (!expect_fail)
				{
					ST_failed("Failed to load %s %d %s", input_url, response->GetHTTPResponseCode(), response->GetHTTPResponseText());
				}
			}
		}
	}

	void OpURLVerifyRequestFinished(OpRequest *req, OpResponse *res)
	{
		iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
		{
			if (req == request)
			{
				OpResponse *response = req->GetResponse();
				if (!response)
				{
					ST_failed("Failed to get response for %s", input_url);
					return;
				}
				if (expect_fail)
				{
					ST_failed("Expected this to fail, but we finished loading successfully %s %d %s", input_url, response->GetHTTPResponseCode(), response->GetHTTPResponseText());
				}
				if (response->GetHTTPResponseCode() != return_code)
					ST_failed("Wrong return code for %s, got %d, expected %d", input_url, response->GetHTTPResponseCode(), return_code);
			}
		}
	}

	class RequestListener : public OpRequestListener
	{
		ST_opurl_tests * test_class;
	public:
		RequestListener(ST_opurl_tests * a_test_class) :test_class(a_test_class) {};

		void OnResponseAvailable(OpRequest *req, OpResponse *res)
		{
			test_class->OpURLVerifyHeaderLoaded(req, res);
		}

		void OnRequestRedirected(OpRequest *req, OpResponse *res, OpURL from, OpURL to)
		{
			test_class->OpURLVerifyRedirect(req, res);
		}

		void OnResponseFinished(OpRequest *req, OpResponse *res)
		{
			test_class->OpURLVerifyRequestFinished(req, res);
			test_class->requestFinishedCounter++;

			if (test_class->requestCounter == test_class->requestFinishedCounter)
			{
				test_class->requestCounter = 0;
				test_class->requestFinishedCounter = 0;
				ST_passed();
			}
		}

		void OnRequestFailed(OpRequest *req, OpResponse *res, Str::LocaleString error)
		{
			test_class->OpURLVerifyRequestFailed(req, res);
			test_class->requestFinishedCounter++;

			if (test_class->requestCounter == test_class->requestFinishedCounter)
			{
				test_class->requestCounter = 0;
				test_class->requestFinishedCounter = 0;
				ST_passed();
			}
		}

		void OnResponseMultipartBodyLoaded(OpRequest *req, OpResponse *res)
		{
			test_class->OpURLVerifyRequestMultipartBodyLoaded(req, res);
		}

	};

	RequestListener *requestListener = NULL;
}

setup
{
	requestFinishedCounter = 0;
	requestCounter = 0;
	requestListener = OP_NEW(RequestListener, (this));
}

exit
{
	iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
	{
		OP_DELETE(request);
		request = NULL;
	}

	OP_DELETE(requestListener);
	requestListener = NULL;

	// Do a shutdown of the pending connections
	urlManager->FreeUnusedResources(TRUE);
}

test("Initialized")
{
	verify(requestListener != NULL);
}

subtest VerifyOpURL(OpURL url)
{
	OpString8 test8String;
	OpString testString16;
	OpStringC cTestURL;
	OpString testString;

	/** Does this OpURL have a valid URL? */
	verify(!url.IsEmpty());
	url.GetType();
	url.GetRealType();
	url.GetTypeName(test8String);
	url.GetResolvedPort();
	url.GetServerPort();
	url.GetFragmentName(test8String);
	url.GetFragmentName(testString);
	url.GetHostName(test8String);
	url.GetHostName(testString);
	url.GetPassword(test8String);
	url.GetQuery(test8String);
	url.GetQuery(testString);
	url.GetUsername(test8String);
	url.GetHostNameAndPort(test8String);
	url.GetHostNameAndPort(testString);
	url.GetName(test8String);
	url.GetName(testString);

	url.GetNameUsername(test8String);
	url.GetNameUsername(testString);
	url.GetNameWithFragment(test8String);
	url.GetNameWithFragment(testString);
	url.GetNameWithFragmentUsername(test8String);
	url.GetNameWithFragmentUsername(testString);
	url.GetNameForData(testString);
	url.GetPath(test8String);
	url.GetPath(testString);
	url.GetPathAndQuery(test8String);
	url.GetPathAndQuery(testString);
	url.GetPathFollowSymlink(testString);
#ifdef ERROR_PAGE_SUPPORT
	url.GetInvalidURLKind();
#endif // ERROR_PAGE_SUPPORT
}

test("OpRequest GET tests")
	require success "Initialized";
	async;
{
	iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
	{
		request = NULL;
		OpURL test_url = OpURL::Make(input_url);

		VerifyOpURL(test_url);
		OpURL referrer;
		OP_STATUS result = OpRequest::Make(request, requestListener, test_url, 0, referrer);
		if (!request || result != OpStatus::OK)
		{
			ST_failed("Failed to create request");
		}
		else
		{
			requestCounter++;
			request->SendRequest();
		}
	}
}

test("OpRequest HEAD tests")
	require success "OpRequest GET tests";
	async;
{
	iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
	{
		OP_DELETE(request);
		request = NULL;
	}
	iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
	{
		request = NULL;
		OpURL test_url = OpURL::Make(input_url);

		VerifyOpURL(test_url);
		OpURL referrer;
		OP_STATUS result = OpRequest::Make(request, requestListener, test_url, 0, referrer);
		request->SetHTTPMethod(HTTP_Head);
		if (!request || result != OpStatus::OK)
		{
			ST_failed("Failed to create request");
		}
		else
		{
			requestCounter++;
			request->SendRequest();
		}
	}
}

test("OpRequest CUSTOM tests")
	require success "OpRequest HEAD tests";
	async;
{
	iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
	{
		OP_DELETE(request);
		request = NULL;
	}
	iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
	{
		request = NULL;
		OpURL test_url = OpURL::Make(input_url);

		VerifyOpURL(test_url);
		OP_STATUS result = OpRequest::Make(request, requestListener, test_url, 0);
		request->SetCustomHTTPMethod("CUSTOM");
		if (!request || result != OpStatus::OK)
		{
			ST_failed("Failed to create request");
		}
		else
		{
			requestCounter++;
			request->SendRequest();
		}
	}
}

test("OpRequest PUT tests")
	require success "OpRequest CUSTOM tests";
	async;
{
	iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
	{
		OP_DELETE(request);
		request = NULL;
	}
	iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
	{
		request = NULL;
		OpURL test_url = OpURL::Make(input_url);

		VerifyOpURL(test_url);
		OP_STATUS result = OpRequest::Make(request, requestListener, test_url, 0);
		request->SetHTTPMethod(HTTP_Put);
		if (!request || result != OpStatus::OK)
		{
			ST_failed("Failed to create request");
		}
		else
		{
			requestCounter++;
			request->SetHTTPData("Test", FALSE);
			request->SendRequest();
		}
	}
}

test("OpRequest POST tests")
	require success "OpRequest PUT tests";
	async;
{
	iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
	{
		OP_DELETE(request);
		request = NULL;
	}
	iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
	{
		request = NULL;
		OpURL test_url = OpURL::Make(input_url);

		VerifyOpURL(test_url);
		OP_STATUS result = OpRequest::Make(request, requestListener, test_url, 0);
		request->SetHTTPMethod(HTTP_Post);
		if (!request || result != OpStatus::OK)
		{
			ST_failed("Failed to create request");
		}
		else
		{
			requestCounter++;
			request->SetHTTPData("Test", FALSE);
			request->SendRequest();
		}
	}
}

test("OpURL::operator==")
{
	URL a = g_url_api->GetURL("http://www.example.com/", NULL, FALSE, 0);
	URL b = g_url_api->GetURL("http://www.example.com/", NULL, TRUE, 0);
	URL c = g_url_api->GetURL("http://www.example.com/", NULL, FALSE, 1);
	verify(!(a == b)); // Unique URL objects don't match, but as OpURL they do
	verify(!(a == c)); // URL objects in different contexts don't match, but as OpURL they do
	verify(OpURL(a) == OpURL(b));
	verify(OpURL(a) == OpURL(c));

	// Fragments, casing and escaping are ignored for both URL and OpURL
	URL d = g_url_api->GetURL("http://username:password@www.example.com:80/path?query#fragment");
	URL e_p = g_url_api->GetURL("htTP://u%73ername:pas%73word@WwW.Example.co%4d/other");
	URL e = g_url_api->GetURL(e_p,"pa%74h?quer%79#fragment2");
	verify(d == e);
	verify(OpURL(d) == OpURL(e));

	URL f = g_url_api->GetURL("https://username:password@www.example.com:80/path?query#fragment");
	URL g = g_url_api->GetURL("http://username2:password@www.example.com:80/path?query#fragment");
	URL h = g_url_api->GetURL("http://username:password2@www.example.com:80/path?query#fragment");
	URL i = g_url_api->GetURL("http://username:password@www2.example.com:80/path?query#fragment");
	URL j = g_url_api->GetURL("http://username:password@www.example.com:802/path?query#fragment");
	URL k = g_url_api->GetURL("http://username:password@www.example.com:80/path2?query#fragment");
	URL l = g_url_api->GetURL("http://username:password@www.example.com:80/path?query2#fragment");
	verify(!(OpURL(d) == OpURL(f)));
	verify(!(OpURL(d) == OpURL(g)));
	verify(!(OpURL(d) == OpURL(h)));
	verify(!(OpURL(d) == OpURL(i)));
	verify(!(OpURL(d) == OpURL(j)));
	verify(!(OpURL(d) == OpURL(k)));
	verify(!(OpURL(d) == OpURL(l)));
}
