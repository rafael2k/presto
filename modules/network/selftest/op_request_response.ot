/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2011-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "OpRequest response test";
require init;
language c++;

include "modules/network/op_url.h";
include "modules/network/op_request.h";
include "modules/network/op_response.h";
include "modules/network/op_resource.h";
include "modules/network/op_data_descriptor.h";
include "modules/network/network.h";
include "modules/opdata/UniString.h";
include "modules/locale/locale-enum.h";

global {
	OpRequest *singleRequest;
	OpRequest *singleRequest2;
	OpRequest *slicedRequest;
	OpRequest *redirectRequest;

	class RequestListener : public OpRequestListener
	{
	public:
		void OnRequestFailed(OpRequest *req, OpResponse *res, Str::LocaleString error)
		{
			ST_failed("Request failed");
		}

		void OnResponseFinished(OpRequest *req, OpResponse *response)
		{
			if (response->GetResource())
			{
				OpAutoVector<StorageSegment> ranges;
				OP_STATUS op_err = response->GetResource()->GetBufferedRanges(ranges);
				if(OpStatus::IsError(op_err))
				{
					ST_failed("Error calling GetBufferedRanges");
				}
				else
					ST_passed();
			}
			else
				ST_failed("Should get a resource object for the response");
		}
	};

	class SlicedRequestListener : public OpRequestListener
	{
	public:
		OpDataDescriptor *dd;
		UniString content;
		int nothing_loaded_count;

		SlicedRequestListener() : dd(NULL), nothing_loaded_count(0) { }
		~SlicedRequestListener() { OP_DELETE(dd); dd = NULL; }

		void OnRequestFailed(OpRequest *req, OpResponse *res, Str::LocaleString error)
		{
			ST_failed("Request failed");
		}

		void OnResponseAvailable(OpRequest *req, OpResponse *response)
		{
			OpResource *resource = response->GetResource();
			if (!resource)
				ST_failed("Unable to get resource");
			else if (OpStatus::IsError(resource->GetDataDescriptor(dd)))
				ST_failed("Unable to get data descriptor");
		}

		void OnResponseDataLoaded(OpRequest *req, OpResponse *response)
		{
			if (dd)
			{
				size_t length_before = content.Length();
				dd->RetrieveData(content, 11); // Read a size-limited chunk before reading the rest
				dd->RetrieveData(content);
				if (content.Length() == length_before)
				{
					nothing_loaded_count++;
					if (nothing_loaded_count == 10)
						ST_failed("Spinning on MSG_URL_DATA_LOADED");
				}
			}
		}

		void OnResponseFinished(OpRequest *req, OpResponse *response)
		{
			OnResponseDataLoaded(req, response); // Read out any last data
			ST_passed();
		}
	};

	class RedirectRequestListener : public OpRequestListener
	{
	public:
		OpURL from;
		OpURL to;
		int redirect_count;

		RedirectRequestListener() : redirect_count(0) {}

		void OnRequestRedirected(OpRequest *req, OpResponse *res, OpURL _from, OpURL _to)
		{
			if (!(from == _from) || !(to == _to) || req->GetResponse() != res || !(res->GetURL() == from))
				ST_failed("Unexpected parameter values in OnRequestRedirected");
			redirect_count++;
		}

		void OnRequestFailed(OpRequest *req, OpResponse *res, Str::LocaleString error)
		{
			ST_failed("Request failed");
		}

		void OnResponseFinished(OpRequest *req, OpResponse *response)
		{
			if (req->GetResponse() == response &&
				req->GetFirstResponse() != NULL &&
				req->GetFirstResponse() != response &&
				req->GetFirstResponse()->GetHTTPResponseCode() >= 300 &&
				req->GetFirstResponse()->GetHTTPResponseCode() < 400 &&
				redirect_count == 1 &&
				req->GetResponse()->GetRedirectedFromResponse() == req->GetFirstResponse() &&
				req->GetFirstResponse()->GetRedirectedToResponse() == req->GetResponse() &&
				req->GetFirstResponse()->GetURL() == from &&
				req->GetResponse()->GetURL() == to)
			{
				ST_passed();
			}
			else
				ST_failed("Expected proper redirect");
		}
	};

	RequestListener *requestListener = NULL;
	SlicedRequestListener *slicedRequestListener = NULL;
	RedirectRequestListener *redirectRequestListener = NULL;
}

setup
{
	requestListener = OP_NEW(RequestListener, ());
	singleRequest = NULL;
	singleRequest2 = NULL;
	slicedRequest = NULL;
	slicedRequestListener = OP_NEW(SlicedRequestListener, ());
	redirectRequest = NULL;
	redirectRequestListener = OP_NEW(RedirectRequestListener, ());
}

exit
{
	OP_DELETE(singleRequest);
	OP_DELETE(singleRequest2);
	OP_DELETE(requestListener);
	OP_DELETE(slicedRequest);
	OP_DELETE(slicedRequestListener);
	OP_DELETE(redirectRequest);
	OP_DELETE(redirectRequestListener);
}

test("Initialized")
{
	verify(requestListener != NULL);
	verify(slicedRequestListener != NULL);
	verify(redirectRequestListener != NULL);
}

//First let us test a combination of a normal get request, then a request where we expect to just pick up the cached response:

test("OpRequest test")
	require success "Initialized";
	async;
{
	OpURL test_url = OpURL::Make("http://t/core/networking/http/cache/data/blue.jpg");
	OP_STATUS result = OpRequest::Make(singleRequest, requestListener, test_url, 0);

	if (result != OpStatus::OK)
	{
		ST_failed("Failed to create request");
	}
	else
	{
		singleRequest->SendRequest();
	}
}

test("OpRequest cached response test")
	require success "OpRequest test";
	async;
{
	OpURL test_url = OpURL::Make("http://t/core/networking/http/cache/data/blue.jpg");
	OP_STATUS result = OpRequest::Make(singleRequest2, requestListener, test_url, 0);

	if (result == OpStatus::OK)
	{
		singleRequest2->SendRequest();
	}
}

test("OpRequest response sliced into odd-sized chunks")
	require success "Initialized";
	async;
{
	OpURL test_url = OpURL::Make("http://t/resources/scripts/slice-and-dice.cgi?file=core/networking/http/cache/data/blue.jpg&parts=193,d1,195");
	if (OpStatus::IsError(OpRequest::Make(slicedRequest, slicedRequestListener, test_url, 0)))
	{
		ST_failed("Failed to create request");
	}
	else
	{
		slicedRequest->GetLoadPolicy().SetReloadPolicy(URL_Reload_Full);
		slicedRequest->SendRequest();
	}
}


test("OpRequest redirected")
	require success "Initialized";
	async;
{
	OpURL test_url = OpURL::Make("http://t/resources/scripts/redirecttourl.php?url=http://t/core/networking/http/cache/data/blue.jpg");
	redirectRequestListener->from = test_url;
	redirectRequestListener->to = OpURL::Make("http://t/core/networking/http/cache/data/blue.jpg");
	if (OpStatus::IsError(OpRequest::Make(redirectRequest, redirectRequestListener, test_url, 0)))
	{
		ST_failed("Failed to create request");
	}
	else
	{
		redirectRequest->GetLoadPolicy().SetReloadPolicy(URL_Reload_Full);
		redirectRequest->SendRequest();
	}
}
