/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2011-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "OpBatchRequest tests";
require init;
language c++;

include "modules/network/op_url.h";
include "modules/network/op_request.h";
include "modules/network/op_response.h";
include "modules/network/op_resource.h";
include "modules/network/op_batch_request.h";
include "modules/network/network.h";
include "modules/locale/locale-enum.h";

table testurls
	( const char *, int , unsigned int , int , OpRequest *, int)
{
	{ "http://t/resources/httpstatuscodes/200.php",				0,		200,	0,	NULL,	0,},
	{ "http://t/resources/httpstatuscodes/201.php",				0,		201,	0,	NULL,	0,},
}

global {

	int batchRequestFinishedCounter;
	int batchRequestCounter;
	void OpURLVerifyRequestFinished(OpRequest *req, OpResponse *res)
	{
		iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
		{
			if (req == request)
			{
				OpResponse *response = req->GetResponse();
				if (!response)
				{
					ST_failed("Failed to get response for %s", input_url);
					return;
				}
				if (response->GetHTTPResponseCode() != return_code)
					ST_failed("Wrong return code for %s, got %d, expected %d", input_url, response->GetHTTPResponseCode(), return_code);
			}
		}
	}

	void OpURLVerifyRequestFailed(OpRequest *req, OpResponse *res)
	{
		iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
		{
			if (req == request)
			{
				ST_failed("Failed to load %s", input_url);
			}
		}
	}

	class BatchRequestListener : public OpBatchRequestListener
	{
	private:
		ST_opbatchrequest_tests * test_class;
	public:
		BatchRequestListener(ST_opbatchrequest_tests * a_test_class) :test_class(a_test_class) {};

		void OnRequestFailed(OpRequest *req, OpResponse *res, Str::LocaleString error)
		{
			test_class->OpURLVerifyRequestFailed(req, res);
		}

		void OnResponseFinished(OpRequest *req, OpResponse *res)
		{
			test_class->OpURLVerifyRequestFinished(req, res);
			test_class->batchRequestFinishedCounter++;
		}

		void OnBatchResponsesFinished()
		{
			if (test_class->batchRequestCounter == test_class->batchRequestFinishedCounter)
				ST_passed();
		}

	};

	BatchRequestListener *batchRequestListener;
	OpBatchRequest *batch = NULL;
}

setup
{
	batchRequestFinishedCounter = 0;
	batchRequestCounter = 0;
	batchRequestListener = OP_NEW(BatchRequestListener, (this));
	OpBatchRequest::Make(batch, batchRequestListener);
}

exit
{
	batch->ClearRequests();
	OP_DELETE(batch);

	OP_DELETE(batchRequestListener);
	batchRequestListener = NULL;
}
/*
test("Initialized")
{
	verify(batchRequestListener != NULL);
}


test("OpRequest test")
	require success "Initialized";
	async;
{
	iterate(input_url, redirect_code, return_code, expect_fail, request) from testurls
	{
		request = NULL;
		OpURL test_url = Network::GetRL(input_url);
		Network::MakeUnique(test_url);

		OpURL referrer;
		OP_STATUS result = OpRequest::Make(request, test_url, referrer);
		if (result != OpStatus::OK)
		{
			ST_failed("Failed to create request");
		}
		else
		{
			batchRequestCounter++;
			batch->SendRequest(request);
		}
	}
}
*/
