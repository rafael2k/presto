/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2012-2012 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "OpResource save file";
require init;
require HAVE_DISK;
language c++;

include "modules/network/op_url.h";
include "modules/network/op_request.h";
include "modules/network/op_response.h";
include "modules/network/op_resource.h";
include "modules/network/network.h";
include "modules/locale/locale-enum.h";

global {
	enum TestType {
		After_OnResponseFinished,
		After_OnResponseAvailable,
		After_Third_OnResponseDataLoaded
	};

	class RequestListener : public OpRequestListener, public OpResourceSaveFileListener
	{
	public:
		TestType test_type;
		const uni_char *test_filename;
		int count_OnResponseDataLoaded;
		BOOL save_file_in_progress;
		BOOL response_finished;
		OpFileLength save_file_final_progress;
		OpFileLength expected_length;
		char error[256];

		void SetupTest(TestType t, const uni_char *f, OpFileLength el)
		{
			test_type = t;
			test_filename = f;
			expected_length = el;
			count_OnResponseDataLoaded = 0;
			save_file_in_progress = FALSE;
			response_finished = FALSE;
			save_file_final_progress = 0;
			error[0] = 0;
		}

		void Error(const char *fmt, ...)
		{
			if (error[0] != 0)
				return;
			va_list ap;
			va_start(ap, fmt);
			op_vsnprintf(error, 256, fmt, ap);
			va_end(ap);
		}

		void StartFileSave(OpResponse *response)
		{
			OpResource *resource = response->GetResource();
			if (resource)
			{
				if (OpStatus::IsSuccess(resource->SaveAsFile(test_filename, this)))
					save_file_in_progress = TRUE;
				else
					Error("Failed to start async SaveAsFile operation");
			}
			else
				Error("Failed to get a resource");
		}

		void Finish()
		{
			// Test is over when we have received OnResponseFinished and OnSaveFileFinished
			if (response_finished && !save_file_in_progress)
			{
				if (error[0] != 0)
					ST_failed(error);
				else
					ST_passed();
			}
		}

		// OpRequestListener implementation

		void OnRequestFailed(OpRequest *req, OpResponse *res, Str::LocaleString error)
		{
			Error("Request failed");
			response_finished = TRUE;
			Finish();
		}

		void OnResponseAvailable(OpRequest *req, OpResponse *response)
		{
			if (test_type == After_OnResponseAvailable)
				StartFileSave(response);
		}

		void OnResponseDataLoaded(OpRequest *req, OpResponse *response)
		{
			count_OnResponseDataLoaded ++;
			if (test_type == After_Third_OnResponseDataLoaded && count_OnResponseDataLoaded == 3)
				StartFileSave(response);
		}

		void OnResponseFinished(OpRequest *req, OpResponse *response)
		{
			response_finished = TRUE;

			if (test_type == After_OnResponseFinished)
				StartFileSave(response);
			else if (test_type == After_Third_OnResponseDataLoaded && count_OnResponseDataLoaded < 5)
				Error("Too few OnResponseDataLoaded calls");

			Finish();
		}

		// OpResourceSaveFileListener implementation

		void OnSaveFileProgress(OpFileLength bytes_saved, OpFileLength length)
		{
			if ((int)bytes_saved < 0)
				Error("Unexpected bytes_saved: %x", (int)bytes_saved); // FILE_LENGTH_NONE or something?
			if ((int)length < 0)
				Error("Unexpected length: %x", (int)length); // FILE_LENGTH_NONE or something?
			if (bytes_saved > length)
				Error("bytes_saved (%d) > length (%d)", (int)bytes_saved, (int)length);
			if (length != 0 && length != expected_length)
				Error("Wrong progress length: %d (expected %d)", (int)length, (int)expected_length);
			save_file_final_progress = bytes_saved;
		}

		void OnSaveFileFinished(OP_STATUS status, OpFileLength bytes_saved, OpFileLength length)
		{
			save_file_in_progress = FALSE;

			if (OpStatus::IsError(status))
				Error("Async SaveAsFile operation failed, status: %d", (int)status);
			else if (save_file_final_progress != bytes_saved)
				Error("Missing callback for final progress");
			else if (bytes_saved != length)
				Error("Not all bytes saved: %d out of %d", (int)bytes_saved, (int)length);
			else if (expected_length != 0 && bytes_saved != expected_length)
				Error("Unexpected file length: %d (expected %d)", (int)bytes_saved, (int)expected_length);
			else if (bytes_saved == 0)
				Error("Empty file");

			// Check and delete the temporary test file
			OpFile d;
			if (OpStatus::IsSuccess(d.Construct(test_filename)))
			{
				OpFileLength len;
				if (OpStatus::IsSuccess(d.GetFileLength(len)))
				{
					if (expected_length != 0 && len != expected_length)
						Error("Unexpected physical file length: %d (expected %d)", (int)len, (int)expected_length);
				}
				else
					Error("Unable to determine physical file length");
				OpStatus::Ignore(d.Delete());
			}

			Finish();
		}
	};

	OpRequest *singleRequest;
	RequestListener requestListener;
}

setup
{
	singleRequest = NULL;
}

exit
{
	OP_DELETE(singleRequest);
}

table Tests(const char *, TestType)
{
	{ "OpResource::SaveAsFile after OnResponseFinished", After_OnResponseFinished },
	{ "OpResource::SaveAsFile after OnResponseAvailable", After_OnResponseAvailable },
	{ "OpResource::SaveAsFile after third OnResponseDataLoaded", After_Third_OnResponseDataLoaded }
}

foreach (test_name, test_type) from Tests
{
	test(test_name)
		file uni test_file "test.pdf";
		async;
	{
		if (singleRequest) {
			OP_DELETE(singleRequest);
			singleRequest = NULL;
		}

		requestListener.SetupTest(test_type, test_file, 1094085);

		OpURL test_url = OpURL::Make("http://t/core/networking/http/customResponse/06696140-00.pdf");
		OP_STATUS result = OpRequest::Make(singleRequest, &requestListener, test_url, 0);

		if (OpStatus::IsSuccess(result))
		{
			singleRequest->GetLoadPolicy().SetReloadPolicy(URL_Reload_Full);
			singleRequest->SendRequest();
		}
		else
			ST_failed("Failed to create request");
	}
}
