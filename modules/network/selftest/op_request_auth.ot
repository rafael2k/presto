/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2011-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "OpRequest auth test";
require init;
language c++;

include "modules/network/op_url.h";
include "modules/network/op_request.h";
include "modules/network/op_response.h";
include "modules/network/op_resource.h";
include "modules/network/network.h";
include "modules/locale/locale-enum.h";

global {
	OpRequest *singleRequest;

	class RequestListener : public OpRequestListener
	{
	public:
		void OnRequestFailed(OpRequest *req, OpResponse *res, Str::LocaleString error)
		{
			ST_passed(); // Since we declined to authenticate
		}

		void OnAuthenticationRequired(OpRequest *req, OpAuthenticationCallback* callback)
		{
			callback->CancelAuthentication();
		}

		void OnResponseFinished(OpRequest *req, OpResponse *response)
		{
			ST_failed("Request should have failed");
		}
	};

	RequestListener *requestListener = NULL;
}

setup
{
	requestListener = OP_NEW(RequestListener, ());
	singleRequest = NULL;
}

exit
{
	OP_DELETE(singleRequest);
	OP_DELETE(requestListener);
}

test("Initialized")
{
	verify(requestListener != NULL);
}

test("OpRequest param test")
	require success "Initialized";
	async;
{
	OpURL test_url = OpURL::Make("http://critic.oslo.osa/");
	OpURL referrer;
	OP_STATUS result = OpRequest::Make(singleRequest, requestListener, test_url, 0, referrer);


	if (result != OpStatus::OK)
	{
		ST_failed("Failed to create request");
	}
	else
	{
		singleRequest->SendRequest();
	}
}
