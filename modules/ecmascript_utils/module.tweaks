TWEAK_ESUTILS_TIMESLICE_LENGTH                          jl

        Defines the number of milliseconds the ECMAScript scheduler will aim
        at executing scripts for each time.  It should be short enough for
        Opera to remain reasonably responsive during script execution, but if
        too short, scripts will run slower due to increased overhead.  Note
        that the scheduler will aim for this timeslice length but is quite
        capable of missing it completely.  Also note that if timer resolution
        (the increase frequency of OpSystemInfo::GetRuntimeMS()) is low,
        results may be slightly unreliable.  Note that some scripts
        will use a different timeslice, as defined in
        TWEAK_ESUTILS_SYNC_TIMESLICE_LENGTH.

        Category  : setting
        Define    : ESUTILS_TIMESLICE_LENGTH
        Value     : 100


TWEAK_ESUTILS_SYNC_TIMESLICE_LENGTH                          jl

        Defines the default number of milliseconds the ECMAScript
        scheduler will use for a script ordered to run synchronously.
        This is primarily used by plugins and in some other cases
        where running scripts the normal way through messages in the
        message loop will not work.  Since the alternative is to
        either kill the script or nest a message loop we normally want
        to have this as a high number, but not so high that a bad
        script can completely hang Opera.  See
        TWEAK_ESUTILS_TIMESLICE_LENGTH for the normal timeslice
        including some information about timeslices in general.

        Category  : setting
        Define    : ESUTILS_SYNC_TIMESLICE_LENGTH
        Value     : 4000
        Disabled for: desktop, tv, smartphone, minimal, mini


TWEAK_ESUTILS_MAXIMUM_THREAD_RECURSION                  jl

        An ECMAScript thread can start another thread in a number of ways, for
        instance by dispatching a DOM event.  When this happens, the new thread
        is put infront of the old one in a queue.  This queue can be very long
        if the new thread does the same thing.  Recursion in the stack of
        threads can eventually crash due to C++ stack OOM.

        This tweak sets the maximum depth of this sort of "thread recursion."
        When the limit is reached, the thread scheduler refuses to add a new
        thread, the same way it would have if the user had disabled script
        execution in the window (but it will continue to execute existing
        threads.)

        The tweak does not affect the number of unrelated threads the scheduler
        can contain.  Nor does it affect regular recursion in ECMAScript (one
        function calling another, or itself.)  Such recursion is limited by the
        ECMAScript engine itself.

        Category    : setting
        Define      : ESUTILS_MAXIMUM_THREAD_RECURSION
        Value       : 128
        Disabled for: desktop, tv, smartphone, minimal, mini


TWEAK_ESUTILS_MAXIMUM_RECURSIVE_INLINE_THREADS                  joaoe

        An inline script element can write other scripts to the document using
        document.write(). These scripts elements themselves can write more
        script element, and so, creating a potential for infinite recussion
        where a script inserts itself over and over again.
        Such situation will most likely be a bug (CORE-23286) and therefore
        this tweak defines the maximum amount of scripts that can be
        generated recurssively starting from a single <script> element,
        together with another detection of a minimum amount of data written
        with the tweak TWEAK_ESUTILS_MAXIMUM_RECURSIVE_DOCWRITE

        Category    : setting
        Define      : ESUTILS_MAXIMUM_RECURSIVE_INLINE_THREADS
        Value       : 200
        Disabled for: desktop, tv, smartphone, minimal, mini


TWEAK_ESUTILS_MAXIMUM_RECURSIVE_DOCWRITE                  joaoe

        An ECMAScript thread might write data in the document using document.write(),
        and that documeent.write() might itself write more <script> elements in the
        document. This tweak defines the maximum amount of bytes that consecutive
        related scripts can write using doc.write(). Together with
        TWEAK_ESUTILS_MAXIMUM_RECURSIVE_INLINE_THREADS_FROM_PARSER, when these limits
        are hit, all related inline scripts are cancelled.

        Category    : setting
        Define      : ESUTILS_MAXIMUM_RECURSIVE_DOC_WRITE_BYTES
        Value       : (5*1024*1024)
        Disabled for: desktop, tv, smartphone, minimal, mini


TWEAK_ESUTILS_BLOCK_DATA_SIZE                           jl

        Sets the block size used for data written to document by scripts
        using document.write.  Normally, data will be consumed as soon as
        possible, so often a single block suffices, even if scripts write
        much more data in total than the block size.

        Category       : setting, memory
        Define         : BLOCK_DATA_SIZE
        Value          : 0x7fff
        Disabled for   : desktop, tv, smartphone, minimal, mini

TWEAK_ESUTILS_PROFILER                                  jl

        Enables a simple ECMAScript profiler.  You don't want this is
        production builds in its current state. It is for instance not
        memory safe.

        Category       : setting
        Define         : ESUTILS_PROFILER_SUPPORT
        Depends on     : ECMASCRIPT_DEBUGGER
        Enabled for    : none
        Disabled for   : desktop, tv, smartphone, minimal, mini

TWEAK_ESUTILS_DISABLE_TIMESLICE_CALIBRATION             deprecated

        Timeslice and iteration count calibration is no longer used.
	ESUTILS_DISABLE_TIMESLICE_CALIBRATION is no longer used in this module.

TWEAK_ESUTILS_ITERATIONS_PER_RUN                        deprecated

        Iteration counts is no longer used by the ES engine, hence this
	tweak (and its define ESUTILS_ITERATIONS_PER_RUN) is unused by this module.
