/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; -*-
**
** Copyright (C) 2002 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "ESUtils.TimerManager";
require init;

include "modules/ecmascript_utils/estimermanager.h";
include "modules/ecmascript_utils/estimerevent.h";

global
{
	ES_TimerManager *g_esTimerManager;

	class ESU_SelftestTimerEvent : public ES_TimerEvent
	{
	private:
		BOOL repeat, done;
	public:
		ESU_SelftestTimerEvent(BOOL repeat)
			: ES_TimerEvent(100, repeat),
			  repeat(repeat),
			  done(FALSE)
		{
		}

		~ESU_SelftestTimerEvent()
		{
			if (!done)
				ST_failed("Event never fired.");
		}

		virtual OP_BOOLEAN Expire()
		{
			if (repeat)
				repeat = FALSE;
			else if (IsRepeating())
			{
				StopRepeating();
				done = TRUE;
				ST_passed();
			}
			else
			{
				done = TRUE;
				ST_passed();
			}

			if (IsRepeating())
			{
				if (GetTimerManager()->RepeatEvent(this) != OpStatus::OK)
					ST_failed("Unable to repeat event.");
				return OpBoolean::IS_TRUE;
			}
			else
				return OpBoolean::IS_FALSE;

		}
	};
}

setup
{
	g_esTimerManager = NULL;
}

exit
{
	OP_DELETE(g_esTimerManager);
}

test("Setup")
{
	g_esTimerManager = OP_NEW(ES_TimerManager, ());
	verify(g_esTimerManager != NULL);
	g_esTimerManager->SetMessageHandler(g_main_message_handler);
}

test("Timeout (once)")
	async;
	require success "Setup";
{
	ESU_SelftestTimerEvent *event = OP_NEW(ESU_SelftestTimerEvent, (FALSE));
	if (g_esTimerManager->AddEvent(event) != OpStatus::OK)
	{
		g_esTimerManager->RemoveAllEvents();
		ST_failed("Threads not added correctly.");
	}
}

test("Timeout (repeating)")
	async;
	require success "Setup";
{
	ESU_SelftestTimerEvent *event = OP_NEW(ESU_SelftestTimerEvent, (TRUE));
	if (g_esTimerManager->AddEvent(event) != OpStatus::OK)
	{
		g_esTimerManager->RemoveAllEvents();
		ST_failed("Threads not added correctly.");
	}
}

test("Timeout (dormant #1)")
	async;
	require success "Setup";
{
	ESU_SelftestTimerEvent *event = OP_NEW(ESU_SelftestTimerEvent, (FALSE));
	if (g_esTimerManager->AddEvent(event) != OpStatus::OK)
	{
		g_esTimerManager->RemoveAllEvents();
		ST_failed("Threads not added correctly.");
	}
	else
	{
		g_esTimerManager->Deactivate();
		if (g_esTimerManager->Activate() != OpStatus::OK)
			ST_failed("Failed to reactivate timer manager.");
	}
}

test("Timeout (dormant #2)")
	async;
	require success "Setup";
{
	ESU_SelftestTimerEvent *event = OP_NEW(ESU_SelftestTimerEvent, (FALSE));
	g_esTimerManager->Deactivate();
	if (g_esTimerManager->AddEvent(event) != OpStatus::OK)
	{
		g_esTimerManager->RemoveAllEvents();
		ST_failed("Threads not added correctly.");
	}
	else
		if (g_esTimerManager->Activate() != OpStatus::OK)
			ST_failed("Failed to reactivate timer manager.");
}
