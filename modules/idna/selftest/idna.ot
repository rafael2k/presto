group "url IDNA-test";

require init;

include "modules/idna/selftest/selftest_idna.h";
include "modules/doc/frm_doc.h";
include "modules/idna/idna.h";

// Disabled illegal characters
//    {	"S", // -> $1.00 <-
//		UNI_L("\x002D\x003E\x0020\x0024\x0031\x002E\x0030\x0030\x0020\x003C\x002D"),
//        UNI_L("-> $1.00 <-")}

// Compare with reference implementations:
// http://mct.verisign-grs.com/index.shtml
// http://www.imc.org/idna/

global {

BOOL IDNA_SelfTestL(const uni_char *test_input, const uni_char *test_output, const uni_char *test_input_normalized)
{
	OpString UnicodeTestString;
	ANCHOR(OpString, UnicodeTestString);
	OpString UnicodeTestStringNormalized;
	ANCHOR(OpString, UnicodeTestStringNormalized);
	OpString UnicodeTestOutputString;
	ANCHOR(OpString, UnicodeTestOutputString);
	OpString8 ASCIITestString;
	ANCHOR(OpString8, ASCIITestString);

	OpString UnicodeTestDomainString;
	ANCHOR(OpString, UnicodeTestDomainString);
	OpString UnicodeTestDomainStringNormalized;
	ANCHOR(OpString, UnicodeTestDomainStringNormalized);
	OpString UnicodeTestDomainOutputString;
	ANCHOR(OpString, UnicodeTestDomainOutputString);
	OpString8 ASCIITestDomainString;
 	ANCHOR(OpString8, ASCIITestDomainString);
	uni_char *IDNA_test_output = (uni_char *) g_memory_manager->GetTempBuf2k();

	OpString8 ASCII_URL;
	ANCHOR(OpString8, ASCII_URL);
	OpString Unicode_URL_input;
	ANCHOR(OpString, Unicode_URL_input);
	OpString Unicode_URL_ASCII_input;
	ANCHOR(OpString, Unicode_URL_ASCII_input);
	OpString Unicode_URL_output;
	ANCHOR(OpString, Unicode_URL_output);
	OpString Unicode_URL_ASCII_output;
	ANCHOR(OpString, Unicode_URL_ASCII_output);
	URL test_url1;
	ANCHOR(URL, test_url1);
	URL test_url2;
	ANCHOR(URL, test_url2);
	URL test_url3;
	ANCHOR(URL, test_url3);

	UnicodeTestString.SetL(test_input);
	UnicodeTestStringNormalized.SetL(test_input_normalized && *test_input_normalized ? test_input_normalized : test_input);
	UnicodeTestOutputString.SetL(test_output);
	ASCIITestString.SetL(test_output);
	LEAVE_IF_ERROR(UnicodeTestDomainString.SetConcat(UNI_L("alfa.beta."), UnicodeTestString, UNI_L(".gamma.delta")));
	LEAVE_IF_ERROR(UnicodeTestDomainStringNormalized.SetConcat(UNI_L("alfa.beta."), UnicodeTestStringNormalized, UNI_L(".gamma.delta")));
	LEAVE_IF_ERROR(UnicodeTestDomainOutputString.SetConcat(UNI_L("alfa.beta."), UnicodeTestOutputString, UNI_L(".gamma.delta")));
	LEAVE_IF_ERROR(ASCIITestDomainString.SetConcat("alfa.beta.", ASCIITestString,".gamma.delta"));

	LEAVE_IF_ERROR(Unicode_URL_input.SetConcat(UNI_L("http://alfa.beta."), UnicodeTestString, UNI_L(".example.com/")));
	LEAVE_IF_ERROR(Unicode_URL_ASCII_input.SetConcat(UNI_L("http://alfa.beta."), UnicodeTestOutputString, UNI_L(".example.com/")));
	LEAVE_IF_ERROR(Unicode_URL_output.SetConcat(UNI_L("http://alfa.beta."), UnicodeTestStringNormalized, UNI_L(".example.com/")));
	LEAVE_IF_ERROR(ASCII_URL.SetConcat("http://alfa.beta.", ASCIITestString, ".example.com/"));
	Unicode_URL_ASCII_output.SetL(ASCII_URL);

	IDNA::ConvertToIDNA_L(UnicodeTestDomainString.CStr(), IDNA_test_output, g_memory_manager->GetTempBuf2kLen(), FALSE);

	if(!(UnicodeTestDomainOutputString.CompareI(IDNA_test_output) == 0))
	{
		output("\nexpected %s got %s ", ST_down(UnicodeTestDomainOutputString.CStr()), ST_down(IDNA_test_output));
		return FALSE;
	}

	BOOL mail = FALSE;
	IDNA::ConvertFromIDNA_L(ASCIITestDomainString.CStr(), IDNA_test_output, g_memory_manager->GetTempBuf2kLen(), mail);

	if(!(UnicodeTestDomainStringNormalized.CompareI(IDNA_test_output) == 0))
	{
		output("\nexpected %s got %s ", ST_down(UnicodeTestDomainStringNormalized.CStr()), ST_down(IDNA_test_output));
		return FALSE;
	}

	ServerName *name = g_url_api->GetServerName(ASCIITestDomainString, TRUE);
	if(name == NULL)
		return FALSE;

	if(ASCIITestDomainString.Compare(name->Name()) != 0)
		return FALSE;

	if(UnicodeTestDomainStringNormalized.Compare(name->UniName()) != 0 && UnicodeTestDomainOutputString.Compare(name->UniName()) != 0 )
		return FALSE;

	test_url1 = g_url_api->GetURL(ASCII_URL);
	if(test_url1.IsEmpty())
		return FALSE;

	OpString8 out_url1;
	ANCHOR(OpString8, out_url1);
	test_url1.GetAttributeL(URL::KName_Escaped, out_url1);
	if(out_url1.Compare(ASCII_URL) != 0)
		return FALSE;

	OpString out_url3;
	ANCHOR(OpString, out_url3);
	test_url1.GetAttributeL(URL::KUniName, 0, out_url3);
	if(out_url3.Compare(Unicode_URL_output) != 0 && out_url3.Compare(Unicode_URL_ASCII_output) != 0)
		return FALSE;

	test_url2 = g_url_api->GetURL(Unicode_URL_input);
	if(test_url2.IsEmpty())
		return FALSE;

	OpString8 out_url4;
	ANCHOR(OpString8, out_url4);
	test_url2.GetAttributeL(URL::KName_Escaped, out_url4);
	if(out_url4.Compare(ASCII_URL) != 0)
		return FALSE;

	OpString out_url6;
	ANCHOR(OpString, out_url6);
	test_url2.GetAttributeL(URL::KUniName, 0, out_url6);
	if(out_url6.Compare(Unicode_URL_output) != 0 && out_url6.Compare(Unicode_URL_ASCII_output) != 0)
		return FALSE;



	test_url3 = g_url_api->GetURL(Unicode_URL_ASCII_input);
	if(test_url2.IsEmpty())
		return FALSE;

	OpString8 out_url7;
	ANCHOR(OpString8, out_url7);
	test_url3.GetAttributeL(URL::KName_Escaped, out_url7);
	if(out_url7.Compare(ASCII_URL) != 0)
		return FALSE;

	OpString out_url9;
	ANCHOR(OpString, out_url9);
	test_url3.GetAttributeL(URL::KUniName, 0, out_url9);
	if(out_url9.Compare(Unicode_URL_output) != 0 && out_url9.Compare(Unicode_URL_ASCII_output) != 0)
		return FALSE;

	return TRUE;
}

int IDNA_SelfTest(const uni_char *test_input, const uni_char *test_output)
{
	BOOL ret = FALSE;
	TRAPD(op_err, ret = IDNA_SelfTestL(test_input, test_output, NULL));

	if(OpStatus::IsError(op_err))
		return -1;

	return (ret ? 1 : 0);
}
int IDNA_SelfTest(const uni_char *test_input, const uni_char *test_output, const uni_char *test_input_normalized)
{
	BOOL ret = FALSE;
	TRAPD(op_err, ret = IDNA_SelfTestL(test_input, test_output, test_input_normalized));

	if(OpStatus::IsError(op_err))
		return -1;

	return (ret ? 1 : 0);
}
}

test("Chinese (simplified) B")
{
	verify(IDNA_SelfTest(UNI_L("\x4ED6\x4EEC\x4E3A\x4EC0\x4E48\x4E0D\x8BF4\x4E2D\x6587"), UNI_L("xn--ihqwcrb4cv8a8dqg056pqjye")) == 1);
}

test("Arabic (Egyptian): A")
{
	verify(IDNA_SelfTest(
	UNI_L("\x0644\x064A\x0647\x0645\x0627\x0628\x062A\x0643\x0644\x0645\x0648\x0634\x0639\x0631\x0628\x064A\x061F"),
	UNI_L("xn--egbpdaj6bu4bxfgehfvwxn")
	) == 1);
}

test("Chinese (traditional): C")
{
	verify(IDNA_SelfTest(
	UNI_L("\x4ED6\x5011\x7232\x4EC0\x9EBD\x4E0D\x8AAA\x4E2D\x6587"),
	UNI_L("xn--ihqwctvzc91f659drss3x8bo0yb")
	) == 1);
}

test("Czech: Pro<ccaron>prost<ecaron>nemluv<iacute><ccaron>esky: D")
{
	verify(IDNA_SelfTest(
	UNI_L("\x0050\x0072\x006F\x010D\x0070\x0072\x006F\x0073\x0074\x011B\x006E\x0065\x006D\x006C\x0075\x0076\x00ED\x010D\x0065\x0073\x006B\x0079"),
	UNI_L("xn--proprostnemluvesky-uyb24dma41a"),
	UNI_L("\x0070\x0072\x006F\x010D\x0070\x0072\x006F\x0073\x0074\x011B\x006E\x0065\x006D\x006C\x0075\x0076\x00ED\x010D\x0065\x0073\x006B\x0079")
	) == 1);
}

test("Hebrew: E")
{
	verify(IDNA_SelfTest(
	UNI_L("\x05DC\x05DE\x05D4\x05D4\x05DD\x05E4\x05E9\x05D5\x05D8\x05DC\x05D0\x05DE\x05D3\x05D1\x05E8\x05D9\x05DD\x05E2\x05D1\x05E8\x05D9\x05EA"),
	UNI_L("xn--4dbcagdahymbxekheh6e0a7fei0b")
	) == 1);
}

test("Hindi (Devanagari): F")
{
	verify(IDNA_SelfTest(
	UNI_L("\x092F\x0939\x0932\x094B\x0917\x0939\x093F\x0928\x094D\x0926\x0940\x0915\x094D\x092F\x094B\x0902\x0928\x0939\x0940\x0902\x092C\x094B\x0932\x0938\x0915\x0924\x0947\x0939\x0948\x0902"),
    UNI_L("xn--i1baa7eci9glrd9b2ae1bj0hfcgg6iyaf8o0a1dig0cd")
	) == 1);
}

test("Japanese (kanji and hiragana): G")
{
	verify(IDNA_SelfTest(
	UNI_L("\x306A\x305C\x307F\x3093\x306A\x65E5\x672C\x8A9E\x3092\x8A71\x3057\x3066\x304F\x308C\x306A\x3044\x306E\x304B"),
    UNI_L("xn--n8jok5ay5dzabd5bym9f0cm5685rrjetr6pdxa")
	) == 1);
}

test("Korean (Hangul syllables): H")
{
	verify(IDNA_SelfTest(
	UNI_L("\xC138\xACC4\xC758\xBAA8\xB4E0\xC0AC\xB78C\xB4E4\xC774\xD55C\xAD6D\xC5B4\xB97C\xC774\xD574\xD55C\xB2E4\xBA74\xC5BC\xB9C8\xB098\xC88B\xC744\xAE4C"),
    UNI_L("xn--989aomsvi5e83db1d2a355cv1e0vak1dwrv93d5xbh15a0dt30a5jpsd879ccm6fea98c")
	) == 1);
}

test("Russian (Cyrillic): I")
{
	verify(IDNA_SelfTest(
	UNI_L("\x043F\x043E\x0447\x0435\x043C\x0443\x0436\x0435\x043E\x043D\x0438\x043D\x0435\x0433\x043E\x0432\x043E\x0440\x044F\x0442\x043F\x043E\x0440\x0443\x0441\x0441\x043A\x0438"),
	UNI_L("xn--b1abfaaepdrnnbgefbadotcwatmq2g4l")
	) == 1);
}

test("Spanish: Porqu<eacute>nopuedensimplementehablarenEspa<ntilde>ol: J")
{
	verify(IDNA_SelfTest(
	UNI_L("\x0050\x006F\x0072\x0071\x0075\x00E9\x006E\x006F\x0070\x0075\x0065\x0064\x0065\x006E\x0073\x0069\x006D\x0070\x006C\x0065\x006D\x0065\x006E\x0074\x0065\x0068\x0061\x0062\x006C\x0061\x0072\x0065\x006E\x0045\x0073\x0070\x0061\x00F1\x006F\x006C"),
    UNI_L("xn--porqunopuedensimplementehablarenespaol-fmd56a"),
	UNI_L("\x0070\x006F\x0072\x0071\x0075\x00E9\x006E\x006F\x0070\x0075\x0065\x0064\x0065\x006E\x0073\x0069\x006D\x0070\x006C\x0065\x006D\x0065\x006E\x0074\x0065\x0068\x0061\x0062\x006C\x0061\x0072\x0065\x006E\x0065\x0073\x0070\x0061\x00F1\x006F\x006C")
	) == 1);
}

test("Vietnamese: K")
{
    // T<adotbelow>isaoh<odotbelow>kh<ocirc>ngth<ecirchookabove>ch
    // <ihookabove>n<oacute>iti<ecircacute>ngVi<ecircdotbelow>t
	verify(IDNA_SelfTest(
	UNI_L("\x0054\x1EA1\x0069\x0073\x0061\x006F\x0068\x1ECD\x006B\x0068\x00F4\x006E\x0067\x0074\x0068\x1EC3\x0063\x0068\x1EC9\x006E\x00F3\x0069\x0074\x0069\x1EBF\x006E\x0067\x0056\x0069\x1EC7\x0074"),
    UNI_L("xn--tisaohkhngthchnitingvit-kjcr8268qyxafd2f1b9g"),
	UNI_L("\x0074\x1EA1\x0069\x0073\x0061\x006F\x0068\x1ECD\x006B\x0068\x00F4\x006E\x0067\x0074\x0068\x1EC3\x0063\x0068\x1EC9\x006E\x00F3\x0069\x0074\x0069\x1EBF\x006E\x0067\x0076\x0069\x1EC7\x0074")
	) == 1);
}

test("3<nen>B<gumi><kinpachi><sensei: L")
{
	verify(IDNA_SelfTest(
	UNI_L("\x0033\x5E74\x0042\x7D44\x91D1\x516B\x5148\x751F"),
    UNI_L("xn--3b-ww4c5e180e575a65lsy2b"),
	UNI_L("\x0033\x5E74\x0062\x7D44\x91D1\x516B\x5148\x751F")
	) == 1);
}

test("<amuro><namie>-with-SUPER-MONKEYS: M")
{
	verify(IDNA_SelfTest(
	UNI_L("\x5B89\x5BA4\x5948\x7F8E\x6075\x002D\x0077\x0069\x0074\x0068\x002D\x0053\x0055\x0050\x0045\x0052\x002D\x004D\x004F\x004E\x004B\x0045\x0059\x0053"),
    UNI_L("xn---with-super-monkeys-pc58ag80a8qai00g7n9n"),
	UNI_L("\x5B89\x5BA4\x5948\x7F8E\x6075\x002D\x0077\x0069\x0074\x0068\x002D\x0073\x0075\x0070\x0065\x0072\x002D\x006D\x006F\x006E\x006B\x0065\x0079\x0073")
	) == 1);
}

test("Hello-Another-Way-<sorezore><no><basho>: N")
{
	verify(IDNA_SelfTest(
	UNI_L("\x0048\x0065\x006C\x006C\x006F\x002D\x0041\x006E\x006F\x0074\x0068\x0065\x0072\x002D\x0057\x0061\x0079\x002D\x305D\x308C\x305E\x308C\x306E\x5834\x6240"),
    UNI_L("xn--hello-another-way--fc4qua05auwb3674vfr0b"),
	UNI_L("\x0068\x0065\x006C\x006C\x006F\x002D\x0061\x006E\x006F\x0074\x0068\x0065\x0072\x002D\x0077\x0061\x0079\x002D\x305D\x308C\x305E\x308C\x306E\x5834\x6240")
	) == 1);
}

test("<hitotsu><yane><no><shita>2: O")
{
	verify(IDNA_SelfTest(
	UNI_L("\x3072\x3068\x3064\x5C4B\x6839\x306E\x4E0B\x0032"),
    UNI_L("xn--2-u9tlzr9756bt3uc0v")
	) == 1);
}

test("<pafii>de<runba>: Q")
{
	verify(IDNA_SelfTest(
	UNI_L("\x30D1\x30D5\x30A3\x30FC\x0064\x0065\x30EB\x30F3\x30D0"),
    UNI_L("xn--de-jg4avhby1noc0d")
	) == 1);
}

test("<sono><supiido><de>: R")
{
	verify(IDNA_SelfTest(
	UNI_L("\x305D\x306E\x30B9\x30D4\x30FC\x30C9\x3067"),
    UNI_L("xn--d9juau41awczczp")
	) == 1);
}

test("alfaU+FF11beta")
{
	verify(IDNA_SelfTest(
	UNI_L("alfa\xff11\x62\x65ta"),
	UNI_L("alfa1beta"),
	UNI_L("alfa1beta")
	) == 1 );
}

test("alfaU+FF21beta")
{
	verify(IDNA_SelfTest(
	UNI_L("alfa\xff21\x62\x65ta"),
	UNI_L("alfaabeta"),
	UNI_L("alfaabeta")
	) == 1 );
}

test("alfaU+2010beta")
{
	verify(IDNA_SelfTest(
	UNI_L("alfa\x2010\x62\x65ta"),
    UNI_L("xn--alfabeta-3m3d")
	) == 1);
}

test("alfaU+2011beta")
{
	verify(IDNA_SelfTest(
	UNI_L("alfa\x2011\x62\x65ta"),
    UNI_L("xn--alfabeta-dn3d")
	) == 1);
}

test("alfaU+2215beta")
{
	verify(IDNA_SelfTest(
	UNI_L("alfa\x2215\x62\x65ta"),
    UNI_L("xn--alfabeta-1f7d")
	) == 1);
}

test("U+33C6")
{
	verify(IDNA_SelfTest(
	UNI_L("alfa\x33C6\x62\x65ta"),
    UNI_L("xn--alfabeta-np0h")
	) == 1);
}

test("U+FF0F")
{
	verify(IDNA_SelfTest(
	UNI_L("alfa\xFF0F\x62\x65ta"),
    UNI_L(""),
    UNI_L("")
	) < 0);

	verify(IDNA_SelfTest(
	UNI_L("xn--xy-1u3n"),
    UNI_L("")
	) < 0);
}

test("Plane 1: Old Italic")
{
    // Allowed
	verify(IDNA_SelfTest(
		UNI_L("\xD800\xDF00\xD800\xDF01"), // U+10300 U+10301
		UNI_L("xn--097cc"),
		UNI_L("\xD800\xDF00\xD800\xDF01")));
}

test("Plane 1: Mathematical Alphanumeric Symbols")
{
    // Normalized to basic latin (ASCII)
	verify(IDNA_SelfTest(
		UNI_L("\xD835\xDC00\xD835\xDC01"), // U+1D400 U+1D401
		UNI_L("xn--py1hc"),
		UNI_L("\xD835\xDC00\xD835\xDC01")));
}

test("Plane 2: CJK extension B")
{
    // Allowed
	verify(IDNA_SelfTest(
		UNI_L("\xD840\xDC00\xD840\xDC01"),	// U+20000 U+20001
		UNI_L("xn--j50ic"),
		UNI_L("\xD840\xDC00\xD840\xDC01")));
}

test("Plane 2: CJK extension B (2)")
{
    // Allowed
	verify(IDNA_SelfTest(
		UNI_L("\xD840\xDC01\xD840\xDC00\xD840\xDC03"),	// U+20001 U+20000 U+20003
		UNI_L("xn--j50ibh"),
		UNI_L("\xD840\xDC01\xD840\xDC00\xD840\xDC03")));
}

table idna_property_table(int, IDNALabelValidator::IDNAProperty) read "test_table.txt";

test("IDNAProperty Test")
{
	iterate (codepoint, property) from idna_property_table
	{
		IDNALabelValidator::IDNAProperty returned_property = SELFTEST_UNASSIGNED;
		TRAPD(rc, returned_property = IDNALabelValidator::GetIDNAProperty_L(codepoint));
		verify_success(rc);
		if (returned_property != property && property != SELFTEST_UNASSIGNED)
			output("\nIDNAProperty Test failed on codepoint 0x%.4x (%d != %d) ", codepoint, returned_property, property);
		verify(returned_property == property || property == SELFTEST_UNASSIGNED);
	}
}

