/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2005 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Karlsson
*/

group "url.idna.security";
require initialization;

include "modules/url/url_enum.h";
include "modules/url/url_sn.h";
include "modules/url/url2.h";
include "modules/prefs/prefsmanager/collections/pc_network.h";

// -- Tests --------------------------------------------------------------

test("Setting up IDNA allow list")
	require PREFS_WRITE;
{
	OpString whitelist;
	g_pcnet->GetStringPrefL(PrefsCollectionNetwork::IdnaWhiteList, whitelist);
	if (whitelist.Find(UNI_L(":invalid:")) == KNotFound)
	{
		whitelist.AppendL("invalid:");
		g_pcnet->WriteStringL(PrefsCollectionNetwork::IdnaWhiteList, whitelist);
	}
	g_pcnet->GetStringPrefL(PrefsCollectionNetwork::IdnaWhiteList, whitelist);
	verify(whitelist.Find(UNI_L(":invalid:")) != KNotFound);
}

table asciinames(const char *)
{
	{ "www.opera.invalid" },
	{ "www.micr0s0ft.invalid" },
	{ "www.op3ra.invalid" },
	{ "www.example.invalid" },
	{ "www.1337.invalid" },
}

test("ASCII domain domain names")
	require success "Setting up IDNA allow list";
{
	iterate (domain) from asciinames
	{
		ServerName *sn = g_url_api->GetServerName(domain, TRUE);
		verify(sn);
		verify(!sn->GetIsIDNA_Restricted());
	}
}

table minimalnames(const char *)
{
	// Single scripts

	// Latin
	{ "xn--xyz-slae7h.invalid" },
	{ "xn--xyz-3oa4gsg.invalid" },
	{ "xn--xyz-m3a4k49a.invalid" },
	{ "xn--xyz-kxy4h8h.invalid" },
	{ "xn--xyz-slae7h9c4gyin5agi65d221qvnanr.invalid" },

	// Greek
	{ "xn--mxacd.invalid" },
	{ "xn--dngcd.invalid" },
	{ "xn--mxacd070zfag.invalid" },

	// Cyrillic
	{ "xn--80acd.invalid" },
	{ "xn--y3ais.invalid" },
	{ "xn--76aeg.invalid" },
	{ "xn--80acd24fkam.invalid" },

	// Armenian
	{ "xn--y9acd.invalid" },

	// Thai
	{ "xn--12ccd.invalid" },

	// Georgian
	{ "xn--lodcd.invalid" },

	// Cherokee
	{ "xn--58dcd.invalid" },

	// Han + Hiragana + Katakana
	{ "xn--l8jeg.invalid" },
	{ "xn--cckeg.invalid" },
	{ "xn--l8jeg28akam021diaj4567dlam.invalid" },

	// Han + Bopomofo
	{ "xn--5ekcd.invalid" },
	{ "xn--ljkcd.invalid" },
	{ "xn--4gqcd.invalid" },
	{ "xn--y0kcd.invalid" },
	{ "xn--5ekcd62dfag653biaj4567dlam.invalid" },

	// Han + Hangul
	{ "xn--o39acd.invalid" },
	{ "xn--y0kcd037xfag2459niaj.invalid" },

	// Common
	// Inherited
}

test("IDN security level 1 domain names")
	require success "Setting up IDNA allow list";
{
	iterate (domain) from minimalnames
	{
		ServerName *sn = g_url_api->GetServerName(domain, TRUE);
		verify(sn);
		verify(!sn->GetIsIDNA_Restricted() );
	}
}

table moderatenames(const char *)
{
	// Latin with other scripts except Cyrillic, Greek, Cherokee

	// Latin + Armenian
	{ "xn--xyz-3cefg.invalid" },

	// Latin + Thai
	{ "xn--xyz-gklfg.invalid" },

	// Latin + Georgian
	{ "xn--xyz-mwnfg.invalid" },

	// Latin + Han + Hiragana + Katakana
	{ "xn--xyz-m63bkm.invalid" },
	{ "xn--xyz-li4bkm.invalid" },
	{ "xn--xyz-3b7bfg.invalid" },
	{ "xn--xyz-m63bkm85dqas496flam6167foap.invalid" },

	// Latin + Han + Bopomofo
	{ "xn--xyz-wt4bfg.invalid" },
	{ "xn--xyz-mc5bfg.invalid" },
	{ "xn--xyz-s18dfg.invalid" },
	{ "xn--xyz-wt4bfg58hiaj471dlam6167foap.invalid" },

	// Latin + Han + Hangul
	{ "xn--xyz-ym7lfag.invalid" },
	{ "xn--xyz-3b7bfg2967biaj8271vlam.invalid" },
}

test("IDN security level 2 domain names")
	require success "Setting up IDNA allow list";
{
	iterate (domain) from moderatenames
	{
		ServerName *sn = g_url_api->GetServerName(domain, TRUE);
		verify(sn);
		verify(!sn->GetIsIDNA_Restricted());
	}
}

table expandednames(const char *)
{
	// Mixture of scripts

	// Latin + Cyrillic
	{ "xn--xyz-8cdfg.invalid1" },
	{ "xn--xyz-3ndu0b.invalid1" },
	{ "xn--xyz-40dkm.invalid1" },
	{ "xn--xyz-8cdfg36lqas.invalid1" },

	// Latin + Greek
	{ "xn--xyz-qxcfg.invalid1" },
	{ "xn--xyz-przfg.invalid1" },
	{ "xn--xyz-qxcfg7300ciaj.invalid1" },

	// Latin + Cherokee
	{ "xn--xyz-w8pfg.invalid1" },
}

test("IDN security level 3 domain names")
	require success "Setting up IDNA allow list";
{
	iterate (domain) from expandednames
	{
		ServerName *sn = g_url_api->GetServerName(domain, TRUE);
		verify(sn);
		verify(sn->GetIsIDNA_Restricted());
	}
}
