/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Plugin tests for NPAPI's event related methods.
 *
 * Copyright (C) 2009-2010 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

group "ns4plugins.npapi.events";

language c++;

require _PLUGIN_SUPPORT_;
require init;

include "modules/doc/frm_doc.h";
include "modules/prefs/prefsmanager/collections/pc_display.h";
include "modules/viewers/viewers.h";


/**
 * Ensure that plugins are enabled.
 */
test("Plugins enabled")
{
	verify(g_pcdisplay->GetIntegerPref(PrefsCollectionDisplay::PluginsEnabled));
	verify(g_pcdisplay->GetIntegerPref(PrefsCollectionDisplay::EnableOnDemandPlugin) == 0);
}

/**
 * Ensure the test plugin is available.
 */
test("Test plugin installed")
	require success "Plugins enabled";
{
	OpString16 mime_type;
	mime_type.Set("application/x-vnd.opera-test-plugin");
	verify(g_viewers->FindViewerByMimeType(mime_type) != 0);
}

/**
 * Set current document, instantiating a test plugin object
 * available for the following javascript tests.
 */
html {
	//! <html>
	//! <head>
	//! <title> Plugin tests for NPAPI's event related methods </title>
	//! </head>
	//! <body>
	//! <object id="plugin" type="application/x-vnd.opera-test-plugin"
	//!   width="128" height="128" windowless="true">Fallback</object>
	//! <script>window.plugin = document.getElementById("plugin");</script>
	//! </body>
	//! </html>
}

test("Test plugin scriptable object")
	require success "Test plugin installed";
	language ecmascript;
{
	verify(plugin.toString() == "[OperaTestPlugin]");
}

test("Browser sends NPP_SetWindow")
	require success "Test plugin scriptable object";
	language ecmascript;
{
	plugin.bgcolor = "#00ff00";
	ST_paint();

	verify(plugin.setWindowCount > 0);
}

test("Browser sends window position change")
	require success "Browser sends NPP_SetWindow";
	language ecmascript;
{
	verify(plugin.platform != "XP_WIN" || plugin.windowPosChangedCount);
}

test("Browser sends paint event")
	require success "Browser sends NPP_SetWindow";
	language ecmascript;
{
	verify(plugin.paintCount > 0);
}

test("NPN_InvalidateRect (partial coordinates)")
	disabled; /* Requires visible tab, which is tricky with selftests. Moved to SPARTAN. */
	require success "Test plugin scriptable object";
	language ecmascript;
{
	var paint_received = false;

	onPaint = function(x, y, w, h) {
		/* Just before sending paint event, plugix positions plugin window
		   at 0,0 coordinate and sends paint event in coordinates relative
		   to it so we have to refetch current window coordinates before
		   verifying results. */
		win = plugin.getWindow();
		paint_received = true;
		verify(x == win.x + 1);
		verify(y == win.y + 2);
		verify(w == win.width - 3);
		verify(h == win.height - 2);
	};

	win = plugin.getWindow();
	plugin.testInvalidateRect(1, 2, win.width - 3, win.height - 2);

	ST_paint();

	verify(paint_received);
	onPaint = undefined;
}

test("NPN_InvalidateRect (async call)")
	async;
	disabled; /* Requires visible tab, which is tricky with selftests. Moved to SPARTAN. */
	require success "Test plugin scriptable object";
	language ecmascript;
{
	var paint_received = false;

	var finalize = function() {
		onAsyncCall = undefined;
		onPaint = undefined;
		verify(paint_received);
		ST_passed();
	};

	onPaint = function(x, y, w, h) {
		paint_received = true;
		finalize();
	};

	onAsyncCall = function() {
		var win = plugin.getWindow();
		plugin.testInvalidateRect(0, 0, win.width, win.height);
		ST_paint();
	};

	plugin.testPluginThreadAsyncCall();
	setTimeout(finalize, 500);
}

test("NPN_InvalidateRegion (partial coordinates)")
	disabled; /* Requires visible tab, which is tricky with selftests. Moved to SPARTAN. */
	require success "Test plugin scriptable object";
	language ecmascript;
{
	var paint_received = false;

	onPaint = function(x, y, w, h) {
		/* Just before sending paint event, plugix positions plugin window
		   at 0,0 coordinate and sends paint event in coordinates relative
		   to it so we have to refetch current window coordinates before
		   verifying results. */
		win = plugin.getWindow();
		paint_received = true;
		verify(x == win.x + 1);
		verify(y == win.y + 2);
		verify(w == win.width - 3);
		verify(h == win.height - 2);
	};

	win = plugin.getWindow();
	plugin.testInvalidateRegion(1, 2, win.width - 3, win.height - 2);

	ST_paint();

	verify(paint_received);
	onPaint = undefined;
}

test("NPN_InvalidateRegion (async call)")
	async;
	disabled; /* Requires visible tab, which is tricky with selftests. Moved to SPARTAN. */
	require success "Test plugin scriptable object";
	language ecmascript;
{
	var paint_received = false;

	var finalize = function() {
		onAsyncCall = undefined;
		onPaint = undefined;
		verify(paint_received);
		ST_passed();
	};

	onPaint = function(x, y, w, h) {
		paint_received = true;
		finalize();
	};

	onAsyncCall = function() {
		var win = plugin.getWindow();
		plugin.testInvalidateRegion(0, 0, win.width, win.height);
		ST_paint();
	};

	plugin.testPluginThreadAsyncCall();

	setTimeout(finalize, 500);
}

test("NPN_ForceRedraw")
	disabled; /* Not well supported by Opera. */
	language ecmascript;
	require success "Test plugin scriptable object";
{
	var paint_received = false;

	var onPaint = function(x, y, w, h) {
		paint_received = true;
	};

	plugin.testForceRedraw();
	onPaint = undefined;
	verify(paint_received);
}

test("NPN_ForceRedraw (async call)")
	async;
	disabled; /* Not well supported by Opera. */
	require success "Test plugin scriptable object";
	language ecmascript;
{
	var paint_received = false;

	var finalize = function() {
		onAsyncCall = undefined;
		onPaint = undefined;
		verify(paint_received);
		ST_passed();
	};

	var onAsyncCall = function() {
		onPaint = function(x, y, w, h) {
			paint_received = true;
			finalize();
		};

		plugin.testForceRedraw();
	};

	plugin.testPluginThreadAsyncCall();

	setTimeout(finalize, 3000);
}

test("Click to activate")
	async;
	require success "Test plugin installed";
	language ecmascript;
{
	var mouse_events = [];

	var finalize = function() {
		plugin.onMouseEvent = undefined;

		if (plugin.platform != "XP_UNIX")
			for (var i = 0; i < mouse_events.length; i++)
				verify(mouse_events[i].type != 0 /* Button press. */);

		ST_passed();
	};

	plugin.onMouseEvent = function(x_, y_, type_, button_) {
		mouse_events.push({ x: x_, y: y_, type: type_, button: button_});
	};

	ST_mouse_event(47, 49, "mousedown", 1 /* Left button. */);
	ST_mouse_event(47, 49, "mouseup", 1 /* Left button. */);

	setTimeout(finalize, 500);
}


test("Left mouse button")
	async;
	require success "Click to activate";
	language ecmascript;
{
	var mouse_events = [];

	var finalize = function() {
		plugin.onMouseEvent = undefined;

		var press = -1;
		var release = -1;

		for (var i = 0; i < mouse_events.length; i++)
			if (mouse_events[i].type == 0 /* Button press. */)
				press = i;

		for (var i = press + 1; i < mouse_events.length; i++)
			if (mouse_events[i].type == 1 /* Button release. */)
				release = i;

		verify(press >= 0);
		verify(release >= 0);

		verify(mouse_events[press].x == mouse_events[release].x);
		verify(mouse_events[press].y == mouse_events[release].y);

		verify(mouse_events[press].button == 1 /* Left button. */);
		verify(mouse_events[release].button == 1 /* Left button. */);

		ST_passed();
	};

	plugin.onMouseEvent = function(x_, y_, type_, button_) {
		mouse_events.push({ x: x_, y: y_, type: type_, button: button_});
	};

	ST_mouse_event(47, 49, "mousedown", 1 /* Left button. */);
	ST_mouse_event(47, 49, "mouseup", 1 /* Left button. */);

	setTimeout(finalize, 500);
}

test("Right mouse button")
	async;
	require success "Click to activate";
	language ecmascript;
{
	var mouse_events = [];

	var finalize = function() {
		plugin.onMouseEvent = undefined;

		var press = -1;
		var release = -1;

		for (var i = 0; i < mouse_events.length; i++)
			if (mouse_events[i].type == 0 /* Button press. */)
				press = i;

		for (var i = press + 1; i < mouse_events.length; i++)
			if (mouse_events[i].type == 1 /* Button release. */)
				release = i;

		verify(press >= 0);
		verify(release >= 0);

		verify(mouse_events[press].x == mouse_events[release].x);
		verify(mouse_events[press].y == mouse_events[release].y);

		verify(mouse_events[press].button == 2 /* Right button. */);
		verify(mouse_events[release].button == 2 /* Right button. */);

		ST_mouse_event(46, 48, "mousedown", 1 /* Left button. */);
		ST_mouse_event(46, 48, "mouseup", 1 /* Left button. */);

		ST_passed();
	};

	plugin.onMouseEvent = function(x_, y_, type_, button_) {
		mouse_events.push({ x: x_, y: y_, type: type_, button: button_});
	};

	ST_mouse_event(47, 49, "mousedown", 2 /* Right button. */);
	ST_mouse_event(47, 49, "mouseup", 2 /* Right button. */);

	setTimeout(finalize, 500);
}

test("Middle mouse button")
	async;
	require success "Click to activate";
	require undefined LINGOGI;
	language ecmascript;
{
	mouse_events = [];

	var finalize = function() {
		plugin.onMouseEvent = undefined;

		var press = -1;
		var release = -1;

		for (var i = 0; i < mouse_events.length; i++)
			if (mouse_events[i].type == 0 /* Button press. */)
				press = i;

		for (var i = press + 1; i < mouse_events.length; i++)
			if (mouse_events[i].type == 1 /* Button release. */)
				release = i;

		verify(press >= 0);
		verify(release >= 0);

		verify(mouse_events[press].x == mouse_events[release].x);
		verify(mouse_events[press].y == mouse_events[release].y);

		verify(mouse_events[press].button == 3 /* Middle button. */);
		verify(mouse_events[release].button == 3 /* Middle button. */);

		ST_passed();
	};

	plugin.onMouseEvent = function(x_, y_, type_, button_) {
		mouse_events.push({ x: x_, y: y_, type: type_, button: button_});
	};

	ST_mouse_event(47, 49, "mousedown", 3 /* Middle button. */);
	ST_mouse_event(47, 49, "mouseup", 3 /* Middle button. */);

	setTimeout(finalize, 500);
}

test("Mouse movement")
	async;
	require success "Click to activate";
	language ecmascript;
{
	var mouse_events = [];

	var finalize = function() {
		plugin.onMouseEvent = undefined;

		var press = -1;
		var move = -1;
		var release = -1;

		for (var i = 0; i < mouse_events.length && press == -1; i++)
			if (mouse_events[i].type == 0 /* Button press. */)
				press = i;

		for (var i = press + 1; i < mouse_events.length && move == -1; i++)
			if (mouse_events[i].type == 2 /* Mouse move. */)
				move = i;

		for (var i = move + 1; i < mouse_events.length && release == -1; i++)
			if (mouse_events[i].type == 1 /* Button release. */)
				release = i;

		verify(press >= 0);
		verify(move >= 0);
		verify(release >= 0);

		verify(mouse_events[press].x == mouse_events[move].x);
		verify(mouse_events[move].x == mouse_events[release].x);
		verify(mouse_events[move].y == mouse_events[release].y);

		verify(mouse_events[press].button == 1 /* Left button. */);
		verify(mouse_events[release].button == 1 /* Left button. */);

		ST_passed();
	};

	plugin.onMouseEvent = function(x_, y_, type_, button_) {
		mouse_events.push({ x: x_, y: y_, type: type_, button: button_});
	};

	ST_mouse_event(47, 49, "mousedown", 1 /* Left button. */);
	ST_mouse_event(47, 53, "mousemove", 1 /* Left button. */);
	ST_mouse_event(47, 53, "mouseup", 1 /* Left button. */);

	setTimeout(finalize, 500);
}

test("Key click")
	async;
	require success "Test plugin installed";
	language ecmascript;
{
	var key_events = [];

	var finalize = function() {
		plugin.onKeyEvent = undefined;

		verify(key_events.length >= 2);

		var press = -1;
		var release = -1;

		for (var i = 0; i < key_events.length; i++)
			if (key_events[i].type == 0 /* Key press. */)
				press = i;

		for (var i = press + 1; i < key_events.length; i++)
			if (key_events[i].type == 1 /* Key release. */)
				release = i;

		verify(press >= 0);
		verify(release >= 0);

		verify(key_events[press].keycode == key_events[release].keycode);

		ST_passed();
	};

	plugin.onKeyEvent = function(keycode_, type_) {
		key_events.push({ keycode: keycode_, type: type_});
	};

	ST_key_event(plugin, "keydown", 97, 0 /* SHIFTKEY_NONE */);
	ST_key_event(plugin, "keyup", 97, 0 /* SHIFTKEY_NONE */);

	setTimeout(finalize, 500);
}

test("Key press (modifier)")
	async;
	require success "Test plugin installed";
	language ecmascript;
{
	var key_events = [];

	var finalize = function() {
		plugin.onKeyEvent = undefined;

		verify(key_events.length >= 2);

		var press = -1;
		var release = -1;

		for (var i = 0; i < key_events.length; i++)
			if (key_events[i].type == 0 /* Key press. */)
				press = i;

		for (var i = press + 1; i < key_events.length; i++)
			if (key_events[i].type == 1 /* Key release. */)
				release = i;

		verify(press >= 0);
		verify(release >= 0);

		verify(key_events[press].keycode == key_events[release].keycode);

		ST_passed();
	};

	plugin.onKeyEvent = function(keycode_, type_) {
		key_events.push({ keycode: keycode_, type: type_});
	};

	ST_key_event(plugin, "keydown", 16, 0x02 /* SHIFTKEY_SHIFT */);
	ST_key_event(plugin, "keyup", 16, 0x02 /* SHIFTKEY_SHIFT */);

	setTimeout(finalize, 500);
}

test("NPN_ScheduleTimer")
	async;
	require success "Test plugin installed";
	language ecmascript;
	disabled; /* Opera does not support this function. */
{
	var timer1_id = 0;
	var timer1_count = 0;
	var timer2_id = 0;
	var timer2_count = 0;

	var finalize = function() {
		verify(timer1_id != 0);
		verify(timer2_id != 0);
		verify(timer1_count > 0);
		verify(timer2_count == 1);
		ST_passed();
	};

	timer1_id = plugin.testScheduleTimer(1, true, function() { timer1_count++; });
	timer2_id = plugin.testScheduleTimer(1, false, function() { timer2_count++; });

	setTimeout(finalize, 1500);
}

test("NPN_UnscheduleTimer")
	async;
	require success "Test plugin installed";
	language ecmascript;
	disabled; /* Opera does not support this function. */
{
	var timer_id = 0;
	var timer_count = 0;
	var timer_count_copy = 0;

	var timer = function() {
		timer_count++;
		if (timer_count_copy == 0)
		{
			verify(plugin.testUnscheduleTimer(timer_id));
			timer_count_copy = timer_count;
		}
	};

	timer_id = plugin.testScheduleTimer(1, true, timer);
	verify(timer_id != 0);

	var finalize = function() {
		verify(timer_count > 0);
		verify(timer_count == timer_count_copy);
		ST_passed();
	};

	setTimeout(finalize, 1500);
}

/**
 * Make test document use a windowed plugin.
 */
html {
	//! <html>
	//! <head>
	//! <title> Plugin tests for NPAPI's event related methods </title>
	//! </head>
	//! <body>
	//! <object id="plugin" type="application/x-vnd.opera-test-plugin"
	//!   width="128" height="128" windowless="false">Fallback</object>
	//! <script>window.plugin = document.getElementById("plugin");</script>
	//! </body>
	//! </html>
}

test("Browser sends NPP_SetWindow (windowed)")
	require success "Test plugin scriptable object";
	language ecmascript;
{
	plugin.bgcolor = "#00ff00";
	ST_paint();

	verify(plugin.setWindowCount > 0);
}
