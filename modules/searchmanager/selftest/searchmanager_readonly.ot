/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; -*-
**
** Copyright (C) 2007 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Frode Gill
*/

group "searchmanager.searchmanager_readonly";
require initialization;
require SEARCH_ENGINES;
require undefined USERDEFINED_SEARCHES;
require undefined DESKTOP_UTIL_SEARCH_ENGINES;

include "modules/searchmanager/searchmanager.h";
include "modules/prefs/prefsmanager/collections/pc_core.h";
include "modules/util/opfile/opmemfile.h";

global
{
	SearchElement* g_st_lycos_search_element;
	SearchManager* g_st_search_manager;
}

setup
{
	g_st_lycos_search_element = NULL;
	g_st_search_manager = NULL;
}

exit
{
	OP_DELETE(g_st_search_manager);
}

test("Setup Manager")
{
	g_st_search_manager = OP_NEW(SearchManager, ());
	verify(g_st_search_manager);
}

test("LoadL") leakcheck;
require success "Setup Manager";
require undefined HAVE_NO_OPMEMFILE;
{
	static const unsigned char search_ini_filecontent[] =
		"Opera Preferences version 2.0\n"
		"\n"
		"[Version]\n"
		"File Version=10\n"
		"\n"
		"[Ordering]\n"
		"Lycos\n"
		"Yahoo\n"
		"\n"
		"[Defaults]\n"
		"Type 1=Lycos\n"
		"Type 2=Yahoo\n"
		"\n"
		"[Lycos]\n"
		"ID=1\n"
		"Version=0\n"
		"Deleted=0\n"
		"Is Separator=0\n"
		"GUID=\n"
		"Name ID=0\n"
		"Name=&Lycos\n"
		"Description ID=0\n"
		"Description=Search with %s?\n"
		"URL=http://search.lycos.com/?query=%s&n=%i&x=0&y=0\n"
		"Key=l\n"
		"Is post=0\n"
		"Post Query=\n"
		"Type=1\n"
		"Icon URL=http://www.lycos.com/favicon.ico\n"
		"Encoding=utf-8\n"
		"\n"
		"[Yahoo]\n"
		"ID=2\n"
		"Deleted=1\n"
		"Name=Y&ahoo\n"
		"URL=http://search.yahoo.com/search?p=%s&n=%i&fr=yfp-t-501&toggle=1&cop=mss&ei=UTF-8\n"
		"Key=y\n"
		"Type=1\n";


	OpMemFile* search_ini_memfile = OpMemFile::Create(search_ini_filecontent, static_cast<long>(sizeof search_ini_filecontent));
	verify(g_st_search_manager->LoadL(search_ini_memfile) == OpStatus::OK);

	verify(g_st_search_manager->GetSearchEnginesCount(TRUE, TRUE) == 2);
}

test("GetSearchesByType") leakcheck;
require success "LoadL";
{
	OpINT32Vector result_vector;
	verify(g_st_search_manager->GetSearchesByType(SEARCH_TYPE_UNDEFINED, result_vector, TRUE) == OpStatus::OK); //Returns ALL searches
	verify(result_vector.GetCount() == 2);
	verify(result_vector.Get(0) == 1);
	verify(result_vector.Get(1) == 2);
}

test("GetSearchById")
require success "GetSearchesByType";
{
	g_st_lycos_search_element = g_st_search_manager->GetSearchById(1);
	verify(g_st_lycos_search_element);
	verify(g_st_lycos_search_element->GetId() == 1);
}

test("GetSearchByKey")
require success "GetSearchById";
{
	SearchElement* lycos = g_st_search_manager->GetSearchByKey(UNI_L("l"), TRUE);
	verify(lycos != NULL);
	verify(lycos->GetId() == 1);
}

test("GetDefaultSearch")
require success "GetSearchByKey";
{
	verify(g_st_search_manager->GetDefaultSearchId(-1) == 0);
	verify(g_st_search_manager->GetDefaultSearchId(0) == 1);
	verify(g_st_search_manager->GetDefaultSearchId(1) == 2);
	verify(g_st_search_manager->GetDefaultSearchId(DEFAULT_SEARCH_PRESET_COUNT) == 0);

	SearchElement* yahoo = g_st_search_manager->GetDefaultSearch(1, FALSE);
	verify(yahoo == NULL);
	yahoo = g_st_search_manager->GetDefaultSearch(1, TRUE);
	verify(yahoo != NULL);
	verify(yahoo->GetId() == 2);
}

test("GetSearchByURL")
require success "GetDefaultSearch";
{
	SearchElement* dummy = g_st_search_manager->GetSearchByURL(UNI_L("http://www.dummy.com/"), TRUE);
	verify(dummy == NULL);

	SearchElement* lycos = g_st_search_manager->GetSearchByURL(UNI_L("http://search.lycos.com/?query=%s&n=%i&x=0&y=0"), TRUE);
	verify(lycos != NULL);
	verify(lycos->GetId() == 1);

	SearchElement* yahoo = g_st_search_manager->GetSearchByURL(UNI_L("http://search.yahoo.com/search?p=%s&n=%i&fr=yfp-t-501&toggle=1&cop=mss&ei=UTF-8"), FALSE);
	verify(yahoo == NULL);
	yahoo = g_st_search_manager->GetSearchByURL(UNI_L("http://search.yahoo.com/search?p=%s&n=%i&fr=yfp-t-501&toggle=1&cop=mss&ei=UTF-8"), TRUE);
	verify(yahoo != NULL);
	verify(yahoo->GetId() == 2);
}


test("GUID")
require success "GetSearchById";
{
	OpString teststring;
	verify(g_st_lycos_search_element->GetLinkGUID(teststring) == OpStatus::OK);
	verify(teststring.Compare(UNI_L("")) == 0);
}

test("Name")
require success "GUID";
{
	OpString teststring;
	verify(g_st_lycos_search_element->GetName(teststring, FALSE) == OpStatus::OK);
	verify(teststring.Compare(UNI_L("&Lycos")) == 0);
	verify(g_st_lycos_search_element->GetName(teststring, TRUE) == OpStatus::OK);
	verify(teststring.Compare(UNI_L("Lycos")) == 0);
}

test("Description")
require success "Name";
{
	OpString teststring;
	verify(g_st_lycos_search_element->GetDescription(teststring, FALSE) == OpStatus::OK);
	verify(teststring.Compare(UNI_L("Search with &Lycos?")) == 0);
	verify(g_st_lycos_search_element->GetDescription(teststring, TRUE) == OpStatus::OK);
	verify(teststring.Compare(UNI_L("Search with Lycos?")) == 0);
}

test("Url")
require success "Description";
{
	OpString teststring;
	verify(g_st_lycos_search_element->GetURL(teststring) == OpStatus::OK);
	verify(teststring.Compare(UNI_L("http://search.lycos.com/?query=%s&n=%i&x=0&y=0")) == 0);
}

test("Key")
require success "Url";
{
	OpString teststring;
	verify(g_st_lycos_search_element->GetKey(teststring) == OpStatus::OK);
	verify(teststring.Compare(UNI_L("l")) == 0);
}

test("IsPost")
require success "Key";
{
	verify(g_st_lycos_search_element->IsPost() == FALSE);
}

test("PostQuery")
require success "IsPost";
{
	OpString teststring;
	verify(g_st_lycos_search_element->GetPostQuery(teststring) == OpStatus::OK);
	verify(teststring.IsEmpty());
}

test("Charset")
require success "PostQuery";
{
	OpString teststring;
	verify(g_st_lycos_search_element->GetCharset(teststring) == OpStatus::OK);
	verify(teststring.CompareI(UNI_L("utf-8")) == 0);
}

test("SearchType")
require success "Charset";
{
	verify(g_st_lycos_search_element->GetType() == SEARCH_TYPE_SEARCH);
}

test("IconUrl")
require success "SearchType";
{
	OpString teststring;
	verify(g_st_lycos_search_element->GetIconURL(teststring) == OpStatus::OK);
	verify(teststring.Compare(UNI_L("http://www.lycos.com/favicon.ico")) == 0);
}

test("MakeSearch")
require success "IconUrl";
{
	OpString test_url;
	OpString test_post_query;
	OpString correct_result;
	int hits = g_pccore->GetIntegerPref(PrefsCollectionCore::PreferredNumberOfHits);
	if (hits == 0)
		hits = 10;

	verify(correct_result.AppendFormat(UNI_L("http://search.lycos.com/?query=g%%C3%%B8%%C3%%B8gle&n=%i&x=0&y=0"), hits) == OpStatus::OK);

	verify(g_st_lycos_search_element->MakeSearchString(test_url, test_post_query, UNI_L("g\x00F8\x00F8gle")) == OpStatus::OK);
	verify(test_url.Compare(correct_result) == 0);
	verify(test_post_query.IsEmpty());
}

test("Deleted")
require success "MakeSearch";
{
	verify(g_st_lycos_search_element->IsDeleted() == FALSE);
}


