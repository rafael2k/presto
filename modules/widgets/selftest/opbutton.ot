group "widgets.opbutton";
require init;

language c++;

include "modules/widgets/OpButton.h";
include "modules/widgets/OpButtonGroup.h";
include "modules/display/vis_dev.h";
include "modules/forms/piforms.h";
include "modules/logdoc/htm_elm.h";

global
{
	class TestContext : public OpInputContext
	{
	public:
		TestContext() : m_last_action(OpInputAction::ACTION_ZOOM_TO) {}

		BOOL OnInputAction(OpInputAction* action)
		{
			switch (action->GetAction())
			{
				case OpInputAction::ACTION_GET_ACTION_STATE:
					action = action->GetChildAction();
					switch (action->GetAction())
					{
						case OpInputAction::ACTION_ZOOM_IN:
							action->SetEnabled(m_last_action == OpInputAction::ACTION_ZOOM_TO);
							return TRUE;
						case OpInputAction::ACTION_ZOOM_OUT:
							action->SetEnabled(m_last_action == OpInputAction::ACTION_ZOOM_IN);
							return TRUE;
						case OpInputAction::ACTION_ZOOM_TO:
							action->SetEnabled(m_last_action == OpInputAction::ACTION_ZOOM_OUT);
							return TRUE;
					}
					return FALSE;

				case OpInputAction::ACTION_ZOOM_IN:
					if (m_last_action == OpInputAction::ACTION_ZOOM_TO)
					{
						m_last_action = action->GetAction();
						return TRUE;
					}
					return FALSE;
				case OpInputAction::ACTION_ZOOM_OUT:
					if (m_last_action == OpInputAction::ACTION_ZOOM_IN)
					{
						m_last_action = action->GetAction();
						return TRUE;
					}
					return FALSE;
				case OpInputAction::ACTION_ZOOM_TO:
					if (m_last_action == OpInputAction::ACTION_ZOOM_OUT)
					{
						m_last_action = action->GetAction();
						return TRUE;
					}
					return FALSE;
			}
			return FALSE;
		}

		OpInputAction::Action m_last_action;
	};
}

table Actions(OpInputAction::Action, const uni_char*)
{
	{OpInputAction::ACTION_ZOOM_IN,		UNI_L("IN")},
	{OpInputAction::ACTION_ZOOM_OUT,	UNI_L("OUT")},
	{OpInputAction::ACTION_ZOOM_TO,		UNI_L("TO")},
}

html
{
	//!	<html>
	//!		<body>
	//!			<input type="button" />
	//!		</body>
	//!	</html>
}
test("Action rotation")
	require QUICK;
{
	OpButton* button = NULL;

	HTML_Element* element = find_element("input", 1);
	verify(element != NULL);
	verify(element->GetFormObject() != NULL);

	OpWidget* widget = element->GetFormObject()->GetWidget();
	verify(widget != NULL);
	verify(widget->GetType() == OpTypedObject::WIDGET_TYPE_BUTTON);

	button = static_cast<OpButton*>(widget);

	TestContext context;
	button->SetParentInputContext(&context);

	OpInputAction* action = NULL;
	verify_success(OpInputAction::CreateInputActionsFromString(
				"Zoom in, , , IN | Zoom out, , , OUT | Zoom to, , , TO", action));
	button->SetAction(action);

	iterate (action, text) from Actions
	{
		button->OnUpdateActionState();
		verify_string(button->string.Get(), text);
		button->Click();
		verify(context.m_last_action == action);
	}
	iterate (action, text) from Actions
	{
		button->OnUpdateActionState();
		verify_string(button->string.Get(), text);
		button->Click();
		verify(context.m_last_action == action);
	}
}
finally
{
	if (button != NULL)
	{
		button->SetParentInputContext(NULL);
	}
}

test("Radio is removed from radiogroup when removed from hierarchy")
	require QUICK;
	require ACCESSIBILITY_EXTENSION_SUPPORT;
{
	OpRadioButton* radio;
	verify_success(OpRadioButton::Construct(&radio));

	VisualDevice vd;
	radio->SetVisualDevice(&vd);

	OpButtonGroup radiogroup(0);
	verify(radio->RegisterToButtonGroup(&radiogroup));

	verify(radiogroup.GetAccessibleChildrenCount() == 1);
	verify(radiogroup.GetAccessibleChild(0) == radio);

	radio->Remove();

	verify(radiogroup.GetAccessibleChildrenCount() == 0);
}
finally
{
	if (radio)
		radio->Delete();
}
