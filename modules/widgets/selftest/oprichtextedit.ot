group "widgets.richtextedit";
require init;
require MULTILABEL_RICHTEXT_SUPPORT;

language c++;

include "modules/display/vis_dev.h";
include "modules/widgets/OpMultiEdit.h";
include "modules/widgets/OpTextCollection.h";

global
{
	class OpRichtextEditTester : public OpRichtextEdit
	{
		public:
			OpRichtextEditTester() : OpRichtextEdit() {}
			virtual ~OpRichtextEditTester() {}
			OP_STATUS TestSetTextStyle(UINT32 start, UINT32 end, UINT32 style, const uni_char* param = NULL, int param_len = 0)
				{	return SetTextStyle(start, end, style, param, param_len); }
			OP_TCINFO *TestTCGetInfo() { return TCGetInfo(); }
	};

	OpRichtextEditTester *widget;
	VisualDevice vd;

}

setup
{
	widget = NULL;
}

exit
{
	OP_DELETE(widget);
}

test("OpRichTextEdit Creation")
{
	widget = OP_NEW(OpRichtextEditTester, ());
	verify(widget);
	widget->SetVisualDevice(&vd);
}

test("Setting text with bold")
	require success "OpRichTextEdit Creation";
{
	OP_TCINFO *info = NULL;

	verify(OpStatus::IsSuccess(widget->SetText(UNI_L("Bolded text"))));
	verify(OpStatus::IsSuccess(widget->TestSetTextStyle(0, 10, OP_TC_STYLE_BOLD)));

	info = widget->TestTCGetInfo();

	verify(info);
	verify(info->styles);
	verify(info->style_count == 2);
	verify(info->styles[0]->position == 0);
	verify(info->styles[0]->style == OP_TC_STYLE_BOLD);
	verify(info->styles[1]->position == 10);
	verify(info->styles[1]->style == OP_TC_STYLE_NORMAL);
}

test("Setting text with italic")
	require success "OpRichTextEdit Creation";
{
	OP_TCINFO *info = NULL;

	verify(OpStatus::IsSuccess(widget->SetText(UNI_L("Italic text"))));
	verify(OpStatus::IsSuccess(widget->TestSetTextStyle(0, 10, OP_TC_STYLE_ITALIC)));

	info = widget->TestTCGetInfo();

	verify(info);
	verify(info->styles);
	verify(info->style_count == 2);
	verify(info->styles[0]->position == 0);
	verify(info->styles[0]->style == OP_TC_STYLE_ITALIC);
	verify(info->styles[1]->position == 10);
	verify(info->styles[1]->style == OP_TC_STYLE_NORMAL);
}

test("Setting text with underline")
	require success "OpRichTextEdit Creation";
{
	OP_TCINFO *info = NULL;

	verify(OpStatus::IsSuccess(widget->SetText(UNI_L("Underlined text"))));
	verify(OpStatus::IsSuccess(widget->TestSetTextStyle(0, 14, OP_TC_STYLE_UNDERLINE)));

	info = widget->TestTCGetInfo();

	verify(info);
	verify(info->styles);
	verify(info->style_count == 2);
	verify(info->styles[0]->position == 0);
	verify(info->styles[0]->style == OP_TC_STYLE_UNDERLINE);
	verify(info->styles[1]->position == 14);
	verify(info->styles[1]->style == OP_TC_STYLE_NORMAL);
}

test("Setting text with link")
	require success "OpRichTextEdit Creation";
{
	OP_TCINFO *info = NULL;

	verify(OpStatus::IsSuccess(widget->SetText(UNI_L("Linked text"))));
	verify(OpStatus::IsSuccess(widget->TestSetTextStyle(0, 10, OP_TC_STYLE_LINK, L"http://opera.com", 16)));

	info = widget->TestTCGetInfo();

	verify(info);
	verify(info->styles);
	verify(info->style_count == 2);
	verify(info->styles[0]->position == 0);
	verify(info->styles[0]->style == OP_TC_STYLE_LINK);
	verify(info->styles[1]->position == 10);
	verify(info->styles[1]->style == OP_TC_STYLE_NORMAL);
}

test("Setting text style out of bounds")
	require success "OpRichTextEdit Creation";
{
	OP_TCINFO *info = NULL;

	verify(OpStatus::IsSuccess(widget->SetText(UNI_L("Out of bounds text"))));
	verify(OpStatus::IsError(widget->TestSetTextStyle(0, 40, OP_TC_STYLE_LINK, UNI_L("http://opera.com"), 16)));

	info = widget->TestTCGetInfo();

	verify(info);
	verify(info->style_count == 0);
}

test("Setting multiple text styles at once")
	require success "OpRichTextEdit Creation";
{
	OP_TCINFO *info = NULL;

	verify(OpStatus::IsSuccess(widget->SetText(UNI_L("Small test with bolded and underlined text in a middle suffixed by italics with a link inside."))));
	verify(OpStatus::IsSuccess(widget->TestSetTextStyle(16, 22, OP_TC_STYLE_BOLD)));
	verify(OpStatus::IsSuccess(widget->TestSetTextStyle(27, 37, OP_TC_STYLE_UNDERLINE)));
	verify(OpStatus::IsSuccess(widget->TestSetTextStyle(67, 93, OP_TC_STYLE_ITALIC)));
	verify(OpStatus::IsSuccess(widget->TestSetTextStyle(80, 86, OP_TC_STYLE_LINK, UNI_L("http://opera.com"), 16)));

	info = widget->TestTCGetInfo();

	verify(info);
	verify(info->styles);
	verify(info->style_count == 8);
	verify(info->styles[0]->position == 16);
	verify(info->styles[0]->style == OP_TC_STYLE_BOLD);
	verify(info->styles[1]->position == 22);
	verify(info->styles[1]->style == OP_TC_STYLE_NORMAL);
	verify(info->styles[2]->position == 27);
	verify(info->styles[2]->style == OP_TC_STYLE_UNDERLINE);
	verify(info->styles[3]->position == 37);
	verify(info->styles[3]->style == OP_TC_STYLE_NORMAL);
	verify(info->styles[4]->position == 67);
	verify(info->styles[4]->style == OP_TC_STYLE_ITALIC);
	verify(info->styles[5]->position == 80);
	verify(info->styles[5]->style == OP_TC_STYLE_ITALIC | OP_TC_STYLE_LINK);
	verify(info->styles[6]->position == 86);
	verify(info->styles[6]->style == OP_TC_STYLE_ITALIC);
	verify(info->styles[7]->position == 93);
	verify(info->styles[7]->style == OP_TC_STYLE_NORMAL);
}

test("Setting text style for single character")
{
	verify_success(widget->SetText(UNI_L("c text with single character")));
	verify_success(widget->TestSetTextStyle(0, 1, OP_TC_STYLE_BOLD));

	OP_TCINFO *info = widget->TestTCGetInfo();

	verify(info);
	verify(info->styles);
	verify(info->style_count == 2);
	verify(info->styles[0]->position == 0);
	verify(info->styles[0]->style == OP_TC_STYLE_BOLD);
	verify(info->styles[1]->position == 1);
	verify(info->styles[1]->style == OP_TC_STYLE_NORMAL);
}
