/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "widgets.opmultiedit";
require init;

language c++;

include "modules/widgets/OpMultiEdit.h";
include "modules/display/vis_dev.h";
include "modules/forms/piforms.h";
include "modules/logdoc/htm_elm.h";

global
{
	class SelectionListener : public OpWidgetListener
	{
	public:
		virtual void OnSelect(OpWidget *widget) { m_selected = TRUE; };
		BOOL m_selected;
	};
};

test("SetLabelMode() respects allow_selection flag")
{
	OpMultilineEdit* edit = NULL;
	verify_success(OpMultilineEdit::Construct(&edit));
	SelectionListener listener;
	edit->SetListener(&listener);
	VisualDevice vd;
	edit->SetVisualDevice(&vd);

	edit->SetLabelMode(TRUE);
	verify(edit->IsFlatMode());

	listener.m_selected = FALSE;
	edit->SelectAll();
	verify(listener.m_selected);

	edit->SetLabelMode(FALSE);
	verify(edit->IsFlatMode());

	listener.m_selected = FALSE;
	edit->SelectAll();
	verify(!listener.m_selected);
}
finally
{
	if (edit)
		edit->Delete();
}

html
{
//! <!doctype HTML>
//! <html>
//! <head>
//! <style type="text/css">
//! textarea { font-family: bitstream vera sans; font-size: 14px; width: 120px; }
//! </style>
//! </head>
//! <body>
//! <textarea></textarea>
//! </body>
//! </html>
}
test("aggressive wrapping")
{
	const uni_char* ref_str = UNI_L("iknowthepiecesfitcauseiwatchedthemfallaway");
	const INT32 ref_len = uni_strlen(ref_str);

	OpString str;
	verify(OpStatus::IsSuccess(str.Reserve(ref_len + 11) && "OOM"));

	// fetch textarea
	HTML_Element* ta = find_element("textarea");
	verify(ta);
	verify(ta->Type() == HE_TEXTAREA);
	FormObject* fo = ta->GetFormObject();
	verify(fo);
	OpWidget* w = fo->GetWidget();
	verify(w);
	verify(w->GetType() == OpTypedObject::WIDGET_TYPE_MULTILINE_EDIT);
	OpMultilineEdit* me = static_cast<OpMultilineEdit*>(w);

	me->SetAggressiveWrapping(FALSE);
	verify(OpStatus::IsSuccess(me->SetText(ref_str)) && "OOM");

	// verify that everything works without aggressive wrapping
	verify(me->GetTextLength(FALSE) == ref_len);
	verify(me->GetTextLength(TRUE)  == ref_len);
	verify(OpStatus::IsSuccess(me->GetText(str, FALSE)));
	verify(!uni_strcmp(ref_str, str.CStr()));
	verify(OpStatus::IsSuccess(me->GetText(str, TRUE)));
	verify(!uni_strcmp(ref_str, str.CStr()));

	me->SetAggressiveWrapping(TRUE);

	// verify that everything works with aggressive wrapping
	verify(me->GetTextLength(FALSE) == ref_len);
	verify(me->GetTextLength(TRUE)  >  ref_len);
	verify(OpStatus::IsSuccess(me->GetText(str, FALSE)));
	verify(!uni_strcmp(ref_str, str.CStr()));
	// check that str sans line-breaks matches ref
	verify(OpStatus::IsSuccess(me->GetText(str, TRUE)));
	const uni_char* lb = UNI_L("\r\n");
	const uni_char* s = str.CStr(), *r = ref_str;
	while (1)
	{
		const uni_char* b = uni_strstr(s, lb);
		if (!b)
		{
			verify(!uni_strcmp(s, r));
			break;
		}

		const size_t len = b - s;
		verify(!uni_strncmp(s, r, len));
		r += len;
		s += len + uni_strlen(lb);
	}

	me->SetAggressiveWrapping(FALSE);

	// verify that everything works after disabling aggressive wrapping
	verify(me->GetTextLength(FALSE) == ref_len);
	verify(me->GetTextLength(TRUE)  == ref_len);
	verify(OpStatus::IsSuccess(me->GetText(str, FALSE)));
	verify(!uni_strcmp(ref_str, str.CStr()));
	verify(OpStatus::IsSuccess(me->GetText(str, TRUE)));
	verify(!uni_strcmp(ref_str, str.CStr()));
}
