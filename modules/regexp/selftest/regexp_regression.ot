/* -*- mode: c++ -*- */

group "regexp.regression";

language ecmascript;

test("bug 349221")
{
  var input = "zaacbbbcac";
  var groups = /(z)((a+)?(b+)?(c))*/.exec (input);

  verify (groups);
  verify (groups[0] === input);
  verify (groups[1] === "z");
  verify (groups[2] === "ac");
  verify (groups[3] === "a");
  verify (groups[4] === undefined);
  verify (groups[5] === "c");
}

test("bug 349221 variation #1")
{
  var input = "zaacbbbcac";
  var groups = /z(?:a*(b+)?c)*/.exec (input);

  verify (groups);
  verify (groups[0] === input);
  verify (groups[1] === undefined);
}

test("bug 349221 variation #2")
{
  var input = "zaacbbbcac";
  var groups = /z(?:a|(b)|c)*/.exec (input);

  verify (groups);
  verify (groups[0] === input);
  verify (groups[1] === undefined);
}

test("bug 350812")
{
  verify ((new RegExp ("\\.?")).test (""));
}

test("bug 359604")
{
  verify ((new RegExp ("^(?:ab+)*$")).test ("abbabbabb"));
  verify ((new RegExp ("^(?:\n.+)*$")).test ("\nbb\nbb\nbb"));
  verify ((new RegExp ("^(?:a[b-z]+)*$")).test ("abbabbabb"));
  verify ((new RegExp ("^(?:a(?:b|c)+)*$")).test ("abbabbabb"));
}

test("bug 362767")
{
  verify (!(new RegExp ("(a).*\\1|x|y.")).test ("y"));
}

test("Disjunction in loop")
{
  var input = "abab";
  var groups = input.match("^(a|ab){2}$");
  verify(groups);
  verify(groups[0] === input);
  verify(groups[1] === "ab");
}

test("Disjunction in nestled loops 1")
{
  var input = "abababab";
  var groups = input.match("^((a|ab){2,3}){2}$");
  verify(groups);
  verify(groups[0] === input);
  verify(groups[1] === "abab");
  verify(groups[2] === "ab");
}

test("Disjunction in nestled loops 2")
{
  var input = "ababab";
  var groups = input.match("^((a|ab){1,}){3,}$");
  verify(groups);
  verify(groups[0] === input);
  verify(groups[1] === "ab");
  verify(groups[2] === "ab");
}

test("Disjunction in nestled loops 3")
{
  var input = "abab";
  var groups = input.match("^((a|ab){2}){1}$");
  verify(groups);
  verify(groups[0] === input);
  verify(groups[1] === input);
  verify(groups[2] === "ab");
}

test("bug CORE-19701")
{
  var input = "ab";
  var groups = input.match("^(?:a(?:b|c)*)?$");
  verify(groups);
  verify(groups[0] === input);
}

test("CORE-29903 #1")
{
  var input = "aaa";
  var regexp = new RegExp("(a+){3}");
  var result = regexp.exec(input);

  verify(result instanceof Array);
  verify(result[0] == "aaa");
  verify(result[1] == "a");
}

test("CORE-29903 #2")
{
  var input = "aaa";
  var regexp = new RegExp("(a*){3}");
  var result = regexp.exec(input);

  verify(result instanceof Array);
  verify(result[0] == "aaa");
  verify(result[1] == "");
}

test("CORE-29903 #3")
{
  var input = "aaaaaaaaa";
  var regexp = new RegExp("^(a{1,3})*$");
  var result = regexp.exec(input);

  verify(result instanceof Array);
  verify(result[0] == "aaaaaaaaa");
  verify(result[1] == "aaa");
}

test("CORE-29903 #4")
{
  var input = "http://tw.yimg.com/a/tw/wenchuan/cam_240x400_381615_030806_2.swf?clickTAG=javascript:VRECopenWindow(1)";
  var regexp = new RegExp("^(?:(?:%[0-9A-Fa-f]{2})*[!\\$&'\\*-;=\\?-Z_a-z]*)+$");

  verify(!regexp.test(input));
}

test("CORE-29903 #5")
{
  var input = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxy";
  var regexp = new RegExp("^(?:x*){56,64}$");

  verify(!regexp.test(input));
}

test("CORE-35773 - non-greedy matching #1")
{
  var input = "cc";
  var groups = input.match("()c\\1+?c");
  verify(groups);
  verify(groups[0] === input);
}

test("CORE-35773 - non-greedy matching #2")
{
  var input = "..a";
  var groups = input.match("(?=.?(?=a)+?x){2}");
  verify(!groups);
}

test("CORE-35773 - non-greedy matching #3")
{
  var input = "..a";
  var groups = new RegExp("(?=.?(?=a)+?a){2}").exec(input);
  verify(groups);
  verify(groups.length == 1);
  verify(groups[0] === "");
}

test("bug CORE-34598")
{
  var re1 = new RegExp("[\u2000\u1000-\u3000]");
  verify(re1.test('\u2a00'));
  verify(re1.test('\u3000'));
  verify(re1.test('\u1000'));
  verify(re1.test('\u2000'));
  verify(re1.test('\u0aff') == false);
  verify(re1.test('\u3001') == false);

  var re2 = new RegExp("[\u2000\u2200\u1000-\u3000]");
  verify(re2.test('\u2a00'));
  verify(re2.test('\u3000'));
  verify(re2.test('\u1000'));
  verify(re2.test('\u2100'));
  verify(re2.test('\u2200'));
  verify(re2.test('\u2300'));
  verify(re2.test('\u2000'));
  verify(re2.test('\u0aff') == false);
  verify(re2.test('\u3001') == false);

  /* Final included range tests that the ranges it spans (included & excluded)
   * are merged correctly. */
  var re2 = new RegExp("[\u2000-\u2100\u2200-\u3000\u3500-\u4500\u21a0-\u4400]");
  verify(re2.test('\u2000'));
  verify(re2.test('\u2150') == false);
  verify(re2.test('\u2250'));
  verify(re2.test('\u3250'));
  verify(re2.test('\u21a1'));
  verify(re2.test('\u41a1'));
  verify(re2.test('\u44a1'));
  verify(re2.test('\u4501') == false);
}
