/* Test the RegExp "advanced" API.    -*- mode: pike; tab-width: 4 -*- */

group "regexp.advanced_api";

language c++;

include "modules/regexp/include/regexp_api.h";
include "modules/regexp/include/regexp_advanced_api.h";

test("Construction")
{
	OP_STATUS r1 = OpStatus::OK;
	RegExp *re = OP_NEW(RegExp, ());

	verify( re != NULL );

	// FIXME: Will leak the RegExp object on test failure!
	RegExpFlags flags;
	flags.ignore_case = MAYBE;
	flags.multi_line = MAYBE;
	flags.ignore_whitespace = FALSE;

    const uni_char *src = UNI_L("a*(?P<b_seq>b*)c");
	
	r1 = re->Init(src, uni_strlen(src), NULL, &flags);

	verify( OpStatus::IsSuccess(r1) );
	verify( re->GetNumberOfCaptures() == 1 );

	RegExpMatch* results;
	BOOL matched = FALSE;
	TRAP( r1, matched = re->ExecL( UNI_L("abc"), 3, 0, &results ) );
	
	int idx;
	verify( re->GetNumberOfSymbols() == 1 );
	verify( uni_strcmp( UNI_L("b_seq"), re->GetSymbol(0, &idx) ) == 0 );

	verify( OpStatus::IsSuccess(r1) );
	verify( matched );
	verify( results[0].start == 0 );
	verify( results[0].length == 3 );
	verify( results[1].start == 1 );
	verify( results[1].length == 1 );

	re->IncRef();
	re->DecRef();
}
finally 
{
	re->DecRef();
}
