/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 1995-2010 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.  It may not be distributed
 * under any circumstances.
 *
 * Lars T Hansen
 * Peter Krefting
 */

group "stdlib.float";

include "modules/stdlib/include/double_format.h";

global
{
	double myzero = 0.0;
#ifdef QUIET_NAN_IS_ONE
	double nan1 = op_implode_double( 0x7fffffffUL, 0xffffffffUL );
	double nan2 = op_implode_double( 0x7fffffffUL, 0xffffffffUL );
#else
	double nan1 = op_implode_double( 0x7ff7ffffUL, 0xffffffffUL );
	double nan2 = op_implode_double( 0x7ff7ffffUL, 0xffffffffUL );
#endif
	double posinf = op_implode_double( 0x7ff00000UL, 0UL );
	double neginf = op_implode_double( 0xfff00000UL, 0UL );
	double epsilon = 1E-12;
}

test("NaN configuration")
	require undefined NAN_EQUALS_EVERYTHING;
{
	/*
	 * Typically it is a problem under Microsoft Visual C/C++ that NaN
	 * compares equal with everything.  This is bizarre and very
	 * wrong.  If you fail here you must turn on NAN_EQUALS_EVERYTHING
	 * in your SYSTEM defines.
	 */

	verify(nan1 != 1);
	verify(op_nan(NULL) != 1);
}

test("NaN guard")
	require undefined NEED_GUARD_AGAINST_NAN;
{
	/*
	 * On some platforms NaN cannot be used for computation, it will
	 * crash the program.  If your program crashes here, then turn on
	 * NEED_GUARD_AGAINST_NAN in your makefile or project.
	 */

	double d = nan1;
	d = d + 37;
	verify(op_isnan(d));
}

test("parsing NaN (non-critical)")
	require NAN_EQUALS_EVERYTHING;
{
	/*
	 * If this one fails, it means you may not have to use the
	 * SYSTEM_NAN_EQUALS_EVERYTHING == YES setting.  If setting this
	 * to NO causes problems in other tests, this selftest is not
	 * critical: Correct operation should still be expected but at a
	 * performance and footprint penalty.
	 */
	verify(nan1 == 3.14159);
	verify(op_nan(NULL) == 3.14159);
}

test("parsing NaN")
	require undefined NAN_EQUALS_EVERYTHING;
{
	/*
	 * If this test fails, it means that the standard is not followed
	 * in terms of how comparing NaNs should behave. In a correct
	 * implementation, NaNs should not compare equal.  Special code
	 * can be enabled to force correct behaviour at the expense of
	 * performance and footprint.
	 *
	 * Set SYSTEM_NAN_EQUALS_EVERYTHING == YES to activate this code.
	 */
	double x1 = nan1;
	double x2 = nan2;

	verify(x1 != x2);

	double y1 = op_nan(NULL);
	double y2 = op_nan(NULL);

	verify(y1 != y2);
}

test("parsing")
{
	char *ptr;
	verify(op_fabs(op_strtod("    +4.5e-8ebc", &ptr) - 4.5e-8) < epsilon && ptr[0] == 'e');
	verify(op_strtod("  -Infinity  ", NULL) == neginf);
	verify(op_strtod("  +Infinity", NULL) == posinf);
	verify(op_fabs(op_strtod("12345678901234.0000000000000000000000000000000000000000000000000000000000001", NULL) - 12345678901234.0) < epsilon);
	verify(op_fabs(op_strtod("12e3", &ptr) - 12000.0) < epsilon && ptr[0] == 0);
	verify(op_fabs(op_strtod("12e-3", &ptr) - 0.012) < epsilon && ptr[0] == 0);
	verify(op_fabs(op_strtod("-11E0", &ptr) - -11) < epsilon && ptr[0] == 0);
	verify(op_fabs(op_strtod("12e3q", &ptr) - 12000.0) < epsilon && ptr[0] == 'q');
	verify(op_fabs(op_strtod("12e-3q", &ptr) - 0.012) < epsilon && ptr[0] == 'q');
	verify(op_fabs(op_strtod("-11E0q", &ptr) - -11) < epsilon && ptr[0] == 'q');

	verify(op_isnan(op_strtod("  NaN", NULL)));
	verify(op_isnan(op_strtod("nan  ", NULL)));
	verify(op_isnan(op_strtod(" -nan ", NULL)));
	verify(op_isnan(op_strtod(" +NaN ", NULL)));
}

test("parsing uni_char")
{
	uni_char *ptr;
	verify(op_fabs(uni_strtod(UNI_L("    +4.5e-8ebc"), &ptr) - 4.5e-8) < epsilon && ptr[0] == 'e');
	verify(uni_strtod(UNI_L("  -Infinity  "), NULL) == neginf);
	verify(uni_strtod(UNI_L("  +Infinity"), NULL) == posinf);
	verify(op_fabs(uni_strtod(UNI_L("12345678901234.0000000000000000000000000000000000000000000000000000000000001"), NULL) - 12345678901234.0) < epsilon);
	verify(op_fabs(uni_strtod(UNI_L("12e3"), &ptr) - 12000.0) < epsilon && ptr[0] == 0);
	verify(op_fabs(uni_strtod(UNI_L("12e-3"), &ptr) - 0.012) < epsilon && ptr[0] == 0);
	verify(op_fabs(uni_strtod(UNI_L("-11E0"), &ptr) - -11) < epsilon && ptr[0] == 0);
	verify(op_fabs(uni_strtod(UNI_L("12e3q"), &ptr) - 12000.0) < epsilon && ptr[0] == 'q');
	verify(op_fabs(uni_strtod(UNI_L("12e-3q"), &ptr) - 0.012) < epsilon && ptr[0] == 'q');
	verify(op_fabs(uni_strtod(UNI_L("-11E0q"), &ptr) - -11) < epsilon && ptr[0] == 'q');
}

test("parsing uni_char #2")
{
	uni_char *ptr;
	verify( uni_strntod(UNI_L("314159e-5"), &ptr, 3) == 314 && ptr[0] == '1' );
}

test("uni_strntod")
{
	uni_char *ptr;
	verify(op_fabs(uni_strntod(UNI_L("    +4.5e-8ebc"), &ptr, 14) - 4.5e-8) < epsilon && ptr[0] == 'e');
	verify(op_fabs(uni_strntod(UNI_L("    +4.5e-8ebc"), &ptr, 11) - 4.5e-8) < epsilon && ptr[0] == 'e');
	verify(uni_strntod(UNI_L("  -Infinity  "), NULL, 13) == neginf);
	verify(uni_strntod(UNI_L("  +Infinity"), NULL, 11) == posinf);
	verify(op_fabs(uni_strntod(UNI_L("12345678901234.0000000000000000000000000000000000000000000000000000000000001"), NULL, 20) - 12345678901234.0) < epsilon);
	verify(op_fabs(uni_strntod(UNI_L("12345678901234.0000000000000000000000000000000000000000000000000000000000001"), NULL, 9) - 123456789.0) < epsilon);
	verify(op_fabs(uni_strntod(UNI_L("12e3"), &ptr, 4) - 12000.0) < epsilon && ptr[0] == 0);
	verify(op_fabs(uni_strntod(UNI_L("12e-3"), &ptr, 5) - 0.012) < epsilon && ptr[0] == 0);
	verify(op_fabs(uni_strntod(UNI_L("-11E0"), &ptr, 5) - -11) < epsilon && ptr[0] == 0);
	verify(uni_strntod(UNI_L("12e3q"), &ptr, 2) == 12.0);
	verify(op_fabs(uni_strntod(UNI_L("12e-3q"), &ptr, 6) - 0.012) < epsilon && ptr[0] == 'q');
	verify(op_fabs(uni_strntod(UNI_L("-11E0q"), &ptr, 6) - -11) < epsilon && ptr[0] == 'q');
}

test("classification")
{
	verify( op_isnan( nan1 ) );
	verify( !op_isnan( 5.0 ) );
	verify( op_isinf( posinf ) );
	verify( op_isinf( neginf ) );
	verify( !op_isinf( 5.0 ) );
	verify( op_isfinite( 5.0 ) );
	verify( !op_isfinite( posinf ) );
	verify( !op_isfinite(nan1) );
	verify( op_isintegral( 5.0 ) );
	verify( !op_isintegral( posinf ) );
	verify( !op_isintegral(nan1) );
}

test("op_modf")
{
	double intpart;
	verify(op_modf(1.125, &intpart) == 0.125);
	verify(intpart == 1.0);
	verify(stdlib_intpart(1.125) == intpart);
}

test("op_signbit")
{
	verify(op_signbit(1.0) == 0);
	verify(op_signbit(-1.0) == 1);
}

test("op_copysign")
{
	verify(op_copysign(5.0, -1.0) == -5.0);
	verify(op_copysign(-5.0, 1.0) == 5.0);
}

test("op_implode_double")
{
    verify( op_implode_double( 0x40000000U, 0x0 ) == 2.0 );
	verify( op_implode_double( 0x80000000U, 0x00000000U ) == 0.0 );		// -0.0
}

test("op_explode_double")
{
	double d = op_implode_double( 0x80000000U, 0x12340000U );
	UINT32 hi, lo;
	op_explode_double( d, hi, lo );
	verify( hi == 0x80000000U );
	verify( lo == 0x12340000U );
}

test("op_double_high and op_double_low")
{
	double d = op_implode_double( 0x80000000U, 0x12340000U );
	verify( op_double_high(d) == 0x80000000U );
	verify( op_double_low(d) == 0x12340000U );
}

test("op_ldexp")
	require STDLIB_OP_LDEXP;
{
	verify( op_ldexp(0.0, 10) == 0.0 );
	verify( op_ldexp(0.5, 4) == 8.0 );
}

test("op_frexp")
{
	int e;

	verify( op_frexp(0.0, &e) == 0.0 );
	verify( e == 0 );
	verify( op_frexp(8.0, &e) == 0.5 );
	verify( e == 4 );

	/* Behavior undefined for Infinity and NaN */
}

test("op_floor")
{
	verify( op_floor( 1.0 ) == 1.0 );
	verify( op_floor( 20.5 ) == 20.0 );
	verify( op_floor( 0.0 ) == 0.0 );
	verify( op_floor( -1.0 ) == -1.0 );
	verify( op_floor( -1.5 ) == -2.0 );
	verify( op_floor( 123456789123.0 ) == 123456789123.0 );
	verify( op_isnan(op_floor(nan1)) );
	verify( op_floor( posinf ) == posinf );
	verify( op_floor( neginf ) == neginf );
}

test("op_ceil")
{
	verify(op_ceil(1.0) == 1.0);
	verify(op_ceil(20.5) == 21.0);
	verify(op_ceil(0.0) == 0.0);
	verify(op_ceil(-1.0) == -1.0);
	verify(op_ceil(-1.5) == -1.0);
	verify(op_ceil(123456789123.0) == 123456789123.0);
	verify(op_isnan(op_ceil(nan1)));
	verify(op_ceil(posinf) == posinf);
	verify(op_ceil(neginf) == neginf);
}

test("op_truncate")
{
	verify(op_truncate(0.0) == 0.0);
	verify(op_truncate(1.2) == 1.0);
	verify(op_truncate(-1.2) == -1.0);
}

test("op_fmod")
{
	verify( op_fmod(10.5, 5.0) == 0.5 );
	verify( op_fmod(-10.5, 5.0) == -0.5 );
}

test("op_fabs")
{
	verify( op_fabs(1.0) == 1.0 );
	verify( op_fabs(-1.0) == 1.0 );
	verify( op_fabs(posinf) == posinf );
	verify( op_fabs(neginf) == posinf );
	verify( op_isnan(op_fabs(nan1)) );
}

table gfmt(double, const char *)
{
	{ 0.0, "0" },
	{ 10.0/3, "3.33333" },
	{ -10.0/3, "-3.33333" },
	{ 1E32, "1e+32" },
}

test("OpDoubleFormat::ToString")
{
	char buf[32]; /* ARRAY OK 2009-06-17 molsson */
	iterate (value, expected) from gfmt
	{
		verify(OpDoubleFormat::ToString(buf, value) == buf);
		// ToString() outputs the _closest_ decimal representation so in
		// most cases it has a higher precision than the "expected" values
		// we're using; let's at least verify that all expected decimal
		// places match and that g_fmt() produced enough decimal digits.
		verify(op_strlen(buf) >= op_strlen(expected));
		verify(op_strncmp(buf, expected, op_strlen(expected)) == 0);
	}

	verify(OpDoubleFormat::ToString(buf, posinf) == buf);
	verify(op_strncmp(buf, "Inf", 3) == 0);

	verify(OpDoubleFormat::ToString(buf, nan1) == buf);
	verify_string(buf, "NaN");
}

test("OpDoubleFormat::ToFixed")
{
	char buf[32]; /* ARRAY OK 2009-08-04 molsson */

	verify_string(OpDoubleFormat::ToFixed(buf, 10.0/3.0, 10, sizeof(buf)), "3.3333333333");
	verify_string(OpDoubleFormat::ToFixed(buf, 3, 10, sizeof(buf)), "3.0000000000");
	verify_string(OpDoubleFormat::ToFixed(buf, nan1, 10, sizeof(buf)), "NaN");
	verify_string(OpDoubleFormat::ToFixed(buf, posinf, 10, sizeof(buf)), "Infinity");
	verify_string(OpDoubleFormat::ToFixed(buf, neginf, 10, sizeof(buf)), "-Infinity");
	verify_string(OpDoubleFormat::ToFixed(buf, 10.0/8.0, 20, sizeof(buf)), "1.25000000000000000000");
	verify_string(OpDoubleFormat::ToFixed(buf, 10.0/-8.0, 20, sizeof(buf)), "-1.25000000000000000000");
// The following has problems maintaining the precision
//	verify_string(OpDoubleFormat::ToFixed(buf, 1000000000000000128.0, 0, sizeof(buf)), "1000000000000000128");
	verify_string(OpDoubleFormat::ToFixed(buf, 1e21, 1, sizeof(buf)), "1000000000000000000000.0");
	verify_string(OpDoubleFormat::ToFixed(buf, -1e21, 1, sizeof(buf)), "-1000000000000000000000.0");
	verify_string(OpDoubleFormat::ToFixed(buf, 512.314, 0, sizeof(buf)), "512");
	verify_string(OpDoubleFormat::ToFixed(buf, -512.314, 0, sizeof(buf)), "-512");
	verify_string(OpDoubleFormat::ToFixed(buf, 0.00123, 7, sizeof(buf)), "0.0012300");
	verify_string(OpDoubleFormat::ToFixed(buf, 0.00123, 0, sizeof(buf)), "0");
	verify_string(OpDoubleFormat::ToFixed(buf, -0.0, 4, sizeof(buf)), "0.0000");
	// Note: EcmaScript spec (ECMA-262 5th edition) section 15.7.4.5: "Number.prototype.toFixed()" says
	// in step 8A that "if there is two such N, pick the larger N" which means "round away from zero".
	// This is different from for example the sprintf("%.1f") rounding which uses "round to even" instead.
	verify_string(OpDoubleFormat::ToFixed(buf, -2.5, 0, sizeof(buf)), "-3");
	verify_string(OpDoubleFormat::ToFixed(buf, -1.5, 0, sizeof(buf)), "-2");
	verify_string(OpDoubleFormat::ToFixed(buf, -0.5, 0, sizeof(buf)), "-1");
	verify_string(OpDoubleFormat::ToFixed(buf, 0.5, 0, sizeof(buf)), "1");
	verify_string(OpDoubleFormat::ToFixed(buf, 1.5, 0, sizeof(buf)), "2");
	verify_string(OpDoubleFormat::ToFixed(buf, 2.5, 0, sizeof(buf)), "3");
}

table toexponential(double, int, const char *)
{

	{ 1.0/3, 2, "3.33e-1" },
	{ 1E32,  2, "1.00e+32" },
	{ 0.0,   2, "0.00e+0" },
	{ 3, 0, "3e+0" },
	{ 3, 4, "3.0000e+0" },
	{ 31.4159, 4, "3.1416e+1" },
	{ 31.4165, 4, "3.1416e+1" },  // Round to even
	{ 1234567890, 5, "1.23457e+9" },
	{ 2e300, 4, "2.0000e+300" },
  	{ 0.05, 3, "5.000e-2" },
	{ 0.05050505, 3, "5.051e-2" },
	{ 3.14159, 0, "3e+0" },
	{ 3.14159, -1, "3.14159e+0" },
	{ -0.0, 10, "0.0000000000e+0" },
	{ 0.0, 10, "0.0000000000e+0" },
	// Note: For details, see EcmaScript spec (ECMA-262 5th edition) section
	// 15.7.4.6: "Number.prototype.toExponential()" under step 9. This rounding
	// is different from sprintf("%.1f") "round to even" etc.
	{ -2.5, 0, "-3e+0" },
	{ -1.5, 0, "-2e+0" },
	{ -0.5, 0, "-5e-1" },
	{ 0.5, 0, "5e-1" },
	{ 1.5, 0, "2e+0" },
	{ 2.5, 0, "3e+0" },
}

test("OpDoubleFormat::ToExponential")
{
	char buf[32]; /* ARRAY OK 2009-08-04 molsson */

	iterate (value, precision, expected) from toexponential
	{
		verify(OpDoubleFormat::ToExponential(buf, value, precision) == buf);
		verify_string(buf, expected);
	}

	verify(OpDoubleFormat::ToExponential(buf, posinf, 2) == buf);
	verify(op_strncmp(buf, "Inf", 3) == 0);

	verify(OpDoubleFormat::ToExponential(buf, nan1, 2) == buf);
	verify_string(buf, "NaN");
}

table toprecision(double, int, const char *)
{
	{ 314.159, 2, "3.1e+2" },
	{ 314.159, 3, "314" },
	{ 31.4159, 3, "31.4" },
	{ 3.1415900009, 10, "3.141590001" },  // 9 digits after the point
	{ 3.14159000009, 10, "3.141590000" }, // 9 digits after the point
	{ 3.14159e20, 10, "3.141590000e+20" },
	{ 31415.9, 1, "3e+4" },
	{ 0.12345, 4, "0.1235" },
	{ -0.12345, 4, "-0.1235" },
	// Note: For details, see EcmaScript spec (ECMA-262 5th edition) section
	// 15.7.4.7: "Number.prototype.toPrecision()" under step 10. This rounding
	// is different from sprintf("%.1f") "round to even" etc.
	{ -2.5, 1, "-3" },
	{ -1.5, 1, "-2" },
	{ -0.5, 1, "-0.5" },
	{ 0.5, 1, "0.5" },
	{ 1.5, 1, "2" },
	{ 2.5, 1, "3" },
}

test("OpDoubleFormat::ToPrecision")
{
	char buf[32]; /* ARRAY OK 2009-08-04 molsson */

	iterate (value, precision, expected) from toprecision
	{
		verify(OpDoubleFormat::ToPrecision(buf, value, precision) == buf);
		verify_string(buf, expected);
	}

	verify(OpDoubleFormat::ToPrecision(buf, posinf, 2) == buf);
	verify(op_strncmp(buf, "Inf", 3) == 0);

	verify(OpDoubleFormat::ToPrecision(buf, nan1, 2) == buf);
	verify_string(buf, "NaN");
}

test("op_double2uint32")
{
	// If these tests fail, you must disable
	// TWEAK_STDLIB_INT_CAST_IS_ES262_COMPLIANT
	// for yor product.

	/* From ECMA-262 9.6 */

	verify(op_double2uint32(3.33)         == 3);
	verify(op_double2uint32(2147483647.0) == 2147483647U);
	verify(op_double2uint32(2147483648.0) == 2147483648U);
	verify(op_double2uint32(-2147483648.0)== 2147483648U);
	verify(op_double2uint32(-2147483649.0)== 2147483647U);
	verify(op_double2uint32(4294967295.0) == 4294967295U);
	verify(op_double2uint32(4294967296.0) == 0);
	verify(op_double2uint32(-1.0)         == 4294967295U);
	verify(op_double2uint32(-1.5)         == 4294967295U);
	verify(op_double2int32(-0.5)         == 0);

	double big = 0x4000000; // 2^26
	big = ((big * big) - 1.) * 2. + 1; // 2^53 -1; exactly represented.
	verify(op_double2uint32(big) + 1 == 0);
	big *= 0x400; // 2^10; reducing modulo 2^32 should now leave our top 22 bits set
	//output("(int)(%f) -> %d (U: %d)\n", big, op_double2int32(big), (INT32)(UINT32)big);
	verify(op_double2int32(big) == int(0xfffffC00));

	big *= 2; // reducing modulo 2^32 should now leave our top 21 bits set
	//output("(int)(%f) -> %d (U: %d)\n", big, op_double2int32(big), (INT32)(UINT32)big);
	verify(op_double2int32(big) == int(0xfffff800));
	big *= 0x80000; // 2^19; reducing modulo 2^32 should now leave our top two bits set
	//output("(int)(%f) -> %d (U: %d)\n", big, op_double2int32(big), (INT32)(UINT32)big);
	verify(op_double2uint32(big) == 0xC0000000);

	// 2.
	verify(op_double2uint32(nan1) == 0);
	verify(op_double2uint32(posinf) == 0);
	verify(op_double2uint32(neginf) == 0);
}

test("op_double2int32")
{
	// If these tests fail, you must disable
	// TWEAK_STDLIB_INT_CAST_IS_ES262_COMPLIANT
	// for yor product.

	/* From ECMA-262 9.5 */

	verify(op_double2int32(3.33)         == 3);
	verify(op_double2int32(2147483647.0) ==  2147483647);
	verify(op_double2int32(2147483648.0) == -2147483647 - 1);
	verify(op_double2int32(-2147483648.0)== -2147483647 - 1);
	verify(op_double2int32(-2147483649.0)==  2147483647);
	verify(op_double2int32(4294967295.0) == -1);
	verify(op_double2int32(4294967296.0) == 0);
	verify(op_double2int32(-1.0)         == -1);
	verify(op_double2int32(-1.5)         == -1);
	verify(op_double2int32(-0.5)         == 0);
	verify(op_double2int32(-7.02389423)  == -7);

	double big = 0x4000000; // 2^26
	big = ((big * big) - 1.) * 2. + 1; // 2^53 -1; exactly represented.
	verify(op_double2int32(big) == -1);
	big *= 0x400; // 2^10; reducing modulo 2^32 shall now leave our top 22 bits set
	//output("(int)(%f) -> %d (U: %d)\n", big, op_double2int32(big), (INT32)(UINT32)big);

	verify(op_double2int32(big) == - 0x400);
	big *= 2; // reducing modulo 2^32 shall now leave our top 21 bits set
	//output("(int)(%f) -> %d (U: %d)\n", big, op_double2int32(big), (INT32)(UINT32)big);

	verify(op_double2int32(big) == - 0x800);
	big *= 0x80000; // 2^19; reducing modulo 2^32 shall now leave our top two bits set
	//output("(int)(%f) -> %d (U: %d)\n", big, op_double2int32(big), (INT32)(UINT32)big);
	verify(op_double2int32(big) == - 0x40000000);

	// 2.
	verify(op_double2int32(nan1) == 0);
	verify(op_double2int32(posinf) == 0);
	verify(op_double2int32(neginf) == 0);
}

test("regression test CORE-22551: toExponential(-3.0,1) == '-3.0e0'")
{
	char double_string[32]; /* ARRAY OK 2009-08-05 molsson */

	verify(OpDoubleFormat::ToExponential(double_string, -3.0, 1) == double_string);
	verify_string(double_string, "-3.0e+0");
	verify(OpDoubleFormat::ToExponential(double_string, 3.0, 1) == double_string);
	verify_string(double_string, "3.0e+0");
}

test("check that other functions dont have issues like CORE-22551")
{
	char double_string[32]; /* ARRAY OK 2009-08-05 molsson */

	// OpDoubleFormat::ToFixed
	double_string[0] = '\0';
	verify(OpDoubleFormat::ToFixed(double_string, -3.0, 1) == double_string);
	verify_string(double_string, "-3.0");
	double_string[0] = '\0';
	verify(OpDoubleFormat::ToFixed(double_string, 3.0, 1) == double_string);
	verify_string(double_string, "3.0");

	// OpDoubleFormat::ToPrecision
	double_string[0] = '\0';
	verify(OpDoubleFormat::ToPrecision(double_string, -3.0, 1) == double_string);
	verify_string(double_string, "-3");
	double_string[0] = '\0';
	verify(OpDoubleFormat::ToPrecision(double_string, 3.0, 1) == double_string);
	verify_string(double_string, "3");
}

// TABLE FORMAT: string value, corresponding expected double value, expected offset addition for end pointer, expected char after parsed number
table strtod_input(const char*, double, size_t, char)
{

	// these three did _NOT_ trigger the assert because they are sort of "just short enough" not to trigger it
	{ "0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001A", 0, 323, 'A'}
	{ "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001B", 0, 324, 'B'}
	{ "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001C", 0, 325, 'C'}
	// these ones triggered the assert
	{ "0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001D", 0, 326, 'D'}
	{ "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001E", 0, 327, 'E'}
	{ "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001F", 0, 328, 'F'}
	{ "0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001G", 0, 329, 'G'}
	{ "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001H", 0, 330, 'H'}
	{ "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001I", 0, 331, 'I'}
	// and these two cases (from the bug) of course triggered the assert
	{ "+8044e-356a", 0, 10, 'a' },
	{ "938e-422Q", 0, 8, 'Q' },
	{ "1e-", 1, 1, 'e' },
}

test("regression test CORE-10928, no assert for valid dtoa d2b input")
{
	char *end_ptr = NULL;
	uni_char *uni_end_ptr = NULL;

	iterate (string_value, expected_double_value, expected_offset_addition, expected_end_ptr_char) from strtod_input
	{
#if 0
		printf("testing *strtod('%s', &ptr)\n", string_value);
#endif
		verify(op_fabs(op_strtod(string_value, &end_ptr) - expected_double_value) < epsilon);
		verify((size_t)end_ptr == (size_t)(string_value) + expected_offset_addition);
		uni_char* uni_string_value = uni_up_strdup(string_value);
		verify(op_fabs(uni_strtod(uni_string_value, &uni_end_ptr) - expected_double_value) < epsilon);
		verify(uni_end_ptr[0] == expected_end_ptr_char);
		op_free(uni_string_value);
	}

}

test("regression test CORE-24412: toPrecision(-3.5,3) == '-3.50'")
{
	char double_string[32]; /* ARRAY OK 2009-12-17 bratell */
	double_string[0] = '\0';
	verify(OpDoubleFormat::ToPrecision(double_string, -3.50, 3) == double_string);
	verify_string(double_string, "-3.50");
	double_string[0] = '\0';
	verify(OpDoubleFormat::ToPrecision(double_string, 3.50, 3) == double_string);
	verify_string(double_string, "3.50");
}

table tofixedexponentialprecision(double, int, const char *, const char *, const char *)
{
	// TABLE FORMAT: double_value, precision, expected OpDoubleFormat::ToFixed, expected OpDoubleFormat::ToExponential, expected OpDoubleFormat::ToPrecision
	{ 314.159, 1, "314.2", "3.1e+2", "3e+2" },
	{ 314.159, 2, "314.16", "3.14e+2", "3.1e+2" },
	{ 314.159, 3, "314.159", "3.142e+2", "314" },
	{ 314.159, 4, "314.1590", "3.1416e+2", "314.2" },
	{ 314.159, 7, "314.1590000", "3.1415900e+2", "314.1590" },
	{ -314.159, 1, "-314.2", "-3.1e+2", "-3e+2" },
	{ -314.159, 2, "-314.16", "-3.14e+2", "-3.1e+2" },
	{ -314.159, 3, "-314.159", "-3.142e+2", "-314" },
	{ -314.159, 4, "-314.1590", "-3.1416e+2", "-314.2" },
	{ -314.159, 7, "-314.1590000", "-3.1415900e+2", "-314.1590" },
	{ 0.0199119, 1, "0.0", "2.0e-2", "0.02" }
	{ 0.0199119, 2, "0.02", "1.99e-2", "0.020" }
	{ 0.0199119, 3, "0.020", "1.991e-2", "0.0199" }
	{ 0.0199119, 4, "0.0199", "1.9912e-2", "0.01991" }
	{ 0.0199119, 5, "0.01991", "1.99119e-2", "0.019912" }
	{ 0.0199119, 6, "0.019912", "1.991190e-2", "0.0199119" }
	{ 0.0199119, 7, "0.0199119", "1.9911900e-2", "0.01991190" }
	{ 0.0199119, 8, "0.01991190", "1.99119000e-2", "0.019911900" }
	{ 0.0199119, 9, "0.019911900", "1.991190000e-2", "0.0199119000" }
	{ -0.0199119, 1, "-0.0", "-2.0e-2", "-0.02" }
	{ -0.0199119, 2, "-0.02", "-1.99e-2", "-0.020" }
	{ -0.0199119, 3, "-0.020", "-1.991e-2", "-0.0199" }
	{ -0.0199119, 4, "-0.0199", "-1.9912e-2", "-0.01991" }
	{ -0.0199119, 5, "-0.01991", "-1.99119e-2", "-0.019912" }
	{ -0.0199119, 6, "-0.019912", "-1.991190e-2", "-0.0199119" }
	{ -0.0199119, 7, "-0.0199119", "-1.9911900e-2", "-0.01991190" }
	{ -0.0199119, 8, "-0.01991190", "-1.99119000e-2", "-0.019911900" }
	{ -0.0199119, 9, "-0.019911900", "-1.991190000e-2", "-0.0199119000" }
}

test("more coverage for CORE-24412/CORE-22551-like regressions")
{
	char double_string[32]; /* ARRAY OK 2009-12-18 molsson */
	iterate (double_value, precision, expected_tofixed, expected_toexponential, expected_toprecision) from tofixedexponentialprecision
	{
		double_string[0] = '\0';
		verify(OpDoubleFormat::ToFixed(double_string, double_value, precision) == double_string);
		verify_string(double_string, expected_tofixed);

		double_string[0] = '\0';
		verify(OpDoubleFormat::ToExponential(double_string, double_value, precision) == double_string);
		verify_string(double_string, expected_toexponential);

		double_string[0] = '\0';
		verify(OpDoubleFormat::ToPrecision(double_string, double_value, precision) == double_string);
		verify_string(double_string, expected_toprecision);
	}
}
