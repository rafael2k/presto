/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2000-2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.  It may not be distributed
 * under any circumstances.
 *
 * Peter Krefting
 */

/* Test the string functions of stdlib */

group "stdlib.string";

language c++;

// -- Global variables ---------------------------------------------------

global
{
#ifdef HAVE_STRDUP
	// Use system 'free' to free data from system 'strdup'
#   define op_strdup_free(ptr) op_lowlevel_free(ptr)
#else
	// Use our own (possibly debugging) op_free to release op_malloc'ed data
#   define op_strdup_free(ptr) op_free(ptr)
#endif

	const char *utmp;
	const uni_char* uctmp;
	char *strtokstr;
	char *strtokstr2;
	char *strtokstr3;
	char *strtoktest;
	char *dtmp;
}

// -- Global setup -------------------------------------------------------

setup
{
	// Bug: This code assumes op_lowlevel_strdup() works, but that hasn't been
	// verified yet :-)
	strtokstr = op_lowlevel_strdup("this:is:a:string:with:tokens");
	strtokstr2 = op_lowlevel_strdup("change:of!tokens");
	strtokstr3 = op_lowlevel_strdup("multiple@@@tokens{@@@@@}served_here");
	dtmp = new char[500];
}

// -- op_strlen ----------------------------------------------------------

test("op_strlen")
{
	verify(op_strlen("abc") == 3);
	verify(op_strlen("")    == 0);
}

// -- op_strcpy ----------------------------------------------------------

test("op_strcpy")
{
	// Check copy
	verify_string(op_strcpy(dtmp, ""),       "");
	verify_string(op_strcpy(dtmp, "abcdef"), "abcdef");

	// Check return value
	utmp = "abcdef";
	verify(op_strcpy(dtmp, "abcdef") != utmp);
	verify(op_strcpy(dtmp, "abcdef") == dtmp);
}

// -- op_strncpy ---------------------------------------------------------

test("op_strncpy")
{
	// Check copy
	verify_string(op_strncpy(dtmp, "",       10), "");
	verify_string(op_strncpy(dtmp, "abcdef", 10), "abcdef");
	verify(!op_strncmp(op_strncpy(dtmp, "abcdef", 3), "abc", 3));

	// Check return value
	utmp = "abcdef";
	verify(op_strncpy(dtmp, "abcdef", 10) != utmp);
	verify(op_strncpy(dtmp, "abcdef", 10) == dtmp);
}

// -- op_strlcpy ---------------------------------------------------------

test("op_strlcpy")
{
	verify(op_strlcpy(dtmp, "", 10) == 0);
	verify_string(dtmp, "");

	verify(op_strlcpy(dtmp, "abcdef", 10) == 6);
	verify_string(dtmp, "abcdef");

	verify(op_strlcpy(dtmp, "abcdef", 3) == 6);
	verify_string(dtmp, "ab");
}

// -- op_strcat ----------------------------------------------------------

test("op_strcat")
{
	op_strcpy(dtmp, "foo");
	op_strcat(dtmp, "bar");
	verify_string(dtmp, "foobar");
	op_strcat(dtmp, "baz");
	verify_string(dtmp, "foobarbaz");
	op_strcat(dtmp, "allan");
	verify_string(dtmp, "foobarbazallan");
	op_strcat(dtmp, "tar");
	verify_string(dtmp, "foobarbazallantar");
	op_strcat(dtmp, "kaka");
	verify_string(dtmp, "foobarbazallantarkaka");
}

// -- op_strncat ---------------------------------------------------------

test("op_strncat (simple)")
{
	op_strcpy(dtmp, "foobarbazallantarkaka"); // Prepare bait
	op_strcpy(dtmp, "foo");
	op_strncat(dtmp, "bar", 4);
	verify_string(dtmp, "foobar");
	op_strncat(dtmp, "baz", 4);
	verify_string(dtmp, "foobarbaz");
}

test("op_strncat (advanced)")
	require success "op_strncat (simple)";
{
	// strncat always nul-terminates the destination, so it can write
	// n+1 characters to the output
	op_strncat(dtmp, "allan", 4);
	// If we fail to terminate, we get "foobarbazallantarkaka":
	verify(op_strcmp(dtmp, "foobarbazallantarkaka") != 0);
	// This is the proper result:
	verify_string(dtmp, "foobarbazalla");

	// Test with n much longer than the string
	op_strncat(dtmp, "ntar", 400);
	verify_string(dtmp, "foobarbazallantar");
	op_strncat(dtmp, "kaka", 400);
	verify_string(dtmp, "foobarbazallantarkaka");

	// Test with n == 0
	op_strncat(dtmp, "gurksallad", 0);
	verify_string(dtmp, "foobarbazallantarkaka");
}

// -- op_strlcat ---------------------------------------------------------

test("op_strlcat (simple)")
{
	op_strcpy(dtmp, "foobarbazallantarkaka"); // Prepare bait
	op_strcpy(dtmp, "foo");
	verify(op_strlcat(dtmp, "bar", 7) == 6);
	verify_string(dtmp, "foobar");
	verify(op_strlcat(dtmp, "baz", 10) == 9);
	verify_string(dtmp, "foobarbaz");
}

test("op_strlcat (advanced)")
	require success "op_strlcat (simple)";
{
	// strlcat always nul-terminates the destination
	verify(op_strlcat(dtmp, "allan", 14) == 14);
	// If we fail to terminate, we get "foobarbazallantarkaka":
	verify(op_strcmp(dtmp, "foobarbazallantarkaka") != 0);
	// This is the proper result:
	verify_string(dtmp, "foobarbazalla");

	// Test with n much longer than the string
	verify(op_strlcat(dtmp, "ntar", 400) == 17);
	verify_string(dtmp, "foobarbazallantar");
	verify(op_strlcat(dtmp, "kaka", 400) == 21);
	verify_string(dtmp, "foobarbazallantarkaka");

	// Test with limit == op_strlen(dtmp)
	// will return 21 (limit) + 10 (op_strlen("gurksallad"))
	verify(op_strlcat(dtmp, "gurksallad", op_strlen(dtmp)) == 21 + 10);
	verify_string(dtmp, "foobarbazallantarkaka");

	// Test with limit == 0
	// will return 0 (limit) + 10 (op_strlen("gurksallad"))
	verify(op_strlcat(dtmp, "gurksallad", 0) == 10);
	verify_string(dtmp, "foobarbazallantarkaka");
}

// -- op_strcmp ----------------------------------------------------------

test("op_strcmp")
{
	verify(op_strcmp("",    "")    == 0);
	verify(op_strcmp("a",   "b")   <  0);
	verify(op_strcmp("b",   "a")   >  0);
	verify(op_strcmp("a",   "a")   == 0);
	verify(op_strcmp("abc", "abc") == 0);
	verify(op_strcmp("abc", "ab")  >  0);
}

// -- op_strncmp ---------------------------------------------------------

test("op_strncmp")
{
	verify(op_strncmp("",    "", 10)    == 0);
	verify(op_strncmp("a",   "b", 10)   <  0);
	verify(op_strncmp("b",   "a", 10)   >  0);
	verify(op_strncmp("a",   "a", 10)   == 0);
	verify(op_strncmp("abc", "abc", 10) == 0);
	verify(op_strncmp("abc", "ab", 10)  >  0);
	verify(op_strncmp("Arial", "Arial Black", 11) < 0);
	verify(op_strncmp("Arial", "Arial Black", 6)  < 0);
	verify(op_strncmp("Arial", "Arial Black", 5) == 0);
	verify(op_strncmp("Arial Black", "Arial", 11) > 0);
	verify(op_strncmp("Arial Black", "Arial", 6)  > 0);
	verify(op_strncmp("Arial Black", "Arial", 5) == 0);
}

// -- op_stricmp ---------------------------------------------------------

test("op_stricmp (ASCII)")
{
	verify(!op_stricmp("",    ""));
	verify( op_stricmp("",    "a"));
	verify( op_stricmp("a",   ""));
	verify(!op_stricmp("abc", "abc"));
	verify(!op_stricmp("abc", "ABC"));
	verify(!op_stricmp("aBc", "AbC"));
	verify( op_stricmp("aBc", "aBd") < 0);
	verify( op_stricmp("1",   "2") < 0);
	verify( op_stricmp("4",   "3") > 0);
	verify(!op_stricmp("5",   "5"));
}

test("op_stricmp (partial strings)")
{
	verify(op_stricmp("Arial", "Arial Black") < 0);
	verify(op_stricmp("arial", "Arial Black") < 0);
	verify(op_stricmp("Arial Black", "Arial") > 0);
	verify(op_stricmp("Arial Black", "arial") > 0);
}

subtest stricmphelper(const char *a, const char *b, const char *c, const char *d)
{
	int res1 = op_stricmp(a, b);
	int res2 = op_stricmp(c, d);
	if (res1 <  0) verify(res2 <  0);
	if (res1 == 0) verify(res2 == 0);
	if (res1 >  0) verify(res2 >  0);
}

test("op_stricmp (case tests)")
{
	verify(stricmphelper("A", "B", "A", "b"));
	verify(stricmphelper("A", "B", "a", "b"));
	verify(stricmphelper("A", "B", "a", "B"));

	verify(stricmphelper("A", "A", "A", "a"));
	verify(stricmphelper("A", "A", "a", "a"));
	verify(stricmphelper("A", "A", "a", "A"));

	verify(stricmphelper("B", "A", "B", "a"));
	verify(stricmphelper("B", "A", "b", "a"));
	verify(stricmphelper("B", "A", "b", "A"));

	verify(stricmphelper("A", "C", "A", "c"));
	verify(stricmphelper("A", "C", "a", "c"));
	verify(stricmphelper("A", "C", "a", "C"));
}

// -- op_strnicmp --------------------------------------------------------

test("op_strnicmp (ASCII)")
{
	verify(!op_strnicmp("",    "",    10));
	verify( op_strnicmp("",    "a",   10));
	verify( op_strnicmp("a",   "",    10));
	verify(!op_strnicmp("abc", "abc", 10));
	verify(!op_strnicmp("abc", "ABC", 10));
	verify(!op_strnicmp("aBc", "AbC", 10));
	verify( op_strnicmp("aBc", "aBd", 10));
	verify( op_strnicmp("1",   "2",   1) < 0);
	verify( op_strnicmp("4",   "3",   1) > 0);
	verify(!op_strnicmp("5",   "5",   1));
}

test("op_strnicmp (partial strings)")
{
	verify(!op_strnicmp("",    "a",   0));
	verify(!op_strnicmp("a",   "",    0));
	verify( op_strnicmp("abcd", "abce", 10));
	verify( op_strnicmp("Arial", "Arial Black", 11) < 0);
	verify( op_strnicmp("arial", "Arial Black", 11) < 0);
	verify( op_strnicmp("arial", "Arial Black",  5)== 0);
	verify( op_strnicmp("Arial Black", "Arial", 11) > 0);
	verify( op_strnicmp("Arial Black", "arial", 11) > 0);
	verify( op_strnicmp("Arial Black", "arial",  5)== 0);
}

subtest strnicmphelper(const char *a, const char *b, const char *c, const char *d)
{
	int res1 = op_strnicmp(a, b, 1);
	int res2 = op_strnicmp(c, d, 1);
	if (res1 <  0) verify(res2 <  0);
	if (res1 == 0) verify(res2 == 0);
	if (res1 >  0) verify(res2 >  0);
}

test("op_strnicmp (case tests)")
{
	verify(strnicmphelper("A", "B", "A", "b"));
	verify(strnicmphelper("A", "B", "a", "b"));
	verify(strnicmphelper("A", "B", "a", "B"));

	verify(strnicmphelper("A", "A", "A", "a"));
	verify(strnicmphelper("A", "A", "a", "a"));
	verify(strnicmphelper("A", "A", "a", "A"));

	verify(strnicmphelper("B", "A", "B", "a"));
	verify(strnicmphelper("B", "A", "b", "a"));
	verify(strnicmphelper("B", "A", "b", "A"));

	verify(strnicmphelper("A", "C", "A", "c"));
	verify(strnicmphelper("A", "C", "a", "c"));
	verify(strnicmphelper("A", "C", "a", "C"));
}

// -- op_strchr ----------------------------------------------------------

test("op_strchr (missing)")
{
	verify(op_strchr("", 'd') == NULL);
	verify(op_strchr("abc", 'd') == NULL);
}

test("op_strchr (present)")
{
	utmp = "abcd";
	verify(op_strchr(utmp , 'd') == (utmp + 3));

	utmp = "abcdefd";
	verify(op_strchr(utmp , 'd') == (utmp + 3));

	verify(op_strchr(utmp, 0 ) == (utmp + 7));
}

// -- op_strrchr ---------------------------------------------------------

test("op_strrchr (missing)")
{
	verify(op_strrchr("", 'd') == NULL);
	verify(op_strrchr("abc", 'd') == NULL);
}

test("op_strrchr (present)")
{
	utmp = "abcdefd";
	verify(op_strrchr(utmp, 'd') == (utmp + 6));

	utmp = "dabcd";
	verify(op_strrchr(utmp, 'd') == (utmp + 4));

	verify(op_strrchr(utmp, 0) == (utmp + 5));
}

// -- op_strstr ----------------------------------------------------------

test("op_strstr (missing)")
{
	verify(op_strstr("", "find") == NULL);
	verify(op_strstr("\0\1", "find") == NULL);
	verify(op_strstr("\0xyz", "xyz") == NULL);
	verify(op_strstr("abcd", "find") == NULL);
	verify(op_strstr("fin", "find") == NULL);
	verify(op_strstr("fined", "find") == NULL);
}

test("op_strstr (present)")
{
	utmp = "123find";
	verify(op_strstr(utmp, "find") == (utmp + 3));
	utmp = "123fine123find";
	verify(op_strstr(utmp, "find") == (utmp + 10));
	utmp = "123fififend123";
	verify(op_strstr(utmp, "fifend") == (utmp + 5));
	utmp = "A negative \377 character";
	verify(op_strstr(utmp, "negative \377") == (utmp + 2));
}

test("op_strstr (empty needle)")
{
	utmp = "123find";
	verify(op_strstr(utmp, "") == utmp);
}

test("op_stristr (missing)")
{
	verify(op_stristr("", "find") == NULL);
	verify(op_stristr("abcd", "find") == NULL);
	verify(op_stristr("fin", "find") == NULL);
	verify(op_stristr("fined", "find") == NULL);
	verify(op_stristr("fin", "fInd") == NULL);
	verify(op_stristr("fined", "fiND") == NULL);
}

test("op_stristr (present)")
{
	utmp = "123find";
	verify(op_stristr(utmp, "find") == (utmp + 3));
	utmp = "123fIND";
	verify(op_stristr(utmp, "find") == (utmp + 3));
	utmp = "123Fine123Find";
	verify(op_stristr(utmp, "find") == (utmp + 10));
	utmp = "abcdefghijklmno";
	verify(op_stristr(utmp, "efgh") == utmp+4);
	utmp = "abcdefghijklmno";
	verify(op_stristr(utmp, "EFGH") == utmp+4);
}

test("uni_strstr (negative char needle)")
{
	// Bug: CORE-18008

	uctmp = UNI_L("A negative \x00ff character");
	verify(uni_strstr(uctmp, "negative \377") == (uctmp + 2));

	uni_char tst[3];
	tst[0] = 0xffff;	// Don't match this one
	tst[1] = 0x00ff;		// ... but this one
	tst[2] = 0;
	verify(uni_strstr(tst, "\377") == (tst + 1));
}

test("uni_stristr (titlecase character)")
{
	uctmp = UNI_L("A titlecase \x01C5 Character");
	verify(uni_stristr(uctmp, UNI_L("\x01C4 character")) == (uctmp + 12));
	verify(uni_stristr(uctmp, UNI_L("\x01C6 cHaracter")) == (uctmp + 12));
}

test("uni_stristr (Turkish i)")
{
	uctmp = UNI_L("An uppercase I with dot \x0130 character");
	verify(uni_stristr(uctmp, UNI_L("i character")) == (uctmp + 24));
}

// -- op_strspn ----------------------------------------------------------

test("op_strspn")
{
	verify(op_strspn("::::kolon", ":") == 4);
	verify(op_strspn("::::kolon", ":k") == 5);
	verify(op_strspn("::::kolon", ":o") == 4);
	verify(op_strspn("::::kolon", ":kol") == 8);
	verify(op_strspn("kolon::::", ":") == 0);
}

// -- op_strcspn ---------------------------------------------------------

test("op_strcspn")
{
	verify(op_strcspn("kolon::::", ":") == 5);
	verify(op_strcspn("kolon::::", ":k") == 0);
	verify(op_strcspn("kolon::::", ":o") == 1);
	verify(op_strcspn("::::kolon", ":") == 0);
}

// -- op_strpbrk ---------------------------------------------------------

test("op_strpbrk")
{
	utmp = "abc:::def!!!ghi@@@jkl";
	verify(op_strpbrk(utmp, ":!@") == utmp + 3);
	verify(op_strpbrk(utmp, "!@") == utmp + 9);
	verify(op_strpbrk(utmp, "@") == utmp + 15);
	verify(op_strpbrk(utmp, "/") == NULL);

	verify(op_strpbrk("", ":!@") == NULL);

	verify(op_strpbrk(utmp, utmp) == utmp);
}

// -- op_lowlevel_strdup -------------------------------------------------

test("op_lowlevel_strdup (1)")
	leakcheck;
{
	char *tmpptr = op_lowlevel_strdup("Perkele");
	verify(tmpptr != NULL);
	verify_string("Perkele", tmpptr);
	op_strdup_free(tmpptr);
	tmpptr = NULL;

	tmpptr = op_lowlevel_strdup("Kakmonstret vill ha kaka. KAKMONSTRET!");
	verify(tmpptr != NULL);
	verify_string("Kakmonstret vill ha kaka. KAKMONSTRET!", tmpptr);
	op_strdup_free(tmpptr);
	tmpptr = NULL;
}
finally
{
	op_strdup_free(tmpptr);
}

test("op_lowlevel_strdup (2)")
	leakcheck;
{
	char *tmpptr  = NULL, *tmpptr2 = NULL, *tmpptr3 = NULL,
	     *tmpptr4 = NULL, *tmpptr5 = NULL;

	tmpptr = op_lowlevel_strdup("Femton gastar p\xE5 sj\xF6mans kista, hej och h\xE5 och en flaska med ROM");
	tmpptr2 = op_lowlevel_strdup(tmpptr);
	tmpptr3 = op_lowlevel_strdup(tmpptr2);
	tmpptr4 = op_lowlevel_strdup(tmpptr3);
	tmpptr5 = op_lowlevel_strdup(tmpptr4);
	verify_string(tmpptr, tmpptr2);
	verify_string(tmpptr2, tmpptr3);
	verify_string(tmpptr3, tmpptr4);
	verify_string(tmpptr4, tmpptr5);
	verify_string(tmpptr, "Femton gastar p\xE5 sj\xF6mans kista, hej och h\xE5 och en flaska med ROM");
}
finally
{
	op_strdup_free(tmpptr);
	op_strdup_free(tmpptr2);
	op_strdup_free(tmpptr3);
	op_strdup_free(tmpptr4);
	op_strdup_free(tmpptr5);
}

// -- op_strtok ----------------------------------------------------------

test("op_strtok (simple, start)")
	disabled;
{
	strtoktest = op_strtok(strtokstr, ":");
	verify(strtoktest != NULL);
	verify_string(strtoktest, "this");
}

test("op_strtok (simple, continue)")
	require success "op_strtok (simple, start)";
	disabled;
{
	strtoktest = op_strtok(NULL, ":");
	verify(strtoktest != NULL);
	verify_string(strtoktest, "is");

	strtoktest = op_strtok(NULL, ":");
	verify(strtoktest != NULL);
	verify_string(strtoktest, "a");

	strtoktest = op_strtok(NULL, ":");
	verify(strtoktest != NULL);
	verify_string(strtoktest, "string");

	strtoktest = op_strtok(NULL, ":");
	verify(strtoktest != NULL);
	verify_string(strtoktest, "with");

	strtoktest = op_strtok(NULL, ":");
	verify(strtoktest != NULL);
	verify_string(strtoktest, "tokens");

	strtoktest = op_strtok(NULL, ":");
	verify(strtoktest == NULL);
}

test("op_strtok (changed tokens, start)")
	disabled;
{
	strtoktest = op_strtok(strtokstr2, ":");
	verify(strtoktest != NULL);
	verify_string(strtoktest, "change");
}

test("op_strtok (changed tokens, continue)")
	require success "op_strtok (changed tokens, start)";
	disabled;
{
	strtoktest = op_strtok(NULL, "!");
	verify(strtoktest != NULL);
	verify_string(strtoktest, "of");

	strtoktest = op_strtok(NULL, "!:");
	verify(strtoktest != NULL);
	verify_string(strtoktest, "tokens");
}

test("op_strtok (multiple tokens, start)")
	disabled;
{
	strtoktest = op_strtok(strtokstr3, "{@}_");
	verify(strtoktest != NULL);
	verify_string(strtoktest, "multiple");
}

test("op_strtok (multiple tokens, continue)")
	require success "op_strtok (multiple tokens, start)";
	disabled;
{
	strtoktest = op_strtok(NULL, "{@}_");
	verify(strtoktest != NULL);
	verify_string(strtoktest, "tokens");

	strtoktest = op_strtok(NULL, "{@}_");
	verify(strtoktest != NULL);
	verify_string(strtoktest, "served");

	strtoktest = op_strtok(NULL, "{@}_");
	verify(strtoktest != NULL);
	verify_string(strtoktest, "here");
}

// -- uni_strtok ---------------------------------------------------------

test("uni_strtok (Bugs #342672 and #322190)")
{
	// Calling uni_strtok() with an empty string must still reset the
	// tokinizer state, so subsequent calls will not continue with the
	// previous string.

	uni_char* string1 = uni_strdup(UNI_L("Hello:World"));
	uni_char* string2 = uni_strdup(UNI_L(""));
	uni_char* tok;

	// Lookup "Hello" from string1
	tok = uni_strtok(string1, UNI_L(":"));
	verify(tok != NULL);
	verify_string(tok, UNI_L("Hello"));

	// This should reset the tokinizer state
	tok = uni_strtok(string2, UNI_L(":"));
	verify(tok == NULL);

	// This should not yield "World"
	tok = uni_strtok(0, UNI_L(":"));
	verify(tok == NULL);
}
finally
{
	op_free(string1);
	op_free(string2);
}

// -- op_strlwr ----------------------------------------------------------

test("op_strlwr")
{
	op_strcpy(dtmp, "");
	op_strlwr(dtmp);
	verify_string(dtmp, "");

	op_strcpy(dtmp, "abcdef");
	op_strlwr(dtmp);
	verify_string(dtmp, "abcdef");

	op_strcpy(dtmp, "ABCDEF");
	op_strlwr(dtmp);
	verify_string(dtmp, "abcdef");
}

// -- op_strupr ----------------------------------------------------------

test("op_strupr")
{
	op_strcpy(dtmp, "");
	op_strupr(dtmp);
	verify_string(dtmp, "");

	op_strcpy(dtmp, "abcdef");
	op_strupr(dtmp);
	verify_string(dtmp, "ABCDEF");

	op_strcpy(dtmp, "ABCDEF");
	op_strupr(dtmp);
	verify_string(dtmp, "ABCDEF");
}

// -- op_strrev ----------------------------------------------------------

test("op_strrev")
	require STDLIB_STRREV;
{
	char *temp = op_lowlevel_strdup("foo");
	verify(temp);
	op_strrev(temp);
	verify_string(temp, "oof");
}
finally
{
	op_strdup_free(temp);
}

// -- op_toupper ---------------------------------------------------------

test("op_toupper")
{
	verify(op_toupper('a') == 'A');
	verify(op_toupper('b') == 'B');
	verify(op_toupper('c') == 'C');
	verify(op_toupper('A') == 'A');
	verify(op_toupper('B') == 'B');
	verify(op_toupper('C') == 'C');
}

// -- op_tolower ---------------------------------------------------------

test("op_tolower")
{
	verify(op_tolower('a') == 'a');
	verify(op_tolower('b') == 'b');
	verify(op_tolower('c') == 'c');
	verify(op_tolower('A') == 'a');
	verify(op_tolower('B') == 'b');
	verify(op_tolower('C') == 'c');
}

// -- op_isxxxxx and uni_isxxxxx -----------------------------------------

table isx(char, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL)
{
	/* test,	isdigit, isxdigit, isspace, isupper, islower, isalnum, isalpha, iscntrl, ispunct, isprint */
	{ '1',		TRUE,    TRUE,     FALSE,   FALSE,   FALSE,   TRUE,    FALSE,   FALSE,   FALSE,   TRUE     },
	{ '0',		TRUE,    TRUE,     FALSE,   FALSE,   FALSE,   TRUE,    FALSE,   FALSE,   FALSE,   TRUE     },
	{ 'A',		FALSE,   TRUE,     FALSE,   TRUE,    FALSE,   TRUE,    TRUE,    FALSE,   FALSE,   TRUE     },
	{ 'x',		FALSE,   FALSE,    FALSE,   FALSE,   TRUE,    TRUE,    TRUE,    FALSE,   FALSE,   TRUE     },
	{ ' ',		FALSE,   FALSE,    TRUE,    FALSE,   FALSE,   FALSE,   FALSE,   FALSE,   FALSE,   TRUE     },
	{ '\b',		FALSE,   FALSE,    FALSE,   FALSE,   FALSE,   FALSE,   FALSE,   TRUE,    FALSE,   FALSE    },
	{ '#',		FALSE,   FALSE,    FALSE,   FALSE,   FALSE,   FALSE,   FALSE,   FALSE,   TRUE,    TRUE     },
	{ '.',		FALSE,   FALSE,    FALSE,   FALSE,   FALSE,   FALSE,   FALSE,   FALSE,   TRUE,    TRUE     },
}

test("op_is.*() and uni_is.*()")
{
	// FIXME: Add more tests for non-ASCII characters
	iterate (val, digit, xdigit, space, upper, lower, alnum, alpha, cntrl, punct, print) from isx
	{
		verify(op_isdigit(val)  == digit);
		verify(op_isxdigit(val) == xdigit);
		verify(op_isspace(val)  == space);
		verify(op_isupper(val) == upper);
		verify(op_islower(val)  == lower);
		verify(op_isalnum(val)  == alnum);
		verify(op_isalpha(val)  == alpha);
		verify(op_iscntrl(val)  == cntrl);
		verify(op_ispunct(val)  == punct);
		verify(op_isprint(val)  == print);

		verify(uni_isdigit(val)  == digit);
		verify(uni_isxdigit(val) == xdigit);
		verify(uni_isspace(val)  == space);
		verify(uni_isupper(val) == upper);
		verify(uni_islower(val)  == lower);
		verify(uni_isalnum(val)  == alnum);
		verify(uni_isalpha(val)  == alpha);
		verify(uni_iscntrl(val)  == cntrl);
		verify(uni_ispunct(val)  == punct);

		verify(uni_isunidigit(val)  == digit);
		verify(uni_html_space(val)  == space);
	}
}

// -- Global cleanup -----------------------------------------------------

exit
{
	op_strdup_free(strtokstr);
	op_strdup_free(strtokstr2);
	op_strdup_free(strtokstr3);
	delete[] dtmp;
}
