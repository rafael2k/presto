/* -*- Mode: pike; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2000-2007 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Karlsson
** Lars T Hansen
*/

/* Test the array functions of stdlib */

group "stdlib.array";

language c++;

global
{
	extern "C" int stdlib_test_intcmp(const void *a, const void *b);
	extern "C" int stdlib_test_doublecmp(const void *a, const void *b);
	extern "C" int stdlib_test_charcmp(const void *a, const void *b);

	extern "C" int stdlib_test_intcmp_arg_unused(void* arg, const void *a, const void *b);
	extern "C" int stdlib_test_doublecmp_arg_unused(void* arg, const void *a, const void *b);
	extern "C" int stdlib_test_charcmp_arg_unused(void* arg, const void *a, const void *b);

	extern "C" int stdlib_test_intcmp_arg(void* arg, const void *a, const void *b);
}

// -- Parametrization of tests ----------------------------------------------

table array_types
{
	{ char,   stdlib_test_charcmp,   "char" },
	{ int,    stdlib_test_intcmp,    "int" },
	{ double, stdlib_test_doublecmp, "double" },
}

table array_types_arg
{
	{ char,   stdlib_test_charcmp_arg_unused,   "char" },
	{ int,    stdlib_test_intcmp_arg_unused,    "int" },
	{ double, stdlib_test_doublecmp_arg_unused, "double" },
}

// -- op_bsearch ------------------------------------------------------------

foreach (T, stdlib_test_cmp, name) from array_types
{
	test("op_bsearch (" name ")")
	{
	    static const T A[] = { 1, 2, 3, 5, 7, 9, 11, 13, 17, 19 };
		T key;

		key = 7;
	    verify(op_bsearch(&key, A, sizeof(A)/sizeof(A[0]), sizeof(A[0]), stdlib_test_cmp) == (void *)&A[4]);

	    key = 8;
    	verify(op_bsearch(&key, A, sizeof(A)/sizeof(A[0]), sizeof(A[0]), stdlib_test_cmp) == NULL);

	    key = 0;
    	verify(op_bsearch(&key, A, sizeof(A)/sizeof(A[0]), sizeof(A[0]), stdlib_test_cmp) == NULL);

	    key = 35;
    	verify(op_bsearch(&key, A, sizeof(A)/sizeof(A[0]), sizeof(A[0]), stdlib_test_cmp) == NULL);
	}
}

// -- op_qsort ------------------------------------------------------------

foreach (T, stdlib_test_cmp, name) from array_types
{
	test("op_qsort (" name ")")
	{
	    static const T A0[] = { 1, 2, 3, 5, 7, 9, 11, 13, 17, 19 };
	    static const T A1[] = { 19, 17, 13, 11, 9, 7, 5, 3, 2, 1 };
	    static const T A2[] = { 3, 2, 1, 19, 13, 11, 9, 7, 17, 5 };

		T A[sizeof(A0)/sizeof(A0[0])];

		op_memcpy(A, A0, sizeof(A0));
		op_qsort(A, sizeof(A)/sizeof(A[0]), sizeof(A[0]), stdlib_test_cmp);
		verify(A[0] == 1);
		verify(A[1] == 2);
		verify(A[2] == 3); 
		verify(A[3] == 5);
		verify(A[4] == 7);
		verify(A[5] == 9);
		verify(A[6] == 11);
		verify(A[7] == 13);
		verify(A[8] == 17);
		verify(A[9] == 19);

		op_memcpy(A, A1, sizeof(A0));
		op_qsort(A, sizeof(A)/sizeof(A[0]), sizeof(A[0]), stdlib_test_cmp);
		verify(A[0] == 1);
		verify(A[1] == 2);
		verify(A[2] == 3); 
		verify(A[3] == 5);
		verify(A[4] == 7);
		verify(A[5] == 9);
		verify(A[6] == 11);
		verify(A[7] == 13);
		verify(A[8] == 17);
		verify(A[9] == 19);

		op_memcpy(A, A2, sizeof(A0));
		op_qsort(A, sizeof(A)/sizeof(A[0]), sizeof(A[0]), stdlib_test_cmp);
		verify(A[0] == 1);
		verify(A[1] == 2);
		verify(A[2] == 3); 
		verify(A[3] == 5);
		verify(A[4] == 7);
		verify(A[5] == 9);
		verify(A[6] == 11);
		verify(A[7] == 13);
		verify(A[8] == 17);
		verify(A[9] == 19);
	}
}

table array_configs
{
	// { "config", elems, range }
	{ "1", 1, 1 },
	{ "2", 2, 2 },
	{ "3", 3, 3 },
	{ "4", 4, 10 },
	{ "5", 10, 100 },
	{ "6", 100, 3 },
	{ "7", 100, 10000 },
	{ "8", 10000, 100000 },
	{ "9", 10000, 10 },
	{ "10", 100000, 1000000 },
	{ "11", 100000, 100 },
}

foreach (config, elems, range) from array_configs
{
	test("op_qsort pre-sorted (config=" config ")")
	{
		int* data = new int[elems];
		int k;

		verify(data != 0 && "OOM causes selftest to fail");

		for ( k = 0; k < elems; k++ )
			data[k] = int(double(k) * double(range) / double(elems));

		op_qsort(data, elems, sizeof(int), stdlib_test_intcmp);

		for ( k = 1; k < elems; k++ )
			verify(data[k-1] <= data[k]);
	}
	finally
	{
		delete[] data;
	}

	test("op_qsort reverse-sorted (config=" config ")")
	{
		int* data = new int[elems];
		int k;

		verify(data != 0 && "OOM causes selftest to fail");

		for ( k = 0; k < elems; k++ )
			data[k] = int(double(elems - k) * double(range) / double(elems));

		op_qsort(data, elems, sizeof(int), stdlib_test_intcmp);

		for ( k = 1; k < elems; k++ )
			verify(data[k-1] <= data[k]);
	}
	finally
	{
		delete[] data;
	}

	test("op_qsort random (config=" config ")")
	{
		int* data = new int[elems];
		int k;
		UINT32 seed = 42;

		// OOM causes test fail
		verify(data != NULL);

		for ( k = 0; k < elems; k++ )
		{
			seed = ((seed >> 13) ^ (seed << 19)) + 0xdeadbeef;
			data[k] = seed % range;
		}

		op_qsort(data, elems, sizeof(int), stdlib_test_intcmp);

		for ( k = 1; k < elems; k++ )
			verify(data[k-1] <= data[k]);
	}
	finally
	{
		delete[] data;
	}
}

// -- op_qsort_s ----------------------------------------------------------

foreach (T, stdlib_test_cmp, name) from array_types_arg
{
	test("op_qsort_s (" name ")")
	{
	    static const T A0[] = { 1, 2, 3, 5, 7, 9, 11, 13, 17, 19 };
	    static const T A1[] = { 19, 17, 13, 11, 9, 7, 5, 3, 2, 1 };
	    static const T A2[] = { 3, 2, 1, 19, 13, 11, 9, 7, 17, 5 };

		T A[sizeof(A0)/sizeof(A0[0])];

		op_memcpy(A, A0, sizeof(A0));
		op_qsort_s(A, sizeof(A)/sizeof(A[0]), sizeof(A[0]), stdlib_test_cmp, NULL);
		verify(A[0] == 1);
		verify(A[1] == 2);
		verify(A[2] == 3); 
		verify(A[3] == 5);
		verify(A[4] == 7);
		verify(A[5] == 9);
		verify(A[6] == 11);
		verify(A[7] == 13);
		verify(A[8] == 17);
		verify(A[9] == 19);

		op_memcpy(A, A1, sizeof(A0));
		op_qsort_s(A, sizeof(A)/sizeof(A[0]), sizeof(A[0]), stdlib_test_cmp, NULL);
		verify(A[0] == 1);
		verify(A[1] == 2);
		verify(A[2] == 3); 
		verify(A[3] == 5);
		verify(A[4] == 7);
		verify(A[5] == 9);
		verify(A[6] == 11);
		verify(A[7] == 13);
		verify(A[8] == 17);
		verify(A[9] == 19);

		op_memcpy(A, A2, sizeof(A0));
		op_qsort_s(A, sizeof(A)/sizeof(A[0]), sizeof(A[0]), stdlib_test_cmp, NULL);
		verify(A[0] == 1);
		verify(A[1] == 2);
		verify(A[2] == 3); 
		verify(A[3] == 5);
		verify(A[4] == 7);
		verify(A[5] == 9);
		verify(A[6] == 11);
		verify(A[7] == 13);
		verify(A[8] == 17);
		verify(A[9] == 19);
	}
}

foreach (config, elems, range) from array_configs
{
	test("op_qsort_s pre-sorted (config=" config ")")
	{
		int* data = new int[elems];
		int k;

		verify(data != 0 && "OOM causes selftest to fail");

		for ( k = 0; k < elems; k++ )
			data[k] = int(double(k) * double(range) / double(elems));

		op_qsort_s(data, elems, sizeof(int), stdlib_test_intcmp_arg_unused, NULL);

		for ( k = 1; k < elems; k++ )
			verify(data[k-1] <= data[k]);
	}
	finally
	{
		delete[] data;
	}

	test("op_qsort_s reverse-sorted (config=" config ")")
	{
		int* data = new int[elems];
		int k;

		verify(data != 0 && "OOM causes selftest to fail");

		for ( k = 0; k < elems; k++ )
			data[k] = int(double(elems - k) * double(range) / double(elems));

		op_qsort_s(data, elems, sizeof(int), stdlib_test_intcmp_arg_unused, NULL);

		for ( k = 1; k < elems; k++ )
			verify(data[k-1] <= data[k]);
	}
	finally
	{
		delete[] data;
	}

	test("op_qsort_s random (config=" config ")")
	{
		int* data = new int[elems];
		int k;
		UINT32 seed = 42;

		// OOM causes test fail
		verify(data != NULL);

		for ( k = 0; k < elems; k++ )
		{
			seed = ((seed >> 13) ^ (seed << 19)) + 0xdeadbeef;
			data[k] = seed % range;
		}

		op_qsort_s(data, elems, sizeof(int), stdlib_test_intcmp_arg_unused, NULL);

		for ( k = 1; k < elems; k++ )
			verify(data[k-1] <= data[k]);
	}
	finally
	{
		delete[] data;
	}
}

test("op_qsort_s with data in arg")
{
	unsigned index[] = { 0, 1, 2, 3 };
	unsigned data[]  = { 3, 1, 2, 0 };
	verify(ARRAY_SIZE(index) == ARRAY_SIZE(data));
	op_qsort_s(index, ARRAY_SIZE(index), sizeof(*index), stdlib_test_intcmp_arg, data);
	for (unsigned i = 1; i < ARRAY_SIZE(data); ++i)
		verify(data[index[i-1]] < data[index[i]]);
}

// -- op_offsetof ---------------------------------------------------------

foreach (T, stdlib_test_cmp, name) from array_types
{
	test("op_offsetof (" name ")")
	{
		struct foobar { T s[2]; }; /* ARRAY OK 2009-06-17 molsson */
		verify(op_offsetof(foobar, s) == 0);
		verify(op_offsetof(foobar, s[1]) == sizeof (T));
	}
}
