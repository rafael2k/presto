/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2009 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.	It may not be distributed
 * under any circumstances.
 *
 * Martin Olssson
 */

group "stdlib.float.overflow";

include "modules/stdlib/include/double_format.h";

table double_values(double)
{

		{ 1.0/3,	 },
		{ 1E32,		 },
		{ 0.0,		 },
		{ 3,		 },
		{ -3,		 },
		{ 31.4159	 },
		{ 31.4165	 },
		{ 1234567890 },
		{ 2e300		 },
		{ 0.05		 },
		{ 0.05050505 },
		{ 3.14159	 },
		{ 3.14159	 },
		{ -0.0		 },
		{ 1e308		 },
		{ -1e308	 },
		{ 1e-308	 },
		{ -1e-308	 },
		{ 1e-1		 },
		{ 1e-2		 },
		{ 1e-3		 },
		{ 1e-4		 },
		{ 1e-5		 },
		{ 1e-9		 },
		{ 1e-10		 },
		{ 1e-11		 },
		{ 1e-12		 },
		{ 1e-19		 },
		{ 1e-20		 },
		{ 1e-21		 },
		{ 1e-1		 },
		{ 1e-29		 },
		{ 1e-30		 },
		{ 1e-31		 },
		{ 1e-32		 },
		{ 1e-33		 },
		{ 1e-34		 },
}

test("high precisions should not overflow OpDoubleFormat::ToFixed")
{
	char buffer[32]; /* ARRAY OK 2009-08-05 molsson */
	char intpart_string[32]; /* ARRAY OK 2009-08-05 molsson */

		iterate (double_value) from double_values
		{
		for (size_t precision = 0; precision < 102; ++precision)
		{
			char *double_string = OpDoubleFormat::ToFixed(buffer, double_value, precision);
			verify(double_string == buffer);
			double intpart = stdlib_intpart(double_value);
			verify(OpDoubleFormat::ToFixed(intpart_string, intpart, 0) == intpart_string);
			if (op_strcmp(double_string, "-0") == 0 || op_strncmp(double_string, "-0.", 3) == 0)
				continue;
			if (op_strstr(double_string, ".") != NULL)
				verify(op_strlen(double_string) == MIN(op_strlen(intpart_string) + 1 + precision, 31));
			else
				verify(op_strlen(double_string) == op_strlen(intpart_string));

		}
	}
}

test("OpDoubleFormat::ToExponential safe for buffer >= MAX(precision+9,10)")
{
	// OpDoubleFormat::ToExponential returns a string of the form "INTEGER.DECIMALSeNUM"
	// where NUM and INTEGER are a possibly negative and where there are exactly
	// "precision" DECIMALS included and INTEGER is always single digit.
	char buffer[32]; /* ARRAY OK 2009-08-05 molsson */

		iterate (double_value) from double_values
		{
			// FIXME: it would be nice if it was safe to run this loop with
			// very high values for precision (since we can safely pass up to
			// precision == 101 for OpDoubleFormat::ToFixed and OpDoubleFormat::ToPrecision it is a bit
			// inconsistent that high precisions causes OpDoubleFormat::ToExponential to SEGV.
		for (size_t precision = 0; precision <= 23; ++precision)
		{
			char *double_string = OpDoubleFormat::ToExponential(buffer, double_value, precision);
			verify(double_string == buffer);
			verify(op_strstr(double_string, "e"));
			size_t exponent_length = op_strlen(op_strstr(double_string, "e") + 1);
			verify(op_strlen(double_string) == (double_value < 0 ? 1 : 0) + 1 + (precision != 0 ? 1 : 0) + precision + 1 + exponent_length);
		}
	}
}

test("OpDoubleFormat::ToPrecision doesn't overflow if buffer size >= 32")
{
	char buffer[32]; /* ARRAY OK 2009-08-05 molsson */

        iterate (double_value) from double_values
        {
		for (size_t precision = 1; precision <= 102; ++precision)
		{
			char *double_string = OpDoubleFormat::ToPrecision(buffer, double_value, precision);
			verify(double_string == buffer);
			verify(op_strlen(double_string) > 0);
		}
	}
}
