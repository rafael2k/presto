/* -*- Mode: pike; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2005-2007 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Lars T Hansen
** Peter Karlsson
*/

/* Test the memory functions of stdlib */

group "stdlib.memory";

language c++;

/* op_memcmp tests */

test("op_memcmp")
{
	char t1[] = "0123456789abcdefy";
	char t2[] = "0123456789abcdexw";

	verify( op_memcmp( t1, t2, 15 ) == 0 );
	verify( op_memcmp( t1, t2, 16 ) < 0 );
	verify( op_memcmp( t1+16, t2+16, 1 ) > 0 );

	verify(op_memcmp("\0\0\0\0\0\0\0\0\0\0", "\0\0\0\0\0\0\0\0\0\0", 10) == 0);
	verify(op_memcmp("a\0\0\0\0\0\0\0\0\0",  "b\0\0\0\0\0\0\0\0\0",  10) <  0);
	verify(op_memcmp("b\0\0\0\0\0\0\0\0\0",  "a\0\0\0\0\0\0\0\0\0",  10) >  0);
	verify(op_memcmp("a\0\0\0\0\0\0\0\0\1",  "a\0\0\0\0\0\0\0\0\0",  10) >  0);
	verify(op_memcmp("a\0\0\0\0\0\0\0\0\0",  "a\0\0\0\0\0\0\0\0\0",  10) == 0);
	verify(op_memcmp("abc\0\0\0\0\1\2\3",    "abc\0\0\0\0\1\2\3",    10) == 0);
	verify(op_memcmp("abc\0\0\0\0\0\0\0",    "ab\0\0\0\0\0\0\0\0",   10) >  0);
	verify(op_memcmp("Arial\0\0\0\0\0",      "Arial Black",          11) <  0);
	verify(op_memcmp("Arial",                "Arial Black",          6)  <  0);
	verify(op_memcmp("Arial",                "Arial Black",          5)  == 0);
	verify(op_memcmp("Arial Black",          "Arial\0\0\0\0\0",      11) >  0);
	verify(op_memcmp("Arial Black",          "Arial",                6)  >  0);
	verify(op_memcmp("Arial Black",          "Arial",                5)  == 0);
}

/* op_memcpy tests */

test("op_memcpy (aligned)")
{
	char data[64]; /* ARRAY OK 2009-06-17 molsson */
	verify(op_memcpy_test(data));
}

test("op_memcpy (unaligned)")
{
	char data[65]; /* ARRAY OK 2009-06-17 molsson */
	verify(op_memcpy_test(&data[1]));
}

subtest op_memcpy_test(char *data)
{
	// Standard tests
	for (int i = 0; i < 64; ++ i)
		data[i] = i;

	verify(op_memcpy(data, data + 4, 4) == data);
	verify(op_memcpy(data + 8, data, 8) == data + 8);

	for (int j = 0; j < 4; ++ j)
		verify(data[j] == data[j + 4] && data[j] == j + 4);
	for (int k = 0; k < 8; ++ k)
		verify(data[k] == data[k + 8] && data[k + 8] == (k % 4) + 4);

	// Buffer overrun tests
	for (int l = 0; l < 64; ++ l)
		data[l] = l;
	verify(op_memcpy(data, data + 4, 0) == data);
	verify(data[0] == 0);
	verify(op_memcpy(data + 1, data + 4, 0) == data + 1);
	verify(data[1] == 1);
}

/* op_memmove tests */

test("op_memmove (aligned)")
{
	char data[64]; /* ARRAY OK 2009-06-17 molsson */
	verify(op_memmove_test(data));
}

test("op_memmove (unaligned)")
{
	char data[65]; /* ARRAY OK 2009-06-17 molsson */
	verify(op_memmove_test(&data[1]));
}

subtest op_memmove_test(char *data)
{
	// Standard tests
	for (int i = 0; i < 64; ++ i)
		data[i] = i;

	verify(op_memmove(data, data + 4, 4) == data);
	verify(op_memmove(data + 8, data, 8) == data + 8);
	/* overlap down */
	verify(op_memmove(data + 32, data + 33, 31) == data + 32);
	/* overlap up */
	verify(op_memmove(data + 17, data + 16, 15) == data + 17);

	for (int j = 0; j < 4; ++ j)
		verify(data[j] == data[j + 4] && data[j] == j + 4);
	for (int k = 0; k < 8; ++ k)
		verify(data[k] == data[k + 8] && data[k + 8] == (k % 4) + 4);
	for (int l = 0; l < 31; ++ l)
		verify(data[l + 32] == l + 33);
	for (int m = 0; m < 15; ++ m)
		verify(data[m + 17] == m + 16);

	// Buffer overrun tests
	for (int n = 0; n < 64; ++ n)
		data[n] = n;
	verify(op_memmove(data, data + 4, 0) == data);
	verify(data[0] == 0);
	verify(op_memmove(data + 1, data + 4, 0) == data + 1);
	verify(data[1] == 1);
}

/* op_memset tests */

test("op_memset (aligned)")
{
	char data[64]; /* ARRAY OK 2009-06-17 molsson */
	verify(op_memset_test(data));
}

test("op_memset (unaligned)")
{
	char data[65]; /* ARRAY OK 2009-06-17 molsson */
	verify(op_memset_test(&data[1]));
}

subtest op_memset_test(char *data)
{
	const char BLANK_FILL_VALUE = -1; // 0xFF

	// Standard tests
	verify(op_memset(data, BLANK_FILL_VALUE, 32) == data);
	verify(op_memset(data + 32, 42, 32) == data + 32);
	for (int i = 0; i < 32; ++ i)
		verify(data[i] == BLANK_FILL_VALUE);
	for (int j = 32; j < 64; ++ j)
		verify(data[j] == 42);

	// Buffer overrun tests
	verify(op_memset(data, 127, 0) == data);
	verify(data[0] == BLANK_FILL_VALUE);
	verify(op_memset(data + 1, 127, 0) == data + 1);
	verify(data[1] == BLANK_FILL_VALUE);

}

/* op_memchr tests */

test("op_memchr (missing)")
{
	const char s[] = "abc";

	verify(op_memchr(s, 'd', 0) == NULL);
	verify(op_memchr(s, 'd', 4) == NULL);
}

test("op_memchr (present)")
{
	const char s[] = "abcdefd";
	verify(op_memchr(s, 'd', 4) == (void *)(s + 3));
	verify(op_memchr(s, 'd', 8) == (void *)(s + 3));
	verify(op_memchr(s, 0,   8) == (void *)(s + 7));
}

/* op_memmem tests */

test("op_memmem (missing)")
{
	verify(op_memmem("",      0, "find", 4) == NULL);
	verify(op_memmem("abcd",  5, "find", 4) == NULL);
	verify(op_memmem("fin",   4, "find", 4) == NULL);
	verify(op_memmem("fined", 6, "find", 4) == NULL);
}

test("op_memmem (present)")
{
	char utmp1[] = "123find";
	verify(op_memmem(utmp1, op_strlen(utmp1), "", 0) == utmp1);
	verify(op_memmem(utmp1, op_strlen(utmp1), "find", 4) == (utmp1 + 3));

	char utmp2[] = "123fine123find";
	verify(op_memmem(utmp2, op_strlen(utmp2), "find", 4) == (utmp2 + 10));

	char utmp3[] = "123fififend123";
	verify(op_memmem(utmp3, op_strlen(utmp3), "fifend", 6) == (utmp3 + 5));

	char utmp4[] = "123fififend";
	verify(op_memmem(utmp4, op_strlen(utmp4), "fifend", 6) == (utmp4 + 5));
}

/* uni_memchr tests */

test("uni_memchr (missing)")
{
	const uni_char *s = UNI_L("abc");

	verify(uni_memchr(s, 'd', 0) == NULL);
	verify(uni_memchr(s, 'd', 4) == NULL);
}

test("uni_memchr (present)")
{
	const uni_char *s = UNI_L("abcdefd");
	verify(uni_memchr(s, 'd', 4) == s + 3);
	verify(uni_memchr(s, 'd', 8) == s + 3);
	verify(uni_memchr(s, 0,   8) == s + 7);
}

