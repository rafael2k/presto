/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2006 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Lars T Hansen
** Peter Karlsson
*/

group "stdlib.math";

include "modules/stdlib/src/thirdparty_math/localmath.h";

global
{
	double epsilon = 1E-12;
}

test("op_pow")
{
	verify(op_fabs(op_pow(10.0, -3.0) - 0.001) < epsilon);
}

test("op_sqrt")
{
	verify(op_fabs(op_sqrt(0.0) - 0.0) < epsilon);
	verify(op_fabs(op_sqrt(1.0) - 1.0) < epsilon);
	verify(op_fabs(op_sqrt(4.0) - 2.0) < epsilon);
	verify(op_fabs(op_sqrt(123456789.0) - 11111.1111) < 0.0001);
	// Behaviour undefined in ISO C (domain error):
	// verify(op_isnan(op_sqrt(-1.0)));
}

test("op_exp")
{
	verify(op_fabs(op_exp(0.0) - 1.0) < epsilon);
	verify(op_fabs(op_exp(1.0) - M_E) < epsilon);
	verify(op_fabs(op_exp(2.0) - M_E * M_E) < epsilon);
}

test("op_log")
{
	verify(op_fabs((op_log(M_E) - 1.0)) < epsilon);
	verify(op_fabs((op_log(M_E * M_E) - 2.0)) < epsilon);
	verify(op_isinf(op_log(0.0)));
}

test("op_sin")
{
	verify(op_fabs(op_sin(0.0) - 0.0) < epsilon);
	verify(op_fabs(op_fabs(op_sin(M_PI / 2) - 1.0)) < epsilon);
	verify(op_fabs(op_fabs(op_sin(M_PI) - 0.0)) < epsilon);
}

test("op_cos")
{
	verify(op_fabs(op_cos(0.0) - 1.0) < epsilon);
	verify(op_fabs(op_cos(M_PI) + 1.0) < epsilon);
	verify(op_fabs(op_cos(M_PI / 2) - 0.0) < epsilon);
}

test("op_tan")
{
	verify(op_fabs(op_tan(0.0) - 0.0) < epsilon);
	double tanhalfpi = op_tan(M_PI / 2);
	verify(op_isinf(tanhalfpi) || tanhalfpi > 100000); /* big, perhaps infinite */
	verify(op_fabs(op_fabs(op_tan(M_PI) - 0.0)) < epsilon);
}

test("op_asin")
{
	verify(op_fabs(op_asin(0.0) - 0.0) < epsilon);
	verify(op_fabs(op_asin(1.0) * 2 - M_PI) < epsilon);
	// Behaviour undefined in ISO C (domain error):
	// verify(op_isnan(op_asin(2.0)));
}

test("op_acos")
{
	verify(op_fabs(op_acos(1.0) - 0.0) < epsilon);
	verify(op_fabs(op_acos(0.0) * 2 - M_PI) < epsilon);
}

test("op_atan")
{
	verify(op_fabs(op_atan(0.0) - 0.0) < epsilon);
	verify(op_fabs(op_atan(9e99) * 2 - M_PI) < epsilon);
}

test("op_atan2")
{
	verify(op_fabs(op_atan2(0.0,1.0) - 0.0) < epsilon);
	verify(op_fabs(op_atan2(1.0,1.0) * 4 - M_PI) < epsilon);
}
