/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2000-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

/* Test the integer functions of stdlib    -*- pike -*- */

group "stdlib.integer";

language c++;

// -- Global variables ---------------------------------------------------

global
{
	char *dtmp;
}

// -- Global setup -------------------------------------------------------

setup
{
	dtmp = new char[500];
}

// -- op_atoi ------------------------------------------------------------

test("op_atoi (simple)")
{
	verify(op_atoi("4711") == 4711);
	verify(op_atoi("04711") == 4711);
	verify(op_atoi("0x4711") == 0);
	verify(op_atoi("+0x4711") == 0);
	verify(op_atoi("+04711") == 4711);
	verify(op_atoi("-047x11") == -47);
	verify(op_atoi("2147483647") == 2147483647);
	verify(op_atoi("-12345") == -12345);
}

test("op_atoi (syntax errors)")
{
	verify(op_atoi("") == 0);
	verify(op_atoi("\xC5\xC4\xD6") == 0);
}

test("op_atoi (overflow)")
{
	verify(op_atoi("9999999999999999999999999") == INT_MAX);

	verify(op_atoi("2147483646") != INT_MAX);
	verify(op_atoi("2147483648") == INT_MAX);
}

test("op_atoi (underflow)")
{
	verify(op_atoi("-9999999999999999999999999") == INT_MIN);

	verify(op_atoi("-2147483647") == INT_MIN+1);
	verify(op_atoi("-2147483648") == INT_MIN);
	verify(op_atoi("-2147483649") == INT_MIN);
	verify(op_atoi("-21474836470") == INT_MIN);
	verify(op_atoi("-10000000000") == INT_MIN);
}

// -- op_strtoul ---------------------------------------------------------

test("op_strtoul (bug 169765)") // DSK-148407
{
	verify(op_strtoul("092A;", NULL, 16) == 0x092a);
	verify(op_strtoul("e", NULL, 15) == 14);
	verify(op_strtoul("10", NULL, 15) == 15);
	verify(op_strtoul("09", NULL, 8) == 0);
	verify(op_strtoul("10", NULL, 2) == 2);
	verify(op_strtoul("11", NULL, 3) == 4);
	verify(op_strtoul("13", NULL, 3) == 1);
}

test("op_strtoul (overflow)")
{
	if (sizeof(long) == 4)
	{
		verify(op_strtoul("fffffffe", NULL, 16) != ULONG_MAX);
		verify(op_strtoul("100000000", NULL, 16) == ULONG_MAX);
	}
	else
	{
		verify(op_strtoul("fffffffffffffffe", NULL, 16) != ULONG_MAX);
		verify(op_strtoul("10000000000000000", NULL, 16) == ULONG_MAX);
	}
}

test("op_strtoul (negative)")
{
	verify(op_strtoul("-1", NULL, 0) + 1 == 0);
}

// -- op_strtol ----------------------------------------------------------

test("op_strtol (overflow)")
{
	if(sizeof(long) == 4)
	{
#ifdef HAVE_ERRNO
		errno = 0;
#endif
		verify(op_strtol("7ffffffe", NULL, 16) != LONG_MAX);
		verify(op_strtol("80000000", NULL, 16) == LONG_MAX);
#ifdef HAVE_ERRNO
		verify(errno == ERANGE);
#endif
	}
	else
	{
#ifdef HAVE_ERRNO
		errno = 0;
#endif
		verify(op_strtol("7ffffffffffffffe", NULL, 16) != LONG_MAX);
		verify(op_strtol("8000000000000000", NULL, 16) == LONG_MAX); 
#ifdef HAVE_ERRNO
		verify(errno == ERANGE);
#endif
	}
}

test("op_strtol (underflow) Bug #273063") // CORE-7361
{
	if (sizeof(long) == 4)
	{
		verify(op_strtol("-2147483647", NULL, 0) == LONG_MIN+1);
		verify(op_strtol("-2147483648", NULL, 0) == LONG_MIN);
		verify(op_strtol("-2147483649", NULL, 0) == LONG_MIN);
		verify(op_strtol("-21474836470", NULL, 0) == LONG_MIN);
		verify(op_strtol("-10000000000", NULL, 0) == LONG_MIN);

#ifdef HAVE_ERRNO
		errno = 0;
#endif
		verify(op_strtol("-80000000coedbabe", NULL, 16) == LONG_MIN);
#ifdef HAVE_ERRNO
		verify(errno == ERANGE);
#endif

		BOOL overflow = TRUE;
		verify(uni_strtol(UNI_L("-2147483647"), NULL, 0, &overflow) == LONG_MIN+1);
		verify(!overflow);
		overflow = TRUE;
		verify(uni_strtol(UNI_L("-2147483648"), NULL, 0, &overflow) == LONG_MIN);
		verify(!overflow);
		verify(uni_strtol(UNI_L("-2147483649"), NULL, 0, &overflow) == LONG_MIN);
		verify(overflow);
		overflow = FALSE;
		verify(uni_strtol(UNI_L("-21474836470"), NULL, 0, &overflow) == LONG_MIN);
		verify(overflow);
		overflow = FALSE;
		verify(uni_strtol(UNI_L("-10000000000"), NULL, 0, &overflow) == LONG_MIN);
		verify(overflow);
#ifdef HAVE_ERRNO
		errno = 0;
#endif
		overflow = FALSE;
		verify(uni_strtol(UNI_L("-80000000coedbabe"), NULL, 16, &overflow) == LONG_MIN);
#ifdef HAVE_ERRNO
		verify(errno == ERANGE);
#endif
		verify(overflow);
	}
	else
	{
		verify(op_strtol("-9223372036854775807", NULL, 0) == LONG_MIN+1);
		verify(op_strtol("-9223372036854775808", NULL, 0) == LONG_MIN);
		verify(op_strtol("-9223372036854775809", NULL, 0) == LONG_MIN);
		verify(op_strtol("-92233720368547758070", NULL, 0) == LONG_MIN);
		verify(op_strtol("-10000000000000000000", NULL, 0) == LONG_MIN);
#ifdef HAVE_ERRNO
		errno = 0;
#endif
		verify(op_strtol("-8000000000000000coedbabe", NULL, 16) == LONG_MIN);
#ifdef HAVE_ERRNO
		verify(errno == ERANGE);
#endif

		BOOL overflow = TRUE;
		verify(uni_strtol(UNI_L("-9223372036854775807"),NULL, 0, &overflow) == LONG_MIN+1);
		verify(!overflow);
		overflow = TRUE;
		verify(uni_strtol(UNI_L("-9223372036854775808"), NULL, 0, &overflow) == LONG_MIN);
		verify(!overflow);
		verify(uni_strtol(UNI_L("-9223372036854775809"), NULL, 0, &overflow) == LONG_MIN);
		verify(overflow);
		overflow = FALSE;
		verify(uni_strtol(UNI_L("-92233720368547758070"),NULL, 0, &overflow) == LONG_MIN);
		verify(overflow);
		overflow = FALSE;
		verify(uni_strtol(UNI_L("-10000000000000000000"),NULL, 0, &overflow) == LONG_MIN);
#ifdef HAVE_ERRNO
		errno = 0;
#endif
		verify(uni_strtol(UNI_L("-8000000000000000coedbabe"), NULL, 16, &overflow) == LONG_MIN);
#ifdef HAVE_ERRNO
		verify(errno == ERANGE);
#endif
		verify(overflow);
	}
}

test("op_strtol (specified base)")
{
	verify(op_strtol("FFFF", NULL, 16) == 65535);
	verify(op_strtol("0xFFFF", NULL, 16) == 65535);
	verify(op_strtol("-FFFF", NULL, 16) == -65535);
	verify(op_strtol("-0xFFFF", NULL, 16) == -65535);
	verify(op_strtol("+FFFF", NULL, 16) == 65535);
	verify(op_strtol("+0xFFFF", NULL, 16) == 65535);
	verify(op_strtol("4711", NULL, 10) == 4711);
	verify(op_strtol("011147", NULL, 8) == 4711);
}

test("op_strtol (autodetected base)")
{
	verify(op_strtol("0xFFFF", NULL, 0) == 65535);
	verify(op_strtol("-0xFFFF", NULL, 0) == -65535);
	verify(op_strtol("+0xFFFF", NULL, 0) == 65535);
	verify(op_strtol("011147", NULL, 0) == 4711);
}

// -- op_strtoi64 --------------------------------------------------------

test("op_strtoi64")
	require STDLIB_64BIT_STRING_CONVERSIONS;
{
	verify(op_strtoi64("1", NULL, 0) == 1);
	verify(op_strtoi64("9223372036854775807", NULL, 0) == OP_INT64(9223372036854775807));
	verify(op_strtoi64("-9223372036854775808", NULL, 0) == (OP_INT64(-9223372036854775807) - 1));
}

test("op_strtoi64 underflow")
	require STDLIB_64BIT_STRING_CONVERSIONS;
{
	// Underflow => INT64_MIN (LLONG_MIN)
	verify(op_strtoi64("-8000000000000001", NULL, 16) == (OP_INT64(-9223372036854775807) - 1));

#ifdef HAVE_ERRNO
	errno = 0;
#endif
	verify(op_strtoi64("-8000000000000000coedbabe", NULL, 16) == (OP_INT64(-9223372036854775807) - 1));
#ifdef HAVE_ERRNO
	verify(errno == ERANGE);
#endif
}

test("op_strtoi64 overflow")
	require STDLIB_64BIT_STRING_CONVERSIONS;
{
#ifdef HAVE_ERRNO
	errno = 0;
#endif
	// Overflow => INT64_MAX (LLONG_MAX)
	verify(op_strtoi64("8000000000000001", NULL, 16) == OP_INT64(9223372036854775807));
#ifdef HAVE_ERRNO
	verify(errno == ERANGE);
#endif
}

// -- op_strtoui64 --------------------------------------------------------

test("op_strtoui64")
	require STDLIB_64BIT_STRING_CONVERSIONS;
{
	verify(op_strtoui64("1", NULL, 0) == 1);
	verify(op_strtoui64("9223372036854775807", NULL, 0) == OP_UINT64(9223372036854775807));
	verify(op_strtoui64("18446744073709551615", NULL, 0) == OP_UINT64(18446744073709551615));
}

test("op_strtoui64 negative")
	require STDLIB_64BIT_STRING_CONVERSIONS;
{
	verify(op_strtoui64("-1", NULL, 0) + 1 == 0);
}

test("op_strtoui64 overflow")
	require STDLIB_64BIT_STRING_CONVERSIONS;
{
	// Overflow => UINT64_MAX (ULLONG_MAX)
	verify(op_strtoui64("10000000000000000", NULL, 16) == OP_UINT64(0xFFFFFFFFFFFFFFFF));
}

// -- op_abs -------------------------------------------------------------

test("op_abs")
{
	verify(op_abs(-1)       == 1);
	verify(op_abs( 1)       == 1);
	verify(op_abs( 0)       == 0);
	verify(op_abs( INT_MAX) == INT_MAX);
	verify(op_abs(-INT_MAX) == INT_MAX);
}

// -- op_srand -----------------------------------------------------------

test("op_srand and op_rand")
{
	// Set a seed and get five values
	int seed1 = (int)op_time(NULL);
	op_srand(seed1);

	int val[5];
	for (int i = 0; i < 5; ++ i)
	{
		val[i] = op_rand();
	}

	// Reseed with that seed and check that we get the same five values
	op_srand(seed1);

	for (int j = 0; j < 5; ++ j)
	{
		verify(op_rand() == val[j]);
	}

	// Now try another seed and hope that at least one of them differ
	op_srand(seed1 + 4711);

	int diff = 0;
	for (int k = 0; k < 5; ++ k)
	{
		diff += op_rand() != val[k];
	}
	verify(diff);
}

// -- op_itoa ------------------------------------------------------------

test("op_itoa (base 10, positive)")
{
	verify(op_stricmp(op_itoa(0,          dtmp, 10), "0")          == 0);
	verify(op_stricmp(op_itoa(1,          dtmp, 10), "1")          == 0);
	verify(op_stricmp(op_itoa(17,         dtmp, 10), "17")         == 0);
	verify(op_stricmp(op_itoa(4711,       dtmp, 10), "4711")       == 0);
	verify(op_stricmp(op_itoa(65535,      dtmp, 10), "65535")      == 0);
	verify(op_stricmp(op_itoa(2147483647, dtmp, 10), "2147483647") == 0);
    verify(op_stricmp(op_itoa(12345,      dtmp, 10), "12345")      == 0);
	if (sizeof(int) == 4)
	    verify(op_stricmp(op_itoa(INT_MAX,dtmp, 10), "2147483647") == 0);
}

test("op_itoa (base 10, negative)")
{
	verify(op_stricmp(op_itoa(-1,         dtmp, 10), "-1")         == 0);
	if (sizeof(int) == 4)
	    verify(op_stricmp(op_itoa(INT_MIN,dtmp, 10), "-2147483648")== 0);
}

test("op_itoa (base 5)")
{
    verify(op_stricmp(op_itoa(12345,      dtmp,  5), "343340")     == 0);
}

test("op_itoa (base 8)")
{
	verify(op_stricmp(op_itoa(4711,       dtmp,  8), "11147")     == 0);
}

test("op_itoa (base 2, positive)")
{
	verify(op_stricmp(op_itoa(1,          dtmp,  2), "1")          == 0);
    verify(op_stricmp(op_itoa(12345,      dtmp,  2), "11000000111001") == 0 );
}

test("op_itoa (base 2, negative)")
{
	if (sizeof(int) == 4)
		verify(op_stricmp(op_itoa(-1,         dtmp,  2), "11111111111111111111111111111111")         == 0);
}

// -- op_ltoa ------------------------------------------------------------

test("op_ltoa (base 10, positive)")
{
	verify(op_stricmp(op_ltoa(0,          dtmp, 10), "0")          == 0);
	verify(op_stricmp(op_ltoa(1,          dtmp, 10), "1")          == 0);
	verify(op_stricmp(op_ltoa(17,         dtmp, 10), "17")         == 0);
	verify(op_stricmp(op_ltoa(4711,       dtmp, 10), "4711")       == 0);
	verify(op_stricmp(op_ltoa(65535,      dtmp, 10), "65535")      == 0);
	verify(op_stricmp(op_ltoa(2147483647, dtmp, 10), "2147483647") == 0);
    verify(op_stricmp(op_ltoa(12345,      dtmp, 10), "12345")      == 0);
	if (sizeof(long) == 4)
	    verify(op_stricmp(op_ltoa(LONG_MAX,dtmp, 10), "2147483647") == 0);
}

test("op_ltoa (base 10, negative)")
{
	verify(op_stricmp(op_ltoa(-1,         dtmp, 10), "-1")         == 0);
	if (sizeof(long) == 4)
	    verify(op_stricmp(op_ltoa(LONG_MIN,   dtmp, 10), "-2147483648")== 0);
}

test("op_ltoa (base 5)")
{
    verify(op_stricmp(op_ltoa(12345,      dtmp,  5), "343340")     == 0);
}

test("op_ltoa (base 8)")
{
	verify(op_stricmp(op_ltoa(4711,       dtmp,  8), "11147")     == 0);
}

test("op_ltoa (base 2, positive)")
{
	verify(op_stricmp(op_ltoa(1,          dtmp,  2), "1")          == 0);
    verify(op_stricmp(op_ltoa(12345,      dtmp,  2), "11000000111001") == 0 );
}

test("op_ltoa (base 2, negative)")
	disabled;
{
	verify(op_stricmp(op_ltoa(-1,         dtmp,  2), "-1")         == 0);
}

// -- op_ultoa -----------------------------------------------------------

test("op_ultoa")
	disabled;
{
    verify(op_stricmp(op_ultoa(ULONG_MAX,  dtmp, 10), "4294967295") == 0);
    verify(op_stricmp(op_ultoa(0,          dtmp, 10), "0") == 0);
    verify(op_stricmp(op_ultoa(ULONG_MAX,  dtmp, 16), "ffffffff") == 0);
    verify(op_stricmp(op_ultoa(0,          dtmp, 16), "0") == 0);
}

// -- op_i64toa -----------------------------------------------------------

test("op_i64toa")
	require STDLIB_64BIT_STRING_CONVERSIONS;
{
    verify_string(op_i64toa(OP_UINT64(9223372036854775807),    dtmp, 10), "9223372036854775807");
    verify_string(op_i64toa(0,                                 dtmp, 10), "0");
    verify_string(op_i64toa(OP_INT64(-9223372036854775807) - 1,dtmp, 16), "8000000000000000");
    verify_string(op_i64toa(-1,                                dtmp, 16), "ffffffffffffffff");
}

// -- op_ltoan -----------------------------------------------------------

test("op_ltoan")
	disabled;
{
	verify(op_stricmp(op_ltoan(17,         dtmp, 10, 500), "17")         == 0);
	verify(op_stricmp(op_ltoan(4711,       dtmp, 10, 500), "4711")       == 0);
	verify(op_stricmp(op_ltoan(65535,      dtmp, 10, 500), "65535")      == 0);
	verify(op_stricmp(op_ltoan(2147483647, dtmp, 10, 500), "2147483647") == 0);
	verify(op_stricmp(op_ltoan(4711,       dtmp, 8, 500),  "11147") == 0);
}

// -- op_atof ------------------------------------------------------------

test("uni_atof")
{
	// Floating-point numbers can't be tested for equality, choose a small
	// enough epsilon value:
	double epsilon = 1E-12;

	double f1 = uni_atof(UNI_L("1.0"));
	verify(f1 - 1.0 < epsilon);

	double f2 = uni_atof(UNI_L("3.14"));
	verify(f2 - 3.14 < epsilon);

	double f3 = uni_atof(UNI_L("3."));
	verify(f3 - 3.0 < epsilon);

	double f4 = uni_atof(UNI_L(".5"));
	verify(f4 - 0.5 < epsilon);
}

// -- op_ntohs -----------------------------------------------------------

test("op_ntohs")
{
	union netshort
	{
		UINT16 val;
		unsigned char byte[2]; /* ARRAY OK 2009-06-17 molsson */
	} data;
	data.byte[0] = 0xFF;
	data.byte[1] = 0xFE;
	verify(op_ntohs(data.val) == 0xFFFE);
}

// -- op_ntohl -----------------------------------------------------------

test("op_ntohl")
{
	union netlong
	{
		UINT32 val;
		unsigned char byte[4]; /* ARRAY OK 2009-06-17 molsson */
	} data;
	data.byte[0] = 0xFF;
	data.byte[1] = 0xFE;
	data.byte[2] = 0xFD;
	data.byte[3] = 0xFC;
	verify(op_ntohl(data.val) == 0xFFFEFDFC);
}

// -- op_htons -----------------------------------------------------------

test("op_htons")
{
	union netshort
	{
		UINT16 val;
		unsigned char byte[2]; /* ARRAY OK 2009-06-17 molsson */
	} data;
	data.val = op_htons(0xFFFE);
	verify(data.byte[0] == 0xFF);
	verify(data.byte[1] == 0xFE);
}

// -- op_htonl -----------------------------------------------------------

test("op_htonl")
{
	union netlong
	{
		UINT32 val;
		unsigned char byte[4]; /* ARRAY OK 2009-06-17 molsson */
	} data;
	data.val = op_htonl(0xFFFEFDFC);
	verify(data.byte[0] == 0xFF);
	verify(data.byte[1] == 0xFE);
	verify(data.byte[2] == 0xFD);
	verify(data.byte[3] == 0xFC);
}

// -- Global cleanup -----------------------------------------------------

exit
{
	delete[] dtmp;
}
