/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 1995-2007 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Karlsson
**/

group "stdlib.pi";
require undefined STDLIB_DTOA_CONVERSION;

include "modules/stdlib/stdlib_pi.h";

test("StringToDouble")
	require undefined HAVE_STRTOD;
{
	double posinf = op_implode_double( 0x7ff00000UL, 0UL );
	double neginf = op_implode_double( 0xfff00000UL, 0UL );

	// Copied from strtod() tests
	char *ptr;
	double epsilon = 1E-12;
	verify(op_fabs(StdlibPI::StringToDouble("    +4.5e-8ebc", &ptr) - 4.5e-8) < epsilon && ptr[0] == 'e' );
	verify(StdlibPI::StringToDouble("  -Infinity  ", NULL) == neginf);
	verify(StdlibPI::StringToDouble("  +Infinity", NULL) == posinf);
	verify(op_fabs(StdlibPI::StringToDouble("12345678901234.0000000000000000000000000000000000000000000000000000000000001", NULL) - 12345678901234.0) < epsilon);
	verify(op_fabs(StdlibPI::StringToDouble("12e3", &ptr) - 12000.0) < epsilon && ptr[0] == 0);
	verify(op_fabs(StdlibPI::StringToDouble("12e-3", &ptr) - 0.012) < epsilon && ptr[0] == 0);
	verify(op_fabs(StdlibPI::StringToDouble("-11E0", &ptr) - -11) < epsilon && ptr[0] == 0);
	verify(op_fabs(StdlibPI::StringToDouble("12e3q", &ptr) - 12000.0) < epsilon && ptr[0] == 'q');
	verify(op_fabs(StdlibPI::StringToDouble("12e-3q", &ptr) - 0.012) < epsilon && ptr[0] == 'q');
	verify(op_fabs(StdlibPI::StringToDouble("-11E0q", &ptr) - -11) < epsilon && ptr[0] == 'q');
}

test("SPrintfDouble")
{
	char buf[256]; /* ARRAY OK 2009-06-17 molsson */

	StdlibPI::SPrintfDouble(buf, sizeof(buf), "%f", 10.0/3);
	verify(buf[0] == '3');
	verify(buf[1] == '.'); // Locale safe
	verify(op_strchr(buf, 'e') == NULL); // No exponential

	StdlibPI::SPrintfDouble(buf, sizeof(buf), "%g", 10.0/3);
	verify(buf[0] == '3');
	verify(buf[1] == '.'); // Locale safe
	verify(op_strchr(buf, 'e') == NULL); // No exponential

	StdlibPI::SPrintfDouble(buf, sizeof(buf), "%e", 10.0/3);
	verify(buf[0] == '3');
	verify(buf[1] == '.'); // Locale safe
	verify(op_strchr(buf, 'e') != NULL); // Exponential
}

test("LocaleSafeDTOA")
{
	char buf[256]; /* ARRAY OK 2009-08-12 molsson */
	if (StdlibPI::LocaleSafeDTOA(0.0, buf, -1))
	{
		verify(buf[0] == '0');
	}

	if (StdlibPI::LocaleSafeDTOA(1.5, buf, -1))
	{
		verify(buf[0] == '1');
		verify(buf[1] == '.'); // Locale safe
		verify(buf[2] == '5');
	}

	if (StdlibPI::LocaleSafeDTOA(-1.25, buf, 1))
	{
		verify(buf[0] == '-');
		verify(op_strlen(buf) == 4); // Heed precision
	}
}

test("LocaleSafeETOA")
{
	char buf[256]; /* ARRAY OK 2009-08-12 molsson */
	if (StdlibPI::LocaleSafeETOA(0.0, buf, -1))
	{
		verify(buf[0] == '0');
		verify(op_strchr(buf, 'e') != NULL);
	}

	if (StdlibPI::LocaleSafeETOA(1.0/3, buf, 2))
	{
		verify(buf[0] == '3');
		verify(buf[1] == '.'); // Locale safe
		verify(buf[2] == '3'); // Heed precision
		verify(buf[3] == '3'); // Heed precision
		verify(buf[4] == 'e'); // Locale safe
		verify(buf[5] == '-'); // Locale safe
		verify(buf[6] == '1');
	}
}
