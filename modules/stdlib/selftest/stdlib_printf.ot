/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2000-2012 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

/* Test the printf functions of stdlib    -*- pike -*- */

group "stdlib.printf";

language c++;

include "modules/stdlib/include/double_format.h";

// -- Global variables ---------------------------------------------------

global
{
	char tmp[1024]; /* ARRAY OK 2009-06-17 molsson */
	uni_char uni_tmp[1024]; /* ARRAY OK 2009-06-17 molsson */

#ifdef QUIET_NAN_IS_ONE
	double nan = op_implode_double( 0x7fffffffUL, 0xffffffffUL );
#else
	double nan = op_implode_double( 0x7ff7ffffUL, 0xffffffffUL );
#endif
	double posinf = op_implode_double( 0x7ff00000UL, 0UL );
	double neginf = op_implode_double( 0xfff00000UL, 0UL );
}

// -- Simple tests -------------------------------------------------------

// %d
test("%d (ASCII)")
{
	op_sprintf(tmp, "%d", 0);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%d", 42);
	verify_string(tmp, "42");

	op_sprintf(tmp, "%d", 2147483647);
	verify_string(tmp, "2147483647");

	op_sprintf(tmp, "%d", (-2147483647 - 1));
	verify_string(tmp, "-2147483648");
}

test("%d (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%d"), 0);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%d"), 42);
	verify_string(uni_tmp, UNI_L("42"));

	uni_sprintf(uni_tmp, UNI_L("%d"), 2147483647);
	verify_string(uni_tmp, UNI_L("2147483647"));

	uni_sprintf(uni_tmp, UNI_L("%d"), (-2147483647 - 1));
	verify_string(uni_tmp, UNI_L("-2147483648"));
}

// %i
test("%i (ASCII)")
{
	op_sprintf(tmp, "%i", 0);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%i", 42);
	verify_string(tmp, "42");

	op_sprintf(tmp, "%i", 2147483647);
	verify_string(tmp, "2147483647");

	op_sprintf(tmp, "%i", (-2147483647 - 1));
	verify_string(tmp, "-2147483648");
}

test("%i (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%i"), 0);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%i"), 42);
	verify_string(uni_tmp, UNI_L("42"));

	uni_sprintf(uni_tmp, UNI_L("%i"), 2147483647);
	verify_string(uni_tmp, UNI_L("2147483647"));

	uni_sprintf(uni_tmp, UNI_L("%i"), (-2147483647 - 1));
	verify_string(uni_tmp, UNI_L("-2147483648"));
}

// %u
test("%u (ASCII)")
{
	op_sprintf(tmp, "%u", 0U);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%u", 42U);
	verify_string(tmp, "42");

	op_sprintf(tmp, "%u", 2147483647U);
	verify_string(tmp, "2147483647");

	op_sprintf(tmp, "%u", 4294967295U);
	verify_string(tmp, "4294967295");
}

test("%u (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%u"), 0U);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%u"), 42U);
	verify_string(uni_tmp, UNI_L("42"));

	uni_sprintf(uni_tmp, UNI_L("%u"), 2147483647U);
	verify_string(uni_tmp, UNI_L("2147483647"));

	uni_sprintf(uni_tmp, UNI_L("%u"), 4294967295U);
	verify_string(uni_tmp, UNI_L("4294967295"));
}

// %o
test("%o (ASCII)")
{
	op_sprintf(tmp, "%o", 0U);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%o", 42U);
	verify_string(tmp, "52");

	op_sprintf(tmp, "%o", 2147483647U);
	verify_string(tmp, "17777777777");

	op_sprintf(tmp, "%o", 4294967295U);
	verify_string(tmp, "37777777777");
}

test("%o (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%o"), 0U);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%o"), 42U);
	verify_string(uni_tmp, UNI_L("52"));

	uni_sprintf(uni_tmp, UNI_L("%o"), 2147483647U);
	verify_string(uni_tmp, UNI_L("17777777777"));

	uni_sprintf(uni_tmp, UNI_L("%o"), 4294967295U);
	verify_string(uni_tmp, UNI_L("37777777777"));
}

// %llo
test("%llo (UINT64) (ASCII)")
	require HAVE_UINT64;
	require undefined HAVE_LONGLONG;
{
	op_sprintf(tmp, "%llo", UINT64_MAX);
	verify_string(tmp, "777777777777777777777");
}

test("%llo (UINT64) (uni)")
	require HAVE_UINT64;
	require undefined HAVE_LONGLONG;
{
	uni_sprintf(uni_tmp, UNI_L("%llo"), UINT64_MAX);
	verify_string(uni_tmp, "777777777777777777777");
}

test("%llo (long long) (ASCII)")
	require HAVE_LONGLONG;
{
#if LLONG_MAX == 9223372036854775807LL
	op_sprintf(tmp, "%llo", ULLONG_MAX);
	verify_string(tmp, "1777777777777777777777");
#else
# error "Not configured for your LLONG_MAX"
#endif
}

test("%llo (long long) (uni)")
	require HAVE_LONGLONG;
{
#if LLONG_MAX == 9223372036854775807LL
	uni_sprintf(uni_tmp, UNI_L("%llo"), ULLONG_MAX);
	verify_string(uni_tmp, "1777777777777777777777");
#else
# error "Not configured for your LLONG_MAX"
#endif
}

// %x
test("%x (ASCII)")
{
	op_sprintf(tmp, "%x", 0U);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%x", 42U);
	verify_string(tmp, "2a");

	op_sprintf(tmp, "%x", 2147483647U);
	verify_string(tmp, "7fffffff");

	op_sprintf(tmp, "%x", 4294967295U);
	verify_string(tmp, "ffffffff");
}

test("%x (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%x"), 0U);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%x"), 42U);
	verify_string(uni_tmp, UNI_L("2a"));

	uni_sprintf(uni_tmp, UNI_L("%x"), 2147483647U);
	verify_string(uni_tmp, UNI_L("7fffffff"));

	uni_sprintf(uni_tmp, UNI_L("%x"), 4294967295U);
	verify_string(uni_tmp, UNI_L("ffffffff"));
}

// %lx
test("%lx (ASCII)")
{
	op_sprintf(tmp, "%lx", 0UL);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%lx", 42UL);
	verify_string(tmp, "2a");

	op_sprintf(tmp, "%lx", 2147483647UL);
	verify_string(tmp, "7fffffff");

	op_sprintf(tmp, "%lx", 4294967295UL);
	verify_string(tmp, "ffffffff");
}

test("%lx (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%lx"), 0UL);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%lx"), 42UL);
	verify_string(uni_tmp, UNI_L("2a"));

	uni_sprintf(uni_tmp, UNI_L("%lx"), 2147483647UL);
	verify_string(uni_tmp, UNI_L("7fffffff"));

	uni_sprintf(uni_tmp, UNI_L("%lx"), 4294967295UL);
	verify_string(uni_tmp, UNI_L("ffffffff"));
}

// %llx
test("%llx (UINT64) (ASCII)")
	require HAVE_UINT64;
	require undefined HAVE_LONGLONG;
{
	op_sprintf(tmp, "%llx", UINT64_MAX);
	verify_string(tmp, "ffffffffffffffff");
}

test("%llx (UINT64) (uni)")
	require HAVE_UINT64;
	require undefined HAVE_LONGLONG;
{
	uni_sprintf(uni_tmp, UNI_L("%llx"), UINT64_MAX);
	verify_string(uni_tmp, "ffffffffffffffff");
}

test("%llx (long long) (ASCII)")
	require HAVE_LONGLONG;
{
#if LLONG_MAX == 9223372036854775807LL
	op_sprintf(tmp, "%llx", ULLONG_MAX);
	verify_string(tmp, "ffffffffffffffff");
#else
# error "Not configured for your LLONG_MAX"
#endif
}

test("%llx (long long) (uni)")
	require HAVE_LONGLONG;
{
#if LLONG_MAX == 9223372036854775807LL
	uni_sprintf(uni_tmp, UNI_L("%llx"), ULLONG_MAX);
	verify_string(uni_tmp, "ffffffffffffffff");
#else
# error "Not configured for your LLONG_MAX"
#endif
}

// %X
test("%X (ASCII)")
{
	op_sprintf(tmp, "%X", 0U);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%X", 42U);
	verify_string(tmp, "2A");

	op_sprintf(tmp, "%X", 2147483647U);
	verify_string(tmp, "7FFFFFFF");

	op_sprintf(tmp, "%X", 4294967295U);
	verify_string(tmp, "FFFFFFFF");
}

test("%X (uni)")
{
		uni_sprintf(uni_tmp, UNI_L("%X"), 0U);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%X"), 42U);
	verify_string(uni_tmp, UNI_L("2A"));

	uni_sprintf(uni_tmp, UNI_L("%X"), 2147483647U);
	verify_string(uni_tmp, UNI_L("7FFFFFFF"));

	uni_sprintf(uni_tmp, UNI_L("%X"), 4294967295U);
	verify_string(uni_tmp, UNI_L("FFFFFFFF"));
}

// %c
test("%c (ASCII)")
{
	op_sprintf(tmp, "%c", 0x20);
	verify_string(tmp, " ");

	op_sprintf(tmp, "%c", 0xFF);
	verify_string(tmp, "\xFF");
}

test("%c (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%c"), 0x20);
	verify_string(uni_tmp, UNI_L(" "));

	uni_sprintf(uni_tmp, UNI_L("%c"), 0xFF);
	verify_string(uni_tmp, UNI_L("\xFF"));
}

// %e
test("%e (ASCII)")
	leakcheck;
{
	// Test exponential format; note that C99 says that the exponent
	// is "at least two" digits, so allow variations here.
	// valid, C99 says "at least two".

	op_sprintf(tmp, "%e", 0.0);
	verify(op_strcmp(tmp, "0.000000e+000") == 0 ||
	       op_strcmp(tmp, "0.000000e+00") == 0);

	op_sprintf(tmp, "%e", 10.0/3);
	verify(op_strcmp(tmp, "3.333333e+000") == 0 ||
	       op_strcmp(tmp, "3.333333e+00") == 0);

	op_sprintf(tmp, "%e", 1000000.0);
	verify(op_strcmp(tmp, "1.000000e+006") == 0 ||
	       op_strcmp(tmp, "1.000000e+06") == 0);
}

test("%e specials (ASCII)")
	leakcheck;
{
	op_sprintf(tmp, "%e", nan);
	verify_string(tmp, "nan");

	op_sprintf(tmp, "%e", posinf);
	verify(op_strcmp(tmp, "inf") == 0 || op_strcmp(tmp, "infinity") == 0);

	op_sprintf(tmp, "%e", neginf);
	verify(op_strcmp(tmp, "-inf") == 0 || op_strcmp(tmp, "-infinity") == 0);
}

test("%e (uni)")
	leakcheck;
{
	uni_sprintf(uni_tmp, UNI_L("%e"), 0.0);
	verify(uni_strcmp(uni_tmp, UNI_L("0.000000e+000")) == 0 ||
	       uni_strcmp(uni_tmp, UNI_L("0.000000e+00")) == 0);

	uni_sprintf(uni_tmp, UNI_L("%e"), 10.0/3);
	verify(uni_strcmp(uni_tmp, UNI_L("3.333333e+000")) == 0 ||
	       uni_strcmp(uni_tmp, UNI_L("3.333333e+00")) == 0);

	uni_sprintf(uni_tmp, UNI_L("%e"), 1000000.0);
	verify(uni_strcmp(uni_tmp, UNI_L("1.000000e+006")) == 0 ||
	       uni_strcmp(uni_tmp, UNI_L("1.000000e+06")) == 0);
}

test("%e specials (uni)")
	leakcheck;
{
	uni_sprintf(uni_tmp, UNI_L("%e"), nan);
	verify_string(uni_tmp, UNI_L("nan"));

	uni_sprintf(uni_tmp, UNI_L("%e"), posinf);
	verify(uni_strcmp(uni_tmp, UNI_L("inf")) == 0 || uni_strcmp(uni_tmp, UNI_L("infinity")) == 0);

	uni_sprintf(uni_tmp, UNI_L("%e"), neginf);
	verify(uni_strcmp(uni_tmp, UNI_L("-inf")) == 0 || uni_strcmp(uni_tmp, UNI_L("-infinity")) == 0);
}

// %E
test("%E (ASCII)")
	leakcheck;
{
	op_sprintf(tmp, "%E", 0.0);
	verify(op_strcmp(tmp, "0.000000E+000") == 0 ||
	       op_strcmp(tmp, "0.000000E+00") == 0);

	op_sprintf(tmp, "%E", 10.0/3);
	verify(op_strcmp(tmp, "3.333333E+000") == 0 ||
	       op_strcmp(tmp, "3.333333E+00") == 0);

	op_sprintf(tmp, "%E", 1000000.0);
	verify(op_strcmp(tmp, "1.000000E+006") == 0 ||
	       op_strcmp(tmp, "1.000000E+06") == 0);
}

test("%E specials (ASCII)")
	leakcheck;
{
	op_sprintf(tmp, "%E", nan);
	verify_string(tmp, "NAN");

	op_sprintf(tmp, "%E", posinf);
	verify(op_strcmp(tmp, "INF") == 0 || op_strcmp(tmp, "infinity") == 0);

	op_sprintf(tmp, "%E", neginf);
	verify(op_strcmp(tmp, "-INF") == 0 || op_strcmp(tmp, "-infinity") == 0);
}

test("%E (uni)")
	leakcheck;
{
	uni_sprintf(uni_tmp, UNI_L("%E"), 0.0);
	verify(uni_strcmp(uni_tmp, UNI_L("0.000000E+000")) == 0 ||
	       uni_strcmp(uni_tmp, UNI_L("0.000000E+00")) == 0);

	uni_sprintf(uni_tmp, UNI_L("%E"), 10.0/3);
	verify(uni_strcmp(uni_tmp, UNI_L("3.333333E+000")) == 0 ||
	       uni_strcmp(uni_tmp, UNI_L("3.333333E+00")) == 0);

	uni_sprintf(uni_tmp, UNI_L("%E"), 1000000.0);
	verify(uni_strcmp(uni_tmp, UNI_L("1.000000E+006")) == 0 ||
	       uni_strcmp(uni_tmp, UNI_L("1.000000E+06")) == 0);
}

test("%E specials (uni)")
	leakcheck;
{
	uni_sprintf(uni_tmp, UNI_L("%E"), nan);
	verify_string(uni_tmp, UNI_L("NAN"));

	uni_sprintf(uni_tmp, UNI_L("%E"), posinf);
	verify(uni_strcmp(uni_tmp, UNI_L("INF")) == 0 || uni_strcmp(uni_tmp, UNI_L("INFINITY")) == 0);

	uni_sprintf(uni_tmp, UNI_L("%E"), neginf);
	verify(uni_strcmp(uni_tmp, UNI_L("-INF")) == 0 || uni_strcmp(uni_tmp, UNI_L("-INFINITY")) == 0);
}

// %f
test("%f (ASCII)")
	leakcheck;
{
	op_sprintf(tmp, "%f", 0.0);
	verify_string(tmp, "0.000000");

	op_sprintf(tmp, "%f", 10.0/3);
	verify_string(tmp, "3.333333");

	op_sprintf(tmp, "%f", -10.0/3);
	verify_string(tmp, "-3.333333");

	op_sprintf(tmp, "%f", 1000000.0);
	verify_string(tmp, "1000000.000000");
}

test("%f specials (ASCII)")
	leakcheck;
{
	op_sprintf(tmp, "%f", nan);
	verify_string(tmp, "nan");

	op_sprintf(tmp, "%f", posinf);
	verify(op_strcmp(tmp, "inf") == 0 || op_strcmp(tmp, "infinity") == 0);

	op_sprintf(tmp, "%f", neginf);
	verify(op_strcmp(tmp, "-inf") == 0 || op_strcmp(tmp, "-infinity") == 0);
}

test("%f (uni)")
	leakcheck;
{
	uni_sprintf(uni_tmp, UNI_L("%f"), 0.0);
	verify_string(uni_tmp, UNI_L("0.000000"));

	uni_sprintf(uni_tmp, UNI_L("%f"), 10.0/3);
	verify_string(uni_tmp, UNI_L("3.333333"));

	uni_sprintf(uni_tmp, UNI_L("%f"), -10.0/3);
	verify_string(uni_tmp, UNI_L("-3.333333"));

	uni_sprintf(uni_tmp, UNI_L("%f"), 1000000.0);
	verify_string(uni_tmp, UNI_L("1000000.000000"));

	uni_sprintf(uni_tmp, UNI_L("%f"), nan);
	verify_string(uni_tmp, UNI_L("nan"));
}

test("%f specials (uni)")
	leakcheck;
{
	uni_sprintf(uni_tmp, UNI_L("%f"), posinf);
	verify(uni_strcmp(uni_tmp, UNI_L("inf")) == 0 || uni_strcmp(uni_tmp, UNI_L("infinity")) == 0);

	uni_sprintf(uni_tmp, UNI_L("%f"), neginf);
	verify(uni_strcmp(uni_tmp, UNI_L("-inf")) == 0 || uni_strcmp(uni_tmp, UNI_L("-infinity")) == 0);
}

// %F
test("%F (ASCII)")
	disabled; // Not in use in Opera code and not supported by MSCRT
	leakcheck;
{
	op_sprintf(tmp, "%F", 0.0);
	verify_string(tmp, "0.000000");

	op_sprintf(tmp, "%F", 10.0/3);
	verify_string(tmp, "3.333333");

	op_sprintf(tmp, "%F", -10.0/3);
	verify_string(tmp, "-3.333333");

	op_sprintf(tmp, "%F", 1000000.0);
	verify_string(tmp, "1000000.000000");
}

test("%F specials (ASCII)")
	disabled;
	leakcheck;
{
	op_sprintf(tmp, "%F", nan);
	verify_string(tmp, "NAN");

	op_sprintf(tmp, "%F", posinf);
	verify(op_strcmp(tmp, "INF") == 0 || op_strcmp(tmp, "INFINITY") == 0);

	op_sprintf(tmp, "%F", neginf);
	verify(op_strcmp(tmp, "-INF") == 0 || op_strcmp(tmp, "-INFINITY") == 0);
}

test("%F (uni)")
	disabled; // Not in use in Opera code and not supported by MSCRT
	leakcheck;
{
	uni_sprintf(uni_tmp, UNI_L("%F"), 0.0);
	verify_string(uni_tmp, UNI_L("0.000000"));

	uni_sprintf(uni_tmp, UNI_L("%F"), 10.0/3);
	verify_string(uni_tmp, UNI_L("3.333333"));

	uni_sprintf(uni_tmp, UNI_L("%F"), 1000000.0);
	verify_string(uni_tmp, UNI_L("1000000.000000"));
}

test("%F specials (ASCII)")
	disabled;
	leakcheck;
{
	uni_sprintf(uni_tmp, UNI_L("%F"), nan);
	verify_string(uni_tmp, UNI_L("NAN"));

	uni_sprintf(uni_tmp, UNI_L("%F"), posinf);
	verify(uni_strcmp(uni_tmp, UNI_L("INF")) == 0 || uni_strcmp(uni_tmp, UNI_L("INFINITY")) == 0);

	uni_sprintf(uni_tmp, UNI_L("%F"), neginf);
	verify(uni_strcmp(uni_tmp, UNI_L("-INF")) == 0 || uni_strcmp(uni_tmp, UNI_L("-INFINITY")) == 0);
}

// %g
test("%g (ASCII)")
	leakcheck;
{
	op_sprintf(tmp, "%g", 0.0);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%g", 1.0000);
	verify_string(tmp, "1");

	op_sprintf(tmp, "%g", 10.0/3);
	verify_string(tmp, "3.33333");

	op_sprintf(tmp, "%g", -10.0/3);
	verify_string(tmp, "-3.33333");

	op_sprintf(tmp, "%g", 1000000.0);
	verify(op_strcmp(tmp, "1e+06") == 0 ||
	       op_strcmp(tmp, "1e+006") == 0);
}

test("%g specials (ASCII)")
	leakcheck;
{
	op_sprintf(tmp, "%g", nan);
	verify_string(tmp, "nan");

	op_sprintf(tmp, "%g", posinf);
	verify(op_strcmp(tmp, "inf") == 0 || op_strcmp(tmp, "infinity") == 0);

	op_sprintf(tmp, "%g", neginf);
	verify(op_strcmp(tmp, "-inf") == 0 || op_strcmp(tmp, "-infinity") == 0);
}

test("%g (uni)")
	leakcheck;
{
	uni_sprintf(uni_tmp, UNI_L("%g"), 0.0);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%g"), 2.0000);
	verify_string(uni_tmp, UNI_L("2"));

	uni_sprintf(uni_tmp, UNI_L("%g"), 10.0/3);
	verify_string(uni_tmp, UNI_L("3.33333"));

	uni_sprintf(uni_tmp, UNI_L("%g"), -10.0/3);
	verify_string(uni_tmp, UNI_L("-3.33333"));

	uni_sprintf(uni_tmp, UNI_L("%g"), 1000000.0);
	verify(uni_strcmp(uni_tmp, UNI_L("1e+06")) == 0 ||
	       uni_strcmp(uni_tmp, UNI_L("1e+006")) == 0);
}

test("%g specials (uni)")
	leakcheck;
{
	uni_sprintf(uni_tmp, UNI_L("%g"), nan);
	verify_string(uni_tmp, UNI_L("nan"));

	uni_sprintf(uni_tmp, UNI_L("%g"), posinf);
	verify(uni_strcmp(uni_tmp, UNI_L("inf")) == 0 || uni_strcmp(uni_tmp, UNI_L("infinity")) == 0);

	uni_sprintf(uni_tmp, UNI_L("%g"), neginf);
	verify(uni_strcmp(uni_tmp, UNI_L("-inf")) == 0 || uni_strcmp(uni_tmp, UNI_L("-infinity")) == 0);
}

// %G
test("%G (ASCII)")
	leakcheck;
{
	op_sprintf(tmp, "%G", 0.0);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%G", 1.0000);
	verify_string(tmp, "1");

	op_sprintf(tmp, "%G", 10.0/3);
	verify_string(tmp, "3.33333");

	op_sprintf(tmp, "%G", 1000000.0);
	verify(op_strcmp(tmp, "1E+06") == 0 ||
	       op_strcmp(tmp, "1E+006") == 0);
}

test("%G specials (ASCII)")
	leakcheck;
{
	op_sprintf(tmp, "%G", nan);
	verify_string(tmp, "NAN");

	op_sprintf(tmp, "%G", posinf);
	verify(op_strcmp(tmp, "INF") == 0 || op_strcmp(tmp, "INFINITY") == 0);

	op_sprintf(tmp, "%G", neginf);
	verify(op_strcmp(tmp, "-INF") == 0 || op_strcmp(tmp, "-INFINITY") == 0);
}

test("%G (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%G"), 0.0);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%G"), 1.0000);
	verify_string(uni_tmp, UNI_L("1"));

	uni_sprintf(uni_tmp, UNI_L("%G"), 10.0/3);
	verify_string(uni_tmp, UNI_L("3.33333"));

	uni_sprintf(uni_tmp, UNI_L("%G"), -10.0/3);
	verify_string(uni_tmp, UNI_L("-3.33333"));

	uni_sprintf(uni_tmp, UNI_L("%G"), 1000000.0);
	verify(uni_strcmp(uni_tmp, UNI_L("1E+06")) == 0 ||
	       uni_strcmp(uni_tmp, UNI_L("1E+006")) == 0);
}

test("%G specials (uni)")
	leakcheck;
{
	uni_sprintf(uni_tmp, UNI_L("%G"), nan);
	verify_string(uni_tmp, UNI_L("NAN"));

	uni_sprintf(uni_tmp, UNI_L("%G"), posinf);
	verify(uni_strcmp(uni_tmp, UNI_L("INF")) == 0 || uni_strcmp(uni_tmp, UNI_L("INFINITY")) == 0);

	uni_sprintf(uni_tmp, UNI_L("%G"), neginf);
	verify(uni_strcmp(uni_tmp, UNI_L("-INF")) == 0 || uni_strcmp(uni_tmp, UNI_L("-INFINITY")) == 0);
}

// %s
test("%s (ASCII)")
{
	op_sprintf(tmp, "%s", "test");
	verify_string(tmp, "test");
}

test("%s (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%s"), UNI_L("test"));
	verify_string(uni_tmp, UNI_L("test"));
}

test("%S (uni)")
	disabled;
{
	// Is this supported anywhere but MSCRT?
	uni_sprintf(uni_tmp, UNI_L("%S"), UNI_L("test"));
	verify_string(tmp, "test");
}

// %%
test("%% (ASCII)")
{
	op_sprintf(tmp, "%%");
	verify_string(tmp, "%");
}

test("%% (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%%"));
	verify_string(uni_tmp, UNI_L("%"));
}

// %n - All these tests have been disabled, and the use of %n will trigger
// an assert due to security and portability issues (see CORE-12527).

test("%n (ASCII)")
	disabled;
{
	int written;
	op_sprintf(tmp, "%ntest", &written);
	verify_string(tmp, "test");
	verify(written == 0);

	op_sprintf(tmp, "test%n", &written);
	verify_string(tmp, "test");
	verify(written == 4);
}


test("%n (uni)")
	disabled;
{
	int written;
	uni_sprintf(uni_tmp, UNI_L("%ntest"), &written);
	verify_string(uni_tmp, UNI_L("test"));
	verify(written == 0);

	uni_sprintf(uni_tmp, UNI_L("test%n"), &written);
	verify_string(uni_tmp, UNI_L("test"));
	verify(written == 4);
}

// %hhn
test("%hhn (ASCII)")
	disabled;
{
	char written;
	op_sprintf(tmp, "%hhntest", &written);
	verify_string(tmp, "test");
	verify(written == 0);

	op_sprintf(tmp, "test%hhn", &written);
	verify_string(tmp, "test");
	verify(written == 4);
}

// %hn
test("%hn (ASCII)")
	disabled;
{
	short int written;
	op_sprintf(tmp, "%hntest", &written);
	verify_string(tmp, "test");
	verify(written == 0);

	op_sprintf(tmp, "test%hn", &written);
	verify_string(tmp, "test");
	verify(written == 4);
}

test("%hn (uni)")
	disabled;
{
	short int written;
	uni_sprintf(uni_tmp, UNI_L("%hntest"), &written);
	verify_string(uni_tmp, UNI_L("test"));
	verify(written == 0);

	uni_sprintf(uni_tmp, UNI_L("test%hn"), &written);
	verify_string(uni_tmp, UNI_L("test"));
	verify(written == 4);
}

// %ln
test("%ln (ASCII)")
	disabled;
{
	long int written;
	op_sprintf(tmp, "%lntest", &written);
	verify_string(tmp, "test");
	verify(written == 0);

	op_sprintf(tmp, "test%ln", &written);
	verify_string(tmp, "test");
	verify(written == 4);
}

test("%ln (uni)")
	disabled;
{
	long int written;
	uni_sprintf(uni_tmp, UNI_L("%lntest"), &written);
	verify_string(uni_tmp, UNI_L("test"));
	verify(written == 0);

	uni_sprintf(uni_tmp, UNI_L("test%ln"), &written);
	verify_string(uni_tmp, UNI_L("test"));
	verify(written == 4);
}

test("%lln (ASCII)")
	disabled;
{
	long long int writtenl = -1;
	op_sprintf(tmp, "test%lln", &writtenl);
	verify_string(tmp, "test");
	verify(writtenl == 4);
}

// -- Length modifiers ---------------------------------------------------

// %hhd
test("%hhd (ASCII)")
{
	op_sprintf(tmp, "%hhd", 0);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%hhd", 42);
	verify_string(tmp, "42");

	op_sprintf(tmp, "%hhd", 32767);
	verify_string(tmp, "-1");
}

test("%hhd (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%hhd"), 0);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%hhd"), 42);
	verify_string(uni_tmp, UNI_L("42"));

	uni_sprintf(uni_tmp, UNI_L("%hhd"), 32767);
	verify_string(uni_tmp, UNI_L("-1"));
}

// %hd
test("%hd (ASCII)")
{
	op_sprintf(tmp, "%hd", 0);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%hd", 42);
	verify_string(tmp, "42");

	op_sprintf(tmp, "%hd", 32767);
	verify_string(tmp, "32767");

	op_sprintf(tmp, "%hd", -32768);
	verify_string(tmp, "-32768");
}

test("%hd (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%hd"), 0);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%hd"), 42);
	verify_string(uni_tmp, UNI_L("42"));

	uni_sprintf(uni_tmp, UNI_L("%hd"), 32767);
	verify_string(uni_tmp, UNI_L("32767"));

	uni_sprintf(uni_tmp, UNI_L("%hd"), -32768);
	verify_string(uni_tmp, UNI_L("-32768"));
}

// %ld
test("%ld (ASCII)")
{
	op_sprintf(tmp, "%ld", 0L);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%ld", 42L);
	verify_string(tmp, "42");

	op_sprintf(tmp, "%ld", 2147483647L);
	verify_string(tmp, "2147483647");

	op_sprintf(tmp, "%ld", long(-2147483647 - 1));
	verify_string(tmp, "-2147483648");

#if LONG_MAX == 9223372036854775807L
	op_sprintf(tmp, "%ld", 9223372036854775807L);
	verify_string(tmp, "9223372036854775807");

	op_sprintf(tmp, "%ld", (-9223372036854775807L - 1));
	verify_string(tmp, "-9223372036854775808");
#endif
}

test("%ld (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%ld"), 0L);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%ld"), 42L);
	verify_string(uni_tmp, UNI_L("42"));

	uni_sprintf(uni_tmp, UNI_L("%ld"), 2147483647L);
	verify_string(uni_tmp, UNI_L("2147483647"));

	uni_sprintf(uni_tmp, UNI_L("%ld"), long(-2147483647 - 1));
	verify_string(uni_tmp, UNI_L("-2147483648"));

#if LONG_MAX == 9223372036854775807L
	uni_sprintf(uni_tmp, UNI_L("%ld"), 9223372036854775807L);
	verify_string(uni_tmp, UNI_L("9223372036854775807"));

	uni_sprintf(uni_tmp, UNI_L("%ld"), long(-9223372036854775807L - 1));
	verify_string(uni_tmp, UNI_L("-9223372036854775808"));
#endif
}

// %lld
test("%lld (UINT64) (ASCII)")
	require HAVE_INT64;
	require undefined HAVE_LONGLONG;
{
	op_sprintf(tmp, "%lld", OP_INT64(1));
	verify_string(tmp, "1");

	op_sprintf(tmp, "%lld", OP_INT64(100000));
	verify_string(tmp, "100000");

	op_sprintf(tmp, "%lld", OP_INT64(9876543210));
	verify_string(tmp, "9876543210");
}

test("%lld (INT64) (uni)")
	require HAVE_INT64;
	require undefined HAVE_LONGLONG;
{
	uni_sprintf(uni_tmp, UNI_L("%lld"), OP_INT64(1));
	verify_string(uni_tmp, UNI_L("1"));

	uni_sprintf(uni_tmp, UNI_L("%lld"), OP_INT64(100000));
	verify_string(uni_tmp, UNI_L("100000"));

	uni_sprintf(uni_tmp, UNI_L("%lld"), OP_INT64(9876543210));
	verify_string(uni_tmp, UNI_L("9876543210"));
}

test("%lld (long long) (ASCII)")
	require HAVE_LONGLONG;
{
	op_sprintf(tmp, "%lld", 1LL);
	verify_string(tmp, "1");

	op_sprintf(tmp, "%lld", 100000LL);
	verify_string(tmp, "100000");

	op_sprintf(tmp, "%lld", 9876543210LL);
	verify_string(tmp, "9876543210");
}

test("%lld (long long) (uni)")
	require HAVE_LONGLONG;
{
	uni_sprintf(uni_tmp, UNI_L("%lld"), 1LL);
	verify_string(uni_tmp, UNI_L("1"));

	uni_sprintf(uni_tmp, UNI_L("%lld"), 100000LL);
	verify_string(uni_tmp, UNI_L("100000"));

	uni_sprintf(uni_tmp, UNI_L("%lld"), 9876543210LL);
	verify_string(uni_tmp, UNI_L("9876543210"));
}

// %hhu
test("%hhu (ASCII)")
{
	op_sprintf(tmp, "%hhu", 0);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%hhu", 42);
	verify_string(tmp, "42");

	op_sprintf(tmp, "%hhu", 32767);
	verify_string(tmp, "255");
}

test("%hhu (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%hhu"), 0);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%hhu"), 42);
	verify_string(uni_tmp, UNI_L("42"));

	uni_sprintf(uni_tmp, UNI_L("%hhu"), 32767);
	verify_string(uni_tmp, UNI_L("255"));

	uni_sprintf(uni_tmp, UNI_L("%hhu"), 65535);
	verify_string(uni_tmp, UNI_L("255"));
}

// %hu
test("%hu (ASCII)")
{
	op_sprintf(tmp, "%hu", 0);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%hu", 42);
	verify_string(tmp, "42");

	op_sprintf(tmp, "%hu", 32767);
	verify_string(tmp, "32767");

	op_sprintf(tmp, "%hu", 65535);
	verify_string(tmp, "65535");
}

test("%hu (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%hu"), 0);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%hu"), 42);
	verify_string(uni_tmp, UNI_L("42"));

	uni_sprintf(uni_tmp, UNI_L("%hu"), 32767);
	verify_string(uni_tmp, UNI_L("32767"));

	uni_sprintf(uni_tmp, UNI_L("%hu"), 65535);
	verify_string(uni_tmp, UNI_L("65535"));
}

// %lu
test("%lu (ASCII)")
{
	op_sprintf(tmp, "%lu", 0UL);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%lu", 42UL);
	verify_string(tmp, "42");

	op_sprintf(tmp, "%lu", 2147483647UL);
	verify_string(tmp, "2147483647");

	op_sprintf(tmp, "%lu", 4294967295UL);
	verify_string(tmp, "4294967295");

#if ULONG_MAX == 18446744073709551615UL
	op_sprintf(tmp, "%lu", 9223372036854775807UL);
	verify_string(tmp, "9223372036854775807");

	op_sprintf(tmp, "%lu", 18446744073709551615UL);
	verify_string(tmp, "18446744073709551615");
#endif
}

test("%lu (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%lu"), 0UL);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%lu"), 42UL);
	verify_string(uni_tmp, UNI_L("42"));

	uni_sprintf(uni_tmp, UNI_L("%lu"), 2147483647UL);
	verify_string(uni_tmp, UNI_L("2147483647"));

	uni_sprintf(uni_tmp, UNI_L("%lu"), 4294967295UL);
	verify_string(uni_tmp, UNI_L("4294967295"));

#if ULONG_MAX == 18446744073709551615UL
	uni_sprintf(uni_tmp, UNI_L("%lu"), 9223372036854775807UL);
	verify_string(uni_tmp, UNI_L("9223372036854775807"));

	uni_sprintf(uni_tmp, UNI_L("%lu"), 18446744073709551615UL);
	verify_string(uni_tmp, UNI_L("18446744073709551615"));
#endif
}

// %llu
test("%llu (UINT64) (ASCII)")
	require HAVE_UINT64;
	require undefined HAVE_LONGLONG;
{
	op_sprintf(tmp, "%llu", OP_UINT64(1));
	verify_string(tmp, "1");

	op_sprintf(tmp, "%llu", OP_UINT64(100000));
	verify_string(tmp, "100000");

	op_sprintf(tmp, "%llu", OP_UINT64(9876543210));
	verify_string(tmp, "9876543210");
}

test("%llu (UINT64) (uni)")
	require HAVE_UINT64;
	require undefined HAVE_LONGLONG;
{
	uni_sprintf(uni_tmp, UNI_L("%llu"), OP_UINT64(1));
	verify_string(uni_tmp, UNI_L("1"));

	uni_sprintf(uni_tmp, UNI_L("%llu"), OP_UINT64(100000));
	verify_string(uni_tmp, UNI_L("100000"));

	uni_sprintf(uni_tmp, UNI_L("%llu"), OP_UINT64(9876543210));
	verify_string(uni_tmp, UNI_L("9876543210"));
}

test("%llu (long long) (ASCII)")
	require HAVE_LONGLONG;
{
	op_sprintf(tmp, "%llu", 1ULL);
	verify_string(tmp, "1");

	op_sprintf(tmp, "%llu", 100000ULL);
	verify_string(tmp, "100000");

	op_sprintf(tmp, "%llu", 9876543210ULL);
	verify_string(tmp, "9876543210");
}

test("%llu (long long) (uni)")
	require HAVE_LONGLONG;
{
	uni_sprintf(uni_tmp, UNI_L("%llu"), 1ULL);
	verify_string(uni_tmp, UNI_L("1"));

	uni_sprintf(uni_tmp, UNI_L("%llu"), 100000ULL);
	verify_string(uni_tmp, UNI_L("100000"));

	uni_sprintf(uni_tmp, UNI_L("%llu"), 9876543210ULL);
	verify_string(uni_tmp, UNI_L("9876543210"));
}

// %Lf
test("%Lf (ASCII)")
{
	op_sprintf(tmp, "%Lf", (long double) 0);
	verify_string(tmp, "0.000000");

	op_sprintf(tmp, "%Lf", (long double) 10.0/3);
	verify_string(tmp, "3.333333");

	op_sprintf(tmp, "%Lf", (long double) 1000000.0);
	verify_string(tmp, "1000000.000000");
}

test("%Lf (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%Lf"), (long double) 0);
	verify_string(uni_tmp, UNI_L("0.000000"));

	uni_sprintf(uni_tmp, UNI_L("%Lf"), (long double) 10.0/3);
	verify_string(uni_tmp, UNI_L("3.333333"));

	uni_sprintf(uni_tmp, UNI_L("%Lf"), (long double) 1000000.0);
	verify_string(uni_tmp, UNI_L("1000000.000000"));
}

// -- Flag characters ----------------------------------------------------

// %#o (prefix 0)
test("%#o (ASCII)")
{
	op_sprintf(tmp, "%#o", 0U);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%#o", 42U);
	verify_string(tmp, "052");

	op_sprintf(tmp, "%#o", 2147483647U);
	verify_string(tmp, "017777777777");

	op_sprintf(tmp, "%#o", 4294967295U);
	verify_string(tmp, "037777777777");
}

test("%#o (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%#o"), 0U);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%#o"), 42U);
	verify_string(uni_tmp, UNI_L("052"));

	uni_sprintf(uni_tmp, UNI_L("%#o"), 2147483647U);
	verify_string(uni_tmp, UNI_L("017777777777"));

	uni_sprintf(uni_tmp, UNI_L("%#o"), 4294967295U);
	verify_string(uni_tmp, UNI_L("037777777777"));
}

// %#x (prefix 0x)
test("%#x (ASCII)")
{
	op_sprintf(tmp, "%#x", 0U);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%#x", 42U);
	verify_string(tmp, "0x2a");

	op_sprintf(tmp, "%#x", 2147483647U);
	verify_string(tmp, "0x7fffffff");

	op_sprintf(tmp, "%#x", 4294967295U);
	verify_string(tmp, "0xffffffff");
}

test("%#x (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%#x"), 0U);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%#x"), 42U);
	verify_string(uni_tmp, UNI_L("0x2a"));

	uni_sprintf(uni_tmp, UNI_L("%#x"), 2147483647U);
	verify_string(uni_tmp, UNI_L("0x7fffffff"));

	uni_sprintf(uni_tmp, UNI_L("%#x"), 4294967295U);
	verify_string(uni_tmp, UNI_L("0xffffffff"));
}

// %#X (prefix 0X)
test("%#X (ASCII)")
{
	op_sprintf(tmp, "%#X", 0U);
	verify_string(tmp, "0");

	op_sprintf(tmp, "%#X", 42U);
	verify_string(tmp, "0X2A");

	op_sprintf(tmp, "%#X", 2147483647U);
	verify_string(tmp, "0X7FFFFFFF");

	op_sprintf(tmp, "%#X", 4294967295U);
	verify_string(tmp, "0XFFFFFFFF");
}

test("%#X (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%#X"), 0U);
	verify_string(uni_tmp, UNI_L("0"));

	uni_sprintf(uni_tmp, UNI_L("%#X"), 42U);
	verify_string(uni_tmp, UNI_L("0X2A"));

	uni_sprintf(uni_tmp, UNI_L("%#X"), 2147483647U);
	verify_string(uni_tmp, UNI_L("0X7FFFFFFF"));

	uni_sprintf(uni_tmp, UNI_L("%#X"), 4294967295U);
	verify_string(uni_tmp, UNI_L("0XFFFFFFFF"));
}

// %0... tested below

// -- Field width --------------------------------------------------------

// %10d
test("%10d (ASCII)")
{
	op_sprintf(tmp, "%10d", 0);
	verify_string(tmp, "         0");

	op_sprintf(tmp, "%10d", 42);
	verify_string(tmp, "        42");

	op_sprintf(tmp, "%10d", 2147483647);
	verify_string(tmp, "2147483647");

	op_sprintf(tmp, "%10d", (-2147483647 - 1));
	verify_string(tmp, "-2147483648");
}

test("%10d (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%10d"), 0);
	verify_string(uni_tmp, UNI_L("         0"));

	uni_sprintf(uni_tmp, UNI_L("%10d"), 42);
	verify_string(uni_tmp, UNI_L("        42"));

	uni_sprintf(uni_tmp, UNI_L("%10d"), 2147483647);
	verify_string(uni_tmp, UNI_L("2147483647"));

	uni_sprintf(uni_tmp, UNI_L("%10d"), (-2147483647 - 1));
	verify_string(uni_tmp, UNI_L("-2147483648"));
}

// %010d
test("%010d (ASCII)")
{
	op_sprintf(tmp, "%010d", 0);
	verify_string(tmp, "0000000000");

	op_sprintf(tmp, "%010d", 42);
	verify_string(tmp, "0000000042");

	op_sprintf(tmp, "%010d", 2147483647);
	verify_string(tmp, "2147483647");

	op_sprintf(tmp, "%010d", (-2147483647 - 1));
	verify_string(tmp, "-2147483648");
}

test("%010d (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%010d"), 0);
	verify_string(uni_tmp, UNI_L("0000000000"));

	uni_sprintf(uni_tmp, UNI_L("%010d"), 42);
	verify_string(uni_tmp, UNI_L("0000000042"));

	uni_sprintf(uni_tmp, UNI_L("%010d"), 2147483647);
	verify_string(uni_tmp, UNI_L("2147483647"));

	uni_sprintf(uni_tmp, UNI_L("%010d"), (-2147483647 - 1));
	verify_string(uni_tmp, UNI_L("-2147483648"));
}

// %-10d
test("%-10d (ASCII)")
{
	op_sprintf(tmp, "%-10d", 0);
	verify_string(tmp, "0         ");

	op_sprintf(tmp, "%-10d", 42);
	verify_string(tmp, "42        ");

	op_sprintf(tmp, "%-10d", 2147483647);
	verify_string(tmp, "2147483647");

	op_sprintf(tmp, "%-10d", (-2147483647 - 1));
	verify_string(tmp, "-2147483648");
}

test("%-10d (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%-10d"), 0);
	verify_string(uni_tmp, UNI_L("0         "));

	uni_sprintf(uni_tmp, UNI_L("%-10d"), 42);
	verify_string(uni_tmp, UNI_L("42        "));

	uni_sprintf(uni_tmp, UNI_L("%-10d"), 2147483647);
	verify_string(uni_tmp, UNI_L("2147483647"));

	uni_sprintf(uni_tmp, UNI_L("%-10d"), (-2147483647 - 1));
	verify_string(uni_tmp, UNI_L("-2147483648"));
}

// % 10d
test("% 10d (ASCII)")
{
	op_sprintf(tmp, "% 10d", 0);
	verify_string(tmp, "         0");

	op_sprintf(tmp, "% 10d", 42);
	verify_string(tmp, "        42");

	op_sprintf(tmp, "% 10d", 2147483647);
	verify_string(tmp, " 2147483647");

	op_sprintf(tmp, "% 10d", (-2147483647 - 1));
	verify_string(tmp, "-2147483648");
}

test("% 10d (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("% 10d"), 0);
	verify_string(uni_tmp, UNI_L("         0"));

	uni_sprintf(uni_tmp, UNI_L("% 10d"), 42);
	verify_string(uni_tmp, UNI_L("        42"));

	uni_sprintf(uni_tmp, UNI_L("% 10d"), 2147483647);
	verify_string(uni_tmp, UNI_L(" 2147483647"));

	uni_sprintf(uni_tmp, UNI_L("% 10d"), (-2147483647 - 1));
	verify_string(uni_tmp, UNI_L("-2147483648"));
}

// %+10d
test("%+10d (ASCII)")
{
	op_sprintf(tmp, "%+10d", 0);
	verify_string(tmp, "        +0");

	op_sprintf(tmp, "%+10d", 42);
	verify_string(tmp, "       +42");

	op_sprintf(tmp, "%+10d", 2147483647);
	verify_string(tmp, "+2147483647");

	op_sprintf(tmp, "%+10d", (-2147483647 - 1));
	verify_string(tmp, "-2147483648");
}

test("%+10d (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%+10d"), 0);
	verify_string(uni_tmp, UNI_L("        +0"));

	uni_sprintf(uni_tmp, UNI_L("%+10d"), 42);
	verify_string(uni_tmp, UNI_L("       +42"));

	uni_sprintf(uni_tmp, UNI_L("%+10d"), 2147483647);
	verify_string(uni_tmp, UNI_L("+2147483647"));

	uni_sprintf(uni_tmp, UNI_L("%+10d"), (-2147483647 - 1));
	verify_string(uni_tmp, UNI_L("-2147483648"));
}

// -- Precision ----------------------------------------------------------

// %.2f
test("%.2f (ASCII)")
	leakcheck;
{
	op_sprintf(tmp, "%.2f", 0.0);
	verify_string(tmp, "0.00");

	op_sprintf(tmp, "%.2f", 10.0/3);
	verify_string(tmp, "3.33");

	op_sprintf(tmp, "%.2f", 1000000.0);
	verify_string(tmp, "1000000.00");
}

test("%.2f (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%.2f"), 0.0);
	verify_string(uni_tmp, UNI_L("0.00"));

	uni_sprintf(uni_tmp, UNI_L("%.2f"), 10.0/3);
	verify_string(uni_tmp, UNI_L("3.33"));

	uni_sprintf(uni_tmp, UNI_L("%.2f"), 1000000.0);
	verify_string(uni_tmp, UNI_L("1000000.00"));
}

// %5.2f
test("%5.2f (ASCII)")
	leakcheck;
{
	op_sprintf(tmp, "%5.2f", 0.0);
	verify_string(tmp, " 0.00");

	op_sprintf(tmp, "%5.2f", 10.0/3);
	verify_string(tmp, " 3.33");

	op_sprintf(tmp, "%5.2f", 1000000.0);
	verify_string(tmp, "1000000.00");
}

test("%5.2f (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%5.2f"), 0.0);
	verify_string(uni_tmp, UNI_L(" 0.00"));

	uni_sprintf(uni_tmp, UNI_L("%5.2f"), 10.0/3);
	verify_string(uni_tmp, UNI_L(" 3.33"));

	uni_sprintf(uni_tmp, UNI_L("%5.2f"), 1000000.0);
	verify_string(uni_tmp, UNI_L("1000000.00"));
}

// %.10s
test("%.10s (ASCII)")
{
	op_sprintf(tmp, "%.10s", "abcd");
	verify_string(tmp, "abcd");

	op_sprintf(tmp, "%.10s", "abcdefghijklmn");
	verify_string(tmp, "abcdefghij");
}

test("%.10s (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%.10s"), UNI_L("abcd"));
	verify_string(uni_tmp, UNI_L("abcd"));

	uni_sprintf(uni_tmp, UNI_L("%.10s"), UNI_L("abcdefghijklmn"));
	verify_string(uni_tmp, UNI_L("abcdefghij"));
} /* xxx */

// %10.10s
test("%10.10s (ASCII)")
{
	op_sprintf(tmp, "%10.10s", "abcd");
	verify_string(tmp, "      abcd");

	op_sprintf(tmp, "%.10s", "abcdefghijklmn");
	verify_string(tmp, "abcdefghij");
}

test("%10.10s (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%10.10s"), UNI_L("abcd"));
	verify_string(uni_tmp, UNI_L("      abcd"));

	uni_sprintf(uni_tmp, UNI_L("%.10s"), UNI_L("abcdefghijklmn"));
	verify_string(uni_tmp, UNI_L("abcdefghij"));
}

// %-10.10s
test("%-10.10s (ASCII)")
{
	op_sprintf(tmp, "%-10.10s", "abcd");
	verify_string(tmp, "abcd      ");

	op_sprintf(tmp, "%-10.10s", "abcdefghijklmn");
	verify_string(tmp, "abcdefghij");
}

test("%-10.10s (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%-10.10s"), UNI_L("abcd"));
	verify_string(uni_tmp, UNI_L("abcd      "));

	uni_sprintf(uni_tmp, UNI_L("%-10.10s"), UNI_L("abcdefghijklmn"));
	verify_string(uni_tmp, UNI_L("abcdefghij"));
}

// -- Combined tests -----------------------------------------------------

test("Combined tests (ASCII)")
{
	op_sprintf(tmp, "%.10s %5d %c", "gurka", 42, '!');
	verify_string(tmp, "gurka    42 !");

	op_sprintf(tmp, "%.10s %5d %c", "gurksallad", 4711, '\\');
	verify_string(tmp, "gurksallad  4711 \\");

	op_sprintf(tmp, "%.10s %5d %c", "gurksalladmix", -17, '@');
	verify_string(tmp, "gurksallad   -17 @");

	op_sprintf(tmp, "%0.0f", 10.12);
	verify_string(tmp, "10");

	op_sprintf(tmp, "%0.2f", 10.12);
	verify_string(tmp, "10.12");

	op_sprintf(tmp, "%0.3f", 10.12);
	verify_string(tmp, "10.120");
}

test("Combined tests (uni)")
{
	uni_sprintf(uni_tmp, UNI_L("%.10s %5d %c"), UNI_L("gurka"), 42, '!');
	verify_string(uni_tmp, UNI_L("gurka    42 !"));

	uni_sprintf(uni_tmp, UNI_L("%.10s %5d %c"), UNI_L("gurksallad"), 4711, '\\');
	verify_string(uni_tmp, UNI_L("gurksallad  4711 \\"));

	uni_sprintf(uni_tmp, UNI_L("%.10s %5d %c"), UNI_L("gurksalladmix"), -17, '@');
	verify_string(uni_tmp, UNI_L("gurksallad   -17 @"));

	uni_sprintf(uni_tmp, UNI_L("%0.0f"), 10.12);
	verify_string(uni_tmp, UNI_L("10"));

	uni_sprintf(uni_tmp, UNI_L("%0.2f"), 10.12);
	verify_string(uni_tmp, UNI_L("10.12"));

	uni_sprintf(uni_tmp, UNI_L("%0.3f"), 10.12);
	verify_string(uni_tmp, UNI_L("10.120"));
}

// -- Return value -------------------------------------------------------

test("Return value from op_sprintf()")
{
	int len = op_sprintf(tmp, "%s", "testing");
	verify(len == 7);

	len = op_sprintf(tmp, "%.4s", "testing");
	verify(len == 4);

	len = op_sprintf(tmp, "%.4s", "testing");
	verify(len == 4);
}

test("Return values from uni_sprintf()")
{
	int len = uni_sprintf(uni_tmp, UNI_L("%s"), UNI_L("testing"));
	verify(len == 7);

	len = uni_sprintf(uni_tmp, UNI_L("%.4s"), UNI_L("testing"));
	verify(len == 4);

	len = uni_sprintf(uni_tmp, UNI_L("%.4s"), UNI_L("testing"));
	verify(len == 4);
}

// -- op_snprintf -------------------------------------------------------

test("op_snprintf - simple")
{
	int retval = op_snprintf(tmp, 10, "%s", "testing");
	verify(retval == 7);
	verify_string(tmp, "testing");
}

test("uni_snprintf - simple")
{
	int retval = uni_snprintf(uni_tmp, 10, UNI_L("%s"), UNI_L("testing"));
	verify(retval == 7);
	verify_string(uni_tmp, UNI_L("testing"));
}

test("{op,uni}_snprintf - C99 return value")
{
    int retval;
    for (int i = 0; i < 10; ++ i)
    {
        retval = op_snprintf(tmp, i, "%s", "testing");
    	verify(retval == 7);

        retval = uni_snprintf(uni_tmp, i, UNI_L("%s"), UNI_L("testing"));
    	verify(retval == 7);
    }
}

test("op_snprintf - C99 termination")
{
    tmp[3] = '_';
    tmp[4] = 0;
    op_snprintf(tmp, 4, "%s", "testing");
    verify(tmp[3] == '\0');
	verify_string(tmp, "tes");
}

test("uni_snprintf - C99 termination")
{
    uni_tmp[3] = '_';
    uni_tmp[4] = 0;
    uni_snprintf(uni_tmp, 4, UNI_L("%s"), UNI_L("testing"));
    verify(uni_tmp[3] == '\0');
	verify_string(uni_tmp, UNI_L("tes"));
}

// -- op_vsprintf -------------------------------------------------------

subtest op_vsprintf_test(char *buffer, const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
	op_vsprintf(buffer, format, ap);
	va_end(ap);
}

subtest uni_vsprintf_test(uni_char *buffer, const uni_char *format, ...)
{
	va_list ap;
	va_start(ap, format);
	uni_vsprintf(buffer, format, ap);
	va_end(ap);
}

test("op_vsprintf")
{
	verify(op_vsprintf_test(tmp, "%s%d", "Hello", 42));
	verify_string(tmp, "Hello42");
}

test("uni_vsprintf")
{
	verify(uni_vsprintf_test(uni_tmp, UNI_L("%s%d"), UNI_L("Hello"), 42));
	verify_string(tmp, UNI_L("Hello42"));
}

// -- op_vsnprintf ------------------------------------------------------

subtest op_vsnprintf_test(char *buffer, size_t len, const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
	op_vsnprintf(buffer, len, format, ap);
	va_end(ap);
}

subtest uni_vsnprintf_test(uni_char *buffer, size_t len, const uni_char *format, ...)
{
	va_list ap;
	va_start(ap, format);
	uni_vsnprintf(buffer, len, format, ap);
	va_end(ap);
}

test("op_vsnprintf")
{
	verify(op_vsnprintf_test(tmp, 4, "%s%d", "Hello", 42));
	verify_string(tmp, "Hel");
}

test("uni_vsnprintf")
{
	verify(uni_vsnprintf_test(uni_tmp, 4, UNI_L("%s%d"), UNI_L("Hello"), 42));
	verify_string(tmp, UNI_L("Hel"));
}

// -- pointers ----------------------------------------------------------

test("Pointers in printf and scanf")
{
	char *p1 = static_cast<char *>(op_malloc(32)), p2[32];
	char *test1, *test2;
	int test3;

	/* ASCII */
	op_sprintf(tmp, "%p %p %d", static_cast<void *>(p1), static_cast<void *>(p2), 42);
	op_sscanf(tmp, "%p %p %d", &test1, &test2, &test3);
	verify(p1 == test1);
	verify(p2 == test2);

	/* UTF-16 */
	uni_sprintf(uni_tmp, UNI_L("%p %p"), static_cast<void *>(p1), static_cast<void *>(p2));
	uni_sscanf(uni_tmp, UNI_L("%p %p %d"), &test1, &test2, &test3);
	verify(p1 == test1);
	verify(p2 == test2);

}
finally
{
	op_free(p1);
}

// -- IEEE "round to even" --------------------------------------------------------

table rounding(const uni_char*, double, const uni_char*, const uni_char*)
{
	// %e
	{ UNI_L("%.0e"), -3.5, UNI_L("-4e+00"), UNI_L("-4e+000") },
	{ UNI_L("%.0e"), -2.5, UNI_L("-2e+00"), UNI_L("-2e+000") },
	{ UNI_L("%.0e"), -1.5, UNI_L("-2e+00"), UNI_L("-2e+000") },
	{ UNI_L("%.0e"), -0.5, UNI_L("-5e-01"), UNI_L("-5e-001") },
	{ UNI_L("%.0e"), 0.25, UNI_L("2e-01"), UNI_L("2e-001") },
	{ UNI_L("%.0e"), 0.5, UNI_L("5e-01"), UNI_L("5e-001") },
	{ UNI_L("%.0e"), 1.5, UNI_L("2e+00"), UNI_L("2e+000") },
	{ UNI_L("%.0e"), 2.5, UNI_L("2e+00"), UNI_L("2e+000") },
	{ UNI_L("%.0e"), 3.5, UNI_L("4e+00"), UNI_L("4e+000") },

	{ UNI_L("%1.0e"), 15, UNI_L("2e+01"), UNI_L("2e+001") },
	{ UNI_L("%1.0e"), 25, UNI_L("2e+01"), UNI_L("2e+001") },
	// %f
	{ UNI_L("%.0f"), -3.5, UNI_L("-4"), UNI_L("-4") },
	{ UNI_L("%.0f"), -2.5, UNI_L("-2"), UNI_L("-2") },
	{ UNI_L("%.0f"), -1.5, UNI_L("-2"), UNI_L("-2") },
	{ UNI_L("%.0f"), -0.5, UNI_L("-0"), UNI_L("-0") },
	{ UNI_L("%.1f"), 0.25, UNI_L("0.2"), UNI_L("0.2") },
	{ UNI_L("%.0f"), 0.5, UNI_L("0"), UNI_L("0") },
	{ UNI_L("%.0f"), 1.5, UNI_L("2"), UNI_L("2") },
	{ UNI_L("%.0f"), 2.5, UNI_L("2"), UNI_L("2") },
	{ UNI_L("%.0f"), 3.5, UNI_L("4"), UNI_L("4") },
	{ UNI_L("%.3f"), 0.6666, UNI_L("0.667"), UNI_L("0.667") },
	{ UNI_L("%.3f"), 0.666,  UNI_L("0.666"), UNI_L("0.666") },
	{ UNI_L("%.3f"), 1.6666, UNI_L("1.667"), UNI_L("1.667") },
}

test("IEEE 754 - 'round to even'")
{
	iterate (format, value, expected1, expected2) from rounding
	{
		char* char_format = uni_down_strdup(format);
		char* char_expected1 = uni_down_strdup(expected1);
		char* char_expected2 = uni_down_strdup(expected2);
		op_sprintf(tmp, char_format, value);
		BOOL result = op_strcmp(tmp, char_expected1) == 0 || op_strcmp(tmp, char_expected2) == 0;
		op_free(char_format);
		op_free(char_expected1);
		op_free(char_expected2);
		verify(result);

		uni_sprintf(uni_tmp, format, value);
		verify(uni_strcmp(uni_tmp, expected1) == 0 || uni_strcmp(uni_tmp, expected2) == 0);
	}
}

// -- helpers -----------------------------------------------------------

table format_tests(double, char, const char *)
{
	{ 0.0, 'f', "0.000" },
	{ 0.0, 'e', "0.000e+00" },
	{ 0.0, 'E', "0.000E+00" },
	{ 0.0, 'g', "0" },
	{ 0.0, 'G', "0" },

	{ 10.0/3, 'f', "3.333" },
	{ 10.0/3, 'e', "3.333e+00" },
	{ 10.0/3, 'E', "3.333E+00" },
	{ 10.0/3, 'g', "3.33" },
	{ 10.0/3, 'G', "3.33" },

	{ 1000000.0, 'f', "1000000.000" },
	{ 1000000.0, 'e', "1.000e+06" },
	{ 1000000.0, 'E', "1.000E+06" },
	{ 1000000.0, 'g', "1e+06" },
	{ 1000000.0, 'G', "1E+06" },

	{ 1100000.0, 'f', "1100000.000" },
	{ 1100000.0, 'e', "1.100e+06" },
	{ 1100000.0, 'E', "1.100E+06" },
	{ 1100000.0, 'g', "1.1e+06" },
	{ 1100000.0, 'G', "1.1E+06" },
}

test("OpDoubleFormat::PrintfFormat")
	require STDLIB_DTOA_CONVERSION;
{
	iterate (value, format, result) from format_tests
	{
		OpDoubleFormat::PrintfFormat(value, tmp, sizeof tmp, format, 3);
		verify_string(tmp, result);
	}
}
