/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2000-2012 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

/* Test the scanf functions of stdlib    -*- pike -*- */

group "stdlib.scanf";

language c++;

// -- Global variables ---------------------------------------------------

global
{
	int r, g, b;
	char s[256]; /* ARRAY OK 2009-08-12 molsson */
	uni_char u[256]; /* ARRAY OK 2009-08-12 molsson */

	char *input1, *input2, *input3, *input4, *input5, *input6,
	     *input7, *input8, *input9, *input10, *input11, *input12,
		 *input13, *input14, *input15, *input16, *input17, *input18,
		 *input19, *input20, *input21;

	uni_char *uinput1, *uinput2, *uinput3, *uinput4, *uinput5, *uinput6,
	         *uinput7, *uinput8, *uinput9, *uinput10, *uinput11, *uinput12,
			 *uinput13, *uinput14, *uinput15, *uinput16, *uinput17, *uinput18,
			 *uinput19, *uinput20, *uinput21;

	int op_vsscanf_test(char *buffer, const char *format, ...)
	{
		va_list ap;
		va_start(ap, format);
		int rv = op_vsscanf(buffer, format, ap);
		va_end(ap);
		return rv;
	}
}

// -- Global setup -------------------------------------------------------

setup
{
	/* Older(?) MSVCRT crashes on const data as sscanf input, at least
	   for the unicode versions, according to Peter.  Presumably this 
	   would not be an issue in any MT code, but for safety's sake we 
	   create new input strings here.  */

	input1 = op_strdup("gurksallad gurkburk 42 4711 karljohansgate");
	input2 = op_strdup("77 sergelstorg");
	input3 = op_strdup("011147");
	input4 = op_strdup("#a0a0a0");
	input5 = op_strdup("a0 a0 a0");
	input6 = op_strdup("160160160");
	input7 = op_strdup("abcdefghijklmnopqrstuvwxyz");
	input8 = op_strdup("fnurglor i pyjamas");
	input9 = op_strdup("[sektion] hejsan");
	input10= op_strdup("-14.3");
	input11= op_strdup("1128934633");
	input12= op_strdup("12-jan-2005 14:33:20");
	input13= op_strdup("12 --- -666 14:33:20");
	input14= op_strdup(" 12345");

#if LONG_MAX == 2147483647L
	input15 = op_strdup("2147483647 -3");
#elif LONG_MAX == 9223372036854775807L
	input15 = op_strdup("9223372036854775807 -3");
#else
# error "Not configured for your LONG_MAX"
#endif

#if ULONG_MAX == 4294967295UL
	input16 = op_strdup("4294967295 42");
#elif ULONG_MAX == 18446744073709551615UL
	input16 = op_strdup("18446744073709551615 42");
#else
# error "Not configured for your ULONG_MAX"
#endif

#ifdef HAVE_LONGLONG
# if LLONG_MAX == 9223372036854775807LL
	input17 = op_strdup("9223372036854775807");
# else
#  error "Not configured for your LLONG_MAX"
# endif
#elif defined HAVE_INT64
# if INT64_MAX == OP_INT64(9223372036854775807)
	input17 = op_strdup("9223372036854775807");
# else
#  error "Not configured for your INT64_MAX"
# endif
#endif

#ifdef HAVE_LONGLONG
# if ULLONG_MAX == 18446744073709551615ULL
	input18 = op_strdup("18446744073709551615");
# else
#  error "Not configured for your ULLONG_MAX"
# endif
#elif defined HAVE_UINT64
# if UINT64_MAX == OP_UINT64(18446744073709551615)
	input18 = op_strdup("18446744073709551615");
# else
#  error "Not configured for your UINT64_MAX"
# endif
#endif

#if SHRT_MAX == 32767
	input19 = op_strdup("32767 -3");
#else
# error "Not configured for your SHRT_MAX"
#endif

#if USHRT_MAX == 65535
	input20 = op_strdup("65535 42");
#else
# error "Not configured for your SHRT_MAX"
#endif

	input21 = op_strdup("127 255");

	uinput1 = uni_up_strdup(input1 );
	uinput2 = uni_up_strdup(input2 );
	uinput3 = uni_up_strdup(input3 );
	uinput4 = uni_up_strdup(input4 );
	uinput5 = uni_up_strdup(input5 );
	uinput6 = uni_up_strdup(input6 );
	uinput7 = uni_up_strdup(input7 );
	uinput8 = uni_up_strdup(input8 );
	uinput9 = uni_up_strdup(input9 );
	uinput10= uni_up_strdup(input10);
	uinput11= uni_up_strdup(input11);
	uinput12= uni_up_strdup(input12);
	uinput13= uni_up_strdup(input13);
	uinput14= uni_up_strdup(input14);
	uinput15= uni_up_strdup(input15);
	uinput16= uni_up_strdup(input16);
#if defined HAVE_LONGLONG || defined HAVE_INT64
	uinput17= uni_up_strdup(input17);
#endif
#if defined HAVE_LONGLONG || defined HAVE_UINT64
	uinput18= uni_up_strdup(input18);
#endif
	uinput19= uni_up_strdup(input19);
	uinput20= uni_up_strdup(input20);
	uinput21= uni_up_strdup(input21);
}

// -- Basic tests --------------------------------------------------------

test("Testing strings and decimal integers (ASCII)")
{
	char val1[15], val2[15], val3[15], val5[15]; int val4;
	verify(op_sscanf(input1, "%s %s %s %d %s", val1, val2, val3, &val4, val5) == 5);
	verify_string(val1, "gurksallad");
	verify_string(val2, "gurkburk");
	verify_string(val3, "42");
	verify(val4 == 4711);
	verify_string(val5, "karljohansgate");
}

test("Testing strings and decimal integers (uni)")
{
	uni_char val1[15], val2[15], val3[15], val5[15]; int val4;
	verify(uni_sscanf(uinput1, UNI_L("%s %s %s %d %s"), val1, val2, val3, &val4, val5) == 5);
	verify_string(val1, UNI_L("gurksallad"));
	verify_string(val2, UNI_L("gurkburk"));
	verify_string(val3, UNI_L("42"));
	verify(val4 == 4711);
	verify_string(val5, UNI_L("karljohansgate"));
}

test("Testing char and strings (ASCII)")
{
	char val1[15], val2[15];
	verify(op_sscanf(input2, "%2c %s", val1, val2) == 2);
	val1[2] = 0;
	verify_string(val1, "77");
	verify_string(val2, "sergelstorg");
}

test("Testing char and strings (uni)")
{
	uni_char val1[15], val2[15];
	verify(uni_sscanf(uinput2, UNI_L("%2c %s"), val1, val2) == 2);
	val1[2] = 0;
	verify_string(val1, UNI_L("77"));
	verify_string(val2, UNI_L("sergelstorg"));
}

test("Testing octal input (ASCII)")
{
	int val4;
	verify(op_sscanf(input3, "%o", &val4) == 1);
	verify(val4 == 4711);
}

test("Testing octal input (uni)")
{
	int val4;
	verify(uni_sscanf(uinput3, UNI_L("%o"), &val4) == 1);
	verify(val4 == 4711);
}

test("Short short integer (ASCII)")
{
	short int val1 = 0;
	verify(op_sscanf(input21, "%hhd", &val1));
	verify(val1 == 127);
}

test("Short short integer (uni)")
{
	char val1 = 0;
	verify(uni_sscanf(uinput21, UNI_L("%hhd"), &val1));
	verify(val1 == 127);
}

test("Short short unsigned integer (ASCII)")
{
	unsigned char val1 = 0, val2 = 0;
	verify(op_sscanf(input21, "%hhu %hhu", &val1, &val2));
	verify(val1 == 127);
	verify(val2 == 255);
}

test("Short short unsigned integer (uni)")
{
	unsigned char val1 = 0, val2 = 0;
	verify(uni_sscanf(uinput21, UNI_L("%hhu %hhu"), &val1, &val2));
	verify(val1 == 127);
	verify(val2 == 255);
}

test("Short integer (ASCII)")
{
	short int val1 = 0, val2 = 0;
	verify(op_sscanf(input19, "%hd %hd", &val1, &val2));
	verify(val1 == SHRT_MAX);
	verify(val2 == -3);
}

test("Short integer (uni)")
{
	short int val1 = 0, val2 = 0;
	verify(uni_sscanf(uinput19, UNI_L("%hd %hd"), &val1, &val2));
	verify(val1 == SHRT_MAX);
	verify(val2 == -3);
}

test("Short unsigned integer (ASCII)")
{
	unsigned short int val1 = 0, val2 = 0;
	verify(op_sscanf(input20, "%hu %hu", &val1, &val2));
	verify(val1 == USHRT_MAX);
	verify(val2 == 42);
}

test("Short unsigned integer (uni)")
{
	unsigned short int val1 = 0, val2 = 0;
	verify(uni_sscanf(uinput20, UNI_L("%hu %hu"), &val1, &val2));
	verify(val1 == USHRT_MAX);
	verify(val2 == 42);
}

test("Long integer (ASCII)")
{
	long int val1 = 0, val2 = 0;
	verify(op_sscanf(input15, "%ld %ld", &val1, &val2));
	verify(val1 == LONG_MAX);
	verify(val2 == -3);
}

test("Long integer (uni)")
{
	long int val1 = 0, val2 = 0;
	verify(uni_sscanf(uinput15, UNI_L("%ld %ld"), &val1, &val2));
	verify(val1 == LONG_MAX);
	verify(val2 == -3);
}

test("Long unsigned integer (ASCII)")
{
	unsigned long int val1 = 0, val2 = 0;
	verify(op_sscanf(input16, "%lu %lu", &val1, &val2));
	verify(val1 == ULONG_MAX);
	verify(val2 == 42);
}

test("Long unsigned integer (uni)")
{
	unsigned long int val1 = 0, val2 = 0;
	verify(uni_sscanf(uinput16, UNI_L("%lu %lu"), &val1, &val2));
	verify(val1 == ULONG_MAX);
	verify(val2 == 42);
}

/* If the system has the "long long" type, scanf's %lld and %ulld will use
   that, so make sure we handle it properly. */
test("long long (ASCII)")
	require HAVE_LONGLONG;
{
	long long val1;
	verify(op_sscanf(input17, "%lld", &val1));
	verify(val1 == LLONG_MAX);
}

test("long long (uni)")
	require HAVE_LONGLONG;
{
	long long val1;
	verify(uni_sscanf(uinput17, UNI_L("%lld"), &val1));
	verify(val1 == LLONG_MAX);
}

test("unsigned long long (ASCII)")
	require HAVE_LONGLONG;
{
	unsigned long long val1;
	verify(op_sscanf(input18, "%llu", &val1));
	verify(val1 == ULLONG_MAX);
}

test("unsigned long long (uni)")
	require HAVE_LONGLONG;
{
	unsigned long long val1;
	verify(uni_sscanf(uinput18, UNI_L("%llu"), &val1));
	verify(val1 == ULLONG_MAX);
}

/* If the system does not have the "long long" type, but does have a
   64-bit integer, scanf's %lld and %ulld are expected to map to INT64
   and UINT64. */
test("INT64 (ASCII)")
	require HAVE_INT64;
	require undefined HAVE_LONGLONG;
{
	INT64 val1;
	verify(op_sscanf(input17, "%lld", &val1));
	verify(val1 == INT64_MAX);
}

test("INT64 (uni)")
	require HAVE_INT64;
	require undefined HAVE_LONGLONG;
{
	INT64 val1;
	verify(uni_sscanf(uinput17, UNI_L("%lld"), &val1));
	verify(val1 == INT64_MAX);
}

test("UINT64 (ASCII)")
	require HAVE_UINT64;
	require undefined HAVE_LONGLONG;
{
	UINT64 val1;
	verify(op_sscanf(input18, "%llu", &val1));
	verify(val1 == UINT64_MAX);
}

test("UINT64 (uni)")
	require HAVE_UINT64;
	require undefined HAVE_LONGLONG;
{
	UINT64 val1;
	verify(uni_sscanf(uinput18, UNI_L("%llu"), &val1));
	verify(val1 == UINT64_MAX);
}

test("Testing reading number of read characters (ASCII)")
{
	int val1 = 0;
	unsigned chars_read = 0;
	char val2[15];
	verify(op_sscanf(input2, "%d%n %s", &val1, &chars_read, val2) == 2);
	verify(chars_read == 2);
}

test("Testing reading number of read characters (uni)")
{
	int val1 = 0;
	unsigned chars_read = 0;
	uni_char val2[15];
	verify(uni_sscanf(uinput2, UNI_L("%d%n %s"), &val1, &chars_read, val2) == 2);
	verify(chars_read == 2);
}

// -- Advanced tests -----------------------------------------------------
// These have failed at least once in the history of uni_sscanf

test("Testing non-space delimited hex values (%02x) (ASCII)")
{
	verify(op_sscanf(input4, "#%02x%02x%02x", &r, &g, &b) == 3);
	verify(r == 0xa0);
	verify(g == 0xa0);
	verify(b == 0xa0);
}

test("Testing non-space delimited hex values (%02x) (uni)")
{
	verify(uni_sscanf(uinput4, UNI_L("#%02x%02x%02x"), &r, &g, &b) == 3);
	verify(r == 0xa0);
	verify(g == 0xa0);
	verify(b == 0xa0);
}

test("Testing space delimited hex values (%x) (ASCII)")
{
	verify(op_sscanf(input5, "%x %x %x", &r, &g, &b) == 3);
	verify(r == 0xa0);
	verify(g == 0xa0);
	verify(b == 0xa0);
}

test("Testing space delimited hex values (%x) (uni)")
{
	verify(uni_sscanf(uinput5, UNI_L("%x %x %x"), &r, &g, &b) == 3);
	verify(r == 0xa0);
	verify(g == 0xa0);
	verify(b == 0xa0);
}

test("Testing non-space delimited decimal values (%03u) (ASCII)")
{
	verify(op_sscanf(input6, "%03u%03u%03u", &r, &g, &b) == 3);
	verify(r == 0xa0);
	verify(g == 0xa0);
	verify(b == 0xa0);
}

test("Testing non-space delimited decimal values (%03u) (uni)")
{
	verify(uni_sscanf(uinput6, UNI_L("%03u%03u%03u"), &r, &g, &b) == 3);
	verify(r == 0xa0);
	verify(g == 0xa0);
	verify(b == 0xa0);
}

test("Testing ranges (%[a-p]) (ASCII)")
{
	verify(op_sscanf(input7, "%[a-p]", s) == 1);
	verify_string(s, "abcdefghijklmnop");
}

test("Testing ranges (%[a-p]) (uni)")
{
	verify(uni_sscanf(uinput7, UNI_L("%[a-p]"), u) == 1);
	verify_string(u, UNI_L("abcdefghijklmnop"));
}

test("Testing inverted ranges (%[^qz]) (ASCII)")
{
	verify(op_sscanf(input7, "%[^qz]", s) == 1);
	verify_string(s, "abcdefghijklmnop");
}

test("Testing inverted ranges (%[^qz]) (uni)")
{
	verify(uni_sscanf(uinput7, UNI_L("%[^qz]"), u) == 1);
	verify_string(u, UNI_L("abcdefghijklmnop"));
}

test("Testing inverted ranged (%[^j]) (ASCII)")
{
	verify(op_sscanf(input8, "%[^j]", s) == 1);
	verify_string(s, "fnurglor i py");
}

test("Testing range with brackes (%[][a-z]) (uni)")
{
	verify(uni_sscanf(uinput9, UNI_L("%[][a-z]"), u) == 1);
	verify_string(u, UNI_L("[sektion]"));
}

test("Testing range with hyphen (%[0-9-]) (ASCII)")
{
	verify(op_sscanf(input10, "%[0-9-]", s) == 1);
	verify_string(s, "-14");
}

test("Testing range with hyphen (%[0-9-]) (uni)")
{
	verify(uni_sscanf(uinput10, UNI_L("%[0-9-]"), u) == 1);
	verify_string(u, UNI_L("-14"));
}

test("Testing range matching on end of string (ASCII)")
{
	unsigned int d, d2, d3, d4, d5;

	/* Easy */
	verify(1 == op_sscanf(input11, "%u%*1[ -]%3c%*1[ -]%u %u:%u:%u", &d, s, &d, &d, &d, &d));
	verify(1128934633 == d);

	/* Easy */
	verify(6 == op_sscanf(input12, "%u%*1[ -]%3c%*1[ -]%u %u:%u:%u", &d, s, &d2, &d3, &d4, &d5));
	verify(12 == d);
	verify(s[0] == 'j');
	verify(s[1] == 'a');
	verify(s[2] == 'n');
	verify(2005 == d2);
	verify(14 == d3);
	verify(33 == d4);
	verify(20 == d5);

	/* Hard :-) */
	verify(6 == op_sscanf(input13, "%u%*1[ -]%3c%*1[ -]%u %u:%u:%u", &d, s, &d2, &d3, &d4, &d5));
	verify(12 == d);
	verify(s[0] == '-');
	verify(s[1] == '-');
	verify(s[2] == '-');
	verify((unsigned int) -666 == d2);
	verify(14 == d3);
	verify(33 == d4);
	verify(20 == d5);
}

test("Testing range matching on end of string (uni)")
{
	unsigned int d, d2, d3, d4, d5;

	/* Easy */
	verify(1 == uni_sscanf(uinput11, UNI_L("%u%*1[ -]%3c%*1[ -]%u %u:%u:%u"), &d, u, &d, &d, &d, &d));
	verify(1128934633 == d);

	/* Easy */
	verify(6 == uni_sscanf(uinput12, UNI_L("%u%*1[ -]%3c%*1[ -]%u %u:%u:%u"), &d, u, &d2, &d3, &d4, &d5));
	verify(12 == d);
	verify(u[0] == 'j');
	verify(u[1] == 'a');
	verify(u[2] == 'n');
	verify(2005 == d2);
	verify(14 == d3);
	verify(33 == d4);
	verify(20 == d5);

	/* Hard :-) */
	verify(6 == uni_sscanf(uinput13, UNI_L("%u%*1[ -]%3c%*1[ -]%u %u:%u:%u"), &d, u, &d2, &d3, &d4, &d5));
	verify(12 == d);
	verify(u[0] == '-');
	verify(u[1] == '-');
	verify(u[2] == '-');
	verify((unsigned int) -666 == d2);
	verify(14 == d3);
	verify(33 == d4);
	verify(20 == d5);
}

test("Matching char at end of string (ASCII)")
{
	int num;
	char c;
	/* With leading space in match string */
	verify(1 == op_sscanf(input14, "%d%c", &num, &c));
	verify(num == 12345);
	/* Without leading space */
	verify(1 == op_sscanf(input14 + 1, "%d%c", &num, &c));
	verify(num == 12345);
}

test("Matching uni_char at end of string (uni)")
{
	int num;
	uni_char c;
	/* With leading space in match string */
	verify(1 == uni_sscanf(uinput14, UNI_L("%d%c"), &num, &c));
	verify(num == 12345);
	/* Without leading space */
	verify(1 == uni_sscanf(uinput14 + 1, UNI_L("%d%c"), &num, &c));
	verify(num == 12345);
}

test("Floating point (ASCII)")
{
	float f;
	verify(1 == op_sscanf("0.314159e1", "%f", &f));
	verify(f - 3.14159 < 0.00001);
	verify(1 == op_sscanf("0.314159e1", "%e", &f));
	verify(f - 3.14159 < 0.00001);
	verify(1 == op_sscanf("0.314159e1", "%E", &f));
	verify(f - 3.14159 < 0.00001);
	verify(1 == op_sscanf("0.314159e1", "%g", &f));
	verify(f - 3.14159 < 0.00001);
	verify(1 == op_sscanf("0.314159e1", "%G", &f));
	verify(f - 3.14159 < 0.00001);

	double d;
	verify(1 == op_sscanf("0.314159e1", "%lf", &d));
	verify(d - 3.14159 < 0.00001);
	verify(1 == op_sscanf("0.314159e1", "%le", &d));
	verify(d - 3.14159 < 0.00001);
	verify(1 == op_sscanf("0.314159e1", "%lE", &d));
	verify(d - 3.14159 < 0.00001);
	verify(1 == op_sscanf("0.314159e1", "%lg", &d));
	verify(d - 3.14159 < 0.00001);
	verify(1 == op_sscanf("0.314159e1", "%lG", &d));
	verify(d - 3.14159 < 0.00001);

	long double l;
	verify(1 == op_sscanf("0.314159e1", "%Lf", &l));
	verify(l - 3.14159 < 0.00001);
	verify(1 == op_sscanf("0.314159e1", "%Le", &l));
	verify(l - 3.14159 < 0.00001);
	verify(1 == op_sscanf("0.314159e1", "%LE", &l));
	verify(l - 3.14159 < 0.00001);
	verify(1 == op_sscanf("0.314159e1", "%Lg", &l));
	verify(l - 3.14159 < 0.00001);
	verify(1 == op_sscanf("0.314159e1", "%LG", &l));
	verify(l - 3.14159 < 0.00001);
}

test("Floating point (uni)")
{
	float f;
	verify(1 == uni_sscanf(UNI_L("0.314159e1"), UNI_L("%f"), &f));
	verify(f - 3.14159 < 0.00001);
	verify(1 == uni_sscanf(UNI_L("0.314159e1"), UNI_L("%e"), &f));
	verify(f - 3.14159 < 0.00001);
	verify(1 == uni_sscanf(UNI_L("0.314159e1"), UNI_L("%E"), &f));
	verify(f - 3.14159 < 0.00001);
	verify(1 == uni_sscanf(UNI_L("0.314159e1"), UNI_L("%g"), &f));
	verify(f - 3.14159 < 0.00001);
	verify(1 == uni_sscanf(UNI_L("0.314159e1"), UNI_L("%G"), &f));
	verify(f - 3.14159 < 0.00001);

	double d;
	verify(1 == uni_sscanf(UNI_L("0.314159e1"), UNI_L("%lf"), &d));
	verify(d - 3.14159 < 0.00001);
	verify(1 == uni_sscanf(UNI_L("0.314159e1"), UNI_L("%le"), &d));
	verify(d - 3.14159 < 0.00001);
	verify(1 == uni_sscanf(UNI_L("0.314159e1"), UNI_L("%lE"), &d));
	verify(d - 3.14159 < 0.00001);
	verify(1 == uni_sscanf(UNI_L("0.314159e1"), UNI_L("%lg"), &d));
	verify(d - 3.14159 < 0.00001);
	verify(1 == uni_sscanf(UNI_L("0.314159e1"), UNI_L("%lG"), &d));
	verify(d - 3.14159 < 0.00001);

	long double l;
	verify(1 == uni_sscanf(UNI_L("0.314159e1"), UNI_L("%Lf"), &l));
	verify(l - 3.14159 < 0.00001);
	verify(1 == uni_sscanf(UNI_L("0.314159e1"), UNI_L("%Le"), &l));
	verify(l - 3.14159 < 0.00001);
	verify(1 == uni_sscanf(UNI_L("0.314159e1"), UNI_L("%LE"), &l));
	verify(l - 3.14159 < 0.00001);
	verify(1 == uni_sscanf(UNI_L("0.314159e1"), UNI_L("%Lg"), &l));
	verify(l - 3.14159 < 0.00001);
	verify(1 == uni_sscanf(UNI_L("0.314159e1"), UNI_L("%LG"), &l));
	verify(l - 3.14159 < 0.00001);
}

test("Floating point specials (ASCII)")
{
	float f;
	verify(1 == op_sscanf("inf", "%f", &f));
	verify(op_isinf(f) && !op_signbit(f));
	verify(1 == op_sscanf("infinity", "%f", &f));
	verify(op_isinf(f) && !op_signbit(f));
	verify(1 == op_sscanf("-inf", "%f", &f));
	verify(op_isinf(f) && op_signbit(f));
	verify(1 == op_sscanf("nan", "%f", &f));
	verify(op_isnan(f));

	verify(1 == op_sscanf("inf", "%e", &f));
	verify(op_isinf(f) && !op_signbit(f));
	verify(1 == op_sscanf("-inf", "%e", &f));
	verify(op_isinf(f) && op_signbit(f));
	verify(1 == op_sscanf("nan", "%e", &f));
	verify(op_isnan(f));

	verify(1 == op_sscanf("inf", "%g", &f));
	verify(op_isinf(f) && !op_signbit(f));
	verify(1 == op_sscanf("-inf", "%g", &f));
	verify(op_isinf(f) && op_signbit(f));
	verify(1 == op_sscanf("nan", "%g", &f));
	verify(op_isnan(f));
}

test("Floating point specials (uni)")
{
	float f;
	verify(1 == uni_sscanf(UNI_L("inf"), UNI_L("%f"), &f));
	verify(op_isinf(f) && !op_signbit(f));
	verify(1 == uni_sscanf(UNI_L("infinity"), UNI_L("%f"), &f));
	verify(op_isinf(f) && !op_signbit(f));
	verify(1 == uni_sscanf(UNI_L("-inf"), UNI_L("%f"), &f));
	verify(op_isinf(f) && op_signbit(f));
	verify(1 == uni_sscanf(UNI_L("nan"), UNI_L("%f"), &f));
	verify(op_isnan(f));

	verify(1 == uni_sscanf(UNI_L("inf"), UNI_L("%e"), &f));
	verify(op_isinf(f) && !op_signbit(f));
	verify(1 == uni_sscanf(UNI_L("-inf"), UNI_L("%e"), &f));
	verify(op_isinf(f) && op_signbit(f));
	verify(1 == uni_sscanf(UNI_L("nan"), UNI_L("%e"), &f));
	verify(op_isnan(f));

	verify(1 == uni_sscanf(UNI_L("inf"), UNI_L("%g"), &f));
	verify(op_isinf(f) && !op_signbit(f));
	verify(1 == uni_sscanf(UNI_L("-inf"), UNI_L("%g"), &f));
	verify(op_isinf(f) && op_signbit(f));
	verify(1 == uni_sscanf(UNI_L("nan"), UNI_L("%g"), &f));
	verify(op_isnan(f));
}

test("More checks for op_sscanf %n (ASCII)")
{
	int val1 = 0;
	unsigned chars_read = 1337, chars_read2 = 42;

	verify(op_sscanf(input1, "%n", &chars_read) == 0);
	verify(chars_read == 0);

	verify(op_sscanf(input1, "%n%n", &chars_read, &chars_read2) == 0);
	verify(chars_read == 0);
	verify(chars_read2 == 0);

	verify(op_sscanf(input4, "#a%n%d%n", &chars_read, &val1, &chars_read2) == 1);
	verify(chars_read == 2);
	verify(chars_read2 == 3);

	verify(op_sscanf(input14, "%n%d%n", &chars_read, &val1, &chars_read2) == 1);
	verify(chars_read == 0);
	verify(chars_read2 == 6);

	verify(op_sscanf(input14, "%n %d%n", &chars_read, &val1, &chars_read2) == 1);
	verify(chars_read == 0);
	verify(chars_read2 == 6);
}

test("More checks for op_sscanf %n (uni)")
{
	int val1 = 0;
	unsigned chars_read = 1337, chars_read2 = 42;

	verify(uni_sscanf(uinput1, UNI_L("%n"), &chars_read) == 0);
	verify(chars_read == 0);

	verify(uni_sscanf(uinput1, UNI_L("%n%n"), &chars_read, &chars_read2) == 0);
	verify(chars_read == 0);
	verify(chars_read2 == 0);

	verify(uni_sscanf(uinput4, UNI_L("#a%n%d%n"), &chars_read, &val1, &chars_read2) == 1);
	verify(chars_read == 2);
	verify(chars_read2 == 3);

	verify(uni_sscanf(uinput14, UNI_L("%n%d%n"), &chars_read, &val1, &chars_read2) == 1);
	verify(chars_read == 0);
	verify(chars_read2 == 6);

	verify(uni_sscanf(uinput14, UNI_L("%n %d%n"), &chars_read, &val1, &chars_read2) == 1);
	verify(chars_read == 0);
	verify(chars_read2 == 6);
}

// -- op_vsscanf -------------------------------------------------------

test("op_vsscanf")
{
	char val1[15], val2[15], val3[15], val5[15]; int val4;
	verify(op_vsscanf_test(input1, "%s %s %s %d %s", val1, val2, val3, &val4, val5) == 5);
	verify_string(val1, "gurksallad");
	verify_string(val2, "gurkburk");
	verify_string(val3, "42");
	verify(val4 == 4711);
	verify_string(val5, "karljohansgate");
}

// -- Global cleanup -----------------------------------------------------

exit
{
	op_free(input1);
	op_free(input2);
	op_free(input3);
	op_free(input4);
	op_free(input5);
	op_free(input6);
	op_free(input7);
	op_free(input8);
	op_free(input9);
	op_free(input10);
	op_free(input11);
	op_free(input12);
	op_free(input13);
	op_free(input14);
	op_free(input15);
	op_free(input16);
#if defined HAVE_LONGLONG || defined HAVE_INT64
	op_free(input17);
#endif
#if defined HAVE_LONGLONG || defined HAVE_UINT64
	op_free(input18);
#endif
	op_free(input19);
	op_free(input20);
	op_free(input21);

	op_free(uinput1);
	op_free(uinput2);
	op_free(uinput3);
	op_free(uinput4);
	op_free(uinput5);
	op_free(uinput6);
	op_free(uinput7);
	op_free(uinput8);
	op_free(uinput9);
	op_free(uinput10);
	op_free(uinput11);
	op_free(uinput12);
	op_free(uinput13);
	op_free(uinput14);
	op_free(uinput15);
	op_free(uinput16);
#if defined HAVE_LONGLONG || defined HAVE_INT64
	op_free(uinput17);
#endif
#if defined HAVE_LONGLONG || defined HAVE_UINT64
	op_free(uinput18);
#endif
	op_free(uinput19);
	op_free(uinput20);
	op_free(uinput21);
}
