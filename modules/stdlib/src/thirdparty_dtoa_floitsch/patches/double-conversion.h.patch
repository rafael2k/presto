--- new_clean/src/double-conversion.h	2012-02-10 15:42:49.789778838 +0100
+++ new_patched/src/double-conversion.h	2012-02-10 15:43:43.433778472 +0100
@@ -283,16 +283,23 @@ class DoubleToStringConverter {
     // Produce a fixed number of digits after the decimal point.
     // For instance fixed(0.1, 4) becomes 0.1000
     // If the input number is big, the output will be big.
     FIXED,
     // Fixed number of digits (independent of the decimal point).
     PRECISION
   };
 
+  enum RoundingBias {
+    // If a tie on rounding, round away from zero.
+    ROUND_NEAREST_AWAY_FROM_ZERO,
+    // If a tie, round to even. The bias of the default IEEE-754 round-to-nearest mode.
+    ROUND_NEAREST_TO_EVEN
+  };
+
   // The maximal number of digits that are needed to emit a double in base 10.
   // A higher precision can be achieved by using more digits, but the shortest
   // accurate representation of any double will never use more digits than
   // kBase10MaximalLength.
   // Note that DoubleToAscii null-terminates its input. So the given buffer
   // should be at least kBase10MaximalLength + 1 characters long.
   static const int kBase10MaximalLength = 17;
 
@@ -332,16 +339,17 @@ class DoubleToStringConverter {
   // requested_digits parameter and the padding-zeroes limit the size of the
   // output. Don't forget the decimal point, the exponent character and the
   // terminating null-character when computing the maximal output size.
   // The given length is only used in debug mode to ensure the buffer is big
   // enough.
   static void DoubleToAscii(double v,
                             DtoaMode mode,
                             int requested_digits,
+                            RoundingBias rounding_bias,
                             char* buffer,
                             int buffer_length,
                             bool* sign,
                             int* length,
                             int* point);
 
  private:
   // Implementation for ToShortest and ToShortestSingle.
@@ -386,17 +394,18 @@ class StringToDoubleConverter {
   // strings to numbers.
   enum Flags {
     NO_FLAGS = 0,
     ALLOW_HEX = 1,
     ALLOW_OCTALS = 2,
     ALLOW_TRAILING_JUNK = 4,
     ALLOW_LEADING_SPACES = 8,
     ALLOW_TRAILING_SPACES = 16,
-    ALLOW_SPACES_AFTER_SIGN = 32
+    ALLOW_SPACES_AFTER_SIGN = 32,
+    ALLOW_SCANF_NAN_INFINITIES = 64
   };
 
   // Flags should be a bit-or combination of the possible Flags-enum.
   //  - NO_FLAGS: no special flags.
   //  - ALLOW_HEX: recognizes the prefix "0x". Hex numbers may only be integers.
   //      Ex: StringToDouble("0x1234") -> 4660.0
   //          In StringToDouble("0x1234.56") the characters ".56" are trailing
   //          junk. The result of the call is hence dependent on
@@ -430,17 +439,19 @@ class StringToDoubleConverter {
   // junk_string_value is returned when
   //  a) ALLOW_TRAILING_JUNK is not set, and a junk character (a character not
   //     part of a double-literal) is found.
   //  b) ALLOW_TRAILING_JUNK is set, but the string does not start with a
   //     double literal.
   //
   // infinity_symbol and nan_symbol are strings that are used to detect
   // inputs that represent infinity and NaN. They can be null, in which case
-  // they are ignored.
+  // they are ignored. If ALLOW_SCANF_NAN_INFINITIES is set, then "inf",
+  // "Inf", "Infinity", "infinity" and "nan" and "NaN" is checked for. infinity_symbol
+  // and nan_symbol are ignored if that flag is set.
   // The conversion routine first reads any possible signs. Then it compares the
   // following character of the input-string with the first character of
   // the infinity, and nan-symbol. If either matches, the function assumes, that
   // a match has been found, and expects the following input characters to match
   // the remaining characters of the special-value symbol.
   // This means that the following restrictions apply to special-value symbols:
   //  - they must not start with signs ('+', or '-'),
   //  - they must not have the same first character.
