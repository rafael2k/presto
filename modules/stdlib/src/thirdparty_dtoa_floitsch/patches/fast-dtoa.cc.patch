--- new_clean/src/fast-dtoa.cc	2012-02-10 15:42:50.833778833 +0100
+++ new_patched/src/fast-dtoa.cc	2012-02-10 16:34:04.617757858 +0100
@@ -339,68 +339,81 @@ static bool DigitGen(DiyFp low,
   // Division by one is a shift.
   uint32_t integrals = static_cast<uint32_t>(too_high.f() >> -one.e());
   // Modulo by one is an and.
   uint64_t fractionals = too_high.f() & (one.f() - 1);
   uint32_t divisor;
   int divisor_exponent_plus_one;
   BiggestPowerTen(integrals, DiyFp::kSignificandSize - (-one.e()),
                   &divisor, &divisor_exponent_plus_one);
-  *kappa = divisor_exponent_plus_one;
-  *length = 0;
+
+  int local_kappa = divisor_exponent_plus_one;
+  int local_length = 0;
+  char *buffer_ptr = buffer.start();
   // Loop invariant: buffer = too_high / 10^kappa  (integer division)
   // The invariant holds for the first iteration: kappa has been initialized
   // with the divisor exponent + 1. And the divisor is the biggest power of ten
   // that is smaller than integrals.
-  while (*kappa > 0) {
+  while (local_kappa > 0) {
     int digit = integrals / divisor;
-    buffer[*length] = '0' + digit;
-    (*length)++;
+    ASSERT(buffer_ptr < buffer.start() + buffer.length());
+    *buffer_ptr++ = '0' + digit;
+    local_length++;
     integrals %= divisor;
-    (*kappa)--;
+    local_kappa--;
     // Note that kappa now equals the exponent of the divisor and that the
     // invariant thus holds again.
     uint64_t rest =
         (static_cast<uint64_t>(integrals) << -one.e()) + fractionals;
     // Invariant: too_high = buffer * 10^kappa + DiyFp(rest, one.e())
     // Reminder: unsafe_interval.e() == one.e()
     if (rest < unsafe_interval.f()) {
       // Rounding down (by not emitting the remaining digits) yields a number
       // that lies within the unsafe interval.
-      return RoundWeed(buffer, *length, DiyFp::Minus(too_high, w).f(),
+      *kappa = local_kappa;
+      *length = local_length;
+      return RoundWeed(buffer, local_length, DiyFp::Minus(too_high, w).f(),
                        unsafe_interval.f(), rest,
                        static_cast<uint64_t>(divisor) << -one.e(), unit);
     }
     divisor /= 10;
   }
+  *kappa = 0;
+  *length = local_length;
 
   // The integrals have been generated. We are at the point of the decimal
   // separator. In the following loop we simply multiply the remaining digits by
   // 10 and divide by one. We just need to pay attention to multiply associated
   // data (like the interval or 'unit'), too.
   // Note that the multiplication by 10 does not overflow, because w.e >= -60
   // and thus one.e >= -60.
   ASSERT(one.e() >= -60);
   ASSERT(fractionals < one.f());
   ASSERT(UINT64_2PART_C(0xFFFFFFFF, FFFFFFFF) / 10 >= one.f());
+  buffer_ptr = buffer.start() + local_length;
   while (true) {
     fractionals *= 10;
     unit *= 10;
     unsafe_interval.set_f(unsafe_interval.f() * 10);
     // Integer division by one.
     int digit = static_cast<int>(fractionals >> -one.e());
-    buffer[*length] = '0' + digit;
-    (*length)++;
+    ASSERT(buffer_ptr < buffer.start() + buffer.length());
+    *buffer_ptr++ = '0' + digit;
+    local_length++;
     fractionals &= one.f() - 1;  // Modulo by one.
-    (*kappa)--;
+    local_kappa--;
     if (fractionals < unsafe_interval.f()) {
-      return RoundWeed(buffer, *length, DiyFp::Minus(too_high, w).f() * unit,
+      *kappa = local_kappa;
+      *length = local_length;
+      return RoundWeed(buffer, local_length, DiyFp::Minus(too_high, w).f() * unit,
                        unsafe_interval.f(), fractionals, one.f(), unit);
     }
   }
+  *kappa = local_kappa;
+  *length = local_length;
 }
 
 
 
 // Generates (at most) requested_digits digits of input number w.
 // w is a floating-point number (DiyFp), consisting of a significand and an
 // exponent. Its exponent is bounded by kMinimalTargetExponent and
 // kMaximalTargetExponent.
@@ -447,35 +460,39 @@ static bool DigitGenCounted(DiyFp w,
   // Division by one is a shift.
   uint32_t integrals = static_cast<uint32_t>(w.f() >> -one.e());
   // Modulo by one is an and.
   uint64_t fractionals = w.f() & (one.f() - 1);
   uint32_t divisor;
   int divisor_exponent_plus_one;
   BiggestPowerTen(integrals, DiyFp::kSignificandSize - (-one.e()),
                   &divisor, &divisor_exponent_plus_one);
-  *kappa = divisor_exponent_plus_one;
-  *length = 0;
+  int local_kappa = divisor_exponent_plus_one;
+  int local_length = 0;
+  char *buffer_ptr = buffer.start();
 
   // Loop invariant: buffer = w / 10^kappa  (integer division)
   // The invariant holds for the first iteration: kappa has been initialized
   // with the divisor exponent + 1. And the divisor is the biggest power of ten
   // that is smaller than 'integrals'.
-  while (*kappa > 0) {
+  while (local_kappa > 0) {
     int digit = integrals / divisor;
-    buffer[*length] = '0' + digit;
-    (*length)++;
+    ASSERT(buffer_ptr < buffer.start() + buffer.length());
+    *buffer_ptr++ = '0' + digit;
+    local_length++;
     requested_digits--;
     integrals %= divisor;
-    (*kappa)--;
+    local_kappa--;
     // Note that kappa now equals the exponent of the divisor and that the
     // invariant thus holds again.
     if (requested_digits == 0) break;
     divisor /= 10;
   }
+  *kappa = local_kappa;
+  *length = local_length;
 
   if (requested_digits == 0) {
     uint64_t rest =
         (static_cast<uint64_t>(integrals) << -one.e()) + fractionals;
     return RoundWeedCounted(buffer, *length, rest,
                             static_cast<uint64_t>(divisor) << -one.e(), w_error,
                             kappa);
   }
@@ -484,27 +501,31 @@ static bool DigitGenCounted(DiyFp w,
   // separator. In the following loop we simply multiply the remaining digits by
   // 10 and divide by one. We just need to pay attention to multiply associated
   // data (the 'unit'), too.
   // Note that the multiplication by 10 does not overflow, because w.e >= -60
   // and thus one.e >= -60.
   ASSERT(one.e() >= -60);
   ASSERT(fractionals < one.f());
   ASSERT(UINT64_2PART_C(0xFFFFFFFF, FFFFFFFF) / 10 >= one.f());
+  buffer_ptr = buffer.start() + local_length;
   while (requested_digits > 0 && fractionals > w_error) {
     fractionals *= 10;
     w_error *= 10;
     // Integer division by one.
     int digit = static_cast<int>(fractionals >> -one.e());
-    buffer[*length] = '0' + digit;
-    (*length)++;
+    ASSERT(buffer_ptr < buffer.start() + buffer.length());
+    *buffer_ptr++ = '0' + digit;
+    local_length++;
     requested_digits--;
     fractionals &= one.f() - 1;  // Modulo by one.
-    (*kappa)--;
+    local_kappa--;
   }
+  *kappa = local_kappa;
+  *length = local_length;
   if (requested_digits != 0) return false;
   return RoundWeedCounted(buffer, *length, fractionals, one.f(), w_error,
                           kappa);
 }
 
 
 // Provides a decimal representation of v.
 // Returns true if it succeeds, otherwise the result cannot be trusted.
