--- upstream_new/src/fixed-dtoa.cc	2011-11-05 21:00:20.688781237 +0100
+++ upstream_new/src/fixed-dtoa.cc	2011-11-05 20:59:42.106426653 +0100
@@ -188,10 +188,10 @@
 }


-static void RoundUp(Vector<char> buffer, int* length, int* decimal_point) {
+static void RoundUp(Vector<char> buffer, int* length, int* decimal_point, DoubleToStringConverter::RoundingBias rounding_bias) {
   // An empty buffer represents 0.
   if (*length == 0) {
-    buffer[0] = '1';
+    buffer[0] = rounding_bias == DoubleToStringConverter::ROUND_NEAREST_AWAY_FROM_ZERO ? '1' : '0';
     *decimal_point = 1;
     *length = 1;
     return;
@@ -231,7 +231,7 @@
 // rounding-up will change the contents of the buffer to "20000".
 static void FillFractionals(uint64_t fractionals, int exponent,
                             int fractional_count, Vector<char> buffer,
-                            int* length, int* decimal_point) {
+                            int* length, int* decimal_point, DoubleToStringConverter::RoundingBias rounding_bias) {
   ASSERT(-128 <= exponent && exponent <= 0);
   // 'fractionals' is a fixed-point number, with binary point at bit
   // (-exponent). Inside the function the non-converted remainder of fractionals
@@ -261,7 +261,15 @@
     }
     // If the first bit after the point is set we have to round up.
     if (((fractionals >> (point - 1)) & 1) == 1) {
-      RoundUp(buffer, length, decimal_point);
+      if (*length > 0 && rounding_bias == DoubleToStringConverter::ROUND_NEAREST_TO_EVEN) {
+        int digit = buffer[*length - 1] - '0';
+        if ((digit & 1) == 1 || digit > 5) {
+          RoundUp(buffer, length, decimal_point, rounding_bias);
+        }
+      }
+      else {
+        RoundUp(buffer, length, decimal_point, rounding_bias);
+      }
     }
   } else {  // We need 128 bits.
     ASSERT(64 < -exponent && -exponent <= 128);
@@ -280,7 +288,15 @@
       (*length)++;
     }
     if (fractionals128.BitAt(point - 1) == 1) {
-      RoundUp(buffer, length, decimal_point);
+      if (*length > 0 && rounding_bias == DoubleToStringConverter::ROUND_NEAREST_TO_EVEN) {
+        int digit = buffer[*length - 1] - '0';
+        if ((digit & 1) == 1 || digit > 5) {
+          RoundUp(buffer, length, decimal_point, rounding_bias);
+        }
+      }
+      else {
+        RoundUp(buffer, length, decimal_point, rounding_bias);
+      }
     }
   }
 }
@@ -310,7 +326,7 @@
                    int fractional_count,
                    Vector<char> buffer,
                    int* length,
-                   int* decimal_point) {
+                   int* decimal_point, DoubleToStringConverter::RoundingBias rounding_bias) {
   const uint32_t kMaxUInt32 = 0xFFFFFFFF;
   uint64_t significand = Double(v).Significand();
   int exponent = Double(v).Exponent();
@@ -378,7 +394,7 @@
     }
     *decimal_point = *length;
     FillFractionals(fractionals, exponent, fractional_count,
-                    buffer, length, decimal_point);
+                    buffer, length, decimal_point, rounding_bias);
   } else if (exponent < -128) {
     // This configuration (with at most 20 digits) means that all digits must be
     // 0.
@@ -389,7 +405,7 @@
   } else {
     *decimal_point = 0;
     FillFractionals(significand, exponent, fractional_count,
-                    buffer, length, decimal_point);
+                    buffer, length, decimal_point, rounding_bias);
   }
   TrimZeros(buffer, length, decimal_point);
   buffer[*length] = '\0';
