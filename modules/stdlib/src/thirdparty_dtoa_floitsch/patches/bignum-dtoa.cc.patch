--- new_clean/src/bignum-dtoa.cc	2012-02-10 15:42:46.609778859 +0100
+++ new_patched/src/bignum-dtoa.cc	2012-02-10 15:59:19.117772082 +0100
@@ -66,35 +66,35 @@ static void InitialScaledStartValues(uin
 //     where numerator' and denominator' are the values of numerator and
 //     denominator after the call to this function.
 static void FixupMultiply10(int estimated_power, bool is_even,
                             int* decimal_point,
                             Bignum* numerator, Bignum* denominator,
                             Bignum* delta_minus, Bignum* delta_plus);
 // Generates digits from the left to the right and stops when the generated
 // digits yield the shortest decimal representation of v.
-static void GenerateShortestDigits(Bignum* numerator, Bignum* denominator,
+static void GenerateShortestDigits(int requested_digits, Bignum* numerator, Bignum* denominator,
                                    Bignum* delta_minus, Bignum* delta_plus,
                                    bool is_even,
-                                   Vector<char> buffer, int* length);
+                                   Vector<char> buffer, int* length, BignumRoundingBias rounding_bias);
 // Generates 'requested_digits' after the decimal point.
 static void BignumToFixed(int requested_digits, int* decimal_point,
                           Bignum* numerator, Bignum* denominator,
-                          Vector<char>(buffer), int* length);
+                          Vector<char>(buffer), int* length, BignumRoundingBias rounding_bias);
 // Generates 'count' digits of numerator/denominator.
 // Once 'count' digits have been produced rounds the result depending on the
 // remainder (remainders of exactly .5 round upwards). Might update the
 // decimal_point when rounding up (for example for 0.9999).
 static void GenerateCountedDigits(int count, int* decimal_point,
                                   Bignum* numerator, Bignum* denominator,
-                                  Vector<char>(buffer), int* length);
+                                  Vector<char>(buffer), int* length, BignumRoundingBias rounding_bias);
 
 
 void BignumDtoa(double v, BignumDtoaMode mode, int requested_digits,
-                Vector<char> buffer, int* length, int* decimal_point) {
+                Vector<char> buffer, int* length, int* decimal_point, BignumRoundingBias rounding_bias) {
   ASSERT(v > 0);
   ASSERT(!Double(v).IsSpecial());
   uint64_t significand;
   int exponent;
   bool lower_boundary_is_closer;
   if (mode == BIGNUM_DTOA_SHORTEST_SINGLE) {
     float f = static_cast<float>(v);
     ASSERT(f == v);
@@ -145,29 +145,29 @@ void BignumDtoa(double v, BignumDtoaMode
   FixupMultiply10(estimated_power, is_even, decimal_point,
                   &numerator, &denominator,
                   &delta_minus, &delta_plus);
   // We now have v = (numerator / denominator) * 10^(decimal_point-1), and
   //  1 <= (numerator + delta_plus) / denominator < 10
   switch (mode) {
     case BIGNUM_DTOA_SHORTEST:
     case BIGNUM_DTOA_SHORTEST_SINGLE:
-      GenerateShortestDigits(&numerator, &denominator,
+      GenerateShortestDigits(requested_digits, &numerator, &denominator,
                              &delta_minus, &delta_plus,
-                             is_even, buffer, length);
+                             is_even, buffer, length, rounding_bias);
       break;
     case BIGNUM_DTOA_FIXED:
       BignumToFixed(requested_digits, decimal_point,
                     &numerator, &denominator,
-                    buffer, length);
+                    buffer, length, rounding_bias);
       break;
     case BIGNUM_DTOA_PRECISION:
       GenerateCountedDigits(requested_digits, decimal_point,
                             &numerator, &denominator,
-                            buffer, length);
+                            buffer, length, rounding_bias);
       break;
     default:
       UNREACHABLE();
   }
   buffer[*length] = '\0';
 }
 
 
@@ -179,27 +179,27 @@ void BignumDtoa(double v, BignumDtoaMode
 // This is true if d, the decimal representation, is between m- and m+, the
 // upper and lower boundaries. d must be strictly between them if !is_even.
 //           m- := (numerator - delta_minus) / denominator
 //           m+ := (numerator + delta_plus) / denominator
 //
 // Precondition: 0 <= (numerator+delta_plus) / denominator < 10.
 //   If 1 <= (numerator+delta_plus) / denominator < 10 then no leading 0 digit
 //   will be produced. This should be the standard precondition.
-static void GenerateShortestDigits(Bignum* numerator, Bignum* denominator,
+static void GenerateShortestDigits(int requested_digits, Bignum* numerator, Bignum* denominator,
                                    Bignum* delta_minus, Bignum* delta_plus,
                                    bool is_even,
-                                   Vector<char> buffer, int* length) {
+                                   Vector<char> buffer, int* length, BignumRoundingBias rounding_bias) {
   // Small optimization: if delta_minus and delta_plus are the same just reuse
   // one of the two bignums.
   if (Bignum::Equal(*delta_minus, *delta_plus)) {
     delta_plus = delta_minus;
   }
   *length = 0;
-  while (true) {
+  while (requested_digits <= 0 || *length < requested_digits) {
     uint16_t digit;
     digit = numerator->DivideModuloIntBignum(*denominator);
     ASSERT(digit <= 9);  // digit is a uint16_t and therefore always positive.
     // digit = numerator / denominator (integer division).
     // numerator = numerator % denominator.
     buffer[(*length)++] = digit + '0';
 
     // Can we stop already?
@@ -245,18 +245,17 @@ static void GenerateShortestDigits(Bignu
         // satisfied.
         ASSERT(buffer[(*length) - 1] != '9');
         buffer[(*length) - 1]++;
       } else {
         // Halfway case.
         // TODO(floitsch): need a way to solve half-way cases.
         //   For now let's round towards even (since this is what Gay seems to
         //   do).
-
-        if ((buffer[(*length) - 1] - '0') % 2 == 0) {
+        if (rounding_bias == BIGNUM_ROUND_NEAREST_TO_EVEN && (buffer[(*length) - 1] - '0') % 2 == 0) {
           // Round down => Do nothing.
         } else {
           ASSERT(buffer[(*length) - 1] != '9');
           buffer[(*length) - 1]++;
         }
       }
       return;
     } else if (in_delta_room_minus) {
@@ -279,32 +278,33 @@ static void GenerateShortestDigits(Bignu
 // Let v = numerator / denominator < 10.
 // Then we generate 'count' digits of d = x.xxxxx... (without the decimal point)
 // from left to right. Once 'count' digits have been produced we decide wether
 // to round up or down. Remainders of exactly .5 round upwards. Numbers such
 // as 9.999999 propagate a carry all the way, and change the
 // exponent (decimal_point), when rounding upwards.
 static void GenerateCountedDigits(int count, int* decimal_point,
                                   Bignum* numerator, Bignum* denominator,
-                                  Vector<char>(buffer), int* length) {
+                                  Vector<char>(buffer), int* length,  BignumRoundingBias rounding_bias) {
   ASSERT(count >= 0);
   for (int i = 0; i < count - 1; ++i) {
     uint16_t digit;
     digit = numerator->DivideModuloIntBignum(*denominator);
     ASSERT(digit <= 9);  // digit is a uint16_t and therefore always positive.
     // digit = numerator / denominator (integer division).
     // numerator = numerator % denominator.
     buffer[i] = digit + '0';
     // Prepare for next iteration.
     numerator->Times10();
   }
   // Generate the last digit.
   uint16_t digit;
   digit = numerator->DivideModuloIntBignum(*denominator);
-  if (Bignum::PlusCompare(*numerator, *numerator, *denominator) >= 0) {
+  int res = Bignum::PlusCompare(*numerator, *numerator, *denominator);
+  if (res > 0 || rounding_bias == BIGNUM_ROUND_NEAREST_AWAY_FROM_ZERO && digit != 0 || res == 0 && (digit & 1) != 0) {
     digit++;
   }
   buffer[count - 1] = digit + '0';
   // Correct bad digits (in case we had a sequence of '9's). Propagate the
   // carry until we hat a non-'9' or til we reach the first digit.
   for (int i = count - 1; i > 0; --i) {
     if (buffer[i] != '0' + 10) break;
     buffer[i] = '0';
@@ -321,17 +321,17 @@ static void GenerateCountedDigits(int co
 
 // Generates 'requested_digits' after the decimal point. It might omit
 // trailing '0's. If the input number is too small then no digits at all are
 // generated (ex.: 2 fixed digits for 0.00001).
 //
 // Input verifies:  1 <= (numerator + delta) / denominator < 10.
 static void BignumToFixed(int requested_digits, int* decimal_point,
                           Bignum* numerator, Bignum* denominator,
-                          Vector<char>(buffer), int* length) {
+                          Vector<char>(buffer), int* length, BignumRoundingBias rounding_bias) {
   // Note that we have to look at more than just the requested_digits, since
   // a number could be rounded up. Example: v=0.5 with requested_digits=0.
   // Even though the power of v equals 0 we can't just stop here.
   if (-(*decimal_point) > requested_digits) {
     // The number is definitively too small.
     // Ex: 0.001 with requested_digits == 1.
     // Set decimal-point to -requested_digits. This is what Gay does.
     // Note that it should not have any effect anyways since the string is
@@ -341,34 +341,35 @@ static void BignumToFixed(int requested_
     return;
   } else if (-(*decimal_point) == requested_digits) {
     // We only need to verify if the number rounds down or up.
     // Ex: 0.04 and 0.06 with requested_digits == 1.
     ASSERT(*decimal_point == -requested_digits);
     // Initially the fraction lies in range (1, 10]. Multiply the denominator
     // by 10 so that we can compare more easily.
     denominator->Times10();
-    if (Bignum::PlusCompare(*numerator, *numerator, *denominator) >= 0) {
+    int res = Bignum::PlusCompare(*numerator, *numerator, *denominator);
+    if (res > 0 || (rounding_bias != BIGNUM_ROUND_NEAREST_TO_EVEN && res == 0)) {
       // If the fraction is >= 0.5 then we have to include the rounded
       // digit.
       buffer[0] = '1';
       *length = 1;
       (*decimal_point)++;
     } else {
       // Note that we caught most of similar cases earlier.
       *length = 0;
     }
     return;
   } else {
     // The requested digits correspond to the digits after the point.
     // The variable 'needed_digits' includes the digits before the point.
-    int needed_digits = (*decimal_point) + requested_digits;
+    int needed_digits = MIN(buffer.length() - 1, (*decimal_point) + requested_digits);
     GenerateCountedDigits(needed_digits, decimal_point,
                           numerator, denominator,
-                          buffer, length);
+                          buffer, length, rounding_bias);
   }
 }
 
 
 // Returns an estimation of k such that 10^(k-1) <= v < 10^k where
 // v = f * 2^exponent and 2^52 <= f < 2^53.
 // v is hence a normalized double with the given exponent. The output is an
 // approximation for the exponent of the decimal approimation .digits * 10^k.
