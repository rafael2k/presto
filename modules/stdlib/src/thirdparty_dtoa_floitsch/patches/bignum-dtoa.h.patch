--- new_clean/src/bignum-dtoa.h	2012-02-10 15:42:46.837778860 +0100
+++ new_patched/src/bignum-dtoa.h	2012-02-10 15:43:43.005778475 +0100
@@ -44,16 +44,23 @@ enum BignumDtoaMode {
   // Return a fixed number of digits after the decimal point.
   // For instance fixed(0.1, 4) becomes 0.1000
   // If the input number is big, the output will be big.
   BIGNUM_DTOA_FIXED,
   // Return a fixed number of digits, no matter what the exponent is.
   BIGNUM_DTOA_PRECISION
 };
 
+enum BignumRoundingBias {
+  // If a tie on rounding, round away from zero.
+  BIGNUM_ROUND_NEAREST_AWAY_FROM_ZERO,
+  // If a tie, round to even. The default IEEE-754 rounding mode.
+  BIGNUM_ROUND_NEAREST_TO_EVEN
+};
+
 // Converts the given double 'v' to ascii.
 // The result should be interpreted as buffer * 10^(point-length).
 // The buffer will be null-terminated.
 //
 // The input v must be > 0 and different from NaN, and Infinity.
 //
 // The output depends on the given mode:
 //  - SHORTEST: produce the least amount of digits for which the internal
@@ -74,15 +81,15 @@ enum BignumDtoaMode {
 //  - PRECISION: produces 'requested_digits' where the first digit is not '0'.
 //   Even though the length of produced digits usually equals
 //   'requested_digits', the function is allowed to return fewer digits, in
 //   which case the caller has to fill the missing digits with '0's.
 //   Halfway cases are again rounded up.
 // 'BignumDtoa' expects the given buffer to be big enough to hold all digits
 // and a terminating null-character.
 void BignumDtoa(double v, BignumDtoaMode mode, int requested_digits,
-                Vector<char> buffer, int* length, int* point);
+                Vector<char> buffer, int* length, int* point, BignumRoundingBias rounding_bias);
 
 #ifndef NO_DOUBLE_CONVERSION_NAMESPACE
 }  // namespace double_conversion
 #endif // !NO_DOUBLE_CONVERSION_NAMESPACE
 
 #endif  // DOUBLE_CONVERSION_BIGNUM_DTOA_H_
