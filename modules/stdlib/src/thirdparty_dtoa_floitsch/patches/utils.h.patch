--- upstream_unpatched/src/utils.h	2012-06-08 10:25:39.263016402 +0200
+++ upstream/src/utils.h	2012-06-08 10:19:25.375018957 +0200
@@ -28,19 +28,22 @@
 #ifndef DOUBLE_CONVERSION_UTILS_H_
 #define DOUBLE_CONVERSION_UTILS_H_
 
-#include <stdlib.h>
-#include <string.h>
+/* Don't put it inside the double_conversion namespace. */
+#define NO_DOUBLE_CONVERSION_NAMESPACE
 
-#include <assert.h>
 #ifndef ASSERT
-#define ASSERT(condition)      (assert(condition))
+#define ASSERT(condition) OP_ASSERT(condition)
 #endif
 #ifndef UNIMPLEMENTED
-#define UNIMPLEMENTED() (abort())
+#define UNIMPLEMENTED() OP_ASSERT(!"Unimplemented")
 #endif
 #ifndef UNREACHABLE
-#define UNREACHABLE()   (abort())
+#define UNREACHABLE()   OP_ASSERT(!"Unreachable")
 #endif
+#define double_conversion_strlen(x) op_strlen(x)
+#define double_conversion_memcpy op_memcpy
+#define double_conversion_memmove op_memmove
+#define double_conversion_ceil op_ceil
 
 // Double operations detection based on target architecture.
 // Linux uses a 80bit wide floating point stack on x86. This induces double
@@ -236,7 +239,7 @@
   void AddSubstring(const char* s, int n) {
     ASSERT(!is_finalized() && position_ + n < buffer_.length());
     ASSERT(static_cast<size_t>(n) <= double_conversion_strlen(s));
-    memmove(&buffer_[position_], s, n * kCharSize);
+    double_conversion_memmove(&buffer_[position_], s, n * kCharSize);
     position_ += n;
   }
 
@@ -301,7 +304,7 @@
   typedef char VerifySizesAreEqual[sizeof(Dest) == sizeof(Source) ? 1 : -1];
 
   Dest dest;
-  memmove(&dest, &source, sizeof(dest));
+  double_conversion_memmove(&dest, &source, sizeof(dest));
   return dest;
 }
 
