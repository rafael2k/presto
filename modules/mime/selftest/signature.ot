group "mime.signature";

require _MIME_SUPPORT_;

include "modules/mime/mimedec2.h";
include "modules/url/url_name.h";
include "modules/url/url_rep.h";
include "modules/url/url_api.h";
include "modules/url/url_man.h";

test("multiple signatures")
{
	const char *email =
		"Content-Type: multipart/mixed; boundary=----------DsOeAJJWlj6rgnVwavveYz\r\n"
		"MIME-Version: 1.0\r\n"
		"\r\n"
		"------------DsOeAJJWlj6rgnVwavveYz\r\n"
		"Content-Type: text/plain; format=flowed; delsp=yes; charset=iso-8859-1\r\n"
		"Content-Transfer-Encoding: 8bit\r\n"
		"\r\n"
		"text\r\n"
		"\r\n"
		"--\r\n"
		"Signature\r\n"
		"\r\n"
		"------------DsOeAJJWlj6rgnVwavveYz\r\n"
		"Content-Disposition: attachment; filename=attachment81.tmp\r\n"
		"Content-Type: text/plain; name=attachment81.tmp\r\n"
		"\r\n"
		"AtTaChMeNt\r\n"
		"------------DsOeAJJWlj6rgnVwavveYz--\r\n";
		
	const char *email_body1 =
		"text\r\n"
		"\r\n"
		"--\r\n"
		"Signature\r\n";

	const char *email_body2 =
		"AtTaChMeNt";
	
	const char * const email_bodies[] = {
		NULL,
		email_body1,
		email_body2,
		NULL
	};
	

	URL email_url;
	URL attach_url, attach_url_l2;
	URL_DataDescriptor *dd = NULL;
	uni_char *xml_buffer;
	char *data_buffer;
	BOOL more;
	int i;
	unsigned int buf_len;

	email_url = urlManager->GetURL("attachment:test_signature");

	email_url.SetAttribute(URL::KMIME_ForceContentType, "application/mime");
	email_url.SetAttribute(URL::KLoadStatus, URL_LOADING);

	email_url.WriteDocumentData(URL::KNormal, OpStringC8(email));

	email_url.WriteDocumentDataFinished();
	email_url.SetAttribute(URL::KLoadStatus, URL_LOADED);

	verify((dd = email_url.GetDescriptor(NULL, URL::KNoRedirect)) != NULL);

	dd->RetrieveData(more);

	xml_buffer = (uni_char *)dd->GetBuffer();

	verify(xml_buffer != NULL);

	OP_DELETE(dd);
	dd = NULL;

	i = 0;
	email_url.GetAttachment(i++, attach_url);
	while (!attach_url.IsEmpty())
	{
		verify(i < 3);
		
		verify((dd = attach_url.GetDescriptor(NULL, URL::KNoRedirect, TRUE)) != NULL);

		verify(!attach_url.GetAttachment(0, attach_url_l2));

		buf_len = dd->RetrieveData(more);

		data_buffer = (char *)dd->GetBuffer();

		verify(data_buffer != NULL);
		verify(!more);
		verify(buf_len == op_strlen(email_bodies[i]));
		verify(op_memcmp(data_buffer, email_bodies[i], buf_len) == 0);

		OP_DELETE(dd);
		dd = NULL;

		email_url.GetAttachment(i++, attach_url);
	}

	verify(i == 3);
}
finally {
	OP_DELETE(dd);
}
