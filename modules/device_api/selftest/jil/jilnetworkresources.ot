/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "device_api.JIL.NetworkResources";

include "modules/hardcore/timer/optimer.h";
include "modules/device_api/jil/JILNetworkResources.h";

require GADGET_SUPPORT;
require DOM_JIL_API_SUPPORT;

global
{
	// Variable used to time-out the test.
	OpTimer m_timer;

	class TimeoutListener : public OpTimerListener
	{
		void OnTimeOut(OpTimer *timer)
		{
			ST_failed("Time out", "", "");
		}
	} m_timeoutListener;

	// Calback used to test JilNetworkResources::GetUserAccountBalance method
	struct GetUserAccountBalanceCallbackImpl: public JilNetworkResources::GetUserAccountBalanceCallback
	{
		OpString8 m_currency, m_error;
		int m_errorCode;
		double m_cash;

		GetUserAccountBalanceCallbackImpl(): m_errorCode(0), m_cash(0.0) {}

		virtual void SetCash(const double &cash)
		{
			m_cash = cash;
		}

		virtual OP_STATUS SetCurrency(const uni_char* currency)
		{
			RETURN_IF_ERROR(m_currency.SetUTF8FromUTF16(currency));
			return OpStatus::OK;
		}

		virtual void Finished(OP_STATUS error)
		{
			if (OpStatus::IsError(error))
			{
				if (m_errorCode)
				{
					output("Server answered with error %d: \"%s\". It may happen, it's not test fail.", m_errorCode, m_error.CStr());
					ST_passed();
				}
				else
					ST_failed("Error without description", "", "");
			}
			else
			{
				if (m_cash<0)
					ST_failed("Cash balance shouldn't be negative value.", "", "");
				else
					ST_passed();
			}
		}

		virtual OP_STATUS SetErrorCodeAndDescription(int code, const uni_char* description)
		{
			m_errorCode = code;
			RETURN_IF_ERROR(m_error.SetUTF8FromUTF16(description));
			return OpStatus::OK;
		}
	} m_userAccountBalanceCallback;
	
	// Calback used to test JilNetworkResources::GetUserSubscriptionType method
	struct GetUserSubscriptionTypeCallbackImpl: public JilNetworkResources::GetUserSubscriptionTypeCallback
	{
		OpString8 m_type, m_error;
		int m_errorCode;

		GetUserSubscriptionTypeCallbackImpl(): m_errorCode(0) {}

		virtual OP_STATUS SetType(const uni_char* type)
		{
			RETURN_IF_ERROR(m_type.SetUTF8FromUTF16(type));
			return OpStatus::OK;
		}

		virtual void Finished(OP_STATUS error)
		{
			if (OpStatus::IsError(error))
			{
				if (m_errorCode)
				{
					output("Server answered with error %d: \"%s\". It may happen, it's not test fail.", m_errorCode, m_error.CStr());
					ST_passed();
				}
				else
					ST_failed("Error without description", "", "");
			}
			else
			{
				if (m_type.Compare("prepaid") && m_type.Compare("postpaid") && m_type.Compare("other"))
					ST_failed("The subscription type should be either \"prepaid\", \"postpaid\" or \"other\"");
				else
					ST_passed();
			}
		}

		virtual OP_STATUS SetErrorCodeAndDescription(int code, const uni_char* description)
		{
			m_errorCode = code;
			RETURN_IF_ERROR(m_error.SetUTF8FromUTF16(description));
			return OpStatus::OK;
		}
	} m_userSubscriptionTypeCallback;

	// Calback used to test JilNetworkResources::GetSelfLocation method
	struct GetSelfLocationCallbackImpl: public JilNetworkResources::GetSelfLocationCallback
	{
		OpString8 m_error;
		int m_errorCode, m_cellId;
		double m_latitude, m_longitude, m_accuracy;

		GetSelfLocationCallbackImpl(): m_errorCode(0), m_cellId(0), m_latitude(0), m_longitude(0), m_accuracy(0) {}

		virtual void SetCellId(int cellId)
		{
			m_cellId = cellId;
		}

		virtual void SetLatitude(const double &latitude)
		{
			m_latitude = latitude;
		}

		virtual void SetLongitude(const double &longitude)
		{
			m_longitude = longitude;
		}

		virtual void SetAccuracy(const double &accuracy)
		{
			m_accuracy = accuracy;
		}

		virtual void Finished(OP_STATUS error)
		{
			if (OpStatus::IsError(error))
			{
				if (m_errorCode)
				{
					output("Server answered with error %d: \"%s\". It may happen and doesn't fail the test.", m_errorCode, m_error.CStr());
					ST_passed();
				}
				else
					ST_failed("Error without description", "", "");
			}
			else
			{
				if (m_accuracy<0)
					ST_failed("Accuracy shouldn't be negative value.", "", "");
				else if (m_cellId<=0)
					ST_failed("cellId value should be positive.", "", "");					
				else if (m_latitude<-90 || m_latitude>90)
					ST_failed("Latitude value should be from range [-90,90].", "", "");
				else if (m_longitude<-180 || m_longitude>180)
					ST_failed("Longitude value should be from range [-180,180].", "", "");				
				else
					ST_passed();
			}
		}

		virtual OP_STATUS SetErrorCodeAndDescription(int code, const uni_char* description)
		{
			m_errorCode = code;
			RETURN_IF_ERROR(m_error.SetUTF8FromUTF16(description));
			return OpStatus::OK;
		}
	} m_selfLocationCallback;
}

setup
{
}

exit
{
}

test("Test JilNetworkResources::GetUserAccountBalance")
	async;
{
	g_DAPI_network_resources->GetUserAccountBalance(&m_userAccountBalanceCallback);
	m_timer.SetTimerListener(&m_timeoutListener);
	m_timer.Start(4000);
}

test("Test JilNetworkResources::GetUserSubscriptionType")
	async;
{
	g_DAPI_network_resources->GetUserSubscriptionType(&m_userSubscriptionTypeCallback);
	m_timer.SetTimerListener(&m_timeoutListener);
	m_timer.Start(4000);
}

test("Test JilNetworkResources::GetSelfLocation")
	async;
{
	g_DAPI_network_resources->GetSelfLocation(&m_selfLocationCallback);
	m_timer.SetTimerListener(&m_timeoutListener);
	m_timer.Start(4000);
}
