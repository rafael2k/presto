/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*-
**
** Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "DeviceApi.JIL.CalendarItem";
require DAPI_JIL_CALENDAR_SUPPORT;

include "modules/device_api/jil/JILCalendar.h";

subtest VerifyJILCalendarTOOpCalendarConversion(OpCalendarEvent& cal_item, JILCalendarItem& reference_jil_cal_item)
{
	JILCalendarItem jil_cal_item;
	verify_success(jil_cal_item.ImportFromOpCalendarEvent(&cal_item));

	verify(jil_cal_item.undefnull.alarm_date == reference_jil_cal_item.undefnull.alarm_date);
	verify(jil_cal_item.alarm_date == reference_jil_cal_item.alarm_date);
	verify(jil_cal_item.undefnull.start_date ==  reference_jil_cal_item.undefnull.start_date);
	verify(jil_cal_item.start_date == reference_jil_cal_item.start_date);
	verify(jil_cal_item.undefnull.end_date == reference_jil_cal_item.undefnull.end_date);
	verify(jil_cal_item.end_date == reference_jil_cal_item.end_date);
	verify(jil_cal_item.undefnull.alarmed == reference_jil_cal_item.undefnull.alarmed);
	verify(jil_cal_item.alarmed == reference_jil_cal_item.alarmed);

	verify(jil_cal_item.undefnull.name ==  reference_jil_cal_item.undefnull.name);
	verify_string(jil_cal_item.name.CStr(), reference_jil_cal_item.name.CStr());
	verify(jil_cal_item.undefnull.notes ==  reference_jil_cal_item.undefnull.notes);
	verify_string(jil_cal_item.notes.CStr(), reference_jil_cal_item.notes.CStr());
	verify(jil_cal_item.undefnull.recurrence ==  reference_jil_cal_item.undefnull.recurrence);
	verify(jil_cal_item.recurrence == reference_jil_cal_item.recurrence);
	verify_string(jil_cal_item.id.CStr(), reference_jil_cal_item.id.CStr());
}

test("conversion JILCalendarItem -> OpCalendarItem")
{
	OpCalendarEvent cal_item;
	verify_success(cal_item.id.Set(UNI_L("90")));
	verify_success(cal_item.name.Set(UNI_L("Mary's Bday")));
	verify_success(cal_item.description.Set(UNI_L("Buy Cake!")));
	cal_item.start_date = OpDate::MakeDate(OpDate::MakeDay(2010, 4, 1), OpDate::MakeTime(12,00,15,00));
	cal_item.duration = 3600000;
	cal_item.alarmed = TRUE;
	cal_item.reminder_time_offset = 3600000;
	cal_item.recurrence_data.type = OpCalendarEvent::SINGLE_SHOT;
	cal_item.recurrence_data.single_shot.year = 2010;
	cal_item.recurrence_data.single_shot.month = 4;
	cal_item.recurrence_data.single_shot.day = 1;
	cal_item.recurrence_data.time_of_day = OpDate::MakeTime(12,00,15,00) + OpDate::LocalTZA() + OpDate::DaylightSavingTA(cal_item.start_date);

	JILCalendarItem jil_cal_item;
	jil_cal_item.undefnull.alarm_date = IS_VALUE;
	jil_cal_item.alarm_date = OpDate::MakeDate(OpDate::MakeDay(2010, 4, 1), OpDate::MakeTime(11,00,15,00));
	jil_cal_item.undefnull.start_date = IS_VALUE;
	jil_cal_item.start_date = OpDate::MakeDate(OpDate::MakeDay(2010, 4, 1), OpDate::MakeTime(12,00,15,00));
	jil_cal_item.undefnull.end_date = IS_VALUE;
	jil_cal_item.end_date = OpDate::MakeDate(OpDate::MakeDay(2010, 4, 1), OpDate::MakeTime(13,00,15,00));
	jil_cal_item.undefnull.alarmed = IS_VALUE;
	jil_cal_item.alarmed = TRUE;

	jil_cal_item.undefnull.name = IS_VALUE;
	verify_success(jil_cal_item.name.Set(cal_item.name.CStr()));
	jil_cal_item.undefnull.notes = IS_VALUE;
	verify_success(jil_cal_item.notes.Set(cal_item.description.CStr()));
	jil_cal_item.undefnull.recurrence = IS_VALUE;
	jil_cal_item.recurrence = JILCalendarItem::RECURRENCE_NOT_REPEAT;
	verify_success(jil_cal_item.id.Set(cal_item.id.CStr()));
	verify(VerifyJILCalendarTOOpCalendarConversion(cal_item, jil_cal_item));

	cal_item.duration = 7200000;
	jil_cal_item.end_date = OpDate::MakeDate(OpDate::MakeDay(2010, 4, 1), OpDate::MakeTime(14,00,15,00));
	verify(VerifyJILCalendarTOOpCalendarConversion(cal_item, jil_cal_item));

	cal_item.reminder_time_offset = 1800000;
	jil_cal_item.alarm_date = OpDate::MakeDate(OpDate::MakeDay(2010, 4, 1), OpDate::MakeTime(11,30,15,00));
	verify(VerifyJILCalendarTOOpCalendarConversion(cal_item, jil_cal_item));

	cal_item.recurrence_data.type = OpCalendarEvent::YEARLY_ON_DATE;
	cal_item.recurrence_data.yearly_on_date.month = 4;
	cal_item.recurrence_data.yearly_on_date.day_of_the_month = 1;
	jil_cal_item.recurrence = JILCalendarItem::RECURRENCE_YEARLY;
	verify(VerifyJILCalendarTOOpCalendarConversion(cal_item, jil_cal_item));

	//cal_item.recurrence_data.type = OpCalendarEvent::YEARLY_ON_DAY;
	//cal_item.recurrence_data.yearly_on_day.day_of_the_year = 121;
	//verify(VerifyJILCalendarTOOpCalendarConversion(cal_item, jil_cal_item));

	cal_item.recurrence_data.type = OpCalendarEvent::MONTHLY_ON_DAY;
	cal_item.recurrence_data.monthly_on_day.day_number = 1;
	jil_cal_item.recurrence = JILCalendarItem::RECURRENCE_MONTHLY_ON_DAY_COUNT;
	verify(VerifyJILCalendarTOOpCalendarConversion(cal_item, jil_cal_item));

	cal_item.recurrence_data.type = OpCalendarEvent::MONTHLY_ON_WEEKDAY;
	cal_item.recurrence_data.monthly_on_weekday.week_number = 0;
	cal_item.recurrence_data.monthly_on_weekday.weekday = OpCalendarEvent::SATURDAY;
	jil_cal_item.recurrence = JILCalendarItem::RECURRENCE_MONTHLY_ON_DAY;
	verify(VerifyJILCalendarTOOpCalendarConversion(cal_item, jil_cal_item));

	cal_item.recurrence_data.type = OpCalendarEvent::WEEKLY;
	cal_item.recurrence_data.weekly.weekday_mask = OpCalendarEvent::SATURDAY;
	jil_cal_item.recurrence = JILCalendarItem::RECURRENCE_WEEKLY_ON_DAY;
	verify(VerifyJILCalendarTOOpCalendarConversion(cal_item, jil_cal_item));

	cal_item.recurrence_data.type = OpCalendarEvent::WEEKLY;
	cal_item.recurrence_data.weekly.weekday_mask = OpCalendarEvent::ALL_WEEK;
	jil_cal_item.recurrence = JILCalendarItem::RECURRENCE_DAILY;
	verify(VerifyJILCalendarTOOpCalendarConversion(cal_item, jil_cal_item));
}

subtest VerifyOpCalendarTOJILCalendarConversion(JILCalendarItem& jil_cal_item, OpCalendarEvent& reference_cal_item)
{
	OpCalendarEvent* cal_item;
	verify_success(jil_cal_item.ExportToOpCalendarEvent(cal_item));
	OpAutoPtr<OpCalendarEvent> cal_item_deleter(cal_item);

	verify_string(cal_item->id.CStr(), reference_cal_item.id.CStr());
	verify_string(cal_item->name.CStr(), reference_cal_item.name.CStr());
	verify_string(cal_item->description.CStr(), reference_cal_item.description.CStr());

	verify(cal_item->start_date == reference_cal_item.start_date);
	verify(cal_item->duration == reference_cal_item.duration);
	verify(cal_item->alarmed == reference_cal_item.alarmed);
	verify(cal_item->reminder_time_offset == reference_cal_item.reminder_time_offset);
	verify(cal_item->recurrence_data.time_of_day == reference_cal_item.recurrence_data.time_of_day);
	verify(cal_item->recurrence_data.type == reference_cal_item.recurrence_data.type);
	switch (cal_item->recurrence_data.type)
	{
		case OpCalendarEvent::SINGLE_SHOT:
			verify(op_memcmp(&cal_item->recurrence_data.single_shot, &reference_cal_item.recurrence_data.single_shot, sizeof(cal_item->recurrence_data.single_shot)) == 0); break;
		case OpCalendarEvent::YEARLY_ON_DATE:
			verify(op_memcmp(&cal_item->recurrence_data.yearly_on_date, &reference_cal_item.recurrence_data.yearly_on_date, sizeof(cal_item->recurrence_data.yearly_on_date)) == 0); break;
		case OpCalendarEvent::YEARLY_ON_DAY:
			verify(op_memcmp(&cal_item->recurrence_data.yearly_on_day, &reference_cal_item.recurrence_data.yearly_on_day, sizeof(cal_item->recurrence_data.yearly_on_day)) == 0); break;
		case OpCalendarEvent::YEARLY_ON_WEEKDAY:
			verify(op_memcmp(&cal_item->recurrence_data.yearly_on_weekday, &reference_cal_item.recurrence_data.yearly_on_weekday, sizeof(cal_item->recurrence_data.yearly_on_weekday)) == 0); break;
		case OpCalendarEvent::MONTHLY_ON_DAY:
			verify(op_memcmp(&cal_item->recurrence_data.monthly_on_day, &reference_cal_item.recurrence_data.monthly_on_day, sizeof(cal_item->recurrence_data.monthly_on_day)) == 0); break;
		case OpCalendarEvent::MONTHLY_ON_WEEKDAY:
			verify(op_memcmp(&cal_item->recurrence_data.monthly_on_weekday, &reference_cal_item.recurrence_data.monthly_on_weekday, sizeof(cal_item->recurrence_data.monthly_on_weekday)) == 0); break;
		case OpCalendarEvent::WEEKLY:
			verify(op_memcmp(&cal_item->recurrence_data.weekly, &reference_cal_item.recurrence_data.weekly, sizeof(cal_item->recurrence_data.weekly)) == 0); break;
		case OpCalendarEvent::INTERVAL:
			verify(op_memcmp(&cal_item->recurrence_data.interval, &reference_cal_item.recurrence_data.interval, sizeof(cal_item->recurrence_data.interval)) == 0); break;
	}
}

test("conversion OpCalendarItem -> JILCalendarItem")
{
	OpCalendarEvent cal_item;
	verify_success(cal_item.id.Set(UNI_L("90")));
	verify_success(cal_item.name.Set(UNI_L("Mary's Bday")));
	verify_success(cal_item.description.Set(UNI_L("Buy Cake!")));
	cal_item.start_date = OpDate::MakeDate(OpDate::MakeDay(2010, 4, 1), OpDate::MakeTime(12,00,15,00));
	cal_item.duration = 3600000;
	cal_item.alarmed = TRUE;
	cal_item.reminder_time_offset = 3600000;
	cal_item.recurrence_data.type = OpCalendarEvent::SINGLE_SHOT;
	cal_item.recurrence_data.single_shot.year = 2010;
	cal_item.recurrence_data.single_shot.month = 4;
	cal_item.recurrence_data.single_shot.day = 1;
	cal_item.recurrence_data.time_of_day = OpDate::MakeTime(12,00,15,00) + OpDate::LocalTZA() + OpDate::DaylightSavingTA(cal_item.start_date);

	JILCalendarItem jil_cal_item;
	jil_cal_item.undefnull.alarm_date = IS_VALUE;
	jil_cal_item.alarm_date = OpDate::MakeDate(OpDate::MakeDay(2010, 4, 1), OpDate::MakeTime(11,00,15,00));
	jil_cal_item.undefnull.start_date = IS_VALUE;
	jil_cal_item.start_date = OpDate::MakeDate(OpDate::MakeDay(2010, 4, 1), OpDate::MakeTime(12,00,15,00));
	jil_cal_item.undefnull.end_date = IS_VALUE;
	jil_cal_item.end_date = OpDate::MakeDate(OpDate::MakeDay(2010, 4, 1), OpDate::MakeTime(13,00,15,00));
	jil_cal_item.undefnull.alarmed = IS_VALUE;
	jil_cal_item.alarmed = TRUE;

	jil_cal_item.undefnull.name = IS_VALUE;
	verify_success(jil_cal_item.name.Set(cal_item.name.CStr()));
	jil_cal_item.undefnull.notes = IS_VALUE;
	verify_success(jil_cal_item.notes.Set(cal_item.description.CStr()));
	jil_cal_item.undefnull.recurrence = IS_VALUE;
	jil_cal_item.recurrence = JILCalendarItem::RECURRENCE_NOT_REPEAT;
	verify_success(jil_cal_item.id.Set(cal_item.id.CStr()));
	verify(VerifyOpCalendarTOJILCalendarConversion(jil_cal_item, cal_item));

	jil_cal_item.end_date = OpDate::MakeDate(OpDate::MakeDay(2010, 4, 1), OpDate::MakeTime(13,30,15,00));
	cal_item.duration = 5400000;
	verify(VerifyOpCalendarTOJILCalendarConversion(jil_cal_item, cal_item));

	jil_cal_item.alarm_date = OpDate::MakeDate(OpDate::MakeDay(2010, 4, 1), OpDate::MakeTime(10,00,15,00));
	cal_item.reminder_time_offset = 7200000;
	verify(VerifyOpCalendarTOJILCalendarConversion(jil_cal_item, cal_item));

	jil_cal_item.recurrence = JILCalendarItem::RECURRENCE_YEARLY;
	cal_item.recurrence_data.type = OpCalendarEvent::YEARLY_ON_DATE;
	cal_item.recurrence_data.yearly_on_date.month = 4;
	cal_item.recurrence_data.yearly_on_date.day_of_the_month = 1;
	verify(VerifyOpCalendarTOJILCalendarConversion(jil_cal_item, cal_item));

	jil_cal_item.recurrence = JILCalendarItem::RECURRENCE_MONTHLY_ON_DAY_COUNT;
	cal_item.recurrence_data.type = OpCalendarEvent::MONTHLY_ON_DAY;
	cal_item.recurrence_data.monthly_on_day.day_number = 1;
	verify(VerifyOpCalendarTOJILCalendarConversion(jil_cal_item, cal_item));

	jil_cal_item.recurrence = JILCalendarItem::RECURRENCE_MONTHLY_ON_DAY;
	cal_item.recurrence_data.type = OpCalendarEvent::MONTHLY_ON_WEEKDAY;
	cal_item.recurrence_data.monthly_on_weekday.week_number = 0;
	cal_item.recurrence_data.monthly_on_weekday.weekday = OpCalendarEvent::SATURDAY;
	verify(VerifyOpCalendarTOJILCalendarConversion(jil_cal_item, cal_item));

	jil_cal_item.recurrence = JILCalendarItem::RECURRENCE_WEEKLY_ON_DAY;
	cal_item.recurrence_data.type = OpCalendarEvent::WEEKLY;
	cal_item.recurrence_data.weekly.weekday_mask = OpCalendarEvent::SATURDAY;
	verify(VerifyOpCalendarTOJILCalendarConversion(jil_cal_item, cal_item));

	jil_cal_item.recurrence = JILCalendarItem::RECURRENCE_DAILY;
	cal_item.recurrence_data.type = OpCalendarEvent::WEEKLY;
	cal_item.recurrence_data.weekly.weekday_mask = OpCalendarEvent::ALL_WEEK;
	verify(VerifyOpCalendarTOJILCalendarConversion(jil_cal_item, cal_item));
}


