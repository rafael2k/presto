/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4; c-file-style:"stroustrup" -*-
**
** Copyright (C) 1995-2010 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
*/

group "DeviceApi.OpListenable";

include "modules/device_api/OpListenable.h";

global
{
	class TestListener
	{
	public:
		virtual void OnEvent0() = 0;
		virtual void OnEvent1(int a) = 0;
		virtual void OnEvent2(const char *c, double d) = 0;
	};

	class AnotherTestListener
	{
	public:
		virtual void OnAnotherEvent0() = 0;
	};

	class TestListenable : public OpListenable<TestListener>
	{
	public:
		DECLARE_LISTENABLE_EVENT0(TestListener, Event0);
		DECLARE_LISTENABLE_EVENT1(TestListener, Event1, int);
		DECLARE_LISTENABLE_EVENT2(TestListener, Event2, const char *, double);
	};

	class MultiTestListenable : public OpListenable<TestListener>, public OpListenable<AnotherTestListener>
	{
	public:
		OP_STATUS AttachListener(TestListener *listener) { return OpListenable<TestListener>::AttachListener(listener); }
		OP_STATUS DetachListener(TestListener *listener) { return OpListenable<TestListener>::DetachListener(listener); }

		OP_STATUS AttachListener(AnotherTestListener *listener) { return OpListenable<AnotherTestListener>::AttachListener(listener); }
		OP_STATUS DetachListener(AnotherTestListener *listener) { return OpListenable<AnotherTestListener>::DetachListener(listener); }

		DECLARE_LISTENABLE_EVENT0(TestListener,        Event0);
		DECLARE_LISTENABLE_EVENT0(AnotherTestListener, AnotherEvent0);
	};

	class TestListenerImpl : public TestListener
	{
	public:
		TestListenerImpl()
		: m_event_called_0(FALSE)
		, m_event_called_1(FALSE)
		, m_event_called_2(FALSE)
		, m_event_arg_a(0)
		, m_event_arg_c(NULL)
		, m_event_arg_d(0)
		{
		}

		void Reset()
		{
			m_event_called_0 = FALSE;
			m_event_called_1 = FALSE;
			m_event_called_2 = FALSE;
			m_event_arg_a = 0;
			m_event_arg_c = NULL;
			m_event_arg_d = 0;
		}

		virtual void OnEvent0()
		{
			m_event_called_0 = TRUE;
		}
		virtual void OnEvent1(int a)
		{
			m_event_called_1 = TRUE;
			m_event_arg_a = a;
		}
		virtual void OnEvent2(const char *c, double d)
		{
			m_event_called_2 = TRUE;
			m_event_arg_c = c;
			m_event_arg_d = d;
		}
		BOOL m_event_called_0;
		BOOL m_event_called_1;
		BOOL m_event_called_2;
		int m_event_arg_a;
		const char *m_event_arg_c;
		double m_event_arg_d;
	};

	class AnotherTestListenerImpl : public AnotherTestListener
	{
	public:
		AnotherTestListenerImpl()
		: m_event_called_0(FALSE)
		{
		}

		void Reset()
		{
			m_event_called_0 = FALSE;
		}

		virtual void OnAnotherEvent0()
		{
			m_event_called_0 = TRUE;
		}
		BOOL m_event_called_0;
	};

	class TestSelfRemovingListener : public TestListener
	{
	public:
		TestSelfRemovingListener(TestListenable* listenable)
			: m_listenable(listenable)
		{
		}
		virtual void OnEvent0()
		{
			m_listenable->DetachListener(this);
		}
		virtual void OnEvent1(int a)
		{
		}
		virtual void OnEvent2(const char *c, double d)
		{
		}
		TestListenable* m_listenable;
	};
}

test("check events received")
{
	TestListenable listenable;
	TestListenerImpl listener;
	verify_success(listenable.AttachListener(&listener));

	verify(!listener.m_event_called_0);
	verify(!listener.m_event_called_1);
	verify(!listener.m_event_called_2);
	listenable.NotifyEvent0();
	verify(listener.m_event_called_0);
	verify(!listener.m_event_called_1);
	verify(!listener.m_event_called_2);
	listenable.NotifyEvent1(7);
	verify(listener.m_event_called_0);
	verify(listener.m_event_called_1);
	verify(!listener.m_event_called_2);
	verify(listener.m_event_arg_a == 7);
	listenable.NotifyEvent1(9);
	verify(listener.m_event_called_0);
	verify(listener.m_event_called_1);
	verify(!listener.m_event_called_2);
	verify(listener.m_event_arg_a == 9);
	listenable.NotifyEvent2("Joanne", 4.0);
	verify(listener.m_event_called_0);
	verify(listener.m_event_called_1);
	verify(listener.m_event_called_2);
	verify(listener.m_event_arg_a == 9);
	verify_string(listener.m_event_arg_c, "Joanne");
	verify(listener.m_event_arg_d == 4.0);
}

test("check multiple listeners")
{
	TestListenable listenable;
	TestListenerImpl listener1, listener2, listener3;
	verify_success(listenable.AttachListener(&listener1));
	verify_success(listenable.AttachListener(&listener2));
	verify_success(listenable.AttachListener(&listener3));

	listenable.NotifyEvent0();
	verify(listener1.m_event_called_0);
	verify(listener2.m_event_called_0);
	verify(listener3.m_event_called_0);

	verify_success(listenable.DetachListener(&listener2));
	listenable.NotifyEvent1(2);
	verify(listener1.m_event_called_1);
	verify(!listener2.m_event_called_1);
	verify(listener3.m_event_called_1);
}

test("check multiple listenable")
{
	MultiTestListenable listenable;
	TestListenerImpl listener1, listener2, listener3;
	AnotherTestListenerImpl listener4, listener5;
	verify_success(listenable.AttachListener(&listener1));
	verify_success(listenable.AttachListener(&listener2));
	verify_success(listenable.AttachListener(&listener3));
	verify_success(listenable.AttachListener(&listener4));
	verify_success(listenable.AttachListener(&listener5));

	listenable.NotifyEvent0();
	verify(listener1.m_event_called_0);
	verify(listener2.m_event_called_0);
	verify(listener3.m_event_called_0);

	listenable.NotifyAnotherEvent0();
	verify(listener4.m_event_called_0);
	verify(listener5.m_event_called_0);

	listener1.Reset();
	listener2.Reset();
	listener3.Reset();
	listener4.Reset();
	listener5.Reset();

	verify_success(listenable.DetachListener(&listener2));
	listenable.NotifyEvent0();
	verify(listener1.m_event_called_0);
	verify(!listener2.m_event_called_0);
	verify(listener3.m_event_called_0);

	verify_success(listenable.DetachListener(&listener4));
	listenable.NotifyAnotherEvent0();
	verify(!listener4.m_event_called_0);
	verify(listener5.m_event_called_0);
}

test("check during an event")
{
	TestListenable listenable;
	TestListenerImpl listener1, listener2, listener3;
	verify_success(listenable.AttachListener(&listener1));
	verify_success(listenable.AttachListener(&listener2));
	verify_success(listenable.AttachListener(&listener3));

	listenable.NotifyEvent0();
	verify(listener1.m_event_called_0);
	verify(listener2.m_event_called_0);
	verify(listener3.m_event_called_0);

	verify_success(listenable.DetachListener(&listener2));
	listenable.NotifyEvent1(2);
	verify(listener1.m_event_called_1);
	verify(!listener2.m_event_called_1);
	verify(listener3.m_event_called_1);
}

test("check removing during an event")
{
	TestListenable listenable;
	TestListenerImpl listener1, listener2;
	TestSelfRemovingListener self_removing_listener(&listenable);

	verify_success(listenable.AttachListener(&listener1));
	verify_success(listenable.AttachListener(&self_removing_listener));
	verify_success(listenable.AttachListener(&listener2));

	verify(listenable.GetListeners().GetCount() == 3);
	listenable.NotifyEvent0();
	verify(listenable.GetListeners().GetCount() == 2);

	verify(listener1.m_event_called_0);
	verify(listener2.m_event_called_0);
}
