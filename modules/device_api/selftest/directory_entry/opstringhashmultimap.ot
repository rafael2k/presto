/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2007 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "device_api.OpStringHashMultiMap";

include "modules/device_api/OpStringHashMultiMap.h";


test("test OpStringHashMultiMap basic operations")
{
	OpStringHashMultiMap<OpString> string_to_string(FALSE);

	OpAutoPtr<OpString> str1(OP_NEW(OpString, ()));
	verify_not_oom(str1.get());
	verify_success(str1->Set(UNI_L("one")));
	OpAutoPtr<OpString> str2(OP_NEW(OpString, ()));
	verify_not_oom(str2.get());
	verify_success(str2->Set(UNI_L("two")));
	OpAutoPtr<OpString> str3(OP_NEW(OpString, ()));
	verify_not_oom(str3.get());
	verify_success(str3->Set(UNI_L("three")));

	verify_success(string_to_string.Add(UNI_L("first_key"), str1.get()));
	verify_success(string_to_string.Add(UNI_L("FIRST_KEY"), str2.get()));
	verify_success(string_to_string.Add(UNI_L("second_key"), str3.get()));

	verify(string_to_string.GetElementCount(UNI_L("first_key")) == 2);
	verify(string_to_string.GetElementCount(UNI_L("fiRst_key")) == 2);
	verify(string_to_string.GetElementCount(UNI_L("second_key")) == 1);
	verify(string_to_string.GetElementCount(UNI_L("no_such_key")) == 0);
	
	OpVector<OpString> vector_result;
	verify_success(string_to_string.GetData(UNI_L("first_key"), &vector_result));
	verify(vector_result.GetCount() == 2);
	verify(vector_result.Get(0) == str1.get());
	verify(vector_result.Get(1) == str2.get());
	verify_success(string_to_string.GetData(UNI_L("FiRst_key"), &vector_result));
	verify(vector_result.GetCount() == 2);
	verify(vector_result.Get(0) == str1.get());
	verify(vector_result.Get(1) == str2.get());
	verify_success(string_to_string.GetData(UNI_L("second_key"), &vector_result));
	verify(vector_result.GetCount() == 1);
	verify(vector_result.Get(0) == str3.get());
	verify_status(string_to_string.GetData(UNI_L("no_such_key"), &vector_result), OpStatus::ERR);
	
	OpString* remove_result;
	verify_success(string_to_string.Remove(UNI_L("FIRsT_kEY"), 0, &remove_result));
	verify(remove_result == str1.get());
	verify(string_to_string.GetElementCount(UNI_L("fiRst_key")) == 1);
	verify_success(string_to_string.GetData(UNI_L("first_key"), &vector_result));
	verify(vector_result.GetCount() == 1);
	verify(vector_result.Get(0) == str2.get());
}

test("test OpStringHashMultiMap Delete")
{
	OpStringHashMultiMap<OpString> string_to_string(FALSE);

	OpAutoPtr<OpString> str1(OP_NEW(OpString, ()));
	verify_not_oom(str1.get());
	verify_success(str1->Set(UNI_L("one")));
	OpAutoPtr<OpString> str2(OP_NEW(OpString, ()));
	verify_not_oom(str2.get());
	verify_success(str2->Set(UNI_L("two")));
	OpAutoPtr<OpString> str3(OP_NEW(OpString, ()));
	verify_not_oom(str3.get());
	verify_success(str3->Set(UNI_L("three")));
	
	verify_success(string_to_string.Add(UNI_L("first_key"), str1.get()));
	verify_success(string_to_string.Add(UNI_L("FIRST_KEY"), str2.get()));
	verify_success(string_to_string.Add(UNI_L("second_key"), str3.get()));
	
	verify(string_to_string.GetElementCount(UNI_L("fiRst_key")) == 2);
	verify_success(string_to_string.Delete(UNI_L("first_Key"), 1));
	verify(string_to_string.GetElementCount(UNI_L("first_keY")) == 1);
	str1.release();
	string_to_string.DeleteAll();
	str2.release();
	str3.release();
	verify(string_to_string.GetKeyCount() == 0);
	
	
}
