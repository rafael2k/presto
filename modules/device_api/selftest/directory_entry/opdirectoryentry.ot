/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright 2007 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.
** It may not be distributed under any circumstances.
*/

group "device_api.OpDirectoryEntry";
require DAPI_DIRECTORY_ENTRY_SUPPORT;

include "modules/device_api/OpDirectoryEntry.h";

test("Test OpDirectoryEntryContentLine")
{
	OpDirectoryEntryContentLine dir_value;
	UINT32 count;
	verify_success(dir_value.GetFieldCount(count));
	verify(count == 0);
	OpDirectoryEntryContentLine::ValueStruct* new_value_struct = OpDirectoryEntryContentLine::NewIntegerValue(532);
	verify_not_oom(new_value_struct);
	verify_success(dir_value.AddValue(3, new_value_struct));

	verify_success(dir_value.GetValueCount(3, count));
	verify(count == 1);
	OpDirectoryEntryContentLine::ValueStruct* old_value_struct = NULL;
	verify_success(dir_value.GetValue(3, 0, old_value_struct));
	verify(old_value_struct->type == OpDirectoryEntryContentLine::ValueStruct::INTEGER_VAL);
	verify(old_value_struct->value.integer_val == 532);

	new_value_struct = OpDirectoryEntryContentLine::NewFloatValue(42.0);
	verify_not_oom(new_value_struct);
	verify_success(dir_value.SetValue(1, 3, new_value_struct));

	verify_success(dir_value.GetValueCount(1, count));
	verify(count == 4);
	verify_success(dir_value.GetValue(1, 3, old_value_struct));
	verify(old_value_struct->type == OpDirectoryEntryContentLine::ValueStruct::FLOAT_VAL);
	verify(old_value_struct->value.float_val == 42.0);

	verify_status(dir_value.DeleteValue(1, 4), OpStatus::ERR);
	verify_success(dir_value.GetValueCount(1, count));
	verify(count == 4);
	verify_success(dir_value.DeleteValue(1, 2));
	verify_success(dir_value.GetValueCount(1, count));
	verify(count == 3);
	verify_success(dir_value.DeleteValue(1, 2));
	verify_success(dir_value.GetValueCount(1, count));
	verify(count == 2);
	verify_status(dir_value.GetValue(1, 1, old_value_struct), OpStatus::ERR);

	verify_success(dir_value.DeleteValue(1));
	
	verify_success(dir_value.GetValueCount(1, count));
	verify(count == 0);
	verify_status(dir_value.GetValue(1, 3, old_value_struct), OpStatus::ERR);
}

test("Test OpDirectoryEntry printing")
	file uni test_file_str "test_directory_entry.bin";
	file uni reference_file_str "reference_directory_entry.bin";
{
	OpFile test_file;
	verify_success(test_file.Construct(test_file_str, OPFILE_ABSOLUTE_FOLDER));
	verify_success(test_file.Open(OPFILE_WRITE));

	OpDirectoryEntry entry;
	OpDirectoryEntryContentLine* string_val = OP_NEW(OpDirectoryEntryContentLine, ());
	verify_not_oom(string_val);
	OpDirectoryEntryContentLine* integer_val = OP_NEW(OpDirectoryEntryContentLine, ());
	verify_not_oom(integer_val);
	OpDirectoryEntryContentLine* struct_val = OP_NEW(OpDirectoryEntryContentLine, ());
	verify_not_oom(struct_val);

	// FIRST VALUE - string
	OpDirectoryEntryContentLine::ValueStruct* new_value_struct = OpDirectoryEntryContentLine::NewStringValue(UNI_L("TestString Value + escaping(\\ \n , ; :)"));
	verify_not_oom(new_value_struct);
	verify_success(string_val->AddValue(0, new_value_struct));
	verify_success(string_val->SetName(UNI_L("TEST_test_val")));
	OpString* param_value = OP_NEW(OpString, ());
	verify_not_oom(param_value);
	verify_success(param_value->Set(UNI_L("test_param_Value")));
	string_val->GetParams()->Add(UNI_L("test_param"), param_value);

	//SECOND VALUE - integer
	new_value_struct = OpDirectoryEntryContentLine::NewIntegerValue(-65492);
	verify_not_oom(new_value_struct);
	verify_success(integer_val->AddValue(0, new_value_struct));
	verify_success(integer_val->SetName(UNI_L("INteGerVal")));

	// THIRD VALUE - structure
	new_value_struct = OpDirectoryEntryContentLine::NewIntegerValue(-443);
	verify_not_oom(new_value_struct);
	verify_success(struct_val->AddValue(0, new_value_struct));

	new_value_struct = OpDirectoryEntryContentLine::NewIntegerValue(344);
	verify_not_oom(new_value_struct);

	verify_success(struct_val->AddValue(0, new_value_struct));

	new_value_struct = OpDirectoryEntryContentLine::NewStringValue(UNI_L("Alice had a cat named Fluffypuff. The cat was very fat and I need a line which is more than 75 chars long!"));
	verify_not_oom(new_value_struct);
	verify_success(struct_val->AddValue(2, new_value_struct));
	verify_success(struct_val->SetName(UNI_L("StructureD_valUe")));
	param_value = OP_NEW(OpString, ());
	verify_not_oom(param_value);
	verify_success(param_value->Set(UNI_L("otherParamValue")));
	struct_val->GetParams()->Add(UNI_L("other_param"), param_value);
	param_value = OP_NEW(OpString, ());
	verify_not_oom(param_value);
	verify_success(param_value->Set(UNI_L("yetAnotherParamValue")));
	struct_val->GetParams()->Add(UNI_L("other_param"), param_value);

	verify_success(entry.AddContentLine(string_val));
	verify_success(entry.AddContentLine(integer_val));
	verify_success(entry.AddContentLine(struct_val));
	verify_success(entry.Print(&test_file));

	verify_files_equal(reference_file_str, test_file_str);
}
