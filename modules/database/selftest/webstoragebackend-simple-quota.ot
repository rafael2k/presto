/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2009-2011 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */


group "database.webstorage.simple.quotas";

require init;
require WEBSTORAGE_ENABLE_SIMPLE_BACKEND;

language c++;

include "modules/database/src/webstorage_data_abstraction_simple_impl.h";
include "modules/hardcore/timer/optimer.h";
include "modules/database/src/opdatabase_base.h";
include "modules/dochand/win.h";
include "modules/doc/frm_doc.h";
include "modules/windowcommander/src/WindowCommander.h";


global
{
#undef SELFTEST_URLCTXID
#define SELFTEST_URLCTXID 0
#undef WEBDB_SELFTEST_ORIGIN
#define WEBDB_SELFTEST_ORIGIN UNI_L("http://opera.selftest")

	// Need to override the normal document listener not to trigger
	// a dialog for the quota exceeded handling.
	class QuotaTestDocListener : public NullDocumentListener
	{
	public:
		QuotaTestDocListener() : m_listener(NULL), m_new_quota_size(FILE_LENGTH_NONE), m_handling(PS_Policy::KQuotaDeny) {}

		void SetUserReply(PS_Policy::QuotaHandling user_handling, OpFileLength new_size)
		{
			m_new_quota_size = new_size;
			m_handling = user_handling;
		}
		/**
		 * Returns FALSE if it failed to setup the listener !!
		 */
		BOOL ReplaceListener()
		{
			if (m_listener != this)
			{
				if (g_selftest.utils->doc)
				{
					OpDocumentListener *candidate = g_selftest.utils->doc->GetWindow()->GetWindowCommander()->GetDocumentListener();
					if (candidate != this)
					{
						m_listener = candidate;
						g_selftest.utils->doc->GetWindow()->GetWindowCommander()->SetDocumentListener(this);
					}
					return TRUE;
				}
				return FALSE;
			}
			return TRUE;
		}
		~QuotaTestDocListener() { ResetListener(); }
		void	ResetListener()
		{
			if (m_listener != this && g_selftest.utils != NULL && g_selftest.utils->GetWindow() != NULL &&
				g_selftest.utils->GetWindow()->GetWindowCommander() != NULL &&
				g_selftest.utils->GetWindow()->GetWindowCommander()->GetDocumentListener() == this)
			{
				g_selftest.utils->GetWindow()->GetWindowCommander()->SetDocumentListener(m_listener);
			}
			m_listener = NULL;
		}

		void OnIncreaseQuota(OpWindowCommander* commander, const uni_char* db_name, const uni_char* db_domain, const uni_char* db_type, OpFileLength current_quota_size, OpFileLength quota_hint, QuotaCallback *callback)
		{
			if (m_handling == PS_Policy::KQuotaDeny)
				callback->OnQuotaReply(FALSE, 0);
			else
			{
				OP_ASSERT(m_handling != PS_Policy::KQuotaAskUser || m_new_quota_size != FILE_LENGTH_NONE);//set me to a ne value please !
				callback->OnQuotaReply(TRUE, m_handling == PS_Policy::KQuotaAskUser ? m_new_quota_size : 0);
			}
		}

	private:
		OpDocumentListener* m_listener;
		OpFileLength m_new_quota_size;
		PS_Policy::QuotaHandling m_handling;
	};

	//each instance stores the status of a single test
	class TestStatus;
	List<TestStatus> all_status;
	class TestStatusLinkBase : public ListElement<TestStatusLinkBase>
	{
	public:
		TestStatus *test_status;
		TestStatusLinkBase(TestStatus* _test_status) : test_status(_test_status) {}
		~TestStatusLinkBase() {}
	};
	class TestWebStorageStateChangeListener : public WebStorageStateChangeListener
	{
	public:
		unsigned mutation_count;
		TestWebStorageStateChangeListener() : mutation_count(0) {}
		~TestWebStorageStateChangeListener() {}
		virtual void HandleStateChange(StateChange v)
		{
			if (v == STORAGE_MUTATED)
				mutation_count++;
		}
	};
	class TestStatus: public ListElement<TestStatus>, public OpTimer, public OpTimerListener
	{
		unsigned m_flags;
		enum TestStatusFlags {IS_RUNNING=1,CAN_DELETE=2,BEGIN_DELETED=4};
		BOOL GetFlag(unsigned flag) const{return (m_flags&flag)!=0;}
		void SetFlag(unsigned flag) {m_flags|=flag;}
		void UnsetFlag(unsigned flag) {m_flags&=~flag;}

		List<TestStatusLinkBase> callbacks;
		TestStatus* test_status;
	public:
		TestWebStorageStateChangeListener state_listener;
		QuotaTestDocListener* m_test_listener;
		WebStorageBackend_SimpleImpl* m_wsb;
		PS_Manager* m_ps_manager;
		unsigned m_global_callback_count;

		TestStatus(List<TestStatus>* h) : m_flags(IS_RUNNING), test_status(this),
				m_test_listener(NULL), m_wsb(NULL), m_ps_manager(0),
				m_global_callback_count(0) {
			Into(h);
			SetTimerListener(this);
			Start(2000); // Start the timer.
		}
		~TestStatus() {
			OP_ASSERT(!GetFlag(BEGIN_DELETED));
			SetFlag(BEGIN_DELETED);
			Out();
			Finish();
			if (m_wsb != NULL) {
				WebStorageBackend_SimpleImpl *wsb = m_wsb;
				m_wsb = NULL;
				wsb->CancelAll();
				wsb->RemoveListener(&state_listener);
				wsb->Release(TRUE);
			}
			TestStatusLinkBase *n = callbacks.First(), *m;
			while(n != NULL) {
				m = n->Suc();
				n->test_status = NULL;
				n->Out();
				OP_DELETE(n);
				n = m;
			}
			OP_DELETE(m_ps_manager);
			m_ps_manager = NULL;
		}
		static TestStatus* Create(List<TestStatus>* h)
		{
			return OP_NEW(TestStatus,(h));
		}
		virtual void OnTimeOut(OpTimer* timer) { OpStatus::Ignore(OnTimeOut()); }
		OP_STATUS OnTimeOut();

		void Finish() {
			UnsetFlag(IS_RUNNING);
		}
		BOOL IsTestRunning() const{
			return GetFlag(IS_RUNNING);
		}
		void AddCallback(TestStatusLinkBase *callback) {
			callback->Into(&callbacks);
			callback->test_status = this;
		}
		void RemoveCallback(TestStatusLinkBase *callback) {
			callback->test_status = NULL;
			callback->Out();
			if (!HasRunningCallbacks() && GetFlag(CAN_DELETE) )
				if (!GetFlag(BEGIN_DELETED))
					OP_DELETE(this);
		}
		BOOL HasRunningCallbacks() const{return callbacks.First() != NULL;}
		unsigned NumberOfRunningCallbacks() const{return callbacks.Cardinal();}
		void SetCanDelete() {
			SetFlag(CAN_DELETE);
			if (!IsTestRunning() || !HasRunningCallbacks() )
				if (!GetFlag(BEGIN_DELETED))
					OP_DELETE(this);
		}
	};
	void DeleteAllStatus()
	{
		TestStatus* n = (TestStatus*)all_status.First();
		while(n != NULL)
		{
			TestStatus *m = (TestStatus*)n->Suc();
			n->Out();
			n->SetCanDelete();
			n = m;
		}
		OP_ASSERT(all_status.First() == NULL);
	}

	static BOOL _verify(BOOL b, unsigned line_number, const char *msg, TestStatus *test_status) {
		if(!b && test_status != NULL && test_status->IsTestRunning()) {
			test_status->Finish();
			char buf[1000]={0}; /* ARRAY OK 2009-04-16 joaoe */
			op_snprintf(buf,999,"\b\b\b%d: %s should be true", line_number, msg);
			ST_failed(buf);
		}
		return b;
	}

	static BOOL _verify(const void* p, unsigned line_number, const char *msg, TestStatus *test_status) {
		return _verify(p != NULL, line_number, msg, test_status);
	}

	static void IgnorePtr(const void*p) { }
	static void IgnorePtr(int p) { }

#undef WEBSTORAGE_VERIFY
#define WEBSTORAGE_VERIFY(b) do{ \
	if(!_verify(b,__LINE__,#b,test_status)) {return OpStatus::ERR;} }while(0)

#undef WEBSTORAGE_VERIFYL
#define WEBSTORAGE_VERIFYL(b) do{ \
	if(!_verify(b,0       ,#b,test_status)) {return OpStatus::ERR;} }while(0)

#undef WEBSTORAGE_VERIFY_RES_ERROR
#define WEBSTORAGE_VERIFY_RES_ERROR(wants_error, err_obj) \
	do { \
		if(test_status != NULL) { \
			BOOL expr = (wants_error) == (err_obj)->IsError(); \
			char msg[256] = {0}; \
			op_snprintf(msg, 255, "%s holds %d", #err_obj, \
					(err_obj)->IsError() ? (err_obj)->m_error_data.m_error : OpStatus::OK); \
			if (!_verify(expr,__LINE__,msg,test_status)) { \
				return OpStatus::ERR; \
			} \
		} \
	}while(0)

	OP_STATUS TestStatus::OnTimeOut()
	{
		WEBSTORAGE_VERIFY(!"Test timed out");
		return OpStatus::OK;
	}

//callback section common to success and error callbacks
#undef CALLBACK_OPERATION_SECTION_START
#define CALLBACK_OPERATION_SECTION_START(type) \
	class type : public WebStorageOperationCallback, public TestStatusLinkBase { \
		OP_STATUS status; \
		void* m_args; \
	public: \
		type(TestStatus *_test_status, void* args = NULL) : TestStatusLinkBase(_test_status), m_args(args) { \
			test_status->AddCallback(this);\
		} \
		virtual ~type() {}\
		virtual void Discard() { \
			if (test_status != NULL) { \
				TestStatus* _test_status = test_status; \
				test_status = NULL; \
				_test_status->RemoveCallback(this);\
				if (_test_status->NumberOfRunningCallbacks()<1 && _test_status->IsTestRunning()) { \
					_test_status->Finish(); \
					ST_passed(); \
				} \
			} \
			OP_DELETE(static_cast<TestStatusLinkBase*>(this)); \
		} \
		virtual Window* GetWindow() { return g_selftest.utils->GetWindow(); } \
		virtual OP_STATUS HandleOperation(const WebStorageOperation* result) { \
			status = OpStatus::OK;\
			if (test_status != NULL && test_status->IsTestRunning()) \
				status = HandleOperationCustom(result); \
			return status; \
		} \
		OP_STATUS HandleOperationCustom(const WebStorageOperation* result) {\
			WebStorageBackend_SimpleImpl*& wsb = test_status->m_wsb; \
			unsigned global_callback_count = test_status->m_global_callback_count++; \
			unsigned mutation_count = test_status->state_listener.mutation_count; \
			QuotaTestDocListener& test_listener = *test_status->m_test_listener; \
			if (wsb == NULL) return OpStatus::ERR; \
			void*& args = m_args; \
			IgnorePtr(args); \
			IgnorePtr(wsb); \
			IgnorePtr(global_callback_count);\
			IgnorePtr(mutation_count);\
			IgnorePtr(&test_listener);
			//dbg_printf(#type "::HandleCallbackCustom(%d,%x)\n",global_callback_count,result->m_type);

#undef CALLBACK_OPERATION_SECTION_END
#define CALLBACK_OPERATION_SECTION_END(type) return OpStatus::OK;}};

#undef ENUMERATOR_SECTION_START
#define ENUMERATOR_SECTION_START(type) \
	class type : public WebStorageKeyEnumerator, public TestStatusLinkBase { \
		OP_STATUS status; \
		unsigned last_index; \
	public: \
		type(TestStatus *_test_status) : TestStatusLinkBase(_test_status), last_index(0) { \
			test_status->AddCallback(this);\
		} \
		virtual ~type() {}\
		virtual void Discard() { \
			if (test_status != NULL) { \
				TestStatus* _test_status = test_status; \
				test_status = NULL; \
				_test_status->RemoveCallback(this);\
				if (_test_status->NumberOfRunningCallbacks()<1 && _test_status->IsTestRunning()) { \
					_test_status->Finish(); \
					ST_passed(); \
				} \
			} \
			OP_DELETE(static_cast<TestStatusLinkBase*>(this)); \
		} \
		virtual void HandleError(OP_STATUS status) { OpStatus::Ignore(HandleErrorCustom(status)); } \
		OP_STATUS HandleErrorCustom(OP_STATUS status) { \
			OP_ASSERT(OpStatus::IsError(status)); \
			WEBSTORAGE_VERIFY(!"an error occurred"); \
			return OpStatus::OK; \
		} \
		virtual BOOL WantsValues() { return TRUE; } \
		virtual OP_STATUS HandleKey(unsigned index, const WebStorageValue* key, const WebStorageValue* value) { \
			status = OpStatus::OK;\
			if (test_status != NULL && test_status->IsTestRunning()) \
				status = HandleKeyCustom(index, key, value); \
			return status; \
		} \
		OP_STATUS HandleKeyCustom(unsigned index, const WebStorageValue* key, const WebStorageValue* value) {\
			WebStorageBackend_SimpleImpl*& wsb = test_status->m_wsb; \
			if (wsb == NULL) return OpStatus::ERR; \
			WEBSTORAGE_VERIFY(index == last_index++); \
			IgnorePtr(wsb);

#undef ENUMERATOR_SECTION_END
#define ENUMERATOR_SECTION_END(type) return OpStatus::OK;}};

#undef CALLBACK_OBJECT_DECL
#define CALLBACK_OBJECT_DECL(type, var_name) \
	type* var_name = OP_NEW(type, (test_status)); \
	WEBSTORAGE_VERIFY(var_name != NULL);

#undef CALLBACK_OBJECT_DECL_WARGS
#define CALLBACK_OBJECT_DECL_WARGS(type, var_name, args) \
	type* var_name = OP_NEW(type, (test_status, args)); \
	WEBSTORAGE_VERIFY(var_name != NULL);

#undef ASYNC_TEST_START
#define ASYNC_TEST_START \
	class ASYNC_TEST_WRAP_TEMP{\
	public:\
		static OP_STATUS do_test(List<TestStatus>* all_status, OpTestcasePolicy_1& test_case_policy_1, QuotaTestDocListener& test_listener) { \
		OP_STATUS status = OpStatus::OK;\
		OpStatus::Ignore(status);\
		TestStatus* test_status = TestStatus::Create(all_status); \
		WEBSTORAGE_VERIFYL(test_status != NULL);\
		test_status->m_test_listener = &test_listener; \
		WebStorageBackend_SimpleImpl*& wsb = test_status->m_wsb; \
		PS_Manager*& ps_manager = test_status->m_ps_manager; \
		ps_manager = PS_Manager::NewForSelfTest(); \
		if (ps_manager == NULL) WEBSTORAGE_VERIFYL(!"OOM"); \
		status = GetWebStorageObject(ps_manager, PS_ObjectTypes::KLocalStorage, &wsb); \
		WEBSTORAGE_VERIFYL(OpStatus::IsSuccess(status)); \
		WEBSTORAGE_VERIFYL(wsb); \
		wsb->AddListener(&test_status->state_listener); \
		IgnorePtr(wsb);

#undef ASYNC_TEST_END
#define ASYNC_TEST_END return OpStatus::OK;}}; \
	OpStatus::Ignore(ASYNC_TEST_WRAP_TEMP::do_test(&all_status, test_case_policy_1, test_listener));

	class OpTestcasePolicy_1 : public OpDefaultGlobalPolicy
	{
	public:
		OpTestcasePolicy_1(PS_Policy* parent = NULL) : OpDefaultGlobalPolicy(parent), m_handling(PS_Policy::KQuotaAskUser), m_origin_quota(8*1024){}
		virtual ~OpTestcasePolicy_1() {}

		virtual OpFileLength GetAttribute(SecAttrUint64 attr, URL_CONTEXT_ID context_id, const uni_char* domain = NULL, const Window* window = NULL) const
		{
			switch(attr) {
			case KGlobalQuota:
				return 32*1024;
			case KOriginQuota:
				return m_origin_quota;
			}
			return OpDefaultGlobalPolicy::GetAttribute(attr, context_id, domain, window);
		}
		virtual unsigned GetAttribute(SecAttrUint attr, URL_CONTEXT_ID context_id, const uni_char* domain = NULL, const Window* window = NULL) const
		{
			if (attr == KOriginExceededHandling)
				return m_handling;
			return OpDefaultGlobalPolicy::GetAttribute(attr, context_id, domain, window);
		}
		virtual OP_STATUS SetAttribute(SecAttrUint64 attr, URL_CONTEXT_ID context_id, OpFileLength new_value, const uni_char* domain = NULL, const Window* window = NULL)
		{
			if (attr == KOriginQuota)
				m_origin_quota = new_value;
			return OpStatus::OK;
		}
		virtual OP_STATUS SetAttribute(SecAttrUint attr, URL_CONTEXT_ID context_id, unsigned new_value, const uni_char* domain = NULL, const Window* window = NULL)
		{
			if (attr == KOriginExceededHandling)
				m_handling = static_cast<PS_Policy::QuotaHandling>(new_value);
			return OpStatus::OK;
		}

		PS_Policy::QuotaHandling m_handling;
		OpFileLength m_origin_quota;
	};

	OpTestcasePolicy_1 test_case_policy_1;

	// replace the normal OpDocumentListener with a special one for tests
	QuotaTestDocListener test_listener;

	static OP_STATUS GetWebStorageObject(PS_Manager* ps_manager, PS_ObjectTypes::PS_ObjectType type, WebStorageBackend_SimpleImpl** ws)
	{
		PS_Object* ps_obj;
		RETURN_IF_ERROR(ps_manager->GetObject(type, WEBDB_SELFTEST_ORIGIN, NULL, TRUE, SELFTEST_URLCTXID, &ps_obj));
		*ws = static_cast<WebStorageBackend_SimpleImpl*>(ps_obj);
		return OpStatus::OK;
	}

# undef KEY_REAL_SIZE_TO_INTERNAL_SIZE
# define KEY_REAL_SIZE_TO_INTERNAL_SIZE(n) (((n) - 21) * 3 / 8)
}

setup
{
	DATABASE_MODULE_ADD_CONTEXT(0, OPFILE_PERSISTENT_STORAGE_FOLDER);
}

test("local storage simple insert and deny")
	async;
{
	test_listener.ReplaceListener();

	ASYNC_TEST_START;

		WEBSTORAGE_VERIFY(OpStatus::IsSuccess(WEBSTORAGE_CLEAR_ALL(wsb, NULL)));

		test_case_policy_1.m_origin_quota = 16*1024;
		wsb->SetPolicy(&test_case_policy_1);

		CALLBACK_OPERATION_SECTION_START(CB_0)

			CALLBACK_OPERATION_SECTION_START(CB_1)

				WEBSTORAGE_VERIFY(result);
				WEBSTORAGE_VERIFY_RES_ERROR(TRUE, result);
				WEBSTORAGE_VERIFY(PS_Status::ERR_QUOTA_EXCEEDED == result->m_error_data.m_error);

			CALLBACK_OPERATION_SECTION_END(CB_1)
			CALLBACK_OBJECT_DECL(CB_1, cb_1)

			WEBSTORAGE_VERIFY(result);
			WEBSTORAGE_VERIFY_RES_ERROR(FALSE, result);

			const static unsigned str_len = KEY_REAL_SIZE_TO_INTERNAL_SIZE(8*1024);
			uni_char big_str[str_len + 1]; /* ARRAY OK 2010-03-22 joaoe */
			op_memset(big_str, 'b', UNICODE_SIZE(str_len));
			big_str[str_len] = 0;

			WebStorageValueTemp key(big_str, str_len);
			WebStorageValueTemp value(big_str, str_len);

			//adding more 16Kb -> overflow ! bum !
			WEBSTORAGE_VERIFY(OpStatus::IsSuccess(wsb->SetItem(&key, &value, cb_1)));

		CALLBACK_OPERATION_SECTION_END(CB_0)
		CALLBACK_OBJECT_DECL(CB_0, cb_0)

		const static unsigned str_len = KEY_REAL_SIZE_TO_INTERNAL_SIZE(4*1024);
		uni_char big_str[str_len + 1]; /* ARRAY OK 2010-03-22 joaoe */
		op_memset(big_str, 'a', UNICODE_SIZE(str_len));
		big_str[str_len] = 0;

		WebStorageValueTemp key(big_str, str_len);
		WebStorageValueTemp value(big_str, str_len);

		//adding 8 Kbs
		WEBSTORAGE_VERIFY(OpStatus::IsSuccess(wsb->SetItem(&key, &value, cb_0)));

	ASYNC_TEST_END;
}

test("local storage simple insert, allow and deny")
	async;
{
	test_listener.ReplaceListener();

	ASYNC_TEST_START;

		WEBSTORAGE_VERIFY(OpStatus::IsSuccess(WEBSTORAGE_CLEAR_ALL(wsb, NULL)));
		wsb->SetPolicy(&test_case_policy_1);

		test_case_policy_1.m_handling = PS_Policy::KQuotaAskUser;
		test_case_policy_1.m_origin_quota = 16*1024;
		test_listener.SetUserReply(PS_Policy::KQuotaAskUser, 32*1024);

		CALLBACK_OPERATION_SECTION_START(CB_0)

			CALLBACK_OPERATION_SECTION_START(CB_1)

				CALLBACK_OPERATION_SECTION_START(CB_2)

					WEBSTORAGE_VERIFY(result);
					WEBSTORAGE_VERIFY_RES_ERROR(TRUE, result);

					WEBSTORAGE_VERIFY(PS_Status::ERR_QUOTA_EXCEEDED == result->m_error_data.m_error);

				CALLBACK_OPERATION_SECTION_END(CB_2)
				CALLBACK_OBJECT_DECL(CB_2, cb_2)

				WEBSTORAGE_VERIFY(result);
				WEBSTORAGE_VERIFY_RES_ERROR(FALSE, result);

				test_listener.SetUserReply(PS_Policy::KQuotaDeny, 0);

				const static unsigned str_len = KEY_REAL_SIZE_TO_INTERNAL_SIZE(9*1024);
				uni_char big_str[str_len + 1]; /* ARRAY OK 2010-03-22 joaoe */
				op_memset(big_str, 'a', UNICODE_SIZE(str_len));
				big_str[str_len] = 0;

				WebStorageValueTemp key(big_str, str_len);
				WebStorageValueTemp value(big_str, str_len);

				//3rd insert -> from 24Kb to ~34Kb overflows quota by small margin
				WEBSTORAGE_VERIFY(OpStatus::IsSuccess(wsb->SetItem(&key, &value, cb_2)));

			CALLBACK_OPERATION_SECTION_END(CB_1)
			CALLBACK_OBJECT_DECL(CB_1, cb_1)

			WEBSTORAGE_VERIFY(result);
			WEBSTORAGE_VERIFY_RES_ERROR(FALSE, result);

			const static unsigned str_len = KEY_REAL_SIZE_TO_INTERNAL_SIZE(8*1024);
			uni_char big_str[str_len + 1]; /* ARRAY OK 2010-03-22 joaoe */
			op_memset(big_str, 'a', UNICODE_SIZE(str_len));
			big_str[str_len] = 0;

			WebStorageValueTemp key(big_str, str_len);
			WebStorageValueTemp value(big_str, str_len);

			//second insert -> 16Kb, all fine -> adds up to 24Kb, overflows 16Kb quota
			//allow increase up to 32kb
			WEBSTORAGE_VERIFY(OpStatus::IsSuccess(wsb->SetItem(&key, &value, cb_1)));

		CALLBACK_OPERATION_SECTION_END(CB_0)
		CALLBACK_OBJECT_DECL(CB_0, cb_0)

		const static unsigned str_len = KEY_REAL_SIZE_TO_INTERNAL_SIZE(4*1024);
		uni_char big_str[str_len + 1]; /* ARRAY OK 2010-03-22 joaoe */
		op_memset(big_str, 'a', UNICODE_SIZE(str_len));
		big_str[str_len] = 0;

		WebStorageValueTemp key(big_str, str_len);
		WebStorageValueTemp value(big_str, str_len);

		//first insert -> 8Kb, all fine
		WEBSTORAGE_VERIFY(OpStatus::IsSuccess(wsb->SetItem(&key, &value, cb_0)));

	ASYNC_TEST_END;
}

exit
{
	test_listener.ResetListener();
	DeleteAllStatus();
}
