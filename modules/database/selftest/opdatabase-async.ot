/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2009 Opera Software AS.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 */

 /*
 Semi clone of opdatabase.ot,but here all tests are asynchronous
 */

group "database.opdatabase.async";

require init;
require SUPPORT_DATABASE_INTERNAL;

language c++;

include "modules/database/opdatabase.h";
include "modules/sqlite/sqlite3.h";
include "modules/hardcore/timer/optimer.h";

global
{
	PS_Manager *ps_manager;
	OP_STATUS status;

	//each instance stores the status of a single test
	Head all_status;
	class TestStatus;
	class TestStatusLinkBase : public Link
	{
	public:
		TestStatus *test_status;
		TestStatusLinkBase(TestStatus* _test_status) : test_status(_test_status) {}
		~TestStatusLinkBase() {}
	};
	class TestStatus: public Link, public OpTimer, public OpTimerListener
	{
		unsigned m_flags;
		enum TestStatusFlags {IS_RUNNING=1,CAN_DELETE=2,BEGIN_DELETED=4};

		BOOL GetFlag(unsigned flag) const { return (m_flags & flag) != 0; }

		void SetFlag(unsigned flag) { m_flags |= flag; }

		void UnsetFlag(unsigned flag) { m_flags &= ~flag; }

		Head callbacks;
		TestStatus* test_status;
	public:
		WSD_Database* m_db;
		SqlTransaction* m_transaction;
		SqlTransaction* m_transaction_2;
		unsigned m_global_callback_count;

		TestStatus(Head* h) : m_flags(IS_RUNNING),
			test_status(this), m_db(NULL),
			m_transaction(NULL), m_transaction_2(NULL),
			m_global_callback_count(0)
		{
			Into(h);
			SetTimerListener(this);
			Start(2000); // Start the timer.
		}
		static TestStatus* Create(Head* h)
		{
			return OP_NEW(TestStatus, (h));
		}
		~TestStatus() {
			OP_ASSERT(!GetFlag(BEGIN_DELETED));
			SetFlag(BEGIN_DELETED);
			Out();
			Finish();
			TestStatusLinkBase *n = static_cast<TestStatusLinkBase*>(callbacks.First()), *m;
			while(n != NULL) {
				m = static_cast<TestStatusLinkBase*>(n->Suc());
				n->test_status = NULL;
				n->Out();
				OP_DELETE(n);
				n = m;
			}
		}

		virtual void OnTimeOut(OpTimer* timer) { OpStatus::Ignore(OnTimeOut()); }
		OP_STATUS OnTimeOut();

		void Finish() {
			UnsetFlag(IS_RUNNING);
			if (m_transaction != NULL) {
				SqlTransaction *transaction = m_transaction;
				m_transaction = NULL;
				OpStatus::Ignore(transaction->Release());
			}
			if (m_transaction_2 != NULL) {
				SqlTransaction *transaction = m_transaction_2;
				m_transaction_2 = NULL;
				OpStatus::Ignore(transaction->Release());
			}
			if (m_db != NULL) {
				WSD_Database *db = m_db;
				m_db = NULL;
				OpStatus::Ignore(db->Release());
			}
		}
		BOOL IsTestRunning() const{
			return GetFlag(IS_RUNNING);
		}
		void AddCallback(TestStatusLinkBase *callback) {
			callback->Into(&callbacks);
			callback->test_status = this;
		}
		void RemoveCallback(TestStatusLinkBase *callback) {
			callback->test_status = NULL;
			callback->Out();
			if (!HasRunningCallbacks() && GetFlag(CAN_DELETE) )
				if (!GetFlag(BEGIN_DELETED))
					OP_DELETE(this);
		}
		BOOL HasRunningCallbacks() const{return callbacks.First() != NULL;}
		unsigned NumberOfRunningCallbacks() const{return callbacks.Cardinal();}
		void SetCanDelete() {
			SetFlag(CAN_DELETE);
			if (!IsTestRunning() || !HasRunningCallbacks() )
				if (!GetFlag(BEGIN_DELETED))
					OP_DELETE(this);
		}
	};
	void DeleteAllStatus()
	{
		TestStatus* n = (TestStatus*)all_status.First();
		while(n != NULL)
		{
			TestStatus *m = (TestStatus*)n->Suc();
			n->Out();
			n->SetCanDelete();
			n = m;
		}
		OP_ASSERT(all_status.First() == NULL);
	}

	static BOOL _verify(BOOL b, unsigned line_number, const char *msg, TestStatus *test_status) {
		if(!b && test_status != NULL && test_status->IsTestRunning()) {
			test_status->Finish();
			char buf[1000]={0}; /* ARRAY OK 2009-04-16 joaoe */
			op_snprintf(buf,999,"\b\b\b%d: %s should be true", line_number, msg);
			ST_failed(buf);
		}
		return b;
	}

	static BOOL _verify(const void* p, unsigned line_number, const char *msg, TestStatus *test_status) {
		return _verify(p != NULL, line_number, msg, test_status);
	}

	static void IgnorePtr(const void*p) { }
	static void IgnorePtr(int p) { }

#undef verify
#define verify(b) do{ \
	if(!_verify(b,__LINE__,#b,test_status)) {return OpStatus::ERR;} }while(0)

#undef verifyl
#define verifyl(b) do{ \
	if(!_verify(b,0       ,#b,test_status)) {return OpStatus::ERR;} }while(0)

	OP_STATUS TestStatus::OnTimeOut()
	{
		verify(!"Test timed out");
		return OpStatus::OK;
	}

#undef SELFTEST_URLCTXID
#define SELFTEST_URLCTXID 0
#undef WEBDB_SELFTEST_ORIGIN
#define WEBDB_SELFTEST_ORIGIN UNI_L("http://opera.selftest")

#undef SQL_WRAP
#define SQL_WRAP(s) SqlText(SqlText::CONST_16BIT, UNI_L(s), sizeof(s) - 1)

//callback section common to success and error callbacks
#undef CALLBACK_SECTION_START
#define CALLBACK_SECTION_START(type, argument) \
	class type : public SqlStatement::Callback, public TestStatusLinkBase { \
		OP_STATUS status; \
	public: \
		type(TestStatus *_test_status) : TestStatusLinkBase(_test_status) { \
			test_status->AddCallback(this);\
		} \
		virtual ~type() {}\
		virtual void Discard() { \
			if (test_status != NULL) { \
				TestStatus* _test_status = test_status; \
				if (_test_status->NumberOfRunningCallbacks()<=1) { \
					_test_status->Finish(); \
					ST_passed(); \
				} \
				_test_status->RemoveCallback(this);\
				test_status = NULL; \
			} \
			OP_DELETE(static_cast<TestStatusLinkBase*>(this)); \
		} \
		virtual BOOL RequiresCaching() const{ return FALSE; } \
		virtual OP_STATUS HandleCallback(SqlResultSet* result_set) { \
			status = OpStatus::OK;\
			if (test_status != NULL && test_status->IsTestRunning()) \
				status = HandleCallbackCustom(result_set); \
			OP_DELETE(result_set); \
			return status; \
		} \
		virtual Window*	GetWindow() { return g_selftest.utils->GetWindow(); } \
		virtual OpFileLength GetPreferredSize() { return 32000; } \
		const uni_char* GetDisplayName() { return NULL; } \
		virtual OP_STATUS HandleError(OP_STATUS error, const uni_char* error_message, BOOL is_fatal) { \
			output("Error code: %d %S\n", error, error_message); \
			OP_DELETEA(const_cast<uni_char*>(error_message)); \
			verify(!"Error callback called"); \
			return OpStatus::ERR; \
		} \
		OP_STATUS HandleCallbackCustom(SqlResultSet* result_set) {\
			WSD_Database*& db = test_status->m_db; \
			SqlTransaction*& transaction = test_status->m_transaction;\
			SqlTransaction*& transaction_2 = test_status->m_transaction_2;\
			if (transaction == NULL) return OpStatus::ERR; \
			unsigned global_callback_count = test_status->m_global_callback_count++; \
			IgnorePtr(db);\
			IgnorePtr(transaction);\
			IgnorePtr(transaction_2);\
			IgnorePtr(global_callback_count);
			//dbg_printf(#type "::HandleCallbackCustom(%d,%x)\n",argument,argument);

#undef CALLBACK_SECTION_END
#define CALLBACK_SECTION_END(type) return OpStatus::OK;}};

//error callback section
#undef CALLBACK_ERROR_SECTION_START
#define CALLBACK_ERROR_SECTION_START(type, argument) \
	class type : public SqlStatement::Callback, public TestStatusLinkBase { \
		OP_STATUS status; \
	public: \
		type(TestStatus *_test_status) : TestStatusLinkBase(_test_status) { \
			test_status->AddCallback(this);\
		} \
		virtual ~type() {}\
		virtual void Discard() { \
			if (test_status != NULL) { \
				TestStatus* _test_status = test_status; \
				if (_test_status->NumberOfRunningCallbacks()<=1) { \
					_test_status->Finish(); \
					ST_passed(); \
				} \
				_test_status->RemoveCallback(this);\
				test_status = NULL; \
			} \
			OP_DELETE(static_cast<TestStatusLinkBase*>(this)); \
		} \
		virtual BOOL RequiresCaching() const{ return FALSE; } \
		virtual OP_STATUS HandleCallback(SqlResultSet* result_set) { \
			verify(!"Error callback should have been called instead"); \
			OP_DELETE(result_set); \
			return OpStatus::ERR; \
		} \
		virtual Window*	GetWindow() { return g_selftest.utils->GetWindow(); } \
		virtual OpFileLength GetPreferredSize() { return 32000; } \
		const uni_char* GetDisplayName() { return NULL; } \
		virtual OP_STATUS HandleError(OP_STATUS error, const uni_char* error_message, BOOL is_fatal) { \
			status = OpStatus::OK;\
			if (test_status != NULL && test_status->IsTestRunning()) \
				status = HandleErrorCustom(error, error_message); \
			OP_DELETEA(const_cast<uni_char*>(error_message)); \
			return status; \
		} \
		OP_STATUS HandleErrorCustom(OP_STATUS argument, const uni_char* error_message) { \
			WSD_Database*& db = test_status->m_db; \
			SqlTransaction*& transaction = test_status->m_transaction;\
			SqlTransaction*& transaction_2 = test_status->m_transaction_2;\
			if (transaction == NULL) return OpStatus::ERR; \
			unsigned global_callback_count = test_status->m_global_callback_count++; \
			IgnorePtr(db);\
			IgnorePtr(transaction);\
			IgnorePtr(transaction_2);\
			IgnorePtr(global_callback_count);
			//dbg_printf(#type "::HandleCallbackCustom(%d,%x)\n",argument,argument);

#define CALLBACK_ERROR_SECTION_END(type) CALLBACK_SECTION_END(type)

#define CALLBACK_OBJECT_DECL(type, var_name) \
	type* var_name = OP_NEW(type, (test_status)); \
	verify(var_name != NULL);

#define ASYNC_TEST_START_(do_early_release) \
	class ASYNC_TEST_WRAP_TEMP{\
	public:\
		static OP_STATUS do_test(PS_Manager *ps_manager, Head* all_status) { \
			OP_STATUS status = OpStatus::OK;\
			OpStatus::Ignore(status);\
			TestStatus* test_status = TestStatus::Create(all_status); \
			verifyl(test_status != NULL); \
			WSD_Database*& db = test_status->m_db; \
			SqlTransaction*& transaction = test_status->m_transaction; \
			SqlTransaction*& transaction_2 = test_status->m_transaction_2; \
			PS_Object* ps_obj = NULL; \
			verifyl(OpStatus::IsSuccess(ps_manager->GetObject(PS_ObjectTypes::KWebDatabases,WEBDB_SELFTEST_ORIGIN,UNI_L("name"),FALSE,SELFTEST_URLCTXID,&ps_obj))); \
			db = static_cast<WSD_Database*>(ps_obj); \
			transaction = db->CreateTransactionAsync(FALSE); \
			verifyl(transaction != NULL); \
			if (do_early_release) { db->Release(); db = NULL; } \
			IgnorePtr(db);\
			IgnorePtr(transaction);\
			IgnorePtr(transaction_2);

#undef ASYNC_TEST_START
#define ASYNC_TEST_START ASYNC_TEST_START_(1)

#undef ASYNC_TEST_END
#define ASYNC_TEST_END return OpStatus::OK;}}; \
	OpStatus::Ignore(ASYNC_TEST_WRAP_TEMP::do_test(ps_manager,&all_status));

	static void result_set_step(SqlResultSet* result_set, BOOL &result, OP_STATUS &status)
	{
		TRAP(status,result = result_set->StepL());
	}
}

setup
{
	DATABASE_MODULE_ADD_CONTEXT(0, OPFILE_PERSISTENT_STORAGE_FOLDER);
}

test("manager setup")
{
	verify_not_oom(ps_manager = PS_Manager::NewForSelfTest());
}

test("Transactions") async;
{
	ASYNC_TEST_START_(0);

	CALLBACK_SECTION_START(SqlCallback_1_a,result_set)

		CALLBACK_SECTION_START(SqlCallback_2,result_set)

			CALLBACK_SECTION_START(SqlCallback_3,result_set)

				CALLBACK_SECTION_START(SqlCallback_4,result_set)

					verify(global_callback_count == 5);
					verify(!transaction->GetFlag(SqlTransaction::HAS_ROLLBACK_SEGMENT));

				CALLBACK_SECTION_END(SqlCallback_4)
				CALLBACK_OBJECT_DECL(SqlCallback_4,cb4);

				verify(global_callback_count == 4);
				verify(transaction->GetFlag(SqlTransaction::HAS_ROLLBACK_SEGMENT));

				verify(OpStatus::IsSuccess(transaction->Commit(cb4)));

			CALLBACK_SECTION_END(SqlCallback_3)
			CALLBACK_OBJECT_DECL(SqlCallback_3,cb3);

			verify(global_callback_count == 1);
			verify(!transaction->GetFlag(SqlTransaction::HAS_ROLLBACK_SEGMENT));

			verify(OpStatus::IsSuccess(transaction->Begin(cb3)));

		CALLBACK_SECTION_END(SqlCallback_2)
		CALLBACK_OBJECT_DECL(SqlCallback_2,cb2);

		verify(global_callback_count == 0);
		verify(transaction->GetFlag(SqlTransaction::HAS_ROLLBACK_SEGMENT));

		verify(OpStatus::IsSuccess(transaction->Rollback(cb2)));

	CALLBACK_SECTION_END(SqlCallback_1_a)


	CALLBACK_SECTION_START(SqlCallback_1_b,result_set)

		CALLBACK_SECTION_START(SqlCallback_2,result_set)

			verify(global_callback_count == 3);
			verify(!transaction_2->GetFlag(SqlTransaction::HAS_ROLLBACK_SEGMENT));

		CALLBACK_SECTION_END(SqlCallback_2)
		CALLBACK_OBJECT_DECL(SqlCallback_2,cb2);

		verify(global_callback_count == 2);
		verify(transaction_2->GetFlag(SqlTransaction::HAS_ROLLBACK_SEGMENT));

		verify(OpStatus::IsSuccess(transaction_2->Rollback(cb2)));

	CALLBACK_SECTION_END(SqlCallback_1_b)


	CALLBACK_OBJECT_DECL(SqlCallback_1_a,cb1_a);
	CALLBACK_OBJECT_DECL(SqlCallback_1_b,cb1_b);


	verify(OpStatus::IsSuccess(transaction->Begin(cb1_a)));

	transaction_2 = db->CreateTransactionAsync(FALSE);
	verify(transaction_2 != NULL);

	verify(OpStatus::IsSuccess(transaction_2->Begin(cb1_b)));

	ASYNC_TEST_END;
}

test("Create, insert with parameters, select") async;
{
	ASYNC_TEST_START;

	//Create table callback
	CALLBACK_SECTION_START(SqlCallback_1,result_set)

		verify(result_set);

		//1st insert - check if result ok
		CALLBACK_SECTION_START(SqlCallback_2,result_set)

			verify(result_set);
			verify(result_set->GetRowsAffected()==1);

		CALLBACK_SECTION_END(SqlCallback_2)

		//2nd insert - do select
		CALLBACK_SECTION_START(SqlCallback_3,result_set)

			verify(result_set);

			//select and end
			CALLBACK_SECTION_START(SqlCallback_4,result_set)

				verify(result_set);

				BOOL result = FALSE;
				result_set_step(result_set,result,status);
				verify(OpStatus::IsSuccess(status));
				verify(result);

				verify(result_set->GetColumnCount() == 2);
				const uni_char *col_name_0 = UNI_L("not set");
				verify(result_set->GetColumnName(0,&col_name_0));
				const uni_char *col_name_1 = UNI_L("not set");;
				verify(result_set->GetColumnName(1,&col_name_1));

				verify(0==uni_strcmp(col_name_0, UNI_L("id")));
				verify(0==uni_strcmp(col_name_1, UNI_L("data")));

				SqlValue data_0;
				verify(OpStatus::IsSuccess(result_set->GetValueAtIndex(1,&data_0)));

				TRAP(status,result = result_set->StepL());
				verify(OpStatus::IsSuccess(status));
				verify(result);

				SqlValue data_1;
				verify(OpStatus::IsSuccess(result_set->GetValueAtIndex(1,&data_1)));

				verify(data_0.Type() == SqlValue::TYPE_STRING);
				verify(0==uni_strcmp(data_0.StringValue(), UNI_L("AA")));

				verify(data_1.Type() == SqlValue::TYPE_INTEGER);
				verify(data_1.IntegerValue() == 9999);

				TRAP(status,result = result_set->StepL());
				verify(OpStatus::IsSuccess(status));
				verify(!result);

			CALLBACK_SECTION_END(SqlCallback_4)
			CALLBACK_OBJECT_DECL(SqlCallback_4,cb4);

			verify(OpStatus::IsSuccess(transaction->ExecuteSql(SQL_WRAP("select * from t"), NULL, cb4)));

		CALLBACK_SECTION_END(SqlCallback_3)

		SqlValueList *params;

		{
			verify(params = SqlValueList::Make(1));
			OpAutoPtr<SqlValueList> params_ptr(params);

			verify(OpStatus::IsSuccess(params->values[0].SetString(UNI_L("AA"), 2)));

			params_ptr.release();

			CALLBACK_OBJECT_DECL(SqlCallback_2,cb2);

			//queue 1st insert
			verify(OpStatus::IsSuccess(transaction->ExecuteSql(SQL_WRAP("insert into t (data) values (?);"), params, cb2)));
		}
		{
			verify(params = SqlValueList::Make(1));

			params->values[0].SetInteger(9999);

			CALLBACK_OBJECT_DECL(SqlCallback_3,cb3);

			//queue 2nd insert
			verify(OpStatus::IsSuccess(transaction->ExecuteSql(SQL_WRAP("insert into t (data) values (?);"), params, cb3)));
		}
	CALLBACK_SECTION_END(SqlCallback_1)
	CALLBACK_OBJECT_DECL(SqlCallback_1,cb1);

	// create the table
	verify(OpStatus::IsSuccess(transaction->ExecuteSql(SQL_WRAP("create table t (id INTEGER PRIMARY KEY, data);"), NULL, cb1)));

	ASYNC_TEST_END;
}

test("Last insert id and rows affected") async;
{
	ASYNC_TEST_START;

	//Create table callback
	CALLBACK_SECTION_START(SqlCallback_1,result_set)

		verify(result_set);

		// insert 1st row
		CALLBACK_SECTION_START(SqlCallback_2,result_set)

			verify(result_set);

			//insert 2nd row
			CALLBACK_SECTION_START(SqlCallback_3,result_set)

				verify(result_set);

				//update
				CALLBACK_SECTION_START(SqlCallback_4,result_set)

					verify(result_set);

					verify(result_set->GetRowsAffected() == 2);

				CALLBACK_SECTION_END(SqlCallback_4)
				CALLBACK_OBJECT_DECL(SqlCallback_4,cb4);

				verify(result_set->LastInsertId() == 2);
				verify(result_set->GetRowsAffected() == 1);

				verify(OpStatus::IsSuccess(transaction->ExecuteSql(SQL_WRAP("update t set data = 'C';"), NULL, cb4)));

			CALLBACK_SECTION_END(SqlCallback_3)
			CALLBACK_OBJECT_DECL(SqlCallback_3,cb3);

			// sqlite's last_insert_id is not exactly predictable, under normal circumstances
			// this should work fine, but if the verify fails it doesn't necessarily mean there's something
			// wrong.
			verify(result_set->LastInsertId() == 1);
			verify(result_set->GetRowsAffected() == 1);

			verify(OpStatus::IsSuccess(transaction->ExecuteSql(SQL_WRAP("insert into t (data) values ('B');"), NULL, cb3)));

		CALLBACK_SECTION_END(SqlCallback_2)
		CALLBACK_OBJECT_DECL(SqlCallback_2,cb2);

		verify(OpStatus::IsSuccess(transaction->ExecuteSql(SQL_WRAP("insert into t (data) values ('A');"), NULL, cb2)));

	CALLBACK_SECTION_END(SqlCallback_1)
	CALLBACK_OBJECT_DECL(SqlCallback_1,cb1);

	verify(OpStatus::IsSuccess(transaction->ExecuteSql(SQL_WRAP("create table t (id INTEGER PRIMARY KEY AUTOINCREMENT, data);"), NULL, cb1)));

	ASYNC_TEST_END;
}

test("Too many parameters error") async;
{
	ASYNC_TEST_START;

	//Create table callback
	CALLBACK_SECTION_START(SqlCallback_1,result_set)

		//insert callback - should error

		CALLBACK_ERROR_SECTION_START(SqlErrorCallbackFailed_2,error_code)

			verify(error_code == PS_Status::ERR_BAD_BIND_PARAMETERS);

		CALLBACK_ERROR_SECTION_END(SqlErrorCallbackFailed_2)

		CALLBACK_OBJECT_DECL(SqlErrorCallbackFailed_2, error_cb2);

		SqlValueList *params;

		verify(params = SqlValueList::Make(2));
		OpAutoPtr<SqlValueList> params_ptr(params);

		verify(OpStatus::IsSuccess(params->values[0].SetString(UNI_L("AA"), 2)));
		verify(OpStatus::IsSuccess(params->values[1].SetString(UNI_L("BB"), 2)));

		params_ptr.release();

		verify(OpStatus::IsSuccess(transaction->ExecuteSql(SQL_WRAP("insert into t (data) values (?);"), params, error_cb2)));

	CALLBACK_SECTION_END(SqlCallback_1)
	CALLBACK_OBJECT_DECL(SqlCallback_1,cb1);

	// create the table
	verify(OpStatus::IsSuccess(transaction->ExecuteSql(SQL_WRAP("create table t (id INTEGER PRIMARY KEY, data);"), NULL, cb1)));

	ASYNC_TEST_END;
}

test("Error callback -- bad sql") async;
{
	ASYNC_TEST_START;

	//insert callback - should error
	CALLBACK_ERROR_SECTION_START(SqlErrorCallbackFailed_1, error_code)

		verify(error_code == PS_Status::ERR_BAD_QUERY);

	CALLBACK_ERROR_SECTION_END(SqlErrorCallbackFailed_1)

	CALLBACK_OBJECT_DECL(SqlErrorCallbackFailed_1, error_cb1);

	verify(OpStatus::IsSuccess(transaction->ExecuteSql(SQL_WRAP("creat able t (id INTEGER PRIMARY KEY, data);"), NULL, error_cb1)));

	ASYNC_TEST_END;
}

exit
{
	//TRAP(status,ps_manager->DumpIndexL(UNI_L("Exit")));
	DeleteAllStatus();
	OP_DELETE(ps_manager);
}
