/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2004-2007 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Testsuite for the probetimer in the probetools module.
**
** Morten Rolland, mortenro@opera.com
*/

group "probetools.timer";

require SUPPORT_PROBETOOLS;

include "modules/probetools/src/probetimer.h";
include "modules/pi/OpSystemInfo.h";

test("timing test")
{
	//we will try some timing, and then check diff.
	//if this test is shown not to be reliable, it should
	//be disabled
	
	{
		//TEST 1: timer is done outside sys, so timer should be >= sys
	
		OpProbeTimestamp timer_start;
		timer_start.timestamp_now();
		double sys_start = g_op_time_info->GetRuntimeMS();
		
		while((g_op_time_info->GetRuntimeMS() - sys_start) < 500){
			//sleep(50);
		}
		
		double sys_end = g_op_time_info->GetRuntimeMS();
		OpProbeTimestamp timer_end;
		timer_end.timestamp_now();
		
		double sys_time = sys_end - sys_start;
		OpProbeTimestamp timer_time = timer_end - timer_start;
		
		verify(timer_time.get_time() >= sys_time - 0.001);//small margine
	}
	
	{
		//TEST 2: sys is done outside timer, so timer should be <= sys
	
		double sys_start = g_op_time_info->GetRuntimeMS();
	
		OpProbeTimestamp timer_start;
		timer_start.timestamp_now();
		
		OpProbeTimestamp timer_end;
		timer_end.timestamp_now();
		OpProbeTimestamp timer_time = timer_end - timer_start;
		
		while(timer_time.get_time() < 500){
			//sleep(50);
			timer_end.timestamp_now();
			timer_time = timer_end - timer_start;
		}
		
		double sys_end = g_op_time_info->GetRuntimeMS();
		double sys_time = sys_end - sys_start;
		
		verify(sys_time >= timer_time.get_time() - 0.001);//small margine
	}
}
