syntax = "scope";

/**
 * **ResourceManager** is a tool for monitoring, modifying, and creating
 * network activity.
 *
 * ID fields
 * ---------
 *
 * - Resource IDs: a *resource* is essentially what a URL points to. For each
 *   unique URL, there is at least one unique resource ID. Resources are kept
 *   alive as long as something is using them. Note that ResourceManager does
 *   not retain resources; Opera may free resources if they are not used
 *   anywhere. An OnUrlUnload event will be sent in this case.
 *
 * - Request IDs: represents HTTP requests. The purpose of these IDs is to
 *   make it possible to match related request/response events together.
 *
 * External ID fields
 * ------------------
 *
 * - Window IDs are the same in all services, and can be used interchangeably
 *   everywhere. See *WindowManager* for window-centric commands and events.
 * - Frame IDs are described in *DocumentManager*.
 * - Document IDs are also described in *DocumentManager*.
 *
 * Changelog
 * ---------
 *
 * :1.0: Initial release.
 * :1.1: Added `GetResourceID`.
 * :1.2: Added `LoadOrigin`.
 * :1.3: Added `RequestRetry.requestID`.
 * :1.4: Added `DnsLookupStarted` & `DnsLookupFinished`.
 */
service ResourceManager
{
    option (version) = "1.4";

    /**
     * Get ResourceData for a certain resource.
     *
     * This command provides a way to get data from a resource after
     * the request has completed, or in cases where there is no request.
     *
     * It is possible to get the resource with a different content mode
     * than what has been set by SetResponseMode.
     */
    command GetResource(GetResourceArg) returns (ResourceData) = 1;

    /**
     * Choose whether resources should be allowed to load from cache,
     * or whether they should be fully downloaded over the network on
     * each reload.
     *
     * The default mode is to always load resources fully.
     */
    command SetReloadPolicy(SetReloadPolicyArg) returns (Default) = 2;

    /**
     * Choose how (and if) response data should be reported. It's possible
     * to set a filter with different settings based on MIME type.
     */
    command SetResponseMode(SetResponseModeArg) returns (Default) = 3;

    /**
     * Choose how (and if) request data should be reported. It's possible
     * to set a filter with different settings based on MIME type.
     */
    command SetRequestMode(SetRequestModeArg) returns (Default) = 4;

    /**
     * Add one or more overrides for HTTP headers. An override can be either adding
     * a new header, overwriting an existing one, or removing it completely
     * (if present).
     */
    command AddHeaderOverrides(AddHeaderOverridesArg) returns (Default) = 5;

    /**
     * Remove overrides previously added with AddHeaderOverrides.
     */
    command RemoveHeaderOverrides(RemoveHeaderOverridesArg) returns (Default) = 6;

    /**
     * Remove all overrides previously added with AddHeaderOverride.
     */
    command ClearHeaderOverrides(Default) returns (Default) = 7;

    /**
     * Create a HTTP request from scratch. It is possible to let Opera choose some
     * common headers, or control everything by hand.
     */
    command CreateRequest(CreateRequestArg) returns (ResourceID) = 8;

    /**
     * Clear cached resources, or as many of the resources as possible.
     * (Resources currently in use will not be cleared).
     */
    command ClearCache(Default) returns (Default) = 9;

    /**
     * A resource was requested by the browser.
     *
     * Depending on the protocol used it may result in OnRequest/OnResponse events.
     * When resource is loaded OnUrlFinished is sent.
     */
    event OnUrlLoad returns (UrlLoad) = 10;

    /**
     * Resource was completely loaded or failed.
     *
     * No request events should happen after this point.
     */
    event OnUrlFinished returns (UrlFinished) = 11;

    /**
     * Sent when a URL is redirect to another URL.
     * Contains both the original resource ID and the new resource ID.
     */
    event OnUrlRedirect returns (UrlRedirect) = 12;

    /**
     * The specified URL and resource ID is no longer in use
     * in the browser. Any references to them should be removed.
     *
     * @note Trying to use the resource ID after this event will not work.
     */
    event OnUrlUnload returns (UrlUnload) = 13;

    /**
     * Fired when a request is created.
     */
    event OnRequest returns (Request) = 14;

    /**
     * Fired after the request headers are composed.
     */
    event OnRequestHeader returns (RequestHeader) = 15;

    /**
     * Fired after the entire request (including payload, if any) has been
     * sent.
     */
    event OnRequestFinished returns (RequestFinished) = 16;

    /**
     * If pipelining is enabled, a request can sometimes be moved to another
     * connection if the previous connection failed, for some reason.
     *
     * In these cases, this event will fire to indicate that we are retrying
     * the same request under a new requestID.
     */
    event OnRequestRetry returns (RequestRetry) = 17;

    /**
     * Fired when data is first received from the server, before any headers
     * are parsed.
     */
    event OnResponse returns (Response) = 18;

    /**
     * Fired when headers are received and parsed.
     */
    event OnResponseHeader returns (ResponseHeader) = 19;

    /**
     * Fired when the client stops listening for a response, for example
     * because the entire response (including payload) has been downloaded or
     * the request has been aborted.
     */
    event OnResponseFinished returns (ResponseFinished) = 20;

    /**
     * Get the resource ID of a URL that is either in cache, or otherwise in use
     * (for instance currently being loaded).
     *
     * In some cases the same resource may have multiple IDs, for instance POST
     * form results. Trying to get an ID for resources with multiple IDs will
     * result in an error.
     *
     * An error will also be returned if the specified URL is not in use. Use
     * ``CreateRequest`` to generate a resource ID in this case.
     *
     * Note that setting the reload policy to NO_CACHE does not exclude the
     * use of this command. Setting the reload policy to NO_CACHE does not
     * prevent resources from entering cache, it merely prevents reloading from
     * it.
     *
     * @since 1.1
     */
    command GetResourceID(GetResourceIDArg) returns (ResourceID) = 21;

    /**
     * Fired when a resource address has not been resolved and address
     * resolving is started.
     *
     * @since 1.4
     */
    event OnDnsLookupStarted returns (DnsLookupStarted) = 22;

    /**
     * Fired when a resource address has been resolved, or failed to
     * resolve. Reason set in DnsLookupFinished::error.
     *
     * @since 1.4
     */
    event OnDnsLookupFinished returns (DnsLookupFinished) = 23;

}

message ResourceID
{
    required uint32 resourceID = 1;
}

message Header
{
    /**
     * The name of the HTTP header, for instance "Accept-Charset".
     */
    required string name = 1;

    /**
     * The value of the HTTP header, for instance "utf-8" when using
     * Accept-Charset, or "text/html; charset=utf8" for Content-Type.
     */
    required string value = 2;
}

message Content
{
    /**
     * If BYTES or DATA_URI was chosen as the transport mode, this field
     * contains the size of the data. (If, in addition, decoding was enabled,
     * the field contains the size of the decoded data).
     *
     * If STRING was chosen as the transport mode, this field contains the
     * string length (regardless of encoding), i.e. the number of characters,
     * not including zero terminator.
     */
    optional uint32 length = 1;

    /**
     * The (original) character encoding of the data (if applicable).
     */
    optional string characterEncoding = 2;

    /**
     * This field contains the data if BYTES was chosen as the transport
     * mode. If other modes were chosen, this field is not set.
     *
     * @see ContentMode::Transport
     */
    optional bytes byteData = 3;

    /**
     * This field contains the data if either STRING or DATA_URI were chosen
     * as transport mode. If some other mode was chosen, this field is not set.
     *
     * @see ContentMode::Transport
     */
    optional string stringData = 4;
}

message GetResourceArg
{
    required uint32 resourceID = 1;

    /**
     * Use this ContentMode instead of the one configured with
     * SetResponseModeArg (if any).
     */
    optional ContentMode contentMode = 2;
}

enum ReloadPolicy
{
    /**
     * Do not interfere with caching policy. This means there might
     * be no OnRequest-events from a certain URL-load if the resource
     * is cached.
     */
    DEFAULT = 1;

    /**
     * Load resources in full from the server, even if the resource is
     * unchanged and could be fetched from cache.
     */
    NO_CACHE = 2;
}

message SetReloadPolicyArg
{
    required ReloadPolicy policy = 1;
}

message ContentMode
{
    enum Transport
    {
        /**
         * Send the payload as a string.
         *
         * Selecting this transport mode  will automatically enable decoding,
         * and the string will automatically converted to the correct character
         * encoding.
         *
         * If this transport mode is used an unsuitable content type, the payload
         * will not be sent (without errors).
         */
        STRING = 1;

        /**
         * Send the payload as bytes. When this transport mode is chosen, character
         * conversion will not be performed. If the payload contains text data, it
         * will be sent in its original encoding.
         */
        BYTES = 2;

        /**
         * Send the payload as a base64-encoded data URI in the string field. When
         * this transport mode is chosen, character conversion will not be performed.
         * If the payload contains text data, it will be sent in its original encoding.
         */
        DATA_URI = 3;

        /**
         * Do not send the payload at all.
         */
        OFF = 4;
    }

    /**
     * Indicates how to send the payload.
     */
    optional Transport transport = 1 [default = 4];

    /**
     * Decode the data (for instance, decompress it, decrypt it, etc). This is
     * unrelated to character encoding.
     */
    optional bool decode = 2 [default = false];

    /**
     * Even if other conditions are met, do not send the payload if it
     * exceeds the specified amout (in bytes).
     *
     * By default, only payloads under one megabyte are sent.
     */
    optional uint32 sizeLimit = 3 [default = 1000000];
}

/**
 * Used to override the default ContentMode for resources with a
 * certain mime type.
 */
message MimeMode
{
    /**
     * The mime type, for instance 'text/plain'.
     */
    required string type = 1;

    /**
     * How to treat this mime type.
     */
    required ContentMode contentMode = 2;
}

message SetRequestModeArg
{
    /**
     * If there is no matching mode for a certain mime type, then this
     * mode will be used. If not present, no data is received by default.
     */
    optional ContentMode defaultContentMode = 1;

    /**
     * Whenever a resource matches a mime type found in this list, the
     * corresponding ContentMode is used for that resource.
     */
    repeated MimeMode mimeModeList = 2;

    /**
     * Whenever an individual part of a multipart/form-data matches a
     * type found in this list, the corresponding ContentMode is used
     * for that part.
     */
    repeated MimeMode multipartMimeModeList = 3;
}

message SetResponseModeArg
{
    /**
     * If there is no matching mode for a certain mime type, then this
     * mode will be used. If not present, no data is received by default.
     */
    optional ContentMode defaultContentMode = 1;

    /**
     * Whenever a resource matches a mime type found in this list, the
     * corresponding ContentMode is used for that resource.
     */
    repeated MimeMode mimeModeList = 2;
}

message AddHeaderOverridesArg
{
    /**
     * A list of headers to override. If the 'value' field of any Header
     * is missing, that header will be removed from the request (if present).
     */
    repeated Header headerList = 1;
}

message RemoveHeaderOverridesArg
{
    /**
     * A list of header names to remove overrides for. If there is no override
     * for a certain name, it will be ignored.
     */
    repeated string nameList = 1;
}

message CreateRequestArg
{
    message Payload
    {
        /**
         * The mime type of this payload.
         */
        required string mimeType = 1;

        /**
         * The bytes to use as the payload. If this field is set, the stringData
         * can not also be set.
         */
        optional bytes byteData = 3;

        /**
         * The string to use as the payload. This is an alternative to using bytes
         * directly. If this field is set, byteData can not also be set.
         */
        optional string stringData = 2;
    }

    /**
     * The Window to perform the request in. (The events triggered by this
     * command will appear to come from this Window).
     */
    required uint32 windowID = 1;

    /**
     * The URL to request.
     */
    required string url = 2;

    /**
     * The HTTP method, e.g. "GET", "POST".
     */
    required string method = 3;

    /**
     * Set HTTP headers for this request. When HeaderPolicy NORMAL is chosen,
     * Opera will set reasonable default headers. With HeaderPolicy NORMAL, the
     * following headers can not be set by the caller:
     *
     * - Accept-Charset
     * - Accept-Encoding
     * - Cache-Control
     * - Connection
     * - Cookie
     * - Cookie2
     * - Date
     * - Expect
     * - Host
     * - If-Range
     * - Pragma
     * - Range
     * - TE
     * - Trailer
     * - Upgrade
     * - User-Agent
     * - Via
     *
     * Use either HeaderPolicy OVERWRITE, or REPLACE to set these headers.
     */
    repeated Header headerList = 4;

    optional Payload payload = 5;

    enum HeaderPolicy
    {
        /**
         * Let's Opera choose request headers depending on how the resource is fetched.
         * Custom headers will be set but only if allowed.
         */
        NORMAL = 1;

        /**
         * Similar to NORMAL but any header in headerList will overwrite those chosen by Opera.
         */
        OVERWRITE = 2;

        /**
         * Replaces all headers with the custom ones. Care must be taken as illegal requests can
         * easily be created with this. It is primarly used for re-running a previous request with
         * the same or slighly altered headers.
         */
        REPLACE = 3;
    }

    /**
     * Controls how custom headers are handled.
     */
    optional HeaderPolicy headerPolicy = 6 [default = 1 /* NORMAL */];

    /**
     * Override the global reload policy for this resource.
     */
    optional ReloadPolicy reloadPolicy = 7 [default = 1 /* DEFAULT */];

    /**
     * Override the global request content mode for this resource.
     */
    optional ContentMode requestContentMode = 8;

    /**
     * Override the global response content mode for this resource.
     */
    optional ContentMode responseContentMode = 9;
}

/**
 * Indicates in which context a resource was needed.
 *
 * @since 1.2
 */
enum LoadOrigin
{
    /**
     * The resource was requested by XMLHttpRequest.
     */
    XHR = 1;
}

message UrlLoad
{
    enum URLType
    {
        /**
         * Type not known, should not occur.
         */
        UNKNOWN = 0;

        /**
         * HTTP protocol.
         */
        HTTP = 1;

        /**
         * HTTP protocol with SSL.
         */
        HTTPS = 2;

        /**
         * Local file access.
         */
        FILE = 3;

        /**
         * Data URIs, e.g data:text/plain,mydata
         */
        DATA = 4;

        FTP = 5;
        GOPHER = 6;
        WAIS = 7;
        NEWS = 8;
        SNEWS = 9;
        NEWSATTACHMENT = 10;
        SNEWSATTACHMENT = 11;
        EMAIL = 12;
        ATTACHMENT = 13;
        TELNET = 14;
        MAILTO = 15;
        OPERA = 16;
        JAVASCRIPT = 17;
        CONTENT_ID = 18;
        TN3270 = 19;
        SOURCE = 21;
        CLIENT = 22;
        NNTP = 23;
        NNTPS = 25;
        SHARE = 26;
        GHTTP = 27;
        TV = 28;
        EDITED = 29;
        ERROR = 30;
        DVB = 31;
        TEL = 32;
        MAIL = 33;
        IRC = 34;
        SMS = 35;
        SMSTO = 36;
        CHAT_TRANSFER = 39;
        DEVICE = 40;
        MOUNTPOINT = 41;
        WIDGET = 42;
        OBMLSERVER = 43;
        UNITE = 44;
        INTERNAL = 100;
    }

    required uint32 windowID = 1;
    optional uint32 frameID = 2;
    optional uint32 documentID = 3;
    required uint32 resourceID = 4;

    /**
     * The URL which which is about to be loaded.
     */
    required string url = 5;

    /**
     * The type of URL that was started, this can referer to a specific protocol
     * or a special URL type.
     *
     * @note More types may be added in the future, make sure the client supports that.
     */
    required URLType urlType = 6;

    /**
     * Milliseconds since Unix epoch.
     */
    required double time = 7;

    /**
     * This field may be set to provide additional information about the
     * origin of a URL load.
     *
     * If the field is not set, the origin is unknown.
     *
     * @since 1.2
     */
    optional LoadOrigin loadOrigin = 8;
}

message UrlFinished
{
    enum Result
    {
        /**
         * A URL finished loading, without problems.
         */
        FINISHED = 1;

        /**
         * A URL load failed, e.g. due to connection failure.
         */
        FAILED = 2;

        /**
         * A URL load was stopped, e.g. by user request.
         */
        STOPPED = 3;
    }

    required uint32 resourceID = 1;
    required Result result = 2;

    /**
     * Milliseconds since Unix epoch.
     */
    required double time = 3;

    /**
     * The MIME type of the resource. This information might not be available if the server
     * did not specify the MIME type, and if content detection has not yet run (or was unable
     * to detect the type).
     */
    optional string mimeType = 4;

    /**
     * The character encoding of the resource. This information might not be available if the server
     * did not specify the character encoding, and if character encoding detection has not yet run
     * (or was unable to detect the type).
     */
    optional string characterEncoding = 5;

    /**
     * The size of the body (if any).
     */
    optional uint32 contentLength = 6;
}

message UrlRedirect
{
    required uint32 fromResourceID = 1;
    required uint32 toResourceID = 2;

    /**
     * Milliseconds since Unix epoch.
     */
    required double time = 3;
}

message UrlUnload
{
    required uint32 resourceID = 1;

    /**
     * Milliseconds since Unix epoch.
     */
    required double time = 2;
}

message Request
{
    required uint32 requestID = 1;
    required uint32 resourceID = 2;
    required uint32 windowID = 3;
    optional uint32 frameID = 4;
    optional uint32 documentID = 5;
    required string url = 6;

    /**
     * Milliseconds since Unix epoch.
     */
    required double time = 7;
    required string method = 8;
}

message RequestHeader
{
    required uint32 requestID = 1;
    required uint32 resourceID = 2;

    /**
     * Milliseconds since Unix epoch.
     */
    required double time = 3;
    required string raw = 4;
    repeated Header headerList = 5;
}

message RequestFinished
{
    required uint32 requestID = 1;
    required uint32 resourceID = 2;

    /**
     * Milliseconds since Unix epoch.
     */
    required double time = 3;
    optional RequestData data = 4;
}

message RequestRetry
{
    required uint32 resourceID = 1;
    required uint32 fromRequestID = 2;
    required uint32 toRequestID = 3;
    required double time = 4;
    /**
     * fromRequestID alias
     *
     * @since 1.3
     */
    optional uint32 requestID = 5;
}

message RequestData
{
    message Part
    {
        /**
         * In multi-part, each part may have its own headers.
         */
        repeated Header headerList = 1;

        /**
         * The length of this part.
         */
        optional uint32 contentLength = 2;

        optional Content content = 3;
    }

    required uint32 requestID = 1;
    required uint32 resourceID = 2;
    optional string mimeType = 3;

    /**
     * The character encoding of the payload. Not applicable when the
     * payload is of a non-text type.
     *
     * Example: utf-8
     */
    optional string characterEncoding = 4;

    optional uint32 contentLength = 5;
    optional Content content = 6;

    /**
     * If the payload is multipart, this list contains the
     * individual parts.
     */
    repeated Part partList = 7;
}

message Response
{
    required uint32 requestID = 1;
    required uint32 resourceID = 2;

    /**
     * Milliseconds since Unix epoch.
     */
    required double time = 3;

    /**
     * HTTP response code, such as 200, 404, etc.
     */
    optional uint32 responseCode = 4;
}

message ResponseHeader
{
    required uint32 requestID = 1;
    required uint32 resourceID = 2;

    /**
     * Milliseconds since Unix epoch.
     */
    required double time = 3;
    required string raw = 4;
    repeated Header headerList = 5;
}

message ResponseFinished
{
    required uint32 requestID = 1;
    required uint32 resourceID = 2;

    /**
     * Milliseconds since Unix epoch.
     */
    required double time = 3;
    required uint32 contentLength = 4;
    optional ResourceData data = 5;
}

message ResourceData
{
    required uint32 resourceID = 1;
    required string url = 2;

    /**
     * The used mime type. This may be different from the mime type
     * advertised in the HTTP headers.
     */
    optional string mimeType = 3;

    /**
     * Original character encoding (if applicable).
     */
    optional string characterEncoding = 4;

    /**
     * Content-Length, as advertised by HTTP headers.
     */
    optional uint32 contentLength = 5;

    optional Content content = 6;
}

message GetResourceIDArg
{
    /**
     * The URL of the resource to get the ID for.
     */
    required string url = 1;
}

message DnsLookupStarted
{
    required uint32 resourceID = 1;
    /**
     * Milliseconds since Unix epoch.
     */
    required double time = 2;
}

message DnsLookupFinished
{
    enum Status
    {
        /** No error */
        NETWORK_NO_ERROR = 1;

        /** Secure socket error handled */
        ERROR_HANDLED = 2;

        /** The specified host name was not found and could not be resolved */
        HOST_ADDRESS_NOT_FOUND = 3;

        /** Operation timed out */
        TIMED_OUT = 4;

        /** Network link error */
        NETWORK_ERROR = 5;

        /** Network went down while attempting to resolve the host name */
        INTERNET_CONNECTION_CLOSED = 6;

        /** The system is temporarily without network access */
        OUT_OF_COVERAGE = 7;

        /** Out of memory. */
        OUT_OF_MEMORY = 8;
    }

    required uint32 resourceID = 1;
    /**
     * Milliseconds since Unix epoch.
     */
    required double time = 2;

    /**
     * Status of the lookup.
     */
    required Status status = 3;
}

