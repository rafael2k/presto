syntax = "scope";

/**
 * **DocumentManager** provides a way to monitor, and interact with
 * individual documents/frames in a document tree (whether they have
 * an ECMASCript environment or not).
 *
 * Example functionality includes loading URLs in a certain frame, and
 * enumerating all the documents in a certain Window.
 *
 * ID fields
 * ---------
 *
 * - Frame IDs represent the entity that contains the document. When a new
 *   URL is loaded in a frame, the document ID will change, but the frame ID
 *   will not. This makes it possible to monitor the document history for
 *   individual frames. (Please note that the document ID will not change when
 *   a frame is *re*loaded).
 * - Document ID represent the actual document. This is recreated when a new
 *   URL is loaded in its parent frame.
 *
 * External ID fields
 * ------------------
 *
 * Some IDs used in this service originate (and can be used with) other
 * services.
 *
 * - Window IDs are the same in all services, and can be used interchangeably
 *   everywhere. See *WindowManager* for window-centric commands and events.
 * - Resource IDs in this service are compatible with resource ID fields found
 *   in *ResourceManager*.
 */
service DocumentManager
{
    option (version) = "1.2";

    /**
     * Get the document tree for a Window, or for all Windows.
     */
    command ListDocuments(ListDocumentsArg) returns (DocumentList) = 1;

    /**
     * Load a URL in a specified frame.
     */
    command LoadDocument(LoadDocumentArg) returns (Default) = 2;

    /**
     * Reload the current URL for a specified frame.
     */
    command ReloadDocument(ReloadDocumentArg) returns (Default) = 3;

    /**
     * Fired when a document is about to be loaded (regardless
     * of whether the load actually succeeds).
     */
    event OnAboutToLoadDocument returns (AboutToLoadDocument) = 4;

    /**
     * Fired when a document is fully loaded (after DOM event
     * 'load' has finished).
     */
    event OnDocumentLoaded returns (DocumentLoaded) = 5;

    /**
     * Search for a text string in a certain window, or frame.
     *
     * This command will fail if used on a build which does not support
     * 'find-all' functionality, typically (non-smart) phone and TV builds.
     *
     * @since 1.1
     */
    command SearchText(SearchTextArg) returns (HighlightList) = 6;

    /**
     * Get information about the currently highlighted text, resulting from a
     * previous inline text search.
     *
     * This command will fail if used on a build which does not support
     * 'find-all' functionality, typically (non-smart) phone and TV builds.
     *
     * @since 1.1
     */
    command GetHighlights(GetHighlightsArg) returns (HighlightList) = 7;

    /**
     * Get the displayed (plain) text of a window, or document subtree. This
     * command can fail if the connected build does not support the necessary
     * text serialization feature.
     *
     * @since 1.1
     */
    command GetPageText(GetPageTextArg) returns (PageText) = 8;

    /**
     * Fired for specific events happening during document load.
     *
     * @since 1.2
     */
    event OnDocumentEvent returns (DocumentEvent) = 9;
}

message ListDocumentsArg
{
    optional uint32 windowID = 1;
}

message Document
{
    required uint32 windowID = 1;
    required uint32 frameID = 2;
    optional uint32 documentID = 3;

    /**
     * The parent frame, present only if the frame is not the
     * top level frame.
     */
    optional uint32 parentFrameID = 4;

    /**
     * Present unless this document is the top-level document
     * in the Window.
     */
    optional uint32 parentDocumentID = 5;

    /**
     * The current URL of the document.
     */
    optional string url = 6;

    /**
     * The resource used to generate this document.
     */
    optional uint32 resourceID = 7;

    /**
     * The value of the name attribute of the HTMLFrameElement. If the
     * frame does not have a name, or this document is not associated with
     * a HTMLFrameElement, this will field will not be present.
     */
    optional string frameElementName = 8;

    /**
     * The value of the id attribute of the HTMLFrameElement. If the
     * frame does not have an id, or this document is not associated with
     * a HTMLFrameElement, this will field will not be present.
     */
    optional string frameElementID = 9;
}

message DocumentList
{
    repeated Document documentList = 1;
}

message LoadDocumentArg
{
    /**
     * The window containing the frame.
     */
    required uint32 windowID = 1;
    required uint32 frameID = 2;
    required string url = 3;
}

message ReloadDocumentArg
{
    /**
     * The window containing the frame.
     */
    required uint32 windowID = 1;
    required uint32 frameID = 2;
}

message AboutToLoadDocument
{
    required uint32 windowID = 1;
    required uint32 frameID = 2;

    /**
     * The resource that is about to get loaded.
     */
    required uint32 resourceID = 3;

    /**
     * Milliseconds since Unix Epoch.
     */
    required double time = 4;

    /**
     * The parent document, present only if the frame is not the
     * top level frame.
     */
    optional uint32 parentDocumentID = 5;

    /**
     * The parent frame, present only if the frame is not the
     * top level frame.
     */
    optional uint32 parentFrameID = 6;
}

/**
 * Indicates the type of document event that is being reported.
 *
 * @since 1.2
 */
enum DocumentEventType
{
    /**
     * The notification immediately before DOMContentLoaded event is handled.
     */
    DOMCONTENTLOADED_START = 0;
    /**
     * The notification immediately after DOMContentLoaded event is handled.
     */
    DOMCONTENTLOADED_END = 1;
    /**
     * The notification immediately before load event is handled.
     */
    LOAD_START = 2;
    /**
     * The notification immediately after load event is handled.
     */
    LOAD_END = 3;
    /**
     * The notification immediately before unload event is handled.
     */
    UNLOAD_START = 4;
    /**
     * The notification immediately after unload event is handled.
     */
    UNLOAD_END = 5;
}

/**
 * Fired for specific events happening during document load.
 *
 * @since 1.2
 */
message DocumentEvent
{
    required uint32 windowID = 1;
    required uint32 frameID = 2;
    required uint32 documentID = 3;

    /**
     * The resource that was used to generate this document.
     */
    required uint32 resourceID = 4;

    /**
     * The type of event that is being reported.
     */
    required DocumentEventType eventType = 5;

    /**
     * Milliseconds since Unix epoch.
     */
    required double time = 6;
}

message DocumentLoaded
{
    required uint32 windowID = 1;
    required uint32 frameID = 2;
    required uint32 documentID = 3;
}

message SearchTextArg
{
    /**
     * Search in this window.
     */
    required uint32 windowID = 1;

    /**
     * The text string to search for.
     */
    required string text = 2;

    /**
     * If set, search only in the specified frame. The frame must be
     * part of the document tree of the previously specified window.
     */
    optional uint32 frameID = 3;
}

message GetHighlightsArg
{
    /**
     * Get highlights in this window.
     */
    required uint32 windowID = 1;

    /**
     * If set, search only in the specified frame. The frame must be
     * part of the document tree of the previously specified window.
     */
    optional uint32 frameID = 2;
}

message Node
{
    /**
     * E.g. "a", "div".
     */
    required string tag = 1;

    /**
     * Present if there is an ID attribute set.
     */
    optional string id = 2;
}

message Highlight
{
    /**
     * Which frame this highlight is in.
     */
    required uint32 frameID = 1;

    /**
     * The first common ancestor that contains the entire highlight.
     */
    optional Node node = 2;
}

message HighlightList
{
    /**
     * When searching for text in a page, we often get multiple hits. This is a
     * list of all the current hits.
     */
    repeated Highlight highlightList = 1;
}

message GetPageTextArg
{
    /**
     * Get the text in this window.
     */
    required uint32 windowID = 1;

    /**
     * If set, get the text only for the specified frame. The frame must be
     * part of the document tree of the previously specified window.
     */
    optional uint32 frameID = 2;
}

message PageText
{
    message DocumentText
    {
        /**
         * Which frame this document sits in.
         */
        required uint32 frameID = 1;

        /**
         * The document that contains this text.
         */
        required uint32 documentID = 2;

        /**
         * The (plain) text of the document.
         */
        required string text = 3;
    }

    repeated DocumentText documentTextList = 1;
}
