syntax = scope;

service TestService
{
    option (version) = "1.4";
    option (cpp_class) = OtScopeTestService;

    // NOTE: This command ID has been reserved for the selftest,
    //       it will send this ID to test for proper error handling of a non-existent command
    //command Reserved(Default) returns (Default) = 65536;

    command GetData(Default) returns (OutData) = 1;
    command SetData(InData) returns (Default) = 2;
    command Add(InAdd) returns (OutAdd) = 3;
    command Nop(Default) returns (Default) = 4;
    event OnEvent returns (Event) = 5;
    event OnNestedMessage returns (Outer) = 8;
    event OnOptionalMessage returns (Optional) = 9;
    event OnRepeatedMessage returns (Repeated) = 10;
    event OnMissingTrailMessage returns (MissingTrail) = 11;
    event OnIntMessage returns (IntegerMessage) = 12;
    event OnUintMessage returns (UnsignedIntegerMessage) = 13;
    event OnFloatMessage returns (FloatMessage) = 14;
    event OnStringMessage returns (StringMessage) = 15;
    event OnBinaryMessage returns (OnesAndZeroes) = 16;
    event OnOptionalSub returns (OptionalSub) = 17;
    event OnRepeatedInt returns (RepeatedInteger) = 18;
    event OnRepeatedFloat returns (RepeatedFloat) = 19;
    event OnRepeatedString returns (RepeatedString) = 20;
    event OnRepeatedBinary returns (RepeatedBinary) = 21;
    event OnRepeatedSub returns (RepeatedSub) = 22;
    event OnOptionalInt returns (OptionalInteger) = 23;
    event OnMissingInput returns (MissingInput) = 24;
    event OnIntAccess returns (IntAccess) = 25;
    event OnFloatAccess returns (FloatAccess) = 26;
    event OnByteAccess returns (BytesAccess) = 27;
    event OnStringAccess returns (StringAccess) = 28;
    command GetRepeatedData(GetRepeatedDataArg) returns (RepeatedData) = 29;
    event OnSizeProblem returns (MessageSizeProblem) = 30;

    /**
     * @since 1.1
     */
    event OnEnum returns (EnumData) = 31;

    /**
     * @since 1.2
     */
    command AsyncCommand(AsyncArgs) returns (AsyncData) = 32 { option cpp_response = deferred; };

    /**
     * @since 1.3
     */
    command FormatError(FormatErrorArg) returns (Default) = 33;

    /**
     * @since 1.4
     */
    command TestMixedStrings(MixedStringType) returns (MixedStringType) = 34;
    /**
     * @since 1.4
     */
    command TestMixedBytes(MixedByteType) returns (MixedByteType) = 35;

    /**
     * Trigger the "inspect element" functionality in Scope. This will trigger
     * the part that is handled in Scope only, e.g. it will not open a window
     * with Dragonfly. It *will*, however, focus Dragonfly on the desired
     * element once opened by some other means.
     *
     * @since 1.4
     */
    command InspectElement(InspectElementArg) returns (Default) = 36;
}

message InAdd
{
    repeated uint32 valueList = 1;
}

message RepeatedFloat
{
    repeated float  fuzzyList = 1;
    repeated double piList    = 2;
}

message UnsignedIntegerMessage
{
    required uint32  runtimeID = 1;
    required uint32  objectID  = 2;
    required fixed32 htmlID    = 3;
}

message Event
{
    required uint32 currentID = 1;
}

message Optional
{
    message OptionalInner
    {
        required string a = 1;
    }

    required int32         a     = 1;
    optional uint32        b     = 2;
    repeated sint32        cList = 3;
    repeated string        dList = 4;
    repeated uint32        eList = 5;
    optional OptionalInner f     = 6;
    optional OptionalInner g     = 7;
}

message BytesAccess
{
    required bytes a = 1;
}

message StringAccess
{
    required string a = 1;
}

message Repeated
{
    message RepeatedInner
    {
        optional int32  a     = 1;
        repeated string bList = 2;
        repeated bytes  cList = 3;
    }

    required int32         a     = 1;
    optional uint32        b     = 2;
    repeated sint32        cList = 3;
    repeated RepeatedInner dList = 4;
}

message FormatErrorArg
{
    required uint32 index = 1;
}

message AsyncArgs
{
	required int32 value = 1;
}

message AsyncData
{
	required int32 result = 1;
}

message StringMessage
{
    required string first  = 1;
    required string second = 2;
    required string empty  = 3;
}

message OutAdd
{
    required uint32 result = 1;
}

message RepeatedSub
{
    message RepeatedSubInner
    {
        required int32 value = 1;
    }

    repeated RepeatedSubInner itemList = 1;
}

message MissingInputSub
{
    required string a = 1;
}

message RepeatedInteger
{
    repeated uint32   runtimeIDList  = 1;
    repeated fixed32  objectIDList   = 2;
    repeated int32    windowIDList   = 3;
    repeated sint32   scriptIDList   = 4;
    repeated sfixed32 htmlIDList     = 5;
    repeated bool     activationList = 6;
}

message OutData
{
    required uint32 runtimeID = 1;
    required string name      = 2;
}

message OnesAndZeroes
{
    required bytes first = 1;
    required bytes empty = 2;
}

message IntegerMessage
{
    required uint32   runtimeID = 1;
    required fixed32  objectID  = 2;
    required int32    windowID  = 3;
    required sint32   scriptID  = 4;
    required sfixed32 htmlID    = 5;
    required bool     isActive  = 6;
}

message RepeatedBinary
{
    repeated bytes moccaList = 1;
}

message OptionalSub
{
    message OptionalSubInner
    {
        required string a = 1;
    }

    optional OptionalSubInner a = 1;
    optional OptionalSubInner b = 2;
}

message MissingInput
{
    optional uint32          a     = 1;
    optional string          b     = 2;
    optional bytes           c     = 3;
    optional MissingInputSub d     = 4;
    repeated uint32          eList = 5;
    repeated string          fList = 6;
    repeated bytes           gList = 7;
    repeated MissingInputSub hList = 8;
}

message IntAccess
{
    required int32  a = 1;
    required uint32 b = 2;
    required sint32 c = 3;
    required bool   d = 4;
    required bool   e = 5;
}

message RepeatedString
{
    repeated string descriptionList = 1;
}

message OptionalInteger
{
    optional uint32   runtimeID = 1;
    optional fixed32  objectID  = 2;
    optional int32    windowID  = 3;
    optional sint32   scriptID  = 4;
    optional sfixed32 htmlID    = 5;
    optional bool     isActive  = 6;
}

message FloatAccess
{
    required float  a = 1;
    required double b = 2;
}

message MissingTrail
{
    message Inner
    {
        required string a = 1;
    }

    optional int32  a     = 1;
    optional string b     = 2;
    optional bytes  c     = 3;
    optional Inner  d     = 4;
    repeated int32  eList = 5;
    repeated string fList = 6;
    repeated bytes  gList = 7;
    repeated Inner  hList = 8;
}

message FloatMessage
{
    required float  fuzzy = 1;
    required double pi    = 2;
    required double sqr   = 3;
    required double sci   = 4;
}

message Outer
{
    message Inner
    {
        message Innermost
        {
            required int32 a = 1;
        }

        required int32     a = 1;
        required string    b = 2;
        required Innermost c = 3;
        required bytes     d = 4;
    }

    required int32  a = 1;
    required string b = 2;
    required Inner  c = 3;
}

message InData
{
    required uint32 runtimeID = 1;
    required string title     = 2;
}

message GetRepeatedDataArg
{
	/**
	 * How many integers to send back.
	 */
    required uint32 integers = 1;

	/**
	 * How many booleans to send back.
	 */
    required uint32 booleans = 2;

	/**
	 * How many strings to send back.
	 */
    required uint32 strings  = 3;

	/**
	 * How many Nested messages to send back. Each Nested
	 * also has a list of MoreNested messages. In each of
	 * the 'n' Nested messages, there will be 'n' MoreNested
	 * messages.
	 */
	required uint32 nested  = 4;
}

message RepeatedData
{
    message Nested
    {
        message MoreNested
        {
            required int32 a = 1;
            required int32 b = 2;
            required int32 c = 3;
            required int32 d = 4;
        }

        repeated MoreNested moreNestedList = 1;
    }

    repeated uint32  integerList = 1;
    repeated bool    booleanList = 2;
    repeated string  stringList  = 3;
	repeated Nested  nestedList  = 4;
}

message MixedStringType
{
    required string type1 = 1;
    required string type2 = 2;
    optional string type3 = 3;
    optional string type4 = 4;
    repeated string type5List = 5;
    repeated string type6List = 6;
}

message MixedByteType
{
    required bytes type1 = 1;
    required bytes type2 = 2;
    optional bytes type3 = 3;
    optional bytes type4 = 4;
    repeated bytes type5List = 5;
    repeated bytes type6List = 6;
}

// Test for bug CORE-xxxx
// the sub-message SubWithSameAddress will end up with the same memory address as SameAddress and will trigger the bug
message MessageSizeProblem
{
	message SubMessage
	{
		message SameAddress
		{
			message SubWithSameAddress
			{
				required uint32 someValue = 1;
			}
			message Other
			{
				required bool isSet = 1;
			}

			required SubWithSameAddress firstMember = 1;
			repeated Other secondMemberList = 2;
		}
		repeated SameAddress sameAddressList = 1;
	}
	repeated SubMessage subMessageList = 1;
}

/**
 * @since 1.1
 */
message EnumData
{
    enum Type
    {   
        BOOL = 1;
        NUMBER = 2;
        OBJECT = 10;
    }
    enum Empty
    {
    }
    required Type type = 1;
    required Empty empty = 2;
}

/**
 * @since 1.1
 */
enum GlobalType
{
    Zero = 0;
    One = 1;
}

/**
 * @since 1.4
 */
message InspectElementArg
{
    required uint32 windowID = 1;
    required string selector = 2;
}
