syntax = "scope";

/**
 * The overlay service can overlay painted areas over a Window.
 *
 * Currently, only one overlay method is supported (`Area`), but additional
 * methods may be added in the future.
 *
 * Usage
 * -----
 *
 * Overlays are created with the `CreateOverlay` command. This command returns
 * a `overlayID`, which must be used when removing the overlay with
 * `RemoveOverlay`.
 *
 * Paint Order
 * -----------
 *
 * When creating the overlay, you must specify where the overlay should be
 * inserted into the list of overlays. It is possible to insert the overlay
 * in the front of all others, behind all others, or above/beneath a specific
 * overlay in the list.
 *
 * Area Overlay
 * ------------
 *
 * Currently, the only supported overlay method is `AREA`. In this mode, you
 * define an area of the document to be painted in a certain color. A border
 * and grid color may also be specified.
 */
service Overlay
{
    option (version) = "1.0";

    /**
     * Create a new overlay.
     */
    command CreateOverlay(CreateOverlayArg) returns (OverlayID) = 1;

    /**
     * Remove a specific overlay, or, if no overlay ID is specified, remove
     * *all* overlays for the given window.
     */
    command RemoveOverlay(RemoveOverlayArg) returns (Default) = 2;
}

enum OverlayType
{
    /**
     * The overlay will be an `AreaOverlay`.
     */
    AREA = 1;
}

enum InsertionMethod
{
    /**
     * Insert the overlay at the front. This means this overlay will be
     * rendered over all other overlays.
     */
    FRONT = 1;

    /**
     * Insert the overlay at the back. This means all other overlays will
     * be rendered over this overlay.
     */
    BACK = 2;

    /**
     * Insert an overlay in front of another overlay. This means this
     * overlay will be rendered over the other overlay.
     */
    ABOVE_TARGET = 3;

    /**
     * Insert an overlay behind another overlay. This means this overlay
     * will be rendered below the other overlay.
     */
    BELOW_TARGET = 4;
}

message Insertion
{
    /**
     * Specifies how an overlay should be inserted.
     */
    required InsertionMethod method = 1;

    /**
     * If `method` is `ABOVE_TARGET` or `BELOW_TARGET`, then this field must
     * be set, and refer to a valid overlay.
     */
    optional uint32 overlayID = 2;
}

message Area
{
    /**
     * The x-coordinate of the upper-left corner of the area, in document
     * coordinates.
     */
    required uint32 x = 1;

    /**
     * The y-coordinate of the upper-left corner of the area, in document
     * coordinates.
     */
    required uint32 y = 2;

    /**
     * The width of the area.
     */
    required uint32 w = 3;

    /**
     * The height of the area.
     */
    required uint32 h = 4;
}

message Color
{
    /**
     * The red component of the `Color`. (0 - 255).
     */
    required uint32 r = 1;

    /**
     * The green component of the `Color`. (0 - 255).
     */
    required uint32 g = 2;

    /**
     * The blue component of the `Color`. (0 - 255).
     */
    required uint32 b = 3;

    /**
     * The alpha component of the `Color`. (0 - 255).
     */
    optional uint32 a = 4 [default = 255];
}

message AreaOverlay
{
    /**
     * The area that should be painted.
     */
    required Area area = 1;

    /**
     * The background color of the area.
     */
    required Color backgroundColor = 2;

    /**
     * If set, draw a 1px border on the inside of the area.
     */
    optional Color borderColor = 3;

    /**
     * If set, draw a 1px wide lines intersecting the area edges
     * and extending over whole window.
     */
    optional Color gridColor  = 4;
}

message CreateOverlayArg
{
    required uint32 windowID = 1;

    /**
     * The type of overlay we want to create.
     */
    required OverlayType overlayType = 2;

    /**
     * Where to insert this overlay in the list of overlays.
     */
    required Insertion insertion = 3;

    /**
     * Must be provided if `overlayType` is `AREA`.
     */
    optional AreaOverlay areaOverlay = 4;
}

message RemoveOverlayArg
{
    required uint32 windowID = 1;

    /**
     * The ID for the overlay to remove.
     *
     * If not set, remove *all* overlays for the given window.
     */
    optional uint32 overlayID = 2 [default = 0];
}

message OverlayID
{
    /**
     * Non-zero ID for an overlay.
     */
    required uint32 overlayID = 1;
}
