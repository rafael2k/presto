syntax = scope;

message WindowCount
{
    /**
     * Signifies the number of windows to open.
     */
    required uint32 windowCount = 1;
}

/**
 * The URL player is a stress testing tool: is used to remotely command Opera to open new windows and load documents into those
 * windows.
 */
service UrlPlayer
{
    option (cpp_hfile) = "modules/scope/src/urlplayer_command.h";
    option (version) = "2.0";
    option (cpp_class) = OpScopeUrlPlayer;

    /**
     * The front end opens a number of windows under control of the URL player by issuing the `createwindows` command:
     *
     * This command generates an immediate response to the client (see section on replies below). A success
     * response carries the number of windows actually created (on some platforms it may be
     * less than requested.
     */
    command CreateWindows(WindowCount) returns (WindowCount) = 1;
    /**
     * Loads a URL into a specific window.
     *
     * A success message will be sent once loading is complete. A failure message will be sent as soon as the failure is known,
     * which means immediately in case of e.g., parse errors, and later in case it could not connect to the server.
     *
     * Note that even after a successful loading is signalled the page can continue loading, for example if a script adds inline
     * elements. There is no way for the client to tell if this is happening.
     */
    command LoadUrl(Request) returns (Window) = 2;
    event OnUrlLoaded returns (Window) = 3;
    event OnConnectionFailed returns (Window) = 4;
}

message Request
{
    /**
     * Signifies the zero-based ordinal of the window into which we want to load `url`.
     */
    required uint32 windowNumber = 1;
    required string url          = 2;
}

message Window
{
    /**
     * The window number that was the target of the LoadUrl command.
     */
    required uint32 windowID = 1;
}

