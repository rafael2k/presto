/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2011 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "scope.excepts";

require init;
require SCOPE_SUPPORT;

global
{
	OtScopeTestService *test_service = NULL;
}

setup
{
}
exit
{
	OP_DELETE(test_service);
}

language c++;

include "modules/scope/src/scope_test_service.h";
include "modules/util/adt/bytebuffer.h";
include "modules/scope/src/scope_transport.h";

test("Init")
{
	test_service = OP_NEW(OtScopeTestService, ());
	verify_not_oom(test_service);
}

test("No error")
	require success "Init";
{
	OtScopeTestService::FormatErrorArg arg;
	arg.SetIndex(0);

	verify(test_service->DoFormatError(arg) == OpStatus::OK);
}

test("OOM")
	require success "Init";
{
	OtScopeTestService::FormatErrorArg arg;
	arg.SetIndex(1);

	verify(test_service->DoFormatError(arg) == OpStatus::ERR_NO_MEMORY);
}

test("Simple error")
	require success "Init";
{
	OtScopeTestService::FormatErrorArg arg;
	arg.SetIndex(2);

	verify(test_service->DoFormatError(arg) == OpStatus::ERR);

	const OpScopeTPError &err = test_service->GetCommandError();
	verify(err.GetStatus() == OpScopeTPHeader::BadRequest);
	verify_string(err.GetDescription(), "An error ocurred");
}

test("Format one value")
	require success "Init";
{
	OtScopeTestService::FormatErrorArg arg;
	arg.SetIndex(3);

	verify(test_service->DoFormatError(arg) == OpStatus::ERR);

	const OpScopeTPError &err = test_service->GetCommandError();
	verify(err.GetStatus() == OpScopeTPHeader::BadRequest);
	verify_string(err.GetDescription(), "An error ocurred: 1337");
}

test("Format two values")
	require success "Init";
{
	OtScopeTestService::FormatErrorArg arg;
	arg.SetIndex(4);

	verify(test_service->DoFormatError(arg) == OpStatus::ERR);

	const OpScopeTPError &err = test_service->GetCommandError();
	verify(err.GetStatus() == OpScopeTPHeader::BadRequest);
	verify_string(err.GetDescription(), "An integer: 1338");
}

test("Format three values")
	require success "Init";
{
	OtScopeTestService::FormatErrorArg arg;
	arg.SetIndex(5);

	verify(test_service->DoFormatError(arg) == OpStatus::ERR);

	const OpScopeTPError &err = test_service->GetCommandError();
	verify(err.GetStatus() == OpScopeTPHeader::BadRequest);
	verify_string(err.GetDescription(), "Two integers: 1337, 1338");
}


test("Simple error, unconditional")
{
	OtScopeTestService::FormatErrorArg arg;
	arg.SetIndex(6);

	verify(test_service->DoFormatError(arg) == OpStatus::ERR);

	const OpScopeTPError &err = test_service->GetCommandError();
	verify(err.GetStatus() == OpScopeTPHeader::BadRequest);
	verify_string(err.GetDescription(), "An error ocurred");
}

test("Format one value, unconditional")
{
	OtScopeTestService::FormatErrorArg arg;
	arg.SetIndex(7);

	verify(test_service->DoFormatError(arg) == OpStatus::ERR);

	const OpScopeTPError &err = test_service->GetCommandError();
	verify(err.GetStatus() == OpScopeTPHeader::BadRequest);
	verify_string(err.GetDescription(), "An error ocurred: 1337");
}

test("Format two values, unconditional")
{
	OtScopeTestService::FormatErrorArg arg;
	arg.SetIndex(8);

	verify(test_service->DoFormatError(arg) == OpStatus::ERR);

	const OpScopeTPError &err = test_service->GetCommandError();
	verify(err.GetStatus() == OpScopeTPHeader::BadRequest);
	verify_string(err.GetDescription(), "An integer: 1338");
}

test("Format three values, unconditional")
{
	OtScopeTestService::FormatErrorArg arg;
	arg.SetIndex(9);

	verify(test_service->DoFormatError(arg) == OpStatus::ERR);

	const OpScopeTPError &err = test_service->GetCommandError();
	verify(err.GetStatus() == OpScopeTPHeader::BadRequest);
	verify_string(err.GetDescription(), "Two integers: 1337, 1338");
}
