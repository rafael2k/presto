/* -*- mode: pike; tab-width: 4 -*-
**
** Copyright (C) 2010 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
*/

group "scope.protocol_service";

// Test for the "scope" service

require init;
require SCOPE_SUPPORT;
require SCOPE_ACCEPT_CONNECTIONS;

include "modules/scope/src/scope_manager.h";
include "modules/scope/src/scope_protocol_service.h";

global
{
	OpScopeProtocolService *protocol_service;
}

setup
{
	protocol_service = g_scope_manager->scope;
	OP_ASSERT(protocol_service);
}

language c++;

test("scope.MessageInfo(): includeAll")
{
	// Calls scope.MessageInfo() to retrieve all messages and checks that certain messages are present and correctly structured
	OpScopeProtocolService::MessageSelection arg;
	verify_success(arg.SetServiceName(UNI_L("scope")));
	arg.SetIncludeAll(TRUE);

	OpScopeProtocolService::MessageInfoList out;
	verify_success(protocol_service->DoMessageInfo(arg, out));

	// Flags for each message that should be present
	// Since 1.0
	BOOL has_message_info_list = FALSE;
	BOOL has_message_info = FALSE;
	BOOL has_field_info = FALSE;
	BOOL has_service_list = FALSE;
	BOOL has_host_info = FALSE;
	BOOL has_service = FALSE;
	BOOL has_event_info = FALSE;
	BOOL has_client_info = FALSE;
	BOOL has_service_selection = FALSE;
	BOOL has_service_info = FALSE;
	BOOL has_error_info = FALSE;
	BOOL has_message_selection = FALSE;
	BOOL has_service_result = FALSE;
	BOOL has_command_info = FALSE;
	// Since 1.1
	BOOL has_enum_list = FALSE;
	BOOL has_enum = FALSE;
	BOOL has_value = FALSE;
	BOOL has_enum_arg = FALSE;

	// Message IDs
	// Since 1.0
	unsigned id_message_info_list = 0;
	unsigned id_message_info = 0;
	unsigned id_field_info = 0;
	unsigned id_service_list = 0;
	unsigned id_host_info = 0;
	unsigned id_service = 0;
	unsigned id_event_info = 0;
	unsigned id_client_info = 0;
	unsigned id_service_selection = 0;
	unsigned id_service_info = 0;
	unsigned id_error_info = 0;
	unsigned id_message_selection = 0;
	unsigned id_service_result = 0;
	unsigned id_command_info = 0;
	// Since 1.1
	unsigned id_enum_list = 0;
	unsigned id_enum = 0;
	unsigned id_value = 0;
	unsigned id_enum_arg = 0;

	// Parent IDs
	// Since 1.0
	unsigned parent_id_field_info = 0;
	// Since 1.1
	unsigned parent_id_enum = 0;
	unsigned parent_id_value = 0;

	for (unsigned i = 0; i < out.GetMessageList().GetCount(); ++i)
	{
		OpScopeProtocolService::MessageInfo *info = out.GetMessageList().Get(i);
		verify(info);
		unsigned message_id = info->GetId();
		verify(message_id != 0);
		unsigned parent_id = info->HasParentID() ? info->GetParentID() : 0;
		// Since 1.0
		if (info->GetName().Compare(UNI_L("MessageInfoList")) == 0)
		{
			verify(!info->HasParentID() || info->GetParentID() == 0);
			has_message_info_list = TRUE;
			verify(id_message_info_list == 0);
			id_message_info_list = message_id;
		}
		else if (info->GetName().Compare(UNI_L("MessageInfo")) == 0)
		{
			verify(!info->HasParentID() || info->GetParentID() == 0);
			has_message_info = TRUE;
			verify(id_message_info == 0);
			id_message_info = message_id;
		}
		else if (info->GetName().Compare(UNI_L("FieldInfo")) == 0)
		{
			verify(info->HasParentID() && info->GetParentID() != 0);
			has_field_info = TRUE;
			verify(id_field_info == 0);
			id_field_info = message_id;
			verify(parent_id_field_info == 0);
			parent_id_field_info = parent_id;
		}
		else if (info->GetName().Compare(UNI_L("ServiceList")) == 0)
		{
			verify(!info->HasParentID() || info->GetParentID() == 0);
			has_service_list = TRUE;
			verify(id_service_list == 0);
			id_service_list = message_id;
		}
		else if (info->GetName().Compare(UNI_L("EventInfo")) == 0)
		{
			verify(!info->HasParentID() || info->GetParentID() == 0);
			has_event_info = TRUE;
			verify(id_event_info == 0);
			id_event_info = message_id;
		}
		else if (info->GetName().Compare(UNI_L("Service")) == 0)
		{
			verify(!info->HasParentID() || info->GetParentID() == 0);
			has_service = TRUE;
			verify(id_service == 0);
			id_service = message_id;
		}
		else if (info->GetName().Compare(UNI_L("HostInfo")) == 0)
		{
			verify(!info->HasParentID() || info->GetParentID() == 0);
			has_host_info = TRUE;
			verify(id_host_info == 0);
			id_host_info = message_id;
		}
		else if (info->GetName().Compare(UNI_L("ClientInfo")) == 0)
		{
			verify(!info->HasParentID() || info->GetParentID() == 0);
			has_client_info = TRUE;
			verify(id_client_info == 0);
			id_client_info = message_id;
		}
		else if (info->GetName().Compare(UNI_L("ServiceSelection")) == 0)
		{
			verify(!info->HasParentID() || info->GetParentID() == 0);
			has_service_selection = TRUE;
			verify(id_service_selection == 0);
			id_service_selection = message_id;
		}
		else if (info->GetName().Compare(UNI_L("ServiceInfo")) == 0)
		{
			verify(!info->HasParentID() || info->GetParentID() == 0);
			has_service_info = TRUE;
			verify(id_service_info == 0);
			id_service_info = message_id;
		}
		else if (info->GetName().Compare(UNI_L("ErrorInfo")) == 0)
		{
			verify(!info->HasParentID() || info->GetParentID() == 0);
			has_error_info = TRUE;
			verify(id_error_info == 0);
			id_error_info = message_id;
		}
		else if (info->GetName().Compare(UNI_L("MessageSelection")) == 0)
		{
			verify(!info->HasParentID() || info->GetParentID() == 0);
			has_message_selection = TRUE;
			verify(id_message_selection == 0);
			id_message_selection = message_id;
		}
		else if (info->GetName().Compare(UNI_L("ServiceResult")) == 0)
		{
			verify(!info->HasParentID() || info->GetParentID() == 0);
			has_service_result = TRUE;
			verify(id_service_result == 0);
			id_service_result = message_id;
		}
		else if (info->GetName().Compare(UNI_L("CommandInfo")) == 0)
		{
			verify(!info->HasParentID() || info->GetParentID() == 0);
			has_command_info = TRUE;
			verify(id_command_info == 0);
			id_command_info = message_id;
		}
		// Since 1.1
		else if (info->GetName().Compare(UNI_L("EnumList")) == 0)
		{
			verify(!info->HasParentID() || info->GetParentID() == 0);
			has_enum_list = TRUE;
			verify(id_enum_list == 0);
			id_enum_list = message_id;
		}
		else if (info->GetName().Compare(UNI_L("Enum")) == 0)
		{
			verify(info->HasParentID() && info->GetParentID() != 0);
			has_enum = TRUE;
			verify(id_enum == 0);
			id_enum = message_id;
			verify(parent_id_enum == 0);
			parent_id_enum = parent_id;
		}
		else if (info->GetName().Compare(UNI_L("Value")) == 0)
		{
			verify(info->HasParentID() && info->GetParentID() != 0);
			has_value = TRUE;
			verify(id_value == 0);
			id_value = message_id;
			verify(parent_id_value == 0);
			parent_id_value = parent_id;
		}
		else if (info->GetName().Compare(UNI_L("EnumArg")) == 0)
		{
			verify(!info->HasParentID() || info->GetParentID() == 0);
			has_enum_arg = TRUE;
			verify(id_enum_arg == 0);
			id_enum_arg = message_id;
		}
	}

	// Check that all messages are present
	// Since 1.0
	verify(has_message_info_list);
	verify(has_message_info);
	verify(has_field_info);
	verify(has_service_list);
	verify(has_host_info);
	verify(has_service);
	verify(has_event_info);
	verify(has_client_info);
	verify(has_service_selection);
	verify(has_service_info);
	verify(has_error_info);
	verify(has_message_selection);
	verify(has_service_result);
	verify(has_command_info);
	// Since 1.1
	verify(has_enum_list);
	verify(has_enum);
	verify(has_value);
	verify(has_enum_arg);

	// Check parent IDs
	// Since 1.0
	verify(parent_id_field_info == id_message_info);
	// Since 1.1
	verify(parent_id_enum == id_enum_list);
	verify(parent_id_value == id_enum);
}

test("scope.EnumInfo(): includeAll")
{
	// Calls scope.EnumInfo() to retrieve all enums and checks that certain enums are present
	OpScopeProtocolService::EnumArg arg;
	verify_success(arg.SetServiceName(UNI_L("test-service")));
	arg.SetIncludeAll(TRUE);

	OpScopeProtocolService::EnumList out;
	verify_success(protocol_service->DoEnumInfo(arg, out));

	// Flags for each enums that should be present
	BOOL has_type = FALSE;
	BOOL has_global_type = FALSE;
	BOOL has_empty = FALSE;

	// Enum IDs
	unsigned id_type = 0;
	unsigned id_global_type = 0;
	unsigned id_empty = 0;

	for (unsigned i = 0; i < out.GetEnumList().GetCount(); ++i)
	{
		OpScopeProtocolService::EnumList::Enum *info = out.GetEnumList().Get(i);
		verify(info);
		unsigned enum_id = info->GetId();
		verify(enum_id != 0);
		if (info->GetName().Compare(UNI_L("Type")) == 0)
		{
			has_type = TRUE;
			verify(id_type == 0);
			id_type = enum_id;
			verify(info->GetValueList().GetCount() >= 3);
			const OpProtobufMessageVector<OpScopeProtocolService::EnumList::Enum::Value> &values = info->GetValueList();
			verify_string(values.Get(0)->GetName(), UNI_L("BOOL"));
			verify(values.Get(0)->GetNumber() == 1);
			verify_string(values.Get(1)->GetName(), UNI_L("NUMBER"));
			verify(values.Get(1)->GetNumber() == 2);
			verify_string(values.Get(2)->GetName(), UNI_L("OBJECT"));
			verify(values.Get(2)->GetNumber() == 10);
		}
		else if (info->GetName().Compare(UNI_L("GlobalType")) == 0)
		{
			has_global_type = TRUE;
			verify(id_global_type == 0);
			id_global_type = enum_id;
			verify(info->GetValueList().GetCount() >= 2);
			const OpProtobufMessageVector<OpScopeProtocolService::EnumList::Enum::Value> &values = info->GetValueList();
			verify_string(values.Get(0)->GetName(), UNI_L("Zero"));
			verify(values.Get(0)->GetNumber() == 0);
			verify_string(values.Get(1)->GetName(), UNI_L("One"));
			verify(values.Get(1)->GetNumber() == 1);
		}
		else if (info->GetName().Compare(UNI_L("Empty")) == 0)
		{
			has_empty = TRUE;
			verify(id_empty == 0);
			id_empty = enum_id;
			verify(info->GetValueList().GetCount() == 0); // Is always 0
		}
	}

	// Check that all enums are present
	verify(has_type);
	verify(has_global_type);
	verify(has_empty);
}
