To-do list for scope module
2006-09-18 / lth


General:

* Get it to work / enable it in Peregrine builds.  Right now it
  compiles and links, but the initial connect attempt fails.
  Hypothesis: network not initialized yet, need to delay connection
  attempt.  (Needs to be done anyway, see next item.)

* Reasonable registration semantics for tools inside Opera

* Get it to work / enable it on Symbian core-2 builds.

* Find a rational release structure for compiled proxy and tools

* Find a rational structure for all the Java code
  - get opinions from Per Thomas
  - not urgent

* Better Java library for client <---> proxy comm (for those not using
  ProxyConnection, eg for running the proxy in the same process as the
  client tool)

* Other tool ideas!  And implementations!

* Strategic level decisions
  - UI vs Eclipse integration
  - Full requirements


Proxy:

* Better testing of HTTPD interface, it's probably not quite reliable


JS Debugger:

* JS debugger protocol fixing and porting (big job)
  - most spec work for XML done, still a bit rough
  - some C++ side code written, still untested
  - python side must change to connect to proxy, use XML

* Make it robust when requesting non-existent objects; today,
  object exporting etc. assumes same num of objects out as sent
  in; this is not always true, and needs changing (or adding
  an "invalid object" object).

* Verify if the runtime global object stays around, so its id
  can be used instead of the window/frame id.

HTTP logger:

* Get http-logger fixes into Yngve's code in reasonable position
* Fulfill more of the requirements
* GUI that matches requests with responses, probably


URL player:

* Has some stability / termination problems still
* Crash detection?  The "quit" message is useful.


Console logger:

* GUI that allows filtering, saving to file


Probetools logger:

* GUI to display running / instantaneous / load-avg profiles
