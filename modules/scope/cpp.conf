# Configuration file for the cppgen code generator.
# cppgen is an code generator written in Python which generates cpp code
# from Protocol Buffer definitions defined in each module.
#
# Usage:
#   python modules/protobuf/cppgen/script.py [options]
#
# The directory `cppgen` contains the python files which generates the cpp code.
#
# Requires Python 2.4 or higher.

# See modules/protobuf/cpp.conf for details on customization of messages,
# fields etc.

# General options for all proto files in the current module
[options]
_Package = cpp_prefix: OpScope;

[Manager]
# A list of member varibles to place in the generated scope manager
# These fields can be sent to services by passing them as parameters
# using the cpp_construct option.
shared_fields = OpScopeIDTable<DocumentManager> frame_ids;
                OpScopeIDTable<FramesDocument> document_ids;
                OpScopeIDTable<unsigned> resource_ids;
# List of include files to place in the generated scope manager
includes = modules/scope/src/scope_idtable.h;

[TestService.options]
# test_service
TestService = cpp_file: scope_test_service;
              cpp_class: OtScopeTestService;
              cpp_feature: SELFTEST;
              cpp_defines: SCOPE_SUPPORT;

# Fields should have all helper methods by default
# The test service is only used for selftests so code-size does not matter
_Field = cpp_method: *

EnumData.Type.BOOL = cpp_name: OP_TYPE_BOOL
EnumData.Type.NUMBER = cpp_name: OP_TYPE_NUMBER
EnumData.Type.OBJECT = cpp_name: OP_TYPE_OBJECT

MixedByteType.type1 = cpp_datatype: ByteBuffer;
MixedByteType.type2 = cpp_datatype: OpData;
MixedByteType.type3 = cpp_datatype: ByteBuffer;
MixedByteType.type4 = cpp_datatype: OpData;
MixedByteType.type5List = cpp_datatype: ByteBuffer;
MixedByteType.type6List = cpp_datatype: OpData;

MixedStringType.type1 = cpp_datatype: OpString;
MixedStringType.type2 = cpp_datatype: TempBuffer;
MixedStringType.type3 = cpp_datatype: OpString;
MixedStringType.type4 = cpp_datatype: TempBuffer;
MixedStringType.type5List = cpp_datatype: OpString;
MixedStringType.type6List = cpp_datatype: TempBuffer;

# ScopeService

[ScopeService.options]
ScopeService = cpp_file: scope_service;
               cpp_class: OpScopeService;
               cpp_feature: SCOPE_SUPPORT;
               cpp_instance: false;
_Package = cpp_prefix: Op;


# Scope

[Scope.options]
Scope = cpp_file: scope_protocol_service;
        cpp_class: OpScopeProtocolService;
        cpp_feature: SCOPE_SUPPORT;
        cpp_is_essential: true;

Service.version = cpp_method: SetStringPtr
MessageInfoList.messageList = cpp_method: AppendNew
CommandInfo.name = cpp_method: SetStringPtr
EventInfo.name = cpp_method: SetStringPtr
MessageInfo.name = cpp_method: SetStringPtr
EnumList.enumList = cpp_method: AppendNew
EnumList.Enum.valueList = cpp_method: AppendNew

# Selftest

[Selftest.options]
Selftest = cpp_file: scope_selftest;
           cpp_class: OpScopeSelftest;
           cpp_feature: SELFTEST;

# HttpLogger

[HttpLogger.options]
HttpLogger = cpp_file: scope_http_logger;
             cpp_class: OpScopeHttpLogger;
             cpp_feature: SCOPE_HTTP_LOGGER;
Header.header = cpp_method: SetStringPtr

# I18n

[I18n.options]
I18n = cpp_file: scope_i18n;
       cpp_class: OpScopeI18n;
       cpp_feature: SCOPE_I18N;

String.str = cpp_method: GetRef

# Overlay

[Overlay.options]
Overlay = cpp_file: scope_overlay;
          cpp_class: OpScopeOverlay;
          cpp_feature: SCOPE_OVERLAY;

# ResourceManager

[ResourceManager.options]
ResourceManager = cpp_file: scope_resource_manager;
                  cpp_class: OpScopeResourceManager;
                  cpp_feature: SCOPE_RESOURCE_MANAGER;
                  cpp_construct: &frame_ids, &document_ids, &resource_ids;

UrlLoad.url = cpp_method: GetRef
UrlFinished.characterEncoding = cpp_method: GetRef
UrlFinished.mimeType = cpp_method: GetRef

Request.method = cpp_method: GetRef
RequestHeader.raw = cpp_method: SetStringPtr
ResponseHeader.raw = cpp_method: SetStringPtr
Header.name = cpp_method: SetStringPtr, SetUniStringPtr
Header.value = cpp_method: SetStringPtr, SetUniStringPtr
Content.StringData = cpp_method: GetRef
Content.characterEncoding = cpp_method: GetRef
Content.mimeType = cpp_method: GetRef

ResourceData.url = cpp_method: GetRef
ResourceData.mimeType = cpp_method: GetRef
ResourceData.characterEncoding = cpp_method: GetRef

RequestData.mimeType = cpp_method: GetRef
RequestData.characterEncoding = cpp_method: GetRef

# ConsoleLogger

[ConsoleLogger.options]
ConsoleLogger = cpp_file: scope_console_logger;
                cpp_class: OpScopeConsoleLogger;
                cpp_feature: SCOPE_CONSOLE_LOGGER;

ConsoleMessage.source = cpp_method: SetStringPtr
ConsoleMessage.severity = cpp_method: SetStringPtr

# CookieManager

[CookieManager.options]
CookieManager = cpp_file: scope_cookie_manager;
                cpp_class: OpScopeCookieManager;
                cpp_feature: SCOPE_COOKIE_MANAGER;
CookieList.cookieList = cpp_method: AppendNew
Cookie.name = cpp_method: SetStringPtr
Cookie.value = cpp_method: SetStringPtr
Cookie.path = cpp_method: SetStringPtr
Cookie.expires = cpp_method: GetRef
Cookie.domain = cpp_method: SetStringPtr, SetUniStringPtr

# Core

[Core.options]
Core = cpp_file: scope_core;
       cpp_class: OpScopeCore;
       cpp_feature: SCOPE_CORE

BrowserInformation.binaryPath = cpp_method: GetRef
BrowserInformation.operatingSystem = cpp_method: SetUniStringPtr
BrowserInformation.userAgent = cpp_method: SetStringPtr
BrowserInformation.product = cpp_method: SetStringPtr

# DocumentManager

[DocumentManager.options]
DocumentManager = cpp_file: scope_document_manager;
                  cpp_class: OpScopeDocumentManager;
                  cpp_feature: SCOPE_DOCUMENT_MANAGER;
                  cpp_construct: &frame_ids, &document_ids, &resource_ids;

DocumentList.documentList = cpp_method: GetRef, AppendNew
Document.url = cpp_method: GetRef

# Prefs
[Prefs.options]
Prefs = cpp_file: scope_prefs;
        cpp_class: OpScopePrefs;
        cpp_feature: SCOPE_PREFS;
Pref.value = cpp_method: GetRef
PrefValue.value = cpp_method: GetRef
Pref.prefList = cpp_method: AppendNew
Pref.section = cpp_method: SetStringPtr
Pref.key = cpp_method: SetStringPtr

# Profiler
[Profiler.options]
Profiler = cpp_hfile: modules/scope/src/scope_profiler.h;
           cpp_class: OpScopeProfiler;
           cpp_feature: SCOPE_PROFILER;
           cpp_construct: &frame_ids;

ScriptThreadEvaluationEvent.eventName = cpp_method: GetRef
Profiler.StopProfiler = cpp_response: deferred
Profiler.GetEvents = cpp_response: deferred

# Exec

[Exec.options]
Exec = cpp_file: scope_exec;
       cpp_class: OpScopeExec;
       cpp_feature: SCOPE_EXEC_SUPPORT;
ActionInfoList.ActionInfo.name = cpp_method: SetStringPtr, SetUniStringPtr

# Async commands
Exec.SetupScreenWatcher = cpp_response: deferred

# EcmascriptDebugger

[EcmascriptDebugger.options]
EcmascriptDebugger = cpp_file: scope_ecmascript_debugger;
                     cpp_class: ES_ScopeDebugFrontend;
                     cpp_feature: SCOPE_ECMASCRIPT_DEBUGGER;

EvalResult.type = cpp_method: GetRef, SetUniStringPtr
ObjectInfo.Property.type = cpp_method: GetRef, SetUniStringPtr
ConsoleLogInfo.valueList = cpp_method: AppendNew
RuntimeInfo.description = cpp_method: GetRef
FunctionCallStartingInfo.argumentList = cpp_method: AppendNew
FunctionCallCompletedInfo.argumentList = cpp_method: AppendNew
Value.str = cpp_method: GetRef

NodeInfo.eventListenerList = cpp_method: AppendNew
EventListener.eventType = cpp_method: SetStringPtr, SetUniStringPtr

FunctionPositionList.functionPositionList = cpp_method: AppendNew

EventTargets.targetList = cpp_method: AppendNew
EventTarget.eventListenerList = cpp_method: AppendNew

# Async commands
EcmascriptDebugger.Eval = cpp_response: deferred
EcmascriptDebugger.ExamineObjects = cpp_response: deferred

# UrlPlayer

[UrlPlayer.options]
UrlPlayer = cpp_file: urlplayer_command;
            cpp_class: OpScopeUrlPlayer;
            cpp_feature: SCOPE_URL_PLAYER;

# WidgetManager

[WidgetManager.options]
WidgetManager = cpp_file: scope_widget_manager;
                cpp_class: OpScopeWidgetManager;
                cpp_feature: SCOPE_WIDGET_MANAGER_SUPPORT;

Settings.localeList = cpp_method: AppendNew

WidgetList.widgetList = cpp_method: AppendNew
Widget.widgetID =  cpp_method: GetRef
Widget.Properties.fileName = cpp_method: GetRef
Widget.Properties.disabledDetails = cpp_method: GetRef
Widget.Properties.downloadURL = cpp_method: GetRef
Widget.featureList = cpp_method: AppendNew
Widget.instanceList = cpp_method: AppendNew
Widget.iconList = cpp_method: AppendNew
Widget.preferenceList = cpp_method: AppendNew
Widget.licenseList = cpp_method: AppendNew
Widget.networkAccessList = cpp_method: AppendNew
Widget.namespace = cpp_method: GetRef
Widget.securityAccessList = cpp_method: AppendNew,GetRef
Widget.SecurityAccess.protocolList = cpp_method: AppendNew
Widget.SecurityAccess.hostList = cpp_method: AppendNew
Widget.SecurityAccess.portList = cpp_method: AppendNew
Widget.SecurityAccess.pathList = cpp_method: AppendNew
Widget.userJSList = cpp_method: AppendNew

Widget.Feature.paramList = cpp_method: AppendNew
Widget.Server.serverURL = cpp_method: GetRef

WidgetUninstalled.widgetID = cpp_method: GetRef

# Async commands
WidgetManager.CheckWidgetUpdate = cpp_response: deferred
WidgetManager.InstallWidgetByURL = cpp_response: deferred
WidgetManager.UpdateWidget = cpp_response: deferred
WidgetManager.UninstallWidget = cpp_response: deferred


# WindowManager

[WindowManager.options]
WindowManager = cpp_file: scope_window_manager;
                cpp_class: OpScopeWindowManager;
                cpp_feature: SCOPE_WINDOW_MANAGER_SUPPORT;

# Ecmascript

[Ecmascript.options]
Ecmascript = cpp_file: scope_ecmascript;
             cpp_class: OpScopeEcmascript;
             cpp_feature: SCOPE_ECMASCRIPT;

# Async commands
Ecmascript.Eval = cpp_response: deferred
Ecmascript.ExamineObjects = cpp_response: deferred
ObjectList.prototypeList = cpp_method: AppendNew
PrototypeChain.objectList = cpp_method: AppendNew
Object.className = cpp_method: SetStringPtr, SetUniStringPtr
Object.propertyList = cpp_method: AppendNew
EvalResult.Status.NO_MEMORY = cpp_name: STATUS_OOM
