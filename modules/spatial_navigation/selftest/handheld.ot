group "spatnav.handheld";

require _SPAT_NAV_SUPPORT_;
require initialization;

language c++;

require _SPAT_NAV_SUPPORT_;

include "modules/spatial_navigation/sn_handler.h";
include "modules/doc/html_doc.h";
include "modules/doc/frm_doc.h";

html {
	//! <html>
	//! <h1 id=a href="">A</h1>
	//! <h2 id=b href="">B</h2>
	//! </html>
}

global
{
	Window* window = NULL;
	LayoutMode previous_layout_mode = LAYOUT_NORMAL;
}

table link_elements(const uni_char*)
{
	{ UNI_L("a") }
	{ UNI_L("b") }
}

test("testing handheld mode")
{
	// Init
	FramesDocument* doc = state.doc;
	verify(doc != NULL);

	OpAutoPtr<OpSnHandler>handler;
	handler = OP_NEW(SnHandler, ());
	verify(handler.get() != NULL);

	window = doc->GetWindow();
	verify(window != NULL);
	// Handheld mode will test the two way algorithm (unless 
	// TWEAK_SPATNAV_4WAY_NAVIGATION is enabled)
	previous_layout_mode = window->GetLayoutMode();
	window->SetLayoutMode(LAYOUT_CSSR);
	verify(window->GetHandheld());

	verify(handler->Init(window) == OpStatus::OK);

	// check that it finds all navigatable elements
	iterate (link_elem) from link_elements
	{
		verify(handler->MarkNextHeadingInDirection(DIR_DOWN, NULL));

		HTML_Element* helm = handler->GetActiveLink();
		verify(helm != NULL);
		verify(helm->GetId());
		verify(uni_strcmp(helm->GetId(), link_elem) == 0);
	}

	// Make sure it doesn't find anything else
	verify(handler->MarkNextItemInDirection(DIR_DOWN, NULL) == FALSE);
}
finally
{
	// have to reset layout mode when we're done
	if (window)
		window->SetLayoutMode(previous_layout_mode);
}
