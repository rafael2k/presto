// -*- Mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
//
// Copyright (C) Opera Software AS.  All rights reserved.
//
// This file is part of the Opera web browser.  It may not be distributed
// under any circumstances.


group "spatnav.highlight_on_load";

require _SPAT_NAV_SUPPORT_;
require initialization;

language c++;

require _SPAT_NAV_SUPPORT_;

include "modules/spatial_navigation/sn_handler.h";
include "modules/doc/html_doc.h";
include "modules/doc/frm_doc.h";
include "modules/windowcommander/src/WindowCommander.h";

global
{
	OpSnHandler* handler;
	Window* window;
}

test("Init")
{
	handler = NULL;
	window = g_selftest.utils->GetWindow(); 
	verify(window);

	handler = window->GetSnHandlerConstructIfNeeded(); 
	verify(handler);
	handler->SetHighlightOnLoad(TRUE);
}

exit
{
	if (handler)
	{
#ifndef SN_HIGHLIGHT_ON_LOAD
		handler->SetHighlightOnLoad(FALSE);
#endif // SN_HIGHLIGHT_ON_LOAD
	}
}

html
{
	//! <!doctype html>
	//! <html>
	//! <frameset rows="30,*">
	//! <frame src="data:text/html,
	//!   <html>
	//!   <style>
	//!     div { height:10000px; }
	//!   </style>
	//!   <div>
	//!   </div>
	//!   <a id='pass' href=''>PASS</a>
	//!   </html>">
	//! <frame src="data:text/html,
	//!   <html>
	//!   <a id='fail' href=''>FAIL</a>
	//!   </html>">
	//! </frameset>
	//! <html>
}

test("Don't focus other frames")
require success("Init");
{
	// Have to rewrite test if this is not always TRUE.  But not a failure of the actual test
	verify(handler == state.doc->GetWindow()->GetSnHandler());

	// Highlight on load should not focus the second frame, so that when we start navigating
	// we should find the link in the first frame first (which means we have to scroll it first).

	// First check that nothing is focused by the initial highlight on load
	// because the <div> element is too tall and pushes the link outside the viewport.
	// Note: the div needs to be 5x taller than the default frame size because of the smart frames
	// layout done in the smartphone profile.
	verify(handler->GetActiveLink() == NULL);

	// Check that the first element we do find (after scrolling) is the one in the first frame
	while (handler->MarkNextItemInDirection(DIR_DOWN, NULL) && !handler->GetActiveLink())
		/* empty body */;
	
	verify(handler->GetActiveLink());
	verify_string(handler->GetActiveLink()->GetId(), "pass");
}
