group "spatnav.frames";

require _SPAT_NAV_SUPPORT_;
require initialization;

language c++;

require _SPAT_NAV_SUPPORT_;

include "modules/spatial_navigation/sn_handler.h";
include "modules/doc/html_doc.h";
include "modules/doc/frm_doc.h";

html {
	//! <html>
	//! <frameset rows="50%, 50%">
	//!   <frame src="data:text/html,<html><a href='' id=a>A</a></html>">
	//!   <frame src="data:text/html,<html><a href='' id=b>B</a></html>">
	//! </frameset>
	//! </html>
}

table link_elements(const uni_char*)
{
	{ UNI_L("a") }
	{ UNI_L("b") }
}

test("testing frames navigation")
{
	// Init
	FramesDocument* doc = state.doc;
	verify(doc != NULL);

	OpAutoPtr<OpSnHandler>handler;
	handler = OP_NEW(SnHandler, ());
	verify(handler.get() != NULL);

	Window* window = doc->GetWindow();
	verify(window != NULL);

	verify(handler->Init(window) == OpStatus::OK);

	// check that it finds all navigatable elements
	iterate (link_elem) from link_elements
	{
		HTML_Element* helm = handler->GetActiveLink();
		while (handler->MarkNextItemInDirection(DIR_DOWN, NULL) && helm == handler->GetActiveLink())
			/* empty body - skips scrolling */;

		helm = handler->GetActiveLink();
		if (helm)
		{
			verify(helm->GetId());
			verify(link_elem != NULL);
			verify(uni_strcmp(helm->GetId(), link_elem) == 0);
		}
		else
			verify(link_elem == NULL);  // only the second navigation should return NULL (when we're exiting the first frame
	}

	// Make sure it doesn't find anything else
	verify(handler->MarkNextItemInDirection(DIR_DOWN, NULL) == FALSE);
}


// Some really nasty code with a frame inside an iframe using data URLs
html {
        //! <html>
        //! <frameset rows="*" cols=*">
        //!     <frame src="data:text/html,<html><frameset rows=&quot;*&quot;
        //! cols=&quot;*&quot;><frame src=&quot;data:text/html,<html><body><p><a id=frame href=''>You should be able to select this link by spatnav</a></p></body></html>&quot;</frame></frameset>">
        //! </frameset><br>
        //! </html>
}

table expected_ids2(const uni_char*)
{
	{ UNI_L("frame") }
}

test("frame inside frame")
{
	// Init
	FramesDocument* doc = state.doc;
	verify(doc != NULL);

	SnHandler handler;

	Window* window = doc->GetWindow();
	verify(window != NULL);

	verify(handler.Init(window) == OpStatus::OK);

	// check that we're able to navigate to all the links
	iterate (expected) from expected_ids2
	{
		BOOL more = TRUE;
		while ((more = handler.MarkNextItemInDirection(DIR_DOWN, NULL)))
		{
			HTML_Element* helm = handler.GetActiveLink();
			if (helm && uni_str_eq(helm->GetId(), expected))
				break;  // found the one we're looking for
		}

		verify(more);  // should be possible to navigate more as long as we haven't found all links
	}
}
