/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */

group "spatnav.css3navigation";

require _SPAT_NAV_SUPPORT_;
require initialization;

language c++;

include "modules/spatial_navigation/sn_handler.h";
include "modules/doc/html_doc.h";
include "modules/doc/frm_doc.h";
include "modules/logdoc/htm_elm.h";
include "modules/layout/content/scrollable.h";
include "modules/layout/box/box.h";
include "modules/selftest/src/doc_st_utils.h";

test("PRECONDITION: AHEM")
{
	short font_number = styleManager->GetFontNumber(UNI_L("AHEM"));
	verify(font_number != -1);
}

html
{
//!<!DOCTYPE html>
//!<html>
//!<head>
//!<style type="text/css">
//!*
//!{
//!	margin:0;
//!	padding:0;
//!	font-size:20px;
//! font-family:'Ahem';
//!	line-height:25px;
//!}
//!
//!#first
//!{
//!	nav-down: #second;
//!}
//!
//!#second
//!{
//!	nav-up: #first;
//!	nav-down: #third;
//!}
//!
//!#third
//!{
//!	nav-up: #second;
//!}
//!
//!body > div
//!{
//!	overflow-y:auto;
//!	overflow-x:hidden;
//!	height:50px;
//!	width:100px;
//!}
//!
//!div > div
//!{
//!	width:100px;
//!	height:100px;
//!}
//!</style>
//!</head>
//!
//!<body>
//!
//!<a id="first" href="#">1</a>
//!
//!<div>
//!	<div>
//!		<a id="second" href="#">2</a><br />
//!		<a id="third" href="#">3</a>
//!	</div>
//!</div>
//!
//!</body>
//!</html>
}
test("scrollable with fully visible elements")
	require success "PRECONDITION: AHEM";
{
	OpAutoPtr<SnHandler> handler;
	Window* window;
	HTML_Element* helm;
	ScrollableArea* scrollable;

	handler = OP_NEW(SnHandler, ());
	verify(handler.get() != NULL);

	window = state.GetWindow();
	verify(window != NULL);

	verify(handler->Init(window) == OpStatus::OK);

#ifndef SN_HIGHLIGHT_ON_LOAD
	verify(handler->MarkNextItemInDirection(DIR_DOWN, NULL));
#endif // SN_HIGHLIGHT_ON_LOAD

	// 1st navigation should highlight #first anchor (outside scrollable)
	helm = handler->GetActiveLink();
	verify(helm);
	verify(!handler->activeScrollable);
	verify_string(helm->GetId(), "first");

	// 2nd navigation should highlight #second anchor and enter the scrollable
	verify(handler->MarkNextItemInDirection(DIR_DOWN, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify(handler->activeScrollable);
	verify_string(helm->GetId(), "second");

	// 3rd navigation should highlight #third anchor and shouldn't scroll the scrollable
	verify(handler->MarkNextItemInDirection(DIR_DOWN, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify(handler->activeScrollable);
	scrollable = handler->activeScrollable->GetLayoutBox() ?  handler->activeScrollable->GetLayoutBox()->GetScrollable() : NULL;
	verify(scrollable && scrollable->GetViewY() == 0);
	verify_string(helm->GetId(), "third");

	// 4th navigation should scroll the scrollable and #third should be still highlighted (though partially visible)
	verify(handler->MarkNextItemInDirection(DIR_DOWN, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify(handler->activeScrollable);
	scrollable = handler->activeScrollable->GetLayoutBox() ?  handler->activeScrollable->GetLayoutBox()->GetScrollable() : NULL;
	verify(scrollable && scrollable->GetViewY() > 0);
	verify_string(helm->GetId(), "third");

	// 5th navigation, starting up should highlight #second link again and scroll to it (as it is nav-up prop element).
	verify(handler->MarkNextItemInDirection(DIR_UP, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify(handler->activeScrollable);
	scrollable = handler->activeScrollable->GetLayoutBox() ?  handler->activeScrollable->GetLayoutBox()->GetScrollable() : NULL;
	verify(scrollable && scrollable->GetViewY() == 0);
	verify_string(helm->GetId(), "second");

	// 6th navigation should highlight #first and leave the scrollable
	verify(handler->MarkNextItemInDirection(DIR_UP, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify(!handler->activeScrollable);
	verify_string(helm->GetId(), "first");
}

html
{
//!<!DOCTYPE html>
//!<html>
//!<head>
//!<style type="text/css">
//!*
//!{
//!	margin:0;
//!	padding:0;
//!	font-size:20px;
//! font-family:'Ahem';
//!	line-height:25px;
//!}
//!
//!#first
//!{
//!	nav-down: #second;
//!}
//!
//!#second
//!{
//!	nav-up: #first;
//!	nav-down: #third;
//!}
//!
//!#third
//!{
//!	nav-up: #second;
//!}
//!
//!body > div
//!{
//!	overflow-y:auto;
//!	overflow-x:hidden;
//!	height:40px;
//!	width:100px;
//!}
//!
//!div > div
//!{
//!	width:100px;
//!	height:100px;
//!}
//!</style>
//!</head>
//!
//!<body>
//!
//!<a id="first" href="#">1</a>
//!
//!<div>
//!	<div>
//!		<a id="second" href="#">2</a><br />
//!		<a id="third" href="#">3</a>
//!	</div>
//!</div>
//!
//!</body>
//!</html>
}
test("scrollable with partially visible element")
	require success "PRECONDITION: AHEM";
{
	OpAutoPtr<SnHandler> handler;
	Window* window;
	HTML_Element* helm;
	ScrollableArea* scrollable;

	handler = OP_NEW(SnHandler, ());
	verify(handler.get() != NULL);

	window = state.GetWindow();
	verify(window != NULL);

	verify(handler->Init(window) == OpStatus::OK);

#ifndef SN_HIGHLIGHT_ON_LOAD
	verify(handler->MarkNextItemInDirection(DIR_DOWN, NULL));
#endif // SN_HIGHLIGHT_ON_LOAD

	// 1st navigation should highlight #first anchor (outside scrollable)
	helm = handler->GetActiveLink();
	verify(helm);
	verify(!handler->activeScrollable);
	verify_string(helm->GetId(), "first");

	// 2nd navigation should highlight #second anchor and enter the scrollable
	verify(handler->MarkNextItemInDirection(DIR_DOWN, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify(handler->activeScrollable);
	verify_string(helm->GetId(), "second");

	// 3rd navigation should highlight #third anchor and should scroll so that it is fully visible
	verify(handler->MarkNextItemInDirection(DIR_DOWN, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify_string(helm->GetId(), "third");
	verify(handler->activeScrollable);
	Box* scrollable_box = handler->activeScrollable->GetLayoutBox(), *elm_box = helm->GetLayoutBox();
	RECT scrollable_rect, elm_rect;

	verify(scrollable_box && elm_box);
	scrollable = scrollable_box->GetScrollable();
	verify(scrollable && scrollable->GetViewY() > 0);

	verify(scrollable_box->GetBBox(state.doc, PADDING_BOX, scrollable_rect));
	verify(elm_box->GetBBox(state.doc, BORDER_BOX, elm_rect));

	// The #third's rect should be fully visible and more-less in the middle
	OpRect(&scrollable_rect).Contains(OpRect(&elm_rect));
	verify(elm_rect.top - scrollable_rect.top > 5);
	verify(scrollable_rect.bottom - elm_rect.bottom > 5);

	// 4th navigation up should highlight #second anchor and should scroll back so that it is fully visible
	verify(handler->MarkNextItemInDirection(DIR_UP, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify_string(helm->GetId(), "second");
	verify(handler->activeScrollable);
	scrollable = handler->activeScrollable->GetLayoutBox() ?  handler->activeScrollable->GetLayoutBox()->GetScrollable() : NULL;
	verify(scrollable && scrollable->GetViewY() == 0);

	// 5th navigation up should highlight #first and leave the scrollable
	verify(handler->MarkNextItemInDirection(DIR_UP, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify_string(helm->GetId(), "first");
	verify(!handler->activeScrollable);
}

table dummy(const char *) filelist "tests/css3_iframe" recursively;

test("PRECONDITION: load test doc with iframe") async;
	file uni iframe_doc "tests/css3_iframe/invisible_elm_iframe.htm";
{
	Window* win = state.GetWindow();
	if (!win)
		ST_failed("No window!");
	else
		WaitUntilLoadedObj::LoadAndWaitUntilLoaded(win, iframe_doc);
}

test("iframe with invisible element")
	require success "PRECONDITION: load test doc with iframe";
{
	OpAutoPtr<SnHandler> handler;
	Window* window;
	HTML_Element* helm;
	FramesDocument* top_doc = state.doc;

	verify(top_doc);
	handler = OP_NEW(SnHandler, ());
	verify(handler.get() != NULL);

	window = state.GetWindow();
	verify(window != NULL);

	verify(handler->Init(window) == OpStatus::OK);

#ifndef SN_HIGHLIGHT_ON_LOAD
	verify(handler->MarkNextItemInDirection(DIR_DOWN, NULL));
#endif // SN_HIGHLIGHT_ON_LOAD

	// 1st navigation should highlight #first anchor (in top document)
	helm = handler->GetActiveLink();
	verify(helm);
	verify(window->GetActiveFrameDoc() == top_doc);
	verify_string(helm->GetId(), "first");

	/* 2nd navigation should highlight #second anchor inside the iframe
	   and make it well visible. We can test whether the viewport of the iframe
	   has reached the right edge, because the #second anchor is enough close
	   and the current method is to place the highlighted element in the middle
	   if not fully visible. */

	verify(handler->MarkNextItemInDirection(DIR_RIGHT, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify_string(helm->GetId(), "second");
	FramesDocument* iframe_doc = window->GetActiveFrameDoc();
	verify(iframe_doc != top_doc);

	OpRect vis_viewport = iframe_doc->GetVisualViewport();
	verify(vis_viewport.Right() == iframe_doc->Width());

	// 3rd navigation should highlight #third anchor (in the iframe)
	verify(handler->MarkNextItemInDirection(DIR_RIGHT, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify_string(helm->GetId(), "third");
	verify(window->GetActiveFrameDoc() != top_doc);

	// 4th navigation should highlight #second anchor again
	verify(handler->MarkNextItemInDirection(DIR_LEFT, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify_string(helm->GetId(), "second");
	verify(window->GetActiveFrameDoc() != top_doc);

	// 5th navigation should highlight #first anchor again (go out of iframe)
	verify(handler->MarkNextItemInDirection(DIR_LEFT, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify_string(helm->GetId(), "first");
	verify(window->GetActiveFrameDoc() == top_doc);
}

html
{
//!<!DOCTYPE html>
//!<html>
//!<head>
//!<style>
//!
//!#normal_anchor
//!{
//!	nav-right:#empty_anchor;
//!}
//!
//!#empty_anchor
//!{
//!	nav-down:#block_anchor;
//!}
//!
//!#block_anchor
//!{
//!	display:block;
//!	nav-down:#empty_anchor2;
//!}
//!
//!</style>
//!</head>
//!
//!<body>
//!
//!<a href ="#" id="normal_anchor">X</a><a href ="#" id="empty_anchor"></a>
//!
//!<a href="#" id="block_anchor"></a>
//!
//!<a href ="#" id="empty_anchor2"></a>
//!
//!<a href ="#" id="normal_anchor2">X</a>
//!
//!</body>
//!</html>
}
test("Navigation involving elements with empty rectangles")
{
	OpAutoPtr<SnHandler> handler;
	Window* window;
	HTML_Element* helm;
	FramesDocument* top_doc = state.doc;

	verify(top_doc);
	handler = OP_NEW(SnHandler, ());
	verify(handler.get() != NULL);

	window = state.GetWindow();
	verify(window != NULL);

	verify(handler->Init(window) == OpStatus::OK);

#ifndef SN_HIGHLIGHT_ON_LOAD
	verify(handler->MarkNextItemInDirection(DIR_DOWN, NULL));
#endif // SN_HIGHLIGHT_ON_LOAD

	// 1st navigation should highlight #normal_anchor
	helm = handler->GetActiveLink();
	verify(helm);
	verify_string(helm->GetId(), "normal_anchor");

	// 2nd navigation should go to empty_anchor (CSS3 property)
	verify(handler->MarkNextItemInDirection(DIR_RIGHT, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify_string(helm->GetId(), "empty_anchor");

	// 3rd navigation should go to block_anchor (CSS3 property)
	verify(handler->MarkNextItemInDirection(DIR_DOWN, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify_string(helm->GetId(), "block_anchor");

	// 4th navigation should go to empty_anchor2 (CSS3 property)
	verify(handler->MarkNextItemInDirection(DIR_DOWN, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify_string(helm->GetId(), "empty_anchor2");

	/* 5th navigation up should go back to normal_anchor (not normal_anchor2!)
	   Search origin from empty_anchor2 should be used. */
	verify(handler->MarkNextItemInDirection(DIR_UP, NULL));
	helm = handler->GetActiveLink();
	verify(helm);
	verify_string(helm->GetId(), "normal_anchor");
}
