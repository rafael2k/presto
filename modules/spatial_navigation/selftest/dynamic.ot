// -*- Mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
//
// Copyright (C) Opera Software AS.  All rights reserved.
//
// This file is part of the Opera web browser.  It may not be distributed
// under any circumstances.


group "spatnav.dynamic";

require _SPAT_NAV_SUPPORT_;
require initialization;

language c++;

require _SPAT_NAV_SUPPORT_;

include "modules/spatial_navigation/sn_handler.h";
include "modules/doc/html_doc.h";
include "modules/doc/frm_doc.h";

html
{
	//! <!doctype html>
	//! <html>
	//! <style>
	//! #container {
	//! 	height: 3em;
	//! 	overflow-y: scroll;
	//! }
	//! #filler {
	//! 	height: 0em;
	//! }
	//! </style>
	//! <script>
	//! function grow()
	//! {
	//! 	var elm = document.getElementById('filler');
	//! 	elm.style.height = "5em";
	//! }
	//! </script>
	//! 
	//! <div id="container">
	//!   <a href="" onmouseover="grow()">grow</a>
	//!   <div id="filler">
	//!   </div>
	//!   <a href="" id="pass">PASS</a>
	//! </div>
	//! </html>
}

test("appearing scrollable")
{
	Window* window = state.doc->GetWindow(); 
	verify(window);
	
	OpSnHandler* handler = window->GetSnHandlerConstructIfNeeded(); 
	verify(handler);

	// navigate past trigger to grow function
	for (int i = 0; i < 2; i++)
		verify(handler->MarkNextItemInDirection(DIR_DOWN, NULL));
	
	while (!handler->GetActiveLink() && handler->MarkNextItemInDirection(DIR_DOWN, NULL))
		/* empty body */;

	// Check that we're able to navigate to the pass link, even after it has been moved
	// to the end of a scrollable
	verify(handler->GetActiveLink());
	const uni_char* id = handler->GetActiveLink()->GetId();
	verify(id);
	verify_string(id, "pass");
}

html
{
	//! <!doctype html>
	//! <html>
	//! <style>
	//! #container {
	//! 	height: 3em;
	//! 	overflow-y: scroll;
	//! }
	//! #filler {
	//! 	height: 3em;
	//! }
	//! #bigfiller {
	//! 	height: 10em;
	//! }
	//! </style>
	//! <script>
	//! function grow()
	//! {
	//! 	var elm = document.getElementById('container');
	//! 	elm.style.height = "8em";
	//! }
	//! </script>
	//! 
	//! <div id="container2">
	//! 	<a id="grow" href="" onmouseover="grow()">Grow</a>
	//! 	<div id="filler"></div>
	//! 	<a id="pass" href="">PASS</a>
	//! 	<div id="bigfiller"></div>
	//! </div>
	//! </html>
}

table expected_elements(const char*) {
	{ "grow" }
	{ "pass" }
}

test("Growing scrollable")
{
	Window* window = state.doc->GetWindow(); 
	verify(window);
	
	OpSnHandler* handler = window->GetSnHandlerConstructIfNeeded(); 
	verify(handler);

	iterate (expected_id) from expected_elements
	{
		verify(handler->MarkNextItemInDirection(DIR_DOWN, NULL, FALSE));
		verify(handler->GetActiveLink());
		const uni_char* id = handler->GetActiveLink()->GetId(); 
		verify(id);
		verify_string(id, expected_id);
	}
}
