/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2003-2006 Opera Software AS.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Karlsson
*/

group "prefsfile.ini.version1";
require PREFS_HAS_PREFSFILE;
require undefined HAVE_NO_OPMEMFILE;

include "modules/prefsfile/prefsfile.h";
include "modules/prefsfile/accessors/ini.h";
include "modules/util/excepts.h";
include "modules/util/opfile/opmemfile.h";

// -- Global variables ---------------------------------------------------

global
{
	PrefsFile *pfp;
	OpMemFile *ofp;
	const char *inip;
}

setup
{
	pfp = NULL;
	ofp = NULL;

	/* Create a file object for the testsuite version 1 prefsfile */
	static const unsigned char ini[] =
	//![Section1]
	//!Key1=Value1
	//!Key2=Value2
	//!
	//![Section2]
	//!Key1="Value1"
	//!Key2="Value2"
	;

	ofp = OpMemFile::Create(ini, long(sizeof ini));
	inip = reinterpret_cast<const char *>(ini);
}

// -- Tests --------------------------------------------------------------

test("IniAccessor::IsRecognizedHeader")
	require UPGRADE_SUPPORT;
{
	verify(IniAccessor::HeaderNotRecognized == IniAccessor::IsRecognizedHeader(inip, op_strlen(inip)));
}

test("PrefsFile::ConstructL")
{
	pfp = new PrefsFile(PREFS_INI);
	TRAPD(rc, pfp->ConstructL());
	verify(OpStatus::IsSuccess(rc));
}

test("PrefsFile::SetFileL")
	require success "PrefsFile::ConstructL";
{
	TRAPD(rc, pfp->SetFileL(ofp));
	verify(OpStatus::IsSuccess(rc));

	OpFileDescriptor *dp = pfp->GetFile();
	verify(dp != NULL);
}

test("PrefsFile::LoadAllL")
	require success "PrefsFile::SetFileL";
{
	TRAPD(rc, pfp->LoadAllL());
	verify(OpStatus::IsSuccess(rc));
}


table prefsdata(const uni_char *, const uni_char *, const uni_char *)
{
	{ UNI_L("Section1"), UNI_L("Key1"), UNI_L("Value1") },
	{ UNI_L("Section1"), UNI_L("Key2"), UNI_L("Value2") },
	{ UNI_L("Section2"), UNI_L("Key1"), UNI_L("Value1") },
	{ UNI_L("Section2"), UNI_L("Key2"), UNI_L("Value2") },
}

test("PrefsFile::ReadStringL (OpStringC, uni_char key)")
	require success "PrefsFile::LoadAllL";
{
	OpStringC s;

	iterate(section, key, value) from prefsdata
	{
		TRAPD(rc, s = pfp->ReadStringL(section, key));
		verify(OpStatus::IsSuccess(rc));
		verify(s.Compare(value) == 0);
	}
}

test("PrefsFile::ReadStringL (OpString, uni_char key)")
	require success "PrefsFile::LoadAllL";
{
	OpString s;

	iterate(section, key, value) from prefsdata
	{
		TRAPD(rc, pfp->ReadStringL(section, key, s));
		verify(OpStatus::IsSuccess(rc));
		verify(s.Compare(value) == 0);
	}
}

test("PrefsFile::ReadStringL (OpStringC, ASCII key)")
	require success "PrefsFile::LoadAllL";
{
	OpStringC s;

	iterate(section, key, value) from prefsdata
	{
		const char *section8 = ST_down(section);
		const char *key8     = ST_down(key);
		TRAPD(rc, s = pfp->ReadStringL(section8, key8));
		verify(OpStatus::IsSuccess(rc));
		verify(s.Compare(value) == 0);
	}
}

test("PrefsFile::ReadStringL (OpString, ASCII key)")
	require success "PrefsFile::LoadAllL";
{
	OpString s;

	iterate(section, key, value) from prefsdata
	{
		const char *section8 = ST_down(section);
		const char *key8     = ST_down(key);
		TRAPD(rc, pfp->ReadStringL(section8, key8, s));
		verify(OpStatus::IsSuccess(rc));
		verify(s.Compare(value) == 0);
	}
}

// -- Global cleanup -----------------------------------------------------

exit
{
	delete pfp;
	delete ofp;
}
