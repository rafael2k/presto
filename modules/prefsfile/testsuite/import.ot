/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2007-2011 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

group "prefsfile.import";
require PREFSFILE_IMPORT;
require undefined HAVE_NO_OPMEMFILE;

include "modules/prefsfile/prefsfile.h";
include "modules/util/opfile/opmemfile.h";

// -- Global variables ---------------------------------------------------

global
{
	PrefsFile *pfp, *destp;
	OpMemFile *omfp;
	OpFile *ofp;
	const char *inip;
}

setup
{
	pfp = NULL;
	destp = NULL;
	omfp = NULL;
	ofp = NULL;

	/* Create a file object for the testsuite version 2.1 prefsfile */
	static const unsigned char ini[] =
		"\xEF\xBB\xBF" /* UTF-8 BOM */
		//!Opera Preferences version 2.1
		//!
		//![Section]
		//!Key=Value
		;

	omfp = OpMemFile::Create(ini, long(sizeof ini));
	inip = reinterpret_cast<const char *>(ini);
	ofp = OP_NEW(OpFile, ());
}

// -- Tests --------------------------------------------------------------

test("Setup")
{
	verify(omfp);
	verify(ofp);

	// Set up source
	pfp = OP_NEW(PrefsFile, (PREFS_INI));
	verify(pfp);
	TRAPD(rc, pfp->ConstructL());
	verify(OpStatus::IsSuccess(rc));

	TRAP(rc, pfp->SetFileL(omfp));
	verify(OpStatus::IsSuccess(rc));

	TRAP(rc, pfp->LoadAllL());
	verify(OpStatus::IsSuccess(rc));

	// Need a file attached to the target to make it writable
	ofp->Construct(UNI_L("created.ini"), OPFILE_HOME_FOLDER);
	BOOL exists = FALSE;
	ofp->Exists(exists);
	if (exists)
	{
		ofp->Delete();
	}
}

test("Import")
	require success "Setup";
{
	OP_STATUS rc, rc2;

	destp = OP_NEW(PrefsFile, (PREFS_INI));
	verify(destp);
	TRAP(rc, destp->ConstructL());
	verify(OpStatus::IsSuccess(rc));
	TRAP(rc, destp->SetFileL(ofp));
	verify(OpStatus::IsSuccess(rc));

	// Create a value to overwrite
	TRAP(rc, rc2 = destp->WriteStringL("Section", "Key", UNI_L("Overwritten")));
	verify(OpStatus::IsSuccess(rc));
	verify(OpStatus::IsSuccess(rc2));

	// Import
	TRAP(rc, destp->ImportL(pfp));
	pfp = NULL;
	verify(OpStatus::IsSuccess(rc));

	// Check that value was overwritten
	OpString s;
	TRAP(rc, destp->ReadStringL("Section", "Key", s, NULL));
	verify(OpStatus::IsSuccess(rc));

	verify(s.Compare("Value") == NULL);
}

// -- Global cleanup -----------------------------------------------------

exit
{
	if (pfp) pfp->Reset();
	OP_DELETE(pfp);
	if (destp) destp->Reset();
	OP_DELETE(destp);
	OP_DELETE(omfp);
	OP_DELETE(ofp);
}
