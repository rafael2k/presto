/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2010 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Krefting
*/

group "prefsfile.ini.writable";
require initialization;
require OPMEMFILE_SUPPORT;
require PREFS_HAS_PREFSFILE;
require PREFSFILE_WRITE;

include "modules/prefsfile/prefsfile.h";
include "modules/util/opfile/opfile.h";
include "modules/util/opfile/opmemfile.h";

// -- Global variables ---------------------------------------------------

global
{
	class ReadonlyMemFile :
		public OpMemFile
	{
	public:
		virtual BOOL IsWritable() const { return FALSE; }
		virtual OP_STATUS Write(const void *, OpFileLength len)
		{ return OpStatus::ERR_NO_ACCESS; }
		virtual OpFileDescriptor *CreateCopy() const
		{ return OP_NEW(ReadonlyMemFile, ()); }
	};

	PrefsFile *pfp;
	ReadonlyMemFile *rmf;
}

setup
{
	pfp = NULL;
	rmf = NULL;
}

// -- Setup tests --------------------------------------------------------

test("Setup")
{
	verify((rmf = OP_NEW(ReadonlyMemFile, ())));
	verify((pfp = OP_NEW(PrefsFile, (PREFS_STD))));
	TRAPD(rc, pfp->ConstructL());
	verify(OpStatus::IsSuccess(rc));
	TRAP(rc, pfp->SetFileL(rmf));
	verify(OpStatus::IsSuccess(rc));
}

// -- Tests --------------------------------------------------------------

test("Allowed to change")
	require success "Setup";
	require PREFSFILE_CASCADE;
{
	OP_MEMORY_VAR BOOL allowed1 = FALSE, allowed2 = FALSE;
	TRAPD(rc, allowed1 = pfp->AllowedToChangeL(UNI_L("Foo"), UNI_L("Bar")));
	verify(OpStatus::IsSuccess(rc));
	TRAP(rc,  allowed2 = pfp->AllowedToChangeL(UNI_L("Foo")));
	verify(OpStatus::IsSuccess(rc));

#ifdef PREFSFILE_HONOR_READONLY
	verify(!allowed1);
	verify(!allowed2);
#else
	verify(allowed1);
	verify(allowed2);
#endif
}

test("Write")
	require success "Setup";
	require PREFSFILE_WRITE;
{
	OP_STATUS rc2 = OpStatus::OK;
	TRAPD(rc1, rc2 = pfp->WriteStringL(UNI_L("Foo"), UNI_L("Bar"), UNI_L("Baz")));
	verify(OpStatus::IsSuccess(rc1));

#ifdef PREFSFILE_HONOR_READONLY
	verify(OpStatus::IsError(rc2));
#else
	verify(OpStatus::IsSuccess(rc2));
#endif
}

// -- Global cleanup -----------------------------------------------------

exit
{
	pfp->Reset();
	OP_DELETE(pfp);
	OP_DELETE(rmf);
}
