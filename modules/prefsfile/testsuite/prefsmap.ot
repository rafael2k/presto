/* -*- Mode: c++; tab-width: 4; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2010-2010 Opera Software ASA.  All rights reserved.
 *
 * This file is part of the Opera web browser.
 * It may not be distributed under any circumstances.
 *
 * Markus Ottensmann
 */

group "prefsfile.api.prefsmap";

include "modules/prefsfile/impl/backend/prefsmap.h";
include "modules/prefsfile/impl/backend/prefssectioninternal.h";

test("PrefsMap create")
{
    PrefsMap empty_map;
    verify(0 == empty_map.FindSection(0));
    verify(0 == empty_map.FindSection(UNI_L("foo")));
}

test("PrefsMap::IncorporateL()")
require PREFSMAP_SECTION_HASH;
{
    // Create PrefsMap one with exactly PREFS_SECTIONS_BEFORE_HASH
    // entries, so the next call to PrefsMap::AddToSectionHashL()
    // should create a section hash:
    PrefsMap one;
    OpString name;
    // Create several sections in map one
    for (unsigned int i=0; i<PREFS_SECTIONS_BEFORE_HASH; ++i)
    {
        name.Empty();
        name.AppendFormat(UNI_L("one %d"), i);
        verify_trap(one.GetSectionL(name.CStr()));
    }

    // Create another PrefsMap other with two entries:
    PrefsMap other;
    PrefsSectionInternal* section_new=0;
    PrefsSectionInternal* section_other=0;
    verify_trap(section_new = other.GetSectionL(UNI_L("new")));
    verify_trap(section_other = other.GetSectionL(UNI_L("other")));

    // Incorporating other into one should move all entries from other
    // to one, and both new entries should be found in one:
    verify_trap(one.IncorporateL(&other));
    verify(section_new == one.FindSection(UNI_L("new")));
    verify(section_other == one.FindSection(UNI_L("other")));
}
