/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*-
**
** Copyright (C) 2006-2008 Opera Software ASA.  All rights reserved.
**
** This file is part of the Opera web browser.  It may not be distributed
** under any circumstances.
**
** Peter Karlsson
*/
group "prefsfile.api.prefsentry";

include "modules/prefsfile/prefsentry.h";
include "modules/prefsfile/impl/backend/prefsentryinternal.h";
include "modules/util/OpHashTable.h";
include "modules/prefsfile/impl/backend/prefshashfunctions.h";

// -- Global variables ---------------------------------------------------

global
{
	PrefsEntryInternal *entry1, *entry2;
	OpHashTable *hashtable;

	Head entries;
}

setup
{
	entry1 = NULL;
	entry2 = NULL;
	hashtable = NULL;
}

// -- Set up test environment --------------------------------------------

test("Setup")
{
	entry1 = OP_NEW(PrefsEntryInternal, ());
	verify(entry1);
	TRAPD(rc, entry1->ConstructL(UNI_L("Entry 1"), UNI_L("Value")));
	verify(OpStatus::IsSuccess(rc));
	entry1->Into(&entries);

	entry2 = OP_NEW(PrefsEntryInternal, ());
	verify(entry2);
	TRAP(rc, entry2->ConstructL(UNI_L("Entry 2"), NULL));
	verify(OpStatus::IsSuccess(rc));
	entry2->Into(&entries);

#ifdef PREFSMAP_USE_HASH
	hashtable = OP_NEW(OpHashTable, (g_opera->prefsfile_module.GetHashFunctions()));
	verify(hashtable);
#endif
}

// -- Publically exposed API ---------------------------------------------

test("PrefsEntry::Get()")
	require success "Setup";
	leakcheck;
{
	verify(uni_strcmp(entry1->Get(), UNI_L("Value")) == 0);
	verify(entry2->Get() == NULL);
}

test("PrefsEntry::Value()")
	require success "Setup";
	leakcheck;
{
	verify(uni_strcmp(entry1->Value(), UNI_L("Value")) == 0);
	verify(entry2->Value() == NULL);
}

test("PrefsEntry::Key()")
	require success "Setup";
	leakcheck;
{
	verify(uni_strcmp(entry1->Key(), UNI_L("Entry 1")) == 0);
	verify(uni_strcmp(entry2->Key(), UNI_L("Entry 2")) == 0);
}

test("PrefsEntry::Suc()")
	require success "Setup";
{
	PrefsEntry *pe1 = entry1;
	PrefsEntry *pe2 = entry2;
	verify(pe1->Suc() == pe2);
}

// -- Internal API -------------------------------------------------------

test("PrefsEntryInternal::SetL()")
	require success "Setup";
{
	// Allocate
	TRAPD(rc, entry2->SetL(UNI_L("New Value")));
	verify(OpStatus::IsSuccess(rc));
	verify(uni_strcmp(entry2->Get(), UNI_L("New Value")) == 0);

	// Longer
	TRAP(rc, entry2->SetL(UNI_L("New Longer Value")));
	verify(OpStatus::IsSuccess(rc));
	verify(uni_strcmp(entry2->Get(), UNI_L("New Longer Value")) == 0);

	// Shorter
	TRAP(rc, entry1->SetL(UNI_L("Vala")));
	verify(OpStatus::IsSuccess(rc));
	verify(uni_strcmp(entry1->Get(), UNI_L("Vala")) == 0);
}

test("PrefsEntryInternal::IsSameAs() case insensitive")
	require success "Setup";
	require undefined PREFSMAP_USE_HASH;
	require undefined PREFSMAP_USE_CASE_SENSITIVE;
	leakcheck;
{
	verify(entry1->IsSameAs(UNI_L("entry 1")));
	verify(entry2->IsSameAs(UNI_L("entry 2")));
}

test("PrefsEntryInternal::IsSameAs() case sensitive")
	require success "Setup";
	require undefined PREFSMAP_USE_HASH;
	require PREFSMAP_USE_CASE_SENSITIVE;
	leakcheck;
{
	verify(entry1->IsSameAs(UNI_L("Entry 1")));
	verify(entry2->IsSameAs(UNI_L("Entry 2")));
}

test("PrefsEntryInternal::IntoHashL()")
	require success "Setup";
	require PREFSMAP_USE_HASH;
{
	OpHashIterator * OP_MEMORY_VAR i = NULL;

	TRAPD(rc, entry1->IntoHashL(hashtable));
	verify(OpStatus::IsSuccess(rc));
	TRAP(rc, entry2->IntoHashL(hashtable));
	verify(OpStatus::IsSuccess(rc));

	i = hashtable->GetIterator();
	verify(i);
	verify(OpStatus::IsSuccess(i->First()));
	int n = 0;
	do
	{
		void *data = i->GetData();
		verify(data);
		verify(data == entry1 || data == entry2);

		rc = i->Next();
		++ n;
	} while (OpStatus::IsSuccess(rc));
	verify(n == 2);
}
finally
{
	OP_DELETE(i);
}

test("PrefsEntryInternal::OutOfHash()")
	require PREFSMAP_USE_HASH;
	require success "PrefsEntryInternal::IntoHashL()";
{
	entry1->OutOfHash(hashtable);
	entry2->OutOfHash(hashtable);

	OpHashIterator *i = hashtable->GetIterator();
	verify(i);
	verify(OpStatus::IsError(i->First()));
}
finally
{
	OP_DELETE(i);
}

test("PrefsEntryInternal::Suc()")
	require success "Setup";
{
	verify(entry1->Suc() == entry2);
}


// -- Global cleanup -----------------------------------------------------

exit
{
	if (entry1) entry1->Out();
	OP_DELETE(entry1);
	if (entry2) entry2->Out();
	OP_DELETE(entry2);
	OP_DELETE(hashtable);
}
